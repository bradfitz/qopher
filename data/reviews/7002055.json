{
	"description": "testing: add AllocsPerRun\n\nThis CL also replaces similar loops in other stdlib\npackage tests with calls to AllocsPerRun.\n\nFixes issue 4461.",
	"cc": [
		"minux.ma@gmail.com",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i suggest we also return AllocBytes.\n\ninstead of (*B).Allocs, i think we just need a way to enable\n-test.benchmem for a single benchmark, then most of the\nmallocs benchmarks could be simplified or eliminated\nentirely. what do you think?\n\nhttps://codereview.appspot.com/7002055/diff/9001/src/pkg/testing/allocs.go\nFile src/pkg/testing/allocs.go (right):\n\nhttps://codereview.appspot.com/7002055/diff/9001/src/pkg/testing/allocs.go#newcode23\nsrc/pkg/testing/allocs.go:23: func (b *B) Allocs(f func()) float64 {\ndo you want to set GOMAXPROCS to 1 here?\nif the user uses Allocs directly.\n\nhttps://codereview.appspot.com/7002055/diff/9001/src/pkg/testing/allocs.go#newcode25\nsrc/pkg/testing/allocs.go:25: defer b.StartTimer()\ni wonder if this function should keep the state of the timer?",
			"disapproval": false,
			"date": "2012-12-24 07:12:36.807410",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Monday, December 24, 2012, Kyle Lemons wrote:\r\n\r\n> On Mon, Dec 24, 2012 at 2:47 AM, minux <minux.ma@gmail.com<javascript:_e({}, 'cvml', 'minux.ma@gmail.com');>\r\n> > wrote:\r\n>\r\n>> On Monday, December 24, 2012, kevlar wrote:\r\n>>\r\n>>> A lot of the code that's trying to test allocations has to perform some\r\n>>> amount of setup or preallocation in order to reduce the scope of each\r\n>>> run to encompass only the code that should be being measured.\r\n>>\r\n>> yes, so imo tests should use AllocsPerRun.\r\n>>\r\n>>>\r\n>>> Adding the ability for a test (or benchmark) to specify that it wants a\r\n>>> memory profile to be printed out whenever it's run certainly sounds like\r\n>>> it would be useful, but I'm not sure if it addresses the cases here.\r\n>>>\r\n>> what if we mirror Start/StopTimer, and introduce Start/StopMallocsCount\r\n>> (the name is just quick thought) just for benchmarks?\r\n>>\r\n> That would certainly be doable; the benchmark is already keeping track.\r\n>  It seems best to do that in a separate CL though, as the changes at that\r\n> point would be largely orthogonal to this and it seems like a bigger\r\n> expansion of the exported API.\r\n>\r\ni think my proposal introduces too much flexibility as the code\r\nbenchmarked for time might not be the code benchmarked\r\nfor mallocs (i was worrying about the code after the main loop\r\nintroducing more mallocs).\r\n\r\nmaybe just a (*B).EnableMallocReport() suffice, and this can be\r\nadded in a new CL.\r\n",
			"disapproval": false,
			"date": "2012-12-24 08:39:30.559500",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi Kyle,\r\nWe also have these tests about mallocs, I think they will all be benefit\r\nfrom\r\nAllocsPerRun.\r\npkg/math/big/nat_test.go\r\npkg/net/http/chunked_test.go\r\npkg/net/http/httputil/chunked_test.go\r\npkg/net/rpc/server_test.go\r\npkg/path/filepath/path_test.go\r\npkg/path/path_test.go\r\npkg/strconv/strconv_test.go\r\npkg/time/time_test.go\r\n",
			"disapproval": false,
			"date": "2012-12-23 13:53:56.322630",
			"approval": false
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/12/24 07:12:36, minux wrote:\n> i suggest we also return AllocBytes.\nI just tried this out... I'm not sure I like it.  I think I'd need to make one argument or the other a uint64 instead of a float64 to make it harder to confuse the return values.  Another possibility would be to return a struct with run statistics, so the code would read testing.AllocsPerRun(N, f).Count or similar.  I'm open to suggestions.\n\n> instead of (*B).Allocs, i think we just need a way to enable\n> -test.benchmem for a single benchmark, then most of the\n> mallocs benchmarks could be simplified or eliminated\n> entirely. what do you think?\n\nOh, I just re-read your suggestion; not sure exactly what I saw the first time around.  I'll take a look at the uses of b.Allocs tomorrow; I think you may be right.",
			"disapproval": false,
			"date": "2012-12-24 07:57:07.191530",
			"approval": false
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Hi Kyle,\n> We also have these tests about mallocs, I think they will all be benefit\n> from\n> AllocsPerRun.\n> pkg/math/big/nat_test.go\nFor this one, would you suggest adding a second return parameter from Allocs(PerRun) that returns the average amount of memory allocated per run?  This would be the only invocation that would use it.\n\n> pkg/net/http/chunked_test.go\nI've modified this one; it's less of a transliteration than the others, so some scrutiny is probably merited to make sure it's testing what it was originally intended to test.\n\n> pkg/net/http/httputil/chunked_test.go\n... hmm.  Looks familiar ;-) ...\n\n> pkg/net/rpc/server_test.go\nDone.\n\n> pkg/path/filepath/path_test.go\nDone.\n\n> pkg/path/path_test.go\nDone.  Also familiar looking ;-).\n\n> pkg/strconv/strconv_test.go\nDone.\n\n> pkg/time/time_test.go\nDone.",
			"disapproval": false,
			"date": "2012-12-24 01:00:49.807800",
			"approval": false
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttp://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-12-23 02:20:46.857000",
			"approval": false
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "A lot of the code that's trying to test allocations has to perform some amount of setup or preallocation in order to reduce the scope of each run to encompass only the code that should be being measured.\n\nThere are a few (fmt, strconv) which use table driven tests wherein each row has a different number of allowable allocs.  A few more (path, path/filepath) are table-driven and want zero allocs (these could be separated away from the earlier parts of the test that do allocate and so would work), but I suspect that it would be most helpful to know precisely which of the paths caused Clean to allocate.\n\nAdding the ability for a test (or benchmark) to specify that it wants a memory profile to be printed out whenever it's run certainly sounds like it would be useful, but I'm not sure if it addresses the cases here.\n\nhttps://codereview.appspot.com/7002055/diff/9001/src/pkg/testing/allocs.go\nFile src/pkg/testing/allocs.go (right):\n\nhttps://codereview.appspot.com/7002055/diff/9001/src/pkg/testing/allocs.go#newcode23\nsrc/pkg/testing/allocs.go:23: func (b *B) Allocs(f func()) float64 {\nOn 2012/12/24 07:12:36, minux wrote:\n> do you want to set GOMAXPROCS to 1 here?\n> if the user uses Allocs directly.\n\nHmm.  I was thinking that the test harness only runs benchmarks with GOMAXPROCS=1, which now that I look at the code turns out to not be the case.\n\nShould I set/restore for both?\n\nhttps://codereview.appspot.com/7002055/diff/9001/src/pkg/testing/allocs.go#newcode25\nsrc/pkg/testing/allocs.go:25: defer b.StartTimer()\nOn 2012/12/24 07:12:36, minux wrote:\n> i wonder if this function should keep the state of the timer?\n\nI wanted the timer to be as close as possible to what it would be if you just called the function b.N times.  The difference between calling the code b.N times and running it through a closure via this method should theoretically amortize out to be just that of the closure call (which, depending on what you're measuring, could be statistically significant).  Is there a different approach that makes more sense?",
			"disapproval": false,
			"date": "2012-12-24 07:37:52.822130",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Monday, December 24, 2012, kevlar wrote:\r\n\r\n> A lot of the code that's trying to test allocations has to perform some\r\n> amount of setup or preallocation in order to reduce the scope of each\r\n> run to encompass only the code that should be being measured.\r\n\r\nyes, so imo tests should use AllocsPerRun.\r\n>\r\n>\r\n> Adding the ability for a test (or benchmark) to specify that it wants a\r\n> memory profile to be printed out whenever it's run certainly sounds like\r\n> it would be useful, but I'm not sure if it addresses the cases here.\r\n>\r\nwhat if we mirror Start/StopTimer, and introduce Start/StopMallocsCount\r\n(the name is just quick thought) just for benchmarks?\r\n",
			"disapproval": false,
			"date": "2012-12-24 07:47:41.501270",
			"approval": false
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Dec 24, 2012 at 2:47 AM, minux <minux.ma@gmail.com> wrote:\r\n\r\n> On Monday, December 24, 2012, kevlar wrote:\r\n>\r\n> A lot of the code that's trying to test allocations has to perform some\r\n>> amount of setup or preallocation in order to reduce the scope of each\r\n>> run to encompass only the code that should be being measured.\r\n>\r\n> yes, so imo tests should use AllocsPerRun.\r\n>\r\n>>\r\n>> Adding the ability for a test (or benchmark) to specify that it wants a\r\n>> memory profile to be printed out whenever it's run certainly sounds like\r\n>> it would be useful, but I'm not sure if it addresses the cases here.\r\n>>\r\n> what if we mirror Start/StopTimer, and introduce Start/StopMallocsCount\r\n> (the name is just quick thought) just for benchmarks?\r\n>\r\nThat would certainly be doable; the benchmark is already keeping track.  It\r\nseems best to do that in a separate CL though, as the changes at that point\r\nwould be largely orthogonal to this and it seems like a bigger expansion of\r\nthe exported API.\r\n",
			"disapproval": false,
			"date": "2012-12-24 08:02:57.926540",
			"approval": false
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I did some more experimenting today.\n\nI haven't figured out a way to return both the count and the average bytes with an API that I like unless I make two separate functions.  The main reason is that there are a dozen instances where we are caring about the number of allocations and only one in which we care about the number of bytes, and it's a regression test about a very specific bug.  It looks like I'm discarding an error if I make the byte size the second argument, and it seems strange to always discard the first argument as it should be the more important one.  For what it's worth, I'd prefer to leave it the way it is, and copy/paste AllocsPerRun with the requisite changes in the one place it's needed; if it turns out to be a common test in the future, it could be promoted to the testing package.\n\nI also tried getting rid of b.Allocs.  This seems the right way to go, as benchmem reports identical data to what Allocs reports:\nBenchmarkParser\t     500\t   4875246 ns/op\t  16.03 MB/s\t  591554 B/op\t    7995 allocs/op\n--- BENCH: BenchmarkParser\nparse_test.go:390: \t1 iterations, 8099 mallocs per iteration\nparse_test.go:390: \t100 iterations, 8053.72 mallocs per iteration\nparse_test.go:390: \t500 iterations, 7995.888 mallocs per iteration\nBenchmarkRawLevelTokenizer\t    5000\t    734455 ns/op\t 106.42 MB/s\t    4957 B/op\t      12 allocs/op\n--- BENCH: BenchmarkRawLevelTokenizer\ntoken_test.go:675: \t1 iterations, 12 mallocs per iteration\ntoken_test.go:675: \t100 iterations, 12.01 mallocs per iteration\ntoken_test.go:675: \t5000 iterations, 12.0296 mallocs per iteration\nBenchmarkLowLevelTokenizer\t    2000\t   1001182 ns/op\t  78.07 MB/s\t    5060 B/op\t      25 allocs/op\n--- BENCH: BenchmarkLowLevelTokenizer\ntoken_test.go:675: \t1 iterations, 25 mallocs per iteration\ntoken_test.go:675: \t100 iterations, 25.01 mallocs per iteration\ntoken_test.go:675: \t2000 iterations, 25.029 mallocs per iteration\nBenchmarkHighLevelTokenizer\t    1000\t   1636230 ns/op\t  47.77 MB/s\t  103299 B/op\t    3221 allocs/op\n--- BENCH: BenchmarkHighLevelTokenizer\ntoken_test.go:675: \t1 iterations, 3223 mallocs per iteration\ntoken_test.go:675: \t100 iterations, 3221.4 mallocs per iteration\ntoken_test.go:675: \t1000 iterations, 3221.277 mallocs per iteration\n\nI think I agree that an EnableMallocReport-like API will be sufficient for the benchmarks.  Only one (the parser benchmark in exp/html) seems to do significant allocation outside the loop (reading in the text file), and that can probably be done in an init() that is then used by the benchmark.",
			"disapproval": false,
			"date": "2012-12-25 07:57:17.701650",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"kevlar@google.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Why does the description mention (*B).Allocs? I don't see that anywhere.\n\nhttps://codereview.appspot.com/7002055/diff/15001/src/pkg/exp/html/token_test.go\nFile src/pkg/exp/html/token_test.go (right):\n\nhttps://codereview.appspot.com/7002055/diff/15001/src/pkg/exp/html/token_test.go#newcode631\nsrc/pkg/exp/html/token_test.go:631: // TODO(kevlar): Enable -test.benchmem for these benchmarks\nWhat does this mean?",
			"disapproval": false,
			"date": "2012-12-29 19:39:53.494420",
			"approval": false
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"kevlar@google.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/12/29 19:39:53, rsc wrote:\n> Why does the description mention (*B).Allocs? I don't see that anywhere.\n\nPer minux's suggestion, instead of having two functions (AllocsPerRun and (*B).Allocs) separately for testing and benchmarking, I removed (*B).Allocs and have marked where it was used with the TODO you mention below.  I'll update the description.\n\nThe malloc-counting loops that currently exist in the stdlib benchmarks print out results that are essentially the same as what is printed when you benchmark with -test.benchmem enabled, so the suggestion there was to provide (in another CL, so if we decide this is the route to go I'll file an issue and mention it from the TODOs) a (*B) method which enables that extra information to be printed for the benchmark within which it is called (vs test.benchmem. which enables it globally), similar to how calling (*B).SetBytes causes MB/s to be printed.\n\n> https://codereview.appspot.com/7002055/diff/15001/src/pkg/exp/html/token_test.go\n> File src/pkg/exp/html/token_test.go (right):\n> \n> https://codereview.appspot.com/7002055/diff/15001/src/pkg/exp/html/token_test.go#newcode631\n> src/pkg/exp/html/token_test.go:631: // TODO(kevlar): Enable -test.benchmem for\n> these benchmarks\n> What does this mean?",
			"disapproval": false,
			"date": "2012-12-30 00:50:14.340400",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Dec 25, 2012 at 3:57 PM, <kevlar@google.com> wrote:\r\n\r\n> I think I agree that an EnableMallocReport-like API will be sufficient\r\n> for the benchmarks.  Only one (the parser benchmark in exp/html) seems\r\n> to do significant allocation outside the loop (reading in the text\r\n> file), and that can probably be done in an init() that is then used by\r\n> the benchmark.\r\n>\r\nAs we already stop the malloc counts when timer is stopped, i think this\r\nis a non-issue now.\r\n\r\nI created https://codereview.appspot.com/7027046 for this proposal\r\nand converted the exp/html benchmarks to use the new API.\r\n",
			"disapproval": false,
			"date": "2012-12-30 20:01:26.460640",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"kevlar@google.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7002055/diff/26001/api/next.txt\nFile api/next.txt (right):\n\nhttps://codereview.appspot.com/7002055/diff/26001/api/next.txt#newcode1148\napi/next.txt:1148: pkg testing, func AllocsPerRun(int, func()) float64\nplease don't update api/next.txt with the same CL\nthat introduce the API.\nThis will help to reduce merge conflicts when we\nlatter cherry-pick the changesets.\n\nhttps://codereview.appspot.com/7002055/diff/26001/src/pkg/testing/allocs.go\nFile src/pkg/testing/allocs.go (right):\n\nhttps://codereview.appspot.com/7002055/diff/26001/src/pkg/testing/allocs.go#newcode22\nsrc/pkg/testing/allocs.go:22: memstats := new(runtime.MemStats)\nno need to allocate, just declare a new variable.\nvar memstats runtime.MemStats",
			"disapproval": false,
			"date": "2013-01-25 13:25:10.703070",
			"approval": false
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"kevlar@google.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nThere are two alloc-counting tests that didn't convert cleanly:\n\"bytes\" TestGrow - seems to be testing more than just the allocation\n\"math/big\" TestMulUnbalanced - the only instance in which the size is utilized, so it doesn't seem to justify the added API weight.  It's also only used in a regression test to exclude runaway memory, whereas most AllocsPerRun instances are trying to ensure known, efficient allocation behavior.",
			"disapproval": false,
			"date": "2013-01-25 08:48:50.632990",
			"approval": false
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"kevlar@google.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nOn 2013/01/25 13:25:10, minux wrote:\n> https://codereview.appspot.com/7002055/diff/26001/api/next.txt\n> File api/next.txt (right):\n> \n> https://codereview.appspot.com/7002055/diff/26001/api/next.txt#newcode1148\n> api/next.txt:1148: pkg testing, func AllocsPerRun(int, func()) float64\n> please don't update api/next.txt with the same CL\n> that introduce the API.\n> This will help to reduce merge conflicts when we\n> latter cherry-pick the changesets.\nAh, that makes sense.  I think I knew that but forgot...\n\n> https://codereview.appspot.com/7002055/diff/26001/src/pkg/testing/allocs.go\n> File src/pkg/testing/allocs.go (right):\n> \n> https://codereview.appspot.com/7002055/diff/26001/src/pkg/testing/allocs.go#newcode22\n> src/pkg/testing/allocs.go:22: memstats := new(runtime.MemStats)\n> no need to allocate, just declare a new variable.\n> var memstats runtime.MemStats\nDone.",
			"disapproval": false,
			"date": "2013-01-26 01:16:36.198090",
			"approval": false
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"kevlar@google.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nThanks for the comments!\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/math/big/nat_test.go\nFile src/pkg/math/big/nat_test.go (right):\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/math/big/nat_test.go#newcode169\nsrc/pkg/math/big/nat_test.go:169: func allocSizePerRun(runs int, f func()) float64 {\nOn 2013/01/30 17:55:41, rsc wrote:\n> I don't see any reason to change this file, and the change makes the test 100x\n> slower. Please revert.\n\nDone.\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/net/http/chunked_test.go\nFile src/pkg/net/http/chunked_test.go (right):\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/net/http/chunked_test.go#newcode59\nsrc/pkg/net/http/chunked_test.go:59: allocs := testing.AllocsPerRun(N, func() {\nOn 2013/01/30 17:55:41, rsc wrote:\n> This file is not noticeably better. Please revert.\n\nDone.\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/net/http/header_test.go\nFile src/pkg/net/http/header_test.go (right):\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/net/http/header_test.go#newcode179\nsrc/pkg/net/http/header_test.go:179: for i, f := 0, headerWriteSubsetFunc(); i < b.N; i++ {\nOn 2013/01/30 17:55:41, rsc wrote:\n> var testHeader = Header{\n>     \"Content-Length\": {\"123\"},\n>     \"Content-Type\":   {\"text/plain\"},\n>     \"Date\":           {\"some date at some time Z\"},\n>     \"Server\":         {\"Go http package\"},\n> }\n> \n> var buf bytes.Buffer\n> \n> func BenchmarkHeaderWriteSubset(b *testing.B) {\n>     b.ReportAllocs()\n>     for i := 0; i < b.N; i++ {\n>         buf.Reset()\n>         testHeader.WriteSubset(&buf, nil)\n>     }\n> }\n> \n> func TestHeaderWriteSubsetMallocs(t *testing.T) {\n>     n := testing.AllocsPerRun(100, func() {\n>         buf.Reset()\n>         testHeader.WriteSubset(&buf, nil)\n>     }\n>     if n > 1 {\n>         // TODO blah blah\n>     }\n> }\n> \n\nMuch nicer, thanks.\n\nDone.\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/net/http/header_test.go#newcode188\nsrc/pkg/net/http/header_test.go:188: if got, max := allocs, float64(1); got > max {\nOn 2013/01/30 17:55:41, rsc wrote:\n> As an aside, introducing the 'max' variable here makes the code verbose. It's\n> okay to repeat the 1 once. That's less verbose and clearer. The same goes for\n> the const N = 100.\n\nDone.\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/net/http/httputil/chunked_test.go\nFile src/pkg/net/http/httputil/chunked_test.go (right):\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/net/http/httputil/chunked_test.go#newcode61\nsrc/pkg/net/http/httputil/chunked_test.go:61: allocs := testing.AllocsPerRun(N, func() {\nOn 2013/01/30 17:55:41, rsc wrote:\n> This is not obviously clearer. Please revert.\n\nDone.\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/net/rpc/server_test.go\nFile src/pkg/net/rpc/server_test.go (right):\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/net/rpc/server_test.go#newcode449\nsrc/pkg/net/rpc/server_test.go:449: const N = 100\nOn 2013/01/30 17:55:41, rsc wrote:\n> Delete & s/N/100/ below.\n\nDone.\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/path/filepath/path_test.go\nFile src/pkg/path/filepath/path_test.go (right):\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/path/filepath/path_test.go#newcode94\nsrc/pkg/path/filepath/path_test.go:94: const N = 100\nOn 2013/01/30 17:55:41, rsc wrote:\n> Delete and s/N/100/ below.\n\nDone.\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/path/filepath/path_test.go#newcode113\nsrc/pkg/path/filepath/path_test.go:113: allocs := testing.AllocsPerRun(N, func() {\nOn 2013/01/30 17:55:41, rsc wrote:\n> Might as well even join the lines.\n> \n> func() {filepath.Clean(test.result)}\n\nDone.\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/path/path_test.go\nFile src/pkg/path/path_test.go (right):\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/path/path_test.go#newcode66\nsrc/pkg/path/path_test.go:66: const N = 100\nOn 2013/01/30 17:55:41, rsc wrote:\n> Same.\n\nDone.\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/path/path_test.go#newcode78\nsrc/pkg/path/path_test.go:78: allocs := testing.AllocsPerRun(N, func() {\nOn 2013/01/30 17:55:41, rsc wrote:\n> Same.\n\nDone.\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/strconv/strconv_test.go\nFile src/pkg/strconv/strconv_test.go (right):\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/strconv/strconv_test.go#newcode46\nsrc/pkg/strconv/strconv_test.go:46: const N = 100\nOn 2013/01/30 17:55:41, rsc wrote:\n> Same.\n\nDone.\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/time/time_test.go\nFile src/pkg/time/time_test.go (right):\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/time/time_test.go#newcode1260\nsrc/pkg/time/time_test.go:1260: const N = 100\nOn 2013/01/30 17:55:41, rsc wrote:\n> Same.\n\nDone.\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/time/time_test.go#newcode1263\nsrc/pkg/time/time_test.go:1263: allocs := testing.AllocsPerRun(N, mt.fn)\nOn 2013/01/30 17:55:41, rsc wrote:\n> The old version of this did\n> \n> allocs := int(testing.AllocsPerRun(100, mt.fn))\n> \n> Then you don't need the float64 conversion or the max variable on the next line.\n\nDone.",
			"disapproval": false,
			"date": "2013-01-31 06:14:02.471640",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"kevlar@google.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.",
			"disapproval": false,
			"date": "2013-01-26 01:25:03.267580",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"kevlar@google.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for working on this. It's definitely an improvement in some cases, but not in all. It's okay to leave the ones that don't get better alone. It's also okay to write a constant like 100 in one place instead of introducing a name for it. It's also okay not to write every test comparison using variables. In both cases the additional indirections do obscure the code a bit, so they have to be justified by making something else clearer. In many of the cases I've flagged, there is no such justification, so they should go.\n\nThanks.\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/math/big/nat_test.go\nFile src/pkg/math/big/nat_test.go (right):\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/math/big/nat_test.go#newcode169\nsrc/pkg/math/big/nat_test.go:169: func allocSizePerRun(runs int, f func()) float64 {\nI don't see any reason to change this file, and the change makes the test 100x slower. Please revert.\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/net/http/chunked_test.go\nFile src/pkg/net/http/chunked_test.go (right):\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/net/http/chunked_test.go#newcode59\nsrc/pkg/net/http/chunked_test.go:59: allocs := testing.AllocsPerRun(N, func() {\nThis file is not noticeably better. Please revert.\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/net/http/header_test.go\nFile src/pkg/net/http/header_test.go (right):\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/net/http/header_test.go#newcode179\nsrc/pkg/net/http/header_test.go:179: for i, f := 0, headerWriteSubsetFunc(); i < b.N; i++ {\nvar testHeader = Header{\n    \"Content-Length\": {\"123\"},\n    \"Content-Type\":   {\"text/plain\"},\n    \"Date\":           {\"some date at some time Z\"},\n    \"Server\":         {\"Go http package\"},\n}\n\nvar buf bytes.Buffer\n\nfunc BenchmarkHeaderWriteSubset(b *testing.B) {\n    b.ReportAllocs()\n    for i := 0; i < b.N; i++ {\n        buf.Reset()\n        testHeader.WriteSubset(&buf, nil)\n    }\n}\n\nfunc TestHeaderWriteSubsetMallocs(t *testing.T) {\n    n := testing.AllocsPerRun(100, func() {\n        buf.Reset()\n        testHeader.WriteSubset(&buf, nil)\n    }\n    if n > 1 {\n        // TODO blah blah\n    }\n}\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/net/http/header_test.go#newcode188\nsrc/pkg/net/http/header_test.go:188: if got, max := allocs, float64(1); got > max {\nAs an aside, introducing the 'max' variable here makes the code verbose. It's okay to repeat the 1 once. That's less verbose and clearer. The same goes for the const N = 100.\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/net/http/httputil/chunked_test.go\nFile src/pkg/net/http/httputil/chunked_test.go (right):\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/net/http/httputil/chunked_test.go#newcode61\nsrc/pkg/net/http/httputil/chunked_test.go:61: allocs := testing.AllocsPerRun(N, func() {\nThis is not obviously clearer. Please revert.\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/net/rpc/server_test.go\nFile src/pkg/net/rpc/server_test.go (right):\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/net/rpc/server_test.go#newcode449\nsrc/pkg/net/rpc/server_test.go:449: const N = 100\nDelete & s/N/100/ below.\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/path/filepath/path_test.go\nFile src/pkg/path/filepath/path_test.go (right):\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/path/filepath/path_test.go#newcode94\nsrc/pkg/path/filepath/path_test.go:94: const N = 100\nDelete and s/N/100/ below.\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/path/filepath/path_test.go#newcode113\nsrc/pkg/path/filepath/path_test.go:113: allocs := testing.AllocsPerRun(N, func() {\nMight as well even join the lines.\n\nfunc() {filepath.Clean(test.result)}\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/path/path_test.go\nFile src/pkg/path/path_test.go (right):\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/path/path_test.go#newcode66\nsrc/pkg/path/path_test.go:66: const N = 100\nSame.\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/path/path_test.go#newcode78\nsrc/pkg/path/path_test.go:78: allocs := testing.AllocsPerRun(N, func() {\nSame.\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/strconv/strconv_test.go\nFile src/pkg/strconv/strconv_test.go (right):\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/strconv/strconv_test.go#newcode46\nsrc/pkg/strconv/strconv_test.go:46: const N = 100\nSame.\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/time/time_test.go\nFile src/pkg/time/time_test.go (right):\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/time/time_test.go#newcode1260\nsrc/pkg/time/time_test.go:1260: const N = 100\nSame.\n\nhttps://codereview.appspot.com/7002055/diff/30001/src/pkg/time/time_test.go#newcode1263\nsrc/pkg/time/time_test.go:1263: allocs := testing.AllocsPerRun(N, mt.fn)\nThe old version of this did\n\nallocs := int(testing.AllocsPerRun(100, mt.fn))\n\nThen you don't need the float64 conversion or the max variable on the next line.",
			"disapproval": false,
			"date": "2013-01-30 17:55:41.529020",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"kevlar@google.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7002055/diff/30003/src/pkg/testing/allocs.go\nFile src/pkg/testing/allocs.go (right):\n\nhttps://codereview.appspot.com/7002055/diff/30003/src/pkg/testing/allocs.go#newcode1\nsrc/pkg/testing/allocs.go:1: package testing\nmissing copyright; i'll add it before submitting",
			"disapproval": false,
			"date": "2013-02-03 03:47:15.704720",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"kevlar@google.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=b7911b093227 ***\n\ntesting: add AllocsPerRun\n\nThis CL also replaces similar loops in other stdlib\npackage tests with calls to AllocsPerRun.\n\nFixes issue 4461.\n\nR=minux.ma, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/7002055\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2013-02-03 03:52:43.575770",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"kevlar@google.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=close",
			"disapproval": false,
			"date": "2013-07-20 20:02:21.924350",
			"approval": false
		}
	],
	"owner_email": "kevlar@google.com",
	"private": false,
	"base_url": "",
	"owner": "kevlar",
	"subject": "code review 7002055: testing: add AllocsPerRun",
	"created": "2012-12-23 02:20:27.358420",
	"patchsets": [
		1,
		2001,
		5001,
		2009,
		3008,
		9001,
		11001,
		11002,
		15001,
		22001,
		26001,
		30001,
		30003
	],
	"modified": "2013-07-20 20:02:22.442690",
	"closed": false,
	"issue": 7002055
}