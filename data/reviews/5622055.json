{
	"description": "expvar: revise API.\n\nNuke RemoveAll from the public API.\nReplace Iter functions with Do functions.\n\nFixes issue 2852.",
	"cc": [
		"rsc@golang.org",
		"r@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ok but no LGTM until go1.html is updated\n\nOn 03/02/2012, at 2:07 PM, David Symonds wrote:\n\n> On Fri, Feb 3, 2012 at 2:03 PM, Rob 'Commander' Pike <r@google.com> wrote:\n> \n>> what's up with this CL?\n> \n> This addresses http://code.google.com/p/go/issues/detail?id=2852,\n> which is a result of Russ' API review.\n> \n> \n> Dave.\n\n",
			"disapproval": false,
			"date": "2012-02-03 03:24:55.160060",
			"approval": true
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 3, 2012 at 2:24 PM, Russ Cox <rsc@golang.org> wrote:\n\n> On Thu, Feb 2, 2012 at 22:06, \u00a0<dsymonds@golang.org> wrote:\n>> Adding/replacing/deleting entries after startup is typically rare, and\n>> so is iterating. Locking here would make it a bit too easy to deadlock\n>> (e.g. reading the map while iterating). This option isn't perfect, but I\n>> think it's the least bad.\n>\n> Slowness or deadlock is always better than mysterious crash.\n> We can use an rw lock if that's important, but the code right\n> now seems just wrong.\n\nImagine you have a million exported variables. Taking the time to copy\nall those into a new slice, when the caller might not even care for\nmost of them, is too inefficient.\n\nI'll see if I can add some locking that doesn't slow this down.\n",
			"disapproval": false,
			"date": "2012-02-03 03:32:48.684384",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n",
			"disapproval": false,
			"date": "2012-02-03 03:54:19.716367",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "what's up with this CL?\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-02-03 03:03:23.880402",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 3, 2012 at 2:03 PM, Rob 'Commander' Pike <r@google.com> wrote:\n\n> what's up with this CL?\n\nThis addresses http://code.google.com/p/go/issues/detail?id=2852,\nwhich is a result of Russ' API review.\n\n\nDave.\n",
			"disapproval": false,
			"date": "2012-02-03 03:07:24.761055",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Speed is good, but not crashing is better.\n",
			"disapproval": false,
			"date": "2012-02-03 03:48:21.473617",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks. I'll sit on this for now to give Rob a chance to finesse my\ngo1.html prose.\n",
			"disapproval": false,
			"date": "2012-02-03 04:01:45.772680",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for looking into this.\n\nhttp://codereview.appspot.com/5622055/diff/3001/src/pkg/expvar/expvar.go\nFile src/pkg/expvar/expvar.go (right):\n\nhttp://codereview.appspot.com/5622055/diff/3001/src/pkg/expvar/expvar.go#newcode162\nsrc/pkg/expvar/expvar.go:162: for k, v := range v.m {\nThe old iterate didn't lock; this doesn't lock either.\nIsn't that wrong?  Of course, you don't want to hold\na lock while calling f.  I still wonder if the map should\njust have\n\nfunc (v *Map) Data() []KeyValue\n\nwhich can be appropriately locked.",
			"disapproval": false,
			"date": "2012-02-03 03:02:38.179548",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Feb 2, 2012 at 22:06,  <dsymonds@golang.org> wrote:\n> Adding/replacing/deleting entries after startup is typically rare, and\n> so is iterating. Locking here would make it a bit too easy to deadlock\n> (e.g. reading the map while iterating). This option isn't perfect, but I\n> think it's the least bad.\n\nSlowness or deadlock is always better than mysterious crash.\nWe can use an rw lock if that's important, but the code right\nnow seems just wrong.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-02-03 03:24:33.384918",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-02-03 04:00:57.960194",
			"approval": true
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-03 02:21:00.491117",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "No gofix, but the compiler will catch unchanged code.\n",
			"disapproval": false,
			"date": "2012-02-03 02:21:35.170487",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5622055/diff/3001/src/pkg/expvar/expvar.go\nFile src/pkg/expvar/expvar.go (right):\n\nhttp://codereview.appspot.com/5622055/diff/3001/src/pkg/expvar/expvar.go#newcode162\nsrc/pkg/expvar/expvar.go:162: for k, v := range v.m {\nOn 2012/02/03 03:02:38, rsc wrote:\n> The old iterate didn't lock; this doesn't lock either.\n> Isn't that wrong?  Of course, you don't want to hold\n> a lock while calling f.  I still wonder if the map should\n> just have\n> \n> func (v *Map) Data() []KeyValue\n> \n> which can be appropriately locked.\n\nThat has the downside of being really expensive when you have a large map. Same more so for the global Do. You really want to be able to piecewise iterate here.\n\nAdding/replacing/deleting entries after startup is typically rare, and so is iterating. Locking here would make it a bit too easy to deadlock (e.g. reading the map while iterating). This option isn't perfect, but I think it's the least bad.",
			"disapproval": false,
			"date": "2012-02-03 03:06:38.753773",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "missed that i was in the critical path.\n\nput <code> around Do and maybe link to it.\n",
			"disapproval": false,
			"date": "2012-02-04 06:03:55.848585",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=04452a19f777 ***\n\nexpvar: revise API.\n\nNuke RemoveAll from the public API.\nReplace Iter functions with Do functions.\n\nFixes issue 2852.\n\nR=rsc, r\nCC=golang-dev\nhttp://codereview.appspot.com/5622055",
			"disapproval": false,
			"date": "2012-02-04 03:32:13.990536",
			"approval": false
		}
	],
	"owner_email": "dsymonds@golang.org",
	"private": false,
	"base_url": "",
	"owner": "dsymonds",
	"subject": "code review 5622055: expvar: revise API.",
	"created": "2012-02-03 02:20:30.364988",
	"patchsets": [
		1,
		1002,
		3001,
		6,
		8001
	],
	"modified": "2012-02-04 03:32:16.374738",
	"closed": true,
	"issue": 5622055
}