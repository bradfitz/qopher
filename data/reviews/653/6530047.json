{
	"description": "cmd/5a, cmd/6a, cmd/8a: introduce TYPE instruction\n\nSee src/cmd/6a/doc.go for details.\n\nConvert package bytes as a demo.\nThere is more assembly to convert.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"iant@golang.org",
		"nigeltao@golang.org",
		"iant@google.com",
		"r@golang.org",
		"bradfitz@google.com"
	],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/19 04:42:27, rsc wrote:\n> Hello mailto:golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go/\n\non linux/amd64 the build fails, i'm not sure if this is intentional or not, as you said this was a proof of concept.\n\n\npkg/bytes\n/home/dfc/go/src/pkg/bytes/asm_amd64.s:94 use of old syntax to refer to argument frame\ngo tool dist: FAILED: /home/dfc/go/pkg/tool/linux_amd64/6a -I $WORK -DGOOS_linux -DGOARCH_amd64 -o $WORK/asm_amd64.o /home/dfc/go/src/pkg/bytes/asm_amd64.s",
			"disapproval": false,
			"date": "2012-09-19 06:52:35.783130",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-09-19 04:42:27.488920",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6530047/diff/5001/src/cmd/cc/gotypebody\nFile src/cmd/cc/gotypebody (right):\n\nhttp://codereview.appspot.com/6530047/diff/5001/src/cmd/cc/gotypebody#newcode37\nsrc/cmd/cc/gotypebody:37: \"[]\",\t\tPtrSize+2*4,\tPtrSize,\tGoSlice,\nNo support for arrays ?",
			"disapproval": false,
			"date": "2012-09-19 07:03:18.102760",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/19 06:52:35, dfc wrote:\n> On 2012/09/19 04:42:27, rsc wrote:\n> > Hello mailto:golang-dev@googlegroups.com,\n> > \n> > I'd like you to review this change to\n> > https://code.google.com/p/go/\n> \n> on linux/amd64 the build fails, i'm not sure if this is intentional or not, as\n> you said this was a proof of concept.\n> \n> \n> pkg/bytes\n> /home/dfc/go/src/pkg/bytes/asm_amd64.s:94 use of old syntax to refer to argument\n> frame\n> go tool dist: FAILED: /home/dfc/go/pkg/tool/linux_amd64/6a -I $WORK -DGOOS_linux\n> -DGOARCH_amd64 -o $WORK/asm_amd64.o /home/dfc/go/src/pkg/bytes/asm_amd64.s\n\nsame on linux/arm.\n\n\npkg/bytes\n/net/10.42.0.1/export/pi/home/dfc/go/src/pkg/bytes/asm_arm.s:30 use of old syntax to refer to argument frame\ngo tool dist: FAILED: /net/10.42.0.1/export/pi/home/dfc/go/pkg/tool/linux_arm/5a -I $WORK -DGOOS_linux -DGOARCH_arm -o $WORK/asm_arm.o /net/10.42.0.1/export/pi/home/dfc/go/src/pkg/bytes/asm_arm.s",
			"disapproval": false,
			"date": "2012-09-19 07:03:07.130390",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6530047/diff/5001/src/cmd/cc/gotypebody\nFile src/cmd/cc/gotypebody (right):\n\nhttps://codereview.appspot.com/6530047/diff/5001/src/cmd/cc/gotypebody#newcode31\nsrc/cmd/cc/gotypebody:31: } gotypes[] = {\nI don't see pointers in this list.\n\nhttps://codereview.appspot.com/6530047/diff/5001/src/cmd/cc/gotypebody#newcode32\nsrc/cmd/cc/gotypebody:32: \"<-chan \",\tPtrSize,\tPtrSize,\tGoBasic,\nWhy not just chan?  I don't see how readtype will ever return \"<-chan\".\n\nhttps://codereview.appspot.com/6530047/diff/5001/src/cmd/cc/gotypebody#newcode35\nsrc/cmd/cc/gotypebody:35: \"map[\",\t\tPtrSize,\tPtrSize,\tGoBasic,\nLooking at readtype, I don't see how you will ever get a type that matches \"map[\".\n\nhttps://codereview.appspot.com/6530047/diff/5001/src/cmd/cc/gotypebody#newcode40\nsrc/cmd/cc/gotypebody:40: \"int\",\t\t4,\t\t4,\t\tGoBasic,\nDo you want to use IntSize here, or just remember to change it when the time comes?\n\nhttps://codereview.appspot.com/6530047/diff/5001/src/cmd/cc/gotypebody#newcode128\nsrc/cmd/cc/gotypebody:128: gen->opsize = 4;\nIntSize?\n\nhttps://codereview.appspot.com/6530047/diff/5001/src/cmd/cc/gotypebody#newcode309\nsrc/cmd/cc/gotypebody:309: readtype(char **sp, char **typp)\nWhy not just have readtype always canonicalize [] and *?  Then you can simplify gomatch.",
			"disapproval": false,
			"date": "2012-09-19 14:45:36.256760",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"iant@golang.org",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I can't view some of the files in codereview:\n\nhttps://codereview.appspot.com/6530047/diff/5001/src/cmd/5a/y.tab.c gives me \"Can't parse the patch to chunks\".\n\nhttps://codereview.appspot.com/6530047/diff/5001/src/cmd/6a/y.tab.c and https://codereview.appspot.com/6530047/diff/5001/src/cmd/8a/y.tab.c give me \"Bad content. Try to upload again.\"\n\nBorked for all or just me?",
			"disapproval": false,
			"date": "2012-09-20 00:38:37.607220",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 21 September 2012 05:30, Russ Cox <rsc@golang.org> wrote:\r\n>> Also I worry about where this will lead. It marks a profound change in\r\n>> direction for the assembler, moving it from a pure text->.6 converter\r\n>> into something with pretty deep knowledge about Go.\r\n>\r\n> It does, yes. Maybe not pretty deep but definitely knowledge.\r\n\r\nThinking out loud, could you write the func as a comment that a\r\nvet-like tool outside of 5a/6a/8a could check? You'd have to manually\r\nupdate the offsets (although the tool could be fix-like in updating\r\nthem), but you have to do some manual work anyway since we have MOVL\r\nand MOVQ but not MOV.\r\n\r\n// TYPE \"func(x []byte, b byte) (ret int)\"\r\nTEXT \u00b7IndexByte(SB),7,$0\r\n        MOVQ x_ptr+0(FP), SI\r\n        MOVL x_len+8(FP), BX\r\n        MOVB b+16(FP), AL\r\n        MOVQ SI, DI\r\n        // etc\r\n",
			"disapproval": false,
			"date": "2012-09-20 23:31:31.418890",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Sep 19, 2012 at 5:38 PM,  <nigeltao@golang.org> wrote:\r\n> I can't view some of the files in codereview:\r\n>\r\n> https://codereview.appspot.com/6530047/diff/5001/src/cmd/5a/y.tab.c\r\n> gives me \"Can't parse the patch to chunks\".\r\n>\r\n> https://codereview.appspot.com/6530047/diff/5001/src/cmd/6a/y.tab.c and\r\n> https://codereview.appspot.com/6530047/diff/5001/src/cmd/8a/y.tab.c give\r\n> me \"Bad content. Try to upload again.\"\r\n>\r\n> Borked for all or just me?\r\n\r\nDoesn't work for me either, but it doesn't matter, as those are generated files.\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2012-09-20 00:50:37.293620",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"iant@golang.org",
				"nigeltao@golang.org",
				"iant@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6530047/diff/5001/src/cmd/6a/lex.c\nFile src/cmd/6a/lex.c (right):\n\nhttps://codereview.appspot.com/6530047/diff/5001/src/cmd/6a/lex.c#newcode174\nsrc/cmd/6a/lex.c:174: #define CVT(x, y) ((x)<<8 | (y))\ns/x, y/f, t/ to match 6a and 8a?\n\nhttps://codereview.appspot.com/6530047/diff/5001/src/cmd/6a/lex.c#newcode432\nsrc/cmd/6a/lex.c:432: \"JB\",\t\tLTYPER,\tAJCS, 1,\t/* alternate */\nDoes this have an opsize of 1 just because the name ends in \"B\"?\n\nhttps://codereview.appspot.com/6530047/diff/5001/src/cmd/6a/lex.c#newcode720\nsrc/cmd/6a/lex.c:720: \"FMOVB\",\tLTYPE3, AFMOVB, 1,\nIs 6a's FMOV what other x86 assemblers call FLD/FST?\n\nhttps://codereview.appspot.com/6530047/diff/5001/src/cmd/6a/lex.c#newcode1217\nsrc/cmd/6a/lex.c:1217: yyerror(\"%s expects src size=%d but have src size=%d\", anames[a], tosize, g2->to.opsize);\ns/src/dst/g and similarly for 5a and 8a.\n\nhttps://codereview.appspot.com/6530047/diff/5001/src/cmd/cc/gotypebody\nFile src/cmd/cc/gotypebody (right):\n\nhttps://codereview.appspot.com/6530047/diff/5001/src/cmd/cc/gotypebody#newcode150\nsrc/cmd/cc/gotypebody:150: s = strdup(skip(s));\nOut of curiousity, is the strdup unnecessary? Just a defensive habit?\n\nhttps://codereview.appspot.com/6530047/diff/5001/src/cmd/cc/gotypebody#newcode283\nsrc/cmd/cc/gotypebody:283: return '0' <= c && c <= '9' || 'a' <= c && c <= 'z' || 'A' <= c && c <= 'Z' || c >= 0x80;\nUnderscore?\n\nhttps://codereview.appspot.com/6530047/diff/5001/src/cmd/cc/gotypebody#newcode323\nsrc/cmd/cc/gotypebody:323: yyerror(\"syntax error in TYPE: missing open [ in map type\");\nIsn't \"map\" a shorthand for \"map[T]U\"?",
			"disapproval": false,
			"date": "2012-09-20 01:51:06.125570",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Thinking out loud, could you write the func as a comment that a\r\n> vet-like tool outside of 5a/6a/8a could check? You'd have to manually\r\n> update the offsets (although the tool could be fix-like in updating\r\n> them), but you have to do some manual work anyway since we have MOVL\r\n> and MOVQ but not MOV.\r\n\r\nThe int change is not that hard and requires editing source files by\r\nhand regardless of what we do here. I was trying to avoid assembly\r\nchanges for pure alignment changes (two are planned). Instead I have\r\nwritten a tool to check the assembly against the Go declarations. When\r\nit comes time to do the alignment changes I will make the program\r\napply the updates. I don't expect this to be a general tool we\r\nadvertise.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-09-21 04:39:04.157460",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"iant@golang.org",
				"nigeltao@golang.org",
				"iant@google.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The spec (to use a generous term) for this feature is vague. For an assembler already abysmally documented, this isn't helping.\n\nAlso I worry about where this will lead. It marks a profound change in direction for the assembler, moving it from a pure text->.6 converter into something with pretty deep knowledge about Go.\n\nI'm not saying \"no\", I'm just clearing my throat.",
			"disapproval": false,
			"date": "2012-09-20 06:17:15.614600",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Sep 20, 2012 at 2:17 AM,  <r@golang.org> wrote:\r\n> The spec (to use a generous term) for this feature is vague. For an\r\n> assembler already abysmally documented, this isn't helping.\r\n\r\nAre there specific things you'd like to me add or questions you'd like\r\nme to answer in\r\nhttp://codereview.appspot.com/6530047/diff/5001/src/cmd/6a/doc.go?\r\n\r\n> Also I worry about where this will lead. It marks a profound change in\r\n> direction for the assembler, moving it from a pure text->.6 converter\r\n> into something with pretty deep knowledge about Go.\r\n\r\nIt does, yes. Maybe not pretty deep but definitely knowledge.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-09-20 19:30:30.386810",
			"approval": false
		},
		{
			"sender": "bradfitz@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Sep 20, 2012 at 4:31 PM, Nigel Tao <nigeltao@golang.org> wrote:\r\n\r\n> On 21 September 2012 05:30, Russ Cox <rsc@golang.org> wrote:\r\n> >> Also I worry about where this will lead. It marks a profound change in\r\n> >> direction for the assembler, moving it from a pure text->.6 converter\r\n> >> into something with pretty deep knowledge about Go.\r\n> >\r\n> > It does, yes. Maybe not pretty deep but definitely knowledge.\r\n>\r\n> Thinking out loud, could you write the func as a comment that a\r\n> vet-like tool outside of 5a/6a/8a could check?\r\n>\r\n\r\nDo [568]a have aspirations of being (or remaining) generic linkers for\r\nmultiple languages?\r\n\r\nI thought they were already forked to be Go's.\r\n",
			"disapproval": false,
			"date": "2012-09-20 23:44:18.101500",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Never mind, I will try something else.\r\n",
			"disapproval": false,
			"date": "2012-09-21 04:13:30.704630",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"iant@golang.org",
				"nigeltao@golang.org",
				"iant@google.com",
				"r@golang.org",
				"bradfitz@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-09-21 04:16:08.475220",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 6530047: cmd/5a, cmd/6a, cmd/8a: introduce TYPE instruction",
	"created": "2012-09-19 04:29:56.018020",
	"patchsets": [
		1,
		1002,
		4001,
		5001
	],
	"modified": "2012-09-21 04:16:10.203280",
	"closed": true,
	"issue": 6530047
}