{
	"description": "misc/cgo/test: do not run wasteCPU during TestParallelSleep unless on arm",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"minux.ma@gmail.com",
		"bradfitz@golang.org"
	],
	"reviewers": [
		"dave@cheney.net"
	],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is an odd one. Why such a small increment? It feels hacky. The CL\r\ndescription needs to say more.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-09-19 02:46:04.545550",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This test has failed 5 times in a row today, but only on the\r\nwindows/amd64 builder. I don't think this is a transient error; either\r\nwe've broken cgo, or that machine is broken. I lean towards the\r\nlatter, but lack evidence to support my case.\r\n\r\n# ..\\misc\\cgo\\test\r\n--- FAIL: TestParallelSleep (1.94 seconds)\r\nbasic.go:465: \tsleep(1) slept for 1.358s\r\nbasic.go:470: \tparallel 1-second sleeps slept for 1.358000 seconds\r\nFAIL\r\nscatter = 000000000042B45D\r\nhello from C\r\nFAIL\t_/c_/gobuilder/windows-amd64-2f7827571b44/go/misc/cgo/test\t2.132s\r\n\r\n\r\n\r\nOn Wed, Sep 19, 2012 at 8:35 PM, Dave Cheney <dave@cheney.net> wrote:\r\n> All the recent failures occur inside VMs. I am not confident this test\r\n> can be made to work reliably inside a VM.\r\n>\r\n> On Wed, Sep 19, 2012 at 5:54 PM, minux <minux.ma@gmail.com> wrote:\r\n>>\r\n>> On Wed, Sep 19, 2012 at 2:04 PM, <alex.brainman@gmail.com> wrote:\r\n>>>\r\n>>> I would rather have no wasteCPU, but increasing delay limit is second\r\n>>\r\n>> i agree that this test is very fragile. in the past we have so many CLs to\r\n>> try to fix this test.\r\n>>\r\n>> wasteCPU is to override the ARM builder's aggressive cpufreq governor.\r\n>>\r\n>> How about this, we do two rounds of ParallelSleep test,\r\n>> first without wasteCPU, if that fails, start wasteCPU and try again.\r\n>>\r\n>> Essentially, what we really want is the start time of the sleep syscall, can\r\n>> we\r\n>> use a debugger or strace/ktrace to get that info directly?\r\n>>>\r\n>>> best thing. 1.5s delay limit would cover 2 broken builder cases we had.\r\n>>> Seems like a reasonable number to me.\r\n",
			"disapproval": false,
			"date": "2012-09-19 17:09:00.239400",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-09-19 02:37:34.516000",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/19 02:46:04, r wrote:\n> This is an odd one. Why such a small increment? It feels hacky. ...\n\nI think what is happening here, wasteCPU is really burning cpu. It is especially visible on single cpu machine. If I remove wasteCPU call, then sleep(1s) does take 1s. But with wasteCPU in, it actually takes 1.2s - 1.3s. It happened twice already:\n\nfreebsd-386 http://build.golang.org/log/81769aa244c7712e2969c023c5f861696aa1eba8\n\nand\n\nwindows-amd64 http://build.golang.org/log/ff5ef80129ff37f1d4f708c307ed17f1d65f5d06\n\nI would rather have no wasteCPU, but increasing delay limit is second best thing. 1.5s delay limit would cover 2 broken builder cases we had. Seems like a reasonable number to me.\n\n> ... The CL description needs to say more.\n\nWhat would you like me to say?\n\nAlex",
			"disapproval": false,
			"date": "2012-09-19 06:04:23.088080",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Sep 19, 2012 at 2:04 PM, <alex.brainman@gmail.com> wrote:\r\n\r\n> I would rather have no wasteCPU, but increasing delay limit is second\r\n>\r\ni agree that this test is very fragile. in the past we have so many CLs to\r\ntry to fix this test.\r\n\r\nwasteCPU is to override the ARM builder's aggressive cpufreq governor.\r\n\r\nHow about this, we do two rounds of ParallelSleep test,\r\nfirst without wasteCPU, if that fails, start wasteCPU and try again.\r\n\r\nEssentially, what we really want is the start time of the sleep syscall,\r\ncan we\r\nuse a debugger or strace/ktrace to get that info directly?\r\n\r\n> best thing. 1.5s delay limit would cover 2 broken builder cases we had.\r\n> Seems like a reasonable number to me.\r\n>\r\n",
			"disapproval": false,
			"date": "2012-09-19 07:54:53.999880",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "All the recent failures occur inside VMs. I am not confident this test\r\ncan be made to work reliably inside a VM.\r\n\r\nOn Wed, Sep 19, 2012 at 5:54 PM, minux <minux.ma@gmail.com> wrote:\r\n>\r\n> On Wed, Sep 19, 2012 at 2:04 PM, <alex.brainman@gmail.com> wrote:\r\n>>\r\n>> I would rather have no wasteCPU, but increasing delay limit is second\r\n>\r\n> i agree that this test is very fragile. in the past we have so many CLs to\r\n> try to fix this test.\r\n>\r\n> wasteCPU is to override the ARM builder's aggressive cpufreq governor.\r\n>\r\n> How about this, we do two rounds of ParallelSleep test,\r\n> first without wasteCPU, if that fails, start wasteCPU and try again.\r\n>\r\n> Essentially, what we really want is the start time of the sleep syscall, can\r\n> we\r\n> use a debugger or strace/ktrace to get that info directly?\r\n>>\r\n>> best thing. 1.5s delay limit would cover 2 broken builder cases we had.\r\n>> Seems like a reasonable number to me.\r\n",
			"disapproval": false,
			"date": "2012-09-19 10:35:18.677380",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "outstanding!\r\n\r\nOn Thu, Sep 20, 2012 at 3:16 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> FYI, I will hopefully soon be replacing both the Windows builders with a\r\n> new, beefier Windows builder that's setup by a tool, rather than humans.\r\n>\r\n> Work in progress tool is at http://code.google.com/p/winstrap/ .. the code\r\n> might move into $GOROOT/misc/winstrap later.\r\n>\r\n> The idea is we take a virgin EC2 Windows VM, bring up IE and go to\r\n> http://code.google.com/p/winstrap/downloads/list (after white-listing 6 or 7\r\n> domains) and double-click the exe and have a builder up for both win32 and\r\n> win64.\r\n>\r\n>\r\n> On Wed, Sep 19, 2012 at 10:08 AM, Dave Cheney <dave@cheney.net> wrote:\r\n>>\r\n>> This test has failed 5 times in a row today, but only on the\r\n>> windows/amd64 builder. I don't think this is a transient error; either\r\n>> we've broken cgo, or that machine is broken. I lean towards the\r\n>> latter, but lack evidence to support my case.\r\n>>\r\n>> # ..\\misc\\cgo\\test\r\n>> --- FAIL: TestParallelSleep (1.94 seconds)\r\n>> basic.go:465:   sleep(1) slept for 1.358s\r\n>> basic.go:470:   parallel 1-second sleeps slept for 1.358000 seconds\r\n>> FAIL\r\n>> scatter = 000000000042B45D\r\n>> hello from C\r\n>> FAIL    _/c_/gobuilder/windows-amd64-2f7827571b44/go/misc/cgo/test\r\n>> 2.132s\r\n>>\r\n>>\r\n>>\r\n>> On Wed, Sep 19, 2012 at 8:35 PM, Dave Cheney <dave@cheney.net> wrote:\r\n>> > All the recent failures occur inside VMs. I am not confident this test\r\n>> > can be made to work reliably inside a VM.\r\n>> >\r\n>> > On Wed, Sep 19, 2012 at 5:54 PM, minux <minux.ma@gmail.com> wrote:\r\n>> >>\r\n>> >> On Wed, Sep 19, 2012 at 2:04 PM, <alex.brainman@gmail.com> wrote:\r\n>> >>>\r\n>> >>> I would rather have no wasteCPU, but increasing delay limit is second\r\n>> >>\r\n>> >> i agree that this test is very fragile. in the past we have so many CLs\r\n>> >> to\r\n>> >> try to fix this test.\r\n>> >>\r\n>> >> wasteCPU is to override the ARM builder's aggressive cpufreq governor.\r\n>> >>\r\n>> >> How about this, we do two rounds of ParallelSleep test,\r\n>> >> first without wasteCPU, if that fails, start wasteCPU and try again.\r\n>> >>\r\n>> >> Essentially, what we really want is the start time of the sleep\r\n>> >> syscall, can\r\n>> >> we\r\n>> >> use a debugger or strace/ktrace to get that info directly?\r\n>> >>>\r\n>> >>> best thing. 1.5s delay limit would cover 2 broken builder cases we\r\n>> >>> had.\r\n>> >>> Seems like a reasonable number to me.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-09-19 17:18:24.788740",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Sep 20, 2012 at 1:08 AM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> This test has failed 5 times in a row today, but only on the\r\n> windows/amd64 builder. I don't think this is a transient error; either\r\n> we've broken cgo, or that machine is broken. I lean towards the\r\n> latter, but lack evidence to support my case.\r\n>\r\ni assume that VM is owned as i just tested all.bat on windows/386\r\nwindows/amd64 earlier today.\r\nas I've already gathered enough info. to diagnose the misc/cgo/life problem\r\nI don't mind we reimage that VM now.\r\n",
			"disapproval": false,
			"date": "2012-09-19 17:16:36.314020",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI, I will hopefully soon be replacing both the Windows builders with a\r\nnew, beefier Windows builder that's setup by a tool, rather than humans.\r\n\r\nWork in progress tool is at http://code.google.com/p/winstrap/ .. the code\r\nmight move into $GOROOT/misc/winstrap later.\r\n\r\nThe idea is we take a virgin EC2 Windows VM, bring up IE and go to\r\nhttp://code.google.com/p/winstrap/downloads/list (after white-listing 6 or\r\n7 domains) and double-click the exe and have a builder up for both win32\r\nand win64.\r\n\r\n\r\nOn Wed, Sep 19, 2012 at 10:08 AM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> This test has failed 5 times in a row today, but only on the\r\n> windows/amd64 builder. I don't think this is a transient error; either\r\n> we've broken cgo, or that machine is broken. I lean towards the\r\n> latter, but lack evidence to support my case.\r\n>\r\n> # ..\\misc\\cgo\\test\r\n> --- FAIL: TestParallelSleep (1.94 seconds)\r\n> basic.go:465:   sleep(1) slept for 1.358s\r\n> basic.go:470:   parallel 1-second sleeps slept for 1.358000 seconds\r\n> FAIL\r\n> scatter = 000000000042B45D\r\n> hello from C\r\n> FAIL    _/c_/gobuilder/windows-amd64-2f7827571b44/go/misc/cgo/test\r\n>  2.132s\r\n>\r\n>\r\n>\r\n> On Wed, Sep 19, 2012 at 8:35 PM, Dave Cheney <dave@cheney.net> wrote:\r\n> > All the recent failures occur inside VMs. I am not confident this test\r\n> > can be made to work reliably inside a VM.\r\n> >\r\n> > On Wed, Sep 19, 2012 at 5:54 PM, minux <minux.ma@gmail.com> wrote:\r\n> >>\r\n> >> On Wed, Sep 19, 2012 at 2:04 PM, <alex.brainman@gmail.com> wrote:\r\n> >>>\r\n> >>> I would rather have no wasteCPU, but increasing delay limit is second\r\n> >>\r\n> >> i agree that this test is very fragile. in the past we have so many CLs\r\n> to\r\n> >> try to fix this test.\r\n> >>\r\n> >> wasteCPU is to override the ARM builder's aggressive cpufreq governor.\r\n> >>\r\n> >> How about this, we do two rounds of ParallelSleep test,\r\n> >> first without wasteCPU, if that fails, start wasteCPU and try again.\r\n> >>\r\n> >> Essentially, what we really want is the start time of the sleep\r\n> syscall, can\r\n> >> we\r\n> >> use a debugger or strace/ktrace to get that info directly?\r\n> >>>\r\n> >>> best thing. 1.5s delay limit would cover 2 broken builder cases we had.\r\n> >>> Seems like a reasonable number to me.\r\n>\r\n",
			"disapproval": false,
			"date": "2012-09-19 17:16:38.459470",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wednesday, September 19, 2012, Dave Cheney wrote:\r\n>\r\n> All the recent failures occur inside VMs. I am not confident this test\r\n> can be made to work reliably inside a VM.\r\n\r\nCan we change the test to do this:\r\nInstead of calling C.sleep directly, we can call a function that records\r\nthe time it is called and then sleeps. Upon waking up, return the\r\nstored calling time. We compare these two times.\r\n\r\nBased on my observations, the two sleeps are called at almost the\r\nsame time, it is the duration of the sleep that is unreliable.\r\n\r\nI think this approach still captures the essense of the issue.\r\nWhat do you think?\r\n",
			"disapproval": false,
			"date": "2012-09-19 18:03:35.852510",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sep 20, 2012 8:42 AM, <alex.brainman@gmail.com> wrote:\r\n>\r\n> On 2012/09/19 18:03:35, minux wrote:\r\n> I think wasteCPU breaks everything in particular environments - single\r\n> cpu. Once it starts burning cpu, the system becomes unpredictable. I\r\n> propose, we top doing that unless we need to do that on arm. PTAL.\r\ni can't use rietveld atm.\r\nyou can move the first defer() into the body of if too.\r\n",
			"disapproval": false,
			"date": "2012-09-20 01:25:07.009220",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org, minux.ma@gmail.com, dave@cheney.net, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-20 00:41:53.991010",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/19 18:03:35, minux wrote:\n> \n> Can we change the test to do this:\n\nI think wasteCPU breaks everything in particular environments - single cpu. Once it starts burning cpu, the system becomes unpredictable. I propose, we top doing that unless we need to do that on arm. PTAL.\n\nAlex",
			"disapproval": false,
			"date": "2012-09-20 00:42:01.473360",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org, minux.ma@gmail.com, dave@cheney.net, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-20 01:41:57.117960",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\r\n",
			"disapproval": false,
			"date": "2012-09-20 01:53:48.429580",
			"approval": true
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=f6668796d52c ***\n\nmisc/cgo/test: do not run wasteCPU during TestParallelSleep unless on arm\n\nR=golang-dev, r, minux.ma, dave, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/6532052",
			"disapproval": false,
			"date": "2012-09-20 02:06:16.416840",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"alex.brainman@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. Thank you.",
			"disapproval": false,
			"date": "2012-09-20 06:14:24.304310",
			"approval": true
		}
	],
	"owner_email": "alex.brainman@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "brainman",
	"subject": "code review 6532052: misc/cgo/test: do not run wasteCPU during TestParallelS...",
	"created": "2012-09-19 02:36:22.391920",
	"patchsets": [
		1,
		2001,
		4001,
		11001,
		15001,
		20001
	],
	"modified": "2012-09-20 06:14:24.458940",
	"closed": true,
	"issue": 6532052
}