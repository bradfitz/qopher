{
	"description": "race: runtime changes\nThis is a part of a bigger change that adds data race detection feature:\nhttp://codereview.appspot.com/6456044",
	"cc": [
		"rsc@golang.org",
		"gobot@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"minux.ma@gmail.com",
		"0xe2.0x9a.0x9b@gmail.com"
	],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-09-19 04:57:55.382500",
			"approval": false
		},
		{
			"sender": "gobot@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=rsc (assigned by dsymonds)",
			"disapproval": false,
			"date": "2012-10-02 12:00:16.409510",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM after fixing below\n\nhttps://codereview.appspot.com/6535050/diff/15017/src/pkg/runtime/cgocall.c\nFile src/pkg/runtime/cgocall.c (right):\n\nhttps://codereview.appspot.com/6535050/diff/15017/src/pkg/runtime/cgocall.c#newcode103\nsrc/pkg/runtime/cgocall.c:103: if(!m->racecall) {\nCan you do\n\nif(m->racecall) {\n    // Avoid instrumenting ourselves.\n    runtime.asmcgocall(fn, arg);\n    return;\n}\n\nand then drop the if(!m->racecall) below so as not to indent all but 1 line of the rest of the function?\n\nhttps://codereview.appspot.com/6535050/diff/15017/src/pkg/runtime/cgocall.c#newcode116\nsrc/pkg/runtime/cgocall.c:116: * Lock g to m to ensure we stay on the same stack if we do a\nThe convention for these comment is to put a space before * so the *s line up.\nOr use // comments.\n\nhttps://codereview.appspot.com/6535050/diff/15017/src/pkg/runtime/cgocall.c#newcode134\nsrc/pkg/runtime/cgocall.c:134: * Announce we are entering a system call\nSame.\n\nhttps://codereview.appspot.com/6535050/diff/15017/src/pkg/runtime/cgocall.c#newcode212\nsrc/pkg/runtime/cgocall.c:212: if(!m->racecall) {\nSame.\n\nhttps://codereview.appspot.com/6535050/diff/15017/src/pkg/runtime/chan.c\nFile src/pkg/runtime/chan.c (right):\n\nhttps://codereview.appspot.com/6535050/diff/15017/src/pkg/runtime/chan.c#newcode180\nsrc/pkg/runtime/chan.c:180: //!!! add similar instrumentation to select.\ns/!!!/ TODO(dvyukov): /\n\nhttps://codereview.appspot.com/6535050/diff/15017/src/pkg/runtime/race0.c\nFile src/pkg/runtime/race0.c (right):\n\nhttps://codereview.appspot.com/6535050/diff/15017/src/pkg/runtime/race0.c#newcode23\nsrc/pkg/runtime/race0.c:23: USED(&addr);\nThese should all be USED(x), not USED(&x).\n\nFLUSH uses USED(&x) in order to trick the compiler into thinking the address was taken, to make it write the variable's value out to memory. But the usual form is just USED(x).",
			"disapproval": false,
			"date": "2012-10-05 20:35:40.196020",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Oct 8, 2012 at 2:21 AM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n\r\n> On Sun, Oct 7, 2012 at 10:13 AM, minux <minux.ma@gmail.com> wrote:\r\n>\r\n>>    how can I build these two .syso files? Do you plan to add docs for\r\n>> that?\r\n>>\r\n> I am not sure where exactly do I add the instructions.\r\n>\r\nThanks, maybe you could put this text in src/pkg/runtime/race/README.\r\n\r\nbtw, do you plan to write an article (/doc/articles/) to introduce\r\nThreadSanitizer\r\nrace detector feature of Go? if you do, that will be a great place for this\r\ninformation\r\nto go.\r\n\r\nA side question: Do we accept .syso files in general? For example, it will\r\nmake\r\nporting assembly functions to Go much easier (no more rewrites, and just\r\nmake\r\na abi compatible .syso)\r\n",
			"disapproval": false,
			"date": "2012-10-07 18:32:51.740920",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Oct 7, 2012 at 10:13 AM, minux <minux.ma@gmail.com> wrote:\r\n\r\n> Hi dvyukov,\r\n>    how can I build these two .syso files? Do you plan to add docs for that?\r\n>\r\n\r\nIt is a good question. I am not sure where exactly do I add the\r\ninstructions.\r\n\r\nIn short, the runtime is based on ThreadSanitizer technology:\r\nhttp://code.google.com/p/thread-sanitizer/w/list\r\nhttp://clang.llvm.org/docs/ThreadSanitizer.html\r\n\r\nThe source code is hosted in LLVM repository and is covered by BSD-like\r\nlicense.\r\nhttp://www.llvm.org/viewvc/llvm-project/compiler-rt/trunk/lib/tsan/rtl/\r\n\r\nThe runtime is build with buildgo.sh script:\r\nhttp://www.llvm.org/viewvc/llvm-project/compiler-rt/trunk/lib/tsan/go/\r\nwith gcc 4.6.1. On Linux it builds race_linux_amd64.syso, on Mac -\r\nrace_darwin_amd64.syso.\r\n",
			"disapproval": false,
			"date": "2012-10-07 18:21:11.408680",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi dvyukov,\r\n   how can I build these two .syso files? Do you plan to add docs for that?\r\n",
			"disapproval": false,
			"date": "2012-10-07 18:13:56.770320",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6535050/diff/15017/src/pkg/runtime/cgocall.c\nFile src/pkg/runtime/cgocall.c (right):\n\nhttps://codereview.appspot.com/6535050/diff/15017/src/pkg/runtime/cgocall.c#newcode103\nsrc/pkg/runtime/cgocall.c:103: if(!m->racecall) {\nOn 2012/10/05 20:35:40, rsc wrote:\n> Can you do\n> \n> if(m->racecall) {\n>     // Avoid instrumenting ourselves.\n>     runtime.asmcgocall(fn, arg);\n>     return;\n> }\n> \n> and then drop the if(!m->racecall) below so as not to indent all but 1 line of\n> the rest of the function?\n\nDone.\n\nhttps://codereview.appspot.com/6535050/diff/15017/src/pkg/runtime/cgocall.c#newcode212\nsrc/pkg/runtime/cgocall.c:212: if(!m->racecall) {\nOn 2012/10/05 20:35:40, rsc wrote:\n> Same.\n\nDone.\n\nhttps://codereview.appspot.com/6535050/diff/15017/src/pkg/runtime/chan.c\nFile src/pkg/runtime/chan.c (right):\n\nhttps://codereview.appspot.com/6535050/diff/15017/src/pkg/runtime/chan.c#newcode180\nsrc/pkg/runtime/chan.c:180: //!!! add similar instrumentation to select.\nOn 2012/10/05 20:35:40, rsc wrote:\n> s/!!!/ TODO(dvyukov): /\n\nDone.\n\nhttps://codereview.appspot.com/6535050/diff/15017/src/pkg/runtime/race0.c\nFile src/pkg/runtime/race0.c (right):\n\nhttps://codereview.appspot.com/6535050/diff/15017/src/pkg/runtime/race0.c#newcode23\nsrc/pkg/runtime/race0.c:23: USED(&addr);\nOn 2012/10/05 20:35:40, rsc wrote:\n> These should all be USED(x), not USED(&x).\n> \n> FLUSH uses USED(&x) in order to trick the compiler into thinking the address was\n> taken, to make it write the variable's value out to memory. But the usual form\n> is just USED(x).\n> \n\nDone.",
			"disapproval": false,
			"date": "2012-10-07 13:16:00.416840",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=395c8950719a ***\n\nrace: runtime changes\nThis is a part of a bigger change that adds data race detection feature:\nhttp://codereview.appspot.com/6456044\n\nR=rsc\nCC=gobot, golang-dev\nhttp://codereview.appspot.com/6535050",
			"disapproval": false,
			"date": "2012-10-07 18:06:18.451780",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Oct 7, 2012 at 10:32 AM, minux <minux.ma@gmail.com> wrote:\r\n\r\n>\r\n> On Mon, Oct 8, 2012 at 2:21 AM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n>\r\n>> On Sun, Oct 7, 2012 at 10:13 AM, minux <minux.ma@gmail.com> wrote:\r\n>>\r\n>>>    how can I build these two .syso files? Do you plan to add docs for\r\n>>> that?\r\n>>>\r\n>> I am not sure where exactly do I add the instructions.\r\n>>\r\n> Thanks, maybe you could put this text in src/pkg/runtime/race/README.\r\n>\r\n> btw, do you plan to write an article (/doc/articles/) to introduce\r\n> ThreadSanitizer\r\n> race detector feature of Go? if you do, that will be a great place for\r\n> this information\r\n> to go.\r\n>\r\n\r\n\r\nWell, yes, eventually we need the article.\r\nDo we have a technical writer onboard? :)\r\n\r\n\r\nA side question: Do we accept .syso files in general? For example, it will\r\n> make\r\n> porting assembly functions to Go much easier (no more rewrites, and just\r\n> make\r\n> a abi compatible .syso)\r\n>\r\n\r\nI think that assembly is still preferable. The reason why I upload syso is\r\nbeing that it's a huge piece of C++ living in a remote repo that needs\r\nfresh gcc/clang to build.\r\n",
			"disapproval": false,
			"date": "2012-10-08 11:57:03.205380",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"minux.ma@gmail.com",
				"0xe2.0x9a.0x9b@gmail.com",
				"rsc@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6535050/diff/32001/src/pkg/runtime/malloc.goc\nFile src/pkg/runtime/malloc.goc (right):\n\nhttps://codereview.appspot.com/6535050/diff/32001/src/pkg/runtime/malloc.goc#newcode696\nsrc/pkg/runtime/malloc.goc:696: m->racepc = runtime\u00b7getcallerpc(&typ);\nShouldn't this be:\n\nif(raceenabled) m->racepc=...",
			"disapproval": false,
			"date": "2012-10-12 16:03:59.562800",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Oct 12, 2012 at 8:03 PM, <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/6535050/diff/32001/src/**\r\n> pkg/runtime/malloc.goc<https://codereview.appspot.com/6535050/diff/32001/src/pkg/runtime/malloc.goc>\r\n> File src/pkg/runtime/malloc.goc (right):\r\n>\r\n> https://codereview.appspot.**com/6535050/diff/32001/src/**\r\n> pkg/runtime/malloc.goc#**newcode696<https://codereview.appspot.com/6535050/diff/32001/src/pkg/runtime/malloc.goc#newcode696>\r\n> src/pkg/runtime/malloc.goc:**696: m->racepc = runtime\u00b7getcallerpc(&typ);\r\n> Shouldn't this be:\r\n>\r\n> if(raceenabled) m->racepc=...\r\n>\r\n\r\n\r\nYour right. thanks!\r\n",
			"disapproval": false,
			"date": "2012-10-12 16:13:42.901760",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 6535050: race: runtime changes",
	"created": "2012-09-19 04:13:50.951210",
	"patchsets": [
		1,
		1002,
		4001,
		5018,
		8001,
		9018,
		10001,
		14001,
		15017,
		22001,
		25001,
		27001,
		28018,
		32001
	],
	"modified": "2012-10-12 16:03:59.878020",
	"closed": true,
	"issue": 6535050
}