{
	"description": "net: move deadline logic into pollServer\n\nUpdate issue 4434.\n\nThe proposal attempts to reduce the number of places where fd,{r,w}deadline is checked and updated in preparation for issue 4434. In doing so the deadline logic is simplified by letting the pollster return errTimeout from netFD.Wait{Read,Write} as part of the wakeup logic.\n\nThe behaviour of setting n = 0 has been restored to match rev 2a55e349097f, which was the previous change to fd_unix.go before CL 6851096.",
	"cc": [
		"jsing@google.com",
		"bradfitz@golang.org",
		"mikioh.mikioh@gmail.com",
		"rsc@golang.org",
		"fullung@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"jsing@google.com",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It passes on openbsd, yay.\n\nhttps://codereview.appspot.com/6850110/diff/6003/src/pkg/net/fd_unix.go\nFile src/pkg/net/fd_unix.go (right):\n\nhttps://codereview.appspot.com/6850110/diff/6003/src/pkg/net/fd_unix.go#newcode435\nsrc/pkg/net/fd_unix.go:435: if n == 0 && err == nil && fd.sotype != syscall.SOCK_DGRAM {\nfd.sotype == syscall.SOCK_STREAM\n\nhttps://codereview.appspot.com/6850110/diff/6003/src/pkg/net/fd_unix.go#newcode468\nsrc/pkg/net/fd_unix.go:468: }\nif n == 0 && err == nil && fd.sotype == syscall.SOCK_STREAM {\n  err = io.EOF\n} \n\nIt's possible to transmit UDP payload size = 0 datagram.\n\nhttps://codereview.appspot.com/6850110/diff/6003/src/pkg/net/fd_unix.go#newcode500\nsrc/pkg/net/fd_unix.go:500: if err == nil && n == 0 {\nif n == 0 && err == nil && fd.sotype == syscall.SOCK_STREAM {\n\nIt's possible to transmit UDP payload size = 0 datagram.",
			"disapproval": false,
			"date": "2012-11-27 12:34:36.114220",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"jsing@google.com",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hopefully this is the final tweak. As the logic of that check was getting large, I have moved it into a helper. PTAL.\n\nhttps://codereview.appspot.com/6850110/diff/2005/src/pkg/net/fd_unix.go\nFile src/pkg/net/fd_unix.go (right):\n\nhttps://codereview.appspot.com/6850110/diff/2005/src/pkg/net/fd_unix.go#newcode435\nsrc/pkg/net/fd_unix.go:435: if n == 0 && err == nil && fd.sotype != syscall.SOCK_DGRAM {\nOn 2012/11/27 21:42:59, mikio wrote:\n> && fd.sotype != syscall.SOCK_DGRAM && fd.sotype != syscall.SOCK_RAW\n\nDone.\n\nhttps://codereview.appspot.com/6850110/diff/2005/src/pkg/net/fd_unix.go#newcode469\nsrc/pkg/net/fd_unix.go:469: if n == 0 && err == nil && fd.sotype != syscall.SOCK_DGRAM {\nOn 2012/11/27 21:42:59, mikio wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/6850110/diff/2005/src/pkg/net/fd_unix.go#newcode503\nsrc/pkg/net/fd_unix.go:503: if n == 0 && err == nil && fd.sotype != syscall.SOCK_DGRAM {\nOn 2012/11/27 21:42:59, mikio wrote:\n> ditto\n\nDone.",
			"disapproval": false,
			"date": "2012-11-27 23:48:43.562250",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Okay, time to make deadline updates atomic!\r\n\r\nOn Tue, Nov 27, 2012 at 4:29 PM, <dave@cheney.net> wrote:\r\n\r\n> *** Submitted as\r\n> http://code.google.com/p/go/**source/detail?r=1289e67dec66<http://code.google.com/p/go/source/detail?r=1289e67dec66>***\r\n>\r\n>\r\n> net: move deadline logic into pollServer\r\n>\r\n> Update issue 4434.\r\n>\r\n> The proposal attempts to reduce the number of places where\r\n> fd,{r,w}deadline is checked and updated in preparation for issue 4434.\r\n> In doing so the deadline logic is simplified by letting the pollster\r\n> return errTimeout from netFD.Wait{Read,Write} as part of the wakeup\r\n> logic.\r\n>\r\n> The behaviour of setting n = 0 has been restored to match rev\r\n> 2a55e349097f, which was the previous change to fd_unix.go before CL\r\n> 6851096.\r\n>\r\n> R=jsing, bradfitz, mikioh.mikioh, rsc\r\n> CC=fullung, golang-dev\r\n> http://codereview.appspot.com/**6850110<http://codereview.appspot.com/6850110>\r\n>\r\n>\r\n> http://codereview.appspot.com/**6850110/<http://codereview.appspot.com/6850110/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-28 01:22:58.720860",
			"approval": false
		},
		{
			"sender": "jsing@google.com",
			"recipients": [
				"dave@cheney.net",
				"jsing@google.com",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\n\nThis is the less intrusive change, although more expensive in terms of consecutive calls to read/write after the deadline has passed - I'm not convinced this matters though. I still think there may be benefit in factoring out the \"check deadline\" code, which is currently sprinkled in multiple places.\n\nFTR this makes the tests pass again on a machine similar to the OpenBSD/amd64 builder and fixes the failure of the TestReadDeadlineConsecutive test provided in https://codereview.appspot.com/6842101/.",
			"disapproval": false,
			"date": "2012-11-27 16:01:55.337160",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"jsing@google.com",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello jsing@google.com, bradfitz@golang.org, mikioh.mikioh@gmail.com, rsc@golang.org (cc: fullung@gmail.com, golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-11-27 09:18:24.546380",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nI assume you'll do RecvFrom todo and tests later?\r\n On Nov 27, 2012 3:48 PM, <dave@cheney.net> wrote:\r\n\r\n> Hopefully this is the final tweak. As the logic of that check was\r\n> getting large, I have moved it into a helper. PTAL.\r\n>\r\n>\r\n> https://codereview.appspot.**com/6850110/diff/2005/src/pkg/**\r\n> net/fd_unix.go<https://codereview.appspot.com/6850110/diff/2005/src/pkg/net/fd_unix.go>\r\n> File src/pkg/net/fd_unix.go (right):\r\n>\r\n> https://codereview.appspot.**com/6850110/diff/2005/src/pkg/**\r\n> net/fd_unix.go#newcode435<https://codereview.appspot.com/6850110/diff/2005/src/pkg/net/fd_unix.go#newcode435>\r\n> src/pkg/net/fd_unix.go:435: if n == 0 && err == nil && fd.sotype !=\r\n> syscall.SOCK_DGRAM {\r\n> On 2012/11/27 21:42:59, mikio wrote:\r\n>\r\n>> && fd.sotype != syscall.SOCK_DGRAM && fd.sotype != syscall.SOCK_RAW\r\n>>\r\n>\r\n> Done.\r\n>\r\n> https://codereview.appspot.**com/6850110/diff/2005/src/pkg/**\r\n> net/fd_unix.go#newcode469<https://codereview.appspot.com/6850110/diff/2005/src/pkg/net/fd_unix.go#newcode469>\r\n> src/pkg/net/fd_unix.go:469: if n == 0 && err == nil && fd.sotype !=\r\n> syscall.SOCK_DGRAM {\r\n> On 2012/11/27 21:42:59, mikio wrote:\r\n>\r\n>> ditto\r\n>>\r\n>\r\n> Done.\r\n>\r\n> https://codereview.appspot.**com/6850110/diff/2005/src/pkg/**\r\n> net/fd_unix.go#newcode503<https://codereview.appspot.com/6850110/diff/2005/src/pkg/net/fd_unix.go#newcode503>\r\n> src/pkg/net/fd_unix.go:503: if n == 0 && err == nil && fd.sotype !=\r\n> syscall.SOCK_DGRAM {\r\n> On 2012/11/27 21:42:59, mikio wrote:\r\n>\r\n>> ditto\r\n>>\r\n>\r\n> Done.\r\n>\r\n> https://codereview.appspot.**com/6850110/<https://codereview.appspot.com/6850110/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-28 00:07:53.347040",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"jsing@google.com",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=1289e67dec66 ***\n\nnet: move deadline logic into pollServer\n\nUpdate issue 4434.\n\nThe proposal attempts to reduce the number of places where fd,{r,w}deadline is checked and updated in preparation for issue 4434. In doing so the deadline logic is simplified by letting the pollster return errTimeout from netFD.Wait{Read,Write} as part of the wakeup logic.\n\nThe behaviour of setting n = 0 has been restored to match rev 2a55e349097f, which was the previous change to fd_unix.go before CL 6851096.\n\nR=jsing, bradfitz, mikioh.mikioh, rsc\nCC=fullung, golang-dev\nhttp://codereview.appspot.com/6850110",
			"disapproval": false,
			"date": "2012-11-28 00:29:48.159710",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"jsing@google.com",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL. I'm leaving this code to stress test for a few hours, then will submit if nothing bad falls out.\n\n@jsing - i believe that in the case where Read is called after the deadline has passed the cost is about the same as the original code in rev 2a55e349097f. Previously a call to netFD.Read would have executed syscall.Read unconditionally, then gone into WaitRead, waited for the lock, gone into AddFD, and called time.Now before detecting the deadline had passed. Now the check of the deadline is done at the top of the loop. If the deadline passes after the check at the top, but before the non blocking syscall.Read, then the original logic applies.\n\nOn my machine time.Now() is ~ 26ns, but may be higher on the BSDs that don't have a fast syscall mechanism. \n\n@ mikioh - yes, I intend to write test cases for the lesser known Read{Msg,From} variations to resolve that TODO.\n\nhttps://codereview.appspot.com/6850110/diff/11002/src/pkg/net/fd_unix.go\nFile src/pkg/net/fd_unix.go (right):\n\nhttps://codereview.appspot.com/6850110/diff/11002/src/pkg/net/fd_unix.go#newcode435\nsrc/pkg/net/fd_unix.go:435: if n == 0 && err == nil && fd.sotype == syscall.SOCK_STREAM {\nOn 2012/11/27 15:26:58, rsc wrote:\n> Please change this back to != SOCK_DGRAM.\n> This is mishandling SOCK_SEQPACKET.\n\nDone.\n\nhttps://codereview.appspot.com/6850110/diff/11002/src/pkg/net/fd_unix.go#newcode469\nsrc/pkg/net/fd_unix.go:469: if n == 0 && err == nil && fd.sotype == syscall.SOCK_STREAM {\nOn 2012/11/27 15:26:58, rsc wrote:\n> Same.\n\nDone.\n\nhttps://codereview.appspot.com/6850110/diff/11002/src/pkg/net/fd_unix.go#newcode503\nsrc/pkg/net/fd_unix.go:503: if n == 0 && err == nil && fd.sotype == syscall.SOCK_STREAM {\nOn 2012/11/27 15:26:58, rsc wrote:\n> Same.\n\nDone.",
			"disapproval": false,
			"date": "2012-11-27 21:35:16.390690",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"jsing@google.com",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "nits\n\nhttps://codereview.appspot.com/6850110/diff/2005/src/pkg/net/fd_unix.go\nFile src/pkg/net/fd_unix.go (right):\n\nhttps://codereview.appspot.com/6850110/diff/2005/src/pkg/net/fd_unix.go#newcode435\nsrc/pkg/net/fd_unix.go:435: if n == 0 && err == nil && fd.sotype != syscall.SOCK_DGRAM {\n&& fd.sotype != syscall.SOCK_DGRAM && fd.sotype != syscall.SOCK_RAW\n\nhttps://codereview.appspot.com/6850110/diff/2005/src/pkg/net/fd_unix.go#newcode469\nsrc/pkg/net/fd_unix.go:469: if n == 0 && err == nil && fd.sotype != syscall.SOCK_DGRAM {\nditto\n\nhttps://codereview.appspot.com/6850110/diff/2005/src/pkg/net/fd_unix.go#newcode503\nsrc/pkg/net/fd_unix.go:503: if n == 0 && err == nil && fd.sotype != syscall.SOCK_DGRAM {\nditto",
			"disapproval": false,
			"date": "2012-11-27 21:42:59.356880",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dave@cheney.net",
				"jsing@google.com",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "So far looking nice, and simpler.\n\nYou going to do the rest in this same CL?\n\nhttps://codereview.appspot.com/6850110/diff/6003/src/pkg/net/fd_unix.go\nFile src/pkg/net/fd_unix.go (right):\n\nhttps://codereview.appspot.com/6850110/diff/6003/src/pkg/net/fd_unix.go#newcode40\nsrc/pkg/net/fd_unix.go:40: // owned by client\nin one of these rounds I'd like to see this whole section cleaned up and documented. e.g. ownership, locking rules, what does rdeadline <0, 0, >0 mean (and that they're unix nanos), etc.",
			"disapproval": false,
			"date": "2012-11-27 09:42:07.144810",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"jsing@google.com",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for your comments. I am encouraged to hear OpenBSD is passing. PTAL.\n\nhttps://codereview.appspot.com/6850110/diff/6003/src/pkg/net/fd_unix.go\nFile src/pkg/net/fd_unix.go (right):\n\nhttps://codereview.appspot.com/6850110/diff/6003/src/pkg/net/fd_unix.go#newcode435\nsrc/pkg/net/fd_unix.go:435: if n == 0 && err == nil && fd.sotype != syscall.SOCK_DGRAM {\nOn 2012/11/27 12:34:36, mikio wrote:\n> fd.sotype == syscall.SOCK_STREAM\n\nDone.\n\nhttps://codereview.appspot.com/6850110/diff/6003/src/pkg/net/fd_unix.go#newcode468\nsrc/pkg/net/fd_unix.go:468: }\nOn 2012/11/27 12:34:36, mikio wrote:\n> if n == 0 && err == nil && fd.sotype == syscall.SOCK_STREAM {\n>   err = io.EOF\n> } \n> \n> It's possible to transmit UDP payload size = 0 datagram.\n\nDone.\n\nhttps://codereview.appspot.com/6850110/diff/6003/src/pkg/net/fd_unix.go#newcode500\nsrc/pkg/net/fd_unix.go:500: if err == nil && n == 0 {\nOn 2012/11/27 12:34:36, mikio wrote:\n> if n == 0 && err == nil && fd.sotype == syscall.SOCK_STREAM {\n> \n> It's possible to transmit UDP payload size = 0 datagram.\n\nDone, please note the TODO on line 493.",
			"disapproval": false,
			"date": "2012-11-27 12:48:58.907480",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Nov 28, 2012 at 8:48 AM,  <dave@cheney.net> wrote:\r\n\r\n> Hopefully this is the final tweak. As the logic of that check was\r\n> getting large, I have moved it into a helper. PTAL.\r\n\r\nThanks.\r\n",
			"disapproval": false,
			"date": "2012-11-28 00:06:55.018660",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"jsing@google.com",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I would like to do this as two separate CLs. I'd also like to get some feedback from jsing, as this CL replaces his, and hopefully addresses his concerns.\n\nAlthough the goal is to make no change, I would like to see it passing on the builders before replacing the rdeadline,wdeadline fields with atomic accessors. \n\nThat latter change will be pretty straight forward now there are less places where we set and check the deadlines.\n\nhttps://codereview.appspot.com/6850110/diff/6003/src/pkg/net/fd_unix.go\nFile src/pkg/net/fd_unix.go (right):\n\nhttps://codereview.appspot.com/6850110/diff/6003/src/pkg/net/fd_unix.go#newcode40\nsrc/pkg/net/fd_unix.go:40: // owned by client\nOn 2012/11/27 09:42:07, bradfitz wrote:\n> in one of these rounds I'd like to see this whole section cleaned up and\n> documented. e.g. ownership, locking rules, what does rdeadline <0, 0, >0 mean\n> (and that they're unix nanos), etc.\n\nWill do in a followup CL",
			"disapproval": false,
			"date": "2012-11-27 09:52:29.241280",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Wed, Nov 28, 2012 at 12:26 AM,  <rsc@golang.org> wrote:\r\n\r\n> https://codereview.appspot.com/6850110/diff/11002/src/pkg/net/fd_unix.go#newcode435\r\n> src/pkg/net/fd_unix.go:435: if n == 0 && err == nil && fd.sotype ==\r\n> syscall.SOCK_STREAM {\r\n> Please change this back to != SOCK_DGRAM.\r\n> This is mishandling SOCK_SEQPACKET.\r\n\r\nAh, I forgot it. I'm fine with except SOCK_DGRAM and SOCK_RAW.\r\n\r\n\r\nOn Tue, Nov 27, 2012 at 9:48 PM,  <dave@cheney.net> wrote:\r\n\r\n> Done, please note the TODO on line 493.\r\n\r\nn, oobn = 0, 0 at L494? I guess it works for ReadMsgUnix on\r\nstream-type UnixConn.\r\n(not tested yet, need more test cases...)\r\n",
			"disapproval": false,
			"date": "2012-11-27 21:23:18.141990",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dave@cheney.net",
				"jsing@google.com",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6850110/diff/11002/src/pkg/net/fd_unix.go\nFile src/pkg/net/fd_unix.go (right):\n\nhttps://codereview.appspot.com/6850110/diff/11002/src/pkg/net/fd_unix.go#newcode435\nsrc/pkg/net/fd_unix.go:435: if n == 0 && err == nil && fd.sotype == syscall.SOCK_STREAM {\nPlease change this back to != SOCK_DGRAM.\nThis is mishandling SOCK_SEQPACKET.\n\nhttps://codereview.appspot.com/6850110/diff/11002/src/pkg/net/fd_unix.go#newcode469\nsrc/pkg/net/fd_unix.go:469: if n == 0 && err == nil && fd.sotype == syscall.SOCK_STREAM {\nSame.\n\nhttps://codereview.appspot.com/6850110/diff/11002/src/pkg/net/fd_unix.go#newcode503\nsrc/pkg/net/fd_unix.go:503: if n == 0 && err == nil && fd.sotype == syscall.SOCK_STREAM {\nSame.",
			"disapproval": false,
			"date": "2012-11-27 15:26:58.657430",
			"approval": true
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 6850110: net: move deadline logic into pollServer",
	"created": "2012-11-27 04:29:58.694270",
	"patchsets": [
		1,
		2001,
		3,
		5002,
		7001,
		10001,
		6003,
		11002,
		2005,
		2006,
		7004
	],
	"modified": "2012-11-28 00:34:52.186730",
	"closed": true,
	"issue": 6850110
}