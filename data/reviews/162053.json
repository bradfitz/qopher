{
	"description": "A first stab at porting the XCB X11 protocol bindings to go.\n\nThe python script needs a checkout of xcb/proto to generate\nan xproto.go file, which together with xgb.go provide functions\nto access all of the core X11 protocol requests. I have included the\ngenerated file.\n\nExtensions and authentication methods are not implemented.",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "tor.andersson@gmail.com",
			"recipients": [
				"tor.andersson@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello.\n\nI spent a few evenings last week cooking up some X11 bindings for go\nbased on XCB, figuring it would be something handy to have. The\ncontributions page didn't say much on what sort of submissions\nyou welcome, so if this is sent to the wrong place I apologize.\n\n-tor",
			"disapproval": false,
			"date": "2009-11-29 22:43:16.414916",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"tor.andersson@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "Wow!\n\nThis looks great; thanks for digging into this.\nAdding Nigel, who was working on an X11 \ninterface by hand.  I think the generated code\nis definitely a good approach.\n\nNigel may have more comments, but in general\nthis seems like a very reasonable and Go-like\ninterface.  I suspect that we'll want to eliminate\nthe single-goroutine restriction eventually,\nbut it's fine for now.\n\nI made a bunch of small comments below.\nI realize this is a work in progress ad I'm happy\nto check this in as a checkpoint whenever\nas long as the comment in the Makefile is\naddressed.\n\nThanks again.\n\n(I see your CLA entry; thanks.)\n\nhttp://codereview.appspot.com/162053/diff/1019/1021\nFile src/pkg/xgb/Makefile (right):\n\nhttp://codereview.appspot.com/162053/diff/1019/1021#newcode14\nsrc/pkg/xgb/Makefile:14: xproto.go: go_client.py proto/src/xproto.xml\nIs this going to complain if proto/src/xproto.xml\ndoes not exist?  Please test that you can rm -rf proto\nand make still runs.\n\nhttp://codereview.appspot.com/162053/diff/1019/1022\nFile src/pkg/xgb/go_client.py (right):\n\nhttp://codereview.appspot.com/162053/diff/1019/1022#newcode1\nsrc/pkg/xgb/go_client.py:1: #!/usr/bin/env python\nIt would be interesting to see what this looks like in Go.\nI think the \"xml\" and \"template\" packages might make\nthis even easier.  I've certainly found xml simpler than\nxml.etree.cElementTree.\n\nThat said, it's certainly ok to leave this as is.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023\nFile src/pkg/xgb/xgb.go (right):\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode16\nsrc/pkg/xgb/xgb.go:16: // The connection to the server. This struct is not reentrant, so please\nDocumentation comments should begin with the name\nof the thing being documented. See\nhttp://golang.org/doc/effective_go.html#commentary\n\n// A Conn represents a connection to the X server.\n// Only one goroutine should use a Conn's methods at a time.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode19\nsrc/pkg/xgb/xgb.go:19: sock\t\tnet.Conn;\nplease call this conn\n(on some systems it might not be a socket).\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode24\nsrc/pkg/xgb/xgb.go:24: error\t\tos.Error;\ntypically err no error.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode43\nsrc/pkg/xgb/xgb.go:43: func put8(buf []byte, offset int, v uint8)\t{ buf[offset] = v }\nInstead of passing offset explicitly, you could just use\nslicing and make this put8(buf []byte, v uint8) etc.\nThe call sites would change from put8(buf, offset, v)\nto put8(buf[offset:], v), etc. (for all the put/get)\n\nFor the specific case of put8/get8, it looks like they\nare unused; delete?\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode77\nsrc/pkg/xgb/xgb.go:77: y = ((y + (y >> 3)) & 030707070707) % 077;\nThe % 077 trick might have made sense on a PDP-10,\nbut it doesn't save much on today's machines.\nIt's cute, but a for loop would be clearer and plenty\nefficient, since each one of these calls is balanced\nby a network operation and packet marshalling.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode90\nsrc/pkg/xgb/xgb.go:90: for i := q.a; i < q.b; i++ {\nIf you update to the latest tree \n(cd $GOROOT/src; hg pull -u; ./all.bash)\nyou can write this as\n\ncopy(q.data, q.data[q.a:])\n\nIf the queue is typically going to have lots\nof elements in it, you could avoid the copying\nentirely by changing the queue to be\n\ntype queue struct {\n    data [][]byte;\n    i int;  // offset in data\n    n int;  // number of valid elements\n}\n\nbut then the copy into newData below would\nhave to be two copy() calls for the two halves\nso maybe that's not worth it.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode96\nsrc/pkg/xgb/xgb.go:96: for i := q.a; i < q.b; i++ {\ncopy(newData, q.data);\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode106\nsrc/pkg/xgb/xgb.go:106: func (q *queue) unqueue() []byte {\nthe verb is usually dequeue.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode115\nsrc/pkg/xgb/xgb.go:115: // Send a request to the server and return its associated sequence number, or cookie.\n// sendRequest sends ... and returns ...\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode128\nsrc/pkg/xgb/xgb.go:128: // Send enough bytes to align to a 4-byte border.\n// sendPadding sends ....\n// It is used to pad ...\n\netc. (I won't mark each comment)\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode131\nsrc/pkg/xgb/xgb.go:131: var three [3]byte;\nThis allocates each time sendPadding is called.\nIt probably doesn't matter, but if you move\nthis into c *Conn as zero [3]byte\nand use c.sock.Write(c.zero[0:x]) then \nyou avoid the allocation.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode134\nsrc/pkg/xgb/xgb.go:134: _, error := c.sock.Write(three[0:x]);\nTypically called err not error.  (etc.)\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode175\nsrc/pkg/xgb/xgb.go:175: if buf[0] == 0 {\nswitch buf[0] {\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode184\nsrc/pkg/xgb/xgb.go:184: return os.NewError(str);\nMore idiomatic Go would be to put this information\nin a struct and use that as the error.\n\ntype Error struct {\n    Name string;\n    Major uint8;\n    Minor uint16;\n    Cookie uint16;\n    Id uint32;\n}\n\nfunc (e *Error) String() string {\n    return fmt.Sprintf(\"Bad%s ...\", ...)\n}\n\nand then here just do\n\nerr := &Error{\n    Name: errorNames[buf[1]],\n    Cookie: get16(buf[2:]),\n    Id: get32(buf[4:]),\n    Minor: get16(buf[8:]),\n    Major: buf[10]\n};\nfmt.Fprintf(os.Stderr, \"x protocol error: %s\\n\", err);\nreturn err;\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode192\nsrc/pkg/xgb/xgb.go:192: copy(bigbuf[0:32], buf);\nI see you found copy.  On the next line you can drop\nthe len(bigbuf).  To fix all of these programmatically,\nyou can run \n\ngofmt -w -r 'a[b:len(a)] -> a[b:]' xgb.go\n\nthough it looks like maybe this is the only one.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode215\nsrc/pkg/xgb/xgb.go:215: reply, exists := c.replies[cookie];\nexists is fine, but this is typically ok, and merged\nwith the next line:\n\nif reply, ok := c.replies[cookie]; ok {\n    c.replies[cookie] = nil, false;\n    return reply, nil;\n}\nif err := c.readNextReply(); err != nil {\n    return nil, err;\n}\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode234\nsrc/pkg/xgb/xgb.go:234: return parseEvent(reply), nil\nIt seems like if parseEvent fails, it should return an\nos.Error instead of an error masquerading as an Event.\nIf you make parseEvent return (Event, os.Error) too,\nhere you can do\n\nreturn parseEvent(reply)\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode256\nsrc/pkg/xgb/xgb.go:256: // Return the Screen info for the default screen (0 or the one given in the DISPLAY environment variable).\nThis mentions the DISPLAY environment variable\nbut Dial doesn't seem to. \n\ns/DISPLAY environment variable/display string/?\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode290\nsrc/pkg/xgb/xgb.go:290: var authName, authData []byte;\n// TODO: Fill these in?\n\nhttp://codereview.appspot.com/162053/diff/1019/1024\nFile src/pkg/xgb/xproto.go (right):\n\nhttp://codereview.appspot.com/162053/diff/1019/1024#newcode110\nsrc/pkg/xgb/xproto.go:110: Depth\t\tbyte;\nThis is an admittedly fine distinction,\nbut we tend to use uint8 for small integers\nand byte for bytes (like the bytes of \"hello\").\nSince depth is a number first, it should\nprobably be uint8.  This might be too much\nfor the converter, in which case byte is fine.\n\nhttp://codereview.appspot.com/162053/diff/1019/1024#newcode122\nsrc/pkg/xgb/xproto.go:122: // enum VisualClass\nI don't know how reasonable it is to do this, but \nthe constants would typically be spelled using CamelCase\nin Go, and they could have their own type to avoid\naccidental uses as other things.  Especially in the X protocol\nwith all its many different constants, this seems useful:\n\ntype VisualClass uint8;\nconst (\n    VisualClassStaticGray VisualClass = iota;\n    VisualClassGrayScale;\n    VisualClassStaticColor;\n    ...\n)\n\nIf all you have are the values in the xml, then the iota\ndoesn't make sense but it may still make sense to \nput the type annotation on each line.\n\nhttp://codereview.appspot.com/162053/diff/1019/1024#newcode172\nsrc/pkg/xgb/xproto.go:172: EVENT_MASK_NO_EVENT\t\t\t= 0;\nSimilarly\n\ntype EventMask uint32\nconst (\n    EventMaskNoEvent EventMask = 0;\n    EventMaskKeyPress EventMask = 1<<(iota-1);\n    EventMaskKeyRelease;\n    ...\n)\n\nhttp://codereview.appspot.com/162053/diff/1019/1024#newcode4249\nsrc/pkg/xgb/xproto.go:4249: }\nWow, that generator sure did a lot of work!",
			"disapproval": false,
			"date": "2009-11-30 02:01:11.396548",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"tor.andersson@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/162053/diff/1019/1023\nFile src/pkg/xgb/xgb.go (right):\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode9\nsrc/pkg/xgb/xgb.go:9: import \"fmt\"\nRuss -- is it conventional to have only one \"import\" and the package names within ()s?\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode22\nsrc/pkg/xgb/xgb.go:22: replies\t\tmap[uint16][]byte;\nRuss -- would it be worth having\ntype seqNum uint16;\nand\ntype xID uint32;\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode33\nsrc/pkg/xgb/xgb.go:33: // Generate a new unused ID for use with requests like CreateWindow.\nCan you add a TODO comment to check for ID overflow, as per libxcb's xcb_generate_id?\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode120\nsrc/pkg/xgb/xgb.go:120: fmt.Fprintf(os.Stderr, \"x protocol write error: %s\\n\", error);\nNit: I think the \"X\" in \"X protocol\" should be capitalized.\n\nAlso, I'm not sure if a library should be printing to stderr instead of just returning an os.Error to the caller somehow, but I'm not the definitive guide on go error handling.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode167\nsrc/pkg/xgb/xgb.go:167: func (c *Conn) readNextReply() os.Error {\nSince this method reads both replies and events, perhaps a better name is just readNext().\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode259\nsrc/pkg/xgb/xgb.go:259: // Connect to the X server given in the 'display' string.\nIs there an example main.go program to show me how to use this? I'm confused as to what display string to pass to Dial -- it's not \":0.0\", right?\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode291\nsrc/pkg/xgb/xgb.go:291: var buf []byte;\nI would fold this line with the next one using the := short variable declaration. Specifically:\nbuf := make(etcetera);\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode353\nsrc/pkg/xgb/xgb.go:353: type ClientMessageData struct /*union */ {\nI'd drop the /*union*/, since you've already made your point in the comment above, but Russ would have a better notion of Go style.\n\nhttp://codereview.appspot.com/162053/diff/1019/1024\nFile src/pkg/xgb/xproto.go (right):\n\nhttp://codereview.appspot.com/162053/diff/1019/1024#newcode1348\nsrc/pkg/xgb/xproto.go:1348: b := make([]byte, 8);\nThis question for Russ rather than Tor:\n\nIIUC, this line (and many similar ones for each of the other X11 requests) allocates a new buffer, which will be garbage collected at the end of the method call. An alternative is to have a sufficiently large buffer as a member of the Conn struct (c.f. the buf member in pkg/exp/draw/x11/conn.go), and re-use it for each call. Would it be worth doing something similar in the (generated) xproto.go?",
			"disapproval": false,
			"date": "2009-11-30 13:02:33.391910",
			"approval": false
		},
		{
			"sender": "tor.andersson@gmail.com",
			"recipients": [
				"tor.andersson@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "In parseEvent and friends I return the struct by value, boxed into an\ninterface. I don't know if this is preferred to returning a pointer, but\nit made the type switch look nicer.\n\nI have considered wrapping the connection with a buffered reader/writer,\nsince there can be a lot of small reads and writes. That would require\nflushing in readNext.\n\nWhen it comes to extensions, the only one I really care about is Shm, for\nXShmPutImage so that image data doesn't have to be pumped over the\nsocket. I haven't seen an mmap() call exposed in the os package, but you\nuse it internally in the runtime for malloc. Eventually we will want a\nsolution to this, especially for doing client side rendering in draw.\n\nhttp://codereview.appspot.com/162053/diff/1019/1021\nFile src/pkg/xgb/Makefile (right):\n\nhttp://codereview.appspot.com/162053/diff/1019/1021#newcode14\nsrc/pkg/xgb/Makefile:14: xproto.go: go_client.py proto/src/xproto.xml\nOn 2009/11/30 02:01:11, rsc wrote:\n> Is this going to complain if proto/src/xproto.xml\n> does not exist?  Please test that you can rm -rf proto\n> and make still runs.\n\nIt will try to do a git checkout...\n\nI am unsure of the legal issues involved if we want to just\nswallow the xcb/proto package. If I do rewrite the generating\ntool then all we'd need are the xml files (xproto.xml primarily).\n\nhttp://codereview.appspot.com/162053/diff/1019/1022\nFile src/pkg/xgb/go_client.py (right):\n\nhttp://codereview.appspot.com/162053/diff/1019/1022#newcode1\nsrc/pkg/xgb/go_client.py:1: #!/usr/bin/env python\nOn 2009/11/30 02:01:11, rsc wrote:\n> It would be interesting to see what this looks like in Go.\n> I think the \"xml\" and \"template\" packages might make\n> this even easier.  I've certainly found xml simpler than\n> xml.etree.cElementTree.\n> \n> That said, it's certainly ok to leave this as is.\n\nI just took a look at the xml package and it sure looks neat.\nI'll take a look and see what I can do, it would be an interesting\nexercise and this script is rather ugly and inflexible.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023\nFile src/pkg/xgb/xgb.go (right):\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode16\nsrc/pkg/xgb/xgb.go:16: // The connection to the server. This struct is not reentrant, so please\nOn 2009/11/30 02:01:11, rsc wrote:\n> Documentation comments should begin with the name\n> of the thing being documented. See\n> http://golang.org/doc/effective_go.html#commentary\n> \n> // A Conn represents a connection to the X server.\n> // Only one goroutine should use a Conn's methods at a time.\n> \n\nDone.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode19\nsrc/pkg/xgb/xgb.go:19: sock\t\tnet.Conn;\nOn 2009/11/30 02:01:11, rsc wrote:\n> please call this conn\n> (on some systems it might not be a socket).\n> \n\nDone.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode22\nsrc/pkg/xgb/xgb.go:22: replies\t\tmap[uint16][]byte;\nOn 2009/11/30 13:02:33, nigeltao_golang wrote:\n> Russ -- would it be worth having\n> type seqNum uint16;\n> and\n> type xID uint32;\n\nI decided against using too many type aliases, especially the Drawable/Pixmap/Window stuff that would require a lot of\nannoying typecasts on the user side of the interface. Having\nthe types makes sense too, and the drawbacks won't be so bad\nif we use Xid instead of Window/Drawable/Pixmap and Gc/Font/Fontable.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode24\nsrc/pkg/xgb/xgb.go:24: error\t\tos.Error;\nOn 2009/11/30 02:01:11, rsc wrote:\n> typically err no error.\n> \n\nI've been writing error and okay for five years in my other projects. I generally prefer pronouncable and readable names, especially when they don't conflict with brevity. However, if err is the tradition in go, then so be it.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode33\nsrc/pkg/xgb/xgb.go:33: // Generate a new unused ID for use with requests like CreateWindow.\nOn 2009/11/30 13:02:33, nigeltao_golang wrote:\n> Can you add a TODO comment to check for ID overflow, as per libxcb's\n> xcb_generate_id?\n\nWhat should the behavior be when we run out?\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode43\nsrc/pkg/xgb/xgb.go:43: func put8(buf []byte, offset int, v uint8)\t{ buf[offset] = v }\nOn 2009/11/30 02:01:11, rsc wrote:\n> Instead of passing offset explicitly, you could just use\n> slicing and make this put8(buf []byte, v uint8) etc.\n> The call sites would change from put8(buf, offset, v)\n> to put8(buf[offset:], v), etc. (for all the put/get)\n\nGood idea, but I could also make the auto generated code do the bit shuffling directly.\n\n> For the specific case of put8/get8, it looks like they\n> are unused; delete?\n\nThey're used in the generated code. I was lazy: \"put%d\".\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode77\nsrc/pkg/xgb/xgb.go:77: y = ((y + (y >> 3)) & 030707070707) % 077;\nOn 2009/11/30 02:01:11, rsc wrote:\n> The % 077 trick might have made sense on a PDP-10,\n> but it doesn't save much on today's machines.\n> It's cute, but a for loop would be clearer and plenty\n> efficient, since each one of these calls is balanced\n> by a network operation and packet marshalling.\n> \n\nDone.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode90\nsrc/pkg/xgb/xgb.go:90: for i := q.a; i < q.b; i++ {\nOn 2009/11/30 02:01:11, rsc wrote:\n> If you update to the latest tree \n> (cd $GOROOT/src; hg pull -u; ./all.bash)\n> you can write this as\n> \n> copy(q.data, q.data[q.a:])\n> \n> If the queue is typically going to have lots\n> of elements in it, you could avoid the copying\n> entirely by changing the queue to be\n> \n> type queue struct {\n>     data [][]byte;\n>     i int;  // offset in data\n>     n int;  // number of valid elements\n> }\n> \n> but then the copy into newData below would\n> have to be two copy() calls for the two halves\n> so maybe that's not worth it.\n\nOr I could just have a and b wrap around len(data) with %.\nBut that would involve actual thinking, and I'd get it wrong :)\n\nFixed the other stuff.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode96\nsrc/pkg/xgb/xgb.go:96: for i := q.a; i < q.b; i++ {\nOn 2009/11/30 02:01:11, rsc wrote:\n> copy(newData, q.data);\n> \n\nDone.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode106\nsrc/pkg/xgb/xgb.go:106: func (q *queue) unqueue() []byte {\nOn 2009/11/30 02:01:11, rsc wrote:\n> the verb is usually dequeue.\n> \n\nDone.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode115\nsrc/pkg/xgb/xgb.go:115: // Send a request to the server and return its associated sequence number, or cookie.\nOn 2009/11/30 02:01:11, rsc wrote:\n> // sendRequest sends ... and returns ...\n> \n\nDone.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode128\nsrc/pkg/xgb/xgb.go:128: // Send enough bytes to align to a 4-byte border.\nOn 2009/11/30 02:01:11, rsc wrote:\n> // sendPadding sends ....\n> // It is used to pad ...\n> \n> etc. (I won't mark each comment)\n> \n\nDone.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode131\nsrc/pkg/xgb/xgb.go:131: var three [3]byte;\nOn 2009/11/30 02:01:11, rsc wrote:\n> This allocates each time sendPadding is called.\n> It probably doesn't matter, but if you move\n> this into c *Conn as zero [3]byte\n> and use c.sock.Write(c.zero[0:x]) then \n> you avoid the allocation.\n\nOw. I just assumed that since it was a constant size array and it wasn't created by new, make or & it would be stack allocated.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode134\nsrc/pkg/xgb/xgb.go:134: _, error := c.sock.Write(three[0:x]);\nOn 2009/11/30 02:01:11, rsc wrote:\n> Typically called err not error.  (etc.)\n> \n\nDone.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode175\nsrc/pkg/xgb/xgb.go:175: if buf[0] == 0 {\nOn 2009/11/30 02:01:11, rsc wrote:\n> switch buf[0] {\n> \n\nDone.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode184\nsrc/pkg/xgb/xgb.go:184: return os.NewError(str);\nOn 2009/11/30 02:01:11, rsc wrote:\n> More idiomatic Go would be to put this information\n> in a struct and use that as the error.\n> \n> type Error struct {\n>     Name string;\n>     Major uint8;\n>     Minor uint16;\n>     Cookie uint16;\n>     Id uint32;\n> }\n> \n> func (e *Error) String() string {\n>     return fmt.Sprintf(\"Bad%s ...\", ...)\n> }\n> \n> and then here just do\n> \n> err := &Error{\n>     Name: errorNames[buf[1]],\n>     Cookie: get16(buf[2:]),\n>     Id: get32(buf[4:]),\n>     Minor: get16(buf[8:]),\n>     Major: buf[10]\n> };\n> fmt.Fprintf(os.Stderr, \"x protocol error: %s\\n\", err);\n> return err;\n> \n\nDone.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode192\nsrc/pkg/xgb/xgb.go:192: copy(bigbuf[0:32], buf);\nOn 2009/11/30 02:01:11, rsc wrote:\n> I see you found copy.  On the next line you can drop\n> the len(bigbuf).  To fix all of these programmatically,\n> you can run \n> \n> gofmt -w -r 'a[b:len(a)] -> a[b:]' xgb.go\n> \n> though it looks like maybe this is the only one.\n> \n\nDone.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode215\nsrc/pkg/xgb/xgb.go:215: reply, exists := c.replies[cookie];\nOn 2009/11/30 02:01:11, rsc wrote:\n> exists is fine, but this is typically ok, and merged\n> with the next line:\n> \n> if reply, ok := c.replies[cookie]; ok {\n>     c.replies[cookie] = nil, false;\n>     return reply, nil;\n> }\n> if err := c.readNextReply(); err != nil {\n>     return nil, err;\n> }\n> \n\nI generally dislike putting more than one concept/instruction/whatsthename on each line, like the merged call and test idiom in the readNextReply statement.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode234\nsrc/pkg/xgb/xgb.go:234: return parseEvent(reply), nil\nOn 2009/11/30 02:01:11, rsc wrote:\n> It seems like if parseEvent fails, it should return an\n> os.Error instead of an error masquerading as an Event.\n> If you make parseEvent return (Event, os.Error) too,\n> here you can do\n> \n> return parseEvent(reply)\n> \n\nDone.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode256\nsrc/pkg/xgb/xgb.go:256: // Return the Screen info for the default screen (0 or the one given in the DISPLAY environment variable).\nOn 2009/11/30 02:01:11, rsc wrote:\n> This mentions the DISPLAY environment variable\n> but Dial doesn't seem to. \n> \n> s/DISPLAY environment variable/display string/?\n> \n\nDone.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode259\nsrc/pkg/xgb/xgb.go:259: // Connect to the X server given in the 'display' string.\nOn 2009/11/30 13:02:33, nigeltao_golang wrote:\n> Is there an example main.go program to show me how to use this? I'm confused as\n> to what display string to pass to Dial -- it's not \":0.0\", right?\n\nSee my darcs repo for an example program:\n\nhttp://ghostscript.com/~tor/repos/xgb/main.go\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode290\nsrc/pkg/xgb/xgb.go:290: var authName, authData []byte;\nOn 2009/11/30 02:01:11, rsc wrote:\n> // TODO: Fill these in?\n> \n\nIndeed. It's one of the things I haven't done yet, reading the magic cookies from .Xauthority.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode291\nsrc/pkg/xgb/xgb.go:291: var buf []byte;\nOn 2009/11/30 13:02:33, nigeltao_golang wrote:\n> I would fold this line with the next one using the := short variable\n> declaration. Specifically:\n> buf := make(etcetera);\n\nI put it separately because I reuse the variable for another buffer further down.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode353\nsrc/pkg/xgb/xgb.go:353: type ClientMessageData struct /*union */ {\nOn 2009/11/30 13:02:33, nigeltao_golang wrote:\n> I'd drop the /*union*/, since you've already made your point in the comment\n> above, but Russ would have a better notion of Go style.\n\nDone.\n\nhttp://codereview.appspot.com/162053/diff/1019/1024\nFile src/pkg/xgb/xproto.go (right):\n\nhttp://codereview.appspot.com/162053/diff/1019/1024#newcode110\nsrc/pkg/xgb/xproto.go:110: Depth\t\tbyte;\nOn 2009/11/30 02:01:11, rsc wrote:\n> This is an admittedly fine distinction,\n> but we tend to use uint8 for small integers\n> and byte for bytes (like the bytes of \"hello\").\n> Since depth is a number first, it should\n> probably be uint8.  This might be too much\n> for the converter, in which case byte is fine.\n\nThe information is in the XML file but has disappeared\nby the time the proto/xcbgen code is done with it.\nShould I rewrite the generation code in go I can certainly do this.\n\nhttp://codereview.appspot.com/162053/diff/1019/1024#newcode122\nsrc/pkg/xgb/xproto.go:122: // enum VisualClass\nOn 2009/11/30 02:01:11, rsc wrote:\n> I don't know how reasonable it is to do this, but \n> the constants would typically be spelled using CamelCase\n> in Go, and they could have their own type to avoid\n> accidental uses as other things.  Especially in the X protocol\n> with all its many different constants, this seems useful:\n\nI've seen CAPS in the os package and thought that was the standard. I'd be happy to camel-casify it (well, not too fond of camel case in general but that's a discussion for another time).\n\n> type VisualClass uint8;\n> const (\n>     VisualClassStaticGray VisualClass = iota;\n>     VisualClassGrayScale;\n>     VisualClassStaticColor;\n>     ...\n> )\n> \n> If all you have are the values in the xml, then the iota\n> doesn't make sense but it may still make sense to \n> put the type annotation on each line.\n> \n\nLikewise the enum info is gone (or I just didn't see it) by the\ntime my python script gets it. Since consts have no type I don't\nsee how the enum types would be useful (other than for godoc,\nand that's dubious).",
			"disapproval": false,
			"date": "2009-11-30 13:48:45.707714",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"tor.andersson@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "couple of replies.  please run \n\nhg upload 162053\n\nat some point so we can see the\nchanges you made (and commit them\nonce they're ready).\n\nhttp://codereview.appspot.com/162053/diff/1019/1021\nFile src/pkg/xgb/Makefile (right):\n\nhttp://codereview.appspot.com/162053/diff/1019/1021#newcode14\nsrc/pkg/xgb/Makefile:14: xproto.go: go_client.py proto/src/xproto.xml\nOn 2009/11/30 13:48:46, tor wrote:\n> On 2009/11/30 02:01:11, rsc wrote:\n> > Is this going to complain if proto/src/xproto.xml\n> > does not exist?  Please test that you can rm -rf proto\n> > and make still runs.\n> \n> It will try to do a git checkout...\n> \n> I am unsure of the legal issues involved if we want to just\n> swallow the xcb/proto package. If I do rewrite the generating\n> tool then all we'd need are the xml files (xproto.xml primarily).\n\nI think it's fine to have the code in the makefile to\nregenerate, but it shouldn't happen on every build,\nsince these files don't change very often and then\nwe avoid needing to have a copy of the xcb files.\n\nIf you change the target name from xproto.go to \nsomething else (say, xproto), then people can still run\n\"make xproto\" to update but the normal build won't\nbother.  That seems like a good balance.\n\nIt's pretty close to what we do in the unicode package.\n\nIf you do rewrite the generator as a pure Go program\n(which can wait until later) then it might even be able\nto fetch the XML from a git web server instead of\nneeding the local git checkout.  The unicode maketables.go\njust reads its files right off the unicode web site.\n\nAnyway, this can certainly wait; what you've got here is a good\ncheckpoint.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023\nFile src/pkg/xgb/xgb.go (right):\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode9\nsrc/pkg/xgb/xgb.go:9: import \"fmt\"\nOn 2009/11/30 13:02:33, nigeltao_golang wrote:\n> Russ -- is it conventional to have only one \"import\" and the package names\n> within ()s?\n\nGood catch - this import list should be factored.\n\nimport (\n   \"fmt\";\n   \"os\";\n   ...\n)\n\nand sorted\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode22\nsrc/pkg/xgb/xgb.go:22: replies\t\tmap[uint16][]byte;\nOn 2009/11/30 13:48:46, tor wrote:\n> On 2009/11/30 13:02:33, nigeltao_golang wrote:\n> > Russ -- would it be worth having\n> > type seqNum uint16;\n> > and\n> > type xID uint32;\n> \n> I decided against using too many type aliases, especially the\n> Drawable/Pixmap/Window stuff that would require a lot of\n> annoying typecasts on the user side of the interface. Having\n> the types makes sense too, and the drawbacks won't be so bad\n> if we use Xid instead of Window/Drawable/Pixmap and Gc/Font/Fontable.\n\nThis seems like a good compromise: it's always confused\nme to have to use all those different types in the core X libraries,\nbut separating ids from other integers would be a good thing\nand shouldn't cause many casts.  The package already has xgb\nin the name so there's no need for a leading X.  \n\ntype Id uint32\n\nwould mean clients see xgb.Id which is pretty good.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode24\nsrc/pkg/xgb/xgb.go:24: error\t\tos.Error;\nOn 2009/11/30 13:48:46, tor wrote:\n> On 2009/11/30 02:01:11, rsc wrote:\n> > typically err no error.\n> > \n> \n> I've been writing error and okay for five years in my other projects. I\n> generally prefer pronouncable and readable names, especially when they don't\n> conflict with brevity. However, if err is the tradition in go, then so be it.\n\nI certainly understand the consistency in your other projects,\nbut the consistency here is err, ok.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode33\nsrc/pkg/xgb/xgb.go:33: // Generate a new unused ID for use with requests like CreateWindow.\nOn 2009/11/30 13:48:46, tor wrote:\n> On 2009/11/30 13:02:33, nigeltao_golang wrote:\n> > Can you add a TODO comment to check for ID overflow, as per libxcb's\n> > xcb_generate_id?\n> \n> What should the behavior be when we run out?\n\nThat's why it's a TODO, I guess.  ;-)\n// TODO(tor,nigeltao): Handle id overflow.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode131\nsrc/pkg/xgb/xgb.go:131: var three [3]byte;\nOn 2009/11/30 13:48:46, tor wrote:\n> On 2009/11/30 02:01:11, rsc wrote:\n> > This allocates each time sendPadding is called.\n> > It probably doesn't matter, but if you move\n> > this into c *Conn as zero [3]byte\n> > and use c.sock.Write(c.zero[0:x]) then \n> > you avoid the allocation.\n> \n> Ow. I just assumed that since it was a constant size array and it wasn't created\n> by new, make or & it would be stack allocated.\n\nIf you take its address and the compiler isn't sure that the\nreference won't last past the function call, it goes on the stack.\nThere's no way for the compiler to know whether Write is going\nto squirrel the pointer away for later.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode215\nsrc/pkg/xgb/xgb.go:215: reply, exists := c.replies[cookie];\nOn 2009/11/30 13:48:46, tor wrote:\n> On 2009/11/30 02:01:11, rsc wrote:\n> > exists is fine, but this is typically ok, and merged\n> > with the next line:\n> > \n> > if reply, ok := c.replies[cookie]; ok {\n> >     c.replies[cookie] = nil, false;\n> >     return reply, nil;\n> > }\n> > if err := c.readNextReply(); err != nil {\n> >     return nil, err;\n> > }\n> > \n> \n> I generally dislike putting more than one concept/instruction/whatsthename on\n> each line, like the merged call and test idiom in the readNextReply statement.\n\nI'm sympathetic to that but it's still a common Go idiom and looks\nout of place here not to merge them.\n\nhttp://codereview.appspot.com/162053/diff/1019/1023#newcode291\nsrc/pkg/xgb/xgb.go:291: var buf []byte;\nOn 2009/11/30 13:48:46, tor wrote:\n> On 2009/11/30 13:02:33, nigeltao_golang wrote:\n> > I would fold this line with the next one using the := short variable\n> > declaration. Specifically:\n> > buf := make(etcetera);\n> \n> I put it separately because I reuse the variable for another buffer further\n> down.\n\nYou can still use := though.\nIt's pretty unusual to see var declarations \nin a function body in Go.\n\nhttp://codereview.appspot.com/162053/diff/1019/1024\nFile src/pkg/xgb/xproto.go (right):\n\nhttp://codereview.appspot.com/162053/diff/1019/1024#newcode110\nsrc/pkg/xgb/xproto.go:110: Depth\t\tbyte;\nOn 2009/11/30 13:48:46, tor wrote:\n> On 2009/11/30 02:01:11, rsc wrote:\n> > This is an admittedly fine distinction,\n> > but we tend to use uint8 for small integers\n> > and byte for bytes (like the bytes of \"hello\").\n> > Since depth is a number first, it should\n> > probably be uint8.  This might be too much\n> > for the converter, in which case byte is fine.\n> \n> The information is in the XML file but has disappeared\n> by the time the proto/xcbgen code is done with it.\n> Should I rewrite the generation code in go I can certainly do this.\n\nSure.  It's probably not worth rewriting the generation code\nin Go in this CL.  If you're interested in doing that later,\nthat'd be great.\n\nhttp://codereview.appspot.com/162053/diff/1019/1024#newcode122\nsrc/pkg/xgb/xproto.go:122: // enum VisualClass\nThe caps in the OS package are kind of grandfathered in\nbecause they are so common (O_RDONLY, EINVAL, etc)\nbut words separated by underscores should become \ncamel case in Go.  I wasn't wild about it at first but like\nany convention you get used to it.\n\n> Likewise the enum info is gone (or I just didn't see it) by the\n> time my python script gets it. Since consts have no type I don't\n> see how the enum types would be useful (other than for godoc,\n> and that's dubious).\n\nConstants can have types, they just don't have to by default.  So if you have\n\ntype VisualClass uint8\nconst (\n    VisualClassStaticGray VisualClass = 0;\n    VisualClassGrayScale VisualClass = 1;\n    ...\n)\n\ntype ImageOrder uint8\nconst (\n    ImageOrderLsbFirst ImageOrder = 0;\n    ImageOrderMsbFirst ImageOrder = 1;\n)\n\nvar x ImageByteOrder;\n\nand then you accidentally write x = VisualClassStaticGray,\nthe compiler will complain.  Same goes if x is a function\nargument or a struct field.\n\nGiven the large number of enumerations that clients have to\nmanage, this seems like it would be a win if you have the\ntype information when laying down the struct fields.\n(I don't know whether you do.)\n\nhttp://codereview.appspot.com/162053/diff/1019/1024#newcode1348\nsrc/pkg/xgb/xproto.go:1348: b := make([]byte, 8);\nOn 2009/11/30 13:02:33, nigeltao_golang wrote:\n> This question for Russ rather than Tor:\n> \n> IIUC, this line (and many similar ones for each of the other X11 requests)\n> allocates a new buffer, which will be garbage collected at the end of the method\n> call. An alternative is to have a sufficiently large buffer as a member of the\n> Conn struct (c.f. the buf member in pkg/exp/draw/x11/conn.go), and re-use it for\n> each call. Would it be worth doing something similar in the (generated)\n> xproto.go?\n\nThat's probably a good idea.  I don't mind if it happens later\n(just add a TODO comment).",
			"disapproval": false,
			"date": "2009-11-30 17:16:21.403745",
			"approval": false
		},
		{
			"sender": "tor.andersson@gmail.com",
			"recipients": [
				"tor.andersson@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "Alright, I believe I have addressed most of the comments given and I added my simple example main function so you can see how the client side looks.",
			"disapproval": false,
			"date": "2009-11-30 20:46:20.653221",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"tor.andersson@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "looks great.  please change the few nits below\nand then i'll submit it.\n\nthanks again - i'm pretty excited to have this\n\nhttp://andi.latest.codereview.appspot.com/162053/diff/3018/2011\nFile src/pkg/Makefile (right):\n\nhttp://andi.latest.codereview.appspot.com/162053/diff/3018/2011#newcode101\nsrc/pkg/Makefile:101: xgb\\\nPlease run ./all.bash again in $GOROOT/src\nand make sure it succeeds.  I suspect you\nneed to add xgb to the NOTEST list below,\nsince there are no unit tests in the package.\n\nhttp://andi.latest.codereview.appspot.com/162053/diff/3018/2012\nFile src/pkg/xgb/Makefile (right):\n\nhttp://andi.latest.codereview.appspot.com/162053/diff/3018/2012#newcode5\nsrc/pkg/xgb/Makefile:5: include $(GOROOT)/src/Make.$(GOARCH)\nPlease change to\n\ninclude ../../Make.$(GOARCH)\n\nand similarly below\n\ninclude ../../Make.pkg\n\nthis is a recent change to make make happy\nwhen $(GOROOT) contains spaces.\n\nhttp://andi.latest.codereview.appspot.com/162053/diff/3018/2013\nFile src/pkg/xgb/example.go (right):\n\nhttp://andi.latest.codereview.appspot.com/162053/diff/3018/2013#newcode1\nsrc/pkg/xgb/example.go:1: package main\nplease add usual copyright header\n\nhttp://andi.latest.codereview.appspot.com/162053/diff/3018/2013#newcode4\nsrc/pkg/xgb/example.go:4: \"os\";\nsort list\n\nhttp://andi.latest.codereview.appspot.com/162053/diff/3018/2013#newcode10\nsrc/pkg/xgb/example.go:10: c, error := xgb.Dial(os.Getenv(\"DISPLAY\"));\n,s/error/err/g\n\nhttp://andi.latest.codereview.appspot.com/162053/diff/3018/2015\nFile src/pkg/xgb/xgb.go (right):\n\nhttp://andi.latest.codereview.appspot.com/162053/diff/3018/2015#newcode373\nsrc/pkg/xgb/xgb.go:373: // Close the connection.\n// Close closes the connection to the X server.\n\nhttp://andi.latest.codereview.appspot.com/162053/diff/3018/2015#newcode381\nsrc/pkg/xgb/xgb.go:381: // Go doesn't have unions so we duplicate the data in all\nClientMessageData holds the data from a client message,\nduplicated in three forms because Go doesn't have unions.",
			"disapproval": false,
			"date": "2009-11-30 20:55:32.597031",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"tor.andersson@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=791149865a09 ***\n\nA first stab at porting the XCB X11 protocol bindings to go.\n\nThe python script needs a checkout of xcb/proto to generate\nan xproto.go file, which together with xgb.go provide functions\nto access all of the core X11 protocol requests. I have included the\ngenerated file.\n\nExtensions and authentication methods are not implemented.\n\nR=r, rsc, nigeltao_golang\nhttp://codereview.appspot.com/162053\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2009-11-30 22:25:54.227348",
			"approval": false
		},
		{
			"sender": "tor.andersson@gmail.com",
			"recipients": [
				"tor.andersson@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2009-11-30 22:03:51.823506",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"tor.andersson@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nthanks very much.\ni'm about to submit this.\ni made one change: removed the\n4-line copyright header from the\nautogenerated xproto.go and the\nlines in go_client.py that printed it.\nyou'll want to do the same before\nrunning \"hg sync\" to avoid a merge\nconflict.",
			"disapproval": false,
			"date": "2009-11-30 22:20:12.739916",
			"approval": true
		},
		{
			"sender": "nigel.tao.gnome@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "2009/12/1  <tor.andersson@gmail.com>:\n> See my darcs repo for an example program:\n>\n> http://ghostscript.com/~tor/repos/xgb/main.go\n\nI presume you mean example.go, not main.go. I'm having trouble running\nthe program. Any suggestions?\n\n$ echo $DISPLAY\n:0.0\n$ ./8.out\ncannot connect: dial tcp :6000: connection refused\ncannot connect: dial tcp :6000: connection refused\n\nI'm on Ubuntu 8.04 \"Hardy\".\n",
			"disapproval": false,
			"date": "2009-12-01 00:00:22.722172",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"tor.andersson@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2009-12-02 09:07:13.329860",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"tor.andersson@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2009-12-02 09:52:43.215491",
			"approval": false
		}
	],
	"owner_email": "tor.andersson@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "tor",
	"subject": "A first stab at porting the XCB X11 protocol bindings to go.",
	"created": "2009-11-29 22:15:24.845102",
	"patchsets": [
		1019,
		3018,
		2022
	],
	"modified": "2009-12-02 09:52:43.215743",
	"closed": false,
	"issue": 162053
}