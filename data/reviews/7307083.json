{
	"description": "spec: clarify when range x does not evaluate x\n\nFixes issue 4644.",
	"cc": [
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"adonovan@google.com"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7307083/diff/7001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7307083/diff/7001/doc/go_spec.html#newcode4376\ndoc/go_spec.html:4376: and that length may be constant.\nAlan, does the new wording clear this up for you? Most of the things you've listed are not constants.",
			"disapproval": false,
			"date": "2013-02-12 12:43:27.919010",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Feb 18, 2013 at 9:06 PM, <adonovan@google.com> wrote:\r\n\r\n> I finally understand the distinction the original spec was trying to\r\n> make, so I think the current wording is an improvement.  But the\r\n> distinction is of such a hair-splitting nature that I doubt many users\r\n> will (a) memorize it correctly and (b) use it profitably.\r\n>\r\n> I'd be inclined to simplify the spec in a future revision to something\r\n> like: x is always evaluated (and let the compiler try to optimise around\r\n> that).  Do you have a particular example that motivates the current\r\n> semantics?\r\n\r\n\r\nThe motivation for the constant rules is to allow const x = len(...) for\r\nvarious reasonable ... of array type.\r\n\r\nThe non-evaluation of the array during range falls out from rewriting for i\r\n:= range ... as for i, n := 0, len(...); i < n; i++ (more or less).\r\n\r\nI don't see any reason to change it at this point. Implementers need to\r\nknow but program authors almost never do. Except for not crashing in range\r\n*x where x is nil, it already behaves the way you say people would expect.\r\nAnd no one ever complains about their program not crashing.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-02-19 04:14:28.483250",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7307083/diff/7001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7307083/diff/7001/doc/go_spec.html#newcode4376\ndoc/go_spec.html:4376: and that length may be constant.\nmay be?",
			"disapproval": false,
			"date": "2013-02-09 21:13:29.065620",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\r\n",
			"disapproval": false,
			"date": "2013-02-11 13:05:45.525470",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/7307083/diff/7001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7307083/diff/7001/doc/go_spec.html#newcode4376\ndoc/go_spec.html:4376: and that length may be constant.\nI'm not trying to say anything about the number of iterations. I think that's a distraction. I'm just trying to point out that if len(x) is a constant, then for i = range x does not evaluate x. For example,\n\nvar p ***[4]int\nfor _ = range ***p {\n}\n\ndoes not crash, because len(***p) is never evaluated.\n\nThe bug you filed was that it was unclear when the expression is evaluated. That's all this text is trying to address.\n\nPlease see the latest text (not the version this comment is attached to).\n\nhttps://codereview.appspot.com/7307083/diff/12001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7307083/diff/12001/doc/go_spec.html#newcode4383\ndoc/go_spec.html:4383: length is evaluated; if that length may be constant\nOn 2013/02/11 14:29:54, r wrote:\n> if that length is constant by definition (see ...), \n\nDone.",
			"disapproval": false,
			"date": "2013-02-15 18:18:23.244540",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/7307083/diff/7001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7307083/diff/7001/doc/go_spec.html#newcode4376\ndoc/go_spec.html:4376: and that length may be constant.\nOn 2013/02/09 21:13:29, r wrote:\n> may be?\n\nlen(x) is not always a Go constant for x of type array. len(f()) is not a constant, for example. The details are in the \"#Length_and_capacity\" section. Instead of linking the word length I now added an explicit section reference.",
			"disapproval": false,
			"date": "2013-02-09 22:39:33.001450",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7307083/diff/14001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7307083/diff/14001/doc/go_spec.html#newcode4383\ndoc/go_spec.html:4383: length is evaluated; if that length is constant by definition\nOn 2013/02/15 18:37:06, r wrote:\n> given the pointer-to-array construction, isn't the length required to be\n> constant?\n> perhaps all you need is\n> \n> s/; if/; since/ and maybe s/\\.$/ in such cases./\n\nNo, it's not always constant. If you have\n\n  func f() [4]int\n  for i := range f() \n\nthen len(f()) is not constant (spelled out in the length and capacity section) and so f does get called.\n\nBut if you have\n\n  var p ***[4]int\n  for i := range **p \n  \nthen len(**p) is constant, so **p is never evaluated so the nil pointer deref does not happen.\n\nThe exact text in the linked-to section is:\n\nThe expressions <code>len(s)</code> and\n<code>cap(s)</code> are constants if the type of <code>s</code> is an array\nor pointer to an array and the expression <code>s</code> does not contain\n<a href=\"#Receive_operator\">channel receives</a> or\n<a href=\"#Calls\">function calls</a>; in this case <code>s</code> is not evaluated.",
			"disapproval": false,
			"date": "2013-02-15 18:44:09.606670",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"adonovan@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This spec change should probably be accompanied by appropriate tests in $GOROOT/test/range.go.\n\nhttps://codereview.appspot.com/7307083/diff/7001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7307083/diff/7001/doc/go_spec.html#newcode4376\ndoc/go_spec.html:4376: and that length may be constant.\nThis is subtle.  len(e) may be constant but e may yet have side effects.  For example:\n\n  type A [2000000000]byte\n  len(new(A))          // memory allocation occurs?\n  len(<-make(chan A))  // channel created?  received from?\n  len(makeA())         // function call occurs?\n\nThe wording here implies those effects are not observed but the section of the spec concerning effects says that calls and comms always occur.\n\nIn practice I suspect the implied optimisation is just not very useful: if you want a loop over a static interval but don't want to materialize an array operand to 'range', then just write \"for i=0; i<n; ++i\".  So perhaps a better choice would be to say that the expressions are evaluated in the usual way and all their effects observed in the usual order.",
			"disapproval": false,
			"date": "2013-02-11 19:45:23.934590",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-02-09 19:27:55.273400",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "that 'and' makes it sound like it's a consequence of the range rules rather than the length. the parentheses help but a rewrite could help more.",
			"disapproval": false,
			"date": "2013-02-10 03:53:20.410040",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7307083/diff/7001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7307083/diff/7001/doc/go_spec.html#newcode4376\ndoc/go_spec.html:4376: and that length may be constant.\nOn 2013/02/12 12:43:28, rsc wrote:\n> Most of the things you've listed are not constants.\n\nYou're right, I didn't read your previous comment carefully enough and confused the notion of \"knowable at compile-time\" with \"constant\" as defined by the spec.  (FWIW I checked go/types and it (correctly) doesn't report len(new(A)) as a constant.)\n\nWhat is it you're trying to convey by saying len(e) \"may be constant\", or that \"only <something> is evaluated\"?\nI think the two salient points are (1) that side effects in the range expression are always observed and (2) that ranging over a nil *array has len(e), not zero iterations.\n\nSo how about this:\n\n\"The range expression is evaluated once before beginning the loop.  As a special case, if only the first iteration variable is present, and the value of the range expression e is a nil pointer to an array, then the loop has len(e) iterations, which may be more than zero.\"",
			"disapproval": false,
			"date": "2013-02-12 15:15:54.553860",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7307083/diff/14001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7307083/diff/14001/doc/go_spec.html#newcode4383\ndoc/go_spec.html:4383: length is evaluated; if that length is constant by definition\nOn 2013/02/15 18:56:32, r wrote:\n> that's what i'm saying. if one writes \"range f()\" the expression is not an\n> array, it's a function call. you've gone to all this effort to single out the\n> case that is constant, then you say \"if\" it is constant.\n\nThe wording here is talking about the type of the expression, not its syntax. It is selecting from the space of possible range loops the range loops over arrays.\n\nThe wording here is the same as the wording at 4368:\n\n`The expression on the right in the \"range\" clause is called the <i>range expression</i>,\nwhich may be an array, pointer to an array, slice, string, map, or channel permitting\t \n<a href=\"#Receive_operator\">receive operations</a>.`",
			"disapproval": false,
			"date": "2013-02-15 19:16:55.753800",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but get other input\n\nhttps://codereview.appspot.com/7307083/diff/12001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7307083/diff/12001/doc/go_spec.html#newcode4383\ndoc/go_spec.html:4383: length is evaluated; if that length may be constant\nif that length is constant by definition (see ...),",
			"disapproval": false,
			"date": "2013-02-11 14:29:54.645280",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL",
			"disapproval": false,
			"date": "2013-02-15 18:18:24.880460",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/15 18:18:23, rsc wrote:\n> does not crash, because len(***p) is never evaluated.\n\nI misspoke. It does not crash because len(***p) is an official Go constant so ***p is never evaluated.",
			"disapproval": false,
			"date": "2013-02-15 18:19:15.319110",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7307083/diff/14001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7307083/diff/14001/doc/go_spec.html#newcode4383\ndoc/go_spec.html:4383: length is evaluated; if that length is constant by definition\ngiven the pointer-to-array construction, isn't the length required to be constant?\nperhaps all you need is\n\ns/; if/; since/ and maybe s/\\.$/ in such cases./",
			"disapproval": false,
			"date": "2013-02-15 18:37:06.326610",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7307083/diff/14001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7307083/diff/14001/doc/go_spec.html#newcode4383\ndoc/go_spec.html:4383: length is evaluated; if that length is constant by definition\nthat's what i'm saying. if one writes \"range f()\" the expression is not an array, it's a function call. you've gone to all this effort to single out the case that is constant, then you say \"if\" it is constant.",
			"disapproval": false,
			"date": "2013-02-15 18:56:32.397870",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\ni still think it's confusing but i can't find a better explanation. maybe someone else will.",
			"disapproval": false,
			"date": "2013-02-15 19:33:59.516260",
			"approval": true
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"rsc@golang.org",
				"adonovan@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/15 19:39:32, rsc wrote:\n> *** Submitted as https://code.google.com/p/go/source/detail?r=76d9c67c6646 ***\n> \n> spec: clarify when range x does not evaluate x\n> \n> Fixes issue 4644.\n> \n> R=r, adonovan\n> CC=golang-dev\n> https://codereview.appspot.com/7307083\n\nI finally understand the distinction the original spec was trying to make, so I think the current wording is an improvement.  But the distinction is of such a hair-splitting nature that I doubt many users will (a) memorize it correctly and (b) use it profitably.\n\nI'd be inclined to simplify the spec in a future revision to something like: x is always evaluated (and let the compiler try to optimise around that).  Do you have a particular example that motivates the current semantics?",
			"disapproval": false,
			"date": "2013-02-19 02:06:41.024020",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=76d9c67c6646 ***\n\nspec: clarify when range x does not evaluate x\n\nFixes issue 4644.\n\nR=r, adonovan\nCC=golang-dev\nhttps://codereview.appspot.com/7307083",
			"disapproval": false,
			"date": "2013-02-15 19:39:32.323680",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 7307083: spec: clarify when range x does not evaluate x",
	"created": "2013-02-09 19:24:53.452620",
	"patchsets": [
		1,
		1002,
		4001,
		7001,
		1004,
		12001,
		14001,
		6002
	],
	"modified": "2013-02-19 02:06:41.113430",
	"closed": true,
	"issue": 7307083
}