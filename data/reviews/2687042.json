{
	"description": "Additional crypto library: Schneier's Twofish\n\nThis library rounds of the set of already available go crypto libraries.\nIt fits into the existing interfaces and can be used in different block modes without any additional hassle.\nI hope it will be added to the set of provided algorithms two offer an alternative\nto the Rijandel (AES) algorithm.\nTwofish is already widely used, e.g. by a lot of HDD encryption tools and should therefore be supported.\nThe algorithm was (as annoted in the source code) adopted from the FOSS librar Tom's LibCrypt. It was neither\noptimised for speed nor any security features were added.",
	"cc": [
		"golang-dev@googlegroups.com",
		"schulze@math.uni-hannover.de"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "Berengar.Lehr@gmx.de",
			"recipients": [
				"Berengar.Lehr@gmx.de",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"schulze@math.uni-hannover.de",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc (cc: golang-dev@googlegroups.com, schulze@math.uni-hannover.de),\n\nI'd like you to review this change.",
			"disapproval": false,
			"date": "2010-10-23 09:36:24.001386",
			"approval": false
		},
		{
			"sender": "BerengarLehr@googlemail.com",
			"recipients": [
				"Berengar.Lehr@gmx.de",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"BerengarLehr@googlemail.com",
				"golang-dev@googlegroups.com",
				"schulze@math.uni-hannover.de",
				"reply@codereview.appspotmail.com"
			],
			"text": "I haven't heard of your for a while. Since there was a change in the crypto implementation I'm tempted to adapt the code.\nBut as I'm absolutely not familiar with the usual work flow I don't know if \"not answering\" is to be understand as \"your issue is not interesting for us\" or more like \"keep waiting, we are coming back to you\".\nSo I'd appreciate any reaction to decide how to go on with this project.",
			"disapproval": false,
			"date": "2010-11-24 14:57:48.998462",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"Berengar.Lehr@gmx.de",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"BerengarLehr@googlemail.com",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"schulze@math.uni-hannover.de",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello\n\nJust sit tight. Russ said today:\n\n\"We're pretty far behind on code reviews, mainly due to vacations and focus on mind-numbing detail work like the cgo changes.  My goal is to get caught up in mid December.\"\n\nRegards\n\nAlbert",
			"disapproval": false,
			"date": "2010-11-24 21:17:39.169068",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"Berengar.Lehr@gmx.de",
				"rsc@golang.org",
				"berengarlehr@googlemail.com",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"schulze@math.uni-hannover.de",
				"reply@codereview.appspotmail.com"
			],
			"text": "Thanks for submitting this.\nThe code is not quite idiomatic Go yet.\nIf you haven't already, I suggest reading\nhttp://golang.org/doc/effective_go.html\nfor general notes.  I've identified a handful\nof specific things below.\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish.go\nFile src/pkg/crypto/twofish/twofish.go (right):\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish.go#newcode10\nsrc/pkg/crypto/twofish/twofish.go:10: // It was heavily inspired by the go blowfish package\ns/$/./\nalso insert line above this one:\n// \"LibTomCrypt is free for all purposes under the public domain.\"\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish.go#newcode23\nsrc/pkg/crypto/twofish/twofish.go:23: const BlockSize = 16\n// The Twofish block size in bytes.\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish.go#newcode28\nsrc/pkg/crypto/twofish/twofish.go:28: /* A Cipher is an instance of Twofish encryption using a particular key. */\nPlease use // comments for consistency with the rest of the source tree\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish.go#newcode41\nsrc/pkg/crypto/twofish/twofish.go:41: // The key argument should be the Twfish key, 16, 24 or 32 bytes.\nTwofish\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish.go#newcode48\nsrc/pkg/crypto/twofish/twofish.go:48: var result Cipher\nlet's call the cipher c.\nthe fact that it's a cipher is more\nimportant than the fact that it's a return value\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish.go#newcode49\nsrc/pkg/crypto/twofish/twofish.go:49: var tmpx0, tmpx1 byte\ndelete declaration and use := below\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish.go#newcode50\nsrc/pkg/crypto/twofish/twofish.go:50: var S [4 * 4]byte\npostpone declaration until use (say, right after the \"create the S[..] words\" comment)\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish.go#newcode51\nsrc/pkg/crypto/twofish/twofish.go:51: var tmp [4]byte\npostpone declaration until use\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish.go#newcode52\nsrc/pkg/crypto/twofish/twofish.go:52: tmp2 := make([]byte, 4)\nload32l should change, so this may not be necessary\nat all anymore, but in Go, if you say\n\ntmp2 := make([]byte, 4)\n\nyou are setting tmp2 to the slice returned by make([]byte, 4).\nif you then say\n\ntmp2 = h_func(tmp[:], key, 0)\n\nyou are setting tmp2 to the slice returned by h_func.\nthe assignment does not copy the contents, so the\noriginal slice returned by make is discarded without\never being used.\n\nvar tmp2 []byte\n\nwould have sufficed here, but even better, drop the\ndeclaration entirely and wait until you need it below\nand use :=\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish.go#newcode54\nsrc/pkg/crypto/twofish/twofish.go:54: /* k = keysize/64 [but since our keysize is in bytes...] */\n// k = # of 64 bit words in key\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish.go#newcode136\nsrc/pkg/crypto/twofish/twofish.go:136: /* from here one you are looking definetifly under the hood */\ndelete\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish.go#newcode140\nsrc/pkg/crypto/twofish/twofish.go:140: out = make([]byte, 4)\nthis is allocating for every word of the input!\nyou'd be much better off passing in the slice.\nthat is, instead of\n\ncopy(out, store32l(tmp))\n\nuse\n\nstore32l(out, tmp)\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish.go#newcode142\nsrc/pkg/crypto/twofish/twofish.go:142: out[i] = byte(tmp % 0x100)\nit amounts to the same thing but it is far more \ncommon in bit packing to use shifts and masks\n\nout[0] = byte(tmp)\nout[1] = byte(tmp>>8)\nout[2] = byte(tmp>>16)\nout[3] = byte(tmp>>24)\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish.go#newcode150\nsrc/pkg/crypto/twofish/twofish.go:150: for i := 0; i < len(tmp); i++ {\nsame here\nreturn uint32(src[0]) | uint32(src[1])<<8 | uint32(src[2])<<16 | uint32(src[3])<<24\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish.go#newcode158\nsrc/pkg/crypto/twofish/twofish.go:158: func rolc(x, y uint32) uint32 {\nthe c is redundant with rotate.  rol and ror is fine\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish.go#newcode172\nsrc/pkg/crypto/twofish/twofish.go:172: [8]byte{0XA4, 0X55, 0X87, 0X5A, 0X58, 0XDB, 0X9E, 0X03}}\nplease add a , to this line and move the } to the next\nsame for the other tables\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish.go#newcode212\nsrc/pkg/crypto/twofish/twofish.go:212: func gf_mult(a, b byte, p uint32) byte {\ngo style is to use camelCase not under_scores.\nso gfMult etc\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish.go#newcode235\nsrc/pkg/crypto/twofish/twofish.go:235: return load32l([]byte{x01, x5B, xEF, xEF})\nthis is allocating a 4-byte array just to turn 4 values into a uint32.\njust write the expression\n\nreturn uint32(x01) | uint32(x5B)<<8 | uint32(xEF)<<16 | uint32(xEF)<<24\n\nalso \"xFF\" is a confusing name for a variable.\nthe first few times i read this code i though\nthose were hex constants.\n\nmul01, mul5B, mulEF would be clearer.\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish.go#newcode249\nsrc/pkg/crypto/twofish/twofish.go:249: func mds_mult(in []byte) []byte {\nYou should take a close look at all the functions that\nreturn []byte in this file.  I think your code would be\nmuch simpler if you just returned uint32 everywhere.\nIn particular mds_mult returns []byte so that h_func\nreturns []byte and then the caller of h_func just calls\nload32l to get the uint32 back!\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish.go#newcode258\nsrc/pkg/crypto/twofish/twofish.go:258: func rs_mult(in, out []byte) {\ngo libraries typically use dst, src.\nthe crypto libraries were inconsistent\nbut recently changed.\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish.go#newcode266\nsrc/pkg/crypto/twofish/twofish.go:266: /* computes h(x) */\nwhat is x?\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish.go#newcode267\nsrc/pkg/crypto/twofish/twofish.go:267: func h_func(in, key []byte, offset int) []byte {\ns/h_func/h/\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish.go#newcode268\nsrc/pkg/crypto/twofish/twofish.go:268: var y [4]byte\nwhat you have is fine but it seems like it would\nbe notationally even easier to use\n\ny0, y1, y2, y3 := x[0], x[1], x[2], x[3]\n\nand drop all the [] below\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish.go#newcode300\nsrc/pkg/crypto/twofish/twofish.go:300: func (skey *Cipher) Encrypt(pt, ct []byte) {\narguments should be named dst, src for consistency with other packages\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish.go#newcode301\nsrc/pkg/crypto/twofish/twofish.go:301: var t1, t2 uint32\nuse := below\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish.go#newcode302\nsrc/pkg/crypto/twofish/twofish.go:302: k := make([]uint32, 4)\nunused\nuse k := below\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish.go#newcode304\nsrc/pkg/crypto/twofish/twofish.go:304: if (pt == nil) || (ct == nil) || (skey == nil) {\nall () unnecessary\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish.go#newcode305\nsrc/pkg/crypto/twofish/twofish.go:305: panic(\"Fehler, Key & sKey darf nicht null sein\")\nenglish please\nalso there's no need to check.  these are use errors and\nyou can just let them panic\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish.go#newcode325\nsrc/pkg/crypto/twofish/twofish.go:325: b_bytes := store32l(b)\nthis seems wasteful.  just use the expressions below\n\nt2 := S2[byte(b)] ^ S3[byte(b>>8)] ^ S4[byte(b>>16)] ^ S1[byte(b>>24)]\n\netc\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish.go#newcode356\nsrc/pkg/crypto/twofish/twofish.go:356: func (skey *Cipher) Decrypt(ct, pt []byte) {\nsame comments as in Encrypt\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish_test.go\nFile src/pkg/crypto/twofish/twofish_test.go (right):\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish_test.go#newcode1\nsrc/pkg/crypto/twofish/twofish_test.go:1: // Performs a self-test of the Twofish block cipher return CRYPT_OK if\ncopyright notice; see http://golang.org/doc/contribute.html#copyright\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish_test.go#newcode6\nsrc/pkg/crypto/twofish/twofish_test.go:6: import (\nsort imports\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish_test.go#newcode14\nsrc/pkg/crypto/twofish/twofish_test.go:14: func hexprint(slice []byte) {\nfmt.Printf(\"% 02X\\n\", slice)\n\nwould work too\n(at that point it might be worth using directly\ninstead of defining hexprint).\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish_test.go#newcode23\nsrc/pkg/crypto/twofish/twofish_test.go:23: func (buf buffer) Write(p []byte) (n int, err os.Error) {\nit's not exactly the same but i think using\nbytes.Buffer would work fine instead of\nbuffer in this test\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish_test.go#newcode38\nsrc/pkg/crypto/twofish/twofish_test.go:38: pt  [16]byte\nif you make this []byte\nthen the code below doesn't need [:]\nalso please use enc and dec for encrypted and decrypted.\nthe pt/ct abbreviations are not in common use in this tree.\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish_test.go#newcode43\nsrc/pkg/crypto/twofish/twofish_test.go:43: tests := []test{\nplease make this a global.\nif you do that, then you can get rid of the test struct entirely.\nalso you can elide some of the type names\n\nvar twofishTests = []struct{\n    key []byte\n    dec []byte\n    enc []byte\n}{\n    {\n        []byte{0x9f, 0x58, ...},\n        []byte{0xd4, ...},\n        []byte{0x01, ...},\n    },\n    ...\n}\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish_test.go#newcode49\nsrc/pkg/crypto/twofish/twofish_test.go:49: 0x86, 0xCB, 0x08, 0x6B, 0x78, 0x9F, 0x54, 0x19},\nplease put multiline closing braces on next line\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish_test.go#newcode105\nsrc/pkg/crypto/twofish/twofish_test.go:105: var tmp [2][]byte\ndelay until use\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish_test.go#newcode113\nsrc/pkg/crypto/twofish/twofish_test.go:113: for i := 0; i < len(tests); i++ {\nfor i, tt := range twofishTests {\n\nthen use tt instead of tests[i] everywhere\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish_test.go#newcode114\nsrc/pkg/crypto/twofish/twofish_test.go:114: print(\"Test \", i, \": \")\nno printing please\ncan give more information in the errors instead.\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish_test.go#newcode117\nsrc/pkg/crypto/twofish/twofish_test.go:117: t.Errorf(\"Fehler in twofish_setup\")\nenglish please\nalso give information about what failed.\n\nt.Errorf(\"#%d: NewCipher: %v\", i, err)\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish_test.go#newcode124\nsrc/pkg/crypto/twofish/twofish_test.go:124: if bytes.Compare(myBuffer[0], tests[i].ct[:]) != 0 || bytes.Compare(myBuffer[1], tests[i].pt[:]) != 0 {\nif !bytes.Equal seems to match the intent better\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish_test.go#newcode125\nsrc/pkg/crypto/twofish/twofish_test.go:125: println()\nno printing\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish_test.go#newcode126\nsrc/pkg/crypto/twofish/twofish_test.go:126: t.Errorf(\"Fehler bei einfachem de- & encrypt Test\")\nenglish please, and say what failed:\n\nvar enc bytes.Buffer\nblock.NewCBCEncrypter(key, &enc).Write(tt.dec)\nif !bytes.Equal(enc.Bytes(), tt.enc) {\n    t.Errorf(\"#%d: encrypt = %x want %x\", enc.Bytes(), tt.enc)\n}\n\nvar dec bytes.Buffer\nif !bytes.Equal(dec.Bytes(), tt.dec) {\n    t.Errorf(\"#%d: decrypt = %x want %x\", dec.Bytes(), tt.dec)\n}\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish_test.go#newcode135\nsrc/pkg/crypto/twofish/twofish_test.go:135: return\ndelete; no reason to give up after first failure\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish_test.go#newcode140\nsrc/pkg/crypto/twofish/twofish_test.go:140: for y := 0; y < 16; y++ {\ni is a more common loop variable\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish_test.go#newcode149\nsrc/pkg/crypto/twofish/twofish_test.go:149: for y := 0; y < 16; y++ {\nnot sure why tmp[0] is used here, since tmp[1] never is.\nalso, give information in the failure:\n\nbuf := make([]byte, 16)\nzero := make([]byte, 16)\nfor i := 0; i < 1000; i++ {\n    key.Encrypt(buf, buf)\n}\nfor i := 0; i < 1000; i++ {\n    key.Decrypt(buf, buf)\n}\nif !bytes.Equal(buf, zero) {\n    t.Errorf(\"encrypt/decrypt 1000: have %x want %x\", buf, zero)\n}\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish_test.go#newcode155\nsrc/pkg/crypto/twofish/twofish_test.go:155: println(\"OK\")\nno printing\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish_test.go#newcode157\nsrc/pkg/crypto/twofish/twofish_test.go:157: println(\"CRYPT_OK\")\nno printing\n\nhttp://codereview.appspot.com/2687042/diff/2001/src/pkg/crypto/twofish/twofish_test.go#newcode159\nsrc/pkg/crypto/twofish/twofish_test.go:159: return\ndelete; unnecessary",
			"disapproval": false,
			"date": "2010-12-07 17:48:15.038850",
			"approval": false
		},
		{
			"sender": "Berengar.Lehr@gmx.de",
			"recipients": [
				"Berengar.Lehr@gmx.de",
				"rsc@golang.org",
				"berengarlehr@googlemail.com",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"schulze@math.uni-hannover.de",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc, berengarlehr@googlemail.com, albert.strasheim (cc: golang-dev@googlegroups.com, schulze@math.uni-hannover.de),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-01-07 01:20:58.825198",
			"approval": false
		},
		{
			"sender": "Berengar.Lehr@gmx.de",
			"recipients": [
				"Berengar.Lehr@gmx.de",
				"rsc@golang.org",
				"berengarlehr@googlemail.com",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"schulze@math.uni-hannover.de",
				"reply@codereview.appspotmail.com"
			],
			"text": "Next patch set for the crypto/twofish library.\n\nIncluded are fixes for all of Ross' comments.\n\nUnfortunately the two-side-diff looks pretty ugly doe to the switch to tab instead of four spaces for indenting.\n\ntwofish.go: \na) Most comments where pretty straightforward.\nb) I took the liberty to remove mds_mult and rs_mult that where only referenced once and included them in the calling function.\nc) In order to purify the code the signature of sbox was changed from sbox(int, uint32) uint32 into sbox(int, byte) byte which saves some uin32-byte back-and-fourth casting.\nd) I was tempted to remove store32l/load32l completely but could resist. I hope, that was the right decision.\ne) What remains as a bellyache is the \"Unrolled branchless GF multiplier\" or gfMult which I was not able to translate into some understandable code. At least the description of this function as stated in LibTom to be equivalent to \"ab mod p\" is incomplete or wrong.\n\ntest.go:\na) I changed the buffer to bytes.Buffer as suggested which indeed removes a lot of unnecessary code.\nb) Due to the co-existence of crypto/cipher and crypto/block and the non-existence of the ECB mode in ../cipher I still had to use the old ../block structure.\n\nI think I learn a lot more stuff about go during the review and want to thank you Ross for your comments. My take home message is: You can always re-read the documentation.",
			"disapproval": false,
			"date": "2011-01-07 01:44:58.068505",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"Berengar.Lehr@gmx.de",
				"rsc@golang.org",
				"berengarlehr@googlemail.com",
				"fullung@gmail.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"schulze@math.uni-hannover.de",
				"reply@codereview.appspotmail.com"
			],
			"text": "I haven't looked closely at the new code yet.\nAdding agl for crypto.\n\nhttp://codereview.appspot.com/2687042/diff/12001/src/pkg/crypto/twofish/twofish.go\nFile src/pkg/crypto/twofish/twofish.go (right):\n\nhttp://codereview.appspot.com/2687042/diff/12001/src/pkg/crypto/twofish/twofish.go#newcode195\nsrc/pkg/crypto/twofish/twofish.go:195: func sbox(i int, x byte) byte {\nI don't understand why this is a function.\nThe qbox tables take 2*4*16 = 128 bytes,\nbut it looks like i can only be 0 and 1 here,\nso computing and hard-coding the sbox as a table\nhere would only be 512 bytes.  And presumably a\nsingle index lookup would be dramatically faster\nthan all this math.\n\nMy suggestion:\n\nvar sbox = [2][256]byte {\n   ... table you compute and drop in here ...\n}\n\nand move qbox over into the test file.\n\nA new test TestSbox can compute what the\narray should be, using qbox, and complain\nif it's wrong.",
			"disapproval": false,
			"date": "2011-01-07 21:35:25.686994",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"Berengar.Lehr@gmx.de",
				"rsc@golang.org",
				"berengarlehr@googlemail.com",
				"fullung@gmail.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"schulze@math.uni-hannover.de",
				"reply@codereview.appspotmail.com"
			],
			"text": "(I only had 10 minutes so this is a very partial review. Will return to this later.)\n\nhttp://codereview.appspot.com/2687042/diff/12001/src/pkg/crypto/twofish/Makefile\nFile src/pkg/crypto/twofish/Makefile (right):\n\nhttp://codereview.appspot.com/2687042/diff/12001/src/pkg/crypto/twofish/Makefile#newcode1\nsrc/pkg/crypto/twofish/Makefile:1: # Copyright 2010 The Go Authors. All rights reserved.\n2011\n\nhttp://codereview.appspot.com/2687042/diff/12001/src/pkg/crypto/twofish/twofish.go\nFile src/pkg/crypto/twofish/twofish.go (right):\n\nhttp://codereview.appspot.com/2687042/diff/12001/src/pkg/crypto/twofish/twofish.go#newcode1\nsrc/pkg/crypto/twofish/twofish.go:1: // Copyright 2010 The Go Authors. All rights reserved.\n2011\n\nhttp://codereview.appspot.com/2687042/diff/12001/src/pkg/crypto/twofish/twofish.go#newcode18\nsrc/pkg/crypto/twofish/twofish.go:18: // As defined in twofish.c and tomcrypt_cipher.h\nThis comment seems a little out of place.\n\nhttp://codereview.appspot.com/2687042/diff/12001/src/pkg/crypto/twofish/twofish.go#newcode135\nsrc/pkg/crypto/twofish/twofish.go:135: // It is necessary to satisfy the Cipher interface in the package \"crypto/block\".\nDelete this line of the comment.\n\nhttp://codereview.appspot.com/2687042/diff/12001/src/pkg/crypto/twofish/twofish.go#newcode139\nsrc/pkg/crypto/twofish/twofish.go:139: func store32l(src uint32, dst []byte) {\n// store32l stores src into dst in little-endian form.\n\nAlso, dst always comes first in Go code.\n\nhttp://codereview.appspot.com/2687042/diff/12001/src/pkg/crypto/twofish/twofish.go#newcode147\nsrc/pkg/crypto/twofish/twofish.go:147: // Convert [4]byte to uint32\n// load32l reads a little-endian uint32 from src.\n\nhttp://codereview.appspot.com/2687042/diff/12001/src/pkg/crypto/twofish/twofish.go#newcode152\nsrc/pkg/crypto/twofish/twofish.go:152: // Rotate x circular left for y\n// rol returns x after a left circular rotation of y bits.\n\n(It's a shame that we can't use the CPU's support for this.)\n\nhttp://codereview.appspot.com/2687042/diff/12001/src/pkg/crypto/twofish/twofish.go#newcode157\nsrc/pkg/crypto/twofish/twofish.go:157: // Rotate x circular right for y\nditto with the comment.\n\nhttp://codereview.appspot.com/2687042/diff/12001/src/pkg/crypto/twofish/twofish.go#newcode164\nsrc/pkg/crypto/twofish/twofish.go:164: [8]byte{0x01, 0xA4, 0x55, 0x87, 0x5A, 0x58, 0xDB, 0x9E},\nI don't think that the [8]byte is needed any more.\n\nhttp://codereview.appspot.com/2687042/diff/12001/src/pkg/crypto/twofish/twofish.go#newcode172\nsrc/pkg/crypto/twofish/twofish.go:172: [5]byte{1, 1, 0, 0, 1},\nditto with [5]byte.\n\nhttp://codereview.appspot.com/2687042/diff/12001/src/pkg/crypto/twofish/twofish.go#newcode180\nsrc/pkg/crypto/twofish/twofish.go:180: [4][16]byte{\nditto",
			"disapproval": false,
			"date": "2011-01-08 16:21:58.178789",
			"approval": false
		},
		{
			"sender": "Berengar.Lehr@gmx.de",
			"recipients": [
				"Berengar.Lehr@gmx.de",
				"rsc@golang.org",
				"berengarlehr@googlemail.com",
				"fullung@gmail.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"schulze@math.uni-hannover.de",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc, berengarlehr@googlemail.com, albert.strasheim, agl1 (cc: golang-dev@googlegroups.com, schulze@math.uni-hannover.de),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-01-09 00:55:44.929850",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"Berengar.Lehr@gmx.de",
				"rsc@golang.org",
				"berengarlehr@googlemail.com",
				"fullung@gmail.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"schulze@math.uni-hannover.de",
				"reply@codereview.appspotmail.com"
			],
			"text": "Looks good after these changes.\n\nRe: ror and rol, I think we will eventually do\nwhat gcc does and recognize that pattern and\nimplement it using the machine instructions.\n\nhttp://codereview.appspot.com/2687042/diff/41001/src/pkg/crypto/twofish/twofish.go\nFile src/pkg/crypto/twofish/twofish.go (right):\n\nhttp://codereview.appspot.com/2687042/diff/41001/src/pkg/crypto/twofish/twofish.go#newcode204\nsrc/pkg/crypto/twofish/twofish.go:204: B := []uint32{0, uint32(b)}\nMake this B := [2]uint32 and similarly P := [2]uint32.\nThen they have a better chance of being stack allocated.\nAs it is this will malloc two slices every time you call\ngfMult.\n\nhttp://codereview.appspot.com/2687042/diff/41001/src/pkg/crypto/twofish/twofish_test.go\nFile src/pkg/crypto/twofish/twofish_test.go (right):\n\nhttp://codereview.appspot.com/2687042/diff/41001/src/pkg/crypto/twofish/twofish_test.go#newcode5\nsrc/pkg/crypto/twofish/twofish_test.go:5: // Perform self-test of the Twofish block cipher\ndelete; implied by file name.\n\nhttp://codereview.appspot.com/2687042/diff/41001/src/pkg/crypto/twofish/twofish_test.go#newcode87\nsrc/pkg/crypto/twofish/twofish_test.go:87: func TestTwofish(t *testing.T) {\nprobably TestEncrypt would be better.\nyou're already in the twofish package.\n\nhttp://codereview.appspot.com/2687042/diff/41001/src/pkg/crypto/twofish/twofish_test.go#newcode88\nsrc/pkg/crypto/twofish/twofish_test.go:88: // Test if the sbox saved as variable contains the values as defined by its function\nmove this up next to the definition of genSbox as\nits own test\n\nfunc TestSbox(t *testing.T) {\n...\n}",
			"disapproval": false,
			"date": "2011-01-11 15:25:36.841378",
			"approval": false
		},
		{
			"sender": "Berengar.Lehr@gmx.de",
			"recipients": [
				"Berengar.Lehr@gmx.de",
				"rsc@golang.org",
				"berengarlehr@googlemail.com",
				"fullung@gmail.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"schulze@math.uni-hannover.de",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc, berengarlehr@googlemail.com, albert.strasheim, agl1 (cc: golang-dev@googlegroups.com, schulze@math.uni-hannover.de),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-01-09 00:56:07.146686",
			"approval": false
		},
		{
			"sender": "Berengar.Lehr@gmx.de",
			"recipients": [
				"Berengar.Lehr@gmx.de",
				"rsc@golang.org",
				"berengarlehr@googlemail.com",
				"fullung@gmail.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"schulze@math.uni-hannover.de",
				"reply@codereview.appspotmail.com"
			],
			"text": "Additional to the review comments I removed the tmpx0 and tmpx1 tmp-variable from NewCipher (Ls: 91f, 100f, 109f).\n\nI still would like to rewrite gfMult into a more expressive form but can't figure out what actually happens during all that bitshifting.\n\nhttp://codereview.appspot.com/2687042/diff/12001/src/pkg/crypto/twofish/twofish.go\nFile src/pkg/crypto/twofish/twofish.go (right):\n\nhttp://codereview.appspot.com/2687042/diff/12001/src/pkg/crypto/twofish/twofish.go#newcode1\nsrc/pkg/crypto/twofish/twofish.go:1: // Copyright 2010 The Go Authors. All rights reserved.\nOn 2011/01/08 16:21:58, agl1 wrote:\n> 2011\n\nDone.\n\nhttp://codereview.appspot.com/2687042/diff/12001/src/pkg/crypto/twofish/twofish.go#newcode18\nsrc/pkg/crypto/twofish/twofish.go:18: // As defined in twofish.c and tomcrypt_cipher.h\nOn 2011/01/08 16:21:58, agl1 wrote:\n> This comment seems a little out of place.\n\nDone.\n\nhttp://codereview.appspot.com/2687042/diff/12001/src/pkg/crypto/twofish/twofish.go#newcode135\nsrc/pkg/crypto/twofish/twofish.go:135: // It is necessary to satisfy the Cipher interface in the package \"crypto/block\".\nOn 2011/01/08 16:21:58, agl1 wrote:\n> Delete this line of the comment.\n\nDone.\n\nhttp://codereview.appspot.com/2687042/diff/12001/src/pkg/crypto/twofish/twofish.go#newcode139\nsrc/pkg/crypto/twofish/twofish.go:139: func store32l(src uint32, dst []byte) {\nOn 2011/01/08 16:21:58, agl1 wrote:\n> // store32l stores src into dst in little-endian form.\n> \n> Also, dst always comes first in Go code.\n\nDone.\n\nhttp://codereview.appspot.com/2687042/diff/12001/src/pkg/crypto/twofish/twofish.go#newcode147\nsrc/pkg/crypto/twofish/twofish.go:147: // Convert [4]byte to uint32\nOn 2011/01/08 16:21:58, agl1 wrote:\n> // load32l reads a little-endian uint32 from src.\n\nDone.\n\nhttp://codereview.appspot.com/2687042/diff/12001/src/pkg/crypto/twofish/twofish.go#newcode152\nsrc/pkg/crypto/twofish/twofish.go:152: // Rotate x circular left for y\nOn 2011/01/08 16:21:58, agl1 wrote:\n> // rol returns x after a left circular rotation of y bits.\n> \n> (It's a shame that we can't use the CPU's support for this.)\n\nDone.\n\nhttp://codereview.appspot.com/2687042/diff/12001/src/pkg/crypto/twofish/twofish.go#newcode157\nsrc/pkg/crypto/twofish/twofish.go:157: // Rotate x circular right for y\nOn 2011/01/08 16:21:58, agl1 wrote:\n> ditto with the comment.\n\nDone.\n\nhttp://codereview.appspot.com/2687042/diff/12001/src/pkg/crypto/twofish/twofish.go#newcode164\nsrc/pkg/crypto/twofish/twofish.go:164: [8]byte{0x01, 0xA4, 0x55, 0x87, 0x5A, 0x58, 0xDB, 0x9E},\nOn 2011/01/08 16:21:58, agl1 wrote:\n> I don't think that the [8]byte is needed any more.\n\nDone.\n\nhttp://codereview.appspot.com/2687042/diff/12001/src/pkg/crypto/twofish/twofish.go#newcode172\nsrc/pkg/crypto/twofish/twofish.go:172: [5]byte{1, 1, 0, 0, 1},\nOn 2011/01/08 16:21:58, agl1 wrote:\n> ditto with [5]byte.\n\nActually, this variable is not used at all. I thought this would lead to a compiler error but I searched and didn't find it. So I removed this variable.\n\nhttp://codereview.appspot.com/2687042/diff/12001/src/pkg/crypto/twofish/twofish.go#newcode180\nsrc/pkg/crypto/twofish/twofish.go:180: [4][16]byte{\nOn 2011/01/08 16:21:58, agl1 wrote:\n> ditto\n\nDone.",
			"disapproval": false,
			"date": "2011-01-09 01:04:49.635521",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"Berengar.Lehr@gmx.de",
				"rsc@golang.org",
				"berengarlehr@googlemail.com",
				"fullung@gmail.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"schulze@math.uni-hannover.de",
				"reply@codereview.appspotmail.com"
			],
			"text": "rsc: any last comments?\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go\nFile src/pkg/crypto/twofish/twofish.go (right):\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode8\nsrc/pkg/crypto/twofish/twofish.go:8: // The code is a port of the LibTom C implementation.\n// Twofish is defined in http://www.schneier.com/paper-twofish-paper.pdf [TWOFISH]\n//\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode24\nsrc/pkg/crypto/twofish/twofish.go:24: // Two polynomials\ndelete this comment\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode25\nsrc/pkg/crypto/twofish/twofish.go:25: const mds_POLY = 0x169\nconst mdsPolynomial = 0x169 // x^8 + x^6 + x^5 + x^3 + 1, see [TWOFISH] 4.2\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode26\nsrc/pkg/crypto/twofish/twofish.go:26: const rs_POLY = 0x14D\nconst rsPolynomial = 0x14d // x^8 + x^6 + x^3 + x^2 + 1, see [TWOFISH] 4.3\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode149\nsrc/pkg/crypto/twofish/twofish.go:149: // ror returns x after a right  circular rotation of y bits.\ndouble space in here.\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode154\nsrc/pkg/crypto/twofish/twofish.go:154: // 4x8 rs linear transform\n// The RS matrix. See [TWOFISH] 4.3\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode202\nsrc/pkg/crypto/twofish/twofish.go:202: // ab mod p\n// gfMult returns a\u00b7b in GF(2^8)/p\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode235\nsrc/pkg/crypto/twofish/twofish.go:235: // Avoid warnings, we'd never get here normally but just to calm compiler warnings...\nreplace these two lines with panic(\"unreachable\")\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode239\nsrc/pkg/crypto/twofish/twofish.go:239: func h(in, key []byte, offset int) uint32 {\n// h implements the S-box generation function. See [TWOFISH] 4.3.5\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode271\nsrc/pkg/crypto/twofish/twofish.go:271: // Encrypt encrypts the 16-byte buffer src\n(I know that this was taken from aes/ and that package should also be cleaned up.)\n\n// Encrypt encrypts a 16-byte block from src to dst, which may overlap.\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode277\nsrc/pkg/crypto/twofish/twofish.go:277: func (skey *Cipher) Encrypt(src, dst []byte) {\ndst comes first.\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode318\nsrc/pkg/crypto/twofish/twofish.go:318: // Decrypt decrypts the 16-byte buffer ct\n// Decrypt decrypts a 16-byte block from src to dst, which may overlap.\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode321\nsrc/pkg/crypto/twofish/twofish.go:321: func (skey *Cipher) Decrypt(src, dst []byte) {\ndst comes first.\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode352\nsrc/pkg/crypto/twofish/twofish.go:352: // Pre-white\n// Undo pre-whitening\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish_test.go\nFile src/pkg/crypto/twofish/twofish_test.go (right):\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish_test.go#newcode88\nsrc/pkg/crypto/twofish/twofish_test.go:88: // Test if the sbox saved as variable containes the values as defined by it's function\ncomments should be wrapped to 80 chars.\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish_test.go#newcode98\nsrc/pkg/crypto/twofish/twofish_test.go:98: // Test if the known plaintext (dec) is encrypted into the known crypttext (enc)\nditto\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish_test.go#newcode117\nsrc/pkg/crypto/twofish/twofish_test.go:117: // Test if 16 zero bytes can  be encrypt 1000 times, decrypted and come\nditto",
			"disapproval": false,
			"date": "2011-01-09 15:20:22.991446",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"Berengar.Lehr@gmx.de",
				"rsc@golang.org",
				"berengarlehr@googlemail.com",
				"fullung@gmail.com",
				"agl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"schulze@math.uni-hannover.de",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go\nFile src/pkg/crypto/twofish/twofish.go (right):\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode22\nsrc/pkg/crypto/twofish/twofish.go:22: const BlockSize = 16\n// BlockSize is the constant block size of Twofish.\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode48\nsrc/pkg/crypto/twofish/twofish.go:48: var c Cipher\nthis could be moved down a few lines\nalso it's going to be heap allocated and returned; might as well be clear about it\nc := new(Cipher)\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode50\nsrc/pkg/crypto/twofish/twofish.go:50: // k = # of 64 bit words in key\ns/= #/is the number/\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode127\nsrc/pkg/crypto/twofish/twofish.go:127: // BlockSize returns the Twofish block size, 16 bytes.\ngiven this comment and the fact that the method must be exported, is there any reason to make the constant public too? (i'm asking agl)\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode130\nsrc/pkg/crypto/twofish/twofish.go:130: // store32l stores src int dst in little-endian form.\ns/int/in/\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode208\nsrc/pkg/crypto/twofish/twofish.go:208: // Unrolled branchless GF multiplier\nusually when i see 'unrolled branchless' i don't expect the next statement to be a for loop\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode276\nsrc/pkg/crypto/twofish/twofish.go:276: // instead, use an encryption mode like CBC (see crypto/block/cbc.go).\nthis is a short ragged comment. godoc will present it as is; would be nice to format it better\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish_test.go\nFile src/pkg/crypto/twofish/twofish_test.go (right):\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish_test.go#newcode41\nsrc/pkg/crypto/twofish/twofish_test.go:41: // All test are designed for ECB mode\ns/test/tests/\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish_test.go#newcode47\nsrc/pkg/crypto/twofish/twofish_test.go:47: // This tests are extracted from LibTom\ns/This/These/\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish_test.go#newcode88\nsrc/pkg/crypto/twofish/twofish_test.go:88: // Test if the sbox saved as variable containes the values as defined by it's function\ns/containes/contains/\ns/it's/its/\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish_test.go#newcode88\nsrc/pkg/crypto/twofish/twofish_test.go:88: // Test if the sbox saved as variable containes the values as defined by it's function\nOn 2011/01/09 15:20:23, agl1 wrote:\n> comments should be wrapped to 80 chars.\n\ni think they're fine. the code is long anyway.",
			"disapproval": false,
			"date": "2011-01-09 17:39:59.824355",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"Berengar.Lehr@gmx.de",
				"rsc@golang.org",
				"berengarlehr@googlemail.com",
				"fullung@gmail.com",
				"agl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"schulze@math.uni-hannover.de",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go\nFile src/pkg/crypto/twofish/twofish.go (right):\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode127\nsrc/pkg/crypto/twofish/twofish.go:127: // BlockSize returns the Twofish block size, 16 bytes.\nOn 2011/01/09 17:40:00, r wrote:\n> given this comment and the fact that the method must be exported, is there any\n> reason to make the constant public too? (i'm asking agl)\n\nThe public constant is for code which knows that it's using Twofish (or any specific cipher) so that it can say twofish.BlockSize. The method is for code which is generic over any cipher.",
			"disapproval": false,
			"date": "2011-01-09 17:55:36.363068",
			"approval": false
		},
		{
			"sender": "Berengar.Lehr@gmx.de",
			"recipients": [
				"Berengar.Lehr@gmx.de",
				"rsc@golang.org",
				"berengarlehr@googlemail.com",
				"fullung@gmail.com",
				"agl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"schulze@math.uni-hannover.de",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc, berengarlehr@googlemail.com, albert.strasheim, agl1, r (cc: golang-dev@googlegroups.com, schulze@math.uni-hannover.de),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-01-09 19:32:08.623354",
			"approval": false
		},
		{
			"sender": "Berengar.Lehr@gmx.de",
			"recipients": [
				"Berengar.Lehr@gmx.de",
				"rsc@golang.org",
				"berengarlehr@googlemail.com",
				"fullung@gmail.com",
				"agl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"schulze@math.uni-hannover.de",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go\nFile src/pkg/crypto/twofish/twofish.go (right):\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode8\nsrc/pkg/crypto/twofish/twofish.go:8: // The code is a port of the LibTom C implementation.\nOn 2011/01/09 15:20:23, agl1 wrote:\n> // Twofish is defined in http://www.schneier.com/paper-twofish-paper.pdf\n> [TWOFISH]\n> //\n\nDone.\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode22\nsrc/pkg/crypto/twofish/twofish.go:22: const BlockSize = 16\nOn 2011/01/09 17:40:00, r wrote:\n> // BlockSize is the constant block size of Twofish.\n\nDone.\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode24\nsrc/pkg/crypto/twofish/twofish.go:24: // Two polynomials\nOn 2011/01/09 15:20:23, agl1 wrote:\n> delete this comment\n\nDone.\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode25\nsrc/pkg/crypto/twofish/twofish.go:25: const mds_POLY = 0x169\nOn 2011/01/09 15:20:23, agl1 wrote:\n> const mdsPolynomial = 0x169 // x^8 + x^6 + x^5 + x^3 + 1, see [TWOFISH] 4.2\n\nDone.\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode26\nsrc/pkg/crypto/twofish/twofish.go:26: const rs_POLY = 0x14D\nOn 2011/01/09 15:20:23, agl1 wrote:\n> const rsPolynomial = 0x14d // x^8 + x^6 + x^3 + x^2 + 1, see [TWOFISH] 4.3\n\nDone.\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode48\nsrc/pkg/crypto/twofish/twofish.go:48: var c Cipher\nOn 2011/01/09 17:40:00, r wrote:\n> this could be moved down a few lines\n> also it's going to be heap allocated and returned; might as well be clear about\n> it\n> c := new(Cipher)\n\nDone.\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode50\nsrc/pkg/crypto/twofish/twofish.go:50: // k = # of 64 bit words in key\nOn 2011/01/09 17:40:00, r wrote:\n> s/= #/is the number/\n\nDone.\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode130\nsrc/pkg/crypto/twofish/twofish.go:130: // store32l stores src int dst in little-endian form.\nOn 2011/01/09 17:40:00, r wrote:\n> s/int/in/\n\nDone.\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode149\nsrc/pkg/crypto/twofish/twofish.go:149: // ror returns x after a right  circular rotation of y bits.\nOn 2011/01/09 15:20:23, agl1 wrote:\n> double space in here.\n\nDone.\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode154\nsrc/pkg/crypto/twofish/twofish.go:154: // 4x8 rs linear transform\nOn 2011/01/09 15:20:23, agl1 wrote:\n> // The RS matrix. See [TWOFISH] 4.3\n\nDone.\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode202\nsrc/pkg/crypto/twofish/twofish.go:202: // ab mod p\nOn 2011/01/09 15:20:23, agl1 wrote:\n> // gfMult returns a\u00b7b in GF(2^8)/p\n\nDone.\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode208\nsrc/pkg/crypto/twofish/twofish.go:208: // Unrolled branchless GF multiplier\nOn 2011/01/09 17:40:00, r wrote:\n> usually when i see 'unrolled branchless' i don't expect the next statement to be\n> a for loop\n\nI finally figured out what \"unrolled\", \"branchless\" and \"G(alois)F(ield) multiplier\" means. I would prefer to leave the \"enrolled\" version as I think optimization should be done by the compiler. I would keep the code branchless in contrast to using conditions as I think that branches would enable timing attacks.\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode271\nsrc/pkg/crypto/twofish/twofish.go:271: // Encrypt encrypts the 16-byte buffer src\nOn 2011/01/09 15:20:23, agl1 wrote:\n> (I know that this was taken from aes/ and that package should also be cleaned\n> up.)\n> \n> // Encrypt encrypts a 16-byte block from src to dst, which may overlap.\n\nActually Blowfish but anyway, Done.\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode276\nsrc/pkg/crypto/twofish/twofish.go:276: // instead, use an encryption mode like CBC (see crypto/block/cbc.go).\nOn 2011/01/09 17:40:00, r wrote:\n> this is a short ragged comment. godoc will present it as is; would be nice to\n> format it better\n\nI'm sorry, but I don't know what you mean by that.\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode277\nsrc/pkg/crypto/twofish/twofish.go:277: func (skey *Cipher) Encrypt(src, dst []byte) {\nOn 2011/01/09 15:20:23, agl1 wrote:\n> dst comes first.\n\nSorry for repeating that error, Done.\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode318\nsrc/pkg/crypto/twofish/twofish.go:318: // Decrypt decrypts the 16-byte buffer ct\nOn 2011/01/09 15:20:23, agl1 wrote:\n> // Decrypt decrypts a 16-byte block from src to dst, which may overlap.\n\nDone.\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode321\nsrc/pkg/crypto/twofish/twofish.go:321: func (skey *Cipher) Decrypt(src, dst []byte) {\nOn 2011/01/09 15:20:23, agl1 wrote:\n> dst comes first.\n\nDone.\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish.go#newcode352\nsrc/pkg/crypto/twofish/twofish.go:352: // Pre-white\nOn 2011/01/09 15:20:23, agl1 wrote:\n> // Undo pre-whitening\n\nDone.\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish_test.go\nFile src/pkg/crypto/twofish/twofish_test.go (right):\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish_test.go#newcode41\nsrc/pkg/crypto/twofish/twofish_test.go:41: // All test are designed for ECB mode\nOn 2011/01/09 17:40:00, r wrote:\n> s/test/tests/\n\nDone.\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish_test.go#newcode47\nsrc/pkg/crypto/twofish/twofish_test.go:47: // This tests are extracted from LibTom\nOn 2011/01/09 17:40:00, r wrote:\n> s/This/These/\n\nDone.\n\nhttp://codereview.appspot.com/2687042/diff/28001/src/pkg/crypto/twofish/twofish_test.go#newcode88\nsrc/pkg/crypto/twofish/twofish_test.go:88: // Test if the sbox saved as variable containes the values as defined by it's function\nOn 2011/01/09 17:40:00, r wrote:\n> s/containes/contains/\n> s/it's/its/\n\nDone.",
			"disapproval": false,
			"date": "2011-01-09 19:32:44.408874",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Tue, Jan 11, 2011 at 10:25 AM,  <rsc@golang.org> wrote:\n> Looks good after these changes.\n\nWill land after these have been addressed and the author agreement has\nbeen signed.\n\n\nAGL\n",
			"disapproval": false,
			"date": "2011-01-11 15:28:54.004050",
			"approval": false
		},
		{
			"sender": "Berengar.Lehr@gmx.de",
			"recipients": [
				"Berengar.Lehr@gmx.de",
				"rsc@golang.org",
				"berengarlehr@googlemail.com",
				"fullung@gmail.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"schulze@math.uni-hannover.de",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc, berengarlehr@googlemail.com, albert.strasheim, agl1 (cc: golang-dev@googlegroups.com, schulze@math.uni-hannover.de),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-01-11 23:21:28.205230",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Tue, Jan 11, 2011 at 6:21 PM,  <Berengar.Lehr@gmx.de> wrote:\n> Hello rsc, berengarlehr@googlemail.com, albert.strasheim, agl1 (cc:\n> golang-dev@googlegroups.com, schulze@math.uni-hannover.de),\n\nWill land when I get home (in an hour or so).\n\nI saw a typo but, no worries, I'll fix it when I land it.\n\n\nAGL\n",
			"disapproval": false,
			"date": "2011-01-11 23:24:58.045982",
			"approval": false
		},
		{
			"sender": "Berengar.Lehr@gmx.de",
			"recipients": [
				"Berengar.Lehr@gmx.de",
				"rsc@golang.org",
				"berengarlehr@googlemail.com",
				"fullung@gmail.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"schulze@math.uni-hannover.de",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/2687042/diff/41001/src/pkg/crypto/twofish/twofish.go\nFile src/pkg/crypto/twofish/twofish.go (right):\n\nhttp://codereview.appspot.com/2687042/diff/41001/src/pkg/crypto/twofish/twofish.go#newcode204\nsrc/pkg/crypto/twofish/twofish.go:204: B := []uint32{0, uint32(b)}\nOn 2011/01/11 15:25:37, rsc wrote:\n> Make this B := [2]uint32 and similarly P := [2]uint32.\n> Then they have a better chance of being stack allocated.\n> As it is this will malloc two slices every time you call\n> gfMult.\n\nDone.\n\nhttp://codereview.appspot.com/2687042/diff/41001/src/pkg/crypto/twofish/twofish_test.go\nFile src/pkg/crypto/twofish/twofish_test.go (right):\n\nhttp://codereview.appspot.com/2687042/diff/41001/src/pkg/crypto/twofish/twofish_test.go#newcode5\nsrc/pkg/crypto/twofish/twofish_test.go:5: // Perform self-test of the Twofish block cipher\nOn 2011/01/11 15:25:37, rsc wrote:\n> delete; implied by file name.\n\nDone.\n\nhttp://codereview.appspot.com/2687042/diff/41001/src/pkg/crypto/twofish/twofish_test.go#newcode10\nsrc/pkg/crypto/twofish/twofish_test.go:10: \"crypto/block\"\nnot required any more, deprecated anyway\n\nhttp://codereview.appspot.com/2687042/diff/41001/src/pkg/crypto/twofish/twofish_test.go#newcode87\nsrc/pkg/crypto/twofish/twofish_test.go:87: func TestTwofish(t *testing.T) {\nOn 2011/01/11 15:25:37, rsc wrote:\n> probably TestEncrypt would be better.\n> you're already in the twofish package.\n\nTesting the Cipher not only Encryption, so TestCipher, Done.\n\nhttp://codereview.appspot.com/2687042/diff/41001/src/pkg/crypto/twofish/twofish_test.go#newcode88\nsrc/pkg/crypto/twofish/twofish_test.go:88: // Test if the sbox saved as variable contains the values as defined by its function\nOn 2011/01/11 15:25:37, rsc wrote:\n> move this up next to the definition of genSbox as\n> its own test\n> \n> func TestSbox(t *testing.T) {\n> ...\n> }\n\nDone.\n\nhttp://codereview.appspot.com/2687042/diff/41001/src/pkg/crypto/twofish/twofish_test.go#newcode100\nsrc/pkg/crypto/twofish/twofish_test.go:100: key, err := NewCipher(tt.key)\nit's not a key, it's a cipher\n\nhttp://codereview.appspot.com/2687042/diff/41001/src/pkg/crypto/twofish/twofish_test.go#newcode106\nsrc/pkg/crypto/twofish/twofish_test.go:106: enc := bytes.NewBuffer(make([]byte, 0))\nthis and the following lines where changed to comply with deprecation of crypto/block (btw. ECB is a pretty fancy name for plain blockwise encryption, thx for the hint agl&rsc)",
			"disapproval": false,
			"date": "2011-01-11 23:33:50.628639",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"Berengar.Lehr@gmx.de",
				"rsc@golang.org",
				"berengarlehr@googlemail.com",
				"fullung@gmail.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"schulze@math.uni-hannover.de",
				"reply@codereview.appspotmail.com"
			],
			"text": "looks pretty good; after making the changes below it looks good to me.\nleaving for agl.\n\nhttp://codereview.appspot.com/2687042/diff/29005/src/pkg/crypto/twofish/twofish.go\nFile src/pkg/crypto/twofish/twofish.go (right):\n\nhttp://codereview.appspot.com/2687042/diff/29005/src/pkg/crypto/twofish/twofish.go#newcode89\nsrc/pkg/crypto/twofish/twofish.go:89: for i := 0; i <= 255; i++ {\nweird way to write the loop.\nbetter\n\nfor i := range c.s[0] {\n\nor at least i < 256.\n\nhttp://codereview.appspot.com/2687042/diff/29005/src/pkg/crypto/twofish/twofish.go#newcode96\nsrc/pkg/crypto/twofish/twofish.go:96: for i := 0; i < 256; i++ {\nfor i := range c.s[0] {\n\nhttp://codereview.appspot.com/2687042/diff/29005/src/pkg/crypto/twofish/twofish.go#newcode103\nsrc/pkg/crypto/twofish/twofish.go:103: for i := 0; i < 256; i++ {\nfor i := range c.s[0] {\n\nhttp://codereview.appspot.com/2687042/diff/29005/src/pkg/crypto/twofish/twofish.go#newcode117\nsrc/pkg/crypto/twofish/twofish.go:117: for i := 0; i < 40; i++ {\nfor i := range c.k {\n\nhttp://codereview.appspot.com/2687042/diff/29005/src/pkg/crypto/twofish/twofish.go#newcode120\nsrc/pkg/crypto/twofish/twofish.go:120: for i := 0; i < 4; i++ {\nfor i := range c.s {\n\nhttp://codereview.appspot.com/2687042/diff/29005/src/pkg/crypto/twofish/twofish.go#newcode121\nsrc/pkg/crypto/twofish/twofish.go:121: for j := 0; j < 265; j++ {\nfor j := range c.s[i] {\n\n(avoids typo 265)\n\nhttp://codereview.appspot.com/2687042/diff/29005/src/pkg/crypto/twofish/twofish.go#newcode275\nsrc/pkg/crypto/twofish/twofish.go:275: func (skey *Cipher) Encrypt(dst, src []byte) {\nshould be c *Cipher.\nskey is an implementation detail leaking out\n\nhttp://codereview.appspot.com/2687042/diff/29005/src/pkg/crypto/twofish/twofish.go#newcode319\nsrc/pkg/crypto/twofish/twofish.go:319: func (skey *Cipher) Decrypt(dst, src []byte) {\nc *Cipher",
			"disapproval": false,
			"date": "2011-01-19 19:41:08.506575",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Jan 19, 2011 at 7:06 PM, Adam Langley <agl@golang.org> wrote:\n> I'll apply to the version in tree.\n\nDone: d1d939ce68\n\n\nAGL\n",
			"disapproval": false,
			"date": "2011-01-20 00:42:31.126950",
			"approval": false
		},
		{
			"sender": "Berengar.Lehr@gmx.de",
			"recipients": [
				"Berengar.Lehr@gmx.de",
				"rsc@golang.org",
				"berengarlehr@googlemail.com",
				"fullung@gmail.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"schulze@math.uni-hannover.de",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc, berengarlehr@googlemail.com, albert.strasheim, agl1 (cc: golang-dev@googlegroups.com, schulze@math.uni-hannover.de),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-01-19 23:33:33.105901",
			"approval": false
		},
		{
			"sender": "Berengar.Lehr@gmx.de",
			"recipients": [
				"Berengar.Lehr@gmx.de",
				"rsc@golang.org",
				"berengarlehr@googlemail.com",
				"fullung@gmail.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"schulze@math.uni-hannover.de",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/01/19 19:41:08, rsc wrote:\n> looks pretty good; after making the changes below it looks good to me.\n> leaving for agl.\n\nI changed all occurrences of for where they were iterations over an array.\nchanged 'skey' to 'c' and consequently 'a'..'d' to 'ia'..'id'.",
			"disapproval": false,
			"date": "2011-01-19 23:44:10.749339",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Jan 19, 2011 at 6:44 PM,  <Berengar.Lehr@gmx.de> wrote:\n> I changed all occurrences of for where they were iterations over an\n> array.\n> changed 'skey' to 'c' and consequently 'a'..'d' to 'ia'..'id'.\n>\n> http://codereview.appspot.com/2687042/\n\nI'll apply to the version in tree.\n\n\nAGL\n",
			"disapproval": false,
			"date": "2011-01-20 00:06:14.915710",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"Berengar.Lehr@gmx.de",
				"golang-dev@googlegroups.com",
				"schulze@math.uni-hannover.de",
				"reply@codereview.appspotmail.com"
			],
			"text": "removing reviewers",
			"disapproval": false,
			"date": "2011-01-20 05:31:58.401650",
			"approval": false
		}
	],
	"owner_email": "Berengar.Lehr@gmx.de",
	"private": false,
	"base_url": "",
	"owner": "B-Ranger",
	"subject": "code review 2687042: Additional crypto library: Schneier's Twofish",
	"created": "2010-10-23 09:33:40.894856",
	"patchsets": [
		1,
		2001,
		12001,
		24001,
		28001,
		41001,
		29005,
		59001,
		62001
	],
	"modified": "2011-01-20 05:31:58.401824",
	"closed": false,
	"issue": 2687042
}