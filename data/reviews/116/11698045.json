{
	"description": "net/url: prepend slash to path in String()\n\nPreviously if a path was set manually without a leading /, String()\nwould not insert the slash when writing its output. This would lead\nto situations where a URL that should be http://www.google.com/search\nis output as http://www.google.comsearch\n\nFixes issue 5927.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"rsc@golang.org",
		"0xjnml@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\"its output\".\r\n\r\nAlso: if this is an acceptable change, it would need a test.\r\n\r\n\r\n\r\nOn Tue, Jul 23, 2013 at 1:24 PM, <scottwferg@gmail.com> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> net/url: prepend slash to path in String()\r\n>\r\n> Previously if a path was set manually without a leading /, String()\r\n> would not insert the slash when writing it's output. This would lead\r\n> to situations where a URL that should be http://www.google.com/search\r\n> is output as http://www.google.comsearch\r\n>\r\n> Fixes issue 5927.\r\n>\r\n> Please review this at https://codereview.appspot.**com/11698045/<https://codereview.appspot.com/11698045/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/net/url/url.go\r\n>\r\n>\r\n> Index: src/pkg/net/url/url.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/url/url.go\r\n> +++ b/src/pkg/net/url/url.go\r\n> @@ -459,6 +459,11 @@\r\n>                                 buf.WriteString(h)\r\n>                         }\r\n>                 }\r\n> +               if u.Path != \"\" {\r\n> +                       if u.Path[0] != '/' {\r\n> +                               buf.WriteByte('/')\r\n> +                       }\r\n> +               }\r\n>                 buf.WriteString(escape(u.Path, encodePath))\r\n>         }\r\n>         if u.RawQuery != \"\" {\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-23 20:39:20.267850",
			"approval": false
		},
		{
			"sender": "scottwferg@gmail.com",
			"recipients": [
				"scottwferg@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-07-23 20:24:21.322980",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I can't decide if this is correct.\r\n",
			"disapproval": false,
			"date": "2013-07-23 21:15:17.876700",
			"approval": false
		},
		{
			"sender": "scottwferg@gmail.com",
			"recipients": [
				"scottwferg@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Nevermind that, realized there was a bug in that test. I've added the specific test case to TestURLString().\n\nOn 2013/07/23 22:46:33, scottferg wrote:\n> On 2013/07/23 20:39:20, bradfitz wrote:\n> > \"its output\".\n> > \n> > Also: if this is an acceptable change, it would need a test.\n> \n> Updated for grammar ;)\n> \n> Updated with a test, though I'm not sure how I feel about it. Simply adding the\n> case to urltests will fail since reflect.DeepEqual() won't match. The solution I\n> found is to copy urltests and append this new case to a slice called\n> stringtests. If there's design concern over this I can move the discussion over\n> to golang-nuts.",
			"disapproval": false,
			"date": "2013-07-23 23:00:59.136140",
			"approval": false
		},
		{
			"sender": "scottwferg@gmail.com",
			"recipients": [
				"scottwferg@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/23 20:39:20, bradfitz wrote:\n> \"its output\".\n> \n> Also: if this is an acceptable change, it would need a test.\n\nUpdated for grammar ;)\n\nUpdated with a test, though I'm not sure how I feel about it. Simply adding the case to urltests will fail since reflect.DeepEqual() won't match. The solution I found is to copy urltests and append this new case to a slice called stringtests. If there's design concern over this I can move the discussion over to golang-nuts.",
			"disapproval": false,
			"date": "2013-07-23 22:46:33.348260",
			"approval": false
		},
		{
			"sender": "0xjnml@gmail.com",
			"recipients": [
				"scottwferg@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"0xjnml@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11698045/diff/14001/src/pkg/net/url/url.go\nFile src/pkg/net/url/url.go (right):\n\nhttps://codereview.appspot.com/11698045/diff/14001/src/pkg/net/url/url.go#newcode463\nsrc/pkg/net/url/url.go:463: if u.Path[0] != '/' {\nYou can save two lines by:\n\nif u.Path != \"\" && u.Path[0] != '/' {\n\n  or\n\nif len(u.Path) != 0 && u.Path[0] != '/' {",
			"disapproval": false,
			"date": "2013-07-24 07:49:04.050040",
			"approval": false
		},
		{
			"sender": "scottwferg@gmail.com",
			"recipients": [
				"scottwferg@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"0xjnml@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/24 07:49:04, 0xjnml wrote:\n> https://codereview.appspot.com/11698045/diff/14001/src/pkg/net/url/url.go\n> File src/pkg/net/url/url.go (right):\n> \n> https://codereview.appspot.com/11698045/diff/14001/src/pkg/net/url/url.go#newcode463\n> src/pkg/net/url/url.go:463: if u.Path[0] != '/' {\n> You can save two lines by:\n> \n> if u.Path != \"\" && u.Path[0] != '/' {\n> \n>   or\n> \n> if len(u.Path) != 0 && u.Path[0] != '/' {\n\nGood point, fixed.",
			"disapproval": false,
			"date": "2013-07-24 13:25:51.252590",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"scottwferg@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"0xjnml@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThere's no good answer here: no URL we generate will reproduce the original struct. However, putting the slash in seems to generate a struct closer to the original, in that the first path element will not be concatenated to the host name.",
			"disapproval": false,
			"date": "2013-08-01 21:17:02.914160",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nPlease complete a CLA as described at\r\ngolang.org/doc/contribute.html#copyright\r\n",
			"disapproval": false,
			"date": "2013-08-01 22:05:21.176210",
			"approval": true
		},
		{
			"sender": "scottwferg@gmail.com",
			"recipients": [
				"scottwferg@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"0xjnml@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/01 22:05:21, rsc wrote:\n> LGTM\n> \n> Please complete a CLA as described at\n> golang.org/doc/contribute.html#copyright\n\nDone.",
			"disapproval": false,
			"date": "2013-08-01 22:45:39.625090",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"scottwferg@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"0xjnml@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=03265149ced8 ***\n\nnet/url: prepend slash to path in String()\n\nPreviously if a path was set manually without a leading /, String()\nwould not insert the slash when writing its output. This would lead\nto situations where a URL that should be http://www.google.com/search\nis output as http://www.google.comsearch\n\nFixes issue 5927.\n\nR=golang-dev, bradfitz, rsc, 0xjnml\nCC=golang-dev\nhttps://codereview.appspot.com/11698045\n\nCommitter: Brad Fitzpatrick <bradfitz@golang.org>",
			"disapproval": false,
			"date": "2013-08-01 22:52:58.985880",
			"approval": false
		}
	],
	"owner_email": "scottwferg@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "scottferg",
	"subject": "code review 11698045: net/url: prepend slash to path in String()",
	"created": "2013-07-23 20:20:34.648520",
	"patchsets": [
		1,
		3001,
		6001,
		10001,
		14001,
		18001
	],
	"modified": "2013-08-06 14:19:03.309700",
	"closed": true,
	"issue": 11698045
}