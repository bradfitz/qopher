{
	"description": "runtime: Stop arm memmove corrupting its parameters\n\nChange use of x+(SP) to access the stack frame into x-(SP)\n\nFixes issue 5925.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"dave@cheney.net",
		"remyoudompheng@gmail.com",
		"nick@craig-wood.com",
		"rsc@golang.org",
		"dave cheney <dave@cheney.net>"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "nickcw@gmail.com",
			"recipients": [
				"nickcw@gmail.com",
				"golang-dev@googlegroups.com",
				"dave cheney <dave@cheney.net>",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: dave cheney <dave@cheney.net>),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-07-21 07:35:58.844410",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"nickcw@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dave cheney <dave@cheney.net>",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "How did this manifest itself?\n\nCan you write a test that failed before but passes now?",
			"disapproval": false,
			"date": "2013-07-22 00:40:01.970060",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't think it is possible to do so. As I understand the issue\r\ncorrectly, the code is overwriting 4(FP), the 4th byte following the\r\nframe pointer, ie the address of the first argument passed to the\r\nfunction, not 4(SP), the first location on the stack. The stack\r\nlocation is only needed if the unaligned slow path has to be taken,\r\nand will corrupt one of the function arguments in the backtrace, but\r\nthat is about it.\r\n\r\nOn Mon, Jul 22, 2013 at 10:40 AM,  <bradfitz@golang.org> wrote:\r\n> How did this manifest itself?\r\n>\r\n> Can you write a test that failed before but passes now?\r\n>\r\n>\r\n> https://codereview.appspot.com/11647043/\r\n",
			"disapproval": false,
			"date": "2013-07-22 00:43:06.981730",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Le 22 juil. 2013 02:40, <bradfitz@golang.org> a \u00e9crit :\r\n>\r\n> How did this manifest itself?\r\n>\r\n> Can you write a test that failed before but passes now?\r\n\r\nHe wanted to call memmove from ARM assembly for MD5 and make reuse of\r\narguments after the call.\r\n\r\nR\u00e9my\r\n",
			"disapproval": false,
			"date": "2013-07-22 05:59:45.140440",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sounds testable.\r\n On Jul 21, 2013 10:59 PM, \"R\u00e9my Oudompheng\" <remyoudompheng@gmail.com>\r\nwrote:\r\n\r\n>\r\n> Le 22 juil. 2013 02:40, <bradfitz@golang.org> a \u00e9crit :\r\n> >\r\n> > How did this manifest itself?\r\n> >\r\n> > Can you write a test that failed before but passes now?\r\n>\r\n> He wanted to call memmove from ARM assembly for MD5 and make reuse of\r\n> arguments after the call.\r\n>\r\n> R\u00e9my\r\n>\r\n> --\r\n>\r\n> ---\r\n> You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-22 06:02:46.217500",
			"approval": false
		},
		{
			"sender": "nick@craig-wood.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 22/07/13 07:02, Brad Fitzpatrick wrote:\r\n> Sounds testable.\r\n> \r\n> On Jul 21, 2013 10:59 PM, \"R\u00e9my Oudompheng\" <remyoudompheng@gmail.com\r\n> <mailto:remyoudompheng@gmail.com>> wrote:\r\n> \r\n> \r\n>     Le 22 juil. 2013 02:40, <bradfitz@golang.org\r\n>     <mailto:bradfitz@golang.org>> a \u00e9crit :\r\n>     >\r\n>     > How did this manifest itself?\r\n>     >\r\n>     > Can you write a test that failed before but passes now?\r\n> \r\n>     He wanted to call memmove from ARM assembly for MD5 and make reuse\r\n>     of arguments after the call.\r\n\r\nYes you are right about calling memmove from assembler.\r\n\r\nOK I'll see if I can make a failing test!\r\n\r\n-- \r\nNick Craig-Wood <nick@craig-wood.com> -- http://www.craig-wood.com/nick\r\n",
			"disapproval": false,
			"date": "2013-07-22 08:59:12.935250",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I admire the desire to test everything, but this test would just be scar\r\ntissue. Let's just fix the function and move on.\r\n\r\nThat said, the fix is wrong. The correct fix is not to start using R13, but\r\nto use the correct notation for local variables. The various foo+4(SP)\r\nshould be foo-4(SP).\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-07-22 14:58:30.512730",
			"approval": false
		},
		{
			"sender": "nick@craig-wood.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 22/07/13 15:58, Russ Cox wrote:\r\n> That said, the fix is wrong. The correct fix is not to start using R13,\r\n> but to use the correct notation for local variables. The various\r\n> foo+4(SP) should be foo-4(SP).\r\n\r\nAh, that makes a whole lot of sense now, thanks! I've been struggling to\r\nwork this out.\r\n\r\nSo for ARM -4(SP) is the first local variable, -8(SP) is the second etc.\r\nWhich is quite different from 386/amd64 where 0(SP) is the first local\r\nvariable, 4(SP) is the second. Not sure why they are different though\r\nsince ARM/386/amd64 all have downward growing stacks.\r\n\r\n-- \r\nNick Craig-Wood <nick@craig-wood.com> -- http://www.craig-wood.com/nick\r\n",
			"disapproval": false,
			"date": "2013-07-22 15:55:39.882640",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "No, the name-offset(SP) syntax is consistent across all architectures. A\r\n386 function with a frame of 24 should be using -4(SP), -8(SP) up to\r\n-24(SP) to address local variables, and 0(SP), 4(SP) etc for preparing\r\narguments to a call. The SP in the two syntaxes are different: the former\r\nis a virtual SP at the top of the local frame (basically, a negative number\r\nmeans add the frame size before laying down the instruction).\r\n\r\nThe difference on ARM is that 0(SP), 4(SP) for arguments are written\r\n0(R13), 4(R13) etc. That is, on ARM, SP is always the virtual SP, never the\r\nactual R13 register. I think this was probably a mistake, but I'm\r\ndisinclined to change the semantics at this point. I do want to encourage\r\npeople to use the proper local variable syntax, though.\r\n\r\nI am responsible for much of the misuse of 0(SP) etc for local variables on\r\namd64 and 386; I did not fully appreciate the distinction until relatively\r\nrecently.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-07-22 16:06:51.602660",
			"approval": false
		},
		{
			"sender": "nick@craig-wood.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 22/07/13 17:06, Russ Cox wrote:\r\n> No, the name-offset(SP) syntax is consistent across all architectures. A\r\n> 386 function with a frame of 24 should be using -4(SP), -8(SP) up to\r\n> -24(SP) to address local variables, and 0(SP), 4(SP) etc for preparing\r\n> arguments to a call. The SP in the two syntaxes are different: the\r\n> former is a virtual SP at the top of the local frame (basically, a\r\n> negative number means add the frame size before laying down the\r\n> instruction).\r\n> \r\n> The difference on ARM is that 0(SP), 4(SP) for arguments are written\r\n> 0(R13), 4(R13) etc.\r\n\r\nI think that should be 4(R13), 8(R13) as 0(R13) is your saved LR?\r\n\r\n> That is, on ARM, SP is always the virtual SP, never\r\n> the actual R13 register. I think this was probably a mistake, but I'm\r\n> disinclined to change the semantics at this point. I do want to\r\n> encourage people to use the proper local variable syntax, though.\r\n> \r\n> I am responsible for much of the misuse of 0(SP) etc for local variables\r\n> on amd64 and 386; I did not fully appreciate the distinction until\r\n> relatively recently.\r\n\r\nAh OK!  Thanks for clearing that up.  I'll submit a fixed patch shortly.\r\n\r\n-- \r\nNick Craig-Wood <nick@craig-wood.com> -- http://www.craig-wood.com/nick\r\n",
			"disapproval": false,
			"date": "2013-07-22 16:16:59.175660",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jul 22, 2013 at 12:16 PM, Nick Craig-Wood <nick@craig-wood.com>wrote:\r\n\r\n> On 22/07/13 17:06, Russ Cox wrote:\r\n> > No, the name-offset(SP) syntax is consistent across all architectures. A\r\n> > 386 function with a frame of 24 should be using -4(SP), -8(SP) up to\r\n> > -24(SP) to address local variables, and 0(SP), 4(SP) etc for preparing\r\n> > arguments to a call. The SP in the two syntaxes are different: the\r\n> > former is a virtual SP at the top of the local frame (basically, a\r\n> > negative number means add the frame size before laying down the\r\n> > instruction).\r\n> >\r\n> > The difference on ARM is that 0(SP), 4(SP) for arguments are written\r\n> > 0(R13), 4(R13) etc.\r\n>\r\n> I think that should be 4(R13), 8(R13) as 0(R13) is your saved LR?\r\n\r\n\r\nYes, wherever it is the arguments go.\r\n\r\nIn general if you see an R13 that is not being used to prepare arguments,\r\nit's wrong. I'd like at some point to move the saved LR to match the ABI\r\nused by gcc on ARM, so eventually it really will be 0(R13). It will be nice\r\nif arguments are the only uses of R13, because then they will be easy to\r\nfind and update.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-07-22 16:44:36.113770",
			"approval": false
		},
		{
			"sender": "nickcw@gmail.com",
			"recipients": [
				"nickcw@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"nick@craig-wood.com",
				"rsc@golang.org",
				"dave cheney <dave@cheney.net>",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, dave@cheney.net, remyoudompheng@gmail.com, nick@craig-wood.com, rsc@golang.org (cc: dave cheney <dave@cheney.net>, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-07-22 18:24:23.425400",
			"approval": false
		},
		{
			"sender": "nickcw@gmail.com",
			"recipients": [
				"nickcw@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"nick@craig-wood.com",
				"rsc@golang.org",
				"dave cheney <dave@cheney.net>",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/22 18:24:23, Nick Craig-Wood wrote:\n> Hello mailto:golang-dev@googlegroups.com, mailto:bradfitz@golang.org, mailto:dave@cheney.net,\n> mailto:remyoudompheng@gmail.com, mailto:nick@craig-wood.com, mailto:rsc@golang.org (cc: dave cheney\n> <mailto:dave@cheney.net>, mailto:golang-dev@googlegroups.com),\n> \n> Please take another look.\n\nI've changed the (R13) into (SP) access as per rsc suggestion\n\nI've also run the test suite and checked the assembler is now correct",
			"disapproval": false,
			"date": "2013-07-22 18:25:46.187760",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"nickcw@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"nick@craig-wood.com",
				"rsc@golang.org",
				"dave cheney <dave@cheney.net>",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThanks, and apologies.",
			"disapproval": false,
			"date": "2013-07-22 18:31:07.541200",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"nickcw@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"nick@craig-wood.com",
				"rsc@golang.org",
				"dave cheney <dave@cheney.net>",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. Thanks Russ and Nick. Submitting.",
			"disapproval": false,
			"date": "2013-07-22 23:27:29.222250",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"nickcw@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"nick@craig-wood.com",
				"rsc@golang.org",
				"dave cheney <dave@cheney.net>",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=e560004b817d ***\n\nruntime: Stop arm memmove corrupting its parameters\n\nChange use of x+(SP) to access the stack frame into x-(SP)\n\nFixes issue 5925.\n\nR=golang-dev, bradfitz, dave, remyoudompheng, nick, rsc\nCC=dave cheney <dave, golang-dev\nhttps://codereview.appspot.com/11647043\n\nCommitter: Dave Cheney <dave@cheney.net>",
			"disapproval": false,
			"date": "2013-07-22 23:29:44.200230",
			"approval": false
		}
	],
	"owner_email": "nickcw@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Nick Craig-Wood",
	"subject": "code review 11647043: runtime: Stop arm memmove corrupting its parameters",
	"created": "2013-07-21 07:33:32.389660",
	"patchsets": [
		1,
		3001,
		6001,
		20001,
		23001
	],
	"modified": "2013-07-22 23:29:44.739220",
	"closed": false,
	"issue": 11647043
}