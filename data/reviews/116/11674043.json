{
	"description": "go.tools/ssa: (another) major refactoring of method-set logic.\n\nWe now use LookupFieldOrMethod for all SelectorExprs, and\nsimplify the logic to discriminate the various cases.\n\nWe inline static calls to promoted/indirected functions,\ndramatically reducing the number of functions created.\n\nMore tests are needed, but I'd like to submit this as-is.\n\nIn this CL, we:\n- rely less on Id strings.  Internally we now use\n  *types.Method (and its components) almost everywhere.\n- stop thinking of types.Methods as objects. They don't\n  have stable identities. (Hopefully they will become\n  plain-old structs soon.)\n- eliminate receiver indirection wrappers:\n  indirection and promotion are handled together by makeWrapper.\n- Handle the interactions of promotion, indirection and\n  abstract methods much more cleanly.\n- support receiver-bound interface method closures.\n- break up builder.selectField so we can re-use parts\n  (emitFieldSelection).\n- add importer.PackageInfo.classifySelector utility.\n- delete interfaceMethodIndex()\n- delete namedTypeMethodIndex()\n- delete isSuperInterface() (replaced by types.IsAssignable)\n- call memberFromObject on each declared concrete method's\n  *types.Func, not on every Method frem each method set, in the\n  CREATE phase for packages loaded by gcimporter.\n\ngo/types:\n- document Func, Signature.Recv() better.\n- use fmt in {Package,Label}.String\n- reimplement Func.String to be prettier and to include method\n  receivers.\n\nAPI changes:\n- Function.method now holds the types.Method (soon to be\n  not-an-object) for synthetic wrappers.\n- CallCommon.Method now contains an abstract (interface)\n  method object; was an abstract method index.\n- CallCommon.MethodId() gone.\n- Program.LookupMethod now takes a *Method not an Id string.",
	"cc": [
		"gri@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.tools",
			"disapproval": false,
			"date": "2013-07-25 21:45:35.579790",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nas far as I can tell\n\nThe CL description has grammatical errors. Please fix.\n\nhttps://codereview.appspot.com/11674043/diff/16001/go/types/objects.go\nFile go/types/objects.go (right):\n\nhttps://codereview.appspot.com/11674043/diff/16001/go/types/objects.go#newcode49\ngo/types/objects.go:49: // TODO(gri): shouldn't !ast.IsExported(name) => pkg != nil be an precondition?\nit should - i think this is here for robustness in case of previous errors, but i'm not sure anymore - will investigate",
			"disapproval": false,
			"date": "2013-07-26 00:40:36.319750",
			"approval": true
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=5293497c01fa&repo=tools ***\n\ngo.tools/ssa: (another) major refactoring of method-set logic.\n\nWe now use LookupFieldOrMethod for all SelectorExprs, and\nsimplify the logic to discriminate the various cases.\n\nWe inline static calls to promoted/indirected functions,\ndramatically reducing the number of functions created.\n\nMore tests are needed, but I'd like to submit this as-is.\n\nIn this CL, we:\n- rely less on Id strings.  Internally we now use\n  *types.Method (and its components) almost everywhere.\n- stop thinking of types.Methods as objects. They don't\n  have stable identities. (Hopefully they will become\n  plain-old structs soon.)\n- eliminate receiver indirection wrappers:\n  indirection and promotion are handled together by makeWrapper.\n- Handle the interactions of promotion, indirection and\n  abstract methods much more cleanly.\n- support receiver-bound interface method closures.\n- break up builder.selectField so we can re-use parts\n  (emitFieldSelection).\n- add importer.PackageInfo.classifySelector utility.\n- delete interfaceMethodIndex()\n- delete namedTypeMethodIndex()\n- delete isSuperInterface() (replaced by types.IsAssignable)\n- call memberFromObject on each declared concrete method's\n  *types.Func, not on every Method frem each method set, in the\n  CREATE phase for packages loaded by gcimporter.\n\ngo/types:\n- document Func, Signature.Recv() better.\n- use fmt in {Package,Label}.String\n- reimplement Func.String to be prettier and to include method\n  receivers.\n\nAPI changes:\n- Function.method now holds the types.Method (soon to be\n  not-an-object) for synthetic wrappers.\n- CallCommon.Method now contains an abstract (interface)\n  method object; was an abstract method index.\n- CallCommon.MethodId() gone.\n- Program.LookupMethod now takes a *Method not an Id string.\n\nR=gri\nCC=golang-dev\nhttps://codereview.appspot.com/11674043",
			"disapproval": false,
			"date": "2013-07-26 15:22:36.026640",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI: I snuck in a couple of doc tweaks and Object.String() improvements.\r\n They're listed in the CL description; PTAL at the delta since revision 7\r\nat your convenience.\r\n\r\nOn 25 July 2013 17:45, <adonovan@google.com> wrote:\r\n\r\n> Reviewers: gri,\r\n>\r\n> Message:\r\n> Hello gri@golang.org (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go.**tools <https://code.google.com/p/go.tools>\r\n>\r\n>\r\n> Description:\r\n> go.tools/ssa: (another) major refactoring of method-set logic.\r\n>\r\n> Use LookupFieldOrMethod for all SelectorExprs, and the logic\r\n> to discriminate the various cases has been simpliifed.\r\n>\r\n> Inline static calls to promoted/indirected functions,\r\n> dramatically reducing the number of functions created.\r\n>\r\n> More tests are needed, but I'd like to submit this as-is.\r\n>\r\n> Details:\r\n> - Rely less on Id strings.  Internally we now use\r\n>   *types.Method (and it comonents) almost everywhere.\r\n> - Stop thinking of types.Methods as objects. They're don't\r\n>   have stable identities. (Hopefully they will become\r\n>   plain-old structs soon.)\r\n> - Eliminate receiver indirection wrappers:\r\n>   indirection and promotion are handled together by makeWrapper.\r\n> - Handle the interactions of promotion, indirection and\r\n>   abstract methods much more cleanly.\r\n> - Support receiver-bound interface method closures.\r\n> - Break up builder.selectField so we can re-use parts\r\n>   (emitFieldSelection).\r\n> - Add importer.PackageInfo.**classifySelector utility.\r\n> - Delete interfaceMethodIndex()\r\n> - Delete namedTypeMethodIndex()\r\n> - Delete isSuperInterface() (replaced by types.IsAssignable)\r\n>\r\n> API changes:\r\n> - Function.method: holds the types.Method (soon to be\r\n>   not-an-object) for synthetic wrappers.\r\n> - CallCommon.Method now contains an abstract (interface)\r\n>   method object; was an abstract method index.\r\n> - CallCommon.MethodId() gone\r\n> - Program.LookupMethod now takes a *Method not an Id string.\r\n>\r\n> Please review this at https://codereview.appspot.**com/11674043/<https://codereview.appspot.com/11674043/>\r\n>\r\n> Affected files:\r\n>   M go/types/methodset.go\r\n>   M go/types/objects.go\r\n>   M importer/pkginfo.go\r\n>   M ssa/builder.go\r\n>   M ssa/builder_test.go\r\n>   M ssa/create.go\r\n>   M ssa/emit.go\r\n>   M ssa/func.go\r\n>   M ssa/interp/interp.go\r\n>   M ssa/interp/testdata/boundmeth.**go\r\n>   M ssa/interp/testdata/ifaceprom.**go\r\n>   M ssa/print.go\r\n>   M ssa/promote.go\r\n>   M ssa/source.go\r\n>   M ssa/ssa.go\r\n>   M ssa/util.go\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-26 15:24:18.716730",
			"approval": false
		}
	],
	"owner_email": "adonovan@google.com",
	"private": false,
	"base_url": "",
	"owner": "adonovan",
	"subject": "code review 11674043: go.tools/ssa: (another) major refactoring of method-set...",
	"created": "2013-07-22 14:39:26.058340",
	"patchsets": [
		1,
		2001,
		4001,
		6001,
		10001,
		13001,
		16001,
		23001,
		31001,
		36001
	],
	"modified": "2013-07-26 15:24:18.811250",
	"closed": true,
	"issue": 11674043
}