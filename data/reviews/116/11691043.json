{
	"description": "net/http: respect tls.Config.ServerName in Transport\n\nWhen making an HTTPS client request, respect the\nServerName field in the tls.Config.\n\nFixes issue 5829",
	"cc": [
		"golang-dev@googlegroups.com",
		"agl@golang.org",
		"adg@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-07-22 20:59:15.433200",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=agl\r\n\r\nIf this is correct, I can think about how/whether this is easily testable.\r\n\r\n\r\n\r\nOn Mon, Jul 22, 2013 at 1:59 PM, <bradfitz@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> net/http: respect tls.Config.ServerName in Transport\r\n>\r\n> When making an HTTPS client request, respect the\r\n> ServerName field in the tls.Config.\r\n>\r\n> Fixes issue 5829\r\n>\r\n> Please review this at https://codereview.appspot.**com/11691043/<https://codereview.appspot.com/11691043/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/net/http/transport.go\r\n>\r\n>\r\n> Index: src/pkg/net/http/transport.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/http/transport.**go\r\n> +++ b/src/pkg/net/http/transport.**go\r\n> @@ -500,8 +500,8 @@\r\n>                 if err = conn.(*tls.Conn).Handshake(); err != nil {\r\n>                         return nil, err\r\n>                 }\r\n> -               if t.TLSClientConfig == nil || !t.TLSClientConfig.**InsecureSkipVerify\r\n> {\r\n> -                       if err = conn.(*tls.Conn).**VerifyHostname(cm.tlsHost());\r\n> err != nil {\r\n> +               if !cfg.InsecureSkipVerify {\r\n> +                       if err = conn.(*tls.Conn).**\r\n> VerifyHostname(cfg.ServerName)**; err != nil {\r\n>                                 return nil, err\r\n>                         }\r\n>                 }\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-22 21:01:09.663460",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-07-22 22:16:17.007410",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks. PTAL (anybody) .. now with a test.\r\n\r\n\r\n\r\nOn Mon, Jul 22, 2013 at 3:16 PM, <agl@golang.org> wrote:\r\n\r\n> LGTM\r\n>\r\n> https://codereview.appspot.**com/11691043/<https://codereview.appspot.com/11691043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-22 23:41:44.979500",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Huh? Shouldn't this test fail? I'm confused.",
			"disapproval": false,
			"date": "2013-07-23 04:19:41.538570",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The comment on line 679 says why it should pass.\r\n\r\nIt used to fail, but now passes.\r\n\r\nSee the bottom of http://tip.golang.org/src/pkg/net/http/httptest/server.go\r\n\r\n   203 // localhostCert is a PEM-encoded TLS cert with SAN IPs\r\n   204 // \"127.0.0.1\" and \"[::1]\", expiring at the last second of 2049 (the\r\nend\r\n   205 // of ASN.1 time).\r\n   206 // generated from src/pkg/crypto/tls:\r\n   207 // go run generate_cert.go  --rsa-bits 512 --host 127.0.0.1,::1,\r\nexample.com --ca --start-date \"Jan 1 00:00:00 1970\" --duration=1000000h\r\n   208 var localhostCert = []byte(`-----BEGIN CERTIFICATE-----\r\n   209 MIIBdzCCASOgAwIBAgIBADALBgkqhkiG9w0BAQUwEjEQMA4GA1UEChMHQWNtZSBD\r\n\r\n\r\n... the httptest.NewServer thinks that it is \"example.com\".\r\n\r\n\r\n\r\n\r\nOn Mon, Jul 22, 2013 at 9:19 PM, <adg@golang.org> wrote:\r\n\r\n> Huh? Shouldn't this test fail? I'm confused.\r\n>\r\n> https://codereview.appspot.**com/11691043/<https://codereview.appspot.com/11691043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-23 04:26:36.577620",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nA comment to that effect would be nice. :-)\r\n\r\n\r\nOn 23 July 2013 14:37, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n\r\n> hostname(that) != \"127.0.0.1\" && hostname(that) != \"example.com\" ... both\r\n> of which would've passed.\r\n>\r\n> Hence the Dial hook.  It's forcing it to dial the wrong place and\r\n> configured to force-ask for a TLS cert of \"example.com\", and testing that\r\n> the tls.Config.ServerName (non-empty, set to \"example.com\") takes\r\n> precedence over \"some-other-host.tld\" which previously incorrectly took\r\n> precedence.\r\n>\r\n>\r\n>\r\n> On Mon, Jul 22, 2013 at 9:29 PM, Andrew Gerrand <adg@golang.org> wrote:\r\n>\r\n>> What's the purpose of Get(\"https://some-other-host.tld/\") ?\r\n>>\r\n>> What about a test the other way? Where the transport is expecting another\r\n>> hostname?\r\n>>\r\n>>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-23 04:39:18.697520",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What's the purpose of Get(\"https://some-other-host.tld/\") ?\r\n\r\nWhat about a test the other way? Where the transport is expecting another\r\nhostname?\r\n",
			"disapproval": false,
			"date": "2013-07-23 04:30:03.931470",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "hostname(that) != \"127.0.0.1\" && hostname(that) != \"example.com\" ... both\r\nof which would've passed.\r\n\r\nHence the Dial hook.  It's forcing it to dial the wrong place and\r\nconfigured to force-ask for a TLS cert of \"example.com\", and testing that\r\nthe tls.Config.ServerName (non-empty, set to \"example.com\") takes\r\nprecedence over \"some-other-host.tld\" which previously incorrectly took\r\nprecedence.\r\n\r\n\r\n\r\nOn Mon, Jul 22, 2013 at 9:29 PM, Andrew Gerrand <adg@golang.org> wrote:\r\n\r\n> What's the purpose of Get(\"https://some-other-host.tld/\") ?\r\n>\r\n> What about a test the other way? Where the transport is expecting another\r\n> hostname?\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-23 04:37:41.921990",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Done.\r\n\r\n\r\n\r\nOn Mon, Jul 22, 2013 at 9:38 PM, Andrew Gerrand <adg@golang.org> wrote:\r\n\r\n> LGTM\r\n>\r\n> A comment to that effect would be nice. :-)\r\n>\r\n>\r\n> On 23 July 2013 14:37, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n>\r\n>> hostname(that) != \"127.0.0.1\" && hostname(that) != \"example.com\" ...\r\n>> both of which would've passed.\r\n>>\r\n>> Hence the Dial hook.  It's forcing it to dial the wrong place and\r\n>> configured to force-ask for a TLS cert of \"example.com\", and testing\r\n>> that the tls.Config.ServerName (non-empty, set to \"example.com\") takes\r\n>> precedence over \"some-other-host.tld\" which previously incorrectly took\r\n>> precedence.\r\n>>\r\n>>\r\n>>\r\n>> On Mon, Jul 22, 2013 at 9:29 PM, Andrew Gerrand <adg@golang.org> wrote:\r\n>>\r\n>>> What's the purpose of Get(\"https://some-other-host.tld/\") ?\r\n>>>\r\n>>> What about a test the other way? Where the transport is expecting\r\n>>> another hostname?\r\n>>>\r\n>>>\r\n>>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-23 05:39:07.791250",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=4bfbd12d6f4f ***\n\nnet/http: respect tls.Config.ServerName in Transport\n\nWhen making an HTTPS client request, respect the\nServerName field in the tls.Config.\n\nFixes issue 5829\n\nR=golang-dev, agl, adg\nCC=golang-dev\nhttps://codereview.appspot.com/11691043",
			"disapproval": false,
			"date": "2013-07-23 05:39:18.524570",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 11691043: net/http: respect tls.Config.ServerName in Transport",
	"created": "2013-07-22 20:58:53.361720",
	"patchsets": [
		1,
		3001,
		6001,
		12001,
		19001
	],
	"modified": "2013-07-30 19:44:07.960730",
	"closed": true,
	"issue": 11691043
}