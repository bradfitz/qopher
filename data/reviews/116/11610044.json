{
	"description": "cmd/dist, cmd/go: enable more warnings, make clang errors legible\n\nThis does not change the default compiler on OS X to clang.\nIt appears that for now we can keep using gcc as long as we\nenable a few more warning settings that are on-by-default\nelsewhere.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"dave@cheney.net"
	],
	"reviewers": [
		"iant@golang.org"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-07-19 23:28:42.343230",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n On Jul 20, 2013 9:28 AM, <rsc@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> cmd/dist, cmd/go: enable more warnings, make clang errors legible\r\n>\r\n> This does not change the default compiler on OS X to clang.\r\n> It appears that for now we can keep using gcc as long as we\r\n> enable a few more warning settings that are on-by-default\r\n> elsewhere.\r\n>\r\n> Please review this at https://codereview.appspot.**com/11610044/<https://codereview.appspot.com/11610044/>\r\n>\r\n> Affected files:\r\n>   M src/cmd/dist/build.c\r\n>   M src/cmd/dist/unix.c\r\n>   M src/cmd/go/build.go\r\n>   M src/cmd/go/env.go\r\n>\r\n>\r\n> Index: src/cmd/dist/build.c\r\n> ==============================**==============================**=======\r\n> --- a/src/cmd/dist/build.c\r\n> +++ b/src/cmd/dist/build.c\r\n> @@ -407,12 +407,16 @@\r\n>         // native Plan 9 compilers don't like non-standard prototypes\r\n>         // so let gcc catch them.\r\n>         \"-Wstrict-prototypes\",\r\n> +       \"-Wextra\",\r\n> +       \"-Wunused\",\r\n> +       \"-Wuninitialized\",\r\n>         \"-Wno-sign-compare\",\r\n>         \"-Wno-missing-braces\",\r\n>         \"-Wno-parentheses\",\r\n>         \"-Wno-unknown-pragmas\",\r\n>         \"-Wno-switch\",\r\n>         \"-Wno-comment\",\r\n> +       \"-Wno-missing-field-**initializers\",\r\n>         \"-Werror\",\r\n>         \"-fno-common\",\r\n>         \"-ggdb\",\r\n> @@ -620,6 +624,8 @@\r\n>                 for(i=0; i<nelem(proto_gccargs); i++)\r\n>                         vadd(&gccargs, proto_gccargs[i]);\r\n>                 if(clang) {\r\n> +                       // disable ASCII art in clang errors, if possible\r\n> +                       vadd(&gccargs, \"-fno-caret-diagnostics\");\r\n>                         // clang is too smart about unused command-line\r\n> arguments\r\n>                         vadd(&gccargs, \"-Qunused-arguments\");\r\n>                 }\r\n> Index: src/cmd/dist/unix.c\r\n> ==============================**==============================**=======\r\n> --- a/src/cmd/dist/unix.c\r\n> +++ b/src/cmd/dist/unix.c\r\n> @@ -656,6 +656,8 @@\r\n>         setvbuf(stdout, nil, _IOLBF, 0);\r\n>         setvbuf(stderr, nil, _IOLBF, 0);\r\n>\r\n> +       setenv(\"TERM\", \"dumb\", 1); // disable escape codes in clang errors\r\n> +\r\n>         binit(&b);\r\n>\r\n>         slash = \"/\";\r\n> Index: src/cmd/go/build.go\r\n> ==============================**==============================**=======\r\n> --- a/src/cmd/go/build.go\r\n> +++ b/src/cmd/go/build.go\r\n> @@ -1811,8 +1811,10 @@\r\n>                 }\r\n>         }\r\n>\r\n> -       // clang is too smart about command-line arguments\r\n>         if strings.Contains(a[0], \"clang\") {\r\n> +               // disable ASCII art in clang errors, if possible\r\n> +               a = append(a, \"-fno-caret-diagnostics\")\r\n> +               // clang is too smart about command-line arguments\r\n>                 a = append(a, \"-Qunused-arguments\")\r\n>         }\r\n>\r\n> Index: src/cmd/go/env.go\r\n> ==============================**==============================**=======\r\n> --- a/src/cmd/go/env.go\r\n> +++ b/src/cmd/go/env.go\r\n> @@ -45,6 +45,9 @@\r\n>                 {\"GORACE\", os.Getenv(\"GORACE\")},\r\n>                 {\"GOROOT\", goroot},\r\n>                 {\"GOTOOLDIR\", toolDir},\r\n> +\r\n> +               // disable escape codes in clang errors\r\n> +               {\"TERM\", \"dumb\"},\r\n>         }\r\n>\r\n>         if goos != \"plan9\" {\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-19 23:29:40.611090",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\r\n",
			"disapproval": false,
			"date": "2013-07-19 23:35:46.386450",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=1b4c0f6479cb ***\n\ncmd/dist, cmd/go: enable more warnings, make clang errors legible\n\nThis does not change the default compiler on OS X to clang.\nIt appears that for now we can keep using gcc as long as we\nenable a few more warning settings that are on-by-default\nelsewhere.\n\nR=golang-dev, bradfitz, dave\nCC=golang-dev\nhttps://codereview.appspot.com/11610044",
			"disapproval": false,
			"date": "2013-07-19 23:36:18.698230",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11610044/diff/8001/src/cmd/dist/build.c\nFile src/cmd/dist/build.c (right):\n\nhttps://codereview.appspot.com/11610044/diff/8001/src/cmd/dist/build.c#newcode628\nsrc/cmd/dist/build.c:628: vadd(&gccargs, \"-fno-caret-diagnostics\");\nAny reason why we don't do the same for GCC? (-fno-diagnostics-show-caret)",
			"disapproval": false,
			"date": "2013-07-21 09:13:50.448780",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI\n\nhttps://codereview.appspot.com/11610044/diff/3001/src/cmd/dist/build.c\nFile src/cmd/dist/build.c (right):\n\nhttps://codereview.appspot.com/11610044/diff/3001/src/cmd/dist/build.c#newcode628\nsrc/cmd/dist/build.c:628: vadd(&gccargs, \"-fno-caret-diagnostics\");\nGCC will also emit caret diagnostics by default as of 4.8.  Turning them off requires the -fno-diagnostics-show-caret option.  Unfortunately that option does not work for GCC versions prior to 4.8.",
			"disapproval": false,
			"date": "2013-07-22 23:40:25.383110",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Is there a \"ignore unknown -f options\" option?\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-07-22 23:51:20.887850",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jul 22, 2013 at 4:51 PM, Russ Cox <rsc@golang.org> wrote:\r\n> Is there a \"ignore unknown -f options\" option?\r\n\r\nUnfortunately not.\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2013-07-23 00:07:18.888400",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 11610044: cmd/dist, cmd/go: enable more warnings, make clang erro...",
	"created": "2013-07-19 23:28:25.368350",
	"patchsets": [
		1,
		3001,
		8001
	],
	"modified": "2013-07-23 00:07:19.019030",
	"closed": true,
	"issue": 11610044
}