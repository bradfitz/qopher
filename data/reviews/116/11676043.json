{
	"description": "runtime: reduce frame size for runtime.cgocallback_gofunc\n\nTying preemption to stack splits means that we have to able to\ncomplete the call to exitsyscall (inside cgocallbackg at least for now)\nwithout any stack split checks, meaning that the whole sequence\nhas to work within 128 bytes of stack, unless we increase the size\nof the red zone. This CL frees up 24 bytes along that critical path\non amd64. (The 32-bit systems have plenty of space because all\ntheir words are smaller.)",
	"cc": [
		"dvyukov@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-07-22 19:32:14.837070",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dvyukov (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-07-22 18:54:09.525550",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11676043/diff/3002/src/pkg/runtime/cgocall.c\nFile src/pkg/runtime/cgocall.c (right):\n\nhttps://codereview.appspot.com/11676043/diff/3002/src/pkg/runtime/cgocall.c#newcode246\nsrc/pkg/runtime/cgocall.c:246: cb = (CallbackArgs*)((byte*)m->g0->sched.sp+4*sizeof(void*));\nwhy it is \"+4*sizeof(void*)\" here, but \"+3*sizeof(void*)\" below?\ncan we do \"cb = ...\" only once in the beginning?\nplease test with -race",
			"disapproval": false,
			"date": "2013-07-22 19:08:19.171530",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\r\n\r\nOn Mon, Jul 22, 2013 at 3:08 PM, <dvyukov@google.com> wrote:\r\n\r\n> https://codereview.appspot.**com/11676043/diff/3002/src/**\r\n> pkg/runtime/cgocall.c<https://codereview.appspot.com/11676043/diff/3002/src/pkg/runtime/cgocall.c>\r\n> File src/pkg/runtime/cgocall.c (right):\r\n>\r\n> https://codereview.appspot.**com/11676043/diff/3002/src/**\r\n> pkg/runtime/cgocall.c#**newcode246<https://codereview.appspot.com/11676043/diff/3002/src/pkg/runtime/cgocall.c#newcode246>\r\n> src/pkg/runtime/cgocall.c:246: cb =\r\n> (CallbackArgs*)((byte*)m->g0->**sched.sp+4*sizeof(void*));\r\n> why it is \"+4*sizeof(void*)\" here, but \"+3*sizeof(void*)\" below?\r\n> can we do \"cb = ...\" only once in the beginning?\r\n>\r\n\r\nI was trying to avoid cb needing to be stored on the stack, so that maybe\r\nsome day the C compiler can avoid allocating stack space for it.\r\n\r\nplease test with -race\r\n>\r\n\r\ngo test -short -race runtime/race failed with the 4, now passes with 3. But\r\nit runs too long (15s) to be part of run.bash. Per our chat, please send a\r\nCL adding something that runs *quickly* to run.bash and that will exercise\r\nthat code path.\r\n\r\nThanks.\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-07-22 19:20:14.767560",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=1d8320d97ad0 ***\n\nruntime: reduce frame size for runtime.cgocallback_gofunc\n\nTying preemption to stack splits means that we have to able to\ncomplete the call to exitsyscall (inside cgocallbackg at least for now)\nwithout any stack split checks, meaning that the whole sequence\nhas to work within 128 bytes of stack, unless we increase the size\nof the red zone. This CL frees up 24 bytes along that critical path\non amd64. (The 32-bit systems have plenty of space because all\ntheir words are smaller.)\n\nR=dvyukov\nCC=golang-dev\nhttps://codereview.appspot.com/11676043",
			"disapproval": false,
			"date": "2013-07-23 22:40:08.420960",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 11676043: runtime: reduce frame size for runtime.cgocallback_gofunc",
	"created": "2013-07-22 15:36:49.980540",
	"patchsets": [
		1,
		3001,
		6001,
		3002,
		13001,
		17001,
		20001,
		23001
	],
	"modified": "2013-07-23 22:40:11.474380",
	"closed": true,
	"issue": 11676043
}