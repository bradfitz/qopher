{
	"description": "net/http/fs.go: Changed the placement of call to checkLastModified. It is being called too early, causing it to check the directory itself rather than the index file, which it should if there is one. This causes a return of \"304 Not Modified\" status and stale index pages on the client side.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"bradfitz@golang.org",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks!\n\nWithout looking into this yet, this is believably valid, and looks\nlow-risk.  We're very close to cutting Go 1, though, so we're taking few\nchanges.  If you could include a test (in fs_test.go) that fails without\nthis change and passes with it, I'd be much more willing to take this on\nshort notice.\n\n\nOn Sat, Mar 24, 2012 at 4:06 PM, <haavid@falch.net> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> net/http/fs.go: Changed the placement of call to checkLastModified. It\n> is being called too early, causing it to check the directory itself\n> rather than the index file, which it should if there is one. This causes\n> a return of \"304 Not Modified\" status and stale index pages on the\n> client side.\n>\n> Please review this at http://codereview.appspot.com/**5901045/<http://codereview.appspot.com/5901045/>\n>\n> Affected files:\n>  M src/pkg/net/http/fs.go\n>\n>\n> Index: src/pkg/net/http/fs.go\n> ==============================**==============================**=======\n> old mode 100644\n> new mode 100755\n> --- a/src/pkg/net/http/fs.go\n> +++ b/src/pkg/net/http/fs.go\n> @@ -243,9 +243,6 @@\n>\n>        // use contents of index.html for directory, if present\n>        if d.IsDir() {\n> -               if checkLastModified(w, r, d.ModTime()) {\n> -                       return\n> -               }\n>                index := name + indexPage\n>                ff, err := fs.Open(index)\n>                if err == nil {\n> @@ -260,6 +257,9 @@\n>        }\n>\n>        if d.IsDir() {\n> +               if checkLastModified(w, r, d.ModTime()) {\n> +                       return\n> +               }\n>                dirList(w, f)\n>                return\n>        }\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-03-25 00:55:09.283293",
			"approval": false
		},
		{
			"sender": "haavid@falch.net",
			"recipients": [
				"haavid@falch.net",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-03-24 23:06:26.248570",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Let's leave this for after Go 1.\nAt this point I'd rather ship with minor bugs\nwe know about than the bugs we introduce\nby editing code.  Thanks.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-03-26 13:14:36.432755",
			"approval": false
		},
		{
			"sender": "haavid@falch.net",
			"recipients": [
				"haavid@falch.net",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "There is certainly is a big day coming up, and this isn't a serious error. I'll update the patch and submit a test along with it, after Go 1 has launched. Added it to the issue tracker in the meantime.\n\nOn 2012/03/26 13:14:36, rsc wrote:\n> Let's leave this for after Go 1.\n> At this point I'd rather ship with minor bugs\n> we know about than the bugs we introduce\n> by editing code.  Thanks.\n> \n> Russ",
			"disapproval": false,
			"date": "2012-03-28 00:16:25.305572",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"haavid@falch.net",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Are you interested in writing a test for this and getting it in, now that Go 1 is out?",
			"disapproval": false,
			"date": "2012-06-03 04:48:39.260544",
			"approval": false
		},
		{
			"sender": "haavid@falch.net",
			"recipients": [
				"haavid@falch.net",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/06/03 04:48:39, rsc wrote:\n> Are you interested in writing a test for this and getting it in, now that Go 1\n> is out?\n\nI'm sorry, but I don't have the time for it these days.\n\nI did look into it earlier, and didn't find any truly elegant way to test for this bug. Effective ways sure, but a bit messy.\nThe nature of the bug calls for a file generated on the fly during the test, then updated with a newer timestamp to check if the server picks up on it.\nFix is trivial, the only tests I came up with were messy.\n\nIf my schedule clears up soon I would look at it again, but it might be better if someone else can handle this.",
			"disapproval": false,
			"date": "2012-06-09 16:56:50.019995",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Jun 9, 2012 at 9:56 AM, <haavid@falch.net> wrote:\r\n\r\n> On 2012/06/03 04:48:39, rsc wrote:\r\n>\r\n>> Are you interested in writing a test for this and getting it in, now\r\n>>\r\n> that Go 1\r\n>\r\n>> is out?\r\n>>\r\n>\r\n> I'm sorry, but I don't have the time for it these days.\r\n>\r\n> I did look into it earlier, and didn't find any truly elegant way to\r\n> test for this bug. Effective ways sure, but a bit messy.\r\n> The nature of the bug calls for a file generated on the fly during the\r\n> test, then updated with a newer timestamp to check if the server picks\r\n> up on it.\r\n> Fix is trivial, the only tests I came up with were messy.\r\n>\r\n> If my schedule clears up soon I would look at it again, but it might be\r\n> better if someone else can handle this.\r\n\r\n\r\nI wrote a test for it here: http://codereview.appspot.com/6300081\r\n\r\nThanks for finding the problem!\r\n\r\n- Brad\r\n",
			"disapproval": false,
			"date": "2012-06-11 15:45:24.974442",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ignore all this.  I was trying to use the keyboard to scroll the page, but\r\nJavaScript onselectionchanged in the drop-down was running instead.\r\n\r\nThis CL is old.\r\n\r\n\r\nOn Sun, Jul 29, 2012 at 5:50 PM, <bradfitz@golang.org> wrote:\r\n\r\n> R=nigeltao\r\n>\r\n> (sent by gocodereview)\r\n>\r\n",
			"disapproval": false,
			"date": "2012-07-30 00:53:20.861960",
			"approval": false
		}
	],
	"owner_email": "haavid@falch.net",
	"private": false,
	"base_url": "",
	"owner": "haavid",
	"subject": "code review 5901045: net/http/fs.go: Changed the placement of call to checkL...",
	"created": "2012-03-24 23:04:47.781370",
	"patchsets": [
		1,
		1001,
		5
	],
	"modified": "2012-07-30 00:53:20.861960",
	"closed": false,
	"issue": 5901045
}