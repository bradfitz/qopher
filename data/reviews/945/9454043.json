{
	"description": "spdy: add net/http hook\n\nServe basic HTTP requests with flow control.\nMany requirements and features of SPDY are\nstill missing.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"rogpeppe@gmail.com",
		"the.sly.marbo@googlemail.com"
	],
	"messages": [
		{
			"sender": "kr@xph.us",
			"recipients": [
				"kr@xph.us",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.net",
			"disapproval": false,
			"date": "2013-05-17 00:02:42.980720",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"kr@xph.us",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Only skimmed this enough to look at the integration with net/http ... looks nice.\n\nI haven't reviewed any of the SPDY bits, though.\n\nhttps://codereview.appspot.com/9454043/diff/4007/spdy/buffer.go\nFile spdy/buffer.go (right):\n\nhttps://codereview.appspot.com/9454043/diff/4007/spdy/buffer.go#newcode33\nspdy/buffer.go:33: // Write copies bytes from p into the buffer, as many as will fit.\nthat's not a typical behavior of an io.Writer.",
			"disapproval": false,
			"date": "2013-05-18 20:39:24.569410",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"kr@xph.us",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "a few comments based on a superficial reading of the code. i'm not familiar with spdy.\n\nhttps://codereview.appspot.com/9454043/diff/4007/spdy/buffer.go\nFile spdy/buffer.go (right):\n\nhttps://codereview.appspot.com/9454043/diff/4007/spdy/buffer.go#newcode8\nspdy/buffer.go:8: // Buffer is an io.ReadWriteCloser backed by a fixed size buffer.\ns/Buffer/buffer/ ?\n\nhttps://codereview.appspot.com/9454043/diff/4007/spdy/buffer.go#newcode40\nspdy/buffer.go:40: if b.r > 0 {\nif b.r > 0 && len(p) > b.Len() {\n\nto prevent unnecessary copying?\n\nhttps://codereview.appspot.com/9454043/diff/4007/spdy/buffer.go#newcode47\nspdy/buffer.go:47: n = copy(b.buf[b.w:], p)\nit's usually considered an error if all the data can't be written. is that worth considering here?\n\nhttps://codereview.appspot.com/9454043/diff/4007/spdy/readrequest_test.go\nFile spdy/readrequest_test.go (right):\n\nhttps://codereview.appspot.com/9454043/diff/4007/spdy/readrequest_test.go#newcode26\nspdy/readrequest_test.go:26: var noTrailer http.Header = nil\ns/ = nil//\n?\n\nhttps://codereview.appspot.com/9454043/diff/4007/spdy/request.go\nFile spdy/request.go (right):\n\nhttps://codereview.appspot.com/9454043/diff/4007/spdy/request.go#newcode139\nspdy/request.go:139: // parseContentLength trims whitespace from s and returns -1 if no value\ns/ s / cl /\n\nhttps://codereview.appspot.com/9454043/diff/4007/spdy/server.go\nFile spdy/server.go (right):\n\nhttps://codereview.appspot.com/9454043/diff/4007/spdy/server.go#newcode31\nspdy/server.go:31: log.Println(\"serving spdy conn\")\nd ?\n\nhttps://codereview.appspot.com/9454043/diff/4007/spdy/server.go#newcode42\nspdy/server.go:42: if err != nil {\nperhaps return the error and use a little wrapper that adds the log for putting it into the TLSNextProto map. as an exported function, i'd expect ServeConn to return its error rather than logging it.\n\nhttps://codereview.appspot.com/9454043/diff/4007/spdy/server.go#newcode179\nspdy/server.go:179: for _, v := range vv {\nvv1 := make([]string, len(vv)\ncopy(vv1, vv)\ndst[k] = vv1\n?\n\nsaves a few allocations when there's more than one value, assuming you don't need the CanonicalMIMEHeaderKey logic.\n\nhttps://codereview.appspot.com/9454043/diff/4007/spdy/session.go\nFile spdy/session.go (right):\n\nhttps://codereview.appspot.com/9454043/diff/4007/spdy/session.go#newcode15\nspdy/session.go:15: const defaultInitWnd = 64 << 10\npersonally i'd find 64 * 1024 more readable, but YMMV.",
			"disapproval": false,
			"date": "2013-05-20 09:50:59.451530",
			"approval": false
		},
		{
			"sender": "kr@xph.us",
			"recipients": [
				"kr@xph.us",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/9454043/diff/4007/spdy/buffer.go\nFile spdy/buffer.go (right):\n\nhttps://codereview.appspot.com/9454043/diff/4007/spdy/buffer.go#newcode8\nspdy/buffer.go:8: // Buffer is an io.ReadWriteCloser backed by a fixed size buffer.\nOn 2013/05/20 09:50:59, rog wrote:\n> s/Buffer/buffer/ ?\n\nDone.\n\nhttps://codereview.appspot.com/9454043/diff/4007/spdy/buffer.go#newcode33\nspdy/buffer.go:33: // Write copies bytes from p into the buffer, as many as will fit.\nOn 2013/05/18 20:39:24, bradfitz wrote:\n> that's not a typical behavior of an io.Writer.\n\nMade writing too much an error.\n\nhttps://codereview.appspot.com/9454043/diff/4007/spdy/buffer.go#newcode40\nspdy/buffer.go:40: if b.r > 0 {\nOn 2013/05/20 09:50:59, rog wrote:\n> if b.r > 0 && len(p) > b.Len() {\n> \n> to prevent unnecessary copying?\n\nThis logic is stolen exactly from\nhttp://golang.org/src/pkg/bufio/bufio.go?s=1871:1884#L72\n\nI'd rather not change it until I can measure\na performance increase from the extra test.\n\nhttps://codereview.appspot.com/9454043/diff/4007/spdy/buffer.go#newcode47\nspdy/buffer.go:47: n = copy(b.buf[b.w:], p)\nOn 2013/05/20 09:50:59, rog wrote:\n> it's usually considered an error if all the data can't be written. is that worth\n> considering here?\n\nYup. Brad made the same comment.\nI changed it to an error.\n\nhttps://codereview.appspot.com/9454043/diff/4007/spdy/readrequest_test.go\nFile spdy/readrequest_test.go (right):\n\nhttps://codereview.appspot.com/9454043/diff/4007/spdy/readrequest_test.go#newcode26\nspdy/readrequest_test.go:26: var noTrailer http.Header = nil\nOn 2013/05/20 09:50:59, rog wrote:\n> s/ = nil//\n> ?\n\nCopied from\nhttp://golang.org/src/pkg/net/http/readrequest_test.go?s=390:417#L27\n\nI like that it's explicit.\n\nhttps://codereview.appspot.com/9454043/diff/4007/spdy/request.go\nFile spdy/request.go (right):\n\nhttps://codereview.appspot.com/9454043/diff/4007/spdy/request.go#newcode139\nspdy/request.go:139: // parseContentLength trims whitespace from s and returns -1 if no value\nOn 2013/05/20 09:50:59, rog wrote:\n> s/ s / cl /\n\nDone.\n\nhttps://codereview.appspot.com/9454043/diff/4007/spdy/server.go\nFile spdy/server.go (right):\n\nhttps://codereview.appspot.com/9454043/diff/4007/spdy/server.go#newcode31\nspdy/server.go:31: log.Println(\"serving spdy conn\")\nOn 2013/05/20 09:50:59, rog wrote:\n> d ?\n\nRemoved. Thanks.\n\nhttps://codereview.appspot.com/9454043/diff/4007/spdy/server.go#newcode42\nspdy/server.go:42: if err != nil {\nOn 2013/05/20 09:50:59, rog wrote:\n> perhaps return the error and use a little wrapper that adds the log for putting\n> it into the TLSNextProto map. as an exported function, i'd expect ServeConn to\n> return its error rather than logging it.\n\nThe main reason to export this function at all is so that\nothers can put it in the TLSNextProto map. Returning\nthe error would force everyone else to write the same\nlittle wrapper.\n\nI've left it as is for the moment.\n\nhttps://codereview.appspot.com/9454043/diff/4007/spdy/server.go#newcode179\nspdy/server.go:179: for _, v := range vv {\nOn 2013/05/20 09:50:59, rog wrote:\n> vv1 := make([]string, len(vv)\n> copy(vv1, vv)\n> dst[k] = vv1\n> ?\n> \n> saves a few allocations when there's more than one value, assuming you don't\n> need the CanonicalMIMEHeaderKey logic.\n\nI do need that logic in 3 of the 4 places copyHeader is used,\nsince it's copying into a Header for the user to read. (Right?)\n\nThe copyHeader call in this file is the one that doesn't need case\ncanonicalization. We can special-case that one in a future CL.\n\nhttps://codereview.appspot.com/9454043/diff/4007/spdy/session.go\nFile spdy/session.go (right):\n\nhttps://codereview.appspot.com/9454043/diff/4007/spdy/session.go#newcode15\nspdy/session.go:15: const defaultInitWnd = 64 << 10\nOn 2013/05/20 09:50:59, rog wrote:\n> personally i'd find 64 * 1024 more readable, but YMMV.\n\nDone.",
			"disapproval": false,
			"date": "2013-05-22 06:40:12.823090",
			"approval": false
		},
		{
			"sender": "kr@xph.us",
			"recipients": [
				"kr@xph.us",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/22 06:40:12, kr wrote:\n> https://codereview.appspot.com/9454043/diff/4007/spdy/buffer.go#newcode40\n> spdy/buffer.go:40: if b.r > 0 {\n> On 2013/05/20 09:50:59, rog wrote:\n> > if b.r > 0 && len(p) > b.Len() {\n> > \n> > to prevent unnecessary copying?\n> \n> This logic is stolen exactly from\n> http://golang.org/src/pkg/bufio/bufio.go?s=1871:1884#L72\n> \n> I'd rather not change it until I can measure\n> a performance increase from the extra test.\n\nOn second thought, it's being used quite differently\nhere than in bufio. And your suggestion makes\nperfect sense even aside from performance. I'll make\nthe change.",
			"disapproval": false,
			"date": "2013-05-22 06:49:23.446100",
			"approval": false
		},
		{
			"sender": "The.Sly.Marbo@googlemail.com",
			"recipients": [
				"kr@xph.us",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rogpeppe@gmail.com",
				"the.sly.marbo@googlemail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "rog suggested I have a look at this, since I've created my own SPDY Go library (https://github.com/SlyMarbo/spdy). From my experience, there are two important factors in implementing SPDY.\n\nThe first is deciding whether to use the exact same semantics as HTTP, but use SPDY for the underlying networking, or to have a separate SPDY interface. The former is far easier to implement and use, since you just import the new package and change the listener/client (see the second example in my package's README). Providing a separate interface is more work, and requires extra handlers etc. for SPDY, but allows the user to make full use of the protocol, by allowing explicit use of SETTINGS, sending server pushes and so on (see the third example in my package's README). It's best to decide which method to take early on, since it affects the structure of the code a fair amount. For example, my package has its own Request, Response, Client, Server, and other structures, since it allowed me to add SPDY-specific fields.\n\nThe second decision is which version(s) of SPDY to support. Adding SPDY/2 support to my library took a fair amount of work and still isn't fully functional. The move to SPDY/4 will involve an enormous change, due to its involvement in HTTP/2, which has already diverged a long way from SPDY/2. I haven't decided yet how I'm going to support SPDY/4, but it will involve rewriting most of the package.\n\nI'm very keen to get involved with bringing SPDY to the Go standard library, and I'm happy to help however I can.\n\nThanks,\nJamie",
			"disapproval": false,
			"date": "2013-05-23 23:53:42.361930",
			"approval": false
		},
		{
			"sender": "kr@xph.us",
			"recipients": [
				"kr@xph.us",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rogpeppe@gmail.com",
				"the.sly.marbo@googlemail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi Marbo, thanks for the feedback. I'm not sure if code review\nis the right place to have a high-level discussion, but I'll try to\naddress your questions:\n\nFor server push, there's a TODO in this CL showing (obliquely)\nhow we intend to expose the feature. The http.ResponseWriter\nwill have an optional interface, spdy.Pusher. Calling Push\nwill return another http.ResponseWriter.\n\nFor client-side handling of server push, there'll have to be a\nplace to put some sort of extra response handler. I haven't\nspent nearly as much time thinking about the client, so any\nsuggestions you have here would be most welcome.\n\nFor SETTINGS, my hope is that the spdy package will handle all\n(or almost all) of that internally. We can add extra knobs in a\nspdy.Server type if necessary, but it won't make a big difference\nto how the code (either inside or outside package spdy) is\norganized.\n\nI don't see much value in supporting versions of SPDY earlier\nthan 3, and HTTP/2 seems still a long way off from any\nsignificant agreement or deployment. So for now my intention\nis to stick to SPDY/3.\n\nDo you have any comments on this CL in particular?",
			"disapproval": false,
			"date": "2013-05-24 02:34:41.933610",
			"approval": false
		},
		{
			"sender": "The.Sly.Marbo@googlemail.com",
			"recipients": [
				"kr@xph.us",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rogpeppe@gmail.com",
				"the.sly.marbo@googlemail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks, kr. I'm afraid I'm not used to code reviews and didn't know where else to put my comments.\n\nhttps://codereview.appspot.com/9454043/diff/27001/spdy/request.go\nFile spdy/request.go (right):\n\nhttps://codereview.appspot.com/9454043/diff/27001/spdy/request.go#newcode34\nspdy/request.go:34: req.Close = true\nSurely Close should be false, since SPDY keeps the connection open?\n\nhttps://codereview.appspot.com/9454043/diff/27001/spdy/server.go\nFile spdy/server.go (right):\n\nhttps://codereview.appspot.com/9454043/diff/27001/spdy/server.go#newcode127\nspdy/server.go:127: if code == http.StatusNotModified {\nAccording to the HTTP/1.1 spec, we could use the same logic with (code == http.StatusNoContent) and (code/100 == 1).\n\nhttps://codereview.appspot.com/9454043/diff/27001/spdy/session.go\nFile spdy/session.go (right):\n\nhttps://codereview.appspot.com/9454043/diff/27001/spdy/session.go#newcode15\nspdy/session.go:15: const defaultInitWnd = 64 * 1024\nAlthough this is the 'default', I think it's wise to start with a larger value and send the corresponding SETTINGS at the beginning of the connection, since 64kB is very conservative and could lead to unnecessary buffering, reducing performance. Chrome (and my package) use 10 MB (10485760 B).\n\nhttps://codereview.appspot.com/9454043/diff/27001/spdy/session.go#newcode76\nspdy/session.go:76: // TODO(kr): 2 goroutines per session seems like a lot\nIf it helps, I do the same. Separating send and receive simplifies the code and helps performance so much that a little overhead is still worthwhile. Goroutines are lightweight enough that it shouldn't have a noticeable effect on performance.\n\nhttps://codereview.appspot.com/9454043/diff/27001/spdy/session.go#newcode132\nspdy/session.go:132: if s.isServer == fromServer || f.StreamId <= s.lastRecvId {\nThe SPDY/3 could be a little clearer, but I'm fairly sure it's an error to skip a stream ID, so perhaps this should check (f.StreamId != s.lastRecvId+2) instead?",
			"disapproval": false,
			"date": "2013-05-24 08:47:28.123870",
			"approval": false
		},
		{
			"sender": "kr@xph.us",
			"recipients": [
				"kr@xph.us",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rogpeppe@gmail.com",
				"the.sly.marbo@googlemail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9454043/diff/27001/spdy/request.go\nFile spdy/request.go (right):\n\nhttps://codereview.appspot.com/9454043/diff/27001/spdy/request.go#newcode34\nspdy/request.go:34: req.Close = true\n> Surely Close should be false, since SPDY keeps the connection open?\n\nDon't confuse the HTTP request, which takes place inside\na single stream, with the TCP connection, which contains\nthe entire session.\n\nThe server must close the stream when the request is finished.\n\nhttps://codereview.appspot.com/9454043/diff/27001/spdy/server.go\nFile spdy/server.go (right):\n\nhttps://codereview.appspot.com/9454043/diff/27001/spdy/server.go#newcode127\nspdy/server.go:127: if code == http.StatusNotModified {\nSounds like a good thing to address in a future CL.\n\nhttps://codereview.appspot.com/9454043/diff/27001/spdy/session.go\nFile spdy/session.go (right):\n\nhttps://codereview.appspot.com/9454043/diff/27001/spdy/session.go#newcode15\nspdy/session.go:15: const defaultInitWnd = 64 * 1024\nOn 2013/05/24 08:47:28, Marbo wrote:\n> Although this is the 'default', I think it's wise to start with a larger value\n\nYes, in a future CL we'll definitely want to think about the local buffer\nsize rather than simply using the number from the spec. However,\nwe're still required to assume the remote endpoint has 64kB buffers\nuntil we get a SETTINGS frame saying otherwise.\n\nhttps://codereview.appspot.com/9454043/diff/27001/spdy/session.go#newcode132\nspdy/session.go:132: if s.isServer == fromServer || f.StreamId <= s.lastRecvId {\nOn 2013/05/24 08:47:28, Marbo wrote:\n> The SPDY/3 could be a little clearer, but I'm fairly sure it's an error to skip\n> a stream ID, so perhaps this should check (f.StreamId != s.lastRecvId+2)\n> instead?\n\nThe spec is clear enough on this. It says \"Stream-IDs from each side of the\nconnection must increase monotonically as new streams are created\" and\n\"If an endpoint receives a SYN_STREAM with a stream id which is less than\nany previously received SYN_STREAM, it MUST issue a session error\" (and\n\"If a recipient receives a second SYN_STREAM for the same stream, it MUST\nissue a stream error\").\n\nThere's nothing about ids being contiguous.",
			"disapproval": false,
			"date": "2013-05-24 20:41:44.820990",
			"approval": false
		},
		{
			"sender": "kr@xph.us",
			"recipients": [
				"kr@xph.us",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rogpeppe@gmail.com",
				"the.sly.marbo@googlemail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm unclear on what needs to happen for this change to be committed.\n\nWho will decide that it's ok or not ok?\n\nWhat can I do to help?",
			"disapproval": false,
			"date": "2013-05-29 00:35:45.264170",
			"approval": false
		}
	],
	"owner_email": "kr@xph.us",
	"private": false,
	"base_url": "",
	"owner": "kr",
	"subject": "code review 9454043: spdy: add net/http hook",
	"created": "2013-05-16 23:41:18.884600",
	"patchsets": [
		1,
		2001,
		5001,
		4007,
		22001,
		27001
	],
	"modified": "2013-05-29 00:35:45.613970",
	"closed": false,
	"issue": 9454043
}