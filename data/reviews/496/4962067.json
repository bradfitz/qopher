{
	"description": "exp/template/html: pre-sanitized content\n\nNot all content is plain text.  Sometimes content comes from a trusted\nsource, such as another template invocation, an HTML tag whitelister,\netc.\n\nTemplate authors can deal with over-escaping in two ways.\n\n1) They can encapsulate known-safe content via\n   type HTML, type CSS, type URL, and friends in content.go.\n2) If they know that the for a particular action never needs escaping\n   then they can add |noescape to the pipeline.\n   {{.KnownSafeContent | noescape}}\n   which will prevent any escaping directives from being added.\n\nThis CL defines string type aliases: HTML, CSS, JS, URI, ...\nIt then modifies stringify to unpack the content type.\nFinally it modifies the escaping functions to use the content type and\ndecline to escape content that does not require it.\n\nThere are minor changes to escapeAction and helpers to treat as\nequivalent explicit escaping directives such as \"html\" and \"urlquery\"\nand the escaping directives defined in the contextual autoescape module\nand to recognize the special \"noescape\" directive.\n\nThe html escaping functions are rearranged.  Instead of having one\nescaping function used in each {{.}} in\n\n    {{.}} : <textarea title=\"{{.}}\">{{.}}</textarea>\n\na slightly different escaping function is used for each.\nWhen {{.}} binds to a pre-sanitized string of HTML\n\n    `one < <i>two</i> &amp; two < \"3\"`\n\nwe produces something like\n\n     one < <i>two</i> &amp; two < \"3\" :\n     <textarea title=\"one &lt; two &amp; two &lt; &#34;3&#34;\">\n       one &lt; &lt;i&gt;two&lt;/i&gt; &amp; two &lt; \"3\"\n     </textarea>\n\nAlthough escaping is not required in <textarea> normally, if the\nsubstring </textarea> is injected, then it breaks, so we normalize\nspecial characters in RCDATA and do the same to preserve attribute\nboundaries.  We also strip tags since developers never intend\ntyped HTML injected in an attribute to contain tags escaped, but\ndo occasionally confuse pre-escaped HTML with HTML from a\ntag-whitelister.",
	"cc": [
		"golang-dev@googlegroups.com",
		"nigeltao@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 14 September 2011 02:58,  <mikesamuel@gmail.com> wrote:\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> exp/template/html: pre-sanitized content\n>\n> Not all content is plain text. \u00a0Sometimes content comes from a trusted\n> source, such as another template invocation, an HTML tag whitelister,\n> etc.\n>\n> Template authors can deal with over-escaping in two ways.\n>\n> 1) They can encapsulate known-safe content in a\n> \u00a0 type TypedStringer interface {\n> \u00a0 \u00a0 io.Stringer\n> \u00a0 \u00a0 ContentType() ContentType()\n> \u00a0 }\n\njust a thought: since the set of content types is fixed,\nwhat advantage does this API have over simply\ndefining a different type for each content type?\n\ne.g.\ntype CSSString string\ntype JSString string\n\nit seems to me that that might be more natural to use.\n\n> 2) If they know that the for a particular action never needs escaping\n> \u00a0 then they can add |noescape to the pipeline.\n> \u00a0 {{.KnownSafeContent | noescape}}\n> \u00a0 which will prevent any escaping directives from being added.\n>\n> This CL defines the exported interface TypedStringer, and an exported\n> enum ContentType.\n> It then modifies stringify to unpack the content type.\n> Finally it modifies the escaping functions to use the content type and\n> decline to escape content that does not require it.\n>\n> There are minor changes to escapeAction and helpers to treat as\n> equivalent explicit escaping directives such as \"html\" and \"urlquery\"\n> and the escaping directives defined in the contextual autoescape module\n> and to recognize the special \"noescape\" directive.\n>\n> The html escaping functions are rearranged. \u00a0Instead of having one\n> escaping function used in each {{.}} in\n>\n> \u00a0 \u00a0{{.}} : <textarea title=\"{{.}}\">{{.}}</textarea>\n>\n> a slightly different escaping function is used for each.\n> When {{.}} binds to a pre-sanitized string of HTML\n>\n> \u00a0 \u00a0`one < <i>two</i> &amp; two < \"3\"`\n>\n> we produces something like\n>\n> \u00a0 \u00a0 one < <i>two</i> &amp; two < \"3\" :\n> \u00a0 \u00a0 <textarea title=\"one &lt; two &amp; two &lt; &#34;3&#34;\">\n> \u00a0 \u00a0 \u00a0 one &lt; &lt;i&gt;two&lt;/i&gt; &amp; two &lt; \"3\"\n> \u00a0 \u00a0 </textarea>\n>\n> Although escaping is not required in <textarea> normally, if the\n> substring </textarea> is injected, then it breaks, so we normalize\n> special characters in RCDATA and do the same to preserve attribute\n> boundaries. \u00a0We also strip tags since developers never intend\n> typed HTML injected in an attribute to contain tags escaped, but\n> do occasionally confuse pre-escaped HTML with HTML from a\n> tag-whitelister.\n>\n> Please review this at http://codereview.appspot.com/4962067/\n>\n> Affected files:\n> \u00a0M src/pkg/exp/template/html/Makefile\n> \u00a0A src/pkg/exp/template/html/content.go\n> \u00a0M src/pkg/exp/template/html/css.go\n> \u00a0M src/pkg/exp/template/html/escape.go\n> \u00a0M src/pkg/exp/template/html/escape_test.go\n> \u00a0M src/pkg/exp/template/html/html.go\n> \u00a0M src/pkg/exp/template/html/html_test.go\n> \u00a0M src/pkg/exp/template/html/js.go\n> \u00a0M src/pkg/exp/template/html/url.go\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-09-14 08:41:46.541763",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"mikesamuel@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/content.go\nFile src/pkg/exp/template/html/content.go (right):\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/content.go#newcode16\nsrc/pkg/exp/template/html/content.go:16: // (3) CSS3 declaration productions, for example `color: red; margin: 2px`\ns/for example/such as/ would mean you would get this under 80 chars, even after adding a full stop.\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/content.go#newcode64\nsrc/pkg/exp/template/html/content.go:64: // stringify coerces its arguments to a string and the type of the content.\nI'd s/coerces/converts/.\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/escape.go\nFile src/pkg/exp/template/html/escape.go (right):\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/escape.go#newcode216\nsrc/pkg/exp/template/html/escape.go:216: if \"noescape\" == id.Ident {\nI'd write\nif id.Ident == \"noescape\" {\nsince, unlike C, accidentally writing only one '=' is a compile error.\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/escape.go#newcode263\nsrc/pkg/exp/template/html/escape.go:263: // escFnsEq returns true when a and b are equivalent escaping fns.\nI'd write:\n// escFnsEq returns whether the two escaping functions are equivalent.\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/escape_test.go\nFile src/pkg/exp/template/html/escape_test.go (right):\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/escape_test.go#newcode24\nsrc/pkg/exp/template/html/escape_test.go:24: TH      HTML\nIf the other fields are named mostly by their value instead of their type, you could s/TH/W/.\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/escape_test.go#newcode365\nsrc/pkg/exp/template/html/escape_test.go:365: \"auditable exemption from escaping\",\nI didn't understand \"auditable exemption from escaping\" the first few times I saw it.\n\nIt would make more sense if this test case was adjacent to the other \"auditable exemption from escaping\" one at line 389. Also, the two should have (slightly) different names, so if the test fails then you can see exactly which case broke.\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/escape_test.go#newcode399\nsrc/pkg/exp/template/html/escape_test.go:399: \"noescape\": func(a ...interface{}) string {\nShould the caller be responsible for explicitly adding a \"noescape\" function? Perhaps it should be called \"htmltemplate_noescape\" and be part of the built-in funcMap in escape.go\n\n(Renaming \"exp_template_html_cssescaper\" to \"htmltemplate_cssescaper\" etc should be a follow-up CL).\n\n(Is the \"noescape\" thing documented? I didn't see it in doc.go).\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/escape_test.go#newcode1190\nsrc/pkg/exp/template/html/escape_test.go:1190: func TestTypedContent(t *testing.T) {\nI'd move everything from here down to a content_test.go file.\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/escape_test.go#newcode1360\nsrc/pkg/exp/template/html/escape_test.go:1360: for i, datum := range data {\nI'd s/datum/x/.\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/escape_test.go#newcode1367\nsrc/pkg/exp/template/html/escape_test.go:1367: t.Errorf(\"%q with %v:\\nwant\\n\\t%q,\\ngot\\n\\t%q\\n\", test.input, datum, want, got)\nEven though it's redundant, I'd add a continue after this, in case you add any further code inside the loop, in the future.\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/html.go\nFile src/pkg/exp/template/html/html.go (right):\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/html.go#newcode136\nsrc/pkg/exp/template/html/html.go:136: func htmlReplacer(s string, replacementTable []string, badRunes bool) string {\nCan I get a doc comment for badRunes? Is it ever true!?\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/html.go#newcode140\nsrc/pkg/exp/template/html/html.go:140: repl := \"\"\nDelete this line and use the := two lines below.\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/html.go#newcode141\nsrc/pkg/exp/template/html/html.go:141: if r < len(replacementTable) {\nAlternatively:\nswitch {\ncase r < len(replacementTable):\n  repl := etc\ncase 0xfdd0 <= r && r <= 0xfdef || 0xfff0 <= r && r <= 0xffff:\n  if badRunes {\n    continue\n  }\n  // IE does not etc\n}\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/html.go#newcode173\nsrc/pkg/exp/template/html/html.go:173: // stripTags takes a snippet of HTML and returns only the text content.\nMaybe give some examples of excluded tags, such as <script>not text</script>. My first thought, when reviewing this function, was why you weren't simply just calling bytes.Index with '<' followed by '>' and cutting out everything in between.\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/html_test.go\nFile src/pkg/exp/template/html/html_test.go (right):\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/html_test.go#newcode85\nsrc/pkg/exp/template/html/html_test.go:85: }\nAdd a blank line after.\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/js.go\nFile src/pkg/exp/template/html/js.go (right):\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/js.go#newcode252\nsrc/pkg/exp/template/html/js.go:252: // so as not to overencode existing escapes.\ns/so as not to/backslashes, to not/.",
			"disapproval": false,
			"date": "2011-09-15 01:23:45.938117",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"mikesamuel@gmail.com",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4962067/diff/24001/src/pkg/exp/template/html/content.go\nFile src/pkg/exp/template/html/content.go (right):\n\nhttp://codereview.appspot.com/4962067/diff/24001/src/pkg/exp/template/html/content.go#newcode14\nsrc/pkg/exp/template/html/content.go:14: type CSS struct{ string }\nyou could use just\ntype CSS string\n\nand then\n\nreturn string(s) \n\nin the printers.\n\nnothing wrong with the struct, but it's not doing anything\n\nhttp://codereview.appspot.com/4962067/diff/24001/src/pkg/exp/template/html/content.go#newcode75\nsrc/pkg/exp/template/html/content.go:75: }\nthis is a very odd design. if there are multiple arguments you call Sprint. if there is a single argument you don't recognize you call Sprint. if there is a single argument you do recognize, you do what Sprint does.\n\ni'm not sure what you're trying to do, and i suspect you don't need reflection to do whatever it is.",
			"disapproval": false,
			"date": "2011-09-14 18:55:37.584957",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"mikesamuel@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-09-14 01:58:52.317320",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Sep 14, 2011, at 3:43 PM, r@golang.org wrote:\n\n> LGTM; leaving for nigeltao\n> \n> \n> http://codereview.appspot.com/4962067/diff/24003/src/pkg/exp/template/html/content.go\n> File src/pkg/exp/template/html/content.go (right):\n> \n> http://codereview.appspot.com/4962067/diff/24003/src/pkg/exp/template/html/content.go#newcode11\n> src/pkg/exp/template/html/content.go:11: // CSS encapsulates known safe\n> content that matches any of:\n> i believe if you put these into a distributed type clause\n> \n> type (\n>  CSS string\n>  ...\n> )\n> \n> and keep the comments you have now, you could put a comment above the\n> 'type' line that introduces these types as a set, which seems\n> worthwhile.\n\nthe piece that i left out is that i believe godoc would present these together with the introductory comment.\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2011-09-14 22:59:10.411847",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"mikesamuel@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/content.go\nFile src/pkg/exp/template/html/content.go (right):\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/content.go#newcode16\nsrc/pkg/exp/template/html/content.go:16: // (3) CSS3 declaration productions, for example `color: red; margin: 2px`\nOn 2011/09/15 01:23:46, nigeltao wrote:\n> s/for example/such as/ would mean you would get this under 80 chars, even after\n> adding a full stop.\n\nDone in 4 places.\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/content.go#newcode64\nsrc/pkg/exp/template/html/content.go:64: // stringify coerces its arguments to a string and the type of the content.\nOn 2011/09/15 01:23:46, nigeltao wrote:\n> I'd s/coerces/converts/.\n\nDone.\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/escape.go\nFile src/pkg/exp/template/html/escape.go (right):\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/escape.go#newcode216\nsrc/pkg/exp/template/html/escape.go:216: if \"noescape\" == id.Ident {\nOn 2011/09/15 01:23:46, nigeltao wrote:\n> I'd write\n> if id.Ident == \"noescape\" {\n> since, unlike C, accidentally writing only one '=' is a compile error.\n\nDone.\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/escape.go#newcode263\nsrc/pkg/exp/template/html/escape.go:263: // escFnsEq returns true when a and b are equivalent escaping fns.\nOn 2011/09/15 01:23:46, nigeltao wrote:\n> I'd write:\n> // escFnsEq returns whether the two escaping functions are equivalent.\n\nDone.\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/escape_test.go\nFile src/pkg/exp/template/html/escape_test.go (right):\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/escape_test.go#newcode24\nsrc/pkg/exp/template/html/escape_test.go:24: TH      HTML\nOn 2011/09/15 01:23:46, nigeltao wrote:\n> If the other fields are named mostly by their value instead of their type, you\n> could s/TH/W/.\n\nDone.\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/escape_test.go#newcode365\nsrc/pkg/exp/template/html/escape_test.go:365: \"auditable exemption from escaping\",\nOn 2011/09/15 01:23:46, nigeltao wrote:\n> I didn't understand \"auditable exemption from escaping\" the first few times I\n> saw it.\n> \n> It would make more sense if this test case was adjacent to the other \"auditable\n> exemption from escaping\" one at line 389. Also, the two should have (slightly)\n> different names, so if the test fails then you can see exactly which case broke.\n\nThis was just a copy/paste error on my part.  renamed and moved near the real \"auditable exemption\"\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/escape_test.go#newcode399\nsrc/pkg/exp/template/html/escape_test.go:399: \"noescape\": func(a ...interface{}) string {\nOn 2011/09/15 01:23:46, nigeltao wrote:\n> Should the caller be responsible for explicitly adding a \"noescape\" function?\n> Perhaps it should be called \"htmltemplate_noescape\" and be part of the built-in\n\nI would rather not prefix it because other type specific escape packages might want to use the same convention.\n\n> funcMap in escape.go\n\nI was thinking that.  I put in a TODO to move it.  Do you mind if I do that in a later CL?\n\n> (Renaming \"exp_template_html_cssescaper\" to \"htmltemplate_cssescaper\" etc should\n> be a follow-up CL).\n\nYeah.  I was planning on doing that after the move.\n\n> (Is the \"noescape\" thing documented? I didn't see it in doc.go).\n\nI have not documented it yet.\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/escape_test.go#newcode1190\nsrc/pkg/exp/template/html/escape_test.go:1190: func TestTypedContent(t *testing.T) {\nOn 2011/09/15 01:23:46, nigeltao wrote:\n> I'd move everything from here down to a content_test.go file.\n\nDone.\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/escape_test.go#newcode1360\nsrc/pkg/exp/template/html/escape_test.go:1360: for i, datum := range data {\nOn 2011/09/15 01:23:46, nigeltao wrote:\n> I'd s/datum/x/.\n\nDone.\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/escape_test.go#newcode1367\nsrc/pkg/exp/template/html/escape_test.go:1367: t.Errorf(\"%q with %v:\\nwant\\n\\t%q,\\ngot\\n\\t%q\\n\", test.input, datum, want, got)\nOn 2011/09/15 01:23:46, nigeltao wrote:\n> Even though it's redundant, I'd add a continue after this, in case you add any\n> further code inside the loop, in the future.\n\nDone.\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/html.go\nFile src/pkg/exp/template/html/html.go (right):\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/html.go#newcode136\nsrc/pkg/exp/template/html/html.go:136: func htmlReplacer(s string, replacementTable []string, badRunes bool) string {\nOn 2011/09/15 01:23:46, nigeltao wrote:\n> Can I get a doc comment for badRunes? Is it ever true!?\n\nDone.  It should have been true for htmlNospaceEscaper since IE infers an attribute value break on runes that are error codes or otherwise explicity listed as undefined in unicode.  Added test to html_test.go.\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/html.go#newcode140\nsrc/pkg/exp/template/html/html.go:140: repl := \"\"\nOn 2011/09/15 01:23:46, nigeltao wrote:\n> Delete this line and use the := two lines below.\n\nDone.\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/html.go#newcode160\nsrc/pkg/exp/template/html/html.go:160: fmt.Fprintf(&b, \"&#x%x;\", r)\nWow, this is a clusterf***.  Rewrote.\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/html.go#newcode173\nsrc/pkg/exp/template/html/html.go:173: // stripTags takes a snippet of HTML and returns only the text content.\nOn 2011/09/15 01:23:46, nigeltao wrote:\n> Maybe give some examples of excluded tags, such as <script>not text</script>. My\n\nDone.\n\n> first thought, when reviewing this function, was why you weren't simply just\n> calling bytes.Index with '<' followed by '>' and cutting out everything in\n> between.\n\nThat would mangle HTML like\n    <div title=\"1>2\">\nand\n    I <3 Ponies\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/js.go\nFile src/pkg/exp/template/html/js.go (right):\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/js.go#newcode252\nsrc/pkg/exp/template/html/js.go:252: // so as not to overencode existing escapes.\nOn 2011/09/15 01:23:46, nigeltao wrote:\n> s/so as not to/backslashes, to not/.\n\nlike such as in South Africa, Done.",
			"disapproval": false,
			"date": "2011-09-15 03:12:04.248311",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"mikesamuel@gmail.com",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4962067/diff/24001/src/pkg/exp/template/html/content.go\nFile src/pkg/exp/template/html/content.go (right):\n\nhttp://codereview.appspot.com/4962067/diff/24001/src/pkg/exp/template/html/content.go#newcode14\nsrc/pkg/exp/template/html/content.go:14: type CSS struct{ string }\nDone.\n\nhttp://codereview.appspot.com/4962067/diff/24001/src/pkg/exp/template/html/content.go#newcode75\nsrc/pkg/exp/template/html/content.go:75: }\nThis package no longer uses reflection.\n\nYou're right about this doing the same as fmt.Sprint.\nIf I comment out the special case for string, the escaper benchmarks take 5-50% longer.\nThis is also done in template/funcs.go:\n\nfunc JSEscaper(args ...interface{}) string {\n\tok := false\n\tvar s string\n\tif len(args) == 1 {\n\t\ts, ok = args[0].(string)\n\t}\n\tif !ok {\n\t\ts = fmt.Sprint(args...)\n\t}\n\t...\n}",
			"disapproval": false,
			"date": "2011-09-14 20:02:37.346631",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I agree with Roger.  This package only knows about\nvery specific content types, so the full generality\nof TypedStringer seems like overkill.  I think it would\nbe fine for this package to define:\n\ntype CSS string\ntype JavaScript string\ntype HTML string\n\nand then just look for those types.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-09-14 16:07:37.591605",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"mikesamuel@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=2a7e3e5d18bd ***\n\nexp/template/html: pre-sanitized content\n\nNot all content is plain text.  Sometimes content comes from a trusted\nsource, such as another template invocation, an HTML tag whitelister,\netc.\n\nTemplate authors can deal with over-escaping in two ways.\n\n1) They can encapsulate known-safe content via\n   type HTML, type CSS, type URL, and friends in content.go.\n2) If they know that the for a particular action never needs escaping\n   then they can add |noescape to the pipeline.\n   {{.KnownSafeContent | noescape}}\n   which will prevent any escaping directives from being added.\n\nThis CL defines string type aliases: HTML, CSS, JS, URI, ...\nIt then modifies stringify to unpack the content type.\nFinally it modifies the escaping functions to use the content type and\ndecline to escape content that does not require it.\n\nThere are minor changes to escapeAction and helpers to treat as\nequivalent explicit escaping directives such as \"html\" and \"urlquery\"\nand the escaping directives defined in the contextual autoescape module\nand to recognize the special \"noescape\" directive.\n\nThe html escaping functions are rearranged.  Instead of having one\nescaping function used in each {{.}} in\n\n    {{.}} : <textarea title=\"{{.}}\">{{.}}</textarea>\n\na slightly different escaping function is used for each.\nWhen {{.}} binds to a pre-sanitized string of HTML\n\n    `one < <i>two</i> &amp; two < \"3\"`\n\nwe produces something like\n\n     one < <i>two</i> &amp; two < \"3\" :\n     <textarea title=\"one &lt; two &amp; two &lt; &#34;3&#34;\">\n       one &lt; &lt;i&gt;two&lt;/i&gt; &amp; two &lt; \"3\"\n     </textarea>\n\nAlthough escaping is not required in <textarea> normally, if the\nsubstring </textarea> is injected, then it breaks, so we normalize\nspecial characters in RCDATA and do the same to preserve attribute\nboundaries.  We also strip tags since developers never intend\ntyped HTML injected in an attribute to contain tags escaped, but\ndo occasionally confuse pre-escaped HTML with HTML from a\ntag-whitelister.\n\nR=golang-dev, nigeltao\nCC=golang-dev\nhttp://codereview.appspot.com/4962067",
			"disapproval": false,
			"date": "2011-09-15 15:52:01.671105",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"mikesamuel@gmail.com",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"rsc@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/14 16:07:37, rsc wrote:\n> I agree with Roger.  This package only knows about\n> very specific content types, so the full generality\n> of TypedStringer seems like overkill.  I think it would\n> be fine for this package to define:\n> \n> type CSS string\n> type JavaScript string\n> type HTML string\n> \n> and then just look for those types.\n> \n> Russ\n\nhttp://codereview.appspot.com/4962067/diff2/22001:24001/src/pkg/exp/template/html/content.go now defines those types.\n\nI also moved stringify out of js.go into content.go and it uses package reflect to check whether the value it's producing is of one of those.",
			"disapproval": false,
			"date": "2011-09-14 17:20:55.763043",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"mikesamuel@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM.\n\nLeaving \"noescape\" as is is fine.\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/html.go\nFile src/pkg/exp/template/html/html.go (right):\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/html.go#newcode173\nsrc/pkg/exp/template/html/html.go:173: // stripTags takes a snippet of HTML and returns only the text content.\nOn 2011/09/15 03:12:04, MikeSamuel wrote:\n> That would mangle HTML like\n>     <div title=\"1>2\">\n> and\n>     I <3 Ponies\n\nYes, I realize that now, but a comment to say that would have been helpful.\n\nhttp://codereview.appspot.com/4962067/diff/34025/src/pkg/exp/template/html/escape.go\nFile src/pkg/exp/template/html/escape.go (right):\n\nhttp://codereview.appspot.com/4962067/diff/34025/src/pkg/exp/template/html/escape.go#newcode262\nsrc/pkg/exp/template/html/escape.go:262: // indexOfStr is the least i such that eq(s, strs[i]) or -1 if s was not found.\nMaybe s/least/first/.\n\nhttp://codereview.appspot.com/4962067/diff/34025/src/pkg/exp/template/html/html.go\nFile src/pkg/exp/template/html/html.go (right):\n\nhttp://codereview.appspot.com/4962067/diff/34025/src/pkg/exp/template/html/html.go#newcode150\nsrc/pkg/exp/template/html/html.go:150: // IE does not allow these ranges in unquoted attrs.\nThe indentation is weird here -- is this really what gofmt produces? Maybe move the dangling '(' above to be \"(0xfdd0\". The \"&&\" above should prevent the implicit semi-colon. Or rewrite it as:\n\n} else if badRunes {\n  // No-op.\n} else if 0xfdd0 <= r etc {\n\nhttp://codereview.appspot.com/4962067/diff/34025/src/pkg/exp/template/html/js.go\nFile src/pkg/exp/template/html/js.go (right):\n\nhttp://codereview.appspot.com/4962067/diff/34025/src/pkg/exp/template/html/js.go#newcode252\nsrc/pkg/exp/template/html/js.go:252: // overencode existing escapes.\nI still think that it would help to say that the only difference between the two tables is the backslash.",
			"disapproval": false,
			"date": "2011-09-15 08:41:42.096593",
			"approval": true
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Sep 14, 2011, at 1:02 PM, mikesamuel@gmail.com wrote:\n\n> \n> http://codereview.appspot.com/4962067/diff/24001/src/pkg/exp/template/html/content.go\n> File src/pkg/exp/template/html/content.go (right):\n> \n> http://codereview.appspot.com/4962067/diff/24001/src/pkg/exp/template/html/content.go#newcode14\n> src/pkg/exp/template/html/content.go:14: type CSS struct{ string }\n> Done.\n> \n> http://codereview.appspot.com/4962067/diff/24001/src/pkg/exp/template/html/content.go#newcode75\n> src/pkg/exp/template/html/content.go:75: }\n> This package no longer uses reflection.\n> \n> You're right about this doing the same as fmt.Sprint.\n> If I comment out the special case for string, the escaper benchmarks\n> take 5-50% longer.\n> This is also done in template/funcs.go:\n> \n> func JSEscaper(args ...interface{}) string {\n> \tok := false\n> \tvar s string\n> \tif len(args) == 1 {\n> \t\ts, ok = args[0].(string)\n> \t}\n> \tif !ok {\n> \t\ts = fmt.Sprint(args...)\n> \t}\n> \t...\n> }\n\nsure, why call fmt to turn a string into a string? but i'm glad to hear reflection is gone. it's overused sometimes.\n\ni'll review the code later today.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-09-14 20:07:17.886154",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"mikesamuel@gmail.com",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"r@google.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Incremental diffs at http://codereview.appspot.com/4962067/diff2/24003:25020/src/pkg/exp/template/html/content.go\n\nI will wait for +1 from nigeltao.\n\nhttp://codereview.appspot.com/4962067/diff/24003/src/pkg/exp/template/html/content.go\nFile src/pkg/exp/template/html/content.go (right):\n\nhttp://codereview.appspot.com/4962067/diff/24003/src/pkg/exp/template/html/content.go#newcode11\nsrc/pkg/exp/template/html/content.go:11: // CSS encapsulates known safe content that matches any of:\nOn 2011/09/14 22:43:59, r wrote:\n> i believe if you put these into a distributed type clause\n> \n> type (\n>   CSS string\n>   ...\n> )\n> \n> and keep the comments you have now, you could put a comment above the 'type'\n> line that introduces these types as a set, which seems worthwhile.\n\nDone.\n\nI ran godoc locally but do not see any grouping of types.\n\nhttp://codereview.appspot.com/4962067/diff/24003/src/pkg/exp/template/html/content.go#newcode20\nsrc/pkg/exp/template/html/content.go:20: // Do not use it for HTML from a third-party, or HTML with unclosed tags or\nOn 2011/09/14 22:43:59, r wrote:\n> s/Do not use it/Should not be used/\n\nDone.\n\nhttp://codereview.appspot.com/4962067/diff/24003/src/pkg/exp/template/html/content.go#newcode22\nsrc/pkg/exp/template/html/content.go:22: // this package are ok for use with HTML.\nOn 2011/09/14 22:43:59, r wrote:\n> s/ok/fine/\n\nDone.\n\nhttp://codereview.appspot.com/4962067/diff/24003/src/pkg/exp/template/html/content.go#newcode29\nsrc/pkg/exp/template/html/content.go:29: // ambiguity as when passing an expression like \"{ foo: bar() }\\n['foo']()\"\nOn 2011/09/14 22:43:59, r wrote:\n> s/$/,/\n> or better, rewrite so the example comes last after explaining the issue.\n\nDone.\n\nhttp://codereview.appspot.com/4962067/diff/24003/src/pkg/exp/template/html/content.go#newcode36\nsrc/pkg/exp/template/html/content.go:36: // For example, `foo\\nbar` with quotes around it makes a valid JavaScript\nOn 2011/09/14 22:43:59, r wrote:\n> i don't follow what you're saying with quotes, and \\n doesn't escape inside ``\n> (which may be what you mean, but i can't tell). rewrite.\n\n// JSStr encapsulates a sequence of characters meant to be embedded\n// between quotes in a JavaScript expression.\n// The string must match a series of StringCharacters:\n// StringCharacter :: SourceCharacter but not `\\` or LineTerminator\n//                  | EscapeSequence\n// Note that LineContinuations are not allowed.\n// JSStr(\"foo\\\\nbar\") is fine, but JSStr(\"foo\\\\\\nbar\") is not.\n\nThe example now follows the LineContinuation caveat, and uses JSStr(...) to make it clear it is a string of Go, not of JavaScript.\n\nhttp://codereview.appspot.com/4962067/diff/24003/src/pkg/exp/template/html/doc.go\nFile src/pkg/exp/template/html/doc.go (right):\n\nhttp://codereview.appspot.com/4962067/diff/24003/src/pkg/exp/template/html/doc.go#newcode336\nsrc/pkg/exp/template/html/doc.go:336: which would have been produced if {{.}} was a regular string.\nOn 2011/09/14 22:43:59, r wrote:\n> s/which/that/\n\nDone.",
			"disapproval": false,
			"date": "2011-09-14 23:42:57.843638",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"mikesamuel@gmail.com",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"r@google.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM; leaving for nigeltao\n\nhttp://codereview.appspot.com/4962067/diff/24003/src/pkg/exp/template/html/content.go\nFile src/pkg/exp/template/html/content.go (right):\n\nhttp://codereview.appspot.com/4962067/diff/24003/src/pkg/exp/template/html/content.go#newcode11\nsrc/pkg/exp/template/html/content.go:11: // CSS encapsulates known safe content that matches any of:\ni believe if you put these into a distributed type clause\n\ntype (\n  CSS string\n  ...\n)\n\nand keep the comments you have now, you could put a comment above the 'type' line that introduces these types as a set, which seems worthwhile.\n\nhttp://codereview.appspot.com/4962067/diff/24003/src/pkg/exp/template/html/content.go#newcode20\nsrc/pkg/exp/template/html/content.go:20: // Do not use it for HTML from a third-party, or HTML with unclosed tags or\ns/Do not use it/Should not be used/\n\nhttp://codereview.appspot.com/4962067/diff/24003/src/pkg/exp/template/html/content.go#newcode22\nsrc/pkg/exp/template/html/content.go:22: // this package are ok for use with HTML.\ns/ok/fine/\n\nhttp://codereview.appspot.com/4962067/diff/24003/src/pkg/exp/template/html/content.go#newcode29\nsrc/pkg/exp/template/html/content.go:29: // ambiguity as when passing an expression like \"{ foo: bar() }\\n['foo']()\"\ns/$/,/\nor better, rewrite so the example comes last after explaining the issue.\n\nhttp://codereview.appspot.com/4962067/diff/24003/src/pkg/exp/template/html/content.go#newcode36\nsrc/pkg/exp/template/html/content.go:36: // For example, `foo\\nbar` with quotes around it makes a valid JavaScript\ni don't follow what you're saying with quotes, and \\n doesn't escape inside `` (which may be what you mean, but i can't tell). rewrite.\n\nhttp://codereview.appspot.com/4962067/diff/24003/src/pkg/exp/template/html/content.go#newcode64\nsrc/pkg/exp/template/html/content.go:64: if len(args) == 1 {\nmuch better.\n\nhttp://codereview.appspot.com/4962067/diff/24003/src/pkg/exp/template/html/doc.go\nFile src/pkg/exp/template/html/doc.go (right):\n\nhttp://codereview.appspot.com/4962067/diff/24003/src/pkg/exp/template/html/doc.go#newcode336\nsrc/pkg/exp/template/html/doc.go:336: which would have been produced if {{.}} was a regular string.\ns/which/that/",
			"disapproval": false,
			"date": "2011-09-14 22:43:58.960360",
			"approval": true
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"mikesamuel@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "Incremental diffs at http://codereview.appspot.com/4962067/diff2/34025:22043/src/pkg/exp/template/html/escape.go\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/html.go\nFile src/pkg/exp/template/html/html.go (right):\n\nhttp://codereview.appspot.com/4962067/diff/25020/src/pkg/exp/template/html/html.go#newcode173\nsrc/pkg/exp/template/html/html.go:173: // stripTags takes a snippet of HTML and returns only the text content.\nOn 2011/09/15 08:41:42, nigeltao wrote:\n> On 2011/09/15 03:12:04, MikeSamuel wrote:\n> > That would mangle HTML like\n> >     <div title=\"1>2\">\n> > and\n> >     I <3 Ponies\n> \n> Yes, I realize that now, but a comment to say that would have been helpful.\n\nDone.\n\nhttp://codereview.appspot.com/4962067/diff/34025/src/pkg/exp/template/html/escape.go\nFile src/pkg/exp/template/html/escape.go (right):\n\nhttp://codereview.appspot.com/4962067/diff/34025/src/pkg/exp/template/html/escape.go#newcode262\nsrc/pkg/exp/template/html/escape.go:262: // indexOfStr is the least i such that eq(s, strs[i]) or -1 if s was not found.\nOn 2011/09/15 08:41:42, nigeltao wrote:\n> Maybe s/least/first/.\n\nDone.\n\nhttp://codereview.appspot.com/4962067/diff/34025/src/pkg/exp/template/html/html.go\nFile src/pkg/exp/template/html/html.go (right):\n\nhttp://codereview.appspot.com/4962067/diff/34025/src/pkg/exp/template/html/html.go#newcode150\nsrc/pkg/exp/template/html/html.go:150: // IE does not allow these ranges in unquoted attrs.\nOn 2011/09/15 08:41:42, nigeltao wrote:\n> The indentation is weird here -- is this really what gofmt produces? Maybe move\n> the dangling '(' above to be \"(0xfdd0\". The \"&&\" above should prevent the\n> implicit semi-colon. Or rewrite it as:\n> \n> } else if badRunes {\n>   // No-op.\n> } else if 0xfdd0 <= r etc {\n\nDone.\n\nhttp://codereview.appspot.com/4962067/diff/34025/src/pkg/exp/template/html/js.go\nFile src/pkg/exp/template/html/js.go (right):\n\nhttp://codereview.appspot.com/4962067/diff/34025/src/pkg/exp/template/html/js.go#newcode252\nsrc/pkg/exp/template/html/js.go:252: // overencode existing escapes.\nOn 2011/09/15 08:41:42, nigeltao wrote:\n> I still think that it would help to say that the only difference between the two\n> tables is the backslash.\n\nDone.",
			"disapproval": false,
			"date": "2011-09-15 15:51:36.498355",
			"approval": false
		}
	],
	"owner_email": "mikesamuel@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "MikeSamuel",
	"subject": "code review 4962067: exp/template/html: pre-sanitized content",
	"created": "2011-09-11 01:35:07.875360",
	"patchsets": [
		1,
		2001,
		3001,
		10001,
		13001,
		15001,
		18001,
		16010,
		22001,
		24001,
		28001,
		18012,
		17011,
		30001,
		31002,
		31003,
		24003,
		25020,
		23020,
		18023,
		25032,
		28002,
		15032,
		34025,
		22043,
		20011
	],
	"modified": "2011-09-15 15:52:02.599538",
	"closed": true,
	"issue": 4962067
}