{
	"description": "json: if a field's tag is \"-\", never encode it.",
	"cc": [
		"adg@golang.org",
		"r@google.com",
		"edsrzf@gmail.com",
		"rsc@golang.org",
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-09-04 23:45:25.749118",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Sep 4, 2011, at 5:55 PM, Evan Shaw wrote:\n\n> On Mon, Sep 5, 2011 at 12:24 PM, David Symonds <dsymonds@golang.org> wrote:\n>> Sure, we could do that for protos, and that would solve the immediate\n>> use case, but I still think this is generically useful. There's bound\n>> to be other situations where exported fields should be omitted from\n>> JSON output.\n> \n> Agreed. Here's a real world example:\n> \n> I'm working on a web API that retrieves documents from MongoDB using\n> mgo and gobson. Some document fields are private, meaning that we\n> don't want them to be part of the API. We still need to export them so\n> gobson can see them for other reasons.\n> \n> I want to retrieve a document and then serve it as JSON all with one\n> struct. This json feature would make my code simpler.\n> \n> - Evan\n\nI thought the point of JSON was how simple the encoding is, not how simple it can make your code.  That is not a facetious remark. I don't want to see the JSON library get full of special cases for, well, special cases.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-09-05 01:10:58.913504",
			"approval": false
		},
		{
			"sender": "edsrzf@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Sep 5, 2011 at 12:24 PM, David Symonds <dsymonds@golang.org> wrote:\n> Sure, we could do that for protos, and that would solve the immediate\n> use case, but I still think this is generically useful. There's bound\n> to be other situations where exported fields should be omitted from\n> JSON output.\n\nAgreed. Here's a real world example:\n\nI'm working on a web API that retrieves documents from MongoDB using\nmgo and gobson. Some document fields are private, meaning that we\ndon't want them to be part of the API. We still need to export them so\ngobson can see them for other reasons.\n\nI want to retrieve a document and then serve it as JSON all with one\nstruct. This json feature would make my code simpler.\n\n- Evan\n",
			"disapproval": false,
			"date": "2011-09-05 00:55:55.416474",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Sep 7, 2011 at 13:35, Russ Cox <rsc@golang.org> wrote:\n> make json ignore an unexported field.\n\ns/un//\n",
			"disapproval": false,
			"date": "2011-09-07 17:35:26.538590",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Sep 8, 2011 at 3:35 AM, Russ Cox <rsc@golang.org> wrote:\n\n> However, I am worried about the particular mechanism here.\n> If json is ignoring a field, then it shouldn't be possible to\n> specify a name or other tags. \u00a0For example, what does\n> json:\"sw,omit\" mean? \u00a0I suppose it might mean that you\n> can still unmarshal into the field but not marshal it, but\n> that seems too specialized.\n>\n> I'd prefer to see the short json tag `json:\"-\"` mean\n> 'json: ignore this field entirely' than to introduce an\n> option and the combinatorial explosion it implies.\n\nMy thinking was that since there's already two options of the \",blah\"\nform, fitting into that pattern was better than a magic tag pattern.\nPersonally I'm not too worried about what \"sw,omit\" would mean; it\njust doesn't marshal it, and has no impact on unmarshaling, which is\nthe same as omitempty (modulo the emptiness criteria).\n\nHowever, if you're fine with this CL in principle, and using \"-\" would\npush it over the line then I can make that change.\n\n\nDave.\n",
			"disapproval": false,
			"date": "2011-09-07 22:19:46.143716",
			"approval": false
		},
		{
			"sender": "edsrzf@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Sep 5, 2011 at 1:10 PM, Rob 'Commander' Pike <r@google.com> wrote:\n> I thought the point of JSON was how simple the encoding is, not how simple it can make your code.\n\nSure, and I don't think the json package owes me anything beyond that.\nIt would just be nice. I understand, it's a slippery slope.\n\n> I don't want to see the JSON library get full of special cases for, well, special cases.\n\nConverting between data representations and having different views for\nthose representations seems pretty common to me.\n\n- Evan\n",
			"disapproval": false,
			"date": "2011-09-05 01:24:03.430058",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nGet more opinions before submitting.\n\nhttp://codereview.appspot.com/4962052/diff/3001/src/pkg/json/encode_test.go\nFile src/pkg/json/encode_test.go (right):\n\nhttp://codereview.appspot.com/4962052/diff/3001/src/pkg/json/encode_test.go#newcode16\nsrc/pkg/json/encode_test.go:16: Sw string `json:\"sw,omit\"`\ns/sw// to match the example in the docs",
			"disapproval": false,
			"date": "2011-09-04 23:58:24.031601",
			"approval": true
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "PTAL\n",
			"disapproval": false,
			"date": "2011-09-08 22:30:08.543116",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "blech.\n\nhow's that for an opinion?\n\nas far as the protobuf bug goes, i'd prefer to hide the data by putting into an unexported field and providing a horribly-named accessor. it's unsatisfactory either way but it strikes me this is a failure of protobufs not of JSON.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-09-05 00:20:53.767723",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Sep 5, 2011 at 10:20 AM, Rob 'Commander' Pike <r@google.com> wrote:\n\n> blech.\n>\n> how's that for an opinion?\n>\n> as far as the protobuf bug goes, i'd prefer to hide the data by putting into an unexported field and providing a horribly-named accessor. it's unsatisfactory either way but it strikes me this is a failure of protobufs not of JSON.\n\nSure, we could do that for protos, and that would solve the immediate\nuse case, but I still think this is generically useful. There's bound\nto be other situations where exported fields should be omitted from\nJSON output.\n\n\nDave.\n",
			"disapproval": false,
			"date": "2011-09-05 00:24:55.362417",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"r@google.com",
				"edsrzf@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM but wait for rsc",
			"disapproval": false,
			"date": "2011-09-08 23:47:47.418724",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "There has been an open bug for a while to provide\nsome way to make json ignore an unexported field.\nI agree that it needs to happen somehow.\n\nHowever, I am worried about the particular mechanism here.\nIf json is ignoring a field, then it shouldn't be possible to\nspecify a name or other tags.  For example, what does\njson:\"sw,omit\" mean?  I suppose it might mean that you\ncan still unmarshal into the field but not marshal it, but\nthat seems too specialized.\n\nI'd prefer to see the short json tag `json:\"-\"` mean\n'json: ignore this field entirely' than to introduce an\noption and the combinatorial explosion it implies.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-09-07 17:35:16.596348",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "i would lgtm json:\"-\".\n",
			"disapproval": false,
			"date": "2011-09-08 17:56:00.713059",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"adg@golang.org",
				"r@google.com",
				"edsrzf@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Missing corresponding condition in decode.go.\n\nhttp://codereview.appspot.com/4962052/diff/3004/src/pkg/json/encode.go\nFile src/pkg/json/encode.go (right):\n\nhttp://codereview.appspot.com/4962052/diff/3004/src/pkg/json/encode.go#newcode50\nsrc/pkg/json/encode.go:50: //   // Specifies that Field appears in JSON as key \"myName\"\ns/Specifies that //\n\nhttp://codereview.appspot.com/4962052/diff/3004/src/pkg/json/encode.go#newcode53\nsrc/pkg/json/encode.go:53: //   // Specifies that Field never appears in JSON\n// Field is ignored by this package.\n\nand make this example first or last.\n\nhttp://codereview.appspot.com/4962052/diff/3004/src/pkg/json/encode.go#newcode56\nsrc/pkg/json/encode.go:56: //   // Specifies that Field appears in JSON as key \"myName\" and\ns/Specifies that //\n\nhttp://codereview.appspot.com/4962052/diff/3004/src/pkg/json/encode.go#newcode302\nsrc/pkg/json/encode.go:302: if tv := f.Tag.Get(\"json\"); tv != \"\" {\ntv != \"\" && tv != \"-\"",
			"disapproval": false,
			"date": "2011-09-09 13:08:15.793603",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "PTAL\n\nThat part of decode.go needed reworking to support this, but I think\nit's more efficient now as a result (only one pass over a struct's\nfields instead of up to three).\n",
			"disapproval": false,
			"date": "2011-09-12 22:47:17.924861",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Fri, Sep 9, 2011 at 11:08 PM,  <rsc@golang.org> wrote:\n\n> Missing corresponding condition in decode.go.\n\nI omitted that because it's not obvious what the behaviour should be.\nThe current behaviour seems okay, though. If you're only using this\npackage, it's not necessary to do anything because that field will\nnever appear in the JSON. If that field *does* appear, then it seems\nsensible to read it in, regardless of the tag option.\n\nWould you prefer the other way of throwing away the input data if the\ntag is \"-\"?\n",
			"disapproval": false,
			"date": "2011-09-10 01:58:32.441404",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"adg@golang.org",
				"r@google.com",
				"edsrzf@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I've added a test case to decode_test.go at least. Let me know what you want for decoding.\n\nhttp://codereview.appspot.com/4962052/diff/3004/src/pkg/json/encode.go\nFile src/pkg/json/encode.go (right):\n\nhttp://codereview.appspot.com/4962052/diff/3004/src/pkg/json/encode.go#newcode50\nsrc/pkg/json/encode.go:50: //   // Specifies that Field appears in JSON as key \"myName\"\nOn 2011/09/09 13:08:15, rsc wrote:\n> s/Specifies that //\n\nDone.\n\nhttp://codereview.appspot.com/4962052/diff/3004/src/pkg/json/encode.go#newcode53\nsrc/pkg/json/encode.go:53: //   // Specifies that Field never appears in JSON\nOn 2011/09/09 13:08:15, rsc wrote:\n> // Field is ignored by this package.\n> \n> and make this example first or last.\n\nDone.\n\nhttp://codereview.appspot.com/4962052/diff/3004/src/pkg/json/encode.go#newcode56\nsrc/pkg/json/encode.go:56: //   // Specifies that Field appears in JSON as key \"myName\" and\nOn 2011/09/09 13:08:15, rsc wrote:\n> s/Specifies that //\n\nDone.\n\nhttp://codereview.appspot.com/4962052/diff/3004/src/pkg/json/encode.go#newcode302\nsrc/pkg/json/encode.go:302: if tv := f.Tag.Get(\"json\"); tv != \"\" {\nOn 2011/09/09 13:08:15, rsc wrote:\n> tv != \"\" && tv != \"-\"\n\nThat's not sufficient to prevent the field being written.",
			"disapproval": false,
			"date": "2011-09-10 02:03:36.393873",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"adg@golang.org",
				"r@google.com",
				"edsrzf@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4962052/diff/11002/src/pkg/json/decode_test.go\nFile src/pkg/json/decode_test.go (right):\n\nhttp://codereview.appspot.com/4962052/diff/11002/src/pkg/json/decode_test.go#newcode72\nsrc/pkg/json/decode_test.go:72: // Z has a \"-\" tag, but we accept the data anyway.\nThe behavior I wanted was what I wrote in the comment.\nIf there is a \"-\" tag then the json package should completely\nignore the field, as if it were not there.  Thus decode should\nnot decode into it.",
			"disapproval": false,
			"date": "2011-09-12 18:43:34.338175",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"adg@golang.org",
				"r@google.com",
				"edsrzf@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-09-14 15:40:52.958996",
			"approval": true
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"adg@golang.org",
				"r@google.com",
				"edsrzf@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=57e6b0a67212 ***\n\njson: if a field's tag is \"-\", never encode it.\n\nR=adg, r, edsrzf, rsc, r\nCC=golang-dev\nhttp://codereview.appspot.com/4962052",
			"disapproval": false,
			"date": "2011-09-14 22:09:51.988822",
			"approval": false
		}
	],
	"owner_email": "dsymonds@golang.org",
	"private": false,
	"base_url": "",
	"owner": "dsymonds",
	"subject": "code review 4962052: json: add an \"omit\" option.",
	"created": "2011-09-04 23:44:32.682049",
	"patchsets": [
		1,
		2001,
		3001,
		3004,
		11002,
		18001,
		20001
	],
	"modified": "2011-09-14 22:09:55.495218",
	"closed": true,
	"issue": 4962052
}