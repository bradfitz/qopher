{
	"description": "exp/template/html: autoescape actions in HTML style attributes\n\nThis does not wire up <style> elements as that is pending support\nfor raw text content in CL http://codereview.appspot.com/4964045/\n\nThis CL allows actions to appear in contexts like\n\nselectors:        {{.Tag}}{{.Class}}{{.Id}}\nproperty names:   border-{{.BidiLeadingEdge}}\nproperty values:  color: {{.Color}}\nstrings:          font-family: \"{{font-name}}\"\nURL strings:      background: \"/foo?image={{.ImgQuery}}\"\nURL literals:     background: url(\"{{.Image}}\")\n\nbut disallows actions inside CSS comments and disallows\nembedding of JS in CSS entirely.\n\nIt is based on the CSS3 lexical grammar with affordances for\ncommon browser extensions including line comments.",
	"cc": [
		"nigeltao@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-09-01 23:07:42.072376",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=504f4e9b079c ***\n\nexp/template/html: autoescape actions in HTML style attributes.\n\nThis does not wire up <style> elements as that is pending support\nfor raw text content in CL http://codereview.appspot.com/4964045/\n\nThis CL allows actions to appear in contexts like\n\nselectors:        {{.Tag}}{{.Class}}{{.Id}}\nproperty names:   border-{{.BidiLeadingEdge}}\nproperty values:  color: {{.Color}}\nstrings:          font-family: \"{{font-name}}\"\nURL strings:      background: \"/foo?image={{.ImgQuery}}\"\nURL literals:     background: url(\"{{.Image}}\")\n\nbut disallows actions inside CSS comments and disallows\nembedding of JS in CSS entirely.\n\nIt is based on the CSS3 lexical grammar with affordances for\ncommon browser extensions including line comments.\n\nR=nigeltao\nCC=golang-dev\nhttp://codereview.appspot.com/4968058\n\nCommitter: Nigel Tao <nigeltao@golang.org>",
			"disapproval": false,
			"date": "2011-09-08 21:18:26.609201",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "This is quite a lot of code to digest. I've made mostly superficial comments for now. I'll circle back next week.\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/css.go\nFile src/pkg/exp/template/html/css.go (right):\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/css.go#newcode14\nsrc/pkg/exp/template/html/css.go:14: // endsWithCSSKeyword is true iff b ends with an ident and that ident\nI'd s/is true iff/returns whether/.\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/css.go#newcode37\nsrc/pkg/exp/template/html/css.go:37: func isCSSNmchar(rune int) bool {\nGo has runes and bytes; we don't normally talk of chars.\n\njs.go defines \"func isJSIdentPart\". The two names should be consistent.\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/css.go#newcode41\nsrc/pkg/exp/template/html/css.go:41: switch {\nreturn 'a' <= rune && rune <= 'z' ||\n  'A' <= rune && rune <= 'Z' ||\n  etc\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/css.go#newcode47\nsrc/pkg/exp/template/html/css.go:47: // nonascii\nI'd write this as\n// Non-ASCII cases below.\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/css.go#newcode56\nsrc/pkg/exp/template/html/css.go:56: // decodeCSS decodes CSS3 escapes given a sequence of stringchars.\nWhat's a stringchar?\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/css.go#newcode106\nsrc/pkg/exp/template/html/css.go:106: // isHex returns true iff the given character is a hex digit.\nI'd s/true iff/whether/.\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/css.go#newcode111\nsrc/pkg/exp/template/html/css.go:111: // hexDecode decodes a short hex digit sequence. \"10\" -> 16\nI'd s/./:/ and add a trailing full stop.\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/css.go#newcode232\nsrc/pkg/exp/template/html/css.go:232: var s []byte\nAny reason why s is a []byte and not a string?\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/css.go#newcode247\nsrc/pkg/exp/template/html/css.go:247: s, id := decodeCSS(s), a[:0]\nI think s/a[:0]/make([]byte, 0, 64)/ would be more idiomatic. Escape analysis should mean that the two are equivalent wrt stack vs heap allocations.\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/css.go#newcode262\nsrc/pkg/exp/template/html/css.go:262: case 0, '\"', '\\'', '(', ')', '/', ';', '@', '[', '\\\\', ']',\nI think this would read better without the line break. There is no 80 char limit for code.\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/css.go#newcode264\nsrc/pkg/exp/template/html/css.go:264: return \"ZgotmplZ\"\nIf you're going to keep using \"ZgotmplZ\", it should be a constant somewhere (probably escape.go):\n\n// placeholder is blah blah blah.\nconst placeholder = \"ZgotmplZ\"\n\nThere's probably a better name than \"placeholder\".\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/escape.go\nFile src/pkg/exp/template/html/escape.go (right):\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/escape.go#newcode36\nsrc/pkg/exp/template/html/escape.go:36: \"exp_template_html_nospaceescaper\":  htmlNospaceEscaper,\nYou might as well keep this list sorted alphabetically.\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/escape.go#newcode113\nsrc/pkg/exp/template/html/escape.go:113: case delimNone:\nI like to put an explicit \"// No-op.\" comment (on its on line) for no-op cases. I think it's less likely to be confusing for somebody used to C/C++'s switch semantics.\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/html.go\nFile src/pkg/exp/template/html/html.go (right):\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/html.go#newcode15\nsrc/pkg/exp/template/html/html.go:15: ok := false\nIt's probably worth extracting a function for lines 15-22.\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/html.go#newcode86\nsrc/pkg/exp/template/html/html.go:86: b.WriteString(\"&#x\")\nfmt.Fprintf(b, \"&#x%04x;\", r)\n\nSimilarly in url.go.\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/url.go\nFile src/pkg/exp/template/html/url.go (right):\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/url.go#newcode81\nsrc/pkg/exp/template/html/url.go:81: case '!', '#', '$', '&', '*', '+', ',', '/', ':', ';', '=',\nI think this would read better without the line break. There is no 80 char limit for code.\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/url.go#newcode116\nsrc/pkg/exp/template/html/url.go:116: if b.Len() == 0 {\n\"if written == 0 {\".",
			"disapproval": false,
			"date": "2011-09-02 09:11:37.543606",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Incremental diffs at http://codereview.appspot.com/4968058/diff2/21001:10004/src/pkg/exp/template/html/css.go\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/css.go\nFile src/pkg/exp/template/html/css.go (right):\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/css.go#newcode14\nsrc/pkg/exp/template/html/css.go:14: // endsWithCSSKeyword is true iff b ends with an ident and that ident\nOn 2011/09/02 09:11:37, nigeltao wrote:\n> I'd s/is true iff/returns whether/.\n\nDone.\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/css.go#newcode37\nsrc/pkg/exp/template/html/css.go:37: func isCSSNmchar(rune int) bool {\nOn 2011/09/02 09:11:37, nigeltao wrote:\n> Go has runes and bytes; we don't normally talk of chars.\n> \n> js.go defines \"func isJSIdentPart\". The two names should be consistent.\n\n\"nmchar\" is the name of a grammar production in the CSS3 spec.  \"IdentifierPart\" is the name of a grammar production in the EscmaScript spec.\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/css.go#newcode41\nsrc/pkg/exp/template/html/css.go:41: switch {\nOn 2011/09/02 09:11:37, nigeltao wrote:\n> return 'a' <= rune && rune <= 'z' ||\n>   'A' <= rune && rune <= 'Z' ||\n>   etc\n\nDone.\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/css.go#newcode47\nsrc/pkg/exp/template/html/css.go:47: // nonascii\nOn 2011/09/02 09:11:37, nigeltao wrote:\n> I'd write this as\n> // Non-ASCII cases below.\n\nDone.\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/css.go#newcode56\nsrc/pkg/exp/template/html/css.go:56: // decodeCSS decodes CSS3 escapes given a sequence of stringchars.\nOn 2011/09/02 09:11:37, nigeltao wrote:\n> What's a stringchar?\n\nhttp://www.w3.org/TR/css3-syntax/#SUBTOK-stringchar\n\nstringchar ::= urlchar | #x20 | '\\' nl\nurlchar ::= [#x9#x21#x23-#x26#x27-#x7E] | nonascii | escape\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/css.go#newcode106\nsrc/pkg/exp/template/html/css.go:106: // isHex returns true iff the given character is a hex digit.\nOn 2011/09/02 09:11:37, nigeltao wrote:\n> I'd s/true iff/whether/.\n\nDone.\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/css.go#newcode111\nsrc/pkg/exp/template/html/css.go:111: // hexDecode decodes a short hex digit sequence. \"10\" -> 16\nOn 2011/09/02 09:11:37, nigeltao wrote:\n> I'd s/./:/ and add a trailing full stop.\n\nDone.\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/css.go#newcode232\nsrc/pkg/exp/template/html/css.go:232: var s []byte\nOn 2011/09/02 09:11:37, nigeltao wrote:\n> Any reason why s is a []byte and not a string?\n\nNo real reason.  The decodeCSS call at 247 works on a []byte.  Changed to use the common coerce function.\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/css.go#newcode247\nsrc/pkg/exp/template/html/css.go:247: s, id := decodeCSS(s), a[:0]\nOn 2011/09/02 09:11:37, nigeltao wrote:\n> I think s/a[:0]/make([]byte, 0, 64)/ would be more idiomatic. Escape analysis\n> should mean that the two are equivalent wrt stack vs heap allocations.\n\nDone.\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/css.go#newcode262\nsrc/pkg/exp/template/html/css.go:262: case 0, '\"', '\\'', '(', ')', '/', ';', '@', '[', '\\\\', ']',\nOn 2011/09/02 09:11:37, nigeltao wrote:\n> I think this would read better without the line break. There is no 80 char limit\n> for code.\n\nDone.\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/css.go#newcode264\nsrc/pkg/exp/template/html/css.go:264: return \"ZgotmplZ\"\nOn 2011/09/02 09:11:37, nigeltao wrote:\n> If you're going to keep using \"ZgotmplZ\", it should be a constant somewhere\n> (probably escape.go):\n> \n> // placeholder is blah blah blah.\n> const placeholder = \"ZgotmplZ\"\n> \n> There's probably a better name than \"placeholder\".\n\nCalled it filterFailsafe\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/escape.go\nFile src/pkg/exp/template/html/escape.go (right):\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/escape.go#newcode36\nsrc/pkg/exp/template/html/escape.go:36: \"exp_template_html_nospaceescaper\":  htmlNospaceEscaper,\nOn 2011/09/02 09:11:37, nigeltao wrote:\n> You might as well keep this list sorted alphabetically.\n\nDone.\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/escape.go#newcode113\nsrc/pkg/exp/template/html/escape.go:113: case delimNone:\nOn 2011/09/02 09:11:37, nigeltao wrote:\n> I like to put an explicit \"// No-op.\" comment (on its on line) for no-op cases.\n> I think it's less likely to be confusing for somebody used to C/C++'s switch\n> semantics.\n\n// No extra-escaping needed for raw text content\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/html.go\nFile src/pkg/exp/template/html/html.go (right):\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/html.go#newcode15\nsrc/pkg/exp/template/html/html.go:15: ok := false\nOn 2011/09/02 09:11:37, nigeltao wrote:\n> It's probably worth extracting a function for lines 15-22.\n\nI put the below in escape.go and used it in 8 places.\n\n// coerceEscaperInput takes varargs inputs and coerces them to a single string.\nfunc coerceEscaperInput(args ...interface{}) string {\n\tif len(args) == 1 {\n\t\tif s, ok := args[0].(string); ok {\n\t\t\treturn s\n\t\t}\n\t}\n\treturn fmt.Sprint(args...)\n}\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/html.go#newcode86\nsrc/pkg/exp/template/html/html.go:86: b.WriteString(\"&#x\")\nOn 2011/09/02 09:11:37, nigeltao wrote:\n> fmt.Fprintf(b, \"&#x%04x;\", r)\n> \n> Similarly in url.go.\n\nDone.\n\nI saw the below in template/funcs.go\n\n    // TODO(dsymonds): Do this without fmt?\n    fmt.Fprintf(w, \"\\\\u%04X\", rune)\n\nand thought that format strings were frowned upon for this sort of thing.\n\nChanging urlProcessor to use \n    fmt.Fprintf(&b, \"%%%02x\", c)\ninstead of\n    b.WriteByte('%')\n    b.WriteByte(\"0123456789abcdef\"[c>>4])\n    b.WriteByte(\"0123456789abcdef\"[c&0xf])\ncauses the benchmarks to take treble the time.\n\nhtml.BenchmarkURLEscaper          200000              8377 ns/op\nhtml.BenchmarkURLNormalizer       500000              6453 ns/op\n\nvs\n\nhtml.BenchmarkURLEscaper         1000000              2553 ns/op\nhtml.BenchmarkURLNormalizer      1000000              1852 ns/op\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/url.go\nFile src/pkg/exp/template/html/url.go (right):\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/url.go#newcode81\nsrc/pkg/exp/template/html/url.go:81: case '!', '#', '$', '&', '*', '+', ',', '/', ':', ';', '=',\nOn 2011/09/02 09:11:37, nigeltao wrote:\n> I think this would read better without the line break. There is no 80 char limit\n> for code.\n\nDone.\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/url.go#newcode116\nsrc/pkg/exp/template/html/url.go:116: if b.Len() == 0 {\nOn 2011/09/02 09:11:37, nigeltao wrote:\n> \"if written == 0 {\".\n\nDone.",
			"disapproval": false,
			"date": "2011-09-02 17:07:43.718232",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/css.go\nFile src/pkg/exp/template/html/css.go (right):\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/css.go#newcode56\nsrc/pkg/exp/template/html/css.go:56: // decodeCSS decodes CSS3 escapes given a sequence of stringchars.\nOn 2011/09/06 01:54:08, nigeltao wrote:\n> On 2011/09/02 17:07:43, MikeSamuel wrote:\n> > On 2011/09/02 09:11:37, nigeltao wrote:\n> > > What's a stringchar?\n> > \n> > http://www.w3.org/TR/css3-syntax/#SUBTOK-stringchar\n> \n> Can you incorporate that link into the doc comment? Future maintainers might\n> also not know what a stringchar is.\n\nDone.\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/html.go\nFile src/pkg/exp/template/html/html.go (right):\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/html.go#newcode86\nsrc/pkg/exp/template/html/html.go:86: b.WriteString(\"&#x\")\nOn 2011/09/06 01:54:08, nigeltao wrote:\n> On 2011/09/02 17:07:43, MikeSamuel wrote:\n> > On 2011/09/02 09:11:37, nigeltao wrote:\n> > > fmt.Fprintf(b, \"&#x%04x;\", r)\n> > > \n> > > Similarly in url.go.\n> > \n> > Done.\n> > \n> > I saw the below in template/funcs.go\n> > \n> >     // TODO(dsymonds): Do this without fmt?\n> >     fmt.Fprintf(w, \"\\\\u%04X\", rune)\n> > \n> > and thought that format strings were frowned upon for this sort of thing.\n> > \n> > Changing urlProcessor to use \n> >     fmt.Fprintf(&b, \"%%%02x\", c)\n> > instead of\n> >     b.WriteByte('%')\n> >     b.WriteByte(\"0123456789abcdef\"[c>>4])\n> >     b.WriteByte(\"0123456789abcdef\"[c&0xf])\n> > causes the benchmarks to take treble the time.\n> > \n> > html.BenchmarkURLEscaper          200000              8377 ns/op\n> > html.BenchmarkURLNormalizer       500000              6453 ns/op\n> > \n> > vs\n> > \n> > html.BenchmarkURLEscaper         1000000              2553 ns/op\n> > html.BenchmarkURLNormalizer      1000000              1852 ns/op\n> \n> Since the benchmarks show 3x, I'm happy to go back to what you had before.\n\nDone.\n\nhttp://codereview.appspot.com/4968058/diff/8003/src/pkg/exp/template/html/css.go\nFile src/pkg/exp/template/html/css.go (right):\n\nhttp://codereview.appspot.com/4968058/diff/8003/src/pkg/exp/template/html/css.go#newcode33\nsrc/pkg/exp/template/html/css.go:33: return bytes.HasSuffix(bytes.ToLower(b[len(b)-len(kw):]), kw)\nOn 2011/09/06 01:54:08, nigeltao wrote:\n> Can you use bytes.Equal instead of bytes.HasSuffix?\n> \n> Also, it might read better if you take the \"b[len(b)-len(kw):]\" out of here and\n> put\n> b = b[len(b)-len(kw):]\n> inside the if block above? It might help to start the function with:\n> i := len(b) - len(kw)\n> \n> Finally, if kw is going to be constant (and not untrusted input), it might be\n> more appropriate for kw to be a string instead of a []byte. The final line could\n> be:\n> return string(bytes.ToLower(b)) == kw\n> \n> The compiler might not currently optimize away the []byte to string conversion,\n> but it should be able to.\n\nDone.\n\nhttp://codereview.appspot.com/4968058/diff/8003/src/pkg/exp/template/html/css.go#newcode69\nsrc/pkg/exp/template/html/css.go:69: copy(b[len(b):len(b)+i], s[:i])\nOn 2011/09/06 01:54:08, nigeltao wrote:\n> This could be:\n> b, s = append(b, s[:i]...), s[i:]\n\nDone.\n\nhttp://codereview.appspot.com/4968058/diff/8003/src/pkg/exp/template/html/css.go#newcode95\nsrc/pkg/exp/template/html/css.go:95: copy(b[len(b):len(b)+n], s[1:])\nOn 2011/09/06 01:54:08, nigeltao wrote:\n> This could be:\n> b, s = append(b, s[1:1+n]...), s[1+n:]\n\nDone.\n\nhttp://codereview.appspot.com/4968058/diff/8003/src/pkg/exp/template/html/css.go#newcode113\nsrc/pkg/exp/template/html/css.go:113: n = (n << 4) | (int(c - '0'))\nOn 2011/09/06 01:54:08, nigeltao wrote:\n> If you lifted the \"n <<= 4\" outside the switch, these could be written with\n> fewer parens:\n> n |= int(c) - '0'\n\nDone.\n\nhttp://codereview.appspot.com/4968058/diff/8003/src/pkg/exp/template/html/css.go#newcode244\nsrc/pkg/exp/template/html/css.go:244: if c < 0x80 && isCSSNmchar(int(c)) {\nOn 2011/09/06 01:54:08, nigeltao wrote:\n> Is the c < 0x80 guard because CSS is limited to ASCII only or is it because you\n> are iterating over bytes instead of runes?\n\nNormally I'd never blacklist, but browser vendors have largely agreed that JavaScript in CSS was a horribly bad idea and have moved away from allowing that.  IE 7 was the last to allow expression(...) so this is only to guard against JS in CSS on older but still widespread browsers.\n\nThe loop is over runes.\nI'm trying to prevent any mechanisms for embedding non-standard syntactic constructs to break a keyword..  All CSS keywords are ASCII only so I'm collecting only ASCII nmchars because I don't trust browsers not to ignore combining marks, bidi-embeddings, and non-standard syntactic constructs.\n\nhttp://codereview.appspot.com/4968058/diff/8003/src/pkg/exp/template/html/css_test.go\nFile src/pkg/exp/template/html/css_test.go (right):\n\nhttp://codereview.appspot.com/4968058/diff/8003/src/pkg/exp/template/html/css_test.go#newcode76\nsrc/pkg/exp/template/html/css_test.go:76: {`\\`, ``},\nOn 2011/09/06 01:54:08, nigeltao wrote:\n> Can you add a test case for `foo\\`?\n\nDone.\n\nhttp://codereview.appspot.com/4968058/diff/8003/src/pkg/exp/template/html/css_test.go#newcode94\nsrc/pkg/exp/template/html/css_test.go:94: {`The \\3c i\\3equick\\3c/i\\3e,\\d\\A\\3cspan style=\\27 color:brown\\27\\3e brown\\3c/span\\3e  fox jumps\\2028over the \\3c canine class=\\22lazy\\22 \\3e dog\\3c/canine\\3e`,\nOn 2011/09/06 01:54:08, nigeltao wrote:\n> Since this struct literal spans multiple lines, I'd format it as:\n> {\n>     `The \\3c etc`,\n>     \"The <i> etc\",\n> },\n\nDone.\n\nhttp://codereview.appspot.com/4968058/diff/8003/src/pkg/exp/template/html/css_test.go#newcode166\nsrc/pkg/exp/template/html/css_test.go:166: \nOn 2011/09/06 01:54:08, nigeltao wrote:\n> I'd nix the blank line.\n\nDone.\n\nhttp://codereview.appspot.com/4968058/diff/8003/src/pkg/exp/template/html/escape.go\nFile src/pkg/exp/template/html/escape.go (right):\n\nhttp://codereview.appspot.com/4968058/diff/8003/src/pkg/exp/template/html/escape.go#newcode78\nsrc/pkg/exp/template/html/escape.go:78: case stateURL, stateCSSDqStr, stateCSSSqStr,\nOn 2011/09/06 01:54:08, nigeltao wrote:\n> I think it'd be clearer if the case was all on one line.\n\nDone.\n\nhttp://codereview.appspot.com/4968058/diff/8003/src/pkg/exp/template/html/escape.go#newcode608\nsrc/pkg/exp/template/html/escape.go:608: \nOn 2011/09/06 01:54:08, nigeltao wrote:\n> As these three sections make one big comment, I'd make this line a \"\\t//\"\n> instead of a blank line, and similarly at line 611.\n\nDone.\n\nhttp://codereview.appspot.com/4968058/diff/8003/src/pkg/exp/template/html/html_test.go\nFile src/pkg/exp/template/html/html_test.go (right):\n\nhttp://codereview.appspot.com/4968058/diff/8003/src/pkg/exp/template/html/html_test.go#newcode37\nsrc/pkg/exp/template/html/html_test.go:37: \nOn 2011/09/06 01:54:08, nigeltao wrote:\n> I'd nix the blank line.\n\nDone.\n\nhttp://codereview.appspot.com/4968058/diff/8003/src/pkg/exp/template/html/url_test.go\nFile src/pkg/exp/template/html/url_test.go (right):\n\nhttp://codereview.appspot.com/4968058/diff/8003/src/pkg/exp/template/html/url_test.go#newcode84\nsrc/pkg/exp/template/html/url_test.go:84: t.Errorf(\"%s once: want\\n\\t%q\\ngot\\n\\t%q\", test.name, test.escaped, s)\nOn 2011/09/06 01:54:08, nigeltao wrote:\n> Drop the \"once\"?\n\nDone.",
			"disapproval": false,
			"date": "2011-09-06 04:28:16.047769",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM.\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/css.go\nFile src/pkg/exp/template/html/css.go (right):\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/css.go#newcode56\nsrc/pkg/exp/template/html/css.go:56: // decodeCSS decodes CSS3 escapes given a sequence of stringchars.\nOn 2011/09/02 17:07:43, MikeSamuel wrote:\n> On 2011/09/02 09:11:37, nigeltao wrote:\n> > What's a stringchar?\n> \n> http://www.w3.org/TR/css3-syntax/#SUBTOK-stringchar\n\nCan you incorporate that link into the doc comment? Future maintainers might also not know what a stringchar is.\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/html.go\nFile src/pkg/exp/template/html/html.go (right):\n\nhttp://codereview.appspot.com/4968058/diff/21001/src/pkg/exp/template/html/html.go#newcode86\nsrc/pkg/exp/template/html/html.go:86: b.WriteString(\"&#x\")\nOn 2011/09/02 17:07:43, MikeSamuel wrote:\n> On 2011/09/02 09:11:37, nigeltao wrote:\n> > fmt.Fprintf(b, \"&#x%04x;\", r)\n> > \n> > Similarly in url.go.\n> \n> Done.\n> \n> I saw the below in template/funcs.go\n> \n>     // TODO(dsymonds): Do this without fmt?\n>     fmt.Fprintf(w, \"\\\\u%04X\", rune)\n> \n> and thought that format strings were frowned upon for this sort of thing.\n> \n> Changing urlProcessor to use \n>     fmt.Fprintf(&b, \"%%%02x\", c)\n> instead of\n>     b.WriteByte('%')\n>     b.WriteByte(\"0123456789abcdef\"[c>>4])\n>     b.WriteByte(\"0123456789abcdef\"[c&0xf])\n> causes the benchmarks to take treble the time.\n> \n> html.BenchmarkURLEscaper          200000              8377 ns/op\n> html.BenchmarkURLNormalizer       500000              6453 ns/op\n> \n> vs\n> \n> html.BenchmarkURLEscaper         1000000              2553 ns/op\n> html.BenchmarkURLNormalizer      1000000              1852 ns/op\n\nSince the benchmarks show 3x, I'm happy to go back to what you had before.\n\nhttp://codereview.appspot.com/4968058/diff/8003/src/pkg/exp/template/html/css.go\nFile src/pkg/exp/template/html/css.go (right):\n\nhttp://codereview.appspot.com/4968058/diff/8003/src/pkg/exp/template/html/css.go#newcode33\nsrc/pkg/exp/template/html/css.go:33: return bytes.HasSuffix(bytes.ToLower(b[len(b)-len(kw):]), kw)\nCan you use bytes.Equal instead of bytes.HasSuffix?\n\nAlso, it might read better if you take the \"b[len(b)-len(kw):]\" out of here and put\nb = b[len(b)-len(kw):]\ninside the if block above? It might help to start the function with:\ni := len(b) - len(kw)\n\nFinally, if kw is going to be constant (and not untrusted input), it might be more appropriate for kw to be a string instead of a []byte. The final line could be:\nreturn string(bytes.ToLower(b)) == kw\n\nThe compiler might not currently optimize away the []byte to string conversion, but it should be able to.\n\nhttp://codereview.appspot.com/4968058/diff/8003/src/pkg/exp/template/html/css.go#newcode69\nsrc/pkg/exp/template/html/css.go:69: copy(b[len(b):len(b)+i], s[:i])\nThis could be:\nb, s = append(b, s[:i]...), s[i:]\n\nhttp://codereview.appspot.com/4968058/diff/8003/src/pkg/exp/template/html/css.go#newcode95\nsrc/pkg/exp/template/html/css.go:95: copy(b[len(b):len(b)+n], s[1:])\nThis could be:\nb, s = append(b, s[1:1+n]...), s[1+n:]\n\nhttp://codereview.appspot.com/4968058/diff/8003/src/pkg/exp/template/html/css.go#newcode113\nsrc/pkg/exp/template/html/css.go:113: n = (n << 4) | (int(c - '0'))\nIf you lifted the \"n <<= 4\" outside the switch, these could be written with fewer parens:\nn |= int(c) - '0'\n\nhttp://codereview.appspot.com/4968058/diff/8003/src/pkg/exp/template/html/css.go#newcode244\nsrc/pkg/exp/template/html/css.go:244: if c < 0x80 && isCSSNmchar(int(c)) {\nIs the c < 0x80 guard because CSS is limited to ASCII only or is it because you are iterating over bytes instead of runes?\n\nhttp://codereview.appspot.com/4968058/diff/8003/src/pkg/exp/template/html/css_test.go\nFile src/pkg/exp/template/html/css_test.go (right):\n\nhttp://codereview.appspot.com/4968058/diff/8003/src/pkg/exp/template/html/css_test.go#newcode76\nsrc/pkg/exp/template/html/css_test.go:76: {`\\`, ``},\nCan you add a test case for `foo\\`?\n\nhttp://codereview.appspot.com/4968058/diff/8003/src/pkg/exp/template/html/css_test.go#newcode94\nsrc/pkg/exp/template/html/css_test.go:94: {`The \\3c i\\3equick\\3c/i\\3e,\\d\\A\\3cspan style=\\27 color:brown\\27\\3e brown\\3c/span\\3e  fox jumps\\2028over the \\3c canine class=\\22lazy\\22 \\3e dog\\3c/canine\\3e`,\nSince this struct literal spans multiple lines, I'd format it as:\n{\n    `The \\3c etc`,\n    \"The <i> etc\",\n},\n\nhttp://codereview.appspot.com/4968058/diff/8003/src/pkg/exp/template/html/css_test.go#newcode166\nsrc/pkg/exp/template/html/css_test.go:166: \nI'd nix the blank line.\n\nhttp://codereview.appspot.com/4968058/diff/8003/src/pkg/exp/template/html/escape.go\nFile src/pkg/exp/template/html/escape.go (right):\n\nhttp://codereview.appspot.com/4968058/diff/8003/src/pkg/exp/template/html/escape.go#newcode78\nsrc/pkg/exp/template/html/escape.go:78: case stateURL, stateCSSDqStr, stateCSSSqStr,\nI think it'd be clearer if the case was all on one line.\n\nhttp://codereview.appspot.com/4968058/diff/8003/src/pkg/exp/template/html/escape.go#newcode608\nsrc/pkg/exp/template/html/escape.go:608: \nAs these three sections make one big comment, I'd make this line a \"\\t//\" instead of a blank line, and similarly at line 611.\n\nhttp://codereview.appspot.com/4968058/diff/8003/src/pkg/exp/template/html/html_test.go\nFile src/pkg/exp/template/html/html_test.go (right):\n\nhttp://codereview.appspot.com/4968058/diff/8003/src/pkg/exp/template/html/html_test.go#newcode37\nsrc/pkg/exp/template/html/html_test.go:37: \nI'd nix the blank line.\n\nhttp://codereview.appspot.com/4968058/diff/8003/src/pkg/exp/template/html/url_test.go\nFile src/pkg/exp/template/html/url_test.go (right):\n\nhttp://codereview.appspot.com/4968058/diff/8003/src/pkg/exp/template/html/url_test.go#newcode84\nsrc/pkg/exp/template/html/url_test.go:84: t.Errorf(\"%s once: want\\n\\t%q\\ngot\\n\\t%q\", test.name, test.escaped, s)\nDrop the \"once\"?",
			"disapproval": false,
			"date": "2011-09-06 01:54:08.629968",
			"approval": true
		}
	],
	"owner_email": "mikesamuel@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "MikeSamuel",
	"subject": "code review 4968058: exp/template/html: autoescape actions in HTML style att...",
	"created": "2011-09-01 19:58:55.396704",
	"patchsets": [
		1,
		1001,
		3001,
		5001,
		8002,
		1003,
		17021,
		14003,
		21001,
		7032,
		10004,
		8003,
		22002,
		7043
	],
	"modified": "2011-09-08 21:27:15.876155",
	"closed": true,
	"issue": 4968058
}