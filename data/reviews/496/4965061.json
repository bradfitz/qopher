{
	"description": "gobuilder: timeout support, for flaky/hangy builders\n\nThe Windows builder likes to hang or spin.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rsc@golang.org",
		"alex.brainman@gmail.com",
		"adg@golang.org",
		"jdpoirier@gmail.com",
		"go.peter.90@gmail.com",
		"Mike.Rosset@gmail.com"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Sep 1, 2011 at 20:05,  <adg@golang.org> wrote:\n> Does this actually work?\n\nUnlikely.  Kill is just a 'kill -9'.  What you want for\nUnix is more like sending SIGTERM to the entire\nprocess group / session / whatever they're called.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-09-02 15:32:52.183987",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4965061/diff/8001/misc/dashboard/builder/main.go\nFile misc/dashboard/builder/main.go (right):\n\nhttp://codereview.appspot.com/4965061/diff/8001/misc/dashboard/builder/main.go#newcode310\nmisc/dashboard/builder/main.go:310: proc.Kill()\nDoes this actually work?\n\nWhen I played with this before, proc.Kill would kill all.bash but not its child processes. That's kinda the point when you're trying to stop a spinning test, for example.",
			"disapproval": false,
			"date": "2011-09-02 00:05:21.708479",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Fri, Sep 2, 2011 at 12:20 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n>\n>\n> On Thu, Sep 1, 2011 at 10:16 PM, Joseph Poirier <jdpoirier@gmail.com> wrote:\n>>\n>> On Fri, Sep 2, 2011 at 12:11 AM, Brad Fitzpatrick <bradfitz@golang.org>\n>> wrote:\n>> > 3.81\n>> > On Thu, Sep 1, 2011 at 9:50 PM, <go.peter.90@gmail.com> wrote:\n>> >>\n>> >> Brad,\n>> >>\n>> >> What version of make are you using? I never have this problem. I use\n>> >> make version 3.82-5.\n>> >>\n>> >> $ make -v\n>> >> GNU Make 3.82\n>> >> Built for i386-pc-mingw32\n>> >> Copyright (C) 2010 \u00a0Free Software Foundation, Inc.\n>> >> License GPLv3+: GNU GPL version 3 or later\n>> >> <http://gnu.org/licenses/gpl.html>\n>> >> This is free software: you are free to change and redistribute it.\n>> >> There is NO WARRANTY, to the extent permitted by law.\n>> >>\n>> >> Peter\n>> >>\n>> >> http://codereview.appspot.com/4965061/\n>> >\n>> >\n>>\n>> Keep in mind that msys' modified version of make\n>> (path magic) is recommended if you're using an msys shell\n>> and/or environment; mingw's make != msys' make.\n>\n> If it's recommended, why is whatever version I have (presumably the\n> default--- I followed the wiki instructions) wrong?\n> I don't know what \"path magic\" is. \u00a0Is that what makes it hang?\n>\n\nmsys is a separate package from mingw and they each have a bin\nfolder where they their respective executables live. mingw/bin is\nwhere the compiler tools live along with a plain vanilla make. The\nmsys bin folder contains a bunch of ported unix tools. Some of the\nmsys unix tools tools have been specifically modified to do\nwindows<->unix path conversions (path magic) under the hood.\n",
			"disapproval": false,
			"date": "2011-09-02 05:36:36.702212",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "3.81\n\nOn Thu, Sep 1, 2011 at 9:50 PM, <go.peter.90@gmail.com> wrote:\n\n> Brad,\n>\n> What version of make are you using? I never have this problem. I use\n> make version 3.82-5.\n>\n> $ make -v\n> GNU Make 3.82\n> Built for i386-pc-mingw32\n> Copyright (C) 2010  Free Software Foundation, Inc.\n> License GPLv3+: GNU GPL version 3 or later\n> <http://gnu.org/licenses/gpl.**html <http://gnu.org/licenses/gpl.html>>\n> This is free software: you are free to change and redistribute it.\n> There is NO WARRANTY, to the extent permitted by law.\n>\n> Peter\n>\n>\n> http://codereview.appspot.com/**4965061/<http://codereview.appspot.com/4965061/>\n>\n",
			"disapproval": false,
			"date": "2011-09-02 05:11:35.262985",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Ignore the failures on the public dashboard here:\n\nhttp://godashboard.appspot.com/\n\n(linux-amd64-alt)\n\nThat was my testing this CL with a 5 second timeout (so it'd intentionally\nfail).  I didn't realize they'd be published there.\n\nWhich leads to next question:  should timeouts count as failures?  Or should\nthey be retried once first?\n\n\nOn Thu, Sep 1, 2011 at 3:13 PM, <bradfitz@golang.org> wrote:\n\n> Reviewers: rsc,\n>\n> Message:\n> Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> gobuilder: timeout support, for flaky/hangy builders\n>\n> The Windows builder likes to hang or spin.\n>\n> Please review this at http://codereview.appspot.com/**4965061/<http://codereview.appspot.com/4965061/>\n>\n> Affected files:\n>  M misc/dashboard/builder/exec.go\n>  M misc/dashboard/builder/main.go\n>\n>\n> Index: misc/dashboard/builder/exec.go\n> ==============================**==============================**=======\n> --- a/misc/dashboard/builder/exec.**go\n> +++ b/misc/dashboard/builder/exec.**go\n> @@ -32,6 +32,23 @@\n>  // The error returned is nil, if process is started successfully,\n>  // even if exit status is not 0.\n>  func runLog(envv []string, logfile, dir string, argv ...string) (string,\n> int, os.Error) {\n> +       return runLogArgs{envv: envv, logfile: logfile, dir:\n> dir}.run(argv...)\n> +}\n> +\n> +// runLogArgs is like exec.Command, but with a few more\n> +// gobuilder-specific fields, like logfile and procc.\n> +type runLogArgs struct {\n> +       envv []string // optional environment\n> +       dir  string   // optional directory to run in\n> +\n> +       logfile string           // optional filename to write logs to\n> +       procc   chan *os.Process // optional chan to send process once\n> started, before finished\n> +}\n> +\n> +func (ra runLogArgs) run(argv ...string) (string, int, os.Error) {\n> +       if ra.procc != nil {\n> +               defer close(ra.procc)\n> +       }\n>        if *verbose {\n>                log.Println(\"runLog\", argv)\n>        }\n> @@ -39,8 +56,8 @@\n>\n>        b := new(bytes.Buffer)\n>        var w io.Writer = b\n> -       if logfile != \"\" {\n> -               f, err := os.OpenFile(logfile,\n> os.O_WRONLY|os.O_CREATE|os.O_**APPEND, 0666)\n> +       if ra.logfile != \"\" {\n> +               f, err := os.OpenFile(ra.logfile,\n> os.O_WRONLY|os.O_CREATE|os.O_**APPEND, 0666)\n>                if err != nil {\n>                        return \"\", 0, err\n>                }\n> @@ -49,12 +66,16 @@\n>        }\n>\n>        cmd := exec.Command(argv[0], argv[1:]...)\n> -       cmd.Dir = dir\n> -       cmd.Env = envv\n> +       cmd.Dir = ra.dir\n> +       cmd.Env = ra.envv\n>        cmd.Stdout = w\n>        cmd.Stderr = w\n>\n> -       err := cmd.Run()\n> +       err := cmd.Start()\n> +       if err == nil && ra.procc != nil {\n> +               ra.procc <- cmd.Process\n> +       }\n> +       err = cmd.Wait()\n>        if err != nil {\n>                if ws, ok := err.(*os.Waitmsg); ok {\n>                        return b.String(), ws.ExitStatus(), nil\n> Index: misc/dashboard/builder/main.go\n> ==============================**==============================**=======\n> --- a/misc/dashboard/builder/main.**go\n> +++ b/misc/dashboard/builder/main.**go\n> @@ -54,6 +54,7 @@\n>        buildRelease  = flag.Bool(\"release\", false, \"Build and upload binary\n> release archives\")\n>        buildRevision = flag.String(\"rev\", \"\", \"Build specified revision and\n> exit\")\n>        buildCmd      = flag.String(\"cmd\", \"./all.bash\", \"Build command\n> (specify absolute or relative to go/src/)\")\n> +       buildTimeout  = flag.Int(\"timeout\", 0, \"Optional build timeout, in\n> seconds\")\n>        external      = flag.Bool(\"external\", false, \"Build external\n> packages\")\n>        parallel      = flag.Bool(\"parallel\", false, \"Build multiple targets\n> in parallel\")\n>        verbose       = flag.Bool(\"v\", false, \"verbose\")\n> @@ -292,8 +293,31 @@\n>        srcDir := path.Join(workpath, \"go\", \"src\")\n>\n>        // build\n> +       var procc chan *os.Process\n> +       donec := make(chan bool, 1)\n> +       if *buildTimeout != 0 {\n> +               procc = make(chan *os.Process)\n> +               go func() {\n> +                       proc, ok := <-procc\n> +                       if !ok {\n> +                               return\n> +                       }\n> +                       select {\n> +                       case <-donec:\n> +                               return\n> +                       case <-time.After(int64(***buildTimeout) * 1e9):\n> +                               proc.Kill()\n> +                       }\n> +               }()\n> +       }\n>        logfile := path.Join(workpath, \"build.log\")\n> -       buildLog, status, err := runLog(b.envv(), logfile, srcDir,\n> *buildCmd)\n> +       buildLog, status, err := runLogArgs{\n> +               envv:    b.envv(),\n> +               logfile: logfile,\n> +               dir:     srcDir,\n> +               procc:   procc,\n> +       }.run(*buildCmd)\n> +       donec <- true\n>        if err != nil {\n>                return fmt.Errorf(\"%s: %s\", *buildCmd, err)\n>        }\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-09-01 22:31:07.915539",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"adg@golang.org",
				"jdpoirier@gmail.com",
				"go.peter.90@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Brad,\n\nCopy the following three files from your C:\\MinGW\\bin directory to your C:\\MinGW\\msys\\1.0\\bin directory:\n\nmingw32-make.exe\nlibiconv-2.dll\nlibintl-8.dll\n\nIn your C:\\MinGW\\msys\\1.0\\bin directory, rename make.exe to msys-make.exe to save it. Rename mingw32-make.exe to make.exe to replace the msys version. Run make -v. You should see:\n\n$ make -v\nGNU Make 3.82\nBuilt for i386-pc-mingw32\nCopyright (C) 2010  Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nPeter\n\nOn 2011/09/02 05:11:35, bradfitz wrote:\n> 3.81\n> \n> On Thu, Sep 1, 2011 at 9:50 PM, <mailto:go.peter.90@gmail.com> wrote:\n> \n> > Brad,\n> >\n> > What version of make are you using? I never have this problem. I use\n> > make version 3.82-5.\n> >\n> > $ make -v\n> > GNU Make 3.82\n> > Built for i386-pc-mingw32\n> > Copyright (C) 2010  Free Software Foundation, Inc.\n> > License GPLv3+: GNU GPL version 3 or later\n> > <http://gnu.org/licenses/gpl.**html <http://gnu.org/licenses/gpl.html>>\n> > This is free software: you are free to change and redistribute it.\n> > There is NO WARRANTY, to the extent permitted by law.\n> >\n> > Peter\n> >\n> >\n> >\n> http://codereview.appspot.com/**4965061/%3Chttp://codereview.appspot.com/4965061/>",
			"disapproval": false,
			"date": "2011-09-02 05:33:04.851660",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"adg@golang.org",
				"jdpoirier@gmail.com",
				"go.peter.90@gmail.com",
				"Mike.Rosset@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Mike,\n\nI've read the manuals.\n\nThe objective is to do a stress test. Setting n for the -j flag to the number of CPU cores doesn't do that; there's I/O to consider. Setting it to -j does.\n\nPeter\n\nOn 2011/09/03 02:35:42, Mike.Rosset wrote:\n> > I run with MAKEFLAGS=\"-j\". Why don't you?\n> \n> If the -j option is given without an argument, make will not limit the number of\n> jobs that can run simultaneously. (taken from gnu manual)\n> \n> this may work in some situations but generally people are more explicit about\n> how many parallel makes they use. generally CPU or CORES",
			"disapproval": false,
			"date": "2011-09-03 03:05:30.211317",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-09-01 22:13:27.411739",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4965061/diff/8001/misc/dashboard/builder/main.go\nFile misc/dashboard/builder/main.go (right):\n\nhttp://codereview.appspot.com/4965061/diff/8001/misc/dashboard/builder/main.go#newcode310\nmisc/dashboard/builder/main.go:310: proc.Kill()\nI do not think this will work reliably on Windows. Your proc.Kill will kill top level bash process (that waits for others and does nothing much else anyways), but it might not be able to kill processes at fault (make). So you will end up with some \"left over\" processes. These will prevent you from deleting file tree they were building. It means you won't be able to create that tree again (directory names are predefined by \"hg id\") to try and build it again. So, you might decide to skip that \"hg id\" build. But then you will not be able to restart gobuilder, because gobuilder recreates its complete tree in /tmp at start-up.\n\nI will try and test your change over the weekend, to see if my theory stands.",
			"disapproval": false,
			"date": "2011-09-01 23:58:02.559439",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/02 00:17:23, bradfitz wrote:\n> Alex,\n> \n\nI do not have answers to you questions. Let me look at them over the weekend.\n\nAlex",
			"disapproval": false,
			"date": "2011-09-02 00:25:43.109975",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"adg@golang.org",
				"jdpoirier@gmail.com",
				"go.peter.90@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Alex,\n\n> I tried new make, and it seems to be working OK. I have set MAKEFLAGS=\"-j8\" (I\n> have 8 core PC) to stress our build process, but it works fine.\n\nI run with MAKEFLAGS=\"-j\". Why don't you?\n\nPeter\n\nOn 2011/09/03 00:57:44, brainman wrote:\n> On 2011/09/02 05:40:28, brainman wrote:\n> > \n> > \n> > ... But I will be able to try it at\n> > home on weekend and will let you know. ...\n> > \n> \n> I tried new make, and it seems to be working OK. I have set MAKEFLAGS=\"-j8\" (I\n> have 8 core PC) to stress our build process, but it works fine. I ran it ~20\n> times now and yet to see it fail. With old make I could break it on ~2-3\n> attempt.\n> \n> I think you should update as per my instructions. It is not a certain solution,\n> but better then what we have. Thank you.\n> \n> Alex",
			"disapproval": false,
			"date": "2011-09-03 01:35:10.778507",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"adg@golang.org",
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/02 00:25:43, brainman wrote:\n> On 2011/09/02 00:17:23, bradfitz wrote:\n> > Alex,\n> > \n> \n> I do not have answers to you questions. Let me look at them over the weekend.\n> \n> Alex\n\nFYI \nI've had pretty good luck avoiding the spins/hangs by rebuilding the gmake\nexecutable on the windows machine it's being run on. \nftp://ftp.gnu.org/gnu/make\n\n-joe",
			"disapproval": false,
			"date": "2011-09-02 04:06:25.417112",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Alex,\n\nCan we get a list of all processes on Windows?\n\nDo processes have parents on Windows?\n\nCan we get the working directory of a process on Windows? (is there such a\nconcept?)\n\nPerhaps on timeout we can just brute-force it, going hunting for all the\nthings we need to kill.\n\nDo you want to take this CL over, or work with me to add more os/Process\nAPIs to do process enumeration on Windows (and Linux, etc) too?\n\n- Brad\n\nOn Thu, Sep 1, 2011 at 4:58 PM, <alex.brainman@gmail.com> wrote:\n\n>\n> http://codereview.appspot.com/**4965061/diff/8001/misc/**\n> dashboard/builder/main.go<http://codereview.appspot.com/4965061/diff/8001/misc/dashboard/builder/main.go>\n> File misc/dashboard/builder/main.go (right):\n>\n> http://codereview.appspot.com/**4965061/diff/8001/misc/**\n> dashboard/builder/main.go#**newcode310<http://codereview.appspot.com/4965061/diff/8001/misc/dashboard/builder/main.go#newcode310>\n> misc/dashboard/builder/main.**go:310: proc.Kill()\n> I do not think this will work reliably on Windows. Your proc.Kill will\n> kill top level bash process (that waits for others and does nothing much\n> else anyways), but it might not be able to kill processes at fault\n> (make). So you will end up with some \"left over\" processes. These will\n> prevent you from deleting file tree they were building. It means you\n> won't be able to create that tree again (directory names are predefined\n> by \"hg id\") to try and build it again. So, you might decide to skip that\n> \"hg id\" build. But then you will not be able to restart gobuilder,\n> because gobuilder recreates its complete tree in /tmp at start-up.\n>\n> I will try and test your change over the weekend, to see if my theory\n> stands.\n>\n>\n> http://codereview.appspot.com/**4965061/<http://codereview.appspot.com/4965061/>\n>\n",
			"disapproval": false,
			"date": "2011-09-02 00:17:23.295662",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"adg@golang.org",
				"jdpoirier@gmail.com",
				"go.peter.90@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/02 05:40:28, brainman wrote:\n> \n> \n> ... But I will be able to try it at\n> home on weekend and will let you know. ...\n> \n\nI tried new make, and it seems to be working OK. I have set MAKEFLAGS=\"-j8\" (I have 8 core PC) to stress our build process, but it works fine. I ran it ~20 times now and yet to see it fail. With old make I could break it on ~2-3 attempt.\n\nI think you should update as per my instructions. It is not a certain solution, but better then what we have. Thank you.\n\nAlex",
			"disapproval": false,
			"date": "2011-09-03 00:57:44.758964",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"adg@golang.org",
				"jdpoirier@gmail.com",
				"go.peter.90@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Brad,\n\nWhat version of make are you using? I never have this problem. I use make version 3.82-5.\n\n$ make -v\nGNU Make 3.82\nBuilt for i386-pc-mingw32\nCopyright (C) 2010  Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nPeter",
			"disapproval": false,
			"date": "2011-09-02 04:50:46.658269",
			"approval": false
		},
		{
			"sender": "Mike.Rosset@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"adg@golang.org",
				"jdpoirier@gmail.com",
				"go.peter.90@gmail.com",
				"Mike.Rosset@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "> I run with MAKEFLAGS=\"-j\". Why don't you?\n\nIf the -j option is given without an argument, make will not limit the number of jobs that can run simultaneously. (taken from gnu manual)\n\nthis may work in some situations but generally people are more explicit about how many parallel makes they use. generally CPU or CORES",
			"disapproval": false,
			"date": "2011-09-03 02:35:42.830829",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Fri, Sep 2, 2011 at 12:11 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n> 3.81\n> On Thu, Sep 1, 2011 at 9:50 PM, <go.peter.90@gmail.com> wrote:\n>>\n>> Brad,\n>>\n>> What version of make are you using? I never have this problem. I use\n>> make version 3.82-5.\n>>\n>> $ make -v\n>> GNU Make 3.82\n>> Built for i386-pc-mingw32\n>> Copyright (C) 2010 \u00a0Free Software Foundation, Inc.\n>> License GPLv3+: GNU GPL version 3 or later\n>> <http://gnu.org/licenses/gpl.html>\n>> This is free software: you are free to change and redistribute it.\n>> There is NO WARRANTY, to the extent permitted by law.\n>>\n>> Peter\n>>\n>> http://codereview.appspot.com/4965061/\n>\n>\n\nKeep in mind that msys' modified version of make\n(path magic) is recommended if you're using an msys shell\nand/or environment; mingw's make != msys' make.\n\nThe link to the msys-make source is\nhttp://sourceforge.net/projects/mingw/files/MSYS/make\nif you decide to rebuild it.\n\n-joe\n",
			"disapproval": false,
			"date": "2011-09-02 05:16:57.363090",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "An example of mingw's make failing.\n\nCreate a Makefile with the following rule\n\ntest:\n    /c/MinGW/msys/1.0/bin/ls Makefile\n\nthen run the two from an msys shell:\n\n$ /bin/make test\n$ /mingw/bin/mingw32-make test\n\n\nFrom what I've read, make's parallel build problem goes back several\nyears and as of early 2011 that hadn't change with the 3.82 builds at\nthe time, but that may not be the case with newer builds. In any case,\nI've had good luck rebuilding the binary... YMMV.\n\n-joe\n\nOn Fri, Sep 2, 2011 at 12:40 AM,  <alex.brainman@gmail.com> wrote:\n> On 2011/09/02 05:20:16, bradfitz wrote:\n>\n>> I don't know what \"path magic\" is. \u00a0Is that what makes it hang?\n>\n> I use Joe's bundle. And make version is\n>\n> # make --version\n> GNU Make 3.81\n> Copyright (C) 2006 \u00a0Free Software Foundation, Inc.\n> This is free software; see the source for copying conditions.\n> There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A\n> PARTICULAR PURPOSE.\n>\n> This program built for i686-pc-msys\n>\n> Reading this http://goo.gl/8undr, I decided to try and upgrade it. So I\n> did\n>\n> mingw-get update\n> mingw-get install mingw32-make\n>\n> But after upgrade my make version message didn't change. It appears, we\n> use C:\\MinGW\\msys\\1.0\\bin\\make.exe, but mingw-get program installs new\n> make into C:\\MinGW\\bin\\mingw32-make.exe.\n>\n> If I ran\n>\n> $ mingw32-make --version\n> GNU Make 3.82\n> Built for i386-pc-mingw32\n> Copyright (C) 2010 \u00a0Free Software Foundation, Inc.\n> License GPLv3+: GNU GPL version 3 or later\n> <http://gnu.org/licenses/gpl.html>\n> This is free software: you are free to change and redistribute it.\n> There is NO WARRANTY, to the extent permitted by law.\n>\n> I have copied C:\\MinGW\\bin\\mingw32-make.exe into\n> C:\\MinGW\\msys\\1.0\\bin\\make.exe, and now I get\n>\n> $ make --version\n> GNU Make 3.82\n> Built for i386-pc-mingw32\n> Copyright (C) 2010 \u00a0Free Software Foundation, Inc.\n> License GPLv3+: GNU GPL version 3 or later\n> <http://gnu.org/licenses/gpl.html>\n> This is free software: you are free to change and redistribute it.\n> There is NO WARRANTY, to the extent permitted by law.\n>\n> Perhaps you will need more files as per peterGo's instructions.\n>\n> I do not know, if this will fix our hanging. But I will be able to try\n> it at home on weekend and will let you know. You should backup your\n> c:\\MinGW directory if you plan to fiddle with it.\n>\n> Alex\n>\n> http://codereview.appspot.com/4965061/\n>\n",
			"disapproval": false,
			"date": "2011-09-02 06:37:03.531815",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Sep 1, 2011 at 10:16 PM, Joseph Poirier <jdpoirier@gmail.com> wrote:\n\n> On Fri, Sep 2, 2011 at 12:11 AM, Brad Fitzpatrick <bradfitz@golang.org>\n> wrote:\n> > 3.81\n> > On Thu, Sep 1, 2011 at 9:50 PM, <go.peter.90@gmail.com> wrote:\n> >>\n> >> Brad,\n> >>\n> >> What version of make are you using? I never have this problem. I use\n> >> make version 3.82-5.\n> >>\n> >> $ make -v\n> >> GNU Make 3.82\n> >> Built for i386-pc-mingw32\n> >> Copyright (C) 2010  Free Software Foundation, Inc.\n> >> License GPLv3+: GNU GPL version 3 or later\n> >> <http://gnu.org/licenses/gpl.html>\n> >> This is free software: you are free to change and redistribute it.\n> >> There is NO WARRANTY, to the extent permitted by law.\n> >>\n> >> Peter\n> >>\n> >> http://codereview.appspot.com/4965061/\n> >\n> >\n>\n> Keep in mind that msys' modified version of make\n> (path magic) is recommended if you're using an msys shell\n> and/or environment; mingw's make != msys' make.\n>\n\nIf it's recommended, why is whatever version I have (presumably the\ndefault--- I followed the wiki instructions) wrong?\n\nI don't know what \"path magic\" is.  Is that what makes it hang?\n",
			"disapproval": false,
			"date": "2011-09-02 05:20:16.583586",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"adg@golang.org",
				"jdpoirier@gmail.com",
				"go.peter.90@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/02 05:20:16, bradfitz wrote:\n> \n> I don't know what \"path magic\" is.  Is that what makes it hang?\n\nI use Joe's bundle. And make version is \n\n# make --version\nGNU Make 3.81\nCopyright (C) 2006  Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.\nThere is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A\nPARTICULAR PURPOSE.\n\nThis program built for i686-pc-msys\n\nReading this http://goo.gl/8undr, I decided to try and upgrade it. So I did \n\nmingw-get update\nmingw-get install mingw32-make\n\nBut after upgrade my make version message didn't change. It appears, we use C:\\MinGW\\msys\\1.0\\bin\\make.exe, but mingw-get program installs new make into C:\\MinGW\\bin\\mingw32-make.exe.\n\nIf I ran\n\n$ mingw32-make --version\nGNU Make 3.82\nBuilt for i386-pc-mingw32\nCopyright (C) 2010  Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nI have copied C:\\MinGW\\bin\\mingw32-make.exe into C:\\MinGW\\msys\\1.0\\bin\\make.exe, and now I get\n\n$ make --version\nGNU Make 3.82\nBuilt for i386-pc-mingw32\nCopyright (C) 2010  Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nPerhaps you will need more files as per peterGo's instructions.\n\nI do not know, if this will fix our hanging. But I will be able to try it at home on weekend and will let you know. You should backup your c:\\MinGW directory if you plan to fiddle with it.\n\nAlex",
			"disapproval": false,
			"date": "2011-09-02 05:40:28.120722",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 4965061: gobuilder: timeout support, for flaky/hangy builders",
	"created": "2011-09-01 22:13:16.440118",
	"patchsets": [
		1,
		2001,
		5001,
		8001
	],
	"modified": "2011-10-06 18:21:16.587286",
	"closed": true,
	"issue": 4965061
}