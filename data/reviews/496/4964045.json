{
	"description": "exp/template/html: Grammar rules for HTML comments and special tags.\n\nAugments type context and adds grammatical rules to handle special HTML constructs:\n    <!-- comments -->\n    <script>raw text</script>\n    <textarea>no tags here</textarea>\n\nThis CL does not elide comment content.  I recommend we do that but\nhave not done it in this CL.\n\nI used a codesearch tool over a codebase in another template language.\n\nBased on the below I think we should definitely recognize\n  <script>, <style>, <textarea>, and <title>\nas each of these appears frequently enough that there are few\ntemplate using apps that do not use most of them.\n\nOf the other special tags,\n  <xmp>, <noscript>\nare used but infrequently, and\n  <noframe> and friend, <listing>\ndo not appear at all.\n\nWe could support <xmp> even though it is obsolete in HTML5\nbecause we already have the machinery, but I suggest we do not\nsupport noscript since it is a normal tag in some browser\nconfigurations.\n\nI suggest recognizing and eliding <!-- comments -->\n(but not escaping text spans) as they are widely used to\nembed comments in template source.  Not eliding them increases\nthe size of content sent over the network, and risks leaking\ncode and project internal details.\nThe template language I tested elides them so there are\nno instance of IE conditional compilation directives in the\ncodebase but that could be a source of confusion.\n\nThe codesearch does the equivalent of\n$ find . -name \\*.file-extension \\\n  | perl -ne 'print \"\\L$1\\n\" while s@<([a-z][a-z0-9])@@i' \\\n  | sort | uniq -c | sort\n\nThe 5 uses of <plaintext> seem to be in tricky code and can be ignored.\nThe 2 uses of <xmp> appear in the same tricky code and can be ignored.\nI also ignored end tags to avoid biasing against unary\nelements and threw out some nonsense names since since the\nlong tail is dominated by uses of < as a comparison operator\nin the template languages expression language.\n\nI have added asterisks next to abnormal elements.\n\n  26765 div\n   7432 span\n   7414 td\n   4233 a\n   3730 tr\n   3238 input\n   2102 br\n   1756 li\n   1755 img\n   1674 table\n   1388 p\n   1311 th\n   1064 option\n    992 b\n    891 label\n    714 script *\n    519 ul\n    446 tbody\n    412 button\n    381 form\n    377 h2\n    358 select\n    353 strong\n    318 h3\n    314 body\n    303 html\n    266 link\n    262 textarea *\n    261 head\n    258 meta\n    225 title *\n    189 h1\n    176 col\n    156 style *\n    151 hr\n    119 iframe\n    103 h4\n    101 pre\n    100 dt\n     98 thead\n     90 dd\n     83 map\n     80 i\n     69 object\n     66 ol\n     65 em\n     60 param\n     60 font\n     57 fieldset\n     51 string\n     51 field\n     51 center\n     44 bidi\n     37 kbd\n     35 legend\n     30 nobr\n     29 dl\n     28 var\n     26 small\n     21 cite\n     21 base\n     20 embed\n     19 colgroup\n     12 u\n     12 canvas\n     10 sup\n     10 rect\n     10 optgroup\n     10 noscript *\n      9 wbr\n      9 blockquote\n      8 tfoot\n      8 code\n      8 caption\n      8 abbr\n      7 msg\n      6 tt\n      6 text\n      6 h5\n      5 svg\n      5 plaintext *\n      5 article\n      4 shortquote\n      4 number\n      4 menu\n      4 ins\n      3 progress\n      3 header\n      3 content\n      3 bool\n      3 audio\n      3 attribute\n      3 acronym\n      2 xmp *\n      2 overwrite\n      2 objects\n      2 nobreak\n      2 metadata\n      2 description\n      2 datasource\n      2 category\n      2 action",
	"cc": [
		"nigeltao@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM.\n\nhttp://codereview.appspot.com/4964045/diff/19001/src/pkg/exp/template/html/context.go\nFile src/pkg/exp/template/html/context.go (right):\n\nhttp://codereview.appspot.com/4964045/diff/19001/src/pkg/exp/template/html/context.go#newcode30\nsrc/pkg/exp/template/html/context.go:30: return c.state == d.state && c.delim == d.delim && c.urlPart == d.urlPart && c.jsCtx == d.jsCtx && c.element == d.element && c.errLine == d.errLine && c.errStr == d.errStr\nIt's probably time to add some line breaks after each \"&&\".\n\nhttp://codereview.appspot.com/4964045/diff/19001/src/pkg/exp/template/html/escape.go\nFile src/pkg/exp/template/html/escape.go (right):\n\nhttp://codereview.appspot.com/4964045/diff/19001/src/pkg/exp/template/html/escape.go#newcode299\nsrc/pkg/exp/template/html/escape.go:299: c, s = context{state: stateTag, element: c.element}, s[i:]\nMaybe it's worth a comment why c.element is kept but c.delim, c.urlPart and c.jsCtx aren't?\n\nOr would a better way to write this be:\nc.state, s = stateTag, s[i:]\nbut I don't know if that's simply broken.\n\nhttp://codereview.appspot.com/4964045/diff/19001/src/pkg/exp/template/html/escape.go#newcode421\nsrc/pkg/exp/template/html/escape.go:421: // tComment is the context transition for stateComment.\ns/for/function for/. Similarly at line 438.\n\nhttp://codereview.appspot.com/4964045/diff/19001/src/pkg/exp/template/html/escape.go#newcode430\nsrc/pkg/exp/template/html/escape.go:430: // specialTagEndMarkers maps element types to the character sequence\nUnfinished sentence, or just a missing full stop?? s/the/their/ ??\n\nhttp://codereview.appspot.com/4964045/diff/19001/src/pkg/exp/template/html/escape.go#newcode439\nsrc/pkg/exp/template/html/escape.go:439: func tSpecialEnd(c context, s []byte) (context, []byte) {\ns/tSpecialEnd/tSpecialTagEnd/?\n\nhttp://codereview.appspot.com/4964045/diff/19001/src/pkg/exp/template/html/escape.go#newcode442\nsrc/pkg/exp/template/html/escape.go:442: i := bytes.Index([]byte(strings.ToLower(string(s))), end)\nThere'd be less churn if specialTagEndMarkers was a [...]string instead of a [...][]byte.",
			"disapproval": false,
			"date": "2011-09-09 03:00:07.596353",
			"approval": true
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-08-26 22:02:32.134001",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4964045/diff/19001/src/pkg/exp/template/html/context.go\nFile src/pkg/exp/template/html/context.go (right):\n\nhttp://codereview.appspot.com/4964045/diff/19001/src/pkg/exp/template/html/context.go#newcode30\nsrc/pkg/exp/template/html/context.go:30: return c.state == d.state && c.delim == d.delim && c.urlPart == d.urlPart && c.jsCtx == d.jsCtx && c.element == d.element && c.errLine == d.errLine && c.errStr == d.errStr\nOn 2011/09/09 03:00:08, nigeltao wrote:\n> It's probably time to add some line breaks after each \"&&\".\n\nDone.\n\nhttp://codereview.appspot.com/4964045/diff/19001/src/pkg/exp/template/html/escape.go\nFile src/pkg/exp/template/html/escape.go (right):\n\nhttp://codereview.appspot.com/4964045/diff/19001/src/pkg/exp/template/html/escape.go#newcode299\nsrc/pkg/exp/template/html/escape.go:299: c, s = context{state: stateTag, element: c.element}, s[i:]\nOn 2011/09/09 03:00:08, nigeltao wrote:\n> Maybe it's worth a comment why c.element is kept but c.delim, c.urlPart and\n> c.jsCtx aren't?\n> \n> Or would a better way to write this be:\n> c.state, s = stateTag, s[i:]\n> but I don't know if that's simply broken.\n\nThe delimiter type, URL part, and JS context are only relevant inside an attribute, or in a special tag body so I don't think c.state = stateTag is the right way to go.  It wouldn't break things, but it would lead to spurious stuff showing up in tests.\n\nI added a comment.\n\n\t\t// On exiting an attribute, we discard all state information\n\t\t// except the state and element.\n\nhttp://codereview.appspot.com/4964045/diff/19001/src/pkg/exp/template/html/escape.go#newcode421\nsrc/pkg/exp/template/html/escape.go:421: // tComment is the context transition for stateComment.\nOn 2011/09/09 03:00:08, nigeltao wrote:\n> s/for/function for/. Similarly at line 438.\n\nDone.\n\nhttp://codereview.appspot.com/4964045/diff/19001/src/pkg/exp/template/html/escape.go#newcode430\nsrc/pkg/exp/template/html/escape.go:430: // specialTagEndMarkers maps element types to the character sequence\nOn 2011/09/09 03:00:08, nigeltao wrote:\n> Unfinished sentence, or just a missing full stop?? s/the/their/ ??\n\n// specialTagEndMarkers maps element types to the character sequence that\n// case-insensitively signals the end of the special tag body.\n\nhttp://codereview.appspot.com/4964045/diff/19001/src/pkg/exp/template/html/escape.go#newcode439\nsrc/pkg/exp/template/html/escape.go:439: func tSpecialEnd(c context, s []byte) (context, []byte) {\nOn 2011/09/09 03:00:08, nigeltao wrote:\n> s/tSpecialEnd/tSpecialTagEnd/?\n\nDone 10 places.\n\nhttp://codereview.appspot.com/4964045/diff/19001/src/pkg/exp/template/html/escape.go#newcode442\nsrc/pkg/exp/template/html/escape.go:442: i := bytes.Index([]byte(strings.ToLower(string(s))), end)\nOn 2011/09/09 03:00:08, nigeltao wrote:\n> There'd be less churn if specialTagEndMarkers was a [...]string instead of a\n> [...][]byte.\n\nDone.",
			"disapproval": false,
			"date": "2011-09-09 07:02:40.147906",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Merged, updated CL description, and uploaded.",
			"disapproval": false,
			"date": "2011-09-08 21:53:22.097630",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/08/26 22:02:32, MikeSamuel wrote:\n> Hello mailto:nigeltao@golang.org (cc: mailto:golang-dev@googlegroups.com),\n> \n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n\nMerged and uploaded.",
			"disapproval": false,
			"date": "2011-08-30 02:32:11.118714",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=9054e6fb57bc ***\n\nexp/template/html: Grammar rules for HTML comments and special tags.\n\nAugments type context and adds grammatical rules to handle special HTML constructs:\n    <!-- comments -->\n    <script>raw text</script>\n    <textarea>no tags here</textarea>\n\nThis CL does not elide comment content.  I recommend we do that but\nhave not done it in this CL.\n\nI used a codesearch tool over a codebase in another template language.\n\nBased on the below I think we should definitely recognize\n  <script>, <style>, <textarea>, and <title>\nas each of these appears frequently enough that there are few\ntemplate using apps that do not use most of them.\n\nOf the other special tags,\n  <xmp>, <noscript>\nare used but infrequently, and\n  <noframe> and friend, <listing>\ndo not appear at all.\n\nWe could support <xmp> even though it is obsolete in HTML5\nbecause we already have the machinery, but I suggest we do not\nsupport noscript since it is a normal tag in some browser\nconfigurations.\n\nI suggest recognizing and eliding <!-- comments -->\n(but not escaping text spans) as they are widely used to\nembed comments in template source.  Not eliding them increases\nthe size of content sent over the network, and risks leaking\ncode and project internal details.\nThe template language I tested elides them so there are\nno instance of IE conditional compilation directives in the\ncodebase but that could be a source of confusion.\n\nThe codesearch does the equivalent of\n$ find . -name \\*.file-extension \\\n  | perl -ne 'print \"\\L$1\\n\" while s@<([a-z][a-z0-9])@@i' \\\n  | sort | uniq -c | sort\n\nThe 5 uses of <plaintext> seem to be in tricky code and can be ignored.\nThe 2 uses of <xmp> appear in the same tricky code and can be ignored.\nI also ignored end tags to avoid biasing against unary\nelements and threw out some nonsense names since since the\nlong tail is dominated by uses of < as a comparison operator\nin the template languages expression language.\n\nI have added asterisks next to abnormal elements.\n\n  26765 div\n   7432 span\n   7414 td\n   4233 a\n   3730 tr\n   3238 input\n   2102 br\n   1756 li\n   1755 img\n   1674 table\n   1388 p\n   1311 th\n   1064 option\n    992 b\n    891 label\n    714 script *\n    519 ul\n    446 tbody\n    412 button\n    381 form\n    377 h2\n    358 select\n    353 strong\n    318 h3\n    314 body\n    303 html\n    266 link\n    262 textarea *\n    261 head\n    258 meta\n    225 title *\n    189 h1\n    176 col\n    156 style *\n    151 hr\n    119 iframe\n    103 h4\n    101 pre\n    100 dt\n     98 thead\n     90 dd\n     83 map\n     80 i\n     69 object\n     66 ol\n     65 em\n     60 param\n     60 font\n     57 fieldset\n     51 string\n     51 field\n     51 center\n     44 bidi\n     37 kbd\n     35 legend\n     30 nobr\n     29 dl\n     28 var\n     26 small\n     21 cite\n     21 base\n     20 embed\n     19 colgroup\n     12 u\n     12 canvas\n     10 sup\n     10 rect\n     10 optgroup\n     10 noscript *\n      9 wbr\n      9 blockquote\n      8 tfoot\n      8 code\n      8 caption\n      8 abbr\n      7 msg\n      6 tt\n      6 text\n      6 h5\n      5 svg\n      5 plaintext *\n      5 article\n      4 shortquote\n      4 number\n      4 menu\n      4 ins\n      3 progress\n      3 header\n      3 content\n      3 bool\n      3 audio\n      3 attribute\n      3 acronym\n      2 xmp *\n      2 overwrite\n      2 objects\n      2 nobreak\n      2 metadata\n      2 description\n      2 datasource\n      2 category\n      2 action\n\nR=nigeltao\nCC=golang-dev\nhttp://codereview.appspot.com/4964045",
			"disapproval": false,
			"date": "2011-09-09 07:07:46.004093",
			"approval": false
		}
	],
	"owner_email": "mikesamuel@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "MikeSamuel",
	"subject": "code review 4964045: exp/template/html: Grammar rules for HTML comments and ...",
	"created": "2011-08-26 20:34:03.708962",
	"patchsets": [
		1,
		2001,
		4001,
		2002,
		4002,
		12001,
		16002,
		8002,
		19001,
		20001,
		3009
	],
	"modified": "2011-09-09 07:07:47.013444",
	"closed": true,
	"issue": 4964045
}