{
	"description": "test/chan: document tests",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-02-19 06:33:18.558472",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nOn Feb 19, 2012 5:33 PM, <r@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://code.google.com/p/go/\n>\n>\n> Description:\n> test/chan: document tests\n>\n> Please review this at http://codereview.appspot.com/**5677094/<http://codereview.appspot.com/5677094/>\n>\n> Affected files:\n>  M test/chan/doubleselect.go\n>  M test/chan/fifo.go\n>  M test/chan/goroutines.go\n>  M test/chan/nonblock.go\n>  M test/chan/perm.go\n>  M test/chan/powser1.go\n>  M test/chan/powser2.go\n>  M test/chan/select.go\n>  M test/chan/select2.go\n>  M test/chan/select3.go\n>  M test/chan/select4.go\n>  M test/chan/select5.go\n>  M test/chan/select6.go\n>  M test/chan/sieve1.go\n>  M test/chan/sieve2.go\n>  M test/chan/zerosize.go\n>\n>\n> Index: test/chan/doubleselect.go\n> ==============================**==============================**=======\n> --- a/test/chan/doubleselect.go\n> +++ b/test/chan/doubleselect.go\n> @@ -4,8 +4,9 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> -// This test is designed to flush out the case where two cases of a\n> select can\n> +// Test the situation in which two cases of a select can\n>  // both end up running. See http://codereview.appspot.com/**180068<http://codereview.appspot.com/180068>\n> .\n> +\n>  package main\n>\n>  import (\n> Index: test/chan/fifo.go\n> ==============================**==============================**=======\n> --- a/test/chan/fifo.go\n> +++ b/test/chan/fifo.go\n> @@ -4,7 +4,7 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> -// Verify that unbuffered channels act as pure fifos.\n> +// Test that unbuffered channels act as pure fifos.\n>\n>  package main\n>\n> Index: test/chan/goroutines.go\n> ==============================**==============================**=======\n> --- a/test/chan/goroutines.go\n> +++ b/test/chan/goroutines.go\n> @@ -4,8 +4,8 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> -// make a lot of goroutines, threaded together.\n> -// tear them down cleanly.\n> +// Torture test for goroutines.\n> +// Make a lot of goroutines, threaded together, and tear them down\n> cleanly.\n>\n>  package main\n>\n> Index: test/chan/nonblock.go\n> ==============================**==============================**=======\n> --- a/test/chan/nonblock.go\n> +++ b/test/chan/nonblock.go\n> @@ -4,8 +4,8 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> -// Verify channel operations that test for blocking\n> -// Use several sizes and types of operands\n> +// Test channel operations that test for blocking.\n> +// Use several sizes and types of operands.\n>\n>  package main\n>\n> Index: test/chan/perm.go\n> ==============================**==============================**=======\n> --- a/test/chan/perm.go\n> +++ b/test/chan/perm.go\n> @@ -4,6 +4,10 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// Test various correct and incorrect permutations of send-only,\n> +// receive-only, and bidirectional channels.\n> +// Does not compile.\n> +\n>  package main\n>\n>  var (\n> Index: test/chan/powser1.go\n> ==============================**==============================**=======\n> --- a/test/chan/powser1.go\n> +++ b/test/chan/powser1.go\n> @@ -4,6 +4,8 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// Test concurrency primitives: power series.\n> +\n>  // Power series package\n>  // A power series is a channel, along which flow rational\n>  // coefficients.  A denominator of zero signifies the end.\n> Index: test/chan/powser2.go\n> ==============================**==============================**=======\n> --- a/test/chan/powser2.go\n> +++ b/test/chan/powser2.go\n> @@ -4,15 +4,18 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// Test concurrency primitives: power series.\n> +\n> +// Like powser1.go but uses channels of interfaces.\n> +// Has not been cleaned up as much as powser1.go, to keep\n> +// it distinct and therefore a different test.\n> +\n>  // Power series package\n>  // A power series is a channel, along which flow rational\n>  // coefficients.  A denominator of zero signifies the end.\n>  // Original code in Newsqueak by Doug McIlroy.\n>  // See Squinting at Power Series by Doug McIlroy,\n>  //   http://www.cs.bell-labs.com/**who/rsc/thread/squint.pdf<http://www.cs.bell-labs.com/who/rsc/thread/squint.pdf>\n> -// Like powser1.go but uses channels of interfaces.\n> -// Has not been cleaned up as much as powser1.go, to keep\n> -// it distinct and therefore a different test.\n>\n>  package main\n>\n> Index: test/chan/select.go\n> ==============================**==============================**=======\n> --- a/test/chan/select.go\n> +++ b/test/chan/select.go\n> @@ -4,6 +4,8 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// Test simple select.\n> +\n>  package main\n>\n>  var counter uint\n> Index: test/chan/select2.go\n> ==============================**==============================**=======\n> --- a/test/chan/select2.go\n> +++ b/test/chan/select2.go\n> @@ -4,6 +4,8 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// Test that selects do not consume undue memory.\n> +\n>  package main\n>\n>  import \"runtime\"\n> Index: test/chan/select3.go\n> ==============================**==============================**=======\n> --- a/test/chan/select3.go\n> +++ b/test/chan/select3.go\n> @@ -4,7 +4,7 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> -// Tests verifying the semantics of the select statement\n> +// Test the semantics of the select statement\n>  // for basic empty/non-empty cases.\n>\n>  package main\n> Index: test/chan/select4.go\n> ==============================**==============================**=======\n> --- a/test/chan/select4.go\n> +++ b/test/chan/select4.go\n> @@ -4,6 +4,8 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file\n>\n> +// Test that a select statement proceeds when a value is ready.\n> +\n>  package main\n>\n>  func f() *int {\n> Index: test/chan/select5.go\n> ==============================**==============================**=======\n> --- a/test/chan/select5.go\n> +++ b/test/chan/select5.go\n> @@ -7,7 +7,10 @@\n>  // license that can be found in the LICENSE file.\n>\n>  // Generate test of channel operations and simple selects.\n> -// Only doing one real send or receive at a time, but phrased\n> +// The output of this program is compiled and run to do the\n> +// actual test.\n> +\n> +// Each test does only one real send or receive at a time, but phrased\n>  // in various ways that the compiler may or may not rewrite\n>  // into simpler expressions.\n>\n> Index: test/chan/select6.go\n> ==============================**==============================**=======\n> --- a/test/chan/select6.go\n> +++ b/test/chan/select6.go\n> @@ -4,7 +4,7 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> -// Issue 2075\n> +// Test for select: Issue 2075\n>  // A bug in select corrupts channel queues of failed cases\n>  // if there are multiple waiters on those channels and the\n>  // select is the last in the queue. If further waits are made\n> Index: test/chan/sieve1.go\n> ==============================**==============================**=======\n> --- a/test/chan/sieve1.go\n> +++ b/test/chan/sieve1.go\n> @@ -4,6 +4,8 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// Test concurrency primitives: classical inefficient concurrent prime\n> sieve.\n> +\n>  // Generate primes up to 100 using channels, checking the results.\n>  // This sieve consists of a linear chain of divisibility filters,\n>  // equivalent to trial-dividing each n by all primes p \u2264 n.\n> Index: test/chan/sieve2.go\n> ==============================**==============================**=======\n> --- a/test/chan/sieve2.go\n> +++ b/test/chan/sieve2.go\n> @@ -4,6 +4,8 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// Test concurrency primitives: prime sieve of Eratosthenes.\n> +\n>  // Generate primes up to 100 using channels, checking the results.\n>  // This sieve is Eratosthenesque and only considers odd candidates.\n>  // See discussion at <http://blog.onideas.ws/**eratosthenes.go<http://blog.onideas.ws/eratosthenes.go>\n> >.\n> Index: test/chan/zerosize.go\n> ==============================**==============================**=======\n> --- a/test/chan/zerosize.go\n> +++ b/test/chan/zerosize.go\n> @@ -4,7 +4,7 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> -// Making channels of a zero-sized type should not panic.\n> +// Test making channels of a zero-sized type.\n>\n>  package main\n>\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-02-19 06:36:37.120318",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as 15104d79082c ***\n\ntest/chan: document tests\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5677094",
			"disapproval": false,
			"date": "2012-02-19 06:44:07.427027",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5677094: test/chan: document tests",
	"created": "2012-02-19 06:33:04.810110",
	"patchsets": [
		1,
		3002
	],
	"modified": "2012-02-19 06:44:09.259510",
	"closed": true,
	"issue": 5677094
}