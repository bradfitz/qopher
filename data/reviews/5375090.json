{
	"description": "encoding/json: decode [] as empty slice, not nil slice\n\nTest was already present, but bug in reflect.DeepEqual hid this bug.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=3b165a91dbfa ***\n\nencoding/json: decode [] as empty slice, not nil slice\n\nTest was already present, but bug in reflect.DeepEqual hid this bug.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5375090",
			"disapproval": false,
			"date": "2011-11-14 21:03:26.709616",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nOn Mon, Nov 14, 2011 at 10:01 AM, <rsc@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg\n>\n>\n> Description:\n> encoding/json: decode [] as empty slice, not nil slice\n>\n> Test was already present, but bug in reflect.DeepEqual hid this bug.\n>\n> Please review this at http://codereview.appspot.com/**5375090/<http://codereview.appspot.com/5375090/>\n>\n> Affected files:\n>  M src/pkg/encoding/json/decode.**go\n>\n>\n> Index: src/pkg/encoding/json/decode.**go\n> ==============================**==============================**=======\n> --- a/src/pkg/encoding/json/**decode.go\n> +++ b/src/pkg/encoding/json/**decode.go\n> @@ -381,6 +381,7 @@\n>                        d.error(errPhase)\n>                }\n>        }\n> +\n>        if i < av.Len() {\n>                if !sv.IsValid() {\n>                        // Array.  Zero the rest.\n> @@ -392,6 +393,9 @@\n>                        sv.SetLen(i)\n>                }\n>        }\n> +       if i == 0 && av.Kind() == reflect.Slice && sv.IsNil() {\n> +               sv.Set(reflect.MakeSlice(sv.**Type(), 0, 0))\n> +       }\n>  }\n>\n>  // object consumes an object from d.data[d.off-1:], decoding into the\n> value v.\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-11-14 18:09:53.818500",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2011-11-14 18:01:21.913806",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5375090: encoding/json: decode [] as empty slice, not nil slice",
	"created": "2011-11-14 18:01:03.989053",
	"patchsets": [
		1,
		1002,
		3001,
		6001,
		7001
	],
	"modified": "2011-11-14 21:03:27.814767",
	"closed": true,
	"issue": 5375090
}