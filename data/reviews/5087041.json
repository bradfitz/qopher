{
	"description": "suffixarray: improved serialization code\n\nUse gobs to serialize indexes instead of encoding/binary.\n\nEven with gobs, serialize data in slices instead of\napplying gob to the entire data structure at once,\nto reduce the amount of extra buffer memory needed\ninside gob.\n\n7x faster Write/Read for new BenchmarkSaveRestore\ncompared to old code; possibly because encoding/binary\nis more expensive for int32 slice elements (interface\ncall to get little/big endian encoding), while gob's\nencoding is fixed (unconfirmed).\n\nnew (using gobs):\nsuffixarray.BenchmarkSaveRestore\t       1\t2153604000 ns/op\n\nold (using encoding/binary):\nsuffixarray.BenchmarkSaveRestore\t       1\t15118322000 ns/op\n\nThe actual serialized data is slightly larger then using\nthe old code for very large indices because full 32bit indices\nrequire 5bytes using gobs instead of 4bytes (encoding/binary)\nin serialized form.",
	"cc": [
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5087041/diff/2004/src/pkg/index/suffixarray/suffixarray.go\nFile src/pkg/index/suffixarray/suffixarray.go (right):\n\nhttp://codereview.appspot.com/5087041/diff/2004/src/pkg/index/suffixarray/suffixarray.go#newcode42\nsrc/pkg/index/suffixarray/suffixarray.go:42: // the amount of extra memory allocated for very large indices.\nRead and Write slice the data into successive portions of length gobN,\nso gob can allocate smaller buffers for its I/O.\n\nhttp://codereview.appspot.com/5087041/diff/2004/src/pkg/index/suffixarray/suffixarray.go#newcode67\nsrc/pkg/index/suffixarray/suffixarray.go:67: data := x.data[i:j]\n// The data variable holds next piece of x.data; its length is updated by Decode.",
			"disapproval": false,
			"date": "2011-09-20 21:12:00.990073",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-09-20 00:53:10.677669",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=35d5bf5ceb4c ***\n\nsuffixarray: improved serialization code\n\nUse gobs to serialize indexes instead of encoding/binary.\n\nEven with gobs, serialize data in slices instead of\napplying gob to the entire data structure at once,\nto reduce the amount of extra buffer memory needed\ninside gob.\n\n7x faster Write/Read for new BenchmarkSaveRestore\ncompared to old code; possibly because encoding/binary\nis more expensive for int32 slice elements (interface\ncall to get little/big endian encoding), while gob's\nencoding is fixed (unconfirmed).\n\nnew (using gobs):\nsuffixarray.BenchmarkSaveRestore\t       1\t2153604000 ns/op\n\nold (using encoding/binary):\nsuffixarray.BenchmarkSaveRestore\t       1\t15118322000 ns/op\n\nThe actual serialized data is slightly larger then using\nthe old code for very large indices because full 32bit indices\nrequire 5bytes using gobs instead of 4bytes (encoding/binary)\nin serialized form.\n\nR=r\nCC=golang-dev\nhttp://codereview.appspot.com/5087041",
			"disapproval": false,
			"date": "2011-09-20 21:36:23.898340",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 5087041: suffixarray: improved serialization code",
	"created": "2011-09-20 00:51:06.332869",
	"patchsets": [
		1,
		1001,
		4001,
		2004,
		10001
	],
	"modified": "2011-09-20 21:36:24.612072",
	"closed": true,
	"issue": 5087041
}