{
	"description": "exp/locale/collate: removed weights struct to allow for faster and easier\nincremental comparisons. Instead, processing is now done directly on colElems.\nAs a result, the size of the weights array is now reduced by 75%.\nDetails:\n- Primary value of type 1 colElem is shifted by 1 bit so that primaries\n  of all types can be compared without shifting.\n- Quaternary values are now stored in the colElem itself. This is possible\n  as quaternary values other than 0 or maxQuaternary are only needed when other\n  values are ignored.\n- Simplified processWeights by removing cases that are needed for ICU but not\n  for us (our CJK primary values fit in a single value).",
	"cc": [
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6817054/diff/5008/src/pkg/exp/locale/collate/colelem.go\nFile src/pkg/exp/locale/collate/colelem.go (right):\n\nhttp://codereview.appspot.com/6817054/diff/5008/src/pkg/exp/locale/collate/colelem.go#newcode104\nsrc/pkg/exp/locale/collate/colelem.go:104: // fastPrimary returns a representation of the primary for which holds that\ns/ holds that//\n\nhttp://codereview.appspot.com/6817054/diff/5008/src/pkg/exp/locale/collate/colelem.go#newcode106\nsrc/pkg/exp/locale/collate/colelem.go:106: // It is faster than calling primary().\nis it? not by much, if anything. worth the trouble?\n\nhttp://codereview.appspot.com/6817054/diff/5008/src/pkg/exp/locale/collate/colelem.go#newcode161\nsrc/pkg/exp/locale/collate/colelem.go:161: // Quaternary values are only used for shifted variants.\ns/only used/used only/\n\nhttp://codereview.appspot.com/6817054/diff/5008/src/pkg/exp/locale/collate/colelem_test.go\nFile src/pkg/exp/locale/collate/colelem_test.go (right):\n\nhttp://codereview.appspot.com/6817054/diff/5008/src/pkg/exp/locale/collate/colelem_test.go#newcode75\nsrc/pkg/exp/locale/collate/colelem_test.go:75: inout[2] = int(w.tertiary()) // int(w.tertiary)\nnot sure what the comments are adding now.",
			"disapproval": false,
			"date": "2012-10-30 23:18:08.278190",
			"approval": true
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2012-10-30 15:35:28.867730",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6817054/diff/5008/src/pkg/exp/locale/collate/colelem.go\nFile src/pkg/exp/locale/collate/colelem.go (right):\n\nhttp://codereview.appspot.com/6817054/diff/5008/src/pkg/exp/locale/collate/colelem.go#newcode104\nsrc/pkg/exp/locale/collate/colelem.go:104: // fastPrimary returns a representation of the primary for which holds that\nRemoved code, see next.\n\nOn 2012/10/30 23:18:08, r wrote:\n> s/ holds that//\n\nhttp://codereview.appspot.com/6817054/diff/5008/src/pkg/exp/locale/collate/colelem.go#newcode106\nsrc/pkg/exp/locale/collate/colelem.go:106: // It is faster than calling primary().\nRemoved code and made note to check performance later.\n\nOn 2012/10/30 23:18:08, r wrote:\n> is it? not by much, if anything. worth the trouble?\n\nhttp://codereview.appspot.com/6817054/diff/5008/src/pkg/exp/locale/collate/colelem.go#newcode161\nsrc/pkg/exp/locale/collate/colelem.go:161: // Quaternary values are only used for shifted variants.\nOn 2012/10/30 23:18:08, r wrote:\n> s/only used/used only/\n\nDone.\n\nhttp://codereview.appspot.com/6817054/diff/5008/src/pkg/exp/locale/collate/colelem_test.go\nFile src/pkg/exp/locale/collate/colelem_test.go (right):\n\nhttp://codereview.appspot.com/6817054/diff/5008/src/pkg/exp/locale/collate/colelem_test.go#newcode75\nsrc/pkg/exp/locale/collate/colelem_test.go:75: inout[2] = int(w.tertiary()) // int(w.tertiary)\ngood point, removed.\n\nOn 2012/10/30 23:18:08, r wrote:\n> not sure what the comments are adding now.",
			"disapproval": false,
			"date": "2012-10-31 13:23:39.949250",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=330a152afe5b ***\n\nexp/locale/collate: removed weights struct to allow for faster and easier\nincremental comparisons. Instead, processing is now done directly on colElems.\nAs a result, the size of the weights array is now reduced by 75%.\nDetails:\n- Primary value of type 1 colElem is shifted by 1 bit so that primaries\n  of all types can be compared without shifting.\n- Quaternary values are now stored in the colElem itself. This is possible\n  as quaternary values other than 0 or maxQuaternary are only needed when other\n  values are ignored.\n- Simplified processWeights by removing cases that are needed for ICU but not\n  for us (our CJK primary values fit in a single value).\n\nR=r\nCC=golang-dev\nhttp://codereview.appspot.com/6817054",
			"disapproval": false,
			"date": "2012-10-31 13:28:24.067680",
			"approval": false
		}
	],
	"owner_email": "mpvl@golang.org",
	"private": false,
	"base_url": "",
	"owner": "mpvl",
	"subject": "code review 6817054: exp/locale/collate: removed weights struct to allow for...",
	"created": "2012-10-30 15:13:48.563380",
	"patchsets": [
		1,
		2001,
		4001,
		6001,
		5008,
		5017
	],
	"modified": "2012-10-31 13:28:25.461970",
	"closed": true,
	"issue": 6817054
}