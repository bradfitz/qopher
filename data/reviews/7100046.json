{
	"description": "doc/go_spec.html: clarification about insertion during map iteration",
	"cc": [
		"mdempsky@google.com",
		"iant@golang.org",
		"r@golang.org",
		"gri@golang.org",
		"rsc@golang.org",
		"ken@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ok, I see the discussion about deleted vs removed and added vs\r\ninserted. let me re-read.\r\n- gri\r\n\r\nOn Sat, Jan 12, 2013 at 2:31 PM,  <gri@golang.org> wrote:\r\n> FYI.\r\n>\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.com/7100046/diff/9005/doc/go_spec.html\r\n> File doc/go_spec.html (right):\r\n>\r\n> https://codereview.appspot.com/7100046/diff/9005/doc/go_spec.html#newcode3\r\n> doc/go_spec.html:3: \"Subtitle\": \"Version of January 11, 2013\",\r\n> up-date\r\n>\r\n> https://codereview.appspot.com/7100046/diff/9005/doc/go_spec.html#newcode4411\r\n> doc/go_spec.html:4411: If map entries that have not yet been reached are\r\n> removed during iteration,\r\n> I may have missed the prev. discussion but I don't understand why this\r\n> was changed. \"delete\" is an operation defined on maps, but \"remove\" is\r\n> not.\r\n>\r\n> https://codereview.appspot.com/7100046/diff/9005/doc/go_spec.html#newcode4413\r\n> doc/go_spec.html:4413: added during iteration, it is implementation\r\n>\r\n> dependent whether they will be\r\n> same: inserted seemed better than 'added'.\r\n>\r\n> https://codereview.appspot.com/7100046/diff/9005/doc/go_spec.html#newcode4414\r\n> doc/go_spec.html:4414: produced in the iteration.  Each newly added\r\n>\r\n> entry will be produced not at\r\n> s/./:/\r\n>\r\n> https://codereview.appspot.com/7100046/\r\n",
			"disapproval": false,
			"date": "2013-01-12 22:32:45.863080",
			"approval": false
		},
		{
			"sender": "mdempsky@google.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-01-12 00:12:28.700730",
			"approval": true
		},
		{
			"sender": "mdempsky@google.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"mdempsky@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "[FYI, I'm going to drop my CL, and so we can focus on this CL.]\n\nhttps://codereview.appspot.com/7100046/diff/2001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7100046/diff/2001/doc/go_spec.html#newcode4415\ndoc/go_spec.html:4415: the iteration of the original entries won't be affected. If the map is\nPerhaps it would be better to clarify what \"behavior\" means.  Something like:\n\n\"It is implementation-dependent whether inserting a map entry causes active iterations to produce additional iteration values.  If so, each inserted entry produces at most one set of iteration values.\"\n\nA go word-smith can probably improve the wording, but this way it's clear that if you have nested iterations of the same map like:\n\n  for a := range m {\n    m[f()] = g()\n    for b := range m {\n    }\n  }\n\nthat newly inserted keys are still guaranteed to be visited by the \"b\" iteration, even if they're implementation-dependent for the \"a\" iteration.",
			"disapproval": false,
			"date": "2013-01-11 20:01:15.310720",
			"approval": false
		},
		{
			"sender": "mdempsky@google.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"mdempsky@google.com",
				"iant@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"rsc@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7100046/diff/9005/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7100046/diff/9005/doc/go_spec.html#newcode4414\ndoc/go_spec.html:4414: produced in the iteration.  Each newly added entry will be produced not at\nIs it worth stating somehow that the decision of whether a newly added entry will produce an iteration value can be made independently for each entry and each execution?  I can imagine this wording being construed as limiting implementations to either \"new entries always produce iteration values\" or \"new entries never produce iteration values\".\n\nI'm also curious if the intention is to allow the same key to produce multiple iteration values if it's removed and re-added during iteration.  E.g., is this code guaranteed to terminate or is it allowed to infinite loop?\n\n  m := make(map[int]int)\n  m[0] = 0\n  for k, v := range m {\n    delete(m, k)\n    m[k] = v\n  }",
			"disapproval": false,
			"date": "2013-01-13 02:19:19.456350",
			"approval": false
		},
		{
			"sender": "mdempsky@google.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"mdempsky@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7100046/diff/2001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7100046/diff/2001/doc/go_spec.html#newcode4415\ndoc/go_spec.html:4415: the iteration of the original entries won't be affected. If the map is\nI don't think it's necessary to specify that.  It's not visible to the user if the remaining entries are reordered or not, and the spec already earlier stated that iteration proceeds over all entries.",
			"disapproval": false,
			"date": "2013-01-11 19:38:21.224110",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Jan 12, 2013 at 4:01 AM, <mdempsky@google.com> wrote:\r\n\r\n> \"It is implementation-dependent whether inserting a map entry causes\r\n> active iterations to produce additional iteration values.  If so, each\r\n> inserted entry produces at most one set of iteration values.\"\r\n>\r\nYeah, it is a good idea to restrict the extent of implementation-dependent\r\nbehavior. I adopt your version with slight changes. PTAL.\r\n\r\nI want to avoid introducing the concept of \"active iterations\" as it's not\r\nmentioned elsewhere.\r\n",
			"disapproval": false,
			"date": "2013-01-11 22:55:44.328630",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"mdempsky@google.com",
				"iant@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"rsc@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7100046/diff/2003/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7100046/diff/2003/doc/go_spec.html#newcode4413\ndoc/go_spec.html:4413: added during iteration, it's implementation-dependent whether the newly\ns/it's/it is/\n\nhttps://codereview.appspot.com/7100046/diff/2003/doc/go_spec.html#newcode4414\ndoc/go_spec.html:4414: added entry will be produced in the iteration, but if they do, each added\nSentence is too long and is not parallel (\"the newly added entry\" doesn't match \"they do\").\n\nHow about:\n\nIf map entries are added during iteration, it is implementation dependent whether they will be produced in the iteration.  Each newly added entry will be produced not at all or exactly once.",
			"disapproval": false,
			"date": "2013-01-12 02:28:42.557030",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"mdempsky@google.com",
				"iant@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"rsc@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI.\n\nhttps://codereview.appspot.com/7100046/diff/9005/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7100046/diff/9005/doc/go_spec.html#newcode3\ndoc/go_spec.html:3: \"Subtitle\": \"Version of January 11, 2013\",\nup-date\n\nhttps://codereview.appspot.com/7100046/diff/9005/doc/go_spec.html#newcode4411\ndoc/go_spec.html:4411: If map entries that have not yet been reached are removed during iteration,\nI may have missed the prev. discussion but I don't understand why this was changed. \"delete\" is an operation defined on maps, but \"remove\" is not.\n\nhttps://codereview.appspot.com/7100046/diff/9005/doc/go_spec.html#newcode4413\ndoc/go_spec.html:4413: added during iteration, it is implementation dependent whether they will be\nsame: inserted seemed better than 'added'.\n\nhttps://codereview.appspot.com/7100046/diff/9005/doc/go_spec.html#newcode4414\ndoc/go_spec.html:4414: produced in the iteration.  Each newly added entry will be produced not at\ns/./:/",
			"disapproval": false,
			"date": "2013-01-12 22:31:34.582430",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"mdempsky@google.com",
				"iant@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"rsc@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nBut I think there should be a ':' instead of a '.' (see previous comments).\n\nhttps://codereview.appspot.com/7100046/diff/9005/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7100046/diff/9005/doc/go_spec.html#newcode4411\ndoc/go_spec.html:4411: If map entries that have not yet been reached are removed during iteration,\nOn 2013/01/12 22:31:34, gri wrote:\n> I may have missed the prev. discussion but I don't understand why this was\n> changed. \"delete\" is an operation defined on maps, but \"remove\" is not.\n\nOk. 'remove' is fine.\n\nhttps://codereview.appspot.com/7100046/diff/9005/doc/go_spec.html#newcode4413\ndoc/go_spec.html:4413: added during iteration, it is implementation dependent whether they will be\nOn 2013/01/12 22:31:34, gri wrote:\n> same: inserted seemed better than 'added'.\n\n'added' is fine.",
			"disapproval": false,
			"date": "2013-01-12 22:35:11.119200",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"mdempsky@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7100046/diff/2001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7100046/diff/2001/doc/go_spec.html#newcode4415\ndoc/go_spec.html:4415: the iteration of the original entries won't be affected. If the map is\nOn 2013/01/11 19:38:21, mdempsky wrote:\n> I don't think it's necessary to specify that.  It's not visible to the user if\n> the remaining entries are reordered or not, and the spec already earlier stated\n> that iteration proceeds over all entries.\nmy reason for adding this clause is that I think by saying\n\"the behavior is implementation-dependent\", it basically\nmeans that all previous guarantees are invalid in this case.",
			"disapproval": false,
			"date": "2013-01-11 19:44:08.956240",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, mdempsky@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-01-11 22:54:23.576910",
			"approval": false
		},
		{
			"sender": "mdempsky@google.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"mdempsky@google.com",
				"iant@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"rsc@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/12 00:12:43, minux wrote:\n> are you suggesting that we replace \"the iteration\" with \"executing\"?\n\nNo, I just meant that saying \"executing iterations\" might have been better than \"active iterations\" since the spec does discuss executing statements.  It's moot though since we're not going with that proposed wording. :)",
			"disapproval": false,
			"date": "2013-01-12 00:21:07.181780",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"mdempsky@google.com",
				"iant@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"rsc@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7100046/diff/9005/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7100046/diff/9005/doc/go_spec.html#newcode4415\ndoc/go_spec.html:4415: all or exactly once.If the map is <code>nil</code>, the number of iterations\nTwo spaces after \"once.\"",
			"disapproval": false,
			"date": "2013-01-12 22:27:31.564250",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/12 00:02:17, mdempsky wrote:\n> Fair enough.  For what it's worth, it looks like \"executing\" might be a wording\nare you suggesting that we replace \"the iteration\" with \"executing\"?\nsorry, I don't understand here.\n> that would be more consistent with the rest of the spec.  Also, this section\n> should perhaps say \"removed\" and \"added\" instead of \"deleted\" and \"inserted\" to\n> be consistent with the other sections talking about maps.\nDone.",
			"disapproval": false,
			"date": "2013-01-12 00:12:43.839830",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"mdempsky@google.com",
				"iant@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"rsc@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "+iant, r, gri, rsc, ken2",
			"disapproval": false,
			"date": "2013-01-12 00:15:47.674560",
			"approval": false
		},
		{
			"sender": "mdempsky@google.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/11 22:55:44, minux wrote:\n> I want to avoid introducing the concept of \"active iterations\" as it's not\n> mentioned elsewhere.\n\nFair enough.  For what it's worth, it looks like \"executing\" might be a wording that would be more consistent with the rest of the spec.  Also, this section should perhaps say \"removed\" and \"added\" instead of \"deleted\" and \"inserted\" to be consistent with the other sections talking about maps.\n\nYour wording seems semantically fine to me though.",
			"disapproval": false,
			"date": "2013-01-12 00:02:17.935860",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"mdempsky@google.com",
				"iant@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"rsc@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.",
			"disapproval": false,
			"date": "2013-01-12 08:30:48.912050",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, mdempsky@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-12 00:11:18.494010",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"mdempsky@google.com",
				"iant@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"rsc@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/13 02:19:19, mdempsky wrote:\n> https://codereview.appspot.com/7100046/diff/9005/doc/go_spec.html#newcode4414\n> doc/go_spec.html:4414: produced in the iteration.  Each newly added entry will\n> be produced not at\n> Is it worth stating somehow that the decision of whether a newly added entry\n> will produce an iteration value can be made independently for each entry and\n> each execution?  I can imagine this wording being construed as limiting\n> implementations to either \"new entries always produce iteration values\" or \"new\n> entries never produce iteration values\".\nwell, i don't know. anyone has comments on this aspect?\n\n> I'm also curious if the intention is to allow the same key to produce multiple\n> iteration values if it's removed and re-added during iteration.  E.g., is this\n> code guaranteed to terminate or is it allowed to infinite loop?\n> \n>   m := make(map[int]int)\n>   m[0] = 0\n>   for k, v := range m {\n>     delete(m, k)\n>     m[k] = v\n>   }\nthe status quo: this code always terminate on both gc and gccgo implementations.",
			"disapproval": false,
			"date": "2013-01-17 10:55:39.450550",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"mdempsky@google.com",
				"iant@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"rsc@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Suggestion.\n\nhttps://codereview.appspot.com/7100046/diff/3006/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7100046/diff/3006/doc/go_spec.html#newcode4411\ndoc/go_spec.html:4411: If map entries that have not yet been reached are removed during iteration,\nThis should remain \"deleted\" (not \"removed\"). The builtin is called delete.\n\nhttps://codereview.appspot.com/7100046/diff/3006/doc/go_spec.html#newcode4412\ndoc/go_spec.html:4412: the corresponding iteration values will not be produced. If map entries are\nIf a map entry is created during iteration, that entry may be produced during the iteration or may be skipped. The choice may vary for each entry created and from one iteration to the next.",
			"disapproval": false,
			"date": "2013-01-17 14:27:16.209020",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"mdempsky@google.com",
				"iant@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"rsc@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nhttps://codereview.appspot.com/7100046/diff/3006/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7100046/diff/3006/doc/go_spec.html#newcode4411\ndoc/go_spec.html:4411: If map entries that have not yet been reached are removed during iteration,\nOn 2013/01/17 14:27:16, rsc wrote:\n> This should remain \"deleted\" (not \"removed\"). The builtin is called delete.\nBut other part of the spec use the word \"remove\" for this.\n\nhttps://codereview.appspot.com/7100046/diff/3006/doc/go_spec.html#newcode4412\ndoc/go_spec.html:4412: the corresponding iteration values will not be produced. If map entries are\nOn 2013/01/17 14:27:16, rsc wrote:\n> If a map entry is created during iteration, that entry may be produced during\n> the iteration or may be skipped. The choice may vary for each entry created and\n> from one iteration to the next.\nAdopted.",
			"disapproval": false,
			"date": "2013-01-17 14:45:53.003820",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"mdempsky@google.com",
				"iant@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"rsc@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-01-17 14:56:20.853740",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"mdempsky@google.com",
				"iant@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"rsc@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=9c036de21ee7 ***\n\ndoc/go_spec.html: clarification about insertion during map iteration\n\nR=mdempsky, iant, r, gri, rsc, ken\nCC=golang-dev\nhttps://codereview.appspot.com/7100046",
			"disapproval": false,
			"date": "2013-01-17 15:11:45.991000",
			"approval": false
		}
	],
	"owner_email": "minux.ma@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "minux",
	"subject": "code review 7100046: doc/go_spec.html: clarification about insertion during ...",
	"created": "2013-01-11 19:32:10.285570",
	"patchsets": [
		1,
		2001,
		5002,
		9002,
		2003,
		9005,
		3006,
		15001,
		19001
	],
	"modified": "2013-01-17 15:11:52.373270",
	"closed": true,
	"issue": 7100046
}