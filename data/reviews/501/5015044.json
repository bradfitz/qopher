{
	"description": "godoc: use go/build to find files in a package\n\nFixes issue 1156.\nFixes issue 2172.",
	"cc": [
		"gri@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5015044/diff/5001/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttp://codereview.appspot.com/5015044/diff/5001/src/cmd/godoc/godoc.go#newcode830\nsrc/cmd/godoc/godoc.go:830: if f.IsDirectory() {\nshorter:\n\nmode := syscall.S_IFREG\nif f.IsDirectory() {\n   mode = syscall.S_IFDIR\n}\n\nand then use mode directly when creating the &os.FileInfo and get rid of this if here\n\nhttp://codereview.appspot.com/5015044/diff/5001/src/cmd/godoc/godoc.go#newcode840\nsrc/cmd/godoc/godoc.go:840: func fsReadFile(dir, name string) (full string, data []byte, err os.Error) {\ns/full/path/ ?\n\nhttp://codereview.appspot.com/5015044/diff/5001/src/cmd/godoc/godoc.go#newcode869\nsrc/cmd/godoc/godoc.go:869: // implementations for, say, Windows vs Unix, we don't\nThis means that a godoc running on a Linux machine will show those respective files even though somebody might connect to it from a Mac. Fine with me, as long as we are aware of it. Perhaps godoc should show the architecture/OS combo somewhere?\n\nhttp://codereview.appspot.com/5015044/diff/5001/src/cmd/godoc/godoc.go#newcode878\nsrc/cmd/godoc/godoc.go:878: fmt.Printf(\"pkgFiles for %s: %s\\n\", dir.Package, pkgFiles)\nthis print should probably not be here anymore",
			"disapproval": false,
			"date": "2011-09-15 17:19:55.167370",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello gri (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2011-09-15 16:26:19.956939",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-09-15 18:48:03.227306",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Sep 15, 2011 at 10:25 AM, Russ Cox <rsc@golang.org> wrote:\n> On Thu, Sep 15, 2011 at 13:19, \u00a0<gri@golang.org> wrote:\n>> This means that a godoc running on a Linux machine will show those\n>> respective files even though somebody might connect to it from a Mac.\n>\n> Yes, that's true. \u00a0If we wanted to change that,\n> it is easy to change\n>\n> \u00a0 \u00a0build.ScanDir(x)\n>\n> to\n>\n> \u00a0 \u00a0ctxt := build.DefaultContext\n> \u00a0 \u00a0ctxt.GOOS = goos\n> \u00a0 \u00a0ctxt.GOARCH = goarch\n> \u00a0 \u00a0ctxt.ScanDir(x)\n>\n> but I'm not convinced it is necessary.\n>\n>> Fine with me, as long as we are aware of it. Perhaps godoc should show\n>> the architecture/OS combo somewhere?\n>\n> One possibility would be to have ScanDir hand back\n> (in DirInfo) a list of files that were found but ignored\n> because they are for some other system.\n> If godoc saw such a list then it could, just for those\n> packages, offer a drop-down.\n>\n> For now, though, I think that having just one ENOENV\n> is better than having three, even if you can't get at\n> the other two.\n\nFine with me. Perhaps add a respective comment in the code at that\npoint as a reminder (for me).\n\n- gri\n>\n> Russ\n>\n",
			"disapproval": false,
			"date": "2011-09-15 17:31:30.662666",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Sep 15, 2011 at 13:19,  <gri@golang.org> wrote:\n> This means that a godoc running on a Linux machine will show those\n> respective files even though somebody might connect to it from a Mac.\n\nYes, that's true.  If we wanted to change that,\nit is easy to change\n\n    build.ScanDir(x)\n\nto\n\n    ctxt := build.DefaultContext\n    ctxt.GOOS = goos\n    ctxt.GOARCH = goarch\n    ctxt.ScanDir(x)\n\nbut I'm not convinced it is necessary.\n\n> Fine with me, as long as we are aware of it. Perhaps godoc should show\n> the architecture/OS combo somewhere?\n\nOne possibility would be to have ScanDir hand back\n(in DirInfo) a list of files that were found but ignored\nbecause they are for some other system.\nIf godoc saw such a list then it could, just for those\npackages, offer a drop-down.\n\nFor now, though, I think that having just one ENOENV\nis better than having three, even if you can't get at\nthe other two.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-09-15 17:25:39.727566",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello gri@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-15 18:36:40.013061",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Thanks.  Will submit once the other dust settles.\n",
			"disapproval": false,
			"date": "2011-09-15 19:14:16.074267",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=0a8353a9d1e9 ***\n\ngodoc: use go/build to find files in a package\n\nFixes issue 1156.\nFixes issue 2172.\n\nR=gri\nCC=golang-dev\nhttp://codereview.appspot.com/5015044",
			"disapproval": false,
			"date": "2011-09-15 20:49:12.312417",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5015044: godoc: use go/build to find files in a package",
	"created": "2011-09-14 18:17:39.370050",
	"patchsets": [
		1,
		2001,
		5001,
		11001,
		4002
	],
	"modified": "2011-09-15 20:49:13.287057",
	"closed": true,
	"issue": 5015044
}