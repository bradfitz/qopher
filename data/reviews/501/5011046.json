{
	"description": "build: add build comments to core packages\n\nThe go/build package already recognizes\nsystem-specific file names like\n\n        mycode_darwin.go\n        mycode_darwin_386.go\n        mycode_386.s\n\nHowever, it is also common to write files that\napply to multiple architectures, so a recent CL added\nto go/build the ability to process comments\nlisting a set of conditions for building.  For example:\n\n        // +build darwin freebsd openbsd/386\n\nsays that this file should be compiled only on\nOS X, FreeBSD, or 32-bit x86 OpenBSD systems.\n\nThese conventions are not yet documented\n(hence this long CL description).\n\nThis CL adds build comments to the multi-system\nfiles in the core library, a step toward making it\npossible to use go/build to build them.\n\nWith this change go/build can handle crypto/rand,\nexec, net, path/filepath, os/user, and time.\n\nos and syscall need additional adjustments.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"gri@golang.org",
		"r@google.com",
		"gustavo@niemeyer.net"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"gri@golang.org",
				"r@google.com",
				"gustavo@niemeyer.net",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org, gri@golang.org, r@google.com, gustavo@niemeyer.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-15 18:58:05.906905",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"gri@golang.org",
				"r@google.com",
				"gustavo@niemeyer.net",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-09-15 19:29:33.277829",
			"approval": true
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Sep 15, 2011, at 10:07 AM, Robert Griesemer wrote:\n\n> it does match the //line comments we already have (though I wish it\n> were // line, personally)\n\nthat begs the question.\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2011-09-15 17:15:58.687157",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> a precedent for a completely unrelated concept, so not really a precedent at all. i think the test dir is a much more applicable precedent.\n\nIn terms of precedent, there's also cgo's:\n\n// #cgo linux CFLAGS: ...\n\nSo the analogy is not far-fetched, FWIW:\n\n// #build linux\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I never filed a patent.\n",
			"disapproval": false,
			"date": "2011-09-15 17:39:01.153432",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2011-09-15 16:26:05.093809",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Sep 15, 2011, at 10:21 AM, Russ Cox wrote:\n\n> On Thu, Sep 15, 2011 at 13:19, Rob 'Commander' Pike <r@google.com> wrote:\n>> there's also the way the tests do it, where the first line is the magic one.\n> \n> true, although for //line that's not an option,\n> because they are by definition interspersed\n> with the rest of the source file.\n\ni'm not talking about //line\n\n> the current CL requires that the //build comment\n> be before the package statement, just so you\n> don't have to look through the entire file.\n> it could require it to be the first line, although\n> i do like not having the copyright in the\n> middle of the file.\n\nfor it to be in the middle of the file, the file would have to consist of one executable line after the copyright.\n\nmoreover, i don't see what this concept has to do with the package clause and therefore see little reason other than pragmatism to attach the marker there.\n\n> i'm inclined to leave it as //build for now,\n> since //line has already set a precedent.\n\na precedent for a completely unrelated concept, so not really a precedent at all. i think the test dir is a much more applicable precedent.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-09-15 17:31:42.003031",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "do they have to be\n\n//build\n\nas opposed to\n\n// build\n\n?",
			"disapproval": false,
			"date": "2011-09-15 17:04:21.078483",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "ok, you've convinced me. but please allow for a little more free-formness, which means not using \"build\" but something more specific, like \"-build\" or \":build\", and allow spaces.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-09-15 18:24:28.896445",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "it does match the //line comments we already have (though I wish it\nwere // line, personally)\n- gri\n\nOn Thu, Sep 15, 2011 at 10:04 AM,  <r@golang.org> wrote:\n> do they have to be\n>\n> //build\n>\n> as opposed to\n>\n> // build\n>\n> ?\n>\n> http://codereview.appspot.com/5011046/\n>\n",
			"disapproval": false,
			"date": "2011-09-15 17:08:08.119660",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Sep 15, 2011 at 13:04,  <r@golang.org> wrote:\n> do they have to be\n>\n> //build\n>\n> as opposed to\n>\n> // build\n\nas implemented, yes, same as //line.\n\nin both cases, it makes it unlikely that you'll just\npick off a random comment that happens\nto start with a common word and start applying\nmeaning to it.\n",
			"disapproval": false,
			"date": "2011-09-15 17:09:05.768807",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "there's always // pragma line\n",
			"disapproval": false,
			"date": "2011-09-15 17:16:41.886651",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Sep 15, 2011, at 10:09 AM, Russ Cox wrote:\n\n> On Thu, Sep 15, 2011 at 13:04,  <r@golang.org> wrote:\n>> do they have to be\n>> \n>> //build\n>> \n>> as opposed to\n>> \n>> // build\n> \n> as implemented, yes, same as //line.\n> \n> in both cases, it makes it unlikely that you'll just\n> pick off a random comment that happens\n> to start with a common word and start applying\n> meaning to it.\n\nfair enough (although i first typed that as gsit rnouh)\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-09-15 17:16:59.513313",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "there's also the way the tests do it, where the first line is the magic one.  makes the check for comments easier and allows more free-form commentary.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-09-15 17:19:42.497583",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Sep 15, 2011 at 13:19, Rob 'Commander' Pike <r@google.com> wrote:\n> there's also the way the tests do it, where the first line is the magic one.\n\ntrue, although for //line that's not an option,\nbecause they are by definition interspersed\nwith the rest of the source file.\n\nthe current CL requires that the //build comment\nbe before the package statement, just so you\ndon't have to look through the entire file.\nit could require it to be the first line, although\ni do like not having the copyright in the\nmiddle of the file.\n\ni'm inclined to leave it as //build for now,\nsince //line has already set a precedent.\n\nruss\n",
			"disapproval": false,
			"date": "2011-09-15 17:21:56.064390",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Sep 15, 2011 at 13:38, Gustavo Niemeyer <gustavo@niemeyer.net> wrote:\n> In terms of precedent, there's also cgo's:\n>\n> // #cgo linux CFLAGS: ...\n\nthat is completely different.\nno one uses // for those, and they are only\ninterpeted in the doc comment attached\nto import \"C\".  they are like\n\n/*\n#cgo CFLAGS: -m32\n#include <stdio.h>\n*/\nimport \"C\"\n",
			"disapproval": false,
			"date": "2011-09-15 17:40:29.348855",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "giving line 1 special meaning doesn't help when the\nsecond thing like this comes along.\n\nalso people expect that the copyright notice is\nboilerplate and skip over it.  putting meaningful lines\nabove it hides them.  having to add the copyright\nnotices to the tests exposed the problem with first-line magic.\n\ni think the requirements for the syntax are:\n(1) allow some unrelated leading comments such as copyright\n(2) very low chance of falsely identifying an ordinary\ncomment as a directive.\n(3) can be applied without parsing the file, so that\nthe rule could even apply to C files.\n\nthe current rule is that (rule A) in a file's\nleading run of comments and blank lines,\na line beginning with //build (no /*)\nis taken as a build directive.\n(we've done this before with //line and //gotest,\nso i didn't expect this to be contentious.)\n\nwe could change the rule to be that (rule B) in a file's\nleading run of comments and blank lines\nthat is followed by a blank line,\na line beginning with \"// build\" (no /*, no tabs)\nis taken as a build directive.\n\nthus this:\n\n---\n// Copyright...\n// whatever\n\n// whatever\n// build foo\n\npackage main\n---\n\ncontains a build comment but this\n\n---\n// Copyright...\n// whatever\n\n// whatever\n// build foo\npackage main\n---\n\ndoes not (the last few comments are not followed\nby a blank line so they are not part of the leading run).\n\ni should not have mentioned the package clause\nin my last mail.  it's just a way to identify 'the run of\ncomments and blank lines at the top of a file' in a\nGo program, since the package clause is always\nthe first non-comment.\n\nruss\n",
			"disapproval": false,
			"date": "2011-09-15 18:15:18.553943",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"gri@golang.org",
				"r@google.com",
				"gustavo@niemeyer.net",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=6444b585d1ef ***\n\nbuild: add build comments to core packages\n\nThe go/build package already recognizes\nsystem-specific file names like\n\n        mycode_darwin.go\n        mycode_darwin_386.go\n        mycode_386.s\n\nHowever, it is also common to write files that\napply to multiple architectures, so a recent CL added\nto go/build the ability to process comments\nlisting a set of conditions for building.  For example:\n\n        // +build darwin freebsd openbsd/386\n\nsays that this file should be compiled only on\nOS X, FreeBSD, or 32-bit x86 OpenBSD systems.\n\nThese conventions are not yet documented\n(hence this long CL description).\n\nThis CL adds build comments to the multi-system\nfiles in the core library, a step toward making it\npossible to use go/build to build them.\n\nWith this change go/build can handle crypto/rand,\nexec, net, path/filepath, os/user, and time.\n\nos and syscall need additional adjustments.\n\nR=golang-dev, r, gri, r, gustavo\nCC=golang-dev\nhttp://codereview.appspot.com/5011046",
			"disapproval": false,
			"date": "2011-09-15 20:49:00.552954",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5011046: build: add build comments to core packages",
	"created": "2011-09-14 18:18:08.547582",
	"patchsets": [
		1,
		2001,
		5001,
		10002,
		20001
	],
	"modified": "2011-09-15 20:49:01.335837",
	"closed": true,
	"issue": 5011046
}