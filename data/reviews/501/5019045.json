{
	"description": "go: documentation for new command\n\n*** This is a design review, not a code review. ***\nFeel free to reply to the mail instead of picking out\nindividual lines to comment on in Rietveld.\n\nThis command, go, will replace both gomake/make and goinstall.\nMake will stick around only for building our C commands\nand perhaps package runtime.\n\nIn normal use while developing you'd run commands like\n\n        go compile\n        go test\n        go clean\n        go install\n\nwhich apply to the package in the current directory.\n\nTo operate on code written by others, you add an explicit\npackage path:\n\n        go get gopath.googlecode.com/hg/oauth\n        go test gopath.googlecode.com/hg/oauth\n\nThe script.txt file is a script showing the output of\nthe various help commands that the command has.\n(Right now, all the command can do is print help messages.)",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"kevlar@google.com",
		"r@golang.org",
		"edsrzf@gmail.com",
		"gri@golang.org",
		"adg@golang.org",
		"rogpeppe@gmail.com",
		"r@google.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2011-09-15 21:07:23.740933",
			"approval": false
		},
		{
			"sender": "edsrzf@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I like the general idea.\n\nYou've probably already thought about it, but it seems like the \"go\ndoc\" command is missing.\n\n- Evan\n",
			"disapproval": false,
			"date": "2011-09-15 21:40:21.462101",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 16 September 2011 07:41, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n>\n> build, install, fetch?\n> git also uses \"fetch\" to mean \"hit the network\"\n\nIt's troubling because I wouldn't expect \"fetch\" to build and install. :/\n",
			"disapproval": false,
			"date": "2011-09-15 22:32:17.688271",
			"approval": false
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Very cool.  I like it.  I put some comments inline as I was reading through the help file.\n\nOn a completely unrelated note...\nThis makes me want a \"subcommand\" feature of the \"flag\" package that will allow any command to easily do this sort of thing.\n\npackage flag\nfunc SubCommand(name string, flags *FlagSet, func(name string, flags *FlagSet) os.Error)\n\nor something.\n\nhttp://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt\nFile src/cmd/go/script.txt (right):\n\nhttp://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt#newcode32\nsrc/cmd/go/script.txt:32: usage: go build [-n] [-v] [importpath...]\nI'm curious, with an unset GOPATH, would this be able to build a package without a Makefile using the immediate set of *.go files?\n\nhttp://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt#newcode130\nsrc/cmd/go/script.txt:130: sqlite /home/rsc/src/gosqlite.googlecode.com/hg/sqlite\nVery cool.\n\nhttp://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt#newcode148\nsrc/cmd/go/script.txt:148: The -json flag causes the package data to be printed in JSON format.\nnit: does json override, complement, or yield to -f '...'?\n\nhttp://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt#newcode154\nsrc/cmd/go/script.txt:154: usage: go test [importpath...]\nan -r option to recursively test dependencies would be really nifty.\n\nhttp://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt#newcode239\nsrc/cmd/go/script.txt:239: in the list.\nWhat would be really cool would be a \"go init\" that (interactively?) initializes GOPATH directories that do not have this structure or, if no GOPATH is set, initializes the current directory as a GOPATH and prints out a message about what GOPATH to set in your startup file.\n\nYeah, that would basically be \"mkdir -p src/ bin/ pkg/\"... bonus points, though, if it also moved any existing directories under src.\n\nhttp://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt#newcode260\nsrc/cmd/go/script.txt:260: lists all the packages on the local system.\nAwesome.",
			"disapproval": false,
			"date": "2011-09-15 21:28:44.164289",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt\nFile src/cmd/go/script.txt (right):\n\nhttp://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt#newcode13\nsrc/cmd/go/script.txt:13: install     download and install packages and dependencies\n\"install\" meaning something different in its own definition could be confusing.\n\nespecially combined with \"build\" above, is defined as \"compile\" and \"install\" --- which install?  I could understand people being confusing, thinking that a build also did a download.\n\nalso, does build do a network fetch if that's a dependency?  or is purely a local operation?\n\nhttp://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt#newcode122\nsrc/cmd/go/script.txt:122: usage: go list [-f format] [-json] [importpath...]\ncool!",
			"disapproval": false,
			"date": "2011-09-15 21:25:33.218895",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"kevlar@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt\nFile src/cmd/go/script.txt (right):\n\nhttp://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt#newcode32\nsrc/cmd/go/script.txt:32: usage: go build [-n] [-v] [importpath...]\n[-n|-v] ?\nit's obvious what you mean but -n and -v interact according to their descriptions.\n\nif you use my rewrite below you don't need this\n\nhttp://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt#newcode40\nsrc/cmd/go/script.txt:40: The -v flag causes go build to print commands as they are run.\nmaybe\n\nThe -n flag prints the commands but does not run them.\nThe -v flag prints the commands.\n\n\n\nthis issue comes up repeatedly.\n\nhttp://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt#newcode54\nsrc/cmd/go/script.txt:54: The -nuke flag causes clean to remove the installed package binaries too.\nnuke is a poor word. maybe -install (as in clean the installed version too, or as in \"minus install\").\n\nhttp://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt#newcode62\nsrc/cmd/go/script.txt:62: Compiles compiles the packages named by the import paths,\ns/s//\n\nhttp://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt#newcode64\nsrc/cmd/go/script.txt:64: package binaries.\nbinaries is a loaded word. \"libraries and/or binaries\"? still clunky.  maybe just s/resulting package binaries/result./\n\nhttp://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt#newcode90\nsrc/cmd/go/script.txt:90: Fmt runs the gofmt -w command on the packages named by the import paths.\nruns the command 'gofmt -w' ...\n\nhttp://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt#newcode92\nsrc/cmd/go/script.txt:92: For more about gofmt, see 'godoc gofmt'.\ns/see/run/\n\nhttp://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt#newcode104\nsrc/cmd/go/script.txt:104: After downloading the code, go install looks for a tag beginning\nit's hard to parse with the go word. i think you want to quote all these in the prose: 'go install' etc.\n\nhttp://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt#newcode130\nsrc/cmd/go/script.txt:130: sqlite /home/rsc/src/gosqlite.googlecode.com/hg/sqlite\n--,.s/rsc/you/ or maybe $HOME or something. this text looks like literal output when it's just an example, and that's confusing\n\nhttp://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt#newcode135\nsrc/cmd/go/script.txt:135: being passed to the template is:\nnice!\n\nhttp://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt#newcode164\nsrc/cmd/go/script.txt:164: followed by gotest output for each failed package.\nso the list comes out first for all packages, and then after the full list we get the logs? that's what this says but i don't think it's what you mean\n\nhttp://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt#newcode182\nsrc/cmd/go/script.txt:182: For more about govet, see 'godoc govet'.\ns/see/run/\n\nhttp://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt#newcode203\nsrc/cmd/go/script.txt:203: Like in the Go tree, each target operating system and\ns/Like/As/\n\nhttp://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt#newcode207\nsrc/cmd/go/script.txt:207: If D is a directory listed in the GOPATH, a package with\ns/D/DIR/\n\nhttp://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt#newcode251\nsrc/cmd/go/script.txt:251: Otherwise, the import path p denotes the package found in\nyou used D up top. i suggest using caps here too\n\nhttp://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt#newcode343\nsrc/cmd/go/script.txt:343: Go attempts to download the version of the package appropriate\ns/Go/The go command/",
			"disapproval": false,
			"date": "2011-09-15 21:28:58.363784",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Sep 15, 2011 at 17:25,  <bradfitz@golang.org> wrote:\n> \"install\" meaning something different in its own definition could be\n> confusing.\n>\n> especially combined with \"build\" above, is defined as \"compile\" and\n> \"install\" --- which install? \u00a0I could understand people being confusing,\n> thinking that a build also did a download.\n>\n> also, does build do a network fetch if that's a dependency? \u00a0or is\n> purely a local operation?\n\nwe've been struggling with these names.\nthe names compile + build are a little too similar.\ni think there are three separate operations\npeople will want to invoke:\n\n6g\n6g+cp\nhg clone+6g+cp\n\nright now they are called compile, build, and install.\nif we had a better name for the last one, then\nwe could make the first two build and install.\n\nthe advantage to the current meaning of install\nis that 'go install' == 'goinstall' at least the way\npeople think goinstall works.  (it's actually closer\nto 'goinstall -u'.)\n\nruss\n",
			"disapproval": false,
			"date": "2011-09-15 21:29:56.407929",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Sep 15, 2011 at 2:29 PM, Russ Cox <rsc@golang.org> wrote:\n\n> On Thu, Sep 15, 2011 at 17:25,  <bradfitz@golang.org> wrote:\n> > \"install\" meaning something different in its own definition could be\n> > confusing.\n> >\n> > especially combined with \"build\" above, is defined as \"compile\" and\n> > \"install\" --- which install?  I could understand people being confusing,\n> > thinking that a build also did a download.\n> >\n> > also, does build do a network fetch if that's a dependency?  or is\n> > purely a local operation?\n>\n> we've been struggling with these names.\n> the names compile + build are a little too similar.\n> i think there are three separate operations\n> people will want to invoke:\n>\n> 6g\n> 6g+cp\n> hg clone+6g+cp\n>\n> right now they are called compile, build, and install.\n> if we had a better name for the last one, then\n> we could make the first two build and install.\n>\n> the advantage to the current meaning of install\n> is that 'go install' == 'goinstall' at least the way\n> people think goinstall works.  (it's actually closer\n> to 'goinstall -u'.)\n>\n\nbuild, install, fetch?\n\ngit also uses \"fetch\" to mean \"hit the network\"\n",
			"disapproval": false,
			"date": "2011-09-15 21:41:18.565466",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "and so is: go run\n\n(which I think should be just: go)\n\n- gri\n\nOn Thu, Sep 15, 2011 at 2:40 PM, Evan Shaw <edsrzf@gmail.com> wrote:\n> I like the general idea.\n>\n> You've probably already thought about it, but it seems like the \"go\n> doc\" command is missing.\n>\n> - Evan\n>\n",
			"disapproval": false,
			"date": "2011-09-15 21:41:51.053316",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"kevlar@google.com",
				"r@golang.org",
				"edsrzf@gmail.com",
				"gri@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt\nFile src/cmd/go/script.txt (right):\n\nhttp://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt#newcode54\nsrc/cmd/go/script.txt:54: The -nuke flag causes clean to remove the installed package binaries too.\nOn 2011/09/15 21:28:58, r wrote:\n> nuke is a poor word. maybe -install (as in clean the installed version too, or\n> as in \"minus install\").\n\n-targ or -obj or -all or -dest ?\n\nhttp://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt#newcode101\nsrc/cmd/go/script.txt:101: Install downloads and installs the packages named by the import paths,\nThis is equivalent to \"goinstall -u\", right?\n\nI suggest a flag that -only updates the specified import path (and not its dependencies).",
			"disapproval": false,
			"date": "2011-09-15 21:57:53.118167",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"kevlar@google.com",
				"r@golang.org",
				"edsrzf@gmail.com",
				"gri@golang.org",
				"adg@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt\nFile src/cmd/go/script.txt (right):\n\nhttp://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt#newcode40\nsrc/cmd/go/script.txt:40: The -v flag causes go build to print commands as they are run.\n+1\n\nhttp://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt#newcode54\nsrc/cmd/go/script.txt:54: The -nuke flag causes clean to remove the installed package binaries too.\n+1\n\nhttp://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt#newcode54\nsrc/cmd/go/script.txt:54: The -nuke flag causes clean to remove the installed package binaries too.\ni *think* i'd go for -install - being a flag used elsewhere in this command , it has a particular resonance when used in conjunction with 'go clean'.\n\nfollowed by -all.\n\nawkward question: does it clean dependencies too?\nif not then:\n  go install p\n  go uninstall p\nmay leave many packages still installed.\n\nif so then cleaning dependencies may break existing\npackages that share them.\n\nhttp://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt#newcode156\nsrc/cmd/go/script.txt:156: Test runs gotest to test the packages named by the import paths.\ndoes it test their dependencies too?\nit would be useful to be able to install a package and test it and its dependencies without testing all packages in $GOPATH or manually enumerating the dependencies.\n\nin fact, a way of printing a package's dependencies would be useful anyway.",
			"disapproval": false,
			"date": "2011-09-16 00:49:16.311097",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Sep 15, 2011 at 17:28, <kevlar@google.com> wrote:\n\n> This makes me want a \"subcommand\" feature of the \"flag\" package that\n> will allow any command to easily do this sort of thing.\n>\n\nIt is pretty easy with what the flag package already supports.\nLook at the code once I check it in.\n",
			"disapproval": false,
			"date": "2011-09-28 16:39:00.523578",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Sep 15, 2011 at 17:28, <r@golang.org> wrote:\n\n> http://codereview.appspot.com/**5019045/diff/5001/src/cmd/go/**\n> script.txt#newcode54<http://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt#newcode54>\n> src/cmd/go/script.txt:54: The -nuke flag causes clean to remove the\n> installed package binaries too.\n> nuke is a poor word. maybe -install (as in clean the installed version\n> too, or as in \"minus install\").\n>\n> http://codereview.appspot.com/**5019045/diff/5001/src/cmd/go/**\n> script.txt#newcode62<http://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt#newcode62>\n> src/cmd/go/script.txt:62: Compiles compiles the packages named by the\n> import paths,\n> s/s//\n>\n\nThere are multiple paths in the general case.\n\n\n> http://codereview.appspot.com/**5019045/diff/5001/src/cmd/go/**\n> script.txt#newcode164<http://codereview.appspot.com/5019045/diff/5001/src/cmd/go/script.txt#newcode164>\n> src/cmd/go/script.txt:164: followed by gotest output for each failed\n> package.\n> so the list comes out first for all packages, and then after the full\n> list we get the logs? that's what this says but i don't think it's what\n> you mean\n>\n\nIt is what I mean: a summary and then failure details.\nWhen I am dealing with lots of tests (like run.bash)\nthe most annoying part is having to scroll through the\nlist to find the scattered failure details as I fix things.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-09-28 17:01:49.386175",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": ">> src/cmd/go/script.txt:169: Version prints the Go version, as reported by\n>> runtime.Version.\n>> this will be of the go binary, right? is that what we want, or do we\n>> want the repo's version?\n>>\n>> They are assumed to be the same. \u00a0If you are using Go r60\n>> you should be using the 'go' binary and compilers and libraries\n>> from r60.\n>\n> that assumption sounds like a bug waiting to happen. maybe show both?\n\nThat's all there is.  Ordinary users won't have a Go repository checked out.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-09-28 19:39:06.522024",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"kevlar@google.com",
				"r@golang.org",
				"edsrzf@gmail.com",
				"gri@golang.org",
				"adg@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, kevlar@google.com, r@golang.org, edsrzf@gmail.com, gri@golang.org, adg@golang.org, rogpeppe@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-28 17:07:35.274210",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"kevlar@google.com",
				"r@golang.org",
				"edsrzf@gmail.com",
				"gri@golang.org",
				"adg@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5019045/diff/15001/src/cmd/go/script.txt\nFile src/cmd/go/script.txt (right):\n\nhttp://codereview.appspot.com/5019045/diff/15001/src/cmd/go/script.txt#newcode4\nsrc/cmd/go/script.txt:4: go manages Go source code.\nThe go command manages Go source code.\n\nhttp://codereview.appspot.com/5019045/diff/15001/src/cmd/go/script.txt#newcode19\nsrc/cmd/go/script.txt:19: Use \"go help [command]\" for more information about a command.\ns/a/that/\nfor consistency\n\nhttp://codereview.appspot.com/5019045/diff/15001/src/cmd/go/script.txt#newcode50\nsrc/cmd/go/script.txt:50: but by default it does not remove the installed package binaries.\nbuild does dependencies. does clean too? be clear. can i undo a go build?\n\nhttp://codereview.appspot.com/5019045/diff/15001/src/cmd/go/script.txt#newcode79\nsrc/cmd/go/script.txt:79: See also: go fmt, go vet.\nwhat about flags for gofix? where do they go in the command line? ditto for other such.\n\nhttp://codereview.appspot.com/5019045/diff/15001/src/cmd/go/script.txt#newcode104\nsrc/cmd/go/script.txt:104: version it can find.  Otherwise, it uses the default version for\ni don't really know what \"latest earlier\" means. time stamps?\n\nhttp://codereview.appspot.com/5019045/diff/15001/src/cmd/go/script.txt#newcode156\nsrc/cmd/go/script.txt:156: test compress/gzip\ninconsistent formatting\n\nhttp://codereview.appspot.com/5019045/diff/15001/src/cmd/go/script.txt#newcode169\nsrc/cmd/go/script.txt:169: Version prints the Go version, as reported by runtime.Version.\nthis will be of the go binary, right? is that what we want, or do we want the repo's version?\n\nhttp://codereview.appspot.com/5019045/diff/15001/src/cmd/go/script.txt#newcode233\nsrc/cmd/go/script.txt:233: but new packages are always downloaded into the first directory\ns/download/&ed/\n\nhttp://codereview.appspot.com/5019045/diff/15001/src/cmd/go/script.txt#newcode248\nsrc/cmd/go/script.txt:248: environment variable (run 'go help gopath').\ns/run/see/\n\nhttp://codereview.appspot.com/5019045/diff/15001/src/cmd/go/script.txt#newcode269\nsrc/cmd/go/script.txt:269: An import path (run 'go help importpath') denotes a package\ns/run/see/\n\nhttp://codereview.appspot.com/5019045/diff/15001/src/cmd/go/script.txt#newcode338\nsrc/cmd/go/script.txt:338: The 'go' command attempts to download the version of the\ns/'//g ?",
			"disapproval": false,
			"date": "2011-09-28 18:05:49.190920",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": ">\n> http://codereview.appspot.com/**5019045/diff/15001/src/cmd/go/**\n> script.txt#newcode50<http://codereview.appspot.com/5019045/diff/15001/src/cmd/go/script.txt#newcode50>\n> src/cmd/go/script.txt:50: but by default it does not remove the\n> installed package binaries.\n> build does dependencies. does clean too? be clear. can i undo a go\n> build?\n>\n\nNo, not in this round.  That requires more care.\n\nhttp://codereview.appspot.com/**5019045/diff/15001/src/cmd/go/**\n> script.txt#newcode79<http://codereview.appspot.com/5019045/diff/15001/src/cmd/go/script.txt#newcode79>\n> src/cmd/go/script.txt:79: See also: go fmt, go vet.\n> what about flags for gofix? where do they go in the command line? ditto\n> for other such.\n>\n\nI'm not proposing to replace the existing tools, only to\nmake it easy to run them on a list of packages.\nTo pass additional flags, you have to run the tool\nin question by hand.\n\n\n> http://codereview.appspot.com/**5019045/diff/15001/src/cmd/go/**\n> script.txt#newcode104<http://codereview.appspot.com/5019045/diff/15001/src/cmd/go/script.txt#newcode104>\n> src/cmd/go/script.txt:104: version it can find.  Otherwise, it uses the\n> default version for\n> i don't really know what \"latest earlier\" means. time stamps?\n>\n\nIt is defined by goinstall.  That part will come later.\nIt means that if you are looking for r59 and r57, r58, and r60\nare available, it uses r58.\n\n\n> http://codereview.appspot.com/**5019045/diff/15001/src/cmd/go/**\n> script.txt#newcode169<http://codereview.appspot.com/5019045/diff/15001/src/cmd/go/script.txt#newcode169>\n> src/cmd/go/script.txt:169: Version prints the Go version, as reported by\n> runtime.Version.\n> this will be of the go binary, right? is that what we want, or do we\n> want the repo's version?\n>\n\nThey are assumed to be the same.  If you are using Go r60\nyou should be using the 'go' binary and compilers and libraries\nfrom r60.\n\n\n> http://codereview.appspot.com/**5019045/diff/15001/src/cmd/go/**\n> script.txt#newcode233<http://codereview.appspot.com/5019045/diff/15001/src/cmd/go/script.txt#newcode233>\n> src/cmd/go/script.txt:233: but new packages are always downloaded into\n> the first directory\n> s/download/&ed/\n>\n\n?\n\n\n> http://codereview.appspot.com/**5019045/diff/15001/src/cmd/go/**\n> script.txt#newcode248<http://codereview.appspot.com/5019045/diff/15001/src/cmd/go/script.txt#newcode248>\n> src/cmd/go/script.txt:248: environment variable (run 'go help gopath').\n> s/run/see/\n>\n\nI changed all the see to run based on a comment\nyou made in the last round, except for 'See also'.\nI am happy to do either.  Which?\n\nRuss\n",
			"disapproval": false,
			"date": "2011-09-28 18:23:35.539945",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"kevlar@google.com",
				"r@golang.org",
				"edsrzf@gmail.com",
				"gri@golang.org",
				"adg@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, kevlar@google.com, r@golang.org, edsrzf@gmail.com, gri@golang.org, adg@golang.org, rogpeppe@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-28 18:23:49.807115",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Sep 28, 2011, at 11:23 AM, Russ Cox wrote:\n\n> http://codereview.appspot.com/5019045/diff/15001/src/cmd/go/script.txt#newcode50\n> src/cmd/go/script.txt:50: but by default it does not remove the\n> installed package binaries.\n> build does dependencies. does clean too? be clear. can i undo a go\n> build?\n> \n> No, not in this round.  That requires more care.\n\nok, but say so.\n\n> \n> http://codereview.appspot.com/5019045/diff/15001/src/cmd/go/script.txt#newcode79\n> src/cmd/go/script.txt:79: See also: go fmt, go vet.\n> what about flags for gofix? where do they go in the command line? ditto\n> for other such.\n> \n> I'm not proposing to replace the existing tools, only to\n> make it easy to run them on a list of packages.\n> To pass additional flags, you have to run the tool\n> in question by hand.\n\nok, but say so.\n\n> http://codereview.appspot.com/5019045/diff/15001/src/cmd/go/script.txt#newcode104\n> src/cmd/go/script.txt:104: version it can find.  Otherwise, it uses the\n> default version for\n> i don't really know what \"latest earlier\" means. time stamps?\n> \n> It is defined by goinstall.  That part will come later.\n> It means that if you are looking for r59 and r57, r58, and r60\n> are available, it uses r58.\n\nit's still not clear where the information comes from or how it's interpreted.\n\n> \n> http://codereview.appspot.com/5019045/diff/15001/src/cmd/go/script.txt#newcode169\n> src/cmd/go/script.txt:169: Version prints the Go version, as reported by\n> runtime.Version.\n> this will be of the go binary, right? is that what we want, or do we\n> want the repo's version?\n> \n> They are assumed to be the same.  If you are using Go r60\n> you should be using the 'go' binary and compilers and libraries\n> from r60.\n\nthat assumption sounds like a bug waiting to happen. maybe show both?\n\n> \n> http://codereview.appspot.com/5019045/diff/15001/src/cmd/go/script.txt#newcode233\n> src/cmd/go/script.txt:233: but new packages are always downloaded into\n> the first directory\n> s/download/&ed/\n> \n> ?\n> \n> http://codereview.appspot.com/5019045/diff/15001/src/cmd/go/script.txt#newcode248\n> src/cmd/go/script.txt:248: environment variable (run 'go help gopath').\n> s/run/see/\n> \n> I changed all the see to run based on a comment\n> you made in the last round, except for 'See also'.\n> I am happy to do either.  Which?\n\nsorry, i'm vacillating i guess. run sounds like an order; see sounds like a suggestion but is a little imprecise. today i vote for see.\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2011-09-28 18:28:10.062975",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"kevlar@google.com",
				"r@golang.org",
				"edsrzf@gmail.com",
				"gri@golang.org",
				"adg@golang.org",
				"rogpeppe@gmail.com",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, kevlar@google.com, r@golang.org, edsrzf@gmail.com, gri@golang.org, adg@golang.org, rogpeppe@gmail.com, r@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-28 19:39:24.870613",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"kevlar@google.com",
				"r@golang.org",
				"edsrzf@gmail.com",
				"gri@golang.org",
				"adg@golang.org",
				"rogpeppe@gmail.com",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM from a design perspective\n\nhttp://codereview.appspot.com/5019045/diff/24001/src/cmd/go/script.txt\nFile src/cmd/go/script.txt (right):\n\nhttp://codereview.appspot.com/5019045/diff/24001/src/cmd/go/script.txt#newcode54\nsrc/cmd/go/script.txt:54: TODO: Clean does not remove dependencies of the packages.\ns/remove/clean/ ?\n\nhttp://codereview.appspot.com/5019045/diff/24001/src/cmd/go/script.txt#newcode94\nsrc/cmd/go/script.txt:94: To run govet with specific options, run govet itself.\ns/vet/fmt/g",
			"disapproval": false,
			"date": "2011-09-28 19:43:49.656763",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"kevlar@google.com",
				"r@golang.org",
				"edsrzf@gmail.com",
				"gri@golang.org",
				"adg@golang.org",
				"rogpeppe@gmail.com",
				"r@google.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=36826746370e ***\n\ngo: documentation for new command\n\n*** This is a design review, not a code review. ***\nFeel free to reply to the mail instead of picking out\nindividual lines to comment on in Rietveld.\n\nThis command, go, will replace both gomake/make and goinstall.\nMake will stick around only for building our C commands\nand perhaps package runtime.\n\nIn normal use while developing you'd run commands like\n\n        go compile\n        go test\n        go clean\n        go install\n\nwhich apply to the package in the current directory.\n\nTo operate on code written by others, you add an explicit\npackage path:\n\n        go get gopath.googlecode.com/hg/oauth\n        go test gopath.googlecode.com/hg/oauth\n\nThe script.txt file is a script showing the output of\nthe various help commands that the command has.\n(Right now, all the command can do is print help messages.)\n\nR=golang-dev, bradfitz, kevlar, r, edsrzf, gri, adg, rogpeppe, r\nCC=golang-dev\nhttp://codereview.appspot.com/5019045",
			"disapproval": false,
			"date": "2011-09-28 20:00:17.882095",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5019045: go: documentation for new command",
	"created": "2011-09-15 20:59:21.190563",
	"patchsets": [
		1,
		2001,
		5001,
		15001,
		20001,
		24001,
		15003
	],
	"modified": "2011-09-28 20:00:17.882095",
	"closed": true,
	"issue": 5019045
}