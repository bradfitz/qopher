{
	"description": "net: simplify Dial, Listen, ListenPacket and those helpers",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-08 11:14:11.715780",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. Thank you.\n\nA few notes for extra credit.\n\n38      func resolveAddr(op, net, addr string, deadline time.Time) (Addr, error) {\n39              afnet, _, err := parseNetwork(net)\n40              if err != nil {\n41 MISS                 return nil, &OpError{op, net, nil, err}\n42              }\n43              if op == \"dial\" && addr == \"\" {\n44 MISS                 return nil, &OpError{op, net, nil, errMissingAddress}\n45              }\n46              switch afnet {\n47              case \"unix\", \"unixgram\", \"unixpacket\":\n48                      return ResolveUnixAddr(afnet, addr)\n49              }\n50              return resolveInternetAddr(afnet, addr, deadline)\n51      }\n\nWould it be possible to add a test case to exercise line 44 ?",
			"disapproval": false,
			"date": "2013-02-08 12:09:10.800980",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you. I think this is very close but I would like to do another round of reviews and get feedback from others as this is core stuff.\n\nhttps://codereview.appspot.com/7300065/diff/5001/src/pkg/net/dial.go\nFile src/pkg/net/dial.go (right):\n\nhttps://codereview.appspot.com/7300065/diff/5001/src/pkg/net/dial.go#newcode77\nsrc/pkg/net/dial.go:77: func Dial(net, addr string) (Conn, error) {\nI preferred the old name, resolveDialAddr(\"dial\", ...) stutters. This is not a strong objection.\n\nhttps://codereview.appspot.com/7300065/diff/5001/src/pkg/net/dial.go#newcode172\nsrc/pkg/net/dial.go:172: switch la := a.(type) {\ncan reuse a here if you like\n\nswitch a := a.(type) { ... }\n\nhttps://codereview.appspot.com/7300065/diff/5001/src/pkg/net/dial.go#newcode185\nsrc/pkg/net/dial.go:185: a, err := resolveDialAddr(\"listen\", net, laddr, noDeadline)\nresolveDialAddr(\"listen\", ... ) doesn't read as well as resolveNetAddr(\"listen\", ... ), as in \"Resolve Net Addr for Listen\"\n\nhttps://codereview.appspot.com/7300065/diff/5001/src/pkg/net/dial.go#newcode189\nsrc/pkg/net/dial.go:189: switch la := a.(type) {\nsame as L172\n\nhttps://codereview.appspot.com/7300065/diff/5001/src/pkg/net/fd_windows.go\nFile src/pkg/net/fd_windows.go (right):\n\nhttps://codereview.appspot.com/7300065/diff/5001/src/pkg/net/fd_windows.go#newcode62\nsrc/pkg/net/fd_windows.go:62: }\nIt would be awesome if dialTimeout could be shared across both unix and windows.",
			"disapproval": false,
			"date": "2013-02-08 03:35:06.646430",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=67fd3609446a ***\n\nnet: simplify Dial, Listen, ListenPacket and those helpers\n\nR=golang-dev, dave, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/7300065",
			"disapproval": false,
			"date": "2013-02-08 12:53:30.422340",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> A few notes for extra credit.\r\n\r\ngocov?\r\n",
			"disapproval": false,
			"date": "2013-02-08 12:31:06.850870",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> parseNetwork(net string) (afnet string, proto int, err error),  sounds reasonable,\n\nthanks. i think i will go with parseNetwork and resolveAddr.\n\n> Although I'm not a fan of named returns in general I agree with Brad in this case.\n\nack, i was just afraid of the shadow of shadowing.",
			"disapproval": false,
			"date": "2013-02-08 04:10:55.098080",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-02-08 01:51:48.528610",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7300065/diff/5001/src/pkg/net/dial.go\nFile src/pkg/net/dial.go (right):\n\nhttps://codereview.appspot.com/7300065/diff/5001/src/pkg/net/dial.go#newcode9\nsrc/pkg/net/dial.go:9: func parseDialNetwork(net string) (string, int, error) {\nnamed result parameters read WAY nicer.  Please keep them.",
			"disapproval": false,
			"date": "2013-02-08 03:45:16.752340",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> I preferred the old name, resolveDialAddr(\"dial\", ...) stutters.\n\nthanks. as you know I'm not good at naming things.\n\nhm, in that case do you have any good candidate for \nparseDialNetwork too?",
			"disapproval": false,
			"date": "2013-02-08 03:45:34.721650",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> hm, in that case do you have any good candidate for\r\n> parseDialNetwork too?\r\n\r\nparseNetwork(net string) (afnet string, proto int, err error),  sounds\r\nreasonable,\r\n\r\nAlthough I'm not a fan of named returns in general I agree with Brad\r\nin this case. Possibly if the function returned specific types rather\r\nthan strings and int the names could be omitted. Ultimately this is an\r\ninternal function and it's probably not worth overthinking it.\r\n",
			"disapproval": false,
			"date": "2013-02-08 03:53:55.288260",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7300065/diff/5001/src/pkg/net/dial.go\nFile src/pkg/net/dial.go (right):\n\nhttps://codereview.appspot.com/7300065/diff/5001/src/pkg/net/dial.go#newcode9\nsrc/pkg/net/dial.go:9: func parseDialNetwork(net string) (string, int, error) {\nOn 2013/02/08 03:45:16, bradfitz wrote:\n> named result parameters read WAY nicer.  Please keep them.\n\nDone.\n\nhttps://codereview.appspot.com/7300065/diff/5001/src/pkg/net/dial.go#newcode77\nsrc/pkg/net/dial.go:77: func Dial(net, addr string) (Conn, error) {\nOn 2013/02/08 03:35:06, dfc wrote:\n> I preferred the old name, resolveDialAddr(\"dial\", ...) stutters. This is not a\n> strong objection.\n\nchanged to resolveAddr\n\nhttps://codereview.appspot.com/7300065/diff/5001/src/pkg/net/dial.go#newcode172\nsrc/pkg/net/dial.go:172: switch la := a.(type) {\nOn 2013/02/08 03:35:06, dfc wrote:\n> can reuse a here if you like\n> \n> switch a := a.(type) { ... }\n\nDone.\n\nhttps://codereview.appspot.com/7300065/diff/5001/src/pkg/net/dial.go#newcode185\nsrc/pkg/net/dial.go:185: a, err := resolveDialAddr(\"listen\", net, laddr, noDeadline)\nOn 2013/02/08 03:35:06, dfc wrote:\n> resolveDialAddr(\"listen\", ... ) doesn't read as well as resolveNetAddr(\"listen\",\n> ... ), as in \"Resolve Net Addr for Listen\"\n\nDone.\n\nhttps://codereview.appspot.com/7300065/diff/5001/src/pkg/net/dial.go#newcode189\nsrc/pkg/net/dial.go:189: switch la := a.(type) {\nOn 2013/02/08 03:35:06, dfc wrote:\n> same as L172\n\nDone.",
			"disapproval": false,
			"date": "2013-02-08 11:14:36.949130",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "thanks. i will add that in following CLs.\r\n",
			"disapproval": false,
			"date": "2013-02-08 12:51:08.691620",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yup.\r\n\r\nOn Fri, Feb 8, 2013 at 11:31 PM, Mikio Hara <mikioh.mikioh@gmail.com> wrote:\r\n>> A few notes for extra credit.\r\n>\r\n> gocov?\r\n",
			"disapproval": false,
			"date": "2013-02-08 12:32:12.714260",
			"approval": false
		}
	],
	"owner_email": "mikioh.mikioh@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mikio",
	"subject": "code review 7300065: net: simplify Dial, Listen, ListenPacket and those helpers",
	"created": "2013-02-08 01:51:09.365840",
	"patchsets": [
		1,
		2001,
		5001,
		8004,
		8011
	],
	"modified": "2013-02-08 12:53:33.479230",
	"closed": true,
	"issue": 7300065
}