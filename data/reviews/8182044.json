{
	"description": "sort: new example: programmatic sort by multiple keys\nDemonstrates one way to sort a slice of structs according\nto different sort criteria, done in sequence.\n\nOne possible answer to a question that comes up often.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"adg@google.com",
		"adg@golang.org",
		"rogpeppe@gmail.com"
	],
	"reviewers": [
		"gri@golang.org"
	],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-04-01 23:29:02.244840",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"r@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"adg@google.com",
				"adg@golang.org",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "very nice",
			"disapproval": false,
			"date": "2013-04-02 16:38:43.241480",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"bradfitz@golang.org",
				"adg@google.com",
				"adg@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but i agree with gri's comments.\n\nhttps://codereview.appspot.com/8182044/diff/14001/src/pkg/sort/example_multi_test.go\nFile src/pkg/sort/example_multi_test.go (right):\n\nhttps://codereview.appspot.com/8182044/diff/14001/src/pkg/sort/example_multi_test.go#newcode67\nsrc/pkg/sort/example_multi_test.go:67: switch p, q := &ms.changes[i], &ms.changes[j]; {\ni'd factor the p and q assignment out of the loop. less work to do and you can use them in the final return too.",
			"disapproval": false,
			"date": "2013-04-02 08:49:45.552800",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-04-01 23:32:08.666190",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8182044/diff/3001/src/pkg/sort/example_multi_test.go\nFile src/pkg/sort/example_multi_test.go (right):\n\nhttps://codereview.appspot.com/8182044/diff/3001/src/pkg/sort/example_multi_test.go#newcode27\nsrc/pkg/sort/example_multi_test.go:27: // ThenBy appends the Less function to the ordering, providing a backup comparison.\n..., providing another sort key. (?)\n\nhttps://codereview.appspot.com/8182044/diff/3001/src/pkg/sort/example_multi_test.go#newcode44\nsrc/pkg/sort/example_multi_test.go:44: less    ordering // Sequence of \"less\" functions to try, in order.\ns/try/use/ (?)\n\nthere's no failure\n\nhttps://codereview.appspot.com/8182044/diff/3001/src/pkg/sort/example_multi_test.go#newcode65\nsrc/pkg/sort/example_multi_test.go:65: for k = 0; k < len(ms.less)-1; k++ {\nfor _, less := range ms.less[: len(ms.less)-1] { ...\n\n(requires at least one entry, though).\n\nhttps://codereview.appspot.com/8182044/diff/3001/src/pkg/sort/example_multi_test.go#newcode66\nsrc/pkg/sort/example_multi_test.go:66: if ms.less[k](&ms.changes[i], &ms.changes[j]) {\nperhaps\n\np, q := &ms.changes[i], &ms.changes[j]\n\nand then use p, q and q, p?\n\nalso: use a switch:\n\nswitch p, q := &ms.changes[i], &ms.changes[j]; {\ncase less(p, q):\n   return true\ncase less(q, p):\n   return false\n}",
			"disapproval": false,
			"date": "2013-04-01 23:46:55.009570",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8182044/diff/3001/src/pkg/sort/example_multi_test.go\nFile src/pkg/sort/example_multi_test.go (right):\n\nhttps://codereview.appspot.com/8182044/diff/3001/src/pkg/sort/example_multi_test.go#newcode20\nsrc/pkg/sort/example_multi_test.go:20: type ordering []func(p1, p2 *Change) bool\nthis isn't exported, so users in another package couldn't call the exported ThenBy, right?\n\nmaybe add an interface and return that from OrderedBy?",
			"disapproval": false,
			"date": "2013-04-01 23:51:38.536210",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, gri@golang.org, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-04-02 00:06:11.804340",
			"approval": false
		},
		{
			"sender": "adg@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "You call the less functions \"closures\" but they don't close over any names.\r\n\"Functions\" would be clearer I think.\r\nOn 2 Apr 2013 11:06, <r@golang.org> wrote:\r\n\r\n> Hello golang-dev@googlegroups.com, gri@golang.org, bradfitz@golang.org\r\n> (cc: golang-dev@googlegroups.com),\r\n>\r\n> Please take another look.\r\n>\r\n>\r\n> https://codereview.appspot.**com/8182044/<https://codereview.appspot.com/8182044/>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-02 00:15:05.361360",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "agreed. will update.\r\n",
			"disapproval": false,
			"date": "2013-04-02 00:29:07.987360",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"bradfitz@golang.org",
				"adg@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, gri@golang.org, bradfitz@golang.org, adg@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-04-02 00:29:17.523840",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"bradfitz@golang.org",
				"adg@google.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "There's one thing that bugs me about this example: If the user creates a zero-length Ordering o and calls o.Sort(changes) a panic\nwill be triggered. Maybe not a big deal.\n\nhttps://codereview.appspot.com/8182044/diff/14001/src/pkg/sort/example_multi_test.go\nFile src/pkg/sort/example_multi_test.go (right):\n\nhttps://codereview.appspot.com/8182044/diff/14001/src/pkg/sort/example_multi_test.go#newcode65\nsrc/pkg/sort/example_multi_test.go:65: for k = 0; k < len(ms.less)-1; k++ {\nfor _, less := range ms.less {\n\nhttps://codereview.appspot.com/8182044/diff/14001/src/pkg/sort/example_multi_test.go#newcode79\nsrc/pkg/sort/example_multi_test.go:79: return ms.less[k](&ms.changes[i], &ms.changes[j])\ns/k/len(ms.less)-1/",
			"disapproval": false,
			"date": "2013-04-02 01:04:01.825330",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"bradfitz@golang.org",
				"adg@google.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i'm not fussed about the empty-ordering thing\n\nhttps://codereview.appspot.com/8182044/diff/14001/src/pkg/sort/example_multi_test.go\nFile src/pkg/sort/example_multi_test.go (right):\n\nhttps://codereview.appspot.com/8182044/diff/14001/src/pkg/sort/example_multi_test.go#newcode65\nsrc/pkg/sort/example_multi_test.go:65: for k = 0; k < len(ms.less)-1; k++ {\nOn 2013/04/02 01:04:02, adg wrote:\n> for _, less := range ms.less {\n\nno. you don't want the last entry.\n\nhttps://codereview.appspot.com/8182044/diff/14001/src/pkg/sort/example_multi_test.go#newcode79\nsrc/pkg/sort/example_multi_test.go:79: return ms.less[k](&ms.changes[i], &ms.changes[j])\nOn 2013/04/02 01:04:02, adg wrote:\n> s/k/len(ms.less)-1/\ni like it as it is. without the range, there's no loss",
			"disapproval": false,
			"date": "2013-04-02 01:11:39.314790",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"bradfitz@golang.org",
				"adg@google.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/8182044/diff/14001/src/pkg/sort/example_multi_test.go\nFile src/pkg/sort/example_multi_test.go (right):\n\nhttps://codereview.appspot.com/8182044/diff/14001/src/pkg/sort/example_multi_test.go#newcode65\nsrc/pkg/sort/example_multi_test.go:65: for k = 0; k < len(ms.less)-1; k++ {\nOn 2013/04/02 01:11:39, r wrote:\n> On 2013/04/02 01:04:02, adg wrote:\n> > for _, less := range ms.less {\n> \n> no. you don't want the last entry.\n\nAh, I see, I misread.",
			"disapproval": false,
			"date": "2013-04-02 01:21:36.711730",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"bradfitz@golang.org",
				"adg@google.com",
				"adg@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nbut for one comment, I think\n\nhttps://codereview.appspot.com/8182044/diff/23001/src/pkg/sort/example_multi_test.go\nFile src/pkg/sort/example_multi_test.go (right):\n\nhttps://codereview.appspot.com/8182044/diff/23001/src/pkg/sort/example_multi_test.go#newcode32\nsrc/pkg/sort/example_multi_test.go:32: // OrderedBy returns a Sorter with the single Less function as the first entry.\nI think this comments needs to be updated. Or I don't understand it.",
			"disapproval": false,
			"date": "2013-04-02 16:23:36.315020",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"bradfitz@golang.org",
				"adg@google.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nwith a 2nd entry for me in the list...\n\nhttps://codereview.appspot.com/8182044/diff/14001/src/pkg/sort/example_multi_test.go\nFile src/pkg/sort/example_multi_test.go (right):\n\nhttps://codereview.appspot.com/8182044/diff/14001/src/pkg/sort/example_multi_test.go#newcode24\nsrc/pkg/sort/example_multi_test.go:24: return Ordering{less}\nI think what bothers me with this example is the way the ordering is constructed. It is cute, I admit, but I think in a real case one might just provide the comparison functions in a composite literal list - it seems somewhat verbose (almost Smalltalk-like) to construct that least with individual appends if one can just write it down in the language.\n\nSo, I guess I would expect something along the lines of:\n\nsort.Sort(By(user, language, increasingLines)(changes))\n\nfor a sort call, with:\n\nfunc By(less ...func(p1, p2 *Change)bool)) func([]Change) multiSorter\n\nThis would match the now idiomatic style\n\nsort.Sort(byFoo(list))\n\nwhere byFoo is usually a conversion. In our case, \"By\" would be a function that returns a closure producing the correct multiSorter, and it looks like a conversion.\n\nEqually interesting in terms of use of Go features, but the API is thinner.\n\nJust a thought. Maybe there's a better way.\n\nSummary: I like the overall example, but the construction of a sort call seems overly verbose for Go.\n\nhttps://codereview.appspot.com/8182044/diff/14001/src/pkg/sort/example_multi_test.go#newcode69\nsrc/pkg/sort/example_multi_test.go:69: // i < j, so we have a decision.\np < q (?), also below?\n\nhttps://codereview.appspot.com/8182044/diff/14001/src/pkg/sort/example_multi_test.go#newcode82\nsrc/pkg/sort/example_multi_test.go:82: var changes = []Change{\nHey, I want a 2nd entry, too!\n\n{\"gri\", \"Smalltalk\", 80},\n\nhttps://codereview.appspot.com/8182044/diff/14001/src/pkg/sort/example_multi_test.go#newcode116\nsrc/pkg/sort/example_multi_test.go:116: OrderedBy(user).ThenBy(increasingLines).Sort(changes)\nthis would become:\n\nSort(By(user, increasingLines)(changes))",
			"disapproval": false,
			"date": "2013-04-02 05:29:03.971060",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I agree with gri as well. But how do I factor p and q out of the loop when\r\nthey are fresh on each iteration? I don't see how to use them in the final\r\nreturn for this reason too.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-04-02 13:26:42.911760",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"bradfitz@golang.org",
				"adg@google.com",
				"adg@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, gri@golang.org, bradfitz@golang.org, adg@google.com, adg@golang.org, rogpeppe@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-04-02 15:32:40.053340",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2 April 2013 14:26, Rob Pike <r@golang.org> wrote:\r\n> I agree with gri as well. But how do I factor p and q out of the loop when\r\n> they are fresh on each iteration? I don't see how to use them in the final\r\n> return for this reason too.\r\n\r\nThey are? I'm probably being blind as usual but AFAICS\r\nall of i, j and ms.changes remain the same throughout\r\nthe call to Less.\r\n",
			"disapproval": false,
			"date": "2013-04-02 15:39:09.340000",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm the blind one. Thanks for the suggestion, which I understand now\r\nthat the scales have fallen from my eyes. Or maybe just that I'm awake\r\nnow.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-04-02 16:33:14.342490",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"bradfitz@golang.org",
				"adg@google.com",
				"adg@golang.org",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=217c86fd45c7 ***\n\nsort: new example: programmatic sort by multiple keys\nDemonstrates one way to sort a slice of structs according\nto different sort criteria, done in sequence.\n\nOne possible answer to a question that comes up often.\n\nR=golang-dev, gri, bradfitz, adg, adg, rogpeppe\nCC=golang-dev\nhttps://codereview.appspot.com/8182044",
			"disapproval": false,
			"date": "2013-04-02 16:35:35.255480",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 8182044: sort: new example: programmatic sort by multiple keys",
	"created": "2013-04-01 23:28:57.964300",
	"patchsets": [
		1,
		3001,
		10001,
		14001,
		23001,
		30001
	],
	"modified": "2013-04-02 16:38:43.375000",
	"closed": true,
	"issue": 8182044
}