{
	"description": "runtime: tune appendCrossover for arm\n\nTurns out the optimal value is 8 on cortex-A9 systems (pandaboard)\n\nbenchmark                     old ns/op    new ns/op    delta\nBenchmarkAppend                     907          908   +0.11%\nBenchmarkAppend1Byte                101          101   +0.00%\nBenchmarkAppend4Bytes               116          116   +0.00%\nBenchmarkAppend8Bytes               139          138   -0.72%\nBenchmarkAppend16Bytes              185          158  -14.59%\nBenchmarkAppend32Bytes              131          131   +0.00%\nBenchmarkAppendStr1Byte              72           72   +0.00%\nBenchmarkAppendStr4Bytes             93           93   -0.21%\nBenchmarkAppendStr8Bytes            116          116   +0.00%\nBenchmarkAppendStr16Bytes           161          125  -22.36%\nBenchmarkAppendStr32Bytes           102          102   +0.00%\nBenchmarkAppendSpecialCase          613          613   +0.00%",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org"
	],
	"reviewers": [
		"minux.ma@gmail.com"
	],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/27 11:08:19, dfc wrote:\n> Hello mailto:golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go\n\nI've also tested a Samsung Chromebook, the results are the same.",
			"disapproval": false,
			"date": "2013-04-27 12:20:53.101770",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "for a fair comparison, you need to compare threahold set to 1 (or remove the\r\ncheck and inlined memmove completely) and 16.\r\n\r\nOn Sunday, April 28, 2013, Dave Cheney wrote:\r\n\r\n> Here is the same comparison as included in the description from an\r\n> arm5 kirkwood system\r\n>\r\n> benchmark                     old ns/op    new ns/op    delta\r\n> BenchmarkAppend                     620          620   +0.00%\r\n> BenchmarkAppend1Byte                 70           70   +0.14%\r\n> BenchmarkAppend4Bytes                86           86   +0.00%\r\n> BenchmarkAppend8Bytes               108          108   +0.00%\r\n> BenchmarkAppend16Bytes              152           98  -35.39%\r\n> BenchmarkAppend32Bytes               96           96   -0.10%\r\n> BenchmarkAppendStr1Byte              58           58   +0.00%\r\n> BenchmarkAppendStr4Bytes             74           74   +0.00%\r\n> BenchmarkAppendStr8Bytes             96           96   +0.00%\r\n> BenchmarkAppendStr16Bytes           141           92  -34.26%\r\n> BenchmarkAppendStr32Bytes            88           88   +0.11%\r\n> BenchmarkAppendSpecialCase          500          500   +0.00%\r\n>\r\n> On Sun, Apr 28, 2013 at 1:55 AM, Dave Cheney <dave@cheney.net<javascript:;>>\r\n> wrote:\r\n> > I'll test ARMv6 and ARMv5 tomorrow (assuming it hasn't completely\r\n> > died), I hope they won't show a significant preference towards a\r\n> > crossover of 4. If they do, I'm inclined to ask to defer the decision\r\n> > of how we specialise code generation for various arm devices until the\r\n> > bigger problem of x87/SSE/AVX/FMA4/OMGWTFBBQ has a better solution\r\n> > than runtime probing.\r\n> >\r\n> > On Sun, Apr 28, 2013 at 1:48 AM, minux <minux.ma@gmail.com<javascript:;>>\r\n> wrote:\r\n> >>\r\n> >> On Sat, Apr 27, 2013 at 10:45 PM, Dave Cheney <dave@cheney.net<javascript:;>>\r\n> wrote:\r\n> >>>\r\n> >>> On my pandaboard, with appendCrossover set to 4, regressed the append8\r\n> >>> case as the overhead of the memmove call is more than copying 8 bytes\r\n> >>> inline.\r\n> >>\r\n> >> I merely pointed out that different cores have different best\r\n> thresholds.\r\n> >> the question is: which type of core should we optimize for?\r\n> >>\r\n> >> for example, should we consider ARMv6 or ARMv5E?\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-28 09:57:58.807450",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-04-27 14:08:25.073320",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-04-27 11:08:19.506450",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks Rob.\r\n\r\nOn Sun, Apr 28, 2013 at 12:08 AM,  <r@golang.org> wrote:\r\n> LGTM\r\n>\r\n> https://codereview.appspot.com/8863045/\r\n",
			"disapproval": false,
			"date": "2013-04-27 14:09:56.247320",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On my pandaboard, with appendCrossover set to 4, regressed the append8\r\ncase as the overhead of the memmove call is more than copying 8 bytes\r\ninline.\r\n\r\nOn Sun, Apr 28, 2013 at 12:42 AM, minux <minux.ma@gmail.com> wrote:\r\n> Result on ARM Cortex A8:\r\n> 16 vs. 8:\r\n> benchmark                    old ns/op    new ns/op    delta\r\n> BenchmarkAppend                    939          940   +0.11%\r\n> BenchmarkAppend1Byte               106          109   +2.83%\r\n> BenchmarkAppend4Bytes              124          124   +0.00%\r\n> BenchmarkAppend8Bytes              169          173   +2.37%\r\n> BenchmarkAppend16Bytes             237          153  -35.44%\r\n> BenchmarkAppend32Bytes             130          129   -0.77%\r\n> BenchmarkAppendStr1Byte             85           85   -0.58%\r\n> BenchmarkAppendStr4Bytes           105          105   +0.00%\r\n> BenchmarkAppendStr8Bytes           147          146   -0.68%\r\n> BenchmarkAppendStr16Bytes          208          143  -31.25%\r\n> BenchmarkAppendStr32Bytes          118          118   +0.00%\r\n>\r\n> 16 vs 1:\r\n> benchmark                     old ns/op    new ns/op    delta\r\n> BenchmarkAppend                     939          940   +0.11%\r\n> BenchmarkAppend1Byte                106          107   +0.94%\r\n> BenchmarkAppend4Bytes               124          126   +1.61%\r\n> BenchmarkAppend8Bytes               169          130  -23.08%\r\n> BenchmarkAppend16Bytes              237          154  -35.02%\r\n> BenchmarkAppend32Bytes              130          129   -0.77%\r\n> BenchmarkAppendStr1Byte              85           85   +0.12%\r\n> BenchmarkAppendStr4Bytes            105          115   +9.52%\r\n> BenchmarkAppendStr8Bytes            147          120  -18.37%\r\n> BenchmarkAppendStr16Bytes           208          142  -31.73%\r\n> BenchmarkAppendStr32Bytes           118          119   +0.85%\r\n> BenchmarkAppendSpecialCase          712          714   +0.28%\r\n>\r\n> 8 vs 1:\r\n> benchmark                     old ns/op    new ns/op    delta\r\n> BenchmarkAppend                     940          940   +0.00%\r\n> BenchmarkAppend1Byte                109          107   -1.83%\r\n> BenchmarkAppend4Bytes               124          126   +1.61%\r\n> BenchmarkAppend8Bytes               173          130  -24.86%\r\n> BenchmarkAppend16Bytes              153          154   +0.65%\r\n> BenchmarkAppend32Bytes              129          129   +0.00%\r\n> BenchmarkAppendStr1Byte              85           85   +0.71%\r\n> BenchmarkAppendStr4Bytes            105          115   +9.52%\r\n> BenchmarkAppendStr8Bytes            146          120  -17.81%\r\n> BenchmarkAppendStr16Bytes           143          142   -0.70%\r\n> BenchmarkAppendStr32Bytes           118          119   +0.85%\r\n> BenchmarkAppendSpecialCase          709          714   +0.71%\r\n>\r\n> 16 vs complete eliminating the test:\r\n> benchmark                     old ns/op    new ns/op    delta\r\n> BenchmarkAppend                     939          967   +2.98%\r\n> BenchmarkAppend1Byte                106          114   +7.55%\r\n> BenchmarkAppend4Bytes               124          123   -0.81%\r\n> BenchmarkAppend8Bytes               169          127  -24.85%\r\n> BenchmarkAppend16Bytes              237          154  -35.02%\r\n> BenchmarkAppend32Bytes              130          128   -1.54%\r\n> BenchmarkAppendStr1Byte              85           98  +14.62%\r\n> BenchmarkAppendStr4Bytes            105          110   +4.76%\r\n> BenchmarkAppendStr8Bytes            147          115  -21.77%\r\n> BenchmarkAppendStr16Bytes           208          139  -33.17%\r\n> BenchmarkAppendStr32Bytes           118          115   -2.54%\r\n> BenchmarkAppendSpecialCase          712          713   +0.14%\r\n>\r\n> it seems the result is not that consistent on different ARM cores.\r\n> In this case, reducing the threshold to 4 could bring more performance\r\n> benefits on this core.\r\n",
			"disapproval": false,
			"date": "2013-04-27 14:45:52.124410",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=98b396da54db ***\n\nruntime: tune appendCrossover for arm\n\nTurns out the optimal value is 8 on cortex-A9 systems (pandaboard)\n\nbenchmark                     old ns/op    new ns/op    delta\nBenchmarkAppend                     907          908   +0.11%\nBenchmarkAppend1Byte                101          101   +0.00%\nBenchmarkAppend4Bytes               116          116   +0.00%\nBenchmarkAppend8Bytes               139          138   -0.72%\nBenchmarkAppend16Bytes              185          158  -14.59%\nBenchmarkAppend32Bytes              131          131   +0.00%\nBenchmarkAppendStr1Byte              72           72   +0.00%\nBenchmarkAppendStr4Bytes             93           93   -0.21%\nBenchmarkAppendStr8Bytes            116          116   +0.00%\nBenchmarkAppendStr16Bytes           161          125  -22.36%\nBenchmarkAppendStr32Bytes           102          102   +0.00%\nBenchmarkAppendSpecialCase          613          613   +0.00%\n\nR=golang-dev, r\nCC=golang-dev\nhttps://codereview.appspot.com/8863045",
			"disapproval": false,
			"date": "2013-04-27 14:18:41.660460",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Result on ARM Cortex A8:\r\n16 vs. 8:\r\nbenchmark                    old ns/op    new ns/op    delta\r\nBenchmarkAppend                    939          940   +0.11%\r\nBenchmarkAppend1Byte               106          109   +2.83%\r\nBenchmarkAppend4Bytes              124          124   +0.00%\r\nBenchmarkAppend8Bytes              169          173   +2.37%\r\nBenchmarkAppend16Bytes             237          153  -35.44%\r\nBenchmarkAppend32Bytes             130          129   -0.77%\r\nBenchmarkAppendStr1Byte             85           85   -0.58%\r\nBenchmarkAppendStr4Bytes           105          105   +0.00%\r\nBenchmarkAppendStr8Bytes           147          146   -0.68%\r\nBenchmarkAppendStr16Bytes          208          143  -31.25%\r\nBenchmarkAppendStr32Bytes          118          118   +0.00%\r\n\r\n16 vs 1:\r\nbenchmark                     old ns/op    new ns/op    delta\r\nBenchmarkAppend                     939          940   +0.11%\r\nBenchmarkAppend1Byte                106          107   +0.94%\r\nBenchmarkAppend4Bytes               124          126   +1.61%\r\nBenchmarkAppend8Bytes               169          130  -23.08%\r\nBenchmarkAppend16Bytes              237          154  -35.02%\r\nBenchmarkAppend32Bytes              130          129   -0.77%\r\nBenchmarkAppendStr1Byte              85           85   +0.12%\r\nBenchmarkAppendStr4Bytes            105          115   +9.52%\r\nBenchmarkAppendStr8Bytes            147          120  -18.37%\r\nBenchmarkAppendStr16Bytes           208          142  -31.73%\r\nBenchmarkAppendStr32Bytes           118          119   +0.85%\r\nBenchmarkAppendSpecialCase          712          714   +0.28%\r\n\r\n8 vs 1:\r\nbenchmark                     old ns/op    new ns/op    delta\r\nBenchmarkAppend                     940          940   +0.00%\r\nBenchmarkAppend1Byte                109          107   -1.83%\r\nBenchmarkAppend4Bytes               124          126   +1.61%\r\nBenchmarkAppend8Bytes               173          130  -24.86%\r\nBenchmarkAppend16Bytes              153          154   +0.65%\r\nBenchmarkAppend32Bytes              129          129   +0.00%\r\nBenchmarkAppendStr1Byte              85           85   +0.71%\r\nBenchmarkAppendStr4Bytes            105          115   +9.52%\r\nBenchmarkAppendStr8Bytes            146          120  -17.81%\r\nBenchmarkAppendStr16Bytes           143          142   -0.70%\r\nBenchmarkAppendStr32Bytes           118          119   +0.85%\r\nBenchmarkAppendSpecialCase          709          714   +0.71%\r\n\r\n16 vs complete eliminating the test:\r\nbenchmark                     old ns/op    new ns/op    delta\r\nBenchmarkAppend                     939          967   +2.98%\r\nBenchmarkAppend1Byte                106          114   +7.55%\r\nBenchmarkAppend4Bytes               124          123   -0.81%\r\nBenchmarkAppend8Bytes               169          127  -24.85%\r\nBenchmarkAppend16Bytes              237          154  -35.02%\r\nBenchmarkAppend32Bytes              130          128   -1.54%\r\nBenchmarkAppendStr1Byte              85           98  +14.62%\r\nBenchmarkAppendStr4Bytes            105          110   +4.76%\r\nBenchmarkAppendStr8Bytes            147          115  -21.77%\r\nBenchmarkAppendStr16Bytes           208          139  -33.17%\r\nBenchmarkAppendStr32Bytes           118          115   -2.54%\r\nBenchmarkAppendSpecialCase          712          713   +0.14%\r\n\r\nit seems the result is not that consistent on different ARM cores.\r\nIn this case, reducing the threshold to 4 could bring more performance\r\nbenefits on this core.\r\n",
			"disapproval": false,
			"date": "2013-04-27 14:42:51.721690",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Apr 27, 2013 at 10:45 PM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> On my pandaboard, with appendCrossover set to 4, regressed the append8\r\n> case as the overhead of the memmove call is more than copying 8 bytes\r\n> inline.\r\n>\r\nI merely pointed out that different cores have different best thresholds.\r\nthe question is: which type of core should we optimize for?\r\n\r\nfor example, should we consider ARMv6 or ARMv5E?\r\n",
			"disapproval": false,
			"date": "2013-04-27 15:48:54.015280",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'll test ARMv6 and ARMv5 tomorrow (assuming it hasn't completely\r\ndied), I hope they won't show a significant preference towards a\r\ncrossover of 4. If they do, I'm inclined to ask to defer the decision\r\nof how we specialise code generation for various arm devices until the\r\nbigger problem of x87/SSE/AVX/FMA4/OMGWTFBBQ has a better solution\r\nthan runtime probing.\r\n\r\nOn Sun, Apr 28, 2013 at 1:48 AM, minux <minux.ma@gmail.com> wrote:\r\n>\r\n> On Sat, Apr 27, 2013 at 10:45 PM, Dave Cheney <dave@cheney.net> wrote:\r\n>>\r\n>> On my pandaboard, with appendCrossover set to 4, regressed the append8\r\n>> case as the overhead of the memmove call is more than copying 8 bytes\r\n>> inline.\r\n>\r\n> I merely pointed out that different cores have different best thresholds.\r\n> the question is: which type of core should we optimize for?\r\n>\r\n> for example, should we consider ARMv6 or ARMv5E?\r\n",
			"disapproval": false,
			"date": "2013-04-27 15:55:08.632900",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Here is the same comparison as included in the description from an\r\narm5 kirkwood system\r\n\r\nbenchmark                     old ns/op    new ns/op    delta\r\nBenchmarkAppend                     620          620   +0.00%\r\nBenchmarkAppend1Byte                 70           70   +0.14%\r\nBenchmarkAppend4Bytes                86           86   +0.00%\r\nBenchmarkAppend8Bytes               108          108   +0.00%\r\nBenchmarkAppend16Bytes              152           98  -35.39%\r\nBenchmarkAppend32Bytes               96           96   -0.10%\r\nBenchmarkAppendStr1Byte              58           58   +0.00%\r\nBenchmarkAppendStr4Bytes             74           74   +0.00%\r\nBenchmarkAppendStr8Bytes             96           96   +0.00%\r\nBenchmarkAppendStr16Bytes           141           92  -34.26%\r\nBenchmarkAppendStr32Bytes            88           88   +0.11%\r\nBenchmarkAppendSpecialCase          500          500   +0.00%\r\n\r\nOn Sun, Apr 28, 2013 at 1:55 AM, Dave Cheney <dave@cheney.net> wrote:\r\n> I'll test ARMv6 and ARMv5 tomorrow (assuming it hasn't completely\r\n> died), I hope they won't show a significant preference towards a\r\n> crossover of 4. If they do, I'm inclined to ask to defer the decision\r\n> of how we specialise code generation for various arm devices until the\r\n> bigger problem of x87/SSE/AVX/FMA4/OMGWTFBBQ has a better solution\r\n> than runtime probing.\r\n>\r\n> On Sun, Apr 28, 2013 at 1:48 AM, minux <minux.ma@gmail.com> wrote:\r\n>>\r\n>> On Sat, Apr 27, 2013 at 10:45 PM, Dave Cheney <dave@cheney.net> wrote:\r\n>>>\r\n>>> On my pandaboard, with appendCrossover set to 4, regressed the append8\r\n>>> case as the overhead of the memmove call is more than copying 8 bytes\r\n>>> inline.\r\n>>\r\n>> I merely pointed out that different cores have different best thresholds.\r\n>> the question is: which type of core should we optimize for?\r\n>>\r\n>> for example, should we consider ARMv6 or ARMv5E?\r\n",
			"disapproval": false,
			"date": "2013-04-28 07:36:41.796830",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Here is the full set from the smae kirkwood host.\r\n\r\n::::::::::::::\r\n16vs0.txt\r\n::::::::::::::\r\nbenchmark                     old ns/op    new ns/op    delta\r\nBenchmarkAppend                     620          620   +0.00%\r\nBenchmarkAppend1Byte                 70           70   +0.00%\r\nBenchmarkAppend4Bytes                86           91   +6.04%\r\nBenchmarkAppend8Bytes               108           93  -13.24%\r\nBenchmarkAppend16Bytes              152           98  -35.39%\r\nBenchmarkAppend32Bytes               96           93   -2.60%\r\nBenchmarkAppendStr1Byte              58           65  +10.36%\r\nBenchmarkAppendStr4Bytes             74           79   +6.44%\r\nBenchmarkAppendStr8Bytes             96           82  -15.10%\r\nBenchmarkAppendStr16Bytes           143           89  -37.69%\r\nBenchmarkAppendStr32Bytes            88           83   -4.88%\r\nBenchmarkAppendSpecialCase          500          501   +0.20%\r\n::::::::::::::\r\n16vs1.txt\r\n::::::::::::::\r\nbenchmark                     old ns/op    new ns/op    delta\r\nBenchmarkAppend                     620          620   +0.00%\r\nBenchmarkAppend1Byte                 70           70   +0.00%\r\nBenchmarkAppend4Bytes                86           90   +5.11%\r\nBenchmarkAppend8Bytes               108           93  -13.24%\r\nBenchmarkAppend16Bytes              152           98  -35.39%\r\nBenchmarkAppend32Bytes               96           96   -0.10%\r\nBenchmarkAppendStr1Byte              58           58   +0.00%\r\nBenchmarkAppendStr4Bytes             74           82  +10.19%\r\nBenchmarkAppendStr8Bytes             96           85  -11.38%\r\nBenchmarkAppendStr16Bytes           140           92  -33.79%\r\nBenchmarkAppendStr32Bytes            88           88   +0.00%\r\nBenchmarkAppendSpecialCase          500          500   +0.00%\r\n::::::::::::::\r\n16vs4.txt\r\n::::::::::::::\r\nbenchmark                     old ns/op    new ns/op    delta\r\nBenchmarkAppend                     620          620   +0.00%\r\nBenchmarkAppend1Byte                 70           70   +0.00%\r\nBenchmarkAppend4Bytes                86           86   +0.00%\r\nBenchmarkAppend8Bytes               108           93  -13.24%\r\nBenchmarkAppend16Bytes              152           98  -35.39%\r\nBenchmarkAppend32Bytes               96           96   +0.00%\r\nBenchmarkAppendStr1Byte              58           58   +0.00%\r\nBenchmarkAppendStr4Bytes             74          105  +40.94%\r\nBenchmarkAppendStr8Bytes             96           85  -11.48%\r\nBenchmarkAppendStr16Bytes           141           92  -34.18%\r\nBenchmarkAppendStr32Bytes            88           88   +0.00%\r\nBenchmarkAppendSpecialCase          500          500   +0.00%\r\n::::::::::::::\r\n16vs8.txt\r\n::::::::::::::\r\nbenchmark                     old ns/op    new ns/op    delta\r\nBenchmarkAppend                     620          620   +0.00%\r\nBenchmarkAppend1Byte                 70           70   +0.00%\r\nBenchmarkAppend4Bytes                86           86   +0.00%\r\nBenchmarkAppend8Bytes               108          108   +0.00%\r\nBenchmarkAppend16Bytes              152           98  -35.39%\r\nBenchmarkAppend32Bytes               96           96   +0.00%\r\nBenchmarkAppendStr1Byte              58           58   +0.00%\r\nBenchmarkAppendStr4Bytes             74           74   -0.13%\r\nBenchmarkAppendStr8Bytes             96           96   +0.00%\r\nBenchmarkAppendStr16Bytes           140           92  -33.79%\r\nBenchmarkAppendStr32Bytes            88           88   +0.00%\r\nBenchmarkAppendSpecialCase          500          500   +0.00%\r\n::::::::::::::\r\n1vs0.txt\r\n::::::::::::::\r\nbenchmark                     old ns/op    new ns/op    delta\r\nBenchmarkAppend                     620          620   +0.00%\r\nBenchmarkAppend1Byte                 70           70   +0.00%\r\nBenchmarkAppend4Bytes                91           90   -1.41%\r\nBenchmarkAppend8Bytes                93           93   +0.00%\r\nBenchmarkAppend16Bytes               98           98   +0.00%\r\nBenchmarkAppend32Bytes               96           96   -0.10%\r\nBenchmarkAppendStr1Byte              59           65  +10.17%\r\nBenchmarkAppendStr4Bytes             82           79   -4.00%\r\nBenchmarkAppendStr8Bytes             85           82   -3.97%\r\nBenchmarkAppendStr16Bytes            92           89   -3.88%\r\nBenchmarkAppendStr32Bytes            88           81   -7.38%\r\nBenchmarkAppendSpecialCase          500          500   +0.00%\r\n::::::::::::::\r\n4vs0.txt\r\n::::::::::::::\r\nbenchmark                     old ns/op    new ns/op    delta\r\nBenchmarkAppend                     620          620   +0.00%\r\nBenchmarkAppend1Byte                 70           70   +0.00%\r\nBenchmarkAppend4Bytes                86           91   +6.27%\r\nBenchmarkAppend8Bytes                93           93   +0.00%\r\nBenchmarkAppend16Bytes               98           98   +0.00%\r\nBenchmarkAppend32Bytes               96           95   -0.52%\r\nBenchmarkAppendStr1Byte              58           65  +10.36%\r\nBenchmarkAppendStr4Bytes             74           88  +18.26%\r\nBenchmarkAppendStr8Bytes             85           82   -4.20%\r\nBenchmarkAppendStr16Bytes            92           89   -3.88%\r\nBenchmarkAppendStr32Bytes            88           81   -7.04%\r\nBenchmarkAppendSpecialCase          500          500   +0.00%\r\n::::::::::::::\r\n4vs1.txt\r\n::::::::::::::\r\nbenchmark                     old ns/op    new ns/op    delta\r\nBenchmarkAppend                     620          620   +0.00%\r\nBenchmarkAppend1Byte                 70           70   +0.00%\r\nBenchmarkAppend4Bytes                86           92   +6.97%\r\nBenchmarkAppend8Bytes                93           93   +0.00%\r\nBenchmarkAppend16Bytes               98           98   +0.00%\r\nBenchmarkAppend32Bytes               96           96   +0.00%\r\nBenchmarkAppendStr1Byte              58           58   +0.00%\r\nBenchmarkAppendStr4Bytes             74           83  +11.41%\r\nBenchmarkAppendStr8Bytes             85           85   +0.00%\r\nBenchmarkAppendStr16Bytes            92           92   +0.11%\r\nBenchmarkAppendStr32Bytes            88           88   +0.00%\r\nBenchmarkAppendSpecialCase          500          500   +0.00%\r\n::::::::::::::\r\n8vs0.txt\r\n::::::::::::::\r\nbenchmark                     old ns/op    new ns/op    delta\r\nBenchmarkAppend                     620          620   +0.00%\r\nBenchmarkAppend1Byte                 70           70   +0.00%\r\nBenchmarkAppend4Bytes                86           91   +5.81%\r\nBenchmarkAppend8Bytes               108           93  -13.24%\r\nBenchmarkAppend16Bytes               98           98   +0.00%\r\nBenchmarkAppend32Bytes               96           95   -0.42%\r\nBenchmarkAppendStr1Byte              58           65  +10.36%\r\nBenchmarkAppendStr4Bytes             74           80   +7.38%\r\nBenchmarkAppendStr8Bytes             96           82  -15.10%\r\nBenchmarkAppendStr16Bytes            92           89   -3.88%\r\nBenchmarkAppendStr32Bytes            88           81   -7.38%\r\nBenchmarkAppendSpecialCase          500          501   +0.20%\r\n::::::::::::::\r\n8vs1.txt\r\n::::::::::::::\r\nbenchmark                     old ns/op    new ns/op    delta\r\nBenchmarkAppend                     620          620   +0.00%\r\nBenchmarkAppend1Byte                 70           70   +0.00%\r\nBenchmarkAppend4Bytes                86           90   +4.65%\r\nBenchmarkAppend8Bytes               108           93  -13.24%\r\nBenchmarkAppend16Bytes               98           98   +0.00%\r\nBenchmarkAppend32Bytes               96           96   +0.10%\r\nBenchmarkAppendStr1Byte              58           58   +0.00%\r\nBenchmarkAppendStr4Bytes             74           82  +10.34%\r\nBenchmarkAppendStr8Bytes             96           85  -11.48%\r\nBenchmarkAppendStr16Bytes            92           92   +0.00%\r\nBenchmarkAppendStr32Bytes            88           88   +0.00%\r\nBenchmarkAppendSpecialCase          500          500   +0.00%\r\n::::::::::::::\r\n8vs4.txt\r\n::::::::::::::\r\nbenchmark                     old ns/op    new ns/op    delta\r\nBenchmarkAppend                     620          620   +0.00%\r\nBenchmarkAppend1Byte                 70           70   +0.00%\r\nBenchmarkAppend4Bytes                86           86   +0.12%\r\nBenchmarkAppend8Bytes               108           93  -13.24%\r\nBenchmarkAppend16Bytes               98           98   +0.00%\r\nBenchmarkAppend32Bytes               96           96   +0.00%\r\nBenchmarkAppendStr1Byte              58           58   +0.00%\r\nBenchmarkAppendStr4Bytes             74           74   +0.00%\r\nBenchmarkAppendStr8Bytes             96           85  -11.48%\r\nBenchmarkAppendStr16Bytes            92           92   +0.11%\r\nBenchmarkAppendStr32Bytes            88           88   +0.00%\r\nBenchmarkAppendSpecialCase          500          501   +0.20%\r\n\r\nOn Sun, Apr 28, 2013 at 7:57 PM, minux <minux.ma@gmail.com> wrote:\r\n> for a fair comparison, you need to compare threahold set to 1 (or remove the\r\n> check and inlined memmove completely) and 16.\r\n>\r\n> On Sunday, April 28, 2013, Dave Cheney wrote:\r\n>>\r\n>> Here is the same comparison as included in the description from an\r\n>> arm5 kirkwood system\r\n>>\r\n>> benchmark                     old ns/op    new ns/op    delta\r\n>> BenchmarkAppend                     620          620   +0.00%\r\n>> BenchmarkAppend1Byte                 70           70   +0.14%\r\n>> BenchmarkAppend4Bytes                86           86   +0.00%\r\n>> BenchmarkAppend8Bytes               108          108   +0.00%\r\n>> BenchmarkAppend16Bytes              152           98  -35.39%\r\n>> BenchmarkAppend32Bytes               96           96   -0.10%\r\n>> BenchmarkAppendStr1Byte              58           58   +0.00%\r\n>> BenchmarkAppendStr4Bytes             74           74   +0.00%\r\n>> BenchmarkAppendStr8Bytes             96           96   +0.00%\r\n>> BenchmarkAppendStr16Bytes           141           92  -34.26%\r\n>> BenchmarkAppendStr32Bytes            88           88   +0.11%\r\n>> BenchmarkAppendSpecialCase          500          500   +0.00%\r\n>>\r\n>> On Sun, Apr 28, 2013 at 1:55 AM, Dave Cheney <dave@cheney.net> wrote:\r\n>> > I'll test ARMv6 and ARMv5 tomorrow (assuming it hasn't completely\r\n>> > died), I hope they won't show a significant preference towards a\r\n>> > crossover of 4. If they do, I'm inclined to ask to defer the decision\r\n>> > of how we specialise code generation for various arm devices until the\r\n>> > bigger problem of x87/SSE/AVX/FMA4/OMGWTFBBQ has a better solution\r\n>> > than runtime probing.\r\n>> >\r\n>> > On Sun, Apr 28, 2013 at 1:48 AM, minux <minux.ma@gmail.com> wrote:\r\n>> >>\r\n>> >> On Sat, Apr 27, 2013 at 10:45 PM, Dave Cheney <dave@cheney.net> wrote:\r\n>> >>>\r\n>> >>> On my pandaboard, with appendCrossover set to 4, regressed the append8\r\n>> >>> case as the overhead of the memmove call is more than copying 8 bytes\r\n>> >>> inline.\r\n>> >>\r\n>> >> I merely pointed out that different cores have different best\r\n>> >> thresholds.\r\n>> >> the question is: which type of core should we optimize for?\r\n>> >>\r\n>> >> for example, should we consider ARMv6 or ARMv5E?\r\n",
			"disapproval": false,
			"date": "2013-04-29 11:11:06.097410",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Apr 29, 2013 at 7:11 PM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> ::::::::::::::\r\n> 16vs4.txt\r\n> ::::::::::::::\r\n> benchmark                     old ns/op    new ns/op    delta\r\n> BenchmarkAppend                     620          620   +0.00%\r\n> BenchmarkAppend1Byte                 70           70   +0.00%\r\n> BenchmarkAppend4Bytes                86           86   +0.00%\r\n> BenchmarkAppend8Bytes               108           93  -13.24%\r\n> BenchmarkAppend16Bytes              152           98  -35.39%\r\n> BenchmarkAppend32Bytes               96           96   +0.00%\r\n> BenchmarkAppendStr1Byte              58           58   +0.00%\r\n> BenchmarkAppendStr4Bytes             74          105  +40.94%\r\n>\r\nthis is weird.\r\n\r\n> BenchmarkAppendStr8Bytes             96           85  -11.48%\r\n> BenchmarkAppendStr16Bytes           141           92  -34.18%\r\n> BenchmarkAppendStr32Bytes            88           88   +0.00%\r\n> BenchmarkAppendSpecialCase          500          500   +0.00%\r\n> ::::::::::::::\r\n> 16vs8.txt\r\n> ::::::::::::::\r\n> benchmark                     old ns/op    new ns/op    delta\r\n> BenchmarkAppend                     620          620   +0.00%\r\n> BenchmarkAppend1Byte                 70           70   +0.00%\r\n> BenchmarkAppend4Bytes                86           86   +0.00%\r\n> BenchmarkAppend8Bytes               108          108   +0.00%\r\n> BenchmarkAppend16Bytes              152           98  -35.39%\r\n> BenchmarkAppend32Bytes               96           96   +0.00%\r\n> BenchmarkAppendStr1Byte              58           58   +0.00%\r\n> BenchmarkAppendStr4Bytes             74           74   -0.13%\r\n> BenchmarkAppendStr8Bytes             96           96   +0.00%\r\n> BenchmarkAppendStr16Bytes           140           92  -33.79%\r\n> BenchmarkAppendStr32Bytes            88           88   +0.00%\r\n> BenchmarkAppendSpecialCase          500          500   +0.00%\r\n>\r\nok, let's go with 8 then.\r\n",
			"disapproval": false,
			"date": "2013-04-29 11:20:10.045450",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 8863045: runtime: tune appendCrossover for arm",
	"created": "2013-04-27 10:54:57.421880",
	"patchsets": [
		1,
		3,
		4001,
		5002,
		11001
	],
	"modified": "2013-04-30 07:19:52.157590",
	"closed": true,
	"issue": 8863045
}