{
	"description": "cmd/gc: don't generate garbage in m[string(byteSlice)]\n\nFixes issue 3512",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"remyoudompheng@gmail.com",
		"fullung@gmail.com"
	],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-04-01 22:15:51.399760",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I wouldn't have done like that. I think I would have introduced a new node type OSTRARRAYBYTENOP that does the no-op conversion, instrumented it in racewalk, and implemented it in gen.c like cgen_slice.\n\nBut it's a more intrusive way of doing.\n\nA test should be added in runtime/race to check that the race is correctly detected.\n\nIs it totally guaranteed that the hashmap will not keep the key inside? The lazy-growth-on-map-access frightens me.",
			"disapproval": false,
			"date": "2013-04-01 22:34:17.678200",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Apr 1, 2013 at 3:34 PM, <remyoudompheng@gmail.com> wrote:\r\n\r\n> I wouldn't have done like that. I think I would have introduced a new\r\n> node type OSTRARRAYBYTENOP that does the no-op conversion, instrumented\r\n> it in racewalk, and implemented it in gen.c like cgen_slice.\r\n>\r\n> But it's a more intrusive way of doing.\r\n>\r\n\r\nI'm new here.  :-)\r\n\r\nI considered that, but didn't know conventions, and like you said--- it\r\nseemed more intrusive.\r\n\r\n\r\n> A test should be added in runtime/race to check that the race is\r\n> correctly detected.\r\n>\r\n\r\nWill do.\r\n\r\nIs it totally guaranteed that the hashmap will not keep the key inside?\r\n>\r\n\r\nYes.\r\n\r\n\r\n> The lazy-growth-on-map-access frightens me.\r\n>\r\n\r\nThat's a bug and is being fixed.  golang.org/issue/5179\r\n\r\nThe only thing this impacts is per-map hash caching (golang.org/issue/5147)\r\nwhich retains the key per-M between lookups to avoid future hashes.  But\r\nafter implementing that, the numbers suggest we'll need compiler support to\r\ngive hints about when it's beneficial anyway, so the compiler can not pass\r\nthe \"it is beneficial\" hint to the lookup function here when nocopy is in\r\nuse.\r\n",
			"disapproval": false,
			"date": "2013-04-01 22:44:53.928480",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, remyoudompheng@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-04-01 23:01:52.212310",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Here's a fun one from the wild:\n\ntype Uuid []byte\ntype UuidKey string\n\nfunc (u Uuid) Key() string { return string(u) }\n\nid := ...\nm := make(map[UuidKey]struct{})\nm[id.Key()] = struct{}{}\n\nIs the compiler smart enough for this one?\n\nAside, we're thinking of changing Uuid to be a [16]byte or even [2]uint64, but there are a few places where it was useful to have a nil-able thing.",
			"disapproval": false,
			"date": "2013-04-02 05:48:13.312300",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-05-17 20:36:49.087350",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 8090046: cmd/gc: don't generate garbage in m[string(byteSlice)]",
	"created": "2013-04-01 22:14:28.903270",
	"patchsets": [
		1,
		2001,
		5001,
		8002
	],
	"modified": "2013-05-17 20:36:50.715650",
	"closed": true,
	"issue": 8090046
}