{
	"description": "cmd/6g: change sbop swap logic\n\nI added the nl->op == OLITERAL case during the recent\nperformance round, and while it helps for small integer constants,\nit hurts for floating point constants.  In the Mandelbrot benchmark\nit causes 2*Zr*Zi to compile like Zr*2*Zi:\n\n        0x000000000042663d <+249>:\tmovsd  %xmm6,%xmm0\n        0x0000000000426641 <+253>:\tmovsd  $2,%xmm1\n        0x000000000042664a <+262>:\tmulsd  %xmm1,%xmm0\n        0x000000000042664e <+266>:\tmulsd  %xmm5,%xmm0\n\ninstead of:\n\n        0x0000000000426835 <+276>:\tmovsd  $2,%xmm0\n        0x000000000042683e <+285>:\tmulsd  %xmm6,%xmm0\n        0x0000000000426842 <+289>:\tmulsd  %xmm5,%xmm0\n\nIt is unclear why that has such a dramatic performance effect\nin a tight loop, but it's obviously slightly better code, so go with it.\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17    5957470000   5973924000   +0.28%\nBenchmarkFannkuch11      3811295000   3869128000   +1.52%\nBenchmarkGobDecode         26001900     25670500   -1.27%\nBenchmarkGobEncode         12051430     11948590   -0.85%\nBenchmarkGzip                177432       174821   -1.47%\nBenchmarkGunzip               10967        10756   -1.92%\nBenchmarkJSONEncode        78924750     79746900   +1.04%\nBenchmarkJSONDecode       313606400    307081600   -2.08%\nBenchmarkMandelbrot200     13670860      8200725  -40.01%  !!!\nBenchmarkRevcomp25M      1179194000   1206539000   +2.32%\nBenchmarkTemplate         447931200    443948200   -0.89%\nBenchmarkMD5Hash1K             2856         2873   +0.60%\nBenchmarkMD5Hash8K            22083        22029   -0.24%\n\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkGobDecode            29.52        29.90    1.01x\nBenchmarkGobEncode            63.69        64.24    1.01x\nBenchmarkJSONEncode           24.59        24.33    0.99x\nBenchmarkJSONDecode            6.19         6.32    1.02x\nBenchmarkRevcomp25M          215.54       210.66    0.98x\nBenchmarkTemplate              4.33         4.37    1.01x\nBenchmarkMD5Hash1K           358.54       356.31    0.99x\nBenchmarkMD5Hash8K           370.95       371.86    1.00x",
	"cc": [
		"ken@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"ken@google.com"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=8d29e1651d7a ***\n\ncmd/6g: change sbop swap logic\n\nI added the nl->op == OLITERAL case during the recent\nperformance round, and while it helps for small integer constants,\nit hurts for floating point constants.  In the Mandelbrot benchmark\nit causes 2*Zr*Zi to compile like Zr*2*Zi:\n\n        0x000000000042663d <+249>:\tmovsd  %xmm6,%xmm0\n        0x0000000000426641 <+253>:\tmovsd  $2,%xmm1\n        0x000000000042664a <+262>:\tmulsd  %xmm1,%xmm0\n        0x000000000042664e <+266>:\tmulsd  %xmm5,%xmm0\n\ninstead of:\n\n        0x0000000000426835 <+276>:\tmovsd  $2,%xmm0\n        0x000000000042683e <+285>:\tmulsd  %xmm6,%xmm0\n        0x0000000000426842 <+289>:\tmulsd  %xmm5,%xmm0\n\nIt is unclear why that has such a dramatic performance effect\nin a tight loop, but it's obviously slightly better code, so go with it.\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17    5957470000   5973924000   +0.28%\nBenchmarkFannkuch11      3811295000   3869128000   +1.52%\nBenchmarkGobDecode         26001900     25670500   -1.27%\nBenchmarkGobEncode         12051430     11948590   -0.85%\nBenchmarkGzip                177432       174821   -1.47%\nBenchmarkGunzip               10967        10756   -1.92%\nBenchmarkJSONEncode        78924750     79746900   +1.04%\nBenchmarkJSONDecode       313606400    307081600   -2.08%\nBenchmarkMandelbrot200     13670860      8200725  -40.01%  !!!\nBenchmarkRevcomp25M      1179194000   1206539000   +2.32%\nBenchmarkTemplate         447931200    443948200   -0.89%\nBenchmarkMD5Hash1K             2856         2873   +0.60%\nBenchmarkMD5Hash8K            22083        22029   -0.24%\n\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkGobDecode            29.52        29.90    1.01x\nBenchmarkGobEncode            63.69        64.24    1.01x\nBenchmarkJSONEncode           24.59        24.33    0.99x\nBenchmarkJSONDecode            6.19         6.32    1.02x\nBenchmarkRevcomp25M          215.54       210.66    0.98x\nBenchmarkTemplate              4.33         4.37    1.01x\nBenchmarkMD5Hash1K           358.54       356.31    0.99x\nBenchmarkMD5Hash8K           370.95       371.86    1.00x\n\nR=ken2\nCC=golang-dev\nhttp://codereview.appspot.com/6261051",
			"disapproval": false,
			"date": "2012-05-30 14:22:40.717052",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello ken2 (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-05-30 14:22:31.021688",
			"approval": false
		},
		{
			"sender": "ken@google.com",
			"recipients": [
				"rsc@golang.org",
				"ken@google.com",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "lgtm",
			"disapproval": false,
			"date": "2012-05-30 17:38:21.627973",
			"approval": true
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 6261051: cmd/6g: change sbop swap logic",
	"created": "2012-05-30 14:14:59.918103",
	"patchsets": [
		1,
		2001,
		4001
	],
	"modified": "2012-05-30 17:38:21.832683",
	"closed": true,
	"issue": 6261051
}