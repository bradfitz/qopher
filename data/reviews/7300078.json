{
	"description": "exp/ssa/interp: fix build for Plan 9",
	"cc": [
		"adonovan@google.com",
		"minux.ma@gmail.com",
		"alex.brainman@gmail.com",
		"akumar@mail.nanosouffle.net",
		"rminnich@google.com",
		"golang-dev@googlegroups.com",
		"lucio.dere@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Feb 10, 2013 at 2:15 PM, Anthony Martin <ality@pbrane.org> wrote:\r\n\r\n> Can anyone test this on a Windows machine?\r\n>\r\n./make.bash succeeded, but building ssadump.go results in linker error:\r\nsee https://code.google.com/p/go/issues/detail?id=4785\r\n\r\nthe code for windows won't handle writes to console right, but i think\r\nthis is acceptable.\r\n\r\nafter issue 4785 is fixed, i can test further on windows.\r\n",
			"disapproval": false,
			"date": "2013-02-10 21:28:51.654530",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"ality@pbrane.org",
				"adonovan@google.com",
				"minux.ma@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"lucio.dere@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> On Sun, Feb 10, 2013 at 2:15 PM, Anthony Martin <mailto:ality@pbrane.org> wrote:\n> \n> > Can anyone test this on a Windows machine?\n> >\n\nYour changes build on Windows fine.\n\nAlex",
			"disapproval": false,
			"date": "2013-02-11 01:16:46.883690",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"adonovan@google.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"lucio.dere@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan@google.com, minux.ma@gmail.com (cc: golang-dev@googlegroups.com, lucio.dere@gmail.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-02-10 03:54:33.580970",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank, Anthony, please forgive the belated - now redundant - comment from me.\r\n\r\nLucio.\r\n\r\nOn 2/10/13, ality@pbrane.org <ality@pbrane.org> wrote:\r\n> Reviewers: adonovan, minux,\r\n>\r\n> Message:\r\n> Hello adonovan@google.com, minux.ma@gmail.com (cc:\r\n> golang-dev@googlegroups.com, lucio.dere@gmail.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> exp/ssa/interp: fix build for Plan 9\r\n>\r\n> Please review this at https://codereview.appspot.com/7300078/\r\n>\r\n> Affected files:\r\n>    M src/pkg/exp/ssa/interp/external_plan9.go\r\n>    M src/pkg/exp/ssa/interp/external_unix.go\r\n>    M src/pkg/exp/ssa/interp/external_windows.go\r\n>\r\n>\r\n> Index: src/pkg/exp/ssa/interp/external_plan9.go\r\n> ===================================================================\r\n> copy from src/pkg/exp/ssa/interp/external_unix.go\r\n> copy to src/pkg/exp/ssa/interp/external_plan9.go\r\n> --- a/src/pkg/exp/ssa/interp/external_unix.go\r\n> +++ b/src/pkg/exp/ssa/interp/external_plan9.go\r\n> @@ -2,8 +2,6 @@\r\n>   // Use of this source code is governed by a BSD-style\r\n>   // license that can be found in the LICENSE file.\r\n>\r\n> -// +build !windows,!plan9\r\n> -\r\n>   package interp\r\n>\r\n>   import (\r\n> @@ -12,10 +10,7 @@\r\n>   )\r\n>\r\n>   func ext\u06f0syscall\u06f0Kill(fn *ssa.Function, args []value, slots []value) value\r\n>\r\n> {\r\n> -\t// We could emulate syscall.Syscall but it's more effort.\r\n> -\terr := syscall.Kill(args[0].(int), syscall.Signal(args[1].(int)))\r\n> -\terr = err // TODO(adonovan): fix: adapt concrete err to interpreted iface\r\n>\r\n> (e.g. call interpreted errors.New)\r\n> -\treturn iface{}\r\n> +\tpanic(\"syscall.Kill not yet implemented\")\r\n>   }\r\n>\r\n>   func ext\u06f0syscall\u06f0Write(fn *ssa.Function, args []value, slots []value)\r\n> value {\r\n> @@ -28,5 +23,4 @@\r\n>   \tn, _ := syscall.Write(args[0].(int), b)\r\n>   \terr := iface{} // TODO(adonovan): fix: adapt concrete err to interpreted\r\n>\r\n> iface.\r\n>   \treturn tuple{n, err}\r\n> -\r\n>   }\r\n> Index: src/pkg/exp/ssa/interp/external_unix.go\r\n> ===================================================================\r\n> --- a/src/pkg/exp/ssa/interp/external_unix.go\r\n> +++ b/src/pkg/exp/ssa/interp/external_unix.go\r\n> @@ -28,5 +28,4 @@\r\n>   \tn, _ := syscall.Write(args[0].(int), b)\r\n>   \terr := iface{} // TODO(adonovan): fix: adapt concrete err to interpreted\r\n>\r\n> iface.\r\n>   \treturn tuple{n, err}\r\n> -\r\n>   }\r\n> Index: src/pkg/exp/ssa/interp/external_windows.go\r\n> ===================================================================\r\n> --- a/src/pkg/exp/ssa/interp/external_windows.go\r\n> +++ b/src/pkg/exp/ssa/interp/external_windows.go\r\n> @@ -2,12 +2,13 @@\r\n>   // Use of this source code is governed by a BSD-style\r\n>   // license that can be found in the LICENSE file.\r\n>\r\n> -// +build windows plan9\r\n> +// +build windows\r\n>\r\n>   package interp\r\n>\r\n>   import (\r\n>   \t\"exp/ssa\"\r\n> +\t\"syscall\"\r\n>   )\r\n>\r\n>   func ext\u06f0syscall\u06f0Kill(fn *ssa.Function, args []value, slots []value) value\r\n>\r\n> {\r\n> @@ -15,5 +16,13 @@\r\n>   }\r\n>\r\n>   func ext\u06f0syscall\u06f0Write(fn *ssa.Function, args []value, slots []value)\r\n> value {\r\n> -\tpanic(\"syscall.Write not yet implemented\")\r\n> +\t// We could emulate syscall.Syscall but it's more effort.\r\n> +\tp := args[1].([]value)\r\n> +\tb := make([]byte, 0, len(p))\r\n> +\tfor i := range p {\r\n> +\t\tb = append(b, p[i].(byte))\r\n> +\t}\r\n> +\tn, _ := syscall.Write(args[0].(syscall.Handle), b)\r\n> +\terr := iface{} // TODO(adonovan): fix: adapt concrete err to interpreted\r\n>\r\n> iface.\r\n> +\treturn tuple{n, err}\r\n>   }\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-10 04:19:25.505920",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"ality@pbrane.org",
				"adonovan@google.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"lucio.dere@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7300078/diff/4004/src/pkg/exp/ssa/interp/external_windows.go\nFile src/pkg/exp/ssa/interp/external_windows.go (right):\n\nhttps://codereview.appspot.com/7300078/diff/4004/src/pkg/exp/ssa/interp/external_windows.go#newcode25\nsrc/pkg/exp/ssa/interp/external_windows.go:25: n, _ := syscall.Write(args[0].(syscall.Handle), b)\nThe set of dynamic types that can appear inside a 'value' interface is finite and does not include syscall.Handle; perhaps uintptr will work though.  You'd need to build exp/ssa/ssadump.go and run it on a 'hello world' program to test it:\n\n% ./ssadump -run hello.go",
			"disapproval": false,
			"date": "2013-02-10 05:23:40.197210",
			"approval": false
		},
		{
			"sender": "akumar@mail.nanosouffle.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\r\n\r\nOn 11 February 2013 01:16,  <alex.brainman@gmail.com> wrote:\r\n>> On Sun, Feb 10, 2013 at 2:15 PM, Anthony Martin\r\n>\r\n> <mailto:ality@pbrane.org> wrote:\r\n>\r\n>> > Can anyone test this on a Windows machine?\r\n>> >\r\n>\r\n>\r\n> Your changes build on Windows fine.\r\n>\r\n> Alex\r\n>\r\n> https://codereview.appspot.com/7300078/\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n>\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-20 06:55:04.419770",
			"approval": true
		},
		{
			"sender": "akumar@mail.nanosouffle.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Where do we stand on this?\r\n\r\nOn 19 February 2013 22:54, Akshat Kumar <akumar@mail.nanosouffle.net> wrote:\r\n> LGTM.\r\n>\r\n> On 11 February 2013 01:16,  <alex.brainman@gmail.com> wrote:\r\n>>> On Sun, Feb 10, 2013 at 2:15 PM, Anthony Martin\r\n>>\r\n>> <mailto:ality@pbrane.org> wrote:\r\n>>\r\n>>> > Can anyone test this on a Windows machine?\r\n>>> >\r\n>>\r\n>>\r\n>> Your changes build on Windows fine.\r\n>>\r\n>> Alex\r\n>>\r\n>> https://codereview.appspot.com/7300078/\r\n>>\r\n>> --\r\n>>\r\n>> ---You received this message because you are subscribed to the Google Groups\r\n>> \"golang-dev\" group.\r\n>>\r\n>> To unsubscribe from this group and stop receiving emails from it, send an\r\n>> email to golang-dev+unsubscribe@googlegroups.com.\r\n>> For more options, visit https://groups.google.com/groups/opt_out.\r\n>>\r\n>>\r\n",
			"disapproval": false,
			"date": "2013-02-21 18:51:21.276460",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"ality@pbrane.org",
				"adonovan@google.com",
				"minux.ma@gmail.com",
				"alex.brainman@gmail.com",
				"akumar@mail.nanosouffle.net",
				"golang-dev@googlegroups.com",
				"lucio.dere@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/21 18:51:21, akumar_mail.nanosouffle.net wrote:\n> Where do we stand on this?\n\nIf you just want to fix a broken build, then do panic(\"unimplemented\") for the implementations of the relevant external functions.  You can make them do real work as a follow-up at your convenience.  (I don't know the plan9 syscall interface so I can't help.)",
			"disapproval": false,
			"date": "2013-02-21 18:56:16.711530",
			"approval": false
		},
		{
			"sender": "rminnich@google.com",
			"recipients": [
				"ality@pbrane.org",
				"adonovan@google.com",
				"minux.ma@gmail.com",
				"alex.brainman@gmail.com",
				"akumar@mail.nanosouffle.net",
				"rminnich@google.com",
				"golang-dev@googlegroups.com",
				"lucio.dere@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "hi, can one of the people involved just get this in? If not, I guess I can do it tonight. This is one of our stuck-at points just now. Thanks!",
			"disapproval": false,
			"date": "2013-02-21 19:27:53.992580",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"adonovan@google.com",
				"minux.ma@gmail.com",
				"alex.brainman@gmail.com",
				"akumar@mail.nanosouffle.net",
				"rminnich@google.com",
				"golang-dev@googlegroups.com",
				"lucio.dere@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=01d14d9c8b32 ***\n\nexp/ssa/interp: fix build for Plan 9\n\nR=adonovan, minux.ma, alex.brainman, akumar, rminnich\nCC=golang-dev, lucio.dere\nhttps://codereview.appspot.com/7300078",
			"disapproval": false,
			"date": "2013-02-22 04:06:33.689450",
			"approval": false
		}
	],
	"owner_email": "ality@pbrane.org",
	"private": false,
	"base_url": "",
	"owner": "ality",
	"subject": "code review 7300078: exp/ssa/interp: fix build for Plan 9",
	"created": "2013-02-10 03:53:24.897340",
	"patchsets": [
		1,
		2001,
		4004,
		4,
		15001,
		18001
	],
	"modified": "2013-02-22 04:06:36.809990",
	"closed": true,
	"issue": 7300078
}