{
	"description": "go/build: replace FindTree, ScanDir, Tree, DirInfo with Import, Package\n\nThis is an API change, but one I have been promising would\nhappen when it was clear what the go command needed.\n\nThis is basically a complete replacement of what used to be here.\n\nbuild.Tree is gone.\n\nbuild.DirInfo is expanded and now called build.Package.\n\nbuild.FindTree is now build.Import(package, srcDir, build.FindOnly).\nThe returned *Package contains information that FindTree returned,\nbut applicable only to a single package.\n\nbuild.ScanDir is now build.ImportDir.\n\nbuild.FindTree+build.ScanDir is now build.Import.\n\nThe new Import API allows specifying the source directory,\nin order to resolve local imports (import \"./foo\") and also allows\nscanning of packages outside of $GOPATH.  They will come back\nwith less information in the Package, but they will still work.\n\nThe old go/build API exposed both too much and too little.\nThis API is much closer to what the go command needs,\nand it works well enough in the other places where it is\nused.  Path is gone, so it can no longer be misused.  (Fixes issue 2749.)\n\nThis CL updates clients of go/build other than the go command.\nThe go command changes are in a separate CL, to be submitted\nat the same time.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"alex.brainman@gmail.com",
		"adg@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"alex.brainman@gmail.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Fixes 3118?",
			"disapproval": false,
			"date": "2012-03-01 00:28:03.652033",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"alex.brainman@gmail.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nyay",
			"disapproval": false,
			"date": "2012-03-01 04:26:32.352458",
			"approval": true
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"alex.brainman@gmail.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/03/01 04:08:29, rsc wrote:\n\nLGTM\n\n> ...\n> I am not planning to force people to write paths in canonical form,\n> but having a conversion to canonical form makes it possible to\n> write things like HasSubdir ...\n\nBut you are forcing the to write paths in \"canonical\" form. Because it is impossible to write things like HasSubdir otherwise. Then we need to define what \"canonical\" form means. And, probably, provide some utilities do convert from / to it.\n\n> ...  Part of the problem with HasPrefix\n> is that it combines canonicalization (in the form of ToLower) and an\n> operation on the canonical forms (the prefix check), but you might\n> have other things you want to do instead.\n\nI am not argue that our current interface is good. I am argue that if we take that away, we should replace it with something else.\n\n> Windows definitely knows the \"official\" case of a file name: when you\n> list a directory you always get the same result, even though there\n> are 2^n possible casings for an n-letter name. ...\n\nNo arguments about that. In fact NTFS file system (that you probably use) will remember file name as is, case and everything. But this property thrown away at system interface: you can create file as c:\\a.txt and open it as c:\\A.TXT later with no problem.\n\n> ... If that's too hard to\n> extract, it would be a fine stopgap to define that Go's canonical form\n> for a Windows path is all lowercase and make EvalSymlinks return\n> strings.ToLower(arg).\n\nSounds good.\n\nAlex",
			"disapproval": false,
			"date": "2012-03-01 04:28:06.895874",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-29 20:48:09.557769",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"alex.brainman@gmail.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=64311b514185 ***\n\ngo/build: replace FindTree, ScanDir, Tree, DirInfo with Import, Package\n\nThis is an API change, but one I have been promising would\nhappen when it was clear what the go command needed.\n\nThis is basically a complete replacement of what used to be here.\n\nbuild.Tree is gone.\n\nbuild.DirInfo is expanded and now called build.Package.\n\nbuild.FindTree is now build.Import(package, srcDir, build.FindOnly).\nThe returned *Package contains information that FindTree returned,\nbut applicable only to a single package.\n\nbuild.ScanDir is now build.ImportDir.\n\nbuild.FindTree+build.ScanDir is now build.Import.\n\nThe new Import API allows specifying the source directory,\nin order to resolve local imports (import \"./foo\") and also allows\nscanning of packages outside of $GOPATH.  They will come back\nwith less information in the Package, but they will still work.\n\nThe old go/build API exposed both too much and too little.\nThis API is much closer to what the go command needs,\nand it works well enough in the other places where it is\nused.  Path is gone, so it can no longer be misused.  (Fixes issue 2749.)\n\nThis CL updates clients of go/build other than the go command.\nThe go command changes are in a separate CL, to be submitted\nat the same time.\n\nR=golang-dev, r, alex.brainman, adg\nCC=golang-dev\nhttp://codereview.appspot.com/5713043",
			"disapproval": false,
			"date": "2012-03-01 17:12:12.044250",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5713043/diff/1002/src/pkg/go/build/build.go\nFile src/pkg/go/build/build.go (right):\n\nhttp://codereview.appspot.com/5713043/diff/1002/src/pkg/go/build/build.go#newcode102\nsrc/pkg/go/build/build.go:102: JoinPath func(elem ...string) string\nthis is fine, but it feels odd that these funcs aren't methods of an embedded interface object especially since *Context is already almost the thing\n\nhttp://codereview.appspot.com/5713043/diff/1002/src/pkg/go/build/build.go#newcode202\nsrc/pkg/go/build/build.go:202: func (ctxt *Context) openFile(path string) (io.ReadCloser, error) {\nfunction comments would be welcome, simple though they are.\neven when trivial, they give a place to add details to aid the reader.",
			"disapproval": false,
			"date": "2012-02-29 22:12:10.325432",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 29, 2012 at 17:12,  <r@golang.org> wrote:\n> src/pkg/go/build/build.go:102: JoinPath func(elem ...string) string\n> this is fine, but it feels odd that these funcs aren't methods of an\n> embedded interface object especially since *Context is already almost\n> the thing\n\nIt's definitely non-standard, but having separate function fields\nlets callers override just a few of the methods if necessary.\nThe go command, for example, overrides just ReadDir and\nJoinPath in order to allow packages made from the files named\non the command line.\n\n> http://codereview.appspot.com/5713043/diff/1002/src/pkg/go/build/build.go#newcode202\n> src/pkg/go/build/build.go:202: func (ctxt *Context) openFile(path\n> string) (io.ReadCloser, error) {\n> function comments would be welcome, simple though they are.\n> even when trivial, they give a place to add details to aid the reader.\n\nDone.\n",
			"disapproval": false,
			"date": "2012-02-29 22:16:49.133897",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 29, 2012 at 17:42,  <alex.brainman@gmail.com> wrote:\n> I think we will have problems with this on windows. But, we agreed to\n> disagree. :-)\n\nI would like to be able to depend on filepath.EvalSymlinks\nreturning the canonical spelling of its argument.\nSo if root is C:\\GO and dir is c:\\go\\src\\cmd,\nI would like EvalSymlinks to return strings that\nare the actual canonical case recorded in the file system\n(say, C:\\Go and C:\\Go\\src\\cmd).  Then the strings.HasPrefix\nis correct.\n\nDoes EvalSymlinks not do that on Windows?\nCan we make it do that?\n",
			"disapproval": false,
			"date": "2012-02-29 22:46:43.311407",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I know.  Really it should be called RealPath or\nsomething like that, but for now it is called\nEvalSymlinks.\n",
			"disapproval": false,
			"date": "2012-02-29 22:58:35.394310",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"alex.brainman@gmail.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org, alex.brainman@gmail.com, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-03-01 04:14:02.274135",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 29, 2012 at 23:28,  <alex.brainman@gmail.com> wrote:\n> But you are forcing the to write paths in \"canonical\" form. Because it\n> is impossible to write things like HasSubdir otherwise. Then we need to\n> define what \"canonical\" form means. And, probably, provide some\n> utilities do convert from / to it.\n\nYour first sentence lost a noun, so I'm not entirely sure what\nyou meant, but I'm not forcing anyone or anything to hand us\npaths in canonical form.  I am only forcing EvalSymlinks\n(which HasSubdir calls, twice, internally) to return paths in\ncanonical form.\n\nThe utility to convert to canonical form is, for better or worse,\nEvalSymlinks.\nThere is no utility to convert away from a canonical form.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-03-01 04:37:05.289778",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/02/29 22:58:35, rsc wrote:\n> I know.  Really it should be called RealPath or\n> something like that, but for now it is called\n> EvalSymlinks.\n\nFair enough.\n\nI will see if I can find \"canonical\" name inside EvalSymlinks. I said \"sure\", but I really have no idea. :-)\n\nI am still not convinced it is the right way of going about it. But it is certainly \"righter\" then before.\n\nAlex",
			"disapproval": false,
			"date": "2012-02-29 23:06:03.207591",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"alex.brainman@gmail.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Fixes 2775?\n\nhttp://codereview.appspot.com/5713043/diff/5001/src/pkg/go/build/build.go\nFile src/pkg/go/build/build.go (right):\n\nhttp://codereview.appspot.com/5713043/diff/5001/src/pkg/go/build/build.go#newcode89\nsrc/pkg/go/build/build.go:89: GOROOT      string   // build Go root\nthe comment is unclear; it sounds like a command\n// root of Go build tree\n\nhttp://codereview.appspot.com/5713043/diff/5001/src/pkg/go/build/build.go#newcode90\nsrc/pkg/go/build/build.go:90: GOPATH      string   // build Go path\n// GOPATH entry used to build this tree\n?\n\nhttp://codereview.appspot.com/5713043/diff/5001/src/pkg/go/build/build.go#newcode98\nsrc/pkg/go/build/build.go:98: // callers can set the following functions.  It is allowed to set some\n\"allowed\" sounds odd. OK? legal? or maybe be proactive:\nThey all have default behaviors, so clients need only set the functions required\nto satisfy particular properties.\n\nhttp://codereview.appspot.com/5713043/diff/5001/src/pkg/go/build/build.go#newcode117\nsrc/pkg/go/build/build.go:117: // HasSubdir reports whether if dir is a subdirectory of\ns/if // and move \"of\" after the parens.\n\nhttp://codereview.appspot.com/5713043/diff/5001/src/pkg/go/build/build.go#newcode214\nsrc/pkg/go/build/build.go:214: // isFile determines whether path is a file by trying to open it.\nare we guaranteed that opening a directory will fail on all platforms?\nwhy is the implementation so different from isDir?",
			"disapproval": false,
			"date": "2012-03-01 00:37:10.116928",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Done.\n\nOn Wed, Feb 29, 2012 at 19:37,  <r@golang.org> wrote:\n> http://codereview.appspot.com/5713043/diff/5001/src/pkg/go/build/build.go#newcode89\n> src/pkg/go/build/build.go:89: GOROOT \u00a0 \u00a0 \u00a0string \u00a0 // build Go root\n> the comment is unclear; it sounds like a command\n> // root of Go build tree\n\n// Go root\n\n> http://codereview.appspot.com/5713043/diff/5001/src/pkg/go/build/build.go#newcode90\n> src/pkg/go/build/build.go:90: GOPATH \u00a0 \u00a0 \u00a0string \u00a0 // build Go path\n> // GOPATH entry used to build this tree\n\n// Go path\n\nIt's the whole GOPATH, not just one entry.\n\n> http://codereview.appspot.com/5713043/diff/5001/src/pkg/go/build/build.go#newcode98\n> src/pkg/go/build/build.go:98: // callers can set the following\n> functions. \u00a0It is allowed to set some\n> \"allowed\" sounds odd. OK? legal? or maybe be proactive:\n> They all have default behaviors, so clients need only set the functions\n> required\n> to satisfy particular properties.\n\n\t// callers can set the following functions.  They all have default\n\t// behaviors that use the local file system, so clients need only set\n\t// the functions whose behaviors they wish to change.\n\n> http://codereview.appspot.com/5713043/diff/5001/src/pkg/go/build/build.go#newcode117\n> src/pkg/go/build/build.go:117: // HasSubdir reports whether if dir is a\n> subdirectory of\n> s/if // and move \"of\" after the parens.\n\nDid first half; if I move of it says \"levels below) of root\".\n\n> http://codereview.appspot.com/5713043/diff/5001/src/pkg/go/build/build.go#newcode214\n> src/pkg/go/build/build.go:214: // isFile determines whether path is a\n> file by trying to open it.\n> are we guaranteed that opening a directory will fail on all platforms?\n> why is the implementation so different from isDir?\n\n// isFile determines whether path is a file by trying to open it.\n// It reuses openFile instead of adding another function to the\n// list in Context.\n",
			"disapproval": false,
			"date": "2012-03-01 04:13:23.738761",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/02/29 22:46:43, rsc wrote:\n> On Wed, Feb 29, 2012 at 17:42,  <mailto:alex.brainman@gmail.com> wrote:\n> > I think we will have problems with this on windows. But, we agreed to\n> > disagree. :-)\n> \n> I would like to be able to depend on filepath.EvalSymlinks\n> returning the canonical spelling of its argument.\n> So if root is C:\\GO and dir is c:\\go\\src\\cmd,\n> I would like EvalSymlinks to return strings that\n> are the actual canonical case recorded in the file system\n> (say, C:\\Go and C:\\Go\\src\\cmd).  Then the strings.HasPrefix\n> is correct.\n> \n> Does EvalSymlinks not do that on Windows?\n\nNo it does not. It checks that file exists (os.Lstat) and then it Clean the path.\n\n> Can we make it do that?\n\nSure. But shouldn't it be called ConvertPathToCanonecalOSForm (or something like that) instead? EvalSymlinks is confusing for what we are trying to do, especially considering Windows does not have symlinks.\n\nAlex",
			"disapproval": false,
			"date": "2012-02-29 22:52:50.433754",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5713043/diff/5001/src/pkg/go/build/build.go\nFile src/pkg/go/build/build.go (right):\n\nhttp://codereview.appspot.com/5713043/diff/5001/src/pkg/go/build/build.go#newcode187\nsrc/pkg/go/build/build.go:187: if !strings.HasPrefix(dir, root) {\nI think we will have problems with this on windows. But, we agreed to disagree. :-)\n\nhttp://codereview.appspot.com/5713043/diff/5001/src/pkg/go/build/build.go#newcode999\nsrc/pkg/go/build/build.go:999: filepath.HasPrefix(path, \"./\") || filepath.HasPrefix(path, \"../\")\ns/filepath/strings/g",
			"disapproval": false,
			"date": "2012-02-29 22:42:54.787121",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nI was troubled by this package since the beginning. This is much better.\n\nOn 1 March 2012 09:58, Russ Cox <rsc@golang.org> wrote:\n> I know. \u00a0Really it should be called RealPath or\n> something like that, but for now it is called\n> EvalSymlinks.\n\nHm. http://codereview.appspot.com/4235060/#msg12\n",
			"disapproval": false,
			"date": "2012-03-01 00:21:59.240964",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 29, 2012 at 19:21, Andrew Gerrand <adg@golang.org> wrote:\n>> I know. \u00a0Really it should be called RealPath or\n>> something like that, but for now it is called\n>> EvalSymlinks.\n>\n> Hm. http://codereview.appspot.com/4235060/#msg12\n\nOriginally I thought this function was about evaluating\nsymlinks.  While it does that, I now understand that\nwhen you need it, you really need a higher-level idea,\nthat of turning a path name into the canonical identifier\nfor that path.  I wish we had that.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-03-01 01:15:20.766958",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"alex.brainman@gmail.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/03/01 01:15:20, rsc wrote:\n> ... you really need a higher-level idea,\n> that of turning a path name into the canonical identifier\n> for that path. ...\n> \n\nI never come across of that thing in my life on Windows. I think it is wishful thinking on your part.\n\nOf course if you ask a particular api for a file path, you will get reproducible answer. But different api might give you different answer.\n\nFor example \"drive letter\" in c:\\a\\b. Is it supposed to be \"c\" or \"C\"? It is not part of any \"file system\". It is sort of mount point. No one \"creates\" it. It appears in your path space once you \"mount\" a file system to it. Either \"c\" or \"C\" will work when you talk about it. Even if all Windows apis refer to it as \"C\", but not \"c\", \"c\" will still be acceped everywhere. People do not think about it: \"c\" or \"C\" - they use either and it works. Always. So if Go will stater here saying: \"Windows api returns \"C\", but you are using \"c\", it is not *canonical*, you can't do that\", people will be confused.\n\nAlex",
			"disapproval": false,
			"date": "2012-03-01 01:56:32.346770",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 29, 2012 at 19:28,  <r@golang.org> wrote:\n> Fixes 3118?\n\nNo, nor 2775, but definitely part of the answer.\n",
			"disapproval": false,
			"date": "2012-03-01 04:09:16.430526",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 29, 2012 at 20:56,  <alex.brainman@gmail.com> wrote:\n> For example \"drive letter\" in c:\\a\\b. Is it supposed to be \"c\" or \"C\"?\n> It is not part of any \"file system\". It is sort of mount point. No one\n> \"creates\" it. It appears in your path space once you \"mount\" a file\n> system to it. Either \"c\" or \"C\" will work when you talk about it. Even\n> if all Windows apis refer to it as \"C\", but not \"c\", \"c\" will still be\n> acceped everywhere. People do not think about it: \"c\" or \"C\" - they use\n> either and it works. Always. So if Go will stater here saying: \"Windows\n> api returns \"C\", but you are using \"c\", it is not *canonical*, you can't\n> do that\", people will be confused.\n\nI am not planning to force people to write paths in canonical form,\nbut having a conversion to canonical form makes it possible to\nwrite things like HasSubdir: step 1 is convert the paths to canonical\nform, and then step 2 is to process them.  Making them different\noperations means that you can make step 2 arbitrarily complex and\ndon't have to stick it in a library.  Part of the problem with HasPrefix\nis that it combines canonicalization (in the form of ToLower) and an\noperation on the canonical forms (the prefix check), but you might\nhave other things you want to do instead.\n\nWindows definitely knows the \"official\" case of a file name: when you\nlist a directory you always get the same result, even though there\nare 2^n possible casings for an n-letter name.  If that's too hard to\nextract, it would be a fine stopgap to define that Go's canonical form\nfor a Windows path is all lowercase and make EvalSymlinks return\nstrings.ToLower(arg).\n\nRuss\n",
			"disapproval": false,
			"date": "2012-03-01 04:08:29.241145",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5713043: go/build: replace FindTree, ScanDir, Tree, DirInfo with...",
	"created": "2012-02-29 20:35:12.677074",
	"patchsets": [
		1,
		2001,
		1002,
		5001,
		4076,
		28,
		4101
	],
	"modified": "2012-03-01 17:12:13.536073",
	"closed": true,
	"issue": 5713043
}