{
	"description": "cmd/gc: inlining of variadic functions.",
	"cc": [
		"rsc@golang.org",
		"lvd@gmail.com",
		"golang-dev@googlegroups.com",
		"kardianos@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"lvd@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, lvd@gmail.com, golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-01-12 07:42:03.544320",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"lvd@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The following functions in the std library are simple enough to be inlined with this patch:\n\nsrc/pkg/io/multi.go:30: should inline MultiReader but it's variadic\nsrc/pkg/io/multi.go:54: should inline MultiWriter but it's variadic\nsrc/pkg/text/template/parse/parse.go:112: should inline New but it's variadic\nsrc/cmd/cgo/gcc.go:1021: should inline (*TypeRepr).Set but it's variadic\nsrc/cmd/cgo/out.go:895: should inline c but it's variadic\nsrc/pkg/html/template/html.go:255: should inline commentEscaper but it's variadic",
			"disapproval": false,
			"date": "2013-01-12 07:46:31.228470",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Would it be correct to say, this in-lines the functions but doesn't save an \r\nalloc for the slice?\r\n\r\nThanks,\r\n-Daniel\r\n\r\n\r\nOn Friday, January 11, 2013 11:42:03 PM UTC-8, R\u00e9my wrote:\r\n>\r\n> Reviewers: rsc, lvd2, golang-dev_googlegroups.com, \r\n>\r\n> Message: \r\n> Hello r...@golang.org <javascript:>, l...@gmail.com <javascript:>, \r\n> golan...@googlegroups.com <javascript:> (cc: \r\n> golan...@googlegroups.com <javascript:>), \r\n>\r\n> I'd like you to review this change to \r\n> https://go.googlecode.com/hg/ \r\n>\r\n>\r\n> Description: \r\n> cmd/gc: inlining of variadic functions. \r\n>\r\n> Please review this at https://codereview.appspot.com/7093050/ \r\n>\r\n> Affected files: \r\n>    M src/cmd/gc/inl.c \r\n>\r\n>\r\n>",
			"disapproval": false,
			"date": "2013-01-13 06:48:26.045550",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/1/13 Daniel Theophanes <kardianos@gmail.com> wrote:\r\n> Would it be correct to say, this in-lines the functions but doesn't save an\r\n> alloc for the slice?\r\n>\r\n> Thanks,\r\n> -Daniel\r\n\r\nIt works like a normal call. Thanks to escape analysis even in normal\r\nvariadic calls, it can happen that the slice data is on the stack.\r\n\r\nR\u00e9my.\r\n",
			"disapproval": false,
			"date": "2013-01-13 09:52:41.607350",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"lvd@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "- It could be enabled by default if useful\n- I have a test for this but not sure where to put it:\n\npackage main\n\nfunc sum(a ...int) int {\n\tif len(a) == 0 {\n\t\treturn 0\n\t}\n\ts := a[0] + a[1] + a[2]\n\treturn s\n}\n\nfunc sum2(a int, b ...int) int {\n\ts := a + b[0] + b[1]\n\treturn s\n}\n\nfunc N() (a, b, c int) { return 1, 2, 3 }\n\nfunc main() {\n\tu, v, w := 1, 2, 3\n\ts := sum(u, v, w)\n\tif s != 6 {\n\t\tpanic(s)\n\t}\n\ts = sum2(u, v, w)\n\tif s != 6 {\n\t\tpanic(s)\n\t}\n\n\ts = sum(N())\n\tif s != 6 {\n\t\tpanic(s)\n\t}\n\ts = sum2(N())\n\tif s != 6 {\n\t\tpanic(s)\n\t}\n\n\tV := []int{1, 2, 3}\n\ts = sum(V...)\n\tif s != 6 {\n\t\tpanic(s)\n\t}\n\ts = sum2(3, V...)\n\tif s != 6 {\n\t\tpanic(s)\n\t}\n\n\ts = sum()\n\tif s != 0 {\n\t\tpanic(s)\n\t}\n}",
			"disapproval": false,
			"date": "2013-01-12 07:43:09.011150",
			"approval": false
		},
		{
			"sender": "lvd@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"lvd@gmail.com",
				"golang-dev@googlegroups.com",
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nvery nice.\n\nhttps://codereview.appspot.com/7093050/diff/4001/src/cmd/gc/inl.c\nFile src/cmd/gc/inl.c (right):\n\nhttps://codereview.appspot.com/7093050/diff/4001/src/cmd/gc/inl.c#newcode26\nsrc/cmd/gc/inl.c:26: //   - inline functions with ... args\ndone, no?  and didn't you fix the one below recently too?",
			"disapproval": false,
			"date": "2013-01-13 09:21:28.086070",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"lvd@gmail.com",
				"golang-dev@googlegroups.com",
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Any other comment about: whether the test could be committed somewhere? whether the inlining should be enabled by default or left at level 3?",
			"disapproval": false,
			"date": "2013-01-16 21:59:55.593390",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"lvd@gmail.com",
				"golang-dev@googlegroups.com",
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nI would prefer this not be on by default. Thanks.",
			"disapproval": false,
			"date": "2013-01-30 16:35:12.988140",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"lvd@gmail.com",
				"golang-dev@googlegroups.com",
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, lvd@gmail.com, golang-dev@googlegroups.com, kardianos@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-30 21:21:07.187190",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"lvd@gmail.com",
				"golang-dev@googlegroups.com",
				"kardianos@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=84f3f82c91fa ***\n\ncmd/gc: inlining of variadic functions.\n\nR=rsc, lvd, golang-dev, kardianos\nCC=golang-dev\nhttps://codereview.appspot.com/7093050",
			"disapproval": false,
			"date": "2013-01-31 07:41:15.806530",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"lvd@gmail.com",
				"golang-dev@googlegroups.com",
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I seem to have written garbage in the previous patch.",
			"disapproval": false,
			"date": "2013-01-30 21:21:58.188580",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"lvd@gmail.com",
				"golang-dev@googlegroups.com",
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-01-31 01:49:20.438210",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"lvd@gmail.com",
				"golang-dev@googlegroups.com",
				"kardianos@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7093050/diff/19002/src/cmd/gc/inl.c\nFile src/cmd/gc/inl.c (right):\n\nhttps://codereview.appspot.com/7093050/diff/19002/src/cmd/gc/inl.c#newcode621\nsrc/cmd/gc/inl.c:621: if(n->list->n->left->type->outtuple > 1)\nhad to correct a little typo here.",
			"disapproval": false,
			"date": "2013-01-31 07:41:35.121610",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 7093050: cmd/gc: inlining of variadic functions.",
	"created": "2013-01-12 07:21:16.784190",
	"patchsets": [
		1,
		3,
		4001,
		10001,
		14001,
		19002,
		15003
	],
	"modified": "2013-01-31 07:41:35.402200",
	"closed": true,
	"issue": 7093050
}