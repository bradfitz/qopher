{
	"description": "test: add some tests of valid code that failed with gccgo",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=2e68ba67a644 ***\n\ntest: add some tests of valid code that failed with gccgo\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5971044",
			"disapproval": false,
			"date": "2012-03-30 15:42:26.114269",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-03-30 13:11:10.522242",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM, except an errant \"x\" in 433?\n\nOn Fri, Mar 30, 2012 at 6:11 AM, <iant@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> test: add some tests of valid code that failed with gccgo\n>\n> Please review this at http://codereview.appspot.com/**5971044/<http://codereview.appspot.com/5971044/>\n>\n> Affected files:\n>  M test/blank.go\n>  A test/fixedbugs/bug430.go\n>  A test/fixedbugs/bug431.go\n>  A test/fixedbugs/bug432.go\n>  A test/fixedbugs/bug433.go\n>\n>\n> Index: test/blank.go\n> ==============================**==============================**=======\n> --- a/test/blank.go\n> +++ b/test/blank.go\n> @@ -113,7 +113,7 @@\n>\n>  type TI struct{}\n>\n> -func (TI) M(x int, y int) {\n> +func (_ TI) M(x int, y int) {\n>        if x != y {\n>                println(\"invalid M call:\", x, y)\n>                panic(\"bad M\")\n> Index: test/fixedbugs/bug430.go\n> ==============================**==============================**=======\n> new file mode 100644\n> --- /dev/null\n> +++ b/test/fixedbugs/bug430.go\n> @@ -0,0 +1,22 @@\n> +// compile\n> +\n> +// Copyright 2012 The Go Authors. All rights reserved.\n> +// Use of this source code is governed by a BSD-style\n> +// license that can be found in the LICENSE file.\n> +\n> +// gccgo crashed compiling this.\n> +\n> +package main\n> +\n> +type S struct {\n> +       f [2][]int\n> +}\n> +\n> +func F() (r [2][]int) {\n> +       return\n> +}\n> +\n> +func main() {\n> +       var a []S\n> +       a[0].f = F()\n> +}\n> Index: test/fixedbugs/bug431.go\n> ==============================**==============================**=======\n> new file mode 100644\n> --- /dev/null\n> +++ b/test/fixedbugs/bug431.go\n> @@ -0,0 +1,18 @@\n> +// compile\n> +\n> +// Copyright 2012 The Go Authors. All rights reserved.\n> +// Use of this source code is governed by a BSD-style\n> +// license that can be found in the LICENSE file.\n> +\n> +// gccgo gave an invalid error (\"floating point constant truncated to\n> +// integer\") compiling this.\n> +\n> +package p\n> +\n> +const C = 1<<63 - 1\n> +\n> +func F(i int64) int64 {\n> +       return i\n> +}\n> +\n> +var V = F(int64(C) / 1e6)\n> Index: test/fixedbugs/bug432.go\n> ==============================**==============================**=======\n> new file mode 100644\n> --- /dev/null\n> +++ b/test/fixedbugs/bug432.go\n> @@ -0,0 +1,13 @@\n> +// compile\n> +\n> +// Copyright 2012 The Go Authors. All rights reserved.\n> +// Use of this source code is governed by a BSD-style\n> +// license that can be found in the LICENSE file.\n> +\n> +// gccgo crashed compiling this.\n> +\n> +package p\n> +\n> +var v struct{ I }\n> +\n> +type I interface{}\n> Index: test/fixedbugs/bug433.go\n> ==============================**==============================**=======\n> new file mode 100644\n> --- /dev/null\n> +++ b/test/fixedbugs/bug433.go\n> @@ -0,0 +1,39 @@\n> +// run\n> +\n> +// Copyright 2012 The Go Authors. All rights reserved.\n> +// Use of this source code is governed by a BSD-style\n> +// license that can be found in the LICENSE file.\n> +x\n> +// Test that initializing struct fields out of order still runs\n> +// functions in the right order.  This failed with gccgo.\n> +\n> +package main\n> +\n> +type S struct {\n> +       i1, i2, i3 int\n> +}\n> +\n> +var G int\n> +\n> +func v(i int) int {\n> +       if i != G {\n> +               panic(i)\n> +       }\n> +       G = i + 1\n> +       return G\n> +}\n> +\n> +func F() S {\n> +       return S{\n> +               i1: v(0),\n> +               i3: v(1),\n> +               i2: v(2),\n> +       }\n> +}\n> +\n> +func main() {\n> +       s := F()\n> +       if s != (S{1, 3, 2}) {\n> +               panic(s)\n> +       }\n> +}\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-03-30 15:13:11.985626",
			"approval": true
		}
	],
	"owner_email": "iant@golang.org",
	"private": false,
	"base_url": "",
	"owner": "iant",
	"subject": "code review 5971044: test: add some tests of valid code that failed with gccgo",
	"created": "2012-03-30 13:11:00.308359",
	"patchsets": [
		1,
		2002,
		5001
	],
	"modified": "2012-03-30 15:42:27.525200",
	"closed": true,
	"issue": 5971044
}