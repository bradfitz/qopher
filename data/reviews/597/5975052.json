{
	"description": "encoding/base64: fix panic when input len is not a multiple of 4\n\nFixes issue 3442.",
	"cc": [
		"for.go.yong@gmail.com",
		"dsymonds@golang.org",
		"sougou@google.com",
		"minux.ma@gmail.com",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Apr 1, 2012 at 12:07 AM,  <dave@cheney.net> wrote:\n\n>> (2) trailing line breaks should be ignored without failing the parse,\n>> just like line breaks in the middle.\n>\n> What do you mean by trailing like break, the = ?\n\nThe base64 decoder allows \\r and \\n inside the input to make it easier\nto deal with input coming from line-wrapped contexts. That means that\nthe input may be valid even its length is not a multiple of 4. I think\nyour change breaks that.\n",
			"disapproval": false,
			"date": "2012-03-31 13:16:56.027782",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I can add some test cases for strings like QQ=\\n, but if there are no objections, I'd like to handle it on a separate CL.\n\nSent from my iPad\n\nOn 01/04/2012, at 8:56, David Symonds <dsymonds@golang.org> wrote:\n\n> On Sun, Apr 1, 2012 at 2:58 AM,  <sougou@google.com> wrote:\n> \n>> It seems like the code will not handle the case where there are line\n>> breaks within the paddings, like \"=\\n=\". Is that considered invalid?\n> \n> Yeah, the previous code also broke on that. It's a bit fiddly to fix\n> that, and I'm not too sure whether it's worth trying, but that's\n> orthogonal to this CL.\n",
			"disapproval": false,
			"date": "2012-03-31 23:01:29.752597",
			"approval": false
		},
		{
			"sender": "sougou@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sounds good. The patch works for me.\n\nOn Sat, Mar 31, 2012 at 4:01 PM, Dave Cheney <dave@cheney.net> wrote:\n\n> I can add some test cases for strings like QQ=\\n, but if there are no\n> objections, I'd like to handle it on a separate CL.\n>\n> Sent from my iPad\n>\n> On 01/04/2012, at 8:56, David Symonds <dsymonds@golang.org> wrote:\n>\n> > On Sun, Apr 1, 2012 at 2:58 AM,  <sougou@google.com> wrote:\n> >\n> >> It seems like the code will not handle the case where there are line\n> >> breaks within the paddings, like \"=\\n=\". Is that considered invalid?\n> >\n> > Yeah, the previous code also broke on that. It's a bit fiddly to fix\n> > that, and I'm not too sure whether it's worth trying, but that's\n> > orthogonal to this CL.\n>\n",
			"disapproval": false,
			"date": "2012-04-01 05:42:12.107940",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dave@cheney.net",
				"for.go.yong@gmail.com",
				"dsymonds@golang.org",
				"sougou@google.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5975052/diff/3004/src/pkg/encoding/base64/base64.go\nFile src/pkg/encoding/base64/base64.go (right):\n\nhttp://codereview.appspot.com/5975052/diff/3004/src/pkg/encoding/base64/base64.go#newcode230\nsrc/pkg/encoding/base64/base64.go:230: if in == '=' && j > 1 && len(src) < 4 {\nOn 2012/04/02 12:18:23, minux wrote:\n> what's the difference between 'j > 1' and 'j >= 2'?\n\nIndeed.  Please revert this change.  It just causes noise in the repo history.",
			"disapproval": false,
			"date": "2012-04-02 16:51:27.068605",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"for.go.yong@gmail.com",
				"dsymonds@golang.org",
				"sougou@google.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello for.go.yong@gmail.com, dsymonds@golang.org, sougou@google.com, minux.ma@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-02 20:54:01.079631",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dave@cheney.net",
				"for.go.yong@gmail.com",
				"dsymonds@golang.org",
				"sougou@google.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=95e67cc5fa08 ***\n\nencoding/base64: fix panic when input len is not a multiple of 4\n\nFixes issue 3442.\n\nR=for.go.yong, dsymonds, sougou, minux.ma, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5975052\n\nCommitter: David Symonds <dsymonds@golang.org>",
			"disapproval": false,
			"date": "2012-04-03 02:14:10.556956",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"for.go.yong@gmail.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, for.go.yong@gmail.com, dsymonds@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-03-31 13:19:48.456232",
			"approval": false
		},
		{
			"sender": "sougou@google.com",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"for.go.yong@gmail.com",
				"dsymonds@golang.org",
				"sougou@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It seems like the code will not handle the case where there are line breaks within the paddings, like \"=\\n=\". Is that considered invalid?",
			"disapproval": false,
			"date": "2012-03-31 16:58:39.043823",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Apr 2, 2012 at 7:48 PM,  <dave@cheney.net> wrote:\n\n> It turns out there are already tests for newline characters, these\n> continue to pass with this CL.\n>\n> There is an outstanding item to add a test for this string \"c3VyZQ=\\n=\",\n> however it did not pass before this CL, so can be tackled in a latter\n> CL.\n\nYes, I knew both of those things. I wrote the code to handle newlines.  ;-)\n",
			"disapproval": false,
			"date": "2012-04-02 12:05:11.375841",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"for.go.yong@gmail.com",
				"dsymonds@golang.org",
				"sougou@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nIf no-one raises objections or alternatives overnight, I'll submit this tomorrow.",
			"disapproval": false,
			"date": "2012-04-02 12:05:34.896466",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"for.go.yong@gmail.com",
				"dsymonds@golang.org",
				"sougou@google.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5975052/diff/3004/src/pkg/encoding/base64/base64.go\nFile src/pkg/encoding/base64/base64.go (right):\n\nhttp://codereview.appspot.com/5975052/diff/3004/src/pkg/encoding/base64/base64.go#newcode230\nsrc/pkg/encoding/base64/base64.go:230: if in == '=' && j > 1 && len(src) < 4 {\nwhat's the difference between 'j > 1' and 'j >= 2'?",
			"disapproval": false,
			"date": "2012-04-02 12:18:23.583963",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Apr 1, 2012 at 2:58 AM,  <sougou@google.com> wrote:\n\n> It seems like the code will not handle the case where there are line\n> breaks within the paddings, like \"=\\n=\". Is that considered invalid?\n\nYeah, the previous code also broke on that. It's a bit fiddly to fix\nthat, and I'm not too sure whether it's worth trying, but that's\northogonal to this CL.\n",
			"disapproval": false,
			"date": "2012-03-31 22:56:02.976309",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> http://codereview.appspot.com/5975052/diff/3004/src/pkg/encoding/base64/base64.go#newcode230\n> src/pkg/encoding/base64/base64.go:230: if in == '=' && j > 1 && len(src)\n> < 4 {\n> what's the difference between 'j > 1' and 'j >= 2'?\n\nLogically they are the same. I think the former is clearer but others may disagree. \n\nCheers\n\nDave ",
			"disapproval": false,
			"date": "2012-04-02 12:28:33.213981",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-03-31 10:07:43.640244",
			"approval": false
		},
		{
			"sender": "for.go.yong@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks\nOn Mar 31, 2012 7:07 PM, <dave@cheney.net> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> encoding/base64: fix panic when input len is not a multiple of 4\n>\n> Fixed issue 3442.\n>\n> Please review this at http://codereview.appspot.com/**5975052/<http://codereview.appspot.com/5975052/>\n>\n> Affected files:\n>  M src/pkg/encoding/base64/**base64.go\n>  M src/pkg/encoding/base64/**base64_test.go\n>\n>\n> Index: src/pkg/encoding/base64/**base64.go\n> ==============================**==============================**=======\n> --- a/src/pkg/encoding/base64/**base64.go\n> +++ b/src/pkg/encoding/base64/**base64.go\n> @@ -212,6 +212,9 @@\n>  func (enc *Encoding) decode(dst, src []byte) (n int, end bool, err error)\n> {\n>        osrc := src\n>        for len(src) > 0 && !end {\n> +               if len(src) < 4 {\n> +                       return n, false, CorruptInputError(len(osrc) -\n> len(src))\n> +               }\n>                // Decode quantum using the base64 alphabet\n>                var dbuf [4]byte\n>                dlen := 4\n> Index: src/pkg/encoding/base64/**base64_test.go\n> ==============================**==============================**=======\n> --- a/src/pkg/encoding/base64/**base64_test.go\n> +++ b/src/pkg/encoding/base64/**base64_test.go\n> @@ -151,6 +151,8 @@\n>                {\"AAA=AAAA\", 3},\n>                {\"AAAAA\", 4},\n>                {\"AAAAAA\", 4},\n> +               {\"AA=\", 0},\n> +               {\"AAAAAA=\", 4},\n>        }\n>\n>        for _, e := range examples {\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-03-31 10:25:42.545993",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"for.go.yong@gmail.com",
				"dsymonds@golang.org",
				"sougou@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, for.go.yong@gmail.com, dsymonds@golang.org, sougou@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-02 09:49:20.461173",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This seems odd.\n\n(1) why doesn't line 225 catch this?\n(2) trailing line breaks should be ignored without failing the parse, just\nlike line breaks in the middle.\n",
			"disapproval": false,
			"date": "2012-03-31 11:30:25.087341",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"for.go.yong@gmail.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> This seems odd.\n\nI think it's an edge case that the tests did not cater for; all the invalid samples were multiples of 4 input bytes, the OP's example was not.\n\n> (1) why doesn't line 225 catch this?\n\nGood point, but even so 233 is trying to check, but it assumes there are two bytes of padding (ie, AA==).\n\n> (2) trailing line breaks should be ignored without failing the parse, just\n> like line breaks in the middle.\n\nWhat do you mean by trailing like break, the = ?",
			"disapproval": false,
			"date": "2012-03-31 13:07:04.186665",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"for.go.yong@gmail.com",
				"dsymonds@golang.org",
				"sougou@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It turns out there are already tests for newline characters, these continue to pass with this CL.\n\nThere is an outstanding item to add a test for this string \"c3VyZQ=\\n=\", however it did not pass before this CL, so can be tackled in a latter CL.",
			"disapproval": false,
			"date": "2012-04-02 09:48:31.525102",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dave@cheney.net",
				"for.go.yong@gmail.com",
				"dsymonds@golang.org",
				"sougou@google.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-04-03 02:08:05.328633",
			"approval": true
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 5975052: encoding/base64: fix panic when input len is not a mult...",
	"created": "2012-03-31 10:03:56.905735",
	"patchsets": [
		1,
		2001,
		3003,
		7001,
		4003,
		3004,
		5
	],
	"modified": "2012-04-03 09:37:51.356392",
	"closed": true,
	"issue": 5975052
}