{
	"description": "flag: trivial change the print-format of string value\n\n%q will escape string with Go syntax, so \"C:\\Windows\\System32\" will be\nescaped to \"C:\\\\Windows\\\\System32\", every back slash (\\) is doubled, which\nis odd to end user, especially to windows user. There is not necessary to\nprint string in Go syntax, in a cmd's help message, flag.PrintDefaults().",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"0xjnml@gmail.com",
		"dsymonds@golang.org",
		"minux.ma@gmail.com",
		"mtj@google.com",
		"ugorji@gmail.com",
		"r@golang.org"
	],
	"messages": [
		{
			"sender": "0xjnml@gmail.com",
			"recipients": [
				"com.liigo@gmail.com",
				"golang-dev@googlegroups.com",
				"0xjnml@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/03/30 16:00:21, liigo wrote:\n> Hello mailto:golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go\n\nIMO the current behavior is correct and the patch would make the behavior incorrect.\n\nThe quoted and escaped string in this particular place has nothing to do with Windows (or any OS) paths. It allows to display *any* string possibly with e.g. control characters to be displayed correctly in a human readable format w/o messing up with the printout and/or any other unwelcome effect to the terminal. The later could be even in theory an attack vector, I guess.\n\nIMO this CL should be rejected.",
			"disapproval": false,
			"date": "2012-03-30 22:39:36.386281",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Mar 31, 2012 at 9:28 AM, Liigo Zhuang <com.liigo@gmail.com> wrote:\n\n> When print windows paths, it's not only a bit odd, it's invalid paths.\n>\n> I run godoc on windows, it prints:\n> -------------------------------------------------------------\n> D:\\Users\\liigo>godoc\n> usage: godoc package [name ...]\n>         godoc -http=:6060\n>   -goroot=\"C:\\\\golang\\\\go1\": Go root directory\n> -------------------------------------------------------------\n>\n> \"C:\\\\golang\\\\go1\" is not a valid path on windows. So i think something\n> should be fixed, the behavior %q do?\n>\nHave you tried to use that path? I think it's a valid Windows path.\n\nC:\\>cd c:\\\\windows\\\\system32\nC:\\WINDOWS\\system32>\n",
			"disapproval": false,
			"date": "2012-03-31 05:41:47.312498",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Should there be a \"canonicalize\" function for each underlying OS that \"does\nthe right thing\" for strings intended to be used as file names?\n\nI remember (from 10+ years ago) that MS Windows needed \"\\ \" for spaces,\ncould also take forward slash for back slash in its APIs, preferred upper\ncase \"drive letters\" and so on. If there is such a function, then\ntransliterating \"//\" to \"/\" seems fair. Likewise on UNIX-derived systems\nwhere \"././././\" can clearly be reduced to \"./\" Might be handy. Would solve\nthe problem here.\n\nOn Sat, Mar 31, 2012 at 8:12 AM, Jan Mercl <0xjnml@gmail.com> wrote:\n\n> On Saturday, March 31, 2012 4:58:03 PM UTC+2, Liigo Zhuang wrote:\n>>\n>> If you're a programmer, please execute the basis logic first: even you\n>> found one hundred instances that accept the path(\"c:\\\\file\"), you can't\n>> prove it's valid path; even I found only one instance not accept the path,\n>> which I done, i do prove it's invalid path.\n>>\n> Talking about basic logic: if any given/some application is broken, i.e.\n> if it, or its GUI \"shell\", doesn't accept the same path as the respective\n> OS API, it runs on, happily does, then the conclusion you've come to is\n> invalid/unreasonable/call it whatever - except logical.\n>\n> Again, IMO this CL should be rejected.\n>\n>\n>\n\n\n-- \nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\n650-335-5765\n",
			"disapproval": false,
			"date": "2012-03-31 15:48:59.194007",
			"approval": false
		},
		{
			"sender": "ugorji@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Such function already exists. It's call path/filepath.EvalSymlinks\n\nI remember there was talk of possibly changing the name at one point, but \nit was abandoned. For all intents and purposes, EvalSymlinks = \nCanonicalizePath. Russ was involved in the discussion and may have more \ncontext.\n\nWRT this CL, the question is: should the flag package escape strings it \nwrites out so that nothing unexpected happens (e.g. messing up terminal, \netc). The package writers determined \"Yes\". Different folks have different \nopinions, but I think the current status quo is a fair answer. As folks \nsaid earlier, the flag package is not about writing out a path. The fact \nthat a Path may look bad or be invalid if passed to the OS as is from a \ncopy-and-paste is not the determinant of what its logic should be.\n\nOn Saturday, March 31, 2012 12:54:19 PM UTC-4, Michael Jones wrote:\n>\n> The CL is not the place for the code, but the problem is real and there \n> might should be a place for it in the os abstraction layer... \n> \"MakeThisFileNameAcceptable()\" or some such.\n>\n> On Sat, Mar 31, 2012 at 9:26 AM, Jan Mercl <0xjnml@gmail.com> wrote:\n>\n>> On Saturday, March 31, 2012 5:48:28 PM UTC+2, Michael Jones wrote:\n>>>\n>>> Should there be a \"canonicalize\" function for each underlying OS that \n>>> \"does the right thing\" for strings intended to be used as file names?\n>>\n>>\n>> That's quite possibly a pretty useful function.\n>>\n>> Unfortunately this CL wants to patch a far from any path canonicalization \n>> related package - \"flag\". At least as long as there's no flag.Path[Var] or \n>> something like that.\n>>\n>>\n>>\n>\n>\n> -- \n> Michael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1 \n> 650-335-5765\n>\n>",
			"disapproval": false,
			"date": "2012-03-31 17:08:26.282961",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Oh. I was trying to be as generous as possible.\n\nOn Sat, Mar 31, 2012 at 10:10 AM, Jan Mercl <0xjnml@gmail.com> wrote:\n\n> On Saturday, March 31, 2012 6:54:19 PM UTC+2, Michael Jones wrote:\n>>\n>> The CL is not the place for the code, but the problem is real and there\n>> might should be a place for it in the os abstraction layer...\n>> \"MakeThisFileNameAcceptable()\" or some such.\n>\n>\n> In the specific case of the OP, I'm not even sure the problem is really\n> \"real\". IIUC, the double backslash appears just on the screen as a correct\n> effect of using the %q formatting verb. The actual string value, on which\n> the printout is based, does have only single backslash as separators of the\n> path parts, I presume. Can't verify that w/o Windows.\n>\n>\n\n\n-- \nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\n650-335-5765\n",
			"disapproval": false,
			"date": "2012-03-31 18:02:38.502713",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"com.liigo@gmail.com",
				"golang-dev@googlegroups.com",
				"0xjnml@gmail.com",
				"dsymonds@golang.org",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/03/31 01:00:26, dsymonds wrote:\n> I don't think this is a good change. Paths are not the only type of\n> string value, and the current code produces something that is\n> reasonably close to valid for use in a shell context.\n\nWhy are strings unquoted when the flag is created as flag.Var? \nIs it an oversight?",
			"disapproval": false,
			"date": "2012-03-31 07:27:44.142965",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Mar 31, 2012 at 2:49 PM, Liigo Zhuang <com.liigo@gmail.com> wrote:\n\n> Yes, I did test in Window 7. I enter \"c:\\\\windows\\\\system32\" into the\n> Windows Resource Explorer's address bar, and press Enter key, and the\n> system show me an error dialog said \"Windows cann't\n> found c:\\\\windows\\\\system32, please check spelling and try again.\" But when\n> i enter \"c:\\windows\\system32\" it works ok.\n>\n> In another test, I use notepad.exe to try open file\n> \"C:\\\\Windows\\\\System32\\\\VFPODBC.TXT\", it tells me \"invalid file name\". But\n> \"C:\\Windows\\System32\\VFPODBC.TXT\" can be opened properly.\n>\nWe are programmer, OK? Not normal computer user, so let's determine if\nWindows support this kind of path by programming.\nAssume we install Go at C:\\go\\.\n// Go version\npackage main\nimport \"io/ioutil\"\nfunc main() {\n        path := `C:\\\\go\\\\README`\n        println(\"Reading:\", path)\n        dat, err := ioutil.ReadFile(path)\n        if err != nil { panic(err.Error()) }\n        println(string(dat[:80]))\n}\n\n// C version (not equivalent to the Go version)\n#include <stdio.h>\nchar buf[1024];\nint main() {\n        FILE *fp = fopen(\"C:\\\\\\\\go\\\\\\\\README\", \"r\");\n        if (fp) {\n                fgets(buf, sizeof(buf), fp);\n                puts(buf);\n                fclose(fp);\n        }\n}\n",
			"disapproval": false,
			"date": "2012-03-31 12:22:42.765564",
			"approval": false
		},
		{
			"sender": "0xjnml@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Saturday, March 31, 2012 4:58:03 PM UTC+2, Liigo Zhuang wrote:\n>\n> If you're a programmer, please execute the basis logic first: even you \n> found one hundred instances that accept the path(\"c:\\\\file\"), you can't \n> prove it's valid path; even I found only one instance not accept the path, \n> which I done, i do prove it's invalid path.\n>\nTalking about basic logic: if any given/some application is broken, i.e. if \nit, or its GUI \"shell\", doesn't accept the same path as the respective OS \nAPI, it runs on, happily does, then the conclusion you've come to is \ninvalid/unreasonable/call it whatever - except logical.\n\nAgain, IMO this CL should be rejected.\n\n\n ",
			"disapproval": false,
			"date": "2012-03-31 15:12:35.761191",
			"approval": false
		},
		{
			"sender": "0xjnml@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Saturday, March 31, 2012 5:48:28 PM UTC+2, Michael Jones wrote:\n>\n> Should there be a \"canonicalize\" function for each underlying OS that \n> \"does the right thing\" for strings intended to be used as file names?\n\n\nThat's quite possibly a pretty useful function.\n\nUnfortunately this CL wants to patch a far from any path canonicalization \nrelated package - \"flag\". At least as long as there's no flag.Path[Var] or \nsomething like that.\n\n\n",
			"disapproval": false,
			"date": "2012-03-31 16:26:18.947344",
			"approval": false
		},
		{
			"sender": "0xjnml@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Saturday, March 31, 2012 6:54:19 PM UTC+2, Michael Jones wrote:\n>\n> The CL is not the place for the code, but the problem is real and there \n> might should be a place for it in the os abstraction layer... \n> \"MakeThisFileNameAcceptable()\" or some such.\n\n\nIn the specific case of the OP, I'm not even sure the problem is really \n\"real\". IIUC, the double backslash appears just on the screen as a correct \neffect of using the %q formatting verb. The actual string value, on which \nthe printout is based, does have only single backslash as separators of the \npath parts, I presume. Can't verify that w/o Windows.\n\n",
			"disapproval": false,
			"date": "2012-03-31 17:10:29.159913",
			"approval": false
		},
		{
			"sender": "com.liigo@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "OK, I will drop this CL. This patch is not as good as expected. I will\nprovide another one. But something need explain:\n\n1. The \"godoc\" do print invalid GOROOT path on windows. Something should be\ndone to fix it.\n2. Flag pkg just print messages to stdio, not generate go source code, \\ =>\n\\\\ is not needed. And printing messages to stdio causing problems? I don't\nthink so.\n3. The flag messages are displayed to my program's users, they're not\ngophers, they don't understand go syntax formated by %q.\n\u5728 2012-4-2 \u4e0a\u53485:24\uff0c <r@golang.org>\u5199\u9053\uff1a\n\n> The flag code is working as intended. If the user has a control\n> character or some other invisible glitch that is causing the problem,\n> your CL will hide it and make the error mysterious.\n>\n> Please drop this CL.\n>\n>\n> http://codereview.appspot.com/**5971046/<http://codereview.appspot.com/5971046/>\n>\n",
			"disapproval": false,
			"date": "2012-04-02 02:49:32.289611",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"com.liigo@gmail.com",
				"golang-dev@googlegroups.com",
				"0xjnml@gmail.com",
				"dsymonds@golang.org",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"mtj@google.com",
				"ugorji@gmail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The flag code is working as intended. If the user has a control character or some other invisible glitch that is causing the problem, your CL will hide it and make the error mysterious.\n\nPlease drop this CL.",
			"disapproval": false,
			"date": "2012-04-01 21:24:12.960255",
			"approval": false
		},
		{
			"sender": "com.liigo@gmail.com",
			"recipients": [
				"com.liigo@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-03-30 16:00:21.213137",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't think this is a good change. Paths are not the only type of\nstring value, and the current code produces something that is\nreasonably close to valid for use in a shell context. The only\ndownside is that Windows paths look a bit odd, but that's fairly\nminor.\n\n\nDave.\n",
			"disapproval": false,
			"date": "2012-03-31 01:00:26.763761",
			"approval": false
		},
		{
			"sender": "com.liigo@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "When print windows paths, it's not only a bit odd, it's invalid paths.\n\nI run godoc on windows, it prints:\n-------------------------------------------------------------\nD:\\Users\\liigo>godoc\nusage: godoc package [name ...]\n        godoc -http=:6060\n  -goroot=\"C:\\\\golang\\\\go1\": Go root directory\n-------------------------------------------------------------\n\n\"C:\\\\golang\\\\go1\" is not a valid path on windows. So i think something\nshould be fixed, the behavior %q do?\n\n\n2012/3/31 David Symonds <dsymonds@golang.org>\n\n> I don't think this is a good change. Paths are not the only type of\n> string value, and the current code produces something that is\n> reasonably close to valid for use in a shell context. The only\n> downside is that Windows paths look a bit odd, but that's fairly\n> minor.\n>\n> Dave.\n>\n\n\n-- \nby *Liigo*, http://blog.csdn.net/liigo/\nGoogle+  https://plus.google.com/105597640837742873343/\n",
			"disapproval": false,
			"date": "2012-03-31 01:29:00.692831",
			"approval": false
		},
		{
			"sender": "com.liigo@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yes, I did test in Window 7. I enter \"c:\\\\windows\\\\system32\" into the\nWindows Resource Explorer's address bar, and press Enter key, and the\nsystem show me an error dialog said \"Windows cann't\nfound c:\\\\windows\\\\system32, please check spelling and try again.\" But when\ni enter \"c:\\windows\\system32\" it works ok.\n\nIn another test, I use notepad.exe to try open file\n\"C:\\\\Windows\\\\System32\\\\VFPODBC.TXT\", it tells me \"invalid file name\". But\n\"C:\\Windows\\System32\\VFPODBC.TXT\" can be opened properly.\n\n\n2012/3/31 minux <minux.ma@gmail.com>\n\n>\n> On Sat, Mar 31, 2012 at 9:28 AM, Liigo Zhuang <com.liigo@gmail.com> wrote:\n>\n>> When print windows paths, it's not only a bit odd, it's invalid paths.\n>>\n>> I run godoc on windows, it prints:\n>> -------------------------------------------------------------\n>> D:\\Users\\liigo>godoc\n>> usage: godoc package [name ...]\n>>         godoc -http=:6060\n>>   -goroot=\"C:\\\\golang\\\\go1\": Go root directory\n>> -------------------------------------------------------------\n>>\n>> \"C:\\\\golang\\\\go1\" is not a valid path on windows. So i think something\n>> should be fixed, the behavior %q do?\n>>\n> Have you tried to use that path? I think it's a valid Windows path.\n>\n> C:\\>cd c:\\\\windows\\\\system32\n> C:\\WINDOWS\\system32>\n>\n\n\n\n-- \nby *Liigo*, http://blog.csdn.net/liigo/\nGoogle+  https://plus.google.com/105597640837742873343/\n",
			"disapproval": false,
			"date": "2012-03-31 06:49:02.775853",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The CL is not the place for the code, but the problem is real and there\nmight should be a place for it in the os abstraction layer...\n\"MakeThisFileNameAcceptable()\" or some such.\n\nOn Sat, Mar 31, 2012 at 9:26 AM, Jan Mercl <0xjnml@gmail.com> wrote:\n\n> On Saturday, March 31, 2012 5:48:28 PM UTC+2, Michael Jones wrote:\n>>\n>> Should there be a \"canonicalize\" function for each underlying OS that\n>> \"does the right thing\" for strings intended to be used as file names?\n>\n>\n> That's quite possibly a pretty useful function.\n>\n> Unfortunately this CL wants to patch a far from any path canonicalization\n> related package - \"flag\". At least as long as there's no flag.Path[Var] or\n> something like that.\n>\n>\n>\n\n\n-- \nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\n650-335-5765\n",
			"disapproval": false,
			"date": "2012-03-31 16:54:49.801737",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Apr 2, 2012 at 12:49 PM, Liigo Zhuang <com.liigo@gmail.com> wrote:\n\n> OK, I will drop this CL. This patch is not as good as expected. I will\n> provide another one.\n\nPlease don't just send another CL. Please start a new thread on\ngolang-dev that describes the problem and proposes a solution first.\n\n\nDave.\n",
			"disapproval": false,
			"date": "2012-04-02 02:52:11.909139",
			"approval": false
		},
		{
			"sender": "com.liigo@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "If you're a programmer, please execute the basis logic first: even you\nfound one hundred instances that accept the path(\"c:\\\\file\"), you can't\nprove it's valid path; even I found only one instance not accept the path,\nwhich I done, i do prove it's invalid path.\n\nAnd remember, flag.PrintDefaults() print messages (including invalid path)\nto users of my program, they're not programmer, they never use fopen() and\nioutil.ReadFile().\n \u5728 2012-3-31 \u4e0b\u53488:22\uff0c\"minux\" <minux.ma@gmail.com>\u5199\u9053\uff1a\n\n>\n> On Sat, Mar 31, 2012 at 2:49 PM, Liigo Zhuang <com.liigo@gmail.com> wrote:\n>\n>> Yes, I did test in Window 7. I enter \"c:\\\\windows\\\\system32\" into the\n>> Windows Resource Explorer's address bar, and press Enter key, and the\n>> system show me an error dialog said \"Windows cann't\n>> found c:\\\\windows\\\\system32, please check spelling and try again.\" But when\n>> i enter \"c:\\windows\\system32\" it works ok.\n>>\n>> In another test, I use notepad.exe to try open file\n>> \"C:\\\\Windows\\\\System32\\\\VFPODBC.TXT\", it tells me \"invalid file name\". But\n>> \"C:\\Windows\\System32\\VFPODBC.TXT\" can be opened properly.\n>>\n> We are programmer, OK? Not normal computer user, so let's determine if\n> Windows support this kind of path by programming.\n> Assume we install Go at C:\\go\\.\n> // Go version\n> package main\n> import \"io/ioutil\"\n> func main() {\n>         path := `C:\\\\go\\\\README`\n>         println(\"Reading:\", path)\n>         dat, err := ioutil.ReadFile(path)\n>         if err != nil { panic(err.Error()) }\n>         println(string(dat[:80]))\n> }\n>\n> // C version (not equivalent to the Go version)\n> #include <stdio.h>\n> char buf[1024];\n> int main() {\n>         FILE *fp = fopen(\"C:\\\\\\\\go\\\\\\\\README\", \"r\");\n>         if (fp) {\n>                 fgets(buf, sizeof(buf), fp);\n>                 puts(buf);\n>                 fclose(fp);\n>         }\n> }\n>\n",
			"disapproval": false,
			"date": "2012-03-31 14:58:03.977371",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"com.liigo@gmail.com",
				"golang-dev@googlegroups.com",
				"0xjnml@gmail.com",
				"dsymonds@golang.org",
				"minux.ma@gmail.com",
				"mtj@google.com",
				"ugorji@gmail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2013-07-20 21:26:28.220510",
			"approval": false
		}
	],
	"owner_email": "com.liigo@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "liigo",
	"subject": "code review 5971046: flag: trivial change the print-format of string value",
	"created": "2012-03-30 15:57:04.808629",
	"patchsets": [
		1,
		2001,
		2002
	],
	"modified": "2013-07-20 21:26:28.689100",
	"closed": false,
	"issue": 5971046
}