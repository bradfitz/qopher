{
	"description": "crypto/aes: add benchmarks for decryption and key expansion",
	"cc": [
		"agl@golang.org",
		"rsc@golang.org",
		"fullung@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"agl@golang.org",
				"rsc@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5972056/diff/8001/src/pkg/crypto/aes/aes_test.go\nFile src/pkg/crypto/aes/aes_test.go (right):\n\nhttp://codereview.appspot.com/5972056/diff/8001/src/pkg/crypto/aes/aes_test.go#newcode376\nsrc/pkg/crypto/aes/aes_test.go:376: b.StartTimer()\nAdd b.SetBytes(len(out)) before b.StartTimer?\n\nAlso, I think you can just do b.ResetTimer() these days instead of StopTimer and StartTimer.",
			"disapproval": false,
			"date": "2012-04-04 02:55:40.528230",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Apr 2, 2012 at 10:52 PM, Adam Langley <agl@golang.org> wrote:\n\n> On Mon, Apr 2, 2012 at 10:48 AM,  <minux.ma@gmail.com> wrote:\n> > I wonder if this kind of optimization is acceptable?\n> > It requires 8 new instructions to be added to 6l, and more need to be\n> > added to 8l.\n>\n> I would like to see it included, assuming that it's transparent like\n> the CRC32 stuff in hash/crc32.\n>\nIt is transparent.\nShould the 6 AES instructions be added to 6l/8l?\nThey are only useful for crypto/aes. Currently, I use this:\n#define AESENC_X1_X0 BYTE $0x66; BYTE $0x0f; BYTE $0x38; BYTE $0xdc; BYTE\n$0xc1\n",
			"disapproval": false,
			"date": "2012-04-02 14:57:56.064490",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I realized that BenchmarkExpand is really benchmarking memory allocation,\nwill tweak it tomorrow.\n",
			"disapproval": false,
			"date": "2012-04-02 18:41:50.679763",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"agl@golang.org",
				"rsc@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5972056/diff/8001/src/pkg/crypto/aes/aes_test.go\nFile src/pkg/crypto/aes/aes_test.go (right):\n\nhttp://codereview.appspot.com/5972056/diff/8001/src/pkg/crypto/aes/aes_test.go#newcode376\nsrc/pkg/crypto/aes/aes_test.go:376: b.StartTimer()\nOn 2012/04/04 02:55:40, albert.strasheim wrote:\n> Add b.SetBytes(len(out)) before b.StartTimer?\n> \n> Also, I think you can just do b.ResetTimer() these days instead of StopTimer and\n> StartTimer.\n\nb.ResetTimer() is fine.\n\nYes, please add b.SetBytes(len(out)) somewhere.\nIt doesn't matter where.",
			"disapproval": false,
			"date": "2012-04-04 14:01:15.842097",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"agl@golang.org",
				"rsc@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\nWith AES-NI, I got this on Core i7-2600 (Linux/amd64):\nbenchmark           old ns/op    new ns/op    delta\nBenchmarkEncrypt          138           18  -86.30%\nBenchmarkDecrypt          139           19  -86.26%\nBenchmarkExpand           573           47  -91.64%\n\nbenchmark            old MB/s     new MB/s  speedup\nBenchmarkEncrypt       115.57       844.52    7.31x\nBenchmarkDecrypt       114.93       837.62    7.29x\n\nOn 2012/04/04 14:01:15, rsc wrote: \n> b.ResetTimer() is fine.\n> \n> Yes, please add b.SetBytes(len(out)) somewhere.\n> It doesn't matter where.\nDone.",
			"disapproval": false,
			"date": "2012-04-04 15:08:34.642417",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"agl@golang.org",
				"rsc@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@golang.org, rsc@golang.org, fullung@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-03 16:12:23.714194",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"agl@golang.org",
				"rsc@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "By the way, for anyone that wants to test this, I found that \"Load Optimal Defaults\" on a Supermicro motherboard actually disables AES-NI. No idea what's optimal about that.",
			"disapproval": false,
			"date": "2012-04-04 02:57:57.139605",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"agl@golang.org",
				"rsc@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-04-04 15:18:20.751465",
			"approval": true
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Apr 2, 2012 at 10:57 AM, minux <minux.ma@gmail.com> wrote:\n> Should the 6 AES instructions be added to 6l/8l?\n\nThat's up to rsc, but I had added the instructions previously.\n\nFor example: https://code.google.com/p/go/source/detail?r=cb8fedfeecbf\nto add IMUL3Q (but not SHLDL, that was we forgetting to update the\ndescription).\n\n\nCheers\n\nAGL\n",
			"disapproval": false,
			"date": "2012-04-02 15:01:02.371734",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nPlease submit these benchmarks by themselves.",
			"disapproval": false,
			"date": "2012-04-02 16:55:08.805526",
			"approval": true
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"agl@golang.org",
				"rsc@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/04/02 14:39:12, minux wrote:\n> Hello mailto:golang-dev@googlegroups.com (cc: mailto:golang-dev@googlegroups.com),\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go/\n\nMight be useful to add b.SetBytes to be able to compare with\n\nhttp://blog.fuseyism.com/index.php/2012/03/13/openjdk-icedtea-nss-icedtea7-results/",
			"disapproval": false,
			"date": "2012-04-02 17:04:24.905775",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello\n\nOn Wed, Apr 4, 2012 at 5:08 PM,  <minux.ma@gmail.com> wrote:\n> PTAL.\n> With AES-NI, I got this on Core i7-2600 (Linux/amd64):\n> benchmark \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 old ns/op \u00a0 \u00a0new ns/op \u00a0 \u00a0delta\n> BenchmarkEncrypt \u00a0 \u00a0 \u00a0 \u00a0 \u00a0138 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 18 \u00a0-86.30%\n> BenchmarkDecrypt \u00a0 \u00a0 \u00a0 \u00a0 \u00a0139 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 19 \u00a0-86.26%\n> BenchmarkExpand \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 573 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 47 \u00a0-91.64%\n> benchmark \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0old MB/s \u00a0 \u00a0 new MB/s \u00a0speedup\n> BenchmarkEncrypt \u00a0 \u00a0 \u00a0 115.57 \u00a0 \u00a0 \u00a0 844.52 \u00a0 \u00a07.31x\n\nThis encryption benchmark is interesting compared to the results from NSS:\n\nhttp://blog.fuseyism.com/index.php/2012/03/13/openjdk-icedtea-nss-icedtea7-results/\n\nThey didn't manage anything faster than 645 MB/s for 128-bit. It might\nbe useful to consider how you got to 844.\n\n> BenchmarkDecrypt \u00a0 \u00a0 \u00a0 114.93 \u00a0 \u00a0 \u00a0 837.62 \u00a0 \u00a07.29x\n\nSimilarly, the decryption in NSS goes up to 3333 MB/s, compared to 837 here...\n\nThe NSS code is here. Don't know if you can read without having one of\nthe Men In Black flashy thingies:\n\nhttps://github.com/doublec/mozilla-central/blob/master/security/nss/lib/freebl/intel-aes.s\n\nRegards\n\nAlbert\n",
			"disapproval": false,
			"date": "2012-04-04 15:31:26.769591",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-04-02 14:39:12.036468",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Apr 2, 2012 at 10:48 AM,  <minux.ma@gmail.com> wrote:\n> I wonder if this kind of optimization is acceptable?\n> It requires 8 new instructions to be added to 6l, and more need to be\n> added to 8l.\n\nI would like to see it included, assuming that it's transparent like\nthe CRC32 stuff in hash/crc32.\n\nI would have done it myself already if I had a machine with AES-NI.\n\n\nCheers\n\nAGL\n",
			"disapproval": false,
			"date": "2012-04-02 14:52:15.101664",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Apr 2, 2012 at 10:57, minux <minux.ma@gmail.com> wrote:\n> Should the 6 AES instructions be added to 6l/8l?\n\nYes please.\nOtherwise we'll be maintaining magic BYTE instructions\nfor all time.  I've done that.  It's no fun.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-04-02 16:54:29.744170",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Apr 4, 2012 at 11:31 PM, Albert Strasheim <fullung@gmail.com> wrote:\n\n> On Wed, Apr 4, 2012 at 5:08 PM,  <minux.ma@gmail.com> wrote:\n> > PTAL.\n> > With AES-NI, I got this on Core i7-2600 (Linux/amd64):\n> > benchmark           old ns/op    new ns/op    delta\n> > BenchmarkEncrypt          138           18  -86.30%\n> > BenchmarkDecrypt          139           19  -86.26%\n> > BenchmarkExpand           573           47  -91.64%\n> > benchmark            old MB/s     new MB/s  speedup\n> > BenchmarkEncrypt       115.57       844.52    7.31x\n>\n> This encryption benchmark is interesting compared to the results from NSS:\n>\n>\n> http://blog.fuseyism.com/index.php/2012/03/13/openjdk-icedtea-nss-icedtea7-results/\n>\n> They didn't manage anything faster than 645 MB/s for 128-bit. It might\n> be useful to consider how you got to 844.\n>\nI rerun my tests several times, and all get to ~800MB/s.\n\n>\n> > BenchmarkDecrypt       114.93       837.62    7.29x\n>\n> Similarly, the decryption in NSS goes up to 3333 MB/s, compared to 837\n> here...\n>\n> The NSS code is here. Don't know if you can read without having one of\n> the Men In Black flashy thingies:\n>\nI think we can't simply compare the number here, because NSS also takes\ncare of\nthe mode of operation (we simply encrypt/decrypt one block, but NSS could\nhandle\ndata larger than block size with either ecb or cbc mode). I think we can\ncompare with\nthe ecb mode here, but I'd know what mode does the above result use.\n\nAnyway, I will look into the big decryption speed difference, and I think\nmy code is roughly\nequivalent to NSS's by a casual scan, except NSS, taking advantage of the\nlarget data size,\nprocess more data in one iteration (160-byte at a time, instead of 16-byte\nat a time, and\nthis could be the reason).\n",
			"disapproval": false,
			"date": "2012-04-04 18:31:51.708100",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Rationale behind this CL: I'm working on using AES-NI instruction set to speed up crypto/aes.\n\nPreliminary result for amd64:\nbenchmark           old ns/op    new ns/op    delta\nBenchmarkEncrypt          166           23  -85.96%\nBenchmarkDecrypt          166           25  -84.94%\nBenchmarkExpand          1218          546  -55.17%\n\nI wonder if this kind of optimization is acceptable?\nIt requires 8 new instructions to be added to 6l, and more need to be added to 8l.",
			"disapproval": false,
			"date": "2012-04-02 14:48:23.529981",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Apr 4, 2012 at 2:31 PM, minux <minux.ma@gmail.com> wrote:\n> Anyway, I will look into the big decryption speed difference, and I think my\n> code is roughly\n> equivalent to NSS's by a casual scan, except NSS, taking advantage of the\n> larget data size,\n> process more data in one iteration (160-byte at a time, instead of 16-byte\n> at a time, and\n> this could be the reason).\n\nIn future CLs, it might be worthwhile having the modes in\ncrypto/cipher try casting the Block to, say, a BlockCTR, where the\nBlock could implement CTR mode more efficiently and directly. That\nshould let us catch up with any advantage that NSS has without having\nto break the API.\n\n\nCheers\n\nAGL\n",
			"disapproval": false,
			"date": "2012-04-04 18:35:36.626602",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"agl@golang.org",
				"rsc@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=d685ccae1668 ***\n\ncrypto/aes: add benchmarks for decryption and key expansion\n\nR=agl, rsc, fullung\nCC=golang-dev\nhttp://codereview.appspot.com/5972056",
			"disapproval": false,
			"date": "2012-04-05 20:19:48.302840",
			"approval": false
		}
	],
	"owner_email": "minux.ma@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "minux",
	"subject": "code review 5972056: crypto/aes: add benchmarks for decryption and key expansion",
	"created": "2012-04-02 14:37:53.346797",
	"patchsets": [
		1,
		2001,
		4001,
		8001,
		4005,
		10001
	],
	"modified": "2012-04-05 20:19:52.509322",
	"closed": true,
	"issue": 5972056
}