{
	"description": "regexp: implement backtracking with pcre fallback\n\nGo's current regular expression package doesn't support all\npopular patterns which programmers from other languages have\ncome to expect.  Notably, the Go regexp package doesn\u2019t\nimplement the useful backreference functionality.  Without\nthat, users can't match \"catcat\" or \"dogdog\" with (cat|dog)\\1\nand would need to otherwise fall back to writing multiple\nlines of code, possibly involving an \"if\" statement.\n\nTo permit more expressiveness than Go's strictly \"regular\"\nregular expressions, this change permits falling back to the\nwildly popular PCRE library when Go would previously return a\ncompile error.\n\nThis permits programmers to copy-paste common regular\nexpressions from forum sites, stackoverflow, etc. and rest\nassured that they'll work as they would have in PHP or Ruby.\n\nGo shouldn't let ideological fundamentalism about algorithmic\npurity limit user adoption.\n\nThanks to Florian Wiemer for his work on the pcre package\nwhich is now promoted to the core library.\n\nThis CL doesn't yet implement Perl's (?{ code }) construct. A\nfuture CL will bring Campher into the core, permitting calling\ninto Perl from Go regular expressions.\n\nFixes issue 3451",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"adg@golang.org",
		"dsymonds@golang.org",
		"nigeltao@golang.org",
		"r@golang.org",
		"0xjnml@gmail.com",
		"zhigangc@gmail.com"
	],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5971058/diff/1002/src/pkg/regexp/fallback.go\nFile src/pkg/regexp/fallback.go (right):\n\nhttp://codereview.appspot.com/5971058/diff/1002/src/pkg/regexp/fallback.go#newcode1\nsrc/pkg/regexp/fallback.go:1: // +build !cmd_go_bootstrap\nput the build line after the copyright\n\nhttp://codereview.appspot.com/5971058/diff/3001/src/pkg/regexp/regexp.go\nFile src/pkg/regexp/regexp.go (right):\n\nhttp://codereview.appspot.com/5971058/diff/3001/src/pkg/regexp/regexp.go#newcode68\nsrc/pkg/regexp/regexp.go:68: var fallbackCompile func(expr string, err error) (*Regexp, error)\nwhy fallback and not just override? If we're linking in pcre we might as well use it. it is the industry standard after all",
			"disapproval": false,
			"date": "2012-04-01 04:07:49.011838",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I like the approach, but what about running both native and PCRE in parallel? There are regular expressions where each is faster, and you could just select between whichever one finishes first. Go is all about parallel programming, right?",
			"disapproval": false,
			"date": "2012-04-01 04:58:55.406422",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Interesting idea.\n\nIt could even learn over time (per-*Regexp) which is fastest.\n On Mar 31, 2012 9:58 PM, <dsymonds@golang.org> wrote:\n\n> I like the approach, but what about running both native and PCRE in\n> parallel? There are regular expressions where each is faster, and you\n> could just select between whichever one finishes first. Go is all about\n> parallel programming, right?\n>\n> http://codereview.appspot.com/**5971058/<http://codereview.appspot.com/5971058/>\n>\n",
			"disapproval": false,
			"date": "2012-04-01 05:06:03.622855",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n",
			"disapproval": false,
			"date": "2012-04-01 07:35:40.962917",
			"approval": true
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://swtch.com/~rsc/regexp/regexp1.html\n\nOn Sat, Mar 31, 2012 at 9:01 PM, <bradfitz@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> regexp: implement backtracking with pcre fallback\n>\n> Go's current regular expression package doesn't support all\n> popular patterns which programmers from other languages have\n> come to expect.  Notably, the Go regexp package doesn\u2019t\n> implement the useful backreference functionality.  Without\n> that, users can't match \"catcat\" or \"dogdog\" with (cat|dog)\\1\n> and would need to otherwise fall back to writing multiple\n> lines of code, possibly involving an \"if\" statement.\n>\n> To permit more expressiveness than Go's strictly \"regular\"\n> regular expressions, this change permits falling back to the\n> wildly popular PCRE library when Go would previously return a\n> compile error.\n>\n> This permits programmers to copy-paste common regular\n> expressions from forum sites, stackoverflow, etc. and rest\n> assured that they'll work as they would have in PHP or Ruby.\n>\n> Go shouldn't let ideological fundamentalism about algorithmic\n> purity limit user adoption.\n>\n> Thanks to Florian Wiemer for his work on the pcre package\n> which is now promoted to the core library.\n>\n> This CL doesn't yet implement Perl's (?{ code }) construct. A\n> future CL will bring Campher into the core, permitting calling\n> into Perl from Go regular expressions.\n>\n> Fixes issue 3451\n>\n> Please review this at http://codereview.appspot.com/**5971058/<http://codereview.appspot.com/5971058/>\n>\n> Affected files:\n>  M src/cmd/api/goapi.go\n>  M src/pkg/go/build/deps_test.go\n>  M src/pkg/regexp/exec.go\n>  A src/pkg/regexp/fallback.go\n>  M src/pkg/regexp/find_test.go\n>  A src/pkg/regexp/pcre/pcre.go\n>  M src/pkg/regexp/regexp.go\n>\n>\n>\n\n\n-- \nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\n650-335-5765\n",
			"disapproval": false,
			"date": "2012-04-01 04:07:17.560547",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"dsymonds@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Nice start. Any chance of some benchmarks?\n\nhttp://codereview.appspot.com/5971058/diff/3001/src/pkg/regexp/fallback.go\nFile src/pkg/regexp/fallback.go (right):\n\nhttp://codereview.appspot.com/5971058/diff/3001/src/pkg/regexp/fallback.go#newcode51\nsrc/pkg/regexp/fallback.go:51: var buf [4]byte\ns/4/utf8.UTFMax/\n\nhttp://codereview.appspot.com/5971058/diff/3001/src/pkg/regexp/pcre/pcre.go\nFile src/pkg/regexp/pcre/pcre.go (right):\n\nhttp://codereview.appspot.com/5971058/diff/3001/src/pkg/regexp/pcre/pcre.go#newcode26\nsrc/pkg/regexp/pcre/pcre.go:26: // This package provides access to the Perl Compatible Regular\ns/This package/Package pcre/\n\nhttp://codereview.appspot.com/5971058/diff/3001/src/pkg/regexp/pcre/pcre.go#newcode46\nsrc/pkg/regexp/pcre/pcre.go:46: // package and the flags defined below, see the PCRE documentation.\nGive a link to the PCRE docs?\n\nhttp://codereview.appspot.com/5971058/diff/3001/src/pkg/regexp/pcre/pcre.go#newcode101\nsrc/pkg/regexp/pcre/pcre.go:101: // A reference to a compiled regular expression.\nRegexp is a reference etc.\n\nhttp://codereview.appspot.com/5971058/diff/3001/src/pkg/regexp/pcre/pcre.go#newcode107\nsrc/pkg/regexp/pcre/pcre.go:107: // Number of bytes in the compiled pattern\npcresize returns the number of etc.\n\nSimilarly with func comments below.",
			"disapproval": false,
			"date": "2012-04-01 05:08:40.265350",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Apr 1, 2012 at 3:06 PM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n\n> It could even learn over time (per-*Regexp) which is fastest.\n\nA little neural net would train quickly for something like this. We\ncould SWIG wrap some of the well-studied C++ NN codebases for this\npurpose.\n",
			"disapproval": false,
			"date": "2012-04-01 05:09:53.771435",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-04-01 04:01:38.882771",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5971058/diff/1002/src/pkg/regexp/fallback.go\nFile src/pkg/regexp/fallback.go (right):\n\nhttp://codereview.appspot.com/5971058/diff/1002/src/pkg/regexp/fallback.go#newcode1\nsrc/pkg/regexp/fallback.go:1: // +build !cmd_go_bootstrap\nOn 2012/04/01 04:07:49, adg wrote:\n> put the build line after the copyright\n\nActually I was bit by this recently, when the copyright was too long.  Russ admitted it was a bit of a bug and recommended +build lines go before the copyright.\n\nhttp://codereview.appspot.com/5971058/diff/3001/src/pkg/regexp/regexp.go\nFile src/pkg/regexp/regexp.go (right):\n\nhttp://codereview.appspot.com/5971058/diff/3001/src/pkg/regexp/regexp.go#newcode68\nsrc/pkg/regexp/regexp.go:68: var fallbackCompile func(expr string, err error) (*Regexp, error)\nOn 2012/04/01 04:07:49, adg wrote:\n> why fallback and not just override? If we're linking in pcre we might as well\n> use it. it is the industry standard after all\n\nIt helps during bootstrapping, when cgo isn't available.  That's about the only time we need a pure-Go implementation.",
			"disapproval": false,
			"date": "2012-04-01 04:11:45.394758",
			"approval": false
		},
		{
			"sender": "0xjnml@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sunday, April 1, 2012 6:01:38 AM UTC+2, Brad Fitzpatrick wrote:\n>\n> I'd like you to review this change to \n> https://go.googlecode.com/hg/ \n>\n>\n> Description: \n> regexp: implement backtracking with pcre fallback \n>\n\nNumber on the wall\nexplained it all ;-)\n\n",
			"disapproval": false,
			"date": "2012-04-01 08:28:05.810266",
			"approval": false
		},
		{
			"sender": "zhigangc@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"dsymonds@golang.org",
				"nigeltao@golang.org",
				"r@golang.org",
				"0xjnml@gmail.com",
				"zhigangc@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "We have open-sourced rubex. https://github.com/moovweb/rubex\n\nIt uses the same regexp lib (oniguruma) that Ruby uses. \n\nPlease email me if you have questions.\n\nOn 2012/04/01 08:28:05, Jan Mercl wrote:\n> On Sunday, April 1, 2012 6:01:38 AM UTC+2, Brad Fitzpatrick wrote:\n> >\n> > I'd like you to review this change to \n> > https://go.googlecode.com/hg/ \n> >\n> >\n> > Description: \n> > regexp: implement backtracking with pcre fallback \n> >\n> \n> Number on the wall\n> explained it all ;-)\n>",
			"disapproval": false,
			"date": "2012-04-23 17:49:50.778699",
			"approval": false
		},
		{
			"sender": "0xjnml@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"dsymonds@golang.org",
				"nigeltao@golang.org",
				"r@golang.org",
				"0xjnml@gmail.com",
				"zhigangc@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/04/23 17:49:50, zhigangc wrote:\n> We have open-sourced rubex. https://github.com/moovweb/rubex\n> \n> It uses the same regexp lib (oniguruma) that Ruby uses. \n\nLet me just [re]quote Michael.\nOn 2012/04/01 04:07:17, mtj1 wrote:\n> http://swtch.com/%7Ersc/regexp/regexp1.html",
			"disapproval": false,
			"date": "2012-04-23 18:14:34.559138",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 5971058: regexp: implement backtracking with pcre fallback",
	"created": "2012-04-01 03:56:02.853718",
	"patchsets": [
		1,
		1002,
		3001
	],
	"modified": "2013-05-17 20:18:22.816530",
	"closed": true,
	"issue": 5971058
}