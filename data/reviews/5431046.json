{
	"description": "gc: changes in export format in preparation of inlining.\n\nIncludes minimal change to gcimporter to keep it working,",
	"cc": [
		"rsc@golang.org",
		"gri@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Nov 28, 2011 at 17:43, <rsc@golang.org> wrote:\n\n> Do you have the fixes mentioned in the CL description ready?\n>\n>\ngcimporter: not yet, but meanwhile 5400043 builds the whole tree *with*\ncross-pkg inlining! yeay.  but with intra-disabled, b/c theres something\nweird with repeated labels.\n\nthis CL is 5400043 minus inl.c so i test in that one.  this means that\napart from gcimporter, this is complete.\n\ni'll get to that after i iron out that label thing.\n\n\n>\n> http://codereview.appspot.com/**5431046/<http://codereview.appspot.com/5431046/>\n>\n",
			"disapproval": false,
			"date": "2011-11-28 17:24:11.281987",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-22 22:20:23.018830",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for the simplifications.\nThis set of diffs is much easier to follow.\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/dcl.c\nFile src/cmd/gc/dcl.c (right):\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/dcl.c#newcode628\nsrc/cmd/gc/dcl.c:628: * Same as funcargs, except run over an already constructed TFUNC.\nPlease add to this comment an explanation of why this situation arises.\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/dcl.c#newcode821\nsrc/cmd/gc/dcl.c:821: // during import put unexported fieldnames in the imported package\nWhy is this still necessary?  Why isn't the export data correct?\nDid something throw away the information that it contained?\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/dcl.c#newcode852\nsrc/cmd/gc/dcl.c:852: // during import put argument names in the imported package\nSame.\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/dcl.c#newcode1062\nsrc/cmd/gc/dcl.c:1062: // during import l->n->op is OKEY, but l->n->left ==\nThe comment says n->left == NONAME but the text says n->sym == S.\nThey are different concepts.\n\nI'm a little uncomfortable with this code being run during import,\nsince import is supposed to deal with a simpler subset of the language,\nbut if it must be run, I'd like to not need special cases like this one.\nCan we make the export write missing function parameter names\nas '_' instead of '?' ?\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/dcl.c#newcode1198\nsrc/cmd/gc/dcl.c:1198: s = pkglookup(p, s->pkg);\nincorrect indentation\n(one tab not two)\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/dcl.c#newcode1325\nsrc/cmd/gc/dcl.c:1325: // during import put unexported method names in the imported package\nAgain.\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/export.c\nFile src/cmd/gc/export.c (left):\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/export.c#oldcode243\nsrc/cmd/gc/export.c:243: \nPlease restore this blank line.\nI like being able to see the lineno save+restore\nas their own blocks at top and bottom of the function.\nIt makes it less likely that someone will incorrectly\nadd code after the restore if it is its own block.\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/export.c\nFile src/cmd/gc/export.c (right):\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/export.c#newcode126\nsrc/cmd/gc/export.c:126: if(t->etype == TFUNC && n->class == PFUNC) {\nremove gratuitous added braces\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/export.c#newcode212\nsrc/cmd/gc/export.c:212: case ONAME:\nAdd a blank line before this one too, to be consistent.\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/export.c#newcode313\nsrc/cmd/gc/export.c:313: \nspaces?\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/fmt.c\nFile src/cmd/gc/fmt.c (right):\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/fmt.c#newcode706\nsrc/cmd/gc/fmt.c:706: fmtstrcpy(fp, \"? \");\nI assume the _ logic would go here, but it would have to\nbe careful to apply only to funargs, not to structs, or else\nembedding would be lost.\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/fmt.c#newcode1207\nsrc/cmd/gc/fmt.c:1207: if(n->left->op == n->op)\n&& (n->op == OPLUS || n->op == OMINUS)\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/go.y\nFile src/cmd/gc/go.y (right):\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/go.y#newcode1778\nsrc/cmd/gc/go.y:1778: if ($2 == N)\n,s/if (/if(/g\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/typecheck.c\nFile src/cmd/gc/typecheck.c (right):\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/typecheck.c#newcode584\nsrc/cmd/gc/typecheck.c:584: if(looktypedot(n, t, 1)) {\nDelete new { }.\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/typecheck.c#newcode612\nsrc/cmd/gc/typecheck.c:612: if(lookdot(n, t, 1)) {\nDelete new { }\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/typecheck.c#newcode2134\nsrc/cmd/gc/typecheck.c:2134: // Sym might have resolved to name in other top-level\nIs this still true?",
			"disapproval": false,
			"date": "2011-12-01 04:57:22.871436",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "all addressed i think.\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/dcl.c\nFile src/cmd/gc/dcl.c (left):\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/dcl.c#oldcode679\nsrc/cmd/gc/dcl.c:679: void\nOn 2011/11/28 17:54:55, rsc wrote:\n> Code move.\n\nyes, this is now done by export.c:importtype\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/dcl.c\nFile src/cmd/gc/dcl.c (right):\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/dcl.c#newcode627\nsrc/cmd/gc/dcl.c:627: // Same as funcargs, except run over an already constructed TFUNC.\nOn 2011/11/28 17:54:55, rsc wrote:\n> Use /* */ comment like rest of file.\n> Make the comment explain where these come from.\n> \n\nDone.\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/dcl.c#newcode639\nsrc/cmd/gc/dcl.c:639: for(ft=getthisx(t)->type; ft; ft=ft->down) {\nOn 2011/11/28 17:54:55, rsc wrote:\n> indent\n\nDone.\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/dcl.c#newcode647\nsrc/cmd/gc/dcl.c:647: if (t->intuple)\nOn 2011/11/28 17:54:55, rsc wrote:\n> ,s/if (/if(/g\n\nDone.\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/dcl.c#newcode648\nsrc/cmd/gc/dcl.c:648: for(ft=getinargx(t)->type; ft; ft=ft->down) {\nOn 2011/11/28 17:54:55, rsc wrote:\n> indent\n\nDone.\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/dcl.c#newcode658\nsrc/cmd/gc/dcl.c:658: for(ft=getoutargx(t)->type; ft; ft=ft->down) {\nOn 2011/11/28 17:54:55, rsc wrote:\n> indent\n\nDone.\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/dcl.c#newcode778\nsrc/cmd/gc/dcl.c:778: if (!(funarg && isblank(n->left))) {\nOn 2011/11/28 17:54:55, rsc wrote:\n> What is going on here?  Why is _ special one way in function arguments\n> and a different way in struct fields?\n\ni forgot, but let me comment it out and re-find out and add a nice long comment.  i'm quite sure this cost me a day somewhere in the last weeks but i forgot which one.\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/dcl.c#newcode787\nsrc/cmd/gc/dcl.c:787: if(funarg && n->left->class == PPARAM)\nOn 2011/11/28 17:54:55, rsc wrote:\n> Seems like this should be at the call site, since there is only\n> one call site that passes funarg==1.\n\nthats how i had it but then it turned out i needed to pass funarg to this function anyway, so it's better to have the differences between funargs and plain struct fields together in one place.\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/export.c\nFile src/cmd/gc/export.c (right):\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/export.c#newcode90\nsrc/cmd/gc/export.c:90: methcmp(const void *va, const void *vb)\nOn 2011/11/28 17:54:55, rsc wrote:\n> Code move.\n\nUnDone.\n\nsaved the forward decls at the top.\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/export.c#newcode296\nsrc/cmd/gc/export.c:296: // Informational: record package name\nOn 2011/11/28 17:54:55, rsc wrote:\n> Code move.\n\nno, reorg with changes.  really better this way.\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/export.c#newcode366\nsrc/cmd/gc/export.c:366: // override declaration in unsafe.go for Pointer.\nOn 2011/11/28 17:54:55, rsc wrote:\n> Code move.\n\nfor the better. please just look at export.c as a whole.  it's just 388 lines, but they make sense.\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/fmt.c\nFile src/cmd/gc/fmt.c (right):\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/fmt.c#newcode1058\nsrc/cmd/gc/fmt.c:1058: if(isblank(n))\nOn 2011/11/28 17:54:55, rsc wrote:\n> This implies that fmtprint(f, \"%S\", n->sym)\n> mishandles the blank identifier.  Maybe it would\n> be better to fix %S?\n\nDone\n\n\nisblank wants a node, not a sym, so i'd be duplicating isblank.  didn't seem worth it. otoh, \"_\" is never qualified.  ok.\n\n>\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/fmt.c#newcode1207\nsrc/cmd/gc/fmt.c:1207: // Unary\nOn 2011/11/28 17:54:55, rsc wrote:\n> line // up with case.\n> as written it looks like some kind of fall through.\n\nDone.\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/fmt.c#newcode1221\nsrc/cmd/gc/fmt.c:1221: // Binary\nOn 2011/11/28 17:54:55, rsc wrote:\n> same\n\nDone.\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/go.h\nFile src/cmd/gc/go.h (right):\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/go.h#newcode360\nsrc/cmd/gc/go.h:360: SymExported\t= 1<<2,\t// allready written out by export\nOn 2011/11/28 17:54:55, rsc wrote:\n> s/allready //\n\nDone.\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/go.h#newcode437\nsrc/cmd/gc/go.h:437: OCALL, OCALLFUNC, OCALLMETH, OCALLINTER, OINLCALL,\nOn 2011/11/28 17:54:55, rsc wrote:\n> Shouldn't be in this CL.\n\nDone.\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/go.h#newcode827\nsrc/cmd/gc/go.h:827: EXTERN\tNodeList*\timportlist;\t// imported functions and methods with inlinable bodies\nOn 2011/11/28 17:54:55, rsc wrote:\n> Shouldn't be in this CL.\n\nDone.\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/go.y\nFile src/cmd/gc/go.y (right):\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/go.y#newcode26\nsrc/cmd/gc/go.y:26: #define YYDEBUG 1\nOn 2011/11/28 17:54:55, rsc wrote:\n> Delete.\n\nDone.\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/go.y#newcode1738\nsrc/cmd/gc/go.y:1738: * Import syntax from package header.\nOn 2011/11/28 17:54:55, rsc wrote:\n> The comment style in this file is lower case with no period.\n> Please make this look like the others.\n\nDone.\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/lex.c\nFile src/cmd/gc/lex.c (right):\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/lex.c#newcode337\nsrc/cmd/gc/lex.c:337: // Phase 4: Inlining\nOn 2011/11/28 17:54:55, rsc wrote:\n> Shouldn't be in this CL.\n\nit isn't\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/walk.c\nFile src/cmd/gc/walk.c (right):\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/walk.c#newcode171\nsrc/cmd/gc/walk.c:171: walkstmtlist(n->ninit);\nOn 2011/11/28 17:54:55, rsc wrote:\n> These cleanups are fine but seem unrelated.\n\nessential for inl.c, not needed yet",
			"disapproval": false,
			"date": "2011-11-28 19:01:01.875221",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Do you have the fixes mentioned in the CL description ready?",
			"disapproval": false,
			"date": "2011-11-28 16:43:40.724247",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "There's a lot in this CL.\nCan it be broken up more?\nAt the very least, please undo the code moves\nor send out a preparation CL that does nothing\nbut move code (no edits).  I cannot tell what has\nchanged and what has only moved.\n\nI know you're working on that for go.y, but I've\nflagged a few other places too.\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/dcl.c\nFile src/cmd/gc/dcl.c (left):\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/dcl.c#oldcode679\nsrc/cmd/gc/dcl.c:679: void\nCode move.\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/dcl.c\nFile src/cmd/gc/dcl.c (right):\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/dcl.c#newcode627\nsrc/cmd/gc/dcl.c:627: // Same as funcargs, except run over an already constructed TFUNC.\nUse /* */ comment like rest of file.\nMake the comment explain where these come from.\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/dcl.c#newcode639\nsrc/cmd/gc/dcl.c:639: for(ft=getthisx(t)->type; ft; ft=ft->down) {\nindent\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/dcl.c#newcode647\nsrc/cmd/gc/dcl.c:647: if (t->intuple)\n,s/if (/if(/g\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/dcl.c#newcode648\nsrc/cmd/gc/dcl.c:648: for(ft=getinargx(t)->type; ft; ft=ft->down) {\nindent\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/dcl.c#newcode658\nsrc/cmd/gc/dcl.c:658: for(ft=getoutargx(t)->type; ft; ft=ft->down) {\nindent\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/dcl.c#newcode778\nsrc/cmd/gc/dcl.c:778: if (!(funarg && isblank(n->left))) {\nWhat is going on here?  Why is _ special one way in function arguments\nand a different way in struct fields?\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/dcl.c#newcode787\nsrc/cmd/gc/dcl.c:787: if(funarg && n->left->class == PPARAM)\nSeems like this should be at the call site, since there is only\none call site that passes funarg==1.\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/export.c\nFile src/cmd/gc/export.c (right):\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/export.c#newcode90\nsrc/cmd/gc/export.c:90: methcmp(const void *va, const void *vb)\nCode move.\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/export.c#newcode296\nsrc/cmd/gc/export.c:296: // Informational: record package name\nCode move.\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/export.c#newcode366\nsrc/cmd/gc/export.c:366: // override declaration in unsafe.go for Pointer.\nCode move.\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/fmt.c\nFile src/cmd/gc/fmt.c (right):\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/fmt.c#newcode1058\nsrc/cmd/gc/fmt.c:1058: if(isblank(n))\nThis implies that fmtprint(f, \"%S\", n->sym)\nmishandles the blank identifier.  Maybe it would\nbe better to fix %S?\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/fmt.c#newcode1207\nsrc/cmd/gc/fmt.c:1207: // Unary\nline // up with case.\nas written it looks like some kind of fall through.\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/fmt.c#newcode1221\nsrc/cmd/gc/fmt.c:1221: // Binary\nsame\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/go.h\nFile src/cmd/gc/go.h (right):\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/go.h#newcode360\nsrc/cmd/gc/go.h:360: SymExported\t= 1<<2,\t// allready written out by export\ns/allready //\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/go.h#newcode437\nsrc/cmd/gc/go.h:437: OCALL, OCALLFUNC, OCALLMETH, OCALLINTER, OINLCALL,\nShouldn't be in this CL.\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/go.h#newcode827\nsrc/cmd/gc/go.h:827: EXTERN\tNodeList*\timportlist;\t// imported functions and methods with inlinable bodies\nShouldn't be in this CL.\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/go.y\nFile src/cmd/gc/go.y (right):\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/go.y#newcode26\nsrc/cmd/gc/go.y:26: #define YYDEBUG 1\nDelete.\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/go.y#newcode1255\nsrc/cmd/gc/go.y:1255: hidden_fndcl:\nCode move, here and in other places in this file.\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/go.y#newcode1738\nsrc/cmd/gc/go.y:1738: * Import syntax from package header.\nThe comment style in this file is lower case with no period.\nPlease make this look like the others.\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/go.y#newcode1779\nsrc/cmd/gc/go.y:1779: hidden_pkg_importsym:\nCode move.\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/go.y#newcode1794\nsrc/cmd/gc/go.y:1794: *  Importing types\nSame.  Also s/  / /\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/lex.c\nFile src/cmd/gc/lex.c (right):\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/lex.c#newcode337\nsrc/cmd/gc/lex.c:337: // Phase 4: Inlining\nShouldn't be in this CL.\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/walk.c\nFile src/cmd/gc/walk.c (right):\n\nhttp://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/walk.c#newcode171\nsrc/cmd/gc/walk.c:171: walkstmtlist(n->ninit);\nThese cleanups are fine but seem unrelated.",
			"disapproval": false,
			"date": "2011-11-28 17:54:55.439165",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5431046/diff/11002/src/cmd/gc/go.y\nFile src/cmd/gc/go.y (right):\n\nhttp://codereview.appspot.com/5431046/diff/11002/src/cmd/gc/go.y#newcode1791\nsrc/cmd/gc/go.y:1791: hidden_pkg_importsym:\nCode move.\n\nhttp://codereview.appspot.com/5431046/diff/11002/src/cmd/gc/go.y#newcode1910\nsrc/cmd/gc/go.y:1910: hidden_type_func:\nCode move.\n\nhttp://codereview.appspot.com/5431046/diff/11002/src/cmd/gc/go.y#newcode1932\nsrc/cmd/gc/go.y:1932: hidden_funarg:\nCode move.  (Should be where hidden_dcl was.)\n\nhttp://codereview.appspot.com/5431046/diff/11002/src/cmd/gc/init.c\nFile src/cmd/gc/init.c (right):\n\nhttp://codereview.appspot.com/5431046/diff/11002/src/cmd/gc/init.c#newcode17\nsrc/cmd/gc/init.c:17: renameinit()\ns/()/(void)/",
			"disapproval": false,
			"date": "2011-11-28 18:36:55.177406",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/11/28 17:54:55, rsc wrote:\n> There's a lot in this CL.\n> Can it be broken up more?\n\ni don't think so\n\n> At the very least, please undo the code moves\n\nre-garbled go.y.  if you want to understand go.y as a whole, i recommend patch set 5 if you want to see minimum changes, the last one is your friend.\n\n> or send out a preparation CL that does nothing\n> but move code (no edits).  I cannot tell what has\n> changed and what has only moved.\n> \n> I know you're working on that for go.y, but I've\n> flagged a few other places too.\n\ni'll look at those now.\n\n> \n> http://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/dcl.c\n> File src/cmd/gc/dcl.c (left):\n> \n> http://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/dcl.c#oldcode679\n> src/cmd/gc/dcl.c:679: void\n> Code move.\n> \n> http://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/dcl.c\n> File src/cmd/gc/dcl.c (right):\n> \n> http://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/dcl.c#newcode627\n> src/cmd/gc/dcl.c:627: // Same as funcargs, except run over an already\n> constructed TFUNC.\n> Use /* */ comment like rest of file.\n> Make the comment explain where these come from.\n> \n> http://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/dcl.c#newcode639\n> src/cmd/gc/dcl.c:639: for(ft=getthisx(t)->type; ft; ft=ft->down) {\n> indent\n> \n> http://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/dcl.c#newcode647\n> src/cmd/gc/dcl.c:647: if (t->intuple)\n> ,s/if (/if(/g\n> \n> http://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/dcl.c#newcode648\n> src/cmd/gc/dcl.c:648: for(ft=getinargx(t)->type; ft; ft=ft->down) {\n> indent\n> \n> http://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/dcl.c#newcode658\n> src/cmd/gc/dcl.c:658: for(ft=getoutargx(t)->type; ft; ft=ft->down) {\n> indent\n> \n> http://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/dcl.c#newcode778\n> src/cmd/gc/dcl.c:778: if (!(funarg && isblank(n->left))) {\n> What is going on here?  Why is _ special one way in function arguments\n> and a different way in struct fields?\n> \n> http://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/dcl.c#newcode787\n> src/cmd/gc/dcl.c:787: if(funarg && n->left->class == PPARAM)\n> Seems like this should be at the call site, since there is only\n> one call site that passes funarg==1.\n> \n> http://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/export.c\n> File src/cmd/gc/export.c (right):\n> \n> http://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/export.c#newcode90\n> src/cmd/gc/export.c:90: methcmp(const void *va, const void *vb)\n> Code move.\n> \n> http://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/export.c#newcode296\n> src/cmd/gc/export.c:296: // Informational: record package name\n> Code move.\n> \n> http://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/export.c#newcode366\n> src/cmd/gc/export.c:366: // override declaration in unsafe.go for Pointer.\n> Code move.\n> \n> http://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/fmt.c\n> File src/cmd/gc/fmt.c (right):\n> \n> http://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/fmt.c#newcode1058\n> src/cmd/gc/fmt.c:1058: if(isblank(n))\n> This implies that fmtprint(f, \"%S\", n->sym)\n> mishandles the blank identifier.  Maybe it would\n> be better to fix %S?\n> \n> http://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/fmt.c#newcode1207\n> src/cmd/gc/fmt.c:1207: // Unary\n> line // up with case.\n> as written it looks like some kind of fall through.\n> \n> http://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/fmt.c#newcode1221\n> src/cmd/gc/fmt.c:1221: // Binary\n> same\n> \n> http://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/go.h\n> File src/cmd/gc/go.h (right):\n> \n> http://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/go.h#newcode360\n> src/cmd/gc/go.h:360: SymExported\t= 1<<2,\t// allready written out by export\n> s/allready //\n> \n> http://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/go.h#newcode437\n> src/cmd/gc/go.h:437: OCALL, OCALLFUNC, OCALLMETH, OCALLINTER, OINLCALL,\n> Shouldn't be in this CL.\n> \n> http://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/go.h#newcode827\n> src/cmd/gc/go.h:827: EXTERN\tNodeList*\timportlist;\t// imported functions and\n> methods with inlinable bodies\n> Shouldn't be in this CL.\n> \n> http://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/go.y\n> File src/cmd/gc/go.y (right):\n> \n> http://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/go.y#newcode26\n> src/cmd/gc/go.y:26: #define YYDEBUG 1\n> Delete.\n> \n> http://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/go.y#newcode1255\n> src/cmd/gc/go.y:1255: hidden_fndcl:\n> Code move, here and in other places in this file.\n> \n> http://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/go.y#newcode1738\n> src/cmd/gc/go.y:1738: * Import syntax from package header.\n> The comment style in this file is lower case with no period.\n> Please make this look like the others.\n> \n> http://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/go.y#newcode1779\n> src/cmd/gc/go.y:1779: hidden_pkg_importsym:\n> Code move.\n> \n> http://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/go.y#newcode1794\n> src/cmd/gc/go.y:1794: *  Importing types\n> Same.  Also s/  / /\n> \n> http://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/lex.c\n> File src/cmd/gc/lex.c (right):\n> \n> http://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/lex.c#newcode337\n> src/cmd/gc/lex.c:337: // Phase 4: Inlining\n> Shouldn't be in this CL.\n> \n> http://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/walk.c\n> File src/cmd/gc/walk.c (right):\n> \n> http://codereview.appspot.com/5431046/diff/6001/src/cmd/gc/walk.c#newcode171\n> src/cmd/gc/walk.c:171: walkstmtlist(n->ninit);\n> These cleanups are fine but seem unrelated.",
			"disapproval": false,
			"date": "2011-11-28 18:19:12.781928",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Nov 28, 2011 at 14:01,  <lvd@google.com> wrote:\n> no, reorg with changes. \u00a0really better this way.\n\nThat's fine, but please send a CL with just the moves,\nso that we can commit that one (moves only, no edits)\nand then when you hg sync + hg upload this CL again,\nI will be able to see the changes.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-28 19:04:08.677077",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, gri@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-29 14:53:55.055197",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "done\n\nhttp://codereview.appspot.com/5431046/diff/11002/src/cmd/gc/go.y\nFile src/cmd/gc/go.y (right):\n\nhttp://codereview.appspot.com/5431046/diff/11002/src/cmd/gc/go.y#newcode1910\nsrc/cmd/gc/go.y:1910: hidden_type_func:\nOn 2011/11/28 18:36:55, rsc wrote:\n> Code move.\n\nDone.\n\nhttp://codereview.appspot.com/5431046/diff/11002/src/cmd/gc/go.y#newcode1932\nsrc/cmd/gc/go.y:1932: hidden_funarg:\nOn 2011/11/28 18:36:55, rsc wrote:\n> Code move.  (Should be where hidden_dcl was.)\n\nDone.\n\nhttp://codereview.appspot.com/5431046/diff/11002/src/cmd/gc/init.c\nFile src/cmd/gc/init.c (right):\n\nhttp://codereview.appspot.com/5431046/diff/11002/src/cmd/gc/init.c#newcode17\nsrc/cmd/gc/init.c:17: renameinit()\nOn 2011/11/28 18:36:55, rsc wrote:\n> s/()/(void)/\n\nDone.",
			"disapproval": false,
			"date": "2011-11-28 19:12:04.346190",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I submitted 5444048, which removes the special case in tofunargs.\nThat should simplify structfield a bit.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-28 21:41:24.590817",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/11/28 19:04:08, rsc wrote:\n> On Mon, Nov 28, 2011 at 14:01,  <mailto:lvd@google.com> wrote:\n> > no, reorg with changes. &nbsp;really better this way.\n> \n> That's fine, but please send a CL with just the moves,\n\nhttp://codereview.appspot.com/5447043\n\n> so that we can commit that one (moves only, no edits)\n\nreorganized the if's and gotos and returns while expanding typedcl2 inside importype.  no functional changes.\n\n> and then when you hg sync + hg upload this CL again,\n> I will be able to see the changes.\n> \n> Russ",
			"disapproval": false,
			"date": "2011-11-29 11:45:43.633870",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for looking into the package symbol stuff.\nMy understanding of the Go rules was wrong when\nI wrote the initial code.\n",
			"disapproval": false,
			"date": "2011-12-01 17:20:33.283732",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i'm not 100% sure what should happen to embedded fields of builtin type. see below. but it works.   i tried to add a test that would break if i changed the builtin lookup in embedded but i couldnt get it to break.\n\n now i'll go put back the _ for funargs\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/dcl.c\nFile src/cmd/gc/dcl.c (right):\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/dcl.c#newcode821\nsrc/cmd/gc/dcl.c:821: // during import put unexported fieldnames in the imported package\nOn 2011/12/01 17:16:31, lvd wrote:\n> On 2011/12/01 04:57:23, rsc wrote:\n> > Why is this still necessary?  Why isn't the export data correct?\n> > Did something throw away the information that it contained?\n> \n> yes.  embedded(s) in hidden_structdcl. \n> \n> let me see if i can fix that.\n\nDone.\n\ni tried leaving an assert here but that breaks on\ntype T1 struct { int } \ni.e. embedding builtins.\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/dcl.c#newcode1325\nsrc/cmd/gc/dcl.c:1325: // during import put unexported method names in the imported package\nOn 2011/12/01 17:16:31, lvd wrote:\n> On 2011/12/01 04:57:23, rsc wrote:\n> > Again.\n> \n> and another one at line 1300.\n\nnope, it was garbled by the one at line 1300.  fixed\n\n\n> \n> this one is garbled by methodname1.  will fix",
			"disapproval": false,
			"date": "2011-12-02 12:47:09.900048",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "gcimporter changes LGTM",
			"disapproval": false,
			"date": "2011-12-05 17:23:20.717694",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n",
			"disapproval": false,
			"date": "2011-12-05 19:35:39.398699",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The gcimporter.go changes LGTM.\nLeaving for rsc.\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/pkg/exp/types/gcimporter.go\nFile src/pkg/exp/types/gcimporter.go (right):\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/pkg/exp/types/gcimporter.go#newcode761\nsrc/pkg/exp/types/gcimporter.go:761: p.parseName()\nI guess this is because of imported methods that can be inlined? Perhaps a short comment could be useful.",
			"disapproval": false,
			"date": "2011-11-29 18:49:31.200348",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=23c65e5ae3ed ***\n\ngc: changes in export format in preparation of inlining.\n\nIncludes minimal change to gcimporter to keep it working,\n\nR=rsc, gri\nCC=golang-dev\nhttp://codereview.appspot.com/5431046\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2011-12-05 19:40:23.094533",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "the simple things are addressed, will upload that and then try to get rid of the re-lookups in dcl\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/dcl.c\nFile src/cmd/gc/dcl.c (right):\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/dcl.c#newcode628\nsrc/cmd/gc/dcl.c:628: * Same as funcargs, except run over an already constructed TFUNC.\nOn 2011/12/01 04:57:23, rsc wrote:\n> Please add to this comment an explanation of why this situation arises.\n\nDone.\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/dcl.c#newcode821\nsrc/cmd/gc/dcl.c:821: // during import put unexported fieldnames in the imported package\nOn 2011/12/01 04:57:23, rsc wrote:\n> Why is this still necessary?  Why isn't the export data correct?\n> Did something throw away the information that it contained?\n\nyes.  embedded(s) in hidden_structdcl. \n\nlet me see if i can fix that.\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/dcl.c#newcode852\nsrc/cmd/gc/dcl.c:852: // during import put argument names in the imported package\nOn 2011/12/01 04:57:23, rsc wrote:\n> Same.\n\nsligthly different.  if you import hash, it has \n\n   type @\"\".Hash interface { Reset(); Size() int; Sum() []byte; Write(@\"io\".p []byte) (@\"io\".n int, @\"io\".err error) }\n\nbecause the methodset of io.Writer is expanded in hash with the parameter names from io.   looks like we can live without the re-lookup tho.\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/dcl.c#newcode1062\nsrc/cmd/gc/dcl.c:1062: // during import l->n->op is OKEY, but l->n->left ==\nOn 2011/12/01 04:57:23, rsc wrote:\n> The comment says n->left == NONAME but the text says n->sym == S.\n> They are different concepts.\n> \n> I'm a little uncomfortable with this code being run during import,\n> since import is supposed to deal with a simpler subset of the language,\n> but if it must be run, I'd like to not need special cases like this one.\n> Can we make the export write missing function parameter names\n> as '_' instead of '?' ?\n\nthats how i had it a few patchsets of this CL ago.  I decided to go for this because it's a more localized and only 2-line (plus comment) change here instead of a bunch of changes to make sure we print _ instead of ? all over the place.  And i never got that one working, but that was probably b/c of sth else.\n\nLet me reinstate it, see if i can get it to work and you can judge., but in a separate patchset from all the fixed  comments here.\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/dcl.c#newcode1198\nsrc/cmd/gc/dcl.c:1198: s = pkglookup(p, s->pkg);\nOn 2011/12/01 04:57:23, rsc wrote:\n> incorrect indentation\n> (one tab not two)\n\nDone.\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/dcl.c#newcode1325\nsrc/cmd/gc/dcl.c:1325: // during import put unexported method names in the imported package\nOn 2011/12/01 04:57:23, rsc wrote:\n> Again.\n\nand another one at line 1300.\n\nthis one is garbled by methodname1.  will fix\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/export.c\nFile src/cmd/gc/export.c (left):\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/export.c#oldcode243\nsrc/cmd/gc/export.c:243: \nOn 2011/12/01 04:57:23, rsc wrote:\n> Please restore this blank line.\n> I like being able to see the lineno save+restore\n> as their own blocks at top and bottom of the function.\n> It makes it less likely that someone will incorrectly\n> add code after the restore if it is its own block.\n\nDone.\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/export.c\nFile src/cmd/gc/export.c (right):\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/export.c#newcode126\nsrc/cmd/gc/export.c:126: if(t->etype == TFUNC && n->class == PFUNC) {\nOn 2011/12/01 04:57:23, rsc wrote:\n> remove gratuitous added braces\n\nleftover from the version with ->inl printed. done\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/export.c#newcode212\nsrc/cmd/gc/export.c:212: case ONAME:\nOn 2011/12/01 04:57:23, rsc wrote:\n> Add a blank line before this one too, to be consistent.\n> \n\nDone.\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/export.c#newcode313\nsrc/cmd/gc/export.c:313: \nOn 2011/12/01 04:57:23, rsc wrote:\n> spaces?\n\nDone.\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/fmt.c\nFile src/cmd/gc/fmt.c (right):\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/fmt.c#newcode706\nsrc/cmd/gc/fmt.c:706: fmtstrcpy(fp, \"? \");\nOn 2011/12/01 04:57:23, rsc wrote:\n> I assume the _ logic would go here, but it would have to\n> be careful to apply only to funargs, not to structs, or else\n> embedding would be lost.\n\nyes.  See 2 or 3 patchsets earlier.  As said in dcl.c i'll restore that.\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/go.y\nFile src/cmd/gc/go.y (right):\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/go.y#newcode1778\nsrc/cmd/gc/go.y:1778: if ($2 == N)\nOn 2011/12/01 04:57:23, rsc wrote:\n> ,s/if (/if(/g\n\ndone everywere\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/typecheck.c\nFile src/cmd/gc/typecheck.c (right):\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/typecheck.c#newcode584\nsrc/cmd/gc/typecheck.c:584: if(looktypedot(n, t, 1)) {\nOn 2011/12/01 04:57:23, rsc wrote:\n> Delete new { }.\n\nDone.\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/typecheck.c#newcode612\nsrc/cmd/gc/typecheck.c:612: if(lookdot(n, t, 1)) {\nOn 2011/12/01 04:57:23, rsc wrote:\n> Delete new { }\n\nDone.\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/typecheck.c#newcode2134\nsrc/cmd/gc/typecheck.c:2134: // Sym might have resolved to name in other top-level\nOn 2011/12/01 04:57:23, rsc wrote:\n> Is this still true?\n\nprobably not after i fixed methodtype1 and embedded struct fields.  will try.\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/pkg/exp/types/gcimporter.go\nFile src/pkg/exp/types/gcimporter.go (right):\n\nhttp://codereview.appspot.com/5431046/diff/14012/src/pkg/exp/types/gcimporter.go#newcode761\nsrc/pkg/exp/types/gcimporter.go:761: p.parseName()\nOn 2011/11/29 18:49:31, gri wrote:\n> I guess this is because of imported methods that can be inlined? Perhaps a short\n> comment could be useful.\n\nDone.",
			"disapproval": false,
			"date": "2011-12-01 17:16:31.699630",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "should be all in order now, PTAL.\n\nOn Fri, Dec 2, 2011 at 13:47, <lvd@google.com> wrote:\n\n> i'm not 100% sure what should happen to embedded fields of builtin type.\n> see below. but it works.   i tried to add a test that would break if i\n> changed the builtin lookup in embedded but i couldnt get it to break.\n>\n>  now i'll go put back the _ for funargs\n>\n>\n>\n> http://codereview.appspot.com/**5431046/diff/14012/src/cmd/gc/**dcl.c<http://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/dcl.c>\n> File src/cmd/gc/dcl.c (right):\n>\n> http://codereview.appspot.com/**5431046/diff/14012/src/cmd/gc/**\n> dcl.c#newcode821<http://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/dcl.c#newcode821>\n> src/cmd/gc/dcl.c:821: // during import put unexported fieldnames in the\n> imported package\n> On 2011/12/01 17:16:31, lvd wrote:\n>\n>> On 2011/12/01 04:57:23, rsc wrote:\n>> > Why is this still necessary?  Why isn't the export data correct?\n>> > Did something throw away the information that it contained?\n>>\n>\n>  yes.  embedded(s) in hidden_structdcl.\n>>\n>\n>  let me see if i can fix that.\n>>\n>\n> Done.\n>\n> i tried leaving an assert here but that breaks on\n> type T1 struct { int }\n> i.e. embedding builtins.\n>\n>\n> http://codereview.appspot.com/**5431046/diff/14012/src/cmd/gc/**\n> dcl.c#newcode1325<http://codereview.appspot.com/5431046/diff/14012/src/cmd/gc/dcl.c#newcode1325>\n> src/cmd/gc/dcl.c:1325: // during import put unexported method names in\n> the imported package\n> On 2011/12/01 17:16:31, lvd wrote:\n>\n>> On 2011/12/01 04:57:23, rsc wrote:\n>> > Again.\n>>\n>\n>  and another one at line 1300.\n>>\n>\n> nope, it was garbled by the one at line 1300.  fixed\n>\n>\n>\n>\n>  this one is garbled by methodname1.  will fix\n>>\n>\n> http://codereview.appspot.com/**5431046/<http://codereview.appspot.com/5431046/>\n>\n",
			"disapproval": false,
			"date": "2011-12-05 13:07:32.182223",
			"approval": false
		}
	],
	"owner_email": "lvd@google.com",
	"private": false,
	"base_url": "",
	"owner": "lvd",
	"subject": "code review 5431046: gc: changes in export format in preparation of inlining.",
	"created": "2011-11-22 22:17:58.651089",
	"patchsets": [
		1,
		1002,
		3001,
		5001,
		6001,
		11001,
		6003,
		11002,
		42,
		7029,
		12025,
		7040,
		13001,
		15001,
		11047,
		15012,
		11048,
		15013,
		17021,
		14012,
		11050,
		18014,
		19001,
		11051,
		15038
	],
	"modified": "2011-12-06 08:43:16.209798",
	"closed": true,
	"issue": 5431046
}