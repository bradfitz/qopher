{
	"description": "regexp: add (*Regexp).Longest\n\nFixes issue 3696.",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Longest sounds good (drop Leftmost).\r\nCompileLongest is not great because next you need MustCompileLongest.\r\n",
			"disapproval": false,
			"date": "2013-01-17 04:39:16.931090",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-01-17 04:24:52.624150",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I named the method LeftmostLongest as per the issue, but perhaps the name\r\nLongest would be better, as all match types are leftmost.\r\n\r\nThis might also be more natural and easily located as\r\n\r\nfunc CompileLongest(expr string) (*Regexp, error)\r\n\r\nThoughts?\r\n",
			"disapproval": false,
			"date": "2013-01-17 04:27:37.078300",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Can it return the *Regexp to allow the builder pattern? That's pretty\r\ncommon for regular expressions.\r\n",
			"disapproval": false,
			"date": "2013-01-17 04:44:43.128220",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 17 January 2013 15:44, David Symonds <dsymonds@golang.org> wrote:\r\n\r\n> Can it return the *Regexp to allow the builder pattern? That's pretty\r\n> common for regular expressions.\r\n>\r\n\r\nHappy to do this too. Would be handy for cases like:\r\n\r\nvar foo = MustCompile(`foo`).Longest()\r\n",
			"disapproval": false,
			"date": "2013-01-17 04:53:25.823760",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jan 17, 2013 at 3:52 PM, Andrew Gerrand <adg@golang.org> wrote:\r\n\r\n> On 17 January 2013 15:44, David Symonds <dsymonds@golang.org> wrote:\r\n>>\r\n>> Can it return the *Regexp to allow the builder pattern? That's pretty\r\n>> common for regular expressions.\r\n>\r\n>\r\n> Happy to do this too. Would be handy for cases like:\r\n>\r\n> var foo = MustCompile(`foo`).Longest()\r\n\r\nYes, that's the exact situation I'm thinking of.\r\n",
			"disapproval": false,
			"date": "2013-01-17 04:55:53.993870",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, dsymonds@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-17 04:54:09.263350",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 17 January 2013 15:52, Andrew Gerrand <adg@golang.org> wrote:\r\n\r\n>\r\n> On 17 January 2013 15:44, David Symonds <dsymonds@golang.org> wrote:\r\n>\r\n>> Can it return the *Regexp to allow the builder pattern? That's pretty\r\n>> common for regular expressions.\r\n>>\r\n>\r\n> Happy to do this too. Would be handy for cases like:\r\n>\r\n> var foo = MustCompile(`foo`).Longest()\r\n>\r\n\r\nThe question about the builder pattern: does it mutate or copy the\r\nreceiver?\r\n",
			"disapproval": false,
			"date": "2013-01-17 04:54:17.924610",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jan 17, 2013 at 3:53 PM, Andrew Gerrand <adg@golang.org> wrote:\r\n\r\n> The question about the builder pattern: does it mutate or copy the receiver?\r\n\r\nIt usually doesn't matter. It's most often used with immutable\r\nobjects, so it would normally return a copy, but here it seems fine to\r\nmutate in-place.\r\n",
			"disapproval": false,
			"date": "2013-01-17 04:56:58.633280",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7133051/diff/6001/src/pkg/regexp/exec_test.go\nFile src/pkg/regexp/exec_test.go (right):\n\nhttps://codereview.appspot.com/7133051/diff/6001/src/pkg/regexp/exec_test.go#newcode712\nsrc/pkg/regexp/exec_test.go:712: re, err := Compile(`a(|b)`)\nI found it curious that this test breaks if this were `ab?`, which is an equivalent expression. I wonder if that is a bug. The traditional definitions of leftmost longest don't restrict to alternations.\n\nhttps://codereview.appspot.com/7133051/diff/6001/src/pkg/regexp/regexp.go\nFile src/pkg/regexp/regexp.go (right):\n\nhttps://codereview.appspot.com/7133051/diff/6001/src/pkg/regexp/regexp.go#newcode133\nsrc/pkg/regexp/regexp.go:133: // Longest sets the match semantics of the regexp to leftmost-longest.\nI think s/-//, since this is not being used as a direct adjective.",
			"disapproval": false,
			"date": "2013-01-17 05:02:19.061150",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The builder pattern is not very common in the Go libraries, and I\r\ndon't expect this to be a commonly used function. My original intent\r\nwas to mutate the Regexp but it might be better to make it a\r\ncompilation parameter, meaning CompileLongest and MustCompileLongest.\r\nThose would give us maximum flexibility in the future, making it\r\npossible for the compilation to behave differently if needed.\r\n\r\nAll that said, let's put this on hold for now, since the functionality\r\nbeing exposed apparently doesn't even work.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-01-17 14:08:22.310800",
			"approval": false
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/17 14:08:22, rsc wrote:\n> The builder pattern is not very common in the Go libraries, and I\n> don't expect this to be a commonly used function. My original intent\n> was to mutate the Regexp but it might be better to make it a\n> compilation parameter, meaning CompileLongest and MustCompileLongest.\n> Those would give us maximum flexibility in the future, making it\n> possible for the compilation to behave differently if needed.\n> \n> All that said, let's put this on hold for now, since the functionality\n> being exposed apparently doesn't even work.\n> \n> Russ\n\nOut of curiosity, is there a reason this couldn't be a (?...)-param?  That seems to be the usual way to affect the behavior of a regexp as opposed to things like re.CaseInsensitive() or re.Multiline().",
			"disapproval": false,
			"date": "2013-01-18 17:14:44.781250",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Out of curiosity, is there a reason this couldn't be a (?...)-param?\r\n> That seems to be the usual way to affect the behavior of a regexp as\r\n> opposed to things like re.CaseInsensitive() or re.Multiline().\r\n\r\nI don't want to contribute to the complexity of the regexp syntax\r\nworld by creating our own incompatible syntax. There are enough of\r\nthose already.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-01-18 17:46:08.009340",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7133051/diff/6001/src/pkg/regexp/exec_test.go\nFile src/pkg/regexp/exec_test.go (right):\n\nhttps://codereview.appspot.com/7133051/diff/6001/src/pkg/regexp/exec_test.go#newcode712\nsrc/pkg/regexp/exec_test.go:712: re, err := Compile(`a(|b)`)\nOn 2013/01/17 05:02:19, dsymonds wrote:\n> I found it curious that this test breaks if this were `ab?`, which is an\n> equivalent expression. I wonder if that is a bug. The traditional definitions of\n> leftmost longest don't restrict to alternations.\n\nIt sounds like everything is working and I just misread this comment. ab? is a(b|) not a(|b). That is, ? prefers to match, not not to match. For an expression equivalent to a(|b) you need a??.\n\nhttps://codereview.appspot.com/7133051/diff/6001/src/pkg/regexp/regexp.go\nFile src/pkg/regexp/regexp.go (right):\n\nhttps://codereview.appspot.com/7133051/diff/6001/src/pkg/regexp/regexp.go#newcode133\nsrc/pkg/regexp/regexp.go:133: // Longest sets the match semantics of the regexp to leftmost-longest.\nOn 2013/01/17 05:02:19, dsymonds wrote:\n> I think s/-//, since this is not being used as a direct adjective.\n\n// Longest makes future searches prefer the leftmost-longest match.",
			"disapproval": false,
			"date": "2013-02-01 19:46:12.190500",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping (lgtm)",
			"disapproval": false,
			"date": "2013-02-04 04:16:25.168010",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=3529e745c5d5 ***\n\nregexp: add (*Regexp).Longest\n\nFixes issue 3696.\n\nR=rsc\nCC=golang-dev\nhttps://codereview.appspot.com/7133051",
			"disapproval": false,
			"date": "2013-02-04 04:29:01.677600",
			"approval": false
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 7133051: regexp: add (*Regexp).Longest",
	"created": "2013-01-17 04:24:41.934710",
	"patchsets": [
		1,
		6001,
		20001
	],
	"modified": "2013-02-04 04:29:03.936600",
	"closed": true,
	"issue": 7133051
}