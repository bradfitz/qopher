{
	"description": "FAQ: update",
	"cc": [
		"bradfitz@golang.org",
		"r@google.com",
		"dsymonds@golang.org",
		"edsrzf@gmail.com",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Java doesn't count as a member of the C family? It has pass-by-reference\nsemantics sometimes.\n",
			"disapproval": false,
			"date": "2011-11-08 22:38:57.922218",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-08 22:20:52.365692",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"bradfitz@golang.org",
				"r@google.com",
				"dsymonds@golang.org",
				"edsrzf@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=a67f688c043e ***\n\nFAQ: update\n\nR=bradfitz, r, dsymonds, edsrzf, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5345055",
			"disapproval": false,
			"date": "2011-11-09 00:26:06.562089",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5345055/diff/1/doc/go_faq.html\nFile doc/go_faq.html (right):\n\nhttp://codereview.appspot.com/5345055/diff/1/doc/go_faq.html#newcode983\ndoc/go_faq.html:983: rudimentary, however.\nthis paragraph paints a bleaker picture than my understanding of the situation.\n\nIt's not super naive: it does have smarts annotating functions, for instance.  Isn't that used to detect escapes when calling between different functions?",
			"disapproval": false,
			"date": "2011-11-08 22:32:44.178345",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"r@golang.org",
				"bradfitz@golang.org",
				"r@google.com",
				"dsymonds@golang.org",
				"edsrzf@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM once everyone else is happy\n\nhttp://codereview.appspot.com/5345055/diff/1/doc/go_faq.html\nFile doc/go_faq.html (right):\n\nhttp://codereview.appspot.com/5345055/diff/1/doc/go_faq.html#newcode983\ndoc/go_faq.html:983: rudimentary, however.\nThe hard part about this paragraph is the tone of the\noriginal text, which is still there.  I'd replace this paragraph with:\n\nIn the current compilers, if a variable has its address taken, that variable\nis a candidate for allocation on the heap.  However, a basic <em>escape \nanalysis</em> recognizes common cases when such variables will not\nlive past the return from the function and, in those cases, avoids the\nallocation.",
			"disapproval": false,
			"date": "2011-11-08 22:44:15.505260",
			"approval": true
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n",
			"disapproval": false,
			"date": "2011-11-08 23:36:30.464807",
			"approval": true
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Nov 8, 2011, at 2:32 PM, bradfitz@golang.org wrote:\n\n> \n> http://codereview.appspot.com/5345055/diff/1/doc/go_faq.html\n> File doc/go_faq.html (right):\n> \n> http://codereview.appspot.com/5345055/diff/1/doc/go_faq.html#newcode983\n> doc/go_faq.html:983: rudimentary, however.\n> this paragraph paints a bleaker picture than my understanding of the\n> situation.\n> \n> It's not super naive: it does have smarts annotating functions, for\n> instance.  Isn't that used to detect escapes when calling between\n> different functions?\n\ni didn't say super naive, i said rudimentary. i think that's fair.\n\nwhat would you say instead?\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-11-08 22:33:48.989381",
			"approval": false
		},
		{
			"sender": "edsrzf@gmail.com",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@google.com",
				"dsymonds@golang.org",
				"edsrzf@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5345055/diff/1/doc/go_faq.html\nFile doc/go_faq.html (right):\n\nhttp://codereview.appspot.com/5345055/diff/1/doc/go_faq.html#newcode1243\ndoc/go_faq.html:1243: stacks, supported by recent modfications to its linker.\ns/modfications/modifications/",
			"disapproval": false,
			"date": "2011-11-08 22:43:32.119084",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Nov 8, 2011, at 2:38 PM, David Symonds wrote:\n\n> Java doesn't count as a member of the C family? It has pass-by-reference semantics sometimes.\n> \n\nwell, kinda sorta. receivers are pointers that look like values, but otherwise what do you mean? i think function args (the subject of that section) are always pass-by-value.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-11-08 22:47:50.228474",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Nov 8, 2011, at 2:38 PM, David Symonds wrote:\n\n> Java doesn't count as a member of the C family? It has pass-by-reference semantics sometimes.\n> \nI just checked the book. All parameters to methods are \"pass-by-value\".\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-11-08 23:15:18.686107",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Nov 9, 2011 at 10:15 AM, Rob 'Commander' Pike <r@google.com> wrote:\n\n> On Nov 8, 2011, at 2:38 PM, David Symonds wrote:\n>\n> Java doesn't count as a member of the C family? It has pass-by-reference\n> semantics sometimes.\n>\n> I just checked the book. All parameters to methods are \"pass-by-value\".\n\nI guess in that sense, yeah. It's the same as how\nchan/map/slice/func/interface are \"reference\" values, so what you've\ngot is fine.\n",
			"disapproval": false,
			"date": "2011-11-08 23:25:51.524460",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5345055: FAQ: update",
	"created": "2011-11-08 22:20:36.915545",
	"patchsets": [
		1,
		10001
	],
	"modified": "2011-11-09 00:26:08.929442",
	"closed": true,
	"issue": 5345055
}