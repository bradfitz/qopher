{
	"description": "go/parser: avoid endless loop in case of internal error\n\nFactored the error synchronization code into two functions\nsyncStmt and syncDecl. Because they may return w/o advancing\nthe scanner, there is potential for endless loops across\nmultiple parse functions; typically caused by an incorrect\ntoken list in these functions (e.g., adding token.ELSE to\nsyncStmt will cause the parser to go into an endless loop\nfor test/syntax/semi7.go without this mechanism). This would\nindicate a compiler bug, exposed only in an error situation\nfor very specific source files. Added a mechanism to force\nscanner advance if an endless loop is detected. As a result,\nerror recovery will be less good in those cases, but the parser\nreported a source error already and at least doesn't get stuck.",
	"cc": [
		"rsc@golang.org",
		"rsc@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"rsc@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=ee68d043e7f5 ***\n\ngo/parser: avoid endless loop in case of internal error\n\nFactored the error synchronization code into two functions\nsyncStmt and syncDecl. Because they may return w/o advancing\nthe scanner, there is potential for endless loops across\nmultiple parse functions; typically caused by an incorrect\ntoken list in these functions (e.g., adding token.ELSE to\nsyncStmt will cause the parser to go into an endless loop\nfor test/syntax/semi7.go without this mechanism). This would\nindicate a compiler bug, exposed only in an error situation\nfor very specific source files. Added a mechanism to force\nscanner advance if an endless loop is detected. As a result,\nerror recovery will be less good in those cases, but the parser\nreported a source error already and at least doesn't get stuck.\n\nR=rsc, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5784046",
			"disapproval": false,
			"date": "2012-03-08 05:28:53.976730",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-03-08 00:52:16.684349",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"rsc@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5784046/diff/4003/src/pkg/go/parser/parser.go\nFile src/pkg/go/parser/parser.go (right):\n\nhttp://codereview.appspot.com/5784046/diff/4003/src/pkg/go/parser/parser.go#newcode48\nsrc/pkg/go/parser/parser.go:48: synCnt int       // number of calls to syncXXX without progress\nNot syncPos, syncCnt?",
			"disapproval": false,
			"date": "2012-03-08 02:16:44.947896",
			"approval": true
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 5784046: go/parser: avoid endless loop in case of internal error",
	"created": "2012-03-07 23:28:58.752110",
	"patchsets": [
		1,
		2001,
		5001,
		4003,
		3
	],
	"modified": "2012-03-08 05:28:55.818427",
	"closed": true,
	"issue": 5784046
}