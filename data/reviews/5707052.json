{
	"description": "os: release process handle at the end of windows (*Process).Wait\n\nFixes issue 3154.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-28 23:44:00.862143",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but wait for others.\n\nAlso, should the Release docs be mirrored in exec_unix.go?  I think the\npublic golang.org will only show linux docs, anyway.  I don't know what our\ngeneral policy on this sort of doc sync issue is.\n\n\nOn Tue, Feb 28, 2012 at 4:12 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\n\n>\n>\n> On Tue, Feb 28, 2012 at 4:07 PM, <alex.brainman@gmail.com> wrote:\n>\n>> On 2012/02/28 23:52:04, bradfitz wrote:\n>>\n>>> ...  Btw, this is issue 3154.\n>>>\n>>\n>> Done.\n>>\n>>\n>>  Are we going to further document the relation between Wait and\n>>>\n>> Release?\n>>\n>> I did change Wait comment. I think it is enough. If you want more,\n>> please tell me what to say.\n>>\n>>\n>>   Should Release be documented to say that once it's release, it can no\n>>> longer be waited on?\n>>>\n>>\n>> Added more to Release comment.\n>>\n>>  ...  (and enforce that?)\n>>>\n>>\n>> It is enforces as is - Release sets p.handle to syscall.InvalidHandle.\n>> Waiting on syscall.InvalidHandle will fail. It is like using os.File\n>> after you run Close on it.\n>>\n>>\n> Oh, and I see the same in exec_unix.go.  Okay, I'm happy enough.\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-02-29 00:13:54.509663",
			"approval": true
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/02/28 23:52:04, bradfitz wrote:\n> ...  Btw, this is issue 3154.\n\nDone.\n\n> Are we going to further document the relation between Wait and Release?\n\nI did change Wait comment. I think it is enough. If you want more, please tell me what to say.\n\n>  Should Release be documented to say that once it's release, it can no\n> longer be waited on?\n\nAdded more to Release comment.\n\n> ...  (and enforce that?)\n\nIt is enforces as is - Release sets p.handle to syscall.InvalidHandle. Waiting on syscall.InvalidHandle will fail. It is like using os.File after you run Close on it.\n\nAlex",
			"disapproval": false,
			"date": "2012-02-29 00:07:55.040310",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks.  Btw, this is issue 3154.\n\nAre we going to further document the relation between Wait and Release?\n Should Release be documented to say that once it's release, it can no\nlonger be waited on?  (and enforce that?)\n\n\nOn Tue, Feb 28, 2012 at 3:44 PM, <alex.brainman@gmail.com> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> os: release process handle at the end of windows (*Process).Wait\n>\n> Please review this at http://codereview.appspot.com/**5707052/<http://codereview.appspot.com/5707052/>\n>\n> Affected files:\n>  M src/cmd/cgo/util.go\n>  M src/cmd/godoc/main.go\n>  M src/pkg/net/http/triv.go\n>  M src/pkg/os/exec_windows.go\n>  M src/pkg/os/os_test.go\n>\n>\n> Index: src/cmd/cgo/util.go\n> ==============================**==============================**=======\n> --- a/src/cmd/cgo/util.go\n> +++ b/src/cmd/cgo/util.go\n> @@ -36,7 +36,6 @@\n>        if err != nil {\n>                fatalf(\"%s\", err)\n>        }\n> -       defer p.Release()\n>        r0.Close()\n>        w1.Close()\n>        w2.Close()\n> Index: src/cmd/godoc/main.go\n> ==============================**==============================**=======\n> --- a/src/cmd/godoc/main.go\n> +++ b/src/cmd/godoc/main.go\n> @@ -99,7 +99,6 @@\n>                log.Printf(\"os.StartProcess(%**q): %v\", bin, err)\n>                return 2\n>        }\n> -       defer p.Release()\n>\n>        var buf bytes.Buffer\n>        io.Copy(&buf, r)\n> Index: src/pkg/net/http/triv.go\n> ==============================**==============================**=======\n> --- a/src/pkg/net/http/triv.go\n> +++ b/src/pkg/net/http/triv.go\n> @@ -108,7 +108,6 @@\n>                fmt.Fprintf(rw, \"fork/exec: %s\\n\", err)\n>                return\n>        }\n> -       defer p.Release()\n>        io.Copy(rw, r)\n>        wait, err := p.Wait(0)\n>        if err != nil {\n> Index: src/pkg/os/exec_windows.go\n> ==============================**==============================**=======\n> --- a/src/pkg/os/exec_windows.go\n> +++ b/src/pkg/os/exec_windows.go\n> @@ -14,6 +14,7 @@\n>\n>  // Wait waits for the Process to exit or stop, and then returns a\n>  // ProcessState describing its status and an error, if any.\n> +// Wait releases any resources associated with the Process.\n>  func (p *Process) Wait() (ps *ProcessState, err error) {\n>        s, e := syscall.WaitForSingleObject(**syscall.Handle(p.handle),\n> syscall.INFINITE)\n>        switch s {\n> @@ -30,6 +31,7 @@\n>                return nil, NewSyscallError(\"**GetExitCodeProcess\", e)\n>        }\n>        p.done = true\n> +       defer p.Release()\n>        return &ProcessState{p.Pid, syscall.WaitStatus{Status: s, ExitCode:\n> ec}, new(syscall.Rusage)}, nil\n>  }\n>\n> Index: src/pkg/os/os_test.go\n> ==============================**==============================**=======\n> --- a/src/pkg/os/os_test.go\n> +++ b/src/pkg/os/os_test.go\n> @@ -530,7 +530,6 @@\n>        if err != nil {\n>                t.Fatalf(\"StartProcess: %v\", err)\n>        }\n> -       defer p.Release()\n>        w.Close()\n>\n>        var b bytes.Buffer\n> @@ -848,7 +847,6 @@\n>        if err != nil {\n>                t.Fatal(err)\n>        }\n> -       defer p.Release()\n>        w.Close()\n>\n>        var b bytes.Buffer\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-02-28 23:52:04.931340",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/02/29 00:13:54, bradfitz wrote:\n> \n> Also, should the Release docs be mirrored in exec_unix.go? ...\n\nAnd exec_plan9 ... But I am not sure that it should. The way Russ wants things (Release is called by Wait automatically), I feel he does not want Release to be advertised much. But I will wait for him to say.\n\n> ... I think the\n> public http://golang.org will only show linux docs, anyway.  I don't know what our\n> general policy on this sort of doc sync issue is.\n\nI can move these docos into doc.go - that is not the problem. It just we need to decide if we want same comment for all os, and, if yes, for which functions.\n\nAlex",
			"disapproval": false,
			"date": "2012-02-29 00:19:03.653171",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for cleaning this up.  Much improved.\n\nhttp://codereview.appspot.com/5707052/diff/5001/src/pkg/os/exec_windows.go\nFile src/pkg/os/exec_windows.go (right):\n\nhttp://codereview.appspot.com/5707052/diff/5001/src/pkg/os/exec_windows.go#newcode52\nsrc/pkg/os/exec_windows.go:52: // rendering it unusable in the future.\nadd\n// Release only needs to be called if Wait is not.\n\nalso add the same to the comments on Release for other systems.",
			"disapproval": false,
			"date": "2012-02-29 15:42:42.283332",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-29 00:07:45.920115",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Feb 28, 2012 at 4:07 PM, <alex.brainman@gmail.com> wrote:\n\n> On 2012/02/28 23:52:04, bradfitz wrote:\n>\n>> ...  Btw, this is issue 3154.\n>>\n>\n> Done.\n>\n>\n>  Are we going to further document the relation between Wait and\n>>\n> Release?\n>\n> I did change Wait comment. I think it is enough. If you want more,\n> please tell me what to say.\n>\n>\n>   Should Release be documented to say that once it's release, it can no\n>> longer be waited on?\n>>\n>\n> Added more to Release comment.\n>\n>  ...  (and enforce that?)\n>>\n>\n> It is enforces as is - Release sets p.handle to syscall.InvalidHandle.\n> Waiting on syscall.InvalidHandle will fail. It is like using os.File\n> after you run Close on it.\n>\n>\nOh, and I see the same in exec_unix.go.  Okay, I'm happy enough.\n",
			"disapproval": false,
			"date": "2012-02-29 00:12:17.865140",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-03-01 06:24:15.315507",
			"approval": true
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-03-01 03:23:23.179463",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5707052/diff/5001/src/pkg/os/exec_windows.go\nFile src/pkg/os/exec_windows.go (right):\n\nhttp://codereview.appspot.com/5707052/diff/5001/src/pkg/os/exec_windows.go#newcode52\nsrc/pkg/os/exec_windows.go:52: // rendering it unusable in the future.\nOn 2012/02/29 15:42:42, rsc wrote:\n> add\n> // Release only needs to be called if Wait is not.\n> \n> also add the same to the comments on Release for other systems.\n\nDone.",
			"disapproval": false,
			"date": "2012-03-01 03:23:41.269094",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=543b37dc7796 ***\n\nos: release process handle at the end of windows (*Process).Wait\n\nFixes issue 3154.\n\nR=golang-dev, bradfitz, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5707052",
			"disapproval": false,
			"date": "2012-03-01 06:36:42.041466",
			"approval": false
		}
	],
	"owner_email": "alex.brainman@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "brainman",
	"subject": "code review 5707052: os: release process handle at the end of windows (*Proc...",
	"created": "2012-02-28 23:40:27.890331",
	"patchsets": [
		1,
		2001,
		4001,
		5001,
		8001,
		8002
	],
	"modified": "2012-03-01 06:36:44.063364",
	"closed": true,
	"issue": 5707052
}