{
	"description": "time: gob marshaler for Time\n\nAddresses issue 2526",
	"cc": [
		"rsc@golang.org",
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"robert.hencke@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5448114/diff/2012/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5448114/diff/2012/src/pkg/time/time.go#newcode747\nsrc/pkg/time/time.go:747: var offsetMin int16 // minutes east of UTC. -1 is UTC.\nwhy is UTC not zero?\n\nhttp://codereview.appspot.com/5448114/diff/2012/src/pkg/time/time.go#newcode790\nsrc/pkg/time/time.go:790: if ver != 1 {\nfold these two lines together, since ver isn't used again. and use timeGobVersion not 1. but i would just make the test\nif buf[0] != timeGobVersion",
			"disapproval": false,
			"date": "2011-12-07 19:00:29.382711",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks.\n\nI'd like to see the zone offset saved too.\nIt can be an int16 if you divide it by 60\n(minutes not seconds), with -1 meaning UTC.\n\nThen the reconstruction can do what\nparse does:\n    if offset == -1 {\n        use UTC\n    } else if _, localoff, _, _, _ := Local.lookup(t.sec +\ninternalToUnix); offset == localoff {\n        use Local\n    } else {\n        use FixedZone(\"\", offset*60)\n    }\n",
			"disapproval": false,
			"date": "2011-12-06 15:57:28.421875",
			"approval": false
		},
		{
			"sender": "robert.hencke@gmail.com",
			"recipients": [
				"robert.hencke@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-06 06:47:27.755647",
			"approval": false
		},
		{
			"sender": "robert.hencke@gmail.com",
			"recipients": [
				"robert.hencke@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for the review and suggestions!  PTAL.",
			"disapproval": false,
			"date": "2011-12-07 07:09:24.838755",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Dec 7, 2011 at 14:00,  <r@golang.org> wrote:\n> why is UTC not zero?\n\nto distinguish it from time.Local when you're in the UK.\n",
			"disapproval": false,
			"date": "2011-12-07 19:12:27.755528",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"robert.hencke@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks great.  Thanks again.\n\nhttp://codereview.appspot.com/5448114/diff/2012/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5448114/diff/2012/src/pkg/time/time.go#newcode758\nsrc/pkg/time/time.go:758: return nil, gobError(\"Time.GobEncode: crazy zone offset\")\ns/crazy/unexpected/\n\nhttp://codereview.appspot.com/5448114/diff/2012/src/pkg/time/time.go#newcode778\nsrc/pkg/time/time.go:778: byte(offsetMin)},\nplease move the } to the next line.\nYou probably wnat to do\n\nenc := []byte ...\n\nreturn enc, nil\n\nto avoid the weirdness of a multiline value \nin the middle of a return argument list.\n\nhttp://codereview.appspot.com/5448114/diff/2012/src/pkg/time/time.go#newcode810\nsrc/pkg/time/time.go:810: } else if _, localoff, _, _, _ := Local.lookup(t.sec +\nunwrap line.  There's no 80-character requirement or anything.",
			"disapproval": false,
			"date": "2011-12-07 18:47:57.585251",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"robert.hencke@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks great.  Thanks again.\n\nhttp://codereview.appspot.com/5448114/diff/2012/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5448114/diff/2012/src/pkg/time/time.go#newcode758\nsrc/pkg/time/time.go:758: return nil, gobError(\"Time.GobEncode: crazy zone offset\")\ns/crazy/unexpected/\n\nhttp://codereview.appspot.com/5448114/diff/2012/src/pkg/time/time.go#newcode778\nsrc/pkg/time/time.go:778: byte(offsetMin)},\nplease move the } to the next line.\nYou probably wnat to do\n\nenc := []byte ...\n\nreturn enc, nil\n\nto avoid the weirdness of a multiline value \nin the middle of a return argument list.\n\nhttp://codereview.appspot.com/5448114/diff/2012/src/pkg/time/time.go#newcode810\nsrc/pkg/time/time.go:810: } else if _, localoff, _, _, _ := Local.lookup(t.sec +\nunwrap line.  There's no 80-character requirement or anything.",
			"disapproval": false,
			"date": "2011-12-07 18:47:57.557636",
			"approval": false
		},
		{
			"sender": "robert.hencke@gmail.com",
			"recipients": [
				"robert.hencke@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you both for your insights.  PTAL.\n\nhttp://codereview.appspot.com/5448114/diff/2012/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5448114/diff/2012/src/pkg/time/time.go#newcode758\nsrc/pkg/time/time.go:758: return nil, gobError(\"Time.GobEncode: crazy zone offset\")\nOn 2011/12/07 18:47:57, rsc wrote:\n> s/crazy/unexpected/\n\nDone.\n\nhttp://codereview.appspot.com/5448114/diff/2012/src/pkg/time/time.go#newcode778\nsrc/pkg/time/time.go:778: byte(offsetMin)},\nOn 2011/12/07 18:47:57, rsc wrote:\n> please move the } to the next line.\n> You probably wnat to do\n> \n> enc := []byte ...\n> \n> return enc, nil\n> \n> to avoid the weirdness of a multiline value \n> in the middle of a return argument list.\n\nDone.\n\nhttp://codereview.appspot.com/5448114/diff/2012/src/pkg/time/time.go#newcode790\nsrc/pkg/time/time.go:790: if ver != 1 {\nOn 2011/12/07 19:00:29, r wrote:\n> fold these two lines together, since ver isn't used again. and use\n> timeGobVersion not 1. but i would just make the test\n> if buf[0] != timeGobVersion\n\nDone.\n\nhttp://codereview.appspot.com/5448114/diff/2012/src/pkg/time/time.go#newcode810\nsrc/pkg/time/time.go:810: } else if _, localoff, _, _, _ := Local.lookup(t.sec +\nOn 2011/12/07 18:47:57, rsc wrote:\n> unwrap line.  There's no 80-character requirement or anything.\n\nDone.",
			"disapproval": false,
			"date": "2011-12-08 14:38:36.654389",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"robert.hencke@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nleaving for rsc",
			"disapproval": false,
			"date": "2011-12-08 18:18:59.851339",
			"approval": true
		},
		{
			"sender": "robert.hencke@gmail.com",
			"recipients": [
				"robert.hencke@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-10 22:34:29.198111",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"robert.hencke@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=a257d746e368 ***\n\ntime: gob marshaler for Time\n\nAddresses issue 2526\n\nR=rsc, r\nCC=golang-dev\nhttp://codereview.appspot.com/5448114\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2011-12-12 21:08:31.069188",
			"approval": false
		}
	],
	"owner_email": "robert.hencke@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "rh",
	"subject": "code review 5448114: time: gob marshaler for Time",
	"created": "2011-12-06 06:28:04.019261",
	"patchsets": [
		1,
		3003,
		5003,
		2012,
		12001,
		18001
	],
	"modified": "2011-12-13 00:19:23.683732",
	"closed": true,
	"issue": 5448114
}