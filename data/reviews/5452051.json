{
	"description": "exp/ssh: Have Wait() return an *ExitError\n\nI added the clientChan's msg channel to the list of channels that are closed in mainloop when the server sends a channelCloseMsg.\n\nI added an ExitError type that wraps a Waitmsg similar to that of os/exec. I fill ExitStatus with the data returned in the 'exit-status' channel message and Msg with the data returned in the 'exit-signal' channel message.\n\nInstead of having Wait() return on the first 'exit-status'/'exit-signal' I have it return an ExitError containing the status and signal when the clientChan's msg channel is closed.\n\nI added two tests cases to session_test.go that test for exit status 0 (in which case Wait() returns nil) and exit status 1 (in which case Wait() returns an ExitError with ExitStatus 1)",
	"cc": [
		"dave@cheney.net",
		"agl@golang.org",
		"rsc@golang.org",
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gustav.paul@gmail.com",
			"recipients": [
				"gustav.paul@gmail.com",
				"dave@cheney.net",
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, agl@golang.org, rsc@golang.org, golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-05 12:41:11.840302",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"gustav.paul@gmail.com",
				"dave@cheney.net",
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Pending the nit about exit-status, this looks really good. Thanks.\n\nhttp://codereview.appspot.com/5452051/diff/1011/src/pkg/exp/ssh/session.go\nFile src/pkg/exp/ssh/session.go (right):\n\nhttp://codereview.appspot.com/5452051/diff/1011/src/pkg/exp/ssh/session.go#newcode330\nsrc/pkg/exp/ssh/session.go:330: return nil\nI think an error should be returned here. If the code gets here it means that the remote session closed without sending an exit code or an signal.",
			"disapproval": false,
			"date": "2011-12-07 08:36:26.365297",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"gustav.paul@gmail.com",
				"dave@cheney.net",
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=34799e49f642 ***\n\nexp/ssh: Have Wait() return an *ExitError\n\nI added the clientChan's msg channel to the list of channels that are closed in mainloop when the server sends a channelCloseMsg.\n\nI added an ExitError type that wraps a Waitmsg similar to that of os/exec. I fill ExitStatus with the data returned in the 'exit-status' channel message and Msg with the data returned in the 'exit-signal' channel message.\n\nInstead of having Wait() return on the first 'exit-status'/'exit-signal' I have it return an ExitError containing the status and signal when the clientChan's msg channel is closed.\n\nI added two tests cases to session_test.go that test for exit status 0 (in which case Wait() returns nil) and exit status 1 (in which case Wait() returns an ExitError with ExitStatus 1)\n\nR=dave, agl, rsc, golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5452051\n\nCommitter: Adam Langley <agl@golang.org>\n\nhttp://codereview.appspot.com/5452051/diff/7003/src/pkg/exp/ssh/session.go\nFile src/pkg/exp/ssh/session.go (right):\n\nhttp://codereview.appspot.com/5452051/diff/7003/src/pkg/exp/ssh/session.go#newcode305\nsrc/pkg/exp/ssh/session.go:305: errmsg, rest, ok := parseString(rest[1:])\nI added a check for rest being empty at this point.",
			"disapproval": false,
			"date": "2011-12-07 14:58:35.475746",
			"approval": false
		},
		{
			"sender": "gustav.paul@gmail.com",
			"recipients": [
				"gustav.paul@gmail.com",
				"dave@cheney.net",
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm ignoring exit-signal in deciding whether the remote process returned an error or not. If exit-status was 0 (or was never sent back by the server - as allowed for in RFC4254) I assume the command exited successfully and return nil.\n\nIs this acceptable?",
			"disapproval": false,
			"date": "2011-12-06 14:34:10.130683",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"gustav.paul@gmail.com",
				"dave@cheney.net",
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is getting very close, just a few nits.\n\nhttp://codereview.appspot.com/5452051/diff/6003/src/pkg/exp/ssh/session.go\nFile src/pkg/exp/ssh/session.go (right):\n\nhttp://codereview.appspot.com/5452051/diff/6003/src/pkg/exp/ssh/session.go#newcode427\nsrc/pkg/exp/ssh/session.go:427: // An ExitError reports an unsuccessful exit by a command.\n// An ExitError reports unsuccessful completion of a remote command.\n\nhttp://codereview.appspot.com/5452051/diff/6003/src/pkg/exp/ssh/session.go#newcode436\nsrc/pkg/exp/ssh/session.go:436: type Waitmsg struct {\nPublic types should have a comment.\n\nhttp://codereview.appspot.com/5452051/diff/6003/src/pkg/exp/ssh/session.go#newcode436\nsrc/pkg/exp/ssh/session.go:436: type Waitmsg struct {\nPublic types should have a comment.\n\nhttp://codereview.appspot.com/5452051/diff/6003/src/pkg/exp/ssh/session.go#newcode443\nsrc/pkg/exp/ssh/session.go:443: func (w Waitmsg) Exited() bool { return true }\nditto\n\nhttp://codereview.appspot.com/5452051/diff/6003/src/pkg/exp/ssh/session.go#newcode446\nsrc/pkg/exp/ssh/session.go:446: return w.status\nditto\n\nhttp://codereview.appspot.com/5452051/diff/6003/src/pkg/exp/ssh/session.go#newcode449\nsrc/pkg/exp/ssh/session.go:449: func (w Waitmsg) Signal() string {\nditto\n\nhttp://codereview.appspot.com/5452051/diff/6003/src/pkg/exp/ssh/session.go#newcode453\nsrc/pkg/exp/ssh/session.go:453: func (w Waitmsg) Msg() string {\nMsg and Lang should have comments as they are unique to SSH.",
			"disapproval": false,
			"date": "2011-12-06 20:42:30.544192",
			"approval": false
		},
		{
			"sender": "gustav.paul@gmail.com",
			"recipients": [
				"gustav.paul@gmail.com",
				"dave@cheney.net",
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, agl@golang.org, rsc@golang.org, golang-dev@googlegroups.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-07 08:59:43.277853",
			"approval": false
		},
		{
			"sender": "gustav.paul@gmail.com",
			"recipients": [
				"gustav.paul@gmail.com",
				"dave@cheney.net",
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, agl@golang.org, rsc@golang.org, golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-05 12:25:04.758058",
			"approval": false
		},
		{
			"sender": "gustav.paul@gmail.com",
			"recipients": [
				"gustav.paul@gmail.com",
				"dave@cheney.net",
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, agl@golang.org, rsc@golang.org, golang-dev@googlegroups.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-07 07:26:18.702265",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"gustav.paul@gmail.com",
				"dave@cheney.net",
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi Gustav,\n\nThanks for this CL. It's good to see those TODOs cleaned up.\n\nCheers\n\nDave\n\nbtw. You may need to rebase this CL after 778c06919be68f40cdec21c975837659e39392c0.\n\nhttp://codereview.appspot.com/5452051/diff/5002/src/pkg/exp/ssh/session.go\nFile src/pkg/exp/ssh/session.go (right):\n\nhttp://codereview.appspot.com/5452051/diff/5002/src/pkg/exp/ssh/session.go#newcode276\nsrc/pkg/exp/ssh/session.go:276: for imsg := range s.msg {\nmsg can be reused here because it's inside another scope\n\nfor msg := range m.msg {\n    switch msg := msg.(type) {\n\nhttp://codereview.appspot.com/5452051/diff/5002/src/pkg/exp/ssh/session.go#newcode283\nsrc/pkg/exp/ssh/session.go:283: wm.status = status\nmaybe just assign directly to wm.status\n\nhttp://codereview.appspot.com/5452051/diff/5002/src/pkg/exp/ssh/session.go#newcode285\nsrc/pkg/exp/ssh/session.go:285: wm.signal = string(msg.RequestSpecificData)\nI think there might be more parsing needed here. msg.RequestSpecificData has a few fields that need to be parsed out.\n\nsignal, rest, ok := parseString(msg.RequestSpecificData)\n// skip coreDumped bool\nerrmsg, rest, ok := parseString(rest[1:])\nerrmsg = safeString(errmsg)\nlang, _, ok := parseString(rest)\nlang = safeString(errmsg)\n\nhttp://codereview.appspot.com/5452051/diff/5002/src/pkg/exp/ssh/session.go#newcode436\nsrc/pkg/exp/ssh/session.go:436: *Waitmsg\nWhy does need to be a pointer? There are no methods on Waitmsg that need a *Waitmsg receiver.\n\nhttp://codereview.appspot.com/5452051/diff/5002/src/pkg/exp/ssh/session.go#newcode462\nsrc/pkg/exp/ssh/session.go:462: }\n\" (SIG\"\n\nDoes w.signal need to be validated?",
			"disapproval": false,
			"date": "2011-12-06 10:37:10.836097",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"gustav.paul@gmail.com",
				"dave@cheney.net",
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think there are two conditions here\n\n1. if the channel is closed without receiving exit-status or exit-signal, then the exit code is unknown. \n\n2. if the sequence is exit-signal then close, then the process didn't exit cleanly. Maybe follow what the shell does, turn the exit status into 128 + SIGNAL,\n\nlucky(~) % cat /dev/zero\n^\\Quit\nlucky(~) % echo $?\n131\n\nPossibly wm.status should be seeded with 128 (or some other sentinel).\n\nI'll have to defer to bradfitz or gustavo on this one.\n\nOn 2011/12/06 14:34:10, gpaul wrote:\n> I'm ignoring exit-signal in deciding whether the remote process returned an\n> error or not. If exit-status was 0 (or was never sent back by the server - as\n> allowed for in RFC4254) I assume the command exited successfully and return nil.\n> \n> Is this acceptable?",
			"disapproval": false,
			"date": "2011-12-06 20:35:31.596377",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"gustav.paul@gmail.com",
				"dave@cheney.net",
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-12-07 09:40:07.724460",
			"approval": true
		},
		{
			"sender": "gustav.paul@gmail.com",
			"recipients": [
				"gustav.paul@gmail.com",
				"dave@cheney.net",
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, agl@golang.org, rsc@golang.org, golang-dev@googlegroups.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-06 14:21:52.514173",
			"approval": false
		}
	],
	"owner_email": "gustav.paul@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "gpaul",
	"subject": "code review 5452051: exp/ssh: Have Wait() return an *ExitError",
	"created": "2011-12-05 12:21:13.826587",
	"patchsets": [
		1,
		3,
		4001,
		6001,
		5002,
		9,
		7002,
		6003,
		4007,
		1011,
		1013,
		7003
	],
	"modified": "2011-12-06 14:21:52.514173",
	"closed": false,
	"issue": 5452051
}