{
	"description": "html: handle malformed tags\n\nHandle tags like \"<\", \"<>\", and \"</>\".\nHandle malformed comments more according to spec.\nTreat XML processing instructions as comments.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"nigeltao@golang.org"
	],
	"messages": [
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 11 October 2011 15:23,  <andybalholm@gmail.com> wrote:\n> But the existing implementation doesn't follow the spec closely enough.\n> I suspect that as long as we take shortcuts in the first pass, we will\n> have incorrectly-divided tokens.\n>\n> The extra memory allocations in the single-pass tokenizer are bound to\n> make a performance difference. But at least the temporary buffers\n> shouldn't be a problem now that we have escape analysis, right? It's\n> just the strings that hold the final results.\n\nI haven't followed the escape analysis work closely, but IIUC what it\nmeans currently is that arrays (i.e. fixed-size buffers) can be\nstack-allocated even if they're sliced. Variable-sized buffers still\nrequire a heap allocation. The compilers may or may not eventually be\nable to do better, but I'd rather not rely on it.\n\nI admit that you have a point, but I need some time to think about it.\nUnfortunately, this was shaping up to be a busy week for me even\nwithout this HTML stuff. Let me get back to you.\n",
			"disapproval": false,
			"date": "2011-10-11 05:44:17.792052",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5234043/diff/4001/src/pkg/html/token.go\nFile src/pkg/html/token.go (right):\n\nhttp://codereview.appspot.com/5234043/diff/4001/src/pkg/html/token.go#newcode259\nsrc/pkg/html/token.go:259: z.p1--\nCan you add a test case that is just \"<!>\"? I think that this is valid document, but your code won't catch this because we read two bytes at line 248.\n\nAlso, html5lib seems to also treat \"<!\" as a comment. Please add both of these cases to token_test.go.\n\nhttp://codereview.appspot.com/5234043/diff/4001/src/pkg/html/token.go#newcode276\nsrc/pkg/html/token.go:276: if i < len(s) && 'a' <= c && c <= 'z' {\nPull up the \"i < len(s)\" check:\n----\nif i < len(s) {\n  if 'a' <= c && c <= 'z' {\n    c = 'A' + (c - 'a')\n  }\n  if c != s[i] {\n    z.nextBogusComment()\n    return\n  }\n}\n----\n\nhttp://codereview.appspot.com/5234043/diff/4001/src/pkg/html/token.go#newcode304\nsrc/pkg/html/token.go:304: c = z.readByte()\nYou must check z.err after calling z.readByte.\n\nhttp://codereview.appspot.com/5234043/diff/4001/src/pkg/html/token.go#newcode487\nsrc/pkg/html/token.go:487: // Trim the \"<!--\" from the left and the \"-->\" from the right.\nI think that this comment needs updating.\n\nhttp://codereview.appspot.com/5234043/diff/4001/src/pkg/html/token.go#newcode489\nsrc/pkg/html/token.go:489: if bytes.HasPrefix(z.buf[z.p0:], []byte(\"<!--\")) {\nThe buffer contents are not reset when re-filled, so if the input ends with just \"<!\" and z.p0 == 0 and z.p1 == 2, you could still have z.buf[z.p0:] starting with \"<!--\", and you would then set z.p0 > z.p1, which violates the invariant.\n\nThus, s/[z.p0:]/[z.p0:z.p1]/ and similarly for the slice you pass to HasSuffix a few lines below.\n\nhttp://codereview.appspot.com/5234043/diff/4001/src/pkg/html/token_test.go\nFile src/pkg/html/token_test.go (right):\n\nhttp://codereview.appspot.com/5234043/diff/4001/src/pkg/html/token_test.go#newcode193\nsrc/pkg/html/token_test.go:193: // Malformed tags\nMissing full stop. Similarly below.",
			"disapproval": false,
			"date": "2011-10-10 05:45:25.074482",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, nigeltao@golang.org),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-09 04:22:35.378742",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, nigeltao@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-10 15:02:28.724914",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2011-10-12 16:22:17.338573",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, nigeltao@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-10 15:05:52.566553",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "PTAL.\n\nhttp://codereview.appspot.com/5234043/diff/4001/src/pkg/html/token.go\nFile src/pkg/html/token.go (right):\n\nhttp://codereview.appspot.com/5234043/diff/4001/src/pkg/html/token.go#newcode259\nsrc/pkg/html/token.go:259: z.p1--\nOn 2011/10/10 05:45:25, nigeltao wrote:\n> Can you add a test case that is just \"<!>\"? I think that this is valid document,\n> but your code won't catch this because we read two bytes at line 248.\n> \n> Also, html5lib seems to also treat \"<!\" as a comment. Please add both of these\n> cases to token_test.go.\n\nDone.\n\nhttp://codereview.appspot.com/5234043/diff/4001/src/pkg/html/token.go#newcode276\nsrc/pkg/html/token.go:276: if i < len(s) && 'a' <= c && c <= 'z' {\nOn 2011/10/10 05:45:25, nigeltao wrote:\n> Pull up the \"i < len(s)\" check:\n> ----\n> if i < len(s) {\n>   if 'a' <= c && c <= 'z' {\n>     c = 'A' + (c - 'a')\n>   }\n>   if c != s[i] {\n>     z.nextBogusComment()\n>     return\n>   }\n> }\n> ----\n\nDone.\n\nhttp://codereview.appspot.com/5234043/diff/4001/src/pkg/html/token.go#newcode304\nsrc/pkg/html/token.go:304: c = z.readByte()\nOn 2011/10/10 05:45:25, nigeltao wrote:\n> You must check z.err after calling z.readByte.\n\nDone.\n\nhttp://codereview.appspot.com/5234043/diff/4001/src/pkg/html/token.go#newcode487\nsrc/pkg/html/token.go:487: // Trim the \"<!--\" from the left and the \"-->\" from the right.\nOn 2011/10/10 05:45:25, nigeltao wrote:\n> I think that this comment needs updating.\n\nDone.\n\nhttp://codereview.appspot.com/5234043/diff/4001/src/pkg/html/token_test.go\nFile src/pkg/html/token_test.go (right):\n\nhttp://codereview.appspot.com/5234043/diff/4001/src/pkg/html/token_test.go#newcode193\nsrc/pkg/html/token_test.go:193: // Malformed tags\nOn 2011/10/10 05:45:25, nigeltao wrote:\n> Missing full stop. Similarly below.\nNot full sentences, but done anyway.",
			"disapproval": false,
			"date": "2011-10-10 15:06:10.715396",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "The more I think about it, the more I'm convinced that a single-pass tokenizer (somewhat along the lines of my original CL) is the only practical way to achieve consistent standards compliance.\n\nWith the two-pass tokenizer that we have now, the two passes don't always agree on how long a token is. For example, the tokenizer goes into an infinite loop on <a x=can't><a x=won't> because the first pass only sees one token (the >< seems to be inside a single-quoted string), but the second pass (parsing the attributes) gets stuck after \"can't\" because that's the end of the tag, but it keeps trying because the first pass says there was more.\n\nWe could keep making the first pass smarter until it does everything that the second pass does except for allocating memory, but maintaining two copies of the same algorithm would be a real pain. And when people do use the attribute values, they would be paying a performance penalty for parsing them twice.\n\nAlso, if we decide to handle the special text modes (plaintext, raw text, RCDATA, script) in the tokenizer, it will need to read at least the tag name for every start tag it encounters in order to know whether it needs to switch into a special text mode. (Last time we talked about this, I was arguing against handling them in the tokenizer. But it would have the advantage that someone could strip the HTML markup off a page and produce a plain text file without needing to run the parser. So maybe it would be the way to go.)",
			"disapproval": false,
			"date": "2011-10-10 15:29:01.766696",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 11 October 2011 02:29,  <andybalholm@gmail.com> wrote:\n> The more I think about it, the more I'm convinced that a single-pass\n> tokenizer (somewhat along the lines of my original CL) is the only\n> practical way to achieve consistent standards compliance.\n\nI agree that the tokenizer (and not the parser) should be responsible\nfor detecting <script>. However, I'm not sure about one-pass vs\ntwo-pass. When we first designed the html package, we made deliberate\ndecisions about various trade-offs.\n\nYou may be right, but I am not convinced yet.\n",
			"disapproval": false,
			"date": "2011-10-11 03:07:58.725323",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/10/11 03:07:58, nigeltao wrote:\n>  However, I'm not sure about one-pass vs\n> two-pass. When we first designed the html package, we made deliberate\n> decisions about various trade-offs.\n> \n> You may be right, but I am not convinced yet.\n\nNow I've looked back over the initial discussion of the tokenizer on golang-dev. I see that there was quite a bit of discussion about performance.\n\nIt looks like the first implementation was a rune-oriented state machine\u2014a direct translation of the spec like html5lib. I played around with something like that for a while, but it was huge, and its performance would likely be pretty bad.\n\nThe single-pass tokenization in my first changelist was basically a transformation of the spec from a state-machine formulation to a procedural one. The idea the package documentation mentions of \"using the program counter to represent state\" makes a vast improvement.\n\nBut the existing implementation doesn't follow the spec closely enough. I suspect that as long as we take shortcuts in the first pass, we will have incorrectly-divided tokens.\n\nThe extra memory allocations in the single-pass tokenizer are bound to make a performance difference. But at least the temporary buffers shouldn't be a problem now that we have escape analysis, right? It's just the strings that hold the final results.",
			"disapproval": false,
			"date": "2011-10-11 04:23:32.775549",
			"approval": false
		}
	],
	"owner_email": "andybalholm@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "andybalholm",
	"subject": "code review 5234043: html: handle malformed tags",
	"created": "2011-10-09 04:21:26.284877",
	"patchsets": [
		1,
		2001,
		4001,
		4002,
		5009
	],
	"modified": "2011-10-12 16:22:18.801235",
	"closed": true,
	"issue": 5234043
}