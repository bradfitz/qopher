{
	"description": "exp/types: record a mapping from struct field names to indices.\n\nThis enables fast lookup of fields by name for checking selector\nexpressions.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"gri@golang.org"
	],
	"messages": [
		{
			"sender": "axwalk@gmail.com",
			"recipients": [
				"axwalk@gmail.com",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6354096/diff/4001/src/pkg/exp/types/types.go\nFile src/pkg/exp/types/types.go (right):\n\nhttp://codereview.appspot.com/6354096/diff/4001/src/pkg/exp/types/types.go#newcode57\nsrc/pkg/exp/types/types.go:57: FieldIndices map[string]uint64 // fast field lookup (name -> index)\nOn 2012/07/12 21:52:54, gri wrote:\n> The code to create the map already is present in two places (check and\n> importer). At the very least it would have to be factored. The place to create\n> the map (if we want one in the first place) is when creating the struct. Also,\n> if we do it that way, the use of the index map can be hidden completely via the\n> accessor method suggested in the first place. Thus, the index map becomes a\n> (hidden) optimization for the accessor if needed (and can be introduced lazily,\n> if there are large structs only). Thus, there is no need to expose the\n> implementation of this optimization to all sites that generate a struct.\n> \n> Please refrain from introducing such optimization until we better understand the\n> need for them. As it is, there is not even a use case for the field access.\n>\n> Instead, I propose a method on Struct that takes a field name and returns the\n> corresponding object (and perhaps an index). Also, don't introduce such a\n> function in the vacuum, but in the context where the function is actually used\n> so we understand what the best signature is.\n> \n> To summarize: Let's keep the data structures as simple as possible. This map is\n> providing redundant information for the sole purpose of faster lookup - it may\n> not be needed. Having to maintain it in multiple places is costly and error\n> prone.\n\nFair enough. I'll abandon this for now, and add the accessor method when I've added in SelectorExpr handling in exp/types. There is a use case, it's just not in exp/types; it's in llgo. I'm in the process of moving some AST->Type resolution code from llgo into exp/types, and went about it in the wrong order in this case.\n\nI think I had done some performance testing which indicated it was useful, but I don't recall specifics. At any rate, it'll be trivial to optimise under the covers.\n\nThanks for your comments.",
			"disapproval": false,
			"date": "2012-07-13 00:55:49.717600",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"axwalk@gmail.com",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6354096/diff/4001/src/pkg/exp/types/types.go\nFile src/pkg/exp/types/types.go (right):\n\nhttp://codereview.appspot.com/6354096/diff/4001/src/pkg/exp/types/types.go#newcode57\nsrc/pkg/exp/types/types.go:57: FieldIndices map[string]uint64 // fast field lookup (name -> index)\nI am against this CL. There are several issues with this:\n\nIt's trivial to provide a single Struct method to lookup a field by name (via sequential search through the FieldsList. This is very likely going to be just as fast if not faster in most cases because most Structs have a very small number of fields. Sequential search through a dozen entries in a list is extremely fast. This makes the FieldIndices map not necessary.\n\n(It is true that a pathological case can be constructed - say a struct with 100 entries where the last field is accessed over and over again. Let us address this once we fully understand all data structures.)\n\nThe code to create the map already is present in two places (check and importer). At the very least it would have to be factored. The place to create the map (if we want one in the first place) is when creating the struct. Also, if we do it that way, the use of the index map can be hidden completely via the accessor method suggested in the first place. Thus, the index map becomes a (hidden) optimization for the accessor if needed (and can be introduced lazily, if there are large structs only). Thus, there is no need to expose the implementation of this optimization to all sites that generate a struct.\n\nPlease refrain from introducing such optimization until we better understand the need for them. As it is, there is not even a use case for the field access.\n\nInstead, I propose a method on Struct that takes a field name and returns the corresponding object (and perhaps an index). Also, don't introduce such a function in the vacuum, but in the context where the function is actually used so we understand what the best signature is.\n\nTo summarize: Let's keep the data structures as simple as possible. This map is providing redundant information for the sole purpose of faster lookup - it may not be needed. Having to maintain it in multiple places is costly and error prone.",
			"disapproval": false,
			"date": "2012-07-12 21:52:53.989250",
			"approval": false
		},
		{
			"sender": "axwalk@gmail.com",
			"recipients": [
				"axwalk@gmail.com",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: gri@golang.org),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-07-12 14:55:30.380110",
			"approval": false
		},
		{
			"sender": "axwalk@gmail.com",
			"recipients": [
				"axwalk@gmail.com",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-07-13 14:37:29.893300",
			"approval": false
		}
	],
	"owner_email": "axwalk@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "axw",
	"subject": "code review 6354096: exp/types: record a mapping from struct field names to ...",
	"created": "2012-07-12 14:45:01.651370",
	"patchsets": [
		1,
		2001,
		4001
	],
	"modified": "2012-07-13 14:37:33.100020",
	"closed": true,
	"issue": 6354096
}