{
	"description": "time: add Timer.Reset\n\nFixes issue 4412.",
	"cc": [
		"adg@golang.org",
		"rsc@golang.org",
		"rogpeppe@gmail.com",
		"andrewdg@gmail.com",
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/7086050/diff/3/src/pkg/time/sleep.go\nFile src/pkg/time/sleep.go (right):\n\nhttps://codereview.appspot.com/7086050/diff/3/src/pkg/time/sleep.go#newcode38\nsrc/pkg/time/sleep.go:38: // expired or stopped.\nOn 2013/01/15 06:25:17, rsc wrote:\n> s/stopped/been stopped/\n\nDone.\n\nhttps://codereview.appspot.com/7086050/diff/3/src/pkg/time/sleep.go#newcode61\nsrc/pkg/time/sleep.go:61: // Reset resets the Timer to send the current time on its channel after at least\nOn 2013/01/15 06:25:17, rsc wrote:\n> // Reset changes the timer to expire after duration d.\n> // It returns true if the timer had been active,\n> // false if the timer had expired or been stopped.\n\nDone.",
			"disapproval": false,
			"date": "2013-01-15 09:02:59.738160",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-01-13 23:10:28.393320",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"adg@golang.org",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7086050/diff/2002/src/pkg/time/sleep.go\nFile src/pkg/time/sleep.go (right):\n\nhttps://codereview.appspot.com/7086050/diff/2002/src/pkg/time/sleep.go#newcode66\nsrc/pkg/time/sleep.go:66: t.r.when = nano() + int64(d)\nto gain a smidgen of accuracy, i wonder if it might be better to calculate this value before stopping the timer.",
			"disapproval": false,
			"date": "2013-01-15 10:42:33.622730",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7086050/diff/2002/src/pkg/time/sleep.go\nFile src/pkg/time/sleep.go (right):\n\nhttps://codereview.appspot.com/7086050/diff/2002/src/pkg/time/sleep.go#newcode61\nsrc/pkg/time/sleep.go:61: // Reset resets the Timer to fire after d from now. It returns true if Reset\nReset resets the Timer to send the current time on its channel after at least duration d. It returns true if the call reset the timer, and false if the timer has already expired or stopped.\n\n(Re-using the wording from NewTimer and Stop)\n\nhttps://codereview.appspot.com/7086050/diff/2002/src/pkg/time/sleep.go#newcode64\nsrc/pkg/time/sleep.go:64: func (t *Timer) Reset(d Duration) bool {\ns/bool/(ok bool)/\n\nhttps://codereview.appspot.com/7086050/diff/2002/src/pkg/time/sleep.go#newcode65\nsrc/pkg/time/sleep.go:65: disarmed := stopTimer(&t.r)\nok = stopTimer(&t.r)\n\nhttps://codereview.appspot.com/7086050/diff/2002/src/pkg/time/sleep.go#newcode68\nsrc/pkg/time/sleep.go:68: return disarmed\nreturn\n\nhttps://codereview.appspot.com/7086050/diff/2002/src/pkg/time/sleep_test.go\nFile src/pkg/time/sleep_test.go (right):\n\nhttps://codereview.appspot.com/7086050/diff/2002/src/pkg/time/sleep_test.go#newcode253\nsrc/pkg/time/sleep_test.go:253: t.Fatalf(\"resetting unfired time returned false\")\ns/time/timer/\n\nhttps://codereview.appspot.com/7086050/diff/2002/src/pkg/time/sleep_test.go#newcode258\nsrc/pkg/time/sleep_test.go:258: t.Fatalf(\"failed to reset timer, it fired\")\n\"timer fired early\"\n\nhttps://codereview.appspot.com/7086050/diff/2002/src/pkg/time/sleep_test.go#newcode269\nsrc/pkg/time/sleep_test.go:269: t.Fatalf(\"resetting already fired timer returned true\")\ns/already fired/expired/",
			"disapproval": false,
			"date": "2013-01-14 00:48:00.896490",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"adg@golang.org",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"andrewdg@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7086050/diff/10004/src/pkg/time/sleep.go\nFile src/pkg/time/sleep.go (right):\n\nhttps://codereview.appspot.com/7086050/diff/10004/src/pkg/time/sleep.go#newcode41\nsrc/pkg/time/sleep.go:41: func (t *Timer) Stop() (ok bool) {\nNot your problem, but I'm wondering why this result parameter is named \"ok\".  It's never referenced in the docs, and \"ok\" is a bit of a weird name here.  I'd just omit the result name here, and in Reset below.\n\nRuss?",
			"disapproval": false,
			"date": "2013-01-15 21:09:01.706690",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 16 January 2013 08:09, <bradfitz@golang.org> wrote:\r\n\r\n> Not your problem, but I'm wondering why this result parameter is named\r\n> \"ok\".  It's never referenced in the docs, and \"ok\" is a bit of a weird\r\n> name here.  I'd just omit the result name here, and in Reset below.\r\n>\r\n\r\nI suggested he make it (ok bool) to be the same as Stop. \"ok\" doesn't seem\r\nthat incongruous to me, but I don't care.\r\n\r\nSorry, Volker, for the back and forth here.\r\n",
			"disapproval": false,
			"date": "2013-01-15 21:39:13.911380",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\r\n\r\nCalculation of when happens now before stopping the timer.\r\n\r\n\r\nOn Tue, Jan 15, 2013 at 11:45 AM, <andrewdg@gmail.com> wrote:\r\n\r\n>\r\n>\r\n> On Tuesday, 15 January 2013 21:42:33 UTC+11, rog wrote:\r\n>>\r\n>>\r\n>> https://codereview.appspot.**com/7086050/diff/2002/src/pkg/**\r\n>> time/sleep.go<https://codereview.appspot.com/7086050/diff/2002/src/pkg/time/sleep.go>\r\n>> File src/pkg/time/sleep.go (right):\r\n>>\r\n>> https://codereview.appspot.**com/7086050/diff/2002/src/pkg/**time/sleep.go#newcode66\r\n>>\r\n>> src/pkg/time/sleep.go:66<https://codereview.appspot.com/7086050/diff/2002/src/pkg/time/sleep.go#newcode66src/pkg/time/sleep.go:66>:\r\n>> t.r.when = nano() + int64(d)\r\n>> to gain a smidgen of accuracy, i wonder if it might be better to\r\n>> calculate this value before stopping the timer.\r\n>>\r\n>>\r\n> That's probably a good idea, as stopTimer takes a lock and if there's a\r\n> lot of timer activity going on the contention could cause a delay. The\r\n> significance of the delay is obviously depends on the application.\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-15 11:20:33.403870",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/7086050/diff/2002/src/pkg/time/sleep.go\nFile src/pkg/time/sleep.go (right):\n\nhttps://codereview.appspot.com/7086050/diff/2002/src/pkg/time/sleep.go#newcode61\nsrc/pkg/time/sleep.go:61: // Reset resets the Timer to fire after d from now. It returns true if Reset\nOn 2013/01/14 00:48:01, adg wrote:\n> Reset resets the Timer to send the current time on its channel after at least\n> duration d. It returns true if the call reset the timer, and false if the timer\n> has already expired or stopped.\n> \n> (Re-using the wording from NewTimer and Stop)\n\nDone.\n\nhttps://codereview.appspot.com/7086050/diff/2002/src/pkg/time/sleep.go#newcode64\nsrc/pkg/time/sleep.go:64: func (t *Timer) Reset(d Duration) bool {\nOn 2013/01/14 00:48:01, adg wrote:\n> s/bool/(ok bool)/\n\nDone.\n\nhttps://codereview.appspot.com/7086050/diff/2002/src/pkg/time/sleep.go#newcode65\nsrc/pkg/time/sleep.go:65: disarmed := stopTimer(&t.r)\nOn 2013/01/14 00:48:01, adg wrote:\n> ok = stopTimer(&t.r)\n\nDone.\n\nhttps://codereview.appspot.com/7086050/diff/2002/src/pkg/time/sleep.go#newcode68\nsrc/pkg/time/sleep.go:68: return disarmed\nOn 2013/01/14 00:48:01, adg wrote:\n> return\n\nDone.\n\nhttps://codereview.appspot.com/7086050/diff/2002/src/pkg/time/sleep_test.go\nFile src/pkg/time/sleep_test.go (right):\n\nhttps://codereview.appspot.com/7086050/diff/2002/src/pkg/time/sleep_test.go#newcode253\nsrc/pkg/time/sleep_test.go:253: t.Fatalf(\"resetting unfired time returned false\")\nOn 2013/01/14 00:48:01, adg wrote:\n> s/time/timer/\n\nDone.\n\nhttps://codereview.appspot.com/7086050/diff/2002/src/pkg/time/sleep_test.go#newcode258\nsrc/pkg/time/sleep_test.go:258: t.Fatalf(\"failed to reset timer, it fired\")\nOn 2013/01/14 00:48:01, adg wrote:\n> \"timer fired early\"\n\nDone.\n\nhttps://codereview.appspot.com/7086050/diff/2002/src/pkg/time/sleep_test.go#newcode269\nsrc/pkg/time/sleep_test.go:269: t.Fatalf(\"resetting already fired timer returned true\")\nOn 2013/01/14 00:48:01, adg wrote:\n> s/already fired/expired/\n\nDone.",
			"disapproval": false,
			"date": "2013-01-14 08:28:12.382170",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7086050/diff/3/src/pkg/time/sleep.go\nFile src/pkg/time/sleep.go (right):\n\nhttps://codereview.appspot.com/7086050/diff/3/src/pkg/time/sleep.go#newcode38\nsrc/pkg/time/sleep.go:38: // expired or stopped.\ns/stopped/been stopped/\n\nhttps://codereview.appspot.com/7086050/diff/3/src/pkg/time/sleep.go#newcode61\nsrc/pkg/time/sleep.go:61: // Reset resets the Timer to send the current time on its channel after at least\n// Reset changes the timer to expire after duration d.\n// It returns true if the timer had been active,\n// false if the timer had expired or been stopped.",
			"disapproval": false,
			"date": "2013-01-15 06:25:17.644060",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "dropping the ok is fine\r\n",
			"disapproval": false,
			"date": "2013-01-15 22:46:57.273580",
			"approval": false
		},
		{
			"sender": "andrewdg@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\r\n\r\nOn Tuesday, 15 January 2013 21:42:33 UTC+11, rog wrote:\r\n>\r\n>\r\n> https://codereview.appspot.com/7086050/diff/2002/src/pkg/time/sleep.go \r\n> File src/pkg/time/sleep.go (right): \r\n>\r\n> https://codereview.appspot.com/7086050/diff/2002/src/pkg/time/sleep.go#newcode66 \r\n>\r\n> src/pkg/time/sleep.go:66<https://codereview.appspot.com/7086050/diff/2002/src/pkg/time/sleep.go#newcode66src/pkg/time/sleep.go:66>: \r\n> t.r.when = nano() + int64(d) \r\n> to gain a smidgen of accuracy, i wonder if it might be better to \r\n> calculate this value before stopping the timer. \r\n>\r\n>\r\nThat's probably a good idea, as stopTimer takes a lock and if there's a lot \r\nof timer activity going on the contention could cause a delay. The \r\nsignificance of the delay is obviously depends on the application. \r\n",
			"disapproval": false,
			"date": "2013-01-15 10:45:23.541540",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jan 15, 2013 at 1:38 PM, Andrew Gerrand <adg@golang.org> wrote:\r\n\r\n>\r\n> On 16 January 2013 08:09, <bradfitz@golang.org> wrote:\r\n>\r\n>> Not your problem, but I'm wondering why this result parameter is named\r\n>> \"ok\".  It's never referenced in the docs, and \"ok\" is a bit of a weird\r\n>> name here.  I'd just omit the result name here, and in Reset below.\r\n>>\r\n>\r\n> I suggested he make it (ok bool) to be the same as Stop. \"ok\" doesn't seem\r\n> that incongruous to me, but I don't care.\r\n>\r\n> Sorry, Volker, for the back and forth here.\r\n>\r\n\r\nOkay, let's drop it in both places then.\r\n",
			"disapproval": false,
			"date": "2013-01-15 23:52:07.135510",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Dropping \"ok\" from Reset only or from both, Reset and Stop?\r\n\r\n\r\nOn Tue, Jan 15, 2013 at 11:46 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> dropping the ok is fine\r\n>\r\n\r\n\r\n\r\n-- \r\nDr. Volker Dobler\r\n",
			"disapproval": false,
			"date": "2013-01-16 00:16:41.397100",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"adg@golang.org",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"andrewdg@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-01-17 03:41:37.281030",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"adg@golang.org",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"andrewdg@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=ee7deff1bbd7 ***\n\ntime: add Timer.Reset\n\nFixes issue 4412.\n\nR=adg, rsc, rogpeppe, andrewdg, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/7086050\n\nCommitter: Andrew Gerrand <adg@golang.org>",
			"disapproval": false,
			"date": "2013-01-17 03:42:02.990240",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"adg@golang.org",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"andrewdg@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nDropped ok on both places.",
			"disapproval": false,
			"date": "2013-01-16 00:18:58.855240",
			"approval": false
		}
	],
	"owner_email": "dr.volker.dobler@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "volker.dobler",
	"subject": "code review 7086050: time: add Timer.Reset",
	"created": "2013-01-13 20:44:46.855040",
	"patchsets": [
		1,
		2001,
		2002,
		3,
		4,
		10004,
		12001,
		15001
	],
	"modified": "2013-01-16 00:18:58.855240",
	"closed": false,
	"issue": 7086050
}