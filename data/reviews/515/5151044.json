{
	"description": "fmt: replace channel cache with slice.\nSimpler concept, and it turns a queue into a stack.\nSpeeds up benchmarks noticeably.\n\nBefore:\nfmt_test.BenchmarkSprintfEmpty\t10000000\t       282 ns/op\nfmt_test.BenchmarkSprintfString\t 2000000\t       910 ns/op\nfmt_test.BenchmarkSprintfInt\t 5000000\t       723 ns/op\nfmt_test.BenchmarkSprintfIntInt\t 1000000\t      1071 ns/op\nfmt_test.BenchmarkSprintfPrefixedInt\t 1000000\t      1108 ns/op\nfmt_test.BenchmarkScanInts\t    1000\t   2239510 ns/op\nfmt_test.BenchmarkScanRecursiveInt\t    1000\t   2365432 ns/op\n\nAfter:\nfmt_test.BenchmarkSprintfEmpty\t10000000\t       232 ns/op\nfmt_test.BenchmarkSprintfString\t 2000000\t       837 ns/op\nfmt_test.BenchmarkSprintfInt\t 5000000\t       590 ns/op\nfmt_test.BenchmarkSprintfIntInt\t 2000000\t       910 ns/op\nfmt_test.BenchmarkSprintfPrefixedInt\t 2000000\t       996 ns/op\nfmt_test.BenchmarkScanInts\t    1000\t   2210715 ns/op\nfmt_test.BenchmarkScanRecursiveInt\t    1000\t   2367800 ns/op",
	"cc": [
		"rsc@golang.org",
		"r@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"dvyukov@google.com"
	],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=fef6c17f1d3f ***\n\nfmt: replace channel cache with slice.\nSimpler concept, and it turns a queue into a stack.\nSpeeds up benchmarks noticeably.\n\nBefore:\nfmt_test.BenchmarkSprintfEmpty\t10000000\t       282 ns/op\nfmt_test.BenchmarkSprintfString\t 2000000\t       910 ns/op\nfmt_test.BenchmarkSprintfInt\t 5000000\t       723 ns/op\nfmt_test.BenchmarkSprintfIntInt\t 1000000\t      1071 ns/op\nfmt_test.BenchmarkSprintfPrefixedInt\t 1000000\t      1108 ns/op\nfmt_test.BenchmarkScanInts\t    1000\t   2239510 ns/op\nfmt_test.BenchmarkScanRecursiveInt\t    1000\t   2365432 ns/op\n\nAfter:\nfmt_test.BenchmarkSprintfEmpty\t10000000\t       232 ns/op\nfmt_test.BenchmarkSprintfString\t 2000000\t       837 ns/op\nfmt_test.BenchmarkSprintfInt\t 5000000\t       590 ns/op\nfmt_test.BenchmarkSprintfIntInt\t 2000000\t       910 ns/op\nfmt_test.BenchmarkSprintfPrefixedInt\t 2000000\t       996 ns/op\nfmt_test.BenchmarkScanInts\t    1000\t   2210715 ns/op\nfmt_test.BenchmarkScanRecursiveInt\t    1000\t   2367800 ns/op\n\nR=rsc, r\nCC=golang-dev\nhttp://codereview.appspot.com/5151044",
			"disapproval": false,
			"date": "2011-09-29 18:23:12.316822",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-09-29 18:17:09.990466",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> Simpler concept, and it turns a LIFO into a FIFO.\n\nturns a FIFO into a LIFO\n",
			"disapproval": false,
			"date": "2011-09-29 18:17:58.802194",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, r@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-29 18:18:56.591777",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Sep 29, 2011 at 11:17, Russ Cox <rsc@golang.org> wrote:\n>> Simpler concept, and it turns a LIFO into a FIFO.\n>\n> turns a FIFO into a LIFO\n\nnever mind.\n",
			"disapproval": false,
			"date": "2011-09-29 18:18:28.057921",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Sep 29, 2011, at 11:17 AM, Russ Cox wrote:\n\n>> Simpler concept, and it turns a LIFO into a FIFO.\n> \n> turns a FIFO into a LIFO\n\nha ha. anyway it's better. i'll fix the CL.\n\n",
			"disapproval": false,
			"date": "2011-09-29 18:18:30.872685",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Sep 29, 2011, at 12:02 PM, Dmitry Vyukov wrote:\n\n> On Thu, Sep 29, 2011 at 10:50 PM, Rob 'Commander' Pike <r@google.com> wrote:\n> Is there an intrinsic reason for this?  Sync.Mutex shouldn't conflict more than a chan lock, should it?\n> \n> \n> Chans use runtime.Lock that currently uses a combination of active spinning, passive spinning and blocking (at least on Linux).\n> While sync.Mutex on the first sign of contention reschedules the goroutine, which is more costly than a bit of spinning.\n\nA likelier issue is that the new code has made it a LIFO, which will cause more cache traffic.\n\nI still prefer the new code. Anyway, if your program is CPU-bound due to concurrent Sprintfs, you have other problems.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-09-29 19:47:20.065091",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Sep 29, 2011 at 11:18, Russ Cox <rsc@golang.org> wrote:\n>>> Simpler concept, and it turns a LIFO into a FIFO.\n>>\n>> turns a FIFO into a LIFO\n>\n> never mind.\n\non second thought i think i'm right.\nbut maybe say queue and stack.\n",
			"disapproval": false,
			"date": "2011-09-29 18:19:03.377875",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Sep 29, 2011 at 10:50 PM, Rob 'Commander' Pike <r@google.com> wrote:\n\n> Is there an intrinsic reason for this?  Sync.Mutex shouldn't conflict more\n> than a chan lock, should it?\n>\n>\nChans use runtime.Lock that currently uses a combination of active spinning,\npassive spinning and blocking (at least on Linux).\nWhile sync.Mutex on the first sign of contention reschedules the goroutine,\nwhich is more costly than a bit of spinning.\n",
			"disapproval": false,
			"date": "2011-09-29 19:02:54.070518",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"r@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-09-29 18:20:00.887810",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"r@golang.org",
				"dvyukov@google.com",
				"rsc@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Just in case, it worsens parallel performance.\n\n// with chan cache\nBenchmarkSprintfConcurrent\t 5000000\t       890 ns/op\nBenchmarkSprintfConcurrent-2\t 5000000\t       845 ns/op\nBenchmarkSprintfConcurrent-4\t 5000000\t       585 ns/op\nBenchmarkSprintfConcurrent-8\t 5000000\t       708 ns/op\nBenchmarkSprintfConcurrent-16\t 5000000\t       924 ns/op\n\n// with mutex cache\nBenchmarkSprintfConcurrent\t 5000000\t       823 ns/op\nBenchmarkSprintfConcurrent-2\t 5000000\t       769 ns/op\nBenchmarkSprintfConcurrent-4\t 5000000\t       734 ns/op\nBenchmarkSprintfConcurrent-8\t 5000000\t       835 ns/op\nBenchmarkSprintfConcurrent-16\t 5000000\t      1176 ns/op\n\nfunc BenchmarkSprintfConcurrent(b *testing.B) {\n\tconst CallsPerSched = 1000\n\tprocs := runtime.GOMAXPROCS(-1)\n\tN := int32(b.N / CallsPerSched)\n\tvar wg sync.WaitGroup\n\twg.Add(procs)\n\tworld := \"world\"\n\tfor p := 0; p < procs; p++ {\n\t\tgo func() {\n\t\t\tfor atomic.AddInt32(&N, -1) >= 0 {\n\t\t\t\tfor g := 0; g < CallsPerSched; g++ {\n\t\t\t\t\tSprintf(\"Hello, %s!\\n\", world)\n\t\t\t\t}\n\t\t\t\truntime.Gosched()\n\t\t\t}\n\t\t\twg.Done()\n\t\t}()\n\t}\n\twg.Wait()\n}\n\nWhen/if I finally commit the sync.Cache component:\nhttp://codereview.appspot.com/4928043/diff/7001/src/pkg/sync/cache.go\nit will be a good replacement for ad-hoc cache, providing both better performance and scalability.",
			"disapproval": false,
			"date": "2011-09-29 18:44:00.690966",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Is there an intrinsic reason for this?  Sync.Mutex shouldn't conflict more than a chan lock, should it?\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-09-29 18:50:33.299073",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5151044: fmt: replace channel cache with slice.",
	"created": "2011-09-29 18:17:06.673570",
	"patchsets": [
		1,
		5002,
		3
	],
	"modified": "2011-09-29 18:44:00.761103",
	"closed": true,
	"issue": 5151044
}