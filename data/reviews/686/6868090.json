{
	"description": "go.net/idna: new package.",
	"cc": [
		"rsc@golang.org",
		"dr.volker.dobler@gmail.com",
		"remyoudompheng@gmail.com",
		"mikioh.mikioh@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dr.volker.dobler@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/12/09 23:25:22, nigeltao wrote:\n> https://codereview.appspot.com/6868090/diff/5001/punycode/punycode.go\n> File punycode/punycode.go (right):\n> \n> https://codereview.appspot.com/6868090/diff/5001/punycode/punycode.go#newcode82\n> punycode/punycode.go:82: func Encode(s string) (string, error) {\n> On 2012/12/09 12:52:45, remyoudompheng wrote:\n> > can the encoding fail?\n> \n> Currently, no, but I like the symmetry with Decode.\n\nI kind of agree, but we already have such an asymmetry in most similar encoding packages:\n* see strconv.Quote vs strconv.Unquote\n* encoding/base64.Encoding.Encode vs Decode\n* encoding/hex.Encode vs Decode\nso I would be inclined to do the same for punycode.",
			"disapproval": false,
			"date": "2012-12-09 23:38:09.282480",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am neither and punycode nor an IDN expert, but some remarks might\r\nbe in order.\r\n\r\nTo add the non-ASCII entries in the public suffix a simple \"punycode and\r\nprepend xn--\" on each label might be good enough (if the publicsuffix.org\r\nlist is already in NFC form which seems reasonable and can be checked).\r\n\r\nA cookiejar needs to compare the domain attribute of the cookie to the\r\ncanonicalized request host name. Currently U-labels are not supported\r\n(net.LookupHost fails for www.m\u00fcller.de <http://www.xn--mller-kva.de>), so\r\nthe host name of any URL\r\nconsists anyway of ASCII labels only. If this is not supposed to change,\r\nthen from the point of a cookiejar, only the punicode algorithm is needed\r\nto handle IDNs.\r\n\r\nNevertheless: Proper IDN handling would be nice as part of the standard\r\npackages and punycode seems to have no application outside the IDNS.\r\n\r\n\r\n\r\nOn Mon, Dec 10, 2012 at 7:48 AM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> Does punycode get used for anything but idna? (I hope you say no or I\r\n> will lose faith in the internet.)\r\n> Assuming no, then there's probably no good reason to have a punycode\r\n> package other than\r\n> implementing idna (which is the goal here I assume), so let's just\r\n> have an idna package\r\n> with a punycode implementation inside but not exported.\r\n>\r\n> Russ\r\n>\r\n\r\n\r\n\r\n-- \r\nDr. Volker Dobler\r\n",
			"disapproval": false,
			"date": "2012-12-10 11:48:10.193150",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Does punycode get used for anything but idna? (I hope you say no or I\r\nwill lose faith in the internet.)\r\nAssuming no, then there's probably no good reason to have a punycode\r\npackage other than\r\nimplementing idna (which is the goal here I assume), so let's just\r\nhave an idna package\r\nwith a punycode implementation inside but not exported.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-12-10 06:48:26.406070",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, dr.volker.dobler@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.net",
			"disapproval": false,
			"date": "2012-12-09 11:50:35.049280",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Dec 10, 2012 at 4:52 PM, Nigel Tao <nigeltao@golang.org> wrote:\r\n> so I think that, technically, the answer is no.\r\n\r\nTo clarify, I think that the answer is \"there are no possible invalid\r\ninputs for punycode.Encode\".\r\n\r\n\r\n> as used for IDNA labels (RFC 3490)\r\n\r\nNote to self: RFC 3490 is IDNA 2003, RFC 5894 is IDNA 2008. The\r\ndifference between them is a FAQ: http://www.unicode.org/faq/idn.html\r\n",
			"disapproval": false,
			"date": "2012-12-10 05:59:49.147620",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dr.volker.dobler@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6868090/diff/5001/punycode/punycode.go\nFile punycode/punycode.go (right):\n\nhttps://codereview.appspot.com/6868090/diff/5001/punycode/punycode.go#newcode82\npunycode/punycode.go:82: func Encode(s string) (string, error) {\ncan the encoding fail?",
			"disapproval": false,
			"date": "2012-12-09 12:52:45.758360",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dr.volker.dobler@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6868090/diff/5001/punycode/punycode.go\nFile punycode/punycode.go (right):\n\nhttps://codereview.appspot.com/6868090/diff/5001/punycode/punycode.go#newcode82\npunycode/punycode.go:82: func Encode(s string) (string, error) {\nOn 2012/12/09 12:52:45, remyoudompheng wrote:\n> can the encoding fail?\n\nCurrently, no, but I like the symmetry with Decode.",
			"disapproval": false,
			"date": "2012-12-09 23:25:22.432470",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Dec 10, 2012 at 2:38 PM, Russ Cox <rsc@golang.org> wrote:\r\n> Is it true that there are NO POSSIBLE invalid inputs for punycode.Encode?\r\n\r\nRFC 3492 says\r\n\r\n   Punycode is an instance of a more general algorithm called\r\n   Bootstring, which allows strings composed from a small set of \"basic\"\r\n   code points to uniquely represent any string of code points drawn\r\n   from a larger set.  Punycode is Bootstring with particular parameter\r\n   values appropriate for IDNA.\r\n\r\nand\r\n\r\n   Bootstring has been designed to have the following features:\r\n\r\n   *  Completeness:  Every extended string (sequence of arbitrary code\r\n      points) can be represented by a basic string (sequence of basic\r\n      code points).  Restrictions on what strings are allowed, and on\r\n      length, can be imposed by higher layers.\r\n\r\nso I think that, technically, the answer is no. However, that is about\r\nPunycode per se: the Punycode encoding of \"\\x00\" is \"\\x00\". Punycode\r\nas used for IDNA labels (RFC 3490) may impose additional restrictions\r\nsuch as [0-9A-Za-z-]+ or length limits, but I think that that's a\r\nseparate package: idna.ToASCII and idna.ToUnicode.\r\n",
			"disapproval": false,
			"date": "2012-12-10 05:52:21.548960",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Is it true that there are NO POSSIBLE invalid inputs for punycode.Encode?\r\nWe already screwed up xml.Escape twice (two different errors we'd like\r\nto return).\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-12-10 03:38:48.655200",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Dec 10, 2012 at 5:48 PM, Russ Cox <rsc@golang.org> wrote:\r\n> let's just have an idna package\r\n> with a punycode implementation inside but not exported.\r\n\r\nPackage idna it is. I haven't digested all the Unicode corner cases\r\nyet (e.g. what is the correct way to handle U+200D ZERO WIDTH JOINER),\r\nso I've left the fine details as a TODO, but there should be enough\r\nthere for package publicsuffix. PTAL at\r\nhttps://codereview.appspot.com/6868090/\r\n",
			"disapproval": false,
			"date": "2012-12-10 23:04:08.095620",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dr.volker.dobler@gmail.com",
				"remyoudompheng@gmail.com",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-12-12 06:26:18.826760",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dr.volker.dobler@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but wait for Volker\n\nhttps://codereview.appspot.com/6868090/diff/20001/idna/idna.go\nFile idna/idna.go (right):\n\nhttps://codereview.appspot.com/6868090/diff/20001/idna/idna.go#newcode56\nidna/idna.go:56: for _, r := range s {\nIt will be moderately faster to do for i := 0; i < len(s); i++.\nAlso please use utf8.RuneSelf.\n\nhttps://codereview.appspot.com/6868090/diff/20001/idna/idna_test.go\nFile idna/idna_test.go (right):\n\nhttps://codereview.appspot.com/6868090/diff/20001/idna/idna_test.go#newcode26\nidna/idna_test.go:26: func TestIDNA(t *testing.T) {\nadd a test with errors\n\nhttps://codereview.appspot.com/6868090/diff/20001/idna/punycode.go\nFile idna/punycode.go (right):\n\nhttps://codereview.appspot.com/6868090/diff/20001/idna/punycode.go#newcode25\nidna/punycode.go:25: // Decode decodes a string as specified in section 6.2.\ns/D/d/\n\nhttps://codereview.appspot.com/6868090/diff/20001/idna/punycode.go#newcode55\nidna/punycode.go:55: i += digit * w\nDo you have to worry about overflow in the * or the +=?\n\nhttps://codereview.appspot.com/6868090/diff/20001/idna/punycode.go#newcode65\nidna/punycode.go:65: w *= base - t\nOr here?\n\nhttps://codereview.appspot.com/6868090/diff/20001/idna/punycode.go#newcode78\nidna/punycode.go:78: // Encode encodes a string as specified in section 6.3 and prepends prefix to\ns/E/e/",
			"disapproval": false,
			"date": "2012-12-11 15:41:56.723760",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dr.volker.dobler@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6868090/diff/20001/idna/idna.go\nFile idna/idna.go (right):\n\nhttps://codereview.appspot.com/6868090/diff/20001/idna/idna.go#newcode56\nidna/idna.go:56: for _, r := range s {\nOn 2012/12/11 15:41:56, rsc wrote:\n> It will be moderately faster to do for i := 0; i < len(s); i++.\n> Also please use utf8.RuneSelf.\n\nDone.\n\nhttps://codereview.appspot.com/6868090/diff/20001/idna/idna_test.go\nFile idna/idna_test.go (right):\n\nhttps://codereview.appspot.com/6868090/diff/20001/idna/idna_test.go#newcode26\nidna/idna_test.go:26: func TestIDNA(t *testing.T) {\nOn 2012/12/11 15:41:56, rsc wrote:\n> add a test with errors\n\nI've added punycode error tests. I'll add IDNA error tests when I specify what exactly is an error (http://www.unicode.org/faq/idn.html#6).\n\nhttps://codereview.appspot.com/6868090/diff/20001/idna/punycode.go\nFile idna/punycode.go (right):\n\nhttps://codereview.appspot.com/6868090/diff/20001/idna/punycode.go#newcode25\nidna/punycode.go:25: // Decode decodes a string as specified in section 6.2.\nOn 2012/12/11 15:41:56, rsc wrote:\n> s/D/d/\n\nDone.\n\nhttps://codereview.appspot.com/6868090/diff/20001/idna/punycode.go#newcode55\nidna/punycode.go:55: i += digit * w\nOn 2012/12/11 15:41:56, rsc wrote:\n> Do you have to worry about overflow in the * or the +=?\n\nDone.\n\nhttps://codereview.appspot.com/6868090/diff/20001/idna/punycode.go#newcode65\nidna/punycode.go:65: w *= base - t\nOn 2012/12/11 15:41:56, rsc wrote:\n> Or here?\n\nDone.\n\nhttps://codereview.appspot.com/6868090/diff/20001/idna/punycode.go#newcode78\nidna/punycode.go:78: // Encode encodes a string as specified in section 6.3 and prepends prefix to\nOn 2012/12/11 15:41:56, rsc wrote:\n> s/E/e/\n\nDone.",
			"disapproval": false,
			"date": "2012-12-12 00:01:25.922820",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dr.volker.dobler@gmail.com",
				"remyoudompheng@gmail.com",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6868090/diff/15006/idna/idna.go\nFile idna/idna.go (right):\n\nhttps://codereview.appspot.com/6868090/diff/15006/idna/idna.go#newcode6\nidna/idna.go:6: // Applications), defined in RFCs 5890-5894.\nI'd prefer to make a series of RFCs clickable for gopkgdoc.\ntemplate.go of gopkgdoc can handle RFC nnnn.",
			"disapproval": false,
			"date": "2012-12-12 02:23:21.657940",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dr.volker.dobler@gmail.com",
				"remyoudompheng@gmail.com",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6868090/diff/15006/idna/idna.go\nFile idna/idna.go (right):\n\nhttps://codereview.appspot.com/6868090/diff/15006/idna/idna.go#newcode6\nidna/idna.go:6: // Applications), defined in RFCs 5890-5894.\nOn 2012/12/12 02:23:21, mikio wrote:\n> I'd prefer to make a series of RFCs clickable for gopkgdoc.\n> template.go of gopkgdoc can handle RFC nnnn.\n\nDone.",
			"disapproval": false,
			"date": "2012-12-12 06:23:30.180040",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dr.volker.dobler@gmail.com",
				"remyoudompheng@gmail.com",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nIs IDNA really AS experimental/novel/optional\nas e.g. spdy or websocket?",
			"disapproval": false,
			"date": "2012-12-13 08:58:14.309090",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Dec 13, 2012 at 7:58 PM,  <dr.volker.dobler@gmail.com> wrote:\r\n> Is IDNA really AS experimental/novel/optional\r\n> as e.g. spdy or websocket?\r\n\r\nPackage idna could migrate to the standard library at some point in\r\nthe future, but for now, I'm happy for it to live in the go.net\r\nsub-repo. It's easily go-gettable, if people want it.\r\n",
			"disapproval": false,
			"date": "2012-12-13 21:44:27.282790",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dr.volker.dobler@gmail.com",
				"remyoudompheng@gmail.com",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=903a863e059a&repo=net ***\n\ngo.net/idna: new package.\n\nR=rsc, dr.volker.dobler, remyoudompheng, mikioh.mikioh\nCC=golang-dev\nhttps://codereview.appspot.com/6868090",
			"disapproval": false,
			"date": "2012-12-13 21:45:27.609970",
			"approval": false
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 6868090: go.net/punycode: new package.",
	"created": "2012-12-09 11:49:31.247850",
	"patchsets": [
		1,
		2001,
		5001,
		12001,
		15001,
		17005,
		20001,
		15006,
		16006,
		29001
	],
	"modified": "2012-12-13 21:45:32.246090",
	"closed": true,
	"issue": 6868090
}