{
	"description": "go.image/tiff: support for writing compressed images.\n\nOnly Deflate compression is supported for now.",
	"cc": [
		"nigeltao@golang.org",
		"mikioh.mikioh@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"bsiegert@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.image",
			"disapproval": false,
			"date": "2012-12-04 13:29:30.297850",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"bsiegert@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6866051/diff/5001/tiff/consts.go\nFile tiff/consts.go (right):\n\nhttps://codereview.appspot.com/6866051/diff/5001/tiff/consts.go#newcode133\ntiff/consts.go:133: for _, v := range compressionEq {\nI'd just hard-code it:\n\nfunc (c CompressionType) specValue() uint32 {\n  switch c {\n  case Deflate:\n    return cDeflate\n  }\n  return cNone\n}\n\nhttps://codereview.appspot.com/6866051/diff/5001/tiff/writer.go\nFile tiff/writer.go (right):\n\nhttps://codereview.appspot.com/6866051/diff/5001/tiff/writer.go#newcode243\ntiff/writer.go:243: dst.(io.WriteCloser).Close()\ns/WriteCloser/Closer/, and it's probably good form to check the error returned, even though in for now you're writing to a bytes.Buffer:\n\nif err := dst.(io.Closer).Close(); err != nil {\n  return err\n}",
			"disapproval": false,
			"date": "2012-12-05 03:34:38.307600",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"bsiegert@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-10 15:43:58.361010",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"bsiegert@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6866051/diff/5001/tiff/consts.go\nFile tiff/consts.go (right):\n\nhttps://codereview.appspot.com/6866051/diff/5001/tiff/consts.go#newcode133\ntiff/consts.go:133: for _, v := range compressionEq {\nOn 2012/12/05 03:34:38, nigeltao wrote:\n> I'd just hard-code it:\n> \n> func (c CompressionType) specValue() uint32 {\n>   switch c {\n>   case Deflate:\n>     return cDeflate\n>   }\n>   return cNone\n> }\n\nDone.\n\nhttps://codereview.appspot.com/6866051/diff/5001/tiff/writer.go\nFile tiff/writer.go (right):\n\nhttps://codereview.appspot.com/6866051/diff/5001/tiff/writer.go#newcode243\ntiff/writer.go:243: dst.(io.WriteCloser).Close()\nOn 2012/12/05 03:34:38, nigeltao wrote:\n> s/WriteCloser/Closer/, and it's probably good form to check the error returned,\n> even though in for now you're writing to a bytes.Buffer:\n> \n> if err := dst.(io.Closer).Close(); err != nil {\n>   return err\n> }\n\nDone.",
			"disapproval": false,
			"date": "2012-12-10 15:44:04.030160",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"bsiegert@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6866051/diff/12001/tiff/writer.go\nFile tiff/writer.go (right):\n\nhttps://codereview.appspot.com/6866051/diff/12001/tiff/writer.go#newcode184\ntiff/writer.go:184: compression := Uncompressed\nIt might be better to write this as\n\ncompression := cNone\nif opt != nil {\n  predictor = opt.Predictor\n  compression = opt.Compression.specValue()\n}\n\nin case someone tries to pass opt.Compression == CompressionType(42).",
			"disapproval": false,
			"date": "2012-12-11 00:44:09.814830",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "perhaps the CL description might be \"go.image/tiff: ...\".\r\n",
			"disapproval": false,
			"date": "2012-12-11 00:48:44.313400",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"bsiegert@gmail.com",
				"nigeltao@golang.org",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=d16be1f828b0&repo=image ***\n\ngo.image/tiff: support for writing compressed images.\n\nOnly Deflate compression is supported for now.\n\nR=nigeltao, mikioh.mikioh\nCC=golang-dev\nhttps://codereview.appspot.com/6866051\n\nCommitter: Nigel Tao <nigeltao@golang.org>",
			"disapproval": false,
			"date": "2012-12-12 02:24:29.547030",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"bsiegert@gmail.com",
				"nigeltao@golang.org",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL. Also changed the CL description as requested.\n\nhttps://codereview.appspot.com/6866051/diff/12001/tiff/writer.go\nFile tiff/writer.go (right):\n\nhttps://codereview.appspot.com/6866051/diff/12001/tiff/writer.go#newcode184\ntiff/writer.go:184: compression := Uncompressed\nOn 2012/12/11 00:44:09, nigeltao wrote:\n> It might be better to write this as\n> \n> compression := cNone\n> if opt != nil {\n>   predictor = opt.Predictor\n>   compression = opt.Compression.specValue()\n> }\n> \n> in case someone tries to pass opt.Compression == CompressionType(42).\n\nDone.",
			"disapproval": false,
			"date": "2012-12-11 08:22:51.752030",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"bsiegert@gmail.com",
				"nigeltao@golang.org",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.",
			"disapproval": false,
			"date": "2012-12-12 02:23:13.625630",
			"approval": true
		}
	],
	"owner_email": "bsiegert@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "bsiegert",
	"subject": "code review 6866051: tiff: support for writing compressed images.",
	"created": "2012-12-04 13:27:57.775540",
	"patchsets": [
		1,
		2001,
		5001,
		10001,
		12001,
		16002
	],
	"modified": "2013-06-10 09:24:33.081930",
	"closed": true,
	"issue": 6866051
}