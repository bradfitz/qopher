{
	"description": "spec: clarify language about unary operator &\n\nA composite literal may be parenthesized when\nused as operand for the unary operator &.",
	"cc": [
		"rsc@golang.org",
		"iant@golang.org",
		"r@golang.org",
		"ken@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think I'm missing something. Why is this exceptional?\r\n& works on any parenthesized expression, and you can parenthesize any\r\ncomposite literal when using it as an expression.\r\n",
			"disapproval": false,
			"date": "2012-12-23 01:45:07.183460",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, iant@golang.org, r@golang.org, ken@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-12-23 00:56:41.597970",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "In general we talk about the type of operands that are valid with an\r\noperation, not the operands' syntax. In this case it's not the type\r\nthat is relevant but the syntactic structure (\"composite literal\").\r\nStrictly speaking, syntactically, a parenthesized expression is not a\r\ncomposite literal. Similarly, for go and defer statement, we care\r\nabout the syntactic structure of the argument (function call). There\r\nwe are explicit that it cannot be parenthesized. For the\r\nunsafe.Offsetof built-in we are explicit as well: it may be\r\nparenthesized.\r\n\r\nThus, I tried to be equally precise here.\r\n\r\nI'm not feeling strongly about this - it was just a question that came\r\nup when I implemented this check, and the spec was less clear here\r\nthen I thought it might be.\r\n\r\nIn the long run (past Go 1.1) we might want to have a brief\r\nterminology paragraph somewhere, and then use the same terms\r\nconsistently (see also somewhat related issue 4532).\r\n\r\n- gri\r\n\r\n\r\nOn Sat, Dec 22, 2012 at 5:45 PM, Russ Cox <rsc@golang.org> wrote:\r\n> I think I'm missing something. Why is this exceptional?\r\n> & works on any parenthesized expression, and you can parenthesize any\r\n> composite literal when using it as an expression.\r\n",
			"disapproval": false,
			"date": "2012-12-23 04:03:01.326710",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-01-02 22:41:47.650570",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=f0e7ba409b05 ***\n\nspec: clarify language about unary operator &\n\nA composite literal may be parenthesized when\nused as operand for the unary operator &.\n\nR=rsc, iant, r, ken\nCC=golang-dev\nhttps://codereview.appspot.com/6996053",
			"disapproval": false,
			"date": "2013-01-03 02:11:55.914410",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6996053: spec: clarify language about unary operator &",
	"created": "2012-12-22 18:14:51.664100",
	"patchsets": [
		1,
		3,
		2002,
		8001,
		12001,
		14002,
		12002
	],
	"modified": "2013-01-03 05:50:23.437930",
	"closed": true,
	"issue": 6996053
}