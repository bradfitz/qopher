{
	"description": "cmd/api: add exception file\nFixes build.",
	"cc": [
		"golang-dev@googlegroups.com",
		"adg@golang.org",
		"bradfitz@golang.org",
		"dsymonds@golang.org",
		"dave@cheney.net"
	],
	"reviewers": [
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6586074/diff/1/api/README\nFile api/README (right):\n\nhttp://codereview.appspot.com/6586074/diff/1/api/README#newcode8\napi/README:8: except.txt lists features that  may disappear without breaking\ndouble space between that and may",
			"disapproval": false,
			"date": "2012-10-04 00:48:33.313960",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM on the code.\n\nStill unfortunate on going this route at all, but it's probably inevitable for something else anyway, so we'll need the mechanism regardless.\n\nhttps://codereview.appspot.com/6586074/diff/1/src/cmd/api/goapi.go\nFile src/cmd/api/goapi.go (right):\n\nhttps://codereview.appspot.com/6586074/diff/1/src/cmd/api/goapi.go#newcode219\nsrc/cmd/api/goapi.go:219: fmt.Fprintf(bw, \"-%s\\n\", feature)\nuse different symbol failures vs permitted omissions?\n\nI could see this being confusing if there's another minus failure and we can't visually see which is the real failure.\n\nNot a big deal, though.",
			"disapproval": false,
			"date": "2012-10-04 00:54:48.125980",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-10-04 00:45:16.588630",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"bradfitz@golang.org",
				"dsymonds@golang.org",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=43a4b23b65a3 ***\n\ncmd/api: add exception file\nFixes build.\n\nR=golang-dev, adg, bradfitz, dsymonds, dave\nCC=golang-dev\nhttp://codereview.appspot.com/6586074",
			"disapproval": false,
			"date": "2012-10-04 01:35:30.843110",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nbut wait for brad and others to chime in",
			"disapproval": false,
			"date": "2012-10-04 00:48:25.713080",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I had the same thought but couldn't think of a symbol. Suggest one and\r\nI'll use it.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-10-04 00:59:30.815250",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Oct 3, 2012 at 5:59 PM, Rob Pike <r@golang.org> wrote:\r\n\r\n> I had the same thought but couldn't think of a symbol. Suggest one and\r\n> I'll use it.\r\n>\r\n\r\n~ ?  Looks like a minus, and also looks kinda unhappy.\r\n",
			"disapproval": false,
			"date": "2012-10-04 01:08:21.660920",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\u203d\r\n\r\nOn Thu, Oct 4, 2012 at 11:00 AM, David Symonds <dsymonds@golang.org> wrote:\r\n> On Thu, Oct 4, 2012 at 10:59 AM, Rob Pike <r@golang.org> wrote:\r\n>\r\n>> I had the same thought but couldn't think of a symbol. Suggest one and\r\n>> I'll use it.\r\n>\r\n> U+1F4A9\r\n",
			"disapproval": false,
			"date": "2012-10-04 01:11:10.400110",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Oct 4, 2012 at 10:59 AM, Rob Pike <r@golang.org> wrote:\r\n\r\n> I had the same thought but couldn't think of a symbol. Suggest one and\r\n> I'll use it.\r\n\r\nU+1F4A9\r\n",
			"disapproval": false,
			"date": "2012-10-04 01:00:41.526930",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "As much as I loves me an interrobang, it doesn't really work here.  It\r\nsuggests anger-and-confusion.  We want to express misfortune/sadness.\r\n\r\nOn Wed, Oct 3, 2012 at 6:11 PM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> \u203d\r\n>\r\n> On Thu, Oct 4, 2012 at 11:00 AM, David Symonds <dsymonds@golang.org>\r\n> wrote:\r\n> > On Thu, Oct 4, 2012 at 10:59 AM, Rob Pike <r@golang.org> wrote:\r\n> >\r\n> >> I had the same thought but couldn't think of a symbol. Suggest one and\r\n> >> I'll use it.\r\n> >\r\n> > U+1F4A9\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-04 01:15:44.212590",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nHowever:\r\n\r\nPlease add an unexported method to package parse's type Node, so that\r\nfuture extensions are guaranteed safe (because all the implementations\r\nare in package parse) instead of just presumed safe.\r\n\r\nAre we really sure about DotNode? It might be better to leave\r\nDotNode's definition but mark it as unused and introduce a separate\r\nDotNodePos with an embedded DotNode and Pos. What if someone is\r\nrewriting the parse tree and creating a DotNode(false) somewhere?\r\n",
			"disapproval": false,
			"date": "2012-10-05 21:25:53.445180",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Oct 6, 2012 at 7:25 AM, Russ Cox <rsc@golang.org> wrote:\r\n> LGTM\r\n>\r\n> However:\r\n>\r\n> Please add an unexported method to package parse's type Node, so that\r\n> future extensions are guaranteed safe (because all the implementations\r\n> are in package parse) instead of just presumed safe.\r\n\r\nOK; CL in prep.\r\n\r\n> Are we really sure about DotNode? It might be better to leave\r\n> DotNode's definition but mark it as unused and introduce a separate\r\n> DotNodePos with an embedded DotNode and Pos. What if someone is\r\n> rewriting the parse tree and creating a DotNode(false) somewhere?\r\n\r\nI'm comfortable. The package doc says, don't use this.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-10-05 21:42:06.721810",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 6586074: cmd/api: add exception file",
	"created": "2012-10-04 00:45:10.628700",
	"patchsets": [
		1,
		8001
	],
	"modified": "2012-10-05 21:25:53.585910",
	"closed": true,
	"issue": 6586074
}