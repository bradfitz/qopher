{
	"description": "net/http: lex cleanup",
	"cc": [
		"rsc@golang.org",
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "pascal@quies.net",
			"recipients": [
				"pascal@quies.net",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-04-20 20:19:29.448369",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"pascal@quies.net",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nLeaving for Brad.",
			"disapproval": false,
			"date": "2012-04-23 17:13:53.023508",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Apr 20, 2012 at 1:25 PM, <rsc@golang.org> wrote:\n\n>\n> http://codereview.appspot.com/**6099043/diff/5001/src/pkg/net/**\n> http/lex.go<http://codereview.appspot.com/6099043/diff/5001/src/pkg/net/http/lex.go>\n> File src/pkg/net/http/lex.go (right):\n>\n> http://codereview.appspot.com/**6099043/diff/5001/src/pkg/net/**\n> http/lex.go#newcode9<http://codereview.appspot.com/6099043/diff/5001/src/pkg/net/http/lex.go#newcode9>\n> src/pkg/net/http/lex.go:9: const tokenTable = \"\n>       ! #$%&'  *+ -. 0123456789       ABCDEFGHIJKLMNOPQRSTUVWXYZ\n> ^_`abcdefghijklmnopqrstuvwxyz | ~\"\n> This is magic that must be maintained: it's not a string of characters\n> but a lookup table.\n>\n\nI agree this table could be listed better (not using a string), but the\nspec about what a token means isn't a very fluid.  I think a table is fine.\n\n\n> Can you do the cleanup without using strings as lookup tables?\n> It would be fine to have a string with all the token characters\n> and use ContainsRune(tokens, rune(c))\n>\n\nThat can't be inlined and requires a scan over the table.\n",
			"disapproval": false,
			"date": "2012-04-20 20:29:49.240356",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Apr 20, 2012 at 16:31, Russ Cox <rsc@golang.org> wrote:\r\n> I don't object to a table.\r\n> I object to a table indexed by character value.\r\n\r\nto be clear, it is the implicit indexing that is the problem.\r\nobviously these two are different but which is correct?\r\n\r\n const tokenTable = \"     ! #$%&'   *+...\"\r\n const tokenTable = \"      ! #$%&'  *+...\"\r\n\r\nif a table is necessary for speed (and i think that's unclear)\r\nit can be written in ways that make the indices clearer.\r\n\r\nvar isToken = [256]bool{\r\n   '!': true,\r\n   '#': true,\r\n   ...\r\n}\r\n",
			"disapproval": false,
			"date": "2012-04-20 20:33:59.417094",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Apr 20, 2012 at 16:35, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n> Yeah, that's what I meant by \"listed better\". \u00a0But that's still \"indexed by\n> character value\".\n\nbut not implicitly\n",
			"disapproval": false,
			"date": "2012-04-20 20:38:55.071573",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"pascal@quies.net",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6099043/diff/10001/src/pkg/net/http/cookie.go\nFile src/pkg/net/http/cookie.go (right):\n\nhttp://codereview.appspot.com/6099043/diff/10001/src/pkg/net/http/cookie.go#newcode261\nsrc/pkg/net/http/cookie.go:261: isNotToken := func(r rune) bool { return !isToken(r) }\nPlease make this a top-level function.  Right now this code will allocate each time it is run.\n\nhttp://codereview.appspot.com/6099043/diff/10001/src/pkg/net/http/lex.go\nFile src/pkg/net/http/lex.go (right):\n\nhttp://codereview.appspot.com/6099043/diff/10001/src/pkg/net/http/lex.go#newcode10\nsrc/pkg/net/http/lex.go:10: '!': true, '#': true, '$': true, '%': true,\nPlease put 1 entry per line.\nIt is more lines, but then they can be sorted,\nmaintained, and skimmed more easily.",
			"disapproval": false,
			"date": "2012-04-20 21:51:04.144476",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"pascal@quies.net",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=b76fad0423c5 ***\n\nnet/http: lex cleanup\n\nR=rsc, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/6099043\n\nCommitter: Brad Fitzpatrick <bradfitz@golang.org>",
			"disapproval": false,
			"date": "2012-04-23 17:27:28.431727",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"pascal@quies.net",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6099043/diff/5001/src/pkg/net/http/lex.go\nFile src/pkg/net/http/lex.go (right):\n\nhttp://codereview.appspot.com/6099043/diff/5001/src/pkg/net/http/lex.go#newcode9\nsrc/pkg/net/http/lex.go:9: const tokenTable = \"                                 ! #$%&'  *+ -. 0123456789       ABCDEFGHIJKLMNOPQRSTUVWXYZ   ^_`abcdefghijklmnopqrstuvwxyz | ~\"\nThis is magic that must be maintained: it's not a string of characters but a lookup table.\n\nCan you do the cleanup without using strings as lookup tables?\nIt would be fine to have a string with all the token characters \nand use ContainsRune(tokens, rune(c))",
			"disapproval": false,
			"date": "2012-04-20 20:25:36.614192",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Apr 20, 2012 at 1:33 PM, Russ Cox <rsc@golang.org> wrote:\n\n> On Fri, Apr 20, 2012 at 16:31, Russ Cox <rsc@golang.org> wrote:\n> > I don't object to a table.\n> > I object to a table indexed by character value.\n>\n> to be clear, it is the implicit indexing that is the problem.\n> obviously these two are different but which is correct?\n>\n>  const tokenTable = \"     ! #$%&'   *+...\"\n>  const tokenTable = \"      ! #$%&'  *+...\"\n>\n> if a table is necessary for speed (and i think that's unclear)\n> it can be written in ways that make the indices clearer.\n>\n> var isToken = [256]bool{\n>   '!': true,\n>   '#': true,\n>   ...\n> }\n>\n\nYeah, that's what I meant by \"listed better\".  But that's still \"indexed by\ncharacter value\".\n",
			"disapproval": false,
			"date": "2012-04-20 20:35:23.716603",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Apr 20, 2012 at 16:29, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n> I agree this table could be listed better (not using a string), but the\n> spec about what a token means isn't a very fluid. \u00a0I think a table is fine.\n\nI don't object to a table.\nI object to a table indexed by character value.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-04-20 20:31:20.859213",
			"approval": false
		},
		{
			"sender": "pascal@quies.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi Russ.\n\n> That seems wrong.\n\nAccording to the spec it's correct but confusing none the less.\n\n> Maybe make this\n> \n> return !isToken(r)\n\nDone.\n\n> http://codereview.appspot.com/6099043/\n",
			"disapproval": false,
			"date": "2012-04-23 16:35:34.016052",
			"approval": false
		},
		{
			"sender": "pascal@quies.net",
			"recipients": [
				"pascal@quies.net",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-20 21:49:21.784495",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"pascal@quies.net",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6099043/diff/6003/src/pkg/net/http/lex.go\nFile src/pkg/net/http/lex.go (right):\n\nhttp://codereview.appspot.com/6099043/diff/6003/src/pkg/net/http/lex.go#newcode96\nsrc/pkg/net/http/lex.go:96: return i < len(isTokenTable) && !isTokenTable[i]\nisToken and isNotToken both return false when i >= len(isTokenTable).\nThat seems wrong.\nMaybe make this\n\nreturn !isToken(r)\n\nand then they can't be out of sync.",
			"disapproval": false,
			"date": "2012-04-23 13:47:29.556720",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn Mon, Apr 23, 2012 at 10:13 AM, <rsc@golang.org> wrote:\n\n> LGTM\n>\n> Leaving for Brad.\n>\n>\n> http://codereview.appspot.com/**6099043/<http://codereview.appspot.com/6099043/>\n>\n",
			"disapproval": false,
			"date": "2012-04-23 17:25:53.128237",
			"approval": true
		},
		{
			"sender": "pascal@quies.net",
			"recipients": [
				"pascal@quies.net",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-20 22:02:38.327523",
			"approval": false
		}
	],
	"owner_email": "pascal@quies.net",
	"private": false,
	"base_url": "",
	"owner": "pascal",
	"subject": "code review 6099043: net/http: lex cleanup",
	"created": "2012-04-20 20:17:13.111746",
	"patchsets": [
		1,
		2001,
		5001,
		10001,
		6003,
		5005
	],
	"modified": "2012-04-23 18:27:33.127045",
	"closed": true,
	"issue": 6099043
}