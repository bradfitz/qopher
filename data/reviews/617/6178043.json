{
	"description": "leveldb: a first cut at a leveldb.Open function.",
	"cc": [
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6178043/diff/4001/leveldb/filenames.go\nFile leveldb/filenames.go (right):\n\nhttp://codereview.appspot.com/6178043/diff/4001/leveldb/filenames.go#newcode28\nleveldb/filenames.go:28: return fmt.Sprintf(\"%s%cLOCK\", dirname, os.PathSeparator)\nkinda gross that this and current don't use fileNum.\n\nmake it ...fileNum uint64 maybe?  check that it has to be zero/unset?  *shrug*\n\ndon't really care.\n\nhttp://codereview.appspot.com/6178043/diff/4001/leveldb/leveldb.go\nFile leveldb/leveldb.go (right):\n\nhttp://codereview.appspot.com/6178043/diff/4001/leveldb/leveldb.go#newcode70\nleveldb/leveldb.go:70: defer func() {\nDo you foresee more than two return paths in the future?  This complexity of what's effectively a scoped_ptr::release on line 82 and here doesn't seem worth it in readability.\n\nhttp://codereview.appspot.com/6178043/diff/4001/leveldb/leveldb_test.go\nFile leveldb/leveldb_test.go (right):\n\nhttp://codereview.appspot.com/6178043/diff/4001/leveldb/leveldb_test.go#newcode25\nleveldb/leveldb_test.go:25: //   - /foo/z/A\ndirectories too?",
			"disapproval": false,
			"date": "2012-05-03 04:30:54.493945",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/leveldb-go/source/detail?r=c147eb351686 ***\n\nleveldb: a first cut at a leveldb.Open function.\n\nR=bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/6178043",
			"disapproval": false,
			"date": "2012-05-03 05:07:01.962661",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/leveldb-go",
			"disapproval": false,
			"date": "2012-05-03 04:14:29.732033",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6178043/diff/8/leveldb/leveldb_test.go\nFile leveldb/leveldb_test.go (right):\n\nhttp://codereview.appspot.com/6178043/diff/8/leveldb/leveldb_test.go#newcode59\nleveldb/leveldb_test.go:59: _, err = srcFile.ReadAt(data, 0)\nI think io.ReadFull reads better than ReadAt, but if you do ReadAt, note that:\n\nhttp://codereview.appspot.com/6178043/diff/8/leveldb/leveldb_test.go#newcode60\nleveldb/leveldb_test.go:60: if err != nil {\nReadAt may return EOF at the end, or nil:\nhttp://golang.org/pkg/io/#ReaderAt\n\nOut of paranoia you'd probably still want to check n == len(data)",
			"disapproval": false,
			"date": "2012-05-03 04:50:48.463148",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6178043/diff/4001/leveldb/filenames.go\nFile leveldb/filenames.go (right):\n\nhttp://codereview.appspot.com/6178043/diff/4001/leveldb/filenames.go#newcode28\nleveldb/filenames.go:28: return fmt.Sprintf(\"%s%cLOCK\", dirname, os.PathSeparator)\nOn 2012/05/03 04:30:54, bradfitz wrote:\n> kinda gross that this and current don't use fileNum.\n> \n> make it ...fileNum uint64 maybe?  check that it has to be zero/unset?  *shrug*\n> \n> don't really care.\n\nYeah, the fileNum is a little awkward, but I'm happy with it as is.\n\nhttp://codereview.appspot.com/6178043/diff/4001/leveldb/leveldb.go\nFile leveldb/leveldb.go (right):\n\nhttp://codereview.appspot.com/6178043/diff/4001/leveldb/leveldb.go#newcode70\nleveldb/leveldb.go:70: defer func() {\nOn 2012/05/03 04:30:54, bradfitz wrote:\n> Do you foresee more than two return paths in the future?  This complexity of\n> what's effectively a scoped_ptr::release on line 82 and here doesn't seem worth\n> it in readability.\n\nYeah, there's more stuff coming.\n\nhttp://codereview.appspot.com/6178043/diff/4001/leveldb/leveldb_test.go\nFile leveldb/leveldb_test.go (right):\n\nhttp://codereview.appspot.com/6178043/diff/4001/leveldb/leveldb_test.go#newcode25\nleveldb/leveldb_test.go:25: //   - /foo/z/A\nOn 2012/05/03 04:30:54, bradfitz wrote:\n> directories too?\n\nOops, the copy isn't recursive. PTAL.",
			"disapproval": false,
			"date": "2012-05-03 04:44:40.556897",
			"approval": false
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 6178043: leveldb: a first cut at a leveldb.Open function.",
	"created": "2012-05-03 04:13:40.517345",
	"patchsets": [
		1,
		2001,
		4001,
		8,
		10003,
		11001
	],
	"modified": "2012-05-03 05:07:04.735107",
	"closed": true,
	"issue": 6178043
}