{
	"description": "runtime: prevent the GC from seeing the content of a frame in runfinq()\n\nFixes issue 5348.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dvyukov@google.com"
	],
	"reviewers": [
		"dave@cheney.net",
		"iant@golang.org",
		"r@golang.org",
		"n13m3y3r@gmail.com",
		"gustavo@niemeyer.net",
		"minux.ma@gmail.com"
	],
	"messages": [
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=ad3c2ffb16d7 ***\n\nruntime: prevent the GC from seeing the content of a frame in runfinq()\n\nFixes issue 5348.\n\nR=golang-dev, dvyukov\nCC=golang-dev\nhttps://codereview.appspot.com/8954044",
			"disapproval": false,
			"date": "2013-04-25 11:39:21.569960",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Is your suggest that we roll back a fix that has caught a bug in the runtime?\r\n\r\nI would prefer you roll back this change, which just replaces one bug\r\nwith another. It's not clear to me that the original bug is a\r\nshow-stopper.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-04-25 15:04:29.664280",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2013-04-25 09:59:59.421780",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-04-25 09:34:08.077990",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8954044/diff/5001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/8954044/diff/5001/src/pkg/runtime/mgc0.c#newcode2206\nsrc/pkg/runtime/mgc0.c:2206: runtime\u00b7memclr(frame, framecap);\nJust allocate the frame with FlagNoPointers:\nruntime.mallocgc(framesz, FlagNoPointers, 1, 0)\n\nWith your solution frame will prevent potential return values from being GCed\nwhile the frame is not zeroed. And also unnecessary calls to memclr and scanning\nby GC.\n\nhttps://codereview.appspot.com/8954044/diff/5001/test/fixedbugs/issue5348.go\nFile test/fixedbugs/issue5348.go (right):\n\nhttps://codereview.appspot.com/8954044/diff/5001/test/fixedbugs/issue5348.go#newcode33\ntest/fixedbugs/issue5348.go:33: runtime.GC()\nI do not think that we want to retain runtime.gc() call in runfinq(). Because if you have 10GB heap and a single finalizer, you pay double price with no particular benefit. Of even worse if you have a linked list with finalizers.\n\nPlease add the second GC() call to be more explicit.",
			"disapproval": false,
			"date": "2013-04-25 09:59:58.041240",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This commit has caused several build breakages, please undo it.\r\n\r\nOn Thu, Apr 25, 2013 at 9:39 PM,  <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n> *** Submitted as\r\n> https://code.google.com/p/go/source/detail?r=ad3c2ffb16d7 ***\r\n>\r\n> runtime: prevent the GC from seeing the content of a frame in runfinq()\r\n>\r\n> Fixes issue 5348.\r\n>\r\n> R=golang-dev, dvyukov\r\n> CC=golang-dev\r\n> https://codereview.appspot.com/8954044\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.com/8954044/\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-25 12:31:00.537740",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dave@cheney.net",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "GC on amd64 found (in a stack frame) an integer value matching the to-be-finalized pointer.\n\nI would suggest to skip test/fixedbugs/issue5348.go and let it begin with the following two lines:\n\n// skip\n// Replace \"skip\" with \"run\" when the garbage collector is precise enough.\n\nThis means submitting a new CL containing the above two lines, instead of undoing this CL. Alternatively, the new CL could delete file issue5348.go.\n\nWaiting for r to make the final decision.\n\nOn 2013/04/25 14:25:31, iant wrote:\n> On Thu, Apr 25, 2013 at 5:57 AM,  <mailto:0xE2.0x9A.0x9B@gmail.com> wrote:\n> > On 2013/04/25 12:31:00, dfc wrote:\n> >>\n> >> This commit has caused several build breakages, please undo it.\n> \n> Also as we are in the run-up to the 1.1 release, please only commit\n> changes after explicit approval from r or adg.  Thanks.\n> \n> Ian\n> \n> > I am investigating the cause on amd64. Please wait.\n> >\n> >> On Thu, Apr 25, 2013 at 9:39 PM,  <mailto:0xE2.0x9A.0x9B@gmail.com>\n> >\n> > wrote:\n> >>\n> >> > *** Submitted as\n> >> > https://code.google.com/p/go/source/detail?r=ad3c2ffb16d7 ***\n> >> >\n> >> > runtime: prevent the GC from seeing the content of a frame in\n> >\n> > runfinq()\n> >>\n> >> >\n> >> > Fixes issue 5348.\n> >> >\n> >> > R=golang-dev, dvyukov\n> >> > CC=golang-dev\n> >> > https://codereview.appspot.com/8954044\n> >> >\n> >> >\n> >> >\n> >> > https://codereview.appspot.com/8954044/\n> >> >\n> >> > --\n> >> >\n> >> > ---You received this message because you are subscribed to the\n> >\n> > Google Groups\n> >>\n> >> > \"golang-dev\" group.\n> >> > To unsubscribe from this group and stop receiving emails from it,\n> >\n> > send an\n> >>\n> >> > email to mailto:golang-dev+unsubscribe@googlegroups.com.\n> >>\n> >> > For more options, visit https://groups.google.com/groups/opt_out.\n> >> >\n> >> >\n> >\n> >\n> >\n> >\n> > https://codereview.appspot.com/8954044/\n> >\n> > --\n> >\n> > ---You received this message because you are subscribed to the Google Groups\n> > \"golang-dev\" group.\n> > To unsubscribe from this group and stop receiving emails from it, send an\n> > email to mailto:golang-dev+unsubscribe@googlegroups.com.\n> > For more options, visit https://groups.google.com/groups/opt_out.\n> >\n> >",
			"disapproval": false,
			"date": "2013-04-25 14:47:13.093750",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8954044/diff/5001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/8954044/diff/5001/src/pkg/runtime/mgc0.c#newcode2206\nsrc/pkg/runtime/mgc0.c:2206: runtime\u00b7memclr(frame, framecap);\nOn 2013/04/25 09:59:58, dvyukov wrote:\n> Just allocate the frame with FlagNoPointers:\n> runtime.mallocgc(framesz, FlagNoPointers, 1, 0)\n> \n> With your solution frame will prevent potential return values from being GCed\n> while the frame is not zeroed. And also unnecessary calls to memclr and scanning\n> by GC.\n\nDone.\n\nhttps://codereview.appspot.com/8954044/diff/5001/test/fixedbugs/issue5348.go\nFile test/fixedbugs/issue5348.go (right):\n\nhttps://codereview.appspot.com/8954044/diff/5001/test/fixedbugs/issue5348.go#newcode33\ntest/fixedbugs/issue5348.go:33: runtime.GC()\nOn 2013/04/25 09:59:58, dvyukov wrote:\n> I do not think that we want to retain runtime.gc() call in runfinq(). Because if\n> you have 10GB heap and a single finalizer, you pay double price with no\n> particular benefit. Of even worse if you have a linked list with finalizers.\n> \n> Please add the second GC() call to be more explicit.\n\nDone.",
			"disapproval": false,
			"date": "2013-04-25 10:52:19.845510",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/25 12:31:00, dfc wrote:\n> This commit has caused several build breakages, please undo it.\n\nI am investigating the cause on amd64. Please wait.\n\n> On Thu, Apr 25, 2013 at 9:39 PM,  <mailto:0xE2.0x9A.0x9B@gmail.com> wrote:\n> > *** Submitted as\n> > https://code.google.com/p/go/source/detail?r=ad3c2ffb16d7 ***\n> >\n> > runtime: prevent the GC from seeing the content of a frame in runfinq()\n> >\n> > Fixes issue 5348.\n> >\n> > R=golang-dev, dvyukov\n> > CC=golang-dev\n> > https://codereview.appspot.com/8954044\n> >\n> >\n> >\n> > https://codereview.appspot.com/8954044/\n> >\n> > --\n> >\n> > ---You received this message because you are subscribed to the Google Groups\n> > \"golang-dev\" group.\n> > To unsubscribe from this group and stop receiving emails from it, send an\n> > email to mailto:golang-dev+unsubscribe@googlegroups.com.\n> > For more options, visit https://groups.google.com/groups/opt_out.\n> >\n> >",
			"disapproval": false,
			"date": "2013-04-25 12:57:24.744330",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-04-25 10:55:21.152160",
			"approval": true
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dave@cheney.net",
				"iant@golang.org",
				"r@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/25 15:04:29, r wrote:\n> with another. It's not clear to me that the original bug is a\n> show-stopper.\n\nIt's perhaps not a show stopper because finalizers are generally a last resort measure for something that would be better done in a deterministic way. If might be a show stopper in the sense that SetFinalizer seems to prevent values from being collected, though, which means people are introducing leaks in their applications, ironically by trying to avoid resource leaks. I had the same experience with mgo some time ago, but haven't dived in to see in detail why the values were not collected. Instead, I just dropped the finalizers.",
			"disapproval": false,
			"date": "2013-04-25 15:22:50.316650",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "So please roll it back.\r\n",
			"disapproval": false,
			"date": "2013-04-25 15:11:16.378570",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Apr 25, 2013 at 5:57 AM,  <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n> On 2013/04/25 12:31:00, dfc wrote:\r\n>>\r\n>> This commit has caused several build breakages, please undo it.\r\n\r\nAlso as we are in the run-up to the 1.1 release, please only commit\r\nchanges after explicit approval from r or adg.  Thanks.\r\n\r\nIan\r\n\r\n> I am investigating the cause on amd64. Please wait.\r\n>\r\n>> On Thu, Apr 25, 2013 at 9:39 PM,  <mailto:0xE2.0x9A.0x9B@gmail.com>\r\n>\r\n> wrote:\r\n>>\r\n>> > *** Submitted as\r\n>> > https://code.google.com/p/go/source/detail?r=ad3c2ffb16d7 ***\r\n>> >\r\n>> > runtime: prevent the GC from seeing the content of a frame in\r\n>\r\n> runfinq()\r\n>>\r\n>> >\r\n>> > Fixes issue 5348.\r\n>> >\r\n>> > R=golang-dev, dvyukov\r\n>> > CC=golang-dev\r\n>> > https://codereview.appspot.com/8954044\r\n>> >\r\n>> >\r\n>> >\r\n>> > https://codereview.appspot.com/8954044/\r\n>> >\r\n>> > --\r\n>> >\r\n>> > ---You received this message because you are subscribed to the\r\n>\r\n> Google Groups\r\n>>\r\n>> > \"golang-dev\" group.\r\n>> > To unsubscribe from this group and stop receiving emails from it,\r\n>\r\n> send an\r\n>>\r\n>> > email to mailto:golang-dev+unsubscribe@googlegroups.com.\r\n>>\r\n>> > For more options, visit https://groups.google.com/groups/opt_out.\r\n>> >\r\n>> >\r\n>\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.com/8954044/\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-25 14:25:31.499690",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"dave@cheney.net",
				"iant@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Neither adg nor I had signed off on this CL yet. In the runup to the release, please don't check things in without the explicit approval of one of us.",
			"disapproval": false,
			"date": "2013-04-25 14:59:44.625960",
			"approval": false
		},
		{
			"sender": "0xe2.0x9a.0x9b@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Apr 25, 2013 at 5:05 PM, Rob Pike <r@golang.org> wrote:\r\n\r\n> I didn't say that well: You are asking whether we should disable a\r\n> test that catches a bug in the runtime. I suggest instead we roll back\r\n> this whole change until we understand better what is going on.\r\n>\r\n> -rob\r\n>\r\n\r\nI understand what is going on, but it is impossible for me to completely\r\nfix the issue in a short amount time.\r\n",
			"disapproval": false,
			"date": "2013-04-25 15:10:13.109160",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I didn't say that well: You are asking whether we should disable a\r\ntest that catches a bug in the runtime. I suggest instead we roll back\r\nthis whole change until we understand better what is going on.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-04-25 15:05:33.952820",
			"approval": false
		},
		{
			"sender": "0xe2.0x9a.0x9b@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I will undo the CL, as you suggested.\r\n\r\n\r\nOn Thu, Apr 25, 2013 at 5:04 PM, Rob Pike <r@golang.org> wrote:\r\n\r\n> Is your suggest that we roll back a fix that has caught a bug in the\r\n> runtime?\r\n>\r\n> I would prefer you roll back this change, which just replaces one bug\r\n> with another. It's not clear to me that the original bug is a\r\n> show-stopper.\r\n>\r\n> -rob\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-25 15:11:02.188590",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This prevents at most *one* object from being collected.\r\n\r\nOn Thu, Apr 25, 2013 at 7:22 PM,  <n13m3y3r@gmail.com> wrote:\r\n> On 2013/04/25 15:04:29, r wrote:\r\n>>\r\n>> with another. It's not clear to me that the original bug is a\r\n>> show-stopper.\r\n>\r\n>\r\n> It's perhaps not a show stopper because finalizers are generally a last\r\n> resort measure for something that would be better done in a\r\n> deterministic way. If might be a show stopper in the sense that\r\n> SetFinalizer seems to prevent values from being collected, though, which\r\n> means people are introducing leaks in their applications, ironically by\r\n> trying to avoid resource leaks. I had the same experience with mgo some\r\n> time ago, but haven't dived in to see in detail why the values were not\r\n> collected. Instead, I just dropped the finalizers.\r\n>\r\n> https://codereview.appspot.com/8954044/\r\n",
			"disapproval": false,
			"date": "2013-04-25 15:26:22.593490",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Apr 25, 2013 at 12:26 PM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n> This prevents at most *one* object from being collected.\r\n\r\nWhat if that one object holds on to a state with N other objects?\r\n\r\nEither way, if you forgive my lack of faith, I'm unsure about things\r\nbeing in a clean state at this point. I believe there are zero tests\r\nright now that cover the actual functionality of finalizers, and they\r\nare only ever used in file descriptors if people forget to close the\r\nfile in the first place.\r\n\r\nSorry, I'm not pointing fingers, and the failed test I did may well be\r\nmy fault, but I just don't feel confident at this point.\r\n\r\n\r\ngustavo @ http://niemeyer.net\r\n",
			"disapproval": false,
			"date": "2013-04-25 15:39:57.926270",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Apr 25, 2013 at 12:39 PM, Gustavo Niemeyer <gustavo@niemeyer.net> wrote:\r\n> I believe there are zero tests right now that cover the actual\r\n> functionality of finalizers,\r\n\r\nTo be fair, that's actually not true. There's a test under test/, that\r\nworks within a tolerance of 80% of collections.\r\n\r\n\r\ngustavo @ http://niemeyer.net\r\n",
			"disapproval": false,
			"date": "2013-04-25 15:51:41.896750",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Apr 25, 2013 at 11:39 PM, Gustavo Niemeyer <gustavo@niemeyer.net>wrote:\r\n\r\n> On Thu, Apr 25, 2013 at 12:26 PM, Dmitry Vyukov <dvyukov@google.com>\r\n> wrote:\r\n> > This prevents at most *one* object from being collected.\r\n>\r\n> What if that one object holds on to a state with N other objects?\r\n>\r\n> Either way, if you forgive my lack of faith, I'm unsure about things\r\n> being in a clean state at this point. I believe there are zero tests\r\n>\r\nThe only functional test for SetFinalizer is:\r\n/test/mallocfin.go\r\nbut that test only verify that finalizers are invoked.\r\n\r\n> right now that cover the actual functionality of finalizers, and they\r\n> are only ever used in file descriptors if people forget to close the\r\n> file in the first place.\r\n",
			"disapproval": false,
			"date": "2013-04-25 15:58:54.060330",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It's a rare enough bug that I'm not too concerned about it, especially\r\nas the fix seems more problematical than the bug.\r\n\r\nI prefer to visit this issue after Go 1.1 is launched, rather than\r\ndelay Go 1.1 with a protracted sequence of fixes to this subtle\r\nproblem.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-04-25 16:01:54.583590",
			"approval": false
		}
	],
	"owner_email": "0xE2.0x9A.0x9B@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "atom",
	"subject": "code review 8954044: runtime: clear the stack frame used in runfinq()",
	"created": "2013-04-25 09:25:21.436940",
	"patchsets": [
		1,
		2001,
		5001,
		12001,
		16001,
		3
	],
	"modified": "2013-04-25 15:58:54.175030",
	"closed": true,
	"issue": 8954044
}