{
	"description": "runtime: integrated network poller for linux\nvs tip:\nBenchmarkTCP4OneShot                    172994        40485  -76.60%\nBenchmarkTCP4OneShot-2                   96581        30028  -68.91%\nBenchmarkTCP4OneShot-4                   52615        18454  -64.93%\nBenchmarkTCP4OneShot-8                   26351        12289  -53.36%\nBenchmarkTCP4OneShot-16                  12258        16093  +31.29%\nBenchmarkTCP4OneShot-32                  13200        17045  +29.13%\n\nBenchmarkTCP4OneShotTimeout             124814        42932  -65.60%\nBenchmarkTCP4OneShotTimeout-2            99090        29040  -70.69%\nBenchmarkTCP4OneShotTimeout-4            51860        18455  -64.41%\nBenchmarkTCP4OneShotTimeout-8            26100        12073  -53.74%\nBenchmarkTCP4OneShotTimeout-16           12198        16654  +36.53%\nBenchmarkTCP4OneShotTimeout-32           13438        17143  +27.57%\n\nBenchmarkTCP4Persistent                 115647         7782  -93.27%\nBenchmarkTCP4Persistent-2                58024         4808  -91.71%\nBenchmarkTCP4Persistent-4                24715         3674  -85.13%\nBenchmarkTCP4Persistent-8                16431         2407  -85.35%\nBenchmarkTCP4Persistent-16                2336         1875  -19.73%\nBenchmarkTCP4Persistent-32                1689         1637   -3.08%\n\nBenchmarkTCP4PersistentTimeout           79754         7859  -90.15%\nBenchmarkTCP4PersistentTimeout-2         57708         5952  -89.69%\nBenchmarkTCP4PersistentTimeout-4         26907         3823  -85.79%\nBenchmarkTCP4PersistentTimeout-8         15036         2567  -82.93%\nBenchmarkTCP4PersistentTimeout-16         2507         1903  -24.09%\nBenchmarkTCP4PersistentTimeout-32         1717         1627   -5.24%\n\nvs old scheduler:\nbenchmark                           old ns/op    new ns/op    delta\nBenchmarkTCPOneShot                    192244        40485  -78.94%\nBenchmarkTCPOneShot-2                   63835        30028  -52.96%\nBenchmarkTCPOneShot-4                   35443        18454  -47.93%\nBenchmarkTCPOneShot-8                   22140        12289  -44.49%\nBenchmarkTCPOneShot-16                  16930        16093   -4.94%\nBenchmarkTCPOneShot-32                  16719        17045   +1.95%\n\nBenchmarkTCPOneShotTimeout             190495        42932  -77.46%\nBenchmarkTCPOneShotTimeout-2            64828        29040  -55.20%\nBenchmarkTCPOneShotTimeout-4            34591        18455  -46.65%\nBenchmarkTCPOneShotTimeout-8            21989        12073  -45.10%\nBenchmarkTCPOneShotTimeout-16           16848        16654   -1.15%\nBenchmarkTCPOneShotTimeout-32           16796        17143   +2.07%\n\nBenchmarkTCPPersistent                  81670         7782  -90.47%\nBenchmarkTCPPersistent-2                26598         4808  -81.92%\nBenchmarkTCPPersistent-4                15633         3674  -76.50%\nBenchmarkTCPPersistent-8                18093         2407  -86.70%\nBenchmarkTCPPersistent-16               17472         1875  -89.27%\nBenchmarkTCPPersistent-32                7679         1637  -78.68%\n\nBenchmarkTCPPersistentTimeout           83186         7859  -90.55%\nBenchmarkTCPPersistentTimeout-2         26883         5952  -77.86%\nBenchmarkTCPPersistentTimeout-4         15776         3823  -75.77%\nBenchmarkTCPPersistentTimeout-8         18180         2567  -85.88%\nBenchmarkTCPPersistentTimeout-16        17454         1903  -89.10%\nBenchmarkTCPPersistentTimeout-32         7798         1627  -79.14%",
	"cc": [
		"golang-dev@googlegroups.com",
		"iant@golang.org",
		"bradfitz@golang.org",
		"dave@cheney.net",
		"rsc@golang.org"
	],
	"reviewers": [
		"fullung@gmail.com"
	],
	"messages": [
		{
			"sender": "iant@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-03-12 21:27:35.876980",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-03-12 20:26:41.707350",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/12 20:26:41, dvyukov wrote:\n> Hello mailto:golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://dvyukov%2540google.com%40code.google.com/p/go/\n\n\nI've not yet figured out how to regenerate defs_linux_386.h (seems to require kernel header).\nAnd it depends on 7569043: runtime: integrated network poller for darwin\nBut other than that ready for review",
			"disapproval": false,
			"date": "2013-03-12 20:28:19.325640",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7579044/diff/20001/src/pkg/runtime/netpoll_linux.c\nFile src/pkg/runtime/netpoll_linux.c (right):\n\nhttps://codereview.appspot.com/7579044/diff/20001/src/pkg/runtime/netpoll_linux.c#newcode23\nsrc/pkg/runtime/netpoll_linux.c:23: // TODO(dvyukov): set CLOEXEC\nI think (on an old enough kernel), the existing tests would fail (the os/exec fd leak tests) without this. Could you try importing \"net\" there, commenting out epollcreate1, and see if it fails?",
			"disapproval": false,
			"date": "2013-03-12 21:34:17.693300",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> I've not yet figured out how to regenerate defs_linux_386.h (seems to require\n> kernel header).\n\nI had a quick attempt at this on an i386 host ... it wasn't successful.",
			"disapproval": false,
			"date": "2013-03-12 22:47:05.410140",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/12 21:34:17, bradfitz wrote:\n> https://codereview.appspot.com/7579044/diff/20001/src/pkg/runtime/netpoll_linux.c\n> File src/pkg/runtime/netpoll_linux.c (right):\n> \n> https://codereview.appspot.com/7579044/diff/20001/src/pkg/runtime/netpoll_linux.c#newcode23\n> src/pkg/runtime/netpoll_linux.c:23: // TODO(dvyukov): set CLOEXEC\n> I think (on an old enough kernel), the existing tests would fail (the os/exec fd\n> leak tests) without this. Could you try importing \"net\" there, commenting out\n> epollcreate1, and see if it fails?\n\nYes, it fails:\n--- FAIL: TestExtraFiles (0.06 seconds)\n\texec_test.go:239: Run: exit status 1; stdout \"leaked parent file. fd = 5; want 4",
			"disapproval": false,
			"date": "2013-03-13 12:40:11.688040",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Note to myself: fix build tags, handle arm",
			"disapproval": false,
			"date": "2013-03-13 14:50:04.880300",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Some cool numbers:\n\nbenchmark                            old ns/op    new ns/op    delta\nBenchmarkTCP4OneShot                    172994        40485  -76.60%\nBenchmarkTCP4OneShot-2                   96581        30028  -68.91%\nBenchmarkTCP4OneShot-4                   52615        18454  -64.93%\nBenchmarkTCP4OneShot-8                   26351        12289  -53.36%\nBenchmarkTCP4OneShot-16                  12258        16093  +31.29%\nBenchmarkTCP4OneShot-32                  13200        17045  +29.13%\nBenchmarkTCP4OneShotTimeout             124814        42932  -65.60%\nBenchmarkTCP4OneShotTimeout-2            99090        29040  -70.69%\nBenchmarkTCP4OneShotTimeout-4            51860        18455  -64.41%\nBenchmarkTCP4OneShotTimeout-8            26100        12073  -53.74%\nBenchmarkTCP4OneShotTimeout-16           12198        16654  +36.53%\nBenchmarkTCP4OneShotTimeout-32           13438        17143  +27.57%\nBenchmarkTCP4Persistent                 115647         7782  -93.27%\nBenchmarkTCP4Persistent-2                58024         4808  -91.71%\nBenchmarkTCP4Persistent-4                24715         3674  -85.13%\nBenchmarkTCP4Persistent-8                16431         2407  -85.35%\nBenchmarkTCP4Persistent-16                2336         1875  -19.73%\nBenchmarkTCP4Persistent-32                1689         1637   -3.08%\nBenchmarkTCP4PersistentTimeout           79754         7859  -90.15%\nBenchmarkTCP4PersistentTimeout-2         57708         5952  -89.69%\nBenchmarkTCP4PersistentTimeout-4         26907         3823  -85.79%\nBenchmarkTCP4PersistentTimeout-8         15036         2567  -82.93%\nBenchmarkTCP4PersistentTimeout-16         2507         1903  -24.09%\nBenchmarkTCP4PersistentTimeout-32         1717         1627   -5.24%\n\n\nI have not looked at OneShot with GOMAXPROCS=16,32, but it establishes and closes connections at insanely high race. Perhaps the slowdown is because old impl does not bother to arm epoll if we connect->read->close, but new impl always arms and disarms epoll.",
			"disapproval": false,
			"date": "2013-03-13 15:20:16.300100",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-03-13 16:54:37.625070",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Updated build tags\nNow it is only for linux,386 linux,amd64",
			"disapproval": false,
			"date": "2013-03-14 07:27:39.463240",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yay!\r\n On Mar 14, 2013 8:06 AM, <dvyukov@google.com> wrote:\r\n\r\n> *** Submitted as\r\n> https://code.google.com/p/go/**source/detail?r=f9c03cd9bd84<https://code.google.com/p/go/source/detail?r=f9c03cd9bd84>***\r\n>\r\n> runtime: integrated network poller for linux\r\n> vs tip:\r\n> BenchmarkTCP4OneShot                    172994        40485  -76.60%\r\n> BenchmarkTCP4OneShot-2                   96581        30028  -68.91%\r\n> BenchmarkTCP4OneShot-4                   52615        18454  -64.93%\r\n> BenchmarkTCP4OneShot-8                   26351        12289  -53.36%\r\n> BenchmarkTCP4OneShot-16                  12258        16093  +31.29%\r\n> BenchmarkTCP4OneShot-32                  13200        17045  +29.13%\r\n>\r\n> BenchmarkTCP4OneShotTimeout             124814        42932  -65.60%\r\n> BenchmarkTCP4OneShotTimeout-2            99090        29040  -70.69%\r\n> BenchmarkTCP4OneShotTimeout-4            51860        18455  -64.41%\r\n> BenchmarkTCP4OneShotTimeout-8            26100        12073  -53.74%\r\n> BenchmarkTCP4OneShotTimeout-16           12198        16654  +36.53%\r\n> BenchmarkTCP4OneShotTimeout-32           13438        17143  +27.57%\r\n>\r\n> BenchmarkTCP4Persistent                 115647         7782  -93.27%\r\n> BenchmarkTCP4Persistent-2                58024         4808  -91.71%\r\n> BenchmarkTCP4Persistent-4                24715         3674  -85.13%\r\n> BenchmarkTCP4Persistent-8                16431         2407  -85.35%\r\n> BenchmarkTCP4Persistent-16                2336         1875  -19.73%\r\n> BenchmarkTCP4Persistent-32                1689         1637   -3.08%\r\n>\r\n> BenchmarkTCP4PersistentTimeout           79754         7859  -90.15%\r\n> BenchmarkTCP4PersistentTimeout**-2         57708         5952  -89.69%\r\n> BenchmarkTCP4PersistentTimeout**-4         26907         3823  -85.79%\r\n> BenchmarkTCP4PersistentTimeout**-8         15036         2567  -82.93%\r\n> BenchmarkTCP4PersistentTimeout**-16         2507         1903  -24.09%\r\n> BenchmarkTCP4PersistentTimeout**-32         1717         1627   -5.24%\r\n>\r\n> vs old scheduler:\r\n> benchmark                           old ns/op    new ns/op    delta\r\n> BenchmarkTCPOneShot                    192244        40485  -78.94%\r\n> BenchmarkTCPOneShot-2                   63835        30028  -52.96%\r\n> BenchmarkTCPOneShot-4                   35443        18454  -47.93%\r\n> BenchmarkTCPOneShot-8                   22140        12289  -44.49%\r\n> BenchmarkTCPOneShot-16                  16930        16093   -4.94%\r\n> BenchmarkTCPOneShot-32                  16719        17045   +1.95%\r\n>\r\n> BenchmarkTCPOneShotTimeout             190495        42932  -77.46%\r\n> BenchmarkTCPOneShotTimeout-2            64828        29040  -55.20%\r\n> BenchmarkTCPOneShotTimeout-4            34591        18455  -46.65%\r\n> BenchmarkTCPOneShotTimeout-8            21989        12073  -45.10%\r\n> BenchmarkTCPOneShotTimeout-16           16848        16654   -1.15%\r\n> BenchmarkTCPOneShotTimeout-32           16796        17143   +2.07%\r\n>\r\n> BenchmarkTCPPersistent                  81670         7782  -90.47%\r\n> BenchmarkTCPPersistent-2                26598         4808  -81.92%\r\n> BenchmarkTCPPersistent-4                15633         3674  -76.50%\r\n> BenchmarkTCPPersistent-8                18093         2407  -86.70%\r\n> BenchmarkTCPPersistent-16               17472         1875  -89.27%\r\n> BenchmarkTCPPersistent-32                7679         1637  -78.68%\r\n>\r\n> BenchmarkTCPPersistentTimeout           83186         7859  -90.55%\r\n> BenchmarkTCPPersistentTimeout-**2         26883         5952  -77.86%\r\n> BenchmarkTCPPersistentTimeout-**4         15776         3823  -75.77%\r\n> BenchmarkTCPPersistentTimeout-**8         18180         2567  -85.88%\r\n> BenchmarkTCPPersistentTimeout-**16        17454         1903  -89.10%\r\n> BenchmarkTCPPersistentTimeout-**32         7798         1627  -79.14%\r\n>\r\n> R=golang-dev, iant, bradfitz, dave, rsc\r\n> CC=golang-dev\r\n> https://codereview.appspot.**com/7579044<https://codereview.appspot.com/7579044>\r\n>\r\n>\r\n> https://codereview.appspot.**com/7579044/<https://codereview.appspot.com/7579044/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-14 15:28:30.193640",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=f9c03cd9bd84 ***\n\nruntime: integrated network poller for linux\nvs tip:\nBenchmarkTCP4OneShot                    172994        40485  -76.60%\nBenchmarkTCP4OneShot-2                   96581        30028  -68.91%\nBenchmarkTCP4OneShot-4                   52615        18454  -64.93%\nBenchmarkTCP4OneShot-8                   26351        12289  -53.36%\nBenchmarkTCP4OneShot-16                  12258        16093  +31.29%\nBenchmarkTCP4OneShot-32                  13200        17045  +29.13%\n\nBenchmarkTCP4OneShotTimeout             124814        42932  -65.60%\nBenchmarkTCP4OneShotTimeout-2            99090        29040  -70.69%\nBenchmarkTCP4OneShotTimeout-4            51860        18455  -64.41%\nBenchmarkTCP4OneShotTimeout-8            26100        12073  -53.74%\nBenchmarkTCP4OneShotTimeout-16           12198        16654  +36.53%\nBenchmarkTCP4OneShotTimeout-32           13438        17143  +27.57%\n\nBenchmarkTCP4Persistent                 115647         7782  -93.27%\nBenchmarkTCP4Persistent-2                58024         4808  -91.71%\nBenchmarkTCP4Persistent-4                24715         3674  -85.13%\nBenchmarkTCP4Persistent-8                16431         2407  -85.35%\nBenchmarkTCP4Persistent-16                2336         1875  -19.73%\nBenchmarkTCP4Persistent-32                1689         1637   -3.08%\n\nBenchmarkTCP4PersistentTimeout           79754         7859  -90.15%\nBenchmarkTCP4PersistentTimeout-2         57708         5952  -89.69%\nBenchmarkTCP4PersistentTimeout-4         26907         3823  -85.79%\nBenchmarkTCP4PersistentTimeout-8         15036         2567  -82.93%\nBenchmarkTCP4PersistentTimeout-16         2507         1903  -24.09%\nBenchmarkTCP4PersistentTimeout-32         1717         1627   -5.24%\n\nvs old scheduler:\nbenchmark                           old ns/op    new ns/op    delta\nBenchmarkTCPOneShot                    192244        40485  -78.94%\nBenchmarkTCPOneShot-2                   63835        30028  -52.96%\nBenchmarkTCPOneShot-4                   35443        18454  -47.93%\nBenchmarkTCPOneShot-8                   22140        12289  -44.49%\nBenchmarkTCPOneShot-16                  16930        16093   -4.94%\nBenchmarkTCPOneShot-32                  16719        17045   +1.95%\n\nBenchmarkTCPOneShotTimeout             190495        42932  -77.46%\nBenchmarkTCPOneShotTimeout-2            64828        29040  -55.20%\nBenchmarkTCPOneShotTimeout-4            34591        18455  -46.65%\nBenchmarkTCPOneShotTimeout-8            21989        12073  -45.10%\nBenchmarkTCPOneShotTimeout-16           16848        16654   -1.15%\nBenchmarkTCPOneShotTimeout-32           16796        17143   +2.07%\n\nBenchmarkTCPPersistent                  81670         7782  -90.47%\nBenchmarkTCPPersistent-2                26598         4808  -81.92%\nBenchmarkTCPPersistent-4                15633         3674  -76.50%\nBenchmarkTCPPersistent-8                18093         2407  -86.70%\nBenchmarkTCPPersistent-16               17472         1875  -89.27%\nBenchmarkTCPPersistent-32                7679         1637  -78.68%\n\nBenchmarkTCPPersistentTimeout           83186         7859  -90.55%\nBenchmarkTCPPersistentTimeout-2         26883         5952  -77.86%\nBenchmarkTCPPersistentTimeout-4         15776         3823  -75.77%\nBenchmarkTCPPersistentTimeout-8         18180         2567  -85.88%\nBenchmarkTCPPersistentTimeout-16        17454         1903  -89.10%\nBenchmarkTCPPersistentTimeout-32         7798         1627  -79.14%\n\nR=golang-dev, iant, bradfitz, dave, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/7579044",
			"disapproval": false,
			"date": "2013-03-14 15:06:46.510420",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/14 15:06:46, dvyukov wrote:\n> *** Submitted as https://code.google.com/p/go/source/detail?r=f9c03cd9bd84 ***\n> runtime: integrated network poller for linux\n\nHowdy\n\nI'm seeing some kind of regression related to UNIX socket pairs and net.FileConn.\n\nI have a test that makes a socket pair with syscall.Socketpair and then exchanges another socket pair over the first pair.\n\nWhen I call net.FileConn on the received socket I get a syscall.Errno with a value of -EEXIST (note the minus).\n\nThe simplest test I wrote doesn't reproduce the problem, so I have to go dig a test out of a larger piece of code.\n\nPosting now, in case it rings a bell.\n\nCheers\n\nAlbert",
			"disapproval": false,
			"date": "2013-03-16 00:32:15.821400",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/16 00:32:15, albert.strasheim wrote:\n> On 2013/03/14 15:06:46, dvyukov wrote:\n> > *** Submitted as https://code.google.com/p/go/source/detail?r=f9c03cd9bd84 ***\n> > runtime: integrated network poller for linux\n> I'm seeing some kind of regression related to UNIX socket pairs and\n> net.FileConn.\n> I have a test that makes a socket pair with syscall.Socketpair and then\n> exchanges another socket pair over the first pair.\n> When I call net.FileConn on the received socket I get a syscall.Errno with a\n> value of -EEXIST (note the minus).\n\nhttps://code.google.com/p/go/issues/detail?id=5061",
			"disapproval": false,
			"date": "2013-03-16 01:04:40.259940",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 7579044: runtime: integrated network poller for linux",
	"created": "2013-03-07 23:58:24.226650",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		11001,
		14001,
		19001,
		20001,
		28001,
		30001,
		29021,
		35001,
		38001,
		3004,
		53001,
		58001,
		60001
	],
	"modified": "2013-03-16 01:04:40.517300",
	"closed": true,
	"issue": 7579044
}