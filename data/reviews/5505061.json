{
	"description": "testing: make signalling safer for parallel tests\nEach test gets a private signal channel.\nAlso fix a bug that prevented parallel tests from running.",
	"cc": [
		"r@golang.org",
		"r@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2011-12-21 23:52:36.606765",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Dec 22, 2011, at 10:34 AM, rsc@golang.org wrote:\n\n> LGTM\n> \n> If you want to add a comment, the bug this avoids is that\n> it is a common mistake to kick off a goroutine during a test\n> and then to call t.Fatal from that goroutine, which will send\n> on t.signal.  When the test's main goroutine eventually returns,\n> it too will send on t.signal.  This new code only reads a\n> single non-nil value from t.signal, so the spurious message\n> will not be delivered and cause confusion about how many\n> tests are running and which are done.\n\nroger wilco\n\n> http://codereview.appspot.com/5505061/diff/1/src/pkg/testing/testing.go\n> File src/pkg/testing/testing.go (right):\n> \n> http://codereview.appspot.com/5505061/diff/1/src/pkg/testing/testing.go#newcode185\n> src/pkg/testing/testing.go:185: t.signal <- (*T)(nil) // Release main\n> testing loop\n> Why the *T?\n\nthe channel has type interface{}. we want a typed nil here (or a type-test below; it seemed nicer here)\n\n> http://codereview.appspot.com/5505061/diff/1/src/pkg/testing/testing.go#newcode243\n> src/pkg/testing/testing.go:243: var signalStream = make(chan\n> interface{})\n> s/signalStream/background/?\n\nis it a background? i admit signalStream is not a great name. for a while i called it signals. collector?\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-12-22 18:37:32.993566",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is for Russ. There was some problem in prior testing that was made harder by a shared channel. I'm not sure what that problem was, and all I've done here (beyond adding a conversion to fix a bug) is make the sharing more explicit. It should be semantically equivalent.  Russ, if this isn't what you're after, please explain.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-12-22 00:02:53.928512",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"r@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as 8206c6c7ebd4 ***\n\ntesting: make signalling safer for parallel tests\nEach test gets a private signal channel.\nAlso fix a bug that prevented parallel tests from running.\n\nR=r, r\nCC=golang-dev\nhttp://codereview.appspot.com/5505061",
			"disapproval": false,
			"date": "2011-12-22 18:44:08.569664",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"r@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nIf you want to add a comment, the bug this avoids is that\nit is a common mistake to kick off a goroutine during a test\nand then to call t.Fatal from that goroutine, which will send\non t.signal.  When the test's main goroutine eventually returns,\nit too will send on t.signal.  This new code only reads a\nsingle non-nil value from t.signal, so the spurious message\nwill not be delivered and cause confusion about how many\ntests are running and which are done.\n\nhttp://codereview.appspot.com/5505061/diff/1/src/pkg/testing/testing.go\nFile src/pkg/testing/testing.go (right):\n\nhttp://codereview.appspot.com/5505061/diff/1/src/pkg/testing/testing.go#newcode185\nsrc/pkg/testing/testing.go:185: t.signal <- (*T)(nil) // Release main testing loop\nWhy the *T?\n\nhttp://codereview.appspot.com/5505061/diff/1/src/pkg/testing/testing.go#newcode243\nsrc/pkg/testing/testing.go:243: var signalStream = make(chan interface{})\ns/signalStream/background/?",
			"disapproval": false,
			"date": "2011-12-22 18:34:17.523027",
			"approval": true
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5505061: testing: make signalling safer for parallel tests",
	"created": "2011-12-21 23:52:33.445227",
	"patchsets": [
		1,
		3002
	],
	"modified": "2011-12-26 23:27:22.229331",
	"closed": true,
	"issue": 5505061
}