{
	"description": "Package xml: Add ability to use non-string fields as attributes.",
	"cc": [
		"kevlar@google.com",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "ushakov@google.com",
			"recipients": [
				"ushakov@google.com",
				"golang-dev@googlegroups.com",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, kevlar@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-06-02 17:29:34.754188",
			"approval": false
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"ushakov@google.com",
				"golang-dev@googlegroups.com",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "My <answer/> example was incomplete.  Take this somewhat more plausible example:\n\n<port>80</port>\n<port>\n  80\n  <ssl version=\"3\">\n    <cert>/path/to/cert</cert>\n  </ssl>\n</port>\n\nhttp://codereview.appspot.com/4528114/diff/9001/src/pkg/xml/read.go\nFile src/pkg/xml/read.go (right):\n\nhttp://codereview.appspot.com/4528114/diff/9001/src/pkg/xml/read.go#newcode120\nsrc/pkg/xml/read.go:120: //      maps the sub-element to that struct field.\nNot sure if it's supposed to be undocumented, but something should probably also be said about the \"comment\" tag, so you may add it if you feel adventurous.\n\nhttp://codereview.appspot.com/4528114/diff/9001/src/pkg/xml/read.go#newcode478\nsrc/pkg/xml/read.go:478: func putData(data []byte, where reflect.Value) (err os.Error) {\nI'm not sure what the standard name for this would be, but I think it might be more idiomatically named:\n\nfunc copyValue(dst reflect.Value, src []byte) (err os.Error)\n\nhttp://codereview.appspot.com/4528114/diff/9001/src/pkg/xml/read_test.go\nFile src/pkg/xml/read_test.go (right):\n\nhttp://codereview.appspot.com/4528114/diff/9001/src/pkg/xml/read_test.go#newcode359\nsrc/pkg/xml/read_test.go:359: </attrtest>\nYou need some more thorough tests.  Off the top of my head, I know I'd like to see tests using types whose underlying type is not a string.",
			"disapproval": false,
			"date": "2011-06-02 19:20:13.677678",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Using non-string types for attributes seems fine.\nI don't see any reason this would make things\ninherently more expensive.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-06-02 19:31:18.641785",
			"approval": false
		},
		{
			"sender": "ushakov@google.com",
			"recipients": [
				"ushakov@google.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-06-01 18:54:09.898928",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"ushakov@google.com",
				"golang-dev@googlegroups.com",
				"kevlar@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/4528114/diff/14001/src/pkg/xml/read.go\nFile src/pkg/xml/read.go (right):\n\nhttp://codereview.appspot.com/4528114/diff/14001/src/pkg/xml/read.go#newcode122\nsrc/pkg/xml/read.go:122: // Unmarshal maps an XML element or attribute value to a string or\nThis is weird because it talks about \"that element\" later.\nMaybe undo the change and then add at the end of this paragraph\n\n// Unmarshal maps an attribute value to a string or []byte by saving the value in the string.\n\nhttp://codereview.appspot.com/4528114/diff/14001/src/pkg/xml/read.go#newcode126\nsrc/pkg/xml/read.go:126: // Unmarshal maps an XML element or attribute value to a slice by\nsame",
			"disapproval": false,
			"date": "2011-06-03 17:57:34.204502",
			"approval": true
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"ushakov@google.com",
				"golang-dev@googlegroups.com",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I have mild objections to this.  This seems to set the precedent that we can allow any XML PCDATA to be stored in any compatible data type, which adds a lot of processing up-front when you parse the XML data structure that may never get used, and XML unmarshal is already relatively intensive.  I won't stand in your way though.\n\nIf you do go this route, I think you shouldn't go half-way: make it possible for \"chardata\" attributes to also be non-strings as well.\n\nThen you can do <answer>42</answer> and have it interpreted as an int.\n\nI would also like to see some discussion about non-string attributes in the Unmarshal documentation.  There's no point implementing it if it's not documented.",
			"disapproval": false,
			"date": "2011-06-01 20:47:01.832633",
			"approval": false
		},
		{
			"sender": "ushakov@google.com",
			"recipients": [
				"ushakov@google.com",
				"golang-dev@googlegroups.com",
				"kevlar@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4528114/diff/9001/src/pkg/xml/read.go\nFile src/pkg/xml/read.go (right):\n\nhttp://codereview.appspot.com/4528114/diff/9001/src/pkg/xml/read.go#newcode120\nsrc/pkg/xml/read.go:120: //      maps the sub-element to that struct field.\nOn 2011/06/02 19:20:13, kevlar wrote:\n> Not sure if it's supposed to be undocumented, but something should probably also\n> be said about the \"comment\" tag, so you may add it if you feel adventurous.\n\nDone.\n\nhttp://codereview.appspot.com/4528114/diff/9001/src/pkg/xml/read.go#newcode478\nsrc/pkg/xml/read.go:478: func putData(data []byte, where reflect.Value) (err os.Error) {\nOn 2011/06/02 19:20:13, kevlar wrote:\n> I'm not sure what the standard name for this would be, but I think it might be\n> more idiomatically named:\n> \n> func copyValue(dst reflect.Value, src []byte) (err os.Error)\n\nDone.\n\nhttp://codereview.appspot.com/4528114/diff/9001/src/pkg/xml/read_test.go\nFile src/pkg/xml/read_test.go (right):\n\nhttp://codereview.appspot.com/4528114/diff/9001/src/pkg/xml/read_test.go#newcode359\nsrc/pkg/xml/read_test.go:359: </attrtest>\nOn 2011/06/02 19:20:13, kevlar wrote:\n> You need some more thorough tests.  Off the top of my head, I know I'd like to\n> see tests using types whose underlying type is not a string.\n\nNot sure I understand you. This test already tests an int, a float, a uint8, and a bool, which all are not backed by strings. Can you please elaborate what are you asking for? Thanks!\n\nhttp://codereview.appspot.com/4528114/diff/14001/src/pkg/xml/read.go\nFile src/pkg/xml/read.go (right):\n\nhttp://codereview.appspot.com/4528114/diff/14001/src/pkg/xml/read.go#newcode122\nsrc/pkg/xml/read.go:122: // Unmarshal maps an XML element or attribute value to a string or\nOn 2011/06/03 17:57:34, rsc wrote:\n> This is weird because it talks about \"that element\" later.\n> Maybe undo the change and then add at the end of this paragraph\n> \n> // Unmarshal maps an attribute value to a string or []byte by saving the value\n> in the string.\n> \n\nDone.\n\nhttp://codereview.appspot.com/4528114/diff/14001/src/pkg/xml/read.go#newcode126\nsrc/pkg/xml/read.go:126: // Unmarshal maps an XML element or attribute value to a slice by\nOn 2011/06/03 17:57:34, rsc wrote:\n> same\n\nOh, actually we cannot map attributes to non-trivial (i.e. non-[]byte) slices, so the change is irrelevant here.",
			"disapproval": false,
			"date": "2011-06-03 18:10:55.579761",
			"approval": false
		},
		{
			"sender": "ushakov@google.com",
			"recipients": [
				"ushakov@google.com",
				"golang-dev@googlegroups.com",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hi\n\nI'm sorry I don't fully understand your objections. Current implementation already allows for <answer>42</answer> to be unmarshalled as int (see docs:\n\nUnmarshal maps an XML element to an integer or floating-point field by setting the field to the result of interpreting the string value in decimal. There is no check for overflow.\n\n), at http://golang.org/pkg/xml/\n\nI just wanted the same to be available in attrs.\n\nI have slightly updated the documentation to talk about attributes also. What do you think?\n\nThanks for review!\n\nM.",
			"disapproval": false,
			"date": "2011-06-02 17:30:58.582605",
			"approval": false
		},
		{
			"sender": "ushakov@google.com",
			"recipients": [
				"ushakov@google.com",
				"golang-dev@googlegroups.com",
				"kevlar@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Please take another look.",
			"disapproval": false,
			"date": "2011-06-07 20:04:29.105671",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"ushakov@google.com",
				"kevlar@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nThanks.",
			"disapproval": false,
			"date": "2011-06-14 15:49:47.440136",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"ushakov@google.com",
				"kevlar@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=138cdbcafce8 ***\n\nxml: handle non-string attribute fields\n\nR=kevlar, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/4528114\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2011-06-14 15:51:07.198187",
			"approval": false
		}
	],
	"owner_email": "ushakov@google.com",
	"private": false,
	"base_url": "",
	"owner": "ushakov",
	"subject": "code review 4528114: Package xml: Add ability to use non-string fields as at...",
	"created": "2011-06-01 18:52:00.780047",
	"patchsets": [
		1,
		2001,
		5001,
		9001,
		14001,
		2002
	],
	"modified": "2011-06-14 15:51:07.198187",
	"closed": false,
	"issue": 4528114
}