{
	"description": "exp/sql: simplify some string conversions.",
	"cc": [
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=d5dc37ad6f3b ***\n\nexp/sql: simplify some string conversions.\n\nR=bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5451112",
			"disapproval": false,
			"date": "2011-12-07 21:08:08.462091",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-07 12:46:35.921860",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nOn Dec 7, 2011 4:46 AM, <dsymonds@golang.org> wrote:\n\n> Reviewers: bradfitz,\n>\n> Message:\n> Hello bradfitz (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> exp/sql: simplify some string conversions.\n>\n> Please review this at http://codereview.appspot.com/**5451112/<http://codereview.appspot.com/5451112/>\n>\n> Affected files:\n>  M src/pkg/exp/sql/convert.go\n>  M src/pkg/exp/sql/convert_test.**go\n>\n>\n> Index: src/pkg/exp/sql/convert.go\n> ==============================**==============================**=======\n> --- a/src/pkg/exp/sql/convert.go\n> +++ b/src/pkg/exp/sql/convert.go\n> @@ -95,35 +95,26 @@\n>        switch dv.Kind() {\n>        case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32,\n> reflect.Int64:\n>                s := asString(src)\n> -               i64, err := strconv.ParseInt(s, 10, 64)\n> +               i64, err := strconv.ParseInt(s, 10, dv.Type().Bits())\n>                if err != nil {\n>                        return fmt.Errorf(\"converting string %q to a %s:\n> %v\", s, dv.Kind(), err)\n>                }\n> -               if dv.OverflowInt(i64) {\n> -                       return fmt.Errorf(\"string %q overflows %s\", s,\n> dv.Kind())\n> -               }\n>                dv.SetInt(i64)\n>                return nil\n>        case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32,\n> reflect.Uint64:\n>                s := asString(src)\n> -               u64, err := strconv.ParseUint(s, 10, 64)\n> +               u64, err := strconv.ParseUint(s, 10, dv.Type().Bits())\n>                if err != nil {\n>                        return fmt.Errorf(\"converting string %q to a %s:\n> %v\", s, dv.Kind(), err)\n>                }\n> -               if dv.OverflowUint(u64) {\n> -                       return fmt.Errorf(\"string %q overflows %s\", s,\n> dv.Kind())\n> -               }\n>                dv.SetUint(u64)\n>                return nil\n>        case reflect.Float32, reflect.Float64:\n>                s := asString(src)\n> -               f64, err := strconv.ParseFloat(s, 64)\n> +               f64, err := strconv.ParseFloat(s, dv.Type().Bits())\n>                if err != nil {\n>                        return fmt.Errorf(\"converting string %q to a %s:\n> %v\", s, dv.Kind(), err)\n>                }\n> -               if dv.OverflowFloat(f64) {\n> -                       return fmt.Errorf(\"value %q overflows %s\", s,\n> dv.Kind())\n> -               }\n>                dv.SetFloat(f64)\n>                return nil\n>        }\n> Index: src/pkg/exp/sql/convert_test.**go\n> ==============================**==============================**=======\n> --- a/src/pkg/exp/sql/convert_**test.go\n> +++ b/src/pkg/exp/sql/convert_**test.go\n> @@ -55,7 +55,7 @@\n>\n>        // Strings to integers\n>        {s: \"255\", d: &scanuint8, wantuint: 255},\n> -       {s: \"256\", d: &scanuint8, wanterr: `string \"256\" overflows uint8`},\n> +       {s: \"256\", d: &scanuint8, wanterr: `converting string \"256\" to a\n> uint8: parsing \"256\": value out of range`},\n>        {s: \"256\", d: &scanuint16, wantuint: 256},\n>        {s: \"-1\", d: &scanint, wantint: -1},\n>        {s: \"foo\", d: &scanint, wanterr: `converting string \"foo\" to a int:\n> parsing \"foo\": invalid syntax`},\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-12-07 19:58:38.231302",
			"approval": true
		}
	],
	"owner_email": "dsymonds@golang.org",
	"private": false,
	"base_url": "",
	"owner": "dsymonds",
	"subject": "code review 5451112: exp/sql: simplify some string conversions.",
	"created": "2011-12-07 12:46:11.968932",
	"patchsets": [
		1,
		2001,
		3,
		1002
	],
	"modified": "2011-12-07 21:08:10.737073",
	"closed": true,
	"issue": 5451112
}