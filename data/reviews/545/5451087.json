{
	"description": "net/smtp: add CRAM-MD5 authentication",
	"cc": [
		"golang-dev@googlegroups.com",
		"edsrzf@gmail.com",
		"bradfitz@golang.org",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "unixdj@gmail.com",
			"recipients": [
				"unixdj@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-03 02:57:40.756170",
			"approval": false
		},
		{
			"sender": "unixdj@gmail.com",
			"recipients": [
				"unixdj@gmail.com",
				"golang-dev@googlegroups.com",
				"edsrzf@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, edsrzf@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-03 18:31:45.448897",
			"approval": false
		},
		{
			"sender": "edsrzf@gmail.com",
			"recipients": [
				"unixdj@gmail.com",
				"golang-dev@googlegroups.com",
				"edsrzf@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks pretty good.\n\nI started writing this when I wrote the package but couldn't find a free mail server that used this mechanism so couldn't test it. (Also couldn't be troubled to set up my own.) What server are you testing against?\n\n- Evan\n\nhttp://codereview.appspot.com/5451087/diff/3/src/pkg/net/smtp/auth.go\nFile src/pkg/net/smtp/auth.go (right):\n\nhttp://codereview.appspot.com/5451087/diff/3/src/pkg/net/smtp/auth.go#newcode73\nsrc/pkg/net/smtp/auth.go:73: type cramMd5Auth struct {\nShould be named cramMD5Auth\n\nhttp://codereview.appspot.com/5451087/diff/3/src/pkg/net/smtp/auth.go#newcode88\nsrc/pkg/net/smtp/auth.go:88: if server.Name != a.host {\nI think the reason we added this check in plainAuth was because we were requiring TLS. If every Auth implementation has to have this check, then we should move it somewhere else to avoid repetition.",
			"disapproval": false,
			"date": "2011-12-03 16:57:05.094476",
			"approval": false
		},
		{
			"sender": "unixdj@gmail.com",
			"recipients": [
				"unixdj@gmail.com",
				"golang-dev@googlegroups.com",
				"edsrzf@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/12/03 16:57:05, eds2 wrote:\n> Looks pretty good.\n\nThank you, kind Sir!\n\n> What server are you testing against?\n\nI happen to have my own (running Exim).\n\n=> http://codereview.appspot.com/5451087/diff/3/src/pkg/net/smtp/auth.go#newcode73\n> src/pkg/net/smtp/auth.go:73: type cramMd5Auth struct {\n> Should be named cramMD5Auth\n\nOk.  I'm a little confused by Go capitalisation traditions.\n \n> http://codereview.appspot.com/5451087/diff/3/src/pkg/net/smtp/auth.go#newcode88\n> src/pkg/net/smtp/auth.go:88: if server.Name != a.host {\n> I think the reason we added this check in plainAuth was because we were\n> requiring TLS. If every Auth implementation has to have this check, then we\n> should move it somewhere else to avoid repetition.\n\nWith PLAIN there's also a danger of sending a plaintext password to random hosts.  But I think the caller should take care of matching SMTP connection with the Auth anyway.  That is, Auth may be the place to fail the transaction, but not for the reason of host mismatch, *especially* if the host string came from the caller anyway.  But I'm rambling.\n\nI'm removing host from the structure 'cuz it's deemed useless.\n\nVadik.",
			"disapproval": false,
			"date": "2011-12-03 18:26:40.335473",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Dec 3, 2011 at 10:26 AM, <unixdj@gmail.com> wrote:\n\n>\n> http://codereview.appspot.com/**5451087/diff/3/src/pkg/net/**\n> smtp/auth.go#newcode73<http://codereview.appspot.com/5451087/diff/3/src/pkg/net/smtp/auth.go#newcode73>\n>\n>> src/pkg/net/smtp/auth.go:73: type cramMd5Auth struct {\n>> Should be named cramMD5Auth\n>>\n>\n> Ok.  I'm a little confused by Go capitalisation traditions.\n\n\nprivateFooBar\nPublicFooBar\n\nBut each letter of an acronym should have the same case as its first letter:\n\nprivateMD5Bar\nmd5FooBar\n",
			"disapproval": false,
			"date": "2011-12-05 16:29:43.160945",
			"approval": false
		},
		{
			"sender": "edsrzf@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Dec 4, 2011 at 7:26 AM,  <unixdj@gmail.com> wrote:\n> Ok. \u00a0I'm a little confused by Go capitalisation traditions.\n\nI thought we always capitalized abbreviations and acronyms even if the\nidentifiers weren't exported, but I'm finding a few counterexamples in\nthe code base. Someone else will chime in. Sorry if I was wrong and\ncaused extra work.\n\n> With PLAIN there's also a danger of sending a plaintext password to\n> random hosts. \u00a0But I think the caller should take care of matching SMTP\n> connection with the Auth anyway. \u00a0That is, Auth may be the place to fail\n> the transaction, but not for the reason of host mismatch, *especially*\n> if the host string came from the caller anyway. \u00a0But I'm rambling.\n>\n> I'm removing host from the structure 'cuz it's deemed useless.\n\nThat sounds fine to me.\n\nI can't submit CLs and I'm also on vacation, so someone else will have\nto finish this. I haven't reread the RFC or tried testing the code so\nwhoever follows up should look more closely at correctness.\n\n- Evan\n",
			"disapproval": false,
			"date": "2011-12-04 06:15:03.329505",
			"approval": false
		},
		{
			"sender": "unixdj@gmail.com",
			"recipients": [
				"unixdj@gmail.com",
				"golang-dev@googlegroups.com",
				"edsrzf@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/12/05 16:29:43, bradfitz wrote:\n> On Sat, Dec 3, 2011 at 10:26 AM, <mailto:unixdj@gmail.com> wrote:\n> \n> >\n> > http://codereview.appspot.com/**5451087/diff/3/src/pkg/net/**\n> >\n> smtp/auth.go#newcode73<http://codereview.appspot.com/5451087/diff/3/src/pkg/net/smtp/auth.go#newcode73>\n> >\n> >> src/pkg/net/smtp/auth.go:73: type cramMd5Auth struct {\n> >> Should be named cramMD5Auth\n> >>\n> >\n> > Ok.  I'm a little confused by Go capitalisation traditions.\n> \n> \n> privateFooBar\n> PublicFooBar\n> \n> But each letter of an acronym should have the same case as its first letter:\n> \n> privateMD5Bar\n> md5FooBar",
			"disapproval": false,
			"date": "2011-12-09 11:34:34.240310",
			"approval": false
		},
		{
			"sender": "unixdj@gmail.com",
			"recipients": [
				"unixdj@gmail.com",
				"golang-dev@googlegroups.com",
				"edsrzf@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/12/05 16:29:43, bradfitz wrote:\n> privateFooBar\n> PublicFooBar\n> \n> But each letter of an acronym should have the same case as its first letter:\n> \n> privateMD5Bar\n> md5FooBar\n\nCRAM is also an acronym, so this implies CRAMMD5Auth or CRAM_MD5Auth, which doesn't seem to fit.",
			"disapproval": false,
			"date": "2011-12-09 11:36:59.288537",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Dec 9, 2011 at 06:36,  <unixdj@gmail.com> wrote:\n> CRAM is also an acronym, so this implies CRAMMD5Auth or CRAM_MD5Auth,\n> which doesn't seem to fit.\n\nCRAMMD5Auth it is.\nnot our fault they picked a bad name.\n",
			"disapproval": false,
			"date": "2011-12-09 14:33:46.068207",
			"approval": false
		},
		{
			"sender": "unixdj@gmail.com",
			"recipients": [
				"unixdj@gmail.com",
				"golang-dev@googlegroups.com",
				"edsrzf@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, edsrzf@gmail.com, bradfitz@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-13 22:45:50.573569",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n",
			"disapproval": false,
			"date": "2011-12-14 21:54:18.404476",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"unixdj@gmail.com",
				"golang-dev@googlegroups.com",
				"edsrzf@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=8eace077b51d ***\n\nnet/smtp: add CRAM-MD5 authentication\n\nR=golang-dev, edsrzf, bradfitz, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5451087\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2011-12-14 22:17:28.153696",
			"approval": false
		}
	],
	"owner_email": "unixdj@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "vadik",
	"subject": "code review 5451087: net/smtp: add CRAM-MD5 authentication",
	"created": "2011-12-03 02:55:43.406625",
	"patchsets": [
		1,
		3,
		2003,
		11001
	],
	"modified": "2011-12-14 22:17:28.153696",
	"closed": false,
	"issue": 5451087
}