{
	"description": "crypto/aes: eliminate some bounds checking and manual truncation.\n\nBy converting array indices to uint8, they are automatically\nconstrained in the array range, and the binary AND with 0xff\nis no longer needed anymore.\n\nBefore:  aes.BenchmarkEncrypt    363 ns/op\nAfter:   aes.BenchmarkEncrypt    273 ns/op",
	"cc": [
		"golang-dev@googlegroups.com",
		"gri@golang.org",
		"agl@golang.org",
		"remy@archlinux.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-03 09:17:36.364173",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/12/03 09:17:36, remyoudompheng wrote:\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n\nThis is a followup to CL 5449077. The benchmark code is stolen from there, and the changes are independent.\n\nR\u00e9my.",
			"disapproval": false,
			"date": "2011-12-03 09:20:03.037215",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Some comments.\nLeaving for agl.\n\nhttp://codereview.appspot.com/5450084/diff/1002/src/pkg/crypto/aes/block.go\nFile src/pkg/crypto/aes/block.go (right):\n\nhttp://codereview.appspot.com/5450084/diff/1002/src/pkg/crypto/aes/block.go#newcode59\nsrc/pkg/crypto/aes/block.go:59: t0 = xk[k+0] ^ te[0][uint8(s0>>24)] ^ te[1][uint8(s1>>16)] ^ te[2][uint8(s2>>8)] ^ te[3][uint8(s3)]\nIt seems to me that only the very first conversion might be necessary since in all the other cases, the compiler should be able to tell that the value is in the range 0..255 since we're and'ing with 0xff. If not, I'd rather have the compiler be smarter and track that range information.\n\nIn fact, it could even know this for the first index, since it's a uint32 shifted right by 24.\n\nThis would require some extra information in the compiler (which may not be present at the moment), but even if it is not propagated past a single expression, it would \"fix\" this case. I'd be surprised of gccgo not already does this.\n\nThis applies to all the changes. I am not against this CL, but I think it would be better if the compiler would do the right thing.",
			"disapproval": false,
			"date": "2011-12-03 18:53:22.624926",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "np. it's fine as it is. just something for a compiler to do in the future.\n(either way we have to write either the uint8 cast or the & 0xff, so\nit doesn't really matter much)\n- gri\n\nOn Mon, Dec 5, 2011 at 9:38 AM,  <agl@golang.org> wrote:\n> I agree that it would be nice if the compiler did this for us, but I\n> don't think the change is ugly and, as a practical matter, the speed up\n> is nice.\n>\n> So I'm inclined to land the patch unless rsc want's to jump in and say\n> that the compiler will do this - no problem.\n>\n> http://codereview.appspot.com/5450084/\n",
			"disapproval": false,
			"date": "2011-12-05 18:05:39.791957",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"agl@golang.org",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=7c18a8ff01f7 ***\n\ncrypto/aes: eliminate some bounds checking and manual truncation.\n\nBy converting array indices to uint8, they are automatically\nconstrained in the array range, and the binary AND with 0xff\nis no longer needed anymore.\n\nBefore:  aes.BenchmarkEncrypt    363 ns/op\nAfter:   aes.BenchmarkEncrypt    273 ns/op\n\nR=golang-dev, gri, agl\nCC=golang-dev, remy\nhttp://codereview.appspot.com/5450084\n\nCommitter: Adam Langley <agl@golang.org>",
			"disapproval": false,
			"date": "2011-12-05 18:31:13.790729",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I agree that it would be nice if the compiler did this for us, but I don't think the change is ugly and, as a practical matter, the speed up is nice.\n\nSo I'm inclined to land the patch unless rsc want's to jump in and say that the compiler will do this - no problem.",
			"disapproval": false,
			"date": "2011-12-05 17:38:19.490404",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 5450084: crypto/aes: eliminate some bounds checking and manual t...",
	"created": "2011-12-03 09:17:19.590247",
	"patchsets": [
		1,
		1002
	],
	"modified": "2011-12-07 20:58:14.930811",
	"closed": true,
	"issue": 5450084
}