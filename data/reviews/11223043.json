{
	"description": "cmd/5g, cmd/6g, cmd/8g: fix line number of caller of deferred func\n\nDeferred functions are not run by a call instruction. They are run by\nthe runtime editing registers to make the call start with a caller PC\nreturning to a\n        CALL deferreturn\ninstruction.\n\nThat instruction has always had the line number of the function's\nclosing brace, but that instruction's line number is irrelevant.\nStack traces show the line number of the instruction before the\nreturn PC, because normally that's what started the call. Not so here.\nThe instruction before the CALL deferreturn could be almost anywhere\nin the function; it's unrelated and its line number is incorrect to show.\n\nFix the line number by inserting a true hardware no-op with the right\nline number before the returned-to CALL instruction. That is, the deferred\ncalls now appear to start with a caller PC returning to the second instruction\nin this sequence:\n        NOP\n        CALL deferreturn\n\nThe traceback will show the line number of the NOP, which we've set\nto be the line number of the function's closing brace.\n\nThe NOP here is not the usual pseudo-instruction, which would be\nelided by the linker. Instead it is the real hardware instruction:\nXCHG AX, AX on 386 and amd64, and AND.EQ R0, R0, R0 on ARM.\n\nFixes issue 5856.",
	"cc": [
		"ken@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"khr@google.com"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=14ded0061c96 ***\n\ncmd/5g, cmd/6g, cmd/8g: fix line number of caller of deferred func\n\nDeferred functions are not run by a call instruction. They are run by\nthe runtime editing registers to make the call start with a caller PC\nreturning to a\n        CALL deferreturn\ninstruction.\n\nThat instruction has always had the line number of the function's\nclosing brace, but that instruction's line number is irrelevant.\nStack traces show the line number of the instruction before the\nreturn PC, because normally that's what started the call. Not so here.\nThe instruction before the CALL deferreturn could be almost anywhere\nin the function; it's unrelated and its line number is incorrect to show.\n\nFix the line number by inserting a true hardware no-op with the right\nline number before the returned-to CALL instruction. That is, the deferred\ncalls now appear to start with a caller PC returning to the second instruction\nin this sequence:\n        NOP\n        CALL deferreturn\n\nThe traceback will show the line number of the NOP, which we've set\nto be the line number of the function's closing brace.\n\nThe NOP here is not the usual pseudo-instruction, which would be\nelided by the linker. Instead it is the real hardware instruction:\nXCHG AX, AX on 386 and amd64, and AND.EQ R0, R0, R0 on ARM.\n\nFixes issue 5856.\n\nR=ken2, ken\nCC=golang-dev\nhttps://codereview.appspot.com/11223043",
			"disapproval": false,
			"date": "2013-07-12 17:47:59.776630",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello ken2, ken@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-07-12 17:47:52.188950",
			"approval": false
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This looks like it generates the two-byte nop \"87 c0\" (xchg %eax,%eax).\r\n Why not the one-byte \"90\" nop?  Did you just not want to add a new\r\nAREALNOP instruction?\r\n\r\n\r\nOn Fri, Jul 12, 2013 at 10:47 AM, <rsc@golang.org> wrote:\r\n\r\n> *** Submitted as\r\n> https://code.google.com/p/go/**source/detail?r=14ded0061c96<https://code.google.com/p/go/source/detail?r=14ded0061c96>***\r\n>\r\n>\r\n> cmd/5g, cmd/6g, cmd/8g: fix line number of caller of deferred func\r\n>\r\n> Deferred functions are not run by a call instruction. They are run by\r\n> the runtime editing registers to make the call start with a caller PC\r\n> returning to a\r\n>         CALL deferreturn\r\n> instruction.\r\n>\r\n> That instruction has always had the line number of the function's\r\n> closing brace, but that instruction's line number is irrelevant.\r\n> Stack traces show the line number of the instruction before the\r\n> return PC, because normally that's what started the call. Not so here.\r\n> The instruction before the CALL deferreturn could be almost anywhere\r\n> in the function; it's unrelated and its line number is incorrect to\r\n> show.\r\n>\r\n> Fix the line number by inserting a true hardware no-op with the right\r\n> line number before the returned-to CALL instruction. That is, the\r\n> deferred\r\n> calls now appear to start with a caller PC returning to the second\r\n> instruction\r\n> in this sequence:\r\n>         NOP\r\n>         CALL deferreturn\r\n>\r\n> The traceback will show the line number of the NOP, which we've set\r\n> to be the line number of the function's closing brace.\r\n>\r\n> The NOP here is not the usual pseudo-instruction, which would be\r\n> elided by the linker. Instead it is the real hardware instruction:\r\n> XCHG AX, AX on 386 and amd64, and AND.EQ R0, R0, R0 on ARM.\r\n>\r\n> Fixes issue 5856.\r\n>\r\n> R=ken2, ken\r\n> CC=golang-dev\r\n> https://codereview.appspot.**com/11223043<https://codereview.appspot.com/11223043>\r\n>\r\n>\r\n> https://codereview.appspot.**com/11223043/<https://codereview.appspot.com/11223043/>\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-12 21:13:37.108090",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Wow, I'm amazed you found that.\r\n\r\n6l and 8l did not know about the special case for XCHG AX, reg, so they\r\nwere using the general form.\r\n\r\nWe've gotten so far without any use cases for a REALNOP instruction that I\r\ndon't want to add one just yet. I updated 6l and 8l to use the one-byte\r\nform for XCHG AX, reg (and vice versa).\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-07-13 00:58:53.905870",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 11223043: cmd/5g, cmd/6g, cmd/8g: fix line number of caller of de...",
	"created": "2013-07-12 17:28:39.020480",
	"patchsets": [
		1,
		3001,
		6001,
		4005
	],
	"modified": "2013-07-13 00:58:53.960820",
	"closed": true,
	"issue": 11223043
}