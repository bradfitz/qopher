{
	"description": "runtime/race: add unit tests for race detector",
	"cc": [
		"golang-dev@googlegroups.com",
		"remyoudompheng@gmail.com",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What do you think about high-level organisation?\n\nAll test files except race_test.go are +build ignore.\nrace_test.go executes 'go test -race -v all_other_test_files', and parses the output.\nFor tests starting with func TestRaceXXX it expects a race to be detected. For tests starting with func TestNoRaceXXX it expects no race to be detected.\nThen prints summary along the lines of:\nNoRaceFin                                .\nRaceFin                                  FAILED\nNoRaceCgoSync                            .\nNoRaceIOFile                             .\nNoRaceIOHttp                             .\nPassed 209 of 229 tests (91.27%, 0+, 20-).\n\n0+ means 0 false positives.\n20- means 20 false negatives.\n\nI think I need to add \"expected failures\" to be able to run it on buildbot.",
			"disapproval": false,
			"date": "2012-10-07 18:25:45.781800",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-10-07 18:15:33.074680",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/01 19:51:29, remyoudompheng wrote:\n> A test case I stumbled upon today:\n> \n> package main\n> \n> func Encode() ([]byte, error) {\n> \tt := []byte(\"hello world\")\n> \treturn t, nil\n> }\n> \n> func main() {\n> \tvar s []byte\n> \tch := make(chan bool, 1)\n> \tgo func() {\n> \t\tvar err error\n> \t\ts, err = Encode()\n> \t\tch <- true\n> \t\t_ = err\n> \t}()\n> \tstr := string(s)\n> \t<-ch\n> \t_ = str\n> }\n\n:)\nDid race detector help you?",
			"disapproval": false,
			"date": "2012-11-01 19:59:01.595220",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "A test case I stumbled upon today:\n\npackage main\n\nfunc Encode() ([]byte, error) {\n\tt := []byte(\"hello world\")\n\treturn t, nil\n}\n\nfunc main() {\n\tvar s []byte\n\tch := make(chan bool, 1)\n\tgo func() {\n\t\tvar err error\n\t\ts, err = Encode()\n\t\tch <- true\n\t\t_ = err\n\t}()\n\tstr := string(s)\n\t<-ch\n\t_ = str\n}",
			"disapproval": false,
			"date": "2012-11-01 19:51:29.443140",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It sort of didn't. I wanted to write a trivial example for stack split, so I used \"s, err = json.Marshal(blah)\" since encoding/json is usually stack hungry.\n\nAnd was surprised to see it was not reporting anything for a concurrent read of s. See http://codereview.appspot.com/6821068",
			"disapproval": false,
			"date": "2012-11-01 20:07:28.060920",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/01 20:07:28, remyoudompheng wrote:\n> It sort of didn't. I wanted to write a trivial example for stack split, so I\n> used \"s, err = json.Marshal(blah)\" since encoding/json is usually stack hungry.\n> \n> And was surprised to see it was not reporting anything for a concurrent read of\n> s. See http://codereview.appspot.com/6821068\n\nAh, so it's a false negative case... just figured that's because of OBLOCK... and then looked at your patch :)",
			"disapproval": false,
			"date": "2012-11-02 06:39:00.650270",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I suggest moving the excluded files into a testdata subdirectory. The go command knows to ignore files in testdata directories, even *.go files.",
			"disapproval": false,
			"date": "2012-11-12 21:49:35.301000",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/02 06:39:00, dvyukov wrote:\n> On 2012/11/01 20:07:28, remyoudompheng wrote:\n> > It sort of didn't. I wanted to write a trivial example for stack split, so I\n> > used \"s, err = json.Marshal(blah)\" since encoding/json is usually stack\n> hungry.\n> > \n> > And was surprised to see it was not reporting anything for a concurrent read\n> of\n> > s. See http://codereview.appspot.com/6821068\n> \n> Ah, so it's a false negative case... just figured that's because of OBLOCK...\n> and then looked at your patch :)\n\n\nAdded the tests for OBLOCK:\nhttps://codereview.appspot.com/6525052/diff2/12019:16019/src/pkg/runtime/race/mop_test.go",
			"disapproval": false,
			"date": "2012-11-02 08:05:33.001530",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/10/07 18:25:45, dvyukov wrote:\n> What do you think about high-level organisation?\n> \n> All test files except race_test.go are +build ignore.\n> race_test.go executes 'go test -race -v all_other_test_files', and parses the\n> output.\n> For tests starting with func TestRaceXXX it expects a race to be detected. For\n> tests starting with func TestNoRaceXXX it expects no race to be detected.\n> Then prints summary along the lines of:\n> NoRaceFin                                .\n> RaceFin                                  FAILED\n> NoRaceCgoSync                            .\n> NoRaceIOFile                             .\n> NoRaceIOHttp                             .\n> Passed 209 of 229 tests (91.27%, 0+, 20-).\n> \n> 0+ means 0 false positives.\n> 20- means 20 false negatives.\n> \n> I think I need to add \"expected failures\" to be able to run it on buildbot.\n\nI've added the ability to mark \"expected to fail\" tests. Now this test can pass even with some not-yet-implemented race detector features. I.e. it does not fail go test -race std.\nPTAL",
			"disapproval": false,
			"date": "2012-11-08 16:04:53.663310",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/12 21:49:35, rsc wrote:\n> I suggest moving the excluded files into a testdata subdirectory. The go command\n> knows to ignore files in testdata directories, even *.go files.\n\nDone. PTAL.",
			"disapproval": false,
			"date": "2012-11-14 14:15:58.933820",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6525052/diff/37019/src/pkg/runtime/race/race_test.go\nFile src/pkg/runtime/race/race_test.go (right):\n\nhttps://codereview.appspot.com/6525052/diff/37019/src/pkg/runtime/race/race_test.go#newcode28\nsrc/pkg/runtime/race/race_test.go:28: passedTests, totalTests, falsePos, falseNeg, failingPos, failingNeg int\nplease split these into one per line.\nit will scale better and avoid the comical next line",
			"disapproval": false,
			"date": "2012-11-26 17:11:56.260420",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6525052/diff/37019/src/pkg/runtime/race/race_test.go\nFile src/pkg/runtime/race/race_test.go (right):\n\nhttps://codereview.appspot.com/6525052/diff/37019/src/pkg/runtime/race/race_test.go#newcode28\nsrc/pkg/runtime/race/race_test.go:28: passedTests, totalTests, falsePos, falseNeg, failingPos, failingNeg int\nOn 2012/11/26 17:11:56, rsc wrote:\n> please split these into one per line.\n> it will scale better and avoid the comical next line\n\nDone.",
			"disapproval": false,
			"date": "2012-11-27 11:04:03.274870",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, remyoudompheng@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-23 09:52:39.013440",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=e03ad98f9165 ***\n\nruntime/race: add unit tests for race detector\n\nR=golang-dev, remyoudompheng, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6525052",
			"disapproval": false,
			"date": "2012-11-27 11:05:16.567230",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 6525052: runtime/race: add unit tests for race detector",
	"created": "2012-09-19 20:58:58.006310",
	"patchsets": [
		1,
		4,
		3001,
		6001,
		7019,
		7020,
		11001,
		13001,
		12019,
		16019,
		12020,
		14019,
		18020,
		17021,
		27001,
		30001,
		33001,
		36001,
		37019,
		39001,
		34019
	],
	"modified": "2012-11-27 11:05:17.756170",
	"closed": true,
	"issue": 6525052
}