{
	"description": "net: protocol specific listen functions return a proper local socket address\n\nWhen a nil listener address is passed to some protocol specific\nlisten function, it will create an unnamed, unbound socket because\nof the nil listener address. Other listener functions may return\ninvalid address error.\n\nThis CL allows to pass a nil listener address to all protocol\nspecific listen functions to fix above inconsistency. Also make it\npossible to return a proper local socket address in case of a nil\nlistner address.\n\nFixes issue 4190.\nFixes issue 3847.",
	"cc": [
		"rsc@golang.org",
		"iant@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-10-04 07:24:56.520870",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping",
			"disapproval": false,
			"date": "2012-10-13 17:14:57.089430",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Why is it correct to change the existing behaviour of net.ListenIP?\n\nhttps://codereview.appspot.com/6525048/diff/10001/src/pkg/net/tcpsock_posix.go\nFile src/pkg/net/tcpsock_posix.go (right):\n\nhttps://codereview.appspot.com/6525048/diff/10001/src/pkg/net/tcpsock_posix.go#newcode143\nsrc/pkg/net/tcpsock_posix.go:143: // which must be \"tcp\", \"tcp4\" or \"tcp6\".  If laddr is not nil, it is\nDo not remove the comma after \"tcp4\".  It is correct.\n\nhttps://codereview.appspot.com/6525048/diff/10001/src/pkg/net/tcpsock_posix.go#newcode229\nsrc/pkg/net/tcpsock_posix.go:229: // which must be \"tcp\", \"tcp4\" or \"tcp6\" and returns a TCP listener.\nNeed comma after \"tcp6\".\n\nhttps://codereview.appspot.com/6525048/diff/10001/src/pkg/net/udpsock_posix.go\nFile src/pkg/net/udpsock_posix.go (right):\n\nhttps://codereview.appspot.com/6525048/diff/10001/src/pkg/net/udpsock_posix.go#newcode160\nsrc/pkg/net/udpsock_posix.go:160: // which must be \"udp\", \"udp4\" or \"udp6\".  If laddr is not nil, it is\nThe comma after \"udp4\" is correct.",
			"disapproval": false,
			"date": "2012-10-13 17:40:49.079620",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Like Ian, I don't understand why the restrictions are being added. This program succeeds today:\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n\t\"os/exec\"\n)\n\nfunc main() {\n\tl, err := net.ListenTCP(\"tcp\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(\"listening on\", l.Addr())\n\tcmd := exec.Command(\"lsof\", \"-p\", fmt.Sprint(os.Getpid()))\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\tcmd.Run()\n}\n\nThe only real problem is that l.Addr reports the wrong address. It says \"0.0.0.0:0\" but should say \"0.0.0.0:56518\" or maybe \":56518\".\n\n; go run x.go\nlistening on 0.0.0.0:0\nCOMMAND   PID USER   FD     TYPE             DEVICE  SIZE/OFF     NODE NAME\na.out   98764  rsc  cwd      DIR               14,5     20026   411317 /Users/rsc\na.out   98764  rsc  txt      REG               14,5   2249444 21098624 /private/var/folders/mw/qfnx8hhd1_s9mm9wtbng0hw80000gn/T/go-build370099786/command-line-arguments/_obj/a.out\na.out   98764  rsc  txt      REG               14,5    599280  8779244 /usr/lib/dyld\na.out   98764  rsc  txt      REG               14,5 298217472 18586998 /private/var/db/dyld/dyld_shared_cache_x86_64\na.out   98764  rsc    0u     CHR                4,3  0t197272      324 /dev/ttyp3\na.out   98764  rsc    1u     CHR                4,3  0t197272      324 /dev/ttyp3\na.out   98764  rsc    2u     CHR                4,3  0t197272      324 /dev/ttyp3\na.out   98764  rsc    3u    IPv6 0xffffff800b230340       0t0      TCP *:56518 (LISTEN)\na.out   98764  rsc    4     PIPE 0xffffff800bd6f310     16384          ->0xffffff800bd6e340\na.out   98764  rsc    5     PIPE 0xffffff800bd6e340     16384          ->0xffffff800bd6f310\na.out   98764  rsc    6u  KQUEUE                                       count=0, state=0x2\n;",
			"disapproval": false,
			"date": "2012-10-21 21:22:25.318490",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry for the late response.\n\nOn 2012/10/13 17:40:49, iant wrote:\n> Why is it correct to change the existing behaviour of net.ListenIP?\n\nOn 2012/10/21 21:22:25, rsc wrote:\n> Like Ian, I don't understand why the restrictions are being added. This program\n> succeeds today:\n\nBecause very subtle but API inconsistency out there.\ne.g., \n- Dial,ListenTCP on plan 9 don't accept nil but posix platforms do\n- Dial,ListenTCP on posix accept nil but Dial,ListenUDP don't\n\nI'm fine with whether accepting nil as a dialing or listening address,\njust hope it would be consistent across over platforms and protocol \nspecific Dial/Listen API.",
			"disapproval": false,
			"date": "2012-11-06 08:23:50.121700",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, iant@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-10 05:58:56.417260",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Since it seems like half the things already accept nil, let's say that\r\neverything should.\r\n\r\nThanks.\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-11-06 18:54:34.809790",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/06 18:54:34, rsc wrote:\n> Since it seems like half the things already accept nil, let's say that\n> everything should.\n\nfair enough.",
			"disapproval": false,
			"date": "2012-11-07 18:41:15.997890",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, iant@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-07 18:42:15.022370",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, iant@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-08 22:24:25.567880",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nGlad to see this all uniform. Thanks.\n\nhttps://codereview.appspot.com/6525048/diff/26001/src/pkg/net/tcp_test.go\nFile src/pkg/net/tcp_test.go (right):\n\nhttps://codereview.appspot.com/6525048/diff/26001/src/pkg/net/tcp_test.go#newcode143\nsrc/pkg/net/tcp_test.go:143: if la == nil {\nthe ,ok below will handle nil correctly so you could delete this and use a instead of la in the print below.\n\nhttps://codereview.appspot.com/6525048/diff/26001/src/pkg/net/udp_test.go\nFile src/pkg/net/udp_test.go (right):\n\nhttps://codereview.appspot.com/6525048/diff/26001/src/pkg/net/udp_test.go#newcode114\nsrc/pkg/net/udp_test.go:114: if la == nil {\nsame",
			"disapproval": false,
			"date": "2012-11-12 21:07:46.272610",
			"approval": true
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, iant@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-12 00:46:50.686670",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=9b31d3f52fff ***\n\nnet: protocol specific listen functions return a proper local socket address\n\nWhen a nil listener address is passed to some protocol specific\nlisten function, it will create an unnamed, unbound socket because\nof the nil listener address. Other listener functions may return\ninvalid address error.\n\nThis CL allows to pass a nil listener address to all protocol\nspecific listen functions to fix above inconsistency. Also make it\npossible to return a proper local socket address in case of a nil\nlistner address.\n\nFixes issue 4190.\nFixes issue 3847.\n\nR=rsc, iant\nCC=golang-dev\nhttp://codereview.appspot.com/6525048\n\nhttp://codereview.appspot.com/6525048/diff/26001/src/pkg/net/tcp_test.go\nFile src/pkg/net/tcp_test.go (right):\n\nhttp://codereview.appspot.com/6525048/diff/26001/src/pkg/net/tcp_test.go#newcode143\nsrc/pkg/net/tcp_test.go:143: if la == nil {\nOn 2012/11/12 21:07:46, rsc wrote:\n> the ,ok below will handle nil correctly so you could delete this and use a\n> instead of la in the print below.\n\nDone.\n\nhttp://codereview.appspot.com/6525048/diff/26001/src/pkg/net/udp_test.go\nFile src/pkg/net/udp_test.go (right):\n\nhttp://codereview.appspot.com/6525048/diff/26001/src/pkg/net/udp_test.go#newcode114\nsrc/pkg/net/udp_test.go:114: if la == nil {\nOn 2012/11/12 21:07:46, rsc wrote:\n> same\n\nDone.",
			"disapproval": false,
			"date": "2012-11-13 03:56:50.934290",
			"approval": false
		}
	],
	"owner_email": "mikioh.mikioh@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mikio",
	"subject": "code review 6525048: net: protocol specific listen functions return a proper...",
	"created": "2012-09-19 10:30:50.796650",
	"patchsets": [
		10001,
		18002,
		20001,
		21009,
		20003,
		26001,
		30001
	],
	"modified": "2012-11-13 03:56:53.904810",
	"closed": true,
	"issue": 6525048
}