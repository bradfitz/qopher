{
	"description": "unicode: performance improvements (API change)\n\n*** There is an API change here: the introduction of the\nLatinOffset int in the RangeTable struct. ***\n\n* Avoid checking Latin range multiple times for non-Latin runes.\n* Use linear search when it is faster than binary search.\n\ngo test -calibrate runs the calibration for where the linear/binary\ncrossover should be.\n\nbenchmark                       old MB/s     new MB/s  speedup\nBenchmarkFields            36.27        41.43    1.14x\nBenchmarkFieldsFunc        36.23        41.38    1.14x\n\nThe speedup here is evenly split between the linear scans\nand the LatinOffset change. Both are about 1.07x.",
	"cc": [
		"r@golang.org",
		"bradfitz@golang.org",
		"gobot@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-09-18 19:50:10.979640",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nFWIW\n\nhttps://codereview.appspot.com/6526048/diff/6001/src/pkg/unicode/letter.go\nFile src/pkg/unicode/letter.go (right):\n\nhttps://codereview.appspot.com/6526048/diff/6001/src/pkg/unicode/letter.go#newcode88\nsrc/pkg/unicode/letter.go:88: // is16 uses binary search to test whether rune is in the specified slice of 16-bit ranges.\nthis comment (\"uses binary search\") is now outdated.\n\nhttps://codereview.appspot.com/6526048/diff/6001/src/pkg/unicode/letter.go#newcode121\nsrc/pkg/unicode/letter.go:121: // is32 uses binary search to test whether rune is in the specified slice of 32-bit ranges.\nlikewise\n\nhttps://codereview.appspot.com/6526048/diff/6001/src/pkg/unicode/letter_test.go\nFile src/pkg/unicode/letter_test.go (right):\n\nhttps://codereview.appspot.com/6526048/diff/6001/src/pkg/unicode/letter_test.go#newcode450\nsrc/pkg/unicode/letter_test.go:450: \ncomplain if GOARCH != \"amd64\"?  I guess this will be rarely run, though, and only by people on amd64 anyway.",
			"disapproval": false,
			"date": "2012-09-18 20:11:05.511550",
			"approval": true
		},
		{
			"sender": "gobot@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=r (assigned by dsymonds)",
			"disapproval": false,
			"date": "2012-09-20 06:50:01.125090",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM after fixing the comments mentioned here and by bradfitz\n\nhttp://codereview.appspot.com/6526048/diff/6001/src/pkg/unicode/letter_test.go\nFile src/pkg/unicode/letter_test.go (right):\n\nhttp://codereview.appspot.com/6526048/diff/6001/src/pkg/unicode/letter_test.go#newcode435\nsrc/pkg/unicode/letter_test.go:435: // cutoff point for linear search of a range list vs binary search.\ns/vs/&./\n\nhttp://codereview.appspot.com/6526048/diff/6001/src/pkg/unicode/letter_test.go#newcode444\nsrc/pkg/unicode/letter_test.go:444: var calibrate = flag.Bool(\"calibrate\", false, \"run linear vs binary search calibration\")\ncompute crossover for linear vs. binary search.",
			"disapproval": false,
			"date": "2012-09-20 19:34:12.565700",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=7c71547cc627 ***\n\nunicode: performance improvements (API change)\n\n*** There is an API change here: the introduction of the\nLatinOffset int in the RangeTable struct. ***\n\n* Avoid checking Latin range multiple times for non-Latin runes.\n* Use linear search when it is faster than binary search.\n\ngo test -calibrate runs the calibration for where the linear/binary\ncrossover should be.\n\nbenchmark                       old MB/s     new MB/s  speedup\nBenchmarkFields            36.27        41.43    1.14x\nBenchmarkFieldsFunc        36.23        41.38    1.14x\n\nThe speedup here is evenly split between the linear scans\nand the LatinOffset change. Both are about 1.07x.\n\nR=r\nCC=bradfitz, gobot, golang-dev\nhttp://codereview.appspot.com/6526048",
			"disapproval": false,
			"date": "2012-09-21 04:35:32.829280",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 6526048: unicode: performance improvements (API change)",
	"created": "2012-09-18 19:19:46.102330",
	"patchsets": [
		1,
		1001,
		4001,
		6001,
		10002,
		13001
	],
	"modified": "2012-09-21 04:35:34.199940",
	"closed": true,
	"issue": 6526048
}