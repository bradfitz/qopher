{
	"description": "cmd/api: allow extension of interfaces with unexported methods\n\nFixes issue 4061.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=248e11862ed5 ***\n\ncmd/api: allow extension of interfaces with unexported methods\n\nFixes issue 4061.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/6525047",
			"disapproval": false,
			"date": "2012-09-18 19:57:06.698100",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-09-18 18:59:11.484460",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nThanks.  I kept meaning to do this soon.\r\n\r\nOn Tue, Sep 18, 2012 at 11:59 AM, <rsc@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> cmd/api: allow extension of interfaces with unexported methods\r\n>\r\n> Fixes issue 4061.\r\n>\r\n> Please review this at http://codereview.appspot.com/**6525047/<http://codereview.appspot.com/6525047/>\r\n>\r\n> Affected files:\r\n>   M api/go1.txt\r\n>   M src/cmd/api/goapi.go\r\n>   M src/cmd/api/testdata/src/pkg/**p1/golden.txt\r\n>   M src/cmd/api/testdata/src/pkg/**p1/p1.go\r\n>\r\n>\r\n> Index: api/go1.txt\r\n> ==============================**==============================**=======\r\n> --- a/api/go1.txt\r\n> +++ b/api/go1.txt\r\n> @@ -2811,7 +2811,7 @@\r\n>  pkg go/ast, type CompositeLit struct, Lbrace token.Pos\r\n>  pkg go/ast, type CompositeLit struct, Rbrace token.Pos\r\n>  pkg go/ast, type CompositeLit struct, Type Expr\r\n> -pkg go/ast, type Decl interface { End, Pos }\r\n> +pkg go/ast, type Decl interface, unexported methods\r\n>  pkg go/ast, type Decl interface, End() token.Pos\r\n>  pkg go/ast, type Decl interface, Pos() token.Pos\r\n>  pkg go/ast, type DeclStmt struct\r\n> @@ -2824,7 +2824,7 @@\r\n>  pkg go/ast, type Ellipsis struct, Elt Expr\r\n>  pkg go/ast, type EmptyStmt struct\r\n>  pkg go/ast, type EmptyStmt struct, Semicolon token.Pos\r\n> -pkg go/ast, type Expr interface { End, Pos }\r\n> +pkg go/ast, type Expr interface, unexported methods\r\n>  pkg go/ast, type Expr interface, End() token.Pos\r\n>  pkg go/ast, type Expr interface, Pos() token.Pos\r\n>  pkg go/ast, type ExprStmt struct\r\n> @@ -2971,13 +2971,13 @@\r\n>  pkg go/ast, type SliceExpr struct, Low Expr\r\n>  pkg go/ast, type SliceExpr struct, Rbrack token.Pos\r\n>  pkg go/ast, type SliceExpr struct, X Expr\r\n> -pkg go/ast, type Spec interface { End, Pos }\r\n> +pkg go/ast, type Spec interface, unexported methods\r\n>  pkg go/ast, type Spec interface, End() token.Pos\r\n>  pkg go/ast, type Spec interface, Pos() token.Pos\r\n>  pkg go/ast, type StarExpr struct\r\n>  pkg go/ast, type StarExpr struct, Star token.Pos\r\n>  pkg go/ast, type StarExpr struct, X Expr\r\n> -pkg go/ast, type Stmt interface { End, Pos }\r\n> +pkg go/ast, type Stmt interface, unexported methods\r\n>  pkg go/ast, type Stmt interface, End() token.Pos\r\n>  pkg go/ast, type Stmt interface, Pos() token.Pos\r\n>  pkg go/ast, type StructType struct\r\n> @@ -5458,7 +5458,7 @@\r\n>  pkg reflect, type StructField struct, Tag StructTag\r\n>  pkg reflect, type StructField struct, Type Type\r\n>  pkg reflect, type StructTag string\r\n> -pkg reflect, type Type interface { Align, AssignableTo, Bits, ChanDir,\r\n> Elem, Field, FieldAlign, FieldByIndex, FieldByName, FieldByNameFunc,\r\n> Implements, In, IsVariadic, Key, Kind, Len, Method, MethodByName, Name,\r\n> NumField, NumIn, NumMethod, NumOut, Out, PkgPath, Size, String }\r\n> +pkg reflect, type Type interface, unexported methods\r\n>  pkg reflect, type Type interface, Align() int\r\n>  pkg reflect, type Type interface, AssignableTo(Type) bool\r\n>  pkg reflect, type Type interface, Bits() int\r\n> @@ -7608,7 +7608,7 @@\r\n>  pkg syscall (darwin-386), type RouteMessage struct\r\n>  pkg syscall (darwin-386), type RouteMessage struct, Data []byte\r\n>  pkg syscall (darwin-386), type RouteMessage struct, Header RtMsghdr\r\n> -pkg syscall (darwin-386), type RoutingMessage interface {}\r\n> +pkg syscall (darwin-386), type RoutingMessage interface, unexported\r\n> methods\r\n>  pkg syscall (darwin-386), type RtMetrics struct\r\n>  pkg syscall (darwin-386), type RtMetrics struct, Expire int32\r\n>  pkg syscall (darwin-386), type RtMetrics struct, Filler [4]uint32\r\n> @@ -9427,7 +9427,7 @@\r\n>  pkg syscall (darwin-386-cgo), type RouteMessage struct\r\n>  pkg syscall (darwin-386-cgo), type RouteMessage struct, Data []byte\r\n>  pkg syscall (darwin-386-cgo), type RouteMessage struct, Header RtMsghdr\r\n> -pkg syscall (darwin-386-cgo), type RoutingMessage interface {}\r\n> +pkg syscall (darwin-386-cgo), type RoutingMessage interface, unexported\r\n> methods\r\n>  pkg syscall (darwin-386-cgo), type RtMetrics struct\r\n>  pkg syscall (darwin-386-cgo), type RtMetrics struct, Expire int32\r\n>  pkg syscall (darwin-386-cgo), type RtMetrics struct, Filler [4]uint32\r\n> @@ -11249,7 +11249,7 @@\r\n>  pkg syscall (darwin-amd64), type RouteMessage struct\r\n>  pkg syscall (darwin-amd64), type RouteMessage struct, Data []byte\r\n>  pkg syscall (darwin-amd64), type RouteMessage struct, Header RtMsghdr\r\n> -pkg syscall (darwin-amd64), type RoutingMessage interface {}\r\n> +pkg syscall (darwin-amd64), type RoutingMessage interface, unexported\r\n> methods\r\n>  pkg syscall (darwin-amd64), type RtMetrics struct\r\n>  pkg syscall (darwin-amd64), type RtMetrics struct, Expire int32\r\n>  pkg syscall (darwin-amd64), type RtMetrics struct, Filler [4]uint32\r\n> @@ -13075,7 +13075,7 @@\r\n>  pkg syscall (darwin-amd64-cgo), type RouteMessage struct\r\n>  pkg syscall (darwin-amd64-cgo), type RouteMessage struct, Data []byte\r\n>  pkg syscall (darwin-amd64-cgo), type RouteMessage struct, Header RtMsghdr\r\n> -pkg syscall (darwin-amd64-cgo), type RoutingMessage interface {}\r\n> +pkg syscall (darwin-amd64-cgo), type RoutingMessage interface, unexported\r\n> methods\r\n>  pkg syscall (darwin-amd64-cgo), type RtMetrics struct\r\n>  pkg syscall (darwin-amd64-cgo), type RtMetrics struct, Expire int32\r\n>  pkg syscall (darwin-amd64-cgo), type RtMetrics struct, Filler [4]uint32\r\n> @@ -15046,7 +15046,7 @@\r\n>  pkg syscall (freebsd-386), type RouteMessage struct\r\n>  pkg syscall (freebsd-386), type RouteMessage struct, Data []byte\r\n>  pkg syscall (freebsd-386), type RouteMessage struct, Header RtMsghdr\r\n> -pkg syscall (freebsd-386), type RoutingMessage interface {}\r\n> +pkg syscall (freebsd-386), type RoutingMessage interface, unexported\r\n> methods\r\n>  pkg syscall (freebsd-386), type RtMetrics struct\r\n>  pkg syscall (freebsd-386), type RtMetrics struct, Expire uint32\r\n>  pkg syscall (freebsd-386), type RtMetrics struct, Filler [3]uint32\r\n> @@ -17022,7 +17022,7 @@\r\n>  pkg syscall (freebsd-amd64), type RouteMessage struct\r\n>  pkg syscall (freebsd-amd64), type RouteMessage struct, Data []byte\r\n>  pkg syscall (freebsd-amd64), type RouteMessage struct, Header RtMsghdr\r\n> -pkg syscall (freebsd-amd64), type RoutingMessage interface {}\r\n> +pkg syscall (freebsd-amd64), type RoutingMessage interface, unexported\r\n> methods\r\n>  pkg syscall (freebsd-amd64), type RtMetrics struct\r\n>  pkg syscall (freebsd-amd64), type RtMetrics struct, Expire uint64\r\n>  pkg syscall (freebsd-amd64), type RtMetrics struct, Filler [3]uint64\r\n> @@ -30123,7 +30123,7 @@\r\n>  pkg syscall, type RawSockaddrInet4 struct, Port uint16\r\n>  pkg syscall, type Rusage struct\r\n>  pkg syscall, type Signal int\r\n> -pkg syscall, type Sockaddr interface {}\r\n> +pkg syscall, type Sockaddr interface, unexported methods\r\n>  pkg syscall, type SockaddrInet4 struct\r\n>  pkg syscall, type SockaddrInet4 struct, Addr [4]byte\r\n>  pkg syscall, type SockaddrInet4 struct, Port int\r\n> Index: src/cmd/api/goapi.go\r\n> ==============================**==============================**=======\r\n> --- a/src/cmd/api/goapi.go\r\n> +++ b/src/cmd/api/goapi.go\r\n> @@ -892,15 +892,18 @@\r\n>         sig  string // \"([]byte) (int, error)\", from funcSigString\r\n>  }\r\n>\r\n> -// interfaceMethods returns the expanded list of methods for an interface.\r\n> +// interfaceMethods returns the expanded list of exported methods for an\r\n> interface.\r\n> +// The boolean complete reports whether the list contains all methods\r\n> (that is, the\r\n> +// interface has no unexported methods).\r\n>  // pkg is the complete package name (\"net/http\")\r\n>  // iname is the interface name.\r\n> -func (w *Walker) interfaceMethods(pkg, iname string) (methods []method) {\r\n> +func (w *Walker) interfaceMethods(pkg, iname string) (methods []method,\r\n> complete bool) {\r\n>         t, ok := w.interfaces[pkgSymbol{pkg, iname}]\r\n>         if !ok {\r\n>                 log.Fatalf(\"failed to find interface %s.%s\", pkg, iname)\r\n>         }\r\n>\r\n> +       complete = true\r\n>         for _, f := range t.Methods.List {\r\n>                 typ := f.Type\r\n>                 switch tv := typ.(type) {\r\n> @@ -912,6 +915,8 @@\r\n>                                                 name: mname.Name,\r\n>                                                 sig:  w.funcSigString(ft),\r\n>                                         })\r\n> +                               } else {\r\n> +                                       complete = false\r\n>                                 }\r\n>                         }\r\n>                 case *ast.Ident:\r\n> @@ -927,7 +932,9 @@\r\n>                                 log.Fatalf(\"unexported embedded interface\r\n> %q in exported interface %s.%s; confused\",\r\n>                                         embedded, pkg, iname)\r\n>                         }\r\n> -                       methods = append(methods, w.interfaceMethods(pkg,\r\n> embedded)...)\r\n> +                       m, c := w.interfaceMethods(pkg, embedded)\r\n> +                       methods = append(methods, m...)\r\n> +                       complete = complete && c\r\n>                 case *ast.SelectorExpr:\r\n>                         lhs := w.nodeString(tv.X)\r\n>                         rhs := w.nodeString(tv.Sel)\r\n> @@ -935,7 +942,9 @@\r\n>                         if !ok {\r\n>                                 log.Fatalf(\"can't resolve selector %q in\r\n> interface %s.%s\", lhs, pkg, iname)\r\n>                         }\r\n> -                       methods = append(methods, w.interfaceMethods(fpkg,\r\n> rhs)...)\r\n> +                       m, c := w.interfaceMethods(fpkg, rhs)\r\n> +                       methods = append(methods, m...)\r\n> +                       complete = complete && c\r\n>                 default:\r\n>                         log.Fatalf(\"unknown type %T in interface field\",\r\n> typ)\r\n>                 }\r\n> @@ -945,14 +954,28 @@\r\n>\r\n>  func (w *Walker) walkInterfaceType(name string, t *ast.InterfaceType) {\r\n>         methNames := []string{}\r\n> -\r\n>         pop := w.pushScope(\"type \" + name + \" interface\")\r\n> -       for _, m := range w.interfaceMethods(w.**curPackageName, name) {\r\n> +       methods, complete := w.interfaceMethods(w.**curPackageName, name)\r\n> +       for _, m := range methods {\r\n>                 methNames = append(methNames, m.name)\r\n>                 w.emitFeature(fmt.Sprintf(\"%s%**s\", m.name, m.sig))\r\n>         }\r\n> +       if !complete {\r\n> +               // The method set has unexported methods, so all the\r\n> +               // implementations are provided by the same package,\r\n> +               // so the method set can be extended. Instead of recording\r\n> +               // the full set of names (below), record only that there\r\n> were\r\n> +               // unexported methods. (If the interface shrinks, we will\r\n> notice\r\n> +               // because a method signature emitted during the last loop,\r\n> +               // will disappear.)\r\n> +               w.emitFeature(\"unexported methods\")\r\n> +       }\r\n>         pop()\r\n>\r\n> +       if !complete {\r\n> +               return\r\n> +       }\r\n> +\r\n>         sort.Strings(methNames)\r\n>         if len(methNames) == 0 {\r\n>                 w.emitFeature(fmt.Sprintf(\"**type %s interface {}\", name))\r\n> Index: src/cmd/api/testdata/src/pkg/**p1/golden.txt\r\n> ==============================**==============================**=======\r\n> --- a/src/cmd/api/testdata/src/**pkg/p1/golden.txt\r\n> +++ b/src/cmd/api/testdata/src/**pkg/p1/golden.txt\r\n> @@ -37,7 +37,7 @@\r\n>  pkg p1, type Error interface { Error, Temporary }\r\n>  pkg p1, type Error interface, Error() string\r\n>  pkg p1, type Error interface, Temporary() bool\r\n> -pkg p1, type I interface { Get, GetNamed, Name, PackageTwoMeth, Set }\r\n> +pkg p1, type I interface, unexported methods\r\n>  pkg p1, type I interface, Get(string) int64\r\n>  pkg p1, type I interface, GetNamed(string) int64\r\n>  pkg p1, type I interface, Name() string\r\n> @@ -46,6 +46,11 @@\r\n>  pkg p1, type MyInt int\r\n>  pkg p1, type Namer interface { Name }\r\n>  pkg p1, type Namer interface, Name() string\r\n> +pkg p1, type Public interface { X, Y }\r\n> +pkg p1, type Public interface, X()\r\n> +pkg p1, type Public interface, Y()\r\n> +pkg p1, type Private interface, unexported methods\r\n> +pkg p1, type Private interface, X()\r\n>  pkg p1, type S struct\r\n>  pkg p1, type S struct, Public *int\r\n>  pkg p1, type S struct, PublicTime time.Time\r\n> Index: src/cmd/api/testdata/src/pkg/**p1/p1.go\r\n> ==============================**==============================**=======\r\n> --- a/src/cmd/api/testdata/src/**pkg/p1/p1.go\r\n> +++ b/src/cmd/api/testdata/src/**pkg/p1/p1.go\r\n> @@ -78,6 +78,16 @@\r\n>         private()\r\n>  }\r\n>\r\n> +type Public interface {\r\n> +       X()\r\n> +       Y()\r\n> +}\r\n> +\r\n> +type Private interface {\r\n> +       X()\r\n> +       y()\r\n> +}\r\n> +\r\n>  type Error interface {\r\n>         error\r\n>         Temporary() bool\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-09-18 19:38:46.176370",
			"approval": true
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 6525047: cmd/api: allow extension of interfaces with unexported ...",
	"created": "2012-09-18 18:54:17.031130",
	"patchsets": [
		1,
		2001,
		6001
	],
	"modified": "2012-09-18 19:57:07.564810",
	"closed": true,
	"issue": 6525047
}