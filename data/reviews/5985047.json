{
	"description": "runtime: add 64-bit atomics\nThis is factored out part of:\nhttp://codereview.appspot.com/5279048/\n(Parallel GC)",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5985047/diff/3011/src/pkg/runtime/arch_386.h\nFile src/pkg/runtime/arch_386.h (right):\n\nhttp://codereview.appspot.com/5985047/diff/3011/src/pkg/runtime/arch_386.h#newcode8\nsrc/pkg/runtime/arch_386.h:8: void\truntime\u00b7prefetch(const volatile void*);\nconst and volatile have nearly no effect in our compiler and are conventionally not mentioned in our header.  Please remove them.\n\nhttp://codereview.appspot.com/5985047/diff/3011/src/pkg/runtime/arch_amd64.h\nFile src/pkg/runtime/arch_amd64.h (right):\n\nhttp://codereview.appspot.com/5985047/diff/3011/src/pkg/runtime/arch_amd64.h#newcode8\nsrc/pkg/runtime/arch_amd64.h:8: void\truntime\u00b7prefetch(const volatile void*);\nSame.\n\nhttp://codereview.appspot.com/5985047/diff/3011/src/pkg/runtime/asm_386.s\nFile src/pkg/runtime/asm_386.s (right):\n\nhttp://codereview.appspot.com/5985047/diff/3011/src/pkg/runtime/asm_386.s#newcode326\nsrc/pkg/runtime/asm_386.s:326: XORL\tAX, AX\nPlease use MOVL $0, AX like in the surrounding code.\nIt is the linker's job to play tricks like these, not the\nprogrammer's.\n\nhttp://codereview.appspot.com/5985047/diff/3011/src/pkg/runtime/asm_amd64.s\nFile src/pkg/runtime/asm_amd64.s (right):\n\nhttp://codereview.appspot.com/5985047/diff/3011/src/pkg/runtime/asm_amd64.s#newcode368\nsrc/pkg/runtime/asm_amd64.s:368: XORL\tAX, AX\nSame.\n\nhttp://codereview.appspot.com/5985047/diff/3011/src/pkg/runtime/atomic_386.c\nFile src/pkg/runtime/atomic_386.c (right):\n\nhttp://codereview.appspot.com/5985047/diff/3011/src/pkg/runtime/atomic_386.c#newcode28\nsrc/pkg/runtime/atomic_386.c:28: while(!runtime\u00b7cas64(addr, &old, old+v));\nDoesn't this generate a warning when you build package runtime?\nEither way, please make it multiple lines:\n\nwhile(!runtime.cas64(addr, &old, old+v)) {\n    // nothing\n}\n\nor \n\nfor(;;) {\n    if(runtime.cas64(addr, &old, old+v))\n        break;\n}\n\nIt's too easy to misread as written.\n\nhttp://codereview.appspot.com/5985047/diff/3011/src/pkg/runtime/atomic_arm.c\nFile src/pkg/runtime/atomic_arm.c (right):\n\nhttp://codereview.appspot.com/5985047/diff/3011/src/pkg/runtime/atomic_arm.c#newcode13\nsrc/pkg/runtime/atomic_arm.c:13: #define LOCK(addr) (&locktab[((uintptr)addr>>3)%nelem(locktab)].l)\n(uintptr)(addr)",
			"disapproval": false,
			"date": "2012-04-05 14:24:54.746840",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nMaybe we only issue the warning for if(); and not while();.\nEither way, thanks for changing it to be harder to misread.\n\nhttp://codereview.appspot.com/5985047/diff/6012/src/pkg/runtime/asm_386.s\nFile src/pkg/runtime/asm_386.s (right):\n\nhttp://codereview.appspot.com/5985047/diff/6012/src/pkg/runtime/asm_386.s#newcode326\nsrc/pkg/runtime/asm_386.s:326: XORL\tAX, AX\nMOVL $0, AX",
			"disapproval": false,
			"date": "2012-04-05 14:47:25.864069",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=dbf4d5bba619 ***\n\nruntime: add 64-bit atomics\nThis is factored out part of:\nhttp://codereview.appspot.com/5279048/\n(Parallel GC)\n\nR=golang-dev, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5985047",
			"disapproval": false,
			"date": "2012-04-05 14:48:03.370103",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5985047/diff/3011/src/pkg/runtime/arch_386.h\nFile src/pkg/runtime/arch_386.h (right):\n\nhttp://codereview.appspot.com/5985047/diff/3011/src/pkg/runtime/arch_386.h#newcode8\nsrc/pkg/runtime/arch_386.h:8: void\truntime\u00b7prefetch(const volatile void*);\nOn 2012/04/05 14:24:54, rsc wrote:\n> const and volatile have nearly no effect in our compiler and are conventionally\n> not mentioned in our header.  Please remove them.\n\nDone.\n\nhttp://codereview.appspot.com/5985047/diff/3011/src/pkg/runtime/arch_amd64.h\nFile src/pkg/runtime/arch_amd64.h (right):\n\nhttp://codereview.appspot.com/5985047/diff/3011/src/pkg/runtime/arch_amd64.h#newcode8\nsrc/pkg/runtime/arch_amd64.h:8: void\truntime\u00b7prefetch(const volatile void*);\nOn 2012/04/05 14:24:54, rsc wrote:\n> Same.\n\nDone.\n\nhttp://codereview.appspot.com/5985047/diff/3011/src/pkg/runtime/asm_386.s\nFile src/pkg/runtime/asm_386.s (right):\n\nhttp://codereview.appspot.com/5985047/diff/3011/src/pkg/runtime/asm_386.s#newcode326\nsrc/pkg/runtime/asm_386.s:326: XORL\tAX, AX\nOn 2012/04/05 14:24:54, rsc wrote:\n> Please use MOVL $0, AX like in the surrounding code.\n> It is the linker's job to play tricks like these, not the\n> programmer's.\n\nDone.\n\nhttp://codereview.appspot.com/5985047/diff/3011/src/pkg/runtime/atomic_386.c\nFile src/pkg/runtime/atomic_386.c (right):\n\nhttp://codereview.appspot.com/5985047/diff/3011/src/pkg/runtime/atomic_386.c#newcode28\nsrc/pkg/runtime/atomic_386.c:28: while(!runtime\u00b7cas64(addr, &old, old+v));\nOn 2012/04/05 14:24:54, rsc wrote:\n> Doesn't this generate a warning when you build package runtime?\n\nI do not see any warnings.\n\n> Either way, please make it multiple lines:\n> \n> while(!runtime.cas64(addr, &old, old+v)) {\n>     // nothing\n> }\n> \n\nDone.\n\n> or \n> \n> for(;;) {\n>     if(runtime.cas64(addr, &old, old+v))\n>         break;\n> }\n> \n> It's too easy to misread as written.\n\nhttp://codereview.appspot.com/5985047/diff/3011/src/pkg/runtime/atomic_arm.c\nFile src/pkg/runtime/atomic_arm.c (right):\n\nhttp://codereview.appspot.com/5985047/diff/3011/src/pkg/runtime/atomic_arm.c#newcode13\nsrc/pkg/runtime/atomic_arm.c:13: #define LOCK(addr) (&locktab[((uintptr)addr>>3)%nelem(locktab)].l)\nOn 2012/04/05 14:24:54, rsc wrote:\n> (uintptr)(addr)\n\nOuch!\nDone",
			"disapproval": false,
			"date": "2012-04-05 14:36:52.420221",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-04-05 14:12:49.128766",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-05 14:36:02.550706",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 5985047: runtime: add 64-bit atomics",
	"created": "2012-04-05 13:31:43.307214",
	"patchsets": [
		1,
		2001,
		1002,
		3011,
		7001,
		6012,
		1010
	],
	"modified": "2012-04-05 14:48:05.235802",
	"closed": true,
	"issue": 5985047
}