{
	"description": "image/gif: handle invalid GIFs more cautiously\n\nGIFs with huge bounds and not enough pixels to\nmatch were causing huge allocations before giving\nan error. We now load the pixels and compare\nhow many are really available before allocating\nthe image.\n\nFixes issue 5050.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"nigeltao@golang.org",
		"r@golang.org",
		"bradfitz@golang.org",
		"mtj@google.com",
		"minux.ma@gmail.com"
	],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"jeff.allen@gmail.com",
				"nigeltao@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "There may be something to do here, but I don't believe you've done it.\n\nhttps://codereview.appspot.com/7486051/diff/2001/src/pkg/image/decode_test.go\nFile src/pkg/image/decode_test.go (right):\n\nhttps://codereview.appspot.com/7486051/diff/2001/src/pkg/image/decode_test.go#newcode35\nsrc/pkg/image/decode_test.go:35: {\"\", \"testdata/issue5050.gif\", 64 << 8},\nthe \"\" thing is ugly. plus you are looking for a specific error. please just make this one file a special Test that checks exactly what you're looking for.\n\nhttps://codereview.appspot.com/7486051/diff/2001/src/pkg/image/gif/reader.go\nFile src/pkg/image/gif/reader.go (right):\n\nhttps://codereview.appspot.com/7486051/diff/2001/src/pkg/image/gif/reader.go#newcode183\nsrc/pkg/image/gif/reader.go:183: if pix, err = ioutil.ReadAll(lzwr); err != nil {\nyou're still reading in the whole file. i guess that's unavoidable, but it means the CL description misled me a bit.  change it to something like \"after reading the file, if the size does not match the bounds, don't allocate an Image\".\n\nin any case, i don't really see the difference here. instead of reading into m.pix, you're reading into a local variable. what have you saved? in fact, isn't it worse? in the original, you read no more than the bounds; here you decode the whole file.",
			"disapproval": false,
			"date": "2013-03-14 15:48:41.543440",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttp://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-03-14 15:26:47.245610",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The problem was that you could make a GIF file that said:\r\n\r\n[ header ] [ image is 99999999 x 99999999 pixels! ] [ lie. only 400 pixels\r\n] [ EOF ]\r\n\r\nAnd we'd read it in that order, and allocate 99999999 * 99999999 pixels\r\nahead of time, only to fail later when we found it was short.\r\n\r\nWith his change, he reads the dimensions, notes it, and then slurps all the\r\npixels and verifies they match, having only allocated 400 pixels worth of\r\nmemory.\r\n\r\n\r\nOn Thu, Mar 14, 2013 at 8:48 AM, <r@golang.org> wrote:\r\n\r\n> There may be something to do here, but I don't believe you've done it.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7486051/diff/2001/src/pkg/**\r\n> image/decode_test.go<https://codereview.appspot.com/7486051/diff/2001/src/pkg/image/decode_test.go>\r\n> File src/pkg/image/decode_test.go (right):\r\n>\r\n> https://codereview.appspot.**com/7486051/diff/2001/src/pkg/**\r\n> image/decode_test.go#newcode35<https://codereview.appspot.com/7486051/diff/2001/src/pkg/image/decode_test.go#newcode35>\r\n> src/pkg/image/decode_test.go:**35: {\"\", \"testdata/issue5050.gif\", 64 <<\r\n> 8},\r\n> the \"\" thing is ugly. plus you are looking for a specific error. please\r\n> just make this one file a special Test that checks exactly what you're\r\n> looking for.\r\n>\r\n> https://codereview.appspot.**com/7486051/diff/2001/src/pkg/**\r\n> image/gif/reader.go<https://codereview.appspot.com/7486051/diff/2001/src/pkg/image/gif/reader.go>\r\n> File src/pkg/image/gif/reader.go (right):\r\n>\r\n> https://codereview.appspot.**com/7486051/diff/2001/src/pkg/**\r\n> image/gif/reader.go#newcode183<https://codereview.appspot.com/7486051/diff/2001/src/pkg/image/gif/reader.go#newcode183>\r\n> src/pkg/image/gif/reader.go:**183: if pix, err = ioutil.ReadAll(lzwr); err\r\n> != nil {\r\n> you're still reading in the whole file. i guess that's unavoidable, but\r\n> it means the CL description misled me a bit.  change it to something\r\n> like \"after reading the file, if the size does not match the bounds,\r\n> don't allocate an Image\".\r\n>\r\n> in any case, i don't really see the difference here. instead of reading\r\n> into m.pix, you're reading into a local variable. what have you saved?\r\n> in fact, isn't it worse? in the original, you read no more than the\r\n> bounds; here you decode the whole file.\r\n>\r\n> https://codereview.appspot.**com/7486051/<https://codereview.appspot.com/7486051/>\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-14 16:36:59.877500",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "precisely... the \"GIF of death\"\r\n\r\nmuch larger than:\r\nhttps://commons.wikimedia.org/wiki/Category:Very_large_GIF_files\r\n\r\nYou might want to think of it like file reading, where you have \"read the\r\nwhole thing\" (\"by file\") or a more timid approach, not a buffer at a time\r\nlike the io library, but with a pre-defined limit.\r\n\r\n\r\nOn Thu, Mar 14, 2013 at 9:36 AM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n\r\n> The problem was that you could make a GIF file that said:\r\n>\r\n> [ header ] [ image is 99999999 x 99999999 pixels! ] [ lie. only 400 pixels\r\n> ] [ EOF ]\r\n>\r\n> And we'd read it in that order, and allocate 99999999 * 99999999 pixels\r\n> ahead of time, only to fail later when we found it was short.\r\n>\r\n> With his change, he reads the dimensions, notes it, and then slurps all\r\n> the pixels and verifies they match, having only allocated 400 pixels worth\r\n> of memory.\r\n>\r\n>\r\n> On Thu, Mar 14, 2013 at 8:48 AM, <r@golang.org> wrote:\r\n>\r\n>> There may be something to do here, but I don't believe you've done it.\r\n>>\r\n>>\r\n>> https://codereview.appspot.**com/7486051/diff/2001/src/pkg/**\r\n>> image/decode_test.go<https://codereview.appspot.com/7486051/diff/2001/src/pkg/image/decode_test.go>\r\n>> File src/pkg/image/decode_test.go (right):\r\n>>\r\n>> https://codereview.appspot.**com/7486051/diff/2001/src/pkg/**\r\n>> image/decode_test.go#newcode35<https://codereview.appspot.com/7486051/diff/2001/src/pkg/image/decode_test.go#newcode35>\r\n>> src/pkg/image/decode_test.go:**35: {\"\", \"testdata/issue5050.gif\", 64 <<\r\n>> 8},\r\n>> the \"\" thing is ugly. plus you are looking for a specific error. please\r\n>> just make this one file a special Test that checks exactly what you're\r\n>> looking for.\r\n>>\r\n>> https://codereview.appspot.**com/7486051/diff/2001/src/pkg/**\r\n>> image/gif/reader.go<https://codereview.appspot.com/7486051/diff/2001/src/pkg/image/gif/reader.go>\r\n>> File src/pkg/image/gif/reader.go (right):\r\n>>\r\n>> https://codereview.appspot.**com/7486051/diff/2001/src/pkg/**\r\n>> image/gif/reader.go#newcode183<https://codereview.appspot.com/7486051/diff/2001/src/pkg/image/gif/reader.go#newcode183>\r\n>> src/pkg/image/gif/reader.go:**183: if pix, err = ioutil.ReadAll(lzwr);\r\n>> err\r\n>> != nil {\r\n>> you're still reading in the whole file. i guess that's unavoidable, but\r\n>> it means the CL description misled me a bit.  change it to something\r\n>> like \"after reading the file, if the size does not match the bounds,\r\n>> don't allocate an Image\".\r\n>>\r\n>> in any case, i don't really see the difference here. instead of reading\r\n>> into m.pix, you're reading into a local variable. what have you saved?\r\n>> in fact, isn't it worse? in the original, you read no more than the\r\n>> bounds; here you decode the whole file.\r\n>>\r\n>> https://codereview.appspot.**com/7486051/<https://codereview.appspot.com/7486051/>\r\n>>\r\n>>\r\n>> --\r\n>>\r\n>> ---You received this message because you are subscribed to the Google\r\n>> Groups \"golang-dev\" group.\r\n>> To unsubscribe from this group and stop receiving emails from it, send an\r\n>> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n>> .\r\n>> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n>> .\r\n>>\r\n>>\r\n>>\r\n>  --\r\n>\r\n> ---\r\n> You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n>\r\n\r\n\r\n\r\n-- \r\nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n650-335-5765\r\n",
			"disapproval": false,
			"date": "2013-03-14 17:06:40.452270",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Mar 15, 2013 at 7:42 PM,  <nigeltao@golang.org> wrote:\r\n> Some more thought is required.\r\n\r\nI dropped some more thoughts at\r\nhttps://code.google.com/p/go/issues/detail?id=5050#c1\r\n",
			"disapproval": false,
			"date": "2013-03-15 11:17:41.144770",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"jeff.allen@gmail.com",
				"nigeltao@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7486051/diff/10001/src/pkg/image/gif/reader.go\nFile src/pkg/image/gif/reader.go (right):\n\nhttps://codereview.appspot.com/7486051/diff/10001/src/pkg/image/gif/reader.go#newcode189\nsrc/pkg/image/gif/reader.go:189: return fmt.Errorf(\"gif: not enough pixels\")\nactually this isn't a very good message. how about\nreturn errors.New(\"gif: file too short for rectangle defined in header\")",
			"disapproval": false,
			"date": "2013-03-14 17:45:40.524630",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"nigeltao@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org, r@golang.org, bradfitz@golang.org, mtj@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-14 17:22:48.736950",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"jeff.allen@gmail.com",
				"nigeltao@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i had the problem backwards. looks good but please fix these two nits.\n\nhttps://codereview.appspot.com/7486051/diff/10001/src/pkg/image/decode_test.go\nFile src/pkg/image/decode_test.go (right):\n\nhttps://codereview.appspot.com/7486051/diff/10001/src/pkg/image/decode_test.go#newcode125\nsrc/pkg/image/decode_test.go:125: t.Errorf(\"Got error %v\", err)\nt.Errorf(\"expected 'not enough pixels' error; got %v\", err)\n\nhttps://codereview.appspot.com/7486051/diff/10001/src/pkg/image/gif/reader.go\nFile src/pkg/image/gif/reader.go (right):\n\nhttps://codereview.appspot.com/7486051/diff/10001/src/pkg/image/gif/reader.go#newcode189\nsrc/pkg/image/gif/reader.go:189: return fmt.Errorf(\"gif: not enough pixels\")\nreturn errors.New(\"gif: not enough pixels\")",
			"disapproval": false,
			"date": "2013-03-14 17:44:20.063350",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"nigeltao@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org, r@golang.org, bradfitz@golang.org, mtj@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-15 08:30:37.583510",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"nigeltao@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"mtj@google.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "could we use a smaller gif for the test?\ni think we can just take a minimal gif\nand manually corrupt the bounding box\nsize in its header.",
			"disapproval": false,
			"date": "2013-03-15 08:37:59.621920",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"jeff.allen@gmail.com",
				"nigeltao@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"mtj@google.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/14 16:36:59, bradfitz wrote:\n> [ header ] [ image is 99999999 x 99999999 pixels! ] [ lie. only 400 pixels\n> ] [ EOF ]\n> \n> And we'd read it in that order, and allocate 99999999 * 99999999 pixels\n> ahead of time, only to fail later when we found it was short.\n> \n> With his change, he reads the dimensions, notes it, and then slurps all the\n> pixels and verifies they match, having only allocated 400 pixels worth of\n> memory.\n\nWell, if your program has memory problems with this bad image, would it also have memory problems with a legit GIF that was actually 99999999 * 99999999? Even if that's a lot of black pixels, a long stream of zeroes still compresses very well. This CL might be fixing a particular symptom without addressing a bigger problem of being able to decode untrusted images without allowing denial of service. That problem isn't specific to GIF either.\n\nSome more thought is required.",
			"disapproval": false,
			"date": "2013-03-15 08:42:41.454440",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Mar 15, 2013 at 7:42 PM,  <nigeltao@golang.org> wrote:\r\n> Some more thought is required.\r\n\r\nI dropped some more thoughts at\r\nhttps://code.google.com/p/go/issues/detail?id=5050#c1\r\n",
			"disapproval": false,
			"date": "2013-03-15 11:18:00.815020",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"nigeltao@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"mtj@google.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please see https://codereview.appspot.com/7602045/ for a better solution to issue 5050.",
			"disapproval": false,
			"date": "2013-03-15 16:19:23.006640",
			"approval": false
		}
	],
	"owner_email": "jeff.allen@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "jeff.allen",
	"subject": "code review 7486051: image/gif: handle invalid GIFs more cautiously",
	"created": "2013-03-14 15:21:15.551040",
	"patchsets": [
		1,
		2001,
		10001,
		17001
	],
	"modified": "2013-03-15 16:19:28.059830",
	"closed": true,
	"issue": 7486051
}