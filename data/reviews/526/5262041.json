{
	"description": "crypto/tls: fetch root certificates using Mac OS API\n\nFixes issue 1009.",
	"cc": [
		"adg@golang.org",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On my Snow Leopard machine:\n\n$ gomake test\ngotest\nrm -f _test/crypto/tls.a\nCGOPKGPATH=crypto cgo --  root_darwin.go\ntouch _obj/_cgo_run\n6g  -p crypto/tls -o _gotest_.6 alert.go cipher_suites.go common.go\nconn.go handshake_client.go handshake_messages.go handshake_server.go\nkey_agreement.go prf.go tls.go   _obj/root_darwin.cgo1.go\n_obj/_cgo_gotypes.go conn_test.go handshake_client_test.go\nhandshake_messages_test.go handshake_server_test.go prf_test.go\nroot_test.go\n6c -FVw -I/Users/adg/go/pkg/darwin_amd64 -I . -o \"_cgo_defun.6\"\n_obj/_cgo_defun.c\ngcc -m64 -I . -g -fPIC -O2 -o _cgo_main.o -c  -Wno-error _obj/_cgo_main.c\ngcc -m64 -I . -g -fPIC -O2 -o root_darwin.cgo2.o -c  -Wno-error\n_obj/root_darwin.cgo2.c\ngcc -m64 -I . -g -fPIC -O2 -o _cgo_export.o -c  -Wno-error _obj/_cgo_export.c\ngcc -m64 -g -fPIC -O2 -o _cgo1_.o _cgo_main.o root_darwin.cgo2.o\n_cgo_export.o  -framework CoreFoundation -framework Security\ncgo -dynimport _cgo1_.o >_obj/_cgo_import.c_ && mv -f\n_obj/_cgo_import.c_ _obj/_cgo_import.c\n6c -FVw -I . -o \"_cgo_import.6\" _obj/_cgo_import.c\nrm -f _test/crypto/tls.a\ngopack grc _test/crypto/tls.a _gotest_.6  _cgo_defun.6 _cgo_import.6\nroot_darwin.cgo2.o _cgo_export.o\n--- FAIL: tls.TestHandshakeClientRC4 (0.24 seconds)\n\tRC4 #2: unexpected EOF\nFAIL\ngotest: \"./6.out\" failed: exit status 1\n",
			"disapproval": false,
			"date": "2011-10-13 03:25:35.622788",
			"approval": false
		},
		{
			"sender": "krautz@gmail.com",
			"recipients": [
				"krautz@gmail.com",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello adg@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-13 17:22:14.680396",
			"approval": false
		},
		{
			"sender": "krautz@gmail.com",
			"recipients": [
				"krautz@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-13 01:06:22.671770",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Thank you!  This is great.\nI will be able to test on Snow Leopard and on Lion later today.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-10-13 13:45:17.873234",
			"approval": false
		},
		{
			"sender": "krautz@gmail.com",
			"recipients": [
				"krautz@gmail.com",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello adg@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-13 16:55:35.783826",
			"approval": false
		},
		{
			"sender": "krautz@gmail.com",
			"recipients": [
				"krautz@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I haven't been able to test this on Snow Leopard yet. Neither a Go binary built on Lion on Snow Leopard, nor a pure-Snow Leopard build.  If anyone could check that nothing breaks in those two configurations, that would be much appreciated.\n\nAlso, note that this change set changes the default certificate verification logic in handshake_client.go.  The old code would only verify the certificate chain when c.config.RootCAs != nil.  However, the default emptyConfig for TLS clients would always have RootCAs set to nil, so no verification was performed unless a suitable custom tls.Config was provided.\n\nThe new logic makes sure that system-provided CAs are considered as well, when using the default TLS config.  Another thing to note is that certificate chain verification is completely skipped if rootCAs() == nil. (That is, if both the RootCAs field of the tls.Config struct is nil, *and* the list of system default CAs is nil).  This is the case for OSes that use the new root_stub.go file for their default root implementation.",
			"disapproval": false,
			"date": "2011-10-13 01:16:11.985878",
			"approval": false
		},
		{
			"sender": "krautz@gmail.com",
			"recipients": [
				"krautz@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/10/13 03:25:35, adg wrote:\n> On my Snow Leopard machine:\n> \n> $ gomake test\n> gotest\n> rm -f _test/crypto/tls.a\n> CGOPKGPATH=crypto cgo --  root_darwin.go\n> touch _obj/_cgo_run\n> 6g  -p crypto/tls -o _gotest_.6 alert.go cipher_suites.go common.go\n> conn.go handshake_client.go handshake_messages.go handshake_server.go\n> key_agreement.go prf.go tls.go   _obj/root_darwin.cgo1.go\n> _obj/_cgo_gotypes.go conn_test.go handshake_client_test.go\n> handshake_messages_test.go handshake_server_test.go prf_test.go\n> root_test.go\n> 6c -FVw -I/Users/adg/go/pkg/darwin_amd64 -I . -o \"_cgo_defun.6\"\n> _obj/_cgo_defun.c\n> gcc -m64 -I . -g -fPIC -O2 -o _cgo_main.o -c  -Wno-error _obj/_cgo_main.c\n> gcc -m64 -I . -g -fPIC -O2 -o root_darwin.cgo2.o -c  -Wno-error\n> _obj/root_darwin.cgo2.c\n> gcc -m64 -I . -g -fPIC -O2 -o _cgo_export.o -c  -Wno-error _obj/_cgo_export.c\n> gcc -m64 -g -fPIC -O2 -o _cgo1_.o _cgo_main.o root_darwin.cgo2.o\n> _cgo_export.o  -framework CoreFoundation -framework Security\n> cgo -dynimport _cgo1_.o >_obj/_cgo_import.c_ && mv -f\n> _obj/_cgo_import.c_ _obj/_cgo_import.c\n> 6c -FVw -I . -o \"_cgo_import.6\" _obj/_cgo_import.c\n> rm -f _test/crypto/tls.a\n> gopack grc _test/crypto/tls.a _gotest_.6  _cgo_defun.6 _cgo_import.6\n> root_darwin.cgo2.o _cgo_export.o\n> --- FAIL: tls.TestHandshakeClientRC4 (0.24 seconds)\n> \tRC4 #2: unexpected EOF\n> FAIL\n> gotest: \"./6.out\" failed: exit status 1\n\nThanks Andrew.  Seems to work (except for the test failures because of the CA verify logic). \nIf possible, we should also check whether a Lion-built Go executable using this code still runs on Snow Leopard.\nSomething like this should suffice: http://goo.gl/pFPRn ... here's a binary: http://db.tt/Hqu0Zo1z if anyone dares :-)\n\nThe test failure was because of the new root CA logic.  With the new code, the client would reject the certificate chain presented in handshake_client_test.go. To remedy this I've introduced a new tls.Config field called SkipVerification. It'll skip verification of the server's certificate chain.\n\nLikewise, there was a test failure in package http similar to this.  For now, I've enabled SkipVerification for both of the tests.\n\nI tried to check whether it was feasible to instead introduce a 'AllowSelfSigned' field instead, but I don't think crypto/x509 currently is able to verify self-signed certificates (where self-signed means a chain that only includes a single certificate that's signed by itself). That's for another CL.",
			"disapproval": false,
			"date": "2011-10-13 13:38:29.268841",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"krautz@gmail.com",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Thanks very much for doing this.\n\nhttp://codereview.appspot.com/5262041/diff/18001/src/pkg/crypto/tls/common.go\nFile src/pkg/crypto/tls/common.go (right):\n\nhttp://codereview.appspot.com/5262041/diff/18001/src/pkg/crypto/tls/common.go#newcode157\nsrc/pkg/crypto/tls/common.go:157: // SkipVerification controls whether a client should attempt to verify\n// InsecureSkipVerify controls whether a client verifies the\n// server's certificate chain and host name.\n// If InsecureSkipVerify is true, TLS accepts any certificate\n// presented by the server and any host name in that certificate.\n// In this mode, TLS is susceptible to man-in-the-middle attacks.\n// This should be used only for testing.\nInsecureSkipVerify bool\n\nhttp://codereview.appspot.com/5262041/diff/18001/src/pkg/crypto/tls/handshake_client.go\nFile src/pkg/crypto/tls/handshake_client.go (right):\n\nhttp://codereview.appspot.com/5262041/diff/18001/src/pkg/crypto/tls/handshake_client.go#newcode100\nsrc/pkg/crypto/tls/handshake_client.go:100: // If we don't have a root CA set configured and the system doesn't provide its\nThis was a hack for OS X users.  It's not the right default behavior.\n\nif !c.config.InsecureSkipVerify {\n    opts := x509.VerifyOptions{\n        Roots: c.config.rootCAs(),\n        ...\n\nhttp://codereview.appspot.com/5262041/diff/18001/src/pkg/crypto/tls/root_test.go\nFile src/pkg/crypto/tls/root_test.go (right):\n\nhttp://codereview.appspot.com/5262041/diff/18001/src/pkg/crypto/tls/root_test.go#newcode15\nsrc/pkg/crypto/tls/root_test.go:15: // x509.CertPool is not easily testable in isolation.\nHow about\n\nroots := defaultRoots()\nif testing.Short() {\n    t.Logf(\"skipping certificate tests in short mode\")\n    return\n}\n\n... otherwise, connect to list of https servers and make\n... sure the certs verify.\n\n(global)\nvar tlsServers = []string{\n    \"www.google.com\",\n    \"github.com\",\n    \"twitter.com\",\n}",
			"disapproval": false,
			"date": "2011-10-13 15:14:35.222967",
			"approval": false
		},
		{
			"sender": "krautz@gmail.com",
			"recipients": [
				"krautz@gmail.com",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Thanks, I'll fix these.\n\nhttp://codereview.appspot.com/5262041/diff/18001/src/pkg/crypto/tls/handshake_client.go\nFile src/pkg/crypto/tls/handshake_client.go (right):\n\nhttp://codereview.appspot.com/5262041/diff/18001/src/pkg/crypto/tls/handshake_client.go#newcode100\nsrc/pkg/crypto/tls/handshake_client.go:100: // If we don't have a root CA set configured and the system doesn't provide its\nOn 2011/10/13 15:14:35, rsc wrote:\n> This was a hack for OS X users.  It's not the right default behavior.\n> \n> if !c.config.InsecureSkipVerify {\n>     opts := x509.VerifyOptions{\n>         Roots: c.config.rootCAs(),\n>         ...\n> \n>     \n\nI kept it around mainly to allow systems that use root_stub.go to still function with the current behavior (basically SkipVerification == true).\n\nI plan to submit a CL implementing access to Windows' cert stores as well, so perhaps it's not too much of an issue.",
			"disapproval": false,
			"date": "2011-10-13 15:37:50.942323",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nThanks again.\n",
			"disapproval": false,
			"date": "2011-10-13 17:27:00.957430",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> I kept it around mainly to allow systems that use root_stub.go to still\n> function with the current behavior (basically SkipVerification == true).\n> \n> I plan to submit a CL implementing access to Windows' cert stores as\n> well, so perhaps it's not too much of an issue.\n\nNow that we have the ability to do the right thing,\nwe should do the right thing.  I put that code in\nwhen package net could not use cgo at all.\nKeeping it just encourages us not to fix it.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-10-13 15:50:17.028229",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"krautz@gmail.com",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=31f70d4380cd ***\n\ncrypto/tls: fetch root certificates using Mac OS API\n\nFixes issue 1009.\n\nR=adg, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5262041\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2011-10-13 17:59:19.460798",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"krautz@gmail.com",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5262041/diff/28001/src/pkg/crypto/tls/handshake_client.go\nFile src/pkg/crypto/tls/handshake_client.go (right):\n\nhttp://codereview.appspot.com/5262041/diff/28001/src/pkg/crypto/tls/handshake_client.go#newcode100\nsrc/pkg/crypto/tls/handshake_client.go:100: if c.config.InsecureSkipVerify == false {\nif !c.config.InsecureSkipVerify {",
			"disapproval": false,
			"date": "2011-10-13 17:17:59.742798",
			"approval": true
		}
	],
	"owner_email": "krautz@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mkrautz",
	"subject": "code review 5262041: crypto/tls: fetch root certificates using Mac OS API",
	"created": "2011-10-13 00:03:04.664830",
	"patchsets": [
		1,
		2001,
		5001,
		10001,
		13001,
		13002,
		18001,
		20002,
		28001,
		14015
	],
	"modified": "2011-10-14 14:20:23.658112",
	"closed": true,
	"issue": 5262041
}