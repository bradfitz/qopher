{
	"description": "go/ast: another implementation of visitors\n\nAn implementation of visitors, based on go/ast/walk.go, that makes it\neasier for the programmer to transform ASTs. Using the original version,\nit was difficult to replace a node in the AST -- this version solves\nthat problem by allowing the visitor to return a new node that replaces\nthe one that's currently being visited, and Walk2() takes care of\nmodifying the parent node accordingly.\n\n(This code is unfortunately littered with typecasts, because Go doesn't\nsupport generics. I am hoping to find ways around this, but haven't had\nany luck yet.)",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"gri@golang.org"
	],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"alexwarth@gmail.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for creating the CL - this makes it much easier to provide feedback. \n\nSome suggestions to think about.\n\n- Robert\n\nhttp://codereview.appspot.com/5440127/diff/4001/src/pkg/go/ast/walk2.go\nFile src/pkg/go/ast/walk2.go (right):\n\nhttp://codereview.appspot.com/5440127/diff/4001/src/pkg/go/ast/walk2.go#newcode36\nsrc/pkg/go/ast/walk2.go:36: // TODO(awarth): try to find a way to get rid of all of the nasty typecasts in\nI think it's not that bad.  But that said, one of the reasons for the casts is that you throw away information:\n\n- If you call Walk2 with a known type, then you do an extra type switch which is not needed (inside Walks), and then you need another one upon return - why not call a specific function instead?\n\n- If you call Walk2 with an unknown (interface) type, then you do need the extra type switch inside, but it's ok to return an interface value again.\n\nhttp://codereview.appspot.com/5440127/diff/4001/src/pkg/go/ast/walk2.go#newcode52\nsrc/pkg/go/ast/walk2.go:52: n.List[i] = Walk2(w, c).(*Comment)\nFor instance, here you know that the c is a Comment. Calling Walk2 is overkill. It does too much work. Do the work right here and you're fine.\n\nhttp://codereview.appspot.com/5440127/diff/4001/src/pkg/go/ast/walk2.go#newcode70\nsrc/pkg/go/ast/walk2.go:70: n.List[i] = Walk2(w, f).(*Field)\nsame here\n\nhttp://codereview.appspot.com/5440127/diff/4001/src/pkg/go/ast/walk2.go#newcode93\nsrc/pkg/go/ast/walk2.go:93: n.X = Walk2(w, n.X).(Expr)\nIn this case the Expr cast is not needed since n.X is a Expr: Define a WalkExpr function that only takes care of expressions and returns an Expr. This also leads to a nicer organization of the code and smaller Walk functions, one for Expr, one for Stmt, one for Decl, and perhaps a variety of specific ones if needed.",
			"disapproval": false,
			"date": "2011-12-07 20:56:17.016843",
			"approval": false
		},
		{
			"sender": "alexwarth@gmail.com",
			"recipients": [
				"alexwarth@gmail.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-07 06:34:05.935777",
			"approval": false
		}
	],
	"owner_email": "alexwarth@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Alex Warth",
	"subject": "code review 5440127: go/ast: another implementation of visitors",
	"created": "2011-12-07 06:29:44.054699",
	"patchsets": [
		1,
		2001,
		4001
	],
	"modified": "2011-12-07 06:34:05.935777",
	"closed": false,
	"issue": 5440127
}