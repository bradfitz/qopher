{
	"description": "cgo: allow Window's specific path characters in flag directives.\n\nExample: #cgo windows LDFLAGS: -LC:\\\\WINDOWS\\\\system32",
	"cc": [
		"alex.brainman@gmail.com",
		"go.peter.90@gmail.com",
		"golang-dev@googlegroups.com",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Why the doubled backslashes in the example?\n\nRuss\n",
			"disapproval": false,
			"date": "2011-09-29 12:51:18.506768",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-09-29 03:25:29.883329",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Sep 29, 2011 at 10:49 AM, Joseph Poirier <jdpoirier@gmail.com> wrote:\n> On Thu, Sep 29, 2011 at 10:30 AM, Russ Cox <rsc@golang.org> wrote:\n>> Okay, but why the doubled backslash in\n>> Example: #cgo windows LDFLAGS: -LC:\\\\WINDOWS\\\\system32\n>>\n>\n> splitQuoted consumes the first backslash.\n>\n\nsplitQuoted correctly views the first backslash as an\nescape character and passes on the character being\nescaped, which is another backslash in my example.\n\nI believe having to escape backslashes in path strings\nis common when developing on Windows but maybe\nthe real Windows developers can weigh in.\n\n-joe\n",
			"disapproval": false,
			"date": "2011-09-29 16:07:58.583258",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"go.peter.90@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Russ,\n\nThe revised safeBytes,\n\nvar safeBytes = []byte(\"+-.,/0123456789:=ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\\_abcdefghijklmnopqrstuvwxyz\")\n\nis an interpreted string literal, not a raw string literal. Without the doubled backslashes, it will fail with an \"unknown escape sequence\" error.\n\nI would have used a raw string literal.\n\nPeter\n\nOn 2011/09/29 12:51:18, rsc wrote:\n> Why the doubled backslashes in the example?\n> \n> Russ",
			"disapproval": false,
			"date": "2011-09-29 14:11:19.821548",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Okay, but why the doubled backslash in\n\nExample: #cgo windows LDFLAGS: -LC:\\\\WINDOWS\\\\system32\n",
			"disapproval": false,
			"date": "2011-09-29 15:30:30.780796",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Sep 29, 2011 at 10:30 AM, Russ Cox <rsc@golang.org> wrote:\n> Okay, but why the doubled backslash in\n> Example: #cgo windows LDFLAGS: -LC:\\\\WINDOWS\\\\system32\n>\n\nsplitQuoted consumes the first backslash.\n\n-joe\n",
			"disapproval": false,
			"date": "2011-09-29 15:50:09.810792",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"go.peter.90@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "The change LGTM. I would use `` as peterGo suggested and would have / and \\ next to each other.\n\nOn 2011/09/29 15:30:30, rsc wrote:\n> Okay, but why the doubled backslash in\n> \n> Example: #cgo windows LDFLAGS: -LC:\\\\WINDOWS\\\\system32\n\nIt is our program. We make the rules. At this moment, according to splitQuoted doco, backslash is used for escaping. Therefore we must use \\\\ to escape \\. If you want to change this rule and disallow escaping, then we won't have to double backslash.\n\nAlex",
			"disapproval": false,
			"date": "2011-10-03 01:31:57.776121",
			"approval": true
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"jdpoirier@gmail.com",
				"alex.brainman@gmail.com",
				"go.peter.90@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello alex.brainman@gmail.com, go.peter.90@gmail.com, golang-dev@googlegroups.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-03 16:19:11.441764",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"jdpoirier@gmail.com",
				"alex.brainman@gmail.com",
				"go.peter.90@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/10/03 16:23:06, Joe Poirier wrote:\n> \n> The order is the same since it's consistent with the rest of the characters in\n> safeBytes, lowest to highest value.\n> \n\nYou are right. LGTM",
			"disapproval": false,
			"date": "2011-10-04 04:07:11.898752",
			"approval": true
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"jdpoirier@gmail.com",
				"alex.brainman@gmail.com",
				"go.peter.90@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Uses a raw string literal. \n\nThe order is the same since it's consistent with the rest of the characters in safeBytes, lowest to highest value.\n\n-joe",
			"disapproval": false,
			"date": "2011-10-03 16:23:06.684773",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"jdpoirier@gmail.com",
				"alex.brainman@gmail.com",
				"go.peter.90@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=6aa111bd2d11 ***\n\ncgo: allow Window's specific path characters in flag directives.\n\nExample: #cgo windows LDFLAGS: -LC:\\\\WINDOWS\\\\system32\n\nR=alex.brainman, go.peter.90, golang-dev, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5154042\n\nCommitter: Alex Brainman <alex.brainman@gmail.com>",
			"disapproval": false,
			"date": "2011-10-04 04:07:42.599224",
			"approval": false
		}
	],
	"owner_email": "jdpoirier@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Joe Poirier",
	"subject": "code review 5154042: cgo: allow Window's specific path characters in flag di...",
	"created": "2011-09-29 03:23:03.059364",
	"patchsets": [
		1,
		2001,
		4001,
		11002
	],
	"modified": "2011-10-07 04:38:09.446995",
	"closed": true,
	"issue": 5154042
}