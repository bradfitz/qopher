{
	"description": "testing: add memory allocation stats to benchmark",
	"cc": [
		"rsc@golang.org",
		"nigeltao@golang.org",
		"dave@cheney.net",
		"bradfitz@golang.org",
		"r@golang.org",
		"rogpeppe@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Does an empty benchmark report any allocation ?\r\n\r\nOn Wed, Sep 5, 2012 at 4:47 PM,  <nigeltao@golang.org> wrote:\r\n>\r\n> https://codereview.appspot.com/6497084/diff/5001/src/pkg/testing/benchmark.go\r\n> File src/pkg/testing/benchmark.go (right):\r\n>\r\n> https://codereview.appspot.com/6497084/diff/5001/src/pkg/testing/benchmark.go#newcode36\r\n> src/pkg/testing/benchmark.go:36: memStats *runtime.MemStats\r\n> You could drop the * here and avoid the indirection, and the \"b.memStats\r\n> = new(runtime.MemStats)\" line. Pass &b.memStats to runtime.ReadMemStats\r\n> instead of b.memStats below.\r\n>\r\n> https://codereview.appspot.com/6497084/\r\n",
			"disapproval": false,
			"date": "2012-09-05 06:48:51.941020",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This seems good.\n\nProbably worth adding a sentence to testing.go that benchmarks run sequentially.",
			"disapproval": false,
			"date": "2012-09-11 18:49:33.004160",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6497084/diff/8001/src/pkg/testing/benchmark.go\nFile src/pkg/testing/benchmark.go (right):\n\nhttp://codereview.appspot.com/6497084/diff/8001/src/pkg/testing/benchmark.go#newcode36\nsrc/pkg/testing/benchmark.go:36: memStats runtime.MemStats\nThis can be a global. It's big, and there's only one benchmark running at a time.\n\nhttp://codereview.appspot.com/6497084/diff/8001/src/pkg/testing/benchmark.go#newcode239\nsrc/pkg/testing/benchmark.go:239: return fmt.Sprintf(\"%8d\\t%8dB/op %8d allocs/op\", r.N, r.AllocedBytesPerOp(), r.AllocsPerOp())\nThis should probably be appended to the usual text, not replace it.",
			"disapproval": false,
			"date": "2012-09-10 16:13:31.976410",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "+1 - i've thought about doing something like this in the past.\n\nhttp://codereview.appspot.com/6497084/diff/8001/src/pkg/testing/benchmark.go\nFile src/pkg/testing/benchmark.go (right):\n\nhttp://codereview.appspot.com/6497084/diff/8001/src/pkg/testing/benchmark.go#newcode17\nsrc/pkg/testing/benchmark.go:17: var benchmarkMemory = flag.Bool(\"test.benchmem\", false, \"measure memory allocations during benchmarks\")\nI think that this should be \"print memory allocations for benchmarks\" and we should always measure. That way, the results of runtime.Benchmark will show the correct stats - we won't need to add a new function or argument. Surely there's neglible performance impact.\n\nhttp://codereview.appspot.com/6497084/diff/8001/src/pkg/testing/benchmark.go#newcode36\nsrc/pkg/testing/benchmark.go:36: memStats runtime.MemStats\nOn 2012/09/10 16:13:32, rsc wrote:\n> This can be a global. It's big, and there's only one benchmark running at a\n> time.\n\nI'm not sure about that. Isn't it ok for someone to call testing.Benchmark concurrently?\n\nhttp://codereview.appspot.com/6497084/diff/8001/src/pkg/testing/benchmark.go#newcode239\nsrc/pkg/testing/benchmark.go:239: return fmt.Sprintf(\"%8d\\t%8dB/op %8d allocs/op\", r.N, r.AllocedBytesPerOp(), r.AllocsPerOp())\nOn 2012/09/10 16:13:32, rsc wrote:\n> This should probably be appended to the usual text, not replace it.\n\n+1",
			"disapproval": false,
			"date": "2012-09-10 16:26:47.714550",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6497084/diff/11001/src/pkg/testing/benchmark.go\nFile src/pkg/testing/benchmark.go (right):\n\nhttp://codereview.appspot.com/6497084/diff/11001/src/pkg/testing/benchmark.go#newcode245\nsrc/pkg/testing/benchmark.go:245: mem := \"\"\nMaybe this should be a separate method MemString that callers can choose to use or not. Then the String return does not depend on a flag. I agree with Rog that that's undesirable. RunBenchmarks would += \"\\t\"+r.MemString() if the flag is set.",
			"disapproval": false,
			"date": "2012-09-17 20:57:21.691280",
			"approval": false
		},
		{
			"sender": "eric.d.eisner@gmail.com",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2012-09-05 04:49:13.282690",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I definitely think it should be possible to use the Benchmark function to\r\nmeasure memory too. As it is, it returns the benchmark result with zero\r\nmemory-allocation results.\r\n\r\nI am not too keen either on the fact that BenchmarkResult.String also now\r\ndepends on the global flag. It is useful to be able to get the default\r\noutput even when not running in a test suite.\r\n\r\nI am not sure of the best way to do that best though while preserving Go 1\r\ncompatibility.\r\nOn Sep 11, 2012 8:17 PM, <eric.d.eisner@gmail.com> wrote:\r\n\r\n> Hello rsc@golang.org, nigeltao@golang.org, dave@cheney.net,\r\n> bradfitz@golang.org, r@golang.org, rogpeppe@gmail.com (cc:\r\n> golang-dev@googlegroups.com),\r\n>\r\n> Please take another look.\r\n>\r\n>\r\n> http://codereview.appspot.com/**6497084/<http://codereview.appspot.com/6497084/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-09-11 19:35:31.761330",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6497084/diff/5001/src/pkg/testing/benchmark.go\nFile src/pkg/testing/benchmark.go (right):\n\nhttps://codereview.appspot.com/6497084/diff/5001/src/pkg/testing/benchmark.go#newcode36\nsrc/pkg/testing/benchmark.go:36: memStats *runtime.MemStats\nYou could drop the * here and avoid the indirection, and the \"b.memStats = new(runtime.MemStats)\" line. Pass &b.memStats to runtime.ReadMemStats instead of b.memStats below.",
			"disapproval": false,
			"date": "2012-09-05 06:47:23.500710",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "If a benchmark falls alone in the woods, ...\r\nOn Sep 4, 2012 8:49 PM, \"Dave Cheney\" <dave@cheney.net> wrote:\r\n\r\n> Does an empty benchmark report any allocation ?\r\n>\r\n> On Wed, Sep 5, 2012 at 4:47 PM,  <nigeltao@golang.org> wrote:\r\n> >\r\n> >\r\n> https://codereview.appspot.com/6497084/diff/5001/src/pkg/testing/benchmark.go\r\n> > File src/pkg/testing/benchmark.go (right):\r\n> >\r\n> >\r\n> https://codereview.appspot.com/6497084/diff/5001/src/pkg/testing/benchmark.go#newcode36\r\n> > src/pkg/testing/benchmark.go:36: memStats *runtime.MemStats\r\n> > You could drop the * here and avoid the indirection, and the \"b.memStats\r\n> > = new(runtime.MemStats)\" line. Pass &b.memStats to runtime.ReadMemStats\r\n> > instead of b.memStats below.\r\n> >\r\n> > https://codereview.appspot.com/6497084/\r\n>\r\n",
			"disapproval": false,
			"date": "2012-09-05 06:51:28.867800",
			"approval": false
		},
		{
			"sender": "eric.d.eisner@gmail.com",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ok, I've made the memory stats always on, but only print the extra info with the flag.\n\nOn 2012/09/17 20:57:21, rsc wrote:\n> http://codereview.appspot.com/6497084/diff/11001/src/pkg/testing/benchmark.go\n> File src/pkg/testing/benchmark.go (right):\n> \n> http://codereview.appspot.com/6497084/diff/11001/src/pkg/testing/benchmark.go#newcode245\n> src/pkg/testing/benchmark.go:245: mem := \"\"\n> Maybe this should be a separate method MemString that callers can choose to use\n> or not. Then the String return does not depend on a flag. I agree with Rog that\n> that's undesirable. RunBenchmarks would += \"\\t\"+r.MemString() if the flag is\n> set.",
			"disapproval": false,
			"date": "2012-09-17 22:36:06.892400",
			"approval": false
		},
		{
			"sender": "eric.d.eisner@gmail.com",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, nigeltao@golang.org, dave@cheney.net, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-05 15:09:29.679300",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 10 September 2012 17:31,  <eric.d.eisner@gmail.com> wrote:\r\n> Running benchmarks concurrently will give you shifty results, in runtime\r\n> and memory usage. If anything there should be a global benchmark lock\r\n> ensuring single access.\r\n\r\nthat sounds reasonable.\r\n",
			"disapproval": false,
			"date": "2012-09-10 17:43:43.979700",
			"approval": false
		},
		{
			"sender": "eric.d.eisner@gmail.com",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, nigeltao@golang.org, dave@cheney.net, bradfitz@golang.org, r@golang.org, rogpeppe@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-10 18:22:41.471270",
			"approval": false
		},
		{
			"sender": "eric.d.eisner@gmail.com",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/05 06:48:51, dfc wrote:\n> Does an empty benchmark report any allocation ?\n> \n> On Wed, Sep 5, 2012 at 4:47 PM,  <mailto:nigeltao@golang.org> wrote:\n> >\n> > https://codereview.appspot.com/6497084/diff/5001/src/pkg/testing/benchmark.go\n> > File src/pkg/testing/benchmark.go (right):\n> >\n> >\n> https://codereview.appspot.com/6497084/diff/5001/src/pkg/testing/benchmark.go#newcode36\n> > src/pkg/testing/benchmark.go:36: memStats *runtime.MemStats\n> > You could drop the * here and avoid the indirection, and the \"b.memStats\n> > = new(runtime.MemStats)\" line. Pass &b.memStats to runtime.ReadMemStats\n> > instead of b.memStats below.\n> >\n> > https://codereview.appspot.com/6497084/\n\nInlined memStats. Confirmed that a dumb benchmark that iterates once allocates zero bytes.\n\nAs for the presentation, the timing information is still recorded when testing memory, but it makes for a very long line to show it all. Is it acceptable to give just the memory numbers?",
			"disapproval": false,
			"date": "2012-09-05 15:13:51.943120",
			"approval": false
		},
		{
			"sender": "eric.d.eisner@gmail.com",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/10 16:26:47, rog wrote:\n> +1 - i've thought about doing something like this in the past.\n> \n> http://codereview.appspot.com/6497084/diff/8001/src/pkg/testing/benchmark.go\n> File src/pkg/testing/benchmark.go (right):\n> \n> http://codereview.appspot.com/6497084/diff/8001/src/pkg/testing/benchmark.go#newcode17\n> src/pkg/testing/benchmark.go:17: var benchmarkMemory =\n> flag.Bool(\"test.benchmem\", false, \"measure memory allocations during\n> benchmarks\")\n> I think that this should be \"print memory allocations for benchmarks\" and we\n> should always measure. That way, the results of runtime.Benchmark will show the\n> correct stats - we won't need to add a new function or argument. Surely there's\n> neglible performance impact.\n> \n> http://codereview.appspot.com/6497084/diff/8001/src/pkg/testing/benchmark.go#newcode36\n> src/pkg/testing/benchmark.go:36: memStats runtime.MemStats\n> On 2012/09/10 16:13:32, rsc wrote:\n> > This can be a global. It's big, and there's only one benchmark running at a\n> > time.\n> \n> I'm not sure about that. Isn't it ok for someone to call testing.Benchmark\n> concurrently?\n\nRunning benchmarks concurrently will give you shifty results, in runtime and memory usage. If anything there should be a global benchmark lock ensuring single access.\n\n> \n> http://codereview.appspot.com/6497084/diff/8001/src/pkg/testing/benchmark.go#newcode239\n> src/pkg/testing/benchmark.go:239: return fmt.Sprintf(\"%8d\\t%8dB/op %8d\n> allocs/op\", r.N, r.AllocedBytesPerOp(), r.AllocsPerOp())\n> On 2012/09/10 16:13:32, rsc wrote:\n> > This should probably be appended to the usual text, not replace it.\n> \n> +1",
			"disapproval": false,
			"date": "2012-09-10 16:31:28.101030",
			"approval": false
		},
		{
			"sender": "eric.d.eisner@gmail.com",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, nigeltao@golang.org, dave@cheney.net, bradfitz@golang.org, r@golang.org, rogpeppe@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-11 19:17:56.923120",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I like the idea and the code. In future, please discuss your ideas\r\nbefore sending out the code, as requested by the contribution\r\nguidelines.\r\n\r\nDoes anyone else want to weigh in?\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-09-06 22:54:22.774850",
			"approval": false
		},
		{
			"sender": "eric.d.eisner@gmail.com",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ping.\n\nOn 2012/09/17 22:36:06, Eric Roshan Eisner wrote:\n> Ok, I've made the memory stats always on, but only print the extra info with the\n> flag.",
			"disapproval": false,
			"date": "2012-09-24 05:46:52.569680",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6497084/diff/11002/src/pkg/testing/testing.go\nFile src/pkg/testing/testing.go (right):\n\nhttps://codereview.appspot.com/6497084/diff/11002/src/pkg/testing/testing.go#newcode16\nsrc/pkg/testing/testing.go:16: // the -test.bench flag is provided. Benchmarks are run sequentially to avoid\nsequentially.\n(drop to avoid...)",
			"disapproval": false,
			"date": "2012-09-24 14:35:11.874580",
			"approval": true
		},
		{
			"sender": "eric.d.eisner@gmail.com",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/24 14:35:11, rsc wrote:\n> LGTM\n> \n> https://codereview.appspot.com/6497084/diff/11002/src/pkg/testing/testing.go\n> File src/pkg/testing/testing.go (right):\n> \n> https://codereview.appspot.com/6497084/diff/11002/src/pkg/testing/testing.go#newcode16\n> src/pkg/testing/testing.go:16: // the -test.bench flag is provided. Benchmarks\n> are run sequentially to avoid\n> sequentially.\n> (drop to avoid...)\nDone.",
			"disapproval": false,
			"date": "2012-09-24 14:54:58.717540",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-09-24 16:48:00.765770",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=4fdee89c5785 ***\n\ntesting: add memory allocation stats to benchmark\n\nR=rsc, nigeltao, dave, bradfitz, r, rogpeppe\nCC=golang-dev\nhttp://codereview.appspot.com/6497084\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2012-09-24 19:03:18.439390",
			"approval": false
		},
		{
			"sender": "eric.d.eisner@gmail.com",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-09-25 02:13:14.625860",
			"approval": false
		},
		{
			"sender": "eric.d.eisner@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sync failed to close it, if it happens again I'll try to reproduce and\r\nfix/file a ticket.\r\nOn Sep 24, 2012 7:37 PM, \"Russ Cox\" <rsc@golang.org> wrote:\r\n\r\n> On Mon, Sep 24, 2012 at 10:13 PM,  <eric.d.eisner@gmail.com> wrote:\r\n> > *** Abandoned ***\r\n>\r\n> fwiw, 'hg sync' should close for you; you shouldn't need to hg change -d.\r\n>\r\n",
			"disapproval": false,
			"date": "2012-09-25 02:41:31.605380",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Sep 24, 2012 at 10:13 PM,  <eric.d.eisner@gmail.com> wrote:\r\n> *** Abandoned ***\r\n\r\nfwiw, 'hg sync' should close for you; you shouldn't need to hg change -d.\r\n",
			"disapproval": false,
			"date": "2012-09-25 02:37:37.954260",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn 24 September 2012 15:54,  <eric.d.eisner@gmail.com> wrote:\r\n> On 2012/09/24 14:35:11, rsc wrote:\r\n>>\r\n>> LGTM\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.com/6497084/diff/11002/src/pkg/testing/testing.go\r\n>>\r\n>> File src/pkg/testing/testing.go (right):\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.com/6497084/diff/11002/src/pkg/testing/testing.go#newcode16\r\n>>\r\n>> src/pkg/testing/testing.go:16: // the -test.bench flag is provided.\r\n>\r\n> Benchmarks\r\n>>\r\n>> are run sequentially to avoid\r\n>> sequentially.\r\n>> (drop to avoid...)\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.com/6497084/\r\n",
			"disapproval": false,
			"date": "2012-09-25 08:16:13.764470",
			"approval": true
		}
	],
	"owner_email": "eric.d.eisner@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Eric Roshan Eisner",
	"subject": "code review 6497084: testing: add memory allocation stats to benchmark",
	"created": "2012-09-05 04:37:18.261080",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		7003,
		11001,
		11002,
		17001
	],
	"modified": "2012-09-25 02:13:17.506270",
	"closed": true,
	"issue": 6497084
}