{
	"description": "encoding/xml: correctly escape newline, carriage return, and tab\n\nThe generated encodings are those from\nhttp://www.w3.org/TR/2000/WD-xml-c14n-20000119.html#charescaping\n\nThe change to the decoder ensures that we turn &#xD; in the\ninput into \\r, not \\n.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-10-18 17:54:20.418530",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6747043/diff/1/src/pkg/encoding/xml/xml.go\nFile src/pkg/encoding/xml/xml.go (right):\n\nhttps://codereview.appspot.com/6747043/diff/1/src/pkg/encoding/xml/xml.go#newcode1708\nsrc/pkg/encoding/xml/xml.go:1708: esc = []byte(fmt.Sprintf(\"&#x%X;\", c))\nI'd just add more esc_foo variables like the other cases, rather than allocating 2+ times on each newline.",
			"disapproval": false,
			"date": "2012-10-18 18:06:52.974050",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/6747043/diff/1/src/pkg/encoding/xml/xml.go\nFile src/pkg/encoding/xml/xml.go (right):\n\nhttps://codereview.appspot.com/6747043/diff/1/src/pkg/encoding/xml/xml.go#newcode1708\nsrc/pkg/encoding/xml/xml.go:1708: esc = []byte(fmt.Sprintf(\"&#x%X;\", c))\nOn 2012/10/18 18:06:53, bradfitz wrote:\n> I'd just add more esc_foo variables like the other cases, rather than allocating\n> 2+ times on each newline.\n\nThat is less amusing, but, OK.",
			"disapproval": false,
			"date": "2012-10-18 19:00:36.893370",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Thu, Oct 18, 2012 at 1:31 PM, <iant@golang.org> wrote:\r\n\r\n> PTAL\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.**com/6747043/diff/1/src/pkg/**\r\n> encoding/xml/xml.go<https://codereview.appspot.com/6747043/diff/1/src/pkg/encoding/xml/xml.go>\r\n> File src/pkg/encoding/xml/xml.go (right):\r\n>\r\n> https://codereview.appspot.**com/6747043/diff/1/src/pkg/**\r\n> encoding/xml/xml.go#newcode971<https://codereview.appspot.com/6747043/diff/1/src/pkg/encoding/xml/xml.go#newcode971>\r\n> src/pkg/encoding/xml/xml.go:**971: } else if b0 == '\\r' && b == '\\n' {\r\n> On 2012/10/18 20:15:32, bradfitz wrote:\r\n>\r\n>> b0 is the previous byte read?  that looks b1 in the loop below.  this\r\n>>\r\n> is either\r\n>\r\n>> some convention I don't know, or not commented.\r\n>>\r\n>\r\n> You're quite right, it should be b1.  I meant to write b1.  Fixed now.\r\n> Added a test.\r\n>\r\n> https://codereview.appspot.**com/6747043/<https://codereview.appspot.com/6747043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-18 20:38:13.862500",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6747043/diff/1/src/pkg/encoding/xml/xml.go\nFile src/pkg/encoding/xml/xml.go (right):\n\nhttps://codereview.appspot.com/6747043/diff/1/src/pkg/encoding/xml/xml.go#newcode971\nsrc/pkg/encoding/xml/xml.go:971: } else if b0 == '\\r' && b == '\\n' {\nb0 is the previous byte read?  that looks b1 in the loop below.  this is either some convention I don't know, or not commented.\n\nIt's quite likely that this code is correct, and you seem to have good tests, but I'm not confident reviewing it.  I've never read the xml code before.",
			"disapproval": false,
			"date": "2012-10-18 20:15:32.570910",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/6747043/diff/1/src/pkg/encoding/xml/xml.go\nFile src/pkg/encoding/xml/xml.go (right):\n\nhttps://codereview.appspot.com/6747043/diff/1/src/pkg/encoding/xml/xml.go#newcode971\nsrc/pkg/encoding/xml/xml.go:971: } else if b0 == '\\r' && b == '\\n' {\nOn 2012/10/18 20:15:32, bradfitz wrote:\n> b0 is the previous byte read?  that looks b1 in the loop below.  this is either\n> some convention I don't know, or not commented.\n\nYou're quite right, it should be b1.  I meant to write b1.  Fixed now.  Added a test.",
			"disapproval": false,
			"date": "2012-10-18 20:31:51.614140",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=bc9734d10a1d ***\n\nencoding/xml: correctly escape newline, carriage return, and tab\n\nThe generated encodings are those from\nhttp://www.w3.org/TR/2000/WD-xml-c14n-20000119.html#charescaping\n\nThe change to the decoder ensures that we turn &#xD; in the\ninput into \\r, not \\n.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/6747043",
			"disapproval": false,
			"date": "2012-10-18 20:41:08.811210",
			"approval": false
		}
	],
	"owner_email": "iant@golang.org",
	"private": false,
	"base_url": "",
	"owner": "iant",
	"subject": "code review 6747043: encoding/xml: correctly escape newline, carriage return...",
	"created": "2012-10-18 17:54:13.739350",
	"patchsets": [
		1,
		4001,
		9001,
		2002
	],
	"modified": "2012-10-18 20:41:10.347330",
	"closed": true,
	"issue": 6747043
}