{
	"description": "Updates\r\n\r\nWatchFlags of files created in Watched directories are now the same as the\r\nparent directory. (https://github.com/howeyc/fsnotify/issues/33)\r\n\r\nDarwin now uses EVT_ONLY flag on Open file for watching.\r\n(https://github.com/howeyc/fsnotify/issues/44)\r\n\r\nLinux has been updated to ignore events that occur after delete.\r\n(https://github.com/howeyc/fsnotify/issues/36)\r\n\r\nSymlink test updated.\r\n(https://github.com/howeyc/fsnotify/pull/42)\r\n\r\nRename tests use external \"mv\" where available.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"fullung@gmail.com",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "howeyc@gmail.com",
			"recipients": [
				"howeyc@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I've been slow keeping this up-to-date with the changes I have been making to the github repository I have for this package. This is my attempt to get it back in sync.\n\nHaving said that, should my goal be to keep this updated? Or is this here to start a conversation for a yet to be determined API to be included into the standard library?.",
			"disapproval": false,
			"date": "2013-05-28 22:22:48.098080",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"howeyc@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you, I'm happy to see this packaged getting some updates. \n\nI'm curious about testRename, what is the rational for sometimes using the host mv ?\n\nhttps://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_bsd.go\nFile fsnotify/fsnotify_bsd.go (right):\n\nhttps://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_bsd.go#newcode371\nfsnotify/fsnotify_bsd.go:371: dirFsnFlags, dirFsnFound := w.fsnFlags[dirPath]\nif flags, found := w.fsnFlags[dirPath]; found {\n    w.fsnFlags[filePath] = flags\n} else {\n    w.fsnFlags[filePath] = FSN_ALL\n}\n\nhttps://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_bsd.go#newcode430\nfsnotify/fsnotify_bsd.go:430: dirFsnFlags, dirFsnFound := w.fsnFlags[dirPath]\nSee above\n\nhttps://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_bsd.go#newcode451\nfsnotify/fsnotify_bsd.go:451: const (\nCould you please move these to the top of the file, maybe in a follow up CL.\n\nhttps://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_linux.go\nFile fsnotify/fsnotify_linux.go (right):\n\nhttps://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_linux.go#newcode247\nfsnotify/fsnotify_linux.go:247: // assumes a DELETE will come or has come if the file doesn't exist.\nThis might be simpler if you define a const for the mask of IN_DELETE || IN_DELETE_SELF, etc, then check if that mask & e.mask > 0.\n\nhttps://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_linux.go#newcode259\nfsnotify/fsnotify_linux.go:259: const (\nsame as previous file.\n\nhttps://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_open_bsd.go\nFile fsnotify/fsnotify_open_bsd.go (right):\n\nhttps://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_open_bsd.go#newcode1\nfsnotify/fsnotify_open_bsd.go:1: // Copyright 2010 The Go Authors. All rights reserved.\nCopywrite 2013 if this is a new file\n\nhttps://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_open_darwin.go\nFile fsnotify/fsnotify_open_darwin.go (right):\n\nhttps://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_open_darwin.go#newcode1\nfsnotify/fsnotify_open_darwin.go:1: // Copyright 2010 The Go Authors. All rights reserved.\nSame as previous.\n\nhttps://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_symlink_test.go\nFile fsnotify/fsnotify_symlink_test.go (right):\n\nhttps://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_symlink_test.go#newcode35\nfsnotify/fsnotify_symlink_test.go:35: errorsReceived++\nsame as this\n\nhttps://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_symlink_test.go#newcode46\nfsnotify/fsnotify_symlink_test.go:46: createEventsReceived++\nthis is a data race\n\nhttps://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_test.go\nFile fsnotify/fsnotify_test.go (right):\n\nhttps://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_test.go#newcode567\nfsnotify/fsnotify_test.go:567: time.Sleep(200 * time.Millisecond)\nsleeps like this sometimes indicate a race, is this because there is a delay in receiving the notification on some OS's ?\n\nhttps://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_test.go#newcode785\nfsnotify/fsnotify_test.go:785: t.Skipf(\"Skipping test on %q (os.Rename over existing file does not create event).\", runtime.GOOS)\nlower case please\n\nhttps://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_test.go#newcode887\nfsnotify/fsnotify_test.go:887: t.Skip(\"Attributes don't work on Windows.\")\nlower case please, same as errors.",
			"disapproval": false,
			"date": "2013-06-01 06:18:29.321590",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"howeyc@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"fullung@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello\n\nOn 2013/05/28 22:22:48, howeyc wrote:\n> Having said that, should my goal be to keep this updated? Or is this here to\n> start a conversation for a yet to be determined API to be included into the\n> standard library?.\n\nI have some test cleanups that might be nice to incorporate into this CL:\n\nhttps://codereview.appspot.com/8202043/\n\nAlso: I noticed that TestFsnotifyDeleteWatchedDir is leaking a file descriptor:\n\nstrace -f -q -e inotify_init,open,close ./fsnotify.test -test.cpu=1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 -test.v -test.run=TestFsnotifyDeleteWatchedDir\n\nSIGABRT shows that all the readEvents goroutines (which are in charge of closing the inotify fd) are still stuck in their read syscall.\n\nThis seems like a problem with the current design of Watcher. readEvents is blocked and can't see the closed done channel.\n\nIt seems to me that the only way to fix this and various other interactions with file descriptors (libibverbs, libudev, etc.) is to have a more generic poll server.\n\nDo you have any thoughts?\n\nRegards\n\nAlbert",
			"disapproval": false,
			"date": "2013-06-01 16:14:05.437440",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"howeyc@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"fullung@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/04 11:18:26, dfc wrote:\n> LGTM. Please update the description\n> go.exp/fsnotify: backport latest updates from github repo\n> There still appears to be a problem at high concurrency.\n\nThis is issue 5536:\n\nhttps://code.google.com/p/go/issues/detail?id=5536\n\nOne last time: is anybody interested in the leaking readEvents goroutines?\n\nCheers\n\nAlbert",
			"disapproval": false,
			"date": "2013-06-04 11:38:43.343840",
			"approval": false
		},
		{
			"sender": "howeyc@gmail.com",
			"recipients": [
				"howeyc@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"fullung@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/01 06:18:29, dfc wrote:\n> Thank you, I'm happy to see this packaged getting some updates. \n> \n> I'm curious about testRename, what is the rational for sometimes using the host\n> mv ?\n\nReally just to get closer to the intended use case of monitoring for events occurring to files from other programs. I suppose not absolutely necessary.\n\n> \n> https://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_bsd.go\n> File fsnotify/fsnotify_bsd.go (right):\n> \n> https://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_bsd.go#newcode371\n> fsnotify/fsnotify_bsd.go:371: dirFsnFlags, dirFsnFound := w.fsnFlags[dirPath]\n> if flags, found := w.fsnFlags[dirPath]; found {\n>     w.fsnFlags[filePath] = flags\n> } else {\n>     w.fsnFlags[filePath] = FSN_ALL\n> }\n> \n> https://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_bsd.go#newcode430\n> fsnotify/fsnotify_bsd.go:430: dirFsnFlags, dirFsnFound := w.fsnFlags[dirPath]\n> See above\n> \n> https://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_bsd.go#newcode451\n> fsnotify/fsnotify_bsd.go:451: const (\n> Could you please move these to the top of the file, maybe in a follow up CL.\n> \n> https://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_linux.go\n> File fsnotify/fsnotify_linux.go (right):\n> \n> https://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_linux.go#newcode247\n> fsnotify/fsnotify_linux.go:247: // assumes a DELETE will come or has come if the\n> file doesn't exist.\n> This might be simpler if you define a const for the mask of IN_DELETE ||\n> IN_DELETE_SELF, etc, then check if that mask & e.mask > 0.\n> \n> https://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_linux.go#newcode259\n> fsnotify/fsnotify_linux.go:259: const (\n> same as previous file.\n> \n> https://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_open_bsd.go\n> File fsnotify/fsnotify_open_bsd.go (right):\n> \n> https://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_open_bsd.go#newcode1\n> fsnotify/fsnotify_open_bsd.go:1: // Copyright 2010 The Go Authors. All rights\n> reserved.\n> Copywrite 2013 if this is a new file\n> \n> https://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_open_darwin.go\n> File fsnotify/fsnotify_open_darwin.go (right):\n> \n> https://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_open_darwin.go#newcode1\n> fsnotify/fsnotify_open_darwin.go:1: // Copyright 2010 The Go Authors. All rights\n> reserved.\n> Same as previous.\n> \n> https://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_symlink_test.go\n> File fsnotify/fsnotify_symlink_test.go (right):\n> \n> https://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_symlink_test.go#newcode35\n> fsnotify/fsnotify_symlink_test.go:35: errorsReceived++\n> same as this\n> \n> https://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_symlink_test.go#newcode46\n> fsnotify/fsnotify_symlink_test.go:46: createEventsReceived++\n> this is a data race\n> \n> https://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_test.go\n> File fsnotify/fsnotify_test.go (right):\n> \n> https://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_test.go#newcode567\n> fsnotify/fsnotify_test.go:567: time.Sleep(200 * time.Millisecond)\n> sleeps like this sometimes indicate a race, is this because there is a delay in\n> receiving the notification on some OS's ?\n\nYes.\n\n> \n> https://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_test.go#newcode785\n> fsnotify/fsnotify_test.go:785: t.Skipf(\"Skipping test on %q (os.Rename over\n> existing file does not create event).\", runtime.GOOS)\n> lower case please\n> \n> https://codereview.appspot.com/9827046/diff/2001/fsnotify/fsnotify_test.go#newcode887\n> fsnotify/fsnotify_test.go:887: t.Skip(\"Attributes don't work on Windows.\")\n> lower case please, same as errors.\n\n\n\nAs an additional note, I made the flags used internally for the system calls to kqeue, inotify, etc. to start lowercase as I have had some emails sent to me from people attempting to pass those to WatchFlags since they were public.",
			"disapproval": false,
			"date": "2013-06-01 22:01:32.540590",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"howeyc@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"fullung@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Really just to get closer to the intended use case of monitoring for events\n> occurring to files from other programs. I suppose not absolutely necessary.\n\nProbably a good idea, I can imagine situations where a threaded program has difficulties observing its own actions.\n\n> > fsnotify/fsnotify_test.go:567: time.Sleep(200 * time.Millisecond)\n> > sleeps like this sometimes indicate a race, is this because there is a delay\n> in\n> > receiving the notification on some OS's ?\n> \n> Yes.\n\nSigh. I guess there isn't much that can be done, but these things always end up as a wack-a-mole exercise.\n\n> As an additional note, I made the flags used internally for the system calls to\n> kqeue, inotify, etc. to start lowercase as I have had some emails sent to me\n> from people attempting to pass those to WatchFlags since they were public.\n\nA good idea, give folks and inch and they will take a mile. Does this also go someway to addressing TV and RSC's comments in 5234.",
			"disapproval": false,
			"date": "2013-06-02 01:44:05.841490",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"howeyc@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"fullung@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "A few more small nits. I still need to read over the whole package and run the tests on a few systems.\n\nhttps://codereview.appspot.com/9827046/diff/13001/fsnotify/fsnotify_linux.go\nFile fsnotify/fsnotify_linux.go (right):\n\nhttps://codereview.appspot.com/9827046/diff/13001/fsnotify/fsnotify_linux.go#newcode258\nfsnotify/fsnotify_linux.go:258: fsnFlags := w.fsnFlags[watchedName]\nwhat happens if this is not found ?\n\nhttps://codereview.appspot.com/9827046/diff/13001/fsnotify/fsnotify_linux.go#newcode259\nfsnotify/fsnotify_linux.go:259: _, fsnFound := w.fsnFlags[event.Name]\nyou can compact this onto one line\n\nhttps://codereview.appspot.com/9827046/diff/13001/fsnotify/fsnotify_linux.go#newcode289\nfsnotify/fsnotify_linux.go:289: if _, statErr := os.Lstat(e.Name); os.IsNotExist(statErr) {\nwhy not\n\n_, statErr := ..\nreturn os.isNotExist(statErr)",
			"disapproval": false,
			"date": "2013-06-02 01:44:43.427010",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry for the delay, I'll have time to take another swing through the\r\nreview tonight.\r\n\r\nOn Tue, Jun 4, 2013 at 11:58 AM,  <howeyc@gmail.com> wrote:\r\n> On 2013/06/02 01:44:43, dfc wrote:\r\n>>\r\n>> A few more small nits. I still need to read over the whole package and\r\n>\r\n> run the\r\n>>\r\n>> tests on a few systems.\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.com/9827046/diff/13001/fsnotify/fsnotify_linux.go\r\n>>\r\n>> File fsnotify/fsnotify_linux.go (right):\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.com/9827046/diff/13001/fsnotify/fsnotify_linux.go#newcode258\r\n>>\r\n>> fsnotify/fsnotify_linux.go:258: fsnFlags := w.fsnFlags[watchedName]\r\n>> what happens if this is not found ?\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.com/9827046/diff/13001/fsnotify/fsnotify_linux.go#newcode259\r\n>>\r\n>> fsnotify/fsnotify_linux.go:259: _, fsnFound := w.fsnFlags[event.Name]\r\n>> you can compact this onto one line\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.com/9827046/diff/13001/fsnotify/fsnotify_linux.go#newcode289\r\n>>\r\n>> fsnotify/fsnotify_linux.go:289: if _, statErr := os.Lstat(e.Name);\r\n>> os.IsNotExist(statErr) {\r\n>> why not\r\n>\r\n>\r\n>> _, statErr := ..\r\n>> return os.isNotExist(statErr)\r\n>\r\n>\r\n> I should have all your comments addressed.\r\n>\r\n> Thanks for taking the time to review this.\r\n>\r\n> https://codereview.appspot.com/9827046/\r\n",
			"disapproval": false,
			"date": "2013-06-04 02:06:07.702530",
			"approval": false
		},
		{
			"sender": "howeyc@gmail.com",
			"recipients": [
				"howeyc@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"fullung@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/02 01:44:43, dfc wrote:\n> A few more small nits. I still need to read over the whole package and run the\n> tests on a few systems.\n> \n> https://codereview.appspot.com/9827046/diff/13001/fsnotify/fsnotify_linux.go\n> File fsnotify/fsnotify_linux.go (right):\n> \n> https://codereview.appspot.com/9827046/diff/13001/fsnotify/fsnotify_linux.go#newcode258\n> fsnotify/fsnotify_linux.go:258: fsnFlags := w.fsnFlags[watchedName]\n> what happens if this is not found ?\n> \n> https://codereview.appspot.com/9827046/diff/13001/fsnotify/fsnotify_linux.go#newcode259\n> fsnotify/fsnotify_linux.go:259: _, fsnFound := w.fsnFlags[event.Name]\n> you can compact this onto one line\n> \n> https://codereview.appspot.com/9827046/diff/13001/fsnotify/fsnotify_linux.go#newcode289\n> fsnotify/fsnotify_linux.go:289: if _, statErr := os.Lstat(e.Name);\n> os.IsNotExist(statErr) {\n> why not\n> \n> _, statErr := ..\n> return os.isNotExist(statErr)\n\nI should have all your comments addressed.\n\nThanks for taking the time to review this.",
			"disapproval": false,
			"date": "2013-06-04 01:58:14.117020",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"howeyc@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"fullung@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. Please update the description\n\ngo.exp/fsnotify: backport latest updates from github repo\n\nThere still appears to be a problem at high concurrency.\n\n--- FAIL: TestFsnotifyRenameToCreate-18 (2.52 seconds)\n        fsnotify_test.go:739: event received: \"_test/TestFsnotifyEvents.testfileRenamed\": CREATE\n        fsnotify_test.go:769: calling Close()\n        fsnotify_test.go:771: waiting for the event channel to become closed...\n        fsnotify_test.go:776: event stream was not closed after 2 seconds\nFAIL\nlucky(~/src/code.google.com/p/go.exp/fsnotify) % bash ~/stress.bash \nPASS\nPASS\nPASS\nPASS\nPASS\nPASS\nPASS\nPASS\n--- FAIL: TestFsnotifyRename-14 (2.52 seconds)\n        fsnotify_test.go:638: event received: \"_test/TestFsnotifyEvents.testfile\": CREATE\n        fsnotify_test.go:638: event received: \"_test/TestFsnotifyEvents.testfile\": MODIFY\n        fsnotify_test.go:638: event received: \"_test/TestFsnotifyEvents.testfile\": RENAME\n        fsnotify_test.go:638: event received: \"_test/TestFsnotifyEvents.testfileRenamed\": CREATE\n        fsnotify_test.go:638: event received: \"_test/TestFsnotifyEvents.testfile\": RENAME\n        fsnotify_test.go:677: calling Close()\n        fsnotify_test.go:679: waiting for the event channel to become closed...\n        fsnotify_test.go:684: event stream was not closed after 2 seconds",
			"disapproval": false,
			"date": "2013-06-04 11:18:26.161960",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'll look at 5536, it's not at the top of my list sadly.\r\n\r\nOn Tue, Jun 4, 2013 at 9:38 PM,  <fullung@gmail.com> wrote:\r\n> On 2013/06/04 11:18:26, dfc wrote:\r\n>>\r\n>> LGTM. Please update the description\r\n>> go.exp/fsnotify: backport latest updates from github repo\r\n>> There still appears to be a problem at high concurrency.\r\n>\r\n>\r\n> This is issue 5536:\r\n>\r\n> https://code.google.com/p/go/issues/detail?id=5536\r\n>\r\n> One last time: is anybody interested in the leaking readEvents\r\n> goroutines?\r\n>\r\n> Cheers\r\n>\r\n> Albert\r\n>\r\n> https://codereview.appspot.com/9827046/\r\n",
			"disapproval": false,
			"date": "2013-06-04 11:40:58.398150",
			"approval": false
		},
		{
			"sender": "howeyc@gmail.com",
			"recipients": [
				"howeyc@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"fullung@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/01 16:14:05, albert.strasheim wrote:\n> Hello\n> \n> On 2013/05/28 22:22:48, howeyc wrote:\n> > Having said that, should my goal be to keep this updated? Or is this here to\n> > start a conversation for a yet to be determined API to be included into the\n> > standard library?.\n> \n> I have some test cleanups that might be nice to incorporate into this CL:\n> \n> https://codereview.appspot.com/8202043/\n> \n> Also: I noticed that TestFsnotifyDeleteWatchedDir is leaking a file descriptor:\n> \n> strace -f -q -e inotify_init,open,close ./fsnotify.test\n> -test.cpu=1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1\n> -test.v -test.run=TestFsnotifyDeleteWatchedDir\n> \n> SIGABRT shows that all the readEvents goroutines (which are in charge of closing\n> the inotify fd) are still stuck in their read syscall.\n> \n> This seems like a problem with the current design of Watcher. readEvents is\n> blocked and can't see the closed done channel.\n> \n> It seems to me that the only way to fix this and various other interactions with\n> file descriptors (libibverbs, libudev, etc.) is to have a more generic poll\n> server.\n> \n> Do you have any thoughts?\n> \n> Regards\n> \n> Albert\n\nAm I right in assuming the issue with the output of the strace command you have there is the ever increasing file descriptor number?\n\nIf so, I think I have something to fix that. Basically changing:\n\"Read, Check if done\"\nto\n\"Select on watch fd with timeout, Check if done, Read only if select says there is data\"\n\nThe only question is whether I should add it here, or under another change request.",
			"disapproval": false,
			"date": "2013-06-05 03:47:31.309080",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "My preference is always towards smaller, targeted, changes. \r\n\r\n\r\n\r\nOn 05/06/2013, at 13:47, howeyc@gmail.com wrote:\r\n\r\n> On 2013/06/01 16:14:05, albert.strasheim wrote:\r\n>> Hello\r\n> \r\n>> On 2013/05/28 22:22:48, howeyc wrote:\r\n>> > Having said that, should my goal be to keep this updated? Or is this\r\n> here to\r\n>> > start a conversation for a yet to be determined API to be included\r\n> into the\r\n>> > standard library?.\r\n> \r\n>> I have some test cleanups that might be nice to incorporate into this\r\n> CL:\r\n> \r\n>> https://codereview.appspot.com/8202043/\r\n> \r\n>> Also: I noticed that TestFsnotifyDeleteWatchedDir is leaking a file\r\n> descriptor:\r\n> \r\n>> strace -f -q -e inotify_init,open,close ./fsnotify.test\r\n> \r\n> -test.cpu=1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1\r\n>> -test.v -test.run=TestFsnotifyDeleteWatchedDir\r\n> \r\n>> SIGABRT shows that all the readEvents goroutines (which are in charge\r\n> of closing\r\n>> the inotify fd) are still stuck in their read syscall.\r\n> \r\n>> This seems like a problem with the current design of Watcher.\r\n> readEvents is\r\n>> blocked and can't see the closed done channel.\r\n> \r\n>> It seems to me that the only way to fix this and various other\r\n> interactions with\r\n>> file descriptors (libibverbs, libudev, etc.) is to have a more generic\r\n> poll\r\n>> server.\r\n> \r\n>> Do you have any thoughts?\r\n> \r\n>> Regards\r\n> \r\n>> Albert\r\n> \r\n> Am I right in assuming the issue with the output of the strace command\r\n> you have there is the ever increasing file descriptor number?\r\n> \r\n> If so, I think I have something to fix that. Basically changing:\r\n> \"Read, Check if done\"\r\n> to\r\n> \"Select on watch fd with timeout, Check if done, Read only if select\r\n> says there is data\"\r\n> \r\n> The only question is whether I should add it here, or under another\r\n> change request.\r\n> \r\n> https://codereview.appspot.com/9827046/\r\n",
			"disapproval": false,
			"date": "2013-06-05 03:49:48.653860",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"howeyc@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"fullung@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Dave, you should feel free to submit changes to fsnotify if you LGTM them.",
			"disapproval": false,
			"date": "2013-07-11 20:15:18.777780",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"howeyc@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"fullung@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=1b287a064d6c&repo=exp ***\n\ngo.exp/fsnotify: fixes\n\nWatchFlags of files created in Watched directories are now the same as the\nparent directory. (https://github.com/howeyc/fsnotify/issues/33)\n\nDarwin now uses EVT_ONLY flag on Open file for watching.\n(https://github.com/howeyc/fsnotify/issues/44)\n\nLinux has been updated to ignore events that occur after delete.\n(https://github.com/howeyc/fsnotify/issues/36)\n\nSymlink test updated.\n(https://github.com/howeyc/fsnotify/pull/42)\n\nRename tests use external \"mv\" where available.\n\nR=golang-dev, dave, fullung, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/9827046\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2013-07-11 20:16:08.607400",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry, this was my mistake. I had thought that this CL was going to be\r\nre-proposed as individual changes.\r\n\r\nOn Fri, Jul 12, 2013 at 6:16 AM,  <rsc@golang.org> wrote:\r\n> *** Submitted as\r\n> https://code.google.com/p/go/source/detail?r=1b287a064d6c&repo=exp ***\r\n>\r\n> go.exp/fsnotify: fixes\r\n>\r\n> WatchFlags of files created in Watched directories are now the same as\r\n> the\r\n> parent directory. (https://github.com/howeyc/fsnotify/issues/33)\r\n>\r\n> Darwin now uses EVT_ONLY flag on Open file for watching.\r\n> (https://github.com/howeyc/fsnotify/issues/44)\r\n>\r\n> Linux has been updated to ignore events that occur after delete.\r\n> (https://github.com/howeyc/fsnotify/issues/36)\r\n>\r\n> Symlink test updated.\r\n> (https://github.com/howeyc/fsnotify/pull/42)\r\n>\r\n> Rename tests use external \"mv\" where available.\r\n>\r\n> R=golang-dev, dave, fullung, rsc\r\n> CC=golang-dev\r\n> https://codereview.appspot.com/9827046\r\n>\r\n> Committer: Russ Cox <rsc@golang.org>\r\n>\r\n>\r\n> https://codereview.appspot.com/9827046/\r\n",
			"disapproval": false,
			"date": "2013-07-14 09:29:12.109720",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"howeyc@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"fullung@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/05 03:49:48, dfc wrote:\n> My preference is always towards smaller, targeted, changes. \n\nping?",
			"disapproval": false,
			"date": "2013-07-05 08:59:39.564990",
			"approval": false
		}
	],
	"owner_email": "howeyc@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "howeyc",
	"subject": "go.exp/fsnotify: backport latest updates from github repo",
	"created": "2013-05-28 22:17:13.126220",
	"patchsets": [
		1,
		2001,
		13001,
		23001
	],
	"modified": "2013-07-14 09:29:12.515110",
	"closed": false,
	"issue": 9827046
}