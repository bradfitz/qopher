{
	"description": "go spec: arguments for append may overlap\n\nFixes issue 4142.",
	"cc": [
		"r@golang.org",
		"iant@golang.org",
		"ken@golang.org",
		"remyoudompheng@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6567062/diff/2001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6567062/diff/2001/doc/go_spec.html#newcode4918\ndoc/go_spec.html:4918: The underlying arrays of <code>s</code> and a slice argument <code>x...</code>\nWhy not just repeat what we say for copy: \"Source and destination may overlap.\"  Expressing this in terms of the underlying arrays makes it sound like we are trying to say there is some case which will not work, but I think all cases will work as expected.",
			"disapproval": false,
			"date": "2012-09-27 18:30:53.932260",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n- gri\n\nhttps://codereview.appspot.com/6567062/diff/9002/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6567062/diff/9002/doc/go_spec.html#newcode4918\ndoc/go_spec.html:4918: The range of addresses represented by the arguments may overlap.\nOn 2012/09/28 00:08:40, r wrote:\n> should probably say what happens....\n> \n> , in which case append behaves equivalent to using a staging buffer to copy the\n> source before it is overwritten.\n\nReformulated and factored out so that the same rule applies for append and copy.",
			"disapproval": false,
			"date": "2012-09-28 20:13:34.343860",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-09-28 22:27:36.882340",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc, r, iant, ken2 (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-09-27 18:12:26.800870",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6567062/diff/9002/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6567062/diff/9002/doc/go_spec.html#newcode4918\ndoc/go_spec.html:4918: The range of addresses represented by the arguments may overlap.\nshould probably say what happens....\n\n, in which case append behaves equivalent to using a staging buffer to copy the source before it is overwritten.",
			"disapproval": false,
			"date": "2012-09-28 00:08:40.492660",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, r@golang.org, iant@golang.org, ken@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-27 18:13:57.505000",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Fixes issue 4142.\r\n",
			"disapproval": false,
			"date": "2012-09-27 23:54:11.143690",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6567062/diff/2003/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6567062/diff/2003/doc/go_spec.html#newcode4909\ndoc/go_spec.html:4909: overlap in which case the functions behave equivalent to using a staging\nPerhaps: The range of addresses represented by the arguments for both functions may overlap. The input will be read before it is overwritten by the output.",
			"disapproval": false,
			"date": "2012-09-28 21:15:34.517150",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/6567062/diff/6001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6567062/diff/6001/doc/go_spec.html#newcode4918\ndoc/go_spec.html:4918: The arguments may overlap.\nOn 2012/09/27 23:45:31, r wrote:\n> The range of addresses represented by the arguments may overlap.\n\nDone.",
			"disapproval": false,
			"date": "2012-09-28 00:04:13.903190",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, r@golang.org, iant@golang.org, ken@golang.org, remyoudompheng@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-28 22:18:41.717970",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6567062/diff/2001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6567062/diff/2001/doc/go_spec.html#newcode4918\ndoc/go_spec.html:4918: The underlying arrays of <code>s</code> and a slice argument <code>x...</code>\nOn 2012/09/27 18:30:54, iant wrote:\n> Why not just repeat what we say for copy: \"Source and destination may overlap.\" \n> Expressing this in terms of the underlying arrays makes it sound like we are\n> trying to say there is some case which will not work, but I think all cases will\n> work as expected.\n\nBecause there's no obvious source and destination. Changed to:\n\n\"The arguments may overlap.\"\n\n(not sure that's precise enough, though).",
			"disapproval": false,
			"date": "2012-09-27 23:22:53.219510",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "That seems to detailed; for one we don't say anything the like for copy,\r\njust below. I was hoping that the added example would make the behavior\r\nclear enough.\r\n- gri\r\n\r\n\r\nOn Thu, Sep 27, 2012 at 5:08 PM, <r@golang.org> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/6567062/diff/9002/doc/go_**spec.html<https://codereview.appspot.com/6567062/diff/9002/doc/go_spec.html>\r\n> File doc/go_spec.html (right):\r\n>\r\n> https://codereview.appspot.**com/6567062/diff/9002/doc/go_**\r\n> spec.html#newcode4918<https://codereview.appspot.com/6567062/diff/9002/doc/go_spec.html#newcode4918>\r\n> doc/go_spec.html:4918: The range of addresses represented by the\r\n> arguments may overlap.\r\n> should probably say what happens....\r\n>\r\n> , in which case append behaves equivalent to using a staging buffer to\r\n> copy the source before it is overwritten.\r\n>\r\n> https://codereview.appspot.**com/6567062/<https://codereview.appspot.com/6567062/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-09-28 00:19:38.167840",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I admit this is a clumsy way to express this concept. If someone has a\r\nbetter idea about how to phrase this, please suggest it.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-09-28 21:05:42.167600",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Another attempt. Same idea but avoiding the buffer concept.\r\n\r\nThe range of addresses represented by the source and destination may\r\noverlap, in which case the resulting destination slice is the same as\r\nwould result if the same operation were applied to two equal slices\r\nthat do not overlap.\r\n",
			"disapproval": false,
			"date": "2012-09-28 21:21:14.476420",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6567062/diff/6001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6567062/diff/6001/doc/go_spec.html#newcode4918\ndoc/go_spec.html:4918: The arguments may overlap.\nThe range of addresses represented by the arguments may overlap.",
			"disapproval": false,
			"date": "2012-09-27 23:45:31.201670",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Perhaps, but I think it's worth saying that the source is read before\r\nbeing overwritten.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-09-28 00:33:41.806660",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6567062/diff/16001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6567062/diff/16001/doc/go_spec.html#newcode4909\ndoc/go_spec.html:4909: by slice arguments overlaps.\nthis reads funny. maybe just s/slice/the/",
			"disapproval": false,
			"date": "2012-09-28 22:52:32.311320",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6567062/diff/2003/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6567062/diff/2003/doc/go_spec.html#newcode4909\ndoc/go_spec.html:4909: overlap in which case the functions behave equivalent to using a staging\ns/overlap/&,/",
			"disapproval": false,
			"date": "2012-09-28 21:05:02.403020",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6567062/diff/2003/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6567062/diff/2003/doc/go_spec.html#newcode4908\ndoc/go_spec.html:4908: The range of addresses represented by the arguments for both functions may\nI can suggest: \"When either of these functions performs a memory copy, the destination contents after the copy will be identical to the source contents before the copy, even if the corresponding memory locations overlap. The actual source and destination of the memory copy are described below.\"\n\nMaybe it is a bit strong because race conditions may happen too.",
			"disapproval": false,
			"date": "2012-09-28 21:15:45.858460",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=c1c1dd3940c6 ***\n\ngo spec: arguments for append may overlap\n\nFixes issue 4142.\n\nR=rsc, r, iant, ken, remyoudompheng\nCC=golang-dev\nhttp://codereview.appspot.com/6567062",
			"disapproval": false,
			"date": "2012-09-28 22:55:42.207770",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-10-01 19:09:33.523240",
			"approval": true
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6567062: go spec: arguments for append may overlap",
	"created": "2012-09-27 18:11:50.167390",
	"patchsets": [
		1,
		2001,
		6001,
		9002,
		2003,
		13001,
		14001,
		16001,
		10
	],
	"modified": "2012-10-01 19:09:33.716120",
	"closed": true,
	"issue": 6567062
}