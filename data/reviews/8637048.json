{
	"description": "runtime: make sure we have sse2 instructions\n\nAt build time, record whether the builder has\nrequested sse2 instructions or not.  Then check\nat runtime whether the cpu supports sse2.\n\nupdate issue 5289",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"lucio.dere@gmail.com",
		"khr@google.com",
		"minux.ma@gmail.com",
		"r@golang.org"
	],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8637048/diff/2002/src/make.bash\nFile src/make.bash (right):\n\nhttps://codereview.appspot.com/8637048/diff/2002/src/make.bash#newcode18\nsrc/make.bash:18: # GO386: Special config for 386.  Set to \"387\" to suppress generation\ndoes this need to be here? GOARM isn't here. Should it be?\n\nhttps://codereview.appspot.com/8637048/diff/2002/src/pkg/runtime/runtime.c\nFile src/pkg/runtime/runtime.c (right):\n\nhttps://codereview.appspot.com/8637048/diff/2002/src/pkg/runtime/runtime.c#newcode276\nsrc/pkg/runtime/runtime.c:276: m->mallocing = 1; // tell rest of panic not to try to malloc.  Malloc isn't initailized yet.\ntypo: initialized\n\nhttps://codereview.appspot.com/8637048/diff/2002/src/pkg/runtime/runtime.c#newcode282\nsrc/pkg/runtime/runtime.c:282: runtime\u00b7throw(\"This binary will not run on this CPU.  Recompile program or reinstall go distribution.\");\nThis error message alone isn't incredibly useful. Maybe append:\n\n\"See http://golang.org/s/cpudifferences\"\n\nThen we can update that shortlink over time to point to good docs.",
			"disapproval": false,
			"date": "2013-04-17 00:16:29.163840",
			"approval": false
		},
		{
			"sender": "khr@golang.org",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://khr%40golang.org@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-04-16 23:56:48.608760",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"lucio.dere@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I could be talking out of turn here, I'm definitely not sufficiently qualified.  But on the off chance that I may be contributing something useful, here goes.\n\nOh, also below: s/postion/portion/\n\nhttps://codereview.appspot.com/8637048/diff/2002/src/cmd/dist/build.c\nFile src/cmd/dist/build.c (right):\n\nhttps://codereview.appspot.com/8637048/diff/2002/src/cmd/dist/build.c#newcode135\nsrc/cmd/dist/build.c:135: if(b.len == 0 && (gohostchar[0] == '6' || gohostchar[0] == '8')) {\nIt seems to me that this whole section would be better server by a switch on gohostchar[0], I note that the ARM postion does not check.  And perhaps a comment to the effect that amd64 can be downgraded (is that wise) to 387 (I understood from discussion that all amd64-supported CPUs are also SSE2 capable?)",
			"disapproval": false,
			"date": "2013-04-17 05:33:05.051250",
			"approval": false
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Apr 16, 2013 at 5:16 PM, <bradfitz@golang.org> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/8637048/diff/2002/src/**make.bash<https://codereview.appspot.com/8637048/diff/2002/src/make.bash>\r\n> File src/make.bash (right):\r\n>\r\n> https://codereview.appspot.**com/8637048/diff/2002/src/**\r\n> make.bash#newcode18<https://codereview.appspot.com/8637048/diff/2002/src/make.bash#newcode18>\r\n> src/make.bash:18: # GO386: Special config for 386.  Set to \"387\" to\r\n> suppress generation\r\n> does this need to be here? GOARM isn't here. Should it be?\r\n>\r\n\r\nIt should be.  Anyone know what the values mean that can provide some text?\r\n(\"5\", \"6\", and \"7\" are the current possibilities, I think.)\r\n\r\n\r\n>\r\n> https://codereview.appspot.**com/8637048/diff/2002/src/pkg/**\r\n> runtime/runtime.c<https://codereview.appspot.com/8637048/diff/2002/src/pkg/runtime/runtime.c>\r\n> File src/pkg/runtime/runtime.c (right):\r\n>\r\n> https://codereview.appspot.**com/8637048/diff/2002/src/pkg/**\r\n> runtime/runtime.c#newcode276<https://codereview.appspot.com/8637048/diff/2002/src/pkg/runtime/runtime.c#newcode276>\r\n> src/pkg/runtime/runtime.c:276: m->mallocing = 1; // tell rest of panic\r\n>\r\n> not to try to malloc.  Malloc isn't initailized yet.\r\n> typo: initialized\r\n>\r\n\r\nfixed.\r\n\r\n\r\n>\r\n> https://codereview.appspot.**com/8637048/diff/2002/src/pkg/**\r\n> runtime/runtime.c#newcode282<https://codereview.appspot.com/8637048/diff/2002/src/pkg/runtime/runtime.c#newcode282>\r\n> src/pkg/runtime/runtime.c:282: runtime\u00b7throw(\"This binary will not run\r\n>\r\n> on this CPU.  Recompile program or reinstall go distribution.\");\r\n> This error message alone isn't incredibly useful. Maybe append:\r\n>\r\n> \"See http://golang.org/s/**cpudifferences<http://golang.org/s/cpudifferences>\r\n> \"\r\n>\r\n>\r\nNot a bad idea, but right now that link doesn't exist.\r\n\r\n\r\n> Then we can update that shortlink over time to point to good docs.\r\n>\r\n> https://codereview.appspot.**com/8637048/<https://codereview.appspot.com/8637048/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-17 16:38:13.908880",
			"approval": false
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Apr 16, 2013 at 10:33 PM, <lucio.dere@gmail.com> wrote:\r\n\r\n> I could be talking out of turn here, I'm definitely not sufficiently\r\n> qualified.  But on the off chance that I may be contributing something\r\n> useful, here goes.\r\n>\r\n> Oh, also below: s/postion/portion/\r\n>\r\n>\r\n> https://codereview.appspot.**com/8637048/diff/2002/src/cmd/**dist/build.c<https://codereview.appspot.com/8637048/diff/2002/src/cmd/dist/build.c>\r\n> File src/cmd/dist/build.c (right):\r\n>\r\n> https://codereview.appspot.**com/8637048/diff/2002/src/cmd/**\r\n> dist/build.c#newcode135<https://codereview.appspot.com/8637048/diff/2002/src/cmd/dist/build.c#newcode135>\r\n> src/cmd/dist/build.c:135: if(b.len == 0 && (gohostchar[0] == '6' ||\r\n>\r\n> gohostchar[0] == '8')) {\r\n> It seems to me that this whole section would be better server by a\r\n> switch on gohostchar[0], I note that the ARM postion does not check.\r\n> And perhaps a comment to the effect that amd64 can be downgraded (is\r\n> that wise) to 387 (I understood from discussion that all amd64-supported\r\n> CPUs are also SSE2 capable?)\r\n>\r\n>\r\nI've changed it to a switch.\r\namd64 cannot be downgraded.  GO386 has no effect if GOARCH is amd64.\r\n Putting '6' in this switch is useful for crosscompiling from amd64 to 386.\r\nYes, we assume that all amd64 chips support SSE2.\r\n\r\n\r\n> https://codereview.appspot.**com/8637048/<https://codereview.appspot.com/8637048/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-17 16:50:46.642950",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://tip.golang.org/doc/install/source documents GOARM\r\n\r\n\r\n\r\nOn Wed, Apr 17, 2013 at 9:38 AM, Keith Randall <khr@google.com> wrote:\r\n\r\n>\r\n>\r\n>\r\n> On Tue, Apr 16, 2013 at 5:16 PM, <bradfitz@golang.org> wrote:\r\n>\r\n>>\r\n>> https://codereview.appspot.**com/8637048/diff/2002/src/**make.bash<https://codereview.appspot.com/8637048/diff/2002/src/make.bash>\r\n>> File src/make.bash (right):\r\n>>\r\n>> https://codereview.appspot.**com/8637048/diff/2002/src/**\r\n>> make.bash#newcode18<https://codereview.appspot.com/8637048/diff/2002/src/make.bash#newcode18>\r\n>> src/make.bash:18: # GO386: Special config for 386.  Set to \"387\" to\r\n>> suppress generation\r\n>> does this need to be here? GOARM isn't here. Should it be?\r\n>>\r\n>\r\n> It should be.  Anyone know what the values mean that can provide some text?\r\n> (\"5\", \"6\", and \"7\" are the current possibilities, I think.)\r\n>\r\n>\r\n>>\r\n>> https://codereview.appspot.**com/8637048/diff/2002/src/pkg/**\r\n>> runtime/runtime.c<https://codereview.appspot.com/8637048/diff/2002/src/pkg/runtime/runtime.c>\r\n>> File src/pkg/runtime/runtime.c (right):\r\n>>\r\n>> https://codereview.appspot.**com/8637048/diff/2002/src/pkg/**\r\n>> runtime/runtime.c#newcode276<https://codereview.appspot.com/8637048/diff/2002/src/pkg/runtime/runtime.c#newcode276>\r\n>> src/pkg/runtime/runtime.c:276: m->mallocing = 1; // tell rest of panic\r\n>>\r\n>> not to try to malloc.  Malloc isn't initailized yet.\r\n>> typo: initialized\r\n>>\r\n>\r\n> fixed.\r\n>\r\n>\r\n>>\r\n>> https://codereview.appspot.**com/8637048/diff/2002/src/pkg/**\r\n>> runtime/runtime.c#newcode282<https://codereview.appspot.com/8637048/diff/2002/src/pkg/runtime/runtime.c#newcode282>\r\n>> src/pkg/runtime/runtime.c:282: runtime\u00b7throw(\"This binary will not run\r\n>>\r\n>> on this CPU.  Recompile program or reinstall go distribution.\");\r\n>> This error message alone isn't incredibly useful. Maybe append:\r\n>>\r\n>> \"See http://golang.org/s/**cpudifferences<http://golang.org/s/cpudifferences>\r\n>> \"\r\n>>\r\n>>\r\n> Not a bad idea, but right now that link doesn't exist.\r\n>\r\n>\r\n>> Then we can update that shortlink over time to point to good docs.\r\n>>\r\n>> https://codereview.appspot.**com/8637048/<https://codereview.appspot.com/8637048/>\r\n>>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-17 16:55:10.650080",
			"approval": false
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Excellent.  That doc doesn't mention \"7\".  \"7\" enables VFPv3 instructions.\r\n Anyone know what we use those for?\r\n\r\n\r\nOn Wed, Apr 17, 2013 at 9:55 AM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n\r\n> http://tip.golang.org/doc/install/source documents GOARM\r\n>\r\n>\r\n>\r\n> On Wed, Apr 17, 2013 at 9:38 AM, Keith Randall <khr@google.com> wrote:\r\n>\r\n>>\r\n>>\r\n>>\r\n>> On Tue, Apr 16, 2013 at 5:16 PM, <bradfitz@golang.org> wrote:\r\n>>\r\n>>>\r\n>>> https://codereview.appspot.**com/8637048/diff/2002/src/**make.bash<https://codereview.appspot.com/8637048/diff/2002/src/make.bash>\r\n>>> File src/make.bash (right):\r\n>>>\r\n>>> https://codereview.appspot.**com/8637048/diff/2002/src/**\r\n>>> make.bash#newcode18<https://codereview.appspot.com/8637048/diff/2002/src/make.bash#newcode18>\r\n>>> src/make.bash:18: # GO386: Special config for 386.  Set to \"387\" to\r\n>>> suppress generation\r\n>>> does this need to be here? GOARM isn't here. Should it be?\r\n>>>\r\n>>\r\n>> It should be.  Anyone know what the values mean that can provide some\r\n>> text?\r\n>> (\"5\", \"6\", and \"7\" are the current possibilities, I think.)\r\n>>\r\n>>\r\n>>>\r\n>>> https://codereview.appspot.**com/8637048/diff/2002/src/pkg/**\r\n>>> runtime/runtime.c<https://codereview.appspot.com/8637048/diff/2002/src/pkg/runtime/runtime.c>\r\n>>> File src/pkg/runtime/runtime.c (right):\r\n>>>\r\n>>> https://codereview.appspot.**com/8637048/diff/2002/src/pkg/**\r\n>>> runtime/runtime.c#newcode276<https://codereview.appspot.com/8637048/diff/2002/src/pkg/runtime/runtime.c#newcode276>\r\n>>> src/pkg/runtime/runtime.c:276: m->mallocing = 1; // tell rest of panic\r\n>>>\r\n>>> not to try to malloc.  Malloc isn't initailized yet.\r\n>>> typo: initialized\r\n>>>\r\n>>\r\n>> fixed.\r\n>>\r\n>>\r\n>>>\r\n>>> https://codereview.appspot.**com/8637048/diff/2002/src/pkg/**\r\n>>> runtime/runtime.c#newcode282<https://codereview.appspot.com/8637048/diff/2002/src/pkg/runtime/runtime.c#newcode282>\r\n>>> src/pkg/runtime/runtime.c:282: runtime\u00b7throw(\"This binary will not run\r\n>>>\r\n>>> on this CPU.  Recompile program or reinstall go distribution.\");\r\n>>> This error message alone isn't incredibly useful. Maybe append:\r\n>>>\r\n>>> \"See http://golang.org/s/**cpudifferences<http://golang.org/s/cpudifferences>\r\n>>> \"\r\n>>>\r\n>>>\r\n>> Not a bad idea, but right now that link doesn't exist.\r\n>>\r\n>>\r\n>>> Then we can update that shortlink over time to point to good docs.\r\n>>>\r\n>>> https://codereview.appspot.**com/8637048/<https://codereview.appspot.com/8637048/>\r\n>>>\r\n>>\r\n>>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-17 17:08:59.354400",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"lucio.dere@gmail.com",
				"khr@google.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8637048/diff/13001/src/pkg/runtime/cpuid_386.c\nFile src/pkg/runtime/cpuid_386.c (right):\n\nhttps://codereview.appspot.com/8637048/diff/13001/src/pkg/runtime/cpuid_386.c#newcode9\nsrc/pkg/runtime/cpuid_386.c:9: uint64 runtime\u00b7cpuid_required_mask = (uint64)1 << 26; // 26=sse2\nthis still isn't ideal.\n\nwhat if the user builds runtime with GO386=387, but\nfailed to set GO386=387 before building his application?\n\ni can think of two possible solutions:\n1. determine the info in cmd/8l by looking at instructions\nused.\n2. make cmd/8g record such info in .8 file.\n\nhttps://codereview.appspot.com/8637048/diff/13001/src/pkg/runtime/runtime.c\nFile src/pkg/runtime/runtime.c (right):\n\nhttps://codereview.appspot.com/8637048/diff/13001/src/pkg/runtime/runtime.c#newcode273\nsrc/pkg/runtime/runtime.c:273: cpuid = ((uint64)runtime\u00b7cpuid_ecx << 32) + runtime\u00b7cpuid_edx;\nthis code is 386/amd64 specific, so i think they should belong\nto a file specific to 386/amd64.\n\nhttps://codereview.appspot.com/8637048/diff/13001/src/pkg/runtime/runtime.c#newcode282\nsrc/pkg/runtime/runtime.c:282: runtime\u00b7throw(\"This binary will not run on this CPU.  Recompile program or reinstall go distribution.\");\nwhy panic here? we just need to print a warning and exit\nwith an error code.",
			"disapproval": false,
			"date": "2013-04-17 17:59:43.541960",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Another part of this plan is to embed the setting of GO386 into gc,\r\nthe .8 files and the linker, so we set it once at make.bash time and\r\nit sticks.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-04-17 18:15:18.351670",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Apr 18, 2013 at 1:08 AM, Keith Randall <khr@google.com> wrote:\r\n> Excellent.  That doc doesn't mention \"7\".  \"7\" enables VFPv3 instructions.\r\n> Anyone know what we use those for?\r\nwhen GOARM==7, cmd/5l will use VFPv3 specific vmov (imm) instruction\r\nto initialize a FP register with a special class of FP constants.\r\n",
			"disapproval": false,
			"date": "2013-04-17 18:02:28.765350",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"lucio.dere@gmail.com",
				"khr@google.com",
				"minux.ma@gmail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8637048/diff/13001/src/make.bash\nFile src/make.bash (right):\n\nhttps://codereview.appspot.com/8637048/diff/13001/src/make.bash#newcode21\nsrc/make.bash:21: # is not x86).\nGOARM could also be documented here. Why not?\n\nhttps://codereview.appspot.com/8637048/diff/13001/src/pkg/runtime/runtime.c\nFile src/pkg/runtime/runtime.c (right):\n\nhttps://codereview.appspot.com/8637048/diff/13001/src/pkg/runtime/runtime.c#newcode273\nsrc/pkg/runtime/runtime.c:273: cpuid = ((uint64)runtime\u00b7cpuid_ecx << 32) + runtime\u00b7cpuid_edx;\nagree\n\nhttps://codereview.appspot.com/8637048/diff/13001/src/pkg/runtime/runtime.c#newcode282\nsrc/pkg/runtime/runtime.c:282: runtime\u00b7throw(\"This binary will not run on this CPU.  Recompile program or reinstall go distribution.\");\npanic is the easiest way to do that. we don't get a traceback.",
			"disapproval": false,
			"date": "2013-04-17 18:18:38.048760",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"lucio.dere@gmail.com",
				"khr@google.com",
				"minux.ma@gmail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/17 18:15:18, r wrote:\n> Another part of this plan is to embed the setting of GO386 into gc,\n> the .8 files and the linker, so we set it once at make.bash time and\n> it sticks.\ncurrently the GO386 setting is already embedded into cmd/8g as the\ndefault setting (overridable by $GO386 at run time) thanks to the\ngetgo386() function.",
			"disapproval": false,
			"date": "2013-04-17 18:27:28.024840",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"lucio.dere@gmail.com",
				"khr@google.com",
				"minux.ma@gmail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=close\n\nIssue was closed as WontFix",
			"disapproval": false,
			"date": "2013-06-05 22:22:45.267470",
			"approval": false
		}
	],
	"owner_email": "khr@golang.org",
	"private": false,
	"base_url": "",
	"owner": "khr",
	"subject": "code review 8637048: runtime: make sure we have sse2 instructions",
	"created": "2013-04-16 23:48:25.021820",
	"patchsets": [
		1,
		2001,
		4001,
		2002,
		13001,
		21002,
		26001
	],
	"modified": "2013-06-05 22:22:45.810520",
	"closed": false,
	"issue": 8637048
}