{
	"description": "rsa: Implementation of RSASSA-PSS signature algorithm and its corresponding test cases\n\nImplementation of RSASSA-PSS signature algorithm described in RFC 3447 and its corresponding test cases.\n\nThere are two test files:\n- emsa_test.go: Test on EMSA-PSS encoding/decoding scheme\n- pssvect_test.go: Test on the signature algorithm itself. All cases are generated from the test vectors provided by RSA Lab, which can be downloaded from ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-1/pkcs-1v2-1-vec.zip",
	"cc": [
		"agl@chromium.org",
		"agl@golang.org",
		"gobot@golang.org",
		"golang-dev@googlegroups.com",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "monnand@gmail.com",
			"recipients": [
				"monnand@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: agl@golang.org),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-05-15 22:01:31.564370",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"monnand@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"agl@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Does this need to be in the main repo? The go.crypt repo seems fine to ignorant me.",
			"disapproval": false,
			"date": "2013-05-15 22:04:02.238380",
			"approval": false
		},
		{
			"sender": "monnand@gmail.com",
			"recipients": [
				"monnand@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"agl@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "In rsa.go, line 8, there is a TODO says \" TODO(agl): Add support for PSS padding.\" So I submit this CL to the main repo.\n\nTo me, putting these functions to anywhere would be OK. Do I need to submit another CL to go.crypto repo?\n\nOn 2013/05/15 22:04:02, r wrote:\n> Does this need to be in the main repo? The go.crypt repo seems fine to ignorant\n> me.",
			"disapproval": false,
			"date": "2013-05-15 22:14:40.458400",
			"approval": false
		},
		{
			"sender": "gobot@golang.org",
			"recipients": [
				"monnand@gmail.com",
				"agl@chromium.org",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=agl (assigned by minux)",
			"disapproval": false,
			"date": "2013-05-16 10:13:20.681790",
			"approval": false
		},
		{
			"sender": "monnand@gmail.com",
			"recipients": [
				"monnand@gmail.com",
				"agl@chromium.org",
				"agl@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9438043/diff/20001/src/pkg/crypto/rsa/pss.go\nFile src/pkg/crypto/rsa/pss.go (right):\n\nhttps://codereview.appspot.com/9438043/diff/20001/src/pkg/crypto/rsa/pss.go#newcode190\nsrc/pkg/crypto/rsa/pss.go:190: func SignPSS(rand io.Reader, priv *PrivateKey, hash crypto.Hash, hashed []byte, saltLen int) (s []byte, err error) {\nOn 2013/05/20 19:56:23, agl1 wrote:\n> Some reorganisation is probably needed before landing, but I can do that before\n> submitting.\n> \n> The only important point is the interface: I don't think the saltLen parameters\n> should be there.\n\nI agree. After a reading of more details, I would rather set the saltLen as len(hashed) (or hash.Size())\n> \n> OpenSSL allows one to specify an optional structure that can set the salt len\n> but the defaults are to set the salt to be as long as possible when encoding and\n> decoding. I think we should mirror that or, if you feel strongly that the salt\n> length needs to be a parameter, then we could have a optional options struct.\n> But OpenSSL's version includes some pretty obscure options that I'm not sure\n> that we would want to support:\n> \n> typedef struct rsa_pss_params_st\n> \u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7{\n> \u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7X509_ALGOR *hashAlgorithm;\n> \u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7X509_ALGOR *maskGenAlgorithm;\n> \u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7ASN1_INTEGER *saltLength;\n> \u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7ASN1_INTEGER *trailerField;\n> \u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7} RSA_PSS_PARAMS;\n\nTo me, supporting such many of options may confuse the user which may in turn lead to some bad decisions. I agree that it would be better to provide a less-flexible version of the interface.\n\nI will make the change and upload a new version soon.",
			"disapproval": false,
			"date": "2013-05-20 20:19:58.025510",
			"approval": false
		},
		{
			"sender": "monnand@gmail.com",
			"recipients": [
				"monnand@gmail.com",
				"agl@chromium.org",
				"agl@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@chromium.org, agl@golang.org (cc: gobot@golang.org, golang-dev@googlegroups.com, r@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-05-20 20:23:43.430220",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"monnand@gmail.com",
				"agl@chromium.org",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Haven't looked at the tests yet.\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go\nFile src/pkg/crypto/rsa/pss.go (right):\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode2\nsrc/pkg/crypto/rsa/pss.go:2: \nShould have a file-level comment describing what the functions in this file do and referencing http://www.rsa.com/rsalabs/pkcs/files/h11300-wp-pkcs-1v2-2-rsa-cryptography-standard.pdf\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode11\nsrc/pkg/crypto/rsa/pss.go:11: func emsaPSSEncode(mHash []byte, emBits int, salt []byte, hash hash.Hash) ([]byte, error) {\n// See [1], section 9.1.1.\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode31\nsrc/pkg/crypto/rsa/pss.go:31: if emLen < hLen+sLen+2 {\nsince this check is after all the slicing, above, I suspect that the code will crash first.\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode46\nsrc/pkg/crypto/rsa/pss.go:46: prefix := []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}\nvar prefix [8]byte\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode48\nsrc/pkg/crypto/rsa/pss.go:48: hash.Write(prefix[0:8])\nprefix[:]\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode70\nsrc/pkg/crypto/rsa/pss.go:70: // 11. Set the leftmost 8emLen - emBits bits of the leftmost octet in\ns/8emLen/8*emLen/\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode82\nsrc/pkg/crypto/rsa/pss.go:82: func emsaPSSVerify(mHash []byte, em []byte, emBits, sLen int, hash hash.Hash) error {\ndrop the first []byte\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode83\nsrc/pkg/crypto/rsa/pss.go:83: // 1.  If the length of M is greater than the input limitation for the\n// See [1], section 9.1.2.\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode110\nsrc/pkg/crypto/rsa/pss.go:110: // 6.  If the leftmost 8emLen - emBits bits of the leftmost octet in\ns/8emLen/8*emLen/\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode113\nsrc/pkg/crypto/rsa/pss.go:113: if em[0]&(0xFF<<uint(8-(8*emLen-emBits))) != 0 {\ns/8emLen/8*emLen/\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode122\nsrc/pkg/crypto/rsa/pss.go:122: // 9.  Set the leftmost 8emLen - emBits bits of the leftmost octet in DB\ns/8emLen/8*emLen/\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode148\nsrc/pkg/crypto/rsa/pss.go:148: prefix := []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}\nvar prefix [8]byte\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode149\nsrc/pkg/crypto/rsa/pss.go:149: hash.Write(prefix)\nprefix[:]\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode154\nsrc/pkg/crypto/rsa/pss.go:154: h0 = hash.Sum(h0[:0])\ndelete the previous line and do\n\nh0 := hash.Sum(nil)\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode157\nsrc/pkg/crypto/rsa/pss.go:157: for i, e := range h0 {\nuse bytes.Equal\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode168\nsrc/pkg/crypto/rsa/pss.go:168: func SignPSS(rand io.Reader, priv *PrivateKey, hash crypto.Hash, hashed []byte, salt []byte) (s []byte, err error) {\nFirst line in the function should reference [1], section 8.1.1. (Where [1] will be defined in the file level comment and point to the PKCS#1 spec PDF.)\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode168\nsrc/pkg/crypto/rsa/pss.go:168: func SignPSS(rand io.Reader, priv *PrivateKey, hash crypto.Hash, hashed []byte, salt []byte) (s []byte, err error) {\nWhy is the salt passed in rather than generated internally? How are users expected to pick a good value for the salt length? It might be best to fix it in this package.\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode169\nsrc/pkg/crypto/rsa/pss.go:169: em, err := emsaPSSEncode(hashed, priv.N.BitLen()-1, salt, hash.New())\nBitLen is a somewhat expensive operation. Worth doing\n\nnBits := priv.N.BitLen()\n\nat the top of this function.\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode186\nsrc/pkg/crypto/rsa/pss.go:186: // sLen is number of bytes of the salt used to sign the message.\ns/sLen/saltLen/\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode187\nsrc/pkg/crypto/rsa/pss.go:187: func VerifyPSS(pub *PublicKey, hash crypto.Hash, hashed []byte, sig []byte, sLen int) error {\n// See [1], section 8.1.2.\nnBits := pub.N.BitLen()\nif len(sig) != (nBits+7)/8 {\n  return ErrVerification\n}\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode197\nsrc/pkg/crypto/rsa/pss.go:197: err := emsaPSSVerify(hashed, em, pub.N.BitLen()-1, sLen, hash.New())\nmerge with next line.",
			"disapproval": false,
			"date": "2013-05-17 15:18:54.913330",
			"approval": false
		},
		{
			"sender": "monnand@gmail.com",
			"recipients": [
				"monnand@gmail.com",
				"agl@chromium.org",
				"agl@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Fixed all parts according to agl's advise.\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go\nFile src/pkg/crypto/rsa/pss.go (right):\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode2\nsrc/pkg/crypto/rsa/pss.go:2: \nOn 2013/05/17 15:18:55, agl1 wrote:\n> Should have a file-level comment describing what the functions in this file do\n> and referencing\n> http://www.rsa.com/rsalabs/pkcs/files/h11300-wp-pkcs-1v2-2-rsa-cryptography-standard.pdf\n\nDone.\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode11\nsrc/pkg/crypto/rsa/pss.go:11: func emsaPSSEncode(mHash []byte, emBits int, salt []byte, hash hash.Hash) ([]byte, error) {\nOn 2013/05/17 15:18:55, agl1 wrote:\n> // See [1], section 9.1.1.\n\nDone.\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode31\nsrc/pkg/crypto/rsa/pss.go:31: if emLen < hLen+sLen+2 {\nOn 2013/05/17 15:18:55, agl1 wrote:\n> since this check is after all the slicing, above, I suspect that the code will\n> crash first.\n\nDone.\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode46\nsrc/pkg/crypto/rsa/pss.go:46: prefix := []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}\nOn 2013/05/17 15:18:55, agl1 wrote:\n> var prefix [8]byte\n\nDone.\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode48\nsrc/pkg/crypto/rsa/pss.go:48: hash.Write(prefix[0:8])\nOn 2013/05/17 15:18:55, agl1 wrote:\n> prefix[:]\n\nDone.\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode70\nsrc/pkg/crypto/rsa/pss.go:70: // 11. Set the leftmost 8emLen - emBits bits of the leftmost octet in\nOn 2013/05/17 15:18:55, agl1 wrote:\n> s/8emLen/8*emLen/\n\nDone.\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode82\nsrc/pkg/crypto/rsa/pss.go:82: func emsaPSSVerify(mHash []byte, em []byte, emBits, sLen int, hash hash.Hash) error {\nOn 2013/05/17 15:18:55, agl1 wrote:\n> drop the first []byte\n\nDone.\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode83\nsrc/pkg/crypto/rsa/pss.go:83: // 1.  If the length of M is greater than the input limitation for the\nOn 2013/05/17 15:18:55, agl1 wrote:\n> // See [1], section 9.1.2.\n\nDone.\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode110\nsrc/pkg/crypto/rsa/pss.go:110: // 6.  If the leftmost 8emLen - emBits bits of the leftmost octet in\nOn 2013/05/17 15:18:55, agl1 wrote:\n> s/8emLen/8*emLen/\n\nDone.\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode113\nsrc/pkg/crypto/rsa/pss.go:113: if em[0]&(0xFF<<uint(8-(8*emLen-emBits))) != 0 {\nOn 2013/05/17 15:18:55, agl1 wrote:\n> s/8emLen/8*emLen/\n\nDone.\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode122\nsrc/pkg/crypto/rsa/pss.go:122: // 9.  Set the leftmost 8emLen - emBits bits of the leftmost octet in DB\nOn 2013/05/17 15:18:55, agl1 wrote:\n> s/8emLen/8*emLen/\n\nDone.\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode148\nsrc/pkg/crypto/rsa/pss.go:148: prefix := []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}\nOn 2013/05/17 15:18:55, agl1 wrote:\n> var prefix [8]byte\n\nDone.\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode149\nsrc/pkg/crypto/rsa/pss.go:149: hash.Write(prefix)\nOn 2013/05/17 15:18:55, agl1 wrote:\n> prefix[:]\n\nDone.\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode154\nsrc/pkg/crypto/rsa/pss.go:154: h0 = hash.Sum(h0[:0])\nOn 2013/05/17 15:18:55, agl1 wrote:\n> delete the previous line and do\n> \n> h0 := hash.Sum(nil)\n\nDone.\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode157\nsrc/pkg/crypto/rsa/pss.go:157: for i, e := range h0 {\nOn 2013/05/17 15:18:55, agl1 wrote:\n> use bytes.Equal\n\nDone.\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode168\nsrc/pkg/crypto/rsa/pss.go:168: func SignPSS(rand io.Reader, priv *PrivateKey, hash crypto.Hash, hashed []byte, salt []byte) (s []byte, err error) {\nSince the test vectors provided by RSA contains the salt, I put the salt here. I think it would be better to it an internal function, say signPSSWithSalt() and define SignPSS to call signPSSWithSalt(). In test cases, we test signPSSWithSalt() so that we can keep using test cases from RSA.\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode168\nsrc/pkg/crypto/rsa/pss.go:168: func SignPSS(rand io.Reader, priv *PrivateKey, hash crypto.Hash, hashed []byte, salt []byte) (s []byte, err error) {\nOn 2013/05/17 15:18:55, agl1 wrote:\n> Why is the salt passed in rather than generated internally? How are users\n> expected to pick a good value for the salt length? It might be best to fix it in\n> this package.\n\nDone.\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode168\nsrc/pkg/crypto/rsa/pss.go:168: func SignPSS(rand io.Reader, priv *PrivateKey, hash crypto.Hash, hashed []byte, salt []byte) (s []byte, err error) {\nOn 2013/05/17 15:18:55, agl1 wrote:\n> First line in the function should reference [1], section 8.1.1. (Where [1] will\n> be defined in the file level comment and point to the PKCS#1 spec PDF.)\n\nDone.\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode169\nsrc/pkg/crypto/rsa/pss.go:169: em, err := emsaPSSEncode(hashed, priv.N.BitLen()-1, salt, hash.New())\nOn 2013/05/17 15:18:55, agl1 wrote:\n> BitLen is a somewhat expensive operation. Worth doing\n> \n> nBits := priv.N.BitLen()\n> \n> at the top of this function.\n\nDone.\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode186\nsrc/pkg/crypto/rsa/pss.go:186: // sLen is number of bytes of the salt used to sign the message.\nOn 2013/05/17 15:18:55, agl1 wrote:\n> s/sLen/saltLen/\n\nDone.\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode187\nsrc/pkg/crypto/rsa/pss.go:187: func VerifyPSS(pub *PublicKey, hash crypto.Hash, hashed []byte, sig []byte, sLen int) error {\nOn 2013/05/17 15:18:55, agl1 wrote:\n> // See [1], section 8.1.2.\n> nBits := pub.N.BitLen()\n> if len(sig) != (nBits+7)/8 {\n>   return ErrVerification\n> }\n\nDone.\n\nhttps://codereview.appspot.com/9438043/diff/5001/src/pkg/crypto/rsa/pss.go#newcode197\nsrc/pkg/crypto/rsa/pss.go:197: err := emsaPSSVerify(hashed, em, pub.N.BitLen()-1, sLen, hash.New())\nOn 2013/05/17 15:18:55, agl1 wrote:\n> merge with next line.\n\nDone.",
			"disapproval": false,
			"date": "2013-05-17 20:03:23.869690",
			"approval": false
		},
		{
			"sender": "monnand@gmail.com",
			"recipients": [
				"monnand@gmail.com",
				"agl@chromium.org",
				"agl@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@chromium.org, agl@golang.org (cc: gobot@golang.org, golang-dev@googlegroups.com, r@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-05-17 19:52:57.974590",
			"approval": false
		},
		{
			"sender": "monnand@gmail.com",
			"recipients": [
				"monnand@gmail.com",
				"agl@chromium.org",
				"agl@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Changed the pss.go according to agl's advise.\n\nRemoved most test cases from pssvect_test.go. Only two of them are reserved and added comments to them correspondingly.",
			"disapproval": false,
			"date": "2013-05-17 19:55:51.692140",
			"approval": false
		},
		{
			"sender": "monnand@gmail.com",
			"recipients": [
				"monnand@gmail.com",
				"agl@chromium.org",
				"agl@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@chromium.org, agl@golang.org (cc: gobot@golang.org, golang-dev@googlegroups.com, r@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-05-17 20:02:11.300920",
			"approval": false
		},
		{
			"sender": "monnand@gmail.com",
			"recipients": [
				"monnand@gmail.com",
				"agl@chromium.org",
				"agl@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@chromium.org, agl@golang.org (cc: gobot@golang.org, golang-dev@googlegroups.com, r@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-05-20 20:26:40.492860",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"monnand@gmail.com",
				"agl@chromium.org",
				"agl@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9438043/diff/20001/src/pkg/crypto/rsa/pss.go\nFile src/pkg/crypto/rsa/pss.go (right):\n\nhttps://codereview.appspot.com/9438043/diff/20001/src/pkg/crypto/rsa/pss.go#newcode190\nsrc/pkg/crypto/rsa/pss.go:190: func SignPSS(rand io.Reader, priv *PrivateKey, hash crypto.Hash, hashed []byte, saltLen int) (s []byte, err error) {\nSome reorganisation is probably needed before landing, but I can do that before submitting.\n\nThe only important point is the interface: I don't think the saltLen parameters should be there.\n\nOpenSSL allows one to specify an optional structure that can set the salt len but the defaults are to set the salt to be as long as possible when encoding and decoding. I think we should mirror that or, if you feel strongly that the salt length needs to be a parameter, then we could have a optional options struct. But OpenSSL's version includes some pretty obscure options that I'm not sure that we would want to support:\n\ntypedef struct rsa_pss_params_st\n\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7{\n\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7X509_ALGOR *hashAlgorithm;\n\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7X509_ALGOR *maskGenAlgorithm;\n\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7ASN1_INTEGER *saltLength;\n\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7ASN1_INTEGER *trailerField;\n\u00bb\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7} RSA_PSS_PARAMS;",
			"disapproval": false,
			"date": "2013-05-20 19:56:23.632580",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"monnand@gmail.com",
				"agl@chromium.org",
				"agl@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Have you signed the CLA? http://golang.org/doc/contribute.html#copyright\n\nI altered the code to be compatible with OpenSSL's PSS implementation. This required adding a PSSOptions struct argument to VerifyPSS and SignPSS. Please see http://play.golang.org/p/pxYrCq1VBj.\n\nI also altered the tests to check all the values of NIST's test vectors (from a testdata file) and to check OpenSSL compat. Please see http://play.golang.org/p/qEYe_ieyd-",
			"disapproval": false,
			"date": "2013-05-22 20:21:02.905530",
			"approval": false
		},
		{
			"sender": "monnand@gmail.com",
			"recipients": [
				"monnand@gmail.com",
				"agl@chromium.org",
				"agl@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/22 20:21:02, agl1 wrote:\n> Have you signed the CLA? http://golang.org/doc/contribute.html#copyright\n> \n\nJust signed it. It said that it will be processed shortly.\n\n> I altered the code to be compatible with OpenSSL's PSS implementation. This\n> required adding a PSSOptions struct argument to VerifyPSS and SignPSS. Please\n> see http://play.golang.org/p/pxYrCq1VBj.\n> \n> I also altered the tests to check all the values of NIST's test vectors (from a\n> testdata file) and to check OpenSSL compat. Please see\n> http://play.golang.org/p/qEYe_ieyd-\n\nSure. Do I need to copy those code and upload another patch set to this CL?",
			"disapproval": false,
			"date": "2013-05-22 20:52:58.387650",
			"approval": false
		},
		{
			"sender": "agl@chromium.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, May 22, 2013 at 4:52 PM,  <monnand@gmail.com> wrote:\r\n> Just signed it. It said that it will be processed shortly.\r\n\r\nThanks. I'll do the A+C update for you.\r\n\r\n> Sure. Do I need to copy those code and upload another patch set to this\r\n> CL?\r\n\r\nNope, if you're happy with it then you don't need to update the CL.\r\nI'll land from my local copy.\r\n\r\n\r\nCheers\r\n\r\nAGL\r\n",
			"disapproval": false,
			"date": "2013-05-22 20:56:39.045410",
			"approval": false
		},
		{
			"sender": "monnand@gmail.com",
			"recipients": [
				"monnand@gmail.com",
				"agl@chromium.org",
				"agl@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/22 20:56:39, agl wrote:\n> On Wed, May 22, 2013 at 4:52 PM,  <mailto:monnand@gmail.com> wrote:\n> > Just signed it. It said that it will be processed shortly.\n> \n> Thanks. I'll do the A+C update for you.\n> \n\nThank you!\n> > Sure. Do I need to copy those code and upload another patch set to this\n> > CL?\n> \n> Nope, if you're happy with it then you don't need to update the CL.\n> I'll land from my local copy.\n> \n\nSure. I'm happy with it. It looks better.\n> \n> Cheers\n> \n> AGL",
			"disapproval": false,
			"date": "2013-05-22 21:17:35.503050",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"monnand@gmail.com",
				"agl@chromium.org",
				"agl@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=0fb55e40bd0c ***\n\ncrypto/rsa: implement PSS signatures.\n\nThis change contains an implementation of the RSASSA-PSS signature\nalgorithm described in RFC 3447.\n\nR=agl, agl\nCC=gobot, golang-dev, r\nhttps://codereview.appspot.com/9438043\n\nCommitter: Adam Langley <agl@golang.org>",
			"disapproval": false,
			"date": "2013-05-23 15:10:51.588430",
			"approval": false
		}
	],
	"owner_email": "monnand@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Nan Deng",
	"subject": "code review 9438043: rsa: Implementation of RSASSA-PSS signature algorithm a...",
	"created": "2013-05-15 21:53:47.564590",
	"patchsets": [
		1,
		2001,
		5001,
		12001,
		15001,
		16004,
		20001,
		24002,
		27002,
		31001,
		33004
	],
	"modified": "2013-05-23 15:10:51.588430",
	"closed": false,
	"issue": 9438043
}