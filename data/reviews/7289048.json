{
	"description": "cmd/gc: add way to specify 'noescape' for extern funcs\n\nA new comment directive //go:noescape instructs the compiler\nthat the following external (no body) func declaration should be\ntreated as if none of its arguments escape to the heap.\n\nFixes issue 4099.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"minux.ma@gmail.com",
		"daniel.morsing@gmail.com",
		"remyoudompheng@gmail.com",
		"adg@golang.org",
		"agl@golang.org",
		"iant@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> people will ask for more.... (for example, //go:noboundcheck,\r\n> //go:expecttrue [mirror gcc's __builtin_expect]).\r\n>\r\n> however, i don't have any alternative suggestions either.\r\n\r\nAs a suggestion, Dmorsing and I talked about exposing the existing\r\n@noescape annotation that exists in the compiled source. The details\r\nare a bit fuzzy and we discarded the idea because we thought we could\r\nnever get such a hack through code review. Maybe if this was applied\r\nonly to forward decl funcs it would limit the damage.\r\n\r\nDave\r\n",
			"disapproval": false,
			"date": "2013-02-03 20:42:24.483860",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Monday, February 4, 2013, Dave Cheney wrote:\r\n\r\n> > people will ask for more.... (for example, //go:noboundcheck,\r\n> > //go:expecttrue [mirror gcc's __builtin_expect]).\r\n> >\r\n> > however, i don't have any alternative suggestions either.\r\n>\r\n> As a suggestion, Dmorsing and I talked about exposing the existing\r\n> @noescape annotation that exists in the compiled source. The details\r\n> are a bit fuzzy and we discarded the idea because we thought we could\r\n> never get such a hack through code review. Maybe if this was applied\r\n> only to forward decl funcs it would limit the damage.\r\n>\r\ni'm wondering if we can put the annotation to assembler/C files\r\n(as they are already ugly when compared to Go),\r\nand make them also produce go declarations headers in the\r\nobject files, then let gc read those (i.e. first compile C/asm source\r\nfiles, pack them, then provide the archive to gc, and finally append\r\nthe _go_.$GOCHAR to the archive.\r\n\r\nthen we don't even need forward declarations in Go.\r\n",
			"disapproval": false,
			"date": "2013-02-03 20:54:49.771350",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"daniel.morsing@gmail.com",
				"remyoudompheng@gmail.com",
				"adg@golang.org",
				"agl@golang.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think this is as reasonable an approach an any.\n\nWe need to know this property for better optimization.  The property can not be discovered.  Therefore it requires an explicit annotation.  Although the annotation logically belongs with the external code, that external code might be written in any language.  Also we would like an annotation that can work with any Go implementation, including gccgo.  Therefore, the best place for the annotation is in the Go source code.\n\nThis annotation must be correct if it occurs, but it does not cause any trouble if the annotation is not understood by the compiler; the only effect is code that is not optimized as well.  We have precedent for using comments for annotations of this sort: //line and //go:fieldtrack.\n\nTherefore, I think this approach is reasonable.  We could consider adding a more formal annotation support to the language.  That would be backward compatible, but so far it does not seem to be necessary.  It may never be necessary for annotations like the ones we have now, in which failing to understand the annotation does not cause real trouble.\n\nAll that said, I think this CL requires documentation somewhere.  But where?  As far as I can tell we've managed to fail to document //line.  That also needs to be fixed.",
			"disapproval": false,
			"date": "2013-02-04 17:17:57.348890",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"daniel.morsing@gmail.com",
				"remyoudompheng@gmail.com",
				"adg@golang.org",
				"agl@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Benchmarks generally have a for loop to call the same function in a loop, so they underestimate the benefit of this as the arguments only need to copied to the heap once.\n\nNone the less, the Salsa20 benchmark still gets a 5% boost.",
			"disapproval": false,
			"date": "2013-02-04 16:34:04.150440",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i'm a little worried about the trend of introducing annotations\nlike this (previously //go:fieldtrack is little known and it has to\nbe explicitly enabled).\n\npeople will ask for more.... (for example, //go:noboundcheck,\n//go:expecttrue [mirror gcc's __builtin_expect]).\n\nhowever, i don't have any alternative suggestions either.",
			"disapproval": false,
			"date": "2013-02-03 20:23:48.531540",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-02-03 20:16:39.985430",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "SGTM. Lets try some benchmarks and see if this pays for itself. \r\n\r\nOn 04/02/2013, at 7:59, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> This is just a suggestion. It's the best I could come up with to address the issue. But we could choose not to address the issue.\r\n> \r\n> My rationale is that escape analysis is an important optimization, and there is nothing that the compiler can possibly do better with escape analysis of extern funcs in the absence of being told what the answer is. \r\n> \r\n> I do like the idea of putting the annotations in the C or assembly instead, but I think that's significantly more complicated: it would require work in cmd/go, cmd/6a, and cmd/6c. This approach is at least a bit more localized, and it is possible for gccgo to adopt too. It is also not part of the language spec, so we can change our mind later if we want.\r\n> \r\n> It is not possible to remove the forward declarations from the language. Backward compatibility aside, they serve an important purpose by letting other tools (besides the compiler) know that those functions really do exist. For example, there are exported extern funcs with docs that are shown by godoc.\r\n> \r\n> I feel confident that we can say no to people who ask for more things. In contrast, for something like bounds checking the compiler can do quite a bit better just by working harder at analyzing the code.\r\n> \r\n> Russ\r\n",
			"disapproval": false,
			"date": "2013-02-03 21:13:07.199920",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Neat. I'll try some benchmarks today!\r\n\r\nOn Mon, Feb 4, 2013 at 7:16 AM,  <rsc@golang.org> wrote:\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> cmd/gc: add way to specify 'noescape' for extern funcs\r\n>\r\n> A new comment directive //go:noescape instructs the compiler\r\n> that the following external (no body) func declaration should be\r\n> treated as if none of its arguments escape to the heap.\r\n>\r\n> Fixes issue 4099.\r\n>\r\n> Please review this at https://codereview.appspot.com/7289048/\r\n>\r\n> Affected files:\r\n>   M src/cmd/gc/esc.c\r\n>   M src/cmd/gc/go.h\r\n>   M src/cmd/gc/go.y\r\n>   M src/cmd/gc/lex.c\r\n>   M src/cmd/gc/y.tab.c\r\n>   A test/fixedbugs/issue4099.go\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-03 20:19:25.894770",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is just a suggestion. It's the best I could come up with to address\r\nthe issue. But we could choose not to address the issue.\r\n\r\nMy rationale is that escape analysis is an important optimization, and\r\nthere is nothing that the compiler can possibly do better with escape\r\nanalysis of extern funcs in the absence of being told what the answer is.\r\n\r\nI do like the idea of putting the annotations in the C or assembly instead,\r\nbut I think that's significantly more complicated: it would require work in\r\ncmd/go, cmd/6a, and cmd/6c. This approach is at least a bit more localized,\r\nand it is possible for gccgo to adopt too. It is also not part of the\r\nlanguage spec, so we can change our mind later if we want.\r\n\r\nIt is not possible to remove the forward declarations from the language.\r\nBackward compatibility aside, they serve an important purpose by letting\r\nother tools (besides the compiler) know that those functions really do\r\nexist. For example, there are exported extern funcs with docs that are\r\nshown by godoc.\r\n\r\nI feel confident that we can say no to people who ask for more things. In\r\ncontrast, for something like bounds checking the compiler can do quite a\r\nbit better just by working harder at analyzing the code.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-02-03 20:59:27.160140",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"daniel.morsing@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/03 21:22:57, DMorsing wrote:\n> One of the ideas I had during my brainstorming session with Dave was the idea of\n> decorator functions. For example:\n> \n> func extern(b []byte)\n> \n> func Extern(b []byte) {\n>     // this marks b as noescape for extern, not an actual function call\n>     noescape(b) \n>     extern(b)\n> }\n> \n> It pollutes the namespace a bit, but it gets around adding annotations.\n\nThis looks dangerous exposed as is. It should be part of the unsafe package at least.",
			"disapproval": false,
			"date": "2013-02-03 21:25:35.667710",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"daniel.morsing@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "One of the ideas I had during my brainstorming session with Dave was the idea of decorator functions. For example:\n\nfunc extern(b []byte)\n\nfunc Extern(b []byte) {\n    // this marks b as noescape for extern, not an actual function call\n    noescape(b) \n    extern(b)\n}\n\nIt pollutes the namespace a bit, but it gets around adding annotations.",
			"disapproval": false,
			"date": "2013-02-03 21:22:57.431690",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm quite happy with the comments for this purpose because if a compiler\r\ndoesn't support them (or we choose to remove support for them), the code\r\nstill works. It just gets slower.\r\n\r\nAndrew\r\n",
			"disapproval": false,
			"date": "2013-02-04 00:17:37.083050",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"daniel.morsing@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/03 21:25:35, remyoudompheng wrote:\n> This looks dangerous exposed as is. It should be part of the unsafe package at\n> least.\n\nI didn't think of that. Great suggestion.\n\nStill, I worry about adding such a weird function that has very different behavior compared to any other function. It's part of the reason I never went through with the idea.",
			"disapproval": false,
			"date": "2013-02-03 21:41:28.035100",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Fair enough, should I raise an issue for -m ?\r\n\r\nI'm also have problems determining any benchmark improvements after annotating some external functions. This may be because most of our benchmarks are careful not to allocate during the benchmark routine.\r\n\r\nDave\r\n\r\nOn 05/02/2013, at 22:41, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> Yes, it looks like -m is printing the wrong thing for external functions, but otherwise the analysis is working:\r\n> \r\n> $ cat x.go\r\n> package p\r\n> \r\n> func F(x []byte)\r\n> \r\n> func g() {\r\n> \tvar buf [100]byte\r\n> \tF(buf[:])\r\n> }\r\n> $ go tool 6g -m x.go\r\n> x.go:3: F x does not escape\r\n> x.go:6: moved to heap: buf\r\n> x.go:7: buf escapes to heap\r\n> $ 6h x.6\r\n> go object darwin amd64 devel +e2f9b9a58240 Mon Feb 04 00:21:44 2013 -0500 X:none\r\n>   exports automatically generated from\r\n>   x.go in package \"p\"\r\n> \r\n> $$  // exports\r\n>     package p\r\n> \timport runtime \"runtime\"\r\n> \tfunc @\"\".F (@\"\".x\u00b71 []byte)  <<< NOTE: no 'esc:0x0' tag\r\n> \r\n> Russ\r\n",
			"disapproval": false,
			"date": "2013-02-05 11:46:58.484990",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"daniel.morsing@gmail.com",
				"remyoudompheng@gmail.com",
				"adg@golang.org",
				"agl@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, minux.ma@gmail.com, daniel.morsing@gmail.com, remyoudompheng@gmail.com, adg@golang.org, agl@golang.org, iant@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-05 03:49:04.718880",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Something is confusing me, hg tip, unmodified, already says\r\n\r\n% go build -gcflags -m | grep decl\r\n./bytes_decl.go:8: IndexByte s does not escape\r\n\r\nIs this a bug with -m ?\r\n\r\nOn Tue, Feb 5, 2013 at 4:58 PM,  <iant@golang.org> wrote:\r\n> LGTM\r\n>\r\n> https://codereview.appspot.com/7289048/\r\n",
			"disapproval": false,
			"date": "2013-02-05 09:57:44.328130",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Don't bother adding an issue for -m. I'll fix it before submitting this CL.\r\n",
			"disapproval": false,
			"date": "2013-02-05 11:57:03.600750",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"daniel.morsing@gmail.com",
				"remyoudompheng@gmail.com",
				"adg@golang.org",
				"agl@golang.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=d42bb094c316 ***\n\ncmd/gc: add way to specify 'noescape' for extern funcs\n\nA new comment directive //go:noescape instructs the compiler\nthat the following external (no body) func declaration should be\ntreated as if none of its arguments escape to the heap.\n\nFixes issue 4099.\n\nR=golang-dev, dave, minux.ma, daniel.morsing, remyoudompheng, adg, agl, iant\nCC=golang-dev\nhttps://codereview.appspot.com/7289048",
			"disapproval": false,
			"date": "2013-02-05 12:00:48.255460",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"daniel.morsing@gmail.com",
				"remyoudompheng@gmail.com",
				"adg@golang.org",
				"agl@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-02-05 05:58:10.287190",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I added some words to the docs for cmd/gc.\r\n",
			"disapproval": false,
			"date": "2013-02-05 03:49:28.565680",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yes, it looks like -m is printing the wrong thing for external functions,\r\nbut otherwise the analysis is working:\r\n\r\n$ cat x.go\r\npackage p\r\n\r\nfunc F(x []byte)\r\n\r\nfunc g() {\r\nvar buf [100]byte\r\nF(buf[:])\r\n}\r\n$ go tool 6g -m x.go\r\nx.go:3: F x does not escape\r\nx.go:6: moved to heap: buf\r\nx.go:7: buf escapes to heap\r\n$ 6h x.6\r\ngo object darwin amd64 devel +e2f9b9a58240 Mon Feb 04 00:21:44 2013 -0500\r\nX:none\r\n  exports automatically generated from\r\n  x.go in package \"p\"\r\n\r\n$$  // exports\r\n    package p\r\nimport runtime \"runtime\"\r\nfunc @\"\".F (@\"\".x\u00b71 []byte)  <<< NOTE: no 'esc:0x0' tag\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-02-05 11:41:33.839110",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Feb 5, 2013 at 6:46 AM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> Fair enough, should I raise an issue for -m ?\r\n>\r\n> I'm also have problems determining any benchmark improvements after\r\n> annotating some external functions. This may be because most of our\r\n> benchmarks are careful not to allocate during the benchmark routine.\r\n>\r\n\r\nThat's certainly what it is. We've been careful not to put ourselves in\r\nsituations where we needed this so far.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-02-05 11:52:24.930870",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 7289048: cmd/gc: add way to specify 'noescape' for extern funcs",
	"created": "2013-02-03 20:16:18.655030",
	"patchsets": [
		1,
		2001,
		5001,
		13001,
		17001,
		22002
	],
	"modified": "2013-02-05 12:00:50.146760",
	"closed": true,
	"issue": 7289048
}