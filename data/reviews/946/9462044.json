{
	"description": "io: Prioritize WriterTos over ReaderFroms in Copy.\n\nThis only affects calls where both ReaderFrom and WriterTo are implemented. WriterTo can issue one large write, while ReaderFrom must Read until EOF, potentially reallocating when out of memory. With one large Write, the Writer only needs to allocate once.\n\nThis also helps in ioutil.Discard since we can avoid copying memory when the Reader implements WriterTo.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dsymonds@golang.org",
		"remyoudompheng@gmail.com",
		"bradfitz@golang.org",
		"minux.ma@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: bradfitz@golang.org, minux.ma@gmail.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-05-20 20:24:21.073040",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Test please.\r\n",
			"disapproval": false,
			"date": "2013-05-20 20:25:36.831060",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9462044/diff/4001/src/pkg/io/io.go\nFile src/pkg/io/io.go (right):\n\nhttps://codereview.appspot.com/9462044/diff/4001/src/pkg/io/io.go#newcode334\nsrc/pkg/io/io.go:334: // Otherwise, if src implements the WriterTo interface,\nthe documentation is now incorrect.",
			"disapproval": false,
			"date": "2013-05-20 20:37:36.267580",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/20 21:01:43, DMorsing wrote:\n> PTAL.\n> \n> The documentation change is making me wonder if I can even do this without\n> breaking some sort of go1 guarantee.\n\nI think the ReaderFrom's should check whether their Reader is a WriteTo to reverse themselves if needed. They know better than us what to do.\n\nCan you give an example where this would have been useful? People can reverse ways themselves manually for optimisation whenever needed.",
			"disapproval": false,
			"date": "2013-05-20 21:10:52.486600",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nThe documentation change is making me wonder if I can even do this without breaking some sort of go1 guarantee.\n\nhttps://codereview.appspot.com/9462044/diff/4001/src/pkg/io/io.go\nFile src/pkg/io/io.go (right):\n\nhttps://codereview.appspot.com/9462044/diff/4001/src/pkg/io/io.go#newcode334\nsrc/pkg/io/io.go:334: // Otherwise, if src implements the WriterTo interface,\nOn 2013/05/20 20:37:36, remyoudompheng wrote:\n> the documentation is now incorrect.\n\nDone.",
			"disapproval": false,
			"date": "2013-05-20 21:01:43.492070",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/20 21:10:52, remyoudompheng wrote:\n> On 2013/05/20 21:01:43, DMorsing wrote:\n> > PTAL.\n> > \n> > The documentation change is making me wonder if I can even do this without\n> > breaking some sort of go1 guarantee.\n> \n> I think the ReaderFrom's should check whether their Reader is a WriteTo to\n> reverse themselves if needed. They know better than us what to do.\n>\n\nThe only reason for implementing WriterTo or ReaderFrom is so that you can use your own strategy for memory allocations. Implementations shouldn't have to judge whether their allocation strategy is less optimal than whatever is on the other side.\n\n> Can you give an example where this would have been useful? People can reverse\n> ways themselves manually for optimisation whenever needed.\n\nThis is purely for optimization, but it is an optimization that can be generalized.\n\nExamples:\nbytes.Buffer writing into a ioutil.Discard. Choosing the Buffer over Discard for the From/To implementation means that we're not copying data into a black hole buffer.\n\nAlso bytes.Buffer writing into another bytes.Buffer. If the ReadFrom is chosen, the Writer will fill up its own buffer, allocating each time it runs out of memory. If we choose WriteTo, we Write once and only need to do one allocation.\n\nThere's some more context for this change in https://codereview.appspot.com/9492044/",
			"disapproval": false,
			"date": "2013-05-21 06:55:05.712810",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nI've been trying to think of compatibility problems this could introduce, but I haven't been able to.\n\nWe can always revert this if we think of something.",
			"disapproval": false,
			"date": "2013-05-21 15:20:47.774710",
			"approval": true
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"remyoudompheng@gmail.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=bb92bbe623fa ***\n\nio: Prioritize WriterTos over ReaderFroms in Copy.\n\nThis only affects calls where both ReaderFrom and WriterTo are implemented. WriterTo can issue one large write, while ReaderFrom must Read until EOF, potentially reallocating when out of memory. With one large Write, the Writer only needs to allocate once.\n\nThis also helps in ioutil.Discard since we can avoid copying memory when the Reader implements WriterTo.\n\nR=golang-dev, dsymonds, remyoudompheng, bradfitz\nCC=golang-dev, minux.ma\nhttps://codereview.appspot.com/9462044",
			"disapproval": false,
			"date": "2013-05-23 16:29:27.877790",
			"approval": false
		}
	],
	"owner_email": "daniel.morsing@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "DMorsing",
	"subject": "code review 9462044: io: Prioritize WriterTos over ReaderFroms in Copy.",
	"created": "2013-05-20 20:21:57.393770",
	"patchsets": [
		1,
		1002,
		4001,
		11001,
		17001
	],
	"modified": "2013-05-23 16:29:29.623580",
	"closed": true,
	"issue": 9462044
}