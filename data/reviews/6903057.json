{
	"description": "net/http: fix text for ErrBodyReadAfterClose\n\nCan happen in both request and response.\nAlso use it in one place that wasn't.\n\nFixes issue 3997.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=0e888189a5e2 ***\n\nnet/http: fix text for ErrBodyReadAfterClose\n\nCan happen in both request and response.\nAlso use it in one place that wasn't.\n\nFixes issue 3997.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/6903057",
			"disapproval": false,
			"date": "2012-12-10 06:42:15.523940",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-12-09 18:31:08.046650",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n On Dec 9, 2012 1:31 PM, <rsc@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> net/http: fix text for ErrBodyReadAfterClose\r\n>\r\n> Can happen in both request and response.\r\n> Also use it in one place that wasn't.\r\n>\r\n> Fixes issue 3997.\r\n>\r\n> Please review this at https://codereview.appspot.**com/6903057/<https://codereview.appspot.com/6903057/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/net/http/server.go\r\n>   M src/pkg/net/http/transfer.go\r\n>\r\n>\r\n> Index: src/pkg/net/http/server.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/http/server.go\r\n> +++ b/src/pkg/net/http/server.go\r\n> @@ -302,7 +302,7 @@\r\n>\r\n>  func (ecr *expectContinueReader) Read(p []byte) (n int, err error) {\r\n>         if ecr.closed {\r\n> -               return 0, errors.New(\"http: Read after Close on request\r\n> Body\")\r\n> +               return 0, ErrBodyReadAfterClose\r\n>         }\r\n>         if !ecr.resp.wroteContinue && !ecr.resp.conn.hijacked() {\r\n>                 ecr.resp.wroteContinue = true\r\n> Index: src/pkg/net/http/transfer.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/http/transfer.go\r\n> +++ b/src/pkg/net/http/transfer.go\r\n> @@ -534,11 +534,11 @@\r\n>         res *response // response writer for server requests, else nil\r\n>  }\r\n>\r\n> -// ErrBodyReadAfterClose is returned when reading a Request Body after\r\n> -// the body has been closed. This typically happens when the body is\r\n> +// ErrBodyReadAfterClose is returned when reading a Request or Response\r\n> +// Body after the body has been closed. This typically happens when the\r\n> body is\r\n>  // read after an HTTP Handler calls WriteHeader or Write on its\r\n>  // ResponseWriter.\r\n> -var ErrBodyReadAfterClose = errors.New(\"http: invalid Read on closed\r\n> request Body\")\r\n> +var ErrBodyReadAfterClose = errors.New(\"http: invalid Read on closed\r\n> Body\")\r\n>\r\n>  func (b *body) Read(p []byte) (n int, err error) {\r\n>         if b.closed {\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-12-09 18:40:18.985020",
			"approval": true
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 6903057: net/http: fix text for ErrBodyReadAfterClose",
	"created": "2012-12-09 18:30:41.135430",
	"patchsets": [
		1,
		2001,
		3003,
		8001
	],
	"modified": "2012-12-10 06:42:16.807580",
	"closed": true,
	"issue": 6903057
}