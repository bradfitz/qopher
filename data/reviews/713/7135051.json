{
	"description": "net/url: generate correct Path when hostname empty\n\nParse(\"file:///foo\") previously returned a URL with Scheme \"file\"\nand Path \"///foo\". Now it returns a URL with Path \"/foo\",\nsuch that\n        &URL{Scheme: \"file\", Path: \"/foo\"}.String() == \"file:///foo\"\n\nThis means that parsing and stringifying the URL \"file:/foo\"\nreturns \"file:///foo\", technically a regression but one that only\naffects a corner case.\n\nFixes issue 4189.",
	"cc": [
		"bradfitz@golang.org",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-01-17 04:57:18.444030",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "might want to ping CL 6931047 to let him know you've started this instead.\r\n(that one's been idle for a month so i think it's fine.)\r\n",
			"disapproval": false,
			"date": "2013-01-17 14:06:24.002630",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "is there a semantic difference between file:///foo and file:/foo?\r\n",
			"disapproval": false,
			"date": "2013-01-18 19:11:04.618580",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"adg@golang.org",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7135051/diff/1/src/pkg/net/url/url_test.go\nFile src/pkg/net/url/url_test.go (left):\n\nhttps://codereview.appspot.com/7135051/diff/1/src/pkg/net/url/url_test.go#oldcode125\nsrc/pkg/net/url/url_test.go:125: // non-authority\nI'd prefer to keep this test. At least keep its input and update the comment and expected results.\n\nBut why is this not right?  Isn't this non-authority + path-absolute?  How do you read RFC 3986?",
			"disapproval": false,
			"date": "2013-01-17 20:04:00.851470",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7135051/diff/1/src/pkg/net/url/url_test.go\nFile src/pkg/net/url/url_test.go (left):\n\nhttps://codereview.appspot.com/7135051/diff/1/src/pkg/net/url/url_test.go#oldcode125\nsrc/pkg/net/url/url_test.go:125: // non-authority\nOn 2013/01/17 20:04:00, bradfitz wrote:\n> I'd prefer to keep this test. At least keep its input and update the comment and\n> expected results.\n> \n> But why is this not right?  Isn't this non-authority + path-absolute?  How do\n> you read RFC 3986?\n\nActually, on re-reading I think you're right.\n\nHowever we're kinda stuck now. url.URL doesn't give us a way to distinguish the absence of an authority and the absence of a host.\n\nThat is, if we represent\n\nmailto:/foo\nas\nURL{Scheme: \"mailto\", Path: \"/foo\"}\n\nthen we can't also represent\nfile:///foo\nas\nURL{Scheme: \"file\", Path: \"/foo\"}\n\nThe latter case seems more common to me, so that's what I would optimize for, but it breaks the existing behavior. Thoughts?",
			"disapproval": false,
			"date": "2013-01-17 23:28:53.618220",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jan 17, 2013 at 3:28 PM, <adg@golang.org> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/7135051/diff/1/src/pkg/**\r\n> net/url/url_test.go<https://codereview.appspot.com/7135051/diff/1/src/pkg/net/url/url_test.go>\r\n> File src/pkg/net/url/url_test.go (left):\r\n>\r\n> https://codereview.appspot.**com/7135051/diff/1/src/pkg/**\r\n> net/url/url_test.go#oldcode125<https://codereview.appspot.com/7135051/diff/1/src/pkg/net/url/url_test.go#oldcode125>\r\n> src/pkg/net/url/url_test.go:**125: // non-authority\r\n> On 2013/01/17 20:04:00, bradfitz wrote:\r\n>\r\n>> I'd prefer to keep this test. At least keep its input and update the\r\n>>\r\n> comment and\r\n>\r\n>> expected results.\r\n>>\r\n>\r\n>  But why is this not right?  Isn't this non-authority + path-absolute?\r\n>>\r\n> How do\r\n>\r\n>> you read RFC 3986?\r\n>>\r\n>\r\n> Actually, on re-reading I think you're right.\r\n>\r\n> However we're kinda stuck now. url.URL doesn't give us a way to\r\n> distinguish the absence of an authority and the absence of a host.\r\n>\r\n> That is, if we represent\r\n>\r\n> mailto:/foo\r\n> as\r\n> URL{Scheme: \"mailto\", Path: \"/foo\"}\r\n>\r\n> then we can't also represent\r\n> file:///foo\r\n> as\r\n> URL{Scheme: \"file\", Path: \"/foo\"}\r\n>\r\n> The latter case seems more common to me, so that's what I would optimize\r\n> for, but it breaks the existing behavior. Thoughts?\r\n>\r\n\r\nBleh.\r\n\r\nAll the options suck.  (special-casing schemes, breaking compat, adding new\r\nURL fields, ...)\r\n",
			"disapproval": false,
			"date": "2013-01-18 18:58:45.710350",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 19 January 2013 06:11, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> is there a semantic difference between file:///foo and file:/foo?\r\n\r\n\r\nNot in my reading of the spec, but I would assume most programs expect\r\nfile:///foo.\r\n\r\nAs one data point, Chrome's URL bar rewrites file:/foo to file:///foo.\r\n\r\nPerhaps we should just rewrite mailto:/foo (which I've never seen before)\r\nto mailto:///foo ?\r\n",
			"disapproval": false,
			"date": "2013-01-18 22:54:08.835160",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "As long as mailto:foo stays mailto:foo I don't care if mailto:/foo turns\r\ninto mailto:///foo.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-01-18 22:56:47.496570",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "SGTM\r\n On Jan 18, 2013 2:56 PM, \"Russ Cox\" <rsc@golang.org> wrote:\r\n\r\n> As long as mailto:foo stays mailto:foo I don't care if mailto:/foo turns\r\n> into mailto:///foo.\r\n>\r\n> Russ\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-19 01:20:26.591610",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-21 05:06:57.672170",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"adg@golang.org",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7135051/diff/12002/src/pkg/net/url/url.go\nFile src/pkg/net/url/url.go (right):\n\nhttps://codereview.appspot.com/7135051/diff/12002/src/pkg/net/url/url.go#newcode437\nsrc/pkg/net/url/url.go:437: // TODO: Rewrite to use bytes.Buffer\nI think it's time to do this.  In a following CL soon.\n\nhttps://codereview.appspot.com/7135051/diff/12002/src/pkg/net/url/url_test.go\nFile src/pkg/net/url/url_test.go (right):\n\nhttps://codereview.appspot.com/7135051/diff/12002/src/pkg/net/url/url_test.go#newcode132\nsrc/pkg/net/url/url_test.go:132: \"mailto:///webmaster@golang.org\", // unforunate compromise\ntypo in unfortunate",
			"disapproval": false,
			"date": "2013-01-22 21:37:57.520990",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 23 January 2013 08:37, <bradfitz@golang.org> wrote:\r\n\r\n> I think it's time to do this.  In a following CL soon.\r\n\r\n\r\nWill do.\r\n",
			"disapproval": false,
			"date": "2013-01-23 00:37:37.347340",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=c7719e0e0a2c ***\n\nnet/url: generate correct Path when hostname empty\n\nParse(\"file:///foo\") previously returned a URL with Scheme \"file\"\nand Path \"///foo\". Now it returns a URL with Path \"/foo\",\nsuch that\n        &URL{Scheme: \"file\", Path: \"/foo\"}.String() == \"file:///foo\"\n\nThis means that parsing and stringifying the URL \"file:/foo\"\nreturns \"file:///foo\", technically a regression but one that only\naffects a corner case.\n\nFixes issue 4189.\n\nR=bradfitz, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/7135051\n\nhttps://codereview.appspot.com/7135051/diff/12002/src/pkg/net/url/url_test.go\nFile src/pkg/net/url/url_test.go (right):\n\nhttps://codereview.appspot.com/7135051/diff/12002/src/pkg/net/url/url_test.go#newcode132\nsrc/pkg/net/url/url_test.go:132: \"mailto:///webmaster@golang.org\", // unforunate compromise\nOn 2013/01/22 21:37:57, bradfitz wrote:\n> typo in unfortunate\n\nDone.",
			"disapproval": false,
			"date": "2013-01-23 00:37:13.520550",
			"approval": false
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 7135051: net/url: generate correct Path when hostname empty",
	"created": "2013-01-17 04:57:10.180160",
	"patchsets": [
		1,
		9001,
		12002,
		17001
	],
	"modified": "2013-01-23 00:37:16.219500",
	"closed": true,
	"issue": 7135051
}