{
	"description": "os: turn FileStat.Sys into a method on FileInfo\n\nThis reduces the overhead necessary to work with OS-specific\nfile details, hides the implementation of FileStat, and\npreserves the implementation-specific nature of Sys.\n\nExpressions such as:\n\n  stat.(*os.FileInfo).Sys.(*syscall.Stat_t).Uid\n  fi1.(*os.FileStat).SameFile(fi2.(*os.FileStat))\n\nAre now spelled as::\n\n  stat.Sys().(*syscall.Stat_t).Uid\n  os.SameFile(fi1, fi2)",
	"cc": [
		"cw@f00f.org",
		"bradfitz@golang.org",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> What about introducing in syscall:\n\nI've experimented a bit with this idea and, to be honest, even moving\nthe system-specific value to the Sys() function onto the FileInfo\ninterface itself would already feel much better:\n\n    stat.Sys().(*syscall.Stat_t)\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2011-12-01 22:44:44.070897",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Dec 1, 2011 at 16:20, Gustavo Niemeyer <n13m3y3r@gmail.com>\nwrote:>> This fails on systems without a Stat_t, sorry.>> These may\neasily define it as struct{}, or interface{} for that matter.\nI started down that path. \u00a0struct{} is useless, becauseyou do want to\nbe able to store some associated dataon those systems, and interface{}\nis surprising, becausethen *Stat_t is *interface{}. \u00a0And on Windows\nthere is noteven a single struct type: depending on whether the\u00a0info\ncame from Readdir or Stat, it has different types.\n> I appreciate that people know they are touching system specific data\n> as well, and I'll be happy to see an approach that preserves that\n> property. The problem I'm trying to address is that while migrating\n> actual code to the new approach, it's looking overly verbose to do\n> things that are often necessary when people are interacting with\n> common O.S. specific file details.\n\nI understand and appreciate that.  However, it is worth pointing\nout that you don't have to migrate actual code to the new\napproach today.  This is a weekly snapshot, not a release.\nI'd be happy to discuss proposals about ways to make this\nbetter, but let's do that (discuss) instead of sending CLs.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-01 21:26:23.140213",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> I understand and appreciate that. \u00a0However, it is worth pointing\n> out that you don't have to migrate actual code to the new\n> approach today. \u00a0This is a weekly snapshot, not a release.\n> I'd be happy to discuss proposals about ways to make this\n> better, but let's do that (discuss) instead of sending CLs.\n\nAlso, FWIW, one of the points of migrating now is precisely so that I\ncan get a feeling for the API so that we can have that conversation\nwhile it's still comfortable for everybody to improve the interface.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2011-12-01 22:32:47.295446",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"gustavo@niemeyer.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": ">     stat.Sys().(*syscall.Stat_t)\n\nI have updated the CL to implement this approach, in case someone is interested in observing how it would look like.",
			"disapproval": false,
			"date": "2011-12-01 23:45:21.250948",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This fails on systems without a Stat_t, sorry.\n",
			"disapproval": false,
			"date": "2011-12-01 21:06:55.642691",
			"approval": false
		},
		{
			"sender": "cw@f00f.org",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"gustavo@niemeyer.net",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "For posix-like systems might we not just have something like\n\n  pstat := os.PosixStat(someFileInfo)\n\nthen pstat.Dev could be used directly similar to what was possible before?",
			"disapproval": false,
			"date": "2011-12-02 18:50:56.610521",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-01 21:05:40.077480",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What about introducing in syscall:\n\n   func Stat(s Iface) *Stat_t\n\nwhere Iface is defined as:\n\n    type Iface interface {\n        func SysStat() interface{}\n    }\n\nand replacing the Sys field by SysStat() in os.FileInfo?\nOn Dec 1, 2011 7:26 PM, \"Russ Cox\" <rsc@golang.org> wrote:\n",
			"disapproval": false,
			"date": "2011-12-01 21:43:01.867906",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> This fails on systems without a Stat_t, sorry.\n\nThese may easily define it as struct{}, or interface{} for that matter.\n\n(...)\n> I'd like to sit on this for a few days and think a bit\n> more about how to make this easier. \u00a0I don't mind\n> it being easier but I like very much the fact that\n> Unix-specific programs are marked as such, and\n> I would prefer to see a way to make things\n> easier that preserves that property.\n\nI appreciate that people know they are touching system specific data\nas well, and I'll be happy to see an approach that preserves that\nproperty. The problem I'm trying to address is that while migrating\nactual code to the new approach, it's looking overly verbose to do\nthings that are often necessary when people are interacting with\ncommon O.S. specific file details.\n\nLet me try a slightly different approach that you may like better.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2011-12-01 21:20:27.373394",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Dec 1, 2011 at 16:26, Russ Cox <rsc@golang.org> wrote:\n> On Thu, Dec 1, 2011 at 16:20, Gustavo Niemeyer <n13m3y3r@gmail.com>\n> wrote:>> This fails on systems without a Stat_t, sorry.>> These may\n> easily define it as struct{}, or interface{} for that matter.\n> I started down that path. \u00a0struct{} is useless, becauseyou do want to\n> be able to store some associated dataon those systems, and interface{}\n> is surprising, becausethen *Stat_t is *interface{}. \u00a0And on Windows\n> there is noteven a single struct type: depending on whether the\u00a0info\n> came from Readdir or Stat, it has different types.\n\nI apologize on Chrome's behalf.\n",
			"disapproval": false,
			"date": "2011-12-01 21:26:48.440231",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Dec 1, 2011 at 16:06, Russ Cox <rsc@golang.org> wrote:\n> This fails on systems without a Stat_t, sorry.\n\nAlso, and this might be worse, it means that you\ncan get at syscall-specific data without importing\nsyscall, which means you don't even know that\nyou're doing it.\n\nI'd like to sit on this for a few days and think a bit\nmore about how to make this easier.  I don't mind\nit being easier but I like very much the fact that\nUnix-specific programs are marked as such, and\nI would prefer to see a way to make things\neasier that preserves that property.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-01 21:09:19.413664",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"gustavo@niemeyer.net",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I've been thinking about this for a few months,\nand the zip change pushed me over the edge.\nPlease refresh this CL against the latest tree and\nwe can push it forward.  The implementation of\nSys for archive/zip's headFileInfo should return\nthe *FileHeader.\n\nThanks.\n\nhttp://codereview.appspot.com/5448079/diff/5004/src/pkg/os/types.go\nFile src/pkg/os/types.go (right):\n\nhttp://codereview.appspot.com/5448079/diff/5004/src/pkg/os/types.go#newcode22\nsrc/pkg/os/types.go:22: Sys() interface{}   // O.S. specific details\n// underlying data source\n\nMight not have anything to do with operating systems\n(it could be a *zip.Header, for example).\n\nhttp://codereview.appspot.com/5448079/diff/5004/src/pkg/os/types.go#newcode92\nsrc/pkg/os/types.go:92: type FileStat struct {\ns/FileStat/fileStat/",
			"disapproval": false,
			"date": "2012-01-31 16:27:54.864071",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Could you elaborate why you like this?  It feels like a regression to me.\n\nIf we care what an os.FileInfo is, we can check the concrete type of the\nfileinfo interface as well as we can check the concrete type of\nfileinfo.Sys().  What does this buy us?  It just expands this interface\nmore widely.  I already think IsDir() is pretty gross.\n\n\nOn Tue, Jan 31, 2012 at 8:27 AM, <rsc@golang.org> wrote:\n\n> I've been thinking about this for a few months,\n> and the zip change pushed me over the edge.\n> Please refresh this CL against the latest tree and\n> we can push it forward.  The implementation of\n> Sys for archive/zip's headFileInfo should return\n> the *FileHeader.\n>\n> Thanks.\n>\n>\n>\n> http://codereview.appspot.com/**5448079/diff/5004/src/pkg/os/**types.go<http://codereview.appspot.com/5448079/diff/5004/src/pkg/os/types.go>\n> File src/pkg/os/types.go (right):\n>\n> http://codereview.appspot.com/**5448079/diff/5004/src/pkg/os/**\n> types.go#newcode22<http://codereview.appspot.com/5448079/diff/5004/src/pkg/os/types.go#newcode22>\n> src/pkg/os/types.go:22: Sys() interface{}   // O.S. specific details\n> // underlying data source\n>\n> Might not have anything to do with operating systems\n> (it could be a *zip.Header, for example).\n>\n> http://codereview.appspot.com/**5448079/diff/5004/src/pkg/os/**\n> types.go#newcode92<http://codereview.appspot.com/5448079/diff/5004/src/pkg/os/types.go#newcode92>\n> src/pkg/os/types.go:92: type FileStat struct {\n> s/FileStat/fileStat/\n>\n> http://codereview.appspot.com/**5448079/<http://codereview.appspot.com/5448079/>\n>\n",
			"disapproval": false,
			"date": "2012-01-31 16:32:18.657121",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jan 31, 2012 at 11:32, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n> If we care what an os.FileInfo is, we can check the concrete type of the\n> fileinfo interface as well as we can check the concrete type of\n> fileinfo.Sys(). \u00a0What does this buy us? \u00a0It just expands this interface more\n> widely. \u00a0I already think IsDir() is pretty gross.\n\nSuppose I am holding something like\n\nvar fi os.FileInfo = obtained-from-archive/zip\n\nFill in the code here:\n\nvar h *zip.FileHeader = ___data_behind_fi____\n\nWithout Sys (or some other name with the same definition),\nthis is impossible with the current archive/zip.  We could\nof course export the type headerFileInfo, but that's yet another\ntype to show, and a more complex API.  This is going to keep\ncoming up as we need to provide implementations of os.FileInfo\nbased on structs with field names that conflict with the FileInfo\nmethod names.  We can create, export, and document a new\nwrapper type (like os.FileStat and zip.headerFileInfo) every time\nthis happens, or we can define the Sys method.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-31 16:45:59.007203",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jan 31, 2012 at 8:45 AM, Russ Cox <rsc@golang.org> wrote:\n\n> On Tue, Jan 31, 2012 at 11:32, Brad Fitzpatrick <bradfitz@golang.org>\n> wrote:\n> > If we care what an os.FileInfo is, we can check the concrete type of the\n> > fileinfo interface as well as we can check the concrete type of\n> > fileinfo.Sys().  What does this buy us?  It just expands this interface\n> more\n> > widely.  I already think IsDir() is pretty gross.\n>\n> Suppose I am holding something like\n>\n> var fi os.FileInfo = obtained-from-archive/zip\n>\n> Fill in the code here:\n>\n> var h *zip.FileHeader = ___data_behind_fi____\n>\n> Without Sys (or some other name with the same definition),\n> this is impossible with the current archive/zip.  We could\n> of course export the type headerFileInfo, but that's yet another\n> type to show, and a more complex API.  This is going to keep\n> coming up as we need to provide implementations of os.FileInfo\n> based on structs with field names that conflict with the FileInfo\n> method names.  We can create, export, and document a new\n> wrapper type (like os.FileStat and zip.headerFileInfo) every time\n> this happens, or we can define the Sys method.\n>\n\nI would prefer we do what we did to archive/zip each time (which I don't\nthink will be often enough), rather than expose a Sys().\n\nIf I give somebody an os.FileInfo, I want to be confident they'll accept\nit, and not judge it based on its Sys() (or lack thereof).\n",
			"disapproval": false,
			"date": "2012-01-31 16:49:02.278505",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jan 31, 2012 at 11:49, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n> I would prefer we do what we did to archive/zip each time (which I don't\n> think will be often enough), rather than expose a Sys().\n\nYou would prefer to export and document zip.headerFileInfo as\nzip.HeaderFileInfo?\nThat's the alternative, not doing nothing.\n\n> If I give somebody an os.FileInfo, I want to be confident they'll accept it,\n> and not judge it based on its Sys() (or lack thereof).\n\nPeople can already judge os.FileInfo implementations with an interface check.\nThis does not affect that ability.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-31 16:52:05.918423",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jan 31, 2012 at 14:27,  <rsc@golang.org> wrote:\n> I've been thinking about this for a few months,\n> and the zip change pushed me over the edge.\n> Please refresh this CL against the latest tree and\n> we can push it forward. \u00a0The implementation of\n> Sys for archive/zip's headFileInfo should return\n> the *FileHeader.\n\nWill do.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-01-31 17:16:30.171283",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"rsc@golang.org",
				"gustavo@niemeyer.net",
				"cw@f00f.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, gustavo@niemeyer.net, cw@f00f.org, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-01 01:28:51.701548",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"cw@f00f.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/5448079/diff/18001/src/pkg/os/types.go\nFile src/pkg/os/types.go (right):\n\nhttp://codereview.appspot.com/5448079/diff/18001/src/pkg/os/types.go#newcode115\nsrc/pkg/os/types.go:115: // the decision may be based on the path names.\nOn 2012/02/02 18:36:02, rsc wrote:\n> add\n> // SameFile only applies to results returned by this package's Stat.\n> // It returns false in other cases.\n\nDone.\n\nhttp://codereview.appspot.com/5448079/diff/18001/src/pkg/os/types.go#newcode120\nsrc/pkg/os/types.go:120: panic(\"SameFile: unsupported FileInfo\")\nOn 2012/02/02 18:36:02, rsc wrote:\n> return false\n\nDone.",
			"disapproval": false,
			"date": "2012-02-02 19:29:52.214590",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"cw@f00f.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello cw@f00f.org, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-02 19:29:46.374388",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Feb 2, 2012 at 11:40 AM, <cw@f00f.org> wrote:\n\n>\n> http://codereview.appspot.com/**5448079/diff/23001/src/cmd/**godoc/zip.go<http://codereview.appspot.com/5448079/diff/23001/src/cmd/godoc/zip.go>\n> File src/cmd/godoc/zip.go (right):\n>\n> http://codereview.appspot.com/**5448079/diff/23001/src/cmd/**\n> godoc/zip.go#newcode71<http://codereview.appspot.com/5448079/diff/23001/src/cmd/godoc/zip.go#newcode71>\n> src/cmd/godoc/zip.go:71:\n> How common is it that providers will want a nil Sys() method?\n>\n> If (quite) common can't we have two types, one with and one without, so\n> people who wish to imply a nil here don't have to create these stub\n> functions?\n>\n\nI want it clear that this isn't a required part of the otherwise\nmostly-clean os.FileInfo interface.\n",
			"disapproval": false,
			"date": "2012-02-02 19:50:17.591275",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"n13m3y3r@gmail.com",
				"cw@f00f.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5448079/diff/18001/src/pkg/os/types.go\nFile src/pkg/os/types.go (right):\n\nhttp://codereview.appspot.com/5448079/diff/18001/src/pkg/os/types.go#newcode115\nsrc/pkg/os/types.go:115: // the decision may be based on the path names.\nadd\n// SameFile only applies to results returned by this package's Stat.\n// It returns false in other cases.\n\nhttp://codereview.appspot.com/5448079/diff/18001/src/pkg/os/types.go#newcode120\nsrc/pkg/os/types.go:120: panic(\"SameFile: unsupported FileInfo\")\nreturn false",
			"disapproval": false,
			"date": "2012-02-02 18:36:02.074693",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"n13m3y3r@gmail.com",
				"cw@f00f.org",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5448079/diff/18001/src/pkg/os/types.go\nFile src/pkg/os/types.go (right):\n\nhttp://codereview.appspot.com/5448079/diff/18001/src/pkg/os/types.go#newcode22\nsrc/pkg/os/types.go:22: Sys() interface{}   // underlying data source\n// underlying data source (can return nil)",
			"disapproval": false,
			"date": "2012-02-02 19:50:28.568233",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"cw@f00f.org",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello cw@f00f.org, bradfitz@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-02 20:53:47.085530",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"n13m3y3r@gmail.com",
				"cw@f00f.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5448079/diff/18001/src/pkg/os/types.go\nFile src/pkg/os/types.go (right):\n\nhttp://codereview.appspot.com/5448079/diff/18001/src/pkg/os/types.go#newcode22\nsrc/pkg/os/types.go:22: Sys() interface{}   // underlying data source\ncan this say something like \"optional\" or \", or nil\"?",
			"disapproval": false,
			"date": "2012-02-02 19:33:19.594498",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"n13m3y3r@gmail.com",
				"cw@f00f.org",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-02-02 22:49:01.173833",
			"approval": true
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"cw@f00f.org",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=6d670400d46a ***\n\nos: turn FileStat.Sys into a method on FileInfo\n\nThis reduces the overhead necessary to work with OS-specific\nfile details, hides the implementation of FileStat, and\npreserves the implementation-specific nature of Sys.\n\nExpressions such as:\n\n  stat.(*os.FileInfo).Sys.(*syscall.Stat_t).Uid\n  fi1.(*os.FileStat).SameFile(fi2.(*os.FileStat))\n\nAre now spelled as::\n\n  stat.Sys().(*syscall.Stat_t).Uid\n  os.SameFile(fi1, fi2)\n\nR=cw, bradfitz, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5448079",
			"disapproval": false,
			"date": "2012-02-03 02:16:28.319328",
			"approval": false
		},
		{
			"sender": "cw@f00f.org",
			"recipients": [
				"n13m3y3r@gmail.com",
				"cw@f00f.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5448079/diff/23001/src/cmd/godoc/zip.go\nFile src/cmd/godoc/zip.go (right):\n\nhttp://codereview.appspot.com/5448079/diff/23001/src/cmd/godoc/zip.go#newcode71\nsrc/cmd/godoc/zip.go:71: \nHow common is it that providers will want a nil Sys() method?\n\nIf (quite) common can't we have two types, one with and one without, so people who wish to imply a nil here don't have to create these stub functions?",
			"disapproval": false,
			"date": "2012-02-02 19:40:14.047046",
			"approval": false
		},
		{
			"sender": "cw@f00f.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> I want it clear that this isn't a required part of the otherwise\n> mostly-clean os.FileInfo interface.\n\nin which case the change to src/cmd/godoc/zip.g shouldn't ne needed\n\n",
			"disapproval": false,
			"date": "2012-02-02 20:15:43.316263",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Feb 2, 2012 at 15:15, Chris Wedgwood <cw@f00f.org> wrote:\n> in which case the change to src/cmd/godoc/zip.g shouldn't ne needed\n\nsorry, but it is required.  otherwise we have two types\nand that is the kind of duplication we are actively trying\nto avoid.  it can return nil.\n\nruss\n",
			"disapproval": false,
			"date": "2012-02-02 20:38:12.333655",
			"approval": false
		}
	],
	"owner_email": "n13m3y3r@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "niemeyer",
	"subject": "code review 5448079: os: turn FileStat.Sys into a method on FileInfo",
	"created": "2011-12-01 20:59:34.710808",
	"patchsets": [
		1,
		2001,
		4,
		5,
		9,
		5004,
		14001,
		15002,
		18001,
		23001,
		25002,
		22002
	],
	"modified": "2012-02-03 02:16:31.164061",
	"closed": true,
	"issue": 5448079
}