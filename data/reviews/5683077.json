{
	"description": "go/parser: check import path restrictions\n\nReplaces pending CL 5674097.\nThanks to ality@pbrane.org for spearheading\nthe effort.",
	"cc": [
		"rsc@golang.org",
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, r@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-02-22 20:59:40.898707",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but wait for r\n\nhttp://codereview.appspot.com/5683077/diff/1002/src/pkg/go/parser/parser.go\nFile src/pkg/go/parser/parser.go (right):\n\nhttp://codereview.appspot.com/5683077/diff/1002/src/pkg/go/parser/parser.go#newcode1923\nsrc/pkg/go/parser/parser.go:1923: if strings.ContainsRune(illegalChars, r) || unicode.IsControl(r) || unicode.IsSpace(r) {\n|| r == unicode.ReplacementChar\n\nhttp://codereview.appspot.com/5683077/diff/1002/src/pkg/go/parser/parser_test.go\nFile src/pkg/go/parser/parser_test.go (right):\n\nhttp://codereview.appspot.com/5683077/diff/1002/src/pkg/go/parser/parser_test.go#newcode221\nsrc/pkg/go/parser/parser_test.go:221: \"`a`\":      false,\nadd\n\"\\x80\\x80\": false,",
			"disapproval": false,
			"date": "2012-02-22 21:03:06.894989",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-02-22 21:22:07.646912",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5683077/diff/1002/src/pkg/go/parser/parser.go\nFile src/pkg/go/parser/parser.go (right):\n\nhttp://codereview.appspot.com/5683077/diff/1002/src/pkg/go/parser/parser.go#newcode1923\nsrc/pkg/go/parser/parser.go:1923: if strings.ContainsRune(illegalChars, r) || unicode.IsControl(r) || unicode.IsSpace(r) {\nOn 2012/02/22 21:03:07, rsc wrote:\n> || r == unicode.ReplacementChar\n\njust put the replacement char in the illegalChars string: \\uFFFD\nthe others are fine as written\n\nhttp://codereview.appspot.com/5683077/diff/1002/src/pkg/go/parser/parser.go#newcode1947\nsrc/pkg/go/parser/parser.go:1947: p.error(p.pos, \"invalid import path\")\ncan you include the erroneous path in the error?",
			"disapproval": false,
			"date": "2012-02-22 21:08:07.535620",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n- gri\n\nOn Wed, Feb 22, 2012 at 1:08 PM,  <r@golang.org> wrote:\n>\n> http://codereview.appspot.com/5683077/diff/1002/src/pkg/go/parser/parser.go\n> File src/pkg/go/parser/parser.go (right):\n>\n> http://codereview.appspot.com/5683077/diff/1002/src/pkg/go/parser/parser.go#newcode1923\n> src/pkg/go/parser/parser.go:1923: if strings.ContainsRune(illegalChars,\n> r) || unicode.IsControl(r) || unicode.IsSpace(r) {\n> On 2012/02/22 21:03:07, rsc wrote:\n>>\n>> || r == unicode.ReplacementChar\n>\n>\n> just put the replacement char in the illegalChars string: \\uFFFD\n> the others are fine as written\n>\n> http://codereview.appspot.com/5683077/diff/1002/src/pkg/go/parser/parser.go#newcode1947\n> src/pkg/go/parser/parser.go:1947: p.error(p.pos, \"invalid import path\")\n> can you include the erroneous path in the error?\n>\n> http://codereview.appspot.com/5683077/\n",
			"disapproval": false,
			"date": "2012-02-22 21:13:34.987147",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=bc0439bb3bd2 ***\n\ngo/parser: check import path restrictions\n\nReplaces pending CL 5674097.\nThanks to ality@pbrane.org for spearheading\nthe effort.\n\nR=rsc, r\nCC=golang-dev\nhttp://codereview.appspot.com/5683077",
			"disapproval": false,
			"date": "2012-02-23 07:21:59.406785",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 5683077: go/parser: check import path restrictions",
	"created": "2012-02-22 20:58:49.834343",
	"patchsets": [
		1,
		2001,
		1002,
		4003,
		4004,
		4008,
		7001,
		9001
	],
	"modified": "2012-02-23 16:57:37.569954",
	"closed": true,
	"issue": 5683077
}