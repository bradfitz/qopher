{
	"description": "net: speed up network interface manipulations by caching\n\nThis CL introduces internal network interface lists to avoid\nnetwork interface manipulation slow down caused by identifying\nIPv6 scoped addressing zone at dialing, listening.\n\nUpdate issue 5081.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"dave@cheney.net",
		"fullung@gmail.com"
	],
	"messages": [
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Feb 26, 2013 at 12:48 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n\r\n> Why do we need all this?\r\n>\r\n> Why do interface lookups need to be fast?\r\n>\r\n> Can't this go in some third-party package, or go.net?\r\n\r\nAs issue 4501 describes we have not decided yet to add \"Zone string\"\r\nfield to ProtoclAddr structs as API but if once we agree it, fast interface\r\nname to index lookup would be great help to avoid degrading Dial, Listen\r\nwith IPv6 scoped addressing zone processing speed because kernels we\r\nsupport now require specifying interface index as link-local scope zone.\r\n\r\nIf this CL looks ugly or unnecessary a compromise might be s/string/int/\r\nlike sockaddr_in6 API does.\r\n\r\nOf course if we agree about net package never handle IPv6 scoped\r\naddressing zone stuff ... yup, I will follow the consensus.\r\n",
			"disapproval": false,
			"date": "2013-02-25 21:57:23.011300",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 22, 2013 at 2:16 AM,  <bradfitz@golang.org> wrote:\r\n\r\n> also, on miss, it should re-call Interfaces() to re-seed the map.\r\n>\r\n> what if I look at Interfaces(), create a bridge with\r\n> os/exec.Command(\"brctl\"), and then try to call InterfacesByName(\"br0\")\r\n> and it's not there?  but I know it is, because I just made it.  so you\r\n> should assume that you failed on a miss.\r\n\r\nyup, right. let me sleep on it; either receiving notifications from the\r\nkernel via netlink, routing sockets or taking accuracy as you suggest\r\nin previous comments.\r\n",
			"disapproval": false,
			"date": "2013-02-21 17:44:33.022180",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi Albert,\r\n\r\nSorry for the inconvenience.\r\n\r\nOn Tue, Feb 26, 2013 at 5:49 AM,  <fullung@gmail.com> wrote:\r\n\r\n> Is there a reason that the code that was recently added has to be that\r\n> slow?\r\n\r\nI chopped this CL down, gathered pieces up except quick dial, listen\r\nw/ IPv6 scoped addressing zone stuff and put into CL 7400055.\r\n\r\nCan you try https://codereview.appspot.com/7400055/ ?\r\n\r\nThanks,\r\n-- MIkio\r\n",
			"disapproval": false,
			"date": "2013-02-27 05:35:57.705770",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Feb 25, 2013 at 12:49 PM, <fullung@gmail.com> wrote:\r\n\r\n> On 2013/02/25 15:48:24, bradfitz wrote:\r\n>\r\n>> Why do we need all this?\r\n>> Why do interface lookups need to be fast?\r\n>>\r\n>\r\n> FWIW, we reported issue 4866 after we saw timeouts in an internal test\r\n> because interface address lookups suddenly got 166696% slower.\r\n>\r\n> We had a few goroutines doing a few lookups as part of code that was\r\n> mapping InfiniBand devices to IPoIB addresses via the hardware\r\n> address/GUID. Before it took milliseconds and after the recent changes\r\n> it took tens of seconds.\r\n>\r\n> Is there a reason that the code that was recently added has to be that\r\n> slow?\r\n>\r\n\r\nIssue 4866 says \"we added Y and X got slower\".  This CL says \"add Z to make\r\nX faster\".  I'm curious whether fixing or removing Y was considered, before\r\nwe just add more stuff.\r\n",
			"disapproval": false,
			"date": "2013-02-25 21:06:43.371300",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-02-21 16:57:05.213460",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-21 17:12:09.373030",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "what type of code cares about this?  I'd rather have accurate, uncached\r\nInterfaces() than super-fast cached calls.\r\n\r\nwhen is this cache invalidated?\r\n\r\n\r\nOn Thu, Feb 21, 2013 at 8:57 AM, <mikioh.mikioh@gmail.com> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> net: speed up network interface manipulations by caching\r\n>\r\n> This CL introduces internal network interface lists to avoid\r\n> network interface manipulation slow down caused by recent\r\n> changes below.\r\n>\r\n> changeset:   15798:53a4da6a4f4a\r\n> changeset:   15799:a81ef8e0cc05\r\n>\r\n> Results on linux/amd64, virtual machine:\r\n> benchmark                                 old ns/op    new ns/op\r\n> delta\r\n> BenchmarkInterfaces                           80652        81753\r\n> +1.37%\r\n> BenchmarkInterfaceByIndex                     71534          245\r\n> -99.66%\r\n> BenchmarkInterfaceByName                      80563          216\r\n> -99.73%\r\n> BenchmarkInterfaceAddrs                      841526        45642\r\n> -94.58%\r\n> BenchmarkInterfacesAndAddrs                  615326        37110\r\n> -93.97%\r\n> BenchmarkInterfacesAndMulticas**tAddrs         172234        91853\r\n> -46.67%\r\n>\r\n> Results on darwin/amd64:\r\n> benchmark                                 old ns/op    new ns/op\r\n> delta\r\n> BenchmarkInterfaces                           34709        37438\r\n> +7.86%\r\n> BenchmarkInterfaceByIndex                     13168          242\r\n> -98.16%\r\n> BenchmarkInterfaceByName                      37281          228\r\n> -99.39%\r\n> BenchmarkInterfaceAddrs                       66431        37463\r\n> -43.61%\r\n> BenchmarkInterfacesAndAddrs                   30903        17992\r\n> -41.78%\r\n> BenchmarkInterfacesAndMulticas**tAddrs          67520        26916\r\n> -60.14%\r\n>\r\n> Fixes issue 4866.\r\n>\r\n> Please review this at https://codereview.appspot.**com/7384048/<https://codereview.appspot.com/7384048/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/net/interface.go\r\n>   M src/pkg/net/interface_linux.go\r\n>   M src/pkg/net/ipsock.go\r\n>\r\n>\r\n> Index: src/pkg/net/interface.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/interface.go\r\n> +++ b/src/pkg/net/interface.go\r\n> @@ -6,7 +6,10 @@\r\n>\r\n>  package net\r\n>\r\n> -import \"errors\"\r\n> +import (\r\n> +       \"errors\"\r\n> +       \"sync\"\r\n> +)\r\n>\r\n>  var (\r\n>         errInvalidInterface         = errors.New(\"net: invalid interface\")\r\n> @@ -16,6 +19,32 @@\r\n>         errNoSuchMulticastInterface = errors.New(\"net: no such multicast\r\n> interface\")\r\n>  )\r\n>\r\n> +var (\r\n> +       interfaceMapLock  sync.RWMutex\r\n> +       interfaceIndexMap = make(map[int]*Interface)\r\n> +       interfaceNameMap  = make(map[string]*Interface)\r\n> +)\r\n> +\r\n> +func interfaceByIndex(index int) (*Interface, error) {\r\n> +       interfaceMapLock.RLock()\r\n> +       defer interfaceMapLock.RUnlock()\r\n> +       ifi, ok := interfaceIndexMap[index]\r\n> +       if !ok {\r\n> +               return nil, errNoSuchInterface\r\n> +       }\r\n> +       return ifi, nil\r\n> +}\r\n> +\r\n> +func interfaceByName(name string) (*Interface, error) {\r\n> +       interfaceMapLock.RLock()\r\n> +       defer interfaceMapLock.RUnlock()\r\n> +       ifi, ok := interfaceNameMap[name]\r\n> +       if !ok {\r\n> +               return nil, errNoSuchInterface\r\n> +       }\r\n> +       return ifi, nil\r\n> +}\r\n> +\r\n>  // Interface represents a mapping between network interface name\r\n>  // and index.  It also represents network interface facility\r\n>  // information.\r\n> @@ -78,9 +107,21 @@\r\n>         return interfaceMulticastAddrTable(**ifi.Index)\r\n>  }\r\n>\r\n> -// Interfaces returns a list of the system's network interfaces.\r\n> +// Interfaces returns a list of the system's network interfaces.  It\r\n> +// also updates the internal list for reuse by other network interface\r\n> +// manipulations.\r\n>  func Interfaces() ([]Interface, error) {\r\n> -       return interfaceTable(0)\r\n> +       ift, err := interfaceTable(0)\r\n> +       if err != nil {\r\n> +               return nil, err\r\n> +       }\r\n> +       interfaceMapLock.Lock()\r\n> +       defer interfaceMapLock.Unlock()\r\n> +       for i := range ift {\r\n> +               interfaceIndexMap[ift[i].**Index] = &ift[i]\r\n> +               interfaceNameMap[ift[i].Name] = &ift[i]\r\n> +       }\r\n> +       return ift, nil\r\n>  }\r\n>\r\n>  // InterfaceAddrs returns a list of the system's network interface\r\n> @@ -94,14 +135,7 @@\r\n>         if index <= 0 {\r\n>                 return nil, errInvalidInterfaceIndex\r\n>         }\r\n> -       ift, err := interfaceTable(index)\r\n> -       if err != nil {\r\n> -               return nil, err\r\n> -       }\r\n> -       for _, ifi := range ift {\r\n> -               return &ifi, nil\r\n> -       }\r\n> -       return nil, errNoSuchInterface\r\n> +       return interfaceByIndex(index)\r\n>  }\r\n>\r\n>  // InterfaceByName returns the interface specified by name.\r\n> @@ -109,14 +143,5 @@\r\n>         if name == \"\" {\r\n>                 return nil, errInvalidInterfaceName\r\n>         }\r\n> -       ift, err := interfaceTable(0)\r\n> -       if err != nil {\r\n> -               return nil, err\r\n> -       }\r\n> -       for _, ifi := range ift {\r\n> -               if name == ifi.Name {\r\n> -                       return &ifi, nil\r\n> -               }\r\n> -       }\r\n> -       return nil, errNoSuchInterface\r\n> +       return interfaceByName(name)\r\n>  }\r\n> Index: src/pkg/net/interface_linux.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/interface_linux.**go\r\n> +++ b/src/pkg/net/interface_linux.**go\r\n> @@ -116,15 +116,15 @@\r\n>                         break loop\r\n>                 case syscall.RTM_NEWADDR:\r\n>                         ifam := (*syscall.IfAddrmsg)(unsafe.**\r\n> Pointer(&m.Data[0]))\r\n> -                       ifi, err := InterfaceByIndex(int(ifam.**Index))\r\n> -                       if err != nil {\r\n> -                               return nil, err\r\n> -                       }\r\n>                         if ifindex == 0 || ifindex == int(ifam.Index) {\r\n>                                 attrs, err :=\r\n> syscall.ParseNetlinkRouteAttr(**&m)\r\n>                                 if err != nil {\r\n>                                         return nil,\r\n> os.NewSyscallError(\"netlink routeattr\", err)\r\n>                                 }\r\n> +                               ifi, err := interfaceByIndex(int(ifam.**\r\n> Index))\r\n> +                               if err != nil {\r\n> +                                       return nil, err\r\n> +                               }\r\n>                                 ifat = append(ifat, newAddr(attrs, ifi,\r\n> ifam))\r\n>                         }\r\n>                 }\r\n> Index: src/pkg/net/ipsock.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/ipsock.go\r\n> +++ b/src/pkg/net/ipsock.go\r\n> @@ -13,6 +13,7 @@\r\n>  func init() {\r\n>         sysInit()\r\n>         supportsIPv6, supportsIPv4map = probeIPv6Stack()\r\n> +       Interfaces()\r\n>  }\r\n>\r\n>  func firstFavoriteAddr(filter func(IP) IP, addrs []string) (addr IP) {\r\n> @@ -211,7 +212,7 @@\r\n>         if zone == 0 {\r\n>                 return \"\"\r\n>         }\r\n> -       if ifi, err := InterfaceByIndex(zone); err == nil {\r\n> +       if ifi, err := interfaceByIndex(zone); err == nil {\r\n>                 return ifi.Name\r\n>         }\r\n>         return itod(uint(zone))\r\n> @@ -221,7 +222,7 @@\r\n>         if zone == \"\" {\r\n>                 return 0\r\n>         }\r\n> -       if ifi, err := InterfaceByName(zone); err == nil {\r\n> +       if ifi, err := interfaceByName(zone); err == nil {\r\n>                 return ifi.Index\r\n>         }\r\n>         n, _, _ := dtoi(zone, 0)\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-21 17:12:51.010260",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7384048/diff/11001/src/pkg/net/interface.go\nFile src/pkg/net/interface.go (right):\n\nhttps://codereview.appspot.com/7384048/diff/11001/src/pkg/net/interface.go#newcode110\nsrc/pkg/net/interface.go:110: // Interfaces returns a list of the system's network interfaces.  It\ndrop this doc addition.  it's an internal detail.  callers don't care or need to know.\n\nhttps://codereview.appspot.com/7384048/diff/11001/src/pkg/net/interface.go#newcode138\nsrc/pkg/net/interface.go:138: return interfaceByIndex(index)\nshouldn't this still work if the user never called Interfaces() first to populate the map?\n\nhttps://codereview.appspot.com/7384048/diff/11001/src/pkg/net/interface.go#newcode146\nsrc/pkg/net/interface.go:146: return interfaceByName(name)\nlikewise.\n\nalso, on miss, it should re-call Interfaces() to re-seed the map.\n\nwhat if I look at Interfaces(), create a bridge with os/exec.Command(\"brctl\"), and then try to call InterfacesByName(\"br0\") and it's not there?  but I know it is, because I just made it.  so you should assume that you failed on a miss.",
			"disapproval": false,
			"date": "2013-02-21 17:16:46.715420",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for this proposal. I shared Brads concerns that the caching semantics need to be given some consideration.\n\nhttps://codereview.appspot.com/7384048/diff/11001/src/pkg/net/interface.go\nFile src/pkg/net/interface.go (right):\n\nhttps://codereview.appspot.com/7384048/diff/11001/src/pkg/net/interface.go#newcode26\nsrc/pkg/net/interface.go:26: )\nsuggestion (feel free to ignore it)\n\nvar interfaceCache = struct {\n    sync.Mutex\n    indexMap map[...]...\n    nameMap map[...]...\n}{ indexMap: make(...), nameMap: make(...) }\n\nthen (i think) it is clearer in the code (see below)\n\nhttps://codereview.appspot.com/7384048/diff/11001/src/pkg/net/interface.go#newcode29\nsrc/pkg/net/interface.go:29: interfaceMapLock.RLock()\ninterfaceCache.Lock()\ndefer ...\nifi, ok := interfaceCache.indexMap[index]\n\nhttps://codereview.appspot.com/7384048/diff/11001/src/pkg/net/interface.go#newcode110\nsrc/pkg/net/interface.go:110: // Interfaces returns a list of the system's network interfaces.  It\nOn 2013/02/21 17:16:46, bradfitz wrote:\n> drop this doc addition.  it's an internal detail.  callers don't care or need to\n> know.\n\n+1. One day we might not want to use a cache.\n\nhttps://codereview.appspot.com/7384048/diff/11001/src/pkg/net/interface.go#newcode113\nsrc/pkg/net/interface.go:113: func Interfaces() ([]Interface, error) {\nWhy does this function always overwrite the cache when called?\n\nhttps://codereview.appspot.com/7384048/diff/11001/src/pkg/net/interface_test.go\nFile src/pkg/net/interface_test.go (right):\n\nhttps://codereview.appspot.com/7384048/diff/11001/src/pkg/net/interface_test.go#newcode16\nsrc/pkg/net/interface_test.go:16: if err != nil {\nshould this take a *testing.T), then you can t.Fatal(err) ?\n\nhttps://codereview.appspot.com/7384048/diff/11001/src/pkg/net/interface_test.go#newcode132\nsrc/pkg/net/interface_test.go:132: b.Fatalf(\"loopback interface not found\")\nIs b.Skip() of use now ?\n\nhttps://codereview.appspot.com/7384048/diff/11001/src/pkg/net/ipsock.go\nFile src/pkg/net/ipsock.go (right):\n\nhttps://codereview.appspot.com/7384048/diff/11001/src/pkg/net/ipsock.go#newcode16\nsrc/pkg/net/ipsock.go:16: Interfaces()\nplease add a comment\n\n// populate interface cache",
			"disapproval": false,
			"date": "2013-02-24 02:22:25.241160",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Why do we need all this?\r\n\r\nWhy do interface lookups need to be fast?\r\n\r\nCan't this go in some third-party package, or go.net?\r\n\r\nTo pick just one thing to complain about: I don't like the panic in\r\ninterface_linux.go's startInterfaceMonitor.  Just because a socket couldn't\r\nbe made, I don't like the idea of crashing the program.\r\n\r\n\r\nOn Mon, Feb 25, 2013 at 7:41 AM, <mikioh.mikioh@gmail.com> wrote:\r\n\r\n> PTAL\r\n>\r\n> new patchset introduces a new network interface information\r\n> maintenance approach that monitors kernel events using netlink,\r\n> routing sockets.\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.**com/7384048/diff/11001/src/**\r\n> pkg/net/interface.go<https://codereview.appspot.com/7384048/diff/11001/src/pkg/net/interface.go>\r\n> File src/pkg/net/interface.go (right):\r\n>\r\n> https://codereview.appspot.**com/7384048/diff/11001/src/**\r\n> pkg/net/interface.go#newcode26<https://codereview.appspot.com/7384048/diff/11001/src/pkg/net/interface.go#newcode26>\r\n> src/pkg/net/interface.go:26: )\r\n> On 2013/02/24 02:22:25, dfc wrote:\r\n>\r\n>> suggestion (feel free to ignore it)\r\n>>\r\n>\r\n>  var interfaceCache = struct {\r\n>>      sync.Mutex\r\n>>      indexMap map[...]...\r\n>>      nameMap map[...]...\r\n>> }{ indexMap: make(...), nameMap: make(...) }\r\n>>\r\n>\r\n>  then (i think) it is clearer in the code (see below)\r\n>>\r\n>\r\n> thanks, I revised the structure that keeps interface information.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7384048/diff/11001/src/**\r\n> pkg/net/interface.go#newcode29<https://codereview.appspot.com/7384048/diff/11001/src/pkg/net/interface.go#newcode29>\r\n> src/pkg/net/interface.go:29: interfaceMapLock.RLock()\r\n> On 2013/02/24 02:22:25, dfc wrote:\r\n>\r\n>> interfaceCache.Lock()\r\n>> defer ...\r\n>> ifi, ok := interfaceCache.indexMap[index]\r\n>>\r\n>\r\n> also removed map.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7384048/diff/11001/src/**\r\n> pkg/net/interface.go#**newcode110<https://codereview.appspot.com/7384048/diff/11001/src/pkg/net/interface.go#newcode110>\r\n> src/pkg/net/interface.go:110: // Interfaces returns a list of the\r\n> system's network interfaces.  It\r\n> On 2013/02/21 17:16:46, bradfitz wrote:\r\n>\r\n>> drop this doc addition.  it's an internal detail.  callers don't care\r\n>>\r\n> or need to\r\n>\r\n>> know.\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7384048/diff/11001/src/**\r\n> pkg/net/interface.go#**newcode138<https://codereview.appspot.com/7384048/diff/11001/src/pkg/net/interface.go#newcode138>\r\n> src/pkg/net/interface.go:138: return interfaceByIndex(index)\r\n> On 2013/02/21 17:16:46, bradfitz wrote:\r\n>\r\n>> shouldn't this still work if the user never called Interfaces() first\r\n>>\r\n> to\r\n>\r\n>> populate the map?\r\n>>\r\n>\r\n> changed cache maintenance approach.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7384048/diff/11001/src/**\r\n> pkg/net/interface.go#**newcode146<https://codereview.appspot.com/7384048/diff/11001/src/pkg/net/interface.go#newcode146>\r\n> src/pkg/net/interface.go:146: return interfaceByName(name)\r\n> On 2013/02/21 17:16:46, bradfitz wrote:\r\n>\r\n>> likewise.\r\n>>\r\n>\r\n>  also, on miss, it should re-call Interfaces() to re-seed the map.\r\n>>\r\n>\r\n>  what if I look at Interfaces(), create a bridge with\r\n>>\r\n> os/exec.Command(\"brctl\"),\r\n>\r\n>> and then try to call InterfacesByName(\"br0\") and it's not there?  but\r\n>>\r\n> I know it\r\n>\r\n>> is, because I just made it.  so you should assume that you failed on a\r\n>>\r\n> miss.\r\n>\r\n> yup, fixed.\r\n>\r\n> https://codereview.appspot.**com/7384048/<https://codereview.appspot.com/7384048/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-25 15:48:24.291160",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-25 15:29:27.242240",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nnew patchset introduces a new network interface information \nmaintenance approach that monitors kernel events using netlink,\nrouting sockets.\n\nhttps://codereview.appspot.com/7384048/diff/11001/src/pkg/net/interface.go\nFile src/pkg/net/interface.go (right):\n\nhttps://codereview.appspot.com/7384048/diff/11001/src/pkg/net/interface.go#newcode26\nsrc/pkg/net/interface.go:26: )\nOn 2013/02/24 02:22:25, dfc wrote:\n> suggestion (feel free to ignore it)\n> \n> var interfaceCache = struct {\n>     sync.Mutex\n>     indexMap map[...]...\n>     nameMap map[...]...\n> }{ indexMap: make(...), nameMap: make(...) }\n> \n> then (i think) it is clearer in the code (see below)  \n\nthanks, I revised the structure that keeps interface information.\n\nhttps://codereview.appspot.com/7384048/diff/11001/src/pkg/net/interface.go#newcode29\nsrc/pkg/net/interface.go:29: interfaceMapLock.RLock()\nOn 2013/02/24 02:22:25, dfc wrote:\n> interfaceCache.Lock()\n> defer ...\n> ifi, ok := interfaceCache.indexMap[index]\n\nalso removed map.\n\nhttps://codereview.appspot.com/7384048/diff/11001/src/pkg/net/interface.go#newcode110\nsrc/pkg/net/interface.go:110: // Interfaces returns a list of the system's network interfaces.  It\nOn 2013/02/21 17:16:46, bradfitz wrote:\n> drop this doc addition.  it's an internal detail.  callers don't care or need to\n> know.\n\nDone.\n\nhttps://codereview.appspot.com/7384048/diff/11001/src/pkg/net/interface.go#newcode138\nsrc/pkg/net/interface.go:138: return interfaceByIndex(index)\nOn 2013/02/21 17:16:46, bradfitz wrote:\n> shouldn't this still work if the user never called Interfaces() first to\n> populate the map?\n\nchanged cache maintenance approach.\n\nhttps://codereview.appspot.com/7384048/diff/11001/src/pkg/net/interface.go#newcode146\nsrc/pkg/net/interface.go:146: return interfaceByName(name)\nOn 2013/02/21 17:16:46, bradfitz wrote:\n> likewise.\n> \n> also, on miss, it should re-call Interfaces() to re-seed the map.\n> \n> what if I look at Interfaces(), create a bridge with os/exec.Command(\"brctl\"),\n> and then try to call InterfacesByName(\"br0\") and it's not there?  but I know it\n> is, because I just made it.  so you should assume that you failed on a miss.\n\nyup, fixed.",
			"disapproval": false,
			"date": "2013-02-25 15:41:43.576020",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/25 15:48:24, bradfitz wrote:\n> Why do we need all this?\n> Why do interface lookups need to be fast?\n\nFWIW, we reported issue 4866 after we saw timeouts in an internal test because interface address lookups suddenly got 166696% slower.\n\nWe had a few goroutines doing a few lookups as part of code that was mapping InfiniBand devices to IPoIB addresses via the hardware address/GUID. Before it took milliseconds and after the recent changes it took tens of seconds.\n\nIs there a reason that the code that was recently added has to be that slow?\n\nCheers\n\nAlbert",
			"disapproval": false,
			"date": "2013-02-25 20:49:57.701350",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It feels like this issue (and others) are blocked on,\r\nhttps://code.google.com/p/go/issues/detail?id=4501\r\n\r\nOn Tue, Feb 26, 2013 at 8:57 AM, Mikio Hara <mikioh.mikioh@gmail.com> wrote:\r\n> On Tue, Feb 26, 2013 at 12:48 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n>\r\n>> Why do we need all this?\r\n>>\r\n>> Why do interface lookups need to be fast?\r\n>>\r\n>> Can't this go in some third-party package, or go.net?\r\n>\r\n> As issue 4501 describes we have not decided yet to add \"Zone string\"\r\n> field to ProtoclAddr structs as API but if once we agree it, fast interface\r\n> name to index lookup would be great help to avoid degrading Dial, Listen\r\n> with IPv6 scoped addressing zone processing speed because kernels we\r\n> support now require specifying interface index as link-local scope zone.\r\n>\r\n> If this CL looks ugly or unnecessary a compromise might be s/string/int/\r\n> like sockaddr_in6 API does.\r\n>\r\n> Of course if we agree about net package never handle IPv6 scoped\r\n> addressing zone stuff ... yup, I will follow the consensus.\r\n",
			"disapproval": false,
			"date": "2013-02-25 23:34:08.269130",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-06-06 08:15:00.716870",
			"approval": false
		}
	],
	"owner_email": "mikioh.mikioh@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mikio",
	"subject": "code review 7384048: net: speed up network interface manipulations by caching",
	"created": "2013-02-21 15:22:04.952000",
	"patchsets": [
		1,
		6001,
		9001,
		11001,
		42001
	],
	"modified": "2013-06-06 08:15:05.235170",
	"closed": true,
	"issue": 7384048
}