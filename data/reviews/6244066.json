{
	"description": "cmd/ld: align function entry on arch-specific boundary\n\n16 seems pretty standard on x86 for function entry.\nI don't know if ARM would benefit, so I used just 4\n(single instruction alignment).\n\nThis has a minor absolute effect on the current timings.\nThe main hope is that it will make them more consistent from\nrun to run.\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17    4222117400   4140739800   -1.93%\nBenchmarkFannkuch11      3462631800   3259914400   -5.85%\nBenchmarkGobDecode         20887622     20620222   -1.28%\nBenchmarkGobEncode          9548772      9384886   -1.72%\nBenchmarkGzip                151687       150333   -0.89%\nBenchmarkGunzip                8742         8741   -0.01%\nBenchmarkJSONEncode        62730560     65210990   +3.95%\nBenchmarkJSONDecode       252569180    249394860   -1.26%\nBenchmarkMandelbrot200      5267599      5273394   +0.11%\nBenchmarkRevcomp25M       980813500    996013800   +1.55%\nBenchmarkTemplate         361259100    360620840   -0.18%",
	"cc": [
		"ken@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"minux.ma@gmail.com"
	],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, May 31, 2012 at 4:26 AM, <rsc@golang.org> wrote:\r\n\r\n> Description:\r\n> cmd/ld: align function entry on arch-specific boundary\r\n>\r\n> 16 seems pretty standard on x86 for function entry.\r\n> I don't know if ARM would benefit, so I used just 4\r\n> (single instruction alignment).\r\n>\r\nfor the record, ARM gcc also uses 4-byte alignment (.align 2)\r\nfor function entry, so I think it's safe.\r\n",
			"disapproval": false,
			"date": "2012-05-30 20:57:10.494689",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello ken2 (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-05-30 20:26:35.373306",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=ee561e23110a ***\n\ncmd/ld: align function entry on arch-specific boundary\n\n16 seems pretty standard on x86 for function entry.\nI don't know if ARM would benefit, so I used just 4\n(single instruction alignment).\n\nThis has a minor absolute effect on the current timings.\nThe main hope is that it will make them more consistent from\nrun to run.\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17    4222117400   4140739800   -1.93%\nBenchmarkFannkuch11      3462631800   3259914400   -5.85%\nBenchmarkGobDecode         20887622     20620222   -1.28%\nBenchmarkGobEncode          9548772      9384886   -1.72%\nBenchmarkGzip                151687       150333   -0.89%\nBenchmarkGunzip                8742         8741   -0.01%\nBenchmarkJSONEncode        62730560     65210990   +3.95%\nBenchmarkJSONDecode       252569180    249394860   -1.26%\nBenchmarkMandelbrot200      5267599      5273394   +0.11%\nBenchmarkRevcomp25M       980813500    996013800   +1.55%\nBenchmarkTemplate         361259100    360620840   -0.18%\n\nR=ken2\nCC=golang-dev\nhttp://codereview.appspot.com/6244066",
			"disapproval": false,
			"date": "2012-05-30 20:26:45.848322",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 6244066: cmd/ld: align function entry on arch-specific boundary",
	"created": "2012-05-30 20:12:55.001896",
	"patchsets": [
		1,
		2001,
		5001
	],
	"modified": "2012-05-30 20:57:10.615948",
	"closed": true,
	"issue": 6244066
}