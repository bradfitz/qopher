{
	"description": "runtime: fix type of NumCPU.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"iant@golang.org",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "iant@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Seems like GOMAXPROCS has exactly the same issue.\n\nPersonally I think it's probably worth writing a Go wrapper so that callers can get and pass int rather than int32.  E.g., change debug.go to\n\nfunc GOMAXPROCS(n int) int {\n      return int(gomaxprocs(int32(n)))\n}\n\nfunc NumCPU() int {\n      return int(numCPU())\n}\n\nand then change runtime1.goc.",
			"disapproval": false,
			"date": "2012-01-31 14:42:16.962551",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't see the issue.  NumCPU should return int, like any good Go API.\n\nIn the C and goc implementation of the Go runtime, int is spelled 'int32',\nto make sizing explicit and to avoid the C type named 'int'.\n\nWhen we eventually make int be 64 bits on 64-bit platforms, there will\nbe many of these to change (I have done it once already), and we'll\nhave to introduce a new type, say intgo, to represent a Go int.\n\nBut we're not there yet, and since int is int32 on all platforms we\nuse, we don't need to worry about it before Go 1.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-31 15:04:12.774870",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-31 12:15:59.590602",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 1, 2012 at 2:04 AM, Russ Cox <rsc@golang.org> wrote:\n\n> I don't see the issue. \u00a0NumCPU should return int, like any good Go API.\n\nSure, okay, but I definitely got compile errors when building the Go\ntool in a slightly different context*, because the compilers thought\nthat\n  var buildP = runtime.NumCPU()\ndeclared an int32 var, and making this change solved that.\n\n\nDave.\n",
			"disapproval": false,
			"date": "2012-01-31 21:26:55.449452",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jan 31, 2012 at 16:26, David Symonds <dsymonds@golang.org> wrote:\n> On Wed, Feb 1, 2012 at 2:04 AM, Russ Cox <rsc@golang.org> wrote:\n>\n>> I don't see the issue. \u00a0NumCPU should return int, like any good Go API.\n>\n> Sure, okay, but I definitely got compile errors when building the Go\n> tool in a slightly different context*, because the compilers thought\n> that\n> \u00a0var buildP = runtime.NumCPU()\n> declared an int32 var, and making this change solved that.\n\nIt sounds like your slightly different context has a\nconflicting definition for NumCPU and should be fixed.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-31 21:34:29.443878",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-01-31 22:04:28.075578",
			"approval": false
		}
	],
	"owner_email": "dsymonds@golang.org",
	"private": false,
	"base_url": "",
	"owner": "dsymonds",
	"subject": "code review 5601059: runtime: fix type of NumCPU.",
	"created": "2012-01-31 12:06:08.088602",
	"patchsets": [
		1,
		2001,
		5001
	],
	"modified": "2012-01-31 22:04:30.759575",
	"closed": true,
	"issue": 5601059
}