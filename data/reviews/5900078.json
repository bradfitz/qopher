{
	"description": "      whirlpool: initial\r\n\r\nInitial support for the whirlpool hashing algorithm",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "jimmyzelinskie@gmail.com",
			"recipients": [
				"jimmyzelinskie@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, jimmyzelinskie@gmail.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.crypto/",
			"disapproval": false,
			"date": "2012-03-26 18:17:57.187943",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"jimmyzelinskie@gmail.com",
				"golang-dev@googlegroups.com",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"jimmyzelinskie@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't have much to say about the code. Here are some comments on the style however.\n\nhttp://codereview.appspot.com/5900078/diff/2004/whirlpool/whirlpool.go\nFile whirlpool/whirlpool.go (right):\n\nhttp://codereview.appspot.com/5900078/diff/2004/whirlpool/whirlpool.go#newcode1\nwhirlpool/whirlpool.go:1: // Copyright 2011 The Go Authors. All rights reserved.\n2012\n\nhttp://codereview.appspot.com/5900078/diff/2004/whirlpool/whirlpool.go#newcode7\nwhirlpool/whirlpool.go:7: \nIf you remove this empty line, it will correctly become the package comment.\n\nhttp://codereview.appspot.com/5900078/diff/2004/whirlpool/whirlpool.go#newcode28\nwhirlpool/whirlpool.go:28: // cleanup buffer\n// Clean up buffer.\n\nComments in Go are complete sentences that start with a capital letter and end with a full stop. Similarly below.",
			"disapproval": false,
			"date": "2012-03-26 20:51:26.055786",
			"approval": false
		},
		{
			"sender": "jimmyzelinskie@gmail.com",
			"recipients": [
				"jimmyzelinskie@gmail.com",
				"golang-dev@googlegroups.com",
				"bsiegert@gmail.com",
				"agl@golang.org",
				"r@google.com",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/03/26 21:46:13, agl1 wrote:\n> On Mon, Mar 26, 2012 at 5:43 PM, Michael Jones <mailto:mtj@google.com> wrote:\n> > I have not heard of it, but apparently the rest of world (via ISO) has. ;-)\n> \n> Well, I think the bar for inclusion is that it's required by something\n> that's useful and that people would want to implement in Go. There's\n> plenty of things that are standardised, but don't meet that bar.\n> \n> \n> Cheers\n> \n> AGL\n\nApologies for the brief response as I am on my phone. If you check the mailing list I made a thread prior to submitting this. I had seen a conversation on the mailing list asking for more secure algorithms. Whirlpool to my understanding is one of the most secure and is more secure than anything currently in the core libs. Links are provided in my post on the mailing list.",
			"disapproval": false,
			"date": "2012-03-26 21:50:14.007362",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"jimmyzelinskie@gmail.com",
				"golang-dev@googlegroups.com",
				"bsiegert@gmail.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"jimmyzelinskie@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5900078/diff/2004/whirlpool/const.go\nFile whirlpool/const.go (right):\n\nhttp://codereview.appspot.com/5900078/diff/2004/whirlpool/const.go#newcode1\nwhirlpool/const.go:1: // Copyright 2011 The Go Authors. All rights reserved.\n2012\n\nhttp://codereview.appspot.com/5900078/diff/2004/whirlpool/const.go#newcode5\nwhirlpool/const.go:5: // Package whirlpool implements the ISO/IEC 10118-3:2004 whirlpool algorithm\nYou only need the package comment in a single .go file, typically whirlpool.go.\n\nhttp://codereview.appspot.com/5900078/diff/2004/whirlpool/whirlpool.go\nFile whirlpool/whirlpool.go (right):\n\nhttp://codereview.appspot.com/5900078/diff/2004/whirlpool/whirlpool.go#newcode5\nwhirlpool/whirlpool.go:5: // Package whirlpool implements the ISO/IEC 10118-3:2004 whirlpool algorithm\ns/algorithm/cryptographic hash/\n\nhttp://codereview.appspot.com/5900078/diff/2004/whirlpool/whirlpool.go#newcode23\nwhirlpool/whirlpool.go:23: d := new(whirlpool)\nreturn new(whirlpool)\n\nhttp://codereview.appspot.com/5900078/diff/2004/whirlpool/whirlpool.go#newcode29\nwhirlpool/whirlpool.go:29: w.buffer = [wblockBytes]byte{}\nmight be better to set the bytes of |buffer| to zero with a for loop. Look at the disassembly to see what 6g is doing.\n\nhttp://codereview.appspot.com/5900078/diff/2004/whirlpool/whirlpool.go#newcode255\nwhirlpool/whirlpool.go:255: b          uint32                                         // current byte\nThis looks very much like a port of C code. Some of these variables could have tighter scope.",
			"disapproval": false,
			"date": "2012-03-26 21:04:31.708135",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Mar 26, 2012 at 5:43 PM, Michael Jones <mtj@google.com> wrote:\n> I have not heard of it, but apparently the rest of world (via ISO) has. ;-)\n\nWell, I think the bar for inclusion is that it's required by something\nthat's useful and that people would want to implement in Go. There's\nplenty of things that are standardised, but don't meet that bar.\n\n\nCheers\n\nAGL\n",
			"disapproval": false,
			"date": "2012-03-26 21:46:13.103276",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://en.wikipedia.org/wiki/Whirlpool_(cryptography)\n\nIn computer science and cryptography, Whirlpool (sometimes styled\nWHIRLPOOL) is a cryptographic hash function. It was designed by Vincent\nRijmen (co-creator of the Advanced Encryption Standard) and Paulo S. L. M.\nBarreto, who first described it in 2000. The hash has been recommended by\nthe NESSIE project. It has also been adopted by the International\nOrganization for Standardization (ISO) and the International\nElectrotechnical Commission (IEC) as part of the joint ISO/IEC 10118-3\ninternational standard.\n\n\nI have not heard of it, but apparently the rest of world (via ISO) has. ;-)\n\nOn Mon, Mar 26, 2012 at 2:11 PM, Rob 'Commander' Pike <r@google.com> wrote:\n\n> curmudgeon asks: is this an important algorithm? i haven't heard a word\n> spoken about that.\n>\n> it would be nice if the CL description justified its addition. for an\n> outsider like me, this subrepo feels like someone is just going down a list\n> adding the next entry on some all-inclusive list. can there really be that\n> many important ways to encrypt? the answer is probably yes, but tell me.\n>\n> now that crypto is a subrepo it still needs tending.\n>\n> -rob\n>\n>\n\n\n-- \nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\n650-335-5765\n",
			"disapproval": false,
			"date": "2012-03-26 21:44:13.386517",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"jimmyzelinskie@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"jimmyzelinskie@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5900078/diff/2004/whirlpool/whirlpool.go\nFile whirlpool/whirlpool.go (right):\n\nhttp://codereview.appspot.com/5900078/diff/2004/whirlpool/whirlpool.go#newcode59\nwhirlpool/whirlpool.go:59: block[i] = ((uint64(w.buffer[b]) << 56) ^\nlooks like block[i] = binary.BigEndian.Uint64(w.buffer[b:])\n\nhttp://codereview.appspot.com/5900078/diff/2004/whirlpool/whirlpool.go#newcode80\nwhirlpool/whirlpool.go:80: C2[int((K[6]>>40)&0xff)] ^\nyou could write byte(K[6] >> 40) which I think saves you a bounds check and is a bit shorter.\n\nI wonder if the rounds could be written more compactly as\nfor i := 0; i < 8; i++ {\n  L[i] = C0[byte(K[i%8])] ^ C1[byte(K[(i+7)%8])] ... \n}\nL[0] ^= rc[r]\n\nor do I miss something? Same thing for the second round.",
			"disapproval": false,
			"date": "2012-03-26 20:51:20.086409",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "curmudgeon asks: is this an important algorithm? i haven't heard a word spoken about that.\n\nit would be nice if the CL description justified its addition. for an outsider like me, this subrepo feels like someone is just going down a list adding the next entry on some all-inclusive list. can there really be that many important ways to encrypt? the answer is probably yes, but tell me.\n\nnow that crypto is a subrepo it still needs tending.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-03-26 21:11:22.422880",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn 27/03/2012, at 8:46 AM, Adam Langley wrote:\n\n> On Mon, Mar 26, 2012 at 5:43 PM, Michael Jones <mtj@google.com> wrote:\n>> I have not heard of it, but apparently the rest of world (via ISO) has. ;-)\n> \n> Well, I think the bar for inclusion is that it's required by something\n> that's useful and that people would want to implement in Go. There's\n> plenty of things that are standardised, but don't meet that bar.\n\nDoes this?\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2012-03-26 21:54:44.921176",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Mar 26, 2012 at 5:50 PM,  <jimmyzelinskie@gmail.com> wrote:\n> Apologies for the brief response as I am on my phone. If you check the\n> mailing list I made a thread prior to submitting this. I had seen a\n> conversation on the mailing list asking for more secure algorithms.\n> Whirlpool to my understanding is one of the most secure and is more\n> secure than anything currently in the core libs. Links are provided in\n> my post on the mailing list.\n\nThe discussion appears to be\nhttps://groups.google.com/forum/#!topic/golang-nuts/S8AcmTtlDII/discussion\n\nNot using MD5 is sensible. Moving away from SHA1 is reasonable, but\nthe destination should be SHA256 or, in the future, SHA-3.\n\nIf that was the motivation behind this then I don't feel that this\nmeets the go.crypto bar I'm afraid. Of course, there's not too much\nthat's special about go.crypto since import \"github.com/...\" works\njust as well.\n\n\nCheers\n\nAGL\n",
			"disapproval": false,
			"date": "2012-03-26 21:57:43.976259",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn 27/03/2012, at 8:50 AM, jimmyzelinskie@gmail.com wrote:\n\n> On 2012/03/26 21:46:13, agl1 wrote:\n>> On Mon, Mar 26, 2012 at 5:43 PM, Michael Jones <mailto:mtj@google.com>\n> wrote:\n>>> I have not heard of it, but apparently the rest of world (via ISO)\n> has. ;-)\n> \n>> Well, I think the bar for inclusion is that it's required by something\n>> that's useful and that people would want to implement in Go. There's\n>> plenty of things that are standardised, but don't meet that bar.\n> \n> \n>> Cheers\n> \n>> AGL\n> \n> Apologies for the brief response as I am on my phone. If you check the\n> mailing list I made a thread prior to submitting this. I had seen a\n> conversation on the mailing list asking for more secure algorithms.\n> Whirlpool to my understanding is one of the most secure and is more\n> secure than anything currently in the core libs. Links are provided in\n> my post on the mailing list.\n\nThank you. I don't see everything on the list, and must have missed this.\n\nBeyond the general point about having more secure algorithms, here's what you said:\n\n\tI took up implementing Whirlpool<https://en.wikipedia.org/wiki/Whirlpool_(cryptography)>for a little fun.\n\nI'd like to set a higher bar (to use Adam's phrase) than \"a little fun\", but it looks like there are signs this is an important algorithm. I'd like to hear it better justified, is all.\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2012-03-26 22:02:35.339513",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Mar 26, 2012 at 17:57, Adam Langley <agl@golang.org> wrote:\n> If that was the motivation behind this then I don't feel that this\n> meets the go.crypto bar I'm afraid. Of course, there's not too much\n> that's special about go.crypto since import \"github.com/...\" works\n> just as well.\n\nIndeed.  Please do post the code on google code or github or bitbucket\nso that it can be easily imported by people who need whirlpool.\n\nThanks.\nRuss\n",
			"disapproval": false,
			"date": "2012-03-26 22:36:06.769220",
			"approval": false
		},
		{
			"sender": "jimmyzelinskie@gmail.com",
			"recipients": [
				"jimmyzelinskie@gmail.com",
				"golang-dev@googlegroups.com",
				"bsiegert@gmail.com",
				"agl@golang.org",
				"r@google.com",
				"mtj@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/03/26 22:36:06, rsc wrote:\n> On Mon, Mar 26, 2012 at 17:57, Adam Langley <mailto:agl@golang.org> wrote:\n> > If that was the motivation behind this then I don't feel that this\n> > meets the go.crypto bar I'm afraid. Of course, there's not too much\n> > that's special about go.crypto since import \"github.com/...\" works\n> > just as well.\n> \n> Indeed.  Please do post the code on google code or github or bitbucket\n> so that it can be easily imported by people who need whirlpool.\n> \n> Thanks.\n> Russ\n\nThanks everybody for all the comments and code reviews. I know you're all super busy with Go 1. Now that I've gotten out of class, I can try to fully express why I think you should consider actually adopting whirlpool.\n\nI did earlier say that I implemented whirlpool \"for fun\", but please don't confuse the reasons why I wrote it with the reasons why you should adopt it. The decision is entirely dependent on your development philosophy for the go.crypto libraries. Up until now, I've been under the impression that the only crypto libraries added are those used elsewhere for protocols etc... This entirely makes sense in order to save development time. You have priorities on making libraries function correctly and writing a crypto library that isn't a dependency isn't top priority. However, this one is already written for you. Now, it is up to you guys to decide now if go.crypto itself is going to be a 'first class citizen' or exist only to satisfy dependencies of other libraries. Cryptography is a fickle thing; one that requires the guarantee that it's been read over by many eyes and works as designed. This is the kind of guarantee that the standard library offers. I would very much be a little hesitant to use a crypto algorithm I found in the wild, but I wouldn't bat an eyelash to use one maintained by the language. Developers aren't crypto experts; they don't know best practices. If someone goes to write something new and wants it to be as secure as currently possible, they can't currently rely on go.crypto and they might not even know that. There actually aren't many crypto algorithms out there. In my opinion, it's valuable to have the most common ones AND the most secure ones available for those who want to use them. Go has lots of best practices: why isn't security one of them? New applications deserve modern security. Using the standard library to help programmers make correct design decisions is what standard libraries are all about. Sure the future looks bright for things like SHA-3, but there's going to be the 'next big thing' when you're looking into the future; when it comes to security, what's important is today and today you're lacking.\n\nThanks for taking the time to read this and considering adopting my library. This is my first attempt at contributing to an open source project and I'm impressed with the organization. Good luck with Go 1. I have a lot of respect for everybody working on this project.",
			"disapproval": false,
			"date": "2012-03-27 01:54:05.571728",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I have no opinion on this thread, but I do want to point out something\nabout open source which I didn't realize for my first 10 or so years being\npart of the community:\n\nThere's no such thing as \"here's some code, it's done\" as you said.  You\neven referenced how you wouldn't use random crypto code found on the\nInternet but would use one 'maintained' (your word) by others.\n\nMaintained.\n\nProject maintainer.\n\nAll code has an ongoing cost, just being in the tree.  (bug reports,\nlanguage changes, doc fixes, questions on use on mailing lists, performance\npatch reviews...)\n\nThis thread is about whether the benefits of inclusion justify its\nbackground maintenance costs.\n\n\nOn Mon, Mar 26, 2012 at 6:54 PM, <jimmyzelinskie@gmail.com> wrote:\n\n> On 2012/03/26 22:36:06, rsc wrote:\n>\n>> On Mon, Mar 26, 2012 at 17:57, Adam Langley <mailto:agl@golang.org>\n>>\n> wrote:\n>\n>> > If that was the motivation behind this then I don't feel that this\n>> > meets the go.crypto bar I'm afraid. Of course, there's not too much\n>> > that's special about go.crypto since import \"github.com/...\" works\n>> > just as well.\n>>\n>\n>  Indeed.  Please do post the code on google code or github or bitbucket\n>> so that it can be easily imported by people who need whirlpool.\n>>\n>\n>  Thanks.\n>> Russ\n>>\n>\n> Thanks everybody for all the comments and code reviews. I know you're\n> all super busy with Go 1. Now that I've gotten out of class, I can try\n> to fully express why I think you should consider actually adopting\n> whirlpool.\n>\n> I did earlier say that I implemented whirlpool \"for fun\", but please\n> don't confuse the reasons why I wrote it with the reasons why you should\n> adopt it. The decision is entirely dependent on your development\n> philosophy for the go.crypto libraries. Up until now, I've been under\n> the impression that the only crypto libraries added are those used\n> elsewhere for protocols etc... This entirely makes sense in order to\n> save development time. You have priorities on making libraries function\n> correctly and writing a crypto library that isn't a dependency isn't top\n> priority. However, this one is already written for you. Now, it is up to\n> you guys to decide now if go.crypto itself is going to be a 'first class\n> citizen' or exist only to satisfy dependencies of other libraries.\n> Cryptography is a fickle thing; one that requires the guarantee that\n> it's been read over by many eyes and works as designed. This is the kind\n> of guarantee that the standard library offers. I would very much be a\n> little hesitant to use a crypto algorithm I found in the wild, but I\n> wouldn't bat an eyelash to use one maintained by the language.\n> Developers aren't crypto experts; they don't know best practices. If\n> someone goes to write something new and wants it to be as secure as\n> currently possible, they can't currently rely on go.crypto and they\n> might not even know that. There actually aren't many crypto algorithms\n> out there. In my opinion, it's valuable to have the most common ones AND\n> the most secure ones available for those who want to use them. Go has\n> lots of best practices: why isn't security one of them? New applications\n> deserve modern security. Using the standard library to help programmers\n> make correct design decisions is what standard libraries are all about.\n> Sure the future looks bright for things like SHA-3, but there's going to\n> be the 'next big thing' when you're looking into the future; when it\n> comes to security, what's important is today and today you're lacking.\n>\n> Thanks for taking the time to read this and considering adopting my\n> library. This is my first attempt at contributing to an open source\n> project and I'm impressed with the organization. Good luck with Go 1. I\n> have a lot of respect for everybody working on this project.\n>\n> https://codereview.appspot.**com/5900078/<https://codereview.appspot.com/5900078/>\n>\n",
			"disapproval": false,
			"date": "2012-03-27 15:44:25.425518",
			"approval": false
		},
		{
			"sender": "jimmyzelinskie@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I understand there are ongoing costs associated with adding anything to the\nlanguage, but I cannot fully understand them because I'm not working as a\npart of the team. That's why it's entirely your decision. You guys are\nultimately the ones that are going to deal with maintaining the code for\nyears to come. I understand why you don't take the decision lightly. I'm\njust putting some code on the table. It'll always be on the table if you\nguys ever change your mind in the future. Maybe now's not the right time.\nYou've got a lot on your plate with Go 1. Maybe later down the road it'll\nseem more important to flesh out your crypto libs. However, if your values\nsimilar to mine, you guys shouldn't mind adding 3 files to your code that\nworks exactly like the other hash functions. Offering go-nuts the most\nsecure algorithms out of the box is desirable behavior. I stated that in my\nown ideal crypto library I would liked to be offered 'what's popular' and\n'cryptographer's choice'. Go currently has only has 'what's popular'.\nYou have to be reminded that the standard libraries are a toolkit for those\ncreating new software, not just a dependency for the libraries you guys\nhave written. The fact that you go.crypto exists means it's going to be\n*the* place everyone will go when they want to encrypt something. It's a\nshame not to have the most secure options available for them and instead\nhave them scour the internet the find something that might be not be\nwritten, maintained, or even functioning. That leaves people with a bad\ntaste in their mouth and you get more people wasting their breathe for no\nreason. One of the first things people say when they try golang is how\ndeveloped the libraries are. Why handicap those libraries to save 3 very\nsimilar files worth of maintenance?\n\n\nOn Tue, Mar 27, 2012 at 11:44 AM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\n\n> I have no opinion on this thread, but I do want to point out something\n> about open source which I didn't realize for my first 10 or so years being\n> part of the community:\n>\n> There's no such thing as \"here's some code, it's done\" as you said.  You\n> even referenced how you wouldn't use random crypto code found on the\n> Internet but would use one 'maintained' (your word) by others.\n>\n> Maintained.\n>\n> Project maintainer.\n>\n> All code has an ongoing cost, just being in the tree.  (bug reports,\n> language changes, doc fixes, questions on use on mailing lists, performance\n> patch reviews...)\n>\n> This thread is about whether the benefits of inclusion justify its\n> background maintenance costs.\n>\n>\n> On Mon, Mar 26, 2012 at 6:54 PM, <jimmyzelinskie@gmail.com> wrote:\n>\n>> On 2012/03/26 22:36:06, rsc wrote:\n>>\n>>> On Mon, Mar 26, 2012 at 17:57, Adam Langley <mailto:agl@golang.org>\n>>>\n>> wrote:\n>>\n>>> > If that was the motivation behind this then I don't feel that this\n>>> > meets the go.crypto bar I'm afraid. Of course, there's not too much\n>>> > that's special about go.crypto since import \"github.com/...\" works\n>>> > just as well.\n>>>\n>>\n>>  Indeed.  Please do post the code on google code or github or bitbucket\n>>> so that it can be easily imported by people who need whirlpool.\n>>>\n>>\n>>  Thanks.\n>>> Russ\n>>>\n>>\n>> Thanks everybody for all the comments and code reviews. I know you're\n>> all super busy with Go 1. Now that I've gotten out of class, I can try\n>> to fully express why I think you should consider actually adopting\n>> whirlpool.\n>>\n>> I did earlier say that I implemented whirlpool \"for fun\", but please\n>> don't confuse the reasons why I wrote it with the reasons why you should\n>> adopt it. The decision is entirely dependent on your development\n>> philosophy for the go.crypto libraries. Up until now, I've been under\n>> the impression that the only crypto libraries added are those used\n>> elsewhere for protocols etc... This entirely makes sense in order to\n>> save development time. You have priorities on making libraries function\n>> correctly and writing a crypto library that isn't a dependency isn't top\n>> priority. However, this one is already written for you. Now, it is up to\n>> you guys to decide now if go.crypto itself is going to be a 'first class\n>> citizen' or exist only to satisfy dependencies of other libraries.\n>> Cryptography is a fickle thing; one that requires the guarantee that\n>> it's been read over by many eyes and works as designed. This is the kind\n>> of guarantee that the standard library offers. I would very much be a\n>> little hesitant to use a crypto algorithm I found in the wild, but I\n>> wouldn't bat an eyelash to use one maintained by the language.\n>> Developers aren't crypto experts; they don't know best practices. If\n>> someone goes to write something new and wants it to be as secure as\n>> currently possible, they can't currently rely on go.crypto and they\n>> might not even know that. There actually aren't many crypto algorithms\n>> out there. In my opinion, it's valuable to have the most common ones AND\n>> the most secure ones available for those who want to use them. Go has\n>> lots of best practices: why isn't security one of them? New applications\n>> deserve modern security. Using the standard library to help programmers\n>> make correct design decisions is what standard libraries are all about.\n>> Sure the future looks bright for things like SHA-3, but there's going to\n>> be the 'next big thing' when you're looking into the future; when it\n>> comes to security, what's important is today and today you're lacking.\n>>\n>> Thanks for taking the time to read this and considering adopting my\n>> library. This is my first attempt at contributing to an open source\n>> project and I'm impressed with the organization. Good luck with Go 1. I\n>> have a lot of respect for everybody working on this project.\n>>\n>> https://codereview.appspot.**com/5900078/<https://codereview.appspot.com/5900078/>\n>>\n>\n>\n",
			"disapproval": false,
			"date": "2012-03-27 16:57:53.081837",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Mar 27, 2012 at 12:57 PM, Jimmy Zelinskie\n<jimmyzelinskie@gmail.com> wrote:\n> You have to be reminded that the standard libraries are a toolkit for those\n> creating new software, not just a dependency for the libraries you guys have\n> written.\n\nI agree completely. There is absolutely a place in go.crypto for\nforward looking primitives. However, when it comes to hash functions,\nthat's SHA-256/384/512 and, in the future, SHA-3 I'm afraid.\n\n\nCheers\n\nAGL\n",
			"disapproval": false,
			"date": "2012-03-27 18:46:16.395680",
			"approval": false
		},
		{
			"sender": "borman@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "You are going to make this go installable and put it in a public\nrepository, right?\n\nSince you have repeatedly mentioned cryptography and this being secure, I\nwould really like to see some reviews by cryptography experts that\nthis implementation is correct and secure (as that is the entire point,\nright?)  Putting it out in a public repository will give accomplish several\nthings, including\n\n\n   1. Gives people access to the code right now.\n   2. Lets people outside of golang-dev take a look at it.\n   3. Perhaps we can gain some statistics to see if it is being widely used\n   or not.\n\nThis can all be done without impacting Go1 or the Go team.\n\n    -Paul\n\nPS:  All hash algorithms, when used improperly, are insecure.\n\nOn Tue, Mar 27, 2012 at 9:57 AM, Jimmy Zelinskie\n<jimmyzelinskie@gmail.com>wrote:\n\n> I understand there are ongoing costs associated with adding anything to\n> the language, but I cannot fully understand them because I'm not working as\n> a part of the team. That's why it's entirely your decision. You guys are\n> ultimately the ones that are going to deal with maintaining the code for\n> years to come. I understand why you don't take the decision lightly. I'm\n> just putting some code on the table. It'll always be on the table if you\n> guys ever change your mind in the future. Maybe now's not the right time.\n> You've got a lot on your plate with Go 1. Maybe later down the road it'll\n> seem more important to flesh out your crypto libs. However, if your values\n> similar to mine, you guys shouldn't mind adding 3 files to your code that\n> works exactly like the other hash functions. Offering go-nuts the most\n> secure algorithms out of the box is desirable behavior. I stated that in my\n> own ideal crypto library I would liked to be offered 'what's popular' and\n> 'cryptographer's choice'. Go currently has only has 'what's popular'.\n> You have to be reminded that the standard libraries are a toolkit for\n> those creating new software, not just a dependency for the libraries you\n> guys have written. The fact that you go.crypto exists means it's going to\n> be *the* place everyone will go when they want to encrypt something. It's a\n> shame not to have the most secure options available for them and instead\n> have them scour the internet the find something that might be not be\n> written, maintained, or even functioning. That leaves people with a bad\n> taste in their mouth and you get more people wasting their breathe for no\n> reason. One of the first things people say when they try golang is how\n> developed the libraries are. Why handicap those libraries to save 3 very\n> similar files worth of maintenance?\n>\n>\n>\n> On Tue, Mar 27, 2012 at 11:44 AM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\n>\n>> I have no opinion on this thread, but I do want to point out something\n>> about open source which I didn't realize for my first 10 or so years being\n>> part of the community:\n>>\n>> There's no such thing as \"here's some code, it's done\" as you said.  You\n>> even referenced how you wouldn't use random crypto code found on the\n>> Internet but would use one 'maintained' (your word) by others.\n>>\n>> Maintained.\n>>\n>> Project maintainer.\n>>\n>> All code has an ongoing cost, just being in the tree.  (bug reports,\n>> language changes, doc fixes, questions on use on mailing lists, performance\n>> patch reviews...)\n>>\n>> This thread is about whether the benefits of inclusion justify its\n>> background maintenance costs.\n>>\n>>\n>> On Mon, Mar 26, 2012 at 6:54 PM, <jimmyzelinskie@gmail.com> wrote:\n>>\n>>> On 2012/03/26 22:36:06, rsc wrote:\n>>>\n>>>> On Mon, Mar 26, 2012 at 17:57, Adam Langley <mailto:agl@golang.org>\n>>>>\n>>> wrote:\n>>>\n>>>> > If that was the motivation behind this then I don't feel that this\n>>>> > meets the go.crypto bar I'm afraid. Of course, there's not too much\n>>>> > that's special about go.crypto since import \"github.com/...\" works\n>>>> > just as well.\n>>>>\n>>>\n>>>  Indeed.  Please do post the code on google code or github or bitbucket\n>>>> so that it can be easily imported by people who need whirlpool.\n>>>>\n>>>\n>>>  Thanks.\n>>>> Russ\n>>>>\n>>>\n>>> Thanks everybody for all the comments and code reviews. I know you're\n>>> all super busy with Go 1. Now that I've gotten out of class, I can try\n>>> to fully express why I think you should consider actually adopting\n>>> whirlpool.\n>>>\n>>> I did earlier say that I implemented whirlpool \"for fun\", but please\n>>> don't confuse the reasons why I wrote it with the reasons why you should\n>>> adopt it. The decision is entirely dependent on your development\n>>> philosophy for the go.crypto libraries. Up until now, I've been under\n>>> the impression that the only crypto libraries added are those used\n>>> elsewhere for protocols etc... This entirely makes sense in order to\n>>> save development time. You have priorities on making libraries function\n>>> correctly and writing a crypto library that isn't a dependency isn't top\n>>> priority. However, this one is already written for you. Now, it is up to\n>>> you guys to decide now if go.crypto itself is going to be a 'first class\n>>> citizen' or exist only to satisfy dependencies of other libraries.\n>>> Cryptography is a fickle thing; one that requires the guarantee that\n>>> it's been read over by many eyes and works as designed. This is the kind\n>>> of guarantee that the standard library offers. I would very much be a\n>>> little hesitant to use a crypto algorithm I found in the wild, but I\n>>> wouldn't bat an eyelash to use one maintained by the language.\n>>> Developers aren't crypto experts; they don't know best practices. If\n>>> someone goes to write something new and wants it to be as secure as\n>>> currently possible, they can't currently rely on go.crypto and they\n>>> might not even know that. There actually aren't many crypto algorithms\n>>> out there. In my opinion, it's valuable to have the most common ones AND\n>>> the most secure ones available for those who want to use them. Go has\n>>> lots of best practices: why isn't security one of them? New applications\n>>> deserve modern security. Using the standard library to help programmers\n>>> make correct design decisions is what standard libraries are all about.\n>>> Sure the future looks bright for things like SHA-3, but there's going to\n>>> be the 'next big thing' when you're looking into the future; when it\n>>> comes to security, what's important is today and today you're lacking.\n>>>\n>>> Thanks for taking the time to read this and considering adopting my\n>>> library. This is my first attempt at contributing to an open source\n>>> project and I'm impressed with the organization. Good luck with Go 1. I\n>>> have a lot of respect for everybody working on this project.\n>>>\n>>> https://codereview.appspot.**com/5900078/<https://codereview.appspot.com/5900078/>\n>>>\n>>\n>>\n>\n",
			"disapproval": false,
			"date": "2012-03-27 19:05:30.867906",
			"approval": false
		},
		{
			"sender": "jimmyzelinskie@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry Paul, I accidently missed reply-all on my phone.\n\nThe code is already publicly available on github with two branches: the\nmaster which was submitted here and a version that prints traces of the\nmidstates to stdout. I would definitely be interested in getting the code\nchecked out by an expert and had wrongly presumed that would be part of the\ncode review. I had originally thought I would be considerate and offer you\nguys the code. I apologize for any distraction this may have caused. I\nhonestly did not know how long this would take -- I wasn't even able to\nrespond for the first group of comments because I wasn't expecting them to\nflood in. It seems like all I did was squeeze a free code review out of you\nguys.\nOn Mar 27, 2012 3:05 PM, \"Paul Borman\" <borman@google.com> wrote:\n\n> You are going to make this go installable and put it in a public\n> repository, right?\n>\n> Since you have repeatedly mentioned cryptography and this being secure, I\n> would really like to see some reviews by cryptography experts that\n> this implementation is correct and secure (as that is the entire point,\n> right?)  Putting it out in a public repository will give accomplish several\n> things, including\n>\n>\n>    1. Gives people access to the code right now.\n>    2. Lets people outside of golang-dev take a look at it.\n>    3. Perhaps we can gain some statistics to see if it is being widely\n>    used or not.\n>\n> This can all be done without impacting Go1 or the Go team.\n>\n>     -Paul\n>\n> PS:  All hash algorithms, when used improperly, are insecure.\n>\n> On Tue, Mar 27, 2012 at 9:57 AM, Jimmy Zelinskie <jimmyzelinskie@gmail.com\n> > wrote:\n>\n>> I understand there are ongoing costs associated with adding anything to\n>> the language, but I cannot fully understand them because I'm not working as\n>> a part of the team. That's why it's entirely your decision. You guys are\n>> ultimately the ones that are going to deal with maintaining the code for\n>> years to come. I understand why you don't take the decision lightly. I'm\n>> just putting some code on the table. It'll always be on the table if you\n>> guys ever change your mind in the future. Maybe now's not the right time.\n>> You've got a lot on your plate with Go 1. Maybe later down the road it'll\n>> seem more important to flesh out your crypto libs. However, if your values\n>> similar to mine, you guys shouldn't mind adding 3 files to your code that\n>> works exactly like the other hash functions. Offering go-nuts the most\n>> secure algorithms out of the box is desirable behavior. I stated that in my\n>> own ideal crypto library I would liked to be offered 'what's popular' and\n>> 'cryptographer's choice'. Go currently has only has 'what's popular'.\n>> You have to be reminded that the standard libraries are a toolkit for\n>> those creating new software, not just a dependency for the libraries you\n>> guys have written. The fact that you go.crypto exists means it's going to\n>> be *the* place everyone will go when they want to encrypt something. It's a\n>> shame not to have the most secure options available for them and instead\n>> have them scour the internet the find something that might be not be\n>> written, maintained, or even functioning. That leaves people with a bad\n>> taste in their mouth and you get more people wasting their breathe for no\n>> reason. One of the first things people say when they try golang is how\n>> developed the libraries are. Why handicap those libraries to save 3 very\n>> similar files worth of maintenance?\n>>\n>>\n>>\n>> On Tue, Mar 27, 2012 at 11:44 AM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\n>>\n>>> I have no opinion on this thread, but I do want to point out something\n>>> about open source which I didn't realize for my first 10 or so years being\n>>> part of the community:\n>>>\n>>> There's no such thing as \"here's some code, it's done\" as you said.  You\n>>> even referenced how you wouldn't use random crypto code found on the\n>>> Internet but would use one 'maintained' (your word) by others.\n>>>\n>>> Maintained.\n>>>\n>>> Project maintainer.\n>>>\n>>> All code has an ongoing cost, just being in the tree.  (bug reports,\n>>> language changes, doc fixes, questions on use on mailing lists, performance\n>>> patch reviews...)\n>>>\n>>> This thread is about whether the benefits of inclusion justify its\n>>> background maintenance costs.\n>>>\n>>>\n>>> On Mon, Mar 26, 2012 at 6:54 PM, <jimmyzelinskie@gmail.com> wrote:\n>>>\n>>>> On 2012/03/26 22:36:06, rsc wrote:\n>>>>\n>>>>> On Mon, Mar 26, 2012 at 17:57, Adam Langley <mailto:agl@golang.org>\n>>>>>\n>>>> wrote:\n>>>>\n>>>>> > If that was the motivation behind this then I don't feel that this\n>>>>> > meets the go.crypto bar I'm afraid. Of course, there's not too much\n>>>>> > that's special about go.crypto since import \"github.com/...\" works\n>>>>> > just as well.\n>>>>>\n>>>>\n>>>>  Indeed.  Please do post the code on google code or github or bitbucket\n>>>>> so that it can be easily imported by people who need whirlpool.\n>>>>>\n>>>>\n>>>>  Thanks.\n>>>>> Russ\n>>>>>\n>>>>\n>>>> Thanks everybody for all the comments and code reviews. I know you're\n>>>> all super busy with Go 1. Now that I've gotten out of class, I can try\n>>>> to fully express why I think you should consider actually adopting\n>>>> whirlpool.\n>>>>\n>>>> I did earlier say that I implemented whirlpool \"for fun\", but please\n>>>> don't confuse the reasons why I wrote it with the reasons why you should\n>>>> adopt it. The decision is entirely dependent on your development\n>>>> philosophy for the go.crypto libraries. Up until now, I've been under\n>>>> the impression that the only crypto libraries added are those used\n>>>> elsewhere for protocols etc... This entirely makes sense in order to\n>>>> save development time. You have priorities on making libraries function\n>>>> correctly and writing a crypto library that isn't a dependency isn't top\n>>>> priority. However, this one is already written for you. Now, it is up to\n>>>> you guys to decide now if go.crypto itself is going to be a 'first class\n>>>> citizen' or exist only to satisfy dependencies of other libraries.\n>>>> Cryptography is a fickle thing; one that requires the guarantee that\n>>>> it's been read over by many eyes and works as designed. This is the kind\n>>>> of guarantee that the standard library offers. I would very much be a\n>>>> little hesitant to use a crypto algorithm I found in the wild, but I\n>>>> wouldn't bat an eyelash to use one maintained by the language.\n>>>> Developers aren't crypto experts; they don't know best practices. If\n>>>> someone goes to write something new and wants it to be as secure as\n>>>> currently possible, they can't currently rely on go.crypto and they\n>>>> might not even know that. There actually aren't many crypto algorithms\n>>>> out there. In my opinion, it's valuable to have the most common ones AND\n>>>> the most secure ones available for those who want to use them. Go has\n>>>> lots of best practices: why isn't security one of them? New applications\n>>>> deserve modern security. Using the standard library to help programmers\n>>>> make correct design decisions is what standard libraries are all about.\n>>>> Sure the future looks bright for things like SHA-3, but there's going to\n>>>> be the 'next big thing' when you're looking into the future; when it\n>>>> comes to security, what's important is today and today you're lacking.\n>>>>\n>>>> Thanks for taking the time to read this and considering adopting my\n>>>> library. This is my first attempt at contributing to an open source\n>>>> project and I'm impressed with the organization. Good luck with Go 1. I\n>>>> have a lot of respect for everybody working on this project.\n>>>>\n>>>> https://codereview.appspot.**com/5900078/<https://codereview.appspot.com/5900078/>\n>>>>\n>>>\n>>>\n>>\n>\n",
			"disapproval": false,
			"date": "2012-03-27 20:07:09.759729",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"jimmyzelinskie@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2012-06-03 04:46:46.403745",
			"approval": false
		}
	],
	"owner_email": "jimmyzelinskie@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Jimi",
	"subject": "code review 5900078:       whirlpool: initial",
	"created": "2012-03-26 18:12:43.589260",
	"patchsets": [
		1,
		1002,
		2004
	],
	"modified": "2012-10-10 17:02:45.999360",
	"closed": true,
	"issue": 5900078
}