{
	"description": "image/tiff: Implement PackBits decoding.\n\nThe decompression routine is in its own file because\nG3 encoding (which is more complicated) will be put\nthere.",
	"cc": [
		"nigeltao@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"bsiegert@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Thank you for the review.\n\nhttp://codereview.appspot.com/5177047/diff/15008/src/pkg/image/tiff/compress.go\nFile src/pkg/image/tiff/compress.go (right):\n\nhttp://codereview.appspot.com/5177047/diff/15008/src/pkg/image/tiff/compress.go#newcode18\nsrc/pkg/image/tiff/compress.go:18: // unPackBits decodes the PackBits-compressed data in src and returns the\nOn 2011/10/12 09:59:54, nigeltao wrote:\n> \"unPackBits\" differs from the actual name \"unpackBits\".\n\nSorry, sloppy editing. Done.\n\nhttp://codereview.appspot.com/5177047/diff/15008/src/pkg/image/tiff/compress.go#newcode33\nsrc/pkg/image/tiff/compress.go:33: switch err {\nOn 2011/10/12 09:59:54, nigeltao wrote:\n> This looks unusual. I'd write:\n> if err != nil {\n>   if err == os.EOF {\n>     return dst, nil\n>   }\n>   return nil, err\n> }\n\nDone.\n\nhttp://codereview.appspot.com/5177047/diff/15008/src/pkg/image/tiff/compress.go#newcode44\nsrc/pkg/image/tiff/compress.go:44: n, err := br.Read(buf[:code+1])\nOn 2011/10/12 09:59:54, nigeltao wrote:\n> Use io.ReadFull.\n\nDone.\n\nhttp://codereview.appspot.com/5177047/diff/15008/src/pkg/image/tiff/compress.go#newcode45\nsrc/pkg/image/tiff/compress.go:45: if n > 0 {\nOn 2011/10/12 09:59:54, nigeltao wrote:\n> if err != nil {\n>   return nil, err\n> }\n> dst = append(dst, buf[:n]...)\n\nDone.\n\nhttp://codereview.appspot.com/5177047/diff/15008/src/pkg/image/tiff/compress.go#newcode54\nsrc/pkg/image/tiff/compress.go:54: return dst, err\nOn 2011/10/12 09:59:54, nigeltao wrote:\n> The idiom is that if you return a non-nil error, all other return values are\n> zero. Hence: \"return nil, err\".\n\nDone.\n\nhttp://codereview.appspot.com/5177047/diff/15008/src/pkg/image/tiff/reader_test.go\nFile src/pkg/image/tiff/reader_test.go (right):\n\nhttp://codereview.appspot.com/5177047/diff/15008/src/pkg/image/tiff/reader_test.go#newcode12\nsrc/pkg/image/tiff/reader_test.go:12: \"bytes\"\nOn 2011/10/12 09:59:54, nigeltao wrote:\n> Keep imports sorted.\n\nDone.\n\nhttp://codereview.appspot.com/5177047/diff/15008/src/pkg/image/tiff/reader_test.go#newcode46\nsrc/pkg/image/tiff/reader_test.go:46: buf, err := unpackBits(bytes.NewBufferString(u.compressed))\nOn 2011/10/12 09:59:54, nigeltao wrote:\n> Use a strings.NewReader.\n\nDone.\n\nhttp://codereview.appspot.com/5177047/diff/15008/src/pkg/image/tiff/reader_test.go#newcode79\nsrc/pkg/image/tiff/reader_test.go:79: img0, err := Decode(f)\nOn 2011/10/12 09:59:54, nigeltao wrote:\n> I would name the uncompressed image img0 and this one img1.\n\nDone.\n\nhttp://codereview.appspot.com/5177047/diff/15008/src/pkg/image/tiff/reader_test.go#newcode86\nsrc/pkg/image/tiff/reader_test.go:86: t.Fatalf(\"wrong image size: want %s, got %s\", b, img1.Bounds())\nOn 2011/10/12 09:59:54, nigeltao wrote:\n> Sorry, I meant \"%v\" instead of \"%s\".\n\nBut %s works and calls the String() method:\n\n--- FAIL: tiff.TestDecompress (0.00 seconds)\n\twrong image size: want (0,0)-(153,55), got (0,0)-(153,55)\nFAIL\n\n(this is after inverting the test temporarily, obviously.)",
			"disapproval": false,
			"date": "2011-10-12 16:09:49.827671",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"bsiegert@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/Makefile\nFile src/pkg/image/tiff/Makefile (right):\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/Makefile#newcode10\nsrc/pkg/image/tiff/Makefile:10: compress.go\\\nIf this file only speaks PackBits, and not other TIFF compression formats such as LZW, then I'd call the file packbits.go.\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/compress.go\nFile src/pkg/image/tiff/compress.go (right):\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/compress.go#newcode10\nsrc/pkg/image/tiff/compress.go:10: // uncompressed data.\nCan you also add a reference that specifies the file format? The Wikipedia article points to an old apple.com page, but that's currently down for me.\n\nAlso, Wikipedia gives this example input: FE AA 02 80 00 2A FD AA 03 80 00 2A 22 F7 AA. It might be worth having a simple packbits_test.go test.\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/compress.go#newcode11\nsrc/pkg/image/tiff/compress.go:11: func unpackBits(r io.Reader) (dst []byte) {\nThis function should return ([]byte, os.Error).\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/compress.go#newcode16\nsrc/pkg/image/tiff/compress.go:16: _, err := r.Read(buf[0:1])\nIf you're going to read a byte at a time, you should really sniff for io.ByteReader, and use bufio.NewReader if r doesn't have it.\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/compress.go#newcode20\nsrc/pkg/image/tiff/compress.go:20: code := int8(buf[0])\nI'd write:\nx := int(int8(buf[0]))\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/compress.go#newcode23\nsrc/pkg/image/tiff/compress.go:23: n, _ := r.Read(buf[0 : int(code)+1])\nRead can return fewer bytes than requested. You should use io.ReadFull.\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/compress.go#newcode25\nsrc/pkg/image/tiff/compress.go:25: dst = append(dst, buf[0:n]...)\nI'd s/0//.\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/compress.go#newcode30\nsrc/pkg/image/tiff/compress.go:30: // noop\nEverything under src/pkg/image spells it \"No-op.\"\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/compress.go#newcode36\nsrc/pkg/image/tiff/compress.go:36: dst = append(dst, buf[0])\nCalling append each time through the loop seems inefficient. Instead:\nn := 1-int(code)\nfor i, c := 1, buf[0]; i < n; i++ {\n  buf[i] = c\n}\ndst = append(dst, buf[:n])\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/reader_test.go\nFile src/pkg/image/tiff/reader_test.go (right):\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/reader_test.go#newcode34\nsrc/pkg/image/tiff/reader_test.go:34: var decompressTests = []string{\nI'd move this into TestDecompress:\n----\nfunc TestDecompress(t *testing.T) {\n  var testCases = []string {\n    \"bw-deflate.tiff\",\n    \"bw-packbits.tiff\",\n  }\n  for _, tc := range testCases {\n    etc.\n  }\n}\n----\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/reader_test.go#newcode39\nsrc/pkg/image/tiff/reader_test.go:39: // TestDecompress reads the same image with different compressions\nTestDecompress tests that decoding some TIFF images that use different compression formats result in the same pixel data.\n\nAlso, can we make the 0th image video-001-uncompressed.tiff?\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/reader_test.go#newcode42\nsrc/pkg/image/tiff/reader_test.go:42: var compareTo image.Image\nI'd call the two images img0 and img1, or just m0 and m1, instead of compareTo and img.\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/reader_test.go#newcode47\nsrc/pkg/image/tiff/reader_test.go:47: }\nAdd a \"defer f.Close()\" after this.\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/reader_test.go#newcode53\nsrc/pkg/image/tiff/reader_test.go:53: } else {\nAdd a \"continue\" above this line, drop the else, and most importantly, outdent the rest of this block.\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/reader_test.go#newcode61\nsrc/pkg/image/tiff/reader_test.go:61: t.Fatalf(\"wrong image size: want %d, %d, %d, %d; got %d, %d, %d, %d\", compareTo.Bounds().Min.X, compareTo.Bounds().Min.Y, compareTo.Bounds().Max.X, compareTo.Bounds().Max.Y, b.Min.X, b.Min.Y, b.Max.X, b.Max.Y)\nNo need for all this repetition. Just use \"%s\" and \"m0.Bounds()\" instead of \"%d, %d, %d, %d\" and \"compareTo.Bounds().Min.X, etc\".\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/reader_test.go#newcode68\nsrc/pkg/image/tiff/reader_test.go:68: t.Fatalf(\"pixel at (%d, %d) has wrong color: want %d, %d, %d, %d; got %d, %d, %d, %d\", x, y, rr, gg, bb, aa, r, g, b, a)\nAgain, you don't have to be so repetitive. I think you can do \"%v\" and \"c0\" instead of \"%d, %d, %d, %d\", \"rr, gg, bb, aa\", if you earlier do \"c0 := m0.At(x, y)\".",
			"disapproval": false,
			"date": "2011-10-10 03:26:20.863173",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"bsiegert@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-12 16:09:37.600139",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"bsiegert@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/Makefile\nFile src/pkg/image/tiff/Makefile (right):\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/Makefile#newcode10\nsrc/pkg/image/tiff/Makefile:10: compress.go\\\nOn 2011/10/10 03:26:20, nigeltao wrote:\n> If this file only speaks PackBits, and not other TIFF compression formats such\n> as LZW, then I'd call the file packbits.go.\n\nI want to add G3 decoding in a later CL so I prefer this name. If you want, I can name the file packbits.go and maybe rename it later. What do you think?\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/compress.go\nFile src/pkg/image/tiff/compress.go (right):\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/compress.go#newcode10\nsrc/pkg/image/tiff/compress.go:10: // uncompressed data.\nOn 2011/10/10 03:26:20, nigeltao wrote:\n> Can you also add a reference that specifies the file format? The Wikipedia\n> article points to an old http://apple.com page, but that's currently down for me.\n> \n> Also, Wikipedia gives this example input: FE AA 02 80 00 2A FD AA 03 80 00 2A 22\n> F7 AA. It might be worth having a simple packbits_test.go test.\n\nAdded a reference to the description in the TIFF spec. The test you mention is now in reader_test.go.\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/compress.go#newcode11\nsrc/pkg/image/tiff/compress.go:11: func unpackBits(r io.Reader) (dst []byte) {\nOn 2011/10/10 03:26:20, nigeltao wrote:\n> This function should return ([]byte, os.Error).\n\nDone.\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/compress.go#newcode16\nsrc/pkg/image/tiff/compress.go:16: _, err := r.Read(buf[0:1])\nOn 2011/10/10 03:26:20, nigeltao wrote:\n> If you're going to read a byte at a time, you should really sniff for\n> io.ByteReader, and use bufio.NewReader if r doesn't have it.\n\nDone.\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/compress.go#newcode20\nsrc/pkg/image/tiff/compress.go:20: code := int8(buf[0])\nOn 2011/10/10 03:26:20, nigeltao wrote:\n> I'd write:\n> x := int(int8(buf[0]))\n\nDone.\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/compress.go#newcode23\nsrc/pkg/image/tiff/compress.go:23: n, _ := r.Read(buf[0 : int(code)+1])\nOn 2011/10/10 03:26:20, nigeltao wrote:\n> Read can return fewer bytes than requested. You should use io.ReadFull.\n\nDone.\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/compress.go#newcode25\nsrc/pkg/image/tiff/compress.go:25: dst = append(dst, buf[0:n]...)\nOn 2011/10/10 03:26:20, nigeltao wrote:\n> I'd s/0//.\n\nDone.\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/compress.go#newcode30\nsrc/pkg/image/tiff/compress.go:30: // noop\nOn 2011/10/10 03:26:20, nigeltao wrote:\n> Everything under src/pkg/image spells it \"No-op.\"\n\nDone.\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/compress.go#newcode36\nsrc/pkg/image/tiff/compress.go:36: dst = append(dst, buf[0])\nOn 2011/10/10 03:26:20, nigeltao wrote:\n> Calling append each time through the loop seems inefficient. Instead:\n> n := 1-int(code)\n> for i, c := 1, buf[0]; i < n; i++ {\n>   buf[i] = c\n> }\n> dst = append(dst, buf[:n])\n\nDone.\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/reader_test.go\nFile src/pkg/image/tiff/reader_test.go (right):\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/reader_test.go#newcode34\nsrc/pkg/image/tiff/reader_test.go:34: var decompressTests = []string{\nOn 2011/10/10 03:26:20, nigeltao wrote:\n> I'd move this into TestDecompress:\n> ----\n> func TestDecompress(t *testing.T) {\n>   var testCases = []string {\n>     \"bw-deflate.tiff\",\n>     \"bw-packbits.tiff\",\n>   }\n>   for _, tc := range testCases {\n>     etc.\n>   }\n> }\n> ----\n\nDone.\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/reader_test.go#newcode39\nsrc/pkg/image/tiff/reader_test.go:39: // TestDecompress reads the same image with different compressions\nOn 2011/10/10 03:26:20, nigeltao wrote:\n> TestDecompress tests that decoding some TIFF images that use different\n> compression formats result in the same pixel data.\n\nDone.\n\n> Also, can we make the 0th image video-001-uncompressed.tiff?\n\nNo. The images are bilevel (b/w) because PackBits works only on greyscale images, and G3 (to be done) works only on bilevel images.\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/reader_test.go#newcode42\nsrc/pkg/image/tiff/reader_test.go:42: var compareTo image.Image\nOn 2011/10/10 03:26:20, nigeltao wrote:\n> I'd call the two images img0 and img1, or just m0 and m1, instead of compareTo\n> and img.\n\nDone.\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/reader_test.go#newcode47\nsrc/pkg/image/tiff/reader_test.go:47: }\nOn 2011/10/10 03:26:20, nigeltao wrote:\n> Add a \"defer f.Close()\" after this.\n\nDone.\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/reader_test.go#newcode53\nsrc/pkg/image/tiff/reader_test.go:53: } else {\nOn 2011/10/10 03:26:20, nigeltao wrote:\n> Add a \"continue\" above this line, drop the else, and most importantly, outdent\n> the rest of this block.\n\nDone.\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/reader_test.go#newcode61\nsrc/pkg/image/tiff/reader_test.go:61: t.Fatalf(\"wrong image size: want %d, %d, %d, %d; got %d, %d, %d, %d\", compareTo.Bounds().Min.X, compareTo.Bounds().Min.Y, compareTo.Bounds().Max.X, compareTo.Bounds().Max.Y, b.Min.X, b.Min.Y, b.Max.X, b.Max.Y)\nOn 2011/10/10 03:26:20, nigeltao wrote:\n> No need for all this repetition. Just use \"%s\" and \"m0.Bounds()\" instead of \"%d,\n> %d, %d, %d\" and \"compareTo.Bounds().Min.X, etc\".\n\nVery nice! Done.\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/reader_test.go#newcode68\nsrc/pkg/image/tiff/reader_test.go:68: t.Fatalf(\"pixel at (%d, %d) has wrong color: want %d, %d, %d, %d; got %d, %d, %d, %d\", x, y, rr, gg, bb, aa, r, g, b, a)\nOn 2011/10/10 03:26:20, nigeltao wrote:\n> Again, you don't have to be so repetitive. I think you can do \"%v\" and \"c0\"\n> instead of \"%d, %d, %d, %d\", \"rr, gg, bb, aa\", if you earlier do \"c0 := m0.At(x,\n> y)\".\n\nDone.",
			"disapproval": false,
			"date": "2011-10-11 21:09:33.396200",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"bsiegert@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-09 20:34:46.161478",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"bsiegert@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-11 21:09:02.465624",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"bsiegert@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/Makefile\nFile src/pkg/image/tiff/Makefile (right):\n\nhttp://codereview.appspot.com/5177047/diff/12002/src/pkg/image/tiff/Makefile#newcode10\nsrc/pkg/image/tiff/Makefile:10: compress.go\\\nOn 2011/10/11 21:09:33, bsiegert wrote:\n> On 2011/10/10 03:26:20, nigeltao wrote:\n> > If this file only speaks PackBits, and not other TIFF compression formats such\n> > as LZW, then I'd call the file packbits.go.\n> \n> I want to add G3 decoding in a later CL so I prefer this name. If you want, I\n> can name the file packbits.go and maybe rename it later. What do you think?\n\nOK, compress.go is fine.\n\nhttp://codereview.appspot.com/5177047/diff/15008/src/pkg/image/tiff/compress.go\nFile src/pkg/image/tiff/compress.go (right):\n\nhttp://codereview.appspot.com/5177047/diff/15008/src/pkg/image/tiff/compress.go#newcode18\nsrc/pkg/image/tiff/compress.go:18: // unPackBits decodes the PackBits-compressed data in src and returns the\n\"unPackBits\" differs from the actual name \"unpackBits\".\n\nhttp://codereview.appspot.com/5177047/diff/15008/src/pkg/image/tiff/compress.go#newcode33\nsrc/pkg/image/tiff/compress.go:33: switch err {\nThis looks unusual. I'd write:\nif err != nil {\n  if err == os.EOF {\n    return dst, nil\n  }\n  return nil, err\n}\n\nhttp://codereview.appspot.com/5177047/diff/15008/src/pkg/image/tiff/compress.go#newcode44\nsrc/pkg/image/tiff/compress.go:44: n, err := br.Read(buf[:code+1])\nUse io.ReadFull.\n\nhttp://codereview.appspot.com/5177047/diff/15008/src/pkg/image/tiff/compress.go#newcode45\nsrc/pkg/image/tiff/compress.go:45: if n > 0 {\nif err != nil {\n  return nil, err\n}\ndst = append(dst, buf[:n]...)\n\nhttp://codereview.appspot.com/5177047/diff/15008/src/pkg/image/tiff/compress.go#newcode54\nsrc/pkg/image/tiff/compress.go:54: return dst, err\nThe idiom is that if you return a non-nil error, all other return values are zero. Hence: \"return nil, err\".\n\nhttp://codereview.appspot.com/5177047/diff/15008/src/pkg/image/tiff/reader_test.go\nFile src/pkg/image/tiff/reader_test.go (right):\n\nhttp://codereview.appspot.com/5177047/diff/15008/src/pkg/image/tiff/reader_test.go#newcode12\nsrc/pkg/image/tiff/reader_test.go:12: \"bytes\"\nKeep imports sorted.\n\nhttp://codereview.appspot.com/5177047/diff/15008/src/pkg/image/tiff/reader_test.go#newcode46\nsrc/pkg/image/tiff/reader_test.go:46: buf, err := unpackBits(bytes.NewBufferString(u.compressed))\nUse a strings.NewReader.\n\nhttp://codereview.appspot.com/5177047/diff/15008/src/pkg/image/tiff/reader_test.go#newcode79\nsrc/pkg/image/tiff/reader_test.go:79: img0, err := Decode(f)\nI would name the uncompressed image img0 and this one img1.\n\nhttp://codereview.appspot.com/5177047/diff/15008/src/pkg/image/tiff/reader_test.go#newcode86\nsrc/pkg/image/tiff/reader_test.go:86: t.Fatalf(\"wrong image size: want %s, got %s\", b, img1.Bounds())\nSorry, I meant \"%v\" instead of \"%s\".",
			"disapproval": false,
			"date": "2011-10-12 09:59:54.121614",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"bsiegert@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM.",
			"disapproval": false,
			"date": "2011-10-13 02:29:20.158752",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"bsiegert@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=1c95f8ab57bc ***\n\nimage/tiff: Implement PackBits decoding.\n\nThe decompression routine is in its own file because\nG3 encoding (which is more complicated) will be put\nthere.\n\nR=nigeltao\nCC=golang-dev\nhttp://codereview.appspot.com/5177047\n\nCommitter: Nigel Tao <nigeltao@golang.org>",
			"disapproval": false,
			"date": "2011-10-13 02:31:36.748652",
			"approval": false
		}
	],
	"owner_email": "bsiegert@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "bsiegert",
	"subject": "code review 5177047: image/tiff: Implement PackBits decoding.",
	"created": "2011-10-04 20:08:05.198121",
	"patchsets": [
		1,
		2001,
		5001,
		10001,
		12002,
		15008,
		11007
	],
	"modified": "2011-10-13 17:14:31.948987",
	"closed": true,
	"issue": 5177047
}