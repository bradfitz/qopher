{
	"description": "net: make use of the kernel state to listen on TCP, Unix",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"minux.ma@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=518f09c59498 ***\n\nnet: make use of the kernel state to listen on TCP, Unix\n\nR=golang-dev, dave, minux.ma\nCC=golang-dev\nhttp://codereview.appspot.com/5545044",
			"disapproval": false,
			"date": "2012-01-14 04:42:24.233212",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Is it possible to use the SysctlUint32 facility on Linux to get the value of net.core.somaxconn and avoid having to read and parse the file from /proc?\n\nOn 2012/01/13 06:25:58, mikioh wrote:\n> Hello mailto:golang-dev@googlegroups.com (cc: mailto:golang-dev@googlegroups.com),\n> \n> I'd like you to review this change to\n> https://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-13 06:39:52.795297",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jan 13, 2012 at 2:54 PM, Mikio Hara <mikioh.mikioh@gmail.com> wrote:\n\n> Are you saying that you'd prefer sysctl than proc filesystem\n> because of ???\n>\n> FWIW, We already rely on proc filesystem for  fetching the\n> multicast RIB in the Linux kernel, and package syscall\n> doesn't have Sysctl, SysctlUint32 funcs yet.\n>\nIMO, we should write a syscall.SysctlUint32 which parse the corresponding\n/proc file.\n",
			"disapproval": false,
			"date": "2012-01-13 07:05:08.705088",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-13 06:25:58.491532",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jan 13, 2012 at 3:14 PM, Mikio Hara <mikioh.mikioh@gmail.com> wrote:\n\n> On Fri, Jan 13, 2012 at 4:04 PM, minux <minux.ma@gmail.com> wrote:\n> > IMO, we should write a syscall.SysctlUint32 which parse the corresponding\n> > /proc file.\n> Or might be funcs in the package os/sysctl or os/registry.\n>\nIMO, package os shouldn't contain this OS specific API, so this should be\nin syscall.\n(Also consider the consistency of API naming/functionality.)\n\n> I agree with you, but not now. ;)\n>\nOK. I can provide a separate CL for this.\n",
			"disapproval": false,
			"date": "2012-01-13 10:28:46.365877",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Are you saying that you'd prefer sysctl than proc filesystem\nbecause of ???\n\nFWIW, We already rely on proc filesystem for  fetching the\nmulticast RIB in the Linux kernel, and package syscall\ndoesn't have Sysctl, SysctlUint32 funcs yet.\n\nOn Fri, Jan 13, 2012 at 3:39 PM,  <dave@cheney.net> wrote:\n> Is it possible to use the SysctlUint32 facility on Linux to get the\n> value of net.core.somaxconn and avoid having to read and parse the file\n> from /proc?\n>\n> On 2012/01/13 06:25:58, mikioh wrote:\n>>\n>> Hello mailto:golang-dev@googlegroups.com (cc:\n>\n> mailto:golang-dev@googlegroups.com),\n>\n>\n>> I'd like you to review this change to\n>> https://go.googlecode.com/hg/\n>\n>\n>\n>\n> http://codereview.appspot.com/5545044/\n",
			"disapproval": false,
			"date": "2012-01-13 06:54:26.403502",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "That is sad that sysctl(2) is going away, such is life. \n\nNever mind.\n\nThe rest of the patch LGTM. \n\nSent from my iPhone\n\nOn 13/01/2012, at 17:57, minux <minux.ma@gmail.com> wrote:\n\n> \n> On Fri, Jan 13, 2012 at 2:39 PM, <dave@cheney.net> wrote:\n> Is it possible to use the SysctlUint32 facility on Linux to get the\n> value of net.core.somaxconn and avoid having to read and parse the file\n> from /proc?\n> The sysctl(1) utility also read and parse the file /proc/sys/net/core/somaxconn\n> on Linux.\n> \n> Although Linux does support the sysctl syscall, it is scheduled to be removed.\n> from: Documentation/feature-removal-schedule.txt\n> What:   sys_sysctl\n> When:   September 2010\n> Option: CONFIG_SYSCTL_SYSCALL\n> Why:    The same information is available in a more convenient from\n>         /proc/sys, and none of the sysctl variables appear to be\n>         important performance wise.\n> \n>         Binary sysctls are a long standing source of subtle kernel\n>         bugs and security issues.\n> \n",
			"disapproval": false,
			"date": "2012-01-13 08:22:30.430061",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jan 13, 2012 at 2:39 PM, <dave@cheney.net> wrote:\n\n> Is it possible to use the SysctlUint32 facility on Linux to get the\n> value of net.core.somaxconn and avoid having to read and parse the file\n> from /proc?\n>\nThe sysctl(1) utility also read and parse the file\n/proc/sys/net/core/somaxconn\non Linux.\n\nAlthough Linux does support the sysctl syscall, it is scheduled to be\nremoved.\nfrom: Documentation/feature-removal-schedule.txt\n\n> What:   sys_sysctl\n> When:   September 2010\n> Option: CONFIG_SYSCTL_SYSCALL\n> Why:    The same information is available in a more convenient from\n>         /proc/sys, and none of the sysctl variables appear to be\n>         important performance wise.\n>\n>         Binary sysctls are a long standing source of subtle kernel\n>         bugs and security issues.\n>\n",
			"disapproval": false,
			"date": "2012-01-13 06:57:48.534521",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jan 13, 2012 at 4:04 PM, minux <minux.ma@gmail.com> wrote:\n\n> IMO, we should write a syscall.SysctlUint32 which parse the corresponding\n> /proc file.\n\nOr might be funcs in the package os/sysctl or os/registry.\nI agree with you, but not now. ;)\n",
			"disapproval": false,
			"date": "2012-01-13 07:14:41.792326",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "anyone else?\n\nOn Fri, Jan 13, 2012 at 5:22 PM, Dave Cheney <dave@cheney.net> wrote:\n> That is sad that sysctl(2) is going away, such is life.\n>\n> Never mind.\n>\n> The rest of the patch LGTM.\n>\n> Sent from my iPhone\n>\n> On 13/01/2012, at 17:57, minux <minux.ma@gmail.com> wrote:\n>\n>\n> On Fri, Jan 13, 2012 at 2:39 PM, <dave@cheney.net> wrote:\n>>\n>> Is it possible to use the SysctlUint32 facility on Linux to get the\n>> value of net.core.somaxconn and avoid having to read and parse the file\n>> from /proc?\n>\n> The sysctl(1) utility also read and parse the file\n> /proc/sys/net/core/somaxconn\n> on Linux.\n>\n> Although Linux does support the sysctl syscall, it is scheduled to be\n> removed.\n> from: Documentation/feature-removal-schedule.txt\n>>\n>> What:\u00a0\u00a0 sys_sysctl\n>> When:\u00a0\u00a0 September 2010\n>> Option: CONFIG_SYSCTL_SYSCALL\n>> Why:\u00a0\u00a0\u00a0 The same information is available in a more convenient from\n>> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 /proc/sys, and none of the sysctl variables appear to be\n>> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 important performance wise.\n>>\n>> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Binary sysctls are a long standing source of subtle kernel\n>> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 bugs and security issues.\n>\n>\n",
			"disapproval": false,
			"date": "2012-01-13 22:25:52.778887",
			"approval": false
		}
	],
	"owner_email": "mikioh.mikioh@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mikio",
	"subject": "code review 5545044: net: make use of the kernel state to listen on TCP, Unix",
	"created": "2012-01-13 06:25:08.184034",
	"patchsets": [
		4001,
		7002
	],
	"modified": "2012-01-14 04:42:25.816907",
	"closed": true,
	"issue": 5545044
}