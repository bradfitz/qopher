{
	"description": "cmd/go: use path/filepath package not strings\n\nWindows paths are case insensitive.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"dsymonds@golang.org",
		"rsc@golang.org",
		"bsiegert@gmail.com"
	],
	"messages": [
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jan 16, 2012 at 12:43 PM,  <alex.brainman@gmail.com> wrote:\n\n> Are you saying I should drop this CL?\n\nNo. This CL looks fine and fits with the strategy to date. I'm just\nraising it because this CL reminded me of it.\n",
			"disapproval": false,
			"date": "2012-01-16 01:51:58.339015",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jan 16, 2012 at 21:40,  <alex.brainman@gmail.com> wrote:\n> Should I drop this change?\n\nYes, please.\n\nHowever, if you can find a situation where\nthe handling of relative paths by the go tool\ndoes not work due to case concerns, please\nfile an issue so that we can work out an API.\n\nFor example, it could well be that\n\nexport GOROOT=c:/go\nc:\ncd \\go\\src\\pkg\\fmt\ngo test\n\nwill fail.  That's something we should fix.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-17 21:55:11.160196",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jan 16, 2012 at 12:29 PM,  <alex.brainman@gmail.com> wrote:\n\n> Windows paths are case insensitive.\n\nIt occurs to me that this isn't particular to Windows. Quite a few\ndifferent filesystems are case insensitive (e.g. HFS+ on Mac), and I\nbelieve even NTFS on Windows can be in a case sensitive mode. Our\nstrategy to date has been to ignore all these things, or at least\ntreat them as purely based on $GOOS.\n",
			"disapproval": false,
			"date": "2012-01-16 01:37:58.829420",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I understand that there is serious potential for confusion here,\nbut case semantics are a property of the specific file system,\nnot a property of the operating system.  It is possible to mount\ncase-sensitive file systems in both Windows and OS X, and\nit is possible to mount case-insensitive file systems in Linux\nand the BSDs.  So these routines cannot be made correct in\nall cases.\n\nI think it makes more sense to stick with the current rules:\nif you do a directory listing and the ending is not .go, then\nit's not a Go file.  If the ending is not _test.go, then it's not\na test file.  And so on.  I think if this does confuse people\nthen they will run ls or dir or 'start .' and figure it out.\n\nI am not sure I understand your worry about GOPATH and GOROOT.\nThose are giving names of directories, and then the tools\npass those names on to the file system.  If you're on a\ncase-insensitive file system, then c:\\go and C:\\Go are treated\nidentically without any effort on Go's part.  It doesn't matter\nwhich of those you have used when you run 'go install net/http'.\nIt does matter for 'go install .': the entry from $GOPATH needs\nto be spelled the same way that the operating system spells the\ndirectory name.  This is an issue even on Unix, because of symlinks.\nThere, we call filepath.EvalSymlinks to find the 'canonical' path.\nIt might be that we should rename that function and implement it\non Windows too.  But that's the only case where I can see this\ncausing a real problem, and the function calls are there.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-17 02:05:08.397508",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/17 02:05:08, rsc wrote:\n> I understand that there is serious potential for confusion here,\n> but case semantics are a property of the specific file system,\n> not a property of the operating system. ...\n\nOn Windows it is one and the same. It is NTFS. No one uses ext2 or something else on Windows. Even when you mount \"unix\" file system (via samba or something), it becomes no-case.\n\n> It does matter for 'go install .': the entry from $GOPATH needs\n> to be spelled the same way that the operating system spells the\n> directory name. This is an issue even on Unix, because of symlinks.\n> There, we call filepath.EvalSymlinks to find the 'canonical' path.\n> It might be that we should rename that function and implement it\n> on Windows too. ...\n\nPerhaps, we should do that.\n\n> ... But that's the only case where I can see this\n> causing a real problem, and the function calls are there.\n\nI am not convinced one way or other, but prepared to delay it.\n\nShould I drop this change?\n\nAlex",
			"disapproval": false,
			"date": "2012-01-17 02:40:23.388378",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-16 01:29:43.526447",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jan 17, 2012 at 02:53,  <alex.brainman@gmail.com> wrote:\n> I am even more concerned about GOROOT and GOPATH. Today we install our\n> Go tree into \"c:\\Go\". One day, our installation procedure might change\n> it to \"c:\\go\" (which is the same thing on Windows) and GOROOT and GOPATH\n> will have to change. All our users need to have their GOROOT and GOPATH\n> to be case-sensitive, while all others path related environment\n> variables (PATH and others) are not. Also dirve letter \"c\" in \"c:\\Go\",\n> either case \"c:\\Go\" or \"C:\\Go\" should work. Some tools might emit drive\n> letter as \"c:\", others like \"C:\".\n\nI have been bitten by this in the past. My Go tree is in d:\\go under\nWindows. When I accidentally use \"cd /d/Go/src\" in the MinGW shell\nbefore running \"all.bash\", it complains that I am in the wrong\ndirectory.\n\n--Benny.\n",
			"disapproval": false,
			"date": "2012-01-17 13:23:50.646741",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/16 01:37:58, dsymonds wrote:\n> On Mon, Jan 16, 2012 at 12:29 PM,  <mailto:alex.brainman@gmail.com> wrote:\n> \n> ... I\n> believe even NTFS on Windows can be in a case sensitive mode. ...\n\nNews to me. All Windows PCs I have used in my life ignore case in paths.\n\n> ... Our\n> strategy to date has been to ignore all these things, ...\n\nAre you saying I should drop this CL?\n\nAlex",
			"disapproval": false,
			"date": "2012-01-16 01:43:39.183145",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "How did this come up?\n\nEven the case-insensitive file systems today are case-preserving;\nthe current code becomes incorrect only if people are writing files\nnamed FOO.GO instead of foo.go.  Honestly, that doesn't bother\nme very much.  But maybe you have a different case in mind that\nis more likely?\n\nThanks.\nRuss\n",
			"disapproval": false,
			"date": "2012-01-16 17:02:11.808877",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Old man (me) rambling ... <g>:\n\n> Even the case-insensitive file systems today are case-preserving ...\n\nWindows file systems are certainly preserving case.\n\n> ... if people are writing files\n> named FOO.GO instead of foo.go. Honestly, that doesn't bother\n> me very much. ...\n\nWell, FOO.GO and foo.go refer to the same file on Windows.\n\nIf I create C:\\a\\code\\src\\foo\\Foo_Test.go file, \"go test\" says:\n\nC:\\a\\code\\src\\foo>go test\n?       foo     [no test files]\n\nI think, if I am making a mistake, at least, \"go test\" should point it out to me, not just silently continue. As a bare minimum this behavior should be clearly documented.\n\nI am even more concerned about GOROOT and GOPATH. Today we install our Go tree into \"c:\\Go\". One day, our installation procedure might change it to \"c:\\go\" (which is the same thing on Windows) and GOROOT and GOPATH will have to change. All our users need to have their GOROOT and GOPATH to be case-sensitive, while all others path related environment variables (PATH and others) are not. Also dirve letter \"c\" in \"c:\\Go\", either case \"c:\\Go\" or \"C:\\Go\" should work. Some tools might emit drive letter as \"c:\", others like \"C:\".\n\nI do not have particular scenarios of failure, I haven't use go tool enough. Perhaps, we should just wait and see.\n\nAlex",
			"disapproval": false,
			"date": "2012-01-17 01:53:31.963724",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"bsiegert@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/17 21:55:11, rsc wrote:\n> \n> ..., please\n> file an issue so that we can work out an API.\n> \n\nCool. The only thing I can see a problem from this CL is running\n\ngo build c:main.go\n\ndue to\n\ndiff -r f63e838fc121 src/cmd/go/build.go\n--- a/src/cmd/go/build.go\tSun Jan 15 10:41:16 2012 -0500\n+++ b/src/cmd/go/build.go\tWed Jan 18 14:54:06 2012 +1100\n@@ -248,7 +248,7 @@\n func goFilesPackage(gofiles []string, target string) *Package {\n \t// TODO: Remove this restriction.\n \tfor _, f := range gofiles {\n-\t\tif !strings.HasSuffix(f, \".go\") || strings.Contains(f, \"/\") || strings.Contains(f, string(filepath.Separator)) {\n+\t\tif !filepath.HasSuffix(f, \".go\") || strings.Contains(f, \"/\") || strings.Contains(f, string(filepath.Separator)) || filepath.VolumeName(f) != \"\" {\n \t\t\tfatalf(\"named files must be in current directory and .go files\")\n \t\t}\n \t}\n\nbut this fragment of code is marked as \"// TODO: Remove this restriction.\". Do you want me to fix it? Or will it go away soon anyway?\n\nAlex",
			"disapproval": false,
			"date": "2012-01-18 03:59:09.223614",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jan 17, 2012 at 22:59,  <alex.brainman@gmail.com> wrote:\n> but this fragment of code is marked as \"// TODO: Remove this\n> restriction.\". Do you want me to fix it? Or will it go away soon anyway?\n\nI'll fix it soon.  I'm not sure how I want to fix it yet,\nbut it will work the same on Windows and off.\n\nThanks.\nRuss\n",
			"disapproval": false,
			"date": "2012-01-18 04:00:04.407664",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"bsiegert@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-01-18 04:01:24.267947",
			"approval": false
		}
	],
	"owner_email": "alex.brainman@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "brainman",
	"subject": "code review 5541065: cmd/go: use path/filepath package not strings",
	"created": "2012-01-16 01:26:03.117452",
	"patchsets": [
		1,
		2001,
		4001
	],
	"modified": "2012-01-18 04:01:26.445361",
	"closed": true,
	"issue": 5541065
}