{
	"description": "math/big: add examples for Rat and Int's SetString and Scan methods",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"rsc@golang.org",
		"r@google.com",
		"gri@golang.org",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 13 January 2012 09:50, Russ Cox <rsc@golang.org> wrote:\n> Why use such ridiculous numbers?\n\nHappy to use different ones. Got any suggestions?\n",
			"disapproval": false,
			"date": "2012-01-12 23:01:45.538120",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2012-01-12 22:47:33.930213",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Jan 12, 2012, at 3:01 PM, Andrew Gerrand wrote:\n\n> On 13 January 2012 09:50, Russ Cox <rsc@golang.org> wrote:\n>> Why use such ridiculous numbers?\n> \n> Happy to use different ones. Got any suggestions?\n\n12\n123\n1234\n12345\n\n",
			"disapproval": false,
			"date": "2012-01-12 23:02:40.110139",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn Thu, Jan 12, 2012 at 2:47 PM, <adg@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg\n>\n>\n> Description:\n> math/big: add examples for Int's SetString and Scan methods\n>\n> Please review this at http://codereview.appspot.com/**5543047/<http://codereview.appspot.com/5543047/>\n>\n> Affected files:\n>  A src/pkg/math/big/example_test.**go\n>\n>\n> Index: src/pkg/math/big/example_test.**go\n> ==============================**==============================**=======\n> new file mode 100644\n> --- /dev/null\n> +++ b/src/pkg/math/big/example_**test.go\n> @@ -0,0 +1,26 @@\n> +// Copyright 2012 The Go Authors. All rights reserved.\n> +// Use of this source code is governed by a BSD-style\n> +// license that can be found in the LICENSE file.\n> +\n> +package big_test\n> +\n> +import (\n> +       \"math/big\"\n> +       \"fmt\"\n> +)\n> +\n> +// 692875643197834568615209724987**62589673589754982742 <nil>\n> +func ExampleInt_Scan() {\n> +       // The Scan function is rarely used directly;\n> +       // the fmt package recognizes it as an implementation of\n> fmt.Scanner.\n> +       i := new(big.Int)\n> +       _, err := fmt.Sscan(\"**692875643197834568615209724987**62589673589754982742\",\n> i)\n> +       fmt.Println(i, err)\n> +}\n> +\n> +// 232455871919350069994520617996**7386\n> +func ExampleInt_SetString() {\n> +       i := new(big.Int)\n> +       i.SetString(\"**712340345050202340560350352054**2030632\", 8) //\n> octal\n> +       fmt.Println(i)\n> +}\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-01-12 22:49:03.292077",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Why use such ridiculous numbers?\n",
			"disapproval": false,
			"date": "2012-01-12 22:50:00.993785",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, rsc@golang.org, r@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-12 23:04:26.390296",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5543047/diff/4003/src/pkg/math/big/example_test.go\nFile src/pkg/math/big/example_test.go (right):\n\nhttp://codereview.appspot.com/5543047/diff/4003/src/pkg/math/big/example_test.go#newcode14\nsrc/pkg/math/big/example_test.go:14: // Calculate the square root of x using Newton's method.\nI don't think this is a good example because at the end you get a small-precision float. Why not use float32?\n\nThis should be an example where rational numbers matter.",
			"disapproval": false,
			"date": "2012-01-12 23:09:09.689175",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Also added an example for Rat.\n",
			"disapproval": false,
			"date": "2012-01-12 23:05:57.998598",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, rsc@golang.org, r@google.com, gri@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-24 05:33:59.148841",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but wait for others\n\nhttp://codereview.appspot.com/5543047/diff/8001/src/pkg/math/big/example_test.go\nFile src/pkg/math/big/example_test.go (right):\n\nhttp://codereview.appspot.com/5543047/diff/8001/src/pkg/math/big/example_test.go#newcode32\nsrc/pkg/math/big/example_test.go:32: fmt.Println(r, err)\nuse idiomatic code\n\nif err == nil {\n  fmt.Println(\"error scanning value:\", err)\n} else {\n  fmt.Println(r)\n}\n\nhttp://codereview.appspot.com/5543047/diff/8001/src/pkg/math/big/example_test.go#newcode41\nsrc/pkg/math/big/example_test.go:41: fmt.Println(i, err)\nditto",
			"disapproval": false,
			"date": "2012-01-24 15:44:17.934412",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5543047/diff/8001/src/pkg/math/big/example_test.go\nFile src/pkg/math/big/example_test.go (right):\n\nhttp://codereview.appspot.com/5543047/diff/8001/src/pkg/math/big/example_test.go#newcode31\nsrc/pkg/math/big/example_test.go:31: _, err := fmt.Sscan(\"1.5000\", r)\nmake this 3.142 and then the printed fraction should be 355/113 like above. more interesting than 1.5",
			"disapproval": false,
			"date": "2012-01-24 17:33:16.615451",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"gri@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=60013c96035b ***\n\nmath/big: add examples for Rat and Int's SetString and Scan methods\n\nR=golang-dev, bradfitz, rsc, r, gri, r\nCC=golang-dev\nhttp://codereview.appspot.com/5543047\n\nhttp://codereview.appspot.com/5543047/diff/8001/src/pkg/math/big/example_test.go\nFile src/pkg/math/big/example_test.go (right):\n\nhttp://codereview.appspot.com/5543047/diff/8001/src/pkg/math/big/example_test.go#newcode31\nsrc/pkg/math/big/example_test.go:31: _, err := fmt.Sscan(\"1.5000\", r)\nOn 2012/01/24 17:33:17, gri wrote:\n> make this 3.142 and then the printed fraction should be 355/113 like above. more\n> interesting than 1.5\n\n355/133 isn't exactly 3.142, so that won't work.\n\nhttp://codereview.appspot.com/5543047/diff/8001/src/pkg/math/big/example_test.go#newcode32\nsrc/pkg/math/big/example_test.go:32: fmt.Println(r, err)\nOn 2012/01/24 15:44:18, r wrote:\n> use idiomatic code\n> \n> if err == nil {\n>   fmt.Println(\"error scanning value:\", err)\n> } else {\n>   fmt.Println(r)\n> }\n\nDone.\n\nhttp://codereview.appspot.com/5543047/diff/8001/src/pkg/math/big/example_test.go#newcode41\nsrc/pkg/math/big/example_test.go:41: fmt.Println(i, err)\nOn 2012/01/24 15:44:18, r wrote:\n> ditto\n\nDone.",
			"disapproval": false,
			"date": "2012-01-24 23:29:55.167941",
			"approval": false
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 5543047: math/big: add examples for Rat and Int's SetString and ...",
	"created": "2012-01-12 22:47:24.750339",
	"patchsets": [
		1,
		5001,
		4003,
		8001,
		12002
	],
	"modified": "2012-01-24 23:29:57.945077",
	"closed": true,
	"issue": 5543047
}