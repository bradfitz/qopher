{
	"description": "net/url: Add Port to the Url struct.\r\n\r\nRFC 3986 specifies a way to include the port.  This change adds\r\nparsing and serializing of ports separate from the Host field.\r\n\r\nNote that this change adds some IPv6 specific tests that are not\r\nspecific to port parsing because my first attempts at doing\r\nsomething trivial caused net/http tests to fail as they relied on\r\nIPv6 URL parsing that was not directly tested here.  I also\r\nincluded a test for parsing out the port along with an IPv6\r\naddress.\r\n\r\nIt seems that a few users of the url parser assumed the port\r\nnumber would be in the host.  I've updated these to treat them\r\nseparately.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"dustin@spy.net",
		"gustavo@niemeyer.net",
		"rsc@golang.org",
		"adg@golang.org",
		"dsymonds@golang.org"
	],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Gustavo?\n\n\nOn Sat, Jan 14, 2012 at 10:28 AM, Dustin Sallings <dustin@spy.net> wrote:\n\n>\n> On Jan 14, 2012, at 9:19 AM, Brad Fitzpatrick wrote:\n>\n> The URL struct is being overhauled and is about to land.  Search this list\n> for \"5498076\".\n>\n>\n> Interestingly, this doesn't solve the host:port problem.  What's the\n> appropriate action here?  Should I do this again after that change, or\n> should I suggest that the port be pulled out in 5498076?\n>\n> Do you agree that it seems important not to consider the port as being\n> part of the hostname?  They are called out separately in the RFC and they\n> are conceptually separate, even if it is easier to keep them together for\n> things like net.Dial.\n>\n> --\n> dustin sallings\n>\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-01-14 18:33:01.170600",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Please leave that with me. I'll integrate a suggested change within\n> the existing refactoring that renames Host to Addr and see what people\n> think.\n\nNice. Let's move forward with this and see how others feel then.\n\n> Sounds good to me. \u00a0I'm more offended by calling it Host than the lack of\n> Port. \u00a0Addr seems more in-line with what the rest of the stuff is doing.\n>\n> That said, would it be sensible to have a \"func (u *URL) Host() string\" and\n> similar Port() ?\n\nI'd be fine with that, but net.SplitHostPort(url.Addr) doesn't bother me either.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-01-15 09:10:20.682012",
			"approval": false
		},
		{
			"sender": "dustin@spy.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Jan 15, 2012, at 10:50 AM, Russ Cox wrote:\n\n> Let's leave the field named Host, please.\n\n\n\tI realize I have a small voice here, but I find this to be confusing as the Host field of the URL struct doesn't mean the same thing that the \"host\" field definition in section 3.2.2 [0] suggests it would be.  It is instead part of what would be the authority field[1] separate from the Port.\n\n\tThis is the confusion I ran into when trying to adapt an API that used a host and a port to us a URL and found I had to extract the host *from* the u.Host which sometimes, but not always has a port along with it.  I don't think I'm going to be the last person to be confused by this.\n\n\n[0]: http://tools.ietf.org/html/rfc3986#section-3.2.2\n[1]: This reads as ``authority   = [ userinfo \"@\" ] host [ \":\" port ]''\n\n-- \ndustin sallings\n\n\n\n",
			"disapproval": false,
			"date": "2012-01-15 19:02:18.425121",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 16 January 2012 09:42, Gustavo Niemeyer <gustavo@niemeyer.net> wrote:\n>> There are many RFCs but there is only one Go standard library. It's\n>> more important that Go be internally consistent than (the impossible\n>> task of being) consistent with many differing sources.\n>\n> It feels like the suggestion of naming it as Addr rather than Host\n> improves consistency both with the RFC and within the Go library\n> itself.\n\nYou're right. For some reason I had it in my mind that the proposed\nchange was to HostPort, which is obviously terrible.\n\nI'm with rsc, though, I don't think that s/Host/Addr/ brings enough\nbenefit to be worth the churn.\n\nAndrew\n",
			"disapproval": false,
			"date": "2012-01-15 22:48:38.502596",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> There are many RFCs but there is only one Go standard library. It's\n> more important that Go be internally consistent than (the impossible\n> task of being) consistent with many differing sources.\n\nIt feels like the suggestion of naming it as Addr rather than Host\nimproves consistency both with the RFC and within the Go library\nitself.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-01-15 22:42:41.628311",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jan 16, 2012 at 9:48 AM, Andrew Gerrand <adg@golang.org> wrote:\n\n> I'm with rsc, though, I don't think that s/Host/Addr/ brings enough\n> benefit to be worth the churn.\n\nWe're already churning URL substantially, and it'll require a gofix\nmodule. I don't understand the objection to making this one small\nadditional change to clean up the API that has tripped up at least one\nperson.\n\n\nDave.\n",
			"disapproval": false,
			"date": "2012-01-15 22:55:10.041711",
			"approval": false
		},
		{
			"sender": "dustin@spy.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Jan 15, 2012, at 1:14 AM, Gustavo Niemeyer wrote:\n\n> In fact, no, we should not add that now. The old url.Host and the\n> potential url.Host() would return different results, making the\n> migration more confusing than necessary. Even if we decide to go into\n> this direction at some point, it shouldn't be now.\n\n\n\tNP.  I've closed my review request.  Thanks a lot.\n\n\t(apologies for naming it incorrectly the first time, I hope this thread causes no confusion in the future)\n\n-- \ndustin sallings\n\n\n\n",
			"disapproval": false,
			"date": "2012-01-15 09:27:39.362291",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm also in favor of following the RFC while we still can & need fix up\ncaller code anyway.\n\nOn Sun, Jan 15, 2012 at 1:21 PM, Dustin Sallings <dustin@spy.net> wrote:\n\n>\n> On Jan 15, 2012, at 12:28 PM, Russ Cox wrote:\n>\n> It is a rare case and has not been a problem so far,\n> so why bother breaking everyone's code?\n>\n>\n> Wouldn't this be a new gofix module?  New go builds regularly break my\n> code.  I think this would be much harder after go1.\n>\n> I ran into the problem in a few different programs before I got annoyed\n> enough to complain about it (which I did with a patch with some new tests\n> and fixes to things that wanted port numbers in the Host field).  The way I\n> did it would be difficult in one pass to make a gofix module (as Gustavo\n> pointed out), but I think the recommendation to change the name to not\n> conflict with the RFC is good.\n>\n> To directly answer the question, from my perspective:\n>\n> 1. This field's name directly conflicts with a major component definition\n> in the RFC the module references.\n> 2. The code breaks regularly enough that there's excellent tooling to\n> automatically update it.\n> 3. It's hard to tell how rare the problem is since it's API.  More people\n> may be silently working around it.\n>\n> I agree that we should make the doc comment on this field clear.\n>\n>\n> I don't know that documentation would be very helpful here.  I think\n> \"host\" is a pretty clear term and people are not likely to read the\n> documentation enough to find out that it means something different from\n> what the RFC specifies.\n>\n> (Interestingly, section 3.2.2 (the \"host\" syntax component) also seems to\n> be the largest section of the RFC)\n>\n> --\n> dustin sallings\n>\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-01-15 21:24:36.592707",
			"approval": false
		},
		{
			"sender": "dsallings@gmail.com",
			"recipients": [
				"dsallings@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttp://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-14 10:51:26.340155",
			"approval": false
		},
		{
			"sender": "dustin@spy.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Jan 15, 2012, at 12:48 AM, Gustavo Niemeyer wrote:\n\n> The fact it's named Host is misleading, though, and this is a great\n> time to fix this, so thanks for bringing this inconsistency up.\n> \n> Please leave that with me. I'll integrate a suggested change within\n> the existing refactoring that renames Host to Addr and see what people\n> think.\n\n\n\tSounds good to me.  I'm more offended by calling it Host than the lack of Port.  Addr seems more in-line with what the rest of the stuff is doing.\n\n\tThat said, would it be sensible to have a \"func (u *URL) Host() string\" and similar Port() ?\n\n-- \ndustin sallings\n\n\n\n",
			"disapproval": false,
			"date": "2012-01-15 09:01:50.130079",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> I'd be fine with that, but net.SplitHostPort(url.Addr) doesn't bother me either.\n\nIn fact, no, we should not add that now. The old url.Host and the\npotential url.Host() would return different results, making the\nmigration more confusing than necessary. Even if we decide to go into\nthis direction at some point, it shouldn't be now.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-01-15 09:14:33.080504",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Let's leave the field named Host, please.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-15 18:50:34.165545",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Let's leave the field named Host, please.\n\nIt is of course just a name, but I'm curious: why not take this\n(probably only) chance to make the naming more consistent with\neverything else?\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-01-15 20:06:28.450709",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 16 January 2012 06:01, Dustin Sallings <dustin@spy.net> wrote:\n>\n> On Jan 15, 2012, at 10:50 AM, Russ Cox wrote:\n>\n> Let's leave the field named Host, please.\n>\n>\n> I realize I have a small voice here, but I find this to be confusing as the\n> Host field of the URL struct doesn't mean the same thing that the \"host\"\n> field definition in section 3.2.2 [0] suggests it would be. \u00a0It is instead\n> part of what would be the authority field[1] separate from the Port.\n>\n> This is the confusion I ran into when trying to adapt an API that used a\n> host and a port to us a URL and found I had to extract the host *from* the\n> u.Host which sometimes, but not always has a port along with it. \u00a0I don't\n> think I'm going to be the last person to be confused by this.\n\nThere are many RFCs but there is only one Go standard library. It's\nmore important that Go be internally consistent than (the impossible\ntask of being) consistent with many differing sources.\n\nAndrew\n",
			"disapproval": false,
			"date": "2012-01-15 22:40:53.472641",
			"approval": false
		},
		{
			"sender": "dustin@spy.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Jan 15, 2012, at 2:40 PM, Andrew Gerrand wrote:\n\n> There are many RFCs but there is only one Go standard library. It's\n> more important that Go be internally consistent than (the impossible\n> task of being) consistent with many differing sources.\n\n\tThere is only one RFC cited at the top of the documentation for the url module.  I think it breaks down the components pretty clearly:\n\n\n   3.  Syntax Components  . . . . . . . . . . . . . . . . . . . . . . 16\n       3.1.  Scheme . . . . . . . . . . . . . . . . . . . . . . . . . 17\n       3.2.  Authority  . . . . . . . . . . . . . . . . . . . . . . . 17\n             3.2.1.  User Information . . . . . . . . . . . . . . . . 18\n             3.2.2.  Host . . . . . . . . . . . . . . . . . . . . . . 18\n             3.2.3.  Port . . . . . . . . . . . . . . . . . . . . . . 22\n       3.3.  Path . . . . . . . . . . . . . . . . . . . . . . . . . . 22\n       3.4.  Query  . . . . . . . . . . . . . . . . . . . . . . . . . 23\n       3.5.  Fragment . . . . . . . . . . . . . . . . . . . . . . . . 24\n\n\n\n\tand then gives an example:\n\n\n\n   The following are two example URIs and their component parts:\n\n         foo://example.com:8042/over/there?name=ferret#nose\n         \\_/   \\______________/\\_________/ \\_________/ \\__/\n          |           |            |            |        |\n       scheme     authority       path        query   fragment\n          |   _____________________|__\n         / \\ /                        \\\n         urn:example:animal:ferret:nose\n\n\n\n\tWhile that example doesn't go as far as to separate the parts of the authority (as shown above), it does seem clear what the intention is.\n\n\tI think it's important to be consistent both with the things you're referencing (in this case, the RFC) and internally.  net.Dial, for example, takes an \"addr\", not a \"host\".\n\n\n-- \ndustin sallings\n\n\n\n",
			"disapproval": false,
			"date": "2012-01-15 23:07:00.717150",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The URL struct is being overhauled and is about to land.  Search this list\nfor \"5498076\".\n\n\nOn Sat, Jan 14, 2012 at 2:51 AM, <dsallings@gmail.com> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> http://go.googlecode.com/hg/\n>\n>\n> Description:\n>    net/url: Add Host to the Url struct.\n>\n>    RFC 3986 specifies a way to include the port.  This change adds\n>    parsing and serializing of ports separate from the Host field.\n>\n>    Note that this change adds some IPv6 specific tests that are not\n>    specific to port parsing because my first attempts at doing\n>    something trivial caused net/http tests to fail as they relied on\n>    IPv6 URL parsing that was not directly tested here.  I also\n>    included a test for parsing out the port along with an IPv6\n>    address.\n>\n> It seems that a few users of the url parser assumed the port\n> number would be in the host.  I've updated these to treat them\n> separately.\n>\n> Please review this at http://codereview.appspot.com/**5543057/<http://codereview.appspot.com/5543057/>\n>\n> Affected files:\n>  M src/pkg/net/http/httputil/**reverseproxy.go\n>  M src/pkg/net/http/request.go\n>  M src/pkg/net/http/transport.go\n>  M src/pkg/net/url/url.go\n>  M src/pkg/net/url/url_test.go\n>  M src/pkg/websocket/client.go\n>\n>\n> Index: src/pkg/net/http/httputil/**reverseproxy.go\n> ==============================**==============================**=======\n> --- a/src/pkg/net/http/httputil/**reverseproxy.go\n> +++ b/src/pkg/net/http/httputil/**reverseproxy.go\n> @@ -58,6 +58,7 @@\n>        director := func(req *http.Request) {\n>                req.URL.Scheme = target.Scheme\n>                req.URL.Host = target.Host\n> +               req.URL.Port = target.Port\n>                req.URL.Path = singleJoiningSlash(target.**Path,\n> req.URL.Path)\n>                if q := req.URL.RawQuery; q != \"\" {\n>                        req.URL.RawPath = req.URL.Path + \"?\" + q\n> Index: src/pkg/net/http/request.go\n> ==============================**==============================**=======\n> --- a/src/pkg/net/http/request.go\n> +++ b/src/pkg/net/http/request.go\n> @@ -17,6 +17,7 @@\n>        \"io/ioutil\"\n>        \"mime\"\n>        \"mime/multipart\"\n> +       \"net\"\n>        \"net/textproto\"\n>        \"net/url\"\n>        \"strings\"\n> @@ -315,6 +316,9 @@\n>                        if urlStr == \"\" || urlStr[0] != '/' {\n>                                urlStr = \"/\" + urlStr\n>                        }\n> +                       if req.URL.Port != \"\" {\n> +                               host = net.JoinHostPort(host, req.URL.Port)\n> +                       }\n>                        urlStr = req.URL.Scheme + \"://\" + host + urlStr\n>                }\n>        }\n> @@ -497,6 +501,9 @@\n>        if req.Host == \"\" {\n>                req.Host = req.Header.Get(\"Host\")\n>        }\n> +       if req.URL.Port != \"\" {\n> +               req.Host = net.JoinHostPort(req.Host, req.URL.Port)\n> +       }\n>        req.Header.Del(\"Host\")\n>\n>        fixPragmaCacheControl(req.**Header)\n> Index: src/pkg/net/http/transport.go\n> ==============================**==============================**=======\n> --- a/src/pkg/net/http/transport.**go\n> +++ b/src/pkg/net/http/transport.**go\n> @@ -663,10 +663,11 @@\n>  // canonicalAddr returns url.Host but always with a \":port\" suffix\n>  func canonicalAddr(url *url.URL) string {\n>        addr := url.Host\n> -       if !hasPort(addr) {\n> -               return addr + \":\" + portMap[url.Scheme]\n> +       port := url.Port\n> +       if port == \"\" {\n> +               port = portMap[url.Scheme]\n>        }\n> -       return addr\n> +       return net.JoinHostPort(addr, port)\n>  }\n>\n>  func responseIsKeepAlive(res *Response) bool {\n> Index: src/pkg/net/url/url.go\n> ==============================**==============================**=======\n> --- a/src/pkg/net/url/url.go\n> +++ b/src/pkg/net/url/url.go\n> @@ -270,6 +270,7 @@\n>        RawAuthority string // [userinfo@]host\n>        RawUserinfo  string // userinfo\n>        Host         string // host\n> +       Port         string // port (\"\" if not specified)\n>        RawPath      string // /path[?query][#fragment]\n>        Path         string // /path\n>        OpaquePath   bool   // path is opaque (unrooted when scheme is\n> present)\n> @@ -411,6 +412,15 @@\n>                        goto Error\n>                }\n>                url.Host = rawHost\n> +               // Can't use split() because it breaks IPv6, so we'll\n> +               // just look backwards until we find a : or a ]\n> +               for i := len(url.Host) - 1; i > 0; i-- {\n> +                       if url.Host[i] == ':' {\n> +                               url.Host, url.Port = url.Host[0:i],\n> url.Host[i+1:]\n> +                       } else if url.Host[i] == ']' {\n> +                               break\n> +                       }\n> +               }\n>\n>                if url.Path, err = unescape(path, encodePath); err != nil {\n>                        goto Error\n> @@ -462,6 +472,9 @@\n>                        result += info + \"@\"\n>                }\n>                result += url.Host\n> +               if url.Port != \"\" {\n> +                       result += \":\" + url.Port\n> +               }\n>        }\n>        if url.OpaquePath {\n>                path := url.Path\n> Index: src/pkg/net/url/url_test.go\n> ==============================**==============================**=======\n> --- a/src/pkg/net/url/url_test.go\n> +++ b/src/pkg/net/url/url_test.go\n> @@ -34,6 +34,7 @@\n>                &URL{\n>                        Raw:          \"http://www.google.com/\",\n>                        Scheme:       \"http\",\n> +                       Port:         \"\",\n>                        RawAuthority: \"www.google.com\",\n>                        Host:         \"www.google.com\",\n>                        RawPath:      \"/\",\n> @@ -41,6 +42,48 @@\n>                },\n>                \"\",\n>        },\n> +       // port\n> +       {\n> +               \"http://www.google.com:70/\",\n> +               &URL{\n> +                       Raw:          \"http://www.google.com:70/\",\n> +                       Scheme:       \"http\",\n> +                       Port:         \"70\",\n> +                       RawAuthority: \"www.google.com:70\",\n> +                       Host:         \"www.google.com\",\n> +                       RawPath:      \"/\",\n> +                       Path:         \"/\",\n> +               },\n> +               \"\",\n> +       },\n> +       // ipv6\n> +       {\n> +               \"http://[2001:4860:4001:803::**1012]/\",\n> +               &URL{\n> +                       Raw:          \"http://[2001:4860:4001:803::**\n> 1012]/\",\n> +                       Scheme:       \"http\",\n> +                       Port:         \"\",\n> +                       RawAuthority: \"[2001:4860:4001:803::1012]\",\n> +                       Host:         \"[2001:4860:4001:803::1012]\",\n> +                       RawPath:      \"/\",\n> +                       Path:         \"/\",\n> +               },\n> +               \"\",\n> +       },\n> +       // ipv6 with port\n> +       {\n> +               \"http://[2001:4860:4001:803::**1012]:70/\",\n> +               &URL{\n> +                       Raw:          \"http://[2001:4860:4001:803::**\n> 1012]:70/\",\n> +                       Scheme:       \"http\",\n> +                       Port:         \"70\",\n> +                       RawAuthority: \"[2001:4860:4001:803::1012]:**70\",\n> +                       Host:         \"[2001:4860:4001:803::1012]\",\n> +                       RawPath:      \"/\",\n> +                       Path:         \"/\",\n> +               },\n> +               \"\",\n> +       },\n>        // path with hex escaping\n>        {\n>                \"http://www.google.com/file%**20one%26two<http://www.google.com/file%20one%26two>\n> \",\n> @@ -300,9 +343,9 @@\n>\n>  // more useful string for debugging than fmt's struct printer\n>  func ufmt(u *URL) string {\n> -       return fmt.Sprintf(\"raw=%q, scheme=%q, rawpath=%q, auth=%q,\n> userinfo=%q, host=%q, path=%q, rawq=%q, frag=%q\",\n> +       return fmt.Sprintf(\"raw=%q, scheme=%q, rawpath=%q, auth=%q,\n> userinfo=%q, host=%q, port=%q, path=%q, rawq=%q, frag=%q\",\n>                u.Raw, u.Scheme, u.RawPath, u.RawAuthority, u.RawUserinfo,\n> -               u.Host, u.Path, u.RawQuery, u.Fragment)\n> +               u.Host, u.Port, u.Path, u.RawQuery, u.Fragment)\n>  }\n>\n>  func DoTest(t *testing.T, parse func(string) (*URL, error), name string,\n> tests []URLTest) {\n> Index: src/pkg/websocket/client.go\n> ==============================**==============================**=======\n> --- a/src/pkg/websocket/client.go\n> +++ b/src/pkg/websocket/client.go\n> @@ -114,10 +114,13 @@\n>        }\n>        switch config.Location.Scheme {\n>        case \"ws\":\n> -               client, err = net.Dial(\"tcp\", config.Location.Host)\n> +               client, err = net.Dial(\"tcp\",\n> +                       net.JoinHostPort(config.**Location.Host,\n> config.Location.Port))\n>\n>        case \"wss\":\n> -               client, err = tls.Dial(\"tcp\", config.Location.Host,\n> config.TlsConfig)\n> +               client, err = tls.Dial(\"tcp\",\n> +                       net.JoinHostPort(config.**Location.Host,\n> config.Location.Port),\n> +                       config.TlsConfig)\n>\n>        default:\n>                err = ErrBadScheme\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-01-14 17:19:57.987628",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi Dustin,\n\n> Do you agree that it seems important not to consider the port as being part\n> of the hostname? \u00a0They are called out separately in the RFC and they are\n> conceptually separate, even if it is easier to keep them together for things\n> like net.Dial.\n\nI agree that we have something to fix, but I don't think adding a Port\nfield is it. The idiom in pretty much all Go packages is to use the\naddress string as \"host:port\". If we split it up in the URL, it'll\nbecome less comfortable to use, irrespective of what the RFC says. If\nyou want the port number, you can trivially get it by calling\nnet.SplitHostPort.\n\nThe fact it's named Host is misleading, though, and this is a great\ntime to fix this, so thanks for bringing this inconsistency up.\n\nPlease leave that with me. I'll integrate a suggested change within\nthe existing refactoring that renames Host to Addr and see what people\nthink.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-01-15 08:48:52.837917",
			"approval": false
		},
		{
			"sender": "dustin@spy.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Jan 15, 2012, at 12:28 PM, Russ Cox wrote:\n\n> It is a rare case and has not been a problem so far,\n> so why bother breaking everyone's code?\n\n\tWouldn't this be a new gofix module?  New go builds regularly break my code.  I think this would be much harder after go1.\n\n\tI ran into the problem in a few different programs before I got annoyed enough to complain about it (which I did with a patch with some new tests and fixes to things that wanted port numbers in the Host field).  The way I did it would be difficult in one pass to make a gofix module (as Gustavo pointed out), but I think the recommendation to change the name to not conflict with the RFC is good.\n\n\tTo directly answer the question, from my perspective:\n\n\t1. This field's name directly conflicts with a major component definition in the RFC the module references.\n\t2. The code breaks regularly enough that there's excellent tooling to automatically update it.\n\t3. It's hard to tell how rare the problem is since it's API.  More people may be silently working around it.\n\n> I agree that we should make the doc comment on this field clear.\n\n\n\tI don't know that documentation would be very helpful here.  I think \"host\" is a pretty clear term and people are not likely to read the documentation enough to find out that it means something different from what the RFC specifies.\n\n\t(Interestingly, section 3.2.2 (the \"host\" syntax component) also seems to be the largest section of the RFC)\n\n-- \ndustin sallings\n\n\n\n",
			"disapproval": false,
			"date": "2012-01-15 21:22:17.211749",
			"approval": false
		},
		{
			"sender": "dustin@spy.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Jan 14, 2012, at 9:19 AM, Brad Fitzpatrick wrote:\n\n> The URL struct is being overhauled and is about to land.  Search this list for \"5498076\".\n\n\n\tInterestingly, this doesn't solve the host:port problem.  What's the appropriate action here?  Should I do this again after that change, or should I suggest that the port be pulled out in 5498076?\n\n\tDo you agree that it seems important not to consider the port as being part of the hostname?  They are called out separately in the RFC and they are conceptually separate, even if it is easier to keep them together for things like net.Dial.\n\n-- \ndustin sallings\n\n\n\n",
			"disapproval": false,
			"date": "2012-01-14 18:29:18.907370",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Jan 15, 2012 at 15:06, Gustavo Niemeyer <gustavo@niemeyer.net> wrote:\n> It is of course just a name, but I'm curious: why not take this\n> (probably only) chance to make the naming more consistent with\n> everything else?\n\nIt is a rare case and has not been a problem so far,\nso why bother breaking everyone's code?  I agree that we\nshould make the doc comment on this field clear.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-15 20:28:32.134981",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> I'm with rsc, though, I don't think that s/Host/Addr/ brings enough\n> benefit to be worth the churn.\n\nI'd agree if we weren't bringing a significant change to the URL\nstructure that will need action already. Adapting to a different\nname for Host that actually makes more sense feels like a\npretty minor concern.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-01-15 22:54:53.591865",
			"approval": false
		}
	],
	"owner_email": "dsallings@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Dustin",
	"subject": "code review 5543057: net/url: Add Port to the Url struct.",
	"created": "2012-01-14 09:49:55.814328",
	"patchsets": [
		1,
		2001,
		4001
	],
	"modified": "2012-01-15 22:55:10.090762",
	"closed": true,
	"issue": 5543057
}