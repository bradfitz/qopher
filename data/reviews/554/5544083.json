{
	"description": "net/smtp: added ability to manually set greeting hostname",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "devon.odell@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "2012/1/17 Evan Shaw <edsrzf@gmail.com>:\n> I'm convinced that net/smtp does need a way to configure this. I'm\n> still not sure of the best way to do it since I think most clients\n> will not care about setting it. I would appreciate others weighing in.\n\nI think:\n\n1) It should default to the reverse of the address of the underlying socket\n2) If the address of the underlying socket does not have a reverse\nentry, it should default to the hostname of the system\n3) If there is no hostname for the system, the address literal should\nbe used (e.g. [1.2.3.4] or [IPv6:f00::1])\n4) If the user specifies a string, it should override any default setting\n\nLocalHostname doesn't feel like the right name for this. EhloGreeting\nor EhloDomain might be more fitting.\n\n--dho\n\n> - Evan\n",
			"disapproval": false,
			"date": "2012-01-17 20:42:09.500190",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "If we must provide this functionality, don't change the\nexisting API.  Change the Client to run helo/ehlo on\nthe first interaction instead of during NewClient, and\nadd a Helo method that can be used to force the\ninteraction and takes the host name.\n\nThis is certainly not important enough to force changes\nto existing clients.\n",
			"disapproval": false,
			"date": "2012-01-17 22:08:47.270059",
			"approval": false
		},
		{
			"sender": "dusty@linux.com",
			"recipients": [
				"dusty@linux.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-17 13:12:32.130086",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What if this interface looked more like os/exec.Command and\nnet/http.Client?  Make a type Client struct { ... } and methods on the\nclient to connect?\n\nSticking on *Opts parameters ad-hoc (especially often-nil ones) feels a bit\nweird.\n\nYou could still have helpers for common cases, though, like os/exec and\nnet/http have.\n\n\nOn Tue, Jan 17, 2012 at 10:59 AM, Evan Shaw <edsrzf@gmail.com> wrote:\n\n> I'm convinced that net/smtp does need a way to configure this. I'm\n> still not sure of the best way to do it since I think most clients\n> will not care about setting it. I would appreciate others weighing in.\n>\n> - Evan\n>\n",
			"disapproval": false,
			"date": "2012-01-17 19:16:38.999518",
			"approval": false
		},
		{
			"sender": "edsrzf@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm convinced that net/smtp does need a way to configure this. I'm\nstill not sure of the best way to do it since I think most clients\nwill not care about setting it. I would appreciate others weighing in.\n\n- Evan\n",
			"disapproval": false,
			"date": "2012-01-17 19:00:19.732911",
			"approval": false
		},
		{
			"sender": "devon.odell@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "2012/1/17 Russ Cox <rsc@golang.org>:\n> If we must provide this functionality, don't change the\n> existing API. \u00a0Change the Client to run helo/ehlo on\n> the first interaction instead of during NewClient, and\n> add a Helo method that can be used to force the\n> interaction and takes the host name.\n\nIf we change the API to do this, it's important to make sure we\ncontinue to read the banner *before* we allow people to send over the\nsocket. The SMTP spec states that clients *must* wait for the banner\nbefore they can send any data to the server, and some providers will\nbreak the spec and disconnect you without a 421 (or give you a huge\nspam score ding) if you start sending data before the banner is sent.\nI.e. NewClient should still read the banner. (I doubt such a change\nwould change this behavior, but it's worth pointing out anyway.)\n\nI agree with your approach to changing the API, provided the approach\nuses the default values suggested (realistically, they only need to be\nset one per IP used to send).\n\n> This is certainly not important enough to force changes\n> to existing clients.\n\nCertainly if we can do it without making API changes, we should. It is\nvery important though, for anyone who wishes to send mail in a\nproduction environment. Many carriers maintain their own RBLs and you\ncan end up on these if you do not follow the spec to the letter;\npeople will remember IPs that violated their policies for quite some\ntime. (Though it's really up to the administrator to make sure that\npolicies are followed for sending production mail if one wishes to\nmaintain a good sending reputation.)\n\n--dho\n",
			"disapproval": false,
			"date": "2012-01-17 22:48:11.564176",
			"approval": false
		},
		{
			"sender": "dusty@linux.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jan 17, 2012 at 2:48 PM, Devon H. O'Dell <devon.odell@gmail.com> wrote:\n> 2012/1/17 Russ Cox <rsc@golang.org>:\n>> If we must provide this functionality, don't change the\n>> existing API. \u00a0Change the Client to run helo/ehlo on\n>> the first interaction instead of during NewClient, and\n>> add a Helo method that can be used to force the\n>> interaction and takes the host name.\n>\n> If we change the API to do this, it's important to make sure we\n> continue to read the banner *before* we allow people to send over the\n> socket. The SMTP spec states that clients *must* wait for the banner\n> before they can send any data to the server, and some providers will\n> break the spec and disconnect you without a 421 (or give you a huge\n> spam score ding) if you start sending data before the banner is sent.\n> I.e. NewClient should still read the banner. (I doubt such a change\n> would change this behavior, but it's worth pointing out anyway.)\n\nWhat I would like to do, based on this conversation, is the following:\n\n- Delay the dial and greeting until first action.\n- Whenever we dial, we also handle the banner in a blocking fashion so\nit doesn't get fumbled.\n- Move the Options away from the NewClient and into its own method.\n- Keep the Options in the SendMail as it's a one-shot job and there's\nno other way (that I know that doesn't rely on an environment\nvariable) to handle it.\n\n\nIf the SMTP server disconnects us because we were connected too long\nwithout talking or we already sent a message and they kicked us off,\nthe dial/banner/greeting will need to happen again.  This only matters\nif we're reusing our Client.  Would we?  I don't know.  I'm afraid\nthat this bullet point will open a can of worms and so I'd like to\ntread carefully on this bit.  If someone has insight into this, it'd\nhelp.  Questions: Would it be okay to just return an error and make\nthem NewClient again?  Should a Client be reusable?  Should an\nexisting Client be usable with SendMail?  Am I introducing too much\ncomplexity simply by bringing up this particular reusability point?\nProbably.\n\n> I agree with your approach to changing the API, provided the approach\n> uses the default values suggested (realistically, they only need to be\n> set one per IP used to send).\n\nI think the hostname needs to be set once per NewClient or equivalent.\n I do think we shouldn't change the API for NewClient but I don't see\nany other way to avoid changing the API for SendMail.\n\n>> This is certainly not important enough to force changes\n>> to existing clients.\n\nI believe this is incredibly important for anyone sending mail to a\nsystem that they don't completely control (which is almost everyone)\nas their SMTP server might begin caring about the greeting hostname at\nany moment.  It certainly hit me and I do control all of my mail\nservers and I'll certainly not loosen my configurations just because a\nGo library doesn't let me do it right.\n\nI'll do the above (except maybe the Client reuse part) and re-post\nunless I hear reasonable conflicting arguments before I get there.\nThanks for the discussion on this.\n",
			"disapproval": false,
			"date": "2012-01-18 05:04:13.567277",
			"approval": false
		},
		{
			"sender": "dusty@linux.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": ">> 2012/1/17 Russ Cox <rsc@golang.org>:\n>>> If we must provide this functionality, don't change the\n>>> existing API.  Change the Client to run helo/ehlo on\n>>> the first interaction instead of during NewClient, and\n>>> add a Helo method that can be used to force the\n>>> interaction and takes the host name.\n\nTo do this properly, we have to change the API.  If I'm wrong, I want to\nknow.  It seems like too much needs to change to do what I want.  Be\nnecessarily tough.  My opinion is that this package isn't structured\ncorrectly.\n\nHere's the deal:\n\n- smtp.NewClient doesn't just make a new &Client{} but it also is expecting\na pre-existing net.Conn that is already connected and ready to go.  This\nmeans we can't honestly delay any banners or greetings unless we change\nNewClient to simply return a Client and not do connection stuff within.  Or\nif we make another function that does what I think NewClient should be\ndoing to avoid changing API (which I dislike; I think API should change if\nit must change).\n- smtp.Dial makes a net.Conn and then calls smtp.NewClient and returns the\nClient that is created.  Because of this, the banners and greetings\nhappened already.  This seems backward.  Why isn't it c.Dial?  Shouldn't\nNewClient just give you an empty/initialized (but not connected) Client?\n\nWhat I think should happen:\n\n- smtp.NewClient should just return a new Client.  It shouldn't be\nconnecting or dealing with banners or greetings or anything.  It shouldn't\neven dial out at all.  I believe at this point, the Client should be just a\nsimple object with no involvement with networking.\n- smtp.Dial feels like it shouldn't exist at all.\n- The only time an automatic connection is made is when we actually want to\ndo something (like send an email, for example).  Manual connecting (via\nsomething like c.Dial) could possibly exist.\n- The banner and greeting would happen at connection time, which should be\ndelayed until it's really needed.  This is important because SMTP servers\nwill kick you off if you don't send something along soon enough.\n- If you get disconnected for whatever reason (idle for too long, already\nsent an email and the server booted you, etc), it would just go back to\nidle state and then reconnect when you try to do something with via the\nSMTP server (such as sending email).  This way you can reuse Clients and it\nwould automatically handle the reconnection case for unexpected\ndisconnections (but we still want errors for bad error events, not just\ngloss over them).  Or is this trying to do too much / stepping on toes?\n\nProposed functions/methods:\n\nfunc NewClient(hostname string) {} // return a bare client with minimal or\nno configuration to it\nfunc (c *Client) Host(hostname string) {} // set the host to connect to\n(why would we change it after it's been set once?)\nfunc (c *Client) GetHost() string {} // get the host to connect to... if we\ncare?\nfunc (c *Client) Options(opts *Options) {} // set the Options if we want to\n(or set it to nil to un-set it)\nfunc (c *Client) GetOptions() *Options {} // get the Options... if we care?\nfunc (c *Client) Dial(host string) error {} // used for manual connections\nif we don't want the code to do it automatically?\nfunc (c *Client) cmd(expectCode int, format string, args ...interface{})\n(int, string, error) {} // sends SMTP commands such as HELO, etc.\nfunc (c *Client) connect() {} // is called by c.cmd before it sends\nsomething over the wire; handles the banner and the greeting\nfunc SendMail(addr string, a Auth, options *Options, from string, to\n[]string, msg []byte) error {} // one-shot send of email\n\nFunctions/methods that stay the same:\nc.ehlo, c.helo, c.StartTLS, c.Verify, c.Auth, c.Mail, c.Rcpt, c.Data,\nc.Extension, c.Reset, c.Quit, dataCloser, d.Close\n\nI'm unsure about:\n\n- ...not only changing the API, but changing so much of it.  This needs a\nserious sanity check.\n- Why is \"serverName\" passed into in NewClient?  It's only used in c.Auth\nas far as I can see.  Why isn't it just sent to c.Auth directly?  It's\ndoesn't seem to be used when SendMail calls c.Auth; does that mean\nclient.serverName is nil when used in SendMail?\n\nI'm not going to go any farther without a good discussion on the above.\n Please pick it apart as this needs to be done right if it's going to be\ndone and I'm asking for an annoying amount of change.\n",
			"disapproval": false,
			"date": "2012-01-18 13:39:34.542714",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry, but it is too late in the Go 1 cycle to be redesigning the smtp API,\nand even ignoring the timing, I don't see a compelling reason to do so.\n\nIf you want to do something like codereview.appspot.com/5555045\n(which is backwards-compatible with existing code), then fine.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-18 14:41:32.970661",
			"approval": false
		},
		{
			"sender": "devon.odell@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "2012/1/18 Russ Cox <rsc@golang.org>:\n> Sorry, but it is too late in the Go 1 cycle to be redesigning the smtp API,\n> and even ignoring the timing, I don't see a compelling reason to do so.\n\nI agree, though I've not looked terribly deeply into how 421s are\nhandled by the API. It seems like the calling code would just have to\nhandle the error being passed back, which seems OK. I don't think we\nneed to handle cases where people break the specification and\ndisconnect us without sending a 421.\n\n> If you want to do something like codereview.appspot.com/5555045\n> (which is backwards-compatible with existing code), then fine.\n\nI've posted a comment on this CL, which looks fine other than my\npoints mentioned there.\n\n> Russ\n\n--dho\n",
			"disapproval": false,
			"date": "2012-01-18 14:54:23.978909",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dusty@linux.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2012-06-03 04:40:25.043064",
			"approval": false
		}
	],
	"owner_email": "dusty@linux.com",
	"private": false,
	"base_url": "",
	"owner": "dustywilson",
	"subject": "code review 5544083: net/smtp: added ability to manually set greeting hostname",
	"created": "2012-01-17 13:09:17.200604",
	"patchsets": [
		1,
		3,
		1002
	],
	"modified": "2012-06-03 04:40:25.043527",
	"closed": false,
	"issue": 5544083
}