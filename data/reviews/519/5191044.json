{
	"description": "runtime: fix spurious deadlock reporting\nFixes issue 2337.\nUnfortunate sequence of events is:\n1. maxcpu=2, mcpu=1, grunning=1\n2. starttheworld creates an extra M:\n   maxcpu=2, mcpu=2, grunning=1\n4. the goroutine calls runtime.GOMAXPROCS(1)\n   maxcpu=1, mcpu=2, grunning=1\n5. since it sees mcpu>maxcpu, it calls gosched()\n6. schedule() deschedules the goroutine:\n   maxcpu=1, mcpu=1, grunning=0\n7. schedule() call getnextandunlock() which\n   fails to pick up the goroutine again,\n   because canaddcpu() fails, because mcpu==maxcpu\n8. then it sees that grunning==0,\n   reports deadlock and terminates",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-06 15:05:31.020063",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nThanks for tracking that down.\n",
			"disapproval": false,
			"date": "2011-10-06 15:07:28.956526",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=09557b41f0ab ***\n\nruntime: fix spurious deadlock reporting\nFixes issue 2337.\nUnfortunate sequence of events is:\n1. maxcpu=2, mcpu=1, grunning=1\n2. starttheworld creates an extra M:\n   maxcpu=2, mcpu=2, grunning=1\n4. the goroutine calls runtime.GOMAXPROCS(1)\n   maxcpu=1, mcpu=2, grunning=1\n5. since it sees mcpu>maxcpu, it calls gosched()\n6. schedule() deschedules the goroutine:\n   maxcpu=1, mcpu=1, grunning=0\n7. schedule() call getnextandunlock() which\n   fails to pick up the goroutine again,\n   because canaddcpu() fails, because mcpu==maxcpu\n8. then it sees that grunning==0,\n   reports deadlock and terminates\n\nR=golang-dev, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5191044",
			"disapproval": false,
			"date": "2011-10-06 15:10:56.586260",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 5191044: runtime: fix spurious deadlock reporting",
	"created": "2011-10-05 19:18:00.630733",
	"patchsets": [
		1,
		4,
		2001,
		5001,
		8001,
		10005,
		11001,
		5002,
		6004,
		2002
	],
	"modified": "2011-10-06 15:10:58.010372",
	"closed": true,
	"issue": 5191044
}