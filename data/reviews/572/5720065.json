{
	"description": "text/template: clean up function values\nThe recent addition of automatic function invocation generated\nsome troublesome ambiguities. Restore the previous behavior\nand compensate by providing a \"call\" builtin to make it easy to\ndo what the automatic invocation did, but in a clear and explicit\nmanner.\n\nFixes issue 3140.\n\nAt least for now.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dsymonds@golang.org",
		"r@google.com"
	],
	"reviewers": [
		"adg@golang.org",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5720065/diff/1/src/pkg/text/template/doc.go\nFile src/pkg/text/template/doc.go (right):\n\nhttp://codereview.appspot.com/5720065/diff/1/src/pkg/text/template/doc.go#newcode260\nsrc/pkg/text/template/doc.go:260: Y is a func-valued field, map entry, or the like.\ns/-valued.*\\././ perhaps?\n\nhttp://codereview.appspot.com/5720065/diff/1/src/pkg/text/template/funcs.go\nFile src/pkg/text/template/funcs.go (right):\n\nhttp://codereview.appspot.com/5720065/diff/1/src/pkg/text/template/funcs.go#newcode159\nsrc/pkg/text/template/funcs.go:159: // It will panic if the argument count or types are incorrect.\nA panic seems a bit brutal here. Can you recover it?",
			"disapproval": false,
			"date": "2012-03-03 06:37:28.716438",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-03-03 06:21:42.660952",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn 03/03/2012, at 5:37 PM, dsymonds@golang.org wrote:\n\n> LGTM\n> \n> \n> http://codereview.appspot.com/5720065/diff/1/src/pkg/text/template/doc.go\n> File src/pkg/text/template/doc.go (right):\n> \n> http://codereview.appspot.com/5720065/diff/1/src/pkg/text/template/doc.go#newcode260\n> src/pkg/text/template/doc.go:260: Y is a func-valued field, map entry,\n> or the like.\n> s/-valued.*\\././ perhaps?\n\nThat would change the meaning.\n\n> http://codereview.appspot.com/5720065/diff/1/src/pkg/text/template/funcs.go\n> File src/pkg/text/template/funcs.go (right):\n> \n> http://codereview.appspot.com/5720065/diff/1/src/pkg/text/template/funcs.go#newcode159\n> src/pkg/text/template/funcs.go:159: // It will panic if the argument\n> count or types are incorrect.\n> A panic seems a bit brutal here. Can you recover it?\n\nI can, but I'm not sure I should. Should I recover if the function itself panics? I can do an argument type validation fairly easily, so that's one option. It's annoying (and annoying to test) and duplicates code that's already doing all that work in reflect, but maybe I should.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-03-03 09:05:39.254333",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org, r@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-03-03 09:39:05.258529",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThat at least gives a more useful error message.\n\nI think it's fair to have the template execution panic if an invoked function itself panics. It seems a lot friendlier to have this insulation for something that is potentially a lot less visible.",
			"disapproval": false,
			"date": "2012-03-03 10:45:08.848547",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Mar 3, 2012 at 20:02, Andrew Gerrand <adg@golang.org> wrote:\n> It would be nice if we could recover from the panic, garnish the\n> recovered value with the location inside the template where the\n> function was called, and then re-panic.\n\nGo is not about garnish.\n",
			"disapproval": false,
			"date": "2012-03-05 15:06:35.444358",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn 04/03/2012, at 12:02 PM, Andrew Gerrand wrote:\n\n> On 3 March 2012 21:45,  <dsymonds@golang.org> wrote:\n>> LGTM\n>> \n>> That at least gives a more useful error message.\n>> \n>> I think it's fair to have the template execution panic if an invoked\n>> function itself panics. It seems a lot friendlier to have this\n>> insulation for something that is potentially a lot less visible.\n> \n> It would be nice if we could recover from the panic, garnish the\n> recovered value with the location inside the template where the\n> function was called, and then re-panic.\n\nPanics can happen in a zillion places, and I really don't want to set a precedent that it's a package's job to decorate errors created by things it calls over which it has no control. If you panic in a call, the traceback will start at the place that crashed. That's plenty of information. Chances are the call only occurs in one or two places in your template anyway.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-03-04 03:57:47.392308",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 3 March 2012 21:45,  <dsymonds@golang.org> wrote:\n> LGTM\n>\n> That at least gives a more useful error message.\n>\n> I think it's fair to have the template execution panic if an invoked\n> function itself panics. It seems a lot friendlier to have this\n> insulation for something that is potentially a lot less visible.\n\nIt would be nice if we could recover from the panic, garnish the\nrecovered value with the location inside the template where the\nfunction was called, and then re-panic.\n",
			"disapproval": false,
			"date": "2012-03-04 01:03:01.283464",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"r@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=a28cc319fc47 ***\n\ntext/template: clean up function values\nThe recent addition of automatic function invocation generated\nsome troublesome ambiguities. Restore the previous behavior\nand compensate by providing a \"call\" builtin to make it easy to\ndo what the automatic invocation did, but in a clear and explicit\nmanner.\n\nFixes issue 3140.\n\nAt least for now.\n\nR=golang-dev, dsymonds, r\nCC=golang-dev\nhttp://codereview.appspot.com/5720065",
			"disapproval": false,
			"date": "2012-03-03 12:14:29.190892",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5720065: text/template: clean up function values",
	"created": "2012-03-03 06:21:33.339106",
	"patchsets": [
		1,
		7,
		4001,
		1014,
		4002
	],
	"modified": "2012-03-05 15:06:35.525578",
	"closed": true,
	"issue": 5720065
}