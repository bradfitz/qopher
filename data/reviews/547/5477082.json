{
	"description": "encoding/base64: decode content with newlines\n\nRemove newlines and carriage returns to partially comply with RFC 2045\nFixes issue 2541.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org",
		"r@google.com",
		"r@golang.org"
	],
	"messages": [
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I was looking into this and think base64 needs more attention than just handling crlfs on in put, but it's a step.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-12-13 20:31:37.712929",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Dec 13, 2011, at 12:38 PM, bketelsen@gmail.com wrote:\n\n> On 2011/12/13 20:29:30, rsc wrote:\n>> Thanks for fixing this, but can you fix it without\n>> the extra allocation?  Ignoring \\r and \\n in the loop\n>> seems like it should be straightforward.\n> \n>> Russ\n> \n> the internal decode method assumes 4 byte blocks, which is broken when\n> the input value has newlines or carriage returns.  Base64 encoded\n> strings can have any number of newlines in them - especially in the case\n> of MIME encoding, so the decode method would need to be scrapped\n> completely to avoid this allocation.  cost/benefit seems too high for\n> this fix.  Please advise if you want me to re-implement the decode\n> without the 4 byte block assumption.\n\ncan't decode just skip the newlines as it assembles dbuf? it looks pretty easy to me.\n\nby the way, the tests should include inner newlines.\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2011-12-13 20:46:48.610412",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for fixing this, but can you fix it without\nthe extra allocation?  Ignoring \\r and \\n in the loop\nseems like it should be straightforward.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-13 20:29:30.526180",
			"approval": false
		},
		{
			"sender": "bketelsen@gmail.com",
			"recipients": [
				"bketelsen@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/12/13 20:29:30, rsc wrote:\n> Thanks for fixing this, but can you fix it without\n> the extra allocation?  Ignoring \\r and \\n in the loop\n> seems like it should be straightforward.\n> \n> Russ\n\nthe internal decode method assumes 4 byte blocks, which is broken when the input value has newlines or carriage returns.  Base64 encoded strings can have any number of newlines in them - especially in the case of MIME encoding, so the decode method would need to be scrapped completely to avoid this allocation.  cost/benefit seems too high for this fix.  Please advise if you want me to re-implement the decode without the 4 byte block assumption.",
			"disapproval": false,
			"date": "2011-12-13 20:38:10.974801",
			"approval": false
		},
		{
			"sender": "bketelsen@gmail.com",
			"recipients": [
				"bketelsen@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-13 20:14:47.743990",
			"approval": false
		},
		{
			"sender": "bketelsen@gmail.com",
			"recipients": [
				"bketelsen@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/12/13 20:46:48, r2 wrote:\n> On Dec 13, 2011, at 12:38 PM, mailto:bketelsen@gmail.com wrote:\n> \n> > On 2011/12/13 20:29:30, rsc wrote:\n> >> Thanks for fixing this, but can you fix it without\n> >> the extra allocation?  Ignoring \\r and \\n in the loop\n> >> seems like it should be straightforward.\n> > \n> >> Russ\n> > \n> > the internal decode method assumes 4 byte blocks, which is broken when\n> > the input value has newlines or carriage returns.  Base64 encoded\n> > strings can have any number of newlines in them - especially in the case\n> > of MIME encoding, so the decode method would need to be scrapped\n> > completely to avoid this allocation.  cost/benefit seems too high for\n> > this fix.  Please advise if you want me to re-implement the decode\n> > without the 4 byte block assumption.\n> \n> can't decode just skip the newlines as it assembles dbuf? it looks pretty easy\n> to me.\n> \n> by the way, the tests should include inner newlines.\n> \n> -rob\n> \n> \n\nWill do.",
			"disapproval": false,
			"date": "2011-12-13 20:58:41.316604",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Dec 16, 2011, at 10:46 AM, Brian Ketelsen wrote:\n\n> I appreciate the implementation advice.  That's very similar to what I had (without the pretty dual variable loop).\n> \n> What about the question of getting to this decode method from outside the package?  Currently the externally accessible methods have a check for  len % 4 in them, which won't work if we allow random newlines.  Do we remove the check for 4byte blocks in the public Decode method?  Or create a new method that is clearly not testing for content length?\n\nYou fix or remove the checks that would now be wrong. It's an Internet standard: there are no rules.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-12-16 18:51:38.113839",
			"approval": false
		},
		{
			"sender": "bketelsen@gmail.com",
			"recipients": [
				"bketelsen@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"r@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2011-12-20 17:15:59.899103",
			"approval": false
		},
		{
			"sender": "bketelsen@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I appreciate the implementation advice.  That's very similar to what I had (without the pretty dual variable loop).\n\nWhat about the question of getting to this decode method from outside the package?  Currently the externally accessible methods have a check for  len % 4 in them, which won't work if we allow random newlines.  Do we remove the check for 4byte blocks in the public Decode method?  Or create a new method that is clearly not testing for content length?\n\n\n\nOn Dec 16, 2011, at 1:41 PM, Rob 'Commander' Pike wrote:\n\n> i was thinking something like this, untried and untested and incomplete.\n> \n> \t\tfor j, k := i*4, 0; j < len(src) && k < 4; j++ {\n> \t\t\tin := src[j]\n> \t\t\tif in == '\\n' || in == '\\r' {\n> \t\t\t\tcontinue\n> \t\t\t}\n> \t\t\t// details about '=' processing elided; it might work nicer now\n> \t\t\tdbuf[k] = enc.decodeMap[in]\n> \t\t\tif dbuf[k] == 0xFF {\n> \t\t\t\treturn n, false, CorruptInputError(i*4 + j)\n> \t\t\t}\n> \t\t\tk++\n> \t\t}\n> \n> \n\n",
			"disapproval": false,
			"date": "2011-12-16 18:46:00.550490",
			"approval": false
		},
		{
			"sender": "bketelsen@gmail.com",
			"recipients": [
				"bketelsen@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, r@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-15 04:27:17.164100",
			"approval": false
		},
		{
			"sender": "bketelsen@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\n\nOn Dec 14, 2011, at 11:27 PM, bketelsen@gmail.com wrote:\n\n> Hello golang-dev@googlegroups.com, rsc@golang.org, r@google.com (cc:\n> golang-dev@googlegroups.com),\n> \n> Please take another look.\n> \n> \n> http://codereview.appspot.com/5477082/\n\n",
			"disapproval": false,
			"date": "2011-12-15 17:52:52.221799",
			"approval": false
		},
		{
			"sender": "bketelsen@gmail.com",
			"recipients": [
				"bketelsen@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"r@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/12/15 18:46:54, r wrote:\n> http://codereview.appspot.com/5477082/diff/7001/src/pkg/encoding/base64/base64.go\n> File src/pkg/encoding/base64/base64.go (right):\n> \n> http://codereview.appspot.com/5477082/diff/7001/src/pkg/encoding/base64/base64.go#newcode216\n> src/pkg/encoding/base64/base64.go:216: var offset int = 0\n> you don't need this.\n> \n> http://codereview.appspot.com/5477082/diff/7001/src/pkg/encoding/base64/base64.go#newcode224\n> src/pkg/encoding/base64/base64.go:224: for j := 0; j < 4; j++ {\n> run a loop with two variables. one steps through the input, one steps through\n> the output. the input one is incremented every loop. the output one advances\n> only when we accept a byte. the code will be shorter.\n> \n> http://codereview.appspot.com/5477082/diff/7001/src/pkg/encoding/base64/base64.go#newcode236\n> src/pkg/encoding/base64/base64.go:236: // If it's not a Linefeed or Carriage\n> Return then add\n> s/Linefeed/newline/\n> s/Carriage Return/carriage return/\n> \n> http://codereview.appspot.com/5477082/diff/7001/src/pkg/encoding/base64/base64.go#newcode238\n> src/pkg/encoding/base64/base64.go:238: if in != 13 && in != 10 {\n> use \\r and \\n.\n> \n> http://codereview.appspot.com/5477082/diff/7001/src/pkg/encoding/base64/base64_test.go\n> File src/pkg/encoding/base64/base64_test.go (right):\n> \n> http://codereview.appspot.com/5477082/diff/7001/src/pkg/encoding/base64/base64_test.go#newcode41\n> src/pkg/encoding/base64/base64_test.go:41: {\"sure.\", \"c3VyZS4=\",\n> \"c3Vy\\nZS4=\\r\\n\"},\n> i'd put \\r and \\n and \\r\\n in a number of these inputs in multiple places.\n> in the test loop, i'd then test it with and without the \\r\\n stripped\n\nI worked on this again last night, and am generally unsatisfied even if we rewrite the loop.  The internal decode method can't be called externally, and the public Decode method throws an error if the number of bytes isn't divisible by 4.  So fixing the internal method won't solve anything without also changing the public method to stop checking for 4 byte multiples. \n\nIf we remove this check on the public Decode method, it may break external code expecting this check.\n\nAnother solution is to leave the current (working) decode method intact, and the current public method intact and write a new DecodeLines method that strips newlines and carriage returns before calling internal decode.\n\nPlease advise.",
			"disapproval": false,
			"date": "2011-12-16 17:15:28.574234",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bketelsen@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"r@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5477082/diff/7001/src/pkg/encoding/base64/base64.go\nFile src/pkg/encoding/base64/base64.go (right):\n\nhttp://codereview.appspot.com/5477082/diff/7001/src/pkg/encoding/base64/base64.go#newcode216\nsrc/pkg/encoding/base64/base64.go:216: var offset int = 0\nyou don't need this.\n\nhttp://codereview.appspot.com/5477082/diff/7001/src/pkg/encoding/base64/base64.go#newcode224\nsrc/pkg/encoding/base64/base64.go:224: for j := 0; j < 4; j++ {\nrun a loop with two variables. one steps through the input, one steps through the output. the input one is incremented every loop. the output one advances only when we accept a byte. the code will be shorter.\n\nhttp://codereview.appspot.com/5477082/diff/7001/src/pkg/encoding/base64/base64.go#newcode236\nsrc/pkg/encoding/base64/base64.go:236: // If it's not a Linefeed or Carriage Return then add\ns/Linefeed/newline/\ns/Carriage Return/carriage return/\n\nhttp://codereview.appspot.com/5477082/diff/7001/src/pkg/encoding/base64/base64.go#newcode238\nsrc/pkg/encoding/base64/base64.go:238: if in != 13 && in != 10 {\nuse \\r and \\n.\n\nhttp://codereview.appspot.com/5477082/diff/7001/src/pkg/encoding/base64/base64_test.go\nFile src/pkg/encoding/base64/base64_test.go (right):\n\nhttp://codereview.appspot.com/5477082/diff/7001/src/pkg/encoding/base64/base64_test.go#newcode41\nsrc/pkg/encoding/base64/base64_test.go:41: {\"sure.\", \"c3VyZS4=\", \"c3Vy\\nZS4=\\r\\n\"},\ni'd put \\r and \\n and \\r\\n in a number of these inputs in multiple places.\nin the test loop, i'd then test it with and without the \\r\\n stripped",
			"disapproval": false,
			"date": "2011-12-15 18:46:54.048393",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Dec 16, 2011, at 10:41 AM, Rob 'Commander' Pike wrote:\n\n> i was thinking something like this, untried and untested and incomplete.\n> \n> \t\tfor j, k := i*4, 0; j < len(src) && k < 4; j++ {\n> \t\t\tin := src[j]\n> \t\t\tif in == '\\n' || in == '\\r' {\n> \t\t\t\tcontinue\n> \t\t\t}\n> \t\t\t// details about '=' processing elided; it might work nicer now\n> \t\t\tdbuf[k] = enc.decodeMap[in]\n> \t\t\tif dbuf[k] == 0xFF {\n> \t\t\t\treturn n, false, CorruptInputError(i*4 + j)\n\nCorruptInputError(j)\n\n",
			"disapproval": false,
			"date": "2011-12-16 18:42:12.545200",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i was thinking something like this, untried and untested and incomplete.\n\n\t\tfor j, k := i*4, 0; j < len(src) && k < 4; j++ {\n\t\t\tin := src[j]\n\t\t\tif in == '\\n' || in == '\\r' {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\t// details about '=' processing elided; it might work nicer now\n\t\t\tdbuf[k] = enc.decodeMap[in]\n\t\t\tif dbuf[k] == 0xFF {\n\t\t\t\treturn n, false, CorruptInputError(i*4 + j)\n\t\t\t}\n\t\t\tk++\n\t\t}\n\n\n",
			"disapproval": false,
			"date": "2011-12-16 18:41:29.608863",
			"approval": false
		},
		{
			"sender": "bketelsen@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I can't make this work without creating at least the same two allocations I proposed in the first place, so I'm abandoning this.  I'll strip newlines & cr's before calling Decode.\n\nBrian\n\nOn Dec 16, 2011, at 1:51 PM, Rob 'Commander' Pike wrote:\n\n> \n> On Dec 16, 2011, at 10:46 AM, Brian Ketelsen wrote:\n> \n>> I appreciate the implementation advice.  That's very similar to what I had (without the pretty dual variable loop).\n>> \n>> What about the question of getting to this decode method from outside the package?  Currently the externally accessible methods have a check for  len % 4 in them, which won't work if we allow random newlines.  Do we remove the check for 4byte blocks in the public Decode method?  Or create a new method that is clearly not testing for content length?\n> \n> You fix or remove the checks that would now be wrong. It's an Internet standard: there are no rules.\n> \n> -rob\n> \n\n",
			"disapproval": false,
			"date": "2011-12-20 17:15:10.127233",
			"approval": false
		}
	],
	"owner_email": "bketelsen@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "bketelsen",
	"subject": "code review 5477082: encoding/base64: decode content with newlines",
	"created": "2011-12-13 20:12:24.614943",
	"patchsets": [
		1,
		2001,
		7001
	],
	"modified": "2011-12-20 17:16:01.890709",
	"closed": true,
	"issue": 5477082
}