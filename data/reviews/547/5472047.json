{
	"description": "godoc: wrap text documentation.\n\nFOR DISCUSSION ONLY.\n\nHere's an attempt at finally banishing 80 character limits from Go.\n\nThe only reason for keeping godoc comments to 80 characters is for\nterminal output. HTML does not need wrapping, and we do not care about\na strict limit for any other part of .go files, since most people\nuse text editors\n  - in a terminal larger than 80 characters,\n  - with a proportial font, or\n  - can cope with the occasional long line.\nGiven that, it makes most sense to just change the output in the one\nplace where it matters, namely in the text output of godoc.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"adg@golang.org",
		"rsc@golang.org",
		"r@google.com"
	],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The important side effect of this (to me at least) is that it would\nallow us to indent sections of the godoc text output.\n\nCurrently if you pull the text docs for a big package it's really hard to scan.\n\nAndrew\n",
			"disapproval": false,
			"date": "2011-12-09 04:28:28.635079",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Okay, ignore the ioctl comment. What about the rest?\n",
			"disapproval": false,
			"date": "2011-12-09 04:47:45.748718",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "counter-proposal 5472051\n\n\nPACKAGE\n\npackage utf8\n    import \"unicode/utf8\"\n\n    Package utf8 implements functions and constants to support text\n    encoded in UTF-8.  This package calls a Unicode character a rune for\n    brevity.\n\nCONSTANTS\n\nconst (\n    RuneError = unicode.ReplacementChar // the \"error\" Rune or\n\"replacement character\".\n    RuneSelf  = 0x80                    // characters below Runeself\nare represented as themselves in a single byte.\n    UTFMax    = 4                       // maximum number of bytes of\na UTF-8 encoded Unicode character.\n)\n    Numbers fundamental to the encoding.\n\n\nFUNCTIONS\n\nfunc DecodeLastRune(p []byte) (r rune, size int)\n    DecodeLastRune unpacks the last UTF-8 encoding in p and returns the\n    rune and its width in bytes.\n\nfunc DecodeLastRuneInString(s string) (r rune, size int)\n    DecodeLastRuneInString is like DecodeLastRune but its input is a\n    string.\n\nfunc DecodeRune(p []byte) (r rune, size int)\n    DecodeRune unpacks the first UTF-8 encoding in p and returns the rune\n    and its width in bytes.\n\nfunc DecodeRuneInString(s string) (r rune, size int)\n    DecodeRuneInString is like DecodeRune but its input is a string.\n\nfunc EncodeRune(p []byte, r rune) int\n    EncodeRune writes into p (which must be large enough) the UTF-8\n    encoding of the rune.  It returns the number of bytes written.\n\nfunc FullRune(p []byte) bool\n    FullRune reports whether the bytes in p begin with a full UTF-8\n    encoding of a rune.  An invalid encoding is considered a full Rune\n    since it will convert as a width-1 error rune.\n\nfunc FullRuneInString(s string) bool\n    FullRuneInString is like FullRune but its input is a string.\n\nfunc RuneCount(p []byte) int\n    RuneCount returns the number of runes in p.  Erroneous and short\n    encodings are treated as single runes of width 1 byte.\n\nfunc RuneCountInString(s string) (n int)\n    RuneCountInString is like RuneCount but its input is a string.\n\nfunc RuneLen(r rune) int\n    RuneLen returns the number of bytes required to encode the rune.\n\nfunc RuneStart(b byte) bool\n    RuneStart reports whether the byte could be the first byte of an\n    encoded rune.  Second and subsequent bytes always have the top two\n    bits set to 10.\n\nfunc Valid(p []byte) bool\n    Valid reports whether p consists entirely of valid UTF-8-encoded\n    runes.\n\nfunc ValidString(s string) bool\n    ValidString reports whether s consists entirely of valid UTF-8-encoded\n    runes.\n\n\nTYPES\n\ntype String struct {\n    // contains filtered or unexported fields\n}\n    String wraps a regular string with a small structure that provides\n    more efficient indexing by code point index, as opposed to byte index.\n    Scanning incrementally forwards or backwards is O(1) per index\n    operation (although not as fast a range clause going forwards).\n    Random access is O(N) in the length of the string, but the overhead is\n    less than always scanning from the beginning.  If the string is ASCII,\n    random access is O(1).  Unlike the built-in string type, String has\n    internal mutable state and is not thread-safe.\n\nfunc NewString(contents string) *String\n    NewString returns a new UTF-8 string with the provided contents.\n\nfunc (s *String) At(i int) rune\n    At returns the rune with index i in the String.  The sequence of runes\n    is the same as iterating over the contents with a \"for range\" clause.\n\nfunc (s *String) Init(contents string) *String\n    Init initializes an existing String to hold the provided contents.\n    It returns a pointer to the initialized String.\n\nfunc (s *String) IsASCII() bool\n    IsASCII returns a boolean indicating whether the String contains only\n    ASCII bytes.\n\nfunc (s *String) RuneCount() int\n    RuneCount returns the number of runes (Unicode code points) in the\n    String.\n\nfunc (s *String) Slice(i, j int) string\n    Slice returns the string sliced at rune positions [i:j].\n\nfunc (s *String) String() string\n    String returns the contents of the String.  This method also means the\n    String is directly printable by fmt.Print.\n",
			"disapproval": false,
			"date": "2011-12-09 14:29:40.541152",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I've uploaded a newer version with fewer ioctl comments, and a real\nword wrapper that is still rudimentary but good enough to use for\nday-to-day operation.\n\nI'm going to try using this as part of my work flow and see how I find\nit. I encourage others to do the same if you're interested.\n\n\nDave.\n",
			"disapproval": false,
			"date": "2011-12-09 05:36:19.172434",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-09 04:21:48.619457",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "There is no chance of putting ioctl's in godoc.\nIts output should be the same regardless of what its\nstandard output is connected to.  It's an abomination\nthat ls and ls | cat behave differently; godoc should not\nfollow ls down that path.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-09 04:30:51.478825",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Dec 9, 2011 at 10:27, Rob 'Commander' Pike <r@google.com> wrote:\n> at least in my view, the 'constants' section was folded clumsily, but everything else looked nice in your counterproposal.\n\ni assume you mean the const block itself.\nthat was code, so not processed specially.\nit just has long lines.  folding comments in code\nseems beyond the scope here.\n",
			"disapproval": false,
			"date": "2011-12-09 15:29:59.295440",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Dec 10, 2011 at 1:29 AM, Russ Cox <rsc@golang.org> wrote:\n\n> counter-proposal 5472051\n\nThe implementation details don't matter to me (I only spent about 5\nminutes on the code); I'm only interested in the idea that godoc\nshould wrap text automatically, which it seems like you're agreeing\nto. If so, your CL LGTM.\n\n\nDave.\n",
			"disapproval": false,
			"date": "2011-12-10 01:08:27.825508",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Dec 8, 2011 at 23:47, David Symonds <dsymonds@golang.org> wrote:\n> Okay, ignore the ioctl comment. What about the rest?\n\nI am torn and still thinking.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-09 04:50:57.689475",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "at least in my view, the 'constants' section was folded clumsily, but everything else looked nice in your counterproposal.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-12-09 15:25:52.966730",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2011-12-18 23:04:09.556903",
			"approval": false
		}
	],
	"owner_email": "dsymonds@golang.org",
	"private": false,
	"base_url": "",
	"owner": "dsymonds",
	"subject": "code review 5472047: godoc: wrap text documentation.",
	"created": "2011-12-09 04:17:10.608464",
	"patchsets": [
		1,
		2001,
		2002,
		4004
	],
	"modified": "2011-12-18 23:04:12.482101",
	"closed": true,
	"issue": 5472047
}