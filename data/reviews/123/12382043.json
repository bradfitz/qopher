{
	"description": "spec: && and || permit operands of different boolean types\n\nIf the operand types differ (newly permitted), the result\nis an untyped boolean value. Otherwise the result type is\nthe same as the (typed) operand's type.\n\nThis is a backward-compatible language change.\n\nThe actual change is in the section for logical operators.\nHowever, it required adjustments to the section on general\noperators. The text in that section would now more naturally\nfit into the sections for the different operators. Leaving\nthat cleanup for a separate CL to keep this one simple.\n\nFixes issue 4336.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"r@golang.org",
		"rsc@golang.org",
		"iant@golang.org",
		"ken@golang.org",
		"adonovan@google.com"
	],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org, rsc@golang.org, iant@golang.org, ken@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-08-02 22:30:41.300610",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12382043/diff/6001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/12382043/diff/6001/doc/go_spec.html#newcode2922\ndoc/go_spec.html:2922: For <a href=\"#Arithmetic_operators\">arithmetic operators</a>, the operand\nOn 2013/08/02 23:51:41, iant wrote:\n> I wonder if we should move the discussion of types to the Arithmetic operators\n> section, just as the discussion of types for comparisons is in the Comparison\n> operators section.\n\nYes, but (per CL description) I prefer doing this in a separate CL which does not change the language.",
			"disapproval": false,
			"date": "2013-08-02 23:58:45.330580",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "this is easy but it seems odd to have a special case like this. what's the reasoning?",
			"disapproval": false,
			"date": "2013-08-02 22:39:08.194740",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "OK. Here is the piece of reasoning, from the issue:\r\n\r\nI think we should fix this in the following [way]:\r\n\r\nx && y  is equivalent to x == true && y == true  (same for ||, of course)\r\n\r\nand the result of && is an untyped bool.\r\n\r\n\r\nIt still feels like a special case but at least I see a justification now.\r\n",
			"disapproval": false,
			"date": "2013-08-02 22:42:45.671620",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Also, since the result may depend on the value of the first operand only,\r\narguably the two shouldn't be forced to have the same type. Even the spec\r\nexplains them as control flow with the if expression.\r\n\r\nI think it will clean things up in the long run. We can group binary\r\noperators in the following classes:\r\n\r\ncomparisons\r\narithmetic operators (excl. shifts)\r\nshift operators\r\nlogical operators\r\n\r\nUntil now we have more or less tried to all keep them under one roof w/\r\nexceptions here and there. It's easier to separate them out and have\r\nspecific (and different) rules for each set.\r\n\r\nNow only arithmetic operators require operands to have identical types, and\r\nthat's the one place where we really care about it.\r\n\r\n- gri\r\n\r\n\r\n\r\nOn Fri, Aug 2, 2013 at 3:42 PM, Rob Pike <r@golang.org> wrote:\r\n\r\n> OK. Here is the piece of reasoning, from the issue:\r\n>\r\n> I think we should fix this in the following [way]:\r\n>\r\n> x && y  is equivalent to x == true && y == true  (same for ||, of course)\r\n>\r\n> and the result of && is an untyped bool.\r\n>\r\n>\r\n> It still feels like a special case but at least I see a justification now.\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-02 22:51:36.032490",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but wait for others",
			"disapproval": false,
			"date": "2013-08-02 22:56:37.272040",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-08-03 00:00:28.544990",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12382043/diff/6001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/12382043/diff/6001/doc/go_spec.html#newcode2922\ndoc/go_spec.html:2922: For <a href=\"#Arithmetic_operators\">arithmetic operators</a>, the operand\nI wonder if we should move the discussion of types to the Arithmetic operators section, just as the discussion of types for comparisons is in the Comparison operators section.",
			"disapproval": false,
			"date": "2013-08-02 23:51:41.502910",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-08-03 01:15:37.158630",
			"approval": true
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "(Sorry I didn't see this earlier.)\r\n\r\nI'm not convinced this is a backwards-compatible change.  Consider:\r\n\r\ntype B bool\r\nvar b B\r\nvar r interface{} := b || b\r\n_ = r.(B)\r\n\r\nUnder the current spec, this program terminates normally; under the new\r\nspec, it panics because r contains a bool, not a B.\r\n\r\nIn fact, this exact problem bit me today since ssa had implemented\r\n(approximately) the proposed behaviour and this caused mis-analysis of the\r\ncode in file go.tools/go/exact.go, func BinaryOp, where two exact.boolVals\r\nare ||'d or &&'d together and the result is put in an exact.Value\r\n(interface{}) on the assumption that it too is a boolVal.  That code will\r\nbe broken by the proposed change.\r\n\r\nFWIW, I don't have a strong feeling for or against this change; I just want\r\nto make sure we haven't forgotten anything.\r\n\r\ncheers\r\nalan\r\n\r\n\r\n\r\n\r\nOn 2 August 2013 21:15, <rsc@golang.org> wrote:\r\n\r\n> LGTM\r\n>\r\n>\r\n> https://codereview.appspot.**com/12382043/<https://codereview.appspot.com/12382043/>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-03 03:07:10.382560",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I guess we should say that if the types of both sides agree, the result has\r\nthat type; otherwise the result is an untyped bool. That is backwards\r\ncompatible, since the types were required to agree before.\r\n",
			"disapproval": false,
			"date": "2013-08-03 03:17:54.381020",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sigh...\r\nI will send out an updated version later this weekend.\r\n- gri\r\n\r\n\r\nOn Fri, Aug 2, 2013 at 8:17 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> I guess we should say that if the types of both sides agree, the result\r\n> has that type; otherwise the result is an untyped bool. That is backwards\r\n> compatible, since the types were required to agree before.\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-03 04:37:30.868510",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org, rsc@golang.org, iant@golang.org, ken@golang.org, adonovan@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-08-03 05:53:35.533460",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PS: I am not so strongly convinced anymore that this change is better than\r\nwhat we have now: Now the rules are actually more complicated than before.\r\nNote the \"typed operands\" trick in the phrasing to keep it simple. Better\r\nsuggestions welcome.\r\n- gri\r\n\r\n\r\nOn Fri, Aug 2, 2013 at 10:53 PM, <gri@golang.org> wrote:\r\n\r\n> Hello r@golang.org, rsc@golang.org, iant@golang.org, ken@golang.org,\r\n> adonovan@google.com (cc: golang-dev@googlegroups.com),\r\n>\r\n> Please take another look.\r\n>\r\n>\r\n> https://codereview.appspot.**com/12382043/<https://codereview.appspot.com/12382043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-03 06:03:27.031550",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 12382043: spec: && and || permit operands of different boolean types",
	"created": "2013-08-02 22:26:35.035430",
	"patchsets": [
		1,
		3001,
		6001,
		19001
	],
	"modified": "2013-08-03 06:03:27.339940",
	"closed": false,
	"issue": 12382043
}