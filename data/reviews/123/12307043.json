{
	"description": "go.talks/pkg/present: remove dead code",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.talks",
			"disapproval": false,
			"date": "2013-08-02 01:19:00.607420",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\n\r\n\r\nOn Thu, Aug 1, 2013 at 6:19 PM, <adg@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go.**talks <https://code.google.com/p/go.talks>\r\n>\r\n>\r\n> Description:\r\n> go.talks/pkg/present: remove dead code\r\n>\r\n> Please review this at https://codereview.appspot.**com/12307043/<https://codereview.appspot.com/12307043/>\r\n>\r\n> Affected files:\r\n>   M pkg/present/args.go\r\n>   M pkg/present/code.go\r\n>\r\n>\r\n> Index: pkg/present/args.go\r\n> ==============================**==============================**=======\r\n> --- a/pkg/present/args.go\r\n> +++ b/pkg/present/args.go\r\n> @@ -227,34 +227,3 @@\r\n>         }\r\n>         return m[0], m[1], nil\r\n>  }\r\n> -\r\n> -// lineToByte returns the byte index of the first byte of line n.\r\n> -// Line numbers begin at 1.\r\n> -func lineToByte(data []byte, n int) int {\r\n> -       if n <= 1 {\r\n> -               return 0\r\n> -       }\r\n> -       n--\r\n> -       for i, c := range data {\r\n> -               if c == '\\n' {\r\n> -                       if n--; n == 0 {\r\n> -                               return i + 1\r\n> -                       }\r\n> -               }\r\n> -       }\r\n> -       return len(data)\r\n> -}\r\n> -\r\n> -// byteToLine returns the number of the line containing the byte at index\r\n> i.\r\n> -func byteToLine(data []byte, i int) int {\r\n> -       l := 1\r\n> -       for j, c := range data {\r\n> -               if j == i {\r\n> -                       return l\r\n> -               }\r\n> -               if c == '\\n' {\r\n> -                       l++\r\n> -               }\r\n> -       }\r\n> -       return l\r\n> -}\r\n> Index: pkg/present/code.go\r\n> ==============================**==============================**=======\r\n> --- a/pkg/present/code.go\r\n> +++ b/pkg/present/code.go\r\n> @@ -224,70 +224,6 @@\r\n>         return 0, \"\", false, fmt.Errorf(\"unrecognized argument %v type\r\n> %T\", arg, arg)\r\n>  }\r\n>\r\n> -// oneLine returns the single line generated by a two-argument code\r\n> invocation.\r\n> -func oneLine(ctx *Context, file, text string, arg interface{}) (line,\r\n> before, after string, err error) {\r\n> -       contentBytes, err := ctx.ReadFile(file)\r\n> -       if err != nil {\r\n> -               return \"\", \"\", \"\", err\r\n> -       }\r\n> -       lines := strings.SplitAfter(string(**contentBytes), \"\\n\")\r\n> -       lineNum, pattern, isInt, err := parseArg(arg, len(lines))\r\n> -       if err != nil {\r\n> -               return \"\", \"\", \"\", err\r\n> -       }\r\n> -       var n int\r\n> -       if isInt {\r\n> -               n = lineNum - 1\r\n> -       } else {\r\n> -               n, err = match(file, 0, lines, pattern)\r\n> -               n -= 1\r\n> -       }\r\n> -       if err != nil {\r\n> -               return \"\", \"\", \"\", err\r\n> -       }\r\n> -       return lines[n],\r\n> -               strings.Join(lines[:n], \"\"),\r\n> -               strings.Join(lines[n+1:], \"\"),\r\n> -               nil\r\n> -}\r\n> -\r\n> -// multipleLines returns the text generated by a three-argument code\r\n> invocation.\r\n> -func multipleLines(ctx *Context, file string, arg1, arg2 interface{})\r\n> (line, before, after string, err error) {\r\n> -       contentBytes, err := ctx.ReadFile(file)\r\n> -       lines := strings.SplitAfter(string(**contentBytes), \"\\n\")\r\n> -       if err != nil {\r\n> -               return \"\", \"\", \"\", err\r\n> -       }\r\n> -       line1, pattern1, isInt1, err := parseArg(arg1, len(lines))\r\n> -       if err != nil {\r\n> -               return \"\", \"\", \"\", err\r\n> -       }\r\n> -       line2, pattern2, isInt2, err := parseArg(arg2, len(lines))\r\n> -       if err != nil {\r\n> -               return \"\", \"\", \"\", err\r\n> -       }\r\n> -       if !isInt1 {\r\n> -               line1, err = match(file, 0, lines, pattern1)\r\n> -       }\r\n> -       if !isInt2 {\r\n> -               line2, err = match(file, line1, lines, pattern2)\r\n> -       } else if line2 < line1 {\r\n> -               return \"\", \"\", \"\", fmt.Errorf(\"lines out of order for %q:\r\n> %d %d\", file, line1, line2)\r\n> -       }\r\n> -       if err != nil {\r\n> -               return \"\", \"\", \"\", err\r\n> -       }\r\n> -       for k := line1 - 1; k < line2; k++ {\r\n> -               if strings.HasSuffix(lines[k], \"OMIT\\n\") {\r\n> -                       lines[k] = \"\"\r\n> -               }\r\n> -       }\r\n> -       return strings.Join(lines[line1-1:**line2], \"\"),\r\n> -               strings.Join(lines[:line1-1], \"\"),\r\n> -               strings.Join(lines[line2:], \"\"),\r\n> -               nil\r\n> -}\r\n> -\r\n>  // match identifies the input line that matches the pattern in a code\r\n> invocation.\r\n>  // If start>0, match lines starting there rather than at the beginning.\r\n>  // The return value is 1-indexed.\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-02 01:23:31.793460",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=5a540a4c44d5&repo=talks ***\n\ngo.talks/pkg/present: remove dead code\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/12307043",
			"disapproval": false,
			"date": "2013-08-02 01:26:36.423410",
			"approval": false
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 12307043: go.talks/pkg/present: remove dead code",
	"created": "2013-08-02 01:18:41.526670",
	"patchsets": [
		1,
		5001
	],
	"modified": "2013-08-02 01:26:38.817540",
	"closed": true,
	"issue": 12307043
}