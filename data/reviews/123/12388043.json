{
	"description": "libbio: add casts to remove -Wconversion warnings\n\nUpdate issue 5764",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nLet's see what breaks. :-)\r\n",
			"disapproval": false,
			"date": "2013-08-03 01:37:04.961580",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-08-03 00:03:12.885920",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Update issue 5764 ?\r\n\r\nOn Sat, Aug 3, 2013 at 10:03 AM,  <iant@golang.org> wrote:\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> libbio: add casts to remove -Wconversion warnings\r\n>\r\n> Please review this at https://codereview.appspot.com/12388043/\r\n>\r\n> Affected files:\r\n>   src/libbio/bflush.c\r\n>   src/libbio/bgetc.c\r\n>   src/libbio/bgetrune.c\r\n>   src/libbio/bprint.c\r\n>   src/libbio/bputc.c\r\n>   src/libbio/bputrune.c\r\n>   src/libbio/brdline.c\r\n>   src/libbio/brdstr.c\r\n>   src/libbio/bread.c\r\n>   src/libbio/bseek.c\r\n>   src/libbio/bwrite.c\r\n>\r\n>\r\n> Index: src/libbio/bflush.c\r\n> ===================================================================\r\n> --- a/src/libbio/bflush.c\r\n> +++ b/src/libbio/bflush.c\r\n> @@ -37,7 +37,7 @@\r\n>                 n = bp->bsize+bp->ocount;\r\n>                 if(n == 0)\r\n>                         return 0;\r\n> -               c = write(bp->fid, bp->bbuf, n);\r\n> +               c = (int)write(bp->fid, bp->bbuf, (size_t)n);\r\n>                 if(n == c) {\r\n>                         bp->offset += n;\r\n>                         bp->ocount = -bp->bsize;\r\n> Index: src/libbio/bgetc.c\r\n> ===================================================================\r\n> --- a/src/libbio/bgetc.c\r\n> +++ b/src/libbio/bgetc.c\r\n> @@ -49,7 +49,7 @@\r\n>          * buffer to allow that many ungets.\r\n>          */\r\n>         memmove(bp->bbuf-Bungetsize, bp->ebuf-Bungetsize, Bungetsize);\r\n> -       i = read(bp->fid, bp->bbuf, bp->bsize);\r\n> +       i = (int)read(bp->fid, bp->bbuf, (size_t)bp->bsize);\r\n>         bp->gbuf = bp->bbuf;\r\n>         if(i <= 0) {\r\n>                 bp->state = Bracteof;\r\n> @@ -58,7 +58,7 @@\r\n>                 return Beof;\r\n>         }\r\n>         if(i < bp->bsize) {\r\n> -               memmove(bp->ebuf-i-Bungetsize, bp->bbuf-Bungetsize,\r\n> i+Bungetsize);\r\n> +               memmove(bp->ebuf-i-Bungetsize, bp->bbuf-Bungetsize,\r\n> (size_t)(i+Bungetsize));\r\n>                 bp->gbuf = bp->ebuf-i;\r\n>         }\r\n>         bp->icount = -i;\r\n> Index: src/libbio/bgetrune.c\r\n> ===================================================================\r\n> --- a/src/libbio/bgetrune.c\r\n> +++ b/src/libbio/bgetrune.c\r\n> @@ -40,13 +40,13 @@\r\n>                 bp->runesize = 1;\r\n>                 return c;\r\n>         }\r\n> -       str[0] = c;\r\n> +       str[0] = (char)c;\r\n>\r\n>         for(i=1;;) {\r\n>                 c = Bgetc(bp);\r\n>                 if(c < 0)\r\n>                         return c;\r\n> -               str[i++] = c;\r\n> +               str[i++] = (char)c;\r\n>\r\n>                 if(fullrune(str, i)) {\r\n>                         bp->runesize = chartorune(&rune, str);\r\n> Index: src/libbio/bprint.c\r\n> ===================================================================\r\n> --- a/src/libbio/bprint.c\r\n> +++ b/src/libbio/bprint.c\r\n> @@ -49,7 +49,7 @@\r\n>                 return 0;\r\n>\r\n>         bp = f->farg;\r\n> -       bp->ocount = (char*)f->to - (char*)f->stop;\r\n> +       bp->ocount = (int)((char*)f->to - (char*)f->stop);\r\n>         if(Bflush(bp) < 0) {\r\n>                 f->stop = nil;\r\n>                 f->to = nil;\r\n> @@ -76,7 +76,7 @@\r\n>         n = fmtvprint(&f, fmt, arg);\r\n>\r\n>         if(f.stop != nil)\r\n> -               bp->ocount = (char*)f.to - (char*)f.stop;\r\n> +               bp->ocount = (int)((char*)f.to - (char*)f.stop);\r\n>\r\n>         return n;\r\n>  }\r\n> Index: src/libbio/bputc.c\r\n> ===================================================================\r\n> --- a/src/libbio/bputc.c\r\n> +++ b/src/libbio/bputc.c\r\n> @@ -35,7 +35,7 @@\r\n>         for(;;) {\r\n>                 i = bp->ocount;\r\n>                 if(i) {\r\n> -                       bp->ebuf[i++] = c;\r\n> +                       bp->ebuf[i++] = (unsigned char)c;\r\n>                         bp->ocount = i;\r\n>                         return 0;\r\n>                 }\r\n> Index: src/libbio/bputrune.c\r\n> ===================================================================\r\n> --- a/src/libbio/bputrune.c\r\n> +++ b/src/libbio/bputrune.c\r\n> @@ -35,9 +35,9 @@\r\n>         char str[UTFmax];\r\n>         int n;\r\n>\r\n> -       rune = c;\r\n> +       rune = (Rune)c;\r\n>         if(rune < Runeself) {\r\n> -               Bputc(bp, rune);\r\n> +               Bputc(bp, (int)rune);\r\n>                 return 1;\r\n>         }\r\n>         n = runetochar(str, &rune);\r\n> Index: src/libbio/brdline.c\r\n> ===================================================================\r\n> --- a/src/libbio/brdline.c\r\n> +++ b/src/libbio/brdline.c\r\n> @@ -51,9 +51,9 @@\r\n>          * first try in remainder of buffer (gbuf doesn't change)\r\n>          */\r\n>         ip = (char*)bp->ebuf - i;\r\n> -       ep = memchr(ip, delim, i);\r\n> +       ep = memchr(ip, delim, (size_t)i);\r\n>         if(ep) {\r\n> -               j = (ep - ip) + 1;\r\n> +               j = (int)((ep - ip) + 1);\r\n>                 bp->rdline = j;\r\n>                 bp->icount += j;\r\n>                 return ip;\r\n> @@ -63,7 +63,7 @@\r\n>          * copy data to beginning of buffer\r\n>          */\r\n>         if(i < bp->bsize)\r\n> -               memmove(bp->bbuf, ip, i);\r\n> +               memmove(bp->bbuf, ip, (size_t)i);\r\n>         bp->gbuf = bp->bbuf;\r\n>\r\n>         /*\r\n> @@ -71,12 +71,12 @@\r\n>          */\r\n>         ip = (char*)bp->bbuf + i;\r\n>         while(i < bp->bsize) {\r\n> -               j = read(bp->fid, ip, bp->bsize-i);\r\n> +               j = (int)read(bp->fid, ip, (size_t)(bp->bsize-i));\r\n>                 if(j <= 0) {\r\n>                         /*\r\n>                          * end of file with no delim\r\n>                          */\r\n> -                       memmove(bp->ebuf-i, bp->bbuf, i);\r\n> +                       memmove(bp->ebuf-i, bp->bbuf, (size_t)i);\r\n>                         bp->rdline = i;\r\n>                         bp->icount = -i;\r\n>                         bp->gbuf = bp->ebuf-i;\r\n> @@ -84,7 +84,7 @@\r\n>                 }\r\n>                 bp->offset += j;\r\n>                 i += j;\r\n> -               ep = memchr(ip, delim, j);\r\n> +               ep = memchr(ip, delim, (size_t)j);\r\n>                 if(ep) {\r\n>                         /*\r\n>                          * found in new piece\r\n> @@ -92,10 +92,10 @@\r\n>                          */\r\n>                         ip = (char*)bp->ebuf - i;\r\n>                         if(i < bp->bsize){\r\n> -                               memmove(ip, bp->bbuf, i);\r\n> +                               memmove(ip, bp->bbuf, (size_t)i);\r\n>                                 bp->gbuf = (unsigned char*)ip;\r\n>                         }\r\n> -                       j = (ep - (char*)bp->bbuf) + 1;\r\n> +                       j = (int)((ep - (char*)bp->bbuf) + 1);\r\n>                         bp->rdline = j;\r\n>                         bp->icount = j - i;\r\n>                         return ip;\r\n> Index: src/libbio/brdstr.c\r\n> ===================================================================\r\n> --- a/src/libbio/brdstr.c\r\n> +++ b/src/libbio/brdstr.c\r\n> @@ -37,14 +37,14 @@\r\n>                 linelen = Blinelen(bp);\r\n>                 if(n == 0 && linelen == 0)\r\n>                         return nil;\r\n> -               nq = realloc(q, n+linelen+1);\r\n> +               nq = realloc(q, (size_t)(n+linelen+1));\r\n>                 if(nq == nil) {\r\n>                         free(q);\r\n>                         return nil;\r\n>                 }\r\n>                 q = nq;\r\n>                 if(p != nil) {\r\n> -                       memmove(q+n, p, linelen);\r\n> +                       memmove(q+n, p, (size_t)linelen);\r\n>                         n += linelen;\r\n>                         if(nulldelim)\r\n>                                 q[n-1] = '\\0';\r\n> Index: src/libbio/bread.c\r\n> ===================================================================\r\n> --- a/src/libbio/bread.c\r\n> +++ b/src/libbio/bread.c\r\n> @@ -41,11 +41,11 @@\r\n>         while(c > 0) {\r\n>                 n = -ic;\r\n>                 if(n > c)\r\n> -                       n = c;\r\n> +                       n = (int)c;\r\n>                 if(n == 0) {\r\n>                         if(bp->state != Bractive)\r\n>                                 break;\r\n> -                       i = read(bp->fid, bp->bbuf, bp->bsize);\r\n> +                       i = (int)read(bp->fid, bp->bbuf, (size_t)bp->bsize);\r\n>                         if(i <= 0) {\r\n>                                 bp->state = Bracteof;\r\n>                                 if(i < 0)\r\n> @@ -55,13 +55,13 @@\r\n>                         bp->gbuf = bp->bbuf;\r\n>                         bp->offset += i;\r\n>                         if(i < bp->bsize) {\r\n> -                               memmove(bp->ebuf-i, bp->bbuf, i);\r\n> +                               memmove(bp->ebuf-i, bp->bbuf, (size_t)i);\r\n>                                 bp->gbuf = bp->ebuf-i;\r\n>                         }\r\n>                         ic = -i;\r\n>                         continue;\r\n>                 }\r\n> -               memmove(p, bp->ebuf+ic, n);\r\n> +               memmove(p, bp->ebuf+ic, (size_t)n);\r\n>                 c -= n;\r\n>                 ic += n;\r\n>                 p += n;\r\n> Index: src/libbio/bseek.c\r\n> ===================================================================\r\n> --- a/src/libbio/bseek.c\r\n> +++ b/src/libbio/bseek.c\r\n> @@ -62,9 +62,9 @@\r\n>                  */\r\n>                 if(base == 0) {\r\n>                         d = n - Boffset(bp);\r\n> -                       bufsz = bp->ebuf - bp->gbuf;\r\n> +                       bufsz = (int)(bp->ebuf - bp->gbuf);\r\n>                         if(-bufsz <= d && d <= bufsz){\r\n> -                               bp->icount += d;\r\n> +                               bp->icount += (int)d;\r\n>                                 if(d >= 0) {\r\n>                                         if(bp->icount <= 0)\r\n>                                                 return n;\r\n> Index: src/libbio/bwrite.c\r\n> ===================================================================\r\n> --- a/src/libbio/bwrite.c\r\n> +++ b/src/libbio/bwrite.c\r\n> @@ -41,11 +41,11 @@\r\n>         while(c > 0) {\r\n>                 n = -oc;\r\n>                 if(n > c)\r\n> -                       n = c;\r\n> +                       n = (int)c;\r\n>                 if(n == 0) {\r\n>                         if(bp->state != Bwactive)\r\n>                                 return Beof;\r\n> -                       i = write(bp->fid, bp->bbuf, bp->bsize);\r\n> +                       i = (int)write(bp->fid, bp->bbuf,\r\n> (size_t)bp->bsize);\r\n>                         if(i != bp->bsize) {\r\n>                                 bp->state = Binactive;\r\n>                                 return Beof;\r\n> @@ -54,7 +54,7 @@\r\n>                         oc = -bp->bsize;\r\n>                         continue;\r\n>                 }\r\n> -               memmove(bp->ebuf+oc, p, n);\r\n> +               memmove(bp->ebuf+oc, p, (size_t)n);\r\n>                 oc += n;\r\n>                 c -= n;\r\n>                 p += n;\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-03 00:04:49.768920",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Aug 2, 2013 at 5:04 PM, Dave Cheney <dave@cheney.net> wrote:\r\n> Update issue 5764 ?\r\n\r\nThanks, done.\r\n\r\nIan\r\n\r\n> On Sat, Aug 3, 2013 at 10:03 AM,  <iant@golang.org> wrote:\r\n>> Reviewers: golang-dev1,\r\n>>\r\n>> Message:\r\n>> Hello golang-dev@googlegroups.com,\r\n>>\r\n>> I'd like you to review this change to\r\n>> https://go.googlecode.com/hg/\r\n>>\r\n>>\r\n>> Description:\r\n>> libbio: add casts to remove -Wconversion warnings\r\n>>\r\n>> Please review this at https://codereview.appspot.com/12388043/\r\n>>\r\n>> Affected files:\r\n>>   src/libbio/bflush.c\r\n>>   src/libbio/bgetc.c\r\n>>   src/libbio/bgetrune.c\r\n>>   src/libbio/bprint.c\r\n>>   src/libbio/bputc.c\r\n>>   src/libbio/bputrune.c\r\n>>   src/libbio/brdline.c\r\n>>   src/libbio/brdstr.c\r\n>>   src/libbio/bread.c\r\n>>   src/libbio/bseek.c\r\n>>   src/libbio/bwrite.c\r\n>>\r\n>>\r\n>> Index: src/libbio/bflush.c\r\n>> ===================================================================\r\n>> --- a/src/libbio/bflush.c\r\n>> +++ b/src/libbio/bflush.c\r\n>> @@ -37,7 +37,7 @@\r\n>>                 n = bp->bsize+bp->ocount;\r\n>>                 if(n == 0)\r\n>>                         return 0;\r\n>> -               c = write(bp->fid, bp->bbuf, n);\r\n>> +               c = (int)write(bp->fid, bp->bbuf, (size_t)n);\r\n>>                 if(n == c) {\r\n>>                         bp->offset += n;\r\n>>                         bp->ocount = -bp->bsize;\r\n>> Index: src/libbio/bgetc.c\r\n>> ===================================================================\r\n>> --- a/src/libbio/bgetc.c\r\n>> +++ b/src/libbio/bgetc.c\r\n>> @@ -49,7 +49,7 @@\r\n>>          * buffer to allow that many ungets.\r\n>>          */\r\n>>         memmove(bp->bbuf-Bungetsize, bp->ebuf-Bungetsize, Bungetsize);\r\n>> -       i = read(bp->fid, bp->bbuf, bp->bsize);\r\n>> +       i = (int)read(bp->fid, bp->bbuf, (size_t)bp->bsize);\r\n>>         bp->gbuf = bp->bbuf;\r\n>>         if(i <= 0) {\r\n>>                 bp->state = Bracteof;\r\n>> @@ -58,7 +58,7 @@\r\n>>                 return Beof;\r\n>>         }\r\n>>         if(i < bp->bsize) {\r\n>> -               memmove(bp->ebuf-i-Bungetsize, bp->bbuf-Bungetsize,\r\n>> i+Bungetsize);\r\n>> +               memmove(bp->ebuf-i-Bungetsize, bp->bbuf-Bungetsize,\r\n>> (size_t)(i+Bungetsize));\r\n>>                 bp->gbuf = bp->ebuf-i;\r\n>>         }\r\n>>         bp->icount = -i;\r\n>> Index: src/libbio/bgetrune.c\r\n>> ===================================================================\r\n>> --- a/src/libbio/bgetrune.c\r\n>> +++ b/src/libbio/bgetrune.c\r\n>> @@ -40,13 +40,13 @@\r\n>>                 bp->runesize = 1;\r\n>>                 return c;\r\n>>         }\r\n>> -       str[0] = c;\r\n>> +       str[0] = (char)c;\r\n>>\r\n>>         for(i=1;;) {\r\n>>                 c = Bgetc(bp);\r\n>>                 if(c < 0)\r\n>>                         return c;\r\n>> -               str[i++] = c;\r\n>> +               str[i++] = (char)c;\r\n>>\r\n>>                 if(fullrune(str, i)) {\r\n>>                         bp->runesize = chartorune(&rune, str);\r\n>> Index: src/libbio/bprint.c\r\n>> ===================================================================\r\n>> --- a/src/libbio/bprint.c\r\n>> +++ b/src/libbio/bprint.c\r\n>> @@ -49,7 +49,7 @@\r\n>>                 return 0;\r\n>>\r\n>>         bp = f->farg;\r\n>> -       bp->ocount = (char*)f->to - (char*)f->stop;\r\n>> +       bp->ocount = (int)((char*)f->to - (char*)f->stop);\r\n>>         if(Bflush(bp) < 0) {\r\n>>                 f->stop = nil;\r\n>>                 f->to = nil;\r\n>> @@ -76,7 +76,7 @@\r\n>>         n = fmtvprint(&f, fmt, arg);\r\n>>\r\n>>         if(f.stop != nil)\r\n>> -               bp->ocount = (char*)f.to - (char*)f.stop;\r\n>> +               bp->ocount = (int)((char*)f.to - (char*)f.stop);\r\n>>\r\n>>         return n;\r\n>>  }\r\n>> Index: src/libbio/bputc.c\r\n>> ===================================================================\r\n>> --- a/src/libbio/bputc.c\r\n>> +++ b/src/libbio/bputc.c\r\n>> @@ -35,7 +35,7 @@\r\n>>         for(;;) {\r\n>>                 i = bp->ocount;\r\n>>                 if(i) {\r\n>> -                       bp->ebuf[i++] = c;\r\n>> +                       bp->ebuf[i++] = (unsigned char)c;\r\n>>                         bp->ocount = i;\r\n>>                         return 0;\r\n>>                 }\r\n>> Index: src/libbio/bputrune.c\r\n>> ===================================================================\r\n>> --- a/src/libbio/bputrune.c\r\n>> +++ b/src/libbio/bputrune.c\r\n>> @@ -35,9 +35,9 @@\r\n>>         char str[UTFmax];\r\n>>         int n;\r\n>>\r\n>> -       rune = c;\r\n>> +       rune = (Rune)c;\r\n>>         if(rune < Runeself) {\r\n>> -               Bputc(bp, rune);\r\n>> +               Bputc(bp, (int)rune);\r\n>>                 return 1;\r\n>>         }\r\n>>         n = runetochar(str, &rune);\r\n>> Index: src/libbio/brdline.c\r\n>> ===================================================================\r\n>> --- a/src/libbio/brdline.c\r\n>> +++ b/src/libbio/brdline.c\r\n>> @@ -51,9 +51,9 @@\r\n>>          * first try in remainder of buffer (gbuf doesn't change)\r\n>>          */\r\n>>         ip = (char*)bp->ebuf - i;\r\n>> -       ep = memchr(ip, delim, i);\r\n>> +       ep = memchr(ip, delim, (size_t)i);\r\n>>         if(ep) {\r\n>> -               j = (ep - ip) + 1;\r\n>> +               j = (int)((ep - ip) + 1);\r\n>>                 bp->rdline = j;\r\n>>                 bp->icount += j;\r\n>>                 return ip;\r\n>> @@ -63,7 +63,7 @@\r\n>>          * copy data to beginning of buffer\r\n>>          */\r\n>>         if(i < bp->bsize)\r\n>> -               memmove(bp->bbuf, ip, i);\r\n>> +               memmove(bp->bbuf, ip, (size_t)i);\r\n>>         bp->gbuf = bp->bbuf;\r\n>>\r\n>>         /*\r\n>> @@ -71,12 +71,12 @@\r\n>>          */\r\n>>         ip = (char*)bp->bbuf + i;\r\n>>         while(i < bp->bsize) {\r\n>> -               j = read(bp->fid, ip, bp->bsize-i);\r\n>> +               j = (int)read(bp->fid, ip, (size_t)(bp->bsize-i));\r\n>>                 if(j <= 0) {\r\n>>                         /*\r\n>>                          * end of file with no delim\r\n>>                          */\r\n>> -                       memmove(bp->ebuf-i, bp->bbuf, i);\r\n>> +                       memmove(bp->ebuf-i, bp->bbuf, (size_t)i);\r\n>>                         bp->rdline = i;\r\n>>                         bp->icount = -i;\r\n>>                         bp->gbuf = bp->ebuf-i;\r\n>> @@ -84,7 +84,7 @@\r\n>>                 }\r\n>>                 bp->offset += j;\r\n>>                 i += j;\r\n>> -               ep = memchr(ip, delim, j);\r\n>> +               ep = memchr(ip, delim, (size_t)j);\r\n>>                 if(ep) {\r\n>>                         /*\r\n>>                          * found in new piece\r\n>> @@ -92,10 +92,10 @@\r\n>>                          */\r\n>>                         ip = (char*)bp->ebuf - i;\r\n>>                         if(i < bp->bsize){\r\n>> -                               memmove(ip, bp->bbuf, i);\r\n>> +                               memmove(ip, bp->bbuf, (size_t)i);\r\n>>                                 bp->gbuf = (unsigned char*)ip;\r\n>>                         }\r\n>> -                       j = (ep - (char*)bp->bbuf) + 1;\r\n>> +                       j = (int)((ep - (char*)bp->bbuf) + 1);\r\n>>                         bp->rdline = j;\r\n>>                         bp->icount = j - i;\r\n>>                         return ip;\r\n>> Index: src/libbio/brdstr.c\r\n>> ===================================================================\r\n>> --- a/src/libbio/brdstr.c\r\n>> +++ b/src/libbio/brdstr.c\r\n>> @@ -37,14 +37,14 @@\r\n>>                 linelen = Blinelen(bp);\r\n>>                 if(n == 0 && linelen == 0)\r\n>>                         return nil;\r\n>> -               nq = realloc(q, n+linelen+1);\r\n>> +               nq = realloc(q, (size_t)(n+linelen+1));\r\n>>                 if(nq == nil) {\r\n>>                         free(q);\r\n>>                         return nil;\r\n>>                 }\r\n>>                 q = nq;\r\n>>                 if(p != nil) {\r\n>> -                       memmove(q+n, p, linelen);\r\n>> +                       memmove(q+n, p, (size_t)linelen);\r\n>>                         n += linelen;\r\n>>                         if(nulldelim)\r\n>>                                 q[n-1] = '\\0';\r\n>> Index: src/libbio/bread.c\r\n>> ===================================================================\r\n>> --- a/src/libbio/bread.c\r\n>> +++ b/src/libbio/bread.c\r\n>> @@ -41,11 +41,11 @@\r\n>>         while(c > 0) {\r\n>>                 n = -ic;\r\n>>                 if(n > c)\r\n>> -                       n = c;\r\n>> +                       n = (int)c;\r\n>>                 if(n == 0) {\r\n>>                         if(bp->state != Bractive)\r\n>>                                 break;\r\n>> -                       i = read(bp->fid, bp->bbuf, bp->bsize);\r\n>> +                       i = (int)read(bp->fid, bp->bbuf, (size_t)bp->bsize);\r\n>>                         if(i <= 0) {\r\n>>                                 bp->state = Bracteof;\r\n>>                                 if(i < 0)\r\n>> @@ -55,13 +55,13 @@\r\n>>                         bp->gbuf = bp->bbuf;\r\n>>                         bp->offset += i;\r\n>>                         if(i < bp->bsize) {\r\n>> -                               memmove(bp->ebuf-i, bp->bbuf, i);\r\n>> +                               memmove(bp->ebuf-i, bp->bbuf, (size_t)i);\r\n>>                                 bp->gbuf = bp->ebuf-i;\r\n>>                         }\r\n>>                         ic = -i;\r\n>>                         continue;\r\n>>                 }\r\n>> -               memmove(p, bp->ebuf+ic, n);\r\n>> +               memmove(p, bp->ebuf+ic, (size_t)n);\r\n>>                 c -= n;\r\n>>                 ic += n;\r\n>>                 p += n;\r\n>> Index: src/libbio/bseek.c\r\n>> ===================================================================\r\n>> --- a/src/libbio/bseek.c\r\n>> +++ b/src/libbio/bseek.c\r\n>> @@ -62,9 +62,9 @@\r\n>>                  */\r\n>>                 if(base == 0) {\r\n>>                         d = n - Boffset(bp);\r\n>> -                       bufsz = bp->ebuf - bp->gbuf;\r\n>> +                       bufsz = (int)(bp->ebuf - bp->gbuf);\r\n>>                         if(-bufsz <= d && d <= bufsz){\r\n>> -                               bp->icount += d;\r\n>> +                               bp->icount += (int)d;\r\n>>                                 if(d >= 0) {\r\n>>                                         if(bp->icount <= 0)\r\n>>                                                 return n;\r\n>> Index: src/libbio/bwrite.c\r\n>> ===================================================================\r\n>> --- a/src/libbio/bwrite.c\r\n>> +++ b/src/libbio/bwrite.c\r\n>> @@ -41,11 +41,11 @@\r\n>>         while(c > 0) {\r\n>>                 n = -oc;\r\n>>                 if(n > c)\r\n>> -                       n = c;\r\n>> +                       n = (int)c;\r\n>>                 if(n == 0) {\r\n>>                         if(bp->state != Bwactive)\r\n>>                                 return Beof;\r\n>> -                       i = write(bp->fid, bp->bbuf, bp->bsize);\r\n>> +                       i = (int)write(bp->fid, bp->bbuf,\r\n>> (size_t)bp->bsize);\r\n>>                         if(i != bp->bsize) {\r\n>>                                 bp->state = Binactive;\r\n>>                                 return Beof;\r\n>> @@ -54,7 +54,7 @@\r\n>>                         oc = -bp->bsize;\r\n>>                         continue;\r\n>>                 }\r\n>> -               memmove(bp->ebuf+oc, p, n);\r\n>> +               memmove(bp->ebuf+oc, p, (size_t)n);\r\n>>                 oc += n;\r\n>>                 c -= n;\r\n>>                 p += n;\r\n>>\r\n>>\r\n>> --\r\n>>\r\n>> ---You received this message because you are subscribed to the Google Groups\r\n>> \"golang-dev\" group.\r\n>> To unsubscribe from this group and stop receiving emails from it, send an\r\n>> email to golang-dev+unsubscribe@googlegroups.com.\r\n>> For more options, visit https://groups.google.com/groups/opt_out.\r\n>>\r\n>>\r\n",
			"disapproval": false,
			"date": "2013-08-03 00:06:46.382200",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=ec2c681e5f21 ***\n\nlibbio: add casts to remove -Wconversion warnings\n\nUpdate issue 5764\n\nR=golang-dev, dave, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/12388043",
			"disapproval": false,
			"date": "2013-08-03 18:36:51.671810",
			"approval": false
		}
	],
	"owner_email": "iant@golang.org",
	"private": false,
	"base_url": "",
	"owner": "iant",
	"subject": "code review 12388043: libbio: add casts to remove -Wconversion warnings",
	"created": "2013-08-03 00:03:06.159050",
	"patchsets": [
		1,
		5001
	],
	"modified": "2013-08-03 18:36:54.184130",
	"closed": true,
	"issue": 12388043
}