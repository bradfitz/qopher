{
	"description": "net/textproto: more efficient header parsing\n\nA co creation with bradfitz\n\n* add fast path for header lines which are not continuations\n* pass hint to better size initial mime header map\n\nlucky(~/go/src/pkg/net/http) % ~/go/misc/benchcmp {golden,new}.txt\nbenchmark                          old ns/op    new ns/op    delta\nBenchmarkReadRequestChrome             10073         8348  -17.12%\nBenchmarkReadRequestCurl                4368         4350   -0.41%\nBenchmarkReadRequestApachebench         4412         4397   -0.34%\nBenchmarkReadRequestSiege               6431         5924   -7.88%\nBenchmarkReadRequestWrk                 2820         3146  +11.56%\n\nbenchmark                           old MB/s     new MB/s  speedup\nBenchmarkReadRequestChrome             60.66        73.18    1.21x\nBenchmarkReadRequestCurl               17.85        17.93    1.00x\nBenchmarkReadRequestApachebench        18.58        18.65    1.00x\nBenchmarkReadRequestSiege              23.48        25.49    1.09x\nBenchmarkReadRequestWrk                14.18        12.71    0.90x\n\nbenchmark                         old allocs   new allocs    delta\nBenchmarkReadRequestChrome                32           26  -18.75%\nBenchmarkReadRequestCurl                  15           15    0.00%\nBenchmarkReadRequestApachebench           16           15   -6.25%\nBenchmarkReadRequestSiege                 22           19  -13.64%\nBenchmarkReadRequestWrk                   11           11    0.00%\n\nbenchmark                          old bytes    new bytes    delta\nBenchmarkReadRequestChrome              3148         2216  -29.61%\nBenchmarkReadRequestCurl                 905         1413   56.13%\nBenchmarkReadRequestApachebench          956         1413   47.80%\nBenchmarkReadRequestSiege               1397         1522    8.95%\nBenchmarkReadRequestWrk                  757         1369   80.85%",
	"cc": [
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-02-13 04:57:49.096330",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks Brad, PTAL. I'll leave this a while for others to comment.\n\nhttps://codereview.appspot.com/7300098/diff/5002/src/pkg/net/textproto/reader.go\nFile src/pkg/net/textproto/reader.go (right):\n\nhttps://codereview.appspot.com/7300098/diff/5002/src/pkg/net/textproto/reader.go#newcode131\nsrc/pkg/net/textproto/reader.go:131: // Optimistically assume we have buffered data and we can\nDone. Yes, it took me a little time to understand what was happening hear. RFC2822 folded lines are rare, especially in the HTTP context.\n\nhttps://codereview.appspot.com/7300098/diff/5002/src/pkg/net/textproto/reader.go#newcode131\nsrc/pkg/net/textproto/reader.go:131: // Optimistically assume we have buffered data and we can\nOn 2013/02/13 05:27:06, bradfitz wrote:\n> I know I wrote this sentence, but it's not really a sentence.  I think it's\n> missing a word or two.  Feel free to rewrite it all, since I can barely remember\n> what this does months later, despite writing the comment.\n> \n> Maybe:\n> \n> // Optimistically assume that we have a buffered line that\n> // starts with an ASCII letter (the next header key), so we can avoid\n> // copying that buffered data around in memory and skipping over\n> // non-existent whitespace.\n> \n> Which is maybe a bit long, but at least says what's going on and isn't missing\n> words.\n> \n> Alternatives welcomes, if you care.\n> \n\nDone.\n\nhttps://codereview.appspot.com/7300098/diff/5002/src/pkg/net/textproto/textproto.go\nFile src/pkg/net/textproto/textproto.go (right):\n\nhttps://codereview.appspot.com/7300098/diff/5002/src/pkg/net/textproto/textproto.go#newcode153\nsrc/pkg/net/textproto/textproto.go:153: return (b >= 'a' && b <= 'z')\nOn 2013/02/13 05:27:06, bradfitz wrote:\n> drop parens.  also, I think Russ prefers the style:\n> \n> return 'a' <= b && b <= 'z'\n> \n> (so the bees are next to each other)\n\nDone.",
			"disapproval": false,
			"date": "2013-02-13 09:00:21.613480",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dave@cheney.net",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7300098/diff/2001/src/pkg/net/textproto/textproto.go\nFile src/pkg/net/textproto/textproto.go (right):\n\nhttps://codereview.appspot.com/7300098/diff/2001/src/pkg/net/textproto/textproto.go#newcode152\nsrc/pkg/net/textproto/textproto.go:152: b |= 0x20 // make upper case\nlower case",
			"disapproval": false,
			"date": "2013-02-12 23:37:15.631780",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM after nits\n\nhttps://codereview.appspot.com/7300098/diff/5002/src/pkg/net/textproto/reader.go\nFile src/pkg/net/textproto/reader.go (right):\n\nhttps://codereview.appspot.com/7300098/diff/5002/src/pkg/net/textproto/reader.go#newcode131\nsrc/pkg/net/textproto/reader.go:131: // Optimistically assume we have buffered data and we can\nI know I wrote this sentence, but it's not really a sentence.  I think it's missing a word or two.  Feel free to rewrite it all, since I can barely remember what this does months later, despite writing the comment.\n\nMaybe:\n\n// Optimistically assume that we have a buffered line that\n// starts with an ASCII letter (the next header key), so we can avoid\n// copying that buffered data around in memory and skipping over\n// non-existent whitespace.\n\nWhich is maybe a bit long, but at least says what's going on and isn't missing words.\n\nAlternatives welcomes, if you care.\n\nhttps://codereview.appspot.com/7300098/diff/5002/src/pkg/net/textproto/textproto.go\nFile src/pkg/net/textproto/textproto.go (right):\n\nhttps://codereview.appspot.com/7300098/diff/5002/src/pkg/net/textproto/textproto.go#newcode153\nsrc/pkg/net/textproto/textproto.go:153: return (b >= 'a' && b <= 'z')\ndrop parens.  also, I think Russ prefers the style:\n\nreturn 'a' <= b && b <= 'z'\n\n(so the bees are next to each other)",
			"disapproval": false,
			"date": "2013-02-13 05:27:06.719150",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=a394d9eeb49a ***\n\nnet/textproto: more efficient header parsing\n\nA co creation with bradfitz\n\n* add fast path for header lines which are not continuations\n* pass hint to better size initial mime header map\n\nlucky(~/go/src/pkg/net/http) % ~/go/misc/benchcmp {golden,new}.txt\nbenchmark                          old ns/op    new ns/op    delta\nBenchmarkReadRequestChrome             10073         8348  -17.12%\nBenchmarkReadRequestCurl                4368         4350   -0.41%\nBenchmarkReadRequestApachebench         4412         4397   -0.34%\nBenchmarkReadRequestSiege               6431         5924   -7.88%\nBenchmarkReadRequestWrk                 2820         3146  +11.56%\n\nbenchmark                           old MB/s     new MB/s  speedup\nBenchmarkReadRequestChrome             60.66        73.18    1.21x\nBenchmarkReadRequestCurl               17.85        17.93    1.00x\nBenchmarkReadRequestApachebench        18.58        18.65    1.00x\nBenchmarkReadRequestSiege              23.48        25.49    1.09x\nBenchmarkReadRequestWrk                14.18        12.71    0.90x\n\nbenchmark                         old allocs   new allocs    delta\nBenchmarkReadRequestChrome                32           26  -18.75%\nBenchmarkReadRequestCurl                  15           15    0.00%\nBenchmarkReadRequestApachebench           16           15   -6.25%\nBenchmarkReadRequestSiege                 22           19  -13.64%\nBenchmarkReadRequestWrk                   11           11    0.00%\n\nbenchmark                          old bytes    new bytes    delta\nBenchmarkReadRequestChrome              3148         2216  -29.61%\nBenchmarkReadRequestCurl                 905         1413   56.13%\nBenchmarkReadRequestApachebench          956         1413   47.80%\nBenchmarkReadRequestSiege               1397         1522    8.95%\nBenchmarkReadRequestWrk                  757         1369   80.85%\n\nR=bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/7300098",
			"disapproval": false,
			"date": "2013-02-14 08:35:51.907110",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 7300098: net/textproto: more efficient header parsing",
	"created": "2013-02-12 23:18:21.828130",
	"patchsets": [
		1,
		2001,
		5002,
		7001,
		9001
	],
	"modified": "2013-02-14 08:35:54.648930",
	"closed": true,
	"issue": 7300098
}