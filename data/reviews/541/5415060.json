{
	"description": "text/template: new, simpler API\n\nThe Set type is gone. Instead, templates are automatically associated by\nbeing parsed together; nested definitions implicitly create associations.\nOnly associated templates can invoke one another.\n\nThis approach dramatically reduces the breadth of the construction API.\n\nFor now, html/template is deleted from src/pkg/Makefile, so this can\nbe checked in. Nothing in the tree depends on it. It will be updated next.",
	"cc": [
		"dsymonds@golang.org",
		"adg@golang.org",
		"rsc@golang.org",
		"r@google.com",
		"gri@golang.org",
		"mikesamuel@gmail.com",
		"nigeltao@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 21 November 2011 17:31,  <dsymonds@golang.org> wrote:\n> LGTM\n>\n>\n> http://codereview.appspot.com/5415060/diff/1/src/pkg/text/template/helper.go\n> File src/pkg/text/template/helper.go (left):\n>\n> http://codereview.appspot.com/5415060/diff/1/src/pkg/text/template/helper.go#oldcode30\n> src/pkg/text/template/helper.go:30: func ParseFile(filename string)\n> (*Template, error) {\n> On 2011/11/21 06:27:07, r wrote:\n>>\n>> On 2011/11/21 06:14:00, dsymonds wrote:\n>> > Can we keep this as a trivial wrapper around ParseFiles? It's a very\n>\n> common\n>>\n>> > case.\n>\n>> why? just pass one file.\n>\n> Just that\n> \u00a0template.ParseFile(\"foo.html\")\n> is much easier to get right for n00bs than\n> \u00a0template.ParseFiles([]string{\"foo.html\"}...)\n\nIt's just:\n  ParseFiles(\"foo.html\")\n",
			"disapproval": false,
			"date": "2011-11-21 06:36:54.019636",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Nov 21, 2011 at 12:43,  <r@golang.org> wrote:\n> i see no technical reason to forbid \"multiple entry points\". in fact, i\n> can see a \u00a0use, characterized by ParseFiles. since the templates form a\n> name space, multiple \"entry points\" as you call them can be distinct\n> pages that share common infrastructure. since ParseFiles lets you build\n> such a thing one way, why not let the user build them by hand?\n\nThe only reason is to give yourself flexibility in the future.\nRight now the implementation uses *Template to denote both\nthe collection and individual elements of the collection.\nIt seems possible that in the future you might want to\nhave a separate type for the elements than for the set,\n(say, *template for an element, *Template for the set),\nand exposing this detail, which few people will use anyway,\nrestricts such a change.  It's fine either way.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-21 17:49:48.825985",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-21 05:01:55.834961",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Oops.\n",
			"disapproval": false,
			"date": "2011-11-21 06:38:22.050829",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Nov 21, 2011, at 9:49 AM, Russ Cox wrote:\n\n> On Mon, Nov 21, 2011 at 12:43,  <r@golang.org> wrote:\n>> i see no technical reason to forbid \"multiple entry points\". in fact, i\n>> can see a  use, characterized by ParseFiles. since the templates form a\n>> name space, multiple \"entry points\" as you call them can be distinct\n>> pages that share common infrastructure. since ParseFiles lets you build\n>> such a thing one way, why not let the user build them by hand?\n> \n> The only reason is to give yourself flexibility in the future.\n> Right now the implementation uses *Template to denote both\n> the collection and individual elements of the collection.\n> It seems possible that in the future you might want to\n> have a separate type for the elements than for the set,\n> (say, *template for an element, *Template for the set),\n> and exposing this detail, which few people will use anyway,\n> restricts such a change.  It's fine either way.\n\nhaving just spent four days removing the difference in type between the elements and the set, i feel unkeen to separate them again.  you're seeing the way this works differently from me, i think. there is no \"set\", there's just a relationship between *Templates and any one of them gives you access to the others, either through template actions or ExecuteTemplate.\n\nbut you have a point about flexibility. i'll unexport it and see who screams.\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2011-11-21 17:54:40.821961",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"r@golang.org",
				"dsymonds@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5415060/diff/5016/src/pkg/text/template/exec.go\nFile src/pkg/text/template/exec.go (right):\n\nhttp://codereview.appspot.com/5415060/diff/5016/src/pkg/text/template/exec.go#newcode88\nsrc/pkg/text/template/exec.go:88: // ExecuteTemplate applies the template associated with t that hasthe given name\ns/hasthe/has the/\n\nhttp://codereview.appspot.com/5415060/diff/5016/src/pkg/text/template/exec.go#newcode89\nsrc/pkg/text/template/exec.go:89: // to the specified data object, writing the output to wr.\ns/writing/and writes/ ?",
			"disapproval": false,
			"date": "2011-11-21 18:09:22.703886",
			"approval": true
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I've only looked at the API in {doc,helper,template}.go. I like where it's heading.\n\nhttp://codereview.appspot.com/5415060/diff/1/src/pkg/text/template/doc.go\nFile src/pkg/text/template/doc.go (right):\n\nhttp://codereview.appspot.com/5415060/diff/1/src/pkg/text/template/doc.go#newcode21\nsrc/pkg/text/template/doc.go:21: Once constructed, templates can be executed safely in parallel.\nprobably clearer to phrase with a singular template to make it clear that each template execution is concurrent-safe with itself, not just with other templates.\n\nhttp://codereview.appspot.com/5415060/diff/1/src/pkg/text/template/doc.go#newcode224\nsrc/pkg/text/template/doc.go:224: template, then in the global function map.  By default, no functions are defined\ntwo spaces after \".\".\n\nhttp://codereview.appspot.com/5415060/diff/1/src/pkg/text/template/doc.go#newcode268\nsrc/pkg/text/template/doc.go:268: Each template is named by a string specified when it is created. Also, each\nworth mentioning that the template namespace is the set of templates that are associated with each other?\n\nhttp://codereview.appspot.com/5415060/diff/1/src/pkg/text/template/doc.go#newcode306\nsrc/pkg/text/template/doc.go:306: multiple associated templates by reading files.\n\"multiple\" seems redundant here.\n\nhttp://codereview.appspot.com/5415060/diff/1/src/pkg/text/template/doc.go#newcode308\nsrc/pkg/text/template/doc.go:308: A template may be executed directly or through ExecuteTemplate, which executes an\nwrap\n\nhttp://codereview.appspot.com/5415060/diff/1/src/pkg/text/template/helper.go\nFile src/pkg/text/template/helper.go (left):\n\nhttp://codereview.appspot.com/5415060/diff/1/src/pkg/text/template/helper.go#oldcode30\nsrc/pkg/text/template/helper.go:30: func ParseFile(filename string) (*Template, error) {\nCan we keep this as a trivial wrapper around ParseFiles? It's a very common case.\n\nhttp://codereview.appspot.com/5415060/diff/1/src/pkg/text/template/helper.go\nFile src/pkg/text/template/helper.go (right):\n\nhttp://codereview.appspot.com/5415060/diff/1/src/pkg/text/template/helper.go#newcode61\nsrc/pkg/text/template/helper.go:61: // ParseGlob creates a new Template and parses the template definition from the\n\"definitions\"?\n\nhttp://codereview.appspot.com/5415060/diff/1/src/pkg/text/template/template.go\nFile src/pkg/text/template/template.go (right):\n\nhttp://codereview.appspot.com/5415060/diff/1/src/pkg/text/template/template.go#newcode50\nsrc/pkg/text/template/template.go:50: func (t *Template) NewTemplate(name string) *Template {\nCould this just be called New? That would parallel ParseFiles as both function and method.",
			"disapproval": false,
			"date": "2011-11-21 06:13:59.732024",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "(also, the Template and Templates methods let you get at other members of the set, so controlling the construction doesn't add much)\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-11-21 17:58:26.525580",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-21 06:26:59.788471",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5415060/diff/1/src/pkg/text/template/helper.go\nFile src/pkg/text/template/helper.go (left):\n\nhttp://codereview.appspot.com/5415060/diff/1/src/pkg/text/template/helper.go#oldcode30\nsrc/pkg/text/template/helper.go:30: func ParseFile(filename string) (*Template, error) {\nOn 2011/11/21 06:27:07, r wrote:\n> On 2011/11/21 06:14:00, dsymonds wrote:\n> > Can we keep this as a trivial wrapper around ParseFiles? It's a very common\n> > case.\n> \n> why? just pass one file.\n\nJust that\n  template.ParseFile(\"foo.html\")\nis much easier to get right for n00bs than\n  template.ParseFiles([]string{\"foo.html\"}...)",
			"disapproval": false,
			"date": "2011-11-21 06:31:48.758129",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5415060/diff/1/src/pkg/text/template/doc.go\nFile src/pkg/text/template/doc.go (right):\n\nhttp://codereview.appspot.com/5415060/diff/1/src/pkg/text/template/doc.go#newcode21\nsrc/pkg/text/template/doc.go:21: Once constructed, templates can be executed safely in parallel.\nOn 2011/11/21 06:14:00, dsymonds wrote:\n> probably clearer to phrase with a singular template to make it clear that each\n> template execution is concurrent-safe with itself, not just with other\n> templates.\n\nDone.\n\nhttp://codereview.appspot.com/5415060/diff/1/src/pkg/text/template/doc.go#newcode224\nsrc/pkg/text/template/doc.go:224: template, then in the global function map.  By default, no functions are defined\nOn 2011/11/21 06:14:00, dsymonds wrote:\n> two spaces after \".\".\n\nDone.\n\nhttp://codereview.appspot.com/5415060/diff/1/src/pkg/text/template/doc.go#newcode268\nsrc/pkg/text/template/doc.go:268: Each template is named by a string specified when it is created. Also, each\nOn 2011/11/21 06:14:00, dsymonds wrote:\n> worth mentioning that the template namespace is the set of templates that are\n> associated with each other?\n\ni thought that was clear, but OK.\n\nhttp://codereview.appspot.com/5415060/diff/1/src/pkg/text/template/doc.go#newcode306\nsrc/pkg/text/template/doc.go:306: multiple associated templates by reading files.\nOn 2011/11/21 06:14:00, dsymonds wrote:\n> \"multiple\" seems redundant here.\n\nDone.\n\nhttp://codereview.appspot.com/5415060/diff/1/src/pkg/text/template/doc.go#newcode308\nsrc/pkg/text/template/doc.go:308: A template may be executed directly or through ExecuteTemplate, which executes an\nOn 2011/11/21 06:14:00, dsymonds wrote:\n> wrap\n\nDone.\n\nhttp://codereview.appspot.com/5415060/diff/1/src/pkg/text/template/helper.go\nFile src/pkg/text/template/helper.go (left):\n\nhttp://codereview.appspot.com/5415060/diff/1/src/pkg/text/template/helper.go#oldcode30\nsrc/pkg/text/template/helper.go:30: func ParseFile(filename string) (*Template, error) {\nOn 2011/11/21 06:14:00, dsymonds wrote:\n> Can we keep this as a trivial wrapper around ParseFiles? It's a very common\n> case.\n\nwhy? just pass one file.\n\nhttp://codereview.appspot.com/5415060/diff/1/src/pkg/text/template/helper.go\nFile src/pkg/text/template/helper.go (right):\n\nhttp://codereview.appspot.com/5415060/diff/1/src/pkg/text/template/helper.go#newcode61\nsrc/pkg/text/template/helper.go:61: // ParseGlob creates a new Template and parses the template definition from the\nOn 2011/11/21 06:14:00, dsymonds wrote:\n> \"definitions\"?\n\nDone.\n\nhttp://codereview.appspot.com/5415060/diff/1/src/pkg/text/template/template.go\nFile src/pkg/text/template/template.go (right):\n\nhttp://codereview.appspot.com/5415060/diff/1/src/pkg/text/template/template.go#newcode50\nsrc/pkg/text/template/template.go:50: func (t *Template) NewTemplate(name string) *Template {\nOn 2011/11/21 06:14:00, dsymonds wrote:\n> Could this just be called New? That would parallel ParseFiles as both function\n> and method.\n\nDone.",
			"disapproval": false,
			"date": "2011-11-21 06:27:07.647420",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"dsymonds@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dsymonds@golang.org, adg@golang.org, rsc@golang.org, r@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-21 17:55:30.803036",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"r@golang.org",
				"dsymonds@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5415060/diff/2002/src/pkg/text/template/exec.go\nFile src/pkg/text/template/exec.go (right):\n\nhttp://codereview.appspot.com/5415060/diff/2002/src/pkg/text/template/exec.go#newcode88\nsrc/pkg/text/template/exec.go:88: // ExecuteTemplate applies the template associated with t that has given name to\ns/has/has the/\n\nhttp://codereview.appspot.com/5415060/diff/2002/src/pkg/text/template/parse/parse.go\nFile src/pkg/text/template/parse/parse.go (right):\n\nhttp://codereview.appspot.com/5415060/diff/2002/src/pkg/text/template/parse/parse.go#newcode181\nsrc/pkg/text/template/parse/parse.go:181: t.errorf(\"template: %q multiply defined\", t.Name)\nmultiple definitions of template %q\n\n(no one will read 'multiply' as an adverb)\n\nhttp://codereview.appspot.com/5415060/diff/2002/src/pkg/text/template/template.go\nFile src/pkg/text/template/template.go (right):\n\nhttp://codereview.appspot.com/5415060/diff/2002/src/pkg/text/template/template.go#newcode50\nsrc/pkg/text/template/template.go:50: func (t *Template) New(name string) *Template {\nI am slightly worried about exposing this method, as it opens\nthe door to holding multiple *Template values that are different\nentry points into the same set.  It might be better to have only\nParse as the entry point for creating subtemplates.\n\nAre there cases that need this?",
			"disapproval": false,
			"date": "2011-11-21 17:02:59.953019",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"dsymonds@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5415060/diff/2002/src/pkg/text/template/exec.go\nFile src/pkg/text/template/exec.go (right):\n\nhttp://codereview.appspot.com/5415060/diff/2002/src/pkg/text/template/exec.go#newcode88\nsrc/pkg/text/template/exec.go:88: // ExecuteTemplate applies the template associated with t that has given name to\nOn 2011/11/21 17:03:00, rsc wrote:\n> s/has/has the/\n\nDone.\n\nhttp://codereview.appspot.com/5415060/diff/2002/src/pkg/text/template/parse/parse.go\nFile src/pkg/text/template/parse/parse.go (right):\n\nhttp://codereview.appspot.com/5415060/diff/2002/src/pkg/text/template/parse/parse.go#newcode181\nsrc/pkg/text/template/parse/parse.go:181: t.errorf(\"template: %q multiply defined\", t.Name)\nOn 2011/11/21 17:03:00, rsc wrote:\n> multiple definitions of template %q\n> \n> (no one will read 'multiply' as an adverb)\n\nDone.\n\nhttp://codereview.appspot.com/5415060/diff/2002/src/pkg/text/template/template.go\nFile src/pkg/text/template/template.go (right):\n\nhttp://codereview.appspot.com/5415060/diff/2002/src/pkg/text/template/template.go#newcode50\nsrc/pkg/text/template/template.go:50: func (t *Template) New(name string) *Template {\nit's used to implement ParseFiles, which all the helpers depend on, but at least for now can unexport it.\n\nbut now i'll contradict myself.\n\ni see no technical reason to forbid \"multiple entry points\". in fact, i can see a  use, characterized by ParseFiles. since the templates form a name space, multiple \"entry points\" as you call them can be distinct pages that share common infrastructure. since ParseFiles lets you build such a thing one way, why not let the user build them by hand?\n\ni'll leave it exported unless you have a counterargument.",
			"disapproval": false,
			"date": "2011-11-21 17:43:37.725727",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"dsymonds@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dsymonds@golang.org, adg@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-21 17:44:17.411874",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Nov 21, 2011, at 4:46 PM, Ugorji wrote:\n\n> Just one thought.\n> \n> Is there a way to share parse trees? \n\nNo, but I understand the need. The issue is safety in the context of html/template, but I think it should be very easy to clone a template, sharing the parse trees but creating a separate name space and security box. I'll talk to Mike about it - I need to talk to him anyway because I need to figure out how to make html/template work with the new API.\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2011-11-22 01:25:44.107357",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"r@golang.org",
				"dsymonds@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"gri@golang.org",
				"mikesamuel@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5415060/diff/15001/src/pkg/text/template/exec_test.go\nFile src/pkg/text/template/exec_test.go (right):\n\nhttp://codereview.appspot.com/5415060/diff/15001/src/pkg/text/template/exec_test.go#newcode672\nsrc/pkg/text/template/exec_test.go:672: err = tmpl.Template(\"tree\").Execute(&b, tree)\nMaybe test that ExecuteTemplate(name, ...) is equivalent to tmpl.Template(name).Execute(...)\n\nhttp://codereview.appspot.com/5415060/diff/15001/src/pkg/text/template/helper.go\nFile src/pkg/text/template/helper.go (right):\n\nhttp://codereview.appspot.com/5415060/diff/15001/src/pkg/text/template/helper.go#newcode45\nsrc/pkg/text/template/helper.go:45: // template is nil, it is created from the first file.\nOk.  Even if some glob primitives don't return files in a predictable order, since the templates are all related, you just need to use .Template(...) or .ExecuteTemplate(...) to restore predictability.\n\nhttp://codereview.appspot.com/5415060/diff/15001/src/pkg/text/template/parse/parse.go\nFile src/pkg/text/template/parse/parse.go (right):\n\nhttp://codereview.appspot.com/5415060/diff/15001/src/pkg/text/template/parse/parse.go#newcode181\nsrc/pkg/text/template/parse/parse.go:181: t.errorf(\"template: multiple definition of template %q\", t.Name)\nMaybe include the file from which t's body originated.\nDid you mean to replace the existing definition or return here?\n\nhttp://codereview.appspot.com/5415060/diff/15001/src/pkg/text/template/parse/parse.go#newcode195\nsrc/pkg/text/template/parse/parse.go:195: newT := New(\"definition\") // name will be updated once we know it.\nOk.  As long as the name is updated before newT.init() happens there's no need to later remove newT.common.tmpl[\"definition\"].\n\nhttp://codereview.appspot.com/5415060/diff/15001/src/pkg/text/template/template.go\nFile src/pkg/text/template/template.go (right):\n\nhttp://codereview.appspot.com/5415060/diff/15001/src/pkg/text/template/template.go#newcode111\nsrc/pkg/text/template/template.go:111: // definitions) and would replace a non-trivial template with the same name.\nWhy the \"non-trivial\" in \"would replace a non-trivial template\"?\n\nassociate below is doing something akin to replacing a prototype with an implementation.  Is this fixing up templates that were created with one name with implementations, or is this a feature that you intend users to exploit by creating empty templates in one file and providing non-trivial implementation in other files that may or may not be loaded?\n\nhttp://codereview.appspot.com/5415060/diff/15001/src/pkg/text/template/template.go#newcode120\nsrc/pkg/text/template/template.go:120: // The receiver template should rewritten not recreated.\nshould [be] rewritten",
			"disapproval": false,
			"date": "2011-11-23 17:04:45.734938",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"dsymonds@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"gri@golang.org",
				"mikesamuel@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dsymonds@golang.org, adg@golang.org, rsc@golang.org, r@google.com, gri@golang.org, mikesamuel@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-23 17:18:19.056167",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"dsymonds@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"gri@golang.org",
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dsymonds@golang.org, adg@golang.org, rsc@golang.org, r@google.com, gri@golang.org, mikesamuel@gmail.com, nigeltao@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-24 04:04:15.952012",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"r@golang.org",
				"dsymonds@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"gri@golang.org",
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5415060/diff/14005/src/pkg/text/template/template.go\nFile src/pkg/text/template/template.go (right):\n\nhttp://codereview.appspot.com/5415060/diff/14005/src/pkg/text/template/template.go#newcode75\nsrc/pkg/text/template/template.go:75: func (t *Template) Copy() *Template {\nIIRC, we had this naming discussion for protobufs, and the consensus was that this sort of operation, returning a new object, is called Clone. Copy means duplicating into an existing target, such as the built-in copy or io.Copy.",
			"disapproval": false,
			"date": "2011-11-23 22:43:13.015139",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"dsymonds@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"gri@golang.org",
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5415060/diff/14005/src/pkg/text/template/helper.go\nFile src/pkg/text/template/helper.go (right):\n\nhttp://codereview.appspot.com/5415060/diff/14005/src/pkg/text/template/helper.go#newcode37\nsrc/pkg/text/template/helper.go:37: // ParseFiles parses the named files and associates the resulting templates with t.\nOn 2011/11/23 22:54:09, nigeltao wrote:\n> 80 chars for doc comments.\n\nDone.\n\nhttp://codereview.appspot.com/5415060/diff/14005/src/pkg/text/template/template.go\nFile src/pkg/text/template/template.go (right):\n\nhttp://codereview.appspot.com/5415060/diff/14005/src/pkg/text/template/template.go#newcode75\nsrc/pkg/text/template/template.go:75: func (t *Template) Copy() *Template {\nOn 2011/11/23 22:43:13, nigeltao wrote:\n> IIRC, we had this naming discussion for protobufs, and the consensus was that\n> this sort of operation, returning a new object, is called Clone. Copy means\n> duplicating into an existing target, such as the built-in copy or io.Copy.\n\nDone.\n\nhttp://codereview.appspot.com/5415060/diff/14005/src/pkg/text/template/template.go#newcode102\nsrc/pkg/text/template/template.go:102: // Template returns a slice of the templates associated with t, including t itself.\nOn 2011/11/23 22:54:09, nigeltao wrote:\n> s/Template/Templates/, and watch the 80 char limit for doc comments.\n\nDone.",
			"disapproval": false,
			"date": "2011-11-24 04:02:13.772196",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"dsymonds@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"gri@golang.org",
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=45e3c28dc7b5 ***\n\ntext/template: new, simpler API\n\nThe Set type is gone. Instead, templates are automatically associated by\nbeing parsed together; nested definitions implicitly create associations.\nOnly associated templates can invoke one another.\n\nThis approach dramatically reduces the breadth of the construction API.\n\nFor now, html/template is deleted from src/pkg/Makefile, so this can\nbe checked in. Nothing in the tree depends on it. It will be updated next.\n\nR=dsymonds, adg, rsc, r, gri, mikesamuel, nigeltao\nCC=golang-dev\nhttp://codereview.appspot.com/5415060",
			"disapproval": false,
			"date": "2011-11-24 04:17:26.853109",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"r@golang.org",
				"dsymonds@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"gri@golang.org",
				"mikesamuel@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/11/22 01:25:44, r2 wrote:\n> On Nov 21, 2011, at 4:46 PM, Ugorji wrote:\n> \n> > Just one thought.\n> > \n> > Is there a way to share parse trees? \n> \n> No, but I understand the need. The issue is safety in the context of\n> html/template, but I think it should be very easy to clone a template, sharing\n> the parse trees but creating a separate name space and security box. I'll talk\n> to Mike about it - I need to talk to him anyway because I need to figure out how\n> to make html/template work with the new API.\n> \n> -rob\n\nI did implement subtree cloning in http://code.google.com/p/go/source/browse/src/pkg/html/template/clone.go and can use that to defensively copy trees that require patching if you want text/template to share trees.",
			"disapproval": false,
			"date": "2011-11-23 17:04:05.935749",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "New CL description:\n\n\ttext/template: new, simpler API\n\t\n\tThe Set type is gone. Instead, templates are automatically associated by\n\tbeing parsed together; nested definitions implicitly create associations.\n\tOnly associated templates can invoke one another.\n\t\n\tThis approach dramatically reduces the breadth of the construction API.\n\n\tFor now, html/template is deleted from src/pkg/Makefile, so this can\n\tbe checked in. Nothing in the tree depends on it. It will be updated next.\n\nI plan to check this in today. Mike and/or I will work on html/template.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-11-24 04:05:08.033140",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"r@golang.org",
				"dsymonds@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"gri@golang.org",
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-11-24 04:05:55.477844",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"r@golang.org",
				"dsymonds@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"gri@golang.org",
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5415060/diff/14005/src/pkg/text/template/helper.go\nFile src/pkg/text/template/helper.go (right):\n\nhttp://codereview.appspot.com/5415060/diff/14005/src/pkg/text/template/helper.go#newcode37\nsrc/pkg/text/template/helper.go:37: // ParseFiles parses the named files and associates the resulting templates with t.\n80 chars for doc comments.\n\nhttp://codereview.appspot.com/5415060/diff/14005/src/pkg/text/template/template.go\nFile src/pkg/text/template/template.go (right):\n\nhttp://codereview.appspot.com/5415060/diff/14005/src/pkg/text/template/template.go#newcode102\nsrc/pkg/text/template/template.go:102: // Template returns a slice of the templates associated with t, including t itself.\ns/Template/Templates/, and watch the 80 char limit for doc comments.",
			"disapproval": false,
			"date": "2011-11-23 22:54:09.446171",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"dsymonds@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"gri@golang.org",
				"mikesamuel@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I rearranged some code and cleaned up the paths. I think this is ready.\n\nAdded fixes to all the affected code except html/template\n\nhttp://codereview.appspot.com/5415060/diff/15001/src/pkg/text/template/helper.go\nFile src/pkg/text/template/helper.go (right):\n\nhttp://codereview.appspot.com/5415060/diff/15001/src/pkg/text/template/helper.go#newcode45\nsrc/pkg/text/template/helper.go:45: // template is nil, it is created from the first file.\nOn 2011/11/23 17:04:45, MikeSamuel wrote:\n> Ok.  Even if some glob primitives don't return files in a predictable order,\n> since the templates are all related, you just need to use .Template(...) or\n> .ExecuteTemplate(...) to restore predictability.\n\npath/filepath.Glob sorts, so it should be ok\n\nhttp://codereview.appspot.com/5415060/diff/15001/src/pkg/text/template/parse/parse.go\nFile src/pkg/text/template/parse/parse.go (right):\n\nhttp://codereview.appspot.com/5415060/diff/15001/src/pkg/text/template/parse/parse.go#newcode181\nsrc/pkg/text/template/parse/parse.go:181: t.errorf(\"template: multiple definition of template %q\", t.Name)\nOn 2011/11/23 17:04:45, MikeSamuel wrote:\n> Maybe include the file from which t's body originated.\n> Did you mean to replace the existing definition or return here?\n\nt.errorf will not return; it \"errors out\"\n\nit would be nice to have the file name but this code has no files, just strings. we're a long way from home.\n\nhttp://codereview.appspot.com/5415060/diff/15001/src/pkg/text/template/parse/parse.go#newcode195\nsrc/pkg/text/template/parse/parse.go:195: newT := New(\"definition\") // name will be updated once we know it.\nOn 2011/11/23 17:04:45, MikeSamuel wrote:\n> Ok.  As long as the name is updated before newT.init() happens there's no need\n> to later remove newT.common.tmpl[\"definition\"].\n\nDone.\n\nyes, that's true\n\nhttp://codereview.appspot.com/5415060/diff/15001/src/pkg/text/template/template.go\nFile src/pkg/text/template/template.go (right):\n\nhttp://codereview.appspot.com/5415060/diff/15001/src/pkg/text/template/template.go#newcode111\nsrc/pkg/text/template/template.go:111: // definitions) and would replace a non-trivial template with the same name.\nOn 2011/11/23 17:04:45, MikeSamuel wrote:\n> Why the \"non-trivial\" in \"would replace a non-trivial template\"?\n> \n> associate below is doing something akin to replacing a prototype with an\n> implementation.  Is this fixing up templates that were created with one name\n> with implementations, or is this a feature that you intend users to exploit by\n> creating empty templates in one file and providing non-trivial implementation in\n> other files that may or may not be loaded?\n\nDone.\n\nhttp://codereview.appspot.com/5415060/diff/15001/src/pkg/text/template/template.go#newcode120\nsrc/pkg/text/template/template.go:120: // The receiver template should rewritten not recreated.\nOn 2011/11/23 17:04:45, MikeSamuel wrote:\n> should [be] rewritten\n\nDone.",
			"disapproval": false,
			"date": "2011-11-23 17:19:18.937939",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"r@golang.org",
				"dsymonds@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"gri@golang.org",
				"mikesamuel@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-11-23 19:15:55.136742",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"dsymonds@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"gri@golang.org",
				"mikesamuel@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dsymonds@golang.org, adg@golang.org, rsc@golang.org, r@google.com, gri@golang.org, mikesamuel@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-23 18:48:44.604963",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I added a Copy method as requested by Ugorji, since Mike thinks that case can be handled.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-11-23 18:49:42.569544",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5415060: text/template: new, simpler API",
	"created": "2011-11-21 05:01:49.664992",
	"patchsets": [
		1,
		2002,
		8001,
		5016,
		9001,
		12001,
		15001,
		14003,
		14005,
		22005,
		14008
	],
	"modified": "2011-11-24 04:17:27.883475",
	"closed": true,
	"issue": 5415060
}