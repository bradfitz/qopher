{
	"description": "big/nat:  Improve decimal string output from O(N^2) to something less\n\nChanges the decimal string output from successive div/mod\nto divide-and-conquer by a large power of 10 of size roughly\nhalf the number of decimal digits in the nat.  Uses this\nalgorithm until 4096 bits, at which point it reverts to the\nprior successive div/mod algorithm.\n\nNo change to times for \"small\" nats, but significant for\nthousands of bits or more:\n\nBefore:\nbig.BenchmarkStringShort10        100000             26828 ns/op\nbig.BenchmarkStringMedium10          500           3246320 ns/op\nbig.BenchmarkStringLong10              5         509510600 ns/op\n\nAfter:\nbig.BenchmarkStringShort10        100000             28988 ns/op\nbig.BenchmarkStringMedium10         2000           1150566 ns/op\nbig.BenchmarkStringLong10             20          89172750 ns/op",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"gri@golang.org",
		"mtj@google.com"
	],
	"messages": [
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Oh, for some color, the code was completed (code, tests, tuning with and\nwithout bounds checking, comment tweaks, internal parameter benchmarking,\nand exhaustive performance profiling) in a day of coding in a Budapest\nhotel room. Since the tuning benchmarks took 30 minutes to run between\nparameter changes, I used the idle time to setup my camera, get out my\nSekonic lightmeter, position my tripod, and wait for the light to be just\nso. Here's the resulting photograph:\n\nhttp://michaeljonesphotography.smugmug.com/Street-Scenes/Budapest/19972428_jqtFXG\n\nThis was my log log complexity Go big-multiply profile-patience pacifier.\n;-)\n\nOn Thu, Nov 17, 2011 at 6:29 PM, Michael Jones <mtj@google.com> wrote:\n\n> Yes this is the case. Coded, submitted, and faster. Uses powers of\n> bigbase**(2**k) for 0<=k automatically, does (tries to) juggle the\n> intermediate \"halves\" of the big number smartly without unnecessary copies,\n> and simulates tail recursion to logarithmically reduce the number of\n> internal function calls.\n>\n> I checked this all in immediately after the first approval (all done at\n> once but asked to check them in sequentially: first the simple and then the\n> clever.) That's been four to six months ago. The team has had a lot to do\n> and this code review has not yet risen to the top. It will, though, someday\n> make it out. Have faith.\n>\n> Michael\n>\n> P.S. If you can't wait or want to test against the to be approved code,\n> see attached. ;-)\n>\n>\n> On Thu, Nov 17, 2011 at 6:00 PM, Robert Griesemer <gri@golang.org> wrote:\n>\n>> Dave;\n>>\n>> I might be wrong but I think this idea is already represented in the\n>> other CL (by Michael Jones, cc:ed) that I mentioned to you; for all\n>> bases not just base 10. Please correct me if I am wrong.\n>>\n>> - Robert\n>>\n>>\n>>\n>> On Thu, Nov 17, 2011 at 2:38 PM,  <dave.andersen@gmail.com> wrote:\n>> > Reviewers: golang-dev_googlegroups.com,\n>> >\n>> > Message:\n>> > Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n>> >\n>> > I'd like you to review this change to\n>> > https://go.googlecode.com/hg/\n>> >\n>> >\n>> > Description:\n>> > big/nat:  Improve decimal string output from O(N^2) to something less\n>> >\n>> > Changes the decimal string output from successive div/mod\n>> > to divide-and-conquer by a large power of 10 of size roughly\n>> > half the number of decimal digits in the nat.  Uses this\n>> > algorithm until 4096 bits, at which point it reverts to the\n>> > prior successive div/mod algorithm.\n>> >\n>> > No change to times for \"small\" nats, but significant for\n>> > thousands of bits or more:\n>> >\n>> > Before:\n>> > big.BenchmarkStringShort10        100000             26828 ns/op\n>> > big.BenchmarkStringMedium10          500           3246320 ns/op\n>> > big.BenchmarkStringLong10              5         509510600 ns/op\n>> >\n>> > After:\n>> > big.BenchmarkStringShort10        100000             28988 ns/op\n>> > big.BenchmarkStringMedium10         2000           1150566 ns/op\n>> > big.BenchmarkStringLong10             20          89172750 ns/op\n>> >\n>> > Please review this at http://codereview.appspot.com/5413043/\n>> >\n>> > Affected files:\n>> >  M src/pkg/math/big/nat.go\n>> >\n>> >\n>> >\n>>\n>\n>\n>\n> --\n> Michael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\n> 650-335-5765\n>\n>\n\n\n-- \nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\n650-335-5765\n",
			"disapproval": false,
			"date": "2011-11-17 23:38:44.859853",
			"approval": false
		},
		{
			"sender": "dave.andersen@gmail.com",
			"recipients": [
				"dave.andersen@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-17 22:38:31.349751",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Dave;\n\nI might be wrong but I think this idea is already represented in the\nother CL (by Michael Jones, cc:ed) that I mentioned to you; for all\nbases not just base 10. Please correct me if I am wrong.\n\n- Robert\n\n\n\nOn Thu, Nov 17, 2011 at 2:38 PM,  <dave.andersen@gmail.com> wrote:\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> big/nat: \u00a0Improve decimal string output from O(N^2) to something less\n>\n> Changes the decimal string output from successive div/mod\n> to divide-and-conquer by a large power of 10 of size roughly\n> half the number of decimal digits in the nat. \u00a0Uses this\n> algorithm until 4096 bits, at which point it reverts to the\n> prior successive div/mod algorithm.\n>\n> No change to times for \"small\" nats, but significant for\n> thousands of bits or more:\n>\n> Before:\n> big.BenchmarkStringShort10 \u00a0 \u00a0 \u00a0 \u00a0100000 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 26828 ns/op\n> big.BenchmarkStringMedium10 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0500 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 3246320 ns/op\n> big.BenchmarkStringLong10 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a05 \u00a0 \u00a0 \u00a0 \u00a0 509510600 ns/op\n>\n> After:\n> big.BenchmarkStringShort10 \u00a0 \u00a0 \u00a0 \u00a0100000 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 28988 ns/op\n> big.BenchmarkStringMedium10 \u00a0 \u00a0 \u00a0 \u00a0 2000 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1150566 ns/op\n> big.BenchmarkStringLong10 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 20 \u00a0 \u00a0 \u00a0 \u00a0 \u00a089172750 ns/op\n>\n> Please review this at http://codereview.appspot.com/5413043/\n>\n> Affected files:\n> \u00a0M src/pkg/math/big/nat.go\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-11-17 23:00:19.310622",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yes this is the case. Coded, submitted, and faster. Uses powers of\nbigbase**(2**k) for 0<=k automatically, does (tries to) juggle the\nintermediate \"halves\" of the big number smartly without unnecessary copies,\nand simulates tail recursion to logarithmically reduce the number of\ninternal function calls.\n\nI checked this all in immediately after the first approval (all done at\nonce but asked to check them in sequentially: first the simple and then the\nclever.) That's been four to six months ago. The team has had a lot to do\nand this code review has not yet risen to the top. It will, though, someday\nmake it out. Have faith.\n\nMichael\n\nP.S. If you can't wait or want to test against the to be approved code, see\nattached. ;-)\n\nOn Thu, Nov 17, 2011 at 6:00 PM, Robert Griesemer <gri@golang.org> wrote:\n\n> Dave;\n>\n> I might be wrong but I think this idea is already represented in the\n> other CL (by Michael Jones, cc:ed) that I mentioned to you; for all\n> bases not just base 10. Please correct me if I am wrong.\n>\n> - Robert\n>\n>\n>\n> On Thu, Nov 17, 2011 at 2:38 PM,  <dave.andersen@gmail.com> wrote:\n> > Reviewers: golang-dev_googlegroups.com,\n> >\n> > Message:\n> > Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n> >\n> > I'd like you to review this change to\n> > https://go.googlecode.com/hg/\n> >\n> >\n> > Description:\n> > big/nat:  Improve decimal string output from O(N^2) to something less\n> >\n> > Changes the decimal string output from successive div/mod\n> > to divide-and-conquer by a large power of 10 of size roughly\n> > half the number of decimal digits in the nat.  Uses this\n> > algorithm until 4096 bits, at which point it reverts to the\n> > prior successive div/mod algorithm.\n> >\n> > No change to times for \"small\" nats, but significant for\n> > thousands of bits or more:\n> >\n> > Before:\n> > big.BenchmarkStringShort10        100000             26828 ns/op\n> > big.BenchmarkStringMedium10          500           3246320 ns/op\n> > big.BenchmarkStringLong10              5         509510600 ns/op\n> >\n> > After:\n> > big.BenchmarkStringShort10        100000             28988 ns/op\n> > big.BenchmarkStringMedium10         2000           1150566 ns/op\n> > big.BenchmarkStringLong10             20          89172750 ns/op\n> >\n> > Please review this at http://codereview.appspot.com/5413043/\n> >\n> > Affected files:\n> >  M src/pkg/math/big/nat.go\n> >\n> >\n> >\n>\n\n\n\n-- \nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\n650-335-5765\n",
			"disapproval": false,
			"date": "2011-11-17 23:29:54.792884",
			"approval": false
		},
		{
			"sender": "dave.andersen@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ah!  Now I see - it must be CL 4634075.  mtj's code is faster and\nbetter than mine.  Apologies for not spotting that.\n\n  -Dave\n\n\n\nOn Thu, Nov 17, 2011 at 6:29 PM, Michael Jones <mtj@google.com> wrote:\n> Yes this is the case. Coded, submitted, and faster. Uses powers of\n> bigbase**(2**k) for 0<=k automatically, does (tries to) juggle the\n> intermediate \"halves\" of the big number smartly without\u00a0unnecessary\u00a0copies,\n> and simulates tail recursion to\u00a0logarithmically\u00a0reduce the number of\n> internal function calls.\n> I checked this all in immediately after the first approval (all done at once\n> but asked to check them in sequentially: first the simple and then the\n> clever.) That's been four to six months ago. The team has had a lot to do\n> and this code review has not yet risen to the top. It will, though, someday\n> make it out. Have faith.\n> Michael\n> P.S. If you can't wait or want to test against the to be approved code, see\n> attached. ;-)\n>\n> On Thu, Nov 17, 2011 at 6:00 PM, Robert Griesemer <gri@golang.org> wrote:\n>>\n>> Dave;\n>>\n>> I might be wrong but I think this idea is already represented in the\n>> other CL (by Michael Jones, cc:ed) that I mentioned to you; for all\n>> bases not just base 10. Please correct me if I am wrong.\n>>\n>> - Robert\n>>\n>>\n>>\n>> On Thu, Nov 17, 2011 at 2:38 PM, \u00a0<dave.andersen@gmail.com> wrote:\n>> > Reviewers: golang-dev_googlegroups.com,\n>> >\n>> > Message:\n>> > Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n>> >\n>> > I'd like you to review this change to\n>> > https://go.googlecode.com/hg/\n>> >\n>> >\n>> > Description:\n>> > big/nat: \u00a0Improve decimal string output from O(N^2) to something less\n>> >\n>> > Changes the decimal string output from successive div/mod\n>> > to divide-and-conquer by a large power of 10 of size roughly\n>> > half the number of decimal digits in the nat. \u00a0Uses this\n>> > algorithm until 4096 bits, at which point it reverts to the\n>> > prior successive div/mod algorithm.\n>> >\n>> > No change to times for \"small\" nats, but significant for\n>> > thousands of bits or more:\n>> >\n>> > Before:\n>> > big.BenchmarkStringShort10 \u00a0 \u00a0 \u00a0 \u00a0100000 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 26828 ns/op\n>> > big.BenchmarkStringMedium10 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0500 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 3246320 ns/op\n>> > big.BenchmarkStringLong10 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a05 \u00a0 \u00a0 \u00a0 \u00a0 509510600 ns/op\n>> >\n>> > After:\n>> > big.BenchmarkStringShort10 \u00a0 \u00a0 \u00a0 \u00a0100000 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 28988 ns/op\n>> > big.BenchmarkStringMedium10 \u00a0 \u00a0 \u00a0 \u00a0 2000 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1150566 ns/op\n>> > big.BenchmarkStringLong10 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 20 \u00a0 \u00a0 \u00a0 \u00a0 \u00a089172750 ns/op\n>> >\n>> > Please review this at http://codereview.appspot.com/5413043/\n>> >\n>> > Affected files:\n>> > \u00a0M src/pkg/math/big/nat.go\n>> >\n>> >\n>> >\n>\n>\n>\n> --\n> Michael T. Jones\u00a0|\u00a0Chief Technology Advocate \u00a0|\u00a0mtj@google.com\u00a0|\u00a0 +1\n> 650-335-5765\n>\n",
			"disapproval": false,
			"date": "2011-11-17 23:36:12.378542",
			"approval": false
		},
		{
			"sender": "dave.andersen@gmail.com",
			"recipients": [
				"dave.andersen@gmail.com",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2011-11-18 00:29:54.381200",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Apologies for providing the wrong CL. I will use Michael Jones' CL\n(which has been long in the waiting for a rewiew). Please abandon your\nCL.\n- Robert\n\nOn Thu, Nov 17, 2011 at 3:36 PM, David Andersen <dave.andersen@gmail.com> wrote:\n> Ah! \u00a0Now I see - it must be CL 4634075. \u00a0mtj's code is faster and\n> better than mine. \u00a0Apologies for not spotting that.\n>\n> \u00a0-Dave\n>\n>\n>\n> On Thu, Nov 17, 2011 at 6:29 PM, Michael Jones <mtj@google.com> wrote:\n>> Yes this is the case. Coded, submitted, and faster. Uses powers of\n>> bigbase**(2**k) for 0<=k automatically, does (tries to) juggle the\n>> intermediate \"halves\" of the big number smartly without\u00a0unnecessary\u00a0copies,\n>> and simulates tail recursion to\u00a0logarithmically\u00a0reduce the number of\n>> internal function calls.\n>> I checked this all in immediately after the first approval (all done at once\n>> but asked to check them in sequentially: first the simple and then the\n>> clever.) That's been four to six months ago. The team has had a lot to do\n>> and this code review has not yet risen to the top. It will, though, someday\n>> make it out. Have faith.\n>> Michael\n>> P.S. If you can't wait or want to test against the to be approved code, see\n>> attached. ;-)\n>>\n>> On Thu, Nov 17, 2011 at 6:00 PM, Robert Griesemer <gri@golang.org> wrote:\n>>>\n>>> Dave;\n>>>\n>>> I might be wrong but I think this idea is already represented in the\n>>> other CL (by Michael Jones, cc:ed) that I mentioned to you; for all\n>>> bases not just base 10. Please correct me if I am wrong.\n>>>\n>>> - Robert\n>>>\n>>>\n>>>\n>>> On Thu, Nov 17, 2011 at 2:38 PM, \u00a0<dave.andersen@gmail.com> wrote:\n>>> > Reviewers: golang-dev_googlegroups.com,\n>>> >\n>>> > Message:\n>>> > Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n>>> >\n>>> > I'd like you to review this change to\n>>> > https://go.googlecode.com/hg/\n>>> >\n>>> >\n>>> > Description:\n>>> > big/nat: \u00a0Improve decimal string output from O(N^2) to something less\n>>> >\n>>> > Changes the decimal string output from successive div/mod\n>>> > to divide-and-conquer by a large power of 10 of size roughly\n>>> > half the number of decimal digits in the nat. \u00a0Uses this\n>>> > algorithm until 4096 bits, at which point it reverts to the\n>>> > prior successive div/mod algorithm.\n>>> >\n>>> > No change to times for \"small\" nats, but significant for\n>>> > thousands of bits or more:\n>>> >\n>>> > Before:\n>>> > big.BenchmarkStringShort10 \u00a0 \u00a0 \u00a0 \u00a0100000 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 26828 ns/op\n>>> > big.BenchmarkStringMedium10 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0500 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 3246320 ns/op\n>>> > big.BenchmarkStringLong10 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a05 \u00a0 \u00a0 \u00a0 \u00a0 509510600 ns/op\n>>> >\n>>> > After:\n>>> > big.BenchmarkStringShort10 \u00a0 \u00a0 \u00a0 \u00a0100000 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 28988 ns/op\n>>> > big.BenchmarkStringMedium10 \u00a0 \u00a0 \u00a0 \u00a0 2000 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1150566 ns/op\n>>> > big.BenchmarkStringLong10 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 20 \u00a0 \u00a0 \u00a0 \u00a0 \u00a089172750 ns/op\n>>> >\n>>> > Please review this at http://codereview.appspot.com/5413043/\n>>> >\n>>> > Affected files:\n>>> > \u00a0M src/pkg/math/big/nat.go\n>>> >\n>>> >\n>>> >\n>>\n>>\n>>\n>> --\n>> Michael T. Jones\u00a0|\u00a0Chief Technology Advocate \u00a0|\u00a0mtj@google.com\u00a0|\u00a0 +1\n>> 650-335-5765\n>>\n>\n",
			"disapproval": false,
			"date": "2011-11-17 23:50:20.756283",
			"approval": false
		}
	],
	"owner_email": "dave.andersen@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "dga",
	"subject": "code review 5413043: big/nat:  Improve decimal string output from O(N^2) to ...",
	"created": "2011-11-17 22:33:33.210281",
	"patchsets": [
		1,
		2001
	],
	"modified": "2011-11-18 00:29:55.686261",
	"closed": true,
	"issue": 5413043
}