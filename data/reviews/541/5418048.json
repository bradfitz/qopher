{
	"description": "libgoenv: extract the goos bits from lib9\r\n\r\nThe goos* functions don't belong in the\r\ncompatibility layer.\r\n\r\nI have a feeling this won't be received\r\nwell but it's the cleanest way to solve\r\none of the few remaining issues with the\r\nPlan 9 port.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rsc@golang.org",
		"lucio.dere@gmail.com",
		"rminnich@gmail.com"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't see why a new library is needed for Plan 9.\nIf you were able to handle ctype functions by adjusting\nthe go-local copy of u.h or libc.h appropriately, then\nyou can do the same here.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-19 15:45:43.021474",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It would be really great if someone would get Go building\ncompletely on Plan 9 and then we can do a few big CLs\nand be done.  The current process feels like it will never\nconverge: we haven't even reached the Go packages, it seems.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-21 15:01:56.193851",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I have built most of Go (toolchain, Go commands, runtime, as many\npackages as I counted in the Linux release - I may have missed some, I\nknow gotypes is a problem - and a few Go tools - gofmt and a couple\nmore)  on a cleaner Plan 9 installation and it mostly worked out the\nbox.  A few mkfile, script and header changes were needed, I'll need\nto put some work into fixing them all.\n\nStill, the process is mk based and the effort to port the lot to APE\nseems enormous from this end.  I feel a lot like Ron about it all,\nwithout contradicting Russ in any way: let's wait for Go 1 to be\nfinalised and see where we go from there.  In the meantime, what I do\nis CVS export significant portions of the repository into the /go\n($ROOT as well as $GOROOT) directory and \"mk build\" there.  As I say,\nthere were a few errors and I have fixed them; testing and possibly a\nfew more fixes will take me a few days.\n\nMore importantly, I frequently CVS import the Go release into the\nrepository and make sure that any adjustments to the incoming modules\nis submitted to the Go Authors for incorporation into the Go release,\nso my current version of Go executables is more or less bleeding edge,\nmodulo any outstanding code review submissions.\n\nThe proof of the pudding is in the eating: I propose to start some\napplication development under Plan 9.  What I do miss, however, is a\nlist of shortcomings in the Plan 9 port.  If we could expose the\nweaknesses, we may find the user support to deal with them.\n\nLucio.\n\n\nOn 11/21/11, ron minnich <rminnich@gmail.com> wrote:\n> On Mon, Nov 21, 2011 at 10:01 AM, Russ Cox <rsc@golang.org> wrote:\n>> It would be really great if someone would get Go building\n>> completely on Plan 9 and then we can do a few big CLs\n>> and be done. \u00a0The current process feels like it will never\n>> converge: we haven't even reached the Go packages, it seems.\n>\n> I'm building and running Go on Plan 9. It's not quite there on NIX.\n> There are some issues with the tests on both Plan 9 and NIX.\n>\n> But the approach I took was to use mkfiles. That particular CL will\n> never be accepted, I now know.\n>\n> I'm going to wait for Go 1 and see how things look before I do much\n> more. The removal of almost all Makefiles\n> will make life a great deal simpler.\n>\n> ron\n>\n",
			"disapproval": false,
			"date": "2011-11-21 18:27:38.322910",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "You put the goo bits in lib9.a, which doesn't port nicely to Plan 9.\nA separate library for them is almost a must under Plan 9; whether one\nneeds to mirror that in Posix is a judgement call.  The conflict I\nwould try to address is how to avoid maintaining two sets of function\ndeclarations (in <u.h> in my choice of implementation) and how to make\nsure that the definitions are available to the linker in the Plan 9\nenvironment.\n\nLucio.\n\nOn 11/19/11, Russ Cox <rsc@golang.org> wrote:\n> I don't see why a new library is needed for Plan 9.\n> If you were able to handle ctype functions by adjusting\n> the go-local copy of u.h or libc.h appropriately, then\n> you can do the same here.\n>\n> Russ\n>\n",
			"disapproval": false,
			"date": "2011-11-19 16:08:54.291407",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ugly!  If you're going to keep a copy of libc, you may as well have a\nlibgoos.  The only difference will be in the Plan 9 situation: the\nmakeshift <u.h> can contain an include of <goos.h> and in <goos.h> we\ncan have a #pragma that causes libgoos.a to be included.\n\nThat sounds feasible to me, am I missing anything?\n\nLucio.\n\nOn 11/19/11, Anthony Martin <ality@pbrane.org> wrote:\n> Russ Cox <rsc@golang.org> once said:\n>> I don't see why a new library is needed for Plan 9.\n>> If you were able to handle ctype functions by adjusting\n>> the go-local copy of u.h or libc.h appropriately, then\n>> you can do the same here.\n>\n> The difference is that the ctype changes\n> were just in the libc.h header.  I don't\n> want to have to keep a custom libc just\n> for these four functions.\n>\n> Hm.  Maybe I could just build the goos.c\n> file and then add it to a copy of Plan 9's\n> libc.a.  Or I could even transform the\n> functions into macros.\n>\n> I'll try those out and report back.\n>\n>   Anthony\n>\n",
			"disapproval": false,
			"date": "2011-11-19 16:36:16.316223",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"ality@pbrane.org",
				"rsc@golang.org",
				"lucio.dere@gmail.com",
				"rminnich@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Just one minor nit from me.  I only scanned what looked like rather mechanical changes, I doubt I overlooked any critical errors.\n\nhttp://codereview.appspot.com/5418048/diff/3001/include/goenv.h\nFile include/goenv.h (right):\n\nhttp://codereview.appspot.com/5418048/diff/3001/include/goenv.h#newcode7\ninclude/goenv.h:7: #if defined(__cplusplus)\nPlease, please use #ifdef __cplusplus!",
			"disapproval": false,
			"date": "2011-11-19 15:40:05.792732",
			"approval": false
		},
		{
			"sender": "rminnich@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What's wrong with the time-honored trick of just building the goos.c\nfile into the library and nothing else, using the GOHOSTOS variable?\n\nThe Makefile is just about set up in a way that would make that all\nwork. It would not take much.\n\nifeq ($(GOHOSTOS, plan9)\nLIB9OFILES=goos.$o\nendif\n\nNote the = instead of the +=\n\nron\n",
			"disapproval": false,
			"date": "2011-11-19 23:38:38.819107",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 11/20/11, ron minnich <rminnich@gmail.com> wrote:\n> On Sat, Nov 19, 2011 at 8:04 PM, Lucio De Re <lucio.dere@gmail.com> wrote:\n>\n>> I think that will break where libc is also required (practically\n>> everywhere).  You'd have to #include <lib9.h> and I don't think that\n>> helps in this case.\n>\n> I guess I'm confused. How would this break libc usage if the library\n> is called lib9?\n>\nYou still need an additional inclusion everywhere (maybe in <u.h>, but\nI don't really think that applies), so you may as well call it libgoos\nor, more usefully, libgo.\n\n> I'm having a hard time seeing the problem but that may be due to a\n> difference in my port effort and this one. I'll try to look at this\n> again when I get a chance.\n>\nMaybe it's not a problem, I think it's an issue of perception: having\nboth libc and lib9 is a hack and very prone to trouble.  Call it libgo\nand you have Anthony's suggestion.\n\n> Andrey and I used mk. It was very easy to set it up and it allows us\n> to nicely separate out the Plan 9 bits. For the case of goos.c we just\n> added a rule for the cmds that added a goos.$O prerequisite in the\n> mkfile.\n>\nYeah, the only difference in my approach was to import the modules\ndirectly from the lib9 source directory (I don't have the exact\ndetails in front of me).\n\n> Using mk is a doomed approach: mkfiles won't be accepted into the Go tree.\n>\nIt's been my feeling as well, I guess I may as well accept that\nreality.  What I have been thinking thought, is that Russ used mk in\np9p and we could merge Go with p9p (p9p with Go?) and force the Go\nAuthors' hand that way.\n\n> So, based on what I've learned from my doomed effort, I'm planning to\n> try again when Go 1 is out. I think we can jointly work this out at\n> that point.\n>\nGood thinking.\n\n> So far the Go team has accepted reasonable changes needed to make Plan\n> 9 work. You all probably made the right decision when you decided to\n> use ape/make.\n>\nI didn't. I think that will be the eventual path, but for me to go\nthere (and I guess for everyone else) is a lot of hard work.\nPersonally, I think merging the two streams deserves a separate\nproject with well-defined design goals.\n\nLucio.\n",
			"disapproval": false,
			"date": "2011-11-20 05:03:36.693953",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Russ Cox <rsc@golang.org> once said:\n> I don't see why a new library is needed for Plan 9.\n> If you were able to handle ctype functions by adjusting\n> the go-local copy of u.h or libc.h appropriately, then\n> you can do the same here.\n\nThe difference is that the ctype changes\nwere just in the libc.h header.  I don't\nwant to have to keep a custom libc just\nfor these four functions.\n\nHm.  Maybe I could just build the goos.c\nfile and then add it to a copy of Plan 9's\nlibc.a.  Or I could even transform the\nfunctions into macros.\n\nI'll try those out and report back.\n\n  Anthony\n",
			"disapproval": false,
			"date": "2011-11-19 16:11:26.222603",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"rsc@golang.org",
				"lucio.dere@gmail.com",
				"rminnich@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, lucio.dere@gmail.com, rminnich@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2011-11-19 14:39:24.910793",
			"approval": false
		},
		{
			"sender": "rminnich@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Nov 19, 2011 at 8:04 PM, Lucio De Re <lucio.dere@gmail.com> wrote:\n\n> I think that will break where libc is also required (practically\n> everywhere). \u00a0You'd have to #include <lib9.h> and I don't think that\n> helps in this case.\n\nI guess I'm confused. How would this break libc usage if the library\nis called lib9?\n\nI'm having a hard time seeing the problem but that may be due to a\ndifference in my port effort and this one. I'll try to look at this\nagain when I get a chance.\n\nAndrey and I used mk. It was very easy to set it up and it allows us\nto nicely separate out the Plan 9 bits. For the case of goos.c we just\nadded a rule for the cmds that added a goos.$O prerequisite in the\nmkfile.\n\nUsing mk is a doomed approach: mkfiles won't be accepted into the Go tree.\n\nSo, based on what I've learned from my doomed effort, I'm planning to\ntry again when Go 1 is out. I think we can jointly work this out at\nthat point.\n\nSo far the Go team has accepted reasonable changes needed to make Plan\n9 work. You all probably made the right decision when you decided to\nuse ape/make.\n\nron\n",
			"disapproval": false,
			"date": "2011-11-20 04:19:30.273460",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 11/20/11, ron minnich <rminnich@gmail.com> wrote:\n> On Sat, Nov 19, 2011 at 9:03 PM, Lucio De Re <lucio.dere@gmail.com> wrote:\n>\n>> ... merge Go with p9p (p9p with Go?) and force the Go\n>> Authors' hand that way.\n>\n> I think that is not a realistic goal.\n>\nI wasn't really being serious, I do believe that one needs to think\noutside the box.\n\n> In any event it's not what Andrey and I are after. I want this on Plan 9/NIX\n> hg clone ...\n> cd go/src\n> ./script\n>\n> no changes to the go tree. If we have to change some things in Plan\n> 9/NIX I'm fine with that. On NIX, we've already changed the\n> architecture files to define GC to name the current Go compiler. We're\n> happy to change whatever we need on NIX to make an unmodified Go tree\n> work. Our long term plan is to replace as much C-based userland code\n> as possible with Go.\n>\nI don't know if this is viable, I'd never condone needing BASH for the\ninstallation, no matter how popular BASH becomes. Nor do I believe\nthat Perl and even HG ought to be essential.\n\nThat's me, others may want to work towards a goal similar to yours.\nIdeally, I'd rather have a Go install procedure: this is possible\nbecause Go executables are statically linked, but it is only a\nlong-term objective.\n\nMaybe a facetious suggestion, but would linuxemu not be the right\nchange to NIX to make installing Go possible (and easiest)?\n\nAs for spending time replacing the C userland with Go equivalent, I\nneed to point out that such resources could be better employed adding\nthe utilities, such as a web browser, whose absence have limited the\ndissemination of Plan 9 and its novel concepts.\n\n> But to recap: our goals are simple: build Go compilers/packages from\n> an unmodified hg clone of the standard Go tree, so that Plan 9 is as\n> well supported as the other platforms.\n>\nAgain, I think linuxemu is the shortest route to that.  Realistically,\nI think a different objective needs to be identified to avoid the\nphilosophically wrong principle enshrined in using linuxemu here.  I\nalso think that identifying a better route will reveal novel\napproaches that can be incorporated into the Go philosophy.\n\nLucio.\n",
			"disapproval": false,
			"date": "2011-11-20 06:36:52.352365",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I couldn't agree more that sucking the information from the lib9\nsource is a poor idea.  I can't think of a better approach than a\nseparate library, but I have a suspicion that Russ and the Commander\nwill surprise us.\n\nBut I'm right with you, right now.  I'll review the changes separately.\n\nLucio.\n\nOn 11/19/11, ality@pbrane.org <ality@pbrane.org> wrote:\n> Reviewers: rsc, lucio, rminnich,\n>\n> Message:\n> Hello rsc@golang.org, lucio.dere@gmail.com, rminnich@gmail.com (cc:\n> golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://code.google.com/p/go/\n>\n>\n> Description:\n> libgoenv: extract the goos bits from lib9\n>\n> The goos* functions don't belong in the\n> compatibility layer.\n>\n> I have a feeling this won't be received\n> well but it's the cleanest way to solve\n> one of the few remaining issues with the\n> Plan 9 port.\n>\n> Please review this at http://codereview.appspot.com/5418048/\n>\n> Affected files:\n>    A include/goenv.h\n>    M src/Make.ccmd\n>    M src/cmd/5a/a.h\n>    M src/cmd/5c/gc.h\n>    M src/cmd/5l/l.h\n>    M src/cmd/6a/a.h\n>    M src/cmd/6c/gc.h\n>    M src/cmd/6l/l.h\n>    M src/cmd/8a/a.h\n>    M src/cmd/8c/gc.h\n>    M src/cmd/8l/l.h\n>    M src/cmd/gc/go.h\n>    M src/lib9/Makefile\n>    A src/libgoenv/Makefile\n>    A src/libgoenv/goos.c\n>    M src/make.bash\n>    M src/pkg/runtime/Makefile\n>    M src/pkg/runtime/mkversion.c\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-11-19 15:30:10.076090",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 11/20/11, ron minnich <rminnich@gmail.com> wrote:\n> What's wrong with the time-honored trick of just building the goos.c\n> file into the library and nothing else, using the GOHOSTOS variable?\n>\nI think that will break where libc is also required (practically\neverywhere).  You'd have to #include <lib9.h> and I don't think that\nhelps in this case.\n\n> The Makefile is just about set up in a way that would make that all\n> work. It would not take much.\n>\nAre you and Andrey using Gmake to build the Plan 9 distribution? I've\nbeen thinking about merging the Plan 9 port efforts into the main Go\ndistribution and I'm looking for opinions and suggestions.\n\nLucio.\n",
			"disapproval": false,
			"date": "2011-11-20 04:04:23.118713",
			"approval": false
		},
		{
			"sender": "rminnich@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Nov 19, 2011 at 9:03 PM, Lucio De Re <lucio.dere@gmail.com> wrote:\n\n> ... merge Go with p9p (p9p with Go?) and force the Go\n> Authors' hand that way.\n\nI think that is not a realistic goal.\n\nIn any event it's not what Andrey and I are after. I want this on Plan 9/NIX\nhg clone ...\ncd go/src\n./script\n\nno changes to the go tree. If we have to change some things in Plan\n9/NIX I'm fine with that. On NIX, we've already changed the\narchitecture files to define GC to name the current Go compiler. We're\nhappy to change whatever we need on NIX to make an unmodified Go tree\nwork. Our long term plan is to replace as much C-based userland code\nas possible with Go.\n\nBut to recap: our goals are simple: build Go compilers/packages from\nan unmodified hg clone of the standard Go tree, so that Plan 9 is as\nwell supported as the other platforms.\n\nron\n",
			"disapproval": false,
			"date": "2011-11-20 05:55:30.679904",
			"approval": false
		},
		{
			"sender": "rminnich@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Nov 21, 2011 at 10:01 AM, Russ Cox <rsc@golang.org> wrote:\n> It would be really great if someone would get Go building\n> completely on Plan 9 and then we can do a few big CLs\n> and be done. \u00a0The current process feels like it will never\n> converge: we haven't even reached the Go packages, it seems.\n\nI'm building and running Go on Plan 9. It's not quite there on NIX.\nThere are some issues with the tests on both Plan 9 and NIX.\n\nBut the approach I took was to use mkfiles. That particular CL will\nnever be accepted, I now know.\n\nI'm going to wait for Go 1 and see how things look before I do much\nmore. The removal of almost all Makefiles\nwill make life a great deal simpler.\n\nron\n",
			"disapproval": false,
			"date": "2011-11-21 15:47:34.590240",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"rsc@golang.org",
				"lucio.dere@gmail.com",
				"rminnich@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/11/19 23:38:38, rminnich wrote:\n> What's wrong with the time-honored trick of just building the goos.c\n> file into the library and nothing else, using the GOHOSTOS variable?\n> \n> The Makefile is just about set up in a way that would make that all\n> work. It would not take much.\n> \n> ifeq ($(GOHOSTOS, plan9)\n> LIB9OFILES=goos.$o\n> endif\n> \n> Note the = instead of the +=\n> \n> ron\n\nI've decided to go with this suggestion so\nI'm abandoning this CL.  The new stuff is\nin https://codereview.appspot.com/5478059/.\n\n  Anthony",
			"disapproval": false,
			"date": "2011-12-11 09:25:56.097041",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"rsc@golang.org",
				"lucio.dere@gmail.com",
				"rminnich@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2011-12-11 09:31:45.355952",
			"approval": false
		}
	],
	"owner_email": "ality@pbrane.org",
	"private": false,
	"base_url": "",
	"owner": "ality",
	"subject": "code review 5418048: libgoenv: extract the goos bits from lib9",
	"created": "2011-11-19 14:24:41.893895",
	"patchsets": [
		1,
		3,
		3001
	],
	"modified": "2011-12-11 09:31:45.436570",
	"closed": true,
	"issue": 5418048
}