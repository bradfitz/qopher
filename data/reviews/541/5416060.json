{
	"description": "os: new FileInfo, FileMode types + update tree",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"r@google.com",
		"gri@golang.org",
		"bradfitz@golang.org",
		"iant@golang.org",
		"iant@google.com",
		"nigeltao@golang.org",
		"n13m3y3r@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Nov 21, 2011 at 14:47,  <gri@golang.org> wrote:\n> http://codereview.appspot.com/5416060/diff/2001/src/pkg/io/fileinfo.go#newcode9\n> src/pkg/io/fileinfo.go:9: Mode() FileMode \u00a0 \u00a0 // file mode bits\n> There could be an Impl() FileMode or some such, returning a mask\n> defining which FileMode bits are implemented by a specific FileInfo\n> (describing the capability). It would be a constant for a concrete\n> FileInfo implementation.\n\nI don't think it's important enough to force every implementation\nto write one of these methods and then force every caller to\nuse it.  Everything just gets more complicated if we do that.\n\n> http://codereview.appspot.com/5416060/diff/2001/src/pkg/io/fileinfo.go#newcode73\n> src/pkg/io/fileinfo.go:73: func (m FileMode) IsDir() bool {\n> given that fi.Mode().IsDir() is called so often, I think IsDir() should\n> just be on FileInfo directly.\n\nIt does get called often, but making it a separate method\nforces every implementation to write one (and they're already\nwriting Mode) and to keep it consistent with Mode.  And then\nyou know about Mode.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-21 20:18:45.069703",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"r@google.com",
				"gri@golang.org",
				"bradfitz@golang.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI\n\nHave you just not gotten around to the five other os/stat_XXX.go files?\n\nhttp://codereview.appspot.com/5416060/diff/5006/src/cmd/godoc/dirtrees.go\nFile src/cmd/godoc/dirtrees.go (right):\n\nhttp://codereview.appspot.com/5416060/diff/5006/src/cmd/godoc/dirtrees.go#newcode43\nsrc/cmd/godoc/dirtrees.go:43: return fi.Mode().IsDir() && len(name) > 0 &&\nThere seems to be a lot of s/IsDirectory()/Mode().IsDir()/.  Should we just keep IsDirectory as a convenience method?\n\nhttp://codereview.appspot.com/5416060/diff/5006/src/pkg/os/file_unix.go\nFile src/pkg/os/file_unix.go (right):\n\nhttp://codereview.appspot.com/5416060/diff/5006/src/pkg/os/file_unix.go#newcode140\nsrc/pkg/os/file_unix.go:140: // further FileInf\nSomething went wrong at the end of this comment.\n\nhttp://codereview.appspot.com/5416060/diff/5006/src/pkg/os/file_unix.go#newcode149\nsrc/pkg/os/file_unix.go:149: // nil error. If it encounters an error before the end of the\nThis comment does not appear to correctly describe the function's behaviour either before or after this CL.\n\nhttp://codereview.appspot.com/5416060/diff/5006/src/pkg/time/format.go\nFile src/pkg/time/format.go (right):\n\nhttp://codereview.appspot.com/5416060/diff/5006/src/pkg/time/format.go#newcode258\nsrc/pkg/time/format.go:258: func itoa(x int) string {\nThis seems unrelated to this CL.",
			"disapproval": false,
			"date": "2011-11-21 20:51:32.285432",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Nov 21, 2011 at 15:51,  <iant@golang.org> wrote:\n> Have you just not gotten around to the five other os/stat_XXX.go files?\n\nYes, I was waiting for comments to settle down before\ntaking the time to make os work everywhere.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-21 20:52:49.175581",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nMoved back into os.\n",
			"disapproval": false,
			"date": "2011-11-21 20:30:45.143124",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Nov 21, 2011 at 14:37, Rob 'Commander' Pike <r@google.com> wrote:\n> part of me feels io is the wrong place for this, that putting it here\n> expands the purview of the io package. this is not a 'basic interface\n> to i/o primitives' but a wrapper interface for file systems.\n\ni was unsure about that.  it is easy to keep in os too.\nat one point i thought that having it in io would let\nsyscall implement it by having access to io.FileMode,\nbut that is not true (the interface mentions time and\nsyscall cannot import time).\n\ni will make a note to move it back into os.\n",
			"disapproval": false,
			"date": "2011-11-21 19:42:11.280160",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Nov 21, 2011, at 11:42 AM, Russ Cox wrote:\n\n> On Mon, Nov 21, 2011 at 14:37, Rob 'Commander' Pike <r@google.com> wrote:\n>> part of me feels io is the wrong place for this, that putting it here\n>> expands the purview of the io package. this is not a 'basic interface\n>> to i/o primitives' but a wrapper interface for file systems.\n> \n> i was unsure about that.  it is easy to keep in os too.\n> at one point i thought that having it in io would let\n> syscall implement it by having access to io.FileMode,\n> but that is not true (the interface mentions time and\n> syscall cannot import time).\n> \n> i will make a note to move it back into os.\n\nos is good\n\n",
			"disapproval": false,
			"date": "2011-11-21 19:56:14.427291",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "part of me feels io is the wrong place for this, that putting it here expands the purview of the io package. this is not a 'basic interface to i/o primitives' but a wrapper interface for file systems.\n\n",
			"disapproval": false,
			"date": "2011-11-21 19:37:39.898104",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-21 19:12:04.544917",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Nov 21, 2011 at 14:36,  <r@golang.org> wrote:\n> since i get dinged, so will you. one space after sentence-ending period.\n\nwho is complaining about this?\nit's definitely not me, and i've written a ton\nof comments with this spacing in the tree.\n",
			"disapproval": false,
			"date": "2011-11-21 20:12:46.436718",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Nov 21, 2011 at 15:51,  <iant@golang.org> wrote:\n> There seems to be a lot of s/IsDirectory()/Mode().IsDir()/. \u00a0Should we\n> just keep IsDirectory as a convenience method?\n\nI think it's inconvenient mainly because it is changing,\nnot because it is worse.  I'd want to shorten IsDirectory\nto IsDir anyway, so it would still all change.  There are\nother implementations of this interface, and I'd like to\nkeep it as trivial as possible to implement, so I was\ntrying to keep the number of required methods low.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-21 20:54:33.293615",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5416060/diff/2001/src/pkg/io/fileinfo.go\nFile src/pkg/io/fileinfo.go (right):\n\nhttp://codereview.appspot.com/5416060/diff/2001/src/pkg/io/fileinfo.go#newcode13\nsrc/pkg/io/fileinfo.go:13: // describe the same file.  For example, on Unix this\nsee line 24\n\nhttp://codereview.appspot.com/5416060/diff/2001/src/pkg/io/fileinfo.go#newcode15\nsrc/pkg/io/fileinfo.go:15: // underlying structures are identical.\ns/.$/;/ on other\\\nsystems the decision may be based on the path names.\n\nhttp://codereview.appspot.com/5416060/diff/2001/src/pkg/io/fileinfo.go#newcode16\nsrc/pkg/io/fileinfo.go:16: // Same must return false if other is an unexpected\n\"unexpected\"?\ndo you mean\n\nSame must return false if the dynamic type of other is different\nfrom that of the receiver.\n\n?\n\nhttp://codereview.appspot.com/5416060/diff/2001/src/pkg/io/fileinfo.go#newcode24\nsrc/pkg/io/fileinfo.go:24: // to another portably.  Not all bits apply to all systems.\nsince i get dinged, so will you. one space after sentence-ending period.\n\nhttp://codereview.appspot.com/5416060/diff/2001/src/pkg/io/fileinfo.go#newcode29\nsrc/pkg/io/fileinfo.go:29: // The bottom nine bits are the standard Unix rwxrwxrwx permissions.\ntop and bottom are fine and can stay if you like.\ni'd use most- and least-significant to avoid endianness questions.\n\nhttp://codereview.appspot.com/5416060/diff/2001/src/pkg/io/fileinfo.go#newcode77\nsrc/pkg/io/fileinfo.go:77: func (m FileMode) Perm() FileMode {\ndoc comments",
			"disapproval": false,
			"date": "2011-11-21 19:36:23.054833",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"r@google.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI.\n\nI don't mind this being in package io for a start. Perhaps theres' a better choice eventually.\n\nhttp://codereview.appspot.com/5416060/diff/2001/src/pkg/io/fileinfo.go\nFile src/pkg/io/fileinfo.go (right):\n\nhttp://codereview.appspot.com/5416060/diff/2001/src/pkg/io/fileinfo.go#newcode9\nsrc/pkg/io/fileinfo.go:9: Mode() FileMode     // file mode bits\nThere could be an Impl() FileMode or some such, returning a mask defining which FileMode bits are implemented by a specific FileInfo (describing the capability). It would be a constant for a concrete FileInfo implementation.\n\nhttp://codereview.appspot.com/5416060/diff/2001/src/pkg/io/fileinfo.go#newcode33\nsrc/pkg/io/fileinfo.go:33: ModeDir       FileMode = 1 << (32 - 1 - iota) // d: is a directory\nthe parens are not needed\n\nhttp://codereview.appspot.com/5416060/diff/2001/src/pkg/io/fileinfo.go#newcode73\nsrc/pkg/io/fileinfo.go:73: func (m FileMode) IsDir() bool {\ngiven that fi.Mode().IsDir() is called so often, I think IsDir() should just be on FileInfo directly.",
			"disapproval": false,
			"date": "2011-11-21 19:47:54.491611",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Nov 21, 2011 at 14:57,  <r@golang.org> wrote:\n> yes they are\n\ngri has clearly been doing too much c programming.\n",
			"disapproval": false,
			"date": "2011-11-21 20:01:44.275262",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Nov 21, 2011, at 12:12 PM, Russ Cox wrote:\n\n> On Mon, Nov 21, 2011 at 14:36,  <r@golang.org> wrote:\n>> since i get dinged, so will you. one space after sentence-ending period.\n> \n> who is complaining about this?\n> it's definitely not me, and i've written a ton\n> of comments with this spacing in the tree.\n\ni don't like to name names, but bradfitz. ok, i like to name names.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-11-21 20:13:44.504414",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It seems overly pedantic, even to me.\n\nI am not going to complain if some people use\none space and some people use two spaces,\nand I'm also not going to reformat the thousands\nof lines of comments that use two spaces in the\ntree.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-21 20:21:41.774856",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"r@google.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5416060/diff/2001/src/pkg/io/fileinfo.go\nFile src/pkg/io/fileinfo.go (right):\n\nhttp://codereview.appspot.com/5416060/diff/2001/src/pkg/io/fileinfo.go#newcode33\nsrc/pkg/io/fileinfo.go:33: ModeDir       FileMode = 1 << (32 - 1 - iota) // d: is a directory\nOn 2011/11/21 19:47:54, gri wrote:\n> the parens are not needed\n\nyes they are",
			"disapproval": false,
			"date": "2011-11-21 19:57:25.058912",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Nov 21, 2011 at 3:13 PM, Rob 'Commander' Pike <r@google.com> wrote:\n\n>\n> On Nov 21, 2011, at 12:12 PM, Russ Cox wrote:\n>\n> > On Mon, Nov 21, 2011 at 14:36,  <r@golang.org> wrote:\n> >> since i get dinged, so will you. one space after sentence-ending period.\n> >\n> > who is complaining about this?\n> > it's definitely not me, and i've written a ton\n> > of comments with this spacing in the tree.\n>\n> i don't like to name names, but bradfitz. ok, i like to name names.\n>\n\nActually Nigel.\n\nAccording to wikipedia, two spaces after sentences are okay in fixed-width\nfonts, but unacceptable in variable-width fonts.\n\n;; Per nigeltao: use one space after full stop in comments.\n;; Only enforce this in go-mode.\n(defun nigelize ()\n (interactive)\n (when (eq major-mode 'go-mode) (query-replace \".  \" \". \" nil (point-min)\n(point-max))))\n(eval-after-load 'go-mode\n #'(add-hook 'before-save-hook #'nigelize))\n",
			"disapproval": false,
			"date": "2011-11-21 20:19:03.029593",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "oops - don't know what I was thinking (not much, i guess) - on to my\n3rd coffee today\n- gri\n\nOn Mon, Nov 21, 2011 at 12:01 PM, Russ Cox <rsc@golang.org> wrote:\n> gri has clearly been doing too much c programming.\n",
			"disapproval": false,
			"date": "2011-11-21 21:02:57.646401",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Russ Cox <rsc@golang.org> writes:\n\n> On Mon, Nov 21, 2011 at 15:51,  <iant@golang.org> wrote:\n>> There seems to be a lot of s/IsDirectory()/Mode().IsDir()/. \u00a0Should we\n>> just keep IsDirectory as a convenience method?\n>\n> I think it's inconvenient mainly because it is changing,\n> not because it is worse.  I'd want to shorten IsDirectory\n> to IsDir anyway, so it would still all change.  There are\n> other implementations of this interface, and I'd like to\n> keep it as trivial as possible to implement, so I was\n> trying to keep the number of required methods low.\n\nWell, we could get the method for free by making the mode an embedded\nfield in the various implementations.\n\nIt's not a big deal.  It's just that asking whether a FileInfo is a\ndirectory is clearly a common operation, and writing s.IsDir() is both\neasier to remember and more logical than s.Mode().IsDir().\n\nIan\n",
			"disapproval": false,
			"date": "2011-11-21 22:38:06.290011",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm all for the shortening from IsDirectory() to IsDir(). But in\naddition to iant's comments, it seems that there a many more clients\n(call sites) than implementations, and that we should keep the call\nsites simple and worry about ease of implementation after that.\n- gri\n\nOn Mon, Nov 21, 2011 at 12:54 PM, Russ Cox <rsc@golang.org> wrote:\n> On Mon, Nov 21, 2011 at 15:51, \u00a0<iant@golang.org> wrote:\n>> There seems to be a lot of s/IsDirectory()/Mode().IsDir()/. \u00a0Should we\n>> just keep IsDirectory as a convenience method?\n>\n> I think it's inconvenient mainly because it is changing,\n> not because it is worse. \u00a0I'd want to shorten IsDirectory\n> to IsDir anyway, so it would still all change. \u00a0There are\n> other implementations of this interface, and I'd like to\n> keep it as trivial as possible to implement, so I was\n> trying to keep the number of required methods low.\n>\n> Russ\n>\n",
			"disapproval": false,
			"date": "2011-11-21 22:56:33.123437",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Nov 21, 2011, at 5:28 PM, Robert Griesemer wrote:\n\n> Seems like another indication that the IsDir() should be a method of FileInfo.\n\nmaybe. i was expressing my discomfort rather than proposing a solution.\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2011-11-22 01:53:30.374103",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 22 November 2011 07:19, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n> On Mon, Nov 21, 2011 at 3:13 PM, Rob 'Commander' Pike <r@google.com> wrote:\n>> On Nov 21, 2011, at 12:12 PM, Russ Cox wrote:\n>> > On Mon, Nov 21, 2011 at 14:36, \u00a0<r@golang.org> wrote:\n>> >> since i get dinged, so will you. one space after sentence-ending\n>> >> period.\n>> >\n>> > who is complaining about this?\n>> > it's definitely not me, and i've written a ton\n>> > of comments with this spacing in the tree.\n>>\n>> i don't like to name names, but bradfitz. ok, i like to name names.\n>\n> Actually Nigel.\n> According to wikipedia, two spaces after sentences are okay in fixed-width\n> fonts, but unacceptable in variable-width fonts.\n\nActually, my rule is keep the 1-space or 2-space style consistent with\nthe rest of the file. A 2-spacing colleague kept submitting patches to\na file I originally wrote that started as (and remained) 1-space, and\nwrote that emacs script to do so. But, if a file is already in 2-space\nstyle, then I'm happy to leave it (and any new code in it) in 2-space\nstyle.\n",
			"disapproval": false,
			"date": "2011-11-21 23:27:55.436680",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Seems like another indication that the IsDir() should be a method of FileInfo.\n- gri\n\nOn Mon, Nov 21, 2011 at 5:20 PM, Rob 'Commander' Pike <r@google.com> wrote:\n> Modes aren't directories. That's what's bugging me. Files are. I don't have a good answer.\n>\n> -rob\n>\n>\n",
			"disapproval": false,
			"date": "2011-11-22 01:28:08.211958",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Modes aren't directories. That's what's bugging me. Files are. I don't have a good answer.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-11-22 01:20:50.280354",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Since by far the most common use of an FI  is to ask whether the file is directory, that should be easy to do. I firmly believe that the common case should be the easy case.\n\nI understand the arguments about splitting the definition out, so I propose:\n\n1) Leave IsDir() in FileMode.\n2) Add IsDir() to FileInfo.\n3) Document that the definition of FileInfo.IsDir is that it is exactly the same as FileInfo.Mode().IsDir and also document why.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-11-22 01:59:55.430800",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"r@google.com",
				"gri@golang.org",
				"bradfitz@golang.org",
				"iant@golang.org",
				"iant@google.com",
				"nigeltao@golang.org",
				"n13m3y3r@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "We should change archive/zip's FileHeader.Mode function to return a FileMode in a follow up CL, and probably something similar in archive/tar.",
			"disapproval": false,
			"date": "2011-11-28 19:07:14.267892",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"r@google.com",
				"gri@golang.org",
				"bradfitz@golang.org",
				"iant@golang.org",
				"iant@google.com",
				"nigeltao@golang.org",
				"n13m3y3r@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5416060/diff/5006/src/pkg/time/zoneinfo_plan9.go\nFile src/pkg/time/zoneinfo_plan9.go (right):\n\nhttp://codereview.appspot.com/5416060/diff/5006/src/pkg/time/zoneinfo_plan9.go#newcode12\nsrc/pkg/time/zoneinfo_plan9.go:12: //)\nd?",
			"disapproval": false,
			"date": "2011-11-28 19:08:56.212361",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"r@google.com",
				"gri@golang.org",
				"bradfitz@golang.org",
				"iant@golang.org",
				"iant@google.com",
				"nigeltao@golang.org",
				"n13m3y3r@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5416060/diff/12001/misc/dashboard/builder/main.go\nFile misc/dashboard/builder/main.go (right):\n\nhttp://codereview.appspot.com/5416060/diff/12001/misc/dashboard/builder/main.go#newcode413\nmisc/dashboard/builder/main.go:413: return err == nil && s.Mode().IsDir()\njust s.IsDir()\n\nhttp://codereview.appspot.com/5416060/diff/12001/misc/dashboard/builder/main.go#newcode418\nmisc/dashboard/builder/main.go:418: return err == nil && !s.Mode().IsDir()\nditto\n\nhttp://codereview.appspot.com/5416060/diff/12001/misc/dashboard/builder/package.go\nFile misc/dashboard/builder/package.go (right):\n\nhttp://codereview.appspot.com/5416060/diff/12001/misc/dashboard/builder/package.go#newcode85\nmisc/dashboard/builder/package.go:85: return !fi.Mode().IsDir() && // exclude directories\njust !fi.IsDir()\n\nhttp://codereview.appspot.com/5416060/diff/12001/src/cmd/godoc/httpzip.go\nFile src/cmd/godoc/httpzip.go (right):\n\nhttp://codereview.appspot.com/5416060/diff/12001/src/cmd/godoc/httpzip.go#newcode96\nsrc/cmd/godoc/httpzip.go:96: mode = 0\nremove and have comment instead? (// no need to set mode)\n\nhttp://codereview.appspot.com/5416060/diff/12001/src/cmd/godoc/httpzip.go#newcode169\nsrc/cmd/godoc/httpzip.go:169: // no size or mtime for directories\ngiven this comment, having the next two lines is odd - add respective comments next to the values\n\nhttp://codereview.appspot.com/5416060/diff/12001/src/cmd/godoc/zip.go\nFile src/cmd/godoc/zip.go (right):\n\nhttp://codereview.appspot.com/5416060/diff/12001/src/cmd/godoc/zip.go#newcode58\nsrc/cmd/godoc/zip.go:58: return os.ModeDir | 0555\nchoice of constants could use a comment\n\nhttp://codereview.appspot.com/5416060/diff/12001/src/cmd/gofix/main.go\nFile src/cmd/gofix/main.go (right):\n\nhttp://codereview.appspot.com/5416060/diff/12001/src/cmd/gofix/main.go#newcode236\nsrc/cmd/gofix/main.go:236: return !mode.IsDir() && !strings.HasPrefix(name, \".\") && strings.HasSuffix(name, \".go\")\njust f.IsDir() and get rid of mode\n\nhttp://codereview.appspot.com/5416060/diff/12001/src/cmd/gofmt/gofmt.go\nFile src/cmd/gofmt/gofmt.go (right):\n\nhttp://codereview.appspot.com/5416060/diff/12001/src/cmd/gofmt/gofmt.go#newcode87\nsrc/cmd/gofmt/gofmt.go:87: return !mode.IsDir() && !strings.HasPrefix(name, \".\") && strings.HasSuffix(name, \".go\")\njust f.IsDir() and get rid of mode\n\nhttp://codereview.appspot.com/5416060/diff/12001/src/pkg/os/export_test.go\nFile src/pkg/os/export_test.go (right):\n\nhttp://codereview.appspot.com/5416060/diff/12001/src/pkg/os/export_test.go#newcode9\nsrc/pkg/os/export_test.go:9: var TimespecToTime = timespecToTime\nnot sure why this file is in the CL\n\nhttp://codereview.appspot.com/5416060/diff/12001/src/pkg/os/file_unix.go\nFile src/pkg/os/file_unix.go (right):\n\nhttp://codereview.appspot.com/5416060/diff/12001/src/pkg/os/file_unix.go#newcode140\nsrc/pkg/os/file_unix.go:140: // further FileInf\nincomplete sentence\n\nhttp://codereview.appspot.com/5416060/diff/12001/src/pkg/os/getwd.go\nFile src/pkg/os/getwd.go (right):\n\nhttp://codereview.appspot.com/5416060/diff/12001/src/pkg/os/getwd.go#newcode34\nsrc/pkg/os/getwd.go:34: return pwd, nil\njust return ?\n\nhttp://codereview.appspot.com/5416060/diff/12001/src/pkg/os/getwd.go#newcode91\nsrc/pkg/os/getwd.go:91: return pwd, nil\njust return?\n\nhttp://codereview.appspot.com/5416060/diff/12001/src/pkg/time/zoneinfo_plan9.go\nFile src/pkg/time/zoneinfo_plan9.go (right):\n\nhttp://codereview.appspot.com/5416060/diff/12001/src/pkg/time/zoneinfo_plan9.go#newcode9\nsrc/pkg/time/zoneinfo_plan9.go:9: //import (\nnot sure why this is here",
			"disapproval": false,
			"date": "2011-11-28 21:06:24.711464",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Nov 28, 2011 at 14:15,  <r@golang.org> wrote:\n> // abbreviation for IsDir()\n> abbreviation for Mode().IsDir()\n\nthe perils of global search and replace\n",
			"disapproval": false,
			"date": "2011-11-28 19:15:59.982139",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\n> I understand the arguments about splitting the definition out, so I propose:\n>\n> 1) Leave IsDir() in FileMode.\n> 2) Add IsDir() to FileInfo.\n> 3) Document that the definition of FileInfo.IsDir is that it is exactly the same as FileInfo.Mode().IsDir and also document why.\n\nDid these.\n",
			"disapproval": false,
			"date": "2011-11-28 18:53:21.351709",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"r@google.com",
				"gri@golang.org",
				"bradfitz@golang.org",
				"iant@golang.org",
				"iant@google.com",
				"nigeltao@golang.org",
				"n13m3y3r@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "other than the one name, LGTM\n\nhttp://codereview.appspot.com/5416060/diff/12001/src/pkg/os/types.go\nFile src/pkg/os/types.go (right):\n\nhttp://codereview.appspot.com/5416060/diff/12001/src/pkg/os/types.go#newcode29\nsrc/pkg/os/types.go:29: Same(other FileInfo) bool\nthis name doesn't read well in practice.  it's an adjective that's used as a verb. normally this would be Equals but that conveys the wrong sense.  IsSameFileAs is  ideal except for ridiculous verbosity. i propose SameAs\n\nif this.SameAs(other) { .... }",
			"disapproval": false,
			"date": "2011-11-28 19:13:34.620406",
			"approval": true
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Nov 28, 2011, at 11:52 AM, Russ Cox wrote:\n\n> I agree about Same being too vague, but SameAs\n> sounds almost as vague.  How about SameFile?\n> That gets a little more concrete.  I am also looking\n> into whether SameFile needs to be in the interface\n> or can be an 'optional' method.\n\nSameFile is fine, certainly an improvement over Same.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-11-28 20:45:23.400146",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"r@google.com",
				"gri@golang.org",
				"bradfitz@golang.org",
				"iant@golang.org",
				"iant@google.com",
				"nigeltao@golang.org",
				"n13m3y3r@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5416060/diff/12001/src/pkg/os/types.go\nFile src/pkg/os/types.go (right):\n\nhttp://codereview.appspot.com/5416060/diff/12001/src/pkg/os/types.go#newcode21\nsrc/pkg/os/types.go:21: IsDir() bool        // abbreviation for IsDir()\nabbreviation for Mode().IsDir()",
			"disapproval": false,
			"date": "2011-11-28 19:15:33.783252",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I agree about Same being too vague, but SameAs\nsounds almost as vague.  How about SameFile?\nThat gets a little more concrete.  I am also looking\ninto whether SameFile needs to be in the interface\nor can be an 'optional' method.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-28 19:52:36.064226",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Nov 21, 2011 at 15:51,  <iant@golang.org> wrote:\n> http://codereview.appspot.com/5416060/diff/5006/src/pkg/os/file_unix.go#newcode149\n> src/pkg/os/file_unix.go:149: // nil error. If it encounters an error\n> before the end of the\n> This comment does not appear to correctly describe the function's\n> behaviour either before or after this CL.\n\nThis is for a different CL, then, but I am not sure what you\nare referring to.  It looks like if the function hits an unexpected\n(non-EOF) error it returns the current value of names.\n\n> http://codereview.appspot.com/5416060/diff/5006/src/pkg/time/format.go#newcode258\n> src/pkg/time/format.go:258: func itoa(x int) string {\n> This seems unrelated to this CL.\n\nYes, this is my codereview plugin not working right.\nIt is showing pieces of the time CL.  Sorry.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-30 16:33:40.794265",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"r@google.com",
				"gri@golang.org",
				"bradfitz@golang.org",
				"iant@golang.org",
				"iant@google.com",
				"nigeltao@golang.org",
				"n13m3y3r@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=7cdeacb20ef6 ***\n\nos: new FileInfo, FileMode types + update tree\n\nR=golang-dev, r, r, gri, bradfitz, iant, iant, nigeltao, n13m3y3r\nCC=golang-dev\nhttp://codereview.appspot.com/5416060",
			"disapproval": false,
			"date": "2011-11-30 17:04:19.955896",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5416060: io: new FileInfo, FileMode types + update tree",
	"created": "2011-11-21 19:11:36.886306",
	"patchsets": [
		1,
		2001,
		5006,
		12001,
		21001,
		20002,
		21002
	],
	"modified": "2011-11-30 17:04:21.714096",
	"closed": true,
	"issue": 5416060
}