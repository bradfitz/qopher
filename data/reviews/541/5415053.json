{
	"description": "exp/ssh: simplify client authentication API\n\n*** proposal for discussion ***",
	"cc": [
		"cw@f00f.org",
		"golang-dev@googlegroups.com",
		"huin@google.com"
	],
	"reviewers": [
		"rsc@golang.org",
		"agl@golang.org",
		"n13m3y3r@gmail.com"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This excludes the possibility of dropping in an\nauthentication agent.  That's not okay.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-18 23:42:33.623375",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi Russ,\n\nThank you for your feedback. I will abandon this CL.\n\nCheers\n\nDave\n\nOn Sat, Nov 19, 2011 at 10:57 AM, Russ Cox <rsc@golang.org> wrote:\n> On Fri, Nov 18, 2011 at 18:48, Dave Cheney <dave@cheney.net> wrote:\n>> Do you mean an agent that provides both Password and Publickey authentication ?\n>> If this is the concern then how about this ?\n>\n> I want to be able to plug in my own functions to\n> fetch a password from a system keyring (only when\n> asked, for a specific user+server pair), and to be\n> able to hand public key computations off to a trusted\n> process who holds the keys and hands back the answers.\n> Neither of those appears to be possible here, but both are\n> possible using the ClientAuth interface.\n>\n> I think we should leave things as they are now.\n> It is not very hard to write:\n>\n> \u00a0 \u00a0 \u00a0 config := &ClientConfig{\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 User: *sshuser,\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Auth: []ClientAuth{\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ClientAuthPublickey(kc),\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\n> \u00a0 \u00a0 \u00a0 }\n>\n> and it will be even easier to write\n>\n> \u00a0 \u00a0 \u00a0 config := &ClientConfig{\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 User: *sshuser,\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Auth: {ClientAuthPublickey(kc)},\n> \u00a0 \u00a0 \u00a0 }\n>\n> once that change from Go 1 goes in.\n>\n> Russ\n>\n",
			"disapproval": false,
			"date": "2011-11-20 02:59:09.059620",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"n13m3y3r@gmail.com",
				"cw@f00f.org",
				"huin@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The current ssh client auth API has a number of shortcomings which I think make it more difficult to use than necessary. Specifically:\n\n* For the simple case of supplying a username and password, consumers of the API have to construct their own ClientPassword implementation then pass it correctly to ClientConfig.Auth.\n\n* For the more complicated cases, the API doesn't protect people from attempting things that won't work. eg, the API may make some people feel that you can try multiple passwords for a particular user by passing multiple ClientPasswords. In a similar fashion, if you have multiple public keys, do you construct one keyring per key, or stick them all into the same keyring? The API doesn't give good guidance here.\n\nI would like to propose this change to the API, simplifying the fields in ClientConfig related to auth. In this CL these fields, if provided are translated into the correct ClientAuth implementations.\n\nDepending on how you feel about this change, this translation could be seen as retaining the flexibility of the old API, or complete overkill.",
			"disapproval": false,
			"date": "2011-11-18 22:12:09.018576",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"n13m3y3r@gmail.com",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"huin@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, agl@golang.org, n13m3y3r@gmail.com (cc: cw@f00f.org, golang-dev@googlegroups.com, huin@google.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-18 22:12:51.990351",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Do you mean an agent that provides both Password and Publickey authentication ?\n\nIf this is the concern then how about this ?\n\ntype ClientConfig struct {\n        // Rand provides the source of entropy for key exchange. If Rand is\n        // nil, the cryptographic random reader in package crypto/rand will\n        // be used.\n        Rand io.Reader\n\n        // The username to authenticate.\n        User string\n\n        // The password to authenticate. If this field is not provided,\n        // password authentication will not be used.\n        ClientPassword\n\n        // The keyring to authenticate. If this field is not provided, publickey\n        // authentication will not be used.\n        ClientKeyring\n}\n\nCheers\n\nDave\n\n\nOn Sat, Nov 19, 2011 at 10:42 AM, Russ Cox <rsc@golang.org> wrote:\n> This excludes the possibility of dropping in an\n> authentication agent. \u00a0That's not okay.\n>\n> Russ\n>\n",
			"disapproval": false,
			"date": "2011-11-18 23:48:59.081111",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Nov 18, 2011 at 18:48, Dave Cheney <dave@cheney.net> wrote:\n> Do you mean an agent that provides both Password and Publickey authentication ?\n> If this is the concern then how about this ?\n\nI want to be able to plug in my own functions to\nfetch a password from a system keyring (only when\nasked, for a specific user+server pair), and to be\nable to hand public key computations off to a trusted\nprocess who holds the keys and hands back the answers.\nNeither of those appears to be possible here, but both are\npossible using the ClientAuth interface.\n\nI think we should leave things as they are now.\nIt is not very hard to write:\n\n       config := &ClientConfig{\n               User: *sshuser,\n               Auth: []ClientAuth{\n                       ClientAuthPublickey(kc),\n               },\n       }\n\nand it will be even easier to write\n\n       config := &ClientConfig{\n               User: *sshuser,\n               Auth: {ClientAuthPublickey(kc)},\n       }\n\nonce that change from Go 1 goes in.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-18 23:57:29.019866",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"n13m3y3r@gmail.com",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"huin@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2011-11-20 03:00:19.477111",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 5415053: exp/ssh: simplify client authentication API",
	"created": "2011-11-18 21:56:56.722430",
	"patchsets": [
		1,
		2001,
		3,
		1010,
		10
	],
	"modified": "2011-11-20 03:00:21.512914",
	"closed": true,
	"issue": 5415053
}