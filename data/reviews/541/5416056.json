{
	"description": "dashboard: new Go dashboard data structure design",
	"cc": [
		"rsc@golang.org",
		"r@golang.org",
		"dsymonds@golang.org",
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5416056/diff/1/misc/dashboard/ndashboard/build/build.go\nFile misc/dashboard/ndashboard/build/build.go (right):\n\nhttp://codereview.appspot.com/5416056/diff/1/misc/dashboard/ndashboard/build/build.go#newcode14\nmisc/dashboard/ndashboard/build/build.go:14: Num        int // Internal monotonic counter unique to this repo.\nOn 2011/11/21 03:34:47, dsymonds wrote:\n> This assumes a linear history. Many people use DVCSes in a general branch mode,\n> which this isn't going to be able to model.\n\nIt doesn't matter. This is just to give the commits a consistent order on the status page.\n\nhttp://codereview.appspot.com/5416056/diff/1/misc/dashboard/ndashboard/build/build.go#newcode16\nmisc/dashboard/ndashboard/build/build.go:16: ParentHash string\nOn 2011/11/21 03:34:47, dsymonds wrote:\n> This can't model merge commits. Does that matter?\n\nNope. Again, it's just an ordering thing.\n\nhttp://codereview.appspot.com/5416056/diff/1/misc/dashboard/ndashboard/build/build.go#newcode19\nmisc/dashboard/ndashboard/build/build.go:19: User string         `datastore:\",noindex\"`\nOn 2011/11/21 03:34:47, dsymonds wrote:\n> Are you sure you don't want User and Time indexed? I could think of useful\n> purposes for them to be indexed.\n\nYou're right. I've removed the noindex flag.\n\nhttp://codereview.appspot.com/5416056/diff/1/misc/dashboard/ndashboard/build/build.go#newcode34\nmisc/dashboard/ndashboard/build/build.go:34: RepoURL string // (empty for Go commits)\nOn 2011/11/21 03:34:47, dsymonds wrote:\n> I'm a bit wary of special-casing the Go repo in these places. Is it for saving\n> space? Or just for identifying the Go repo easily?\n\nThe entire system revolves around their being a central Go repository against which all the other repos are built. Consider this a \"goinstallable import path\". In fact, it should be RepoPath not RepoURL. (changed)\n\nhttp://codereview.appspot.com/5416056/diff/1/misc/dashboard/ndashboard/build/build.go#newcode41\nmisc/dashboard/ndashboard/build/build.go:41: LogHash string `datastore:\",noindex\"`\nOn 2011/11/21 03:34:47, dsymonds wrote:\n> what's this for?\n\nIt's the key to the Log record.\n\nhttp://codereview.appspot.com/5416056/diff/1/misc/dashboard/ndashboard/build/build.go#newcode49\nmisc/dashboard/ndashboard/build/build.go:49: CompressedLog []byte\nOn 2011/11/21 03:34:47, dsymonds wrote:\n> comment?\n\nDone.",
			"disapproval": false,
			"date": "2011-11-21 05:53:17.465190",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc, r (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-21 03:25:59.500316",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5416056/diff/1/misc/dashboard/ndashboard/build/build.go\nFile misc/dashboard/ndashboard/build/build.go (right):\n\nhttp://codereview.appspot.com/5416056/diff/1/misc/dashboard/ndashboard/build/build.go#newcode14\nmisc/dashboard/ndashboard/build/build.go:14: Num        int // Internal monotonic counter unique to this repo.\nThis assumes a linear history. Many people use DVCSes in a general branch mode, which this isn't going to be able to model.\n\nhttp://codereview.appspot.com/5416056/diff/1/misc/dashboard/ndashboard/build/build.go#newcode16\nmisc/dashboard/ndashboard/build/build.go:16: ParentHash string\nThis can't model merge commits. Does that matter?\n\nhttp://codereview.appspot.com/5416056/diff/1/misc/dashboard/ndashboard/build/build.go#newcode19\nmisc/dashboard/ndashboard/build/build.go:19: User string         `datastore:\",noindex\"`\nAre you sure you don't want User and Time indexed? I could think of useful purposes for them to be indexed.\n\nhttp://codereview.appspot.com/5416056/diff/1/misc/dashboard/ndashboard/build/build.go#newcode34\nmisc/dashboard/ndashboard/build/build.go:34: RepoURL string // (empty for Go commits)\nI'm a bit wary of special-casing the Go repo in these places. Is it for saving space? Or just for identifying the Go repo easily?\n\nhttp://codereview.appspot.com/5416056/diff/1/misc/dashboard/ndashboard/build/build.go#newcode41\nmisc/dashboard/ndashboard/build/build.go:41: LogHash string `datastore:\",noindex\"`\nwhat's this for?\n\nhttp://codereview.appspot.com/5416056/diff/1/misc/dashboard/ndashboard/build/build.go#newcode49\nmisc/dashboard/ndashboard/build/build.go:49: CompressedLog []byte\ncomment?",
			"disapproval": false,
			"date": "2011-11-21 03:34:47.471581",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't see anything about entity groups here, and I have found that\nusing entity groups is the only way to get decent performance out\nof the App Engine datastore.  What's the entity group story?\nIs everything sitting in a single entity group?  Is everything in its\nown entity group (the default, but terrible performance)?\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-21 15:20:55.345435",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Seems like a good start.\nMaybe each different RepoPath should be its own entity group?\n\nhttp://codereview.appspot.com/5416056/diff/1007/misc/dashboard/ndashboard/build/build.go\nFile misc/dashboard/ndashboard/build/build.go (right):\n\nhttp://codereview.appspot.com/5416056/diff/1007/misc/dashboard/ndashboard/build/build.go#newcode12\nmisc/dashboard/ndashboard/build/build.go:12: // Commit describes an individual commit in a repository.\ns/Commit/A Commit/\n\nhttp://codereview.appspot.com/5416056/diff/1007/misc/dashboard/ndashboard/build/build.go#newcode17\nmisc/dashboard/ndashboard/build/build.go:17: RepoPath   string // (empty for Go commits)\nMove to top, since Num is scoped inside RepoPath.\n\nhttp://codereview.appspot.com/5416056/diff/1007/misc/dashboard/ndashboard/build/build.go#newcode30\nmisc/dashboard/ndashboard/build/build.go:30: // Result describes a build result for a Commit on an OS/architecture.\ns/Result/A Result/\n\nhttp://codereview.appspot.com/5416056/diff/1007/misc/dashboard/ndashboard/build/build.go#newcode32\nmisc/dashboard/ndashboard/build/build.go:32: OSArch   string // \"arch-os(|-foo)\"\nBuilder string\n\nhttp://codereview.appspot.com/5416056/diff/1007/misc/dashboard/ndashboard/build/build.go#newcode45\nmisc/dashboard/ndashboard/build/build.go:45: return fmt.Sprintf(\"%v,%v,%v,%v\", r.OSArch, r.OK, r.LogHash, r.GoHash)\nLet's use something less common than comma: how about |?\nIt is possible that the Builder name would include a comma,\nsince the GOEXPERIMENT is a comma-separated list.\n\nhttp://codereview.appspot.com/5416056/diff/1007/misc/dashboard/ndashboard/build/build.go#newcode48\nmisc/dashboard/ndashboard/build/build.go:48: // Log is a bzip2-compressed log file keyed by the SHA1 hash of the\nThis is going to be hard since we don't have a bzip2 compressor.\nChange to gzip-compressed?\n\ns/keyed by/stored under/\n\nhttp://codereview.appspot.com/5416056/diff/1007/misc/dashboard/ndashboard/build/build.go#newcode48\nmisc/dashboard/ndashboard/build/build.go:48: // Log is a bzip2-compressed log file keyed by the SHA1 hash of the\ns/Log/A Log/\n\nhttp://codereview.appspot.com/5416056/diff/1007/misc/dashboard/ndashboard/build/build.go#newcode54\nmisc/dashboard/ndashboard/build/build.go:54: // Tags are datastore entities used to keep track of the most recent\na/Tags are/A Tag is/\ns/entities/entity/\n\nIn general, if you can use a singular, do so, since it forces you to be more precise.\n\nhttp://codereview.appspot.com/5416056/diff/1007/misc/dashboard/ndashboard/build/build.go#newcode56\nmisc/dashboard/ndashboard/build/build.go:56: // kind of tag. A Tag is stored using its Kind as its datastore Key.\ns/A/Each/\n\nhttp://codereview.appspot.com/5416056/diff/1007/misc/dashboard/ndashboard/build/build.go#newcode63\nmisc/dashboard/ndashboard/build/build.go:63: // commitHandler records new commits. It reads a JSON-encoded Commit value\ns/new commits/a new commit/\n\nhttp://codereview.appspot.com/5416056/diff/1007/misc/dashboard/ndashboard/build/build.go#newcode70\nmisc/dashboard/ndashboard/build/build.go:70: // tagHandler records new tags. It reads a JSON-encoded Tag value from th\ns/new tags/a new tag/\n\nhttp://codereview.appspot.com/5416056/diff/1007/misc/dashboard/ndashboard/build/build.go#newcode77\nmisc/dashboard/ndashboard/build/build.go:77: // to be built. It expects an osArch query parameter.\n,s/osArch/builder/g\n\nhttp://codereview.appspot.com/5416056/diff/1007/misc/dashboard/ndashboard/build/build.go#newcode88\nmisc/dashboard/ndashboard/build/build.go:88: // resultHandler records build results.\ns/build results/a build result/\n\nhttp://codereview.appspot.com/5416056/diff/1007/misc/dashboard/ndashboard/build/build.go#newcode100\nmisc/dashboard/ndashboard/build/build.go:100: http.HandleFunc(\"/commit\", AuthHandler(commitHandler))\nsort block",
			"disapproval": false,
			"date": "2011-11-21 15:30:44.502400",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, r@golang.org, dsymonds@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-21 05:53:05.203710",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Nov 22, 2011 at 2:20 AM, Russ Cox <rsc@golang.org> wrote:\n\n> I don't see anything about entity groups here, and I have found that\n> using entity groups is the only way to get decent performance out\n> of the App Engine datastore. \u00a0What's the entity group story?\n> Is everything sitting in a single entity group? \u00a0Is everything in its\n> own entity group (the default, but terrible performance)?\n\nYou should read a bit of\n  http://code.google.com/appengine/docs/python/datastore/entities.html#Entity_Groups_and_Ancestor_Paths\nbecause you've got the effect in reverse. A single entity group has a\nlimited write throughput (I think the guarantee is only about 1 write\nper second). If every entity is in its own entity group, then each\nindividual entity has a separate 1 w/s rate; the aggregate write rate\ncan be much faster. If you need transactional behaviour, you need to\nput entities into entity groups (although this has weakened somewhat\nwith XG transactions), but I don't think there's need for cross-entity\ntransactions for the dashboard.\n\n\nDave.\n",
			"disapproval": false,
			"date": "2011-11-21 21:50:34.962837",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Nov 21, 2011 at 16:50, David Symonds <dsymonds@golang.org> wrote:\n> I don't think there's need for cross-entity\n> transactions for the dashboard.\n\nAt the very least you need transactions to assign the\nsequence numbers for each RepoPath.\n\nIt may be true that if you maximally parallelize your\nentity group writes, you don't need to worry about the\ngroups.  But it seems like if you do use the groups,\nyou get tremendously faster write throughput.\nThat's not from docs, just my experience trying to\nmake App Engine not crawl.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-21 21:57:52.936997",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I looked into my entity group program.\n\nI found that the only way to make batching help with speed\nwas to store related items in entity groups so that they could\nall be put into a transaction to amortize the commit costs.\nThat is consistent with what you claimed, but the conclusion\nis different: you should use entity groups as much as possible,\nbecause if you don't you can never batch updates for performance.\n\nIs there a downside to storing all your data in one entity group\n(or one per RepoPath, in this case)?  Does it limit the amount\nof data that can be stored?\n\nIt also seemed to me that queries might be faster over data\nstored in a single entity group, but I don't have numbers to\nback that up.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-21 22:03:30.423923",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Nov 21, 2011 at 5:03 PM, Russ Cox <rsc@golang.org> wrote:\n\n> I looked into my entity group program.\n>\n> I found that the only way to make batching help with speed\n> was to store related items in entity groups so that they could\n> all be put into a transaction to amortize the commit costs.\n> That is consistent with what you claimed, but the conclusion\n> is different: you should use entity groups as much as possible,\n> because if you don't you can never batch updates for performance.\n>\n\nThat was Python, though?\n\nYou weren't using the new \"XG\" (cross-entity-group) transactions, right?\n XG is supported with HRD, which is the only datastore mode Go supports.\n So then you can put everything in its own entity group and batch updates\nin an XG transaction.  That's at least what I do for simplicity, and I\nthink it's fine... there's a paxo group between datacenters for just the\nentity groups involved in that transaction, I believe.\n",
			"disapproval": false,
			"date": "2011-11-21 22:10:17.212947",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Nov 22, 2011 at 9:03 AM, Russ Cox <rsc@golang.org> wrote:\n\n> I looked into my entity group program.\n>\n> I found that the only way to make batching help with speed\n> was to store related items in entity groups so that they could\n> all be put into a transaction to amortize the commit costs.\n> That is consistent with what you claimed, but the conclusion\n> is different: you should use entity groups as much as possible,\n> because if you don't you can never batch updates for performance.\n\nI'd expect you'd get the same performance if you used the bulk\noperations (e.g. put_multi). Separate entity groups will be committed\nby separate machines.\n\n> Is there a downside to storing all your data in one entity group\n> (or one per RepoPath, in this case)? \u00a0Does it limit the amount\n> of data that can be stored?\n\nThere's no size limit; you do have a write rate limit, though.\n\n> It also seemed to me that queries might be faster over data\n> stored in a single entity group, but I don't have numbers to\n> back that up.\n\nAncestor queries can be quicker, yes, but I'm not sure it would be\nsignificant here.\n\n\nDave.\n",
			"disapproval": false,
			"date": "2011-11-21 22:10:27.941927",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5416056/diff/1007/misc/dashboard/ndashboard/build/build.go\nFile misc/dashboard/ndashboard/build/build.go (right):\n\nhttp://codereview.appspot.com/5416056/diff/1007/misc/dashboard/ndashboard/build/build.go#newcode12\nmisc/dashboard/ndashboard/build/build.go:12: // Commit describes an individual commit in a repository.\nOn 2011/11/21 15:30:44, rsc wrote:\n> s/Commit/A Commit/\n\nDone.\n\nhttp://codereview.appspot.com/5416056/diff/1007/misc/dashboard/ndashboard/build/build.go#newcode17\nmisc/dashboard/ndashboard/build/build.go:17: RepoPath   string // (empty for Go commits)\nOn 2011/11/21 15:30:44, rsc wrote:\n> Move to top, since Num is scoped inside RepoPath.\n\nDone.\n\nhttp://codereview.appspot.com/5416056/diff/1007/misc/dashboard/ndashboard/build/build.go#newcode30\nmisc/dashboard/ndashboard/build/build.go:30: // Result describes a build result for a Commit on an OS/architecture.\nOn 2011/11/21 15:30:44, rsc wrote:\n> s/Result/A Result/\n\nDone.\n\nhttp://codereview.appspot.com/5416056/diff/1007/misc/dashboard/ndashboard/build/build.go#newcode32\nmisc/dashboard/ndashboard/build/build.go:32: OSArch   string // \"arch-os(|-foo)\"\nOn 2011/11/21 15:30:44, rsc wrote:\n> Builder string\n\nDone.\n\nhttp://codereview.appspot.com/5416056/diff/1007/misc/dashboard/ndashboard/build/build.go#newcode45\nmisc/dashboard/ndashboard/build/build.go:45: return fmt.Sprintf(\"%v,%v,%v,%v\", r.OSArch, r.OK, r.LogHash, r.GoHash)\nOn 2011/11/21 15:30:44, rsc wrote:\n> Let's use something less common than comma: how about |?\n> It is possible that the Builder name would include a comma,\n> since the GOEXPERIMENT is a comma-separated list.\n\nDone.\n\nhttp://codereview.appspot.com/5416056/diff/1007/misc/dashboard/ndashboard/build/build.go#newcode48\nmisc/dashboard/ndashboard/build/build.go:48: // Log is a bzip2-compressed log file keyed by the SHA1 hash of the\nOn 2011/11/21 15:30:44, rsc wrote:\n> This is going to be hard since we don't have a bzip2 compressor.\n> Change to gzip-compressed?\n> \n> s/keyed by/stored under/\n> \n\nDone.\n\nhttp://codereview.appspot.com/5416056/diff/1007/misc/dashboard/ndashboard/build/build.go#newcode48\nmisc/dashboard/ndashboard/build/build.go:48: // Log is a bzip2-compressed log file keyed by the SHA1 hash of the\nOn 2011/11/21 15:30:44, rsc wrote:\n> s/Log/A Log/\n\nDone.\n\nhttp://codereview.appspot.com/5416056/diff/1007/misc/dashboard/ndashboard/build/build.go#newcode54\nmisc/dashboard/ndashboard/build/build.go:54: // Tags are datastore entities used to keep track of the most recent\nOn 2011/11/21 15:30:44, rsc wrote:\n> a/Tags are/A Tag is/\n> s/entities/entity/\n> \n> In general, if you can use a singular, do so, since it forces you to be more\n> precise.\n> \n\nDone.\n\nhttp://codereview.appspot.com/5416056/diff/1007/misc/dashboard/ndashboard/build/build.go#newcode56\nmisc/dashboard/ndashboard/build/build.go:56: // kind of tag. A Tag is stored using its Kind as its datastore Key.\nOn 2011/11/21 15:30:44, rsc wrote:\n> s/A/Each/\n\nDone.\n\nhttp://codereview.appspot.com/5416056/diff/1007/misc/dashboard/ndashboard/build/build.go#newcode63\nmisc/dashboard/ndashboard/build/build.go:63: // commitHandler records new commits. It reads a JSON-encoded Commit value\nOn 2011/11/21 15:30:44, rsc wrote:\n> s/new commits/a new commit/\n\nDone.\n\nhttp://codereview.appspot.com/5416056/diff/1007/misc/dashboard/ndashboard/build/build.go#newcode70\nmisc/dashboard/ndashboard/build/build.go:70: // tagHandler records new tags. It reads a JSON-encoded Tag value from th\nOn 2011/11/21 15:30:44, rsc wrote:\n> s/new tags/a new tag/\n\nDone.\n\nhttp://codereview.appspot.com/5416056/diff/1007/misc/dashboard/ndashboard/build/build.go#newcode77\nmisc/dashboard/ndashboard/build/build.go:77: // to be built. It expects an osArch query parameter.\nOn 2011/11/21 15:30:44, rsc wrote:\n> ,s/osArch/builder/g\n\nDone.\n\nhttp://codereview.appspot.com/5416056/diff/1007/misc/dashboard/ndashboard/build/build.go#newcode88\nmisc/dashboard/ndashboard/build/build.go:88: // resultHandler records build results.\nOn 2011/11/21 15:30:44, rsc wrote:\n> s/build results/a build result/\n\nDone.\n\nhttp://codereview.appspot.com/5416056/diff/1007/misc/dashboard/ndashboard/build/build.go#newcode100\nmisc/dashboard/ndashboard/build/build.go:100: http.HandleFunc(\"/commit\", AuthHandler(commitHandler))\nOn 2011/11/21 15:30:44, rsc wrote:\n> sort block\n\nDone.",
			"disapproval": false,
			"date": "2011-11-21 23:04:19.253792",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5416056/diff/18004/misc/dashboard/ndashboard/build/build.go\nFile misc/dashboard/ndashboard/build/build.go (right):\n\nhttp://codereview.appspot.com/5416056/diff/18004/misc/dashboard/ndashboard/build/build.go#newcode12\nmisc/dashboard/ndashboard/build/build.go:12: // A Package describes a repository that is listed on the dashboard.\ns/repository/package/, right?\n\nhttp://codereview.appspot.com/5416056/diff/18004/misc/dashboard/ndashboard/build/build.go#newcode13\nmisc/dashboard/ndashboard/build/build.go:13: type Package struct {\nIf every Commit for a given package path needs to be parented by a consistent Package, you should declare that each package entity has a key name equal to its path or something like that. That will enforce uniqueness, and make it much faster to find particular packages.\n\nhttp://codereview.appspot.com/5416056/diff/18004/misc/dashboard/ndashboard/build/build.go#newcode18\nmisc/dashboard/ndashboard/build/build.go:18: // A Commit describes an individual commit in a repository.\ns/repository/package/ here too.\n\nhttp://codereview.appspot.com/5416056/diff/18004/misc/dashboard/ndashboard/build/build.go#newcode23\nmisc/dashboard/ndashboard/build/build.go:23: type Commit struct {\nagain here, using a key name scheme like \"<PackagePath>:<Num>\" would help enforce uniqueness if that's important.\n\nhttp://codereview.appspot.com/5416056/diff/18004/misc/dashboard/ndashboard/build/build.go#newcode56\nmisc/dashboard/ndashboard/build/build.go:56: func (r *Result) Data() string {\nwhy not String()?\n\nhttp://codereview.appspot.com/5416056/diff/18004/misc/dashboard/ndashboard/build/build.go#newcode69\nmisc/dashboard/ndashboard/build/build.go:69: type Tag struct {\nA key name here too might also be useful.",
			"disapproval": false,
			"date": "2011-11-21 23:59:17.956665",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I added some words about entity groups.\n\nIn short, all Commits and Results for a particular RepoPath will be in\ntheir own entity group.\n\nAndrew\n",
			"disapproval": false,
			"date": "2011-11-21 23:06:06.570755",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5416056/diff/15002/misc/dashboard/ndashboard/build/build.go\nFile misc/dashboard/ndashboard/build/build.go (right):\n\nhttp://codereview.appspot.com/5416056/diff/15002/misc/dashboard/ndashboard/build/build.go#newcode50\nmisc/dashboard/ndashboard/build/build.go:50: key := fmt.Sprintf(\"%s:%s\", com.PackagePath, com.Hash)\nkey := com.PackagePath + \":\" + com.Hash",
			"disapproval": false,
			"date": "2011-11-22 04:19:10.519883",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 22 November 2011 15:19,  <dsymonds@golang.org> wrote:\n> http://codereview.appspot.com/5416056/diff/15002/misc/dashboard/ndashboard/build/build.go\n> File misc/dashboard/ndashboard/build/build.go (right):\n>\n> http://codereview.appspot.com/5416056/diff/15002/misc/dashboard/ndashboard/build/build.go#newcode50\n> misc/dashboard/ndashboard/build/build.go:50: key := fmt.Sprintf(\"%s:%s\",\n> com.PackagePath, com.Hash)\n> key := com.PackagePath + \":\" + com.Hash\n\nDone.\n",
			"disapproval": false,
			"date": "2011-11-22 04:34:35.221415",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, r@golang.org, dsymonds@golang.org, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-21 23:23:27.724103",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=6cff18b6d608 ***\n\ndashboard: new Go dashboard data structure design\n\nR=rsc, r, dsymonds, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5416056",
			"disapproval": false,
			"date": "2011-11-22 21:13:17.122852",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, r@golang.org, dsymonds@golang.org, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-21 23:14:29.070330",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5416056/diff/16001/misc/dashboard/ndashboard/build/build.go\nFile misc/dashboard/ndashboard/build/build.go (right):\n\nhttp://codereview.appspot.com/5416056/diff/16001/misc/dashboard/ndashboard/build/build.go#newcode13\nmisc/dashboard/ndashboard/build/build.go:13: type Repo struct {\nOn 2011/11/21 23:16:53, rsc wrote:\n> Is this really a repository, or is it a package?\n> For external things, the dashboard works on packages,\n> not repositories.\n\nYou're right, it's a package. And with naming it makes sense for the Path field to be empty for the Go tree.",
			"disapproval": false,
			"date": "2011-11-21 23:23:08.317078",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2011-11-21 23:23:09.521477",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5416056/diff/18004/misc/dashboard/ndashboard/build/build.go\nFile misc/dashboard/ndashboard/build/build.go (right):\n\nhttp://codereview.appspot.com/5416056/diff/18004/misc/dashboard/ndashboard/build/build.go#newcode12\nmisc/dashboard/ndashboard/build/build.go:12: // A Package describes a repository that is listed on the dashboard.\nOn 2011/11/21 23:59:18, dsymonds wrote:\n> s/repository/package/, right?\n\nDone.\n\nhttp://codereview.appspot.com/5416056/diff/18004/misc/dashboard/ndashboard/build/build.go#newcode13\nmisc/dashboard/ndashboard/build/build.go:13: type Package struct {\nOn 2011/11/21 23:59:18, dsymonds wrote:\n> If every Commit for a given package path needs to be parented by a consistent\n> Package, you should declare that each package entity has a key name equal to its\n> path or something like that. That will enforce uniqueness, and make it much\n> faster to find particular packages.\n\nDone.\n\nhttp://codereview.appspot.com/5416056/diff/18004/misc/dashboard/ndashboard/build/build.go#newcode18\nmisc/dashboard/ndashboard/build/build.go:18: // A Commit describes an individual commit in a repository.\nOn 2011/11/21 23:59:18, dsymonds wrote:\n> s/repository/package/ here too.\n\nDone.\n\nhttp://codereview.appspot.com/5416056/diff/18004/misc/dashboard/ndashboard/build/build.go#newcode23\nmisc/dashboard/ndashboard/build/build.go:23: type Commit struct {\nOn 2011/11/21 23:59:18, dsymonds wrote:\n> again here, using a key name scheme like \"<PackagePath>:<Num>\" would help\n> enforce uniqueness if that's important.\n\nGood point. I think \"Keyname:Hash\" is more appropriate.\n\nhttp://codereview.appspot.com/5416056/diff/18004/misc/dashboard/ndashboard/build/build.go#newcode56\nmisc/dashboard/ndashboard/build/build.go:56: func (r *Result) Data() string {\nOn 2011/11/21 23:59:18, dsymonds wrote:\n> why not String()?\n\nBecause it doesn't describe the Result. (It doesn't include Hash or PackagePath, for example)\n\nhttp://codereview.appspot.com/5416056/diff/18004/misc/dashboard/ndashboard/build/build.go#newcode69\nmisc/dashboard/ndashboard/build/build.go:69: type Tag struct {\nOn 2011/11/21 23:59:18, dsymonds wrote:\n> A key name here too might also be useful.\n\nI created Key methods for the respective types.",
			"disapproval": false,
			"date": "2011-11-22 04:04:54.595906",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5416056/diff/16001/misc/dashboard/ndashboard/build/build.go\nFile misc/dashboard/ndashboard/build/build.go (right):\n\nhttp://codereview.appspot.com/5416056/diff/16001/misc/dashboard/ndashboard/build/build.go#newcode13\nmisc/dashboard/ndashboard/build/build.go:13: type Repo struct {\nIs this really a repository, or is it a package?\nFor external things, the dashboard works on packages,\nnot repositories.",
			"disapproval": false,
			"date": "2011-11-21 23:16:53.596086",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"dsymonds@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nMaybe the directory should just be 'app'.\nIt is, after all, the App Engine app for\nmisc/dashboard, and then you won't need\nto rename it later.\n\nhttp://codereview.appspot.com/5416056/diff/16003/misc/dashboard/ndashboard/build/build.go\nFile misc/dashboard/ndashboard/build/build.go (right):\n\nhttp://codereview.appspot.com/5416056/diff/16003/misc/dashboard/ndashboard/build/build.go#newcode58\nmisc/dashboard/ndashboard/build/build.go:58: Builder     string // \"arch-os(|-foo)\"\nos-arch[-note]",
			"disapproval": false,
			"date": "2011-11-22 19:08:13.744406",
			"approval": true
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 5416056: ndashboard: new Go dashboard data structure design",
	"created": "2011-11-21 03:25:52.939941",
	"patchsets": [
		1,
		4001,
		1007,
		12002,
		16001,
		18004,
		15002,
		16003,
		12003
	],
	"modified": "2011-11-22 21:13:20.686702",
	"closed": true,
	"issue": 5416056
}