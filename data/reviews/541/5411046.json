{
	"description": "pkg/syscall: Adjustments for \"errors\" package, focussed on Plan 9\n\nexec_plan9.go:\n. Adjusted return argument to match other changes.\n#mksyscall.pl:\n. Replaced \"err = e1\" with \"err = NewError(e1)\".\n* Change abandoned, Russ made a better suggestion involving\n  syscall_plan9.go.\nsyscall_plan9.go:\n. Removed redundant \"err = nil\" lines.\n. Adjusted //sys lines for mksyscall.pl.\n* Replaced \"err string\" with \"err ErrorString\" in return arguments.\nzsyscall_plan9_386.go:\n. This module ought to be generated, but as it exists in the\n  repository, I rebuilt it and checked that it matched expectations.\n  Anybody is welcome to remove this from the repository if\n  they feel it should go, but remember that not all Plan 9\n  installations have a working Perl.",
	"cc": [
		"rsc@golang.org",
		"ality@pbrane.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lucio.dere@gmail.com",
				"rsc@golang.org",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "very close, thanks\n\nhttp://codereview.appspot.com/5411046/diff/3001/src/pkg/syscall/syscall_plan9.go\nFile src/pkg/syscall/syscall_plan9.go (right):\n\nhttp://codereview.appspot.com/5411046/diff/3001/src/pkg/syscall/syscall_plan9.go#newcode41\nsrc/pkg/syscall/syscall_plan9.go:41: func Syscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err string)\nPlease change this to say err ErrorString,\nalong with the next three.\n\nThen in the conversion program you can use err = e1 directly\ninstead of needing err = ErrorString(e1).\nThis is more in line with what the Unix ports do with Errno.",
			"disapproval": false,
			"date": "2011-11-19 04:22:04.923870",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The second pair, Raw* use uintptr rather than error.  Can these still\nbe changed without harm?\n\nLucio.\n\n\nOn 11/19/11, rsc@golang.org <rsc@golang.org> wrote:\n> very close, thanks\n>\n>\n>\n> http://codereview.appspot.com/5411046/diff/3001/src/pkg/syscall/syscall_plan9.go\n> File src/pkg/syscall/syscall_plan9.go (right):\n>\n> http://codereview.appspot.com/5411046/diff/3001/src/pkg/syscall/syscall_plan9.go#newcode41\n> src/pkg/syscall/syscall_plan9.go:41: func Syscall(trap, a1, a2, a3\n> uintptr) (r1, r2 uintptr, err string)\n> Please change this to say err ErrorString,\n> along with the next three.\n>\n> Then in the conversion program you can use err = e1 directly\n> instead of needing err = ErrorString(e1).\n> This is more in line with what the Unix ports do with Errno.\n>\n> http://codereview.appspot.com/5411046/\n>\n",
			"disapproval": false,
			"date": "2011-11-19 05:09:47.857776",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lucio.dere@gmail.com",
				"rsc@golang.org",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=dd27c5377672 ***\n\nsyscall: fix for Plan 9 build\n\nexec_plan9.go:\n. Adjusted return argument to match other changes.\n#mksyscall.pl:\n. Replaced \"err = e1\" with \"err = NewError(e1)\".\n* Change abandoned, Russ made a better suggestion involving\n  syscall_plan9.go.\nsyscall_plan9.go:\n. Removed redundant \"err = nil\" lines.\n. Adjusted //sys lines for mksyscall.pl.\n* Replaced \"err string\" with \"err ErrorString\" in return arguments.\nzsyscall_plan9_386.go:\n. This module ought to be generated, but as it exists in the\n  repository, I rebuilt it and checked that it matched expectations.\n  Anybody is welcome to remove this from the repository if\n  they feel it should go, but remember that not all Plan 9\n  installations have a working Perl.\n\nR=rsc\nCC=ality, golang-dev\nhttp://codereview.appspot.com/5411046\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2011-11-21 14:55:18.513284",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"lucio.dere@gmail.com",
				"rsc@golang.org",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: ality@pbrane.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-19 11:43:56.772859",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Nov 19, 2011 at 00:09, Lucio De Re <lucio.dere@gmail.com> wrote:\n> The second pair, Raw* use uintptr rather than error. \u00a0Can these still\n> be changed without harm?\n\nno, you're right.  please leave those at uintptr.\n",
			"disapproval": false,
			"date": "2011-11-19 05:41:57.360026",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"lucio.dere@gmail.com",
				"golang-dev@googlegroups.com",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: ality@pbrane.org, golang-dev@googlegroups.com, rsc@golang.org),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-19 04:19:27.620489",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The CL comment was confusing.\n\nLucio.\n\nOn 11/19/11, lucio.dere@gmail.com <lucio.dere@gmail.com> wrote:\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com (cc: ality@pbrane.org,\n> golang-dev@googlegroups.com, rsc@golang.org),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> pkg/syscall: Adjustments for \"errors\" package, focussed on Plan 9\n>\n> mksyscall.pl:\n> . Replaced \"err = e1\" with \"err = NewError(e1)\".\n> syscall_plan9.go:\n> . Removed redundant \"err = nil\" lines.\n> . Adjusted //sys lines for mksyscall.pl.\n> zsyscall_plan9_386.go:\n> . This module ought to be generated, but as it exists in the\n>    repository, I rebuilt it and checked that it matched expectations.\n>    Anybody is welcome to remove this from the repository if\n>    they feel it should go, but remember that not all Plan 9\n>    installations have a working Perl.\n>\n> Please review this at http://codereview.appspot.com/5411046/\n>\n> Affected files:\n>    M src/pkg/syscall/mksyscall.pl\n>    M src/pkg/syscall/syscall_plan9.go\n>    M src/pkg/syscall/zsyscall_plan9_386.go\n>\n>\n> Index: src/pkg/syscall/mksyscall.pl\n> ===================================================================\n> --- a/src/pkg/syscall/mksyscall.pl\n> +++ b/src/pkg/syscall/mksyscall.pl\n> @@ -223,11 +223,11 @@\n>   \t\n>   \tif ($plan9 && $ret[2] eq \"e1\") {\n>   \t\t$text .= \"\\tif int(r0) == -1 {\\n\";\n> -\t\t$text .= \"\\t\\terr = e1\\n\";\n> +\t\t$text .= \"\\t\\terr = NewError(e1)\\n\";\n>   \t\t$text .= \"\\t}\\n\";\n>   \t} elsif ($do_errno) {\n>   \t\t$text .= \"\\tif e1 != 0 {\\n\";\n> -\t\t$text .= \"\\t\\terr = e1;\\n\";\n> +\t\t$text .= \"\\t\\terr = NewError(e1);\\n\";\n>   \t\t$text .= \"\\t}\\n\";\n>   \t}\n>   \t$text .= \"\\treturn\\n\";\n> Index: src/pkg/syscall/syscall_plan9.go\n> ===================================================================\n> --- a/src/pkg/syscall/syscall_plan9.go\n> +++ b/src/pkg/syscall/syscall_plan9.go\n> @@ -170,7 +170,6 @@\n>   func Seek(fd int, offset int64, whence int) (newoffset int64, err error) {\n>   \tnewoffset, e := seek(0, fd, offset, whence)\n>\n> -\terr = nil\n>   \tif newoffset == -1 {\n>   \t\terr = NewError(e)\n>   \t}\n> @@ -255,7 +254,6 @@\n>   \t\tr0, _, e = Syscall(SYS_UNMOUNT,\n> uintptr(unsafe.Pointer(StringBytePtr(name))), oldp, 0)\n>   \t}\n>\n> -\terr = nil\n>   \tif int(r0) == -1 {\n>   \t\terr = NewError(e)\n>   \t}\n> @@ -288,7 +286,6 @@\n>   \tif len(b) != 8 {\n>   \t\treturn -1, NewError(\"bad /dev/bintime format\")\n>   \t}\n> -\terr = nil\n>   \tnsec = int64(b[0])<<56 |\n>   \t\tint64(b[1])<<48 |\n>   \t\tint64(b[2])<<40 |\n> @@ -335,17 +332,17 @@\n>   \treturn make([]int, 0), nil\n>   }\n>\n> -//sys\tDup(oldfd int, newfd int) (fd int, err Error)\n> -//sys\tOpen(path string, mode int) (fd int, err Error)\n> -//sys\tCreate(path string, mode int, perm uint32) (fd int, err Error)\n> -//sys\tRemove(path string) (err Error)\n> -//sys\tPread(fd int, p []byte, offset int64) (n int, err Error)\n> -//sys\tPwrite(fd int, p []byte, offset int64) (n int, err Error)\n> -//sys\tClose(fd int) (err Error)\n> -//sys\tChdir(path string) (err Error)\n> -//sys\tBind(name string, old string, flag int) (err Error)\n> -//sys\tMount(fd int, afd int, old string, flag int, aname string) (err\n> Error)\n> -//sys\tStat(path string, edir []byte) (n int, err Error)\n> -//sys\tFstat(fd int, edir []byte) (n int, err Error)\n> -//sys\tWstat(path string, edir []byte) (err Error)\n> -//sys\tFwstat(fd int, edir []byte) (err Error)\n> +//sys\tDup(oldfd int, newfd int) (fd int, err error)\n> +//sys\tOpen(path string, mode int) (fd int, err error)\n> +//sys\tCreate(path string, mode int, perm uint32) (fd int, err error)\n> +//sys\tRemove(path string) (err error)\n> +//sys\tPread(fd int, p []byte, offset int64) (n int, err error)\n> +//sys\tPwrite(fd int, p []byte, offset int64) (n int, err error)\n> +//sys\tClose(fd int) (err error)\n> +//sys\tChdir(path string) (err error)\n> +//sys\tBind(name string, old string, flag int) (err error)\n> +//sys\tMount(fd int, afd int, old string, flag int, aname string) (err\n> error)\n> +//sys\tStat(path string, edir []byte) (n int, err error)\n> +//sys\tFstat(fd int, edir []byte) (n int, err error)\n> +//sys\tWstat(path string, edir []byte) (err error)\n> +//sys\tFwstat(fd int, edir []byte) (err error)\n> Index: src/pkg/syscall/zsyscall_plan9_386.go\n> ===================================================================\n> --- a/src/pkg/syscall/zsyscall_plan9_386.go\n> +++ b/src/pkg/syscall/zsyscall_plan9_386.go\n> @@ -22,7 +22,6 @@\n>   \t\t_p0 = unsafe.Pointer(&_zero)\n>   \t}\n>   \tr0, _, e1 := Syscall(SYS_FD2PATH, uintptr(fd), uintptr(_p0),\n> uintptr(len(buf)))\n> -\terr = nil\n>   \tif int(r0) == -1 {\n>   \t\terr = NewError(e1)\n>   \t}\n> @@ -33,18 +32,6 @@\n>\n>   func pipe(p *[2]_C_int) (err error) {\n>   \tr0, _, e1 := Syscall(SYS_PIPE, uintptr(unsafe.Pointer(p)), 0, 0)\n> -\terr = nil\n> -\tif int(r0) == -1 {\n> -\t\terr = NewError(e1)\n> -\t}\n> -\treturn\n> -}\n> -\n> -// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n> -\n> -func sleep(millisecs int32) (err error) {\n> -\tr0, _, e1 := Syscall(SYS_SLEEP, uintptr(millisecs), 0, 0)\n> -\terr = nil\n>   \tif int(r0) == -1 {\n>   \t\terr = NewError(e1)\n>   \t}\n> @@ -62,7 +49,6 @@\n>   \t}\n>   \tr0, _, e1 := Syscall(SYS_AWAIT, uintptr(_p0), uintptr(len(s)), 0)\n>   \tn = int(r0)\n> -\terr = nil\n>   \tif int(r0) == -1 {\n>   \t\terr = NewError(e1)\n>   \t}\n> @@ -74,7 +60,6 @@\n>   func Dup(oldfd int, newfd int) (fd int, err error) {\n>   \tr0, _, e1 := Syscall(SYS_DUP, uintptr(oldfd), uintptr(newfd), 0)\n>   \tfd = int(r0)\n> -\terr = nil\n>   \tif int(r0) == -1 {\n>   \t\terr = NewError(e1)\n>   \t}\n> @@ -86,7 +71,6 @@\n>   func Open(path string, mode int) (fd int, err error) {\n>   \tr0, _, e1 := Syscall(SYS_OPEN,\n> uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(mode), 0)\n>   \tfd = int(r0)\n> -\terr = nil\n>   \tif int(r0) == -1 {\n>   \t\terr = NewError(e1)\n>   \t}\n> @@ -98,7 +82,6 @@\n>   func Create(path string, mode int, perm uint32) (fd int, err error) {\n>   \tr0, _, e1 := Syscall(SYS_CREATE,\n> uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(mode), uintptr(perm))\n>   \tfd = int(r0)\n> -\terr = nil\n>   \tif int(r0) == -1 {\n>   \t\terr = NewError(e1)\n>   \t}\n> @@ -109,7 +92,6 @@\n>\n>   func Remove(path string) (err error) {\n>   \tr0, _, e1 := Syscall(SYS_REMOVE,\n> uintptr(unsafe.Pointer(StringBytePtr(path))), 0, 0)\n> -\terr = nil\n>   \tif int(r0) == -1 {\n>   \t\terr = NewError(e1)\n>   \t}\n> @@ -127,7 +109,6 @@\n>   \t}\n>   \tr0, _, e1 := Syscall6(SYS_PREAD, uintptr(fd), uintptr(_p0),\n> uintptr(len(p)), uintptr(offset), uintptr(offset>>32), 0)\n>   \tn = int(r0)\n> -\terr = nil\n>   \tif int(r0) == -1 {\n>   \t\terr = NewError(e1)\n>   \t}\n> @@ -145,7 +126,6 @@\n>   \t}\n>   \tr0, _, e1 := Syscall6(SYS_PWRITE, uintptr(fd), uintptr(_p0),\n> uintptr(len(p)), uintptr(offset), uintptr(offset>>32), 0)\n>   \tn = int(r0)\n> -\terr = nil\n>   \tif int(r0) == -1 {\n>   \t\terr = NewError(e1)\n>   \t}\n> @@ -156,7 +136,6 @@\n>\n>   func Close(fd int) (err error) {\n>   \tr0, _, e1 := Syscall(SYS_CLOSE, uintptr(fd), 0, 0)\n> -\terr = nil\n>   \tif int(r0) == -1 {\n>   \t\terr = NewError(e1)\n>   \t}\n> @@ -167,7 +146,6 @@\n>\n>   func Chdir(path string) (err error) {\n>   \tr0, _, e1 := Syscall(SYS_CHDIR,\n> uintptr(unsafe.Pointer(StringBytePtr(path))), 0, 0)\n> -\terr = nil\n>   \tif int(r0) == -1 {\n>   \t\terr = NewError(e1)\n>   \t}\n> @@ -178,7 +156,6 @@\n>\n>   func Bind(name string, old string, flag int) (err error) {\n>   \tr0, _, e1 := Syscall(SYS_BIND,\n> uintptr(unsafe.Pointer(StringBytePtr(name))),\n> uintptr(unsafe.Pointer(StringBytePtr(old))), uintptr(flag))\n> -\terr = nil\n>   \tif int(r0) == -1 {\n>   \t\terr = NewError(e1)\n>   \t}\n> @@ -189,7 +166,6 @@\n>\n>   func Mount(fd int, afd int, old string, flag int, aname string) (err\n> error) {\n>   \tr0, _, e1 := Syscall6(SYS_MOUNT, uintptr(fd), uintptr(afd),\n> uintptr(unsafe.Pointer(StringBytePtr(old))), uintptr(flag),\n> uintptr(unsafe.Pointer(StringBytePtr(aname))), 0)\n> -\terr = nil\n>   \tif int(r0) == -1 {\n>   \t\terr = NewError(e1)\n>   \t}\n> @@ -207,7 +183,6 @@\n>   \t}\n>   \tr0, _, e1 := Syscall(SYS_STAT,\n> uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(_p0),\n> uintptr(len(edir)))\n>   \tn = int(r0)\n> -\terr = nil\n>   \tif int(r0) == -1 {\n>   \t\terr = NewError(e1)\n>   \t}\n> @@ -225,7 +200,6 @@\n>   \t}\n>   \tr0, _, e1 := Syscall(SYS_FSTAT, uintptr(fd), uintptr(_p0),\n> uintptr(len(edir)))\n>   \tn = int(r0)\n> -\terr = nil\n>   \tif int(r0) == -1 {\n>   \t\terr = NewError(e1)\n>   \t}\n> @@ -242,7 +216,6 @@\n>   \t\t_p0 = unsafe.Pointer(&_zero)\n>   \t}\n>   \tr0, _, e1 := Syscall(SYS_WSTAT,\n> uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(_p0),\n> uintptr(len(edir)))\n> -\terr = nil\n>   \tif int(r0) == -1 {\n>   \t\terr = NewError(e1)\n>   \t}\n> @@ -259,7 +232,6 @@\n>   \t\t_p0 = unsafe.Pointer(&_zero)\n>   \t}\n>   \tr0, _, e1 := Syscall(SYS_FWSTAT, uintptr(fd), uintptr(_p0),\n> uintptr(len(edir)))\n> -\terr = nil\n>   \tif int(r0) == -1 {\n>   \t\terr = NewError(e1)\n>   \t}\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-11-19 04:20:29.178187",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"lucio.dere@gmail.com",
				"rsc@golang.org",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: ality@pbrane.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-19 15:21:18.410707",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n",
			"disapproval": false,
			"date": "2011-11-21 14:54:59.616748",
			"approval": true
		}
	],
	"owner_email": "lucio.dere@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "lucio",
	"subject": "code review 5411046: pkg/syscall: Adjustments for \"errors\" package, focussed...",
	"created": "2011-11-18 04:03:55.687899",
	"patchsets": [
		1,
		2001,
		3001,
		3002,
		5002
	],
	"modified": "2011-11-23 03:49:41.171075",
	"closed": true,
	"issue": 5411046
}