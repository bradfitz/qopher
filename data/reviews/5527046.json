{
	"description": "text/template: handle panic values that are not errors.\n\nThe recover code assumes that the panic() argument was\nan error, but it is usually a simple string.\nFixes issue 2663.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"r@google.com",
		"gri@golang.org",
		"remy@archlinux.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5527046/diff/1002/src/pkg/text/template/exec.go\nFile src/pkg/text/template/exec.go (right):\n\nhttp://codereview.appspot.com/5527046/diff/1002/src/pkg/text/template/exec.go#newcode78\nsrc/pkg/text/template/exec.go:78: // level of Parse.\nthis comment is wrong. my fault. it's Execute.\n\nhttp://codereview.appspot.com/5527046/diff/1002/src/pkg/text/template/exec.go#newcode85\nsrc/pkg/text/template/exec.go:85: switch err := e.(type) {\ni believe this code is behaving as i intended, re-panicking for unexpected things. you must have some case that's misbehaving.\n\nif, for instance, a function called during execution indexes a slice out of bounds, i believe this package shouldn't hide the panic.",
			"disapproval": false,
			"date": "2012-01-09 06:20:01.450868",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI: The spec does restrict the use of \"fallthrough\" to expression switches:\n\n\nOn Mon, Jan 9, 2012 at 12:45 PM,  <remyoudompheng@gmail.com> wrote:\n> I was not aware of that. It doesn't seem to be explicitly written in the\n> spec. Do you still prefer \"default:\" to be at the top ?\n",
			"disapproval": false,
			"date": "2012-01-09 20:52:13.866509",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"r@google.com",
				"gri@golang.org",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as 6ff6aceb5f4b ***\n\ntext/template: handle panic values that are not errors.\n\nThe recover code assumes that the panic() argument was\nan error, but it is usually a simple string.\nFixes issue 2663.\n\nR=golang-dev, r, r, gri\nCC=golang-dev, remy\nhttp://codereview.appspot.com/5527046\n\nCommitter: Rob Pike <r@golang.org>",
			"disapproval": false,
			"date": "2012-01-09 21:04:51.444447",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-07 08:47:13.944603",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5527046/diff/1002/src/pkg/text/template/exec.go\nFile src/pkg/text/template/exec.go (right):\n\nhttp://codereview.appspot.com/5527046/diff/1002/src/pkg/text/template/exec.go#newcode85\nsrc/pkg/text/template/exec.go:85: switch err := e.(type) {\nOn 2012/01/09 06:20:01, r wrote:\n> i believe this code is behaving as i intended, re-panicking for unexpected\n> things. you must have some case that's misbehaving.\n> \n> if, for instance, a function called during execution indexes a slice out of\n> bounds, i believe this package shouldn't hide the panic.\n\nThanks for the explanation. Then I'd like to replace the whole block with\n\nswitch err := e.(type) {\ncase runtime.Error:\n  fallthrough\ndefault:\n  panic(e)\ncase error:\n  *errp = err\n}\n\notherwise if I try to recover from panic(\"Call of method on nil interface value\"), I only get the message \"interface conversion: string is not error: missing method Error\" instead.",
			"disapproval": false,
			"date": "2012-01-09 07:07:05.816038",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please do.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-01-09 07:12:29.906261",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org, r@google.com (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-09 20:10:07.239450",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Jan 9, 2012, at 12:45 PM, remyoudompheng@gmail.com wrote:\n\n> On 2012/01/09 20:42:29, r wrote:\n> \n> http://codereview.appspot.com/5527046/diff/1003/src/pkg/text/template/exec.go\n>> File src/pkg/text/template/exec.go (right):\n> \n> \n> http://codereview.appspot.com/5527046/diff/1003/src/pkg/text/template/exec.go#newcode88\n>> src/pkg/text/template/exec.go:88: }\n>> switch err := e.(type) {\n>> default:\n>>   fallthrough\n>> case runtime.Error:\n>>   panic(e)\n>> case error:\n>>   *errp = err\n>> }\n> \n> Uh, compiler tells me\n>  ./exec.go:83: cannot fallthrough in type switch\n> \n> I was not aware of that. It doesn't seem to be explicitly written in the\n> spec. Do you still prefer \"default:\" to be at the top ?\n> \n> R\u00e9my.\n> \n> http://codereview.appspot.com/5527046/\n\nno. it's fine. LGTM as is. i didn't try my code.\n\nif it's not in the spec, that's an oversight.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-01-09 20:53:27.426440",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5527046/diff/1003/src/pkg/text/template/exec.go\nFile src/pkg/text/template/exec.go (right):\n\nhttp://codereview.appspot.com/5527046/diff/1003/src/pkg/text/template/exec.go#newcode88\nsrc/pkg/text/template/exec.go:88: }\nswitch err := e.(type) {\ndefault:\n  fallthrough\ncase runtime.Error:\n  panic(e)\ncase error:\n  *errp = err\n}",
			"disapproval": false,
			"date": "2012-01-09 20:42:29.568160",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/09 20:42:29, r wrote:\n> http://codereview.appspot.com/5527046/diff/1003/src/pkg/text/template/exec.go\n> File src/pkg/text/template/exec.go (right):\n> \n> http://codereview.appspot.com/5527046/diff/1003/src/pkg/text/template/exec.go#newcode88\n> src/pkg/text/template/exec.go:88: }\n> switch err := e.(type) {\n> default:\n>   fallthrough\n> case runtime.Error:\n>   panic(e)\n> case error:\n>   *errp = err\n> }\n\nUh, compiler tells me \n  ./exec.go:83: cannot fallthrough in type switch\n\nI was not aware of that. It doesn't seem to be explicitly written in the spec. Do you still prefer \"default:\" to be at the top ? \n\nR\u00e9my.",
			"disapproval": false,
			"date": "2012-01-09 20:45:47.220027",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I meant to send the link as well:\n\nhttp://golang.org/doc/go_spec.html#Fallthrough_statements\n\n- gri\n\nOn Mon, Jan 9, 2012 at 12:52 PM, Robert Griesemer <gri@golang.org> wrote:\n> FYI: The spec does restrict the use of \"fallthrough\" to expression switches:\n>\n>\n> On Mon, Jan 9, 2012 at 12:45 PM, \u00a0<remyoudompheng@gmail.com> wrote:\n>> I was not aware of that. It doesn't seem to be explicitly written in the\n>> spec. Do you still prefer \"default:\" to be at the top ?\n",
			"disapproval": false,
			"date": "2012-01-09 20:52:32.161272",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 5527046: text/template: handle panic values that are not errors.",
	"created": "2012-01-07 08:47:04.398038",
	"patchsets": [
		1,
		2001,
		1002,
		1003
	],
	"modified": "2012-01-10 20:11:29.134686",
	"closed": true,
	"issue": 5527046
}