{
	"description": "go.crypto/ssh: implement keyboard-interactive auth (RFC 4256), both\non client and server-side.",
	"cc": [
		"dave@cheney.net",
		"agl@golang.org",
		"gobot@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "hanwen@google.com",
			"recipients": [
				"hanwen@google.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.crypto",
			"disapproval": false,
			"date": "2013-05-31 22:22:17.349500",
			"approval": false
		},
		{
			"sender": "gobot@golang.org",
			"recipients": [
				"hanwen@google.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=dfc (assigned by dfc)",
			"disapproval": false,
			"date": "2013-06-01 02:07:08.995960",
			"approval": false
		},
		{
			"sender": "hanwen@google.com",
			"recipients": [
				"hanwen@google.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9853050/diff/23001/ssh/client_auth.go\nFile ssh/client_auth.go (right):\n\nhttps://codereview.appspot.com/9853050/diff/23001/ssh/client_auth.go#newcode382\nssh/client_auth.go:382: // 3.3 details how the UI should behave for each both CLI and\nOn 2013/06/06 14:22:13, agl1 wrote:\n> s/each//?\n\nDone.\n\nhttps://codereview.appspot.com/9853050/diff/23001/ssh/client_auth.go#newcode389\nssh/client_auth.go:389: func ClientAuthChallengeResponse(impl ClientChallengeResponse) ClientAuth {\nOn 2013/06/06 14:22:13, agl1 wrote:\n> In OpenSSH, this is generally called \"keyboard-interactive\" I think. Perhaps\n> these should be so named? (i.e. ClientAuthKeyboardInteractive).\n\nsshd_config actually calls it ChallengeResponseAuthentication, but the RFC documents it as being officially named \"keyboard-interactive\", so changed it to that.\n\nhttps://codereview.appspot.com/9853050/diff/23001/ssh/client_auth.go#newcode455\nssh/client_auth.go:455: echos = append(echos, (r[0] != 0))\nOn 2013/06/06 14:22:13, agl1 wrote:\n> I don't think the inner parentheses are needed here.\n\nDone.\n\nhttps://codereview.appspot.com/9853050/diff/23001/ssh/client_auth.go#newcode465\nssh/client_auth.go:465: return false, nil, errors.New(\"ssh: junk following message\")\nOn 2013/06/06 14:22:13, agl1 wrote:\n> errors.New seems wrong here. Pass err?\n\nDone.\n\nhttps://codereview.appspot.com/9853050/diff/23001/ssh/client_auth.go#newcode469\nssh/client_auth.go:469: return false, nil, errors.New(\"ssh: not enough answers\")\nOn 2013/06/06 14:22:13, agl1 wrote:\n> \"ssh: not enough answers from keyboard-interactive callback\"\n\nDone.\n\nhttps://codereview.appspot.com/9853050/diff/23001/ssh/server.go\nFile ssh/server.go (right):\n\nhttps://codereview.appspot.com/9853050/diff/23001/ssh/server.go#newcode49\nssh/server.go:49: // Challenge rounds.  To avoid information leaks, the client\nOn 2013/06/06 14:22:13, agl1 wrote:\n> only a single space after a period. (several cases in this comment.)\n\nDone.\n\nhttps://codereview.appspot.com/9853050/diff/23001/ssh/server.go#newcode433\nssh/server.go:433: ok := s.config.ChallengeResponseCallback(s, s.User, &sshClientChallengeResponse{s})\nOn 2013/06/06 14:22:13, agl1 wrote:\n> merge this with following conditional.\n\nDone.\n\nhttps://codereview.appspot.com/9853050/diff/23001/ssh/server.go#newcode575\nssh/server.go:575: var n uint32\nOn 2013/06/06 14:22:13, agl1 wrote:\n> it seems that these two var lines can be eliminated by using := for parseUint32.\n\nDone.",
			"disapproval": false,
			"date": "2013-06-06 14:37:17.420630",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"hanwen@google.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "+cc agl,\n\nI'm happy with the code, but I have no experience with this authentication method, so I'll defer to agl on this aspect.\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/client_auth.go\nFile ssh/client_auth.go (right):\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/client_auth.go#newcode383\nssh/client_auth.go:383: questions []string, echos []bool) (answers []string, err error)\nplease don't wrap, if the line is too long, drop the names on the return args.\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/client_auth.go#newcode429\nssh/client_auth.go:429: msg := decode(packet).(*userAuthFailureMsg)\nplease add a type assertion here, and return an error in the unlikely case.\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/client_auth.go#newcode437\nssh/client_auth.go:437: msg := new(userAuthInfoRequestMsg)\nvar msg userAuthInfoRequestMsg\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/client_auth.go#newcode438\nssh/client_auth.go:438: if err := unmarshal(msg, packet, packet[0]); err != nil {\nunmarshal(&msg, ...)\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/client_auth.go#newcode449\nssh/client_auth.go:449: return false, nil, errors.New(\"prompt format error\")\nI'm not sure what the tradition here is, I think people are leaning towards adding ssh: prefixes to error messages.\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/client_auth_test.go\nFile ssh/client_auth_test.go (right):\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/client_auth_test.go#newcode118\nssh/client_auth_test.go:118: questions []string, echos []bool) (answers []string, err error) {\nsame as previous file. As you are not using a naked return, I don't think the named return args are adding much value here.\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/client_auth_test.go#newcode150\nssh/client_auth_test.go:150: client.Challenge(\"user\", \"thank you for your cooperation\", nil, nil)\nIs this a standard response message ?\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/common.go\nFile ssh/common.go (right):\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/common.go#newcode332\nssh/common.go:332: func appendString(buf []byte, s string) []byte {\nOT: all these append helpers need a cleanup.\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/messages.go\nFile ssh/messages.go (right):\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/messages.go#newcode37\nssh/messages.go:37: // Method specific messages:\nthis is a good comment, s/://\n\nMaybe add some more comments for the other groups\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/server.go\nFile ssh/server.go (right):\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/server.go#newcode46\nssh/server.go:46: // keyboard-interactive authentication is selected. The\nplease add a (RFC XXXX) which describes keyboard-interactive\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/server.go#newcode47\nssh/server.go:47: // passed-in client can be used to talk to the user.  The\ns/passed-in client/function/\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/server.go#newcode548\nssh/server.go:548: return nil, errors.New(\"echos and questions must have equal length\")\nplease add an 'ssh: ' prefix\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/server.go#newcode591\nssh/server.go:591: return nil, errors.New(\"junk at end of message\")\nsame",
			"disapproval": false,
			"date": "2013-06-06 12:04:42.155820",
			"approval": false
		},
		{
			"sender": "hanwen@google.com",
			"recipients": [
				"hanwen@google.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "thanks for the review! \n\nAll addressed.\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/client_auth.go\nFile ssh/client_auth.go (right):\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/client_auth.go#newcode383\nssh/client_auth.go:383: questions []string, echos []bool) (answers []string, err error)\nOn 2013/06/06 12:04:42, dfc wrote:\n> please don't wrap, if the line is too long, drop the names on the return args.\n\nDone.\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/client_auth.go#newcode429\nssh/client_auth.go:429: msg := decode(packet).(*userAuthFailureMsg)\nOn 2013/06/06 12:04:42, dfc wrote:\n> please add a type assertion here, and return an error in the unlikely case.\n>      \n\nDone.\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/client_auth.go#newcode437\nssh/client_auth.go:437: msg := new(userAuthInfoRequestMsg)\nOn 2013/06/06 12:04:42, dfc wrote:\n> var msg userAuthInfoRequestMsg\n\nDone.\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/client_auth.go#newcode438\nssh/client_auth.go:438: if err := unmarshal(msg, packet, packet[0]); err != nil {\nOn 2013/06/06 12:04:42, dfc wrote:\n> unmarshal(&msg, ...)\n\nDone.\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/client_auth.go#newcode449\nssh/client_auth.go:449: return false, nil, errors.New(\"prompt format error\")\nOn 2013/06/06 12:04:42, dfc wrote:\n> I'm not sure what the tradition here is, I think people are leaning towards\n> adding ssh: prefixes to error messages.\n\nDone.\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/client_auth_test.go\nFile ssh/client_auth_test.go (right):\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/client_auth_test.go#newcode118\nssh/client_auth_test.go:118: questions []string, echos []bool) (answers []string, err error) {\nOn 2013/06/06 12:04:42, dfc wrote:\n> same as previous file. As you are not using a naked return, I don't think the\n> named return args are adding much value here.\n\nDone.\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/client_auth_test.go#newcode150\nssh/client_auth_test.go:150: client.Challenge(\"user\", \"thank you for your cooperation\", nil, nil)\nOn 2013/06/06 12:04:42, dfc wrote:\n> Is this a standard response message ?\n\nno, I was drinking a beer when writing this :)\n\nanecdotally, it's empty for my current installation.\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/common.go\nFile ssh/common.go (right):\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/common.go#newcode332\nssh/common.go:332: func appendString(buf []byte, s string) []byte {\nOn 2013/06/06 12:04:42, dfc wrote:\n> OT: all these append helpers need a cleanup.\n\nsure . You want me to put a TODO somewhere? Open an issue?\n\n(cleaned up in what way?)\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/messages.go\nFile ssh/messages.go (right):\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/messages.go#newcode37\nssh/messages.go:37: // Method specific messages:\nOn 2013/06/06 12:04:42, dfc wrote:\n> this is a good comment, s/://\n> \n> Maybe add some more comments for the other groups\n\nDone.\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/server.go\nFile ssh/server.go (right):\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/server.go#newcode46\nssh/server.go:46: // keyboard-interactive authentication is selected. The\nOn 2013/06/06 12:04:42, dfc wrote:\n> please add a (RFC XXXX) which describes keyboard-interactive\n\nDone.\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/server.go#newcode47\nssh/server.go:47: // passed-in client can be used to talk to the user.  The\nOn 2013/06/06 12:04:42, dfc wrote:\n> s/passed-in client/function/\n\nit's an interface object, though, not a function.\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/server.go#newcode548\nssh/server.go:548: return nil, errors.New(\"echos and questions must have equal length\")\nOn 2013/06/06 12:04:42, dfc wrote:\n> please add an 'ssh: ' prefix\n\nDone.\n\nhttps://codereview.appspot.com/9853050/diff/7001/ssh/server.go#newcode591\nssh/server.go:591: return nil, errors.New(\"junk at end of message\")\nOn 2013/06/06 12:04:42, dfc wrote:\n> same\n\nDone.",
			"disapproval": false,
			"date": "2013-06-06 13:33:07.601700",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"hanwen@google.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/9853050/diff/23001/ssh/client_auth.go\nFile ssh/client_auth.go (right):\n\nhttps://codereview.appspot.com/9853050/diff/23001/ssh/client_auth.go#newcode382\nssh/client_auth.go:382: // 3.3 details how the UI should behave for each both CLI and\ns/each//?\n\nhttps://codereview.appspot.com/9853050/diff/23001/ssh/client_auth.go#newcode389\nssh/client_auth.go:389: func ClientAuthChallengeResponse(impl ClientChallengeResponse) ClientAuth {\nIn OpenSSH, this is generally called \"keyboard-interactive\" I think. Perhaps these should be so named? (i.e. ClientAuthKeyboardInteractive).\n\nhttps://codereview.appspot.com/9853050/diff/23001/ssh/client_auth.go#newcode455\nssh/client_auth.go:455: echos = append(echos, (r[0] != 0))\nI don't think the inner parentheses are needed here.\n\nhttps://codereview.appspot.com/9853050/diff/23001/ssh/client_auth.go#newcode465\nssh/client_auth.go:465: return false, nil, errors.New(\"ssh: junk following message\")\nerrors.New seems wrong here. Pass err?\n\nhttps://codereview.appspot.com/9853050/diff/23001/ssh/client_auth.go#newcode469\nssh/client_auth.go:469: return false, nil, errors.New(\"ssh: not enough answers\")\n\"ssh: not enough answers from keyboard-interactive callback\"\n\nhttps://codereview.appspot.com/9853050/diff/23001/ssh/server.go\nFile ssh/server.go (right):\n\nhttps://codereview.appspot.com/9853050/diff/23001/ssh/server.go#newcode49\nssh/server.go:49: // Challenge rounds.  To avoid information leaks, the client\nonly a single space after a period. (several cases in this comment.)\n\nhttps://codereview.appspot.com/9853050/diff/23001/ssh/server.go#newcode433\nssh/server.go:433: ok := s.config.ChallengeResponseCallback(s, s.User, &sshClientChallengeResponse{s})\nmerge this with following conditional.\n\nhttps://codereview.appspot.com/9853050/diff/23001/ssh/server.go#newcode575\nssh/server.go:575: var n uint32\nit seems that these two var lines can be eliminated by using := for parseUint32.",
			"disapproval": false,
			"date": "2013-06-06 14:22:13.540640",
			"approval": true
		},
		{
			"sender": "hanwen@google.com",
			"recipients": [
				"hanwen@google.com",
				"dave@cheney.net",
				"agl@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-06-06 15:47:31.299710",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"hanwen@google.com",
				"dave@cheney.net",
				"agl@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=c510c3e5067d&repo=crypto ***\n\ngo.crypto/ssh: implement keyboard-interactive auth (RFC 4256), both\non client and server-side.\n\nR=dave, agl\nCC=gobot, golang-dev\nhttps://codereview.appspot.com/9853050\n\nCommitter: Adam Langley <agl@golang.org>\n\nhttps://codereview.appspot.com/9853050/diff/28006/ssh/server.go\nFile ssh/server.go (right):\n\nhttps://codereview.appspot.com/9853050/diff/28006/ssh/server.go#newcode433\nssh/server.go:433: if ok := s.config.KeyboardInteractiveCallback(s, s.User, &sshClientKeyboardInteractive{s}); ok {\nThe 'ok' var isn't needed, but I'll fix that up when landing.",
			"disapproval": false,
			"date": "2013-06-06 14:44:20.414720",
			"approval": false
		}
	],
	"owner_email": "hanwen@google.com",
	"private": false,
	"base_url": "",
	"owner": "hanwen",
	"subject": "code review 9853050: go.crypto/ssh: implement challenge/response auth (RFC 4...",
	"created": "2013-05-31 22:00:56.570040",
	"patchsets": [
		1,
		2001,
		4001,
		7001,
		17001,
		21001,
		23001,
		27001,
		20002,
		28006,
		33001
	],
	"modified": "2013-06-06 15:47:32.816400",
	"closed": true,
	"issue": 9853050
}