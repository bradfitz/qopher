{
	"description": "gc: Extend GC extended precision constant math to allow 1074 bit values.\n\nThis is enough to compute SmallestNonzeroFloat64 as 1 / 2**(1023 - 1 + 52)\nusing SmallestNonzeroFloat64 := 1.0/(1<<(1023 - 1 + 52)) and is useful in\nthe determination of other floating point constants.\nFixes issue 2053.",
	"cc": [
		"golang-dev@googlegroups.com",
		"iant@google.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Do you want all implementations to support this, forever, or do you want\njust gc fixed (for awhile, until something unrelated breaks this silently)?\n\nIf the former, you might consider a new test.  It's probably one line\nsomewhere.\n\n\nOn Fri, Jul 8, 2011 at 8:22 AM, <michael.jones@gmail.com> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com,\n> iant@google.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> gc: Extend GC extended precision constant math to allow 1074 bit values.\n>\n> This is enough to compute SmallestNonzeroFloat64 as 1 / 2**(1023 - 1 +\n> 52)\n> using SmallestNonzeroFloat64 := 1.0/(1<<(1023 - 1 + 52)) and is useful\n> in\n> the determination of other floating point constants.\n> Fixes issue 2053.\n>\n> Please review this at http://codereview.appspot.com/**4664067/<http://codereview.appspot.com/4664067/>\n>\n> Affected files:\n>  M src/cmd/gc/go.h\n>\n>\n> Index: src/cmd/gc/go.h\n> ==============================**==============================**=======\n> --- a/src/cmd/gc/go.h\n> +++ b/src/cmd/gc/go.h\n> @@ -88,7 +88,7 @@\n>  enum\n>  {\n>        Mpscale = 29,           // safely smaller than bits in a long\n> -       Mpprec  = 16,           // Mpscale*Mpprec is max number of bits\n> +       Mpprec  = 38,           // Mpscale*Mpprec is max number of bits\n>        Mpnorm  = Mpprec - 1,   // significant words in a normalized float\n>        Mpbase  = 1L << Mpscale,\n>        Mpsign  = Mpbase >> 1,\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-07-08 15:38:19.741627",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Fair enough. I have to go do an interview with a magazine reporter then will\ncheck in the two key tests.\n\nOn Fri, Jul 8, 2011 at 8:38 AM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\n\n> Do you want all implementations to support this, forever, or do you want\n> just gc fixed (for awhile, until something unrelated breaks this silently)?\n>\n> If the former, you might consider a new test.  It's probably one line\n> somewhere.\n>\n>\n>\n> On Fri, Jul 8, 2011 at 8:22 AM, <michael.jones@gmail.com> wrote:\n>\n>> Reviewers: golang-dev_googlegroups.com,\n>>\n>> Message:\n>> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com,\n>> iant@google.com),\n>>\n>> I'd like you to review this change to\n>> https://go.googlecode.com/hg/\n>>\n>>\n>> Description:\n>> gc: Extend GC extended precision constant math to allow 1074 bit values.\n>>\n>> This is enough to compute SmallestNonzeroFloat64 as 1 / 2**(1023 - 1 +\n>> 52)\n>> using SmallestNonzeroFloat64 := 1.0/(1<<(1023 - 1 + 52)) and is useful\n>> in\n>> the determination of other floating point constants.\n>> Fixes issue 2053.\n>>\n>> Please review this at http://codereview.appspot.com/**4664067/<http://codereview.appspot.com/4664067/>\n>>\n>> Affected files:\n>>  M src/cmd/gc/go.h\n>>\n>>\n>> Index: src/cmd/gc/go.h\n>> ==============================**==============================**=======\n>> --- a/src/cmd/gc/go.h\n>> +++ b/src/cmd/gc/go.h\n>> @@ -88,7 +88,7 @@\n>>  enum\n>>  {\n>>        Mpscale = 29,           // safely smaller than bits in a long\n>> -       Mpprec  = 16,           // Mpscale*Mpprec is max number of bits\n>> +       Mpprec  = 38,           // Mpscale*Mpprec is max number of bits\n>>        Mpnorm  = Mpprec - 1,   // significant words in a normalized float\n>>        Mpbase  = 1L << Mpscale,\n>>        Mpsign  = Mpbase >> 1,\n>>\n>>\n>>\n>\n\n\n-- \n\n*Michael T. Jones*\n\n   Chief Technology Advocate, Google Inc.\n\n   1600 Amphitheatre Parkway, Mountain View, California\n94043<http://maps.google.com/?ie=UTF8&ll=37.422313,-122.088048&spn=0.001135,0.001367&t=h&z=20>\n\n   Email: mtj@google.com  Mobile: 650-335-5765  Fax: 650-649-1938\n\n   *Organizing the world's information to make it universally accessible and\nuseful*\n",
			"disapproval": false,
			"date": "2011-07-08 15:53:25.946342",
			"approval": false
		},
		{
			"sender": "michael.jones@gmail.com",
			"recipients": [
				"michael.jones@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"iant@google.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, iant@google.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-07-08 15:22:11.005500",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "This is not useful by itself.\nThe language specification only requires\n2x the maximum integer precision.\n\nUnless the language spec gets changed,\nI do not want to put this code into the compiler,\nprecisely to keep people from writing the code\nyou want to write and thinking it is valid Go code.\n\nI admit the code is nice and there have been\ntimes I would have liked to have it myself.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-07-11 06:35:34.979742",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "All OK with me. I like that it allows \"totally transparent\" and\n\"self-contained\" coding without resort to mysterious values incomprehensible\nto the reader. I also like that it does not rely on External-base-10 to\ninternal-base-2-FP conversion for those values. However, I readily admit\nthat the huge precision constant requirement is onerous on other/future\ncompilers. No hard feelings. ;-)\n\nOn Sun, Jul 10, 2011 at 11:35 PM, Russ Cox <rsc@golang.org> wrote:\n\n> This is not useful by itself.\n> The language specification only requires\n> 2x the maximum integer precision.\n>\n> Unless the language spec gets changed,\n> I do not want to put this code into the compiler,\n> precisely to keep people from writing the code\n> you want to write and thinking it is valid Go code.\n>\n> I admit the code is nice and there have been\n> times I would have liked to have it myself.\n>\n> Russ\n>\n\n\n\n-- \n\n*Michael T. Jones*\n\n   Chief Technology Advocate, Google Inc.\n\n   1600 Amphitheatre Parkway, Mountain View, California\n94043<http://maps.google.com/?ie=UTF8&ll=37.422313,-122.088048&spn=0.001135,0.001367&t=h&z=20>\n\n   Email: mtj@google.com  Mobile: 650-335-5765  Fax: 650-649-1938\n\n   *Organizing the world's information to make it universally accessible and\nuseful*\n",
			"disapproval": false,
			"date": "2011-07-11 13:22:37.048175",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"michael.jones@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2012-06-03 04:52:27.885410",
			"approval": false
		}
	],
	"owner_email": "michael.jones@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mtj",
	"subject": "code review 4664067: gc: Extend GC extended precision constant math to allow...",
	"created": "2011-07-08 15:04:29.917564",
	"patchsets": [
		1,
		2001,
		5001
	],
	"modified": "2012-06-03 04:52:27.885410",
	"closed": false,
	"issue": 4664067
}