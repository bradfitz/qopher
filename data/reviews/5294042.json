{
	"description": "build: pass $GCFLAGS to compiler\n\nFor example, if you are debugging an optimization\nproblem you can now run\n\n        GCFLAGS=-N gotest\n\nThis is a convention for make, not for the general build,\nso it may go away or be done differently in the eventual\n'go' command.\n\nThe plan is that people will be able to test their code for\nrune safety by doing GCFLAGS=-r.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"lvd@google.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-18 15:23:18.099510",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nThis will also be useful for benchmarks with and without -b.\n\nOn Tue, Oct 18, 2011 at 8:23 AM, <rsc@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> build: pass $GCFLAGS to compiler\n>\n> For example, if you are debugging an optimization\n> problem you can now run\n>\n>        GCFLAGS=-N gotest\n>\n> This is a convention for make, not for the general build,\n> so it may go away or be done differently in the eventual\n> 'go' command.\n>\n> The plan is that people will be able to test their code for\n> rune safety by doing GCFLAGS=-r.\n>\n> Please review this at http://codereview.appspot.com/**5294042/<http://codereview.appspot.com/5294042/>\n>\n> Affected files:\n>  M src/Make.cmd\n>  M src/Make.pkg\n>  M test/run\n>\n>\n> Index: src/Make.cmd\n> ==============================**==============================**=======\n> --- a/src/Make.cmd\n> +++ b/src/Make.cmd\n> @@ -20,7 +20,7 @@\n>        $(LD) $(LDIMPORTS) -o $@ _go_.$O\n>\n>  _go_.$O: $(GOFILES) $(PREREQ)\n> -       $(GC) $(GCIMPORTS) -o $@ $(GOFILES)\n> +       $(GC) $(GCFLAGS) $(GCIMPORTS) -o $@ $(GOFILES)\n>\n>  install: $(TARGDIR)/$(TARG)\n>\n> @@ -44,7 +44,7 @@\n>        gopack grc $@ _gotest_.$O\n>\n>  _gotest_.$O: $(GOFILES) $(GOTESTFILES)\n> -       $(GC) $(GCIMPORTS) -o $@ $(GOFILES) $(GOTESTFILES)\n> +       $(GC) $(GCFLAGS) $(GCIMPORTS) -o $@ $(GOFILES) $(GOTESTFILES)\n>\n>  importpath:\n>        echo main\n> Index: src/Make.pkg\n> ==============================**==============================**=======\n> --- a/src/Make.pkg\n> +++ b/src/Make.pkg\n> @@ -83,10 +83,10 @@\n>        cp _obj/$(TARG).a \"$@\"\n>\n>  _go_.$O: $(GOFILES) $(PREREQ)\n> -       $(GC) $(GCIMPORTS) -p $(TARG) -o $@ $(GOFILES)\n> +       $(GC) $(GCFLAGS) $(GCIMPORTS) -p $(TARG) -o $@ $(GOFILES)\n>\n>  _gotest_.$O: $(GOFILES) $(GOTESTFILES) $(PREREQ)\n> -       $(GC) $(GCIMPORTS) -p $(TARG) -o $@ $(GOFILES) $(GOTESTFILES)\n> +       $(GC) $(GCFLAGS) $(GCIMPORTS) -p $(TARG) -o $@ $(GOFILES)\n> $(GOTESTFILES)\n>\n>  _obj/$(TARG).a: _go_.$O $(OFILES)\n>        @mkdir -p _obj/$(dir)\n> Index: test/run\n> ==============================**==============================**=======\n> --- a/test/run\n> +++ b/test/run\n> @@ -23,7 +23,7 @@\n>        exit 1\n>  esac\n>\n> -export G=${A}g\n> +export G=\"${A}g ${GCFLAGS}\"\n>  export L=${A}l\n>  export GOTRACEBACK=0\n>  export LANG=C\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-10-18 16:00:43.779039",
			"approval": true
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "and inlining and escape analysis! LGTM++\nOn Oct 18, 2011 6:00 PM, \"Brad Fitzpatrick\" <bradfitz@golang.org> wrote:\n\n> LGTM\n>\n> This will also be useful for benchmarks with and without -b.\n>\n> On Tue, Oct 18, 2011 at 8:23 AM, <rsc@golang.org> wrote:\n>\n>> Reviewers: golang-dev_googlegroups.com,\n>>\n>> Message:\n>> Hello golang-dev@googlegroups.com,\n>>\n>> I'd like you to review this change to\n>> https://go.googlecode.com/hg/\n>>\n>>\n>> Description:\n>> build: pass $GCFLAGS to compiler\n>>\n>> For example, if you are debugging an optimization\n>> problem you can now run\n>>\n>>        GCFLAGS=-N gotest\n>>\n>> This is a convention for make, not for the general build,\n>> so it may go away or be done differently in the eventual\n>> 'go' command.\n>>\n>> The plan is that people will be able to test their code for\n>> rune safety by doing GCFLAGS=-r.\n>>\n>> Please review this at http://codereview.appspot.com/**5294042/<http://codereview.appspot.com/5294042/>\n>>\n>> Affected files:\n>>  M src/Make.cmd\n>>  M src/Make.pkg\n>>  M test/run\n>>\n>>\n>> Index: src/Make.cmd\n>> ==============================**==============================**=======\n>> --- a/src/Make.cmd\n>> +++ b/src/Make.cmd\n>> @@ -20,7 +20,7 @@\n>>        $(LD) $(LDIMPORTS) -o $@ _go_.$O\n>>\n>>  _go_.$O: $(GOFILES) $(PREREQ)\n>> -       $(GC) $(GCIMPORTS) -o $@ $(GOFILES)\n>> +       $(GC) $(GCFLAGS) $(GCIMPORTS) -o $@ $(GOFILES)\n>>\n>>  install: $(TARGDIR)/$(TARG)\n>>\n>> @@ -44,7 +44,7 @@\n>>        gopack grc $@ _gotest_.$O\n>>\n>>  _gotest_.$O: $(GOFILES) $(GOTESTFILES)\n>> -       $(GC) $(GCIMPORTS) -o $@ $(GOFILES) $(GOTESTFILES)\n>> +       $(GC) $(GCFLAGS) $(GCIMPORTS) -o $@ $(GOFILES) $(GOTESTFILES)\n>>\n>>  importpath:\n>>        echo main\n>> Index: src/Make.pkg\n>> ==============================**==============================**=======\n>> --- a/src/Make.pkg\n>> +++ b/src/Make.pkg\n>> @@ -83,10 +83,10 @@\n>>        cp _obj/$(TARG).a \"$@\"\n>>\n>>  _go_.$O: $(GOFILES) $(PREREQ)\n>> -       $(GC) $(GCIMPORTS) -p $(TARG) -o $@ $(GOFILES)\n>> +       $(GC) $(GCFLAGS) $(GCIMPORTS) -p $(TARG) -o $@ $(GOFILES)\n>>\n>>  _gotest_.$O: $(GOFILES) $(GOTESTFILES) $(PREREQ)\n>> -       $(GC) $(GCIMPORTS) -p $(TARG) -o $@ $(GOFILES) $(GOTESTFILES)\n>> +       $(GC) $(GCFLAGS) $(GCIMPORTS) -p $(TARG) -o $@ $(GOFILES)\n>> $(GOTESTFILES)\n>>\n>>  _obj/$(TARG).a: _go_.$O $(OFILES)\n>>        @mkdir -p _obj/$(dir)\n>> Index: test/run\n>> ==============================**==============================**=======\n>> --- a/test/run\n>> +++ b/test/run\n>> @@ -23,7 +23,7 @@\n>>        exit 1\n>>  esac\n>>\n>> -export G=${A}g\n>> +export G=\"${A}g ${GCFLAGS}\"\n>>  export L=${A}l\n>>  export GOTRACEBACK=0\n>>  export LANG=C\n>>\n>>\n>>\n>\n",
			"disapproval": false,
			"date": "2011-10-18 16:04:40.914042",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"lvd@google.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=f84853b94305 ***\n\nbuild: pass $GCFLAGS to compiler\n\nFor example, if you are debugging an optimization\nproblem you can now run\n\n        GCFLAGS=-N gotest\n\nThis is a convention for make, not for the general build,\nso it may go away or be done differently in the eventual\n'go' command.\n\nThe plan is that people will be able to test their code for\nrune safety by doing GCFLAGS=-r.\n\nR=golang-dev, bradfitz, lvd\nCC=golang-dev\nhttp://codereview.appspot.com/5294042",
			"disapproval": false,
			"date": "2011-10-18 18:55:13.755268",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5294042: build: pass $GCFLAGS to compiler",
	"created": "2011-10-18 15:21:52.471877",
	"patchsets": [
		1,
		1002,
		3001,
		9001
	],
	"modified": "2011-10-18 18:55:14.976114",
	"closed": true,
	"issue": 5294042
}