{
	"description": "reflect: empty slice/map is not DeepEqual to nil",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=cdfe1219d346 ***\n\nreflect: empty slice/map is not DeepEqual to nil\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5373095",
			"disapproval": false,
			"date": "2011-11-14 21:11:18.299454",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2011-11-14 18:01:16.532998",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nOn Mon, Nov 14, 2011 at 10:01 AM, <rsc@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg\n>\n>\n> Description:\n> reflect: empty slice/map is not DeepEqual to nil\n>\n> Please review this at http://codereview.appspot.com/**5373095/<http://codereview.appspot.com/5373095/>\n>\n> Affected files:\n>  M src/pkg/reflect/all_test.go\n>  M src/pkg/reflect/deepequal.go\n>\n>\n> Index: src/pkg/reflect/all_test.go\n> ==============================**==============================**=======\n> --- a/src/pkg/reflect/all_test.go\n> +++ b/src/pkg/reflect/all_test.go\n> @@ -650,6 +650,14 @@\n>        {map[int]string{2: \"two\", 1: \"one\"}, map[int]string{1: \"one\"},\n> false},\n>        {nil, 1, false},\n>        {1, nil, false},\n> +\n> +       // Nil vs empty: not the same.\n> +       {[]int{}, []int(nil), false},\n> +       {[]int{}, []int{}, true},\n> +       {[]int(nil), []int(nil), true},\n> +       {map[int]int{}, map[int]int(nil), false},\n> +       {map[int]int{}, map[int]int{}, true},\n> +       {map[int]int(nil), map[int]int(nil), true},\n>\n>        // Mismatched types\n>        {1, 1.0, false},\n> Index: src/pkg/reflect/deepequal.go\n> ==============================**==============================**=======\n> --- a/src/pkg/reflect/deepequal.go\n> +++ b/src/pkg/reflect/deepequal.go\n> @@ -69,6 +69,9 @@\n>                }\n>                return true\n>        case Slice:\n> +               if v1.IsNil() != v2.IsNil() {\n> +                       return false\n> +               }\n>                if v1.Len() != v2.Len() {\n>                        return false\n>                }\n> @@ -93,6 +96,9 @@\n>                }\n>                return true\n>        case Map:\n> +               if v1.IsNil() != v2.IsNil() {\n> +                       return false\n> +               }\n>                if v1.Len() != v2.Len() {\n>                        return false\n>                }\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-11-14 18:09:27.967984",
			"approval": true
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5373095: reflect: empty slice/map is not DeepEqual to nil",
	"created": "2011-11-14 17:58:22.969823",
	"patchsets": [
		1,
		2001,
		2002,
		7001
	],
	"modified": "2011-11-14 21:11:19.582215",
	"closed": true,
	"issue": 5373095
}