{
	"description": "go.tools/go.types: retain ast.Node links on demand only\n\n- support Info.Scopes mapping that maps ast.Nodes\n  to the respective *Scope\n- remove old node link from *Scope\n- added corresponding API test\n\nAlso: re-enable debug mode (the faster version was\nonly important for the go api tool, which  has its\nown version now).",
	"cc": [
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rocky.bernstein@gmail.com",
		"adonovan@google.com"
	],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-08-09 01:44:10.017860",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan@google.com, r@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.tools",
			"disapproval": false,
			"date": "2013-08-09 01:40:11.417640",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=15ba0a163203&repo=tools ***\n\ngo.tools/go.types: retain ast.Node links on demand only\n\n- support Info.Scopes mapping that maps ast.Nodes\n  to the respective *Scope\n- remove old node link from *Scope\n- added corresponding API test\n\nAlso: re-enable debug mode (the faster version was\nonly important for the go api tool, which  has its\nown version now).\n\nR=adonovan, r\nCC=golang-dev\nhttps://codereview.appspot.com/12552047",
			"disapproval": false,
			"date": "2013-08-09 03:27:34.389110",
			"approval": false
		},
		{
			"sender": "rocky.bernstein@gmail.com",
			"recipients": [
				"gri@golang.org",
				"rocky.bernstein@gmail.com",
				"adonovan@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What changes (if any) need to be made in the ssa-interpreter need to allow it access to the ast as it was before this change?\n\nI see the Scopes field (map[ast.Node]*Scope) added now to types.Info and field \"node\" removed from the Scopes type and some sort of make() needed after types.Info is created, but ssa uses importer.CreatePackageFromArgs.",
			"disapproval": false,
			"date": "2013-08-10 00:53:21.727720",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "No changes are needed I think. ssa didn't use that information in the first\r\nplace.\r\n- gri\r\n\r\n\r\nOn Fri, Aug 9, 2013 at 5:53 PM, <rocky.bernstein@gmail.com> wrote:\r\n\r\n> What changes (if any) need to be made in the ssa-interpreter need to\r\n> allow it access to the ast as it was before this change?\r\n>\r\n> I see the Scopes field (map[ast.Node]*Scope) added now to types.Info and\r\n> field \"node\" removed from the Scopes type and some sort of make() needed\r\n> after types.Info is created, but ssa uses\r\n> importer.**CreatePackageFromArgs.\r\n>\r\n> https://codereview.appspot.**com/12552047/<https://codereview.appspot.com/12552047/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-10 00:57:49.160980",
			"approval": false
		},
		{
			"sender": "rocky.bernstein@gmail.com",
			"recipients": [
				"gri@golang.org",
				"rocky.bernstein@gmail.com",
				"adonovan@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/10 04:18:02, gri wrote:\n> It's trivial to add the information if you need it. The importer allocates\n> all maps in one place, and you just add a additional line for a Scopes map\n> and copy the pattern used for the other maps.\n> \n> The main difference is that now the information provided is from nodes to\n> scopes, while before the information was from scopes to nodes. But it's\n> trivially inverted if there is need for it.\n> \n> I'll leave it to Alan to make the respective changes in importer - my\n> primary goal at the moment is to get go/types completed.\n\nWhat is on the roadmap for getting go/types completed? \n\nIn the last month or so there have been a lot of changes such the addition of scopes, which was much needed for things like writing a debugger. When you had mentioned that this was going to change, I said I'd wait for the changes before starting to fill out aspects around handling scopes. When you said you thought everything was there complete, although it was just a small matter of programming to add whatever else was needed, I resumed. \n\nIn general understanding what's contemplated and what is likely to change helps me or anyone else who is seriously trying to use this. \n\n>  Alan will be back\n> by the middle of next week, I believe.\n\nOk. Thanks for the information. I won't try then to code around the recent changes but instead will wait for importer to get revised. \n\n> \n> - gri\n> \n> \n> \n> \n> On Fri, Aug 9, 2013 at 6:33 PM, <mailto:rocky.bernstein@gmail.com> wrote:\n> \n> > Yes, sure, the ssa interpreter doesn't use that information, but the\n> > fork of it on github to support debugging does. And I've started\n> > removing the lossy Pos information in that ssa interpreter by using\n> > position information from the ast.\n> >\n> > (Currently it is as a start and end position but eventually, I'll\n> > probably add the single interval number/index I mentioned)\n> >\n> > I think I recall you suggesting that one could use information from the\n> > ast to get the more accurate range information rather than use the lossy\n> > canonical form that is in the ssa interpreter. I had said okay, and then\n> > you don't need that \"canonical Pos\" at all. But this assumes one has the\n> > ast position information.\n> >\n> > Later, Alan had said he thought he would eventually remove that\n> > canonical Pos information, although that hasn't happened yet.\n> >\n> >\n> > On 2013/08/10 00:57:49, gri wrote:\n> >\n> >> No changes are needed I think. ssa didn't use that information in the\n> >>\n> > first\n> >\n> >> place.\n> >> - gri\n> >>\n> >\n> >\n> >  On Fri, Aug 9, 2013 at 5:53 PM,\n> <mailto:rocky.bernstein@gmail.**com<rocky.bernstein@gmail.com>\n> >> >\n> >>\n> > wrote:\n> >\n> >  > What changes (if any) need to be made in the ssa-interpreter need to\n> >> > allow it access to the ast as it was before this change?\n> >> >\n> >> > I see the Scopes field (map[ast.Node]*Scope) added now to types.Info\n> >>\n> > and\n> >\n> >> > field \"node\" removed from the Scopes type and some sort of make()\n> >>\n> > needed\n> >\n> >> > after types.Info is created, but ssa uses\n> >> > importer.****CreatePackageFromArgs.\n> >> >\n> >> >\n> >>\n> >\n> > https://codereview.appspot.****com/12552047/%253Chttps://codere**\n> > view.appspot.com/12552047/ <http://codereview.appspot.com/12552047/>>\n> >\n> >> >\n> >>\n> >\n> >\n> >\n> >\n> https://codereview.appspot.**com/12552047/%3Chttps://codereview.appspot.com/12552047/>\n> >",
			"disapproval": false,
			"date": "2013-08-10 04:40:03.619560",
			"approval": false
		},
		{
			"sender": "rocky.bernstein@gmail.com",
			"recipients": [
				"gri@golang.org",
				"rocky.bernstein@gmail.com",
				"adonovan@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yes, sure, the ssa interpreter doesn't use that information, but the fork of it on github to support debugging does. And I've started removing the lossy Pos information in that ssa interpreter by using position information from the ast. \n\n(Currently it is as a start and end position but eventually, I'll probably add the single interval number/index I mentioned)\n\nI think I recall you suggesting that one could use information from the ast to get the more accurate range information rather than use the lossy canonical form that is in the ssa interpreter. I had said okay, and then you don't need that \"canonical Pos\" at all. But this assumes one has the ast position information. \n\nLater, Alan had said he thought he would eventually remove that canonical Pos information, although that hasn't happened yet.\n\nOn 2013/08/10 00:57:49, gri wrote:\n> No changes are needed I think. ssa didn't use that information in the first\n> place.\n> - gri\n> \n> \n> On Fri, Aug 9, 2013 at 5:53 PM, <mailto:rocky.bernstein@gmail.com> wrote:\n> \n> > What changes (if any) need to be made in the ssa-interpreter need to\n> > allow it access to the ast as it was before this change?\n> >\n> > I see the Scopes field (map[ast.Node]*Scope) added now to types.Info and\n> > field \"node\" removed from the Scopes type and some sort of make() needed\n> > after types.Info is created, but ssa uses\n> > importer.**CreatePackageFromArgs.\n> >\n> >\n> https://codereview.appspot.**com/12552047/%3Chttps://codereview.appspot.com/12552047/>\n> >",
			"disapproval": false,
			"date": "2013-08-10 01:33:18.781220",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It's trivial to add the information if you need it. The importer allocates\r\nall maps in one place, and you just add a additional line for a Scopes map\r\nand copy the pattern used for the other maps.\r\n\r\nThe main difference is that now the information provided is from nodes to\r\nscopes, while before the information was from scopes to nodes. But it's\r\ntrivially inverted if there is need for it.\r\n\r\nI'll leave it to Alan to make the respective changes in importer - my\r\nprimary goal at the moment is to get go/types completed. Alan will be back\r\nby the middle of next week, I believe.\r\n\r\n- gri\r\n\r\n\r\n\r\n\r\nOn Fri, Aug 9, 2013 at 6:33 PM, <rocky.bernstein@gmail.com> wrote:\r\n\r\n> Yes, sure, the ssa interpreter doesn't use that information, but the\r\n> fork of it on github to support debugging does. And I've started\r\n> removing the lossy Pos information in that ssa interpreter by using\r\n> position information from the ast.\r\n>\r\n> (Currently it is as a start and end position but eventually, I'll\r\n> probably add the single interval number/index I mentioned)\r\n>\r\n> I think I recall you suggesting that one could use information from the\r\n> ast to get the more accurate range information rather than use the lossy\r\n> canonical form that is in the ssa interpreter. I had said okay, and then\r\n> you don't need that \"canonical Pos\" at all. But this assumes one has the\r\n> ast position information.\r\n>\r\n> Later, Alan had said he thought he would eventually remove that\r\n> canonical Pos information, although that hasn't happened yet.\r\n>\r\n>\r\n> On 2013/08/10 00:57:49, gri wrote:\r\n>\r\n>> No changes are needed I think. ssa didn't use that information in the\r\n>>\r\n> first\r\n>\r\n>> place.\r\n>> - gri\r\n>>\r\n>\r\n>\r\n>  On Fri, Aug 9, 2013 at 5:53 PM, <mailto:rocky.bernstein@gmail.**com<rocky.bernstein@gmail.com>\r\n>> >\r\n>>\r\n> wrote:\r\n>\r\n>  > What changes (if any) need to be made in the ssa-interpreter need to\r\n>> > allow it access to the ast as it was before this change?\r\n>> >\r\n>> > I see the Scopes field (map[ast.Node]*Scope) added now to types.Info\r\n>>\r\n> and\r\n>\r\n>> > field \"node\" removed from the Scopes type and some sort of make()\r\n>>\r\n> needed\r\n>\r\n>> > after types.Info is created, but ssa uses\r\n>> > importer.****CreatePackageFromArgs.\r\n>> >\r\n>> >\r\n>>\r\n>\r\n> https://codereview.appspot.****com/12552047/%3Chttps://codere**\r\n> view.appspot.com/12552047/ <http://codereview.appspot.com/12552047/>>\r\n>\r\n>> >\r\n>>\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.**com/12552047/<https://codereview.appspot.com/12552047/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-10 04:18:02.330620",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "go/types is very close to functionally complete. There are known bugs\r\n(issue tracker, and TODOs in the code). But the code is now type-checking\r\nthe entire standard-library in all os/arch configurations, and various\r\nother code.\r\n\r\nWhat is still a bit in flux is the set of factory functions, exact naming,\r\nparameter lists, etc. - they have been added somewhat ad-hoc for clients\r\n(ssa) who needed to create their own types.\r\n\r\nFrom an API perspective, I'd rather not have clients be able to mix their\r\nown things in because it's hard to enforce that they are properly set-up\r\nwith all invariants preserved. For instance, at the moment its possible to\r\nmuck with the Universe scope which is a no-no. I think this is one of the\r\nareas where we can still evolve the API and perhaps find better solutions.\r\nThis is also an area where I don't want to tie things down too early. But\r\nin general, such changes should be not too hard on clients.\r\n\r\nI might send out (or document in the code) the current status and what's\r\nmissing, sometimes early next week. I will be offline for 4 weeks after\r\nthat, but Alan will be able to chime in.\r\n\r\n- gri\r\n\r\n\r\nOn Fri, Aug 9, 2013 at 9:40 PM, <rocky.bernstein@gmail.com> wrote:\r\n\r\n> On 2013/08/10 04:18:02, gri wrote:\r\n>\r\n>> It's trivial to add the information if you need it. The importer\r\n>>\r\n> allocates\r\n>\r\n>> all maps in one place, and you just add a additional line for a Scopes\r\n>>\r\n> map\r\n>\r\n>> and copy the pattern used for the other maps.\r\n>>\r\n>\r\n>  The main difference is that now the information provided is from nodes\r\n>>\r\n> to\r\n>\r\n>> scopes, while before the information was from scopes to nodes. But\r\n>>\r\n> it's\r\n>\r\n>> trivially inverted if there is need for it.\r\n>>\r\n>\r\n>  I'll leave it to Alan to make the respective changes in importer - my\r\n>> primary goal at the moment is to get go/types completed.\r\n>>\r\n>\r\n> What is on the roadmap for getting go/types completed?\r\n>\r\n> In the last month or so there have been a lot of changes such the\r\n> addition of scopes, which was much needed for things like writing a\r\n> debugger. When you had mentioned that this was going to change, I said\r\n> I'd wait for the changes before starting to fill out aspects around\r\n> handling scopes. When you said you thought everything was there\r\n> complete, although it was just a small matter of programming to add\r\n> whatever else was needed, I resumed.\r\n>\r\n> In general understanding what's contemplated and what is likely to\r\n> change helps me or anyone else who is seriously trying to use this.\r\n>\r\n>\r\n>    Alan will be back\r\n>> by the middle of next week, I believe.\r\n>>\r\n>\r\n> Ok. Thanks for the information. I won't try then to code around the\r\n> recent changes but instead will wait for importer to get revised.\r\n>\r\n>\r\n>  - gri\r\n>>\r\n>\r\n>\r\n>\r\n>\r\n>  On Fri, Aug 9, 2013 at 6:33 PM, <mailto:rocky.bernstein@gmail.**com<rocky.bernstein@gmail.com>\r\n>> >\r\n>>\r\n> wrote:\r\n>\r\n>  > Yes, sure, the ssa interpreter doesn't use that information, but the\r\n>> > fork of it on github to support debugging does. And I've started\r\n>> > removing the lossy Pos information in that ssa interpreter by using\r\n>> > position information from the ast.\r\n>> >\r\n>> > (Currently it is as a start and end position but eventually, I'll\r\n>> > probably add the single interval number/index I mentioned)\r\n>> >\r\n>> > I think I recall you suggesting that one could use information from\r\n>>\r\n> the\r\n>\r\n>> > ast to get the more accurate range information rather than use the\r\n>>\r\n> lossy\r\n>\r\n>> > canonical form that is in the ssa interpreter. I had said okay, and\r\n>>\r\n> then\r\n>\r\n>> > you don't need that \"canonical Pos\" at all. But this assumes one has\r\n>>\r\n> the\r\n>\r\n>> > ast position information.\r\n>> >\r\n>> > Later, Alan had said he thought he would eventually remove that\r\n>> > canonical Pos information, although that hasn't happened yet.\r\n>> >\r\n>> >\r\n>> > On 2013/08/10 00:57:49, gri wrote:\r\n>> >\r\n>> >> No changes are needed I think. ssa didn't use that information in\r\n>>\r\n> the\r\n>\r\n>> >>\r\n>> > first\r\n>> >\r\n>> >> place.\r\n>> >> - gri\r\n>> >>\r\n>> >\r\n>> >\r\n>> >  On Fri, Aug 9, 2013 at 5:53 PM,\r\n>> <mailto:rocky.bernstein@gmail.****com<rocky.bernstein@gmail.**com<rocky.bernstein@gmail.com>\r\n>> >\r\n>>\r\n>> >> >\r\n>> >>\r\n>> > wrote:\r\n>> >\r\n>> >  > What changes (if any) need to be made in the ssa-interpreter need\r\n>>\r\n> to\r\n>\r\n>> >> > allow it access to the ast as it was before this change?\r\n>> >> >\r\n>> >> > I see the Scopes field (map[ast.Node]*Scope) added now to\r\n>>\r\n> types.Info\r\n>\r\n>> >>\r\n>> > and\r\n>> >\r\n>> >> > field \"node\" removed from the Scopes type and some sort of make()\r\n>> >>\r\n>> > needed\r\n>> >\r\n>> >> > after types.Info is created, but ssa uses\r\n>> >> > importer.******CreatePackageFromArgs.\r\n>> >> >\r\n>> >> >\r\n>> >>\r\n>> >\r\n>> > https://codereview.appspot.******com/12552047/%253Chttps://**codere**\r\n>> > view.appspot.com/12552047/\r\n>>\r\n> <http://codereview.appspot.**com/12552047/<http://codereview.appspot.com/12552047/>\r\n> >>\r\n>\r\n>  >\r\n>> >> >\r\n>> >>\r\n>> >\r\n>> >\r\n>> >\r\n>> >\r\n>>\r\n>\r\n> https://codereview.appspot.****com/12552047/%3Chttps://codere**\r\n> view.appspot.com/12552047/ <http://codereview.appspot.com/12552047/>>\r\n>\r\n>> >\r\n>>\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.**com/12552047/<https://codereview.appspot.com/12552047/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-10 04:52:18.522510",
			"approval": false
		},
		{
			"sender": "rocky.bernstein@gmail.com",
			"recipients": [
				"gri@golang.org",
				"rocky.bernstein@gmail.com",
				"adonovan@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/10 04:52:18, gri wrote:\n> go/types is very close to functionally complete. There are known bugs\n> (issue tracker, and TODOs in the code). But the code is now type-checking\n> the entire standard-library in all os/arch configurations, and various\n> other code.\n> \n> What is still a bit in flux is the set of factory functions, exact naming,\n> parameter lists, etc. - they have been added somewhat ad-hoc for clients\n> (ssa) who needed to create their own types.\n> \n> From an API perspective, I'd rather not have clients be able to mix their\n> own things in because it's hard to enforce that they are properly set-up\n> with all invariants preserved. For instance, at the moment its possible to\n> muck with the Universe scope which is a no-no. I think this is one of the\n> areas where we can still evolve the API and perhaps find better solutions.\n> This is also an area where I don't want to tie things down too early. But\n> in general, such changes should be not too hard on clients.\n> \n> I might send out (or document in the code) the current status and what's\n> missing, sometimes early next week. I will be offline for 4 weeks after\n> that, but Alan will be able to chime in.\n> \n> - gri\n> \n> \n> On Fri, Aug 9, 2013 at 9:40 PM, <mailto:rocky.bernstein@gmail.com> wrote:\n> \n> > On 2013/08/10 04:18:02, gri wrote:\n> >\n> >> It's trivial to add the information if you need it. The importer\n> >>\n> > allocates\n> >\n> >> all maps in one place, and you just add a additional line for a Scopes\n> >>\n> > map\n> >\n> >> and copy the pattern used for the other maps.\n> >>\n> >\n> >  The main difference is that now the information provided is from nodes\n> >>\n> > to\n> >\n> >> scopes, while before the information was from scopes to nodes. But\n> >>\n> > it's\n> >\n> >> trivially inverted if there is need for it.\n> >>\n> >\n> >  I'll leave it to Alan to make the respective changes in importer - my\n> >> primary goal at the moment is to get go/types completed.\n> >>\n> >\n> > What is on the roadmap for getting go/types completed?\n> >\n> > In the last month or so there have been a lot of changes such the\n> > addition of scopes, which was much needed for things like writing a\n> > debugger. When you had mentioned that this was going to change, I said\n> > I'd wait for the changes before starting to fill out aspects around\n> > handling scopes. When you said you thought everything was there\n> > complete, although it was just a small matter of programming to add\n> > whatever else was needed, I resumed.\n> >\n> > In general understanding what's contemplated and what is likely to\n> > change helps me or anyone else who is seriously trying to use this.\n> >\n> >\n> >    Alan will be back\n> >> by the middle of next week, I believe.\n> >>\n> >\n> > Ok. Thanks for the information. I won't try then to code around the\n> > recent changes but instead will wait for importer to get revised.\n> >\n> >\n> >  - gri\n> >>\n> >\n> >\n> >\n> >\n> >  On Fri, Aug 9, 2013 at 6:33 PM,\n> <mailto:rocky.bernstein@gmail.**com<rocky.bernstein@gmail.com>\n> >> >\n> >>\n> > wrote:\n> >\n> >  > Yes, sure, the ssa interpreter doesn't use that information, but the\n> >> > fork of it on github to support debugging does. And I've started\n> >> > removing the lossy Pos information in that ssa interpreter by using\n> >> > position information from the ast.\n> >> >\n> >> > (Currently it is as a start and end position but eventually, I'll\n> >> > probably add the single interval number/index I mentioned)\n> >> >\n> >> > I think I recall you suggesting that one could use information from\n> >>\n> > the\n> >\n> >> > ast to get the more accurate range information rather than use the\n> >>\n> > lossy\n> >\n> >> > canonical form that is in the ssa interpreter. I had said okay, and\n> >>\n> > then\n> >\n> >> > you don't need that \"canonical Pos\" at all. But this assumes one has\n> >>\n> > the\n> >\n> >> > ast position information.\n> >> >\n> >> > Later, Alan had said he thought he would eventually remove that\n> >> > canonical Pos information, although that hasn't happened yet.\n> >> >\n> >> >\n> >> > On 2013/08/10 00:57:49, gri wrote:\n> >> >\n> >> >> No changes are needed I think. ssa didn't use that information in\n> >>\n> > the\n> >\n> >> >>\n> >> > first\n> >> >\n> >> >> place.\n> >> >> - gri\n> >> >>\n> >> >\n> >> >\n> >> >  On Fri, Aug 9, 2013 at 5:53 PM,\n> >>\n> <mailto:rocky.bernstein@gmail.****com<rocky.bernstein@gmail.**com<rocky.bernstein@gmail.com>\n> >> >\n> >>\n> >> >> >\n> >> >>\n> >> > wrote:\n> >> >\n> >> >  > What changes (if any) need to be made in the ssa-interpreter need\n> >>\n> > to\n> >\n> >> >> > allow it access to the ast as it was before this change?\n> >> >> >\n> >> >> > I see the Scopes field (map[ast.Node]*Scope) added now to\n> >>\n> > types.Info\n> >\n> >> >>\n> >> > and\n> >> >\n> >> >> > field \"node\" removed from the Scopes type and some sort of make()\n> >> >>\n> >> > needed\n> >> >\n> >> >> > after types.Info is created, but ssa uses\n> >> >> > importer.******CreatePackageFromArgs.\n> >> >> >\n> >> >> >\n> >> >>\n> >> >\n> >> > https://codereview.appspot.******com/12552047/%25253Chttps://**codere**\n> >> > view.appspot.com/12552047/\n> >>\n> >\n> <http://codereview.appspot.**com/12552047/%3Chttp://codereview.appspot.com/12552047/>\n> > >>\n> >\n> >  >\n> >> >> >\n> >> >>\n> >> >\n> >> >\n> >> >\n> >> >\n> >>\n> >\n> > https://codereview.appspot.****com/12552047/%253Chttps://codere**\n> > view.appspot.com/12552047/ <http://codereview.appspot.com/12552047/>>\n> >\n> >> >\n> >>\n> >\n> >\n> >\n> >\n> https://codereview.appspot.**com/12552047/%3Chttps://codereview.appspot.com/12552047/>\n> >\n\nThanks! This helps a lot. I' looking forward to a synopsis where things stand next week.",
			"disapproval": false,
			"date": "2013-08-10 06:15:09.719930",
			"approval": false
		},
		{
			"sender": "rocky.bernstein@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I've been looking again to look at the bugs and TODO's as you mentioned\r\npreviously. As it is right now, it's not all that useful in a debugger or a\r\ngo shell (short of abusing the Universal scope which we all agree is\r\nundesirable), because access to the checker is at a very coarse level --\r\nthe level of an entire program. Also, the type and value information inside\r\nthe type checker don't seem to be accessible from the outside. Am I missing\r\nsomething?\r\n\r\nThere is types.Check() which works with an entire program. Underneath that\r\ncalls  checkExprOrType but that's not exposed from the outside. Nor is the\r\nchecker object where type and value information about the ast object is\r\nsaved.\r\n\r\nInside a debugger stopped inside a go program, one has a current scope (say\r\na type.Scope object). The programmer enters an expression and that's parsed\r\nand evaluated using current values and the scope. Similarly, in an\r\ninteractive shell one also has a scope. Some interactive shells also have\r\n\"workspaces\" which allow one to switch scopes.\r\n\r\nDoes the use cases of go/types encompass these scenarios? Also, if it is\r\nthe case that the type information is not accessible after a check is done,\r\nI would imagine there some duplication inside the ssa-interpreter to handle\r\nthe same sorts of issues. So again, I must be missing something.\r\n\r\n\r\n\r\nOn Sat, Aug 10, 2013 at 2:15 AM, <rocky.bernstein@gmail.com> wrote:\r\n\r\n> On 2013/08/10 04:52:18, gri wrote:\r\n>\r\n>> go/types is very close to functionally complete. There are known bugs\r\n>> (issue tracker, and TODOs in the code). But the code is now\r\n>>\r\n> type-checking\r\n>\r\n>> the entire standard-library in all os/arch configurations, and various\r\n>> other code.\r\n>>\r\n>\r\n>  What is still a bit in flux is the set of factory functions, exact\r\n>>\r\n> naming,\r\n>\r\n>> parameter lists, etc. - they have been added somewhat ad-hoc for\r\n>>\r\n> clients\r\n>\r\n>> (ssa) who needed to create their own types.\r\n>>\r\n>\r\n>   From an API perspective, I'd rather not have clients be able to mix\r\n>>\r\n> their\r\n>\r\n>> own things in because it's hard to enforce that they are properly\r\n>>\r\n> set-up\r\n>\r\n>> with all invariants preserved. For instance, at the moment its\r\n>>\r\n> possible to\r\n>\r\n>> muck with the Universe scope which is a no-no. I think this is one of\r\n>>\r\n> the\r\n>\r\n>> areas where we can still evolve the API and perhaps find better\r\n>>\r\n> solutions.\r\n>\r\n>> This is also an area where I don't want to tie things down too early.\r\n>>\r\n> But\r\n>\r\n>> in general, such changes should be not too hard on clients.\r\n>>\r\n>\r\n>  I might send out (or document in the code) the current status and\r\n>>\r\n> what's\r\n>\r\n>> missing, sometimes early next week. I will be offline for 4 weeks\r\n>>\r\n> after\r\n>\r\n>> that, but Alan will be able to chime in.\r\n>>\r\n>\r\n>  - gri\r\n>>\r\n>\r\n>\r\n>  On Fri, Aug 9, 2013 at 9:40 PM, <mailto:rocky.bernstein@gmail.**com<rocky.bernstein@gmail.com>\r\n>> >\r\n>>\r\n> wrote:\r\n>\r\n>  > On 2013/08/10 04:18:02, gri wrote:\r\n>> >\r\n>> >> It's trivial to add the information if you need it. The importer\r\n>> >>\r\n>> > allocates\r\n>> >\r\n>> >> all maps in one place, and you just add a additional line for a\r\n>>\r\n> Scopes\r\n>\r\n>> >>\r\n>> > map\r\n>> >\r\n>> >> and copy the pattern used for the other maps.\r\n>> >>\r\n>> >\r\n>> >  The main difference is that now the information provided is from\r\n>>\r\n> nodes\r\n>\r\n>> >>\r\n>> > to\r\n>> >\r\n>> >> scopes, while before the information was from scopes to nodes. But\r\n>> >>\r\n>> > it's\r\n>> >\r\n>> >> trivially inverted if there is need for it.\r\n>> >>\r\n>> >\r\n>> >  I'll leave it to Alan to make the respective changes in importer -\r\n>>\r\n> my\r\n>\r\n>> >> primary goal at the moment is to get go/types completed.\r\n>> >>\r\n>> >\r\n>> > What is on the roadmap for getting go/types completed?\r\n>> >\r\n>> > In the last month or so there have been a lot of changes such the\r\n>> > addition of scopes, which was much needed for things like writing a\r\n>> > debugger. When you had mentioned that this was going to change, I\r\n>>\r\n> said\r\n>\r\n>> > I'd wait for the changes before starting to fill out aspects around\r\n>> > handling scopes. When you said you thought everything was there\r\n>> > complete, although it was just a small matter of programming to add\r\n>> > whatever else was needed, I resumed.\r\n>> >\r\n>> > In general understanding what's contemplated and what is likely to\r\n>> > change helps me or anyone else who is seriously trying to use this.\r\n>> >\r\n>> >\r\n>> >    Alan will be back\r\n>> >> by the middle of next week, I believe.\r\n>> >>\r\n>> >\r\n>> > Ok. Thanks for the information. I won't try then to code around the\r\n>> > recent changes but instead will wait for importer to get revised.\r\n>> >\r\n>> >\r\n>> >  - gri\r\n>> >>\r\n>> >\r\n>> >\r\n>> >\r\n>> >\r\n>> >  On Fri, Aug 9, 2013 at 6:33 PM,\r\n>> <mailto:rocky.bernstein@gmail.****com<rocky.bernstein@gmail.**com<rocky.bernstein@gmail.com>\r\n>> >\r\n>>\r\n>> >> >\r\n>> >>\r\n>> > wrote:\r\n>> >\r\n>> >  > Yes, sure, the ssa interpreter doesn't use that information, but\r\n>>\r\n> the\r\n>\r\n>> >> > fork of it on github to support debugging does. And I've started\r\n>> >> > removing the lossy Pos information in that ssa interpreter by\r\n>>\r\n> using\r\n>\r\n>> >> > position information from the ast.\r\n>> >> >\r\n>> >> > (Currently it is as a start and end position but eventually, I'll\r\n>> >> > probably add the single interval number/index I mentioned)\r\n>> >> >\r\n>> >> > I think I recall you suggesting that one could use information\r\n>>\r\n> from\r\n>\r\n>> >>\r\n>> > the\r\n>> >\r\n>> >> > ast to get the more accurate range information rather than use\r\n>>\r\n> the\r\n>\r\n>> >>\r\n>> > lossy\r\n>> >\r\n>> >> > canonical form that is in the ssa interpreter. I had said okay,\r\n>>\r\n> and\r\n>\r\n>> >>\r\n>> > then\r\n>> >\r\n>> >> > you don't need that \"canonical Pos\" at all. But this assumes one\r\n>>\r\n> has\r\n>\r\n>> >>\r\n>> > the\r\n>> >\r\n>> >> > ast position information.\r\n>> >> >\r\n>> >> > Later, Alan had said he thought he would eventually remove that\r\n>> >> > canonical Pos information, although that hasn't happened yet.\r\n>> >> >\r\n>> >> >\r\n>> >> > On 2013/08/10 00:57:49, gri wrote:\r\n>> >> >\r\n>> >> >> No changes are needed I think. ssa didn't use that information\r\n>>\r\n> in\r\n>\r\n>> >>\r\n>> > the\r\n>> >\r\n>> >> >>\r\n>> >> > first\r\n>> >> >\r\n>> >> >> place.\r\n>> >> >> - gri\r\n>> >> >>\r\n>> >> >\r\n>> >> >\r\n>> >> >  On Fri, Aug 9, 2013 at 5:53 PM,\r\n>> >>\r\n>>\r\n>\r\n> <mailto:rocky.bernstein@gmail.******com<rocky.bernstein@gmail.****com<\r\n> rocky.bernstein@gmail.**com <rocky.bernstein@gmail.com>>\r\n>\r\n>  >> >\r\n>> >>\r\n>> >> >> >\r\n>> >> >>\r\n>> >> > wrote:\r\n>> >> >\r\n>> >> >  > What changes (if any) need to be made in the ssa-interpreter\r\n>>\r\n> need\r\n>\r\n>> >>\r\n>> > to\r\n>> >\r\n>> >> >> > allow it access to the ast as it was before this change?\r\n>> >> >> >\r\n>> >> >> > I see the Scopes field (map[ast.Node]*Scope) added now to\r\n>> >>\r\n>> > types.Info\r\n>> >\r\n>> >> >>\r\n>> >> > and\r\n>> >> >\r\n>> >> >> > field \"node\" removed from the Scopes type and some sort of\r\n>>\r\n> make()\r\n>\r\n>> >> >>\r\n>> >> > needed\r\n>> >> >\r\n>> >> >> > after types.Info is created, but ssa uses\r\n>> >> >> > importer.********CreatePackageFromArgs.\r\n>> >> >> >\r\n>> >> >> >\r\n>> >> >>\r\n>> >> >\r\n>> >> >\r\n>>\r\n> https://codereview.appspot.********com/12552047/%25253Chttps:/**\r\n> /**codere**\r\n>\r\n>> >> > view.appspot.com/12552047/\r\n>> >>\r\n>> >\r\n>>\r\n>\r\n> <http://codereview.appspot.****com/12552047/%3Chttp://coderev**\r\n> iew.appspot.com/12552047/ <http://codereview.appspot.com/12552047/>>\r\n>\r\n>  > >>\r\n>> >\r\n>> >  >\r\n>> >> >> >\r\n>> >> >>\r\n>> >> >\r\n>> >> >\r\n>> >> >\r\n>> >> >\r\n>> >>\r\n>> >\r\n>> > https://codereview.appspot.******com/12552047/%253Chttps://**codere**\r\n>> > view.appspot.com/12552047/\r\n>>\r\n> <http://codereview.appspot.**com/12552047/<http://codereview.appspot.com/12552047/>\r\n> >>\r\n>\r\n>> >\r\n>> >> >\r\n>> >>\r\n>> >\r\n>> >\r\n>> >\r\n>> >\r\n>>\r\n>\r\n> https://codereview.appspot.****com/12552047/%3Chttps://codere**\r\n> view.appspot.com/12552047/ <http://codereview.appspot.com/12552047/>>\r\n>\r\n>> >\r\n>>\r\n>\r\n> Thanks! This helps a lot. I' looking forward to a synopsis where things\r\n> stand next week.\r\n>\r\n> https://codereview.appspot.**com/12552047/<https://codereview.appspot.com/12552047/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-11 03:45:24.769050",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The Info struct can be populated with maps that provide you access to the\r\ntype (and if constant, value) of every expression in the program. There are\r\nmaps that permit mapping of all identifiers to their objects, and thus\r\ntypes, and corresponding scopes. I have pointed you at this structure\r\nbefore when explaining how to hook up the Scopes map.\r\n\r\nSo you're certainly not correct: There is very fine-grained information\r\navailable about the entire program. Together with the AST it is possible to\r\nget all the type and value information that is needed to implement a\r\nback-end of a compiler. It was certainly possible for Alan to implement the\r\nssa interpreter...\r\n\r\nThe type-checker's primary goal is to provide whole-program type\r\ninformation.\r\n\r\nThere's a whole set of problems that come with implementing a debugger or\r\nan interactive shell that has very little to do with type-checking, and\r\nit's not the goal of the type-checker to be a kitchen sink for all possible\r\napplications.\r\n\r\n- gri\r\n\r\n\r\nOn Sat, Aug 10, 2013 at 8:45 PM, Rocky Bernstein\r\n<rocky.bernstein@gmail.com>wrote:\r\n\r\n> I've been looking again to look at the bugs and TODO's as you mentioned\r\n> previously. As it is right now, it's not all that useful in a debugger or a\r\n> go shell (short of abusing the Universal scope which we all agree is\r\n> undesirable), because access to the checker is at a very coarse level --\r\n> the level of an entire program. Also, the type and value information inside\r\n> the type checker don't seem to be accessible from the outside. Am I missing\r\n> something?\r\n>\r\n> There is types.Check() which works with an entire program. Underneath that\r\n> calls  checkExprOrType but that's not exposed from the outside. Nor is the\r\n> checker object where type and value information about the ast object is\r\n> saved.\r\n>\r\n> Inside a debugger stopped inside a go program, one has a current scope\r\n> (say a type.Scope object). The programmer enters an expression and that's\r\n> parsed and evaluated using current values and the scope. Similarly, in an\r\n> interactive shell one also has a scope. Some interactive shells also have\r\n> \"workspaces\" which allow one to switch scopes.\r\n>\r\n> Does the use cases of go/types encompass these scenarios? Also, if it is\r\n> the case that the type information is not accessible after a check is done,\r\n> I would imagine there some duplication inside the ssa-interpreter to handle\r\n> the same sorts of issues. So again, I must be missing something.\r\n>\r\n>\r\n>\r\n>\r\n> On Sat, Aug 10, 2013 at 2:15 AM, <rocky.bernstein@gmail.com> wrote:\r\n>\r\n>> On 2013/08/10 04:52:18, gri wrote:\r\n>>\r\n>>> go/types is very close to functionally complete. There are known bugs\r\n>>> (issue tracker, and TODOs in the code). But the code is now\r\n>>>\r\n>> type-checking\r\n>>\r\n>>> the entire standard-library in all os/arch configurations, and various\r\n>>> other code.\r\n>>>\r\n>>\r\n>>  What is still a bit in flux is the set of factory functions, exact\r\n>>>\r\n>> naming,\r\n>>\r\n>>> parameter lists, etc. - they have been added somewhat ad-hoc for\r\n>>>\r\n>> clients\r\n>>\r\n>>> (ssa) who needed to create their own types.\r\n>>>\r\n>>\r\n>>   From an API perspective, I'd rather not have clients be able to mix\r\n>>>\r\n>> their\r\n>>\r\n>>> own things in because it's hard to enforce that they are properly\r\n>>>\r\n>> set-up\r\n>>\r\n>>> with all invariants preserved. For instance, at the moment its\r\n>>>\r\n>> possible to\r\n>>\r\n>>> muck with the Universe scope which is a no-no. I think this is one of\r\n>>>\r\n>> the\r\n>>\r\n>>> areas where we can still evolve the API and perhaps find better\r\n>>>\r\n>> solutions.\r\n>>\r\n>>> This is also an area where I don't want to tie things down too early.\r\n>>>\r\n>> But\r\n>>\r\n>>> in general, such changes should be not too hard on clients.\r\n>>>\r\n>>\r\n>>  I might send out (or document in the code) the current status and\r\n>>>\r\n>> what's\r\n>>\r\n>>> missing, sometimes early next week. I will be offline for 4 weeks\r\n>>>\r\n>> after\r\n>>\r\n>>> that, but Alan will be able to chime in.\r\n>>>\r\n>>\r\n>>  - gri\r\n>>>\r\n>>\r\n>>\r\n>>  On Fri, Aug 9, 2013 at 9:40 PM, <mailto:rocky.bernstein@gmail.**com<rocky.bernstein@gmail.com>\r\n>>> >\r\n>>>\r\n>> wrote:\r\n>>\r\n>>  > On 2013/08/10 04:18:02, gri wrote:\r\n>>> >\r\n>>> >> It's trivial to add the information if you need it. The importer\r\n>>> >>\r\n>>> > allocates\r\n>>> >\r\n>>> >> all maps in one place, and you just add a additional line for a\r\n>>>\r\n>> Scopes\r\n>>\r\n>>> >>\r\n>>> > map\r\n>>> >\r\n>>> >> and copy the pattern used for the other maps.\r\n>>> >>\r\n>>> >\r\n>>> >  The main difference is that now the information provided is from\r\n>>>\r\n>> nodes\r\n>>\r\n>>> >>\r\n>>> > to\r\n>>> >\r\n>>> >> scopes, while before the information was from scopes to nodes. But\r\n>>> >>\r\n>>> > it's\r\n>>> >\r\n>>> >> trivially inverted if there is need for it.\r\n>>> >>\r\n>>> >\r\n>>> >  I'll leave it to Alan to make the respective changes in importer -\r\n>>>\r\n>> my\r\n>>\r\n>>> >> primary goal at the moment is to get go/types completed.\r\n>>> >>\r\n>>> >\r\n>>> > What is on the roadmap for getting go/types completed?\r\n>>> >\r\n>>> > In the last month or so there have been a lot of changes such the\r\n>>> > addition of scopes, which was much needed for things like writing a\r\n>>> > debugger. When you had mentioned that this was going to change, I\r\n>>>\r\n>> said\r\n>>\r\n>>> > I'd wait for the changes before starting to fill out aspects around\r\n>>> > handling scopes. When you said you thought everything was there\r\n>>> > complete, although it was just a small matter of programming to add\r\n>>> > whatever else was needed, I resumed.\r\n>>> >\r\n>>> > In general understanding what's contemplated and what is likely to\r\n>>> > change helps me or anyone else who is seriously trying to use this.\r\n>>> >\r\n>>> >\r\n>>> >    Alan will be back\r\n>>> >> by the middle of next week, I believe.\r\n>>> >>\r\n>>> >\r\n>>> > Ok. Thanks for the information. I won't try then to code around the\r\n>>> > recent changes but instead will wait for importer to get revised.\r\n>>> >\r\n>>> >\r\n>>> >  - gri\r\n>>> >>\r\n>>> >\r\n>>> >\r\n>>> >\r\n>>> >\r\n>>> >  On Fri, Aug 9, 2013 at 6:33 PM,\r\n>>> <mailto:rocky.bernstein@gmail.****com<rocky.bernstein@gmail.**com<rocky.bernstein@gmail.com>\r\n>>> >\r\n>>>\r\n>>> >> >\r\n>>> >>\r\n>>> > wrote:\r\n>>> >\r\n>>> >  > Yes, sure, the ssa interpreter doesn't use that information, but\r\n>>>\r\n>> the\r\n>>\r\n>>> >> > fork of it on github to support debugging does. And I've started\r\n>>> >> > removing the lossy Pos information in that ssa interpreter by\r\n>>>\r\n>> using\r\n>>\r\n>>> >> > position information from the ast.\r\n>>> >> >\r\n>>> >> > (Currently it is as a start and end position but eventually, I'll\r\n>>> >> > probably add the single interval number/index I mentioned)\r\n>>> >> >\r\n>>> >> > I think I recall you suggesting that one could use information\r\n>>>\r\n>> from\r\n>>\r\n>>> >>\r\n>>> > the\r\n>>> >\r\n>>> >> > ast to get the more accurate range information rather than use\r\n>>>\r\n>> the\r\n>>\r\n>>> >>\r\n>>> > lossy\r\n>>> >\r\n>>> >> > canonical form that is in the ssa interpreter. I had said okay,\r\n>>>\r\n>> and\r\n>>\r\n>>> >>\r\n>>> > then\r\n>>> >\r\n>>> >> > you don't need that \"canonical Pos\" at all. But this assumes one\r\n>>>\r\n>> has\r\n>>\r\n>>> >>\r\n>>> > the\r\n>>> >\r\n>>> >> > ast position information.\r\n>>> >> >\r\n>>> >> > Later, Alan had said he thought he would eventually remove that\r\n>>> >> > canonical Pos information, although that hasn't happened yet.\r\n>>> >> >\r\n>>> >> >\r\n>>> >> > On 2013/08/10 00:57:49, gri wrote:\r\n>>> >> >\r\n>>> >> >> No changes are needed I think. ssa didn't use that information\r\n>>>\r\n>> in\r\n>>\r\n>>> >>\r\n>>> > the\r\n>>> >\r\n>>> >> >>\r\n>>> >> > first\r\n>>> >> >\r\n>>> >> >> place.\r\n>>> >> >> - gri\r\n>>> >> >>\r\n>>> >> >\r\n>>> >> >\r\n>>> >> >  On Fri, Aug 9, 2013 at 5:53 PM,\r\n>>> >>\r\n>>>\r\n>>\r\n>> <mailto:rocky.bernstein@gmail.******com<rocky.bernstein@gmail.****com<\r\n>> rocky.bernstein@gmail.**com <rocky.bernstein@gmail.com>>\r\n>>\r\n>>  >> >\r\n>>> >>\r\n>>> >> >> >\r\n>>> >> >>\r\n>>> >> > wrote:\r\n>>> >> >\r\n>>> >> >  > What changes (if any) need to be made in the ssa-interpreter\r\n>>>\r\n>> need\r\n>>\r\n>>> >>\r\n>>> > to\r\n>>> >\r\n>>> >> >> > allow it access to the ast as it was before this change?\r\n>>> >> >> >\r\n>>> >> >> > I see the Scopes field (map[ast.Node]*Scope) added now to\r\n>>> >>\r\n>>> > types.Info\r\n>>> >\r\n>>> >> >>\r\n>>> >> > and\r\n>>> >> >\r\n>>> >> >> > field \"node\" removed from the Scopes type and some sort of\r\n>>>\r\n>> make()\r\n>>\r\n>>> >> >>\r\n>>> >> > needed\r\n>>> >> >\r\n>>> >> >> > after types.Info is created, but ssa uses\r\n>>> >> >> > importer.********CreatePackageFromArgs.\r\n>>> >> >> >\r\n>>> >> >> >\r\n>>> >> >>\r\n>>> >> >\r\n>>> >> >\r\n>>>\r\n>> https://codereview.appspot.********com/12552047/%25253Chttps:/**\r\n>> /**codere**\r\n>>\r\n>>> >> > view.appspot.com/12552047/\r\n>>> >>\r\n>>> >\r\n>>>\r\n>>\r\n>> <http://codereview.appspot.****com/12552047/%3Chttp://coderev**\r\n>> iew.appspot.com/12552047/ <http://codereview.appspot.com/12552047/>>\r\n>>\r\n>>  > >>\r\n>>> >\r\n>>> >  >\r\n>>> >> >> >\r\n>>> >> >>\r\n>>> >> >\r\n>>> >> >\r\n>>> >> >\r\n>>> >> >\r\n>>> >>\r\n>>> >\r\n>>> > https://codereview.appspot.******com/12552047/%253Chttps://**codere**\r\n>>> > view.appspot.com/12552047/\r\n>>>\r\n>> <http://codereview.appspot.**com/12552047/<http://codereview.appspot.com/12552047/>\r\n>> >>\r\n>>\r\n>>> >\r\n>>> >> >\r\n>>> >>\r\n>>> >\r\n>>> >\r\n>>> >\r\n>>> >\r\n>>>\r\n>>\r\n>> https://codereview.appspot.****com/12552047/%3Chttps://codere**\r\n>> view.appspot.com/12552047/ <http://codereview.appspot.com/12552047/>>\r\n>>\r\n>>> >\r\n>>>\r\n>>\r\n>> Thanks! This helps a lot. I' looking forward to a synopsis where things\r\n>> stand next week.\r\n>>\r\n>> https://codereview.appspot.**com/12552047/<https://codereview.appspot.com/12552047/>\r\n>>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-11 04:34:56.414590",
			"approval": false
		},
		{
			"sender": "rocky.bernstein@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Aug 11, 2013 at 12:34 AM, Robert Griesemer <gri@golang.org> wrote:\r\n\r\n> The Info struct can be populated with maps that provide you access to the\r\n> type (and if constant, value) of every expression in the program. There are\r\n> maps that permit mapping of all identifiers to their objects, and thus\r\n> types, and corresponding scopes. I have pointed you at this structure\r\n> before when explaining how to hook up the Scopes map.\r\n>\r\n> So you're certainly not correct: There is very fine-grained information\r\n> available about the entire program.\r\n>\r\n\r\n\r\nI think you misunderstood what I wrote. I didn't write there wasn't\r\nfine-grained information about the entire program from the checker.\r\n\r\nI wrote that access to the checker was at the granularity of an entire\r\nprogram. *Inside, *the types checker uses an ast node and a scope.\r\nast/parser is also able to take an expression string and parse that. But\r\nfrom outside go.tools/types, you can't pass in an ast expression and a\r\nscope hand have the checker work on that.\r\n\r\nAddressing this is looks like largely (if not entirely) a matter of\r\nallowing some of the internal routines be called from the outside, and\r\nallowing the checker data structure be accessible.\r\n\r\n\r\nTogether with the AST it is possible to get all the type and value\r\n> information that is needed to implement a back-end of a compiler. It was\r\n> certainly possible for Alan to implement the ssa interpreter...\r\n>\r\n> The type-checker's primary goal is to provide whole-program type\r\n> information.\r\n>\r\n> There's a whole set of problems that come with implementing a debugger or\r\n> an interactive shell that has very little to do with type-checking, and\r\n> it's not the goal of the type-checker to be a kitchen sink for all possible\r\n> applications.\r\n>\r\n\r\nI think you are expanding this way outside of the scope of what I was\r\nsuggesting: again, allow checking to work on expressions in addition to\r\nwhole programs just as ast/parser currently allows.\r\n\r\nOne can define away the problem by saying that is outside of the purview of\r\nthis package. However look at it from the standpoint of an evaluator\r\napplication that needs use that information. I can only think of 3 options:\r\n\r\n\r\n   1. Use the existing package in a Rube Goldberg way (and this invites\r\n   messing with the Universal scope),\r\n   2. Fork the code so that those routines are exposed\r\n   3. Abandon working on the problem altogether\r\n\r\n\r\n\r\n\r\n>\r\n> - gri\r\n>\r\n>\r\n> On Sat, Aug 10, 2013 at 8:45 PM, Rocky Bernstein <\r\n> rocky.bernstein@gmail.com> wrote:\r\n>\r\n>> I've been looking again to look at the bugs and TODO's as you mentioned\r\n>> previously. As it is right now, it's not all that useful in a debugger or a\r\n>> go shell (short of abusing the Universal scope which we all agree is\r\n>> undesirable), because access to the checker is at a very coarse level --\r\n>> the level of an entire program. Also, the type and value information inside\r\n>> the type checker don't seem to be accessible from the outside. Am I missing\r\n>> something?\r\n>>\r\n>> There is types.Check() which works with an entire program. Underneath\r\n>> that calls  checkExprOrType but that's not exposed from the outside. Nor is\r\n>> the checker object where type and value information about the ast object is\r\n>> saved.\r\n>>\r\n>> Inside a debugger stopped inside a go program, one has a current scope\r\n>> (say a type.Scope object). The programmer enters an expression and that's\r\n>> parsed and evaluated using current values and the scope. Similarly, in an\r\n>> interactive shell one also has a scope. Some interactive shells also have\r\n>> \"workspaces\" which allow one to switch scopes.\r\n>>\r\n>> Does the use cases of go/types encompass these scenarios? Also, if it is\r\n>> the case that the type information is not accessible after a check is done,\r\n>> I would imagine there some duplication inside the ssa-interpreter to handle\r\n>> the same sorts of issues. So again, I must be missing something.\r\n>>\r\n>>\r\n>>\r\n>>\r\n>> On Sat, Aug 10, 2013 at 2:15 AM, <rocky.bernstein@gmail.com> wrote:\r\n>>\r\n>>> On 2013/08/10 04:52:18, gri wrote:\r\n>>>\r\n>>>> go/types is very close to functionally complete. There are known bugs\r\n>>>> (issue tracker, and TODOs in the code). But the code is now\r\n>>>>\r\n>>> type-checking\r\n>>>\r\n>>>> the entire standard-library in all os/arch configurations, and various\r\n>>>> other code.\r\n>>>>\r\n>>>\r\n>>>  What is still a bit in flux is the set of factory functions, exact\r\n>>>>\r\n>>> naming,\r\n>>>\r\n>>>> parameter lists, etc. - they have been added somewhat ad-hoc for\r\n>>>>\r\n>>> clients\r\n>>>\r\n>>>> (ssa) who needed to create their own types.\r\n>>>>\r\n>>>\r\n>>>   From an API perspective, I'd rather not have clients be able to mix\r\n>>>>\r\n>>> their\r\n>>>\r\n>>>> own things in because it's hard to enforce that they are properly\r\n>>>>\r\n>>> set-up\r\n>>>\r\n>>>> with all invariants preserved. For instance, at the moment its\r\n>>>>\r\n>>> possible to\r\n>>>\r\n>>>> muck with the Universe scope which is a no-no. I think this is one of\r\n>>>>\r\n>>> the\r\n>>>\r\n>>>> areas where we can still evolve the API and perhaps find better\r\n>>>>\r\n>>> solutions.\r\n>>>\r\n>>>> This is also an area where I don't want to tie things down too early.\r\n>>>>\r\n>>> But\r\n>>>\r\n>>>> in general, such changes should be not too hard on clients.\r\n>>>>\r\n>>>\r\n>>>  I might send out (or document in the code) the current status and\r\n>>>>\r\n>>> what's\r\n>>>\r\n>>>> missing, sometimes early next week. I will be offline for 4 weeks\r\n>>>>\r\n>>> after\r\n>>>\r\n>>>> that, but Alan will be able to chime in.\r\n>>>>\r\n>>>\r\n>>>  - gri\r\n>>>>\r\n>>>\r\n>>>\r\n>>>  On Fri, Aug 9, 2013 at 9:40 PM, <mailto:rocky.bernstein@gmail.**com<rocky.bernstein@gmail.com>\r\n>>>> >\r\n>>>>\r\n>>> wrote:\r\n>>>\r\n>>>  > On 2013/08/10 04:18:02, gri wrote:\r\n>>>> >\r\n>>>> >> It's trivial to add the information if you need it. The importer\r\n>>>> >>\r\n>>>> > allocates\r\n>>>> >\r\n>>>> >> all maps in one place, and you just add a additional line for a\r\n>>>>\r\n>>> Scopes\r\n>>>\r\n>>>> >>\r\n>>>> > map\r\n>>>> >\r\n>>>> >> and copy the pattern used for the other maps.\r\n>>>> >>\r\n>>>> >\r\n>>>> >  The main difference is that now the information provided is from\r\n>>>>\r\n>>> nodes\r\n>>>\r\n>>>> >>\r\n>>>> > to\r\n>>>> >\r\n>>>> >> scopes, while before the information was from scopes to nodes. But\r\n>>>> >>\r\n>>>> > it's\r\n>>>> >\r\n>>>> >> trivially inverted if there is need for it.\r\n>>>> >>\r\n>>>> >\r\n>>>> >  I'll leave it to Alan to make the respective changes in importer -\r\n>>>>\r\n>>> my\r\n>>>\r\n>>>> >> primary goal at the moment is to get go/types completed.\r\n>>>> >>\r\n>>>> >\r\n>>>> > What is on the roadmap for getting go/types completed?\r\n>>>> >\r\n>>>> > In the last month or so there have been a lot of changes such the\r\n>>>> > addition of scopes, which was much needed for things like writing a\r\n>>>> > debugger. When you had mentioned that this was going to change, I\r\n>>>>\r\n>>> said\r\n>>>\r\n>>>> > I'd wait for the changes before starting to fill out aspects around\r\n>>>> > handling scopes. When you said you thought everything was there\r\n>>>> > complete, although it was just a small matter of programming to add\r\n>>>> > whatever else was needed, I resumed.\r\n>>>> >\r\n>>>> > In general understanding what's contemplated and what is likely to\r\n>>>> > change helps me or anyone else who is seriously trying to use this.\r\n>>>> >\r\n>>>> >\r\n>>>> >    Alan will be back\r\n>>>> >> by the middle of next week, I believe.\r\n>>>> >>\r\n>>>> >\r\n>>>> > Ok. Thanks for the information. I won't try then to code around the\r\n>>>> > recent changes but instead will wait for importer to get revised.\r\n>>>> >\r\n>>>> >\r\n>>>> >  - gri\r\n>>>> >>\r\n>>>> >\r\n>>>> >\r\n>>>> >\r\n>>>> >\r\n>>>> >  On Fri, Aug 9, 2013 at 6:33 PM,\r\n>>>> <mailto:rocky.bernstein@gmail.****com<rocky.bernstein@gmail.**com<rocky.bernstein@gmail.com>\r\n>>>> >\r\n>>>>\r\n>>>> >> >\r\n>>>> >>\r\n>>>> > wrote:\r\n>>>> >\r\n>>>> >  > Yes, sure, the ssa interpreter doesn't use that information, but\r\n>>>>\r\n>>> the\r\n>>>\r\n>>>> >> > fork of it on github to support debugging does. And I've started\r\n>>>> >> > removing the lossy Pos information in that ssa interpreter by\r\n>>>>\r\n>>> using\r\n>>>\r\n>>>> >> > position information from the ast.\r\n>>>> >> >\r\n>>>> >> > (Currently it is as a start and end position but eventually, I'll\r\n>>>> >> > probably add the single interval number/index I mentioned)\r\n>>>> >> >\r\n>>>> >> > I think I recall you suggesting that one could use information\r\n>>>>\r\n>>> from\r\n>>>\r\n>>>> >>\r\n>>>> > the\r\n>>>> >\r\n>>>> >> > ast to get the more accurate range information rather than use\r\n>>>>\r\n>>> the\r\n>>>\r\n>>>> >>\r\n>>>> > lossy\r\n>>>> >\r\n>>>> >> > canonical form that is in the ssa interpreter. I had said okay,\r\n>>>>\r\n>>> and\r\n>>>\r\n>>>> >>\r\n>>>> > then\r\n>>>> >\r\n>>>> >> > you don't need that \"canonical Pos\" at all. But this assumes one\r\n>>>>\r\n>>> has\r\n>>>\r\n>>>> >>\r\n>>>> > the\r\n>>>> >\r\n>>>> >> > ast position information.\r\n>>>> >> >\r\n>>>> >> > Later, Alan had said he thought he would eventually remove that\r\n>>>> >> > canonical Pos information, although that hasn't happened yet.\r\n>>>> >> >\r\n>>>> >> >\r\n>>>> >> > On 2013/08/10 00:57:49, gri wrote:\r\n>>>> >> >\r\n>>>> >> >> No changes are needed I think. ssa didn't use that information\r\n>>>>\r\n>>> in\r\n>>>\r\n>>>> >>\r\n>>>> > the\r\n>>>> >\r\n>>>> >> >>\r\n>>>> >> > first\r\n>>>> >> >\r\n>>>> >> >> place.\r\n>>>> >> >> - gri\r\n>>>> >> >>\r\n>>>> >> >\r\n>>>> >> >\r\n>>>> >> >  On Fri, Aug 9, 2013 at 5:53 PM,\r\n>>>> >>\r\n>>>>\r\n>>>\r\n>>> <mailto:rocky.bernstein@gmail.******com<rocky.bernstein@gmail.****com<\r\n>>> rocky.bernstein@gmail.**com <rocky.bernstein@gmail.com>>\r\n>>>\r\n>>>  >> >\r\n>>>> >>\r\n>>>> >> >> >\r\n>>>> >> >>\r\n>>>> >> > wrote:\r\n>>>> >> >\r\n>>>> >> >  > What changes (if any) need to be made in the ssa-interpreter\r\n>>>>\r\n>>> need\r\n>>>\r\n>>>> >>\r\n>>>> > to\r\n>>>> >\r\n>>>> >> >> > allow it access to the ast as it was before this change?\r\n>>>> >> >> >\r\n>>>> >> >> > I see the Scopes field (map[ast.Node]*Scope) added now to\r\n>>>> >>\r\n>>>> > types.Info\r\n>>>> >\r\n>>>> >> >>\r\n>>>> >> > and\r\n>>>> >> >\r\n>>>> >> >> > field \"node\" removed from the Scopes type and some sort of\r\n>>>>\r\n>>> make()\r\n>>>\r\n>>>> >> >>\r\n>>>> >> > needed\r\n>>>> >> >\r\n>>>> >> >> > after types.Info is created, but ssa uses\r\n>>>> >> >> > importer.********CreatePackageFromArgs.\r\n>>>> >> >> >\r\n>>>> >> >> >\r\n>>>> >> >>\r\n>>>> >> >\r\n>>>> >> >\r\n>>>>\r\n>>> https://codereview.appspot.********com/12552047/%25253Chttps:/**\r\n>>> /**codere**\r\n>>>\r\n>>>> >> > view.appspot.com/12552047/\r\n>>>> >>\r\n>>>> >\r\n>>>>\r\n>>>\r\n>>> <http://codereview.appspot.****com/12552047/%3Chttp://coderev**\r\n>>> iew.appspot.com/12552047/ <http://codereview.appspot.com/12552047/>>\r\n>>>\r\n>>>  > >>\r\n>>>> >\r\n>>>> >  >\r\n>>>> >> >> >\r\n>>>> >> >>\r\n>>>> >> >\r\n>>>> >> >\r\n>>>> >> >\r\n>>>> >> >\r\n>>>> >>\r\n>>>> >\r\n>>>> > https://codereview.appspot.******com/12552047/%253Chttps://**codere**\r\n>>>> > view.appspot.com/12552047/\r\n>>>>\r\n>>> <http://codereview.appspot.**com/12552047/<http://codereview.appspot.com/12552047/>\r\n>>> >>\r\n>>>\r\n>>>> >\r\n>>>> >> >\r\n>>>> >>\r\n>>>> >\r\n>>>> >\r\n>>>> >\r\n>>>> >\r\n>>>>\r\n>>>\r\n>>> https://codereview.appspot.****com/12552047/%3Chttps://codere**\r\n>>> view.appspot.com/12552047/ <http://codereview.appspot.com/12552047/>>\r\n>>>\r\n>>>> >\r\n>>>>\r\n>>>\r\n>>> Thanks! This helps a lot. I' looking forward to a synopsis where things\r\n>>> stand next week.\r\n>>>\r\n>>> https://codereview.appspot.**com/12552047/<https://codereview.appspot.com/12552047/>\r\n>>>\r\n>>\r\n>>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-11 17:17:39.024710",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "go.types.Eval does exactly what you are asking for and has been there for a\r\nwhile now.\r\n\r\n- gri\r\n\r\n\r\nOn Sun, Aug 11, 2013 at 10:17 AM, Rocky Bernstein <rocky.bernstein@gmail.com\r\n> wrote:\r\n\r\n> On Sun, Aug 11, 2013 at 12:34 AM, Robert Griesemer <gri@golang.org> wrote:\r\n>\r\n>> The Info struct can be populated with maps that provide you access to the\r\n>> type (and if constant, value) of every expression in the program. There are\r\n>> maps that permit mapping of all identifiers to their objects, and thus\r\n>> types, and corresponding scopes. I have pointed you at this structure\r\n>> before when explaining how to hook up the Scopes map.\r\n>>\r\n>> So you're certainly not correct: There is very fine-grained information\r\n>> available about the entire program.\r\n>>\r\n>\r\n>\r\n> I think you misunderstood what I wrote. I didn't write there wasn't\r\n> fine-grained information about the entire program from the checker.\r\n>\r\n> I wrote that access to the checker was at the granularity of an entire\r\n> program. *Inside, *the types checker uses an ast node and a scope.\r\n> ast/parser is also able to take an expression string and parse that. But\r\n> from outside go.tools/types, you can't pass in an ast expression and a\r\n> scope hand have the checker work on that.\r\n>\r\n> Addressing this is looks like largely (if not entirely) a matter of\r\n> allowing some of the internal routines be called from the outside, and\r\n> allowing the checker data structure be accessible.\r\n>\r\n>\r\n> Together with the AST it is possible to get all the type and value\r\n>> information that is needed to implement a back-end of a compiler. It was\r\n>> certainly possible for Alan to implement the ssa interpreter...\r\n>>\r\n>> The type-checker's primary goal is to provide whole-program type\r\n>> information.\r\n>>\r\n>> There's a whole set of problems that come with implementing a debugger or\r\n>> an interactive shell that has very little to do with type-checking, and\r\n>> it's not the goal of the type-checker to be a kitchen sink for all possible\r\n>> applications.\r\n>>\r\n>\r\n> I think you are expanding this way outside of the scope of what I was\r\n> suggesting: again, allow checking to work on expressions in addition to\r\n> whole programs just as ast/parser currently allows.\r\n>\r\n> One can define away the problem by saying that is outside of the purview\r\n> of this package. However look at it from the standpoint of an evaluator\r\n> application that needs use that information. I can only think of 3 options:\r\n>\r\n>\r\n>    1. Use the existing package in a Rube Goldberg way (and this invites\r\n>    messing with the Universal scope),\r\n>    2. Fork the code so that those routines are exposed\r\n>    3. Abandon working on the problem altogether\r\n>\r\n>\r\n>\r\n>\r\n>>\r\n>> - gri\r\n>>\r\n>>\r\n>> On Sat, Aug 10, 2013 at 8:45 PM, Rocky Bernstein <\r\n>> rocky.bernstein@gmail.com> wrote:\r\n>>\r\n>>> I've been looking again to look at the bugs and TODO's as you mentioned\r\n>>> previously. As it is right now, it's not all that useful in a debugger or a\r\n>>> go shell (short of abusing the Universal scope which we all agree is\r\n>>> undesirable), because access to the checker is at a very coarse level --\r\n>>> the level of an entire program. Also, the type and value information inside\r\n>>> the type checker don't seem to be accessible from the outside. Am I missing\r\n>>> something?\r\n>>>\r\n>>> There is types.Check() which works with an entire program. Underneath\r\n>>> that calls  checkExprOrType but that's not exposed from the outside. Nor is\r\n>>> the checker object where type and value information about the ast object is\r\n>>> saved.\r\n>>>\r\n>>> Inside a debugger stopped inside a go program, one has a current scope\r\n>>> (say a type.Scope object). The programmer enters an expression and that's\r\n>>> parsed and evaluated using current values and the scope. Similarly, in an\r\n>>> interactive shell one also has a scope. Some interactive shells also have\r\n>>> \"workspaces\" which allow one to switch scopes.\r\n>>>\r\n>>> Does the use cases of go/types encompass these scenarios? Also, if it is\r\n>>> the case that the type information is not accessible after a check is done,\r\n>>> I would imagine there some duplication inside the ssa-interpreter to handle\r\n>>> the same sorts of issues. So again, I must be missing something.\r\n>>>\r\n>>>\r\n>>>\r\n>>>\r\n>>> On Sat, Aug 10, 2013 at 2:15 AM, <rocky.bernstein@gmail.com> wrote:\r\n>>>\r\n>>>> On 2013/08/10 04:52:18, gri wrote:\r\n>>>>\r\n>>>>> go/types is very close to functionally complete. There are known bugs\r\n>>>>> (issue tracker, and TODOs in the code). But the code is now\r\n>>>>>\r\n>>>> type-checking\r\n>>>>\r\n>>>>> the entire standard-library in all os/arch configurations, and various\r\n>>>>> other code.\r\n>>>>>\r\n>>>>\r\n>>>>  What is still a bit in flux is the set of factory functions, exact\r\n>>>>>\r\n>>>> naming,\r\n>>>>\r\n>>>>> parameter lists, etc. - they have been added somewhat ad-hoc for\r\n>>>>>\r\n>>>> clients\r\n>>>>\r\n>>>>> (ssa) who needed to create their own types.\r\n>>>>>\r\n>>>>\r\n>>>>   From an API perspective, I'd rather not have clients be able to mix\r\n>>>>>\r\n>>>> their\r\n>>>>\r\n>>>>> own things in because it's hard to enforce that they are properly\r\n>>>>>\r\n>>>> set-up\r\n>>>>\r\n>>>>> with all invariants preserved. For instance, at the moment its\r\n>>>>>\r\n>>>> possible to\r\n>>>>\r\n>>>>> muck with the Universe scope which is a no-no. I think this is one of\r\n>>>>>\r\n>>>> the\r\n>>>>\r\n>>>>> areas where we can still evolve the API and perhaps find better\r\n>>>>>\r\n>>>> solutions.\r\n>>>>\r\n>>>>> This is also an area where I don't want to tie things down too early.\r\n>>>>>\r\n>>>> But\r\n>>>>\r\n>>>>> in general, such changes should be not too hard on clients.\r\n>>>>>\r\n>>>>\r\n>>>>  I might send out (or document in the code) the current status and\r\n>>>>>\r\n>>>> what's\r\n>>>>\r\n>>>>> missing, sometimes early next week. I will be offline for 4 weeks\r\n>>>>>\r\n>>>> after\r\n>>>>\r\n>>>>> that, but Alan will be able to chime in.\r\n>>>>>\r\n>>>>\r\n>>>>  - gri\r\n>>>>>\r\n>>>>\r\n>>>>\r\n>>>>  On Fri, Aug 9, 2013 at 9:40 PM, <mailto:rocky.bernstein@gmail.**com<rocky.bernstein@gmail.com>\r\n>>>>> >\r\n>>>>>\r\n>>>> wrote:\r\n>>>>\r\n>>>>  > On 2013/08/10 04:18:02, gri wrote:\r\n>>>>> >\r\n>>>>> >> It's trivial to add the information if you need it. The importer\r\n>>>>> >>\r\n>>>>> > allocates\r\n>>>>> >\r\n>>>>> >> all maps in one place, and you just add a additional line for a\r\n>>>>>\r\n>>>> Scopes\r\n>>>>\r\n>>>>> >>\r\n>>>>> > map\r\n>>>>> >\r\n>>>>> >> and copy the pattern used for the other maps.\r\n>>>>> >>\r\n>>>>> >\r\n>>>>> >  The main difference is that now the information provided is from\r\n>>>>>\r\n>>>> nodes\r\n>>>>\r\n>>>>> >>\r\n>>>>> > to\r\n>>>>> >\r\n>>>>> >> scopes, while before the information was from scopes to nodes. But\r\n>>>>> >>\r\n>>>>> > it's\r\n>>>>> >\r\n>>>>> >> trivially inverted if there is need for it.\r\n>>>>> >>\r\n>>>>> >\r\n>>>>> >  I'll leave it to Alan to make the respective changes in importer -\r\n>>>>>\r\n>>>> my\r\n>>>>\r\n>>>>> >> primary goal at the moment is to get go/types completed.\r\n>>>>> >>\r\n>>>>> >\r\n>>>>> > What is on the roadmap for getting go/types completed?\r\n>>>>> >\r\n>>>>> > In the last month or so there have been a lot of changes such the\r\n>>>>> > addition of scopes, which was much needed for things like writing a\r\n>>>>> > debugger. When you had mentioned that this was going to change, I\r\n>>>>>\r\n>>>> said\r\n>>>>\r\n>>>>> > I'd wait for the changes before starting to fill out aspects around\r\n>>>>> > handling scopes. When you said you thought everything was there\r\n>>>>> > complete, although it was just a small matter of programming to add\r\n>>>>> > whatever else was needed, I resumed.\r\n>>>>> >\r\n>>>>> > In general understanding what's contemplated and what is likely to\r\n>>>>> > change helps me or anyone else who is seriously trying to use this.\r\n>>>>> >\r\n>>>>> >\r\n>>>>> >    Alan will be back\r\n>>>>> >> by the middle of next week, I believe.\r\n>>>>> >>\r\n>>>>> >\r\n>>>>> > Ok. Thanks for the information. I won't try then to code around the\r\n>>>>> > recent changes but instead will wait for importer to get revised.\r\n>>>>> >\r\n>>>>> >\r\n>>>>> >  - gri\r\n>>>>> >>\r\n>>>>> >\r\n>>>>> >\r\n>>>>> >\r\n>>>>> >\r\n>>>>> >  On Fri, Aug 9, 2013 at 6:33 PM,\r\n>>>>> <mailto:rocky.bernstein@gmail.****com<rocky.bernstein@gmail.**com<rocky.bernstein@gmail.com>\r\n>>>>> >\r\n>>>>>\r\n>>>>> >> >\r\n>>>>> >>\r\n>>>>> > wrote:\r\n>>>>> >\r\n>>>>> >  > Yes, sure, the ssa interpreter doesn't use that information, but\r\n>>>>>\r\n>>>> the\r\n>>>>\r\n>>>>> >> > fork of it on github to support debugging does. And I've started\r\n>>>>> >> > removing the lossy Pos information in that ssa interpreter by\r\n>>>>>\r\n>>>> using\r\n>>>>\r\n>>>>> >> > position information from the ast.\r\n>>>>> >> >\r\n>>>>> >> > (Currently it is as a start and end position but eventually, I'll\r\n>>>>> >> > probably add the single interval number/index I mentioned)\r\n>>>>> >> >\r\n>>>>> >> > I think I recall you suggesting that one could use information\r\n>>>>>\r\n>>>> from\r\n>>>>\r\n>>>>> >>\r\n>>>>> > the\r\n>>>>> >\r\n>>>>> >> > ast to get the more accurate range information rather than use\r\n>>>>>\r\n>>>> the\r\n>>>>\r\n>>>>> >>\r\n>>>>> > lossy\r\n>>>>> >\r\n>>>>> >> > canonical form that is in the ssa interpreter. I had said okay,\r\n>>>>>\r\n>>>> and\r\n>>>>\r\n>>>>> >>\r\n>>>>> > then\r\n>>>>> >\r\n>>>>> >> > you don't need that \"canonical Pos\" at all. But this assumes one\r\n>>>>>\r\n>>>> has\r\n>>>>\r\n>>>>> >>\r\n>>>>> > the\r\n>>>>> >\r\n>>>>> >> > ast position information.\r\n>>>>> >> >\r\n>>>>> >> > Later, Alan had said he thought he would eventually remove that\r\n>>>>> >> > canonical Pos information, although that hasn't happened yet.\r\n>>>>> >> >\r\n>>>>> >> >\r\n>>>>> >> > On 2013/08/10 00:57:49, gri wrote:\r\n>>>>> >> >\r\n>>>>> >> >> No changes are needed I think. ssa didn't use that information\r\n>>>>>\r\n>>>> in\r\n>>>>\r\n>>>>> >>\r\n>>>>> > the\r\n>>>>> >\r\n>>>>> >> >>\r\n>>>>> >> > first\r\n>>>>> >> >\r\n>>>>> >> >> place.\r\n>>>>> >> >> - gri\r\n>>>>> >> >>\r\n>>>>> >> >\r\n>>>>> >> >\r\n>>>>> >> >  On Fri, Aug 9, 2013 at 5:53 PM,\r\n>>>>> >>\r\n>>>>>\r\n>>>>\r\n>>>> <mailto:rocky.bernstein@gmail.******com<rocky.bernstein@gmail.****com<\r\n>>>> rocky.bernstein@gmail.**com <rocky.bernstein@gmail.com>>\r\n>>>>\r\n>>>>  >> >\r\n>>>>> >>\r\n>>>>> >> >> >\r\n>>>>> >> >>\r\n>>>>> >> > wrote:\r\n>>>>> >> >\r\n>>>>> >> >  > What changes (if any) need to be made in the ssa-interpreter\r\n>>>>>\r\n>>>> need\r\n>>>>\r\n>>>>> >>\r\n>>>>> > to\r\n>>>>> >\r\n>>>>> >> >> > allow it access to the ast as it was before this change?\r\n>>>>> >> >> >\r\n>>>>> >> >> > I see the Scopes field (map[ast.Node]*Scope) added now to\r\n>>>>> >>\r\n>>>>> > types.Info\r\n>>>>> >\r\n>>>>> >> >>\r\n>>>>> >> > and\r\n>>>>> >> >\r\n>>>>> >> >> > field \"node\" removed from the Scopes type and some sort of\r\n>>>>>\r\n>>>> make()\r\n>>>>\r\n>>>>> >> >>\r\n>>>>> >> > needed\r\n>>>>> >> >\r\n>>>>> >> >> > after types.Info is created, but ssa uses\r\n>>>>> >> >> > importer.********CreatePackageFromArgs.\r\n>>>>> >> >> >\r\n>>>>> >> >> >\r\n>>>>> >> >>\r\n>>>>> >> >\r\n>>>>> >> >\r\n>>>>>\r\n>>>> https://codereview.appspot.********com/12552047/%25253Chttps:/**\r\n>>>> /**codere**\r\n>>>>\r\n>>>>> >> > view.appspot.com/12552047/\r\n>>>>> >>\r\n>>>>> >\r\n>>>>>\r\n>>>>\r\n>>>> <http://codereview.appspot.****com/12552047/%3Chttp://coderev**\r\n>>>> iew.appspot.com/12552047/ <http://codereview.appspot.com/12552047/>>\r\n>>>>\r\n>>>>  > >>\r\n>>>>> >\r\n>>>>> >  >\r\n>>>>> >> >> >\r\n>>>>> >> >>\r\n>>>>> >> >\r\n>>>>> >> >\r\n>>>>> >> >\r\n>>>>> >> >\r\n>>>>> >>\r\n>>>>> >\r\n>>>>> > https://codereview.appspot.******com/12552047/%253Chttps://**\r\n>>>>> codere**\r\n>>>>> > view.appspot.com/12552047/\r\n>>>>>\r\n>>>> <http://codereview.appspot.**com/12552047/<http://codereview.appspot.com/12552047/>\r\n>>>> >>\r\n>>>>\r\n>>>>> >\r\n>>>>> >> >\r\n>>>>> >>\r\n>>>>> >\r\n>>>>> >\r\n>>>>> >\r\n>>>>> >\r\n>>>>>\r\n>>>>\r\n>>>> https://codereview.appspot.****com/12552047/%3Chttps://codere**\r\n>>>> view.appspot.com/12552047/ <http://codereview.appspot.com/12552047/>>\r\n>>>>\r\n>>>>> >\r\n>>>>>\r\n>>>>\r\n>>>> Thanks! This helps a lot. I' looking forward to a synopsis where things\r\n>>>> stand next week.\r\n>>>>\r\n>>>> https://codereview.appspot.**com/12552047/<https://codereview.appspot.com/12552047/>\r\n>>>>\r\n>>>\r\n>>>\r\n>>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-13 21:20:33.209010",
			"approval": false
		},
		{
			"sender": "rocky.bernstein@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I had previously tried go.types.Eval, but it has a number of problems.\r\n\r\nThe most serious one is how it gets the values for identifiers. Currently\r\nthose values have to be recorded off of its kind of scope object. To\r\npopulate or update that that every time a program stops is a bit\r\nprohibitive.  Recall that the ssa.interp doesn't need or use this kind of\r\nscope object in its normal operations. To be fair that;s because this kind\r\nof scope was fairly recently created. Instead, it has its own notion, or\r\ncurrent environment of values. In fact, the ssa interpreter's notion of a\r\n\"value\" I think is is slightly different, although it might be fairly easy\r\nto convert it from interp.Value to exact.Value and and back.\r\n\r\nA more friendlier design would allow one to give a call back to use to get\r\nthe value of an identifier inside the appropriate routine under types.Eval\r\n-  check.ident() ?\r\n\r\nA second problem with type with types.Eval is how it handles errors. The\r\nobject of type Config, set in types.EvalNode(), isn't exposed to the\r\noutside, so I don't see how to control configuration things which includes\r\nhow to handle errors.\r\n\r\nThe last problem I have had is having the checker evaluate\r\n\r\ntestTypes[0].num given a \"scope\" created that contains this:\r\n\r\ntype testEntry struct {\r\nsrc string\r\n    num int\r\n}\r\nvar testTypes = []testEntry{ {\"a\", 1}, {\"b\", 2}}\r\n\r\nBut here, I'm using the version of types before the change to move around\r\nscope. I haven't been able to test this on the current tip, for reasons I\r\ndon't understand.\r\n\r\nLeaving aside the above which might or might not be a simple bug, if the\r\nother main issues around types.Eval() were addressed, absolutely\r\ntypes.Eval() would be great to use.\r\n\r\nOn Tue, Aug 13, 2013 at 5:20 PM, Robert Griesemer <gri@golang.org> wrote:\r\n\r\n> go.types.Eval does exactly what you are asking for and has been there for\r\n> a while now.\r\n>\r\n> - gri\r\n>\r\n>\r\n> On Sun, Aug 11, 2013 at 10:17 AM, Rocky Bernstein <\r\n> rocky.bernstein@gmail.com> wrote:\r\n>\r\n>> On Sun, Aug 11, 2013 at 12:34 AM, Robert Griesemer <gri@golang.org>wrote:\r\n>>\r\n>>> The Info struct can be populated with maps that provide you access to\r\n>>> the type (and if constant, value) of every expression in the program. There\r\n>>> are maps that permit mapping of all identifiers to their objects, and thus\r\n>>> types, and corresponding scopes. I have pointed you at this structure\r\n>>> before when explaining how to hook up the Scopes map.\r\n>>>\r\n>>> So you're certainly not correct: There is very fine-grained information\r\n>>> available about the entire program.\r\n>>>\r\n>>\r\n>>\r\n>> I think you misunderstood what I wrote. I didn't write there wasn't\r\n>> fine-grained information about the entire program from the checker.\r\n>>\r\n>> I wrote that access to the checker was at the granularity of an entire\r\n>> program. *Inside, *the types checker uses an ast node and a scope.\r\n>> ast/parser is also able to take an expression string and parse that. But\r\n>> from outside go.tools/types, you can't pass in an ast expression and a\r\n>> scope hand have the checker work on that.\r\n>>\r\n>> Addressing this is looks like largely (if not entirely) a matter of\r\n>> allowing some of the internal routines be called from the outside, and\r\n>> allowing the checker data structure be accessible.\r\n>>\r\n>>\r\n>> Together with the AST it is possible to get all the type and value\r\n>>> information that is needed to implement a back-end of a compiler. It was\r\n>>> certainly possible for Alan to implement the ssa interpreter...\r\n>>>\r\n>>> The type-checker's primary goal is to provide whole-program type\r\n>>> information.\r\n>>>\r\n>>> There's a whole set of problems that come with implementing a debugger\r\n>>> or an interactive shell that has very little to do with type-checking, and\r\n>>> it's not the goal of the type-checker to be a kitchen sink for all possible\r\n>>> applications.\r\n>>>\r\n>>\r\n>> I think you are expanding this way outside of the scope of what I was\r\n>> suggesting: again, allow checking to work on expressions in addition to\r\n>> whole programs just as ast/parser currently allows.\r\n>>\r\n>> One can define away the problem by saying that is outside of the purview\r\n>> of this package. However look at it from the standpoint of an evaluator\r\n>> application that needs use that information. I can only think of 3 options:\r\n>>\r\n>>\r\n>>    1. Use the existing package in a Rube Goldberg way (and this invites\r\n>>    messing with the Universal scope),\r\n>>    2. Fork the code so that those routines are exposed\r\n>>    3. Abandon working on the problem altogether\r\n>>\r\n>>\r\n>>\r\n>>\r\n>>>\r\n>>> - gri\r\n>>>\r\n>>>\r\n>>> On Sat, Aug 10, 2013 at 8:45 PM, Rocky Bernstein <\r\n>>> rocky.bernstein@gmail.com> wrote:\r\n>>>\r\n>>>> I've been looking again to look at the bugs and TODO's as you mentioned\r\n>>>> previously. As it is right now, it's not all that useful in a debugger or a\r\n>>>> go shell (short of abusing the Universal scope which we all agree is\r\n>>>> undesirable), because access to the checker is at a very coarse level --\r\n>>>> the level of an entire program. Also, the type and value information inside\r\n>>>> the type checker don't seem to be accessible from the outside. Am I missing\r\n>>>> something?\r\n>>>>\r\n>>>> There is types.Check() which works with an entire program. Underneath\r\n>>>> that calls  checkExprOrType but that's not exposed from the outside. Nor is\r\n>>>> the checker object where type and value information about the ast object is\r\n>>>> saved.\r\n>>>>\r\n>>>> Inside a debugger stopped inside a go program, one has a current scope\r\n>>>> (say a type.Scope object). The programmer enters an expression and that's\r\n>>>> parsed and evaluated using current values and the scope. Similarly, in an\r\n>>>> interactive shell one also has a scope. Some interactive shells also have\r\n>>>> \"workspaces\" which allow one to switch scopes.\r\n>>>>\r\n>>>> Does the use cases of go/types encompass these scenarios? Also, if it\r\n>>>> is the case that the type information is not accessible after a check is\r\n>>>> done, I would imagine there some duplication inside the ssa-interpreter to\r\n>>>> handle the same sorts of issues. So again, I must be missing something.\r\n>>>>\r\n>>>>\r\n>>>>\r\n>>>>\r\n>>>> On Sat, Aug 10, 2013 at 2:15 AM, <rocky.bernstein@gmail.com> wrote:\r\n>>>>\r\n>>>>> On 2013/08/10 04:52:18, gri wrote:\r\n>>>>>\r\n>>>>>> go/types is very close to functionally complete. There are known bugs\r\n>>>>>> (issue tracker, and TODOs in the code). But the code is now\r\n>>>>>>\r\n>>>>> type-checking\r\n>>>>>\r\n>>>>>> the entire standard-library in all os/arch configurations, and various\r\n>>>>>> other code.\r\n>>>>>>\r\n>>>>>\r\n>>>>>  What is still a bit in flux is the set of factory functions, exact\r\n>>>>>>\r\n>>>>> naming,\r\n>>>>>\r\n>>>>>> parameter lists, etc. - they have been added somewhat ad-hoc for\r\n>>>>>>\r\n>>>>> clients\r\n>>>>>\r\n>>>>>> (ssa) who needed to create their own types.\r\n>>>>>>\r\n>>>>>\r\n>>>>>   From an API perspective, I'd rather not have clients be able to mix\r\n>>>>>>\r\n>>>>> their\r\n>>>>>\r\n>>>>>> own things in because it's hard to enforce that they are properly\r\n>>>>>>\r\n>>>>> set-up\r\n>>>>>\r\n>>>>>> with all invariants preserved. For instance, at the moment its\r\n>>>>>>\r\n>>>>> possible to\r\n>>>>>\r\n>>>>>> muck with the Universe scope which is a no-no. I think this is one of\r\n>>>>>>\r\n>>>>> the\r\n>>>>>\r\n>>>>>> areas where we can still evolve the API and perhaps find better\r\n>>>>>>\r\n>>>>> solutions.\r\n>>>>>\r\n>>>>>> This is also an area where I don't want to tie things down too early.\r\n>>>>>>\r\n>>>>> But\r\n>>>>>\r\n>>>>>> in general, such changes should be not too hard on clients.\r\n>>>>>>\r\n>>>>>\r\n>>>>>  I might send out (or document in the code) the current status and\r\n>>>>>>\r\n>>>>> what's\r\n>>>>>\r\n>>>>>> missing, sometimes early next week. I will be offline for 4 weeks\r\n>>>>>>\r\n>>>>> after\r\n>>>>>\r\n>>>>>> that, but Alan will be able to chime in.\r\n>>>>>>\r\n>>>>>\r\n>>>>>  - gri\r\n>>>>>>\r\n>>>>>\r\n>>>>>\r\n>>>>>  On Fri, Aug 9, 2013 at 9:40 PM, <mailto:rocky.bernstein@gmail.**com<rocky.bernstein@gmail.com>\r\n>>>>>> >\r\n>>>>>>\r\n>>>>> wrote:\r\n>>>>>\r\n>>>>>  > On 2013/08/10 04:18:02, gri wrote:\r\n>>>>>> >\r\n>>>>>> >> It's trivial to add the information if you need it. The importer\r\n>>>>>> >>\r\n>>>>>> > allocates\r\n>>>>>> >\r\n>>>>>> >> all maps in one place, and you just add a additional line for a\r\n>>>>>>\r\n>>>>> Scopes\r\n>>>>>\r\n>>>>>> >>\r\n>>>>>> > map\r\n>>>>>> >\r\n>>>>>> >> and copy the pattern used for the other maps.\r\n>>>>>> >>\r\n>>>>>> >\r\n>>>>>> >  The main difference is that now the information provided is from\r\n>>>>>>\r\n>>>>> nodes\r\n>>>>>\r\n>>>>>> >>\r\n>>>>>> > to\r\n>>>>>> >\r\n>>>>>> >> scopes, while before the information was from scopes to nodes. But\r\n>>>>>> >>\r\n>>>>>> > it's\r\n>>>>>> >\r\n>>>>>> >> trivially inverted if there is need for it.\r\n>>>>>> >>\r\n>>>>>> >\r\n>>>>>> >  I'll leave it to Alan to make the respective changes in importer -\r\n>>>>>>\r\n>>>>> my\r\n>>>>>\r\n>>>>>> >> primary goal at the moment is to get go/types completed.\r\n>>>>>> >>\r\n>>>>>> >\r\n>>>>>> > What is on the roadmap for getting go/types completed?\r\n>>>>>> >\r\n>>>>>> > In the last month or so there have been a lot of changes such the\r\n>>>>>> > addition of scopes, which was much needed for things like writing a\r\n>>>>>> > debugger. When you had mentioned that this was going to change, I\r\n>>>>>>\r\n>>>>> said\r\n>>>>>\r\n>>>>>> > I'd wait for the changes before starting to fill out aspects around\r\n>>>>>> > handling scopes. When you said you thought everything was there\r\n>>>>>> > complete, although it was just a small matter of programming to add\r\n>>>>>> > whatever else was needed, I resumed.\r\n>>>>>> >\r\n>>>>>> > In general understanding what's contemplated and what is likely to\r\n>>>>>> > change helps me or anyone else who is seriously trying to use this.\r\n>>>>>> >\r\n>>>>>> >\r\n>>>>>> >    Alan will be back\r\n>>>>>> >> by the middle of next week, I believe.\r\n>>>>>> >>\r\n>>>>>> >\r\n>>>>>> > Ok. Thanks for the information. I won't try then to code around the\r\n>>>>>> > recent changes but instead will wait for importer to get revised.\r\n>>>>>> >\r\n>>>>>> >\r\n>>>>>> >  - gri\r\n>>>>>> >>\r\n>>>>>> >\r\n>>>>>> >\r\n>>>>>> >\r\n>>>>>> >\r\n>>>>>> >  On Fri, Aug 9, 2013 at 6:33 PM,\r\n>>>>>> <mailto:rocky.bernstein@gmail.****com<rocky.bernstein@gmail.**com<rocky.bernstein@gmail.com>\r\n>>>>>> >\r\n>>>>>>\r\n>>>>>> >> >\r\n>>>>>> >>\r\n>>>>>> > wrote:\r\n>>>>>> >\r\n>>>>>> >  > Yes, sure, the ssa interpreter doesn't use that information, but\r\n>>>>>>\r\n>>>>> the\r\n>>>>>\r\n>>>>>> >> > fork of it on github to support debugging does. And I've started\r\n>>>>>> >> > removing the lossy Pos information in that ssa interpreter by\r\n>>>>>>\r\n>>>>> using\r\n>>>>>\r\n>>>>>> >> > position information from the ast.\r\n>>>>>> >> >\r\n>>>>>> >> > (Currently it is as a start and end position but eventually, I'll\r\n>>>>>> >> > probably add the single interval number/index I mentioned)\r\n>>>>>> >> >\r\n>>>>>> >> > I think I recall you suggesting that one could use information\r\n>>>>>>\r\n>>>>> from\r\n>>>>>\r\n>>>>>> >>\r\n>>>>>> > the\r\n>>>>>> >\r\n>>>>>> >> > ast to get the more accurate range information rather than use\r\n>>>>>>\r\n>>>>> the\r\n>>>>>\r\n>>>>>> >>\r\n>>>>>> > lossy\r\n>>>>>> >\r\n>>>>>> >> > canonical form that is in the ssa interpreter. I had said okay,\r\n>>>>>>\r\n>>>>> and\r\n>>>>>\r\n>>>>>> >>\r\n>>>>>> > then\r\n>>>>>> >\r\n>>>>>> >> > you don't need that \"canonical Pos\" at all. But this assumes one\r\n>>>>>>\r\n>>>>> has\r\n>>>>>\r\n>>>>>> >>\r\n>>>>>> > the\r\n>>>>>> >\r\n>>>>>> >> > ast position information.\r\n>>>>>> >> >\r\n>>>>>> >> > Later, Alan had said he thought he would eventually remove that\r\n>>>>>> >> > canonical Pos information, although that hasn't happened yet.\r\n>>>>>> >> >\r\n>>>>>> >> >\r\n>>>>>> >> > On 2013/08/10 00:57:49, gri wrote:\r\n>>>>>> >> >\r\n>>>>>> >> >> No changes are needed I think. ssa didn't use that information\r\n>>>>>>\r\n>>>>> in\r\n>>>>>\r\n>>>>>> >>\r\n>>>>>> > the\r\n>>>>>> >\r\n>>>>>> >> >>\r\n>>>>>> >> > first\r\n>>>>>> >> >\r\n>>>>>> >> >> place.\r\n>>>>>> >> >> - gri\r\n>>>>>> >> >>\r\n>>>>>> >> >\r\n>>>>>> >> >\r\n>>>>>> >> >  On Fri, Aug 9, 2013 at 5:53 PM,\r\n>>>>>> >>\r\n>>>>>>\r\n>>>>>\r\n>>>>> <mailto:rocky.bernstein@gmail.******com<rocky.bernstein@gmail.****com<\r\n>>>>> rocky.bernstein@gmail.**com <rocky.bernstein@gmail.com>>\r\n>>>>>\r\n>>>>>  >> >\r\n>>>>>> >>\r\n>>>>>> >> >> >\r\n>>>>>> >> >>\r\n>>>>>> >> > wrote:\r\n>>>>>> >> >\r\n>>>>>> >> >  > What changes (if any) need to be made in the ssa-interpreter\r\n>>>>>>\r\n>>>>> need\r\n>>>>>\r\n>>>>>> >>\r\n>>>>>> > to\r\n>>>>>> >\r\n>>>>>> >> >> > allow it access to the ast as it was before this change?\r\n>>>>>> >> >> >\r\n>>>>>> >> >> > I see the Scopes field (map[ast.Node]*Scope) added now to\r\n>>>>>> >>\r\n>>>>>> > types.Info\r\n>>>>>> >\r\n>>>>>> >> >>\r\n>>>>>> >> > and\r\n>>>>>> >> >\r\n>>>>>> >> >> > field \"node\" removed from the Scopes type and some sort of\r\n>>>>>>\r\n>>>>> make()\r\n>>>>>\r\n>>>>>> >> >>\r\n>>>>>> >> > needed\r\n>>>>>> >> >\r\n>>>>>> >> >> > after types.Info is created, but ssa uses\r\n>>>>>> >> >> > importer.********CreatePackageFromArgs.\r\n>>>>>> >> >> >\r\n>>>>>> >> >> >\r\n>>>>>> >> >>\r\n>>>>>> >> >\r\n>>>>>> >> >\r\n>>>>>>\r\n>>>>> https://codereview.appspot.********com/12552047/%25253Chttps:/**\r\n>>>>> /**codere**\r\n>>>>>\r\n>>>>>> >> > view.appspot.com/12552047/\r\n>>>>>> >>\r\n>>>>>> >\r\n>>>>>>\r\n>>>>>\r\n>>>>> <http://codereview.appspot.****com/12552047/%3Chttp://coderev**\r\n>>>>> iew.appspot.com/12552047/ <http://codereview.appspot.com/12552047/>>\r\n>>>>>\r\n>>>>>  > >>\r\n>>>>>> >\r\n>>>>>> >  >\r\n>>>>>> >> >> >\r\n>>>>>> >> >>\r\n>>>>>> >> >\r\n>>>>>> >> >\r\n>>>>>> >> >\r\n>>>>>> >> >\r\n>>>>>> >>\r\n>>>>>> >\r\n>>>>>> > https://codereview.appspot.******com/12552047/%253Chttps://**\r\n>>>>>> codere**\r\n>>>>>> > view.appspot.com/12552047/\r\n>>>>>>\r\n>>>>> <http://codereview.appspot.**com/12552047/<http://codereview.appspot.com/12552047/>\r\n>>>>> >>\r\n>>>>>\r\n>>>>>> >\r\n>>>>>> >> >\r\n>>>>>> >>\r\n>>>>>> >\r\n>>>>>> >\r\n>>>>>> >\r\n>>>>>> >\r\n>>>>>>\r\n>>>>>\r\n>>>>> https://codereview.appspot.****com/12552047/%3Chttps://codere**\r\n>>>>> view.appspot.com/12552047/ <http://codereview.appspot.com/12552047/>>\r\n>>>>>\r\n>>>>>> >\r\n>>>>>>\r\n>>>>>\r\n>>>>> Thanks! This helps a lot. I' looking forward to a synopsis where things\r\n>>>>> stand next week.\r\n>>>>>\r\n>>>>> https://codereview.appspot.**com/12552047/<https://codereview.appspot.com/12552047/>\r\n>>>>>\r\n>>>>\r\n>>>>\r\n>>>\r\n>>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-14 02:18:42.095980",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Let me say it one more time:\r\n\r\nThe issues you have with a debugger or interpreter are overlapping with\r\ngo/types but it's not the purpose of go/types to solve these problems.\r\ngo/types is about statically type-checking programs. The fact that it can\r\nevaluate expressions is incidental: The Go type system requires that the\r\nvalues of constant expressions (as defined by the spec) be known at compile\r\ntime since they impact the typing of a program. Therefore go/types\r\nevaluates constant expressions of basic types only. There is no internal\r\nrepresentation of non-basic values and no plan to add that.\r\n\r\nTherefore, providing a mechanism for types.Eval to get dynamic values for\r\nidentifiers doesn't solve the issue you are facing, for exactly the above\r\nstated reasons: In general such values are not of basic types. Implementing\r\nsuch an interpreter is beyond go/types and exactly the kind of work you\r\nwill have to put in in a debugger. What go/types will do for you is that it\r\nwill tell you if such an expression is legal (from a type-point of view).\r\n\r\nssa/interp works exactly because it does this extra work. For a debugger, a\r\nsimpler expression evaluator will be possible that mirrors some of the\r\ngo/types internal structure, but that is simply because that structure is\r\ngiven by the structure of the AST.\r\n\r\nRegarding the 2nd issue: You can change the configuration (e.g. the Error\r\nhandler) at runtime if you wanted to change it midstream.\r\n\r\nFinally, your last problem again is related to your first issue: It's not\r\nin the scope (pardon my pun) of go/types to evaluate arbitrary non-constant\r\nexpressions. And what you have is not a constant expression.\r\n\r\nGoing forward, please refrain from replying to this thread or any mailing\r\nlists reserved for code review feedback. This is not a forum for design\r\ndiscussions. Use golang-nuts instead.\r\n\r\nThanks.\r\n- gri\r\n\r\nPS: For pending issues with go/types see\r\nhttps://code.google.com/p/go/issues/detail?id=6141 . I don't think any of\r\nthese should block the implementation of a debugger.\r\n\r\n\r\nOn Tue, Aug 13, 2013 at 7:18 PM, Rocky Bernstein\r\n<rocky.bernstein@gmail.com>wrote:\r\n\r\n> I had previously tried go.types.Eval, but it has a number of problems.\r\n>\r\n> The most serious one is how it gets the values for identifiers. Currently\r\n> those values have to be recorded off of its kind of scope object. To\r\n> populate or update that that every time a program stops is a bit\r\n> prohibitive.  Recall that the ssa.interp doesn't need or use this kind of\r\n> scope object in its normal operations. To be fair that;s because this kind\r\n> of scope was fairly recently created. Instead, it has its own notion, or\r\n> current environment of values. In fact, the ssa interpreter's notion of a\r\n> \"value\" I think is is slightly different, although it might be fairly easy\r\n> to convert it from interp.Value to exact.Value and and back.\r\n>\r\n> A more friendlier design would allow one to give a call back to use to get\r\n> the value of an identifier inside the appropriate routine under types.Eval\r\n> -  check.ident() ?\r\n>\r\n> A second problem with type with types.Eval is how it handles errors. The\r\n> object of type Config, set in types.EvalNode(), isn't exposed to the\r\n> outside, so I don't see how to control configuration things which includes\r\n> how to handle errors.\r\n>\r\n> The last problem I have had is having the checker evaluate\r\n>\r\n> testTypes[0].num given a \"scope\" created that contains this:\r\n>\r\n> type testEntry struct {\r\n> src string\r\n>     num int\r\n> }\r\n>  var testTypes = []testEntry{ {\"a\", 1}, {\"b\", 2}}\r\n>\r\n> But here, I'm using the version of types before the change to move around\r\n> scope. I haven't been able to test this on the current tip, for reasons I\r\n> don't understand.\r\n>\r\n> Leaving aside the above which might or might not be a simple bug, if the\r\n> other main issues around types.Eval() were addressed, absolutely\r\n> types.Eval() would be great to use.\r\n>\r\n> On Tue, Aug 13, 2013 at 5:20 PM, Robert Griesemer <gri@golang.org> wrote:\r\n>\r\n>> go.types.Eval does exactly what you are asking for and has been there for\r\n>> a while now.\r\n>>\r\n>> - gri\r\n>>\r\n>>\r\n>> On Sun, Aug 11, 2013 at 10:17 AM, Rocky Bernstein <\r\n>> rocky.bernstein@gmail.com> wrote:\r\n>>\r\n>>> On Sun, Aug 11, 2013 at 12:34 AM, Robert Griesemer <gri@golang.org>wrote:\r\n>>>\r\n>>>> The Info struct can be populated with maps that provide you access to\r\n>>>> the type (and if constant, value) of every expression in the program. There\r\n>>>> are maps that permit mapping of all identifiers to their objects, and thus\r\n>>>> types, and corresponding scopes. I have pointed you at this structure\r\n>>>> before when explaining how to hook up the Scopes map.\r\n>>>>\r\n>>>> So you're certainly not correct: There is very fine-grained information\r\n>>>> available about the entire program.\r\n>>>>\r\n>>>\r\n>>>\r\n>>> I think you misunderstood what I wrote. I didn't write there wasn't\r\n>>> fine-grained information about the entire program from the checker.\r\n>>>\r\n>>> I wrote that access to the checker was at the granularity of an entire\r\n>>> program. *Inside, *the types checker uses an ast node and a scope.\r\n>>> ast/parser is also able to take an expression string and parse that. But\r\n>>> from outside go.tools/types, you can't pass in an ast expression and a\r\n>>> scope hand have the checker work on that.\r\n>>>\r\n>>> Addressing this is looks like largely (if not entirely) a matter of\r\n>>> allowing some of the internal routines be called from the outside, and\r\n>>> allowing the checker data structure be accessible.\r\n>>>\r\n>>>\r\n>>> Together with the AST it is possible to get all the type and value\r\n>>>> information that is needed to implement a back-end of a compiler. It was\r\n>>>> certainly possible for Alan to implement the ssa interpreter...\r\n>>>>\r\n>>>> The type-checker's primary goal is to provide whole-program type\r\n>>>> information.\r\n>>>>\r\n>>>> There's a whole set of problems that come with implementing a debugger\r\n>>>> or an interactive shell that has very little to do with type-checking, and\r\n>>>> it's not the goal of the type-checker to be a kitchen sink for all possible\r\n>>>> applications.\r\n>>>>\r\n>>>\r\n>>> I think you are expanding this way outside of the scope of what I was\r\n>>> suggesting: again, allow checking to work on expressions in addition to\r\n>>> whole programs just as ast/parser currently allows.\r\n>>>\r\n>>> One can define away the problem by saying that is outside of the purview\r\n>>> of this package. However look at it from the standpoint of an evaluator\r\n>>> application that needs use that information. I can only think of 3 options:\r\n>>>\r\n>>>\r\n>>>    1. Use the existing package in a Rube Goldberg way (and this invites\r\n>>>    messing with the Universal scope),\r\n>>>    2. Fork the code so that those routines are exposed\r\n>>>    3. Abandon working on the problem altogether\r\n>>>\r\n>>>\r\n>>>\r\n>>>\r\n>>>>\r\n>>>> - gri\r\n>>>>\r\n>>>>\r\n>>>> On Sat, Aug 10, 2013 at 8:45 PM, Rocky Bernstein <\r\n>>>> rocky.bernstein@gmail.com> wrote:\r\n>>>>\r\n>>>>> I've been looking again to look at the bugs and TODO's as you\r\n>>>>> mentioned previously. As it is right now, it's not all that useful in a\r\n>>>>> debugger or a go shell (short of abusing the Universal scope which we all\r\n>>>>> agree is undesirable), because access to the checker is at a very coarse\r\n>>>>> level -- the level of an entire program. Also, the type and value\r\n>>>>> information inside the type checker don't seem to be accessible from the\r\n>>>>> outside. Am I missing something?\r\n>>>>>\r\n>>>>> There is types.Check() which works with an entire program. Underneath\r\n>>>>> that calls  checkExprOrType but that's not exposed from the outside. Nor is\r\n>>>>> the checker object where type and value information about the ast object is\r\n>>>>> saved.\r\n>>>>>\r\n>>>>> Inside a debugger stopped inside a go program, one has a current scope\r\n>>>>> (say a type.Scope object). The programmer enters an expression and that's\r\n>>>>> parsed and evaluated using current values and the scope. Similarly, in an\r\n>>>>> interactive shell one also has a scope. Some interactive shells also have\r\n>>>>> \"workspaces\" which allow one to switch scopes.\r\n>>>>>\r\n>>>>> Does the use cases of go/types encompass these scenarios? Also, if it\r\n>>>>> is the case that the type information is not accessible after a check is\r\n>>>>> done, I would imagine there some duplication inside the ssa-interpreter to\r\n>>>>> handle the same sorts of issues. So again, I must be missing something.\r\n>>>>>\r\n>>>>>\r\n>>>>>\r\n>>>>>\r\n>>>>> On Sat, Aug 10, 2013 at 2:15 AM, <rocky.bernstein@gmail.com> wrote:\r\n>>>>>\r\n>>>>>> On 2013/08/10 04:52:18, gri wrote:\r\n>>>>>>\r\n>>>>>>> go/types is very close to functionally complete. There are known bugs\r\n>>>>>>> (issue tracker, and TODOs in the code). But the code is now\r\n>>>>>>>\r\n>>>>>> type-checking\r\n>>>>>>\r\n>>>>>>> the entire standard-library in all os/arch configurations, and\r\n>>>>>>> various\r\n>>>>>>> other code.\r\n>>>>>>>\r\n>>>>>>\r\n>>>>>>  What is still a bit in flux is the set of factory functions, exact\r\n>>>>>>>\r\n>>>>>> naming,\r\n>>>>>>\r\n>>>>>>> parameter lists, etc. - they have been added somewhat ad-hoc for\r\n>>>>>>>\r\n>>>>>> clients\r\n>>>>>>\r\n>>>>>>> (ssa) who needed to create their own types.\r\n>>>>>>>\r\n>>>>>>\r\n>>>>>>   From an API perspective, I'd rather not have clients be able to mix\r\n>>>>>>>\r\n>>>>>> their\r\n>>>>>>\r\n>>>>>>> own things in because it's hard to enforce that they are properly\r\n>>>>>>>\r\n>>>>>> set-up\r\n>>>>>>\r\n>>>>>>> with all invariants preserved. For instance, at the moment its\r\n>>>>>>>\r\n>>>>>> possible to\r\n>>>>>>\r\n>>>>>>> muck with the Universe scope which is a no-no. I think this is one of\r\n>>>>>>>\r\n>>>>>> the\r\n>>>>>>\r\n>>>>>>> areas where we can still evolve the API and perhaps find better\r\n>>>>>>>\r\n>>>>>> solutions.\r\n>>>>>>\r\n>>>>>>> This is also an area where I don't want to tie things down too early.\r\n>>>>>>>\r\n>>>>>> But\r\n>>>>>>\r\n>>>>>>> in general, such changes should be not too hard on clients.\r\n>>>>>>>\r\n>>>>>>\r\n>>>>>>  I might send out (or document in the code) the current status and\r\n>>>>>>>\r\n>>>>>> what's\r\n>>>>>>\r\n>>>>>>> missing, sometimes early next week. I will be offline for 4 weeks\r\n>>>>>>>\r\n>>>>>> after\r\n>>>>>>\r\n>>>>>>> that, but Alan will be able to chime in.\r\n>>>>>>>\r\n>>>>>>\r\n>>>>>>  - gri\r\n>>>>>>>\r\n>>>>>>\r\n>>>>>>\r\n>>>>>>  On Fri, Aug 9, 2013 at 9:40 PM, <mailto:rocky.bernstein@gmail.**com<rocky.bernstein@gmail.com>\r\n>>>>>>> >\r\n>>>>>>>\r\n>>>>>> wrote:\r\n>>>>>>\r\n>>>>>>  > On 2013/08/10 04:18:02, gri wrote:\r\n>>>>>>> >\r\n>>>>>>> >> It's trivial to add the information if you need it. The importer\r\n>>>>>>> >>\r\n>>>>>>> > allocates\r\n>>>>>>> >\r\n>>>>>>> >> all maps in one place, and you just add a additional line for a\r\n>>>>>>>\r\n>>>>>> Scopes\r\n>>>>>>\r\n>>>>>>> >>\r\n>>>>>>> > map\r\n>>>>>>> >\r\n>>>>>>> >> and copy the pattern used for the other maps.\r\n>>>>>>> >>\r\n>>>>>>> >\r\n>>>>>>> >  The main difference is that now the information provided is from\r\n>>>>>>>\r\n>>>>>> nodes\r\n>>>>>>\r\n>>>>>>> >>\r\n>>>>>>> > to\r\n>>>>>>> >\r\n>>>>>>> >> scopes, while before the information was from scopes to nodes. But\r\n>>>>>>> >>\r\n>>>>>>> > it's\r\n>>>>>>> >\r\n>>>>>>> >> trivially inverted if there is need for it.\r\n>>>>>>> >>\r\n>>>>>>> >\r\n>>>>>>> >  I'll leave it to Alan to make the respective changes in importer -\r\n>>>>>>>\r\n>>>>>> my\r\n>>>>>>\r\n>>>>>>> >> primary goal at the moment is to get go/types completed.\r\n>>>>>>> >>\r\n>>>>>>> >\r\n>>>>>>> > What is on the roadmap for getting go/types completed?\r\n>>>>>>> >\r\n>>>>>>> > In the last month or so there have been a lot of changes such the\r\n>>>>>>> > addition of scopes, which was much needed for things like writing a\r\n>>>>>>> > debugger. When you had mentioned that this was going to change, I\r\n>>>>>>>\r\n>>>>>> said\r\n>>>>>>\r\n>>>>>>> > I'd wait for the changes before starting to fill out aspects around\r\n>>>>>>> > handling scopes. When you said you thought everything was there\r\n>>>>>>> > complete, although it was just a small matter of programming to add\r\n>>>>>>> > whatever else was needed, I resumed.\r\n>>>>>>> >\r\n>>>>>>> > In general understanding what's contemplated and what is likely to\r\n>>>>>>> > change helps me or anyone else who is seriously trying to use this.\r\n>>>>>>> >\r\n>>>>>>> >\r\n>>>>>>> >    Alan will be back\r\n>>>>>>> >> by the middle of next week, I believe.\r\n>>>>>>> >>\r\n>>>>>>> >\r\n>>>>>>> > Ok. Thanks for the information. I won't try then to code around the\r\n>>>>>>> > recent changes but instead will wait for importer to get revised.\r\n>>>>>>> >\r\n>>>>>>> >\r\n>>>>>>> >  - gri\r\n>>>>>>> >>\r\n>>>>>>> >\r\n>>>>>>> >\r\n>>>>>>> >\r\n>>>>>>> >\r\n>>>>>>> >  On Fri, Aug 9, 2013 at 6:33 PM,\r\n>>>>>>> <mailto:rocky.bernstein@gmail.****com<rocky.bernstein@gmail.**com<rocky.bernstein@gmail.com>\r\n>>>>>>> >\r\n>>>>>>>\r\n>>>>>>> >> >\r\n>>>>>>> >>\r\n>>>>>>> > wrote:\r\n>>>>>>> >\r\n>>>>>>> >  > Yes, sure, the ssa interpreter doesn't use that information, but\r\n>>>>>>>\r\n>>>>>> the\r\n>>>>>>\r\n>>>>>>> >> > fork of it on github to support debugging does. And I've started\r\n>>>>>>> >> > removing the lossy Pos information in that ssa interpreter by\r\n>>>>>>>\r\n>>>>>> using\r\n>>>>>>\r\n>>>>>>> >> > position information from the ast.\r\n>>>>>>> >> >\r\n>>>>>>> >> > (Currently it is as a start and end position but eventually,\r\n>>>>>>> I'll\r\n>>>>>>> >> > probably add the single interval number/index I mentioned)\r\n>>>>>>> >> >\r\n>>>>>>> >> > I think I recall you suggesting that one could use information\r\n>>>>>>>\r\n>>>>>> from\r\n>>>>>>\r\n>>>>>>> >>\r\n>>>>>>> > the\r\n>>>>>>> >\r\n>>>>>>> >> > ast to get the more accurate range information rather than use\r\n>>>>>>>\r\n>>>>>> the\r\n>>>>>>\r\n>>>>>>> >>\r\n>>>>>>> > lossy\r\n>>>>>>> >\r\n>>>>>>> >> > canonical form that is in the ssa interpreter. I had said okay,\r\n>>>>>>>\r\n>>>>>> and\r\n>>>>>>\r\n>>>>>>> >>\r\n>>>>>>> > then\r\n>>>>>>> >\r\n>>>>>>> >> > you don't need that \"canonical Pos\" at all. But this assumes one\r\n>>>>>>>\r\n>>>>>> has\r\n>>>>>>\r\n>>>>>>> >>\r\n>>>>>>> > the\r\n>>>>>>> >\r\n>>>>>>> >> > ast position information.\r\n>>>>>>> >> >\r\n>>>>>>> >> > Later, Alan had said he thought he would eventually remove that\r\n>>>>>>> >> > canonical Pos information, although that hasn't happened yet.\r\n>>>>>>> >> >\r\n>>>>>>> >> >\r\n>>>>>>> >> > On 2013/08/10 00:57:49, gri wrote:\r\n>>>>>>> >> >\r\n>>>>>>> >> >> No changes are needed I think. ssa didn't use that information\r\n>>>>>>>\r\n>>>>>> in\r\n>>>>>>\r\n>>>>>>> >>\r\n>>>>>>> > the\r\n>>>>>>> >\r\n>>>>>>> >> >>\r\n>>>>>>> >> > first\r\n>>>>>>> >> >\r\n>>>>>>> >> >> place.\r\n>>>>>>> >> >> - gri\r\n>>>>>>> >> >>\r\n>>>>>>> >> >\r\n>>>>>>> >> >\r\n>>>>>>> >> >  On Fri, Aug 9, 2013 at 5:53 PM,\r\n>>>>>>> >>\r\n>>>>>>>\r\n>>>>>>\r\n>>>>>> <mailto:rocky.bernstein@gmail.******com<rocky.bernstein@gmail.**\r\n>>>>>> **com<rocky.bernstein@gmail.**com <rocky.bernstein@gmail.com>>\r\n>>>>>>\r\n>>>>>>  >> >\r\n>>>>>>> >>\r\n>>>>>>> >> >> >\r\n>>>>>>> >> >>\r\n>>>>>>> >> > wrote:\r\n>>>>>>> >> >\r\n>>>>>>> >> >  > What changes (if any) need to be made in the ssa-interpreter\r\n>>>>>>>\r\n>>>>>> need\r\n>>>>>>\r\n>>>>>>> >>\r\n>>>>>>> > to\r\n>>>>>>> >\r\n>>>>>>> >> >> > allow it access to the ast as it was before this change?\r\n>>>>>>> >> >> >\r\n>>>>>>> >> >> > I see the Scopes field (map[ast.Node]*Scope) added now to\r\n>>>>>>> >>\r\n>>>>>>> > types.Info\r\n>>>>>>> >\r\n>>>>>>> >> >>\r\n>>>>>>> >> > and\r\n>>>>>>> >> >\r\n>>>>>>> >> >> > field \"node\" removed from the Scopes type and some sort of\r\n>>>>>>>\r\n>>>>>> make()\r\n>>>>>>\r\n>>>>>>> >> >>\r\n>>>>>>> >> > needed\r\n>>>>>>> >> >\r\n>>>>>>> >> >> > after types.Info is created, but ssa uses\r\n>>>>>>> >> >> > importer.********CreatePackageFromArgs.\r\n>>>>>>> >> >> >\r\n>>>>>>> >> >> >\r\n>>>>>>> >> >>\r\n>>>>>>> >> >\r\n>>>>>>> >> >\r\n>>>>>>>\r\n>>>>>> https://codereview.appspot.********com/12552047/%25253Chttps:/**\r\n>>>>>> /**codere**\r\n>>>>>>\r\n>>>>>>> >> > view.appspot.com/12552047/\r\n>>>>>>> >>\r\n>>>>>>> >\r\n>>>>>>>\r\n>>>>>>\r\n>>>>>> <http://codereview.appspot.****com/12552047/%3Chttp://coderev**\r\n>>>>>> iew.appspot.com/12552047/ <http://codereview.appspot.com/12552047/>>\r\n>>>>>>\r\n>>>>>>  > >>\r\n>>>>>>> >\r\n>>>>>>> >  >\r\n>>>>>>> >> >> >\r\n>>>>>>> >> >>\r\n>>>>>>> >> >\r\n>>>>>>> >> >\r\n>>>>>>> >> >\r\n>>>>>>> >> >\r\n>>>>>>> >>\r\n>>>>>>> >\r\n>>>>>>> > https://codereview.appspot.******com/12552047/%253Chttps://**\r\n>>>>>>> codere**\r\n>>>>>>> > view.appspot.com/12552047/\r\n>>>>>>>\r\n>>>>>> <http://codereview.appspot.**com/12552047/<http://codereview.appspot.com/12552047/>\r\n>>>>>> >>\r\n>>>>>>\r\n>>>>>>> >\r\n>>>>>>> >> >\r\n>>>>>>> >>\r\n>>>>>>> >\r\n>>>>>>> >\r\n>>>>>>> >\r\n>>>>>>> >\r\n>>>>>>>\r\n>>>>>>\r\n>>>>>> https://codereview.appspot.****com/12552047/%3Chttps://codere**\r\n>>>>>> view.appspot.com/12552047/ <http://codereview.appspot.com/12552047/>>\r\n>>>>>>\r\n>>>>>>> >\r\n>>>>>>>\r\n>>>>>>\r\n>>>>>> Thanks! This helps a lot. I' looking forward to a synopsis where\r\n>>>>>> things\r\n>>>>>> stand next week.\r\n>>>>>>\r\n>>>>>> https://codereview.appspot.**com/12552047/<https://codereview.appspot.com/12552047/>\r\n>>>>>>\r\n>>>>>\r\n>>>>>\r\n>>>>\r\n>>>\r\n>>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-14 04:00:53.045120",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"rocky.bernstein@gmail.com",
				"adonovan@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/12552047/diff/2/go/types/api_test.go\nFile go/types/api_test.go (right):\n\nhttps://codereview.appspot.com/12552047/diff/2/go/types/api_test.go#newcode89\ngo/types/api_test.go:89: func TestScopesInfo(t *testing.T) {\nNice test.\n\nhttps://codereview.appspot.com/12552047/diff/2/go/types/api_test.go#newcode198\ngo/types/api_test.go:198: // look for matching scope description\nWould it also be useful to test the scope tree topology, i.e. Parent() links?",
			"disapproval": false,
			"date": "2013-08-14 17:05:11.804780",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rocky.bernstein@gmail.com",
				"adonovan@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12552047/diff/2/go/types/api_test.go\nFile go/types/api_test.go (right):\n\nhttps://codereview.appspot.com/12552047/diff/2/go/types/api_test.go#newcode198\ngo/types/api_test.go:198: // look for matching scope description\nOn 2013/08/14 17:05:12, adonovan wrote:\n> Would it also be useful to test the scope tree topology, i.e. Parent() links?\n\nYes, but I left it out because I think it might be done elsewhere - in a sanity-checking phase that runs through the data structures generated after a type check.",
			"disapproval": false,
			"date": "2013-08-14 17:45:31.782100",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 12552047: go.tools/go.types: retain ast.Node links on demand only",
	"created": "2013-08-09 01:38:53.234590",
	"patchsets": [
		1,
		3001,
		6001,
		2
	],
	"modified": "2013-08-14 17:45:32.557780",
	"closed": true,
	"issue": 12552047
}