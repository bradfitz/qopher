{
	"description": "spec: clarify evaluation order of \"i, x[i] = range ...\"\n\nPart of fix for issue 3464.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org",
		"mirtchovski@gmail.com",
		"iant@golang.org",
		"r@golang.org"
	],
	"reviewers": [
		"cw@f00f.org"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I stll disagree that the range expression of a for clause is a 'single\r\nmulti-valued expression'.  Quoting elsewhere in the spec, 'The range\r\nexpression is evaluated once before beginning the loop'.  The new text\r\noverloads that phrase.\r\n\r\nMaybe instead of trying to write text we should just leave it at the example?\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-24 00:59:28.536495",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think you mean \"or a for statement's range clause\".  More than the\r\nrange expression appears on the rhs.\r\n",
			"disapproval": false,
			"date": "2012-05-24 00:47:26.195585",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-05-24 00:46:14.834117",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-05-24 00:55:14.511982",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"mirtchovski@gmail.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6246045/diff/15001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/6246045/diff/15001/doc/go_spec.html#newcode3\ndoc/go_spec.html:3: \"Subtitle\": \"Version of March 24, 2012\",\ns/March/May/",
			"disapproval": false,
			"date": "2012-05-24 03:37:20.779981",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"mirtchovski@gmail.com",
				"iant@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6246045/diff/15001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/6246045/diff/15001/doc/go_spec.html#newcode3905\ndoc/go_spec.html:3905: // so i == 0, x == []int{3, 5, 3} at end\n// After this loop, i ==0 and x == []int{3, 5, 3}",
			"disapproval": false,
			"date": "2012-05-24 03:43:03.246662",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, May 23, 2012 at 5:47 PM, Russ Cox <rsc@golang.org> wrote:\r\n> I think you mean \"or a for statement's range clause\". \u00a0More than the\r\n> range expression appears on the rhs.\r\n\r\n\"of a for statement's range clause\" I buy. that's the rhs I care about\r\n",
			"disapproval": false,
			"date": "2012-05-24 00:52:42.839688",
			"approval": false
		},
		{
			"sender": "mirtchovski@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry this is off-topic, but don't you mean \"Version of May 24, 2012\"?\r\n",
			"disapproval": false,
			"date": "2012-05-24 01:07:15.818722",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"mirtchovski@gmail.com",
				"iant@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "s/==0/== 0/ of course",
			"disapproval": false,
			"date": "2012-05-24 03:43:38.168317",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"mirtchovski@gmail.com",
				"iant@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=1c4d1ba268ca ***\n\nspec: clarify evaluation order of \"i, x[i] = range ...\"\n\nPart of fix for issue 3464.\n\nR=golang-dev, rsc, mirtchovski, iant, r\nCC=golang-dev\nhttp://codereview.appspot.com/6246045",
			"disapproval": false,
			"date": "2012-05-24 17:59:52.300850",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, May 24, 2012 at 3:32 PM, Chris Wedgwood <cw@f00f.org> wrote:\r\n> Does that also clarify:\r\n>\r\n> \u00a0 \u00a0 \u00a0 \u00a0x := []int{1, 0}\r\n>\r\n> \u00a0 \u00a0 \u00a0 \u00a0x[x[0]], x[x[1]] = 5, 6\r\n\r\nThis case was not disputed here. All indices are evaluated before any\r\nassignments are happening. The result is well-defined (x == []int{6,\r\n5} afterwards).\r\n- gri\r\n",
			"disapproval": false,
			"date": "2012-05-24 23:01:05.540479",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "the \"or\" is just part of the sentence, because it's the last of a long list.\r\nbut yes, i think we agree.\r\n",
			"disapproval": false,
			"date": "2012-05-24 00:55:31.015962",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-05-24 01:05:33.046305",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nSorry for being pedantic.\r\n",
			"disapproval": false,
			"date": "2012-05-24 01:07:06.428742",
			"approval": true
		},
		{
			"sender": "cw@f00f.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Does that also clarify:\r\n\r\n        x := []int{1, 0}\r\n\r\n        x[x[0]], x[x[1]] = 5, 6\r\n",
			"disapproval": false,
			"date": "2012-05-24 22:32:49.339296",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6246045: spec: clarify evaluation order of \"i, x[i] = range ...\"",
	"created": "2012-05-24 00:35:06.815417",
	"patchsets": [
		1,
		2001,
		4001,
		1002,
		5002,
		11001,
		12001,
		14002,
		15001,
		5003
	],
	"modified": "2012-05-24 22:32:49.421042",
	"closed": true,
	"issue": 6246045
}