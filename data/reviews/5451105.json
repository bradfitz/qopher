{
	"description": "gc: implement == on structs and arrays\n\nTo allow these types as map keys, we must fill in\nequal and hash functions in their algorithm tables.\nStructs or arrays that are \"just memory\", like [2]int,\ncan and do continue to use the AMEM algorithm.\nStructs or arrays that contain special values like\nstrings or interface values use generated functions\nfor both equal and hash.\n\nThe runtime helper func runtime.equal(t, x, y) bool handles\nthe general equality case for x == y and calls out to\nthe equal implementation in the algorithm table.\n\nFor short values (<= 4 struct fields or array elements),\nthe sequence of elementwise comparisons is inlined\ninstead of calling runtime.equal.",
	"cc": [
		"ken@golang.org",
		"mpimenov@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"ken@google.com",
		"lucio.dere@gmail.com",
		"dsymonds@golang.org"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello ken2 (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-06 20:26:51.749524",
			"approval": false
		},
		{
			"sender": "mpimenov@google.com",
			"recipients": [
				"rsc@golang.org",
				"ken@golang.org",
				"mpimenov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5451105/diff/3021/src/cmd/gc/go.h\nFile src/cmd/gc/go.h (right):\n\nhttp://codereview.appspot.com/5451105/diff/3021/src/cmd/gc/go.h#newcode1247\nsrc/cmd/gc/go.h:1247: Node*\tconv(Node*, Type*);\nThanks for this one\n\nhttp://codereview.appspot.com/5451105/diff/3021/src/cmd/gc/walk.c\nFile src/cmd/gc/walk.c (right):\n\nhttp://codereview.appspot.com/5451105/diff/3021/src/cmd/gc/walk.c#newcode2555\nsrc/cmd/gc/walk.c:2555: argtype(fn, n->left->type);\nWhy twice? n->right->type maybe?\n\nhttp://codereview.appspot.com/5451105/diff/3021/src/cmd/gc/walk.c#newcode2556\nsrc/cmd/gc/walk.c:2556: r = mkcall1(fn, n->type, init, typename(n->left->type), l, r);\nsemantic nitpick: seems that you're using 'r' both for 'right' and for 'ret/result'",
			"disapproval": false,
			"date": "2011-12-07 09:39:08.318564",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Dec 7, 2011 at 04:39,  <mpimenov@google.com> wrote:\n> Why twice? n->right->type maybe?\n\nThe type appears multiple times in the parameter list.\nl and r are always the same type.\n\n> semantic nitpick: seems that you're using 'r' both for 'right' and for\n> 'ret/result'\n\nTrue.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-07 15:28:51.432257",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"ken@golang.org",
				"mpimenov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=891bd45d4ed8 ***\n\ngc: implement == on structs and arrays\n\nTo allow these types as map keys, we must fill in\nequal and hash functions in their algorithm tables.\nStructs or arrays that are \"just memory\", like [2]int,\ncan and do continue to use the AMEM algorithm.\nStructs or arrays that contain special values like\nstrings or interface values use generated functions\nfor both equal and hash.\n\nThe runtime helper func runtime.equal(t, x, y) bool handles\nthe general equality case for x == y and calls out to\nthe equal implementation in the algorithm table.\n\nFor short values (<= 4 struct fields or array elements),\nthe sequence of elementwise comparisons is inlined\ninstead of calling runtime.equal.\n\nR=ken, mpimenov\nCC=golang-dev\nhttp://codereview.appspot.com/5451105",
			"disapproval": false,
			"date": "2011-12-13 03:22:13.981630",
			"approval": false
		},
		{
			"sender": "ken@google.com",
			"recipients": [
				"rsc@golang.org",
				"ken@google.com",
				"ken@golang.org",
				"mpimenov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "lgtm",
			"disapproval": false,
			"date": "2011-12-13 05:14:44.433441",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Dec 13, 2011 at 05:54,  <lucio.dere@gmail.com> wrote:\n> It ought to suffice to drop this,\n\ndone, sorry about the trouble.\nthe #define happened to be identical\nto the one in the other files, so it was\nallowed.\n",
			"disapproval": false,
			"date": "2011-12-13 21:15:12.005231",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"ken@google.com",
				"lucio.dere@gmail.com",
				"ken@golang.org",
				"mpimenov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It ought to suffice to drop this, but the comment suggests it should be migrated to some common header.\n\nLucio.\n\nhttp://codereview.appspot.com/5451105/diff/14001/src/cmd/gc/pgen.c\nFile src/cmd/gc/pgen.c (right):\n\nhttp://codereview.appspot.com/5451105/diff/14001/src/cmd/gc/pgen.c#newcode10\nsrc/cmd/gc/pgen.c:10: #define\tDUPOK\t(1<<1)  /* same in all architectures */\nThis breaks Plan 9 compilation, DUPOK is already defined in the various architecture headers (X.out.h) and is used in Xl/obj.c and Xl/gsubr.c.  It certainly is the same in all architectures.  Lucio.",
			"disapproval": false,
			"date": "2011-12-13 10:54:03.601152",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"rsc@golang.org",
				"ken@google.com",
				"lucio.dere@gmail.com",
				"dsymonds@golang.org",
				"ken@golang.org",
				"mpimenov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI, this breaks \"6g -u\" everywhere because src/cmd/gc/runtime.go imports \"unsafe\". Hopefully there's an easy fix.",
			"disapproval": false,
			"date": "2011-12-19 04:55:00.901077",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5451105: gc: implement == on structs and arrays",
	"created": "2011-12-06 16:01:22.550880",
	"patchsets": [
		1,
		2001,
		4001,
		5023,
		6001,
		3021,
		8001,
		11001,
		12001,
		14001
	],
	"modified": "2011-12-19 04:55:01.133199",
	"closed": true,
	"issue": 5451105
}