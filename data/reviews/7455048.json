{
	"description": "vet: check for useless assignments.\n\nThe only check so far is for self-assignments of the form \"expr = expr\",\nbut even that found one instance in the standard library.",
	"cc": [
		"r@golang.org",
		"adg@golang.org",
		"mtj@google.com",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-03-04 05:39:06.171200",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"r@golang.org",
				"adg@golang.org",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7455048/diff/14001/src/cmd/vet/assign.go\nFile src/cmd/vet/assign.go (right):\n\nhttps://codereview.appspot.com/7455048/diff/14001/src/cmd/vet/assign.go#newcode30\nsrc/cmd/vet/assign.go:30: return // don't try to handle multi-valued RHS expressions\nOn 2013/03/05 00:30:51, r wrote:\n> not so much 'don't try' as 'no need'\n\nDone.\n\nhttps://codereview.appspot.com/7455048/diff/14001/src/cmd/vet/assign.go#newcode34\nsrc/cmd/vet/assign.go:34: if reflect.TypeOf(lhs) != reflect.TypeOf(rhs) {\nOn 2013/03/05 00:30:51, r wrote:\n> i'm bothered that reflect is required here, but i don't see how to avoid it.\n> perhaps more important is that i'm not sure it's really the test you want. i\n> thought you were going to use type checking of expressions and identifiers, not\n> ast-tree-checking, but maybe that doesn't work either.\n> \n> let's ask gri what he thinks.\n\nI don't think typechecking is needed here, nor is there much benefit. \"x = x\" is wrong regardless of what type x is. This check is to avoid the gofmt expense of checking assignments where they cannot possibly be of the same form, so \"x = y + z\" is an ast.Ident on the LHS and an ast.BinaryExpr on the RHS. That level of AST type difference is the most common case for assignments. Reflection seems cheap enough here, but I could do ast.Ident specifically before this if you are concerned about the speed.\n\nhttps://codereview.appspot.com/7455048/diff/14001/src/cmd/vet/assign.go#newcode35\nsrc/cmd/vet/assign.go:35: continue // short-circut the heavy-weight gofmt check\nOn 2013/03/05 00:30:51, r wrote:\n> circuit.\n\nDone.",
			"disapproval": false,
			"date": "2013-03-05 00:46:45.906330",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 4 March 2013 16:39, <dsymonds@golang.org> wrote:\r\n\r\n> -               elseList = elseList\r\n\r\n\r\nNice, but for the sake of history can you please split this into a separate\r\nCL? (which you may submit with my implicit LGTM)\r\n",
			"disapproval": false,
			"date": "2013-03-04 05:44:48.650310",
			"approval": true
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Mar 4, 2013 at 4:44 PM, Andrew Gerrand <adg@golang.org> wrote:\r\n\r\n> On 4 March 2013 16:39, <dsymonds@golang.org> wrote:\r\n>>\r\n>> -               elseList = elseList\r\n>\r\n>\r\n> Nice, but for the sake of history can you please split this into a separate\r\n> CL? (which you may submit with my implicit LGTM)\r\n\r\nI can do, but I'm not entirely sure this is the right fix. If Rob\r\nconcurs then I'll split it out.\r\n",
			"disapproval": false,
			"date": "2013-03-04 05:46:40.304030",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "this = this\r\n\r\nis idiomatic Go for \"stop bugging me about the developmental edits and do\r\nthe compile.\"\r\n\r\nOn Sun, Mar 3, 2013 at 9:46 PM, David Symonds <dsymonds@golang.org> wrote:\r\n\r\n> On Mon, Mar 4, 2013 at 4:44 PM, Andrew Gerrand <adg@golang.org> wrote:\r\n>\r\n> > On 4 March 2013 16:39, <dsymonds@golang.org> wrote:\r\n> >>\r\n> >> -               elseList = elseList\r\n> >\r\n> >\r\n> > Nice, but for the sake of history can you please split this into a\r\n> separate\r\n> > CL? (which you may submit with my implicit LGTM)\r\n>\r\n> I can do, but I'm not entirely sure this is the right fix. If Rob\r\n> concurs then I'll split it out.\r\n>\r\n> --\r\n>\r\n> ---\r\n> You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n>\r\n\r\n\r\n-- \r\nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n650-335-5765\r\n",
			"disapproval": false,
			"date": "2013-03-04 06:17:45.127160",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Mar 4, 2013 at 5:17 PM, Michael Jones <mtj@google.com> wrote:\r\n\r\n> this = this\r\n>\r\n> is idiomatic Go for \"stop bugging me about the developmental edits and do\r\n> the compile.\"\r\n\r\nI've seen \"_ = this\" far more commonly.\r\n",
			"disapproval": false,
			"date": "2013-03-04 06:27:37.455700",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"r@golang.org",
				"adg@golang.org",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7455048/diff/14001/src/cmd/vet/assign.go\nFile src/cmd/vet/assign.go (right):\n\nhttps://codereview.appspot.com/7455048/diff/14001/src/cmd/vet/assign.go#newcode30\nsrc/cmd/vet/assign.go:30: return // don't try to handle multi-valued RHS expressions\nnot so much 'don't try' as 'no need'\n\nhttps://codereview.appspot.com/7455048/diff/14001/src/cmd/vet/assign.go#newcode34\nsrc/cmd/vet/assign.go:34: if reflect.TypeOf(lhs) != reflect.TypeOf(rhs) {\ni'm bothered that reflect is required here, but i don't see how to avoid it. perhaps more important is that i'm not sure it's really the test you want. i thought you were going to use type checking of expressions and identifiers, not ast-tree-checking, but maybe that doesn't work either.\n\nlet's ask gri what he thinks.\n\nhttps://codereview.appspot.com/7455048/diff/14001/src/cmd/vet/assign.go#newcode35\nsrc/cmd/vet/assign.go:35: continue // short-circut the heavy-weight gofmt check\ncircuit.",
			"disapproval": false,
			"date": "2013-03-05 00:30:51.110490",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"r@golang.org",
				"adg@golang.org",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7455048/diff/14001/src/cmd/vet/assign.go\nFile src/cmd/vet/assign.go (right):\n\nhttps://codereview.appspot.com/7455048/diff/14001/src/cmd/vet/assign.go#newcode34\nsrc/cmd/vet/assign.go:34: if reflect.TypeOf(lhs) != reflect.TypeOf(rhs) {\nI realize that, but I was hoping that gri might have a nicer, non-reflect way to ask that question.",
			"disapproval": false,
			"date": "2013-03-05 01:01:43.307510",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Mar 5, 2013 at 11:43 AM, Rob Pike <r@golang.org> wrote:\r\n\r\n> It rubs me the wrong way, that's all, sniffing around the type system\r\n> like this. Reflect is overused by many; here it's necessary.\r\n>\r\n\r\nIt's not necessary. You can write a long function with all the cases you\r\ncare about. It's just a shortcut, and in this case quite an inexpensive one.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-03-05 19:56:36.343940",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"r@golang.org",
				"adg@golang.org",
				"mtj@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=228a4fbc0f66 ***\n\nvet: check for useless assignments.\n\nThe only check so far is for self-assignments of the form \"expr = expr\",\nbut even that found one instance in the standard library.\n\nR=r, adg, mtj, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/7455048",
			"disapproval": false,
			"date": "2013-03-05 22:55:10.692780",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"r@golang.org",
				"adg@golang.org",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7455048/diff/17002/src/cmd/vet/assign.go\nFile src/cmd/vet/assign.go (right):\n\nhttps://codereview.appspot.com/7455048/diff/17002/src/cmd/vet/assign.go#newcode30\nsrc/cmd/vet/assign.go:30: return // no need to handle multi-valued RHS expressions\nthe comment is incorrect - you still check multi-valued expressions.\n// If LHS and RHS have different cardinality, they can't be the same.\n\nhttps://codereview.appspot.com/7455048/diff/17002/src/cmd/vet/assign.go#newcode34\nsrc/cmd/vet/assign.go:34: if reflect.TypeOf(lhs) != reflect.TypeOf(rhs) {\n// TODO: If the ast provided a Kind, we wouldn't need reflect.\n\nhttps://codereview.appspot.com/7455048/diff/17002/src/cmd/vet/test_assign.go\nFile src/cmd/vet/test_assign.go (right):\n\nhttps://codereview.appspot.com/7455048/diff/17002/src/cmd/vet/test_assign.go#newcode19\nsrc/cmd/vet/test_assign.go:19: s.x = s.x // ERROR \"self-assignment of s.x to s.x\"\nput in a few more, including cases that it should catch and cases that it should not.",
			"disapproval": false,
			"date": "2013-03-05 19:29:27.621770",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't see what's objectionable with the use of reflect here. The AST\r\nalready has a perfectly good \"kind\": the concrete type of the node,\r\nobtainable via reflect.TypeOf.\r\n",
			"disapproval": false,
			"date": "2013-03-05 19:39:04.974370",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It rubs me the wrong way, that's all, sniffing around the type system\r\nlike this. Reflect is overused by many; here it's necessary.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-03-05 19:43:03.008700",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "s/necessary/the best alternative/\r\n",
			"disapproval": false,
			"date": "2013-03-05 20:00:45.542490",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"r@golang.org",
				"adg@golang.org",
				"mtj@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7455048/diff/17002/src/cmd/vet/assign.go\nFile src/cmd/vet/assign.go (right):\n\nhttps://codereview.appspot.com/7455048/diff/17002/src/cmd/vet/assign.go#newcode30\nsrc/cmd/vet/assign.go:30: return // no need to handle multi-valued RHS expressions\nOn 2013/03/05 19:29:27, r wrote:\n> the comment is incorrect - you still check multi-valued expressions.\n> // If LHS and RHS have different cardinality, they can't be the same.\n\nDone.\n\nhttps://codereview.appspot.com/7455048/diff/17002/src/cmd/vet/assign.go#newcode34\nsrc/cmd/vet/assign.go:34: if reflect.TypeOf(lhs) != reflect.TypeOf(rhs) {\nOn 2013/03/05 19:29:27, r wrote:\n> // TODO: If the ast provided a Kind, we wouldn't need reflect.\n\nDone.",
			"disapproval": false,
			"date": "2013-03-05 21:46:22.399960",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"r@golang.org",
				"adg@golang.org",
				"mtj@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n(rsc might be happier if you drop the TODO)",
			"disapproval": false,
			"date": "2013-03-05 22:29:08.125940",
			"approval": true
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Mar 6, 2013 at 9:29 AM,  <r@golang.org> wrote:\r\n\r\n> LGTM\r\n> (rsc might be happier if you drop the TODO)\r\n\r\nBah. I'm going to drop the TODO and submit this already.\r\n",
			"disapproval": false,
			"date": "2013-03-05 22:53:30.440080",
			"approval": false
		}
	],
	"owner_email": "dsymonds@golang.org",
	"private": false,
	"base_url": "",
	"owner": "dsymonds",
	"subject": "code review 7455048: vet: check for useless assignments.",
	"created": "2013-03-04 05:37:42.640570",
	"patchsets": [
		1,
		2001,
		5001,
		13001,
		14001,
		17002,
		26001,
		24002
	],
	"modified": "2013-03-05 22:55:13.689760",
	"closed": true,
	"issue": 7455048
}