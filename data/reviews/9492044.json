{
	"description": "net/http: simplify transfer body; reduces allocations too\n\nbenchmark                                   old ns/op    new ns/op    delta\nBenchmarkServerFakeConnNoKeepAlive              14431        14247   -1.28%\nBenchmarkServerFakeConnWithKeepAlive            11618        11357   -2.25%\nBenchmarkServerFakeConnWithKeepAliveLite         6735         6427   -4.57%\nBenchmarkServerHandlerTypeLen                    8842         8740   -1.15%\nBenchmarkServerHandlerNoLen                      8001         7828   -2.16%\nBenchmarkServerHandlerNoType                     8270         8227   -0.52%\nBenchmarkServerHandlerNoHeader                   6148         5920   -3.71%\n\nbenchmark                                  old allocs   new allocs    delta\nBenchmarkServerFakeConnNoKeepAlive                 30           29   -3.33%\nBenchmarkServerFakeConnWithKeepAlive               25           24   -4.00%\nBenchmarkServerFakeConnWithKeepAliveLite           10            9  -10.00%\nBenchmarkServerHandlerTypeLen                      18           17   -5.56%\nBenchmarkServerHandlerNoLen                        15           14   -6.67%\nBenchmarkServerHandlerNoType                       16           15   -6.25%\nBenchmarkServerHandlerNoHeader                     10            9  -10.00%\n\nbenchmark                                   old bytes    new bytes    delta\nBenchmarkServerFakeConnNoKeepAlive               2557         2492   -2.54%\nBenchmarkServerFakeConnWithKeepAlive             2260         2194   -2.92%\nBenchmarkServerFakeConnWithKeepAliveLite         1092         1026   -6.04%\nBenchmarkServerHandlerTypeLen                    1941         1875   -3.40%\nBenchmarkServerHandlerNoLen                      1898         1832   -3.48%\nBenchmarkServerHandlerNoType                     1906         1840   -3.46%\nBenchmarkServerHandlerNoHeader                   1092         1026   -6.04%\n\nUpdate Issue 5195",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"daniel.morsing@gmail.com",
		"minux.ma@gmail.com"
	],
	"messages": [
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/9492044/diff/5001/src/pkg/net/http/server.go\nFile src/pkg/net/http/server.go (right):\n\nhttps://codereview.appspot.com/9492044/diff/5001/src/pkg/net/http/server.go#newcode1824\nsrc/pkg/net/http/server.go:1824: ioutil.NopCloser(strings.NewReader(\"\")),\nNopCloser doesn't need a reader if the read method is never called. Just pass it nil.",
			"disapproval": false,
			"date": "2013-05-20 13:58:38.813150",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-05-20 03:57:05.241000",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=d1d76fc0ab6a ***\n\nnet/http: simplify transfer body; reduces allocations too\n\nbenchmark                                   old ns/op    new ns/op    delta\nBenchmarkServerFakeConnNoKeepAlive              14431        14247   -1.28%\nBenchmarkServerFakeConnWithKeepAlive            11618        11357   -2.25%\nBenchmarkServerFakeConnWithKeepAliveLite         6735         6427   -4.57%\nBenchmarkServerHandlerTypeLen                    8842         8740   -1.15%\nBenchmarkServerHandlerNoLen                      8001         7828   -2.16%\nBenchmarkServerHandlerNoType                     8270         8227   -0.52%\nBenchmarkServerHandlerNoHeader                   6148         5920   -3.71%\n\nbenchmark                                  old allocs   new allocs    delta\nBenchmarkServerFakeConnNoKeepAlive                 30           29   -3.33%\nBenchmarkServerFakeConnWithKeepAlive               25           24   -4.00%\nBenchmarkServerFakeConnWithKeepAliveLite           10            9  -10.00%\nBenchmarkServerHandlerTypeLen                      18           17   -5.56%\nBenchmarkServerHandlerNoLen                        15           14   -6.67%\nBenchmarkServerHandlerNoType                       16           15   -6.25%\nBenchmarkServerHandlerNoHeader                     10            9  -10.00%\n\nbenchmark                                   old bytes    new bytes    delta\nBenchmarkServerFakeConnNoKeepAlive               2557         2492   -2.54%\nBenchmarkServerFakeConnWithKeepAlive             2260         2194   -2.92%\nBenchmarkServerFakeConnWithKeepAliveLite         1092         1026   -6.04%\nBenchmarkServerHandlerTypeLen                    1941         1875   -3.40%\nBenchmarkServerHandlerNoLen                      1898         1832   -3.48%\nBenchmarkServerHandlerNoType                     1906         1840   -3.46%\nBenchmarkServerHandlerNoHeader                   1092         1026   -6.04%\n\nUpdate Issue 5195\n\nR=golang-dev, daniel.morsing\nCC=golang-dev\nhttps://codereview.appspot.com/9492044\n\nhttps://codereview.appspot.com/9492044/diff/5001/src/pkg/net/http/server.go\nFile src/pkg/net/http/server.go (right):\n\nhttps://codereview.appspot.com/9492044/diff/5001/src/pkg/net/http/server.go#newcode1824\nsrc/pkg/net/http/server.go:1824: ioutil.NopCloser(strings.NewReader(\"\")),\nOn 2013/05/20 13:58:38, DMorsing wrote:\n> NopCloser doesn't need a reader if the read method is never called. Just pass it\n> nil.\n\nDone.",
			"disapproval": false,
			"date": "2013-05-20 14:24:02.491050",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Second pass over this made me realise that ioutil.Discard implements ReaderFrom. io.Copy prioritizes ReaderFroms over WriterTos, so the embedding change would be a no-op.\n\nPerhaps it's a good idea to switch the priorities in io.Copy. ReadFrom requires that a buffer be created for the reader to write into, while WriteTo will use the buffer internal to the reader.",
			"disapproval": false,
			"date": "2013-05-20 15:06:39.694490",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, May 20, 2013 at 8:06 AM, <daniel.morsing@gmail.com> wrote:\r\n\r\n> Second pass over this made me realise that ioutil.Discard implements\r\n> ReaderFrom. io.Copy prioritizes ReaderFroms over WriterTos, so the\r\n> embedding change would be a no-op.\r\n>\r\n> Perhaps it's a good idea to switch the priorities in io.Copy. ReadFrom\r\n> requires that a buffer be created for the reader to write into, while\r\n> WriteTo will use the buffer internal to the reader.\r\n>\r\n\r\nInteresting.\r\n\r\nAt least ioutil.Discard's ReadFrom ends up re-using a blackhole buffer, so\r\namortized, there's no allocation, but there are channel operations for now\r\n(until we have a Cache type or similar).\r\n\r\nI wonder whether changing the ReaderFrom/WriterTo order could break any\r\nprograms.  It makes me nervous from a Go1 compatibility promise angle at\r\nleast.\r\n",
			"disapproval": false,
			"date": "2013-05-20 15:11:49.990860",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, May 20, 2013 at 11:06 PM, <daniel.morsing@gmail.com> wrote:\r\n\r\n> Second pass over this made me realise that ioutil.Discard implements\r\n> ReaderFrom. io.Copy prioritizes ReaderFroms over WriterTos, so the\r\n> embedding change would be a no-op.\r\n>\r\n> Perhaps it's a good idea to switch the priorities in io.Copy. ReadFrom\r\n> requires that a buffer be created for the reader to write into, while\r\n> WriteTo will use the buffer internal to the reader.\r\n\r\nIt's also possible for Writers that implement ReadFrom to have its own write\r\nbuffer so that it could pass it to the Reader and avoid extra garbage.\r\n",
			"disapproval": false,
			"date": "2013-05-20 15:17:19.383460",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, May 20, 2013 at 5:16 PM, minux <minux.ma@gmail.com> wrote:\r\n>\r\n> On Mon, May 20, 2013 at 11:06 PM, <daniel.morsing@gmail.com> wrote:\r\n>>\r\n>> Second pass over this made me realise that ioutil.Discard implements\r\n>> ReaderFrom. io.Copy prioritizes ReaderFroms over WriterTos, so the\r\n>> embedding change would be a no-op.\r\n>>\r\n>> Perhaps it's a good idea to switch the priorities in io.Copy. ReadFrom\r\n>> requires that a buffer be created for the reader to write into, while\r\n>> WriteTo will use the buffer internal to the reader.\r\n>\r\n> It's also possible for Writers that implement ReadFrom to have its own write\r\n> buffer so that it could pass it to the Reader and avoid extra garbage.\r\n\r\nHopefully, types that implement ReaderFrom and WriterTo have buffers\r\ninternally that they can subslice, otherwise the rationale behind\r\nimplementing them would be moot. If both Reader and Writer implement\r\nWriterTo and ReaderFrom, choosing between them should give the same\r\ncost.\r\n\r\nWhich makes me wonder, Why does ioutil.Discard even implement the\r\nReaderFrom? Wouldn't it be better to just implement the buffer cache\r\nfor io.Copy?\r\n",
			"disapproval": false,
			"date": "2013-05-20 16:22:53.602570",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, May 20, 2013 at 9:22 AM, Daniel Morsing <daniel.morsing@gmail.com>wrote:\r\n\r\n> On Mon, May 20, 2013 at 5:16 PM, minux <minux.ma@gmail.com> wrote:\r\n> >\r\n> > On Mon, May 20, 2013 at 11:06 PM, <daniel.morsing@gmail.com> wrote:\r\n> >>\r\n> >> Second pass over this made me realise that ioutil.Discard implements\r\n> >> ReaderFrom. io.Copy prioritizes ReaderFroms over WriterTos, so the\r\n> >> embedding change would be a no-op.\r\n> >>\r\n> >> Perhaps it's a good idea to switch the priorities in io.Copy. ReadFrom\r\n> >> requires that a buffer be created for the reader to write into, while\r\n> >> WriteTo will use the buffer internal to the reader.\r\n> >\r\n> > It's also possible for Writers that implement ReadFrom to have its own\r\n> write\r\n> > buffer so that it could pass it to the Reader and avoid extra garbage.\r\n>\r\n> Hopefully, types that implement ReaderFrom and WriterTo have buffers\r\n> internally that they can subslice, otherwise the rationale behind\r\n> implementing them would be moot. If both Reader and Writer implement\r\n> WriterTo and ReaderFrom, choosing between them should give the same\r\n> cost.\r\n>\r\n> Which makes me wonder, Why does ioutil.Discard even implement the\r\n> ReaderFrom?\r\n\r\n\r\nBecause it's safe.\r\n\r\n\r\n> Wouldn't it be better to just implement the buffer cache\r\n> for io.Copy?\r\n>\r\n\r\nI discarded https://codereview.appspot.com/7206048/ (maybe prematurely?)\r\nbut opened https://code.google.com/p/go/issues/detail?id=5509 at least.\r\n The thing I didn't like about the io.Copy one (in addition to adding yet\r\nanother buffered-channel-as-cache) was that it's potentially unsafe, if a\r\nReader/Writer retains a reference to the p []byte arg, which they really\r\nshouldn't do.\r\n",
			"disapproval": false,
			"date": "2013-05-20 17:58:30.313100",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, May 20, 2013 at 7:58 PM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> On Mon, May 20, 2013 at 9:22 AM, Daniel Morsing <daniel.morsing@gmail.com>\r\n> wrote:\r\n>>\r\n>> On Mon, May 20, 2013 at 5:16 PM, minux <minux.ma@gmail.com> wrote:\r\n>> >\r\n>> > On Mon, May 20, 2013 at 11:06 PM, <daniel.morsing@gmail.com> wrote:\r\n>> >>\r\n>> >> Second pass over this made me realise that ioutil.Discard implements\r\n>> >> ReaderFrom. io.Copy prioritizes ReaderFroms over WriterTos, so the\r\n>> >> embedding change would be a no-op.\r\n>> >>\r\n>> >> Perhaps it's a good idea to switch the priorities in io.Copy. ReadFrom\r\n>> >> requires that a buffer be created for the reader to write into, while\r\n>> >> WriteTo will use the buffer internal to the reader.\r\n>> >\r\n>> > It's also possible for Writers that implement ReadFrom to have its own\r\n>> > write\r\n>> > buffer so that it could pass it to the Reader and avoid extra garbage.\r\n>>\r\n>> Hopefully, types that implement ReaderFrom and WriterTo have buffers\r\n>> internally that they can subslice, otherwise the rationale behind\r\n>> implementing them would be moot. If both Reader and Writer implement\r\n>> WriterTo and ReaderFrom, choosing between them should give the same\r\n>> cost.\r\n>>\r\n>> Which makes me wonder, Why does ioutil.Discard even implement the\r\n>> ReaderFrom?\r\n>\r\n>\r\n> Because it's safe.\r\n>\r\n>>\r\n>> Wouldn't it be better to just implement the buffer cache\r\n>> for io.Copy?\r\n>\r\n>\r\n> I discarded https://codereview.appspot.com/7206048/ (maybe prematurely?) but\r\n> opened https://code.google.com/p/go/issues/detail?id=5509 at least.  The\r\n> thing I didn't like about the io.Copy one (in addition to adding yet another\r\n> buffered-channel-as-cache) was that it's potentially unsafe, if a\r\n> Reader/Writer retains a reference to the p []byte arg, which they really\r\n> shouldn't do.\r\n>\r\n\r\nOk, That makes removal of ReaderTo from ioutil.Discard out of the\r\nquestion. That makes it tempting to switch the priorities in io.Copy.\r\n\r\nThere are other reasons to switch priorities. If we have well behaved\r\nWriterTos that keep their data in memory and issues Write with one big\r\nslice, the size of the data will be known before it's processed by the\r\nWriter. An example is bytes.Buffer. If we use its ReaderFrom method,\r\nit might read multiple times, having to allocate whenever it runs out\r\nof buffer. If we issue one big write to it, it will only allocate\r\nonce.\r\n\r\nI'll send out a CL later where we can move this discussion.\r\n",
			"disapproval": false,
			"date": "2013-05-20 19:28:20.663860",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 9492044: net/http: simplify transfer body; reduces allocations too",
	"created": "2013-05-20 03:56:54.410260",
	"patchsets": [
		1,
		2001,
		5001,
		10001
	],
	"modified": "2013-05-20 19:28:20.663860",
	"closed": true,
	"issue": 9492044
}