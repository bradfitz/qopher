{
	"description": "syscall: handle empty address in ReadFrom better\n\nHandle return values from recvfrom correctly when the\nkernel decides to not return an address.\n\nFixes issue 4636.\nFixes issue 4352.",
	"cc": [
		"rsc@golang.org",
		"dave@cheney.net",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"mikioh.mikioh@gmail.com"
	],
	"messages": [
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for your investigations.\r\n\r\nI guess we need to have a look at not only issue 4636 but issue 4352.\r\nAlso please add Read/Write method tests to protoconn_test.go.\r\n",
			"disapproval": false,
			"date": "2013-01-09 13:50:36.580280",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"rsc@golang.org",
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/09 13:50:36, mikio wrote:\n> Also please add Read/Write method tests to protoconn_test.go.\n\nThese changes to syscall don't touch the path Read/Write follow, only ReadFrom. I'm not sure I understand what you're asking for.",
			"disapproval": false,
			"date": "2013-01-09 16:11:17.378390",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm not sure whether we should fix DialUnix for accepting unnamed\r\nsockets. But if you really need to extend it, please update doc too.\r\n\r\nOn Wed, Jan 9, 2013 at 10:50 PM, Mikio Hara <mikioh.mikioh@gmail.com> wrote:\r\n> Thank you for your investigations.\r\n>\r\n> I guess we need to have a look at not only issue 4636 but issue 4352.\r\n> Also please add Read/Write method tests to protoconn_test.go.\r\n",
			"disapproval": false,
			"date": "2013-01-09 14:14:33.570170",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"rsc@golang.org",
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "With this change, a call to net.DialUnix that would have failed before with an error now returns a net.PacketConn that is usable. It seems to me this behavior more correctly implements the Go 1 docs.\n\nI will update the CL when I see how this fix behaves on 1.0.3.",
			"disapproval": false,
			"date": "2013-01-09 15:43:00.504600",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"rsc@golang.org",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, mikioh.mikioh@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-01-09 12:46:10.837600",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "We have to be careful to respect the existing go 1.0 behaviour. I don't\r\nknow if this change affects that contract, but it is important to check.\r\nCan you please patch your test cases into go 1.0.3 and see what happens. We\r\nmay have to add additional passing tests to prevent breaking go 1.0\r\ncontracts in the future.\r\nOn 9 Jan 2013 23:46, <jeff.allen@gmail.com> wrote:\r\n\r\n> Reviewers: rsc, mikio,\r\n>\r\n> Message:\r\n> Hello rsc@golang.org, mikioh.mikioh@gmail.com (cc:\r\n> golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> net: fix anonymous unixgram sockets\r\n>\r\n> Make it possible to call net.DialUnix(\"unixgram\", nil, nil)\r\n> and then make receives on anonymous sockets work correctly.\r\n>\r\n> Fixes issue 4636.\r\n>\r\n> Please review this at https://codereview.appspot.**com/7058062/<https://codereview.appspot.com/7058062/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/net/packetconn_test.go\r\n>   M src/pkg/net/unixsock_posix.go\r\n>   M src/pkg/syscall/syscall_bsd.go\r\n>   M src/pkg/syscall/syscall_linux.**go\r\n>\r\n>\r\n> Index: src/pkg/net/packetconn_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/packetconn_test.**go\r\n> +++ b/src/pkg/net/packetconn_test.**go\r\n> @@ -98,6 +98,39 @@\r\n>         }\r\n>  }\r\n>\r\n> +func TestAnonymousReceive(t *testing.T) {\r\n> +       addr := \"/tmp/sun\"\r\n> +       go func() {\r\n> +               time.Sleep(10 * time.Millisecond)\r\n> +               c, err := net.DialUnix(\"unixgram\", nil, nil)\r\n> +               if err != nil {\r\n> +                       return\r\n> +               }\r\n> +               one := [1]byte{1}\r\n> +               c.WriteTo(one[:], &net.UnixAddr{addr, \"unixgram\"})\r\n> +       }()\r\n> +       os.Remove(addr)\r\n> +       c, err := net.ListenPacket(\"unixgram\", addr)\r\n> +       if err != nil {\r\n> +               t.Error(err)\r\n> +       }\r\n> +       var buf [500]byte\r\n> +       c.SetReadDeadline(time.Now().**Add(100 * time.Millisecond))\r\n> +       n, from, err := c.ReadFrom(buf[:])\r\n> +       if err != nil {\r\n> +               t.Error(err)\r\n> +       }\r\n> +       if n != 1 {\r\n> +               t.Error(\"n is\", n)\r\n> +       }\r\n> +       if from != nil {\r\n> +               t.Error(\"from is\", from)\r\n> +       }\r\n> +       if buf[0] != 1 {\r\n> +               t.Error(\"buf[0] is wrong\")\r\n> +       }\r\n> +}\r\n> +\r\n>  func TestConnAndPacketConn(t *testing.T) {\r\n>         for _, tt := range packetConnTests {\r\n>                 var wb []byte\r\n> Index: src/pkg/net/unixsock_posix.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/unixsock_posix.**go\r\n> +++ b/src/pkg/net/unixsock_posix.**go\r\n> @@ -36,7 +36,7 @@\r\n>                 }\r\n>                 if raddr != nil {\r\n>                         ra = &syscall.SockaddrUnix{Name: raddr.Name}\r\n> -               } else if sotype != syscall.SOCK_DGRAM || laddr == nil {\r\n> +               } else if sotype != syscall.SOCK_DGRAM {\r\n>                         return nil, &OpError{Op: mode, Net: net, Err:\r\n> errMissingAddress}\r\n>                 }\r\n>         case \"listen\":\r\n> Index: src/pkg/syscall/syscall_bsd.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/syscall/syscall_bsd.**go\r\n> +++ b/src/pkg/syscall/syscall_bsd.**go\r\n> @@ -450,7 +450,9 @@\r\n>         if n, err = recvfrom(fd, p, flags, &rsa, &len); err != nil {\r\n>                 return\r\n>         }\r\n> -       from, err = anyToSockaddr(&rsa)\r\n> +       if n > 0 {\r\n> +               from, err = anyToSockaddr(&rsa)\r\n> +       }\r\n>         return\r\n>  }\r\n>\r\n> Index: src/pkg/syscall/syscall_linux.**go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/syscall/syscall_**linux.go\r\n> +++ b/src/pkg/syscall/syscall_**linux.go\r\n> @@ -547,7 +547,9 @@\r\n>         if n, err = recvfrom(fd, p, flags, &rsa, &len); err != nil {\r\n>                 return\r\n>         }\r\n> -       from, err = anyToSockaddr(&rsa)\r\n> +       if len > 0 {\r\n> +               from, err = anyToSockaddr(&rsa)\r\n> +       }\r\n>         return\r\n>  }\r\n>\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-09 12:48:53.790260",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jan 10, 2013 at 1:11 AM,  <jeff.allen@gmail.com> wrote:\r\n\r\n> These changes to syscall don't touch the path Read/Write follow, only\r\n> ReadFrom. I'm not sure I understand what you're asking for.\r\n\r\nSorry, I'm a bit confused because... as you pointed out UnixConn\r\n(and tests for it) has been overlooked.\r\n\r\n- Looks like DialUnix allows to make an unnamed unix domain\r\n  socket on unixgram but Dial doesn't, right?\r\n\r\n- If Dial doesn't need to support it, why DialUnix do that?\r\n  Why not ListenUnixgram?\r\n\r\nAnyway thank you for tackling this!\r\n",
			"disapproval": false,
			"date": "2013-01-09 17:16:43.067910",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"rsc@golang.org",
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, mikioh.mikioh@gmail.com, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-09 16:11:32.497790",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "As far as API:\r\n\"unix\" should be like \"tcp\".\r\n\"unixgram\" should be like \"udp\".\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-01-09 19:54:10.792670",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"rsc@golang.org",
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi Jeff,\n\nCould you please split this into two CLs:\n- syscall: tweak recvfrom stuff with a test,\n- net: add unnamed socket support to unixconn.\n\nThe former would be just a bug fix, the latter might be API re-design.\n\nhttps://codereview.appspot.com/7058062/diff/4003/src/pkg/syscall/syscall_linux.go\nFile src/pkg/syscall/syscall_linux.go (right):\n\nhttps://codereview.appspot.com/7058062/diff/4003/src/pkg/syscall/syscall_linux.go#newcode550\nsrc/pkg/syscall/syscall_linux.go:550: if len > 0 {\nnot sure len >0 is enough for all cases.\nhow about this?\n\nif rsa.Addr.Family != AF_UNSPEC {\n        from, err = anyToSockaddr(&rsa)\n}",
			"disapproval": false,
			"date": "2013-01-14 14:04:19.243030",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"rsc@golang.org",
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please take another look.\n\nI realized I didn't need to muck with the behavior of DialUnix in order to correctly test this. So this is the minimum change that both fixes the two issues and tests them both, but does not change net's behavior other than fixing the issues.\n\nThanks for keeping me honest...\n\nhttps://codereview.appspot.com/7058062/diff/4003/src/pkg/syscall/syscall_linux.go\nFile src/pkg/syscall/syscall_linux.go (right):\n\nhttps://codereview.appspot.com/7058062/diff/4003/src/pkg/syscall/syscall_linux.go#newcode550\nsrc/pkg/syscall/syscall_linux.go:550: if len > 0 {\nOn 2013/01/14 14:04:19, mikio wrote:\n> not sure len >0 is enough for all cases.\n> how about this?\n> \n> if rsa.Addr.Family != AF_UNSPEC {\n>         from, err = anyToSockaddr(&rsa)\n> }\n\nDone.",
			"disapproval": false,
			"date": "2013-01-15 15:45:39.430420",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Seems tests don't work well on BSDs, break Plan9/Windows build.\r\nPlease feel free to take: https://codereview.appspot.com/7130044/.\r\nIt's a good time to have dedicated tests for UnixConn.\r\n",
			"disapproval": false,
			"date": "2013-01-16 05:05:53.667780",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "syscall: ReadFrom on unixgram sockets gave incorrect EAFNOSUPPORT\r\n\r\nAlso please change the CL description to more appropriate one.\r\n\r\nOn Wed, Jan 16, 2013 at 2:05 PM, Mikio Hara <mikioh.mikioh@gmail.com> wrote:\r\n> Seems tests don't work well on BSDs, break Plan9/Windows build.\r\n> Please feel free to take: https://codereview.appspot.com/7130044/.\r\n> It's a good time to have dedicated tests for UnixConn.\r\n",
			"disapproval": false,
			"date": "2013-01-16 05:08:56.056510",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"rsc@golang.org",
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7058062/diff/21001/src/pkg/net/unix_test.go\nFile src/pkg/net/unix_test.go (right):\n\nhttps://codereview.appspot.com/7058062/diff/21001/src/pkg/net/unix_test.go#newcode18\nsrc/pkg/net/unix_test.go:18: // use ioutil.TempFile to get a name that is unique\n// testUnixAddr returns a unique pathname that ... blah blah.\n\nhttps://codereview.appspot.com/7058062/diff/21001/src/pkg/net/unix_test.go#newcode19\nsrc/pkg/net/unix_test.go:19: func genAddr() string {\nmaybe testUnixAddr\n\nhttps://codereview.appspot.com/7058062/diff/21001/src/pkg/net/unix_test.go#newcode24\nsrc/pkg/net/unix_test.go:24: f.Close()\nseems wrong f.Close then f.Name\n\nhttps://codereview.appspot.com/7058062/diff/21001/src/pkg/net/unix_test.go#newcode44\nsrc/pkg/net/unix_test.go:44: \nsorry, i forgot to add a channel that avoids ECONNRESET (which rarely happens) on BSDs.\n\noff := make(chan bool)\ndata := ...\ngo func() {\n   defer func() { off<-true }()\n   :\n}()\n\n<-off\nc.SetReadDeadline()\n\nhttps://codereview.appspot.com/7058062/diff/21001/src/pkg/net/unix_test.go#newcode81\nsrc/pkg/net/unix_test.go:81: defer os.Remove(addr)\ndelete\n\nhttps://codereview.appspot.com/7058062/diff/21001/src/pkg/net/unix_test.go#newcode95\nsrc/pkg/net/unix_test.go:95: go func() {\nsorry, pls add a channel (same as above)",
			"disapproval": false,
			"date": "2013-01-19 14:10:21.610860",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"rsc@golang.org",
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, mikioh.mikioh@gmail.com, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-18 14:12:38.596230",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"rsc@golang.org",
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7058062/diff/27001/src/pkg/net/unix_test.go\nFile src/pkg/net/unix_test.go (right):\n\nhttps://codereview.appspot.com/7058062/diff/27001/src/pkg/net/unix_test.go#newcode72\nsrc/pkg/net/unix_test.go:72: t.Errorf(\"neighbor address is %v\", from)\nhm, on freebsd it returns empty sockaddr.\njeff, what about on linux?\n\ngo test -v -run=TestReadUnixgramWithUnnamedSocket\n=== RUN TestReadUnixgramWithUnnamedSocket-2\n--- FAIL: TestReadUnixgramWithUnnamedSocket-2 (0.00 seconds)\nunix_test.go:71: \tneighbor address is &net.UnixAddr{Name:\"\", Net:\"unixgram\"}\nFAIL\n\nhttps://codereview.appspot.com/7058062/diff/27001/src/pkg/net/unix_test.go#newcode116\nsrc/pkg/net/unix_test.go:116: if _, peer, err = c.ReadFrom(nil); err != nil {\nperhaps s/peer/from/ might be consistent.\n\n        _, from, err := c.ReadFrom(nil)\n        if err != nil {\n\nhttps://codereview.appspot.com/7058062/diff/27001/src/pkg/net/unix_test.go#newcode121\nsrc/pkg/net/unix_test.go:121: t.Errorf(\"peer adddress is %v\", peer)\ngo test -v -run=TestReadUnixgramWithZeroBytesBuffer\n=== RUN TestReadUnixgramWithZeroBytesBuffer-2\n--- FAIL: TestReadUnixgramWithZeroBytesBuffer-2 (0.00 seconds)\nunix_test.go:120: \tneighbor adddress is &net.UnixAddr{Name:\"\", Net:\"unixgram\"}\nFAIL",
			"disapproval": false,
			"date": "2013-01-23 16:18:22.160730",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"jeff.allen@gmail.com",
				"rsc@golang.org",
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please check that the returned address is nil.",
			"disapproval": false,
			"date": "2013-01-18 22:39:03.921820",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jan 24, 2013 at 1:18 AM,  <mikioh.mikioh@gmail.com> wrote:\r\n\r\n> hm, on freebsd it returns empty sockaddr.\r\n> jeff, what about on linux?\r\n>\r\n> go test -v -run=TestReadUnixgramWithUnnamedSocket\r\n> === RUN TestReadUnixgramWithUnnamedSocket-2\r\n> --- FAIL: TestReadUnixgramWithUnnamedSocket-2 (0.00 seconds)\r\n> unix_test.go:71:        neighbor address is &net.UnixAddr{Name:\"\",\r\n> Net:\"unixgram\"}\r\n> FAIL\r\n\r\nouch,\r\n\r\n=== RUN TestReadUnixgramWithUnnamedSocket-2\r\n--- PASS: TestReadUnixgramWithUnnamedSocket-2 (0.00 seconds)\r\nunix_test.go:74: neighbor address is <nil>\r\nPASS\r\n\r\ndidn't know that such differences, hm.\r\n",
			"disapproval": false,
			"date": "2013-01-23 23:57:36.075970",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"rsc@golang.org",
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7058062/diff/21001/src/pkg/net/unix_test.go\nFile src/pkg/net/unix_test.go (right):\n\nhttps://codereview.appspot.com/7058062/diff/21001/src/pkg/net/unix_test.go#newcode18\nsrc/pkg/net/unix_test.go:18: // use ioutil.TempFile to get a name that is unique\nOn 2013/01/19 14:10:21, mikio wrote:\n> // testUnixAddr returns a unique pathname that ... blah blah.\n\nDone.\n\nhttps://codereview.appspot.com/7058062/diff/21001/src/pkg/net/unix_test.go#newcode19\nsrc/pkg/net/unix_test.go:19: func genAddr() string {\nOn 2013/01/19 14:10:21, mikio wrote:\n> maybe testUnixAddr\n\nDone.\n\nhttps://codereview.appspot.com/7058062/diff/21001/src/pkg/net/unix_test.go#newcode24\nsrc/pkg/net/unix_test.go:24: f.Close()\nOn 2013/01/19 14:10:21, mikio wrote:\n> seems wrong f.Close then f.Name\n\nDone.\n\nhttps://codereview.appspot.com/7058062/diff/21001/src/pkg/net/unix_test.go#newcode44\nsrc/pkg/net/unix_test.go:44: \nOn 2013/01/19 14:10:21, mikio wrote:\n> sorry, i forgot to add a channel that avoids ECONNRESET (which rarely happens)\n> on BSDs.\n> \n> off := make(chan bool)\n> data := ...\n> go func() {\n>    defer func() { off<-true }()\n>    :\n> }()\n> \n> <-off\n> c.SetReadDeadline()\n\nDone.\n\nhttps://codereview.appspot.com/7058062/diff/21001/src/pkg/net/unix_test.go#newcode81\nsrc/pkg/net/unix_test.go:81: defer os.Remove(addr)\nOn 2013/01/19 14:10:21, mikio wrote:\n> delete\n\nDone.\n\nhttps://codereview.appspot.com/7058062/diff/21001/src/pkg/net/unix_test.go#newcode95\nsrc/pkg/net/unix_test.go:95: go func() {\nOn 2013/01/19 14:10:21, mikio wrote:\n> sorry, pls add a channel (same as above)\n\nDone.",
			"disapproval": false,
			"date": "2013-01-23 15:10:14.054090",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"rsc@golang.org",
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI\n\nhttps://codereview.appspot.com/7058062/diff/27001/src/pkg/net/unix_test.go\nFile src/pkg/net/unix_test.go (right):\n\nhttps://codereview.appspot.com/7058062/diff/27001/src/pkg/net/unix_test.go#newcode72\nsrc/pkg/net/unix_test.go:72: t.Errorf(\"neighbor address is %v\", from)\nokay, just confirmed that your tests light green on freebsd with https://codereview.appspot.com/7204050/",
			"disapproval": false,
			"date": "2013-01-24 02:16:42.612370",
			"approval": false
		},
		{
			"sender": "jeff.allen@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"rsc@golang.org",
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "OK, I have incorporated 7204050 into this CL, and now I think it is ready to go. Please take a look and check it in if you're happy.",
			"disapproval": false,
			"date": "2013-01-30 12:42:27.287370",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"jeff.allen@gmail.com",
				"rsc@golang.org",
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nActually it looks awful to me, but that's not your fault. I can't believe someone thought this was a good idea for how sockets should behave.",
			"disapproval": false,
			"date": "2013-01-30 18:00:31.304120",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"jeff.allen@gmail.com",
				"rsc@golang.org",
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=9379ab966cb2 ***\n\nsyscall: handle empty address in ReadFrom better\n\nHandle return values from recvfrom correctly when the\nkernel decides to not return an address.\n\nFixes issue 4636.\nFixes issue 4352.\n\nR=rsc, mikioh.mikioh, dave\nCC=golang-dev\nhttps://codereview.appspot.com/7058062\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2013-01-30 18:02:05.234620",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"jeff.allen@gmail.com",
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThank you for fixing this.\nHope Go 1.1 will have no bash on unix domain socket stuff.\n\nWill revisit net tests later, until Go 1.1 cutoff.\n\nhttps://codereview.appspot.com/7058062/diff/32001/src/pkg/net/unix_test.go\nFile src/pkg/net/unix_test.go (right):\n\nhttps://codereview.appspot.com/7058062/diff/32001/src/pkg/net/unix_test.go#newcode115\nsrc/pkg/net/unix_test.go:115: var peer Addr\nmaybe,\r\n\r\n_, from, err := c.ReadFrom(...)\r\n  :\r\nif from != nil{\r\n  t.Errorf(\"peer adddress is %v\", from)\r\n}\r\n\r\nmight be consistent.",
			"disapproval": false,
			"date": "2013-01-31 00:01:39.583590",
			"approval": true
		}
	],
	"owner_email": "jeff.allen@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "jeff.allen",
	"subject": "code review 7058062: syscall: handle empty address in ReadFrom better",
	"created": "2013-01-09 12:39:01.241780",
	"patchsets": [
		1,
		2001,
		4001,
		4003,
		15001,
		21001,
		27001,
		32001
	],
	"modified": "2013-01-31 08:18:26.991030",
	"closed": true,
	"issue": 7058062
}