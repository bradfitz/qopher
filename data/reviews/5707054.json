{
	"description": "encoding/json: escape output from Marshalers.\n\nFixes issue 3127.",
	"cc": [
		"rsc@golang.org",
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Suggestions on making it more efficient are welcome, short of tearing\napart the encoding machinery. Someone else can tackle that later.\n\n\nDave.\n",
			"disapproval": false,
			"date": "2012-02-29 00:25:48.167763",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5707054/diff/2001/src/pkg/encoding/json/encode.go\nFile src/pkg/encoding/json/encode.go (right):\n\nhttp://codereview.appspot.com/5707054/diff/2001/src/pkg/encoding/json/encode.go#newcode269\nsrc/pkg/encoding/json/encode.go:269: var buf bytes.Buffer\nOn 2012/02/29 00:53:39, dsymonds wrote:\n> On 2012/02/29 00:34:49, r wrote:\n> > is it worth a call to bytes.IndexAny to avoid the allocation? i think so.\n> \n> It would improve this particular approach, yeah. I want to see whether Russ\n> wants me to take a much more different approach (e.g. slotting an escaping\n> io.Writer in somewhere).\n\nI don't want to slow things down noticeably here, but since we're\nalready checking validity and compacting below, it should be \nboth easy and quick to make that processing do the escaping too.\nA proposal:\n\nRename Compact to compact with an extra parameter\nand a little bit more code:\n\nfunc compact(dst *bytes.Buffer, src []byte, escape bool) error {\n\t...\n\tfor i, c := range src {\n\t\tif escape && (c == '<' || c == '>' || c == '&') {\n\t\t\tif start < i {\n\t\t\t\tdst.Write(src[start:i])\n\t\t\t}\n\t\t\tdst.WriteString(`\\u00`)\n\t\t\tdst.WriteByte(hex[c>>4])\n\t\t\tdst.WriteByte(hex[c&0xF])\n\t\t\tstart = i+1\n\t\t}\n\t\tv := scan.step(&scan, int(c))\n\t\t...\n\t\t\nThen Compact == compact(dst, src, false), and below the \ncall can be compact(&e.Buffer, b, true).",
			"disapproval": false,
			"date": "2012-02-29 15:50:20.428119",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5707054/diff/2001/src/pkg/encoding/json/encode.go\nFile src/pkg/encoding/json/encode.go (right):\n\nhttp://codereview.appspot.com/5707054/diff/2001/src/pkg/encoding/json/encode.go#newcode269\nsrc/pkg/encoding/json/encode.go:269: var buf bytes.Buffer\nis it worth a call to bytes.IndexAny to avoid the allocation? i think so.",
			"disapproval": false,
			"date": "2012-02-29 00:34:49.408011",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-29 00:25:01.660159",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5707054/diff/2001/src/pkg/encoding/json/encode.go\nFile src/pkg/encoding/json/encode.go (right):\n\nhttp://codereview.appspot.com/5707054/diff/2001/src/pkg/encoding/json/encode.go#newcode269\nsrc/pkg/encoding/json/encode.go:269: var buf bytes.Buffer\nOn 2012/02/29 00:34:49, r wrote:\n> is it worth a call to bytes.IndexAny to avoid the allocation? i think so.\n\nIt would improve this particular approach, yeah. I want to see whether Russ wants me to take a much more different approach (e.g. slotting an escaping io.Writer in somewhere).",
			"disapproval": false,
			"date": "2012-02-29 00:53:39.417932",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-03-01 06:26:53.644162",
			"approval": true
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-03-01 05:42:34.852439",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=fe8fee76a008 ***\n\nencoding/json: escape output from Marshalers.\n\nFixes issue 3127.\n\nR=rsc, r\nCC=golang-dev\nhttp://codereview.appspot.com/5707054",
			"disapproval": false,
			"date": "2012-03-01 06:42:05.821528",
			"approval": false
		}
	],
	"owner_email": "dsymonds@golang.org",
	"private": false,
	"base_url": "",
	"owner": "dsymonds",
	"subject": "code review 5707054: encoding/json: escape output from Marshalers.",
	"created": "2012-02-29 00:24:35.753571",
	"patchsets": [
		1,
		1002,
		2001,
		6001,
		7007
	],
	"modified": "2012-03-01 06:42:07.960235",
	"closed": true,
	"issue": 5707054
}