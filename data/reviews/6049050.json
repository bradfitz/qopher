{
	"description": "crypto/ssh: fix several logic errors.\n\nThese are the obvious mistakes from my read through. I'll save the\nmore cosmetic changes for a later CL.",
	"cc": [
		"dave@cheney.net",
		"kardianos@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://agl%40golang.org@code.google.com/p/go.crypto/",
			"disapproval": false,
			"date": "2012-04-19 00:06:03.239530",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6049050/diff/2001/ssh/channel.go\nFile ssh/channel.go (left):\n\nhttp://codereview.appspot.com/6049050/diff/2001/ssh/channel.go#oldcode239\nssh/channel.go:239: if c.myWindow <= uint32(len(c.pendingData))/2 {\nPreviously we would let the other side know that it could send more data as soon as our window was low. However, this didn't ensure that we had actually cleared out the needed space in c.pendingData by reading it.\n\nhttp://codereview.appspot.com/6049050/diff/2001/ssh/channel.go\nFile ssh/channel.go (right):\n\nhttp://codereview.appspot.com/6049050/diff/2001/ssh/channel.go#newcode260\nssh/channel.go:260: tail = len(c.pendingData)\nIn the event that the buffer is wrapping around the end, we want to read until the end of the buffer.\n\nhttp://codereview.appspot.com/6049050/diff/2001/ssh/channel.go#newcode275\nssh/channel.go:275: c.serverConn.lock.Lock()\nNote the additional serverConn.lock compared to the previous code.",
			"disapproval": false,
			"date": "2012-04-19 00:17:35.370996",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"agl@golang.org",
				"dave@cheney.net",
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Appears to work well in the tests I ran on it (pushing/pulling hg repos through it). I'll run some additional tests probably this weekend but I doubt it will uncover anything. Thanks :)\n\nOn 2012/04/19 00:17:35, agl1 wrote:\n> http://codereview.appspot.com/6049050/diff/2001/ssh/channel.go\n> File ssh/channel.go (left):\n> \n> http://codereview.appspot.com/6049050/diff/2001/ssh/channel.go#oldcode239\n> ssh/channel.go:239: if c.myWindow <= uint32(len(c.pendingData))/2 {\n> Previously we would let the other side know that it could send more data as soon\n> as our window was low. However, this didn't ensure that we had actually cleared\n> out the needed space in c.pendingData by reading it.\n> \n> http://codereview.appspot.com/6049050/diff/2001/ssh/channel.go\n> File ssh/channel.go (right):\n> \n> http://codereview.appspot.com/6049050/diff/2001/ssh/channel.go#newcode260\n> ssh/channel.go:260: tail = len(c.pendingData)\n> In the event that the buffer is wrapping around the end, we want to read until\n> the end of the buffer.\n> \n> http://codereview.appspot.com/6049050/diff/2001/ssh/channel.go#newcode275\n> ssh/channel.go:275: c.serverConn.lock.Lock()\n> Note the additional serverConn.lock compared to the previous code.",
			"disapproval": false,
			"date": "2012-04-19 05:11:55.389244",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"agl@golang.org",
				"dave@cheney.net",
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\n\nKardia - I would like to see your ideas about the circular buffer integrated if you still wish to contribute them.\n\nhttp://codereview.appspot.com/6049050/diff/2001/ssh/channel.go\nFile ssh/channel.go (right):\n\nhttp://codereview.appspot.com/6049050/diff/2001/ssh/channel.go#newcode260\nssh/channel.go:260: tail = len(c.pendingData)\nmaybe tail := min(c.head + c.length, len(c.pendingData))",
			"disapproval": false,
			"date": "2012-04-19 14:54:37.995775",
			"approval": true
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"dave@cheney.net",
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=8e4015d2d681&repo=crypto ***\n\ncrypto/ssh: fix several logic errors.\n\nThese are the obvious mistakes from my read through. I'll save the\nmore cosmetic changes for a later CL.\n\nR=dave, kardianos\nCC=golang-dev\nhttp://codereview.appspot.com/6049050\n\nhttp://codereview.appspot.com/6049050/diff/2001/ssh/channel.go\nFile ssh/channel.go (right):\n\nhttp://codereview.appspot.com/6049050/diff/2001/ssh/channel.go#newcode260\nssh/channel.go:260: tail = len(c.pendingData)\nOn 2012/04/19 14:54:38, dfc wrote:\n> maybe tail := min(c.head + c.length, len(c.pendingData))\n\nDone.",
			"disapproval": false,
			"date": "2012-04-19 15:17:05.587930",
			"approval": false
		}
	],
	"owner_email": "agl@golang.org",
	"private": false,
	"base_url": "",
	"owner": "agl1",
	"subject": "code review 6049050: crypto/ssh: fix several logic errors.",
	"created": "2012-04-19 00:03:44.838805",
	"patchsets": [
		1,
		2001,
		4001,
		7001,
		11001
	],
	"modified": "2012-04-19 15:17:07.842994",
	"closed": true,
	"issue": 6049050
}