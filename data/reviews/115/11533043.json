{
	"description": "runtime: handle morestack/lessstack in stack trace\n\nIf we start a garbage collection on g0 during a\nstack split or unsplit, we'll see morestack or lessstack\nat the top of the stack. Record an argument frame size\nfor those, and record that they terminate the stack.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"dvyukov@google.com"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-07-18 17:18:12.204700",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/18 20:17:42, dvyukov wrote:\n> https://codereview.appspot.com/11533043/diff/6001/src/pkg/runtime/proc.c\n> File src/pkg/runtime/proc.c (right):\n> \n> https://codereview.appspot.com/11533043/diff/6001/src/pkg/runtime/proc.c#newcode2512\n> src/pkg/runtime/proc.c:2512: f->entry == (uintptr)runtime\u00b7morestack ||\n> if a goroutine calls e.g. runtime.Gosched() which calls runtime.mcall(gosched0),\n> and then on g0 it triggers GC and unwinds stack; what will be the top frame?\n\nI mean that we have lots of \"entry points\" to g0, why only lessstack/morestack are here?",
			"disapproval": false,
			"date": "2013-07-18 20:18:46.841430",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11533043/diff/6001/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttps://codereview.appspot.com/11533043/diff/6001/src/pkg/runtime/proc.c#newcode181\nsrc/pkg/runtime/proc.c:181: runtime\u00b7Gosched();\nwhy is this?",
			"disapproval": false,
			"date": "2013-07-18 20:15:13.551160",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The arg size lookup is disabled during cpu profiling now.\r\n",
			"disapproval": false,
			"date": "2013-07-18 20:57:06.956420",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "That was leftover debugging. I had the scavenger in a tight loop sleeping and stopping the world, and I wanted to give it a chance to run. Gone.",
			"disapproval": false,
			"date": "2013-07-18 20:17:00.232760",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11533043/diff/6001/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttps://codereview.appspot.com/11533043/diff/6001/src/pkg/runtime/proc.c#newcode2512\nsrc/pkg/runtime/proc.c:2512: f->entry == (uintptr)runtime\u00b7morestack ||\nif a goroutine calls e.g. runtime.Gosched() which calls runtime.mcall(gosched0), and then on g0 it triggers GC and unwinds stack; what will be the top frame?",
			"disapproval": false,
			"date": "2013-07-18 20:17:42.768710",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11533043/diff/6001/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttps://codereview.appspot.com/11533043/diff/6001/src/pkg/runtime/proc.c#newcode2512\nsrc/pkg/runtime/proc.c:2512: f->entry == (uintptr)runtime\u00b7morestack ||\nOn 2013/07/18 20:17:42, dvyukov wrote:\n> if a goroutine calls e.g. runtime.Gosched() which calls runtime.mcall(gosched0),\n> and then on g0 it triggers GC and unwinds stack; what will be the top frame?\n\nThe top frame will be mcall. mcall calls its argument.\nAny assembly function that switches to the top of the m stack needs to be listed here.\nmcall is here.",
			"disapproval": false,
			"date": "2013-07-18 20:24:29.451540",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "in traceback we have 2 options:\n1. \"should never happen\", then we need to print/throw always\n2. can not happen only during GC, but can happen during SIGPROF and probably during SIGSEGV; then we need to print if(printing||callback) and throw if(callback)\n\nhttps://codereview.appspot.com/11533043/diff/6001/src/pkg/runtime/traceback_arm.c\nFile src/pkg/runtime/traceback_arm.c (right):\n\nhttps://codereview.appspot.com/11533043/diff/6001/src/pkg/runtime/traceback_arm.c#newcode71\nsrc/pkg/runtime/traceback_arm.c:71: runtime\u00b7printf(\"runtime: unknown pc %p after stack split\\n\", frame.pc);\nsame as in traceback_x86\n\nhttps://codereview.appspot.com/11533043/diff/6001/src/pkg/runtime/traceback_x86.c\nFile src/pkg/runtime/traceback_x86.c (right):\n\nhttps://codereview.appspot.com/11533043/diff/6001/src/pkg/runtime/traceback_x86.c#newcode55\nsrc/pkg/runtime/traceback_x86.c:55: runtime\u00b7printf(\"runtime: unknown pc %p\\n\", frame.pc);\nperhaps the can be done if(callback != nil || printing) as below\ncan be useful especially during this churn\n\nhttps://codereview.appspot.com/11533043/diff/6001/src/pkg/runtime/traceback_x86.c#newcode85\nsrc/pkg/runtime/traceback_x86.c:85: runtime\u00b7printf(\"runtime: unknown pc %p after stack split\\n\", frame.pc);\nare you sure this can not be triggered during CPU profiling?\nif this is \"should never happen\", then we need to always throw\notherwise, print if(callback||printing), throw if(callback)\n\nhttps://codereview.appspot.com/11533043/diff/6001/src/pkg/runtime/traceback_x86.c#newcode108\nsrc/pkg/runtime/traceback_x86.c:108: runtime\u00b7printf(\"runtime: unexpected return pc for %s called from %p\\n\", runtime\u00b7funcname(f), frame.lr);\nditto\n\nhttps://codereview.appspot.com/11533043/diff/6001/src/pkg/runtime/traceback_x86.c#newcode151\nsrc/pkg/runtime/traceback_x86.c:151: runtime\u00b7printf(\"runtime: inconsistent locals=%p frame=%p fp=%p sp=%p for %s\\n\", (uintptr)f->locals, (uintptr)f->frame, frame.fp, frame.sp, runtime\u00b7funcname(f));\nditto",
			"disapproval": false,
			"date": "2013-07-18 20:32:16.476920",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/18 20:24:29, rsc wrote:\n> https://codereview.appspot.com/11533043/diff/6001/src/pkg/runtime/proc.c\n> File src/pkg/runtime/proc.c (right):\n> \n> https://codereview.appspot.com/11533043/diff/6001/src/pkg/runtime/proc.c#newcode2512\n> src/pkg/runtime/proc.c:2512: f->entry == (uintptr)runtime\u00b7morestack ||\n> On 2013/07/18 20:17:42, dvyukov wrote:\n> > if a goroutine calls e.g. runtime.Gosched() which calls\n> runtime.mcall(gosched0),\n> > and then on g0 it triggers GC and unwinds stack; what will be the top frame?\n> \n> The top frame will be mcall. mcall calls its argument.\n> Any assembly function that switches to the top of the m stack needs to be listed\n> here.\n> mcall is here.\n\nOK",
			"disapproval": false,
			"date": "2013-07-18 20:34:26.762640",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11533043/diff/6001/src/pkg/runtime/traceback_x86.c\nFile src/pkg/runtime/traceback_x86.c (right):\n\nhttps://codereview.appspot.com/11533043/diff/6001/src/pkg/runtime/traceback_x86.c#newcode85\nsrc/pkg/runtime/traceback_x86.c:85: runtime\u00b7printf(\"runtime: unknown pc %p after stack split\\n\", frame.pc);\nOn 2013/07/18 20:32:16, dvyukov wrote:\n> are you sure this can not be triggered during CPU profiling?\n> if this is \"should never happen\", then we need to always throw\n> otherwise, print if(callback||printing), throw if(callback)\n\nThis specific thing cannot happen.\n\n\"always throw\" is unconditionally wrong. The problem is that throw will trigger a new stack trace, and you don't want the second one to re-throw, or else it will cause 'panic during panic' and you won't get to see the rest of the context.\n\nIf we're garbage collecting, that's worth a throw.\nIf we're printing or doing a SIGPROF trace, then I don't mind the extra print but we should probably not throw.",
			"disapproval": false,
			"date": "2013-07-18 20:40:26.287440",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/18 20:40:26, rsc wrote:\n> https://codereview.appspot.com/11533043/diff/6001/src/pkg/runtime/traceback_x86.c\n> File src/pkg/runtime/traceback_x86.c (right):\n> \n> https://codereview.appspot.com/11533043/diff/6001/src/pkg/runtime/traceback_x86.c#newcode85\n> src/pkg/runtime/traceback_x86.c:85: runtime\u00b7printf(\"runtime: unknown pc %p after\n> stack split\\n\", frame.pc);\n> On 2013/07/18 20:32:16, dvyukov wrote:\n> > are you sure this can not be triggered during CPU profiling?\n> > if this is \"should never happen\", then we need to always throw\n> > otherwise, print if(callback||printing), throw if(callback)\n> \n> This specific thing cannot happen.\n> \n> \"always throw\" is unconditionally wrong. The problem is that throw will trigger\n> a new stack trace, and you don't want the second one to re-throw, or else it\n> will cause 'panic during panic' and you won't get to see the rest of the\n> context.\n> \n> If we're garbage collecting, that's worth a throw.\n> If we're printing or doing a SIGPROF trace, then I don't mind the extra print\n> but we should probably not throw.\n\nI remember there were some cases where traceback may not work during SIGPROF, we should not print in these cases.",
			"disapproval": false,
			"date": "2013-07-18 20:45:51.675830",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-07-18 20:45:59.025630",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/18 20:45:51, dvyukov wrote:\n> On 2013/07/18 20:40:26, rsc wrote:\n> >\n> https://codereview.appspot.com/11533043/diff/6001/src/pkg/runtime/traceback_x86.c\n> > File src/pkg/runtime/traceback_x86.c (right):\n> > \n> >\n> https://codereview.appspot.com/11533043/diff/6001/src/pkg/runtime/traceback_x86.c#newcode85\n> > src/pkg/runtime/traceback_x86.c:85: runtime\u00b7printf(\"runtime: unknown pc %p\n> after\n> > stack split\\n\", frame.pc);\n> > On 2013/07/18 20:32:16, dvyukov wrote:\n> > > are you sure this can not be triggered during CPU profiling?\n> > > if this is \"should never happen\", then we need to always throw\n> > > otherwise, print if(callback||printing), throw if(callback)\n> > \n> > This specific thing cannot happen.\n> > \n> > \"always throw\" is unconditionally wrong. The problem is that throw will\n> trigger\n> > a new stack trace, and you don't want the second one to re-throw, or else it\n> > will cause 'panic during panic' and you won't get to see the rest of the\n> > context.\n> > \n> > If we're garbage collecting, that's worth a throw.\n> > If we're printing or doing a SIGPROF trace, then I don't mind the extra print\n> > but we should probably not throw.\n> \n> I remember there were some cases where traceback may not work during SIGPROF, we\n> should not print in these cases.\n\nWhat are those cases? Do you remember the details? If not, I'd like to keep the print until we do know the details, and then record them in comments in the file.",
			"disapproval": false,
			"date": "2013-07-18 20:46:20.978660",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=64b4f1c2e1d3 ***\n\nruntime: handle morestack/lessstack in stack trace\n\nIf we start a garbage collection on g0 during a\nstack split or unsplit, we'll see morestack or lessstack\nat the top of the stack. Record an argument frame size\nfor those, and record that they terminate the stack.\n\nR=golang-dev, dvyukov\nCC=golang-dev\nhttps://codereview.appspot.com/11533043",
			"disapproval": false,
			"date": "2013-07-18 20:53:49.798080",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/18 20:46:20, rsc wrote:\n> On 2013/07/18 20:45:51, dvyukov wrote:\n> > On 2013/07/18 20:40:26, rsc wrote:\n> > >\n> >\n> https://codereview.appspot.com/11533043/diff/6001/src/pkg/runtime/traceback_x86.c\n> > > File src/pkg/runtime/traceback_x86.c (right):\n> > > \n> > >\n> >\n> https://codereview.appspot.com/11533043/diff/6001/src/pkg/runtime/traceback_x86.c#newcode85\n> > > src/pkg/runtime/traceback_x86.c:85: runtime\u00b7printf(\"runtime: unknown pc %p\n> > after\n> > > stack split\\n\", frame.pc);\n> > > On 2013/07/18 20:32:16, dvyukov wrote:\n> > > > are you sure this can not be triggered during CPU profiling?\n> > > > if this is \"should never happen\", then we need to always throw\n> > > > otherwise, print if(callback||printing), throw if(callback)\n> > > \n> > > This specific thing cannot happen.\n> > > \n> > > \"always throw\" is unconditionally wrong. The problem is that throw will\n> > trigger\n> > > a new stack trace, and you don't want the second one to re-throw, or else it\n> > > will cause 'panic during panic' and you won't get to see the rest of the\n> > > context.\n> > > \n> > > If we're garbage collecting, that's worth a throw.\n> > > If we're printing or doing a SIGPROF trace, then I don't mind the extra\n> print\n> > > but we should probably not throw.\n> > \n> > I remember there were some cases where traceback may not work during SIGPROF,\n> we\n> > should not print in these cases.\n> \n> What are those cases? Do you remember the details? If not, I'd like to keep the\n> print until we do know the details, and then record them in comments in the\n> file.\n\n\nThat case is:\n\n>>>I have not done the system call stubs in sys_*.s.\n>>>I hope to avoid that, because those do not block, so those\n>>>frames will not appear in stack traces during garbage\n>>>collection.\n\n>>But traceback currently crashes if can't derive argsize during cpu\n>>profiling as well.\n\n>I intend to disable arg size lookup during cpu profiling. The information is unused there.",
			"disapproval": false,
			"date": "2013-07-18 20:56:43.830830",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 11533043: runtime: handle morestack/lessstack in stack trace",
	"created": "2013-07-18 17:13:38.864480",
	"patchsets": [
		1,
		3001,
		6001,
		11001,
		10002
	],
	"modified": "2013-07-18 20:57:07.199270",
	"closed": true,
	"issue": 11533043
}