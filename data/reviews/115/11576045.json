{
	"description": "go.tools/ssa: big simplification: use new types.MethodSet to compute ssa.MethodSet.\n\nDetails:\n- emitImplicitSelections now emits common code for implicit\n  field selections in both method and field lookups.\n  The last iteration over the LookupFieldOrMethod indices---the explicit,\n  final index---is handled by the caller.\n- anonFieldPath, candidate and the BFS algo in buildMethodSet are all gone.",
	"cc": [
		"gri@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.tools",
			"disapproval": false,
			"date": "2013-07-19 19:01:07.109580",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/11576045/diff/12001/ssa/create.go\nFile ssa/create.go (right):\n\nhttps://codereview.appspot.com/11576045/diff/12001/ssa/create.go#newcode235\nssa/create.go:235: // TODO(adonovan): is this duplicate-free?  Check.\nit should be\n\nhttps://codereview.appspot.com/11576045/diff/12001/ssa/promote.go\nFile ssa/promote.go (right):\n\nhttps://codereview.appspot.com/11576045/diff/12001/ssa/promote.go#newcode27\nssa/promote.go:27: // member; only when generating object code for MakeInterface needs\n...; only generation of ...\n\nhttps://codereview.appspot.com/11576045/diff/12001/ssa/promote.go#newcode60\nssa/promote.go:60: mset[makeId(obj.Func.Name(), obj.Func.Pkg())] = makeMethod(prog, typ, obj)\nfyi, Objects have a \"uniqueId\" method. perhaps I should export it, then you might be able to get rid of makeId? I could call it Id.\n\nhttps://codereview.appspot.com/11576045/diff/12001/ssa/promote.go#newcode113\nssa/promote.go:113: sig := types.NewSignature(types.NewVar(token.NoPos, nil, \"recv\", typ), old.Params(), old.Results(), old.IsVariadic())\nuse the old receiver name instead of recv?",
			"disapproval": false,
			"date": "2013-07-19 21:25:04.024810",
			"approval": true
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11576045/diff/12001/ssa/create.go\nFile ssa/create.go (right):\n\nhttps://codereview.appspot.com/11576045/diff/12001/ssa/create.go#newcode235\nssa/create.go:235: // TODO(adonovan): is this duplicate-free?  Check.\nOn 2013/07/19 21:25:04, gri wrote:\n> it should be\n\nI meant the set of .Func objects passed to memberFromObject; I doubt this is duplicate free, which is bad.  I've updated the TODO.\n\nhttps://codereview.appspot.com/11576045/diff/12001/ssa/promote.go\nFile ssa/promote.go (right):\n\nhttps://codereview.appspot.com/11576045/diff/12001/ssa/promote.go#newcode27\nssa/promote.go:27: // member; only when generating object code for MakeInterface needs\nOn 2013/07/19 21:25:04, gri wrote:\n> ...; only generation of ...\n\nDone.\n\nhttps://codereview.appspot.com/11576045/diff/12001/ssa/promote.go#newcode60\nssa/promote.go:60: mset[makeId(obj.Func.Name(), obj.Func.Pkg())] = makeMethod(prog, typ, obj)\nOn 2013/07/19 21:25:04, gri wrote:\n> fyi, Objects have a \"uniqueId\" method. perhaps I should export it, then you\n> might be able to get rid of makeId? I could call it Id.\n\nYes, that would be good.  In almost all places I call makeId, the arguments are (obj.Pkg(), obj.Name()), and the remaining ones I will probably eliminate given your pending CL.\n\nhttps://codereview.appspot.com/11576045/diff/12001/ssa/promote.go#newcode113\nssa/promote.go:113: sig := types.NewSignature(types.NewVar(token.NoPos, nil, \"recv\", typ), old.Params(), old.Results(), old.IsVariadic())\nOn 2013/07/19 21:25:04, gri wrote:\n> use the old receiver name instead of recv?\n\nThe names aren't semantically significant.  And until that bug (mentioned below) is fixed, I don't think there's a way for me to access the old receiver in the interface case.",
			"disapproval": false,
			"date": "2013-07-19 21:32:50.876500",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=541cd078ee82&repo=tools ***\n\ngo.tools/ssa: big simplification: use new types.MethodSet to compute ssa.MethodSet.\n\nDetails:\n- emitImplicitSelections now emits common code for implicit\n  field selections in both method and field lookups.\n  The last iteration over the LookupFieldOrMethod indices---the explicit,\n  final index---is handled by the caller.\n- anonFieldPath, candidate and the BFS algo in buildMethodSet are all gone.\n\nR=gri\nCC=golang-dev\nhttps://codereview.appspot.com/11576045",
			"disapproval": false,
			"date": "2013-07-19 21:35:31.713870",
			"approval": false
		}
	],
	"owner_email": "adonovan@google.com",
	"private": false,
	"base_url": "",
	"owner": "adonovan",
	"subject": "code review 11576045: go.tools/ssa: big simplification: use new types.MethodS...",
	"created": "2013-07-19 18:33:04.474960",
	"patchsets": [
		1,
		3001,
		5001,
		9001,
		12001,
		17002
	],
	"modified": "2013-07-19 21:35:32.664360",
	"closed": true,
	"issue": 11576045
}