{
	"description": "go.tools/go/types: request type Info via maps instead of callbacks\n\nAllmost all uses of go/types that wanted the type\ninformation computed, installed callback functions\nthat stored the information in maps. Most of the\ntime this is the only thing that could be done because\nthere is no guarantee that types are completely set\nup before the end of type-checking.\n\nThis CL removes the respective Context callbacks in favor\nof corresponding maps that collect the desired information\non demand, grouped together in an optional Info struct.",
	"cc": [
		"adonovan@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ok, I'll stick with this one.\n\nLet me think about SyntaxInfo vs Info. I have another CL in this space coming soon (dealing with retaining of AST links).\n\nhttps://codereview.appspot.com/11530044/diff/4019/go/types/api.go\nFile go/types/api.go (right):\n\nhttps://codereview.appspot.com/11530044/diff/4019/go/types/api.go#newcode87\ngo/types/api.go:87: // Info holds flags and result type information for a package.\nOn 2013/07/18 19:47:31, adonovan wrote:\n> What flags?\n> \n> Perhaps the key thing about this struct is that it holds derived facts about the\n> syntax.  Call it SyntaxInfo?\n\ndregg - removed",
			"disapproval": false,
			"date": "2013-07-18 19:59:58.986960",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.tools",
			"disapproval": false,
			"date": "2013-07-18 19:38:28.091090",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nAll three of these variants seem fine to me; because this part of the API is much less frequently accessed than (say) the Type and Object interfaces and their concrete types, I don't think there's as much pressure to make it concise, and furthermore, as I mentioned before, I don't think we'll know what we need until we have more experience.\n\n(One thing I'd like to understand better is whether the 'importer' should actually become a more central part of the API.  Currently it's just an anonymous function hook which belies the fact that it *must* be a stateful closure.  Also, the importer.Importer class exists because it's not easy to implement.)\n\nhttps://codereview.appspot.com/11530044/diff/4019/go/types/api.go\nFile go/types/api.go (right):\n\nhttps://codereview.appspot.com/11530044/diff/4019/go/types/api.go#newcode87\ngo/types/api.go:87: // Info holds flags and result type information for a package.\nWhat flags?\n\nPerhaps the key thing about this struct is that it holds derived facts about the syntax.  Call it SyntaxInfo?",
			"disapproval": false,
			"date": "2013-07-18 19:47:30.766120",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=2f778fc23eea&repo=tools ***\n\ngo.tools/go/types: request type Info via maps instead of callbacks\n\nAllmost all uses of go/types that wanted the type\ninformation computed, installed callback functions\nthat stored the information in maps. Most of the\ntime this is the only thing that could be done because\nthere is no guarantee that types are completely set\nup before the end of type-checking.\n\nThis CL removes the respective Context callbacks in favor\nof corresponding maps that collect the desired information\non demand, grouped together in an optional Info struct.\n\nR=adonovan\nCC=golang-dev\nhttps://codereview.appspot.com/11530044",
			"disapproval": false,
			"date": "2013-07-18 20:09:06.469590",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 11530044: go.tools/go/types: request type Info via maps instead o...",
	"created": "2013-07-18 19:29:05.622380",
	"patchsets": [
		1,
		3001,
		4018,
		4019,
		11001,
		14001
	],
	"modified": "2013-07-18 20:09:07.730570",
	"closed": true,
	"issue": 11530044
}