{
	"description": "image/jpeg: add encoder",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"nigeltao@golang.org",
		"r@golang.org",
		"r@google.com"
	],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"raph@google.com",
				"nigeltao@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "a few cosmetic things. i haven't dug in yet\n\nhttp://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/fdct.go\nFile src/pkg/image/jpeg/fdct.go (right):\n\nhttp://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/fdct.go#newcode31\nsrc/pkg/image/jpeg/fdct.go:31: for y := 0; y < 8; y++ {\nprobably want (or maybe have) a constant for 8, since we have one for 64, however 8 is also easy to understand and the code uses 0, 1, 2, 3, 4, 5, 6, 7 too. maybe just remind with a comment that blockSize is 8*8.\n\nhttp://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/fdct.go#newcode45\nsrc/pkg/image/jpeg/fdct.go:45: tmp3 = b[y*8+3] - b[y*8+4]\nthis code is fine for now but you can avoid half of the indexing operations.\n\nhttp://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/writer.go\nFile src/pkg/image/jpeg/writer.go (right):\n\nhttp://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/writer.go#newcode24\nsrc/pkg/image/jpeg/writer.go:24: type encoder struct {\nthey're obvious in meaning but still, these fields should have little comments\n\nhttp://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/writer.go#newcode42\nsrc/pkg/image/jpeg/writer.go:42: bitsDcLuminance = []byte{0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0}\nif you size these guys (you can use [...]) they'll be arrays, not slices, and indexing can be more efficient.\nbut if you're not sure of the tradeoffs, leave them as is for now.\n\nhttp://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/writer.go#newcode211\nsrc/pkg/image/jpeg/writer.go:211: 0x64, 0x00, 0x64, 0x00, 0x00})\nthese should be defined once  - no need to reallocate these objects every time",
			"disapproval": false,
			"date": "2011-02-22 19:54:46.811014",
			"approval": false
		},
		{
			"sender": "raph@google.com",
			"recipients": [
				"raph@google.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello nigeltao (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-02-21 01:47:19.784438",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"raph@google.com",
				"nigeltao@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Just a bunch of very quick, mostly superficial comments for now. I'll have a proper look at the actual algorithm later.\n\nAlso, it might be nice to have a writer_test that starts with a test pattern image, encodes it, decodes it, and checks that the result is reasonably similar to the original test pattern. image/png/writer_test.go has some code that you could re-use for that.\n\nAdding R=r since I think Rob was also interested in a JPEG encoder.\n\nhttp://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/writer.go\nFile src/pkg/image/jpeg/writer.go (right):\n\nhttp://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/writer.go#newcode12\nsrc/pkg/image/jpeg/writer.go:12: // \"fmt\"\nRemove this, as well as the commented out fmt calls below.\n\nhttp://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/writer.go#newcode179\nsrc/pkg/image/jpeg/writer.go:179: // By spec, 1 <= nbits <= 16\nCan you be more specific about which part of the spec? For example, see the comments in image/jpeg/reader.go.\n\nhttp://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/writer.go#newcode460\nsrc/pkg/image/jpeg/writer.go:460: type UnknownColorModelError string\nvar (\n  ErrUnknownColorMode = os.NewError(\"jpeg: unknown color model\")\n  ErrUnknownSubsamplingMethod = os.NewError(\"jpeg: unknown subsampling method\")\n)\n\nhttp://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/writer.go#newcode473\nsrc/pkg/image/jpeg/writer.go:473: subsample int\nThese fields need to start with a capital letter to be used outside of the jpeg package.\n\nhttp://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/writer.go#newcode522\nsrc/pkg/image/jpeg/writer.go:522: var e encoder\nWe usually use a var ( ... ) block instead of multiple lines starting with var. Same elsewhere in this file.\n\nhttp://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/writer.go#newcode525\nsrc/pkg/image/jpeg/writer.go:525: e.w = bw\ne.w = bufio.NewWriter(w) and delete the two lines above.\n\nhttp://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/writer.go#newcode540\nsrc/pkg/image/jpeg/writer.go:540: return UnknownColorModelError(\"\")\nI don't understand this restriction. Can't we encode a paletted image as a non-paletted JPEG, since a paletted image implements At(x, y).RGBA()?\n\nhttp://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/writer.go#newcode542\nsrc/pkg/image/jpeg/writer.go:542: e.writeHeader()\nAll these write methods should return an os.Error, and if it returs non-nil you should pass it up the call chain.",
			"disapproval": false,
			"date": "2011-02-21 04:18:21.830430",
			"approval": false
		},
		{
			"sender": "raph@google.com",
			"recipients": [
				"raph@google.com",
				"nigeltao@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/02/21 04:18:21, nigeltao wrote:\n> Just a bunch of very quick, mostly superficial comments for now. I'll have a\n> proper look at the actual algorithm later.\n> \n> Also, it might be nice to have a writer_test that starts with a test pattern\n> image, encodes it, decodes it, and checks that the result is reasonably similar\n> to the original test pattern. image/png/writer_test.go has some code that you\n> could re-use for that.\n\nI agree that's a good idea. Can I do that in a separate change?\n\n> Adding R=r since I think Rob was also interested in a JPEG encoder.\n> \n> http://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/writer.go\n> File src/pkg/image/jpeg/writer.go (right):\n> \n> http://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/writer.go#newcode12\n> src/pkg/image/jpeg/writer.go:12: // \"fmt\"\n> Remove this, as well as the commented out fmt calls below.\n\nDone.\n\nhttp://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/writer.go#newcode179\n> src/pkg/image/jpeg/writer.go:179: // By spec, 1 <= nbits <= 16\n> Can you be more specific about which part of the spec? For example, see the\n> comments in image/jpeg/reader.go.\n\nDone.\n\nhttp://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/writer.go#newcode460\n> src/pkg/image/jpeg/writer.go:460: type UnknownColorModelError string\n> var (\n>   ErrUnknownColorMode = os.NewError(\"jpeg: unknown color model\")\n>   ErrUnknownSubsamplingMethod = os.NewError(\"jpeg: unknown subsampling method\")\n> )\n\nDone.\n\nhttp://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/writer.go#newcode473\n> src/pkg/image/jpeg/writer.go:473: subsample int\n> These fields need to start with a capital letter to be used outside of the jpeg\n> package.\n\nGood catch. Done.\n\nhttp://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/writer.go#newcode522\n> src/pkg/image/jpeg/writer.go:522: var e encoder\n> We usually use a var ( ... ) block instead of multiple lines starting with var.\n> Same elsewhere in this file.\n\nNot relevant, as code has changed.\n\nhttp://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/writer.go#newcode525\n> src/pkg/image/jpeg/writer.go:525: e.w = bw\n> e.w = bufio.NewWriter(w) and delete the two lines above.\n\nDone.\n\nhttp://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/writer.go#newcode540\n> src/pkg/image/jpeg/writer.go:540: return UnknownColorModelError(\"\")\n> I don't understand this restriction. Can't we encode a paletted image as a\n> non-paletted JPEG, since a paletted image implements At(x, y).RGBA()?\n\nDone. Perhaps I've now made it too lenient, although it feels to me that converting arbitrary images into RGB is reasonable.\n\nhttp://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/writer.go#newcode542\n> src/pkg/image/jpeg/writer.go:542: e.writeHeader()\n> All these write methods should return an os.Error, and if it returs non-nil you\n> should pass it up the call chain.\n\nDone, but with some trepidation. My motivation in originally not doing so was to rely on the guarantee by bufio.Writer that if a write to the underlying writer fails, subsequent writes woud be swallowed, but that the err would be available later, particularly on the Flush call. Relying on this simplifies the code significantly, because there are now 42 instances of checking e.err, or 19% of the total number of lines of code (!).\n\nBut I discussed this with Andrew Gerrand, and we came to the conclusion that it was, on balance, the best thing to do, so here it is.",
			"disapproval": false,
			"date": "2011-03-26 22:29:55.725454",
			"approval": false
		},
		{
			"sender": "raph@google.com",
			"recipients": [
				"raph@google.com",
				"nigeltao@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/02/22 19:54:46, r wrote:\n> a few cosmetic things. i haven't dug in yet\n> \n> http://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/fdct.go\n> File src/pkg/image/jpeg/fdct.go (right):\n> \n> http://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/fdct.go#newcode31\n> src/pkg/image/jpeg/fdct.go:31: for y := 0; y < 8; y++ {\n> probably want (or maybe have) a constant for 8, since we have one for 64,\n> however 8 is also easy to understand and the code uses 0, 1, 2, 3, 4, 5, 6, 7\n> too. maybe just remind with a comment that blockSize is 8*8.\n\nDone (comment). Here, I was following the example of idct.go. Generally I feel it's most important to be consistent.\n\nhttp://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/fdct.go#newcode45\n> src/pkg/image/jpeg/fdct.go:45: tmp3 = b[y*8+3] - b[y*8+4]\n> this code is fine for now but you can avoid half of the indexing operations.\n\nDone. Of course, a good compiler would optimize that for you, but in the meantime...\n\n> http://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/writer.go\n> File src/pkg/image/jpeg/writer.go (right):\n> \n> http://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/writer.go#newcode24\n> src/pkg/image/jpeg/writer.go:24: type encoder struct {\n> they're obvious in meaning but still, these fields should have little comments\n\nDone.\n\nhttp://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/writer.go#newcode42\n> src/pkg/image/jpeg/writer.go:42: bitsDcLuminance = []byte{0, 1, 5, 1, 1, 1, 1,\n> 1, 1, 0, 0, 0, 0, 0, 0, 0}\n> if you size these guys (you can use [...]) they'll be arrays, not slices, and\n> indexing can be more efficient.\n> but if you're not sure of the tradeoffs, leave them as is for now.\n\nI tried this, but then passing the sized byte array to e.w.Write() failed, because that expects a slice. Given the choice, it seems like a better idea not to allocate a new slice on write, but that's arguable either way. Also see above wrt good compiler.\n\nhttp://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/writer.go#newcode211\n> src/pkg/image/jpeg/writer.go:211: 0x64, 0x00, 0x64, 0x00, 0x00})\n> these should be defined once  - no need to reallocate these objects every time\n\nDone.",
			"disapproval": false,
			"date": "2011-03-26 22:33:38.661181",
			"approval": false
		},
		{
			"sender": "raph@google.com",
			"recipients": [
				"raph@google.com",
				"nigeltao@golang.org",
				"r@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello nigeltao, r, r2 (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-03-27 01:33:30.201894",
			"approval": false
		},
		{
			"sender": "raph@google.com",
			"recipients": [
				"raph@google.com",
				"nigeltao@golang.org",
				"r@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Ok, I'm hoping this is ready now. Still working on writing tests...\n\nhttp://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/writer.go\nFile src/pkg/image/jpeg/writer.go (right):\n\nhttp://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/writer.go#newcode42\nsrc/pkg/image/jpeg/writer.go:42: bitsDcLuminance = []byte{0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0}\nOn 2011/02/22 19:54:46, r wrote:\n> if you size these guys (you can use [...]) they'll be arrays, not slices, and\n> indexing can be more efficient.\n> but if you're not sure of the tradeoffs, leave them as is for now.\n\nOk, done. Thanks for the advice re stack allocation.",
			"disapproval": false,
			"date": "2011-03-27 00:05:18.770091",
			"approval": false
		},
		{
			"sender": "raph@google.com",
			"recipients": [
				"raph@google.com",
				"nigeltao@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello nigeltao, r (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-03-26 22:34:45.428800",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> \n> \n> http://codereview.appspot.com/4186064/diff/2001/src/pkg/image/jpeg/writer.go#newcode42\n>> src/pkg/image/jpeg/writer.go:42: bitsDcLuminance = []byte{0, 1, 5, 1,\n> 1, 1, 1,\n>> 1, 1, 0, 0, 0, 0, 0, 0, 0}\n>> if you size these guys (you can use [...]) they'll be arrays, not\n> slices, and\n>> indexing can be more efficient.\n>> but if you're not sure of the tradeoffs, leave them as is for now.\n> \n> I tried this, but then passing the sized byte array to e.w.Write()\n> failed, because that expects a slice. Given the choice, it seems like a\n> better idea not to allocate a new slice on write, but that's arguable\n> either way. Also see above wrt good compiler.\n\nYou don't allocate a slice. All that happens is a slice header, on the stack, gets filled in.  It's super cheap.\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2011-03-26 23:32:15.970574",
			"approval": false
		},
		{
			"sender": "raph@google.com",
			"recipients": [
				"raph@google.com",
				"nigeltao@golang.org",
				"r@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello nigeltao, r, r2 (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-03-27 00:03:13.830036",
			"approval": false
		},
		{
			"sender": "raph@google.com",
			"recipients": [
				"raph@google.com",
				"nigeltao@golang.org",
				"r@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/03/27 01:33:30, raph wrote:\n> Hello nigeltao, r, r2 (cc: mailto:golang-dev@googlegroups.com),\n> \n> Please take another look.\n\nSorry for the clumsiness in using the codereview tool. I had to dig a bit deeper to figure out how to add files to an existing CL, and separate upload from mail so I could write meaningful comments. In any case, a roundtrip test is now added, as per Nigel's request.",
			"disapproval": false,
			"date": "2011-03-27 01:49:33.800105",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"raph@google.com",
				"nigeltao@golang.org",
				"r@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "You could also cut down on the number of intermediate allocations by adding a few (re-usable) buffers to the encoder struct, but there's more than enough to chew on for now.\n\nhttp://codereview.appspot.com/4186064/diff/21001/src/pkg/image/jpeg/Makefile\nFile src/pkg/image/jpeg/Makefile (right):\n\nhttp://codereview.appspot.com/4186064/diff/21001/src/pkg/image/jpeg/Makefile#newcode11\nsrc/pkg/image/jpeg/Makefile:11: fdct.go\\\nPlease keep this list sorted alphabetically.\n\nhttp://codereview.appspot.com/4186064/diff/21001/src/pkg/image/jpeg/fdct.go\nFile src/pkg/image/jpeg/fdct.go (right):\n\nhttp://codereview.appspot.com/4186064/diff/21001/src/pkg/image/jpeg/fdct.go#newcode8\nsrc/pkg/image/jpeg/fdct.go:8: // distribution\nAdd a trailing full stop to complete the sentence.\n\nAlso, can you add a link or a definitive reference to the IJG distribution?\n\nFinally, can you confirm the licensing requirements for the IJG code?\n\nhttp://codereview.appspot.com/4186064/diff/21001/src/pkg/image/jpeg/fdct.go#newcode11\nsrc/pkg/image/jpeg/fdct.go:11: fix_0_298631336 = 2446  /* FIX(0.298631336) */\nI'd drop the /* FIX(...) */ comments. They don't seem to add anything above the constant name.\n\nhttp://codereview.appspot.com/4186064/diff/21001/src/pkg/image/jpeg/fdct.go#newcode31\nsrc/pkg/image/jpeg/fdct.go:31: // Pass 1: process rows\nTrailing full stop, and again below in many places.\n\nhttp://codereview.appspot.com/4186064/diff/21001/src/pkg/image/jpeg/fdct.go#newcode65\nsrc/pkg/image/jpeg/fdct.go:65: // Odd part per figure 8\nFigure 8 of what?\n\nhttp://codereview.appspot.com/4186064/diff/21001/src/pkg/image/jpeg/fdct.go#newcode70\nsrc/pkg/image/jpeg/fdct.go:70: z1 = (tmp12 + tmp13) * fix_1_175875602 /*  c3 */\nI'd drop the /* c3 */ comments unless you give some context somewhere for what c3 means.\n\nhttp://codereview.appspot.com/4186064/diff/21001/src/pkg/image/jpeg/fdct.go#newcode91\nsrc/pkg/image/jpeg/fdct.go:91: // of 8\nMove \"of 8.\" to the previous comment line.\n\nhttp://codereview.appspot.com/4186064/diff/21001/src/pkg/image/jpeg/writer.go\nFile src/pkg/image/jpeg/writer.go (right):\n\nhttp://codereview.appspot.com/4186064/diff/21001/src/pkg/image/jpeg/writer.go#newcode23\nsrc/pkg/image/jpeg/writer.go:23: type encoder struct {\nPlease move the definition of the encoder type to line 178, just above its methods.\n\nhttp://codereview.appspot.com/4186064/diff/21001/src/pkg/image/jpeg/writer.go#newcode47\nsrc/pkg/image/jpeg/writer.go:47: 0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12,\nIs it possible to document these magic numbers? Do they come from the JPEG spec? There isn't an obvious pattern, AFAICT.\n\nhttp://codereview.appspot.com/4186064/diff/21001/src/pkg/image/jpeg/writer.go#newcode178\nsrc/pkg/image/jpeg/writer.go:178: // According to Annex C of the spec, Huffman code lenghts greater than 16 bits\nTypo in \"lengths\".\n\nhttp://codereview.appspot.com/4186064/diff/21001/src/pkg/image/jpeg/writer.go#newcode187\nsrc/pkg/image/jpeg/writer.go:187: e.err = e.w.WriteByte(b)\nRather than having an e.err field, I think it is more idiomatic for all such methods to return an os.Error.\n\nhttp://codereview.appspot.com/4186064/diff/21001/src/pkg/image/jpeg/writer.go#newcode218\nsrc/pkg/image/jpeg/writer.go:218: _, e.err = e.w.Write([]byte{0xff, 0xd8}) // SOI marker\nreader.go already defines const soiMarker = 0xd8. You should be able to replace quite a few magic numbers in this file with named constants.\n\nhttp://codereview.appspot.com/4186064/diff/21001/src/pkg/image/jpeg/writer.go#newcode325\nsrc/pkg/image/jpeg/writer.go:325: func roundDivide(a int, b int) int {\ns/a int, b int/a, b int/\n\nhttp://codereview.appspot.com/4186064/diff/21001/src/pkg/image/jpeg/writer.go#newcode332\nsrc/pkg/image/jpeg/writer.go:332: func (e *encoder) writeBlock(b *[blockSize]int, tab int, last int) int {\nGiven the number of times you use a [blockSize]int, it might be useful to declare a \"block\" type above:\ntype block [blockSize]int\n\nhttp://codereview.appspot.com/4186064/diff/21001/src/pkg/image/jpeg/writer.go#newcode402\nsrc/pkg/image/jpeg/writer.go:402: FIX_0_299   = 19595\nIt is possible to harmonize the style used in rgbToYCbCr here and the calcPixel method in reader.go?\n\nIf not, at the very least, these constants' names should start with a lower case letter so that they are not exported. You can also move them inside the rgbToYCbCr function.\n\nhttp://codereview.appspot.com/4186064/diff/21001/src/pkg/image/jpeg/writer.go#newcode414\nsrc/pkg/image/jpeg/writer.go:414: // Convert one 8x8 color image block to YCbCr\n// rgbToYCbCr converts an 8x8 color block to YCbCr.\n\nDoc comments should start with the name of the thing they are documenting, and end with a full stop. Similarly, the comment for roundDivide above should start with:\n\n// roundDivide returns a/b rounded to the nearest int, instead of rounded down.\n\nhttp://codereview.appspot.com/4186064/diff/21001/src/pkg/image/jpeg/writer.go#newcode415\nsrc/pkg/image/jpeg/writer.go:415: func rgbtoYCbCr(m image.Image, x0 int, y0 int, yblock *[blockSize]int, cbblock *[blockSize]int, crblock *[blockSize]int) {\ns/rgbto/rgbTo/\n\nhttp://codereview.appspot.com/4186064/diff/21001/src/pkg/image/jpeg/writer.go#newcode430\nsrc/pkg/image/jpeg/writer.go:430: // Note: just shifting creates a small error for proper 16-bit images\nWhat's the error? Do you mean to do something like\nr := int((ur + 128) >> 8)?\n\nhttp://codereview.appspot.com/4186064/diff/21001/src/pkg/image/jpeg/writer.go#newcode445\nsrc/pkg/image/jpeg/writer.go:445: var color444SOI = []byte{0xff, 0xda, 0x00, 0x0c, 0x03, 0x01, 0x00, 0x02, 0x11,\nCan you add a comment explaining these magic numbers?\n\nhttp://codereview.appspot.com/4186064/diff/21001/src/pkg/image/jpeg/writer.go#newcode453\nsrc/pkg/image/jpeg/writer.go:453: m := e.m\nThis variable doesn't seem to be pulling its weight. Just use e.m below.\n\nhttp://codereview.appspot.com/4186064/diff/21001/src/pkg/image/jpeg/writer.go#newcode455\nsrc/pkg/image/jpeg/writer.go:455: var yblock [blockSize]int\nvar (\n  yblock, cbblock, crblock [blockSize]int\n  lasty, lastcr, lastcb int\n)\n\nhttp://codereview.appspot.com/4186064/diff/21001/src/pkg/image/jpeg/writer.go#newcode507\nsrc/pkg/image/jpeg/writer.go:507: cbblock[i] = new([blockSize]int)\nWhy is cbblock a [4]*[blockSize]int and not a [4][blockSize]int (and similarly, scaleBlock's second argument should become a *[4][blockSize]int)?\n\nIf you do the latter, you can still get to the address of an element like &cbblock[0] to pass to rgbToYCbCr.\n\nhttp://codereview.appspot.com/4186064/diff/21001/src/pkg/image/jpeg/writer.go#newcode586\nsrc/pkg/image/jpeg/writer.go:586: if quality <= 0 {\nif quality < 1 {\n\nhttp://codereview.appspot.com/4186064/diff/21001/src/pkg/image/jpeg/writer.go#newcode605\nsrc/pkg/image/jpeg/writer.go:605: if val <= 0 {\nif val < 1 {\n\nhttp://codereview.appspot.com/4186064/diff/21001/src/pkg/image/jpeg/writer.go#newcode624\nsrc/pkg/image/jpeg/writer.go:624: e.w = bufio.NewWriter(w)\nI wouldn't add buffering if w was already buffered, and *bufio.Writer isn't the only Writer implementation that is buffered.\n\nI would define a writer interface and check for that, like what compress/lzw/writer.go does.\n\nhttp://codereview.appspot.com/4186064/diff/21001/src/pkg/image/jpeg/writer_test.go\nFile src/pkg/image/jpeg/writer_test.go (right):\n\nhttp://codereview.appspot.com/4186064/diff/21001/src/pkg/image/jpeg/writer_test.go#newcode58\nsrc/pkg/image/jpeg/writer_test.go:58: \"video-001\",\nI'd drop the basn cases, just use \"../testdata/video-001.png\" here, and remove the src/pkg/image/jpeg/testdata/images/* files that you were going to add.\n\nIf you want more photographic test images, we could probably use some from http://code.google.com/speed/webp/gallery.html, but that should be a separate changelist.\n\nSimilarly, we can add grayscale imagery in a separate changelist.\n\nhttp://codereview.appspot.com/4186064/diff/21001/src/pkg/image/jpeg/writer_test.go#newcode62\nsrc/pkg/image/jpeg/writer_test.go:62: // Also note, exact pixel tolerance should be readjusted emprically as more test images are added.\nTypo in empirically.\n\nhttp://codereview.appspot.com/4186064/diff/21001/src/pkg/image/jpeg/writer_test.go#newcode63\nsrc/pkg/image/jpeg/writer_test.go:63: var tolerances = []int{16 * 256, 84 * 256}\nWow, 84/256 in chroma-space even at high quality!? How does libjpeg's encoding compare?",
			"disapproval": false,
			"date": "2011-03-29 08:40:55.499566",
			"approval": false
		}
	],
	"owner_email": "raph@google.com",
	"private": false,
	"base_url": "",
	"owner": "raph",
	"subject": "code review 4186064: image/jpeg: add encoder",
	"created": "2011-02-21 01:37:28.055782",
	"patchsets": [
		1,
		2001,
		10001,
		16001,
		15002,
		21001
	],
	"modified": "2011-03-29 08:40:55.499566",
	"closed": false,
	"issue": 4186064
}