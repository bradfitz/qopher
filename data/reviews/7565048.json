{
	"description": "runtime: refactor os-specific code\n\nthread_GOOS.c becomes os_GOOS.c.\n\nsignal_GOOS_GOARCH.c becomes os_GOOS_GOARCH.c,\nbut with non-GOARCH-specific code moved into os_GOOS.c.\n\nThe actual arch-specific signal handler moves into signal_GOARCH.c\nto avoid per-GOOS duplication.\n\nNew files signal_GOOS_GOARCH.h provide macros for\naccessing fields of the very system-specific signal info structs.\n\nLots moving, but nothing changing.\nThis is a preliminarly cleanup so I can work on the signal\nhandling code to fix some open issues without having to\nmake each change 13 times.\n\nTested on Linux and OS X, 386 and amd64.\nWill fix Plan 9, Windows, and ARM after the fact if necessary.\n(Plan 9 and Windows should be fine; ARM will probably have some typos.)\n\nNet effect: -1081 lines of code.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org"
	],
	"reviewers": [
		"akumar@mail.nanosouffle.net"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=9d23267675ef ***\n\nruntime: refactor os-specific code\n\nthread_GOOS.c becomes os_GOOS.c.\n\nsignal_GOOS_GOARCH.c becomes os_GOOS_GOARCH.c,\nbut with non-GOARCH-specific code moved into os_GOOS.c.\n\nThe actual arch-specific signal handler moves into signal_GOARCH.c\nto avoid per-GOOS duplication.\n\nNew files signal_GOOS_GOARCH.h provide macros for\naccessing fields of the very system-specific signal info structs.\n\nLots moving, but nothing changing.\nThis is a preliminarly cleanup so I can work on the signal\nhandling code to fix some open issues without having to\nmake each change 13 times.\n\nTested on Linux and OS X, 386 and amd64.\nWill fix Plan 9, Windows, and ARM after the fact if necessary.\n(Plan 9 and Windows should be fine; ARM will probably have some typos.)\n\nNet effect: -1081 lines of code.\n\nR=golang-dev, r\nCC=golang-dev\nhttps://codereview.appspot.com/7565048",
			"disapproval": false,
			"date": "2013-03-14 18:35:17.039170",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2013-03-14 18:31:29.137530",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-03-14 18:34:12.892720",
			"approval": true
		},
		{
			"sender": "akumar@mail.nanosouffle.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 14 March 2013 11:35,  <rsc@golang.org> wrote:\r\n> The actual arch-specific signal handler moves into signal_GOARCH.c\r\n> to avoid per-GOOS duplication.\r\n\r\nHowever, this is still only built for UNIX systems, so the name\r\nseems to be inconsistent with the general naming scheme.\r\nSince the entire signal handling code for Plan 9 and Windows\r\nhas been moved into os_GOOS_GOARCH.c files respectively,\r\nperhaps even signal_GOARCH.c should become\r\nos_unix_GOARCH.c? Otherwise, I'd suggest at least\r\nsignal_unix_GOARCH.c.\r\n\r\n> New files signal_GOOS_GOARCH.h provide macros for\r\n> accessing fields of the very system-specific signal info structs.\r\n\r\nAlso, these might be better merged into defs_GOOS_GARCH.h,\r\nin line with the former approach outlined above.\r\n",
			"disapproval": false,
			"date": "2013-03-15 19:59:16.552890",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Mar 15, 2013 at 3:58 PM, Akshat Kumar\r\n<akumar@mail.nanosouffle.net>wrote:\r\n\r\n> On 14 March 2013 11:35,  <rsc@golang.org> wrote:\r\n> > The actual arch-specific signal handler moves into signal_GOARCH.c\r\n> > to avoid per-GOOS duplication.\r\n>\r\n> However, this is still only built for UNIX systems, so the name\r\n> seems to be inconsistent with the general naming scheme.\r\n> Since the entire signal handling code for Plan 9 and Windows\r\n> has been moved into os_GOOS_GOARCH.c files respectively,\r\n> perhaps even signal_GOARCH.c should become\r\n> os_unix_GOARCH.c? Otherwise, I'd suggest at least\r\n> signal_unix_GOARCH.c.\r\n>\r\n\r\nThanks for the feedback, but we've met our refactoring quota for a few\r\nmonths. Let's leave things the way they are now. Perhaps some day I will\r\nmake Plan 9 and Windows use those files too, but for now I am comfortable\r\nwith 386+amd64+arm+plan9/386+plan9/amd64+windows/386+windows/amd64. I can\r\ndeal with the 5x duplication a lot better than I can deal with the 17x we\r\nhad a few days ago.\r\n\r\n> New files signal_GOOS_GOARCH.h provide macros for\r\n> > accessing fields of the very system-specific signal info structs.\r\n>\r\n> Also, these might be better merged into defs_GOOS_GARCH.h,\r\n> in line with the former approach outlined above.\r\n>\r\n\r\nThe defs files are automatically generated. Hand-written code cannot be\r\nplaced there. It is also useful to limit the number of files that see those\r\ndefinitions.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-03-15 20:31:32.684230",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 7565048: runtime: refactor os-specific code",
	"created": "2013-03-14 14:13:55.448490",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		11001,
		13001,
		18001
	],
	"modified": "2013-03-15 19:59:16.655910",
	"closed": true,
	"issue": 7565048
}