{
	"description": "cmd/go: make net/... match net too\n\nOtherwise there's no good way to get both, and it comes up often.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-03-12 19:39:59.662154",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nmatching tests would be nicer.\n\nOn Mon, Mar 12, 2012 at 12:39 PM, <rsc@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> cmd/go: make net/... match net too\n>\n> Otherwise there's no good way to get both, and it comes up often.\n>\n> Please review this at http://codereview.appspot.com/**5794064/<http://codereview.appspot.com/5794064/>\n>\n> Affected files:\n>  M src/cmd/go/doc.go\n>  M src/cmd/go/help.go\n>  M src/cmd/go/main.go\n>\n>\n> Index: src/cmd/go/doc.go\n> ==============================**==============================**=======\n> --- a/src/cmd/go/doc.go\n> +++ b/src/cmd/go/doc.go\n> @@ -508,9 +508,8 @@\n>  each of which can match any string, including the empty string and\n>  strings containing slashes.  Such a pattern expands to all package\n>  directories found in the GOPATH trees with names matching the\n> -patterns.  For example, encoding/... expands to all packages\n> -in subdirectories of the encoding tree, while net... expands to\n> -net and all its subdirectories.\n> +patterns.  As a special case, x/... matches x as well as x's\n> subdirectories.\n> +For example, net/... expands to net and packages in its subdirectories.\n>\n>  An import path can also name a package to be downloaded from\n>  a remote repository.  Run 'go help remote' for details.\n> Index: src/cmd/go/help.go\n> ==============================**==============================**=======\n> --- a/src/cmd/go/help.go\n> +++ b/src/cmd/go/help.go\n> @@ -36,9 +36,8 @@\n>  each of which can match any string, including the empty string and\n>  strings containing slashes.  Such a pattern expands to all package\n>  directories found in the GOPATH trees with names matching the\n> -patterns.  For example, encoding/... expands to all packages\n> -in subdirectories of the encoding tree, while net... expands to\n> -net and all its subdirectories.\n> +patterns.  As a special case, x/... matches x as well as x's\n> subdirectories.\n> +For example, net/... expands to net and packages in its subdirectories.\n>\n>  An import path can also name a package to be downloaded from\n>  a remote repository.  Run 'go help remote' for details.\n> Index: src/cmd/go/main.go\n> ==============================**==============================**=======\n> --- a/src/cmd/go/main.go\n> +++ b/src/cmd/go/main.go\n> @@ -345,6 +345,10 @@\n>  func matchPattern(pattern string) func(name string) bool {\n>        re := regexp.QuoteMeta(pattern)\n>        re = strings.Replace(re, `\\.\\.\\.`, `.*`, -1)\n> +       // Special case: foo/... matches foo too.\n> +       if strings.HasSuffix(re, `/.*`) {\n> +               re = re[:len(re)-len(`/.*`)] + `(/.*)?`\n> +       }\n>        reg := regexp.MustCompile(`^` + re + `$`)\n>        return func(name string) bool {\n>                return reg.MatchString(name)\n> @@ -356,6 +360,14 @@\n>  // The pattern is either \"all\" (all packages), \"std\" (standard packages)\n>  // or a path including \"...\".\n>  func allPackages(pattern string) []string {\n> +       pkgs := matchPackages(pattern)\n> +       if len(pkgs) == 0 {\n> +               fmt.Fprintf(os.Stderr, \"warning: %q matched no\n> packages\\n\", pattern)\n> +       }\n> +       return pkgs\n> +}\n> +\n> +func matchPackages(pattern string) []string {\n>        match := func(string) bool { return true }\n>        if pattern != \"all\" && pattern != \"std\" {\n>                match = matchPattern(pattern)\n> @@ -432,10 +444,6 @@\n>                        return nil\n>                })\n>        }\n> -\n> -       if len(pkgs) == 0 {\n> -               fmt.Fprintf(os.Stderr, \"warning: %q matched no\n> packages\\n\", pattern)\n> -       }\n>        return pkgs\n>  }\n>\n> @@ -443,6 +451,14 @@\n>  // beginning ./ or ../, meaning it should scan the tree rooted\n>  // at the given directory.  There are ... in the pattern too.\n>  func allPackagesInFS(pattern string) []string {\n> +       pkgs := matchPackagesInFS(pattern)\n> +       if len(pkgs) == 0 {\n> +               fmt.Fprintf(os.Stderr, \"warning: %q matched no\n> packages\\n\", pattern)\n> +       }\n> +       return pkgs\n> +}\n> +\n> +func matchPackagesInFS(pattern string) []string {\n>        // Find directory to begin the scan.\n>        // Could be smarter but this one optimization\n>        // is enough for now, since ... is usually at the\n> @@ -482,10 +498,6 @@\n>                pkgs = append(pkgs, name)\n>                return nil\n>        })\n> -\n> -       if len(pkgs) == 0 {\n> -               fmt.Fprintf(os.Stderr, \"warning: %q matched no\n> packages\\n\", pattern)\n> -       }\n>        return pkgs\n>  }\n>\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-03-12 19:57:44.817896",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=034bdb9a5757 ***\n\ncmd/go: make net/... match net too\n\nOtherwise there's no good way to get both, and it comes up often.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5794064",
			"disapproval": false,
			"date": "2012-03-12 20:34:27.420296",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-03-12 20:28:51.342493",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn Mon, Mar 12, 2012 at 1:28 PM, <rsc@golang.org> wrote:\n\n> Hello golang-dev@googlegroups.com, bradfitz@golang.org (cc:\n> golang-dev@googlegroups.com),\n>\n> Please take another look.\n>\n>\n> http://codereview.appspot.com/**5794064/<http://codereview.appspot.com/5794064/>\n>\n",
			"disapproval": false,
			"date": "2012-03-12 20:31:01.499296",
			"approval": true
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5794064: cmd/go: make net/... match net too",
	"created": "2012-03-12 19:39:47.018498",
	"patchsets": [
		1,
		1001,
		3001,
		6001,
		3002,
		4
	],
	"modified": "2012-03-12 20:34:28.401119",
	"closed": true,
	"issue": 5794064
}