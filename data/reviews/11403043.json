{
	"description": "io: let SectionReader seek past the end; document Seeker semantics more\n\nBe consistent with os.File, strings.Reader, bytes.Reader, etc,\nwhich all allow seeks past the end.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "$ man 2 lseek\r\n\r\n       The lseek() function allows the file offset to be set beyond the end\r\nof the file  (but  this  does\r\n       not change the size of the file).  If data is later written at this\r\npoint, subsequent reads of the\r\n       data in the gap (a \"hole\") return null bytes ('\\0') until data is\r\nactually written into the gap.\r\n\r\nThis is what *os.File.Seek calls (syscall.Seek ->  Syscall(SYS_LSEEK,\r\nuintptr(fd), uintptr(offset), uintptr(whence))\r\n\r\nAnd this is the behavior we've imitated in strings.Reader and bytes.Reader\r\n(per the CL description), and in Google-internal io.Seekers.\r\n\r\nThe only Seeker in the standard library or Google where we're not\r\nconsistent is io.SectionReader.\r\n\r\nAnd so I also documented it here, but I could remove that part.\r\n\r\n\r\n\r\nOn Wed, Jul 17, 2013 at 1:13 PM, <r@golang.org> wrote:\r\n\r\n> What's the back story here? Who needs to seek past the end, and why?\r\n> Without further study it feels wrong.\r\n>\r\n>\r\n> https://codereview.appspot.**com/11403043/<https://codereview.appspot.com/11403043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-17 03:19:03.085790",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "wow, nice typos. \"rea fien\" is how a scotsman spells \"are fine\"\r\n",
			"disapproval": false,
			"date": "2013-07-17 04:23:59.810740",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-07-17 00:59:42.347370",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What's the back story here? Who needs to seek past the end, and why? Without further study it feels wrong.",
			"disapproval": false,
			"date": "2013-07-17 03:13:39.582380",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11403043/diff/6001/src/pkg/io/io.go\nFile src/pkg/io/io.go (right):\n\nhttps://codereview.appspot.com/11403043/diff/6001/src/pkg/io/io.go#newcode97\nsrc/pkg/io/io.go:97: // error.\nI'm really not sure about this. I'm definitely not sure it's explained well. When can an error actually arise? Perhaps it's:\n\nSeeking to a negative offset is an error. Seeking to any positive offset is legal, but the behavior of subsequent I/O operations on the underlying object is implementation-dependent.",
			"disapproval": false,
			"date": "2013-07-17 05:27:57.503500",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "You're answering what I asked but not what I meant to ask. My question is\r\nabout SectionReader. The seek docs rae fien.\r\n\r\nWhy should a section reader be allowed to jump outside the section it's\r\nsupposed to be reading? That feels very wrong.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-07-17 04:23:32.652380",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "If you jump past the end of it, it just returns EOF on a subsequent Read.\r\n You can't cause any harm to yourself or others with it.\r\n\r\nThis is purely about consistency with everything else (Unix, other Go\r\ntypes, other Google types).\r\n\r\nFor *os.File, we do want to allow seeks past the end, since we want to\r\nallow writes past the end.  If we permit it there, and it's permitted\r\nelsewhere, it feels like it should feel the same everywhere.\r\n\r\n\r\n\r\n\r\nOn Wed, Jul 17, 2013 at 2:23 PM, Rob Pike <r@golang.org> wrote:\r\n\r\n> You're answering what I asked but not what I meant to ask. My question is\r\n> about SectionReader. The seek docs rae fien.\r\n>\r\n> Why should a section reader be allowed to jump outside the section it's\r\n> supposed to be reading? That feels very wrong.\r\n>\r\n> -rob\r\n>\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-17 04:43:53.368870",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\r\n\r\nI like that wording.\r\n\r\n\r\n\r\n\r\nOn Wed, Jul 17, 2013 at 3:27 PM, <r@golang.org> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/11403043/diff/6001/src/**pkg/io/io.go<https://codereview.appspot.com/11403043/diff/6001/src/pkg/io/io.go>\r\n> File src/pkg/io/io.go (right):\r\n>\r\n> https://codereview.appspot.**com/11403043/diff/6001/src/**\r\n> pkg/io/io.go#newcode97<https://codereview.appspot.com/11403043/diff/6001/src/pkg/io/io.go#newcode97>\r\n> src/pkg/io/io.go:97: // error.\r\n> I'm really not sure about this. I'm definitely not sure it's explained\r\n> well. When can an error actually arise? Perhaps it's:\r\n>\r\n> Seeking to a negative offset is an error. Seeking to any positive offset\r\n> is legal, but the behavior of subsequent I/O operations on the\r\n> underlying object is implementation-dependent.\r\n>\r\n> https://codereview.appspot.**com/11403043/<https://codereview.appspot.com/11403043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-17 08:00:52.061520",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-07-17 08:00:52.290710",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-07-18 02:53:47.599150",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=f2b6ec47a9e5 ***\n\nio: let SectionReader seek past the end; document Seeker semantics more\n\nBe consistent with os.File, strings.Reader, bytes.Reader, etc,\nwhich all allow seeks past the end.\n\nR=golang-dev, r\nCC=golang-dev\nhttps://codereview.appspot.com/11403043",
			"disapproval": false,
			"date": "2013-07-18 03:03:37.648250",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 11403043: io: let SectionReader seek past the end; document Seeke...",
	"created": "2013-07-17 00:59:12.945750",
	"patchsets": [
		1,
		3001,
		6001,
		14001,
		19001
	],
	"modified": "2013-07-18 03:03:41.877880",
	"closed": true,
	"issue": 11403043
}