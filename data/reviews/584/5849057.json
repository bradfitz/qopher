{
	"description": "syscall: add a test for passing an fd over a unix socket\n\nUpdates issue 1101",
	"cc": [
		"golang-dev@googlegroups.com",
		"iant@golang.org"
	],
	"reviewers": [
		"bsiegert@gmail.com",
		"r@golang.org",
		"r@google.com"
	],
	"messages": [
		{
			"sender": "iant@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5849057/diff/1003/src/pkg/syscall/passfd_test.go\nFile src/pkg/syscall/passfd_test.go (right):\n\nhttp://codereview.appspot.com/5849057/diff/1003/src/pkg/syscall/passfd_test.go#newcode44\nsrc/pkg/syscall/passfd_test.go:44: println(\"running child process.\")\nShould remove the printlns before committing.",
			"disapproval": false,
			"date": "2012-03-18 04:48:08.672506",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"bsiegert@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'd like to delete this test too, being the first test to go into syscall and setting a precedent I am not certain about. Not the existence of tests, but how to test non-portable code in a portable way.",
			"disapproval": false,
			"date": "2012-03-18 23:47:00.443084",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Mar 19, 2012, at 10:59 AM, Brad Fitzpatrick wrote:\n\n> I don't see what's wrong with +build to limit the tests to the operating systems they're supposed to pass on.\n\nThe problem is that in syscall in particular, a term like +linux doesn't really say much.  Linux is not a single operating system. Outside syscall (that is, inside other packages we export that use it) it is, but inside syscall there really can be variations.\n\n> The builds are passing.\n\nThat's not really on point. You wouldn't have checked the test in if it wasn't correct in the environments we know.\n\n> I'm of the mindset that if we're shipping an API, it should be tested.  syscall is no different, just because it's operating-system specific.  os/user has tests too, and that's wildly different between different OSes.\n\nTests are good, I agree, but I disagree with your second statement: syscall is different. The os package promises, within reason, a common set of functions. Syscall does nothing of the kind.\n\n> I'd rather keep this.  It serves as a demonstration of how to pass fds in Go, and it's already found bugs in FreeBSD and OpenBSD.  We don't have to care about those bugs yet, but it found them.  If you don't like the word \"probably\" before freebsd and openbsd, change them to \"TODO\".\n\nI don't disagree with the wording. My point is precisely that the word \"probably\" means, \"we don't know\", so here we are checking in a test that we don't know works on all platforms. There is a real issue here, a deep one, and I don't want to design how to address it now.\n> \n> Feel free to override me.\n\n\nThese tests are setting a precedent right before the release of Go 1. That is the reason I want to remove them. Not because they're bad or wrong or breaking the build or because I don't like tests. But because checking in several hundred lines of non-portable code right before cutting a major release is not good strategy.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-03-19 00:10:59.487317",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't see what's wrong with +build to limit the tests to the operating\nsystems they're supposed to pass on.\n\nThe builds are passing.\n\nI'm of the mindset that if we're shipping an API, it should be tested.\n syscall is no different, just because it's operating-system specific.\n os/user has tests too, and that's wildly different between different OSes.\n\nI'd rather keep this.  It serves as a demonstration of how to pass fds in\nGo, and it's already found bugs in FreeBSD and OpenBSD.  We don't have to\ncare about those bugs yet, but it found them.  If you don't like the word\n\"probably\" before freebsd and openbsd, change them to \"TODO\".\n\nFeel free to override me.\n\n\nOn Sun, Mar 18, 2012 at 4:47 PM, <r@golang.org> wrote:\n\n> I'd like to delete this test too, being the first test to go into\n> syscall and setting a precedent I am not certain about. Not the\n> existence of tests, but how to test non-portable code in a portable way.\n>\n>\n> http://codereview.appspot.com/**5849057/<http://codereview.appspot.com/5849057/>\n>\n",
			"disapproval": false,
			"date": "2012-03-18 23:59:01.430261",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-03-17 19:48:33.159620",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "And for the record: I expect the deletions to be temporary and for the tests to come back in some form once we know how best to test the syscall package.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-03-19 00:12:14.755882",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=160ec5506cb7 ***\n\nsyscall: add a test for passing an fd over a unix socket\n\nUpdates issue 1101\n\nR=golang-dev, iant\nCC=golang-dev\nhttp://codereview.appspot.com/5849057",
			"disapproval": false,
			"date": "2012-03-18 05:20:01.898634",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't understand all of the code but there is a typo in a comment.\n\nhttp://codereview.appspot.com/5849057/diff/4002/src/pkg/syscall/passfd_test.go\nFile src/pkg/syscall/passfd_test.go (right):\n\nhttp://codereview.appspot.com/5849057/diff/4002/src/pkg/syscall/passfd_test.go#newcode109\nsrc/pkg/syscall/passfd_test.go:109: // Look for our fd. I<t should be fd 3, but we work around an fd leak\ns,I<t,It,",
			"disapproval": false,
			"date": "2012-03-18 15:59:42.859951",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 5849057: syscall: add a test for passing an fd over a unix socket",
	"created": "2012-03-17 19:48:18.697437",
	"patchsets": [
		1,
		1002,
		1003,
		4002
	],
	"modified": "2012-03-19 00:10:59.652490",
	"closed": true,
	"issue": 5849057
}