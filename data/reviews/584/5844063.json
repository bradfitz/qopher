{
	"description": "misc/emacs: fix overindentation caused by mis-parsing lines ending with special chars\n\nFixes issue 3313\n\ngo-mode-backward-skip-comments is probably due for a more ambitious refactoring --- it repeats guard conditions after every nearly every movement of point.",
	"cc": [
		"sameer@golang.org",
		"r@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "ben.fried@gmail.com",
			"recipients": [
				"ben.fried@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-03-20 02:46:33.142160",
			"approval": false
		},
		{
			"sender": "ben.fried@gmail.com",
			"recipients": [
				"ben.fried@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-03-20 14:27:22.158979",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Anyone know elisp? I don't.\n",
			"disapproval": false,
			"date": "2012-03-20 23:43:13.106598",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Mar 21, 2012, at 10:42 AM, Andrew Gerrand wrote:\n\n> Anyone know elisp? I don't.\n\ni hear ben fried does.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-03-20 23:47:05.581836",
			"approval": false
		},
		{
			"sender": "ben.fried@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I can tell you in more detail what I did if you wish.\n\nIssue 3313 was fixed by turning on case sensitivity when parsing code to\nset indent level --- the regexps that find keywords/reserved words were\nbeing invoked with whatever the user's setting for case-sensitivity in\nsearch is; most people leave it at the default, which is case insensitivity\nfor regexp matching and interactive searching. I used a let to re-bind\ncase-fold-search in the outermost indentation function.\n\nThe code that calculates indent level is functional, and I think it's now\ncorrect, but it's not terribly pretty. Even if you don't know elisp, a\nquick glance shows that in the section I patched it tests for guard\nconditions in a suspiciously high number of places, not just at loop top or\nbottom. I think it can be rewritten to be simpler and clearer, but\nmeanwhile I was able to correct an error causing it to misindent lines\nfollowing lines that end with a delimited strong. The code works backward\nfrom the point of user input to parse enough of the buffer to calculate the\ncurrent indent level, but it attempts to both move backward a character at\na time and also leap across contiguous blocks of whitespace  --- this is\nwhat (skip-syntax-backward...) does --- but that was actually causing\nincorrect indentation: the insertion point was being taken past the\nterminating string delimiter.\n\nIt's a bit late; I hope that is coherent.\n\nBen\nOn Mar 20, 2012 7:47 PM, \"Rob 'Commander' Pike\" <r@google.com> wrote:\n\n>\n> On Mar 21, 2012, at 10:42 AM, Andrew Gerrand wrote:\n>\n> > Anyone know elisp? I don't.\n>\n> i hear ben fried does.\n>\n> -rob\n>\n>\n",
			"disapproval": false,
			"date": "2012-03-21 01:31:13.839822",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"ben.fried@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"r@google.com",
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "At least lines ending in \" are still broken:\n\nimport (\n\t\"fmt\"\n\"math\"\n)\n\nand\n\n\n// foo \"bar\"\n\t// next line",
			"disapproval": false,
			"date": "2012-03-21 00:32:59.673840",
			"approval": false
		},
		{
			"sender": "sameer@golang.org",
			"recipients": [
				"ben.fried@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"r@google.com",
				"dr.volker.dobler@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5844063/diff/5001/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (right):\n\nhttp://codereview.appspot.com/5844063/diff/5001/misc/emacs/go-mode.el#newcode410\nmisc/emacs/go-mode.el:410: (or (eq 32 (char-syntax char))))\nAdd a function comment.\n\nI think you can remove the (or), since there's only a single argument to it.  That is, this becomes:\n(defun go-mode-whitespace-p (char)\n  \"Returns true if char's syntax class is whitespace.\"\n  (eq 32 (char-syntax char)))\n\nhttp://codereview.appspot.com/5844063/diff/5001/misc/emacs/go-mode.el#newcode417\nmisc/emacs/go-mode.el:417: (or (go-mode-whitespace-p (char-after (point)))\nOne way to clean up this loop would be to capture the repeated subexpressions in named variables.\n\nI'm not sure whether this loop is correct, but your cleanup helps make it more readable.  A few minor suggestions.\n\nhttp://codereview.appspot.com/5844063/diff/5001/misc/emacs/go-mode.el#newcode419\nmisc/emacs/go-mode.el:419: (when (and (not (bobp)) (go-mode-whitespace-p (char-after (point))))\nput (go-mode-whitespace-p (char-after (point))) on the next line, indented at align with (not (bobp)), to make it easier to compare visually against the loop bound.\n\nhttp://codereview.appspot.com/5844063/diff/5001/misc/emacs/go-mode.el#newcode424\nmisc/emacs/go-mode.el:424: (when (and (not (go-mode-cs)) (go-mode-whitespace-p (char-after (1+ (point)))))\nMove (go-mode-whitespace-p ...) to the next line, aligned with (not (go-mode-cs)), to make it easier to see what's covered by the (and).",
			"disapproval": false,
			"date": "2012-03-22 15:04:30.710088",
			"approval": false
		},
		{
			"sender": "ben.fried@gmail.com",
			"recipients": [
				"ben.fried@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"r@google.com",
				"dr.volker.dobler@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, adg@golang.org, r@google.com, dr.volker.dobler@gmail.com, sameer@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-03-26 03:07:54.773765",
			"approval": false
		},
		{
			"sender": "ben.fried@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Volker has pointed out that it muffs up indentation of keys in struct\nliterals. I think I will have a fix for that this afternoon (EDT). I am\nclose but have to run off to close on my new apartment now.\n\nBen\nOn Mar 26, 2012 8:24 AM, <rsc@golang.org> wrote:\n\n> R=sameer\n>\n> Thanks very much, Ben.\n>\n>\n> http://codereview.appspot.com/**5844063/<http://codereview.appspot.com/5844063/>\n>\n",
			"disapproval": false,
			"date": "2012-03-26 12:56:15.934437",
			"approval": false
		},
		{
			"sender": "ben.fried@gmail.com",
			"recipients": [
				"ben.fried@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"r@google.com",
				"dr.volker.dobler@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, adg@golang.org, r@google.com, dr.volker.dobler@gmail.com, sameer@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-03-26 02:55:01.055335",
			"approval": false
		},
		{
			"sender": "ben.fried@gmail.com",
			"recipients": [
				"ben.fried@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello sameer@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-03-26 21:34:31.878278",
			"approval": false
		},
		{
			"sender": "ben.fried@gmail.com",
			"recipients": [
				"ben.fried@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"r@google.com",
				"dr.volker.dobler@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, adg@golang.org, r@google.com, dr.volker.dobler@gmail.com, sameer@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-03-26 02:58:40.873372",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Much better. Only keys in struct literals are not indented\nenough (looks like cases in a switch).\n\nimport (\n\t\"fmt\"\n\t\"net/url\"\n)\n\n// foo is \"simple\"\n// indented.\n// okay\nfunc foo() bool {\n\tb := url.URL{\n\tScheme: \"http\",\n\tHost:   \"localhost\",\n\t}\n}\n\nOn 3/26/12, ben.fried@gmail.com <ben.fried@gmail.com> wrote:\n> Hello golang-dev@googlegroups.com, adg@golang.org, r@google.com,\n> dr.volker.dobler@gmail.com, sameer@golang.org (cc:\n> golang-dev@googlegroups.com),\n>\n> Please take another look.\n>\n>\n> http://codereview.appspot.com/5844063/\n>\n\n\n-- \nDr. Volker Dobler\n",
			"disapproval": false,
			"date": "2012-03-26 09:40:28.576107",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"ben.fried@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=sameer\n\nThanks very much, Ben.",
			"disapproval": false,
			"date": "2012-03-26 12:24:23.780332",
			"approval": false
		},
		{
			"sender": "sameer@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ooo today, will look tomorrow.\nOn Mar 26, 2012 5:34 PM, <ben.fried@gmail.com> wrote:\n\n> Hello sameer@golang.org (cc: golang-dev@googlegroups.com),\n>\n> Please take another look.\n>\n>\n> http://codereview.appspot.com/**5844063/<http://codereview.appspot.com/5844063/>\n>\n",
			"disapproval": false,
			"date": "2012-03-26 23:32:10.265920",
			"approval": false
		},
		{
			"sender": "sameer@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nfine to submit this now and clean up in a followup\nOn Mar 26, 2012 10:34 PM, \"Rob 'Commander' Pike\" <r@google.com> wrote:\n\n> can we please get to a working state fast so we can check this in and\n> clean up later?\n>\n> -rob\n>\n>\n",
			"disapproval": false,
			"date": "2012-03-27 03:17:11.577424",
			"approval": true
		},
		{
			"sender": "sameer@golang.org",
			"recipients": [
				"ben.fried@gmail.com",
				"sameer@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Most of my comments are about how to structure the repeated code elements.  Since this bug is somewhat painful, I'm ok with getting the fix in first and cleaning up the code in a followup CL.\n\nhttp://codereview.appspot.com/5844063/diff/15002/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (right):\n\nhttp://codereview.appspot.com/5844063/diff/15002/misc/emacs/go-mode.el#newcode205\nmisc/emacs/go-mode.el:205: (when (<= b go-mode-mark-comment-end)\nThis block of 8 lines appears three times, varying only in go-mode-mark-foo-end and go-mode-foo.  Worth extracting a function with a docstring explaining what this block is doing?  Or at minimum three similarly-named functions that are defined near each other:\n  (defun go-mode-mark-clear-cs-cache ...\n  (defun go-mode-mark-clear-comment-cache ...\n  (defun go-mode-mark-clear-string-cache ...\nBut a single function that takes go-mode-mark-foo-end and go-mode-foo as args would be better.\n\nhttp://codereview.appspot.com/5844063/diff/15002/misc/emacs/go-mode.el#newcode308\nmisc/emacs/go-mode.el:308: \"Return the comment/string state at point POS.  If point is\nThis docstring is thr same as that for go-mode-cs.  How does this function differ?\n\nhttp://codereview.appspot.com/5844063/diff/15002/misc/emacs/go-mode.el#newcode375\nmisc/emacs/go-mode.el:375: (let ((last-cs\nlast-string?\n\nhttp://codereview.appspot.com/5844063/diff/15002/misc/emacs/go-mode.el#newcode384\nmisc/emacs/go-mode.el:384: (let ((cs-end\t\t\t; end of the text property\nstring-end?\n\nhttp://codereview.appspot.com/5844063/diff/15002/misc/emacs/go-mode.el#newcode414\nmisc/emacs/go-mode.el:414: (setq go-mode-mark-string-end pos)))))\nAll this copy-pasting seems a bit painful to me, as it leaves us open to bugs/changes being added to one of these functions and not the others.  Where possible, I'd like to extract functions for common behaviors.\n\nIt seems like the main parameters here are the go-mode-mark-foo-end and go-mode-foo symbols, the respective definitions of foo-end, , and the parameters to search-forward.\n\nThis is ok to leave as-is if consolidation is too messy, but at least make the names consistent.\n\nhttp://codereview.appspot.com/5844063/diff/15002/misc/emacs/go-mode.el#newcode558\nmisc/emacs/go-mode.el:558: loop-guard\nYou're using tabs for indentation here, but the rest of the file uses two spaces.  Please change this to stay consistent with the existing code.",
			"disapproval": false,
			"date": "2012-03-27 02:32:44.329100",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "can we please get to a working state fast so we can check this in and clean up later?\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-03-27 02:34:27.205204",
			"approval": false
		},
		{
			"sender": "ben.fried@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I believe it's in a working state. Volker reported a problem with my prior\npatch which I've fixed. Waiting for review. It indents correctly, and is\nthus a lot more usable more than it  was before\n\nBen\n\nOn Mon, Mar 26, 2012 at 10:34 PM, Rob 'Commander' Pike <r@google.com> wrote:\n\n> can we please get to a working state fast so we can check this in and\n> clean up later?\n>\n> -rob\n>\n>\n",
			"disapproval": false,
			"date": "2012-03-27 02:51:21.372212",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"ben.fried@gmail.com",
				"sameer@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as 0d0d70895037 ***\n\nmisc/emacs: fix overindentation caused by mis-parsing lines ending with special chars\n\nFixes issue 3313\n\ngo-mode-backward-skip-comments is probably due for a more ambitious refactoring --- it repeats guard conditions after every nearly every movement of point.\n\nR=sameer, r\nCC=golang-dev\nhttp://codereview.appspot.com/5844063\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2012-03-27 03:26:43.581602",
			"approval": false
		}
	],
	"owner_email": "ben.fried@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "bf",
	"subject": "code review 5844063: misc/emacs: fix overindentation caused by mis-parsing l...",
	"created": "2012-03-20 02:45:13.438199",
	"patchsets": [
		1,
		1002,
		2002,
		5001,
		11001,
		12002,
		12003,
		15002
	],
	"modified": "2012-03-28 16:23:51.549395",
	"closed": true,
	"issue": 5844063
}