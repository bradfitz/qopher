{
	"description": "syscall: Test SCM_CREDENTIALS, SO_PASSCRED on Linux.",
	"cc": [
		"bradfitz@golang.org",
		"iant@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"r@google.com"
	],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"fullung@gmail.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5846059/diff/6002/src/pkg/syscall/creds_linux_test.go\nFile src/pkg/syscall/creds_linux_test.go (right):\n\nhttp://codereview.appspot.com/5846059/diff/6002/src/pkg/syscall/creds_linux_test.go#newcode15\nsrc/pkg/syscall/creds_linux_test.go:15: func TestSCMCredentials(t *testing.T) {\nThis is weird enough that I would add a little comment above this, explaining what the test does.\n\nhttp://codereview.appspot.com/5846059/diff/6002/src/pkg/syscall/creds_linux_test.go#newcode101\nsrc/pkg/syscall/creds_linux_test.go:101: t.Fatalf(\"ucreds not equal: %+v != %+v\", ucred, newUcred)\nmake this of the form:\n\n\"ParseUnixCredentials = %+v, want %+v\", newUncred, ucred",
			"disapproval": false,
			"date": "2012-03-18 16:27:58.660076",
			"approval": true
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"fullung@gmail.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/5846059/diff/6001/src/pkg/syscall/creds_linux_test.go\nFile src/pkg/syscall/creds_linux_test.go (right):\n\nhttp://codereview.appspot.com/5846059/diff/6001/src/pkg/syscall/creds_linux_test.go#newcode5\nsrc/pkg/syscall/creds_linux_test.go:5: // +build linux\nOn 2012/03/18 16:02:23, bradfitz wrote:\n> You can keep or drop this.  I don't really mind either way.\n\nDone.\n\nhttp://codereview.appspot.com/5846059/diff/6001/src/pkg/syscall/creds_linux_test.go#newcode16\nsrc/pkg/syscall/creds_linux_test.go:16: func TestScmCredentials(t *testing.T) {\nOn 2012/03/18 16:02:23, bradfitz wrote:\n> minor style nit: acronyms in Go should be all the same case.  So\n> TestSCMCredentials.\n\nDone.\n\nhttp://codereview.appspot.com/5846059/diff/6001/src/pkg/syscall/creds_linux_test.go#newcode66\nsrc/pkg/syscall/creds_linux_test.go:66: t.Fatal(\"n should be zero\")\nOn 2012/03/18 16:02:23, bradfitz wrote:\n> Fatalf(\"WriteMsgUnix n = %d, want 0\", n)\n\nDone.\n\nhttp://codereview.appspot.com/5846059/diff/6001/src/pkg/syscall/creds_linux_test.go#newcode69\nsrc/pkg/syscall/creds_linux_test.go:69: t.Fatalf(\"oobn should be len(oob)=%d, not %d\", len(oob), oobn)\nOn 2012/03/18 16:02:23, bradfitz wrote:\n> \"WriteMsgUnix oobn = %d, want %d\"\n\nDone.\n\nhttp://codereview.appspot.com/5846059/diff/6001/src/pkg/syscall/creds_linux_test.go#newcode72\nsrc/pkg/syscall/creds_linux_test.go:72: oob2 := make([]byte, len(oob))\nOn 2012/03/18 16:02:23, bradfitz wrote:\n> I might make this bigger than needed, so ReadMsgUnix has the ability to fail in\n> other ways (writing too much).  You can slice it back down to size with oobn2\n> later.\n\nDone.\n\nhttp://codereview.appspot.com/5846059/diff/6001/src/pkg/syscall/creds_linux_test.go#newcode78\nsrc/pkg/syscall/creds_linux_test.go:78: t.Fatalf(\"Unexpected flags=0x%x\\n\", flags)\nOn 2012/03/18 16:02:23, bradfitz wrote:\n> better failure message, like examples above.\n\nDone.\n\nhttp://codereview.appspot.com/5846059/diff/6001/src/pkg/syscall/creds_linux_test.go#newcode81\nsrc/pkg/syscall/creds_linux_test.go:81: t.Fatal(\"n should be 1 (the dummy byte)\")\nOn 2012/03/18 16:02:23, bradfitz wrote:\n> better failure message, like examples above.\n\nDone.\n\nhttp://codereview.appspot.com/5846059/diff/6001/src/pkg/syscall/creds_linux_test.go#newcode86\nsrc/pkg/syscall/creds_linux_test.go:86: t.Fatalf(\"Should have received %d oob bytes, got %d\\n\", oobn, oobn2)\nOn 2012/03/18 16:02:23, bradfitz wrote:\n> better failure message, like examples above.\n\nDone.",
			"disapproval": false,
			"date": "2012-03-18 16:20:53.120798",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello\n\nOn Sun, Mar 18, 2012 at 5:41 PM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n> You already have a +build linux line, so I'd drop _linux from the filename.\n> \u00a0Or is this really Linux-only?\n\nI was thinking creds_linux_test.go would be for Linux and\ncreds_test.go would be for the BSDs, which have SCM_CREDS.\n\nI haven't looked to see whether SCM_CREDENTIALS and SCM_CREDS can be\nunified in syscall. If so, creds_linux_test.go could just become\ncreds_test.go.\n\nSo for now, the +build is probably redundant. Agree?\n\nRegards\n\nAlbert\n",
			"disapproval": false,
			"date": "2012-03-18 15:58:44.029189",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Before this there were no tests in syscall. It's the raw kernel interface and not really Go's business to test. You've just broken a symmetry right before Go 1 is released. I will revert this change; you can send it again after Go 1 when we have time to discuss it.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-03-18 21:05:38.606187",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"fullung@gmail.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=14c7fd2498d6 ***\n\nsyscall: Test SCM_CREDENTIALS, SO_PASSCRED on Linux.\n\nR=bradfitz, iant\nCC=golang-dev\nhttp://codereview.appspot.com/5846059\n\nCommitter: Brad Fitzpatrick <bradfitz@golang.org>",
			"disapproval": false,
			"date": "2012-03-18 17:12:45.479067",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"fullung@gmail.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, iant@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-03-18 07:56:30.961883",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"fullung@gmail.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM after nits below.\n\nhttp://codereview.appspot.com/5846059/diff/6001/src/pkg/syscall/creds_linux_test.go\nFile src/pkg/syscall/creds_linux_test.go (right):\n\nhttp://codereview.appspot.com/5846059/diff/6001/src/pkg/syscall/creds_linux_test.go#newcode5\nsrc/pkg/syscall/creds_linux_test.go:5: // +build linux\nYou can keep or drop this.  I don't really mind either way.\n\nhttp://codereview.appspot.com/5846059/diff/6001/src/pkg/syscall/creds_linux_test.go#newcode16\nsrc/pkg/syscall/creds_linux_test.go:16: func TestScmCredentials(t *testing.T) {\nminor style nit: acronyms in Go should be all the same case.  So TestSCMCredentials.\n\nhttp://codereview.appspot.com/5846059/diff/6001/src/pkg/syscall/creds_linux_test.go#newcode66\nsrc/pkg/syscall/creds_linux_test.go:66: t.Fatal(\"n should be zero\")\nFatalf(\"WriteMsgUnix n = %d, want 0\", n)\n\nhttp://codereview.appspot.com/5846059/diff/6001/src/pkg/syscall/creds_linux_test.go#newcode69\nsrc/pkg/syscall/creds_linux_test.go:69: t.Fatalf(\"oobn should be len(oob)=%d, not %d\", len(oob), oobn)\n\"WriteMsgUnix oobn = %d, want %d\"\n\nhttp://codereview.appspot.com/5846059/diff/6001/src/pkg/syscall/creds_linux_test.go#newcode72\nsrc/pkg/syscall/creds_linux_test.go:72: oob2 := make([]byte, len(oob))\nI might make this bigger than needed, so ReadMsgUnix has the ability to fail in other ways (writing too much).  You can slice it back down to size with oobn2 later.\n\nhttp://codereview.appspot.com/5846059/diff/6001/src/pkg/syscall/creds_linux_test.go#newcode75\nsrc/pkg/syscall/creds_linux_test.go:75: t.Fatalf(\"srv ReadMsgUnix failed: %#v\", err)\n%v is fine\n\nhttp://codereview.appspot.com/5846059/diff/6001/src/pkg/syscall/creds_linux_test.go#newcode78\nsrc/pkg/syscall/creds_linux_test.go:78: t.Fatalf(\"Unexpected flags=0x%x\\n\", flags)\nbetter failure message, like examples above.\n\nhttp://codereview.appspot.com/5846059/diff/6001/src/pkg/syscall/creds_linux_test.go#newcode81\nsrc/pkg/syscall/creds_linux_test.go:81: t.Fatal(\"n should be 1 (the dummy byte)\")\nbetter failure message, like examples above.\n\nhttp://codereview.appspot.com/5846059/diff/6001/src/pkg/syscall/creds_linux_test.go#newcode86\nsrc/pkg/syscall/creds_linux_test.go:86: t.Fatalf(\"Should have received %d oob bytes, got %d\\n\", oobn, oobn2)\nbetter failure message, like examples above.",
			"disapproval": false,
			"date": "2012-03-18 16:02:23.611156",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Mar 18, 2012 at 2:05 PM, Rob 'Commander' Pike <r@google.com> wrote:\n\n> Before this there were no tests in syscall. It's the raw kernel interface\n> and not really Go's business to test.\n\n\nYou don't test that your syscall wrappers behave as you expect?\n\n\n> You've just broken a symmetry right before Go 1 is released.\n>\n\nSymmetry with what?\n",
			"disapproval": false,
			"date": "2012-03-18 21:13:47.109036",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "You already have a +build linux line, so I'd drop _linux from the filename.\n Or is this really Linux-only?\n\nOn Sun, Mar 18, 2012 at 12:56 AM, <fullung@gmail.com> wrote:\n\n> Reviewers: bradfitz, iant,\n>\n> Message:\n> Hello bradfitz@golang.org, iant@golang.org (cc:\n> golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://code.google.com/p/go/\n>\n>\n> Description:\n> syscall: Test SCM_CREDENTIALS, SO_PASSCRED on Linux.\n>\n> Please review this at http://codereview.appspot.com/**5846059/<http://codereview.appspot.com/5846059/>\n>\n> Affected files:\n>  A src/pkg/syscall/creds_linux_**test.go\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-03-18 15:41:05.577495",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"fullung@gmail.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nThanks for the review.\n\nOn 2012/03/18 16:27:58, bradfitz wrote:\n> LGTM\n> \n> http://codereview.appspot.com/5846059/diff/6002/src/pkg/syscall/creds_linux_test.go\n> File src/pkg/syscall/creds_linux_test.go (right):\n> \n> http://codereview.appspot.com/5846059/diff/6002/src/pkg/syscall/creds_linux_test.go#newcode15\n> src/pkg/syscall/creds_linux_test.go:15: func TestSCMCredentials(t *testing.T) {\n> This is weird enough that I would add a little comment above this, explaining\n> what the test does.\n \nDone.\n\n> http://codereview.appspot.com/5846059/diff/6002/src/pkg/syscall/creds_linux_test.go#newcode101\n> src/pkg/syscall/creds_linux_test.go:101: t.Fatalf(\"ucreds not equal: %+v !=\n> %+v\", ucred, newUcred)\n> make this of the form:\n> \n> \"ParseUnixCredentials = %+v, want %+v\", newUncred, ucred\n\nDone.",
			"disapproval": false,
			"date": "2012-03-18 16:35:07.879860",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn 19/03/2012, at 8:13 AM, Brad Fitzpatrick wrote:\n\n> On Sun, Mar 18, 2012 at 2:05 PM, Rob 'Commander' Pike <r@google.com> wrote:\n> Before this there were no tests in syscall. It's the raw kernel interface and not really Go's business to test.\n> \n> You don't test that your syscall wrappers behave as you expect?\n\nThe whole tree does that, but of course for some obscure stuff there's reason to test. My objection is not that syscall should not have tests, it's that we don't know how it should test and now is not the time to work that out.\n \n> \n> You've just broken a symmetry right before Go 1 is released.\n>  \n> Symmetry with what? \n\nObscure physics term, sorry.  Think \"changed a property of the package\".\n\nLeaving all that aside, the code base is supposed to be frozen now except for documentation, critical bug fixes, and the tail of the windows story. Adding a complex, hundred-line system-specific test right now, without sufficient time to soak it, is unnecessary. The fact that the test in a package that doesn't really have tests makes this even less supportable.\n\nAfter Go 1.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-03-18 21:19:25.525271",
			"approval": false
		}
	],
	"owner_email": "fullung@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "albert.strasheim",
	"subject": "code review 5846059: syscall: Test SCM_CREDENTIALS, SO_PASSCRED on Linux.",
	"created": "2012-03-18 07:55:23.718842",
	"patchsets": [
		1,
		2001,
		3002,
		6001,
		6002,
		6004
	],
	"modified": "2012-03-20 07:22:02.989499",
	"closed": true,
	"issue": 5846059
}