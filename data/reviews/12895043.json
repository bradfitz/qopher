{
	"description": "runtime: make SetFinalizer(x, f) accept any f for which f(x) is valid\n\nOriginally the requirement was f(x) where f's argument is\nexactly x's type.\n\nCL 11858043 relaxed the requirement in a non-standard\nway: f's argument must be exactly x's type or interface{}.\n\nIf we're going to relax the requirement, it should be done\nin a way consistent with the rest of Go. This CL allows f's\nargument to have any type for which x is assignable;\nthat's the same requirement the compiler would impose\nif compiling f(x) directly.\n\nFixes issue 5368.",
	"cc": [
		"dvyukov@google.com",
		"bradfitz@golang.org",
		"pieter@binky.org.uk",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dvyukov (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-08-13 21:30:29.721090",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"rsc@golang.org",
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12895043/diff/3001/src/pkg/runtime/malloc.goc\nFile src/pkg/runtime/malloc.goc (right):\n\nhttps://codereview.appspot.com/12895043/diff/3001/src/pkg/runtime/malloc.goc#newcode768\nsrc/pkg/runtime/malloc.goc:768: if(fint == obj.type) {\ncan't put this into an isassignable bool func?\n\nhttps://codereview.appspot.com/12895043/diff/3001/src/pkg/runtime/runtime.h\nFile src/pkg/runtime/runtime.h (right):\n\nhttps://codereview.appspot.com/12895043/diff/3001/src/pkg/runtime/runtime.h#newcode1044\nsrc/pkg/runtime/runtime.h:1044: bool runtime\u00b7ifaceE2I2(InterfaceType*, Eface, Iface*);\nis this supposed to line up with above?",
			"disapproval": false,
			"date": "2013-08-13 21:46:35.784260",
			"approval": false
		},
		{
			"sender": "pieter@binky.org.uk",
			"recipients": [
				"rsc@golang.org",
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"pieter@binky.org.uk",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/13 21:46:35, bradfitz wrote:\n> https://codereview.appspot.com/12895043/diff/3001/src/pkg/runtime/malloc.goc\n> File src/pkg/runtime/malloc.goc (right):\n> \n> https://codereview.appspot.com/12895043/diff/3001/src/pkg/runtime/malloc.goc#newcode768\n> src/pkg/runtime/malloc.goc:768: if(fint == obj.type) {\n> can't put this into an isassignable bool func?\n> \n> https://codereview.appspot.com/12895043/diff/3001/src/pkg/runtime/runtime.h\n> File src/pkg/runtime/runtime.h (right):\n> \n> https://codereview.appspot.com/12895043/diff/3001/src/pkg/runtime/runtime.h#newcode1044\n> src/pkg/runtime/runtime.h:1044: bool runtime\u00b7ifaceE2I2(InterfaceType*, Eface,\n> Iface*);\n> is this supposed to line up with above?\n\nLooks great. Thank you for doing this Russ. My previous CL was about as deep into the Runtime as I dared to go without diving lessons.",
			"disapproval": false,
			"date": "2013-08-14 03:08:27.284010",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"pieter@binky.org.uk",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Other than my confusion with definitions, the code looks good\n\nhttps://codereview.appspot.com/12895043/diff/3001/src/pkg/runtime/malloc.goc\nFile src/pkg/runtime/malloc.goc (right):\n\nhttps://codereview.appspot.com/12895043/diff/3001/src/pkg/runtime/malloc.goc#newcode770\nsrc/pkg/runtime/malloc.goc:770: } else if(fint->kind == KindPtr && (fint->x == nil || fint->x->name == nil || obj.type->x == nil || obj.type->x->name == nil) && ((PtrType*)fint)->elem == ((PtrType*)obj.type)->elem) {\nThe spec uses \"named type\" to define several things, but I can not find what \"named type\" is, all entries of \"named type\" are usages of the term...\n\nI am also confused by \"Two named types are identical if their type names originate in the same TypeSpec\". How can more than 1 type originate in a single TypeSpec, TypeSpec can possibly define only 1 type...\n\nhttps://codereview.appspot.com/12895043/diff/3001/src/pkg/runtime/mfinal.c\nFile src/pkg/runtime/mfinal.c (right):\n\nhttps://codereview.appspot.com/12895043/diff/3001/src/pkg/runtime/mfinal.c#newcode163\nsrc/pkg/runtime/mfinal.c:163: \ndelete\n\nhttps://codereview.appspot.com/12895043/diff/3001/src/pkg/runtime/mfinal_test.go\nFile src/pkg/runtime/mfinal_test.go (right):\n\nhttps://codereview.appspot.com/12895043/diff/3001/src/pkg/runtime/mfinal_test.go#newcode45\nsrc/pkg/runtime/mfinal_test.go:45: {func(x *int) interface{} { return (*Tint)(x) }, func(v Tinter) { finalize((*int)(v.(*Tint))) }},\nShould it work for:\nv := new(struct{foo int})\nSetFinalizer(v, func(p *struct{foo int}) {})\n?\nThese are identical types, right?\n\nhttps://codereview.appspot.com/12895043/diff/3001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/12895043/diff/3001/src/pkg/runtime/mgc0.c#newcode2341\nsrc/pkg/runtime/mgc0.c:2341: } else {\nplease add comments above these 3 blocks with types of conversion they do\ne.g. *T -> Eface -> Iface\n\nhttps://codereview.appspot.com/12895043/diff/3001/src/pkg/runtime/mgc0.c#newcode2344\nsrc/pkg/runtime/mgc0.c:2344: runtime\u00b7ifaceE2I2((InterfaceType*)f->fint, ef1, (Iface*)frame);\nsince you throw above, you may also throw here",
			"disapproval": false,
			"date": "2013-08-14 09:27:48.828000",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"pieter@binky.org.uk",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12895043/diff/3001/src/pkg/runtime/malloc.goc\nFile src/pkg/runtime/malloc.goc (right):\n\nhttps://codereview.appspot.com/12895043/diff/3001/src/pkg/runtime/malloc.goc#newcode770\nsrc/pkg/runtime/malloc.goc:770: } else if(fint->kind == KindPtr && (fint->x == nil || fint->x->name == nil || obj.type->x == nil || obj.type->x->name == nil) && ((PtrType*)fint)->elem == ((PtrType*)obj.type)->elem) {\nOn 2013/08/14 09:27:49, dvyukov wrote:\n> The spec uses \"named type\" to define several things, but I can not find what\n> \"named type\" is, all entries of \"named type\" are usages of the term...\n\nA named type is a type with a name. bool is a named type. *int is not. After type T *int, T is a named type.\n\n> I am also confused by \"Two named types are identical if their type names\n> originate in the same TypeSpec\". How can more than 1 type originate in a single\n> TypeSpec, TypeSpec can possibly define only 1 type...\n\nThis means that if you have\n\n{\n1    type T int\n2    var x T\n3    var y T\n4    _ = x==y\n}\n\nthe two types referred to by T on line 2 and 3 are in fact identical because they both refer to the type originating in the TypeSpec on line 1. So the comparison on line 4 is legal.\n\nIt also means that\n\n\n{\n1   type T int\n2   var x T\n    {\n    3   type T int\n    4   var y T\n    5   _ = x==y\n    }\n}\n\nThe types on lines 2 and 4 refer to different typespecs (lines 1 and 3) so the comparison on line 5 is not legal.\n\nhttps://codereview.appspot.com/12895043/diff/3001/src/pkg/runtime/mfinal_test.go\nFile src/pkg/runtime/mfinal_test.go (right):\n\nhttps://codereview.appspot.com/12895043/diff/3001/src/pkg/runtime/mfinal_test.go#newcode45\nsrc/pkg/runtime/mfinal_test.go:45: {func(x *int) interface{} { return (*Tint)(x) }, func(v Tinter) { finalize((*int)(v.(*Tint))) }},\nOn 2013/08/14 09:27:49, dvyukov wrote:\n> Should it work for:\n> v := new(struct{foo int})\n> SetFinalizer(v, func(p *struct{foo int}) {})\n> ?\n> These are identical types, right?\n\nYes, that works. I will add a test.",
			"disapproval": false,
			"date": "2013-08-14 14:37:38.382310",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Aug 14, 2013 at 8:54 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> actually, there is already a test for unnamed identical types: *int and\r\n> *int.\r\n>\r\n>\r\nOK\r\n",
			"disapproval": false,
			"date": "2013-08-14 17:10:33.105210",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"pieter@binky.org.uk",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/14 14:37:38, rsc wrote:\n> https://codereview.appspot.com/12895043/diff/3001/src/pkg/runtime/malloc.goc\n> File src/pkg/runtime/malloc.goc (right):\n> \n> https://codereview.appspot.com/12895043/diff/3001/src/pkg/runtime/malloc.goc#newcode770\n> src/pkg/runtime/malloc.goc:770: } else if(fint->kind == KindPtr && (fint->x ==\n> nil || fint->x->name == nil || obj.type->x == nil || obj.type->x->name == nil)\n> && ((PtrType*)fint)->elem == ((PtrType*)obj.type)->elem) {\n> On 2013/08/14 09:27:49, dvyukov wrote:\n> > The spec uses \"named type\" to define several things, but I can not find what\n> > \"named type\" is, all entries of \"named type\" are usages of the term...\n> \n> A named type is a type with a name. bool is a named type. *int is not. After\n> type T *int, T is a named type.\n\n\nBefore I realized that \"*int\" may be an \"unnamed\" type, I honestly thought that \"bool\" maybe an \"unnamed\" type, because what else then? Once you know it, it's obvious.\n\n\n> > I am also confused by \"Two named types are identical if their type names\n> > originate in the same TypeSpec\". How can more than 1 type originate in a\n> single\n> > TypeSpec, TypeSpec can possibly define only 1 type...\n> \n> This means that if you have\n> \n> {\n> 1    type T int\n> 2    var x T\n> 3    var y T\n> 4    _ = x==y\n> }\n> \n> the two types referred to by T on line 2 and 3 are in fact identical because\n\n\nI would expect that this code fragment ever contains only 1 type.\nIn what TypeSpec all the bool types (are there actually multiple bool types?) originate?\n\n\n\n> they both refer to the type originating in the TypeSpec on line 1. So the\n> comparison on line 4 is legal.\n> \n> It also means that\n> \n> \n> {\n> 1   type T int\n> 2   var x T\n>     {\n>     3   type T int\n>     4   var y T\n>     5   _ = x==y\n>     }\n> }\n> \n> The types on lines 2 and 4 refer to different typespecs (lines 1 and 3) so the\n> comparison on line 5 is not legal.\n\nThis makes sense.\n\n\n> https://codereview.appspot.com/12895043/diff/3001/src/pkg/runtime/mfinal_test.go\n> File src/pkg/runtime/mfinal_test.go (right):\n> \n> https://codereview.appspot.com/12895043/diff/3001/src/pkg/runtime/mfinal_test.go#newcode45\n> src/pkg/runtime/mfinal_test.go:45: {func(x *int) interface{} { return (*Tint)(x)\n> }, func(v Tinter) { finalize((*int)(v.(*Tint))) }},\n> On 2013/08/14 09:27:49, dvyukov wrote:\n> > Should it work for:\n> > v := new(struct{foo int})\n> > SetFinalizer(v, func(p *struct{foo int}) {})\n> > ?\n> > These are identical types, right?\n> \n> Yes, that works. I will add a test.",
			"disapproval": false,
			"date": "2013-08-14 16:35:00.769660",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"pieter@binky.org.uk",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM with test for unnamed identical types and minor fixes",
			"disapproval": false,
			"date": "2013-08-14 16:35:47.338140",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "actually, there is already a test for unnamed identical types: *int and\r\n*int.\r\n",
			"disapproval": false,
			"date": "2013-08-14 16:54:26.453340",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"pieter@binky.org.uk",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=f95838c0a419 ***\n\nruntime: make SetFinalizer(x, f) accept any f for which f(x) is valid\n\nOriginally the requirement was f(x) where f's argument is\nexactly x's type.\n\nCL 11858043 relaxed the requirement in a non-standard\nway: f's argument must be exactly x's type or interface{}.\n\nIf we're going to relax the requirement, it should be done\nin a way consistent with the rest of Go. This CL allows f's\nargument to have any type for which x is assignable;\nthat's the same requirement the compiler would impose\nif compiling f(x) directly.\n\nFixes issue 5368.\n\nR=dvyukov, bradfitz, pieter\nCC=golang-dev\nhttps://codereview.appspot.com/12895043",
			"disapproval": false,
			"date": "2013-08-14 18:55:51.216490",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 12895043: runtime: make SetFinalizer(x, f) accept any f for which...",
	"created": "2013-08-13 21:30:06.202900",
	"patchsets": [
		1,
		3001,
		18001
	],
	"modified": "2013-08-14 18:55:53.215630",
	"closed": true,
	"issue": 12895043
}