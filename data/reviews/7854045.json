{
	"description": "crypto/cipher: Added BlockReader and BlockWriter\n\nWrapper for BlockMode ciphers that implement io.Reader and io.Writer\ninterfaces. PKCS7 padding was added, other padding methods should be\nsimple to implement in future commits.\nFixes issue 4968.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org",
		"luke@webconnex.com",
		"agl@golang.org"
	],
	"messages": [
		{
			"sender": "fasching.matthias@gmail.com",
			"recipients": [
				"fasching.matthias@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-03-24 20:37:04.158300",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry, but we're not adding new API again until after Go 1.1 is released.\r\nPlease ping this thread then.\r\n\r\ngolang.org/s/go11freeze\r\n",
			"disapproval": false,
			"date": "2013-03-25 00:23:48.115900",
			"approval": false
		},
		{
			"sender": "luke@webconnex.com",
			"recipients": [
				"fasching.matthias@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"luke@webconnex.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/24 20:37:04, fasmat wrote:\n> Hello mailto:golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go\n\nI do agree that padding needs to be added to the standard crypto library - whether ever that ends up being in the future.\n\nI don't think this should be in a reader/writer form though. Block ciphers are typically used to encrypt complete messages - they aren't stream ciphers. I would prefer a simple wrapper to crypto.BlockMode that implements the same interface. Each padding scheme should also be a different package - something like \"crypto/cipher/pkcs7\".\n\nSomething like this would be nice:\n\nfunc NewPKCS7Encrypter(b crypto.BlockMode) BlockMode\nfunc NewPKCS7Decrypter(b crypto.BlockMode) BlockMode\nfunc AddPadding(data []byte, blockSize int) []byte\nfunc RemovePadding(data []byte, blockSize int) []byte",
			"disapproval": false,
			"date": "2013-04-15 20:51:11.099430",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"fasching.matthias@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"luke@webconnex.com",
				"agl@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Just while I see this go by: this is open to Vaudenay's attack. I can do a real review if it gets reanimated after Go 1.1.",
			"disapproval": false,
			"date": "2013-04-15 21:31:35.809940",
			"approval": false
		},
		{
			"sender": "fasching.matthias@gmail.com",
			"recipients": [
				"fasching.matthias@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"luke@webconnex.com",
				"agl@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/15 21:31:35, agl1 wrote:\n> Just while I see this go by: this is open to Vaudenay's attack. I can do a real\n> review if it gets reanimated after Go 1.1.\n\nI will look into this in the next days.",
			"disapproval": false,
			"date": "2013-04-16 10:52:16.484330",
			"approval": false
		},
		{
			"sender": "fasching.matthias@gmail.com",
			"recipients": [
				"fasching.matthias@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"luke@webconnex.com",
				"agl@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/15 20:51:11, luke1 wrote:\n> I do agree that padding needs to be added to the standard crypto library -\n> whether ever that ends up being in the future.\n> \n> I don't think this should be in a reader/writer form though. Block ciphers are\n> typically used to encrypt complete messages - they aren't stream ciphers. I\n> would prefer a simple wrapper to crypto.BlockMode that implements the same\n> interface. Each padding scheme should also be a different package - something\n> like \"crypto/cipher/pkcs7\".\n> \n> Something like this would be nice:\n> \n> func NewPKCS7Encrypter(b crypto.BlockMode) BlockMode\n> func NewPKCS7Decrypter(b crypto.BlockMode) BlockMode\n> func AddPadding(data []byte, blockSize int) []byte\n> func RemovePadding(data []byte, blockSize int) []byte\n\nI can improve the structure of the code by separating paddings into single packages.\n\nConcerning the reader/writer interfaces for block based ciphers: I'd like to have something similar to CipherInputStream and CipherOutputStream of javax.crypto as this makes code to read a block cipher encrypted file as easy as reading stream cipher encrypted files.\n\nConsider this scenario:\nhttp://stackoverflow.com/questions/13108567/replicate-java-decryption-code-in-golang/13118647\n\nI worked around it by using a byte buffer which works for smaller files but could cause some issues with larger files on systems with limited memory.",
			"disapproval": false,
			"date": "2013-04-16 11:02:27.937950",
			"approval": false
		},
		{
			"sender": "fasching.matthias@gmail.com",
			"recipients": [
				"fasching.matthias@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"luke@webconnex.com",
				"agl@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-05-09 19:05:37.866350",
			"approval": false
		}
	],
	"owner_email": "fasching.matthias@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "fasmat",
	"subject": "code review 7854045: crypto/cipher: Added BlockReader and BlockWriter",
	"created": "2013-03-24 20:35:02.450470",
	"patchsets": [
		1,
		2001,
		5001,
		9001
	],
	"modified": "2013-05-09 19:05:37.866350",
	"closed": false,
	"issue": 7854045
}