{
	"description": "vet: add a check for untagged struct literals.",
	"cc": [
		"rsc@golang.org",
		"dsymonds@golang.org",
		"golang-dev@googlegroups.com",
		"gri@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm still worried about this giant list of standard packages\nand not applying this to other code.  I think we should\napply this to all packages for now and scale back if we\nneed to later.  Also, the go tool assumes that any package\nwithout a dot in its name is a standard package.  That\nmight be a better heuristic than having a list that is sure\nto fall out of date.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-02-03 02:36:20.504168",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com, gri@golang.org),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-02 06:46:59.327988",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5622045/diff/5001/src/cmd/vet/untaggedlit.go\nFile src/cmd/vet/untaggedlit.go (right):\n\nhttp://codereview.appspot.com/5622045/diff/5001/src/cmd/vet/untaggedlit.go#newcode76\nsrc/cmd/vet/untaggedlit.go:76: \"asn1.ObjectIdentifier\":             true,\nthese should probably be in \"<full-pkg>.<name>\" form, otherwise you'll run into conflicts (math/rand vs. crypto/rand, etc.). I can't think of any concrete examples right now, though.",
			"disapproval": false,
			"date": "2012-02-02 06:59:25.229006",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5622045/diff/5001/src/cmd/vet/untaggedlit.go\nFile src/cmd/vet/untaggedlit.go (right):\n\nhttp://codereview.appspot.com/5622045/diff/5001/src/cmd/vet/untaggedlit.go#newcode76\nsrc/cmd/vet/untaggedlit.go:76: \"asn1.ObjectIdentifier\":             true,\nOn 2012/02/02 06:59:25, dsymonds wrote:\n> these should probably be in \"<full-pkg>.<name>\" form, otherwise you'll run into\n> conflicts (math/rand vs. crypto/rand, etc.). I can't think of any concrete\n> examples right now, though.\n\nDone.",
			"disapproval": false,
			"date": "2012-02-02 08:02:42.787993",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5622045/diff/6006/src/cmd/vet/untaggedlit.go\nFile src/cmd/vet/untaggedlit.go (right):\n\nhttp://codereview.appspot.com/5622045/diff/6006/src/cmd/vet/untaggedlit.go#newcode5\nsrc/cmd/vet/untaggedlit.go:5: // This file contains the test for untagged struct literals.\nThis is a mouthful of a file name.  structlit.go?  taglit.go?\n\nhttp://codereview.appspot.com/5622045/diff/6006/src/cmd/vet/untaggedlit.go#newcode39\nsrc/cmd/vet/untaggedlit.go:39: path, ok := stdPkg(f, pkg.Name)\nI thought we were going to do this to all packages,\nnot just standard packages.\n\nhttp://codereview.appspot.com/5622045/diff/6006/src/cmd/vet/untaggedlit.go#newcode118\nsrc/cmd/vet/untaggedlit.go:118: // These go/ast struct types are grandfathered in because go/parser and\nThese should not be grandfathered.  Just put up with govet printing things about go/parser and go/printer's code.  The standard library does not have to follow these rules but if external code is using untagged literals to create an &ast.BadExpr we want to diagnose it.",
			"disapproval": false,
			"date": "2012-02-02 23:28:03.332402",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5622045/diff/3009/src/cmd/vet/taglit.go\nFile src/cmd/vet/taglit.go (right):\n\nhttp://codereview.appspot.com/5622045/diff/3009/src/cmd/vet/taglit.go#newcode82\nsrc/cmd/vet/taglit.go:82: find $GOROOT/src/pkg -type f | grep -v _test.go | xargs grep ^type.*\\\\[\\\\] | \\\nmight as well use quotes like in the rest: xargs grep '^type.*\\[\\]'",
			"disapproval": false,
			"date": "2012-02-03 03:19:19.525773",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=fe1cf15a4608 ***\n\nvet: add a check for untagged struct literals.\n\nR=rsc, dsymonds\nCC=golang-dev, gri\nhttp://codereview.appspot.com/5622045",
			"disapproval": false,
			"date": "2012-02-03 03:33:47.787427",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5622045/diff/5001/src/cmd/vet/untaggedlit.go\nFile src/cmd/vet/untaggedlit.go (right):\n\nhttp://codereview.appspot.com/5622045/diff/5001/src/cmd/vet/untaggedlit.go#newcode16\nsrc/cmd/vet/untaggedlit.go:16: func (f *File) checkUntaggedLiteral(c *ast.CompositeLit) {\nThis seems like it should be able to have a signature like\n\nfunc checkUntaggedLiteral(f *ast.File, c *ast.CompositeLit) error\n\nand then it'll be easier to use in gab.\n\nhttp://codereview.appspot.com/5622045/diff/5001/src/cmd/vet/untaggedlit.go#newcode73\nsrc/cmd/vet/untaggedlit.go:73: // find $GOROOT/src/pkg -type f | grep -v _test.go | xargs grep ^type.*\\\\[\\\\] | \\\nput this in a /* ... */ block comment so it's easier to re-run.",
			"disapproval": false,
			"date": "2012-02-02 06:55:24.269464",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5622045/diff/5001/src/cmd/vet/untaggedlit.go\nFile src/cmd/vet/untaggedlit.go (right):\n\nhttp://codereview.appspot.com/5622045/diff/5001/src/cmd/vet/untaggedlit.go#newcode16\nsrc/cmd/vet/untaggedlit.go:16: func (f *File) checkUntaggedLiteral(c *ast.CompositeLit) {\nOn 2012/02/02 06:55:24, dsymonds wrote:\n> This seems like it should be able to have a signature like\n> \n> func checkUntaggedLiteral(f *ast.File, c *ast.CompositeLit) error\n> \n> and then it'll be easier to use in gab.\n\nOTOH the style as is is consistent with the rest of the vet code (e.g. method.go, print.go).\n\nFile is a type peculiar to package vet. I'd imagine that gab will copy-and-paste instead of trying to import the vet package.\n\nhttp://codereview.appspot.com/5622045/diff/5001/src/cmd/vet/untaggedlit.go#newcode73\nsrc/cmd/vet/untaggedlit.go:73: // find $GOROOT/src/pkg -type f | grep -v _test.go | xargs grep ^type.*\\\\[\\\\] | \\\nOn 2012/02/02 06:55:24, dsymonds wrote:\n> put this in a /* ... */ block comment so it's easier to re-run.\n\nDone, with a little juggling of the sed bits to avoid an interior \"*/\".",
			"disapproval": false,
			"date": "2012-02-02 07:02:16.053389",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5622045/diff/5001/src/cmd/vet/untaggedlit.go\nFile src/cmd/vet/untaggedlit.go (right):\n\nhttp://codereview.appspot.com/5622045/diff/5001/src/cmd/vet/untaggedlit.go#newcode16\nsrc/cmd/vet/untaggedlit.go:16: func (f *File) checkUntaggedLiteral(c *ast.CompositeLit) {\nOn 2012/02/02 07:02:16, nigeltao wrote:\n> On 2012/02/02 06:55:24, dsymonds wrote:\n> > This seems like it should be able to have a signature like\n> > \n> > func checkUntaggedLiteral(f *ast.File, c *ast.CompositeLit) error\n> > \n> > and then it'll be easier to use in gab.\n> \n> OTOH the style as is is consistent with the rest of the vet code (e.g.\n> method.go, print.go).\n> \n> File is a type peculiar to package vet. I'd imagine that gab will copy-and-paste\n> instead of trying to import the vet package.\n\nWith my suggested change, though, we could copy this file with only a trivial rename of the package. And there's nothing here that needs the *main.File type here, except for the f.Warn, which could just as easily be in the calling code.",
			"disapproval": false,
			"date": "2012-02-02 07:22:04.684101",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5622045/diff/5001/src/cmd/vet/untaggedlit.go\nFile src/cmd/vet/untaggedlit.go (right):\n\nhttp://codereview.appspot.com/5622045/diff/5001/src/cmd/vet/untaggedlit.go#newcode16\nsrc/cmd/vet/untaggedlit.go:16: func (f *File) checkUntaggedLiteral(c *ast.CompositeLit) {\nOn 2012/02/02 07:22:04, dsymonds wrote:\n> On 2012/02/02 07:02:16, nigeltao wrote:\n> > On 2012/02/02 06:55:24, dsymonds wrote:\n> > > This seems like it should be able to have a signature like\n> > > \n> > > func checkUntaggedLiteral(f *ast.File, c *ast.CompositeLit) error\n> > > \n> > > and then it'll be easier to use in gab.\n> > \n> > OTOH the style as is is consistent with the rest of the vet code (e.g.\n> > method.go, print.go).\n> > \n> > File is a type peculiar to package vet. I'd imagine that gab will\n> copy-and-paste\n> > instead of trying to import the vet package.\n> \n> With my suggested change, though, we could copy this file with only a trivial\n> rename of the package. And there's nothing here that needs the *main.File type\n> here, except for the f.Warn, which could just as easily be in the calling code.\n\nI think we can copy the file as is. gab's main package just has to provide its own File type (with a Warnf method).",
			"disapproval": false,
			"date": "2012-02-02 07:30:18.765948",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nhttp://codereview.appspot.com/5622045/\n",
			"disapproval": false,
			"date": "2012-02-03 02:56:42.115788",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5622045/diff/6006/src/cmd/vet/untaggedlit.go\nFile src/cmd/vet/untaggedlit.go (right):\n\nhttp://codereview.appspot.com/5622045/diff/6006/src/cmd/vet/untaggedlit.go#newcode5\nsrc/cmd/vet/untaggedlit.go:5: // This file contains the test for untagged struct literals.\nOn 2012/02/02 23:28:03, rsc wrote:\n> This is a mouthful of a file name.  structlit.go?  taglit.go?\n\nRenamed to taglit.go.\n\nhttp://codereview.appspot.com/5622045/diff/6006/src/cmd/vet/untaggedlit.go#newcode39\nsrc/cmd/vet/untaggedlit.go:39: path, ok := stdPkg(f, pkg.Name)\nOn 2012/02/02 23:28:03, rsc wrote:\n> I thought we were going to do this to all packages,\n> not just standard packages.\n\nOTOH, we can't whitelist the slice types for third party packages. I'm also less concerned about changes to third party struct types, as third party code does not promise backwards compatibility.\n\nhttp://codereview.appspot.com/5622045/diff/6006/src/cmd/vet/untaggedlit.go#newcode118\nsrc/cmd/vet/untaggedlit.go:118: // These go/ast struct types are grandfathered in because go/parser and\nOn 2012/02/02 23:28:03, rsc wrote:\n> These should not be grandfathered.  Just put up with govet printing things about\n> go/parser and go/printer's code.  The standard library does not have to follow\n> these rules but if external code is using untagged literals to create an\n> &ast.BadExpr we want to diagnose it.\n\nDone.",
			"disapproval": false,
			"date": "2012-02-03 01:16:13.143669",
			"approval": false
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 5622045: vet: add a check for untagged struct literals.",
	"created": "2012-02-02 06:45:45.027095",
	"patchsets": [
		1,
		2001,
		5001,
		2002,
		6006,
		6,
		2005,
		3009,
		2008
	],
	"modified": "2012-02-03 03:33:50.304015",
	"closed": true,
	"issue": 5622045
}