{
	"description": "all packages: fix various typos\n\nDetected semi-automatically. There are probably more.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-02-02 00:13:52.156499",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn Wed, Feb 1, 2012 at 4:13 PM, <gri@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://code.google.com/p/go\n>\n>\n> Description:\n> all packages: fix various typos\n>\n> Detected semi-automatically. There are probably more.\n>\n> Please review this at http://codereview.appspot.com/**5620046/<http://codereview.appspot.com/5620046/>\n>\n> Affected files:\n>  M src/cmd/api/goapi.go\n>  M src/cmd/fix/fix.go\n>  M src/cmd/fix/reflect.go\n>  M src/cmd/yacc/yacc.go\n>  M src/pkg/crypto/elliptic/p224.**go\n>  M src/pkg/encoding/gob/doc.go\n>  M src/pkg/encoding/xml/typeinfo.**go\n>  M src/pkg/exp/ebnflint/doc.go\n>  M src/pkg/exp/norm/forminfo.go\n>  M src/pkg/go/doc/comment.go\n>  M src/pkg/html/template/js.go\n>  M src/pkg/net/interface_bsd.go\n>\n>\n> Index: src/cmd/api/goapi.go\n> ==============================**==============================**=======\n> --- a/src/cmd/api/goapi.go\n> +++ b/src/cmd/api/goapi.go\n> @@ -119,7 +119,7 @@\n>        lastConstType   string\n>        curPackageName  string\n>        curPackage      *ast.Package\n> -       prevConstType   map[string]string // identifer -> \"ideal-int\"\n> +       prevConstType   map[string]string // identifier -> \"ideal-int\"\n>        packageState    map[string]loadState\n>        interfaces      map[pkgSymbol]*ast.**InterfaceType\n>        selectorFullPkg map[string]string // \"http\" => \"net/http\", updated\n> by imports\n> Index: src/cmd/fix/fix.go\n> ==============================**==============================**=======\n> --- a/src/cmd/fix/fix.go\n> +++ b/src/cmd/fix/fix.go\n> @@ -704,7 +704,7 @@\n>        for _, imp := range f.Imports {\n>                if importPath(imp) == oldPath {\n>                        rewrote = true\n> -                       // record old End, beacuse the default is to\n> compute\n> +                       // record old End, because the default is to\n> compute\n>                        // it using the length of imp.Path.Value.\n>                        imp.EndPos = imp.End()\n>                        imp.Path.Value = strconv.Quote(newPath)\n> Index: src/cmd/fix/reflect.go\n> ==============================**==============================**=======\n> --- a/src/cmd/fix/reflect.go\n> +++ b/src/cmd/fix/reflect.go\n> @@ -49,7 +49,7 @@\n>  //\n>  // Not all type checks result in a single Kind check.  The rewrite of the\n> type check for\n>  // reflect.ArrayOrSliceType checks x.Kind() against reflect.Array and\n> reflect.Slice.\n> -// The rewrite for *reflect.IntType checks againt Int, Int8, Int16,\n> Int32, Int64.\n> +// The rewrite for *reflect.IntType checks against Int, Int8, Int16,\n> Int32, Int64.\n>  // The rewrite for *reflect.UintType adds Uintptr.\n>  //\n>  // A type switch turns into an assignment and a switch on Kind:\n> Index: src/cmd/yacc/yacc.go\n> ==============================**==============================**=======\n> --- a/src/cmd/yacc/yacc.go\n> +++ b/src/cmd/yacc/yacc.go\n> @@ -545,7 +545,7 @@\n>        // put into prdptr array in the format\n>        // target\n>        // followed by id's of terminals and non-terminals\n> -       // followd by -nprod\n> +       // followed by -nprod\n>\n>        for t != MARK && t != ENDFILE {\n>                mem := 0\n> Index: src/pkg/crypto/elliptic/p224.**go\n> ==============================**==============================**=======\n> --- a/src/pkg/crypto/elliptic/**p224.go\n> +++ b/src/pkg/crypto/elliptic/**p224.go\n> @@ -225,7 +225,7 @@\n>                in[i] += p224ZeroModP63[i]\n>        }\n>\n> -       // Elimintate the coefficients at 2**224 and greater.\n> +       // Eliminate the coefficients at 2**224 and greater.\n>        for i := 14; i >= 8; i-- {\n>                in[i-8] -= in[i]\n>                in[i-5] += (in[i] & 0xffff) << 12\n> @@ -288,7 +288,7 @@\n>        a[0] += mask & (1 << 28)\n>  }\n>\n> -// p224Invert calcuates *out = in**-1 by computing in**(2**224 - 2**96 -\n> 1),\n> +// p224Invert calculates *out = in**-1 by computing in**(2**224 - 2**96 -\n> 1),\n>  // i.e. Fermat's little theorem.\n>  func p224Invert(out, in *p224FieldElement) {\n>        var f1, f2, f3, f4 p224FieldElement\n> Index: src/pkg/encoding/gob/doc.go\n> ==============================**==============================**=======\n> --- a/src/pkg/encoding/gob/doc.go\n> +++ b/src/pkg/encoding/gob/doc.go\n> @@ -70,7 +70,7 @@\n>  Structs, arrays and slices are also supported.  Strings and arrays of\n> bytes are\n>  supported with a special, efficient representation (see below).  When a\n> slice is\n>  decoded, if the existing slice has capacity the slice will be extended in\n> place;\n> -if not, a new array is allocated.  Regardless, the length of the resuling\n> slice\n> +if not, a new array is allocated.  Regardless, the length of the\n> resulting slice\n>  reports the number of elements decoded.\n>\n>  Functions and channels cannot be sent in a gob.  Attempting\n> Index: src/pkg/encoding/xml/typeinfo.**go\n> ==============================**==============================**=======\n> --- a/src/pkg/encoding/xml/**typeinfo.go\n> +++ b/src/pkg/encoding/xml/**typeinfo.go\n> @@ -193,7 +193,7 @@\n>\n>        // If the field type has an XMLName field, the names must match\n>        // so that the behavior of both marshalling and unmarshalling\n> -       // is straighforward and unambiguous.\n> +       // is straightforward and unambiguous.\n>        if finfo.flags&fElement != 0 {\n>                ftyp := f.Type\n>                xmlname := lookupXMLName(ftyp)\n> Index: src/pkg/exp/ebnflint/doc.go\n> ==============================**==============================**=======\n> --- a/src/pkg/exp/ebnflint/doc.go\n> +++ b/src/pkg/exp/ebnflint/doc.go\n> @@ -4,7 +4,7 @@\n>\n>  /*\n>\n> -Ebnflint verifies that EBNF productions are consistent and gramatically\n> correct.\n> +Ebnflint verifies that EBNF productions are consistent and grammatically\n> correct.\n>  It reads them from an HTML document such as the Go specification.\n>\n>  Grammar productions are grouped in boxes demarcated by the HTML elements\n> Index: src/pkg/exp/norm/forminfo.go\n> ==============================**==============================**=======\n> --- a/src/pkg/exp/norm/forminfo.go\n> +++ b/src/pkg/exp/norm/forminfo.go\n> @@ -111,7 +111,7 @@\n>\n>  // Wrappers for tables.go\n>\n> -// The 16-bit value of the decompostion tries is an index into a byte\n> +// The 16-bit value of the decomposition tries is an index into a byte\n>  // array of UTF-8 decomposition sequences. The first byte is the number\n>  // of bytes in the decomposition (excluding this length byte). The actual\n>  // sequence starts at the offset+1.\n> Index: src/pkg/go/doc/comment.go\n> ==============================**==============================**=======\n> --- a/src/pkg/go/doc/comment.go\n> +++ b/src/pkg/go/doc/comment.go\n> @@ -336,7 +336,7 @@\n>\n>                if lastWasBlank && !lastWasHeading && i+2 < len(lines) &&\n>                        isBlank(lines[i+1]) && !isBlank(lines[i+2]) &&\n> indentLen(lines[i+2]) == 0 {\n> -                       // current line is non-blank, sourounded by blank\n> lines\n> +                       // current line is non-blank, surrounded by blank\n> lines\n>                        // and the next non-blank line is not indented: this\n>                        // might be a heading.\n>                        if head := heading(line); head != \"\" {\n> Index: src/pkg/html/template/js.go\n> ==============================**==============================**=======\n> --- a/src/pkg/html/template/js.go\n> +++ b/src/pkg/html/template/js.go\n> @@ -154,7 +154,7 @@\n>                a = fmt.Sprint(args...)\n>        }\n>        // TODO: detect cycles before calling Marshal which loops\n> infinitely on\n> -       // cyclic data. This may be an unnacceptable DoS risk.\n> +       // cyclic data. This may be an unacceptable DoS risk.\n>\n>        b, err := json.Marshal(a)\n>        if err != nil {\n> Index: src/pkg/net/interface_bsd.go\n> ==============================**==============================**=======\n> --- a/src/pkg/net/interface_bsd.go\n> +++ b/src/pkg/net/interface_bsd.go\n> @@ -15,7 +15,7 @@\n>  )\n>\n>  // If the ifindex is zero, interfaceTable returns mappings of all\n> -// network interfaces.  Otheriwse it returns a mapping of a specific\n> +// network interfaces.  Otherwise it returns a mapping of a specific\n>  // interface.\n>  func interfaceTable(ifindex int) ([]Interface, error) {\n>        var ift []Interface\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-02-02 00:18:28.106022",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as 925f75050246 ***\n\nall packages: fix various typos\n\nDetected semi-automatically. There are probably more.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5620046",
			"disapproval": false,
			"date": "2012-02-02 00:19:41.209198",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 5620046: all packages: fix various typos",
	"created": "2012-02-02 00:11:16.888996",
	"patchsets": [
		1,
		1002,
		2015,
		3015
	],
	"modified": "2012-02-02 00:19:42.036837",
	"closed": true,
	"issue": 5620046
}