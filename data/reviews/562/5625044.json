{
	"description": "test: rewrite test/run shell script + errchk (perl) in Go\n\nThis doesn't run all ~750 of the tests, but most.\n\nProgress on issue 2833",
	"cc": [
		"golang-dev@googlegroups.com",
		"ality@pbrane.org",
		"rsc@golang.org",
		"r@google.com",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-12 08:12:18.643535",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "bradfitz@golang.org once said:\n> test: rewrite test/run shell script + errchk (perl) in Go\n> \n> This doesn't run all ~750 of the tests, but most.\n> The majority use one of a few common shell script patterns.\n> \n> This CL doesn't include figure out the final UI, or\n> how/whether we'll change the headers of the test files.\n\nI wrote a quick script to figure out which tests\naren't currently supported.  There are 69 of them:\n\n# BEGIN \n64bit.go\n\t// $G $D/$F.go && $L $F.$A && ./$A.out >tmp.go &&\n\t// $G tmp.go && $L tmp.$A && ./$A.out\n\t// rm -f tmp.go\n\nargs.go\n\t// $G $F.go && $L $F.$A && ./$A.out arg1 arg2\n\nbugs/bug395.go\n\t// echo bug395 is broken\n\nchan/select5.go\n\t// $G $D/$F.go && $L $F.$A && ./$A.out >tmp.go &&\n\t// $G tmp.go && $L tmp.$A && ./$A.out\n\t// rm -f tmp.go\n\nchar_lit.go\n\t// $G $F.go && $L $F.$A &&./$A.out\n\ncmplxdivide.go\n\t// $G $D/$F.go $D/cmplxdivide1.go && $L $D/$F.$A && ./$A.out\n\ncmplxdivide1.go # missing header\n\ncrlf.go\n\t// $G $D/$F.go && $L $F.$A && ./$A.out >tmp.go &&\n\t// $G tmp.go && $L tmp.$A && ./$A.out\n\t// rm -f tmp.go\n\nddd3.go\n\t// $G $D/ddd2.go && $G $D/$F.go && $L $F.$A && ./$A.out\n\ndwarf/main.go\n\t// $G $D/$F.go $D/z*.go && $L $F.$A && ./$A.out\n\nescape2.go\n\t// errchk -0 $G -m -l $D/$F.go\n\nfixedbugs/bug083.go\n\t// $G $D/$F.dir/bug0.go && errchk $G $D/$F.dir/bug1.go\n\nfixedbugs/bug282.go\n\t// $G $D/$F.dir/p1.go && $G $D/$F.dir/p2.go\n\nfixedbugs/bug414.go\n\t// $G $D/$F.dir/p1.go && $G $D/$F.dir/main.go && $L main.$A && ./$A.out\n\nfixedbugs/bug088.go\n\t// $G $D/$F.dir/bug0.go && $G $D/$F.dir/bug1.go\n\nfixedbugs/bug401.go\n\t// $G $D/$F.go && $L $F.$A && ./$A.out || echo \"Bug401\"\n\nfixedbugs/bug367.go\n\t// $G $D/$F.dir/p.go && $G $D/$F.dir/main.go && $L main.$A && ./$A.out\n\nfixedbugs/bug382.go\n\t// $G $D/$F.dir/pkg.go && $G $D/$F.go || echo \"Bug 382\"\n\nfixedbugs/bug306.go\n\t// $G $D/$F.dir/p1.go && $G $D/$F.dir/p2.go\n\nfixedbugs/bug106.go\n\t// $G $D/$F.dir/bug0.go && $G $D/$F.dir/bug1.go\n\nfixedbugs/bug322.go\n\t// $G $D/$F.dir/lib.go && $G $D/$F.dir/main.go && $L main.$A && ./$A.out\n\nfixedbugs/bug345.go\n\t// $G $D/$F.dir/io.go && errchk $G -e $D/$F.dir/main.go\n\nfixedbugs/bug038.go\n\t// ! $G $D/$F.go >/dev/null\n\nfixedbugs/bug392.go\n\t// $G $D/$F.dir/one.go && $G $D/$F.dir/two.go && $G $D/$F.dir/three.go\n\nfixedbugs/bug415.go\n\t// $G $D/$F.dir/p.go && $G $D/$F.dir/main.go\n\nfixedbugs/bug036.go\n\t// ! $G $D/$F.go >/dev/null\n\nfixedbugs/bug040.go\n\t// ! $G $D/$F.go >/dev/null\n\nfixedbugs/bug385_64.go\n\t// [ $A != 6 ]  || errchk $G -e $D/$F.go\n\nfixedbugs/bug407.go\n\t// $G $D/$F.dir/one.go && $G $D/$F.dir/two.go\n\nfixedbugs/bug324.go\n\t// $G $D/$F.dir/p.go && $G $D/$F.dir/main.go && $L main.$A && ./$A.out\n\nfixedbugs/bug391.go\n\t// $G $D/$F.go || echo \"Issue2576\"\n\nfixedbugs/bug369.go\n\t// $G -N -o slow.$A $D/bug369.dir/pkg.go &&\n\t// $G -o fast.$A $D/bug369.dir/pkg.go &&\n\nfixedbugs/bug222.go\n\t// $G $D/$F.dir/chanbug.go && $G -I. $D/$F.dir/chanbug2.go\n\nfixedbugs/bug206.go\n\t// $G $D/$F.go && $L $F.$A && ./$A.out >/dev/null 2>&1\n\nfixedbugs/bug396.go\n\t// $G $D/$F.dir/one.go && $G $D/$F.dir/two.go\n\nfixedbugs/bug191.go\n\t// $G $D/bug191.dir/a.go && $G $D/bug191.dir/b.go && $G $D/$F.go && $L $F.$A\n\nfixedbugs/bug248.go\n\t// $G $D/$F.dir/bug0.go &&\n\t// $G $D/$F.dir/bug1.go &&\n\t// $G $D/$F.dir/bug2.go &&\n\t// errchk $G -e $D/$F.dir/bug3.go &&\n\t// $L bug2.$A &&\n\t// ./$A.out\n\nfixedbugs/bug133.go\n\t// $G $D/$F.dir/bug0.go && $G $D/$F.dir/bug1.go && errchk $G $D/$F.dir/bug2.go\n\nfixedbugs/bug385_32.go\n\t// [ $A == 6 ] || errchk $G -e $D/$F.go\n\nfixedbugs/bug399.go\n\t// $G $D/$F.go || echo \"Bug399\"\n\nfixedbugs/bug313.go\n\t// errchk $G -e $D/$F.dir/[ab].go\n\nfixedbugs/bug377.go\n\t// $G $D/$F.dir/one.go && $G $D/$F.dir/two.go\n\nfixedbugs/bug387.go\n\t// $G $D/$F.go || echo \"Bug387\"\n\nfixedbugs/bug404.go\n\t// $G $D/$F.dir/one.go && $G $D/$F.dir/two.go\n\nfixedbugs/bug302.go\n\t// $G $D/bug302.dir/p.go && \"$GOROOT\"/bin/tool/pack grc pp.a p.$A && $G $D/bug302.dir/main.go\n\nfixedbugs/bug114.go\n\t// $G $D/$F.go && $L $F.$A && (./$A.out\n\nfixedbugs/bug223.go\n\t// (! $G $D/$F.go) | grep 'initialization loop' >/dev/null\n\nfixedbugs/bug183.go\n\t//errchk $G $D/$F.go\n\nfixedbugs/bug160.go\n\t// $G $D/bug160.dir/x.go && $G $D/bug160.dir/y.go && $L y.$A && ./$A.out\n\nfixedbugs/bug335.go\n\t// $G $D/$F.dir/b.go && $G $D/$F.dir/a.go\n\t// rm -f a.$A b.$A\n\nfixedbugs/bug406.go\n\t// $G $D/$F.go && $L $F.$A && ./$A.out || echo \"Bug406\"\n\nfunc1.go\n\t// errchk $G $F.go\n\nfunc2.go\n\t// $G $F.go\n\nfunc3.go\n\t// errchk $G $F.go\n\nimport3.go\n\t// $G $D/import2.go && $G $D/$F.go\n\nimport4.go\n\t// $G $D/empty.go && errchk $G $D/$F.go\n\nindex.go\n\t// $G $D/$F.go && $L $F.$A &&\n\t// ./$A.out -pass 0 >tmp.go && $G tmp.go && $L -o $A.out1 tmp.$A && ./$A.out1 &&\n\t// ./$A.out -pass 1 >tmp.go && errchk $G -e tmp.go &&\n\t// ./$A.out -pass 2 >tmp.go && errchk $G -e tmp.go\n\t// rm -f tmp.go $A.out1\n\ninterface/private.go\n\t// $G $D/${F}1.go && errchk $G $D/$F.go\n\ninterface/recursive2.go\n\t// $G $D/recursive1.go && $G $D/$F.go\n\ninterface/embed1.go\n\t// $G $D/embed0.go && $G $D/$F.go && $L $F.$A && ./$A.out\n\nlinkx.go\n\t// $G $D/$F.go && $L -X main.tbd hello $F.$A && ./$A.out\n\nmethod4.go\n\t// $G $D/method4a.go && $G $D/$F.go && $L $F.$A && ./$A.out\n\nnul1.go\n\t// [ \"$GORUN\" == \"\" ] || exit 0\n\t// $G $D/$F.go && $L $F.$A && ./$A.out >tmp.go &&\n\t// errchk $G -e tmp.go\n\t// rm -f tmp.go\n\nsafe/usesafe.go\n\t// $G $D/pkg.go && pack grcS pkg.a pkg.$A 2> /dev/null && rm pkg.$A && $G -I. -u $D/main.go\n\t// rm -f pkg.a\n\nsafe/nousesafe.go\n\t// $G $D/pkg.go && pack grc pkg.a pkg.$A 2> /dev/null && rm pkg.$A && errchk $G -I. -u $D/main.go\n\t// rm -f pkg.a\n\nsieve.go\n\t// $G $F.go && $L $F.$A\n\nsigchld.go\n\t// [ \"$GOOS\" == windows ] ||\n\t// ($G $D/$F.go && $L $F.$A && ./$A.out 2>&1 | cmp - $D/$F.out)\n\nsinit.go\n\t// $G -S $D/$F.go | egrep initdone >/dev/null && echo BUG sinit || true\n\nsolitaire.go\n\t// $G $F.go && $L $F.$A\n\n# END\n",
			"disapproval": false,
			"date": "2012-02-12 11:21:12.471578",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"ality@pbrane.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nCode looks fine, but it could use some comments.\nIn particular, a comment on each function saying what it does\nand how it is expected to be used would be great.\n\nThis is fine to check in as a checkpoint, once there are\nsome function comments.\n\nI suggest (in a separate sequence of CLs) to replace this line in test/run\n\nsed '/^\\/\\//!q' $i | sed 's@//@@; $d' |sed 's|./\\$A.out|$E &|g' >\"$RUNFILE\"\n\nwith\n\necho '\nbuild() { $G $D/$F.go && $L $F.$A; }\nrun() { $G $D/$F.go && $L $F.$A && ./$A.out || echo BUG; }\nerrchk() { ./errchk $G -e $D/$F.go; }\n' >\"$RUNFILE\"\nsed '/^\\/\\//!q' $i | sed 's@//@@; $d' |sed 's|./\\$A.out|$E &|g' >>\"$RUNFILE\"\n\nand then you can start replacing the headers on the tests with\n// build, // run, etc.\n\nhttp://codereview.appspot.com/5625044/diff/9002/test/run.go\nFile test/run.go (right):\n\nhttp://codereview.appspot.com/5625044/diff/9002/test/run.go#newcode86\ntest/run.go:86: if arg == \"-\" || arg == \"--\" {\nWhat is this?\nIf arg == \"-\" it means someone asked to read from stdin (or something)\nand should not be ignored.\nIf arg == \"--\" it's even more surprising: \"--\" ends the flag processing, but the flag library eats that one.  So you'd have to say go run run.go -- -- in order to get a -- here.  Delete this statement?\n\nAlso it would be nice if this could be a directory here.\nMaybe instead\n\nargs := flag.Args()\nif len(args) == 0 {\n    args = dirs\n}\nfor _, arg := range args {\n    process arg\n}\n\nhttp://codereview.appspot.com/5625044/diff/9002/test/run.go#newcode107\ntest/run.go:107: continue\nPlease print about skipped tests too, to keep us honest.",
			"disapproval": false,
			"date": "2012-02-13 17:24:03.516360",
			"approval": true
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please don't check this in.\n\nI think these tests need to be dealt with a different way. They are a compiler regression suite and should be marginalized rather than institutionalized.  I will come up with an approach I prefer.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-02-13 22:31:50.417606",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Feb 14, 2012 at 4:24 AM, <rsc@golang.org> wrote:\n\n> LGTM\n>\n> Code looks fine, but it could use some comments.\n> In particular, a comment on each function saying what it does\n> and how it is expected to be used would be great.\n>\n> This is fine to check in as a checkpoint, once there are\n> some function comments.\n>\n> I suggest (in a separate sequence of CLs) to replace this line in\n> test/run\n>\n> sed '/^\\/\\//!q' $i | sed 's@//@@; $d' |sed 's|./\\$A.out|$E &|g'\n>\n>> \"$RUNFILE\"\n>>\n>\n> with\n>\n> echo '\n> build() { $G $D/$F.go && $L $F.$A; }\n> run() { $G $D/$F.go && $L $F.$A && ./$A.out || echo BUG; }\n> errchk() { ./errchk $G -e $D/$F.go; }\n> ' >\"$RUNFILE\"\n> sed '/^\\/\\//!q' $i | sed 's@//@@; $d' |sed 's|./\\$A.out|$E &|g'\n>\n>> \"$RUNFILE\"\n>>>\n>>\n> and then you can start replacing the headers on the tests with\n> // build, // run, etc.\n>\n\nI failed at this step, several times.  Gmail's formatting didn't help,\neither.\n\nShell and/or sed has defeated me.\n\nI called in reinforcements, but sed was still too much for us.\n\nCan you modify test/run to add the headers?  I can modify the test files in\na batch later.\n",
			"disapproval": false,
			"date": "2012-02-17 04:08:00.112944",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "sure, will send a cl\n",
			"disapproval": false,
			"date": "2012-02-17 04:10:29.740841",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"ality@pbrane.org",
				"rsc@golang.org",
				"r@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5625044/diff/15001/test/run.go\nFile test/run.go (right):\n\nhttp://codereview.appspot.com/5625044/diff/15001/test/run.go#newcode79\ntest/run.go:79: log.Fatalf(\"can't yet deal with non-go argument %q\", arg)\ns/argument/file/\n\nhttp://codereview.appspot.com/5625044/diff/15001/test/run.go#newcode133\ntest/run.go:133: if !strings.HasSuffix(names[i], \".go\") {\ni had to stare at this for a while. simpler:\n\ndirnames, err := f.Readdirnames(-1)\ncheck(err)\nfor _, name := range dirnames {\n  if strings.HasSuffix(name, \".go\") {\n    names = append(names, name)\n  }\n}\n\nhttp://codereview.appspot.com/5625044/diff/15001/test/run.go#newcode160\ntest/run.go:160: toRun = make(chan *test, 5000)\nwhere does 5000 come from?\n\nhttp://codereview.appspot.com/5625044/diff/15001/test/run.go#newcode190\ntest/run.go:190: t.err = skipError(\"starts with newline\")\nall these errors needs to include the file name in the printout. it looks like if check does the work, it won't always be there.\n\na setError method would do it.\nreturn t.setErr(...)\n\nalso t.Errorf would be handy\n\nhttp://codereview.appspot.com/5625044/diff/15001/test/run.go#newcode281\ntest/run.go:281: type test struct {\nput the type declaration above the methods",
			"disapproval": false,
			"date": "2012-02-20 06:05:09.478765",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"ality@pbrane.org",
				"rsc@golang.org",
				"r@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, ality@pbrane.org, rsc@golang.org, r@google.com, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-21 00:50:13.256227",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"ality@pbrane.org",
				"rsc@golang.org",
				"r@google.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=8ae6dac3df56 ***\n\ntest: rewrite test/run shell script + errchk (perl) in Go\n\nThis doesn't run all ~750 of the tests, but most.\n\nProgress on issue 2833\n\nR=golang-dev, ality, rsc, r, r\nCC=golang-dev\nhttp://codereview.appspot.com/5625044",
			"disapproval": false,
			"date": "2012-02-21 03:28:57.443353",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"ality@pbrane.org",
				"rsc@golang.org",
				"r@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5625044/diff/15001/test/run.go\nFile test/run.go (right):\n\nhttp://codereview.appspot.com/5625044/diff/15001/test/run.go#newcode79\ntest/run.go:79: log.Fatalf(\"can't yet deal with non-go argument %q\", arg)\nOn 2012/02/20 06:05:09, r wrote:\n> s/argument/file/\n\nDone.\n\nhttp://codereview.appspot.com/5625044/diff/15001/test/run.go#newcode133\ntest/run.go:133: if !strings.HasSuffix(names[i], \".go\") {\nOn 2012/02/20 06:05:09, r wrote:\n> i had to stare at this for a while. simpler:\n> \n> dirnames, err := f.Readdirnames(-1)\n> check(err)\n> for _, name := range dirnames {\n>   if strings.HasSuffix(name, \".go\") {\n>     names = append(names, name)\n>   }\n> }\n\nDone.\n\nhttp://codereview.appspot.com/5625044/diff/15001/test/run.go#newcode160\ntest/run.go:160: toRun = make(chan *test, 5000)\nOn 2012/02/20 06:05:09, r wrote:\n> where does 5000 come from?\n\nmade it a constant & documented it.\n\nhttp://codereview.appspot.com/5625044/diff/15001/test/run.go#newcode190\ntest/run.go:190: t.err = skipError(\"starts with newline\")\nOn 2012/02/20 06:05:09, r wrote:\n> all these errors needs to include the file name in the printout. it looks like\n> if check does the work, it won't always be there.\n> \n> a setError method would do it.\n> return t.setErr(...)\n> \n> also t.Errorf would be handy\n\nContext is included by the caller.\n\nThe lazy check() isn't used for t.err.\n\nhttp://codereview.appspot.com/5625044/diff/15001/test/run.go#newcode281\ntest/run.go:281: type test struct {\nOn 2012/02/20 06:05:09, r wrote:\n> put the type declaration above the methods\n\nDone.",
			"disapproval": false,
			"date": "2012-02-21 00:50:10.641178",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"ality@pbrane.org",
				"rsc@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, ality@pbrane.org, rsc@golang.org, r@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-20 05:45:10.778808",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"ality@pbrane.org",
				"rsc@golang.org",
				"r@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "CL description needs update\nLGTM as a checkpoint.\n\nhttp://codereview.appspot.com/5625044/diff/19001/test/run.go\nFile test/run.go (right):\n\nhttp://codereview.appspot.com/5625044/diff/19001/test/run.go#newcode56\ntest/run.go:56: // maxTests is an upper bound on the total number of total tests.\n\"total number of total tests\"\ntotally delete one total, preferably the second.",
			"disapproval": false,
			"date": "2012-02-21 03:09:15.133839",
			"approval": true
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 5625044: test: rewrite test/run shell script + errchk (perl) in Go",
	"created": "2012-02-03 20:13:23.059679",
	"patchsets": [
		1,
		2001,
		5001,
		7001,
		9002,
		15001,
		19001,
		15006
	],
	"modified": "2012-02-21 03:28:59.757166",
	"closed": true,
	"issue": 5625044
}