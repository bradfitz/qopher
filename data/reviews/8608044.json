{
	"description": "net: separate pollster initialization from network file descriptor allocation\n\nUnlike the existing net package own pollster, runtime-integrated\nnetwork pollster on BSD variants, actually kqueue, requires a socket\nthat has beed passed to syscall.Listen previously for a stream\nlistener.\n\nThis CL separates pollDesc.Init (actually runtime_pollOpen) from newFD\nto allow control of each state of sockets and adds init method to netFD\ninstead. Upcoming CLs will rearrange the call order of runtime-integrated\npollster and syscall functions like the following;\n\n- For dialers that open active connections, runtime_pollOpen will be\n  called in between syscall.Bind and syscall.Connect.\n\n- For stream listeners that open passive stream connections,\n  runtime_pollOpen will be called just after syscall.Listen.\n\n- For datagram listeners that open datagram connections,\n  runtime_pollOpen will be called just after syscall.Bind.\n\nThis is in preparation for runtime-integrated network pollster for BSD\nvariants.\n\nUpdate issue 5199",
	"cc": [
		"dvyukov@google.com",
		"alex.brainman@gmail.com",
		"minux.ma@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What's the status of this?",
			"disapproval": false,
			"date": "2013-06-05 21:04:42.554260",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jun 6, 2013 at 6:04 AM,  <bradfitz@golang.org> wrote:\r\n\r\n> What's the status of this?\r\n\r\nIt's part of issue 5199.\r\nhttps://groups.google.com/d/msg/golang-dev/hkygwgxDQ-s/HUQJGAomOksJ\r\n",
			"disapproval": false,
			"date": "2013-06-05 21:36:34.376960",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=dvyukov",
			"disapproval": false,
			"date": "2013-06-20 16:33:47.009920",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Is it ready for review? It seems to be not mailed.",
			"disapproval": false,
			"date": "2013-06-22 15:51:11.606640",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/22 15:51:11, dvyukov wrote:\n> Is it ready for review? It seems to be not mailed.\n\nQ=wait",
			"disapproval": false,
			"date": "2013-06-24 11:18:15.228540",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Is this still necessary? I thought that bsd will reuse darwin code, which does not need the change.",
			"disapproval": false,
			"date": "2013-08-01 12:33:45.402140",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Aug 1, 2013 at 9:33 PM,  <dvyukov@google.com> wrote:\r\n\r\n> Is this still necessary? I thought that bsd will reuse darwin code,\r\n> which does not need the change.\r\n\r\nI think, we need to pass a socket that has been called listen\r\npreviously to kqueue on BSD variants for stream listeners\r\nrather than using NOTE_LOWAT, overriding SO_RCVLOWAT\r\nto pull up pending connections from the kernel.\r\n\r\nNot sure the reason why Darwin works well so far.\r\n\r\nAm I missing something?\r\n",
			"disapproval": false,
			"date": "2013-08-01 13:05:41.001250",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/01 13:05:41, mikio wrote:\n> On Thu, Aug 1, 2013 at 9:33 PM,  <mailto:dvyukov@google.com> wrote:\n> \n> > Is this still necessary? I thought that bsd will reuse darwin code,\n> > which does not need the change.\n> \n> I think, we need to pass a socket that has been called listen\n> previously to kqueue on BSD variants for stream listeners\n> rather than using NOTE_LOWAT, overriding SO_RCVLOWAT\n> to pull up pending connections from the kernel.\n> \n> Not sure the reason why Darwin works well so far.\n> \n> Am I missing something?\n\nI don't know what is necessary for bsd systems. Darwin is happy with current code.",
			"disapproval": false,
			"date": "2013-08-01 13:11:27.934010",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Aug 1, 2013 at 10:11 PM,  <dvyukov@google.com> wrote:\r\n\r\n> I don't know what is necessary for bsd systems. Darwin is happy with\r\n> current code.\r\n\r\n-- kqueue on-line manual --\r\nEVFILT_READ\r\n\r\n(snip)\r\n\r\nSockets\r\nSockets which have previously been passed to listen()\r\nreturn when there is an incoming connection pending.\r\ndata contains the size of the listen backlog.\r\n\r\nOther socket descriptors return when there is data to\r\nbe read, subject to the SO_RCVLOWAT value of the\r\nsocket buffer.  This may be overridden with a per-fil-\r\nter low water mark at the time the filter is added by\r\nsetting the NOTE_LOWAT flag in fflags, and specifying\r\nthe new low water mark in data.  On return, data con-\r\ntains the number of bytes of protocol data available\r\nto read.\r\n--\r\n\r\nhmm...\r\n",
			"disapproval": false,
			"date": "2013-08-01 13:22:44.841160",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I would expect to just get an edge-triggered read notification per\r\neach new incoming connection. Is not it true on bsd systems?\r\n\r\nOn Thu, Aug 1, 2013 at 5:22 PM, Mikio Hara <mikioh.mikioh@gmail.com> wrote:\r\n> On Thu, Aug 1, 2013 at 10:11 PM,  <dvyukov@google.com> wrote:\r\n>\r\n>> I don't know what is necessary for bsd systems. Darwin is happy with\r\n>> current code.\r\n>\r\n> -- kqueue on-line manual --\r\n> EVFILT_READ\r\n>\r\n> (snip)\r\n>\r\n> Sockets\r\n> Sockets which have previously been passed to listen()\r\n> return when there is an incoming connection pending.\r\n> data contains the size of the listen backlog.\r\n>\r\n> Other socket descriptors return when there is data to\r\n> be read, subject to the SO_RCVLOWAT value of the\r\n> socket buffer.  This may be overridden with a per-fil-\r\n> ter low water mark at the time the filter is added by\r\n> setting the NOTE_LOWAT flag in fflags, and specifying\r\n> the new low water mark in data.  On return, data con-\r\n> tains the number of bytes of protocol data available\r\n> to read.\r\n> --\r\n>\r\n> hmm...\r\n",
			"disapproval": false,
			"date": "2013-08-01 13:33:07.019420",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Aug 1, 2013 at 10:32 PM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n\r\n> I would expect to just get an edge-triggered read notification per\r\n> each new incoming connection. Is not it true on bsd systems?\r\n\r\nLooks like. I'm guessing the reason why Darwin works well so far\r\nis because Darwin is kinda chimera; capturing incoming something\r\nat Mach I/O stuff and notifying to BSD subsystem probably make\r\nsome data to be read. Just guessing.\r\n",
			"disapproval": false,
			"date": "2013-08-01 23:50:15.544550",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dvyukov@google.com, alex.brainman@gmail.com, minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-08-05 02:07:54.264850",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Does not BSD work w/o this change?\nThe documentation snippet can be interpreted in two ways: (1) you must call listen before associating the fd with kqueue, or (2) you may associate fd with kqueue before listen, but will receive notifications on the fd only after listen call.\nI would expect it to be (2).\n\nIf it is (1), then I would suggest to call current all-in-one runtime_pollInit after listen. Because after the split runtime_pollInit becomes senseless operation, there is no need to call it before runtime_pollOpen.",
			"disapproval": false,
			"date": "2013-08-05 08:40:57.659630",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Aug 5, 2013 at 5:40 PM,  <dvyukov@google.com> wrote:\r\n\r\n> Does not BSD work w/o this change?\r\n\r\nJust did a dumb experiment on FreeBSD 9.1;\r\n<https://gist.github.com/mikioh/6155250>\r\nListenAfterKevent didn't work well.\r\n\r\n> If it is (1), then I would suggest to call current all-in-one\r\n> runtime_pollInit after listen. Because after the split runtime_pollInit\r\n> becomes senseless operation, there is no need to call it before\r\n> runtime_pollOpen.\r\n\r\nSounds reasonable to me. Alex, do you agree with Dmitry's proposal?\r\n",
			"disapproval": false,
			"date": "2013-08-05 11:47:16.781860",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Aug 5, 2013 at 3:47 PM, Mikio Hara <mikioh.mikioh@gmail.com> wrote:\r\n> On Mon, Aug 5, 2013 at 5:40 PM,  <dvyukov@google.com> wrote:\r\n>\r\n>> Does not BSD work w/o this change?\r\n>\r\n> Just did a dumb experiment on FreeBSD 9.1;\r\n> <https://gist.github.com/mikioh/6155250>\r\n> ListenAfterKevent didn't work well.\r\n\r\nOK, I see. So it wants to know whether it's passive or active socket\r\nduring association.\r\n\r\n\r\n>> If it is (1), then I would suggest to call current all-in-one\r\n>> runtime_pollInit after listen. Because after the split runtime_pollInit\r\n>> becomes senseless operation, there is no need to call it before\r\n>> runtime_pollOpen.\r\n>\r\n> Sounds reasonable to me. Alex, do you agree with Dmitry's proposal?\r\n\r\nruntime_pollOpen must follow newFD on all code paths anyway. And\r\nruntime_pollOpen must happen before any other async operations. If\r\nthat is not the case, then something is seriously wrong anyway.\r\nOK, I know, I am just repeating myself.\r\n",
			"disapproval": false,
			"date": "2013-08-05 11:59:36.951860",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\r\n",
			"disapproval": false,
			"date": "2013-08-05 14:19:31.939780",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/05 14:19:31, mikio wrote:\n> PTAL\n\nLooks much better overall.\n\nIf fd.init() fails, you call fd.Close() which calls fd.pd.Evict()/Close(). They are not prepared for pd.runtimeCtx==0.\n\nYou can do something along the lines of:\n\nfunc (pd *pollDesc) Close() {\n\tif pd.runtimeCtx == 0 {\n\t\treturn\n\t}\n\truntime_pollClose(pd.runtimeCtx)\n\tpd.runtimeCtx = 0\n}\n\nAlso please ensure that fd_poll_unix.go still works as well.",
			"disapproval": false,
			"date": "2013-08-05 14:40:47.128410",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nThanks. All addressed and changed the CL description.\n\n> Also please ensure that fd_poll_unix.go still works as well.\n\nFreeBSD is fine.\nLooks like other bros. have unrelated troubles but doesn't matter.\nDigressions, it seems like we need a bit more file hand-off tests\nfor FileConn, FIleListener and FilePacketConn.",
			"disapproval": false,
			"date": "2013-08-06 03:29:06.812840",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "And Evict, sidekick of Close.\n\nOn 2013/08/06 03:29:06, mikio wrote:\n> PTAL\n> \n> Thanks. All addressed and changed the CL description.\n> \n> > Also please ensure that fd_poll_unix.go still works as well.\n> \n> FreeBSD is fine.\n> Looks like other bros. have unrelated troubles but doesn't matter.\n> Digressions, it seems like we need a bit more file hand-off tests\n> for FileConn, FIleListener and FilePacketConn.",
			"disapproval": false,
			"date": "2013-08-06 06:32:57.660090",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Perhaps I am missing something here, but why (*netFD).init cannot be part of newFD?\n\nAlex",
			"disapproval": false,
			"date": "2013-08-06 06:56:58.096780",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/06 06:56:58, brainman wrote:\n> Perhaps I am missing something here, but why (*netFD).init cannot be part of\n> newFD?\n\nOn BSD systems it's necessary to associate fd with kqueue only after listen call. This change allows such flexibility.",
			"disapproval": false,
			"date": "2013-08-06 09:03:42.128720",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-08-06 09:04:21.478390",
			"approval": true
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"dvyukov@google.com",
				"alex.brainman@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=43e7b87397b6 ***\n\nnet: separate pollster initialization from network file descriptor allocation\n\nUnlike the existing net package own pollster, runtime-integrated\nnetwork pollster on BSD variants, actually kqueue, requires a socket\nthat has beed passed to syscall.Listen previously for a stream\nlistener.\n\nThis CL separates pollDesc.Init (actually runtime_pollOpen) from newFD\nto allow control of each state of sockets and adds init method to netFD\ninstead. Upcoming CLs will rearrange the call order of runtime-integrated\npollster and syscall functions like the following;\n\n- For dialers that open active connections, runtime_pollOpen will be\n  called in between syscall.Bind and syscall.Connect.\n\n- For stream listeners that open passive stream connections,\n  runtime_pollOpen will be called just after syscall.Listen.\n\n- For datagram listeners that open datagram connections,\n  runtime_pollOpen will be called just after syscall.Bind.\n\nThis is in preparation for runtime-integrated network pollster for BSD\nvariants.\n\nUpdate issue 5199\n\nR=dvyukov, alex.brainman, minux.ma\nCC=golang-dev\nhttps://codereview.appspot.com/8608044",
			"disapproval": false,
			"date": "2013-08-06 14:42:41.041220",
			"approval": false
		}
	],
	"owner_email": "mikioh.mikioh@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mikio",
	"subject": "code review 8608044: net: separate pollster initialization from network file descriptor allocation",
	"created": "2013-04-17 11:12:39.567130",
	"patchsets": [
		14001,
		17001,
		23001,
		32001,
		36001,
		45001
	],
	"modified": "2013-08-06 14:42:45.484080",
	"closed": true,
	"issue": 8608044
}