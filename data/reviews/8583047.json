{
	"description": "test/stress: start of a runtime stress program\n\nRuns forever, stressing the runtime in various ways.\n\nIt should never terminate.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"minux.ma@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-04-12 22:08:39.688820",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "seems like a good start, but please move it to /test/stress or something like that\n\nhttps://codereview.appspot.com/8583047/diff/5001/misc/runstress/maps.go\nFile misc/runstress/maps.go (right):\n\nhttps://codereview.appspot.com/8583047/diff/5001/misc/runstress/maps.go#newcode1\nmisc/runstress/maps.go:1: package main\ncopyrights",
			"disapproval": false,
			"date": "2013-04-12 22:11:58.260390",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-04-12 22:12:18.836130",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-04-12 22:15:23.312470",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8583047/diff/10001/test/stress/maps.go\nFile test/stress/maps.go (right):\n\nhttps://codereview.appspot.com/8583047/diff/10001/test/stress/maps.go#newcode1\ntest/stress/maps.go:1: package main\ncopyright\n\nhttps://codereview.appspot.com/8583047/diff/10001/test/stress/parsego.go\nFile test/stress/parsego.go (right):\n\nhttps://codereview.appspot.com/8583047/diff/10001/test/stress/parsego.go#newcode38\ntest/stress/parsego.go:38: // (use dirname instead of path because dirname is clean; i.e. has no trailing '/')\n\"because it has no trailing '/'\"\n\nhttps://codereview.appspot.com/8583047/diff/10001/test/stress/runstress.go\nFile test/stress/runstress.go (right):\n\nhttps://codereview.appspot.com/8583047/diff/10001/test/stress/runstress.go#newcode28\ntest/stress/runstress.go:28: doParseGo = flag.Bool(\"parsego\", true, \"Stress parsing Go (generates garbage)\")\ndrop the caps on Stress for the flag strings\n\nhttps://codereview.appspot.com/8583047/diff/10001/test/stress/runstress.go#newcode31\ntest/stress/runstress.go:31: func vlog(a ...interface{}) {\ncall this Println or println and vet can check it\n\nhttps://codereview.appspot.com/8583047/diff/10001/test/stress/runstress.go#newcode67\ntest/stress/runstress.go:67: log.Fatalf(\"Status code = %d\", res.StatusCode)\nthe Fatalfs should say which test caused the failure",
			"disapproval": false,
			"date": "2013-04-12 22:18:40.117620",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8583047/diff/10001/test/stress/runstress.go\nFile test/stress/runstress.go (right):\n\nhttps://codereview.appspot.com/8583047/diff/10001/test/stress/runstress.go#newcode84\ntest/stress/runstress.go:84: cmd := exec.Command(\"/bin/sh\", \"-c\", fmt.Sprintf(\"echo %s; exit %d\", wantOutput, exit))\nfor windows, you can use \"%ComSpec%\" \"/c\" \"echo %s& exit %d\"\n// note, no space between \"%s\" and \"&\".",
			"disapproval": false,
			"date": "2013-04-12 22:26:47.010680",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org, minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-04-15 18:20:34.900820",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/8583047/diff/10001/test/stress/maps.go\nFile test/stress/maps.go (right):\n\nhttps://codereview.appspot.com/8583047/diff/10001/test/stress/maps.go#newcode1\ntest/stress/maps.go:1: package main\nOn 2013/04/12 22:18:40, r wrote:\n> copyright\n\nDone.\n\nhttps://codereview.appspot.com/8583047/diff/10001/test/stress/parsego.go\nFile test/stress/parsego.go (right):\n\nhttps://codereview.appspot.com/8583047/diff/10001/test/stress/parsego.go#newcode38\ntest/stress/parsego.go:38: // (use dirname instead of path because dirname is clean; i.e. has no trailing '/')\nOn 2013/04/12 22:18:40, r wrote:\n> \"because it has no trailing '/'\"\n\nDone. But I just copied this code from another test.\n\nhttps://codereview.appspot.com/8583047/diff/10001/test/stress/runstress.go\nFile test/stress/runstress.go (right):\n\nhttps://codereview.appspot.com/8583047/diff/10001/test/stress/runstress.go#newcode28\ntest/stress/runstress.go:28: doParseGo = flag.Bool(\"parsego\", true, \"Stress parsing Go (generates garbage)\")\nOn 2013/04/12 22:18:40, r wrote:\n> drop the caps on Stress for the flag strings\n\nDone.\n\nhttps://codereview.appspot.com/8583047/diff/10001/test/stress/runstress.go#newcode31\ntest/stress/runstress.go:31: func vlog(a ...interface{}) {\nOn 2013/04/12 22:18:40, r wrote:\n> call this Println or println and vet can check it\n\nDone.\n\nhttps://codereview.appspot.com/8583047/diff/10001/test/stress/runstress.go#newcode67\ntest/stress/runstress.go:67: log.Fatalf(\"Status code = %d\", res.StatusCode)\nOn 2013/04/12 22:18:40, r wrote:\n> the Fatalfs should say which test caused the failure\n\nDone.\n\nhttps://codereview.appspot.com/8583047/diff/10001/test/stress/runstress.go#newcode84\ntest/stress/runstress.go:84: cmd := exec.Command(\"/bin/sh\", \"-c\", fmt.Sprintf(\"echo %s; exit %d\", wantOutput, exit))\nOn 2013/04/12 22:26:47, minux wrote:\n> for windows, you can use \"%ComSpec%\" \"/c\" \"echo %s& exit %d\"\n> // note, no space between \"%s\" and \"&\".\n\nLet's do Windows in a subsequent CL.",
			"disapproval": false,
			"date": "2013-04-15 18:20:37.204340",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-04-15 18:45:16.326710",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=131549887d7c ***\n\ntest/stress: start of a runtime stress program\n\nRuns forever, stressing the runtime in various ways.\n\nIt should never terminate.\n\nR=golang-dev, r, minux.ma\nCC=golang-dev\nhttps://codereview.appspot.com/8583047",
			"disapproval": false,
			"date": "2013-04-15 18:50:17.586590",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 8583047: test/stress: start of a runtime stress program",
	"created": "2013-04-12 22:08:16.207810",
	"patchsets": [
		1,
		2001,
		5001,
		10001,
		14001,
		20001,
		26001
	],
	"modified": "2013-04-16 17:14:25.836450",
	"closed": true,
	"issue": 8583047
}