{
	"description": "leveldb: write a new manifest file after recovery.\n\nAlso add a FileSystem.Rename method, and fix a typo in the record.Writer\ndocs.",
	"cc": [
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/leveldb-go/source/detail?r=1d5ccbe03246 ***\n\nleveldb: write a new manifest file after recovery.\n\nAlso add a FileSystem.Rename method, and fix a typo in the record.Writer\ndocs.\n\nR=bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/6454111",
			"disapproval": false,
			"date": "2012-08-08 04:29:14.625290",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/leveldb-go",
			"disapproval": false,
			"date": "2012-08-07 01:00:15.681710",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6454111/diff/4001/leveldb/db/file.go\nFile leveldb/db/file.go (right):\n\nhttp://codereview.appspot.com/6454111/diff/4001/leveldb/db/file.go#newcode33\nleveldb/db/file.go:33: Rename(oldname, newname string) error\nIs this Rename expected to overwrite newname if it already exists?  I see it's just a wrapper for os.Rename.  Worth documenting on the FileSystem docs that \"Unless noted otherwise, the methods behave similarly to the versions in the os package.\" Or something.\n\nhttp://codereview.appspot.com/6454111/diff/4001/leveldb/filenames.go\nFile leveldb/filenames.go (right):\n\nhttp://codereview.appspot.com/6454111/diff/4001/leveldb/filenames.go#newcode59\nleveldb/filenames.go:59: newFilename := oldFilename[:len(dirname)+1+len(\"CURRENT\")]\nbuild this first with one Sprintf and then make oldFilename from newFileName + fmt.Sprintf(\".%06d.dbtmp\", fileNum) ?\n\nhttp://codereview.appspot.com/6454111/diff/4001/leveldb/memfs/memfs.go\nFile leveldb/memfs/memfs.go (right):\n\nhttp://codereview.appspot.com/6454111/diff/4001/leveldb/memfs/memfs.go#newcode193\nleveldb/memfs/memfs.go:193: return errors.New(\"leveldb/memfs: no such file or directory\")\ndon't care about returning os.LinkError I guess and generally being compatible with os.IsNotExist, etc?\n\nhttp://codereview.appspot.com/6454111/diff/4001/leveldb/memfs/memfs_test.go\nFile leveldb/memfs/memfs_test.go (right):\n\nhttp://codereview.appspot.com/6454111/diff/4001/leveldb/memfs/memfs_test.go#newcode122\nleveldb/memfs/memfs_test.go:122: // Rename /foo to /fOO. Trying to open /foo should succeed before the rename and\nworth testing renames more than 1 level deep?\n\nhttp://codereview.appspot.com/6454111/diff/4001/leveldb/version_set.go\nFile leveldb/version_set.go (right):\n\nhttp://codereview.appspot.com/6454111/diff/4001/leveldb/version_set.go#newcode141\nleveldb/version_set.go:141: panic(\"leveldb: inconsistent logNumber\")\ninclude the relevant numbers?\n\nhttp://codereview.appspot.com/6454111/diff/4001/leveldb/version_set.go#newcode189\nleveldb/version_set.go:189: fs := opts.GetFileSystem()\nwhy isn't this one in the var block below?\n\nhttp://codereview.appspot.com/6454111/diff/4001/leveldb/version_set.go#newcode229\nleveldb/version_set.go:229: if err1 := snapshot.encode(w); err1 != nil {\nhere if you have an err1 that shadows the err1 on line 225.  you never do a naked return.  I'd drop the named result parameter and just name these all err.",
			"disapproval": false,
			"date": "2012-08-07 01:21:58.791150",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6454111/diff/4001/leveldb/db/file.go\nFile leveldb/db/file.go (right):\n\nhttp://codereview.appspot.com/6454111/diff/4001/leveldb/db/file.go#newcode33\nleveldb/db/file.go:33: Rename(oldname, newname string) error\nOn 2012/08/07 01:21:58, bradfitz wrote:\n> Is this Rename expected to overwrite newname if it already exists?  I see it's\n> just a wrapper for os.Rename.  Worth documenting on the FileSystem docs that\n> \"Unless noted otherwise, the methods behave similarly to the versions in the os\n> package.\" Or something.\n\nDone.\n\nhttp://codereview.appspot.com/6454111/diff/4001/leveldb/filenames.go\nFile leveldb/filenames.go (right):\n\nhttp://codereview.appspot.com/6454111/diff/4001/leveldb/filenames.go#newcode59\nleveldb/filenames.go:59: newFilename := oldFilename[:len(dirname)+1+len(\"CURRENT\")]\nOn 2012/08/07 01:21:58, bradfitz wrote:\n> build this first with one Sprintf and then make oldFilename from newFileName +\n> fmt.Sprintf(\".%06d.dbtmp\", fileNum) ?\n\nDone.\n\nhttp://codereview.appspot.com/6454111/diff/4001/leveldb/memfs/memfs.go\nFile leveldb/memfs/memfs.go (right):\n\nhttp://codereview.appspot.com/6454111/diff/4001/leveldb/memfs/memfs.go#newcode193\nleveldb/memfs/memfs.go:193: return errors.New(\"leveldb/memfs: no such file or directory\")\nOn 2012/08/07 01:21:58, bradfitz wrote:\n> don't care about returning os.LinkError I guess and generally being compatible\n> with os.IsNotExist, etc?\n\nYeah, I don't care.\n\nhttp://codereview.appspot.com/6454111/diff/4001/leveldb/memfs/memfs_test.go\nFile leveldb/memfs/memfs_test.go (right):\n\nhttp://codereview.appspot.com/6454111/diff/4001/leveldb/memfs/memfs_test.go#newcode122\nleveldb/memfs/memfs_test.go:122: // Rename /foo to /fOO. Trying to open /foo should succeed before the rename and\nOn 2012/08/07 01:21:58, bradfitz wrote:\n> worth testing renames more than 1 level deep?\n\nDone.\n\nhttp://codereview.appspot.com/6454111/diff/4001/leveldb/version_set.go\nFile leveldb/version_set.go (right):\n\nhttp://codereview.appspot.com/6454111/diff/4001/leveldb/version_set.go#newcode141\nleveldb/version_set.go:141: panic(\"leveldb: inconsistent logNumber\")\nOn 2012/08/07 01:21:58, bradfitz wrote:\n> include the relevant numbers?\n\nDone.\n\nhttp://codereview.appspot.com/6454111/diff/4001/leveldb/version_set.go#newcode189\nleveldb/version_set.go:189: fs := opts.GetFileSystem()\nOn 2012/08/07 01:21:58, bradfitz wrote:\n> why isn't this one in the var block below?\n\nOn second thoughts, I moved the fs variable to be a versionSet field.\n\nhttp://codereview.appspot.com/6454111/diff/4001/leveldb/version_set.go#newcode229\nleveldb/version_set.go:229: if err1 := snapshot.encode(w); err1 != nil {\nOn 2012/08/07 01:21:58, bradfitz wrote:\n> here if you have an err1 that shadows the err1 on line 225.  you never do a\n> naked return.  I'd drop the named result parameter and just name these all err.\n\nThe result has to be named because a deferred function refers to it.",
			"disapproval": false,
			"date": "2012-08-08 04:01:07.876800",
			"approval": false
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 6454111: leveldb: write a new manifest file after recovery.",
	"created": "2012-08-07 00:59:49.294750",
	"patchsets": [
		1,
		1001,
		4001,
		4002
	],
	"modified": "2012-08-08 04:29:16.666020",
	"closed": true,
	"issue": 6454111
}