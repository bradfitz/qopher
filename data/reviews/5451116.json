{
	"description": "bytes: faster Count, Index, Equal\n\nBenchmarks are from GOARCH=amd64 on a MacPro5,1.\n\nbenchmark                                    old MB/s     new MB/s  speedup\nbytes_test.BenchmarkEqual32                    452.89       891.07    1.97x\nbytes_test.BenchmarkEqual4K                    852.71      1700.44    1.99x\nbytes_test.BenchmarkEqual4M                    841.53      1587.93    1.89x\nbytes_test.BenchmarkEqual64M                   838.22      1578.14    1.88x\n\nbytes_test.BenchmarkIndex32                     58.02        48.99    0.84x\nbytes_test.BenchmarkIndex4K                     48.26        41.32    0.86x\nbytes_test.BenchmarkIndex4M                     48.20        41.24    0.86x\nbytes_test.BenchmarkIndex64M                    48.08        41.21    0.86x\nbytes_test.BenchmarkIndexEasy32                410.04       546.82    1.33x\nbytes_test.BenchmarkIndexEasy4K                849.26     14257.37   16.79x\nbytes_test.BenchmarkIndexEasy4M                854.54     17222.15   20.15x\nbytes_test.BenchmarkIndexEasy64M               843.57     11060.40   13.11x\n\nbytes_test.BenchmarkCount32                     57.24        50.68    0.89x\nbytes_test.BenchmarkCount4K                     48.19        41.82    0.87x\nbytes_test.BenchmarkCount4M                     48.18        41.74    0.87x\nbytes_test.BenchmarkCount64M                    48.17        41.71    0.87x\nbytes_test.BenchmarkCountEasy32                433.11       547.44    1.26x\nbytes_test.BenchmarkCountEasy4K               1130.59     14194.06   12.55x\nbytes_test.BenchmarkCountEasy4M               1131.23     17231.18   15.23x\nbytes_test.BenchmarkCountEasy64M              1111.40     11068.88    9.96x\n\nThe non-easy Count/Index benchmarks are a worst case input.\n\nregexp.BenchmarkMatchEasy0_32                  237.46       221.47    0.93x\nregexp.BenchmarkMatchEasy0_1K                  553.53      1019.72    1.84x\nregexp.BenchmarkMatchEasy0_32K                 693.99      1672.06    2.41x\nregexp.BenchmarkMatchEasy0_1M                  688.72      1611.68    2.34x\nregexp.BenchmarkMatchEasy0_32M                 680.70      1565.05    2.30x\nregexp.BenchmarkMatchEasy1_32                  165.56       243.08    1.47x\nregexp.BenchmarkMatchEasy1_1K                  336.45       496.32    1.48x\nregexp.BenchmarkMatchEasy1_32K                 302.80       425.63    1.41x\nregexp.BenchmarkMatchEasy1_1M                  300.42       414.20    1.38x\nregexp.BenchmarkMatchEasy1_32M                 299.64       413.47    1.38x",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"iant@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-07 16:35:23.117538",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "REP LGTM\n\nhttp://codereview.appspot.com/5451116/diff/1003/src/pkg/bytes/bytes_test.go\nFile src/pkg/bytes/bytes_test.go (right):\n\nhttp://codereview.appspot.com/5451116/diff/1003/src/pkg/bytes/bytes_test.go#newcode411\nsrc/pkg/bytes/bytes_test.go:411: println(\"bad count\", j)\nthis has been bugging me for a while. note to self: put the Log and Logf functions etc. into testing.B.",
			"disapproval": false,
			"date": "2011-12-07 17:06:58.660123",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5451116/diff/1003/src/pkg/bytes/asm_386.s\nFile src/pkg/bytes/asm_386.s (right):\n\nhttp://codereview.appspot.com/5451116/diff/1003/src/pkg/bytes/asm_386.s#newcode27\nsrc/pkg/bytes/asm_386.s:27: CLD\nYou don't really need the CLD here or elsewhere.  The x86 ABI specifies that CLD is always clear at function entry or exit.  The Go code never executes STD.  There shouldn't be any way that the direction flag could be set at this point.\n\nSome older versions of Linux and FreeBSD kernels fail to clear the direction flag when entering a signal handler, but 1) that has been fixed for a couple of years; 2) I don't think it is relevant here because this code will not be called from a signal handler.\n\nhttp://codereview.appspot.com/5451116/diff/1003/src/pkg/bytes/asm_386.s#newcode28\nsrc/pkg/bytes/asm_386.s:28: REP; CMPSB\nI think this should be REPE, not REP.  Unless this is funny 8a syntax.\n\nhttp://codereview.appspot.com/5451116/diff/1003/src/pkg/bytes/asm_amd64.s\nFile src/pkg/bytes/asm_amd64.s (right):\n\nhttp://codereview.appspot.com/5451116/diff/1003/src/pkg/bytes/asm_amd64.s#newcode97\nsrc/pkg/bytes/asm_amd64.s:97: MOVL\t$1, DX\nThe MOVL to DX can be after the JNE.\n\nhttp://codereview.appspot.com/5451116/diff/1003/src/pkg/bytes/asm_amd64.s#newcode102\nsrc/pkg/bytes/asm_amd64.s:102: CLD\nHere again the CLD should be unnecessary.\n\nhttp://codereview.appspot.com/5451116/diff/1003/src/pkg/bytes/asm_amd64.s#newcode103\nsrc/pkg/bytes/asm_amd64.s:103: REP; CMPSB\nHere again it seems to me this should be REPE.\n\nhttp://codereview.appspot.com/5451116/diff/1003/src/pkg/bytes/bytes.go\nFile src/pkg/bytes/bytes.go (right):\n\nhttp://codereview.appspot.com/5451116/diff/1003/src/pkg/bytes/bytes.go#newcode81\nsrc/pkg/bytes/bytes.go:81: return utf8.RuneCount(s) + 1\nI know it has nothing to do with this CL but I don't understand why the correct answer when len(sep) == 0 is not len(s) + 1.  Nothing else in this function worries about runes.",
			"disapproval": false,
			"date": "2011-12-07 19:14:03.552619",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Dec 7, 2011 at 14:14,  <iant@golang.org> wrote:\n> You don't really need the CLD here or elsewhere. \u00a0The x86 ABI specifies\n> that CLD is always clear at function entry or exit. \u00a0The Go code never\n> executes STD. \u00a0There shouldn't be any way that the direction flag could\n> be set at this point.\n\nI know that in theory but I have not gotten up the\ncourage to define that D is always clear in the Go ABI.\nThere are TODOs in various places but for now the\nconvention is to keep the CLD instructions explicit.\n\n> The MOVL to DX can be after the JNE.\n\nThanks.  I was trying to space out the set and the use\nbut I agree that is at the least premature optimization.\nI have no evidence that it matters.\n\n> I think this should be REPE, not REP.  Unless this is funny 8a syntax.\n\nI suppose it is funny 8a syntax.\nREPE and REP are the same instruction\nso it only has one name.\n\n> I know it has nothing to do with this CL but I don't understand why the\n> correct answer when len(sep) == 0 is not len(s) + 1.  Nothing else in\n> this function worries about runes.\n\nYeah, this could go either way.\nIf you are assuming the input is UTF-8 then I assert\nyou don't want to count empty strings in the middle\nof UTF-8 sequences, but it's true that this does not\nhave to make any other assumptions about UTF-8.\nMaybe we should change it.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-07 20:09:40.178687",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=1d502563ac14 ***\n\nbytes: faster Count, Index, Equal\n\nBenchmarks are from GOARCH=amd64 on a MacPro5,1.\n\nbenchmark                                    old MB/s     new MB/s  speedup\nbytes_test.BenchmarkEqual32                    452.89       891.07    1.97x\nbytes_test.BenchmarkEqual4K                    852.71      1700.44    1.99x\nbytes_test.BenchmarkEqual4M                    841.53      1587.93    1.89x\nbytes_test.BenchmarkEqual64M                   838.22      1578.14    1.88x\n\nbytes_test.BenchmarkIndex32                     58.02        48.99    0.84x\nbytes_test.BenchmarkIndex4K                     48.26        41.32    0.86x\nbytes_test.BenchmarkIndex4M                     48.20        41.24    0.86x\nbytes_test.BenchmarkIndex64M                    48.08        41.21    0.86x\nbytes_test.BenchmarkIndexEasy32                410.04       546.82    1.33x\nbytes_test.BenchmarkIndexEasy4K                849.26     14257.37   16.79x\nbytes_test.BenchmarkIndexEasy4M                854.54     17222.15   20.15x\nbytes_test.BenchmarkIndexEasy64M               843.57     11060.40   13.11x\n\nbytes_test.BenchmarkCount32                     57.24        50.68    0.89x\nbytes_test.BenchmarkCount4K                     48.19        41.82    0.87x\nbytes_test.BenchmarkCount4M                     48.18        41.74    0.87x\nbytes_test.BenchmarkCount64M                    48.17        41.71    0.87x\nbytes_test.BenchmarkCountEasy32                433.11       547.44    1.26x\nbytes_test.BenchmarkCountEasy4K               1130.59     14194.06   12.55x\nbytes_test.BenchmarkCountEasy4M               1131.23     17231.18   15.23x\nbytes_test.BenchmarkCountEasy64M              1111.40     11068.88    9.96x\n\nThe non-easy Count/Index benchmarks are a worst case input.\n\nregexp.BenchmarkMatchEasy0_32                  237.46       221.47    0.93x\nregexp.BenchmarkMatchEasy0_1K                  553.53      1019.72    1.84x\nregexp.BenchmarkMatchEasy0_32K                 693.99      1672.06    2.41x\nregexp.BenchmarkMatchEasy0_1M                  688.72      1611.68    2.34x\nregexp.BenchmarkMatchEasy0_32M                 680.70      1565.05    2.30x\nregexp.BenchmarkMatchEasy1_32                  165.56       243.08    1.47x\nregexp.BenchmarkMatchEasy1_1K                  336.45       496.32    1.48x\nregexp.BenchmarkMatchEasy1_32K                 302.80       425.63    1.41x\nregexp.BenchmarkMatchEasy1_1M                  300.42       414.20    1.38x\nregexp.BenchmarkMatchEasy1_32M                 299.64       413.47    1.38x\n\nR=golang-dev, r, iant\nCC=golang-dev\nhttp://codereview.appspot.com/5451116",
			"disapproval": false,
			"date": "2011-12-07 20:09:59.317272",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5451116: bytes: faster Count, Index, Equal",
	"created": "2011-12-07 16:05:15.184468",
	"patchsets": [
		1,
		2001,
		3,
		1003,
		2003
	],
	"modified": "2011-12-07 20:10:00.088805",
	"closed": true,
	"issue": 5451116
}