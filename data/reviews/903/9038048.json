{
	"description": "runtime: faster x86 memmove (a.k.a. built-in copy())\n\nREP instructions have a high startup cost, so we handle small\nsizes with some straightline code.  The REP MOVSx instructions\nare really fast for large sizes.  The cutover is approximately\n1K.  We implement up to 128/256 because that is the maximum\nSSE register load (loading all data into registers before any\nstores lets us ignore copy direction).\n\n(on a Sandy Bridge E5-1650 @ 3.20GHz)\nbenchmark               old ns/op    new ns/op    delta\nBenchmarkMemmove0               3            3   +0.86%\nBenchmarkMemmove1               5            5   +5.40%\nBenchmarkMemmove2              18            8  -56.84%\nBenchmarkMemmove3              18            7  -58.45%\nBenchmarkMemmove4              36            7  -78.63%\nBenchmarkMemmove5              36            8  -77.91%\nBenchmarkMemmove6              36            8  -77.76%\nBenchmarkMemmove7              36            8  -77.82%\nBenchmarkMemmove8              18            8  -56.33%\nBenchmarkMemmove9              18            7  -58.34%\nBenchmarkMemmove10             18            7  -58.34%\nBenchmarkMemmove11             18            7  -58.45%\nBenchmarkMemmove12             36            7  -78.51%\nBenchmarkMemmove13             36            7  -78.48%\nBenchmarkMemmove14             36            7  -78.56%\nBenchmarkMemmove15             36            7  -78.56%\nBenchmarkMemmove16             18            7  -58.24%\nBenchmarkMemmove32             18            8  -54.33%\nBenchmarkMemmove64             18            8  -53.37%\nBenchmarkMemmove128            20            9  -55.93%\nBenchmarkMemmove256            25           11  -55.16%\nBenchmarkMemmove512            33           33   -1.19%\nBenchmarkMemmove1024           43           44   +2.06%\nBenchmarkMemmove2048           61           61   +0.16%\nBenchmarkMemmove4096           95           95   +0.00%",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"remyoudompheng@gmail.com",
		"khr@google.com",
		"iant@golang.org",
		"dominik.honnef@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "khr@golang.org",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://khr%40golang.org@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-05-16 20:51:13.127570",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Nice.\r\n\r\nUpdate CL to say which CPU this was on?\r\n\r\nThe cutover point will likely change in the future.\r\n On May 16, 2013 1:51 PM, <khr@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://khr%40golang.org@code.**google.com/p/go/<http://40golang.org@code.google.com/p/go/>\r\n>\r\n>\r\n> Description:\r\n> runtime: faster x86 memmove (a.k.a. built-in copy())\r\n>\r\n> REP instructions have a high startup cost, so we handle small\r\n> sizes with some straightline code.  The REP MOVSx instructions\r\n> are really fast for large sizes.  The cutover is approximately\r\n> 1K.  We implement up to 128/256 because that is the maximum\r\n> SSE register load (loading all data into registers lets us\r\n> ignore copy direction).\r\n>\r\n> benchmark               old ns/op    new ns/op    delta\r\n> BenchmarkMemmove0               3            3   +0.86%\r\n> BenchmarkMemmove1               5            5   +5.40%\r\n> BenchmarkMemmove2              18            8  -56.84%\r\n> BenchmarkMemmove3              18            7  -58.45%\r\n> BenchmarkMemmove4              36            7  -78.63%\r\n> BenchmarkMemmove5              36            8  -77.91%\r\n> BenchmarkMemmove6              36            8  -77.76%\r\n> BenchmarkMemmove7              36            8  -77.82%\r\n> BenchmarkMemmove8              18            8  -56.33%\r\n> BenchmarkMemmove9              18            7  -58.34%\r\n> BenchmarkMemmove10             18            7  -58.34%\r\n> BenchmarkMemmove11             18            7  -58.45%\r\n> BenchmarkMemmove12             36            7  -78.51%\r\n> BenchmarkMemmove13             36            7  -78.48%\r\n> BenchmarkMemmove14             36            7  -78.56%\r\n> BenchmarkMemmove15             36            7  -78.56%\r\n> BenchmarkMemmove16             18            7  -58.24%\r\n> BenchmarkMemmove32             18            8  -54.33%\r\n> BenchmarkMemmove64             18            8  -53.37%\r\n> BenchmarkMemmove128            20            9  -55.93%\r\n> BenchmarkMemmove256            25           11  -55.16%\r\n> BenchmarkMemmove512            33           33   -1.19%\r\n> BenchmarkMemmove1024           43           44   +2.06%\r\n> BenchmarkMemmove2048           61           61   +0.16%\r\n> BenchmarkMemmove4096           95           95   +0.00%\r\n>\r\n> Please review this at https://codereview.appspot.**com/9038048/<https://codereview.appspot.com/9038048/>\r\n>\r\n> Affected files:\r\n>   src/pkg/runtime/memmove_386.s\r\n>   src/pkg/runtime/memmove_amd64.**s\r\n>   src/pkg/runtime/memmove_test.**go\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-16 21:52:03.568970",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is very interesting, I should try combinations of this with CL9101048.\r\n\r\n2013/5/16 Brad Fitzpatrick <bradfitz@golang.org>:\r\n> Nice.\r\n>\r\n> Update CL to say which CPU this was on?\r\n>\r\n> The cutover point will likely change in the future.\r\n>\r\n> On May 16, 2013 1:51 PM, <khr@golang.org> wrote:\r\n>>\r\n>> Reviewers: golang-dev1,\r\n>>\r\n>> Message:\r\n>> Hello golang-dev@googlegroups.com,\r\n>>\r\n>> I'd like you to review this change to\r\n>> https://khr%40golang.org@code.google.com/p/go/\r\n>>\r\n>>\r\n>> Description:\r\n>> runtime: faster x86 memmove (a.k.a. built-in copy())\r\n>>\r\n>> REP instructions have a high startup cost, so we handle small\r\n>> sizes with some straightline code.  The REP MOVSx instructions\r\n>> are really fast for large sizes.  The cutover is approximately\r\n>> 1K.  We implement up to 128/256 because that is the maximum\r\n>> SSE register load (loading all data into registers lets us\r\n>> ignore copy direction).\r\n>>\r\n>> benchmark               old ns/op    new ns/op    delta\r\n>> BenchmarkMemmove0               3            3   +0.86%\r\n>> BenchmarkMemmove1               5            5   +5.40%\r\n>> BenchmarkMemmove2              18            8  -56.84%\r\n>> BenchmarkMemmove3              18            7  -58.45%\r\n>> BenchmarkMemmove4              36            7  -78.63%\r\n>> BenchmarkMemmove5              36            8  -77.91%\r\n>> BenchmarkMemmove6              36            8  -77.76%\r\n>> BenchmarkMemmove7              36            8  -77.82%\r\n>> BenchmarkMemmove8              18            8  -56.33%\r\n>> BenchmarkMemmove9              18            7  -58.34%\r\n>> BenchmarkMemmove10             18            7  -58.34%\r\n>> BenchmarkMemmove11             18            7  -58.45%\r\n>> BenchmarkMemmove12             36            7  -78.51%\r\n>> BenchmarkMemmove13             36            7  -78.48%\r\n>> BenchmarkMemmove14             36            7  -78.56%\r\n>> BenchmarkMemmove15             36            7  -78.56%\r\n>> BenchmarkMemmove16             18            7  -58.24%\r\n>> BenchmarkMemmove32             18            8  -54.33%\r\n>> BenchmarkMemmove64             18            8  -53.37%\r\n>> BenchmarkMemmove128            20            9  -55.93%\r\n>> BenchmarkMemmove256            25           11  -55.16%\r\n>> BenchmarkMemmove512            33           33   -1.19%\r\n>> BenchmarkMemmove1024           43           44   +2.06%\r\n>> BenchmarkMemmove2048           61           61   +0.16%\r\n>> BenchmarkMemmove4096           95           95   +0.00%\r\n>>\r\n>> Please review this at https://codereview.appspot.com/9038048/\r\n>>\r\n>> Affected files:\r\n>>   src/pkg/runtime/memmove_386.s\r\n>>   src/pkg/runtime/memmove_amd64.s\r\n>>   src/pkg/runtime/memmove_test.go\r\n>>\r\n>>\r\n>> --\r\n>>\r\n>> ---You received this message because you are subscribed to the Google\r\n>> Groups \"golang-dev\" group.\r\n>> To unsubscribe from this group and stop receiving emails from it, send an\r\n>> email to golang-dev+unsubscribe@googlegroups.com.\r\n>> For more options, visit https://groups.google.com/groups/opt_out.\r\n>>\r\n>>\r\n> --\r\n>\r\n> ---\r\n> You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-16 21:54:28.661620",
			"approval": false
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "If you're calling memmove directly with a constant size, maybe we should\r\nsplit out the copy ranges (e.g. memmove_17through32) as full-fledged\r\nfunctions that you can call directly, avoiding the size switch at the top\r\nof memmove.  Downside, the compiler is exposed to some of the memmove\r\nimplementation.  Upside, no size switch.\r\n\r\n\r\nOn Thu, May 16, 2013 at 2:54 PM, R\u00e9my Oudompheng\r\n<remyoudompheng@gmail.com>wrote:\r\n\r\n> This is very interesting, I should try combinations of this with CL9101048.\r\n>\r\n> 2013/5/16 Brad Fitzpatrick <bradfitz@golang.org>:\r\n> > Nice.\r\n> >\r\n> > Update CL to say which CPU this was on?\r\n> >\r\n> > The cutover point will likely change in the future.\r\n> >\r\n> > On May 16, 2013 1:51 PM, <khr@golang.org> wrote:\r\n> >>\r\n> >> Reviewers: golang-dev1,\r\n> >>\r\n> >> Message:\r\n> >> Hello golang-dev@googlegroups.com,\r\n> >>\r\n> >> I'd like you to review this change to\r\n> >> https://khr%40golang.org@code.google.com/p/go/\r\n> >>\r\n> >>\r\n> >> Description:\r\n> >> runtime: faster x86 memmove (a.k.a. built-in copy())\r\n> >>\r\n> >> REP instructions have a high startup cost, so we handle small\r\n> >> sizes with some straightline code.  The REP MOVSx instructions\r\n> >> are really fast for large sizes.  The cutover is approximately\r\n> >> 1K.  We implement up to 128/256 because that is the maximum\r\n> >> SSE register load (loading all data into registers lets us\r\n> >> ignore copy direction).\r\n> >>\r\n> >> benchmark               old ns/op    new ns/op    delta\r\n> >> BenchmarkMemmove0               3            3   +0.86%\r\n> >> BenchmarkMemmove1               5            5   +5.40%\r\n> >> BenchmarkMemmove2              18            8  -56.84%\r\n> >> BenchmarkMemmove3              18            7  -58.45%\r\n> >> BenchmarkMemmove4              36            7  -78.63%\r\n> >> BenchmarkMemmove5              36            8  -77.91%\r\n> >> BenchmarkMemmove6              36            8  -77.76%\r\n> >> BenchmarkMemmove7              36            8  -77.82%\r\n> >> BenchmarkMemmove8              18            8  -56.33%\r\n> >> BenchmarkMemmove9              18            7  -58.34%\r\n> >> BenchmarkMemmove10             18            7  -58.34%\r\n> >> BenchmarkMemmove11             18            7  -58.45%\r\n> >> BenchmarkMemmove12             36            7  -78.51%\r\n> >> BenchmarkMemmove13             36            7  -78.48%\r\n> >> BenchmarkMemmove14             36            7  -78.56%\r\n> >> BenchmarkMemmove15             36            7  -78.56%\r\n> >> BenchmarkMemmove16             18            7  -58.24%\r\n> >> BenchmarkMemmove32             18            8  -54.33%\r\n> >> BenchmarkMemmove64             18            8  -53.37%\r\n> >> BenchmarkMemmove128            20            9  -55.93%\r\n> >> BenchmarkMemmove256            25           11  -55.16%\r\n> >> BenchmarkMemmove512            33           33   -1.19%\r\n> >> BenchmarkMemmove1024           43           44   +2.06%\r\n> >> BenchmarkMemmove2048           61           61   +0.16%\r\n> >> BenchmarkMemmove4096           95           95   +0.00%\r\n> >>\r\n> >> Please review this at https://codereview.appspot.com/9038048/\r\n> >>\r\n> >> Affected files:\r\n> >>   src/pkg/runtime/memmove_386.s\r\n> >>   src/pkg/runtime/memmove_amd64.s\r\n> >>   src/pkg/runtime/memmove_test.go\r\n> >>\r\n> >>\r\n> >> --\r\n> >>\r\n> >> ---You received this message because you are subscribed to the Google\r\n> >> Groups \"golang-dev\" group.\r\n> >> To unsubscribe from this group and stop receiving emails from it, send\r\n> an\r\n> >> email to golang-dev+unsubscribe@googlegroups.com.\r\n> >> For more options, visit https://groups.google.com/groups/opt_out.\r\n> >>\r\n> >>\r\n> > --\r\n> >\r\n> > ---\r\n> > You received this message because you are subscribed to the Google Groups\r\n> > \"golang-dev\" group.\r\n> > To unsubscribe from this group and stop receiving emails from it, send an\r\n> > email to golang-dev+unsubscribe@googlegroups.com.\r\n> > For more options, visit https://groups.google.com/groups/opt_out.\r\n> >\r\n> >\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-16 22:06:36.909640",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"khr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/16 22:06:36, khr1 wrote:\n> If you're calling memmove directly with a constant size, maybe we should\n> split out the copy ranges (e.g. memmove_17through32) as full-fledged\n> functions that you can call directly, avoiding the size switch at the top\n> of memmove.  Downside, the compiler is exposed to some of the memmove\n> implementation.  Upside, no size switch.\n> \n\nThe na\u00efve combination is already extremely interesting.\n\nThis CL alone vs. This CL + CL9101048\n\nbenchmark                     old ns/op    new ns/op    delta\nBenchmarkCopy1Byte                    9            8   -5.49%\nBenchmarkCopy2Byte                   13            8  -35.38%\nBenchmarkCopy4Byte                   14            7  -44.41%\nBenchmarkCopy8Byte                   14            8  -40.43%\nBenchmarkCopy12Byte                  15            9  -39.47%\nBenchmarkCopy16Byte                  15            9  -39.40%\nBenchmarkCopy32Byte                  18           11  -35.68%\nBenchmarkCopy128Byte                 32           25  -23.31%\nBenchmarkCopy1024Byte               101           94   -6.93%\nBenchmarkCopy1String                 10            8  -24.02%\nBenchmarkCopy2String                 10            8  -24.49%\nBenchmarkCopy4String                 10            7  -28.35%\nBenchmarkCopy8String                 10            8  -21.83%\nBenchmarkCopy12String                11            9  -18.30%\nBenchmarkCopy16String                11            9  -17.50%\nBenchmarkCopy32String                14           12  -17.12%\nBenchmarkCopy128String               28           24  -12.01%\nBenchmarkCopy1024String              96           93   -3.22%\n\nCL9101048 alone vs. This CL + CL9101048\n\nbenchmark                  old ns/op    new ns/op    delta\nBenchmarkCopy1Byte                 4            8  +75.87%\nBenchmarkCopy2Byte                26            8  -67.94%\nBenchmarkCopy4Byte                55            7  -85.65%\nBenchmarkCopy8Byte                26            8  -68.29%\nBenchmarkCopy12Byte               55            9  -83.61%\nBenchmarkCopy16Byte               26            9  -65.31%\nBenchmarkCopy32Byte               26           11  -54.58%\nBenchmarkCopy128Byte              28           25  -13.19%\nBenchmarkCopy1024Byte             96           94   -2.08%\nBenchmarkCopy1String               4            8  +89.51%\nBenchmarkCopy2String              25            8  -68.68%\nBenchmarkCopy4String              54            7  -85.67%\nBenchmarkCopy8String              25            8  -66.85%\nBenchmarkCopy12String             54            9  -83.21%\nBenchmarkCopy16String             25            9  -64.19%\nBenchmarkCopy32String             25           12  -52.92%\nBenchmarkCopy128String            28           24  -12.32%\nBenchmarkCopy1024String           96           93   -3.22%\n\ntip vs. both CLs\n\nbenchmark                  old ns/op    new ns/op    delta\nBenchmarkCopy1Byte                10            8  -16.50%\nBenchmarkCopy2Byte                36            8  -76.92%\nBenchmarkCopy4Byte                74            7  -89.36%\nBenchmarkCopy8Byte                36            8  -77.09%\nBenchmarkCopy12Byte               74            9  -87.84%\nBenchmarkCopy16Byte               36            9  -75.03%\nBenchmarkCopy32Byte               36           11  -67.31%\nBenchmarkCopy128Byte              38           25  -34.55%\nBenchmarkCopy1024Byte            107           94  -12.15%\nBenchmarkCopy1String              27            8  -69.89%\nBenchmarkCopy2String              27            8  -70.07%\nBenchmarkCopy4String              56            7  -86.10%\nBenchmarkCopy8String              27            8  -68.44%\nBenchmarkCopy12String             56            9  -83.72%\nBenchmarkCopy16String             27            9  -65.78%\nBenchmarkCopy32String             27           12  -55.35%\nBenchmarkCopy128String            29           24  -15.88%\nBenchmarkCopy1024String           96           93   -3.62%",
			"disapproval": false,
			"date": "2013-05-16 23:06:01.759480",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"khr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/16 23:06:01, remyoudompheng wrote:\n> On 2013/05/16 22:06:36, khr1 wrote:\n> > If you're calling memmove directly with a constant size, maybe we should\n> > split out the copy ranges (e.g. memmove_17through32) as full-fledged\n> > functions that you can call directly, avoiding the size switch at the top\n> > of memmove.  Downside, the compiler is exposed to some of the memmove\n> > implementation.  Upside, no size switch.\n> > \n> \n> The na\u00efve combination is already extremely interesting.\n\nMy CPU is a Core 2 Quad Q8200 (2.33GHz).",
			"disapproval": false,
			"date": "2013-05-16 23:06:41.826480",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"khr@google.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "These timings do very an awful lot on different versions of Intel CPUs, so it's worth doing some timings on other CPU types if possible.",
			"disapproval": false,
			"date": "2013-05-17 13:55:29.133150",
			"approval": false
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"khr@google.com",
				"iant@golang.org",
				"dominik.honnef@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Testing just CL9038048\n\nIntel(R) Core(TM) i7-2600K CPU @ 3.40GHz\n\nbenchmark               old ns/op    new ns/op    delta\nBenchmarkMemmove0               3            3   +8.86%\nBenchmarkMemmove1               5            5   +5.06%\nBenchmarkMemmove2              18            7  -57.87%\nBenchmarkMemmove3              18            7  -59.52%\nBenchmarkMemmove4              36            7  -79.30%\nBenchmarkMemmove5              36            7  -78.59%\nBenchmarkMemmove6              36            7  -78.59%\nBenchmarkMemmove7              36            7  -78.59%\nBenchmarkMemmove8              18            7  -57.98%\nBenchmarkMemmove9              18            7  -59.36%\nBenchmarkMemmove10             18            7  -59.36%\nBenchmarkMemmove11             18            7  -59.58%\nBenchmarkMemmove12             36            7  -79.30%\nBenchmarkMemmove13             36            7  -79.30%\nBenchmarkMemmove14             36            7  -79.27%\nBenchmarkMemmove15             36            7  -79.30%\nBenchmarkMemmove16             18            8  -55.96%\nBenchmarkMemmove32             18            8  -56.54%\nBenchmarkMemmove64             18            8  -56.54%\nBenchmarkMemmove128            21            9  -57.45%\nBenchmarkMemmove256            25           10  -57.09%\nBenchmarkMemmove512            33           32   -3.25%\nBenchmarkMemmove1024           44           43   -2.27%\nBenchmarkMemmove2048           61           60   -2.28%\nBenchmarkMemmove4096           95           94   -1.36%\n\n\nIntel(R) Atom(TM) CPU N455   @ 1.66GHz\n\nbenchmark               old ns/op    new ns/op    delta\nBenchmarkMemmove0              20           20   +0.00%\nBenchmarkMemmove1              27           27   +0.00%\nBenchmarkMemmove2              72           43  -40.28%\nBenchmarkMemmove3              73           43  -40.36%\nBenchmarkMemmove4              74           43  -41.40%\nBenchmarkMemmove5              75           44  -41.59%\nBenchmarkMemmove6              77           44  -42.75%\nBenchmarkMemmove7              77           44  -43.39%\nBenchmarkMemmove8              69           44  -35.94%\nBenchmarkMemmove9              73           44  -39.35%\nBenchmarkMemmove10             75           44  -40.27%\nBenchmarkMemmove11             76           44  -41.26%\nBenchmarkMemmove12             77           44  -42.19%\nBenchmarkMemmove13             78           44  -43.06%\nBenchmarkMemmove14             79           44  -43.93%\nBenchmarkMemmove15             81           44  -44.81%\nBenchmarkMemmove16             70           44  -36.18%\nBenchmarkMemmove32             72           53  -26.62%\nBenchmarkMemmove64             77           68  -11.74%\nBenchmarkMemmove128            87           98  +13.10%\nBenchmarkMemmove256           106          158  +49.06%\nBenchmarkMemmove512           147          140   -4.76%\nBenchmarkMemmove1024          225          218   -3.11%\nBenchmarkMemmove2048          300          293   -2.33%\nBenchmarkMemmove4096          710          702   -1.13%\n\n\n(In one iteration, the numbers for 2048 and 4096 jumped to +30/-31, repeated runs couldn't reproduce that)",
			"disapproval": false,
			"date": "2013-05-17 14:42:18.660670",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"khr@google.com",
				"iant@golang.org",
				"dominik.honnef@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-05-17 17:33:07.484350",
			"approval": true
		},
		{
			"sender": "khr@golang.org",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"khr@google.com",
				"iant@golang.org",
				"dominik.honnef@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=4cb93e2900d0 ***\n\nruntime: faster x86 memmove (a.k.a. built-in copy())\n\nREP instructions have a high startup cost, so we handle small\nsizes with some straightline code.  The REP MOVSx instructions\nare really fast for large sizes.  The cutover is approximately\n1K.  We implement up to 128/256 because that is the maximum\nSSE register load (loading all data into registers before any\nstores lets us ignore copy direction).\n\n(on a Sandy Bridge E5-1650 @ 3.20GHz)\nbenchmark               old ns/op    new ns/op    delta\nBenchmarkMemmove0               3            3   +0.86%\nBenchmarkMemmove1               5            5   +5.40%\nBenchmarkMemmove2              18            8  -56.84%\nBenchmarkMemmove3              18            7  -58.45%\nBenchmarkMemmove4              36            7  -78.63%\nBenchmarkMemmove5              36            8  -77.91%\nBenchmarkMemmove6              36            8  -77.76%\nBenchmarkMemmove7              36            8  -77.82%\nBenchmarkMemmove8              18            8  -56.33%\nBenchmarkMemmove9              18            7  -58.34%\nBenchmarkMemmove10             18            7  -58.34%\nBenchmarkMemmove11             18            7  -58.45%\nBenchmarkMemmove12             36            7  -78.51%\nBenchmarkMemmove13             36            7  -78.48%\nBenchmarkMemmove14             36            7  -78.56%\nBenchmarkMemmove15             36            7  -78.56%\nBenchmarkMemmove16             18            7  -58.24%\nBenchmarkMemmove32             18            8  -54.33%\nBenchmarkMemmove64             18            8  -53.37%\nBenchmarkMemmove128            20            9  -55.93%\nBenchmarkMemmove256            25           11  -55.16%\nBenchmarkMemmove512            33           33   -1.19%\nBenchmarkMemmove1024           43           44   +2.06%\nBenchmarkMemmove2048           61           61   +0.16%\nBenchmarkMemmove4096           95           95   +0.00%\n\nR=golang-dev, bradfitz, remyoudompheng, khr, iant, dominik.honnef\nCC=golang-dev\nhttps://codereview.appspot.com/9038048",
			"disapproval": false,
			"date": "2013-05-17 19:53:54.915040",
			"approval": false
		}
	],
	"owner_email": "khr@golang.org",
	"private": false,
	"base_url": "",
	"owner": "khr",
	"subject": "code review 9038048: runtime: faster x86 memmove (a.k.a. built-in copy())",
	"created": "2013-05-16 18:14:59.062900",
	"patchsets": [
		1,
		2001,
		5001,
		7001,
		10001,
		24001,
		33001
	],
	"modified": "2013-05-17 19:53:54.915040",
	"closed": true,
	"issue": 9038048
}