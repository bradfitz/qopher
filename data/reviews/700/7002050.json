{
	"description": "crypto/rsa: ensure that RSA keys use the full number of bits.\n\nWhile half of all numbers don't have their most-significant bit set,\nthis is becoming increasingly impermissible for RSA moduli. In an\nattempt to exclude weak keys, several bits of software either do, or\nwill, enforce that RSA moduli are >= 1024-bits.\n\nHowever, Go often generates 1023-bit RSA moduli which this software\nwould then reject.\n\nThis change causes crypto/rsa to regenerate the primes in the event\nthat the result is shorter than requested.\n\nIt also alters crypto/rand in order to remove the performance impact\nof this:\n\nThe most important change to crypto/rand is that it will now set the\ntop two bits in a generated prime (OpenSSL does the same thing).\nMultiplying two n/2 bit numbers, where each have the top two bits set,\nwill always result in an n-bit product. (The effectively makes the\ncrypto/rsa change moot, but that seems too fragile to depend on.)\n\nAlso this change adds code to crypto/rand to rapidly eliminate some\nobviously composite numbers and reduce the number of Miller-Rabin\ntests needed to generate a prime.",
	"cc": [
		"rsc@golang.org",
		"minux.ma@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-12-22 16:02:00.629320",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Dec 23, 2012 at 12:02 AM, <agl@golang.org> wrote:\r\n\r\n> Description:\r\n> will always result in an n-bit product. (The effectively makes the\r\n> crypto/rsa change moot, but that seems too fragile to depend on.)o\r\n>\r\nwhy is there a trailing o?\r\n\r\n>\r\n> Also this change adds code to crypto/util to rapidly eliminate some\r\n>\r\nit's crypto/rand/util.go. there is no such package as crypto/util.\r\n\r\n> obviously composite numbers and reduce the number of Miller-Rabin\r\n> tests needed to generate a prime.\r\n>\r\n",
			"disapproval": false,
			"date": "2012-12-22 21:06:33.500500",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-12-22 16:10:18.299040",
			"approval": true
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Dec 22, 2012 at 4:06 PM, minux <minux.ma@gmail.com> wrote:\r\n>> will always result in an n-bit product. (The effectively makes the\r\n>> crypto/rsa change moot, but that seems too fragile to depend on.)o\r\n>\r\n> why is there a trailing o?\r\n>>\r\n>>\r\n>> Also this change adds code to crypto/util to rapidly eliminate some\r\n>\r\n> it's crypto/rand/util.go. there is no such package as crypto/util.\r\n>>\r\n>> obviously composite numbers and reduce the number of Miller-Rabin\r\n>> tests needed to generate a prime.\r\n\r\nThanks for those. Will correct before landing.\r\n\r\n\r\nCheers\r\n\r\nAGL\r\n",
			"disapproval": false,
			"date": "2012-12-29 00:03:41.215650",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=019884311591 ***\n\ncrypto/rsa: ensure that RSA keys use the full number of bits.\n\nWhile half of all numbers don't have their most-significant bit set,\nthis is becoming increasingly impermissible for RSA moduli. In an\nattempt to exclude weak keys, several bits of software either do, or\nwill, enforce that RSA moduli are >= 1024-bits.\n\nHowever, Go often generates 1023-bit RSA moduli which this software\nwould then reject.\n\nThis change causes crypto/rsa to regenerate the primes in the event\nthat the result is shorter than requested.\n\nIt also alters crypto/rand in order to remove the performance impact\nof this:\n\nThe most important change to crypto/rand is that it will now set the\ntop two bits in a generated prime (OpenSSL does the same thing).\nMultiplying two n/2 bit numbers, where each have the top two bits set,\nwill always result in an n-bit product. (The effectively makes the\ncrypto/rsa change moot, but that seems too fragile to depend on.)\n\nAlso this change adds code to crypto/rand to rapidly eliminate some\nobviously composite numbers and reduce the number of Miller-Rabin\ntests needed to generate a prime.\n\nR=rsc, minux.ma\nCC=golang-dev\nhttps://codereview.appspot.com/7002050",
			"disapproval": false,
			"date": "2012-12-29 00:12:30.229480",
			"approval": false
		}
	],
	"owner_email": "agl@golang.org",
	"private": false,
	"base_url": "",
	"owner": "agl1",
	"subject": "code review 7002050: crypto/rsa: ensure that RSA keys use the full number of...",
	"created": "2012-12-22 16:00:36.600620",
	"patchsets": [
		1,
		2001,
		5001,
		3
	],
	"modified": "2012-12-29 00:12:31.484750",
	"closed": true,
	"issue": 7002050
}