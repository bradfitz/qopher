{
	"description": "crypto/tls: Add support for ECDHE-ECDSA\n\nAdd support for ECDHE-ECDSA (RFC4492), which uses an ephemeral server\nkey pair to perform ECDH with ECDSA signatures. Like ECDHE-RSA,\nECDHE-ECDSA also provides PFS.",
	"cc": [
		"agl@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "jsing@google.com",
			"recipients": [
				"jsing@google.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-07-11 17:09:49.500820",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"jsing@google.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Will need to read over in more detail with a fresh brain at some point, but here's an initial pass.\n\nhttps://codereview.appspot.com/7006047/diff/15001/src/pkg/crypto/tls/handshake_client.go\nFile src/pkg/crypto/tls/handshake_client.go (right):\n\nhttps://codereview.appspot.com/7006047/diff/15001/src/pkg/crypto/tls/handshake_client.go#newcode287\nsrc/pkg/crypto/tls/handshake_client.go:287: digest := finishedHash.server.Sum(nil)\nShouldn't this be finishedHash.hashForClientCertificate, same as below? (And thus pulled up before the switch.)\n\nhttps://codereview.appspot.com/7006047/diff/15001/src/pkg/crypto/tls/handshake_server.go\nFile src/pkg/crypto/tls/handshake_server.go (right):\n\nhttps://codereview.appspot.com/7006047/diff/15001/src/pkg/crypto/tls/handshake_server.go#newcode407\nsrc/pkg/crypto/tls/handshake_server.go:407: digest := hs.finishedHash.server.Sum(nil)\nditto about hashForClientCertificate.\n\nhttps://codereview.appspot.com/7006047/diff/15001/src/pkg/crypto/tls/handshake_server.go#newcode413\nsrc/pkg/crypto/tls/handshake_server.go:413: // MD5-SHA1 digest.\nIt's not a MD5-SHA1 hash in the case of TLS 1.2\n\nhttps://codereview.appspot.com/7006047/diff/15001/src/pkg/crypto/tls/key_agreement.go\nFile src/pkg/crypto/tls/key_agreement.go (right):\n\nhttps://codereview.appspot.com/7006047/diff/15001/src/pkg/crypto/tls/key_agreement.go#newcode142\nsrc/pkg/crypto/tls/key_agreement.go:142: const (\nWe already have signatureRSA/ECDSA in common.go. Not sure that we need this.\n\nhttps://codereview.appspot.com/7006047/diff/15001/src/pkg/crypto/tls/key_agreement.go#newcode195\nsrc/pkg/crypto/tls/key_agreement.go:195: hash := sha1Hash(clientHello.random, hello.random, serverECDHParams)\nI think this is incorrect for TLS 1.2. You might want to pass an extra argument to hashForServerKeyExchange.",
			"disapproval": false,
			"date": "2013-07-11 21:14:55.881270",
			"approval": false
		},
		{
			"sender": "jsing@google.com",
			"recipients": [
				"jsing@google.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Retested with openssl and gnutls-cli, with TLS1.2 and TLS1.1.\n\nPTAL.\n\nhttps://codereview.appspot.com/7006047/diff/15001/src/pkg/crypto/tls/handshake_client.go\nFile src/pkg/crypto/tls/handshake_client.go (right):\n\nhttps://codereview.appspot.com/7006047/diff/15001/src/pkg/crypto/tls/handshake_client.go#newcode287\nsrc/pkg/crypto/tls/handshake_client.go:287: digest := finishedHash.server.Sum(nil)\nOn 2013/07/11 21:14:56, agl1 wrote:\n> Shouldn't this be finishedHash.hashForClientCertificate, same as below? (And\n> thus pulled up before the switch.)\n\nFor versions other than TLS1.2 we need a SHA1 digest, not MD5SHA1. We can use hashForClientCertificate, but only if we tweak it to handle the signatureECDSA case, which I've done.\n\nhttps://codereview.appspot.com/7006047/diff/15001/src/pkg/crypto/tls/handshake_server.go\nFile src/pkg/crypto/tls/handshake_server.go (right):\n\nhttps://codereview.appspot.com/7006047/diff/15001/src/pkg/crypto/tls/handshake_server.go#newcode407\nsrc/pkg/crypto/tls/handshake_server.go:407: digest := hs.finishedHash.server.Sum(nil)\nOn 2013/07/11 21:14:56, agl1 wrote:\n> ditto about hashForClientCertificate.\n\nSame deal.\n\nhttps://codereview.appspot.com/7006047/diff/15001/src/pkg/crypto/tls/handshake_server.go#newcode413\nsrc/pkg/crypto/tls/handshake_server.go:413: // MD5-SHA1 digest.\nOn 2013/07/11 21:14:56, agl1 wrote:\n> It's not a MD5-SHA1 hash in the case of TLS 1.2\n\nCorrect. Removed bogus comment (in case you didn't guess, most of this was written before you added TLS 1.2 support :)\n\nhttps://codereview.appspot.com/7006047/diff/15001/src/pkg/crypto/tls/key_agreement.go\nFile src/pkg/crypto/tls/key_agreement.go (right):\n\nhttps://codereview.appspot.com/7006047/diff/15001/src/pkg/crypto/tls/key_agreement.go#newcode142\nsrc/pkg/crypto/tls/key_agreement.go:142: const (\nOn 2013/07/11 21:14:56, agl1 wrote:\n> We already have signatureRSA/ECDSA in common.go. Not sure that we need this.\n\nAh, indeed.\n\nhttps://codereview.appspot.com/7006047/diff/15001/src/pkg/crypto/tls/key_agreement.go#newcode195\nsrc/pkg/crypto/tls/key_agreement.go:195: hash := sha1Hash(clientHello.random, hello.random, serverECDHParams)\nOn 2013/07/11 21:14:56, agl1 wrote:\n> I think this is incorrect for TLS 1.2. You might want to pass an extra argument\n> to hashForServerKeyExchange.\n\nDone.\n\nhttps://codereview.appspot.com/7006047/diff/26001/src/pkg/crypto/tls/handshake_client.go\nFile src/pkg/crypto/tls/handshake_client.go (right):\n\nhttps://codereview.appspot.com/7006047/diff/26001/src/pkg/crypto/tls/handshake_client.go#newcode48\nsrc/pkg/crypto/tls/handshake_client.go:48: hello.signatureAndHashes = signatureAndHashes(0)\nNot sure if we want to filter this based on the cipher suites being advertised. Once we decide I'll update the TLS12 client handshake test.",
			"disapproval": false,
			"date": "2013-07-12 16:44:00.795640",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"jsing@google.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM, with nits.\n\nhttps://codereview.appspot.com/7006047/diff/26001/src/pkg/crypto/tls/cipher_suites.go\nFile src/pkg/crypto/tls/cipher_suites.go (right):\n\nhttps://codereview.appspot.com/7006047/diff/26001/src/pkg/crypto/tls/cipher_suites.go#newcode67\nsrc/pkg/crypto/tls/cipher_suites.go:67: {TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA, 24, 20, 8, ecdheECDSAKA, true, cipher3DES, macSHA1},\nLet's remove ECDSA + 3DES. I recently pulled it from Chrome, FF will probably do likewise and I don't think IE ever supported it.\n\nhttps://codereview.appspot.com/7006047/diff/26001/src/pkg/crypto/tls/cipher_suites.go#newcode206\nsrc/pkg/crypto/tls/cipher_suites.go:206: TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA uint16 = 0xc008\n(also remove here.)\n\nhttps://codereview.appspot.com/7006047/diff/26001/src/pkg/crypto/tls/handshake_client.go\nFile src/pkg/crypto/tls/handshake_client.go (right):\n\nhttps://codereview.appspot.com/7006047/diff/26001/src/pkg/crypto/tls/handshake_client.go#newcode48\nsrc/pkg/crypto/tls/handshake_client.go:48: hello.signatureAndHashes = signatureAndHashes(0)\nOn 2013/07/12 16:44:01, jsing wrote:\n> Not sure if we want to filter this based on the cipher suites being advertised.\n> Once we decide I'll update the TLS12 client handshake test.\n\nI don't think we need the filter function. We because we aren't using ECDSA for the server's certificate doesn't preclude an ECDSA client cert.\n\nhttps://codereview.appspot.com/7006047/diff/26001/src/pkg/crypto/tls/handshake_client.go#newcode195\nsrc/pkg/crypto/tls/handshake_client.go:195: rsaAvail, ecdsaAvail := false, false\nvar rsaAvail, ecdsaAvail bool\n\nhttps://codereview.appspot.com/7006047/diff/26001/src/pkg/crypto/tls/handshake_server.go\nFile src/pkg/crypto/tls/handshake_server.go (right):\n\nhttps://codereview.appspot.com/7006047/diff/26001/src/pkg/crypto/tls/handshake_server.go#newcode313\nsrc/pkg/crypto/tls/handshake_server.go:313: if ka, ok := keyAgreement.(*ecdheKeyAgreement); ok && ka.sigType == signatureECDSA {\nThe certificate types don't need to depend on the ciphersuite. We should support both RSA and ECDSA.",
			"disapproval": false,
			"date": "2013-07-15 18:37:59.717400",
			"approval": true
		},
		{
			"sender": "jsing@google.com",
			"recipients": [
				"jsing@google.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Due to the additional certificate types for client signing and the additional supported algorithm for TLS 1.2, I've ended up having to regenerate the test scripts for existing tests (TLS 1.2 for handshake_client/handshake_server, RSA and ECDSA client certs for handshake_server).\n\nPTAL to double check the changes.\n\nhttps://codereview.appspot.com/7006047/diff/26001/src/pkg/crypto/tls/cipher_suites.go\nFile src/pkg/crypto/tls/cipher_suites.go (right):\n\nhttps://codereview.appspot.com/7006047/diff/26001/src/pkg/crypto/tls/cipher_suites.go#newcode67\nsrc/pkg/crypto/tls/cipher_suites.go:67: {TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA, 24, 20, 8, ecdheECDSAKA, true, cipher3DES, macSHA1},\nOn 2013/07/15 18:38:00, agl1 wrote:\n> Let's remove ECDSA + 3DES. I recently pulled it from Chrome, FF will probably do\n> likewise and I don't think IE ever supported it.\n\nDone.\n\nhttps://codereview.appspot.com/7006047/diff/26001/src/pkg/crypto/tls/cipher_suites.go#newcode206\nsrc/pkg/crypto/tls/cipher_suites.go:206: TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA uint16 = 0xc008\nOn 2013/07/15 18:38:00, agl1 wrote:\n> (also remove here.)\n\nDone.\n\nhttps://codereview.appspot.com/7006047/diff/26001/src/pkg/crypto/tls/handshake_client.go\nFile src/pkg/crypto/tls/handshake_client.go (right):\n\nhttps://codereview.appspot.com/7006047/diff/26001/src/pkg/crypto/tls/handshake_client.go#newcode48\nsrc/pkg/crypto/tls/handshake_client.go:48: hello.signatureAndHashes = signatureAndHashes(0)\nOn 2013/07/15 18:38:00, agl1 wrote:\n> On 2013/07/12 16:44:01, jsing wrote:\n> > Not sure if we want to filter this based on the cipher suites being\n> advertised.\n> > Once we decide I'll update the TLS12 client handshake test.\n> \n> I don't think we need the filter function. We because we aren't using ECDSA for\n> the server's certificate doesn't preclude an ECDSA client cert.\n\nIndeed. Reverted.\n\nhttps://codereview.appspot.com/7006047/diff/26001/src/pkg/crypto/tls/handshake_client.go#newcode195\nsrc/pkg/crypto/tls/handshake_client.go:195: rsaAvail, ecdsaAvail := false, false\nOn 2013/07/15 18:38:00, agl1 wrote:\n> var rsaAvail, ecdsaAvail bool\n\nDone.\n\nhttps://codereview.appspot.com/7006047/diff/26001/src/pkg/crypto/tls/handshake_server.go\nFile src/pkg/crypto/tls/handshake_server.go (right):\n\nhttps://codereview.appspot.com/7006047/diff/26001/src/pkg/crypto/tls/handshake_server.go#newcode313\nsrc/pkg/crypto/tls/handshake_server.go:313: if ka, ok := keyAgreement.(*ecdheKeyAgreement); ok && ka.sigType == signatureECDSA {\nOn 2013/07/15 18:38:00, agl1 wrote:\n> The certificate types don't need to depend on the ciphersuite. We should support\n> both RSA and ECDSA.\n\nGood point. Done.",
			"disapproval": false,
			"date": "2013-07-16 16:51:30.159520",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"jsing@google.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. Will land.",
			"disapproval": false,
			"date": "2013-07-17 15:32:28.799170",
			"approval": true
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"jsing@google.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=47ec7a68b1a2 ***\n\ncrypto/tls: Add support for ECDHE-ECDSA\n\nAdd support for ECDHE-ECDSA (RFC4492), which uses an ephemeral server\nkey pair to perform ECDH with ECDSA signatures. Like ECDHE-RSA,\nECDHE-ECDSA also provides PFS.\n\nR=agl\nCC=golang-dev\nhttps://codereview.appspot.com/7006047\n\nCommitter: Adam Langley <agl@golang.org>",
			"disapproval": false,
			"date": "2013-07-17 16:33:34.015070",
			"approval": false
		}
	],
	"owner_email": "jsing@google.com",
	"private": false,
	"base_url": "",
	"owner": "jsing",
	"subject": "code review 7006047: crypto/tls: Add support for ECDHE-ECDSA",
	"created": "2012-12-23 15:18:10.614260",
	"patchsets": [
		1,
		1001,
		4001,
		7001,
		9001,
		12001,
		15001,
		23001,
		26001,
		37001
	],
	"modified": "2013-07-18 12:54:52.543470",
	"closed": true,
	"issue": 7006047
}