{
	"description": "runtime: faster mcentral alloc.\n\nReduce individual object handling by anticipating how much of them are servable.\n\nNot a chunked transfer cache, but decent enough to make sure the bottleneck is not here.\n\nMac OSX, median of 10 runs:\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17    5358937333   4892813012   -8.70%\nBenchmarkFannkuch11      3257752475   3315436116   +1.77%\nBenchmarkGobDecode         23277349     23001114   -1.19%\nBenchmarkGobEncode         14367327     14262925   -0.73%\nBenchmarkGzip             441045541    440451719   -0.13%\nBenchmarkGunzip           139117663    139622494   +0.36%\nBenchmarkJSONEncode        45715854     45687802   -0.06%\nBenchmarkJSONDecode       103949570    106530032   +2.48%\nBenchmarkMandelbrot200      4542462      4548290   +0.13%\nBenchmarkParse              7790558      7557540   -2.99%\nBenchmarkRevcomp          831436684    832510381   +0.13%\nBenchmarkTemplate         133789824    133007337   -0.58%\n\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkGobDecode            32.82        33.33    1.02x\nBenchmarkGobEncode            53.42        53.86    1.01x\nBenchmarkGzip                 43.70        44.01    1.01x\nBenchmarkGunzip              139.09       139.14    1.00x\nBenchmarkJSONEncode           42.69        42.56    1.00x\nBenchmarkJSONDecode           18.78        17.91    0.95x\nBenchmarkParse                 7.37         7.67    1.04x\nBenchmarkRevcomp             306.83       305.70    1.00x\nBenchmarkTemplate             14.57        14.56    1.00x",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"dvyukov@google.com"
	],
	"messages": [
		{
			"sender": "sebastien.paolacci@gmail.com",
			"recipients": [
				"sebastien.paolacci@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-12-23 21:44:14.372250",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"sebastien.paolacci@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThis is not quite the same as what we already had, in that it won't grab from multiple spans during a single call. But it's probably good enough.",
			"disapproval": false,
			"date": "2013-01-18 21:36:40.778170",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"sebastien.paolacci@gmail.com",
				"rsc@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=85eaf35d3760 ***\n\nruntime: faster mcentral alloc.\n\nReduce individual object handling by anticipating how much of them are servable.\n\nNot a chunked transfer cache, but decent enough to make sure the bottleneck is not here.\n\nMac OSX, median of 10 runs:\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17    5358937333   4892813012   -8.70%\nBenchmarkFannkuch11      3257752475   3315436116   +1.77%\nBenchmarkGobDecode         23277349     23001114   -1.19%\nBenchmarkGobEncode         14367327     14262925   -0.73%\nBenchmarkGzip             441045541    440451719   -0.13%\nBenchmarkGunzip           139117663    139622494   +0.36%\nBenchmarkJSONEncode        45715854     45687802   -0.06%\nBenchmarkJSONDecode       103949570    106530032   +2.48%\nBenchmarkMandelbrot200      4542462      4548290   +0.13%\nBenchmarkParse              7790558      7557540   -2.99%\nBenchmarkRevcomp          831436684    832510381   +0.13%\nBenchmarkTemplate         133789824    133007337   -0.58%\n\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkGobDecode            32.82        33.33    1.02x\nBenchmarkGobEncode            53.42        53.86    1.01x\nBenchmarkGzip                 43.70        44.01    1.01x\nBenchmarkGunzip              139.09       139.14    1.00x\nBenchmarkJSONEncode           42.69        42.56    1.00x\nBenchmarkJSONDecode           18.78        17.91    0.95x\nBenchmarkParse                 7.37         7.67    1.04x\nBenchmarkRevcomp             306.83       305.70    1.00x\nBenchmarkTemplate             14.57        14.56    1.00x\n\nR=rsc, dvyukov\nCC=golang-dev\nhttps://codereview.appspot.com/7005055\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2013-01-18 21:39:25.427230",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"sebastien.paolacci@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-01-19 07:12:24.599010",
			"approval": true
		}
	],
	"owner_email": "sebastien.paolacci@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Sebastien Paolacci",
	"subject": "code review 7005055: runtime: faster mcentral alloc.",
	"created": "2012-12-23 21:42:33.684530",
	"patchsets": [
		1,
		2001,
		4001
	],
	"modified": "2013-01-20 09:11:37.036510",
	"closed": true,
	"issue": 7005055
}