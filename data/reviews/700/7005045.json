{
	"description": "net/http: make ParseHTTPVersion() accept lowercase versions\n\nWhile the RFC[1] specifies that the version part should be uppercase\nnot all clients obey this. It isn't a big problem from the server's\npoint of view, so this change makes parsing more forgiving and\npractical.\n\n[1] http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"rsc@golang.org",
		"bradfitz@golang.org"
	],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Is this fixing a real bug in a popular http client? If not I'm inclined to\r\nvote no on this as this part of the request is one thing the client should\r\nbe able to get right.\r\nOn 22 Dec 2012 01:30, <brtsz@google.com> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> net/http: make ParseHTTPVersion() accept lowercase versions\r\n>\r\n> While the RFC[1] specifies that the version part should be uppercase\r\n> not all clients obey this. It isn't a big problem from the server's\r\n> point of view, so this change makes parsing more forgiving and\r\n> practical.\r\n>\r\n> [1] http://www.w3.org/Protocols/**rfc2616/rfc2616-sec3.html<http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html>\r\n>\r\n> Please review this at https://codereview.appspot.**com/7005045/<https://codereview.appspot.com/7005045/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/net/http/request.go\r\n>   M src/pkg/net/http/request_test.**go\r\n>\r\n>\r\n> Index: src/pkg/net/http/request.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/http/request.go\r\n> +++ b/src/pkg/net/http/request.go\r\n> @@ -382,9 +382,9 @@\r\n>  func ParseHTTPVersion(vers string) (major, minor int, ok bool) {\r\n>         const Big = 1000000 // arbitrary upper bound\r\n>         switch vers {\r\n> -       case \"HTTP/1.1\":\r\n> +       case \"HTTP/1.1\", \"http/1.1\":\r\n>                 return 1, 1, true\r\n> -       case \"HTTP/1.0\":\r\n> +       case \"HTTP/1.0\", \"http/1.0\":\r\n>                 return 1, 0, true\r\n>         }\r\n>         if !strings.HasPrefix(vers, \"HTTP/\") {\r\n> Index: src/pkg/net/http/request_test.**go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/http/request_**test.go\r\n> +++ b/src/pkg/net/http/request_**test.go\r\n> @@ -216,6 +216,7 @@\r\n>  }{\r\n>         {\"GET / HTTP/1.1\\r\\nheader:foo\\r\\n\\r\\**n\", nil},\r\n>         {\"GET / HTTP/1.1\\r\\nheader:foo\\r\\n\", io.ErrUnexpectedEOF},\r\n> +       {\"GET / http/1.1\\r\\nheader:foo\\r\\n\\r\\**n\", nil},\r\n>         {\"\", io.EOF},\r\n>  }\r\n>\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-12-21 14:44:58.116260",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "If there's no problem, I'd prefer to keep it unchanged.\r\n\r\nI'd like to at least pretend we can follow specs.\r\n\r\n\r\nOn Sat, Dec 22, 2012 at 8:25 AM, Bartosz Oler <brtsz@google.com> wrote:\r\n\r\n> The problem with current version is that it's more strict than necessary.\r\n> Sure, clients should follow the protocol as close as possible, but at the\r\n> same time servers shouldn't reject requests they can clearly\r\n> understand. This change slightly relaxes the parser without doing any harm.\r\n>\r\n> I'm not aware of any clients that are having problem with current\r\n> implementation, but I got bitten by this behaviour when trying to parse\r\n> sample requests from AWS test suite -- the requests are mostly fine, but\r\n> version is specified in lowercase. It's not a big deal to fix the input,\r\n> but also would be nice if ParseHTTPVersion was more forgiving.\r\n>\r\n> I expect the standard library to be as unsurprising as possible,\r\n> especially when it comes at low cost.\r\n>\r\n> Russ, I assume that somebody implementing a HTTP client may be not aware\r\n> that version should be uppercase and goes with what is easier to type. But\r\n> by using mixed case he just asks for problems. ;)\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-12-22 16:43:34.281810",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I agree.  What's the problem with how it is now?\r\n\r\nOn Fri, Dec 21, 2012 at 6:44 AM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> Is this fixing a real bug in a popular http client? If not I'm inclined to\r\n> vote no on this as this part of the request is one thing the client should\r\n> be able to get right.\r\n> On 22 Dec 2012 01:30, <brtsz@google.com> wrote:\r\n>\r\n>> Reviewers: golang-dev_googlegroups.com,\r\n>>\r\n>> Message:\r\n>> Hello golang-dev@googlegroups.com,\r\n>>\r\n>> I'd like you to review this change to\r\n>> https://code.google.com/p/go/\r\n>>\r\n>>\r\n>> Description:\r\n>> net/http: make ParseHTTPVersion() accept lowercase versions\r\n>>\r\n>> While the RFC[1] specifies that the version part should be uppercase\r\n>> not all clients obey this. It isn't a big problem from the server's\r\n>> point of view, so this change makes parsing more forgiving and\r\n>> practical.\r\n>>\r\n>> [1] http://www.w3.org/Protocols/**rfc2616/rfc2616-sec3.html<http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html>\r\n>>\r\n>> Please review this at https://codereview.appspot.**com/7005045/<https://codereview.appspot.com/7005045/>\r\n>>\r\n>> Affected files:\r\n>>   M src/pkg/net/http/request.go\r\n>>   M src/pkg/net/http/request_test.**go\r\n>>\r\n>>\r\n>> Index: src/pkg/net/http/request.go\r\n>> ==============================**==============================**=======\r\n>> --- a/src/pkg/net/http/request.go\r\n>> +++ b/src/pkg/net/http/request.go\r\n>> @@ -382,9 +382,9 @@\r\n>>  func ParseHTTPVersion(vers string) (major, minor int, ok bool) {\r\n>>         const Big = 1000000 // arbitrary upper bound\r\n>>         switch vers {\r\n>> -       case \"HTTP/1.1\":\r\n>> +       case \"HTTP/1.1\", \"http/1.1\":\r\n>>                 return 1, 1, true\r\n>> -       case \"HTTP/1.0\":\r\n>> +       case \"HTTP/1.0\", \"http/1.0\":\r\n>>                 return 1, 0, true\r\n>>         }\r\n>>         if !strings.HasPrefix(vers, \"HTTP/\") {\r\n>> Index: src/pkg/net/http/request_test.**go\r\n>> ==============================**==============================**=======\r\n>> --- a/src/pkg/net/http/request_**test.go\r\n>> +++ b/src/pkg/net/http/request_**test.go\r\n>> @@ -216,6 +216,7 @@\r\n>>  }{\r\n>>         {\"GET / HTTP/1.1\\r\\nheader:foo\\r\\n\\r\\**n\", nil},\r\n>>         {\"GET / HTTP/1.1\\r\\nheader:foo\\r\\n\", io.ErrUnexpectedEOF},\r\n>> +       {\"GET / http/1.1\\r\\nheader:foo\\r\\n\\r\\**n\", nil},\r\n>>         {\"\", io.EOF},\r\n>>  }\r\n>>\r\n>>\r\n>>\r\n>>\r\n",
			"disapproval": false,
			"date": "2012-12-21 21:23:27.789030",
			"approval": false
		},
		{
			"sender": "brtsz@google.com",
			"recipients": [
				"brtsz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-12-21 11:11:35.494040",
			"approval": false
		},
		{
			"sender": "brtsz@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The problem with current version is that it's more strict than necessary.\r\nSure, clients should follow the protocol as close as possible, but at the\r\nsame time servers shouldn't reject requests they can clearly\r\nunderstand. This change slightly relaxes the parser without doing any harm.\r\n\r\nI'm not aware of any clients that are having problem with current\r\nimplementation, but I got bitten by this behaviour when trying to parse\r\nsample requests from AWS test suite -- the requests are mostly fine, but\r\nversion is specified in lowercase. It's not a big deal to fix the input,\r\nbut also would be nice if ParseHTTPVersion was more forgiving.\r\n\r\nI expect the standard library to be as unsurprising as possible, especially\r\nwhen it comes at low cost.\r\n\r\nRuss, I assume that somebody implementing a HTTP client may be not aware\r\nthat version should be uppercase and goes with what is easier to type. But\r\nby using mixed case he just asks for problems. ;)\r\n",
			"disapproval": false,
			"date": "2012-12-22 16:25:50.122560",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "not hTTp?\r\n",
			"disapproval": false,
			"date": "2012-12-21 21:22:39.598880",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"brtsz@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=close",
			"disapproval": false,
			"date": "2013-06-04 21:52:02.603330",
			"approval": false
		}
	],
	"owner_email": "brtsz@google.com",
	"private": false,
	"base_url": "",
	"owner": "brtsz",
	"subject": "code review 7005045: net/http: make ParseHTTPVersion() accept lowercase versions",
	"created": "2012-12-21 11:06:46.409190",
	"patchsets": [
		1,
		2001,
		5001
	],
	"modified": "2013-06-04 21:52:02.803270",
	"closed": false,
	"issue": 7005045
}