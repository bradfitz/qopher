{
	"description": "go.exp/fsnotify: use proper temporary directories in tests",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net"
	],
	"messages": [
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.exp",
			"disapproval": false,
			"date": "2013-03-30 21:04:25.824620",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi,\n\nI'm not certain this is the correct fix. Why are the directories present before the test run in the first place ? It looks like there is a constant name, and the directory is being created relative to the source. Shouldn't the directories be mktemp -d 's ? \n\nA while back I started this package which might have some testing harness that is useful to create the structure for doing these sort of tests. Maybe it is useful, https://github.com/davecheney/fswatch/blob/master/fswatch_test.go.\n\nCheers\n\nDave",
			"disapproval": false,
			"date": "2013-04-01 12:46:14.317480",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Thanks, I agree. I'll look at fixing it to use ioutil.Tempdir.\r\n>\r\n> The need for this fix came about when I was running a large batch of\r\n> tests at the same time and sometimes killing them. This was the only\r\n> test I found that left stuff behind in a way that prevented it from\r\n> passing when you reran it.\r\n\r\nThat is what I suspected. Maybe it is as simple as changing the value\r\nof tempDir inside the test to be a _real_ temporary value.\r\n",
			"disapproval": false,
			"date": "2013-04-01 12:53:47.627450",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/01 12:46:14, dfc wrote:\n> I'm not certain this is the correct fix. Why are the directories present before\n> the test run in the first place ? It looks like there is a constant name, and\n> the directory is being created relative to the source. Shouldn't the directories\n> be mktemp -d 's ? \n\nThanks, I agree. I'll look at fixing it to use ioutil.Tempdir.\n\nThe need for this fix came about when I was running a large batch of tests at the same time and sometimes killing them. This was the only test I found that left stuff behind in a way that prevented it from passing when you reran it.\n\nRegards\n\nAlbert",
			"disapproval": false,
			"date": "2013-04-01 12:52:15.459680",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL",
			"disapproval": false,
			"date": "2013-04-06 12:30:38.253710",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I noticed that TestFsnotifyDeleteWatchedDir is leaking a file descriptor:\n\nstrace -f -q -e inotify_init,open,close ./fsnotify.test -test.cpu=1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 -test.v -test.run=TestFsnotifyDeleteWatchedDir\n\nSIGABRT shows that all the readEvents goroutines (which are in charge of closing the inotify fd) are still stuck in their read syscall.\n\nThis seems like a problem with the current design of Watcher. readEvents is blocked and can't see the closed done channel.",
			"disapproval": false,
			"date": "2013-04-06 12:43:47.448710",
			"approval": false
		}
	],
	"owner_email": "fullung@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "albert.strasheim",
	"subject": "code review 8202043: go.exp/fsnotify: make test more robust if directory was...",
	"created": "2013-03-30 21:03:36.955010",
	"patchsets": [
		1,
		2001,
		5001,
		13001,
		18001
	],
	"modified": "2013-04-06 12:43:47.448710",
	"closed": false,
	"issue": 8202043
}