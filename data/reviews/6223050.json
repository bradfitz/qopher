{
	"description": "runtime: faster GC mark phase\nAlso bump MaxGcproc to 8.\n\nbenchmark             old ns/op    new ns/op    delta\nParser               3796323000   3763880000   -0.85%\nParser-2             3591752500   3518560250   -2.04%\nParser-4             3423825250   3334955250   -2.60%\nParser-8             3304585500   3267014750   -1.14%\nParser-16            3313615750   3286160500   -0.83%\n\nTree                  984128500    942501166   -4.23%\nTree-2                932564444    883266222   -5.29%\nTree-4                835831000    799912777   -4.30%\nTree-8                819238500    789717333   -3.73%\nTree-16               880837833    837840055   -5.13%\n\nTree2                 604698100    579716900   -4.13%\nTree2-2               372414500    356765200   -4.20%\nTree2-4               187488100    177455900   -5.56%\nTree2-8               136315300    102086700  -25.11%\nTree2-16               93725900     76705800  -22.18%\n\nParserPause           157441210    166202783   +5.56%\nParserPause-2          93842650     85199900   -9.21%\nParserPause-4          56844404     53535684   -5.82%\nParserPause-8          35739446     30767613  -16.15%\nParserPause-16         32718255     27212441  -16.83%\n\nTreePause              29610557     29787725   +0.60%\nTreePause-2            24001659     20674421  -13.86%\nTreePause-4            15114887     12842781  -15.03%\nTreePause-8            13128725     10741747  -22.22%\nTreePause-16           16131360     12506901  -22.47%\n\nTree2Pause           2673350920   2651045280   -0.83%\nTree2Pause-2         1796999200   1709350040   -4.88%\nTree2Pause-4         1163553320   1090706480   -6.67%\nTree2Pause-8          987032520    858916360  -25.11%\nTree2Pause-16         864758560    809567480   -6.81%\n\nParserLastPause       280537000    289047000   +3.03%\nParserLastPause-2     183030000    166748000   -8.90%\nParserLastPause-4     105817000     91552000  -13.48%\nParserLastPause-8      65127000     53288000  -18.18%\nParserLastPause-16     45258000     38334000  -15.30%\n\nTreeLastPause          45072000     51449000  +12.39%\nTreeLastPause-2        39269000     37866000   -3.57%\nTreeLastPause-4        23564000     20649000  -12.37%\nTreeLastPause-8        20881000     15807000  -24.30%\nTreeLastPause-16       23297000     17309000  -25.70%\n\nTree2LastPause       6046912000   5797120000   -4.13%\nTree2LastPause-2     3724034000   3567592000   -4.20%\nTree2LastPause-4     1874831000   1774524000   -5.65%\nTree2LastPause-8     1363108000   1020809000  -12.79%\nTree2LastPause-16     937208000    767019000  -22.18%",
	"cc": [
		"rsc@golang.org",
		"0xe2.0x9a.0x9b@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-05-23 13:58:24.887805",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"0xe2.0x9a.0x9b@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6223050/diff/12001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttp://codereview.appspot.com/6223050/diff/12001/src/pkg/runtime/mgc0.c#newcode261\nsrc/pkg/runtime/mgc0.c:261: // If another proc wants a pointer, give it some.\nOn 2012/05/23 18:29:25, atom wrote:\n> Is there a reason why this was moved here?\n\nI wrote this 6+ month ago, so I am not sure :)\nI think that the reason was that a thread may not get to that point below for a long time. It was at the end of the loop, I moved it to the middle of the loop; so it's kind of compromise between affecting hot-path and responsiveness.",
			"disapproval": false,
			"date": "2012-05-23 18:36:49.899441",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"0xe2.0x9a.0x9b@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nIt is interesting to me that the Parser pause times went down so noticeably (~15%) but the overall Parser run time did not.  Do you understand why that is?\n\nIs this the last of the CLs?\n\nThanks.\nRuss\n\nhttp://codereview.appspot.com/6223050/diff/12001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttp://codereview.appspot.com/6223050/diff/12001/src/pkg/runtime/mgc0.c#newcode261\nsrc/pkg/runtime/mgc0.c:261: // If another proc wants a pointer, give it some.\nI don't understand: why is nobj==4 a concern?  This code was above the nobj++ before, and it still is.  Is nobj==4 a case that happens that I'm missing?\n\nhttp://codereview.appspot.com/6223050/diff/12001/src/pkg/runtime/mgc0.c#newcode609\nsrc/pkg/runtime/mgc0.c:609: default:\nPlease unindent these cases, like they were before.  The standard switch style in this code is\n\nswitch(x) {\ncase 1:\n     indented()\ncase 2:\n     indented()\n}\n\nThe words switch and case should be aligned.\n\nI know it's annoying.  I actually looked into building a cfmt out of parts I had lying around, but it seemed like overkill and a distraction.",
			"disapproval": false,
			"date": "2012-05-23 19:59:04.075075",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I've also collected additional stats on tree benchmark.\nBEFORE:\nGOMAXPROCS=1:  exec time 16690ms, GC 5846ms (35.30%), mark 3602ms (21.58%), sweep 2244ms (13.44%)\nGOMAXPROCS=2:  exec time 14956ms, GC 3559ms (23.79%), mark 2244ms (15.00%), sweep 1314ms ( 8.79%)\nGOMAXPROCS=4:  exec time 14113ms, GC 2625ms (18.60%), mark 1626ms (11.52%), sweep 999ms  ( 7.70%)\nGOMAXPROCS=8:  exec time 13787ms, GC 1962ms (14.23%), mark 1096ms ( 7.95%), sweep 865ms  ( 6.27%)\nGOMAXPROCS=16: exec time 14927ms, GC 2702ms (18.10%), mark 1614ms (10.81%), sweep 1088ms ( 7.29%)\n\nAFTER:\nGOMAXPROCS=1:  exec time 16564ms, GC 5869ms (35.43%), mark 3646ms (22.10%), sweep 2222ms (13.41%)\nGOMAXPROCS=2:  exec time 15432ms, GC 3970ms (25.72%), mark 2340ms (15.16%), sweep 1629ms (10.55%)\nGOMAXPROCS=4:  exec time 14076ms, GC 2537ms (18.20%), mark 1408ms (10.00%), sweep 1128ms ( 8.20%)\nGOMAXPROCS=8:  exec time 13334ms, GC 1799ms (13.49%), mark 1058ms ( 7.93%), sweep 741ms  ( 5.56%)\nGOMAXPROCS=16: exec time 13162ms, GC 1718ms (13.50%), mark 1010ms ( 7.67%), sweep 707ms  ( 5.37%)\n\nThat's on Intel Xeon E5620 2.40GHz, 8 HT cores. It does not slow down on 16 threads now. But I think we better set MaxGcproc=8 for now, especially taking into account that I tested only on 8 HT cores machine.",
			"disapproval": false,
			"date": "2012-05-23 14:46:54.311205",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"0xe2.0x9a.0x9b@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6223050/diff/12001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttp://codereview.appspot.com/6223050/diff/12001/src/pkg/runtime/mgc0.c#newcode261\nsrc/pkg/runtime/mgc0.c:261: // If another proc wants a pointer, give it some.\nIs there a reason why this was moved here?",
			"disapproval": false,
			"date": "2012-05-23 18:29:25.568318",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"0xe2.0x9a.0x9b@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6223050/diff/12001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttp://codereview.appspot.com/6223050/diff/12001/src/pkg/runtime/mgc0.c#newcode261\nsrc/pkg/runtime/mgc0.c:261: // If another proc wants a pointer, give it some.\nOn 2012/05/23 18:36:50, dvyukov wrote:\n> On 2012/05/23 18:29:25, atom wrote:\n> > Is there a reason why this was moved here?\n> \n> I wrote this 6+ month ago, so I am not sure :)\n> I think that the reason was that a thread may not get to that point below for a\n> long time. It was at the end of the loop, I moved it to the middle of the loop;\n> so it's kind of compromise between affecting hot-path and responsiveness.\n\nIf (nobj==4) then the test (nobj>4) will always fail unless you increment nobj. You moved the code into a place where you don't know whether nobj will be incremented. Maybe it should be placed below nobj++.\n\nIn any case, my patch (http://codereview.appspot.com/6114046/) contains a rewrite of function scanblock(), so when it gets merged some of your changes will be lost.",
			"disapproval": false,
			"date": "2012-05-23 19:17:39.344603",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, May 23, 2012 at 3:17 PM,  <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n> In any case, my patch (http://codereview.appspot.com/6114046/) contains\r\n> a rewrite of function scanblock(), so when it gets merged some of your\r\n> changes will be lost.\r\n\r\nI'm a little worried about this statement.\r\nPart of getting Dmitriy's patch in first means that it's your job to merge it\r\ninto your patch, without losing the changes, at least without losing the\r\nimportant ones.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-23 19:20:41.910127",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"0xe2.0x9a.0x9b@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6223050/diff/12001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttp://codereview.appspot.com/6223050/diff/12001/src/pkg/runtime/mgc0.c#newcode261\nsrc/pkg/runtime/mgc0.c:261: // If another proc wants a pointer, give it some.\nOn 2012/05/23 19:59:04, rsc wrote:\n> I don't understand: why is nobj==4 a concern?  This code was above the nobj++\n> before, and it still is.  Is nobj==4 a case that happens that I'm missing?\n\nI also do not see what's wrong with nobj==4.\nI've just made it checked more frequently (in the hope to avoid at least some of corner cases, and it seems to not affect performance in this new place). And also reordered checks.",
			"disapproval": false,
			"date": "2012-05-24 06:32:21.495982",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you so much for seeing this through. I am more than happy to put\r\noff concurrent sweep for now.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-24 14:00:58.429353",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"0xe2.0x9a.0x9b@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> http://codereview.appspot.com/6223050/diff/12001/src/pkg/runtime/mgc0.c#newcode609\n> src/pkg/runtime/mgc0.c:609: default:\n> Please unindent these cases, like they were before.  The standard switch style\n> in this code is\n> \n> switch(x) {\n> case 1:\n>      indented()\n> case 2:\n>      indented()\n> }\n> \n> The words switch and case should be aligned.\n> \n> I know it's annoying.  I actually looked into building a cfmt out of parts I had\n> lying around, but it seemed like overkill and a distraction.\n\nDone.\nI guess it was some evil IDE. Moving spaces around for 20 yrs, I am OK to move a bit more :)",
			"disapproval": false,
			"date": "2012-05-24 06:38:29.420749",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"0xe2.0x9a.0x9b@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/05/23 19:59:04, rsc wrote:\n> LGTM\n> \n> It is interesting to me that the Parser pause times went down so noticeably\n> (~15%) but the overall Parser run time did not.  Do you understand why that is?\n\nWhether it's good or not, parser is not garbage benchmark anymore. Here are new stats for GOMAXPROCS=16:\nexec time 26517ms, GC 1397ms (5.27%), mark 891ms (3.36%), sweep 506ms (1.91%), total GCs 42\nGC takes only 5% of time. If you cut 20% out of 5%, that only 1%.\nTaking into account that parser still mostly generates garbage, I think bandwidth component of GC problem may be considered solved.\n\n\n> Is this the last of the CLs?\n\nYes, I've finished porting that big CL. Some micro-tuning is still possible, and there is that \"concurrent sweep\" thing. But I want to take a break with GC work.\nFrom that GC stats above, sweep takes 2% of time, and mean sweep pause is 12ms. I think that scheduler improvements will have much higher impact of bandwidth and latency.",
			"disapproval": false,
			"date": "2012-05-24 06:49:07.490823",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"0xe2.0x9a.0x9b@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=0ed15bfbe0f4 ***\n\nruntime: faster GC mark phase\nAlso bump MaxGcproc to 8.\n\nbenchmark             old ns/op    new ns/op    delta\nParser               3796323000   3763880000   -0.85%\nParser-2             3591752500   3518560250   -2.04%\nParser-4             3423825250   3334955250   -2.60%\nParser-8             3304585500   3267014750   -1.14%\nParser-16            3313615750   3286160500   -0.83%\n\nTree                  984128500    942501166   -4.23%\nTree-2                932564444    883266222   -5.29%\nTree-4                835831000    799912777   -4.30%\nTree-8                819238500    789717333   -3.73%\nTree-16               880837833    837840055   -5.13%\n\nTree2                 604698100    579716900   -4.13%\nTree2-2               372414500    356765200   -4.20%\nTree2-4               187488100    177455900   -5.56%\nTree2-8               136315300    102086700  -25.11%\nTree2-16               93725900     76705800  -22.18%\n\nParserPause           157441210    166202783   +5.56%\nParserPause-2          93842650     85199900   -9.21%\nParserPause-4          56844404     53535684   -5.82%\nParserPause-8          35739446     30767613  -16.15%\nParserPause-16         32718255     27212441  -16.83%\n\nTreePause              29610557     29787725   +0.60%\nTreePause-2            24001659     20674421  -13.86%\nTreePause-4            15114887     12842781  -15.03%\nTreePause-8            13128725     10741747  -22.22%\nTreePause-16           16131360     12506901  -22.47%\n\nTree2Pause           2673350920   2651045280   -0.83%\nTree2Pause-2         1796999200   1709350040   -4.88%\nTree2Pause-4         1163553320   1090706480   -6.67%\nTree2Pause-8          987032520    858916360  -25.11%\nTree2Pause-16         864758560    809567480   -6.81%\n\nParserLastPause       280537000    289047000   +3.03%\nParserLastPause-2     183030000    166748000   -8.90%\nParserLastPause-4     105817000     91552000  -13.48%\nParserLastPause-8      65127000     53288000  -18.18%\nParserLastPause-16     45258000     38334000  -15.30%\n\nTreeLastPause          45072000     51449000  +12.39%\nTreeLastPause-2        39269000     37866000   -3.57%\nTreeLastPause-4        23564000     20649000  -12.37%\nTreeLastPause-8        20881000     15807000  -24.30%\nTreeLastPause-16       23297000     17309000  -25.70%\n\nTree2LastPause       6046912000   5797120000   -4.13%\nTree2LastPause-2     3724034000   3567592000   -4.20%\nTree2LastPause-4     1874831000   1774524000   -5.65%\nTree2LastPause-8     1363108000   1020809000  -12.79%\nTree2LastPause-16     937208000    767019000  -22.18%\n\nR=rsc, 0xe2.0x9a.0x9b\nCC=golang-dev\nhttp://codereview.appspot.com/6223050",
			"disapproval": false,
			"date": "2012-05-24 06:59:01.507796",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 6223050: runtime: faster GC mark phase",
	"created": "2012-05-20 11:44:52.092517",
	"patchsets": [
		1,
		2001,
		4002,
		7001,
		4003,
		9001,
		12001,
		18001,
		22001,
		22002,
		23005
	],
	"modified": "2012-05-24 06:59:02.840438",
	"closed": true,
	"issue": 6223050
}