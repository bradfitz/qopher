{
	"description": "math: Improved accuracy for Sin and Cos.\n\nFixes issue 1564.",
	"cc": [
		"rsc@golang.org",
		"dchest@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"cldorian@gmail.com",
				"rsc@golang.org",
				"dchest@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=db6289ea7a02 ***\n\nmath: Improved accuracy for Sin and Cos.\n\nFixes issue 1564.\n\nR=rsc, dchest\nCC=golang-dev\nhttp://codereview.appspot.com/5320056\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2011-10-31 18:26:08.039413",
			"approval": false
		},
		{
			"sender": "cldorian@gmail.com",
			"recipients": [
				"cldorian@gmail.com",
				"rsc@golang.org",
				"dchest@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/10/31 18:26:29, rsc wrote:\n> Submitted, thanks.\n> Does it make sense to have an\n> assembly version a la sincos_amd64.s\n> for Sin and Cos?\n> \n> Russ\n\nI will see if I can devise an assembly version faster than the compiler. The compiler is getting very good!\n\n-- Carlie",
			"disapproval": false,
			"date": "2011-10-31 18:36:30.257105",
			"approval": false
		},
		{
			"sender": "cldorian@gmail.com",
			"recipients": [
				"cldorian@gmail.com",
				"rsc@golang.org",
				"dchest@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, dchest@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-31 18:23:56.329229",
			"approval": false
		},
		{
			"sender": "cldorian@gmail.com",
			"recipients": [
				"cldorian@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-30 05:05:08.792348",
			"approval": false
		},
		{
			"sender": "cldorian@gmail.com",
			"recipients": [
				"cldorian@gmail.com",
				"rsc@golang.org",
				"dchest@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Thanks for the review. I've added a link to the archive site.\n\n-- Charlie",
			"disapproval": false,
			"date": "2011-10-30 20:00:19.743122",
			"approval": false
		},
		{
			"sender": "dchest@gmail.com",
			"recipients": [
				"cldorian@gmail.com",
				"rsc@golang.org",
				"dchest@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5320056/diff/5001/src/pkg/math/sin.go\nFile src/pkg/math/sin.go (right):\n\nhttp://codereview.appspot.com/5320056/diff/5001/src/pkg/math/sin.go#newcode12\nsrc/pkg/math/sin.go:12: // below are from http://netlib.sandia.gov/cephes/cmath/sin.c.\nThis link doesn't work for me (404).\nI found something here:\nhttp://www.netlib.org/cephes/index.html",
			"disapproval": false,
			"date": "2011-10-30 13:19:22.359273",
			"approval": false
		},
		{
			"sender": "cldorian@gmail.com",
			"recipients": [
				"cldorian@gmail.com",
				"rsc@golang.org",
				"dchest@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, dchest@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-30 19:54:40.210250",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"cldorian@gmail.com",
				"rsc@golang.org",
				"dchest@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\nThanks very much.  Please s/()// in the CL description (Sin and Cos).\nIf you fix the nits below I'll gladly submit.  :-)\n\nhttps://codereview.appspot.com/5320056/diff/11001/src/pkg/math/all_test.go\nFile src/pkg/math/all_test.go (right):\n\nhttps://codereview.appspot.com/5320056/diff/11001/src/pkg/math/all_test.go#newcode2208\nsrc/pkg/math/all_test.go:2208: if s, c := Sincos(vf[i]); !veryclose(sin[i], s) || !close(cos[i], c) {\nveryclose for cos[i] too?\n\nhttps://codereview.appspot.com/5320056/diff/11001/src/pkg/math/sin.go\nFile src/pkg/math/sin.go (right):\n\nhttps://codereview.appspot.com/5320056/diff/11001/src/pkg/math/sin.go#newcode93\nsrc/pkg/math/sin.go:93: var _sin = []float64{\nIf you make this [...]float64 then the compiler\nwill figure out how big it is and use that ([6]float64)\nand then all the constant indexes below will not need\ntheir bounds checks.  Of course, if you make this\n\nconst (\n    _sin0 = 1.589...\n    _sin1 = ...\n    ...\n)\n\nand use those below, then they will be constants,\nwhich might be even better.\n\nhttps://codereview.appspot.com/5320056/diff/11001/src/pkg/math/sin.go#newcode214\nsrc/pkg/math/sin.go:214: if (j == 1) || (j == 2) {\nDrop ()",
			"disapproval": false,
			"date": "2011-10-31 17:33:57.825560",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Submitted, thanks.\nDoes it make sense to have an\nassembly version a la sincos_amd64.s\nfor Sin and Cos?\n\nRuss\n",
			"disapproval": false,
			"date": "2011-10-31 18:26:29.822838",
			"approval": false
		},
		{
			"sender": "cldorian@gmail.com",
			"recipients": [
				"cldorian@gmail.com",
				"rsc@golang.org",
				"dchest@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/10/31 17:33:57, rsc wrote:\n> LGTM\n> Thanks very much.  Please s/()// in the CL description (Sin and Cos).\n\nDone.\n\n> If you fix the nits below I'll gladly submit.  :-)\n> \n> https://codereview.appspot.com/5320056/diff/11001/src/pkg/math/all_test.go\n> File src/pkg/math/all_test.go (right):\n> \n> https://codereview.appspot.com/5320056/diff/11001/src/pkg/math/all_test.go#newcode2208\n> src/pkg/math/all_test.go:2208: if s, c := Sincos(vf[i]); !veryclose(sin[i], s)\n> || !close(cos[i], c) {\n> veryclose for cos[i] too?\n\nDone. \n\n> https://codereview.appspot.com/5320056/diff/11001/src/pkg/math/sin.go\n> File src/pkg/math/sin.go (right):\n> \n> https://codereview.appspot.com/5320056/diff/11001/src/pkg/math/sin.go#newcode93\n> src/pkg/math/sin.go:93: var _sin = []float64{\n> If you make this [...]float64 then the compiler\n> will figure out how big it is and use that ([6]float64)\n> and then all the constant indexes below will not need\n> their bounds checks.  Of course, if you make this\n> \n> const (\n>     _sin0 = 1.589...\n>     _sin1 = ...\n>     ...\n> )\n> \n> and use those below, then they will be constants,\n> which might be even better.\n\nDone. Changed [] to [...], which speeded up Cos from 27.9 to 26.2 ns/op and Sin from 28.1 to 27.3 ns/op. I did not realize that there was a difference! Converting to constants, contrary to expectations, slows down the functions (Cos = 26.7/26.2, Sin = 27.7/27.3). I'd seen this before and speculate that it's related to alignment.\n\n> https://codereview.appspot.com/5320056/diff/11001/src/pkg/math/sin.go#newcode214\n> src/pkg/math/sin.go:214: if (j == 1) || (j == 2) {\n> Drop ()\n\nDone.\n\nThanks for the review.\n\n-- Charlie",
			"disapproval": false,
			"date": "2011-10-31 18:34:12.366367",
			"approval": false
		}
	],
	"owner_email": "cldorian@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Charlie Dorian",
	"subject": "code review 5320056: math: Improved accuracy for Sin and Cos.",
	"created": "2011-10-30 05:04:02.120434",
	"patchsets": [
		1,
		2001,
		5001,
		11001,
		15001
	],
	"modified": "2011-11-04 01:39:22.125771",
	"closed": true,
	"issue": 5320056
}