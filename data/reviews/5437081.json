{
	"description": "math/big: fix destination leak into result value\nThis code would panic:\nz := big.NewInt(1)\nz.SetBit(big.NewInt(0), 2, 1)\nif z.Cmp(big.NewInt(1<<2)) != 0 {\n        panic(\"fail\")\n}",
	"cc": [
		"rsc@golang.org",
		"gri@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"rogpeppe@gmail.com",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\n(also made a minor change to make a test print consistent)\n\nhttp://codereview.appspot.com/5437081/diff/1002/src/pkg/math/big/int_test.go\nFile src/pkg/math/big/int_test.go (right):\n\nhttp://codereview.appspot.com/5437081/diff/1002/src/pkg/math/big/int_test.go#newcode1251\nsrc/pkg/math/big/int_test.go:1251: t.Errorf(\"destination value not leaked into result value; got %s want 4\", z)\nOn 2011/11/29 18:31:04, gri wrote:\n> this is a confusing message - if the test fails it means that the old\n> destination value (z) actually leaked into the result - so it should be \"leaked\"\n> instead of \"not leaked\". perhaps just leave away the part before the ;\n\nyes, the \"not\" is spurious. i did this in too much of a hurry.\n\nhttp://codereview.appspot.com/5437081/diff/1002/src/pkg/math/big/nat.go\nFile src/pkg/math/big/nat.go (right):\n\nhttp://codereview.appspot.com/5437081/diff/1002/src/pkg/math/big/nat.go#newcode923\nsrc/pkg/math/big/nat.go:923: copy(z, x)\nOn 2011/11/29 18:31:04, gri wrote:\n> you can still factor out copy after the if statement\n\ngood point.\ndone.",
			"disapproval": false,
			"date": "2011-11-30 08:55:46.998002",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rogpeppe@gmail.com",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nthx for fixing this!\n- gri",
			"disapproval": false,
			"date": "2011-11-30 17:29:14.581801",
			"approval": true
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"rogpeppe@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-29 18:11:28.403126",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rogpeppe@gmail.com",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5437081/diff/1002/src/pkg/math/big/int_test.go\nFile src/pkg/math/big/int_test.go (right):\n\nhttp://codereview.appspot.com/5437081/diff/1002/src/pkg/math/big/int_test.go#newcode1251\nsrc/pkg/math/big/int_test.go:1251: t.Errorf(\"destination value not leaked into result value; got %s want 4\", z)\nthis is a confusing message - if the test fails it means that the old destination value (z) actually leaked into the result - so it should be \"leaked\" instead of \"not leaked\". perhaps just leave away the part before the ;\n\nhttp://codereview.appspot.com/5437081/diff/1002/src/pkg/math/big/nat.go\nFile src/pkg/math/big/nat.go (right):\n\nhttp://codereview.appspot.com/5437081/diff/1002/src/pkg/math/big/nat.go#newcode923\nsrc/pkg/math/big/nat.go:923: copy(z, x)\nyou can still factor out copy after the if statement\n\nhttp://codereview.appspot.com/5437081/diff/1002/src/pkg/math/big/nat.go#newcode924\nsrc/pkg/math/big/nat.go:924: z[len(x):].clear()\ns/len(x)/n/\n\nfor consistency\n\nhttp://codereview.appspot.com/5437081/diff/1002/src/pkg/math/big/nat.go#newcode927\nsrc/pkg/math/big/nat.go:927: copy(z, x)\nremove\n\nhttp://codereview.appspot.com/5437081/diff/1002/src/pkg/math/big/nat.go#newcode928\nsrc/pkg/math/big/nat.go:928: }\ncopy(z, x)",
			"disapproval": false,
			"date": "2011-11-29 18:31:04.895134",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rogpeppe@gmail.com",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=ff02633361cd ***\n\nmath/big: fix destination leak into result value\nThis code would panic:\nz := big.NewInt(1)\nz.SetBit(big.NewInt(0), 2, 1)\nif z.Cmp(big.NewInt(1<<2)) != 0 {\n        panic(\"fail\")\n}\n\nR=rsc, gri\nCC=golang-dev\nhttp://codereview.appspot.com/5437081\n\nCommitter: Robert Griesemer <gri@golang.org>",
			"disapproval": false,
			"date": "2011-11-30 17:30:02.267932",
			"approval": false
		}
	],
	"owner_email": "rogpeppe@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "rog",
	"subject": "code review 5437081: math/big: fix destination leak into result value",
	"created": "2011-11-29 18:10:15.396474",
	"patchsets": [
		1,
		2001,
		1002,
		6001
	],
	"modified": "2011-11-30 17:30:02.267932",
	"closed": false,
	"issue": 5437081
}