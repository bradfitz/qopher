{
	"description": "image/jpeg: ignore extraneous data, the same as what libjpeg does.\n\nFixes issue 4705.\n\nNote that libjpeg will print a warning to stderr if there are many\nextraneous bytes, but can be silent if the extraneous bytes can fit\ninto its int32 bit-buffer for Huffman decoding. I'm guessing that\nthis is why whatever encoder that produced the image filed for issue\n4705 did not realize that they are, strictly speaking, generating an\ninvalid JPEG. That issue's attached image has two extraneous bytes.\n\nFor example, piping the program below into libjpeg's djpeg program\nwill print an \"18 extraneous bytes\" warning, even though N == 20.\n\n$ cat main.go\npackage main\n\nimport (\n        \"bytes\"\n        \"image\"\n        \"image/color\"\n        \"image/jpeg\"\n        \"os\"\n)\n\nconst N = 20\n\nfunc main() {\n        // Encode a 1x1 red image.\n        m := image.NewRGBA(image.Rect(0, 0, 1, 1))\n        m.Set(0, 0, color.RGBA{255, 0, 0, 255})\n        buf := new(bytes.Buffer)\n        jpeg.Encode(buf, m, nil)\n        b := buf.Bytes()\n        // Strip the final \"\\xff\\xd9\" EOI marker.\n        b = b[:len(b)-2]\n        // Append N dummy 0x80 bytes to the SOS data.\n        for i := 0; i < N; i++ {\n                b = append(b, 0x80)\n        }\n        // Put back the \"\\xff\\xd9\" EOI marker.\n        b = append(b, 0xff, 0xd9)\n        os.Stdout.Write(b)\n}\n$ go run main.go | djpeg /dev/stdin > /tmp/foo.pnm\nCorrupt JPEG data: 18 extraneous bytes before marker 0xd9\n\nThe resultant /tmp/foo.pnm is a perfectly good 1x1 red image.",
	"cc": [
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-03-12 08:33:24.261840",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nwow\n\nhttps://codereview.appspot.com/7750043/diff/4001/src/pkg/image/jpeg/writer_test.go\nFile src/pkg/image/jpeg/writer_test.go (right):\n\nhttps://codereview.appspot.com/7750043/diff/4001/src/pkg/image/jpeg/writer_test.go#newcode163\nsrc/pkg/image/jpeg/writer_test.go:163: // averageDelta returns the average delta in RGB space. The two images should\ns/should/must/ or check it in the routine. or both.",
			"disapproval": false,
			"date": "2013-03-12 15:05:05.746550",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=1d72d7a8249a ***\n\nimage/jpeg: ignore extraneous data, the same as what libjpeg does.\n\nFixes issue 4705.\n\nNote that libjpeg will print a warning to stderr if there are many\nextraneous bytes, but can be silent if the extraneous bytes can fit\ninto its int32 bit-buffer for Huffman decoding. I'm guessing that\nthis is why whatever encoder that produced the image filed for issue\n4705 did not realize that they are, strictly speaking, generating an\ninvalid JPEG. That issue's attached image has two extraneous bytes.\n\nFor example, piping the program below into libjpeg's djpeg program\nwill print an \"18 extraneous bytes\" warning, even though N == 20.\n\n$ cat main.go\npackage main\n\nimport (\n        \"bytes\"\n        \"image\"\n        \"image/color\"\n        \"image/jpeg\"\n        \"os\"\n)\n\nconst N = 20\n\nfunc main() {\n        // Encode a 1x1 red image.\n        m := image.NewRGBA(image.Rect(0, 0, 1, 1))\n        m.Set(0, 0, color.RGBA{255, 0, 0, 255})\n        buf := new(bytes.Buffer)\n        jpeg.Encode(buf, m, nil)\n        b := buf.Bytes()\n        // Strip the final \"\\xff\\xd9\" EOI marker.\n        b = b[:len(b)-2]\n        // Append N dummy 0x80 bytes to the SOS data.\n        for i := 0; i < N; i++ {\n                b = append(b, 0x80)\n        }\n        // Put back the \"\\xff\\xd9\" EOI marker.\n        b = append(b, 0xff, 0xd9)\n        os.Stdout.Write(b)\n}\n$ go run main.go | djpeg /dev/stdin > /tmp/foo.pnm\nCorrupt JPEG data: 18 extraneous bytes before marker 0xd9\n\nThe resultant /tmp/foo.pnm is a perfectly good 1x1 red image.\n\nR=r\nCC=golang-dev\nhttps://codereview.appspot.com/7750043",
			"disapproval": false,
			"date": "2013-03-12 23:45:01.461610",
			"approval": false
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 7750043: image/jpeg: ignore extraneous data, the same as what li...",
	"created": "2013-03-12 08:33:01.184820",
	"patchsets": [
		1,
		2001,
		4001,
		10001
	],
	"modified": "2013-03-12 23:45:03.695970",
	"closed": true,
	"issue": 7750043
}