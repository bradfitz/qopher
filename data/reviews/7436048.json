{
	"description": "net: fix accept/connect deadline handling\nEnsure that accept/connect respect deadline,\neven if the operation can be executed w/o blocking.\nNote this changes external behavior, but it makes\nit consistent with read/write.\nFactor out deadline check into pollServer.PrepareRead/Write,\nin preparation for edge triggered pollServer.\nEnsure that pollServer.WaitRead/Write are not called concurrently\nby adding rio/wio locks around connect/accept.",
	"cc": [
		"golang-dev@googlegroups.com",
		"mikioh.mikioh@gmail.com",
		"bradfitz@golang.org",
		"iant@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Mar 1, 2013 at 2:54 PM, Mikio Hara <mikioh.mikioh@gmail.com> wrote:\r\n\r\n> On Fri, Mar 1, 2013 at 8:58 PM,  <dvyukov@google.com> wrote:\r\n>\r\n> > Is it fine?\r\n>\r\n> I think it's okay.\r\n>\r\n> > It somewhat limits parallelism. As far as I know, must uses\r\n> > in std lib call accept() from a single goroutine, so it's not a problem,\r\n> > but there can be other use cases.\r\n>\r\n> like this?\r\n>\r\n> func worker(fd, ...) {\r\n>   // monitor active sessions, control backlogs\r\n>   nfd, err := fd.Accept()\r\n>   go worker(fd, ...)\r\n>   n, err := nfd.Read()\r\n>   :\r\n> }\r\n>\r\n\r\nThis should be find. I mean when several goroutines concurrently call\r\naccept().\r\n",
			"disapproval": false,
			"date": "2013-03-01 14:34:06.793330",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/02 06:19:56, dvyukov wrote:\n> Hello mailto:golang-dev@googlegroups.com, mailto:mikioh.mikioh@gmail.com (cc:\n> mailto:golang-dev@googlegroups.com),\n> \n> Please take another look.\n\nBrad, can you take a look at it?",
			"disapproval": false,
			"date": "2013-03-02 08:16:33.735570",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7436048/diff/8001/src/pkg/net/fd_unix.go\nFile src/pkg/net/fd_unix.go (right):\n\nhttps://codereview.appspot.com/7436048/diff/8001/src/pkg/net/fd_unix.go#newcode355\nsrc/pkg/net/fd_unix.go:355: return err\nOn 2013/03/01 11:13:09, mikio wrote:\n> &OpError{\"connect\", http://fd.net, fd.raddr, err}\n> or will fix later in issue 4856?\n\nI am just making it consistent with the code below. It calls WaitWrite() and returns the err directly. It may be wrapper somewhere above, I don't know.\n\nhttps://codereview.appspot.com/7436048/diff/8001/src/pkg/net/fd_unix.go#newcode452\nsrc/pkg/net/fd_unix.go:452: return 0, &OpError{\"read\", fd.net, fd.raddr, err}\nOn 2013/03/01 11:13:09, mikio wrote:\n> fd.laddr?\n\nDone.\n\nhttps://codereview.appspot.com/7436048/diff/8001/src/pkg/net/fd_unix.go#newcode468\nsrc/pkg/net/fd_unix.go:468: err = &OpError{\"read\", fd.net, fd.raddr, err}\nOn 2013/03/01 11:13:09, mikio wrote:\n> fd.laddr?\n\nDone.\nIt was another bug, right?",
			"disapproval": false,
			"date": "2013-03-01 11:55:44.858990",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Done.\r\n> It was another bug, right?\r\n\r\nlight. sorry, right.\r\n",
			"disapproval": false,
			"date": "2013-03-01 12:09:54.976060",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-03-01 08:49:59.151910",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7436048/diff/8001/src/pkg/net/fd_unix.go\nFile src/pkg/net/fd_unix.go (right):\n\nhttps://codereview.appspot.com/7436048/diff/8001/src/pkg/net/fd_unix.go#newcode355\nsrc/pkg/net/fd_unix.go:355: return err\n&OpError{\"connect\", fd.net, fd.raddr, err}\nor will fix later in issue 4856?\n\nhttps://codereview.appspot.com/7436048/diff/8001/src/pkg/net/fd_unix.go#newcode452\nsrc/pkg/net/fd_unix.go:452: return 0, &OpError{\"read\", fd.net, fd.raddr, err}\nfd.laddr?\n\nhttps://codereview.appspot.com/7436048/diff/8001/src/pkg/net/fd_unix.go#newcode468\nsrc/pkg/net/fd_unix.go:468: err = &OpError{\"read\", fd.net, fd.raddr, err}\nfd.laddr?",
			"disapproval": false,
			"date": "2013-03-01 11:13:09.910120",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nIs it the right thing to check deadline before connect/accept?",
			"disapproval": false,
			"date": "2013-03-01 11:56:16.844970",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, mikioh.mikioh@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-02 06:19:56.119300",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7436048/diff/13001/src/pkg/net/fd_unix.go\nFile src/pkg/net/fd_unix.go (right):\n\nhttps://codereview.appspot.com/7436048/diff/13001/src/pkg/net/fd_unix.go#newcode634\nsrc/pkg/net/fd_unix.go:634: defer fd.rio.Unlock()\nIs it fine? It somewhat limits parallelism. As far as I know, must uses in std lib call accept() from a single goroutine, so it's not a problem, but there can be other use cases.",
			"disapproval": false,
			"date": "2013-03-01 11:58:04.980820",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Mar 1, 2013 at 8:58 PM,  <dvyukov@google.com> wrote:\r\n\r\n> Is it fine?\r\n\r\nI think it's okay.\r\n\r\n> It somewhat limits parallelism. As far as I know, must uses\r\n> in std lib call accept() from a single goroutine, so it's not a problem,\r\n> but there can be other use cases.\r\n\r\nlike this?\r\n\r\nfunc worker(fd, ...) {\r\n  // monitor active sessions, control backlogs\r\n  nfd, err := fd.Accept()\r\n  go worker(fd, ...)\r\n  n, err := nfd.Read()\r\n  :\r\n}\r\n",
			"disapproval": false,
			"date": "2013-03-01 12:54:47.786060",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-03-02 08:30:02.117480",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but others may have opinions\n\nhttps://codereview.appspot.com/7436048/diff/19001/src/pkg/net/fd_unix.go\nFile src/pkg/net/fd_unix.go (right):\n\nhttps://codereview.appspot.com/7436048/diff/19001/src/pkg/net/fd_unix.go#newcode237\nsrc/pkg/net/fd_unix.go:237: func (s *pollServer) PrepareRead(fd *netFD) error {\n\"Prepare\" makes it sound like more is happening. It's more like \"ShouldRead\" or \"CanRead\" or \"ReadOkay\".\n\nhttps://codereview.appspot.com/7436048/diff/19001/src/pkg/net/fd_unix.go#newcode350\nsrc/pkg/net/fd_unix.go:350: if err := fd.pollServer.PrepareWrite(fd); err != nil {\ncan/should this be done before the wio.Lock?",
			"disapproval": false,
			"date": "2013-03-04 17:31:06.008320",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7436048/diff/19001/src/pkg/net/fd_unix.go\nFile src/pkg/net/fd_unix.go (right):\n\nhttps://codereview.appspot.com/7436048/diff/19001/src/pkg/net/fd_unix.go#newcode237\nsrc/pkg/net/fd_unix.go:237: func (s *pollServer) PrepareRead(fd *netFD) error {\nOn 2013/03/04 17:31:06, bradfitz wrote:\n> \"Prepare\" makes it sound like more is happening. It's more like \"ShouldRead\" or\n> \"CanRead\" or \"ReadOkay\".\n\nEdge-triggered poll server will reset any pending notifications in this function if any. So it will be more than \"ShouldRead\".\n\nhttps://codereview.appspot.com/7436048/diff/19001/src/pkg/net/fd_unix.go#newcode350\nsrc/pkg/net/fd_unix.go:350: if err := fd.pollServer.PrepareWrite(fd); err != nil {\nOn 2013/03/04 17:31:06, bradfitz wrote:\n> can/should this be done before the wio.Lock?\n\nI think it will be able to lead to deadlocks for edge triggered poll server if done outside of lock (in case connect is called concurrently from several goroutines).",
			"disapproval": false,
			"date": "2013-03-04 20:49:40.899670",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/04 17:31:06, bradfitz wrote:\n> LGTM but others may have opinions\n\nWaiting for others for 1 more day",
			"disapproval": false,
			"date": "2013-03-05 08:17:37.585560",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Mar 5, 2013 at 10:23 PM, Mikio Hara <mikioh.mikioh@gmail.com> wrote:\r\n> On Wed, Mar 6, 2013 at 2:13 AM,  <iant@golang.org> wrote:\r\n>\r\n>> Readmsg can be called on a connected socket.  But it often is not.\r\n>> Returning laddr there seems appropriate as it most directly indicates\r\n>> the failing socket.  But Read is always called on a connected socket,\r\n>> and the local address is almost always irrelevant.  The remote address\r\n>> is the one of interest.\r\n\r\n\r\nPerhaps we need to file a separate issue.  I don't want to change\r\nanything here in this CL, since it's so controversial.\r\n\r\n\r\n> We allow both IPConn and UnixConn to use Read method.\r\n> UnixConn supports unnamed sockets and I'm not expecting\r\n> IPConn to return meaningful its remote address.\r\n",
			"disapproval": false,
			"date": "2013-03-05 21:05:35.408950",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7436048/diff/19001/src/pkg/net/fd_unix.go\nFile src/pkg/net/fd_unix.go (right):\n\nhttps://codereview.appspot.com/7436048/diff/19001/src/pkg/net/fd_unix.go#newcode448\nsrc/pkg/net/fd_unix.go:448: return 0, &OpError{\"read\", fd.net, fd.laddr, err}\nWhy do you return an OpError here but not for the similar case in connect?  Seems like connect could return an OpError as well.\n\nhttps://codereview.appspot.com/7436048/diff/19001/src/pkg/net/fd_unix.go#newcode464\nsrc/pkg/net/fd_unix.go:464: err = &OpError{\"read\", fd.net, fd.laddr, err}\nWhy change to use laddr here?  It seems more useful to use raddr for a read from a connected socket.",
			"disapproval": false,
			"date": "2013-03-05 14:25:56.931940",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Mar 5, 2013 at 1:05 PM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n> On Tue, Mar 5, 2013 at 10:23 PM, Mikio Hara <mikioh.mikioh@gmail.com> wrote:\r\n>> On Wed, Mar 6, 2013 at 2:13 AM,  <iant@golang.org> wrote:\r\n>>\r\n>>> Readmsg can be called on a connected socket.  But it often is not.\r\n>>> Returning laddr there seems appropriate as it most directly indicates\r\n>>> the failing socket.  But Read is always called on a connected socket,\r\n>>> and the local address is almost always irrelevant.  The remote address\r\n>>> is the one of interest.\r\n>\r\n>\r\n> Perhaps we need to file a separate issue.  I don't want to change\r\n> anything here in this CL, since it's so controversial.\r\n\r\nBut, but, I only started commenting because you changed raddr to\r\nladdr.  If you omit that change from this CL I'll be fine with this.\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2013-03-05 21:35:40.804770",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7436048/diff/19001/src/pkg/net/fd_unix.go\nFile src/pkg/net/fd_unix.go (right):\n\nhttps://codereview.appspot.com/7436048/diff/19001/src/pkg/net/fd_unix.go#newcode448\nsrc/pkg/net/fd_unix.go:448: return 0, &OpError{\"read\", fd.net, fd.laddr, err}\nOn 2013/03/05 14:25:57, iant wrote:\n> Why do you return an OpError here but not for the similar case in connect?\n> Seems like connect could return an OpError as well.\n\nHere I return OpError, because OpError is currently returned here.\n\nIn connect I return raw error, because connect currently returns raw error (e.g. directly returns err from WaitWrite()).\n\nI just tried to make conservative changes in this aspect. I've filed https://code.google.com/p/go/issues/detail?id=4856 to make the error values consistent.\n\nhttps://codereview.appspot.com/7436048/diff/19001/src/pkg/net/fd_unix.go#newcode464\nsrc/pkg/net/fd_unix.go:464: err = &OpError{\"read\", fd.net, fd.laddr, err}\nOn 2013/03/05 14:25:57, iant wrote:\n> Why change to use laddr here?  It seems more useful to use raddr for a read from\n> a connected socket.\n\nWhy do we return laddr from ReadFrom/ReadMsg? ReadMsg can be called on connected socket as well. And user passes explicit sa to ReadFrom/ReadMsg, should we print them?\n\nI am changing this back to raddr. Does everybody agree? PTAL.",
			"disapproval": false,
			"date": "2013-03-05 15:17:52.720560",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7436048/diff/19001/src/pkg/net/fd_unix.go\nFile src/pkg/net/fd_unix.go (right):\n\nhttps://codereview.appspot.com/7436048/diff/19001/src/pkg/net/fd_unix.go#newcode464\nsrc/pkg/net/fd_unix.go:464: err = &OpError{\"read\", fd.net, fd.laddr, err}\nOn 2013/03/05 15:17:52, dvyukov wrote:\n> On 2013/03/05 14:25:57, iant wrote:\n> > Why change to use laddr here?  It seems more useful to use raddr for a read\n> from\n> > a connected socket.\n> \n> Why do we return laddr from ReadFrom/ReadMsg? ReadMsg can be called on connected\n> socket as well. And user passes explicit sa to ReadFrom/ReadMsg, should we print\n> them?\n> \n> I am changing this back to raddr. Does everybody agree? PTAL.\n\nReadmsg can be called on a connected socket.  But it often is not.  Returning laddr there seems appropriate as it most directly indicates the failing socket.  But Read is always called on a connected socket, and the local address is almost always irrelevant.  The remote address is the one of interest.",
			"disapproval": false,
			"date": "2013-03-05 17:13:05.192270",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Mar 6, 2013 at 2:13 AM,  <iant@golang.org> wrote:\r\n\r\n> Readmsg can be called on a connected socket.  But it often is not.\r\n> Returning laddr there seems appropriate as it most directly indicates\r\n> the failing socket.  But Read is always called on a connected socket,\r\n> and the local address is almost always irrelevant.  The remote address\r\n> is the one of interest.\r\n\r\nWe allow both IPConn and UnixConn to use Read method.\r\nUnixConn supports unnamed sockets and I'm not expecting\r\nIPConn to return meaningful its remote address.\r\n",
			"disapproval": false,
			"date": "2013-03-05 20:23:59.482850",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I've already changed it back.\r\n\r\n\r\nOn Tue, Mar 5, 2013 at 11:35 PM, Ian Lance Taylor <iant@golang.org> wrote:\r\n> On Tue, Mar 5, 2013 at 1:05 PM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n>> On Tue, Mar 5, 2013 at 10:23 PM, Mikio Hara <mikioh.mikioh@gmail.com> wrote:\r\n>>> On Wed, Mar 6, 2013 at 2:13 AM,  <iant@golang.org> wrote:\r\n>>>\r\n>>>> Readmsg can be called on a connected socket.  But it often is not.\r\n>>>> Returning laddr there seems appropriate as it most directly indicates\r\n>>>> the failing socket.  But Read is always called on a connected socket,\r\n>>>> and the local address is almost always irrelevant.  The remote address\r\n>>>> is the one of interest.\r\n>>\r\n>>\r\n>> Perhaps we need to file a separate issue.  I don't want to change\r\n>> anything here in this CL, since it's so controversial.\r\n>\r\n> But, but, I only started commenting because you changed raddr to\r\n> laddr.  If you omit that change from this CL I'll be fine with this.\r\n>\r\n> Ian\r\n",
			"disapproval": false,
			"date": "2013-03-05 21:41:37.865230",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\n> I've already changed it back.\r\n\r\n>>> Perhaps we need to file a separate issue.  I don't want to change\r\n>>> anything here in this CL, since it's so controversial.\r\n\r\nSGTM\r\n",
			"disapproval": false,
			"date": "2013-03-05 22:56:25.998870",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=790eddf30d5d ***\n\nnet: fix accept/connect deadline handling\nEnsure that accept/connect respect deadline,\neven if the operation can be executed w/o blocking.\nNote this changes external behavior, but it makes\nit consistent with read/write.\nFactor out deadline check into pollServer.PrepareRead/Write,\nin preparation for edge triggered pollServer.\nEnsure that pollServer.WaitRead/Write are not called concurrently\nby adding rio/wio locks around connect/accept.\n\nR=golang-dev, mikioh.mikioh, bradfitz, iant\nCC=golang-dev\nhttps://codereview.appspot.com/7436048",
			"disapproval": false,
			"date": "2013-03-07 13:04:04.159750",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 7436048: net: fix accept/connect deadline handling",
	"created": "2013-03-01 08:05:07.935140",
	"patchsets": [
		1,
		2001,
		3,
		5001,
		8001,
		13001,
		19001,
		27001,
		37001,
		40001,
		43001
	],
	"modified": "2013-03-07 13:22:08.817770",
	"closed": true,
	"issue": 7436048
}