{
	"description": "ld: add .gcdata and .gcbss sections",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rsc@golang.org",
		"dave@cheney.net",
		"minux.ma@gmail.com"
	],
	"messages": [
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-06-04 12:39:18.901025",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jun 11, 2012 at 8:33 AM, \u269b <0xe2.0x9a.0x9b@gmail.com> wrote:\r\n> I would like to know about the progress of this codereview. Thanks.\r\n\r\nI haven't forgotten about it. I just have other work pending too (much\r\nof which is not visible on the mailing list) and I haven't had time to\r\nfinish this review yet. Thanks for your patience.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-11 12:41:10.689923",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-18 14:04:11.971988",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This looks good but it needs to stand alone before I can submit it.\n\ncmd/6l\n/Users/rsc/g/go/src/cmd/6l/../ld/data.c:37:36: error: ../../pkg/runtime/mgc0.h: No such file or directory\n/Users/rsc/g/go/src/cmd/6l/../ld/data.c: In function 'gcaddsym':\n/Users/rsc/g/go/src/cmd/6l/../ld/data.c:873: error: 'GC_CALL' undeclared (first use in this function)\n/Users/rsc/g/go/src/cmd/6l/../ld/data.c:873: error: (Each undeclared identifier is reported only once\n/Users/rsc/g/go/src/cmd/6l/../ld/data.c:873: error: for each function it appears in.)\n/Users/rsc/g/go/src/cmd/6l/../ld/data.c:879: error: 'GC_APTR' undeclared (first use in this function)\n/Users/rsc/g/go/src/cmd/6l/../ld/data.c: In function 'dodata':\n/Users/rsc/g/go/src/cmd/6l/../ld/data.c:1005: error: 'GC_END' undeclared (first use in this function)\ngo tool dist: FAILED: gcc -Wall -Wno-sign-compare -Wno-missing-braces -Wno-parentheses -Wno-unknown-pragmas -Wno-switch -Wno-comment -Werror -fno-common -ggdb -O2 -c -m64 -I /Users/rsc/g/go/include -I /Users/rsc/g/go/src/cmd/6l -o /Users/rsc/g/go/pkg/obj/cmd/6l/data.o /Users/rsc/g/go/src/cmd/6l/../ld/data.c\n\nhttp://codereview.appspot.com/6281048/diff/4001/src/cmd/ld/data.c\nFile src/cmd/ld/data.c (right):\n\nhttp://codereview.appspot.com/6281048/diff/4001/src/cmd/ld/data.c#newcode847\nsrc/cmd/ld/data.c:847: int32 t = alignsymsize(s->size);\nPlease declare variables at top of function.\n\nhttp://codereview.appspot.com/6281048/diff/4001/src/cmd/ld/data.c#newcode870\nsrc/cmd/ld/data.c:870: Sym *gotype = s->gotype;\nPlease declare variables at top of function.",
			"disapproval": false,
			"date": "2012-08-05 21:39:28.664810",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-12 17:48:12.224000",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6281048/diff/4001/src/cmd/ld/data.c\nFile src/cmd/ld/data.c (right):\n\nhttps://codereview.appspot.com/6281048/diff/4001/src/cmd/ld/data.c#newcode847\nsrc/cmd/ld/data.c:847: int32 t = alignsymsize(s->size);\nOn 2012/08/05 21:39:28, rsc wrote:\n> Please declare variables at top of function.\n\nDone.\n\nhttps://codereview.appspot.com/6281048/diff/4001/src/cmd/ld/data.c#newcode870\nsrc/cmd/ld/data.c:870: Sym *gotype = s->gotype;\nOn 2012/08/05 21:39:28, rsc wrote:\n> Please declare variables at top of function.\n\nDone.",
			"disapproval": false,
			"date": "2012-09-12 17:48:36.010870",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks!\r\n",
			"disapproval": false,
			"date": "2012-09-17 20:44:14.016190",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I can reproduce the problem on ubuntu 12.04.1, gcc 4.6.3, ld 2.22. This is\r\nan amd64 host cross compiling with GOARCH=386.\r\n\r\nOn Fri, Sep 14, 2012 at 9:19 PM, <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n\r\n> On 2012/09/14 03:08:47, rsc wrote:\r\n>\r\n>> Any guesses about the 386 build breakages?\r\n>> I can't reproduce the darwin one locally. I suspect ld/decodesym.c is\r\n>>\r\n> not quite\r\n>\r\n>> right for 32-bit (I don't think dwarf gets used for windows or arm)\r\n>>\r\n> but I cannot\r\n>\r\n>> reproduce it, nor can I see the problem.\r\n>>\r\n>\r\n> I am unable to reproduce the issue on my linux/386 machine.\r\n>\r\n> https://codereview.appspot.**com/6281048/<https://codereview.appspot.com/6281048/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-09-14 11:58:58.139070",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-09-13 18:49:10.078060",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=910a3f16c063 ***\n\nld: add .gcdata and .gcbss sections\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6281048\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2012-09-13 19:59:37.444310",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Any guesses about the 386 build breakages?\nI can't reproduce the darwin one locally. I suspect ld/decodesym.c is not quite right for 32-bit (I don't think dwarf gets used for windows or arm) but I cannot reproduce it, nor can I see the problem.\n\nIt is possible that the StructType and its fields are not always contiguous in memory, and that decodetype_structfieldname and decodetype_structfieldtype need to load the pointer from the slice header and then walk from there.",
			"disapproval": false,
			"date": "2012-09-14 03:08:47.619220",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/14 03:08:47, rsc wrote:\n> Any guesses about the 386 build breakages?\n> I can't reproduce the darwin one locally. I suspect ld/decodesym.c is not quite\n> right for 32-bit (I don't think dwarf gets used for windows or arm) but I cannot\n> reproduce it, nor can I see the problem.\n\nI am unable to reproduce the issue on my linux/386 machine.",
			"disapproval": false,
			"date": "2012-09-14 11:19:22.867870",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Aha.\r\n\r\nUsually when I build for 386 on my 64-bit machine I use GOARCH=386\r\nGOHOSTARCH=386. But if you only do GOARCH=386 (GOHOSTARCH=amd64 by\r\ndefault) then you get the failure.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-09-14 12:20:27.701470",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/14 12:20:27, rsc wrote:\n> Aha.\n> \n> Usually when I build for 386 on my 64-bit machine I use GOARCH=386\n> GOHOSTARCH=386. But if you only do GOARCH=386 (GOHOSTARCH=amd64 by\n> default) then you get the failure.\n> \n> Russ\n\nFix: https://codereview.appspot.com/6493123/",
			"disapproval": false,
			"date": "2012-09-15 08:06:25.216430",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I believe this is how the builders build, ie, they do not set GOHOST*\r\n\r\nOn Fri, Sep 14, 2012 at 10:20 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> Aha.\r\n>\r\n> Usually when I build for 386 on my 64-bit machine I use GOARCH=386\r\n> GOHOSTARCH=386. But if you only do GOARCH=386 (GOHOSTARCH=amd64 by\r\n> default) then you get the failure.\r\n>\r\n> Russ\r\n>\r\n",
			"disapproval": false,
			"date": "2012-09-14 13:01:38.396560",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi,\r\n\r\nWith this change, Linux/arm binaries are much bigger (size doubled at\r\nleast).\r\nFor example, .gcbss section of go_bootstrap alone is 8MiB.\r\nIs this expected?\r\n\r\nFYI, you can just do this on linux to verify the problem without an arm\r\nmachine:\r\nGOARCH=arm GOHOSTARCH=arm ./make.bash\r\nignore the build error and look at the size of go_bootstrap.\r\n",
			"disapproval": false,
			"date": "2012-09-20 17:33:44.844020",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/21 05:39:05, minux wrote:\n> BTW, 8 MiB of GC data for a ~4MiB struct seems not very memory\n> efficient. Is this expected?\n\nOne reason why the GC data consumed so much space is that all integers (even small ones) need to be aligned to a word boundary because of performance reasons.\n\nIt is possible that the encoding can be made more space efficient. I am now trying to split CL 6114046 into smaller parts and send those parts for inclusion in Go. I have decided not to attempt any further optimizations until the whole CL 6114046 is submitted. My 4 month old comment in https://codereview.appspot.com/6114046/#msg16 says that \"There will be no changes to this patch set, ...\" - I am strictly holding to this rule even if it partially seems irrational to do so.",
			"disapproval": false,
			"date": "2012-09-21 06:19:35.098390",
			"approval": false
		},
		{
			"sender": "0xe2.0x9a.0x9b@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Sep 20, 2012 at 7:33 PM, minux <minux.ma@gmail.com> wrote:\r\n> Hi,\r\n>\r\n> With this change, Linux/arm binaries are much bigger (size doubled at\r\n> least).\r\n> For example, .gcbss section of go_bootstrap alone is 8MiB.\r\n> Is this expected?\r\n>\r\n> FYI, you can just do this on linux to verify the problem without an arm\r\n> machine:\r\n> GOARCH=arm GOHOSTARCH=arm ./make.bash\r\n> ignore the build error and look at the size of go_bootstrap.\r\n\r\nThe cause of the problem is that .bss section on ARM is substantially\r\nlarger than .bss on 386 (see the two attached files). Most of the data\r\nin ARM's .bss section should be in .noptrbss section, like on 386.\r\n",
			"disapproval": false,
			"date": "2012-09-20 18:20:44.189610",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Friday, September 21, 2012, \u269b <0xe2.0x9a.0x9b@gmail.com> wrote:\r\n>\r\n> The cause of the problem is that .bss section on ARM is substantially\r\n> larger than .bss on 386 (see the two attached files). Most of the data\r\n> in ARM's .bss section should be in .noptrbss section, like on 386.\r\n>\r\nYeah, somehow runtime.mheap is placed in .bss instead of .noptrbss,\r\ncould be a regression. I will investigate it.\r\n\r\nBTW, 8 MiB of GC data for a ~4MiB struct seems not very memory\r\nefficient. Is this expected?\r\n",
			"disapproval": false,
			"date": "2012-09-21 05:39:05.132560",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Sep 21, 2012 at 2:19 PM, <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n\r\n> On 2012/09/21 05:39:05, minux wrote:\r\n>\r\n>> BTW, 8 MiB of GC data for a ~4MiB struct seems not very memory\r\n>> efficient. Is this expected?\r\n>\r\n> One reason why the GC data consumed so much space is that all integers\r\n> (even small ones) need to be aligned to a word boundary because of\r\n> performance reasons.\r\n>\r\ni see.\r\n\r\n>\r\n> It is possible that the encoding can be made more space efficient.\r\n\r\nhope you have plan for this :)\r\nbecause i have a project where memory is a very scarce resource so\r\ni'd really like to use your precise GC enhancements.\r\n\r\nthank you for your wonderful work.\r\n",
			"disapproval": false,
			"date": "2012-09-21 07:15:55.985420",
			"approval": false
		}
	],
	"owner_email": "0xE2.0x9A.0x9B@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "atom",
	"subject": "code review 6281048: ld: add .gcdata and .gcbss sections",
	"created": "2012-06-04 12:39:03.006042",
	"patchsets": [
		1,
		4001,
		11001
	],
	"modified": "2012-09-21 06:19:35.370180",
	"closed": true,
	"issue": 6281048
}