{
	"description": "    encoding/json: Adding json.NumberConverter for custom number conversion.\n\nThe default behavior of the JSON library is to convert numbers to float64\nwhen the decode target is of type interface{}. This makes it difficult to\nhave any control over the handling of JSON numbers in some cases.\n\nOne such example would be a JSON-based interchange format in which the\ncaller has no knowledge of the structure of documents yet still wants to\nstore/forward documents in a lossless but efficient way, perhaps passing the\nnumber literals through unchanged, or decoding them differently based on\nwhether they are floating point or integral.\n\nSome discussion around this issue exists. In this thread:\n\n    https://groups.google.com/d/msg/golang-nuts/oXbGCPh1e0Y/3j9tB6Eka8oJ\n\nRuss points out that the JSON spec nor the JavaScript language don't\ndistinguish between \"3\" and \"3.0\", which is of course valid. That being\nsaid, not all applications working with JSON are destined to have anything\nto do with JavaScript, and having a way to opt-in to a different\ninterpretation than that dictated by JavaScript implementations seems\nreasonable. His response indicated a suggested fix but no implementation\nplan. Hopefully the implementation of NumberConverter in this change allows\nfor a similar, though slightly lower-level, approach to the same end result\n(nor does it preclude his suggested fix at a later time).\n\nIn this discussion:\n\n    https://groups.google.com/d/msg/golang-nuts/HGuVS-DJVh4/L_Wnat9R57AJ\n\nRuss also suggests another way to get access to handling of JSON number\nliterals, which is to tap in to (and presumably expose somehow)\nscanner.step. This isn't something I'd feel comfortable tinkering around\nwith myself, though I'm aware that it might also suffice (though would also\nrequire me to take over control of the rest of the document parse, I\nbelieve).\n\nI hope that this can find its way in to the codebase, and appreciate your\ntime.",
	"cc": [
		"rsc@golang.org",
		"iant@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "jgold.bg@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for checking back in. I'm happy with either, and am happy to modify my\r\napproach to use json.Number in combination with the user calling\r\nDecoder.UseNumber().\r\n\r\nLet me know and I'm happy to push this forward.\r\n\r\njonathan\r\n",
			"disapproval": false,
			"date": "2012-05-15 16:30:42.582612",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Introducing number, as I suggested in 2010, was probably the best\r\nanswer, but it never happened, and now Go 1 has fixed the current\r\nbehavior.  We could plausibly introduce NumberConverter without\r\nbreaking Go 1 compatibility, but it's kind of ugly as an API goes.\r\n\r\nI think it might work better to introduce Number, but not used by\r\ndefault, and then have UseNumber be the method instead of having\r\narbitrary converters.  I'd like to think about this a little more.  I\r\ncreated issue 3625 to track this.\r\n\r\nThanks.\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-15 15:07:18.261453",
			"approval": false
		},
		{
			"sender": "jgold.bg@gmail.com",
			"recipients": [
				"jgold.bg@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-05-11 18:08:06.876335",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Okay, let's add a type Number like in my 2010 mail and enable its use\r\ninstead of float64 as the default type using a new method UseNumber()\r\non *Decoder.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-22 02:48:06.028635",
			"approval": false
		},
		{
			"sender": "jgold.bg@gmail.com",
			"recipients": [
				"jgold.bg@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-05-23 19:03:54.393823",
			"approval": false
		},
		{
			"sender": "jgold.bg@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping\r\n\r\nOn Wed, May 23, 2012 at 07:03:54PM +0000, jgold.bg@gmail.com wrote:\r\n> Hello golang-dev@googlegroups.com, rsc@golang.org (cc:\r\n> golang-dev@googlegroups.com),\r\n> \r\n> Please take another look.\r\n> \r\n> \r\n> http://codereview.appspot.com/6202068/\r\n",
			"disapproval": false,
			"date": "2012-05-29 20:05:05.810414",
			"approval": false
		},
		{
			"sender": "jgold.bg@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ping?\r\n\r\nSorry if I'm being pesky or too pushy -- I'm new to the team's time frames \r\nand code review process/tools, so please let me know if I'm not \r\nparticipating correctly.\r\n\r\njonathan\r\n\r\nOn Tuesday, May 29, 2012 8:57:19 PM UTC-7, Jonathan Gold wrote:\r\n>\r\n> On Tue, May 29, 2012 at 09:19:24PM +0000, rsc@golang.org wrote: \r\n> > Thanks for working on this. The one-sentence summary of my comments \r\n>\r\n> Thanks for taking the time to help me with it! \r\n>\r\n> I've made the changes you set out and updated with the new patch set. Two \r\n> things I thought were worth pointing out more specifically are inline \r\n> below. \r\n>\r\n> > \r\n> > \r\n> http://codereview.appspot.com/6202068/diff/8001/src/pkg/encoding/json/decode.go#newcode42 \r\n> > src/pkg/encoding/json/decode.go:42: //        float64, for JSON numbers \r\n> > add after this line: \r\n> > // Number, for JSON numbers, if UseNumber has been called \r\n>\r\n> I ended up not putting this in, because there's actually no way that a \r\n> caller \r\n> can tell Unmarshal to UseNumber, since that requires access to \r\n> decodeState. Am I \r\n> not understanding what you'd like? \r\n>\r\n> > \r\n> > \r\n> http://codereview.appspot.com/6202068/diff/8001/src/pkg/encoding/json/decode_test.go#newcode196 \r\n> > src/pkg/encoding/json/decode_test.go:196: func assertNumParsePanic(f \r\n> > func(), errExpct string, t *testing.T) { \r\n> > http://golang.org/doc/go_faq.html#assertions \r\n> > \r\n> > \r\n> http://codereview.appspot.com/6202068/diff/8001/src/pkg/encoding/json/decode_test.go#newcode211 \r\n> > src/pkg/encoding/json/decode_test.go:211: // Independent of Decode, \r\n> > basic coverage of the accessors in Number \r\n> > A more idiomatic way to write this test would be to use a table: \r\n> > \r\n> [SNIPPED] \r\n> > \r\n> > Then when the test fails you get much more information about the state \r\n> > of the code.  It also makes adding a new test case a simple matter of \r\n> > writing a line in the data table instead of copying and pasting however \r\n> > many lines of code \r\n>\r\n> I've adopted the table approach for the most part, based on your comments. \r\n>  I'm \r\n> not sure I'm understanding how to test the failures from Number.Int64() \r\n> and \r\n> Number.Float64() better than I have though, and I apologize for any \r\n> aggravation. \r\n>\r\n> The thing that makes it tough is that the design of Number is such that \r\n> Int64() \r\n> and Float64() do not return errors, which I think makes sense since we \r\n> assume \r\n> that bad numbers will never make it past the JSON parser in the first \r\n> place. \r\n> But, strconv returns errors, and I feel like it's better to panic if we \r\n> actually \r\n> get one, and I just want code coverage of that codepath. I'm finding it \r\n> hard to \r\n> concisely test panics in a table loop though without calling a specialized \r\n> method (with its own defer() for making the checks), which is why you'll \r\n> see \r\n> what you see. \r\n>\r\n> Thanks again for your help, and my apologies if I'm just not seeing \r\n> something \r\n> obvious. \r\n>\r\n",
			"disapproval": false,
			"date": "2012-06-01 15:47:04.773312",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"jgold.bg@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for working on this. The one-sentence summary of my comments would be \"write less\". If you choose your words and your code carefully, then you can make the documentation easier for users to skim and the code (especially the tests) easier to read and maintain. Concrete suggestions below.\n\nNote that Marshal needs to know how to marshal Numbers too, so encode.go's case reflect.String should check for numberType too, like the comment below adds a check for numberType in the unmarshaler.\n\nYou should probably wait until CL 6258061 has been submitted before revising the tests, to avoid merge conflicts.\n\nhttp://codereview.appspot.com/6202068/diff/8001/src/pkg/encoding/json/decode.go\nFile src/pkg/encoding/json/decode.go (right):\n\nhttp://codereview.appspot.com/6202068/diff/8001/src/pkg/encoding/json/decode.go#newcode42\nsrc/pkg/encoding/json/decode.go:42: //\tfloat64, for JSON numbers\nadd after this line:\n// Number, for JSON numbers, if UseNumber has been called\n\nhttp://codereview.appspot.com/6202068/diff/8001/src/pkg/encoding/json/decode.go#newcode140\nsrc/pkg/encoding/json/decode.go:140: // Holder for an uninterpreted JSON number. By default, this library decodes\nSee http://golang.org/doc/effective_go.html#commentary\n\n// A Number represents a JSON number literal.\ntype Number string\n\nshould be fine.  The rest of the details are more concerned with methods or marshalling or unmarshalling.\n\n// String returns the literal text of the number.\nfunc (n Number) String() string { return string(n) }\n\n// Float64 returns the number as a float64.\nfunc (n Number) Float64() (float64, error)\n\n// Int64 returns the number as an int64.\nfunc (n Number) Int64() (int64, error)\n\nhttp://codereview.appspot.com/6202068/diff/8001/src/pkg/encoding/json/decode.go#newcode631\nsrc/pkg/encoding/json/decode.go:631: // Util method for invoking either d's custom NumberConverter or the default\n// convertNumber converts the number literal s to a float64 or a Number\n// depending on the setting of d.useNumber.\n\nhttp://codereview.appspot.com/6202068/diff/8001/src/pkg/encoding/json/decode.go#newcode636\nsrc/pkg/encoding/json/decode.go:636: return strconv.ParseFloat(s, 64)\nThe call sites will be simplified if you make the UnmarshalTypeError here.\n\nf, err := strconv.ParseFloat(s, 64)\nif err != nil {\n    return nil, &UnmarshalTypeError{\"number \" + s, reflect.TypeOf(0.0)}\n}\nreturn f, nil\n\nhttp://codereview.appspot.com/6202068/diff/8001/src/pkg/encoding/json/decode.go#newcode727\nsrc/pkg/encoding/json/decode.go:727: if fromQuoted {\nAdd at top level:\n\nvar numberType = reflect.TypeOf(Number(\"\"))\n\nAdd here, before this line:\n\nif v.Kind() == reflect.String && v.Type() == numberType {\n    v.SetString(s)\n    break\n}\n\nhttp://codereview.appspot.com/6202068/diff/8001/src/pkg/encoding/json/decode.go#newcode735\nsrc/pkg/encoding/json/decode.go:735: errType := v.Type()\nWith above rewrite, shortens to\n\nd.saveError(err)\nbreak\n\nhttp://codereview.appspot.com/6202068/diff/8001/src/pkg/encoding/json/decode.go#newcode895\nsrc/pkg/encoding/json/decode.go:895: var errType reflect.Type\nSame.\n\nhttp://codereview.appspot.com/6202068/diff/8001/src/pkg/encoding/json/decode_test.go\nFile src/pkg/encoding/json/decode_test.go (right):\n\nhttp://codereview.appspot.com/6202068/diff/8001/src/pkg/encoding/json/decode_test.go#newcode196\nsrc/pkg/encoding/json/decode_test.go:196: func assertNumParsePanic(f func(), errExpct string, t *testing.T) {\nhttp://golang.org/doc/go_faq.html#assertions\n\nhttp://codereview.appspot.com/6202068/diff/8001/src/pkg/encoding/json/decode_test.go#newcode211\nsrc/pkg/encoding/json/decode_test.go:211: // Independent of Decode, basic coverage of the accessors in Number\nA more idiomatic way to write this test would be to use a table:\n\nconst convError = -42  // otherwise unused value\n\nvar numberTests = []struct{\n    in string\n    f float64\n    i int64\n}{\n    {\"12\", 12, 12},\n    {\"1.2e1\", 12, 12},\n    {\"1.23e1\", 12.3, convError},\n    ...\n}\n\nThen the test iterates over the table.  When a failure happens it can print a good message instead of dying in an assert:\n\nfunc TestNumber(t *testing.T) {\n    for _, tt := range numberTests {\n        n := Number(tt.in)\n\n        if n.String() != tt.in {\n            t.Errorf(\"Number(%q).String() = %q, want %q\", tt.in, n.String(), tt.in)\n        }\n\n        f, err := n.Float64()\n        if tt.f == convError {\n            if err == nil {\n                t.Errorf(\"Number(%q).Float64() = %v, nil, want error\", f)\n            }\n        } else {\n            if f != tt.f || err != nil {\n                t.Errorf(\"Number(%q).Float64() = %v, %v, want %v, nil\", f, err, tt.f)\n            }\n        }\n\n         ... same for tt.i and Int64 method\n}\n\nThen when the test fails you get much more information about the state of the code.  It also makes adding a new test case a simple matter of writing a line in the data table instead of copying and pasting however many lines of code\n\nhttp://codereview.appspot.com/6202068/diff/8001/src/pkg/encoding/json/decode_test.go#newcode241\nsrc/pkg/encoding/json/decode_test.go:241: // test struct to hold an unmarshal, providing sufficient fields for us to test\nPlease test Unmarshal by adding to the unmarshalTests table.\nI will send out a CL addings tags to the table literal so that you can add\na useNumber bool field to the unmarshalTest struct.\n\nhttp://codereview.appspot.com/6202068/diff/8001/src/pkg/encoding/json/decode_test.go#newcode279\nsrc/pkg/encoding/json/decode_test.go:279: func TestDecodeUseNumberParseFailure(t *testing.T) {\nThe unmarshalTests table can accommodate error checking too.\n\nhttp://codereview.appspot.com/6202068/diff/8001/src/pkg/encoding/json/stream.go\nFile src/pkg/encoding/json/stream.go (right):\n\nhttp://codereview.appspot.com/6202068/diff/8001/src/pkg/encoding/json/stream.go#newcode29\nsrc/pkg/encoding/json/stream.go:29: // Instructs this Decoder to convert JSON number strings to instances of Number\nhttp://golang.org/doc/effective_go.html#commentary\n\n// UseNumber causes the Decoder to unmarshal a number into an interface{} as \n// a Number instead of as a float64.",
			"disapproval": false,
			"date": "2012-05-29 21:19:23.955812",
			"approval": false
		},
		{
			"sender": "jgold.bg@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, May 29, 2012 at 09:19:24PM +0000, rsc@golang.org wrote:\r\n> Thanks for working on this. The one-sentence summary of my comments\r\n\r\nThanks for taking the time to help me with it!\r\n\r\nI've made the changes you set out and updated with the new patch set. Two\r\nthings I thought were worth pointing out more specifically are inline below.\r\n\r\n> \r\n> http://codereview.appspot.com/6202068/diff/8001/src/pkg/encoding/json/decode.go#newcode42\r\n> src/pkg/encoding/json/decode.go:42: //\tfloat64, for JSON numbers\r\n> add after this line:\r\n> // Number, for JSON numbers, if UseNumber has been called\r\n\r\nI ended up not putting this in, because there's actually no way that a caller\r\ncan tell Unmarshal to UseNumber, since that requires access to decodeState. Am I\r\nnot understanding what you'd like?\r\n\r\n> \r\n> http://codereview.appspot.com/6202068/diff/8001/src/pkg/encoding/json/decode_test.go#newcode196\r\n> src/pkg/encoding/json/decode_test.go:196: func assertNumParsePanic(f\r\n> func(), errExpct string, t *testing.T) {\r\n> http://golang.org/doc/go_faq.html#assertions\r\n> \r\n> http://codereview.appspot.com/6202068/diff/8001/src/pkg/encoding/json/decode_test.go#newcode211\r\n> src/pkg/encoding/json/decode_test.go:211: // Independent of Decode,\r\n> basic coverage of the accessors in Number\r\n> A more idiomatic way to write this test would be to use a table:\r\n> \r\n[SNIPPED]\r\n> \r\n> Then when the test fails you get much more information about the state\r\n> of the code.  It also makes adding a new test case a simple matter of\r\n> writing a line in the data table instead of copying and pasting however\r\n> many lines of code\r\n\r\nI've adopted the table approach for the most part, based on your comments.  I'm\r\nnot sure I'm understanding how to test the failures from Number.Int64() and\r\nNumber.Float64() better than I have though, and I apologize for any aggravation.\r\n\r\nThe thing that makes it tough is that the design of Number is such that Int64()\r\nand Float64() do not return errors, which I think makes sense since we assume\r\nthat bad numbers will never make it past the JSON parser in the first place.\r\nBut, strconv returns errors, and I feel like it's better to panic if we actually\r\nget one, and I just want code coverage of that codepath. I'm finding it hard to\r\nconcisely test panics in a table loop though without calling a specialized\r\nmethod (with its own defer() for making the checks), which is why you'll see\r\nwhat you see.\r\n\r\nThanks again for your help, and my apologies if I'm just not seeing something\r\nobvious.\r\n",
			"disapproval": false,
			"date": "2012-05-30 03:57:22.851697",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Jonathan Gold <jgold.bg@gmail.com> writes:\r\n\r\n> Ping?\r\n>\r\n> Sorry if I'm being pesky or too pushy -- I'm new to the team's time frames \r\n> and code review process/tools, so please let me know if I'm not \r\n> participating correctly.\r\n\r\nRuss is out for a couple of days.  He will probably get back to this\r\nnext week.\r\n\r\nIan\r\n\r\n> On Tuesday, May 29, 2012 8:57:19 PM UTC-7, Jonathan Gold wrote:\r\n>>\r\n>> On Tue, May 29, 2012 at 09:19:24PM +0000, rsc@golang.org wrote: \r\n>> > Thanks for working on this. The one-sentence summary of my comments \r\n>>\r\n>> Thanks for taking the time to help me with it! \r\n>>\r\n>> I've made the changes you set out and updated with the new patch set. Two \r\n>> things I thought were worth pointing out more specifically are inline \r\n>> below. \r\n>>\r\n>> > \r\n>> > \r\n>> http://codereview.appspot.com/6202068/diff/8001/src/pkg/encoding/json/decode.go#newcode42 \r\n>> > src/pkg/encoding/json/decode.go:42: //        float64, for JSON numbers \r\n>> > add after this line: \r\n>> > // Number, for JSON numbers, if UseNumber has been called \r\n>>\r\n>> I ended up not putting this in, because there's actually no way that a \r\n>> caller \r\n>> can tell Unmarshal to UseNumber, since that requires access to \r\n>> decodeState. Am I \r\n>> not understanding what you'd like? \r\n>>\r\n>> > \r\n>> > \r\n>> http://codereview.appspot.com/6202068/diff/8001/src/pkg/encoding/json/decode_test.go#newcode196 \r\n>> > src/pkg/encoding/json/decode_test.go:196: func assertNumParsePanic(f \r\n>> > func(), errExpct string, t *testing.T) { \r\n>> > http://golang.org/doc/go_faq.html#assertions \r\n>> > \r\n>> > \r\n>> http://codereview.appspot.com/6202068/diff/8001/src/pkg/encoding/json/decode_test.go#newcode211 \r\n>> > src/pkg/encoding/json/decode_test.go:211: // Independent of Decode, \r\n>> > basic coverage of the accessors in Number \r\n>> > A more idiomatic way to write this test would be to use a table: \r\n>> > \r\n>> [SNIPPED] \r\n>> > \r\n>> > Then when the test fails you get much more information about the state \r\n>> > of the code.  It also makes adding a new test case a simple matter of \r\n>> > writing a line in the data table instead of copying and pasting however \r\n>> > many lines of code \r\n>>\r\n>> I've adopted the table approach for the most part, based on your comments. \r\n>>  I'm \r\n>> not sure I'm understanding how to test the failures from Number.Int64() \r\n>> and \r\n>> Number.Float64() better than I have though, and I apologize for any \r\n>> aggravation. \r\n>>\r\n>> The thing that makes it tough is that the design of Number is such that \r\n>> Int64() \r\n>> and Float64() do not return errors, which I think makes sense since we \r\n>> assume \r\n>> that bad numbers will never make it past the JSON parser in the first \r\n>> place. \r\n>> But, strconv returns errors, and I feel like it's better to panic if we \r\n>> actually \r\n>> get one, and I just want code coverage of that codepath. I'm finding it \r\n>> hard to \r\n>> concisely test panics in a table loop though without calling a specialized \r\n>> method (with its own defer() for making the checks), which is why you'll \r\n>> see \r\n>> what you see. \r\n>>\r\n>> Thanks again for your help, and my apologies if I'm just not seeing \r\n>> something \r\n>> obvious. \r\n>>\r\n",
			"disapproval": false,
			"date": "2012-06-02 00:19:45.148895",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"jgold.bg@gmail.com",
				"rsc@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry for the delay. I have been busy with some other things.\n\nhttp://codereview.appspot.com/6202068/diff/21001/src/pkg/encoding/json/decode.go\nFile src/pkg/encoding/json/decode.go (right):\n\nhttp://codereview.appspot.com/6202068/diff/21001/src/pkg/encoding/json/decode.go#newcode150\nsrc/pkg/encoding/json/decode.go:150: panic(err)\nPanicking is not appropriate here. You know that the number has the right syntax, but you do not know that the number is in range for a float64. 1e1000 is valid JSON but will make ParseFloat fail. I think the error should be returned here, making the signature (float64, error).\n\nhttp://codereview.appspot.com/6202068/diff/21001/src/pkg/encoding/json/decode.go#newcode157\nsrc/pkg/encoding/json/decode.go:157: if idx := strings.IndexAny(string(n), \".eE\"); idx >= 0 {\nIf the number is 2.5, returning 2 does not seem correct here. If the number is 1e50, there is no correct answer at all. Again I think the thing to do is to make the return values (int64, error) and just return ParseInt directly, not trying to handle decimal points or exponents.\n\nhttp://codereview.appspot.com/6202068/diff/21001/src/pkg/encoding/json/decode_test.go\nFile src/pkg/encoding/json/decode_test.go (right):\n\nhttp://codereview.appspot.com/6202068/diff/21001/src/pkg/encoding/json/decode_test.go#newcode92\nsrc/pkg/encoding/json/decode_test.go:92: {in: `2`, ptr: new(Number), out: Number(\"2\"), useNumber: true},\nPlease duplicate this line and delete useNumber: true on the copy. If the concrete data type is a Number, it should be used no matter what. useNumber should only have an effect when unmarshalling into an interface{}.\n\nPlease also add tests\n\n{in: `2`, ptr: new(interface{}), out: 2.0},\n{in: `2`, ptr: new(interface{}), out: Number(\"2\"), useNumber: true},\n\nhttp://codereview.appspot.com/6202068/diff/21001/src/pkg/encoding/json/encode.go\nFile src/pkg/encoding/json/encode.go (right):\n\nhttp://codereview.appspot.com/6202068/diff/21001/src/pkg/encoding/json/encode.go#newcode39\nsrc/pkg/encoding/json/encode.go:39: // Floating point and integer values encode as JSON numbers.\n// Floating point, integer, and Number values encode as JSON numbers.",
			"disapproval": false,
			"date": "2012-06-06 21:12:03.175884",
			"approval": false
		},
		{
			"sender": "jgold.bg@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\r\n\r\nThanks for the suggestion about letting Int64()/Float64() return the strconv\r\nerrors. I originally assumed I was constrained to your 2010 interfaces, but am\r\nmuch happier being able to just pass the error up to the caller:\r\n    \r\n    http://codereview.appspot.com/6202068/\r\n\r\njonathan\r\n",
			"disapproval": false,
			"date": "2012-06-07 01:53:24.453941",
			"approval": false
		},
		{
			"sender": "jgold.bg@gmail.com",
			"recipients": [
				"jgold.bg@gmail.com",
				"rsc@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ping.\n\nOn 2012/06/07 01:53:24, jgold.bg wrote:\n> PTAL.\n> \n> Thanks for the suggestion about letting Int64()/Float64() return the strconv\n> errors. I originally assumed I was constrained to your 2010 interfaces, but am\n> much happier being able to just pass the error up to the caller:\n>     \n>     http://codereview.appspot.com/6202068/\n> \n> jonathan",
			"disapproval": false,
			"date": "2012-06-14 02:15:56.428851",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"jgold.bg@gmail.com",
				"rsc@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks good, sorry for the delay. Please fix these two doc nits and I'll submit.\n\nhttp://codereview.appspot.com/6202068/diff/25006/src/pkg/encoding/json/decode.go\nFile src/pkg/encoding/json/decode.go (right):\n\nhttp://codereview.appspot.com/6202068/diff/25006/src/pkg/encoding/json/decode.go#newcode146\nsrc/pkg/encoding/json/decode.go:146: // Float64 returns the number as a float64 as processed by strconv.ParseFloat().\ns/ as processed by strconv.ParseFloat()//\n\nhttp://codereview.appspot.com/6202068/diff/25006/src/pkg/encoding/json/decode.go#newcode151\nsrc/pkg/encoding/json/decode.go:151: // Int64 returns the number as an int64 as processed by strconv.ParseInt().\ns/ as processed by strconv.ParseInt()//",
			"disapproval": false,
			"date": "2012-06-25 15:31:10.000987",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"jgold.bg@gmail.com",
				"rsc@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=73dfe1ecc9ac ***\n\nencoding/json: add Number type\n\nNumber represents the actual JSON text,\npreserving the precision and\nformatting of the original input.\n\nR=rsc, iant\nCC=golang-dev\nhttp://codereview.appspot.com/6202068\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2012-06-25 21:36:14.212592",
			"approval": false
		},
		{
			"sender": "jgold.bg@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Done (assuming your comments below were sed-style edits).\r\n\r\njonathan\r\n\r\nOn Mon, Jun 25, 2012 at 03:31:10PM +0000, rsc@golang.org wrote:\r\n> Looks good, sorry for the delay. Please fix these two doc nits and I'll\r\n> submit.\r\n> \r\n> \r\n> \r\n> http://codereview.appspot.com/6202068/diff/25006/src/pkg/encoding/json/decode.go\r\n> File src/pkg/encoding/json/decode.go (right):\r\n> \r\n> http://codereview.appspot.com/6202068/diff/25006/src/pkg/encoding/json/decode.go#newcode146\r\n> src/pkg/encoding/json/decode.go:146: // Float64 returns the number as a\r\n> float64 as processed by strconv.ParseFloat().\r\n> s/ as processed by strconv.ParseFloat()//\r\n> \r\n> http://codereview.appspot.com/6202068/diff/25006/src/pkg/encoding/json/decode.go#newcode151\r\n> src/pkg/encoding/json/decode.go:151: // Int64 returns the number as an\r\n> int64 as processed by strconv.ParseInt().\r\n> s/ as processed by strconv.ParseInt()//\r\n> \r\n> http://codereview.appspot.com/6202068/\r\n",
			"disapproval": false,
			"date": "2012-06-25 16:33:13.426179",
			"approval": false
		}
	],
	"owner_email": "jgold.bg@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "jgold.bg",
	"subject": "code review 6202068:     encoding/json: Adding json.NumberConverter for cust...",
	"created": "2012-05-11 17:48:28.466745",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		14002,
		21001,
		25006,
		33001
	],
	"modified": "2012-06-25 21:44:48.397472",
	"closed": true,
	"issue": 6202068
}