{
	"description": "go/types: adjust gcimporter to actual gc export data\n\nUnexported field and method names that appear in the\nexport data (as part of some exported type) are fully\nqualified with a package id (path). In some cases, a\npackage with that id was never exported for any other\nuse (i.e. only the path is of interest).\n\nWe must not create a \"real\" package in those cases\nbecause we don't have a package name. Entering an\nunnamed package into the map of imported packages\nmakes that package accessible for other imports.\nSuch a subsequent import may find the unnamed\npackage in the map, and reuse it. That reused and\nimported package is then entered into the importing\nfile scope, still w/o a name. References to that\npackage cannot resolved after that. Was bug.",
	"cc": [
		"adonovan@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7307112/diff/2002/src/pkg/go/types/gcimporter.go\nFile src/pkg/go/types/gcimporter.go (right):\n\nhttps://codereview.appspot.com/7307112/diff/2002/src/pkg/go/types/gcimporter.go#newcode134\nsrc/pkg/go/types/gcimporter.go:134: \n(Curious: is there a principle at work here?)\n\nhttps://codereview.appspot.com/7307112/diff/2002/src/pkg/go/types/gcimporter.go#newcode421\nsrc/pkg/go/types/gcimporter.go:421: \nYes, I can see how that would simplify things.\n\nFeel free to make the change; I've audited all uses in exp/ssa and it makes no difference to me either way.  (Don't worry about breaking exp/ssa temporarily; I'll fix it.)\n\nhttps://codereview.appspot.com/7307112/diff/2002/src/pkg/go/types/scope.go\nFile src/pkg/go/types/scope.go (right):\n\nhttps://codereview.appspot.com/7307112/diff/2002/src/pkg/go/types/scope.go#newcode75\nsrc/pkg/go/types/scope.go:75: \nPrint outer scope too?",
			"disapproval": false,
			"date": "2013-02-13 15:16:38.013540",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=aceba1ebb946 ***\n\ngo/types: adjust gcimporter to actual gc export data\n\nUnexported field and method names that appear in the\nexport data (as part of some exported type) are fully\nqualified with a package id (path). In some cases, a\npackage with that id was never exported for any other\nuse (i.e. only the path is of interest).\n\nWe must not create a \"real\" package in those cases\nbecause we don't have a package name. Entering an\nunnamed package into the map of imported packages\nmakes that package accessible for other imports.\nSuch a subsequent import may find the unnamed\npackage in the map, and reuse it. That reused and\nimported package is then entered into the importing\nfile scope, still w/o a name. References to that\npackage cannot resolved after that. Was bug.\n\nR=adonovan\nCC=golang-dev\nhttps://codereview.appspot.com/7307112",
			"disapproval": false,
			"date": "2013-02-13 18:21:40.022370",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 13, 2013 at 7:16 AM,  <adonovan@google.com> wrote:\r\n> https://codereview.appspot.com/7307112/diff/2002/src/pkg/go/types/gcimporter.go\r\n> File src/pkg/go/types/gcimporter.go (right):\r\n>\r\n> https://codereview.appspot.com/7307112/diff/2002/src/pkg/go/types/gcimporter.go#newcode134\r\n> src/pkg/go/types/gcimporter.go:134:\r\n> (Curious: is there a principle at work here?)\r\n\r\nPerhaps, not sure.\r\n\r\n\r\n>\r\n> https://codereview.appspot.com/7307112/diff/2002/src/pkg/go/types/gcimporter.go#newcode421\r\n> src/pkg/go/types/gcimporter.go:421:\r\n> Yes, I can see how that would simplify things.\r\n>\r\n> Feel free to make the change; I've audited all uses in exp/ssa and it\r\n> makes no difference to me either way.  (Don't worry about breaking\r\n> exp/ssa temporarily; I'll fix it.)\r\n\r\nAnother CL.\r\n\r\n>\r\n> https://codereview.appspot.com/7307112/diff/2002/src/pkg/go/types/scope.go\r\n> File src/pkg/go/types/scope.go (right):\r\n>\r\n> https://codereview.appspot.com/7307112/diff/2002/src/pkg/go/types/scope.go#newcode75\r\n> src/pkg/go/types/scope.go:75:\r\n> Print outer scope too?\r\n\r\nPrefer not to. If an inner scope is printed one gets potentially huge\r\namounts of output.\r\n>\r\n> https://codereview.appspot.com/7307112/\r\n",
			"disapproval": false,
			"date": "2013-02-13 18:20:54.527400",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-02-13 08:06:38.189990",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 7307112: go/types: adjust gcimporter to actual gc export data",
	"created": "2013-02-13 07:51:38.877280",
	"patchsets": [
		1,
		2001,
		5001,
		2002,
		11005,
		13002
	],
	"modified": "2013-02-13 23:52:35.453350",
	"closed": true,
	"issue": 7307112
}