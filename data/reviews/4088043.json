{
	"description": "A new package for conversion between character sets.\nSome code taken from inferno's convcs.\nAny feedback on the interface appreciated.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 25 January 2011 15:53, Russ Cox <rsc@golang.org> wrote:\n> it's a little better.\n> i think you're still going to want a cache though\n> since most people will use the NewReader and NewWriter\n> interfaces. \u00a0so i'd just hide it behind the cache.\n\nok\n",
			"disapproval": false,
			"date": "2011-01-25 15:55:51.551993",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 27 January 2011 20:57, roger peppe <rogpeppe@gmail.com> wrote:\n> SUBDIRECTORIES\n>\n> \u00a0 \u00a0 \u00a0 \u00a0iconv\n\nBTW the idea is to have a separate package, iconv, which\ndepends on the GNU iconv library, for when more complete\ncharacter set coverage is required (the base package is unlikely\nto get that complete for a while)\n\nimport (\n    \"go-charset.googlecode.com/hg/charset\"\n    _ \"go-charset.googlecode.com/hg/charset/iconv\"\n)\n\nwould be sufficient.\n",
			"disapproval": false,
			"date": "2011-01-27 21:01:32.421657",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc,\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-01-25 16:54:30.140217",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"r@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "PTAL\n\ni've simplified the interface a bit. hopefully the internals aren't so convoluted now either.\n\ni've also provided the capability for an external package to register character set names.",
			"disapproval": false,
			"date": "2011-01-27 20:50:05.052989",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change.",
			"disapproval": false,
			"date": "2011-01-25 15:15:22.510826",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "[Note that this is not for the Go repository;\nit's a review of code that Rog is putting in\na separate Google Code project.]\n\nWasn't easy for me to find the interface, so here it is for others:\n\nPACKAGE\n\npackage charset\nimport \"charset\"\n\nVARIABLES\n\nvar CharsetDir = \"/usr/local/lib/go-charset/data\"\nCharsetDir is the directory where charset will look for\nits data files.\n\n\nFUNCTIONS\n\nfunc Aliases(name string) []string\nAliases returns the known aliases of a character set.\n\nfunc Names() []string\nNames returns set of known canonical character set names.\n\nfunc NewReader(name string, r io.Reader) (io.Reader, os.Error)\nNewWriter returns a new Reader; reading from\nit returns UTF-8 text translated from text\nin the named charset read from r.\n\nfunc NewWriter(charset string, w io.Writer) (io.WriteCloser, os.Error)\nNewWriter returns a new Writer; writing\nUTF-8 text to it to causes text in the named charset\nto be written on w.\n\nfunc ToCharsetConverterFunc(name string) (func() Converter, os.Error)\nToCharsetConverterFunc finds the character set named name,\nand returns a function that returns new instances of\na Converter from UTF-8 to the character set.\n\nfunc ToUTF8ConverterFunc(name string) (func() Converter, os.Error)\nToUTF8ConverterFunc finds the character set named name,\nand returns a function that returns new instances of\na Converter from the character set to UTF-8.\n\n\nTYPES\n\ntype Converter interface {\n    Convert(data []byte, eof bool) (n int, cdata []byte, err os.Error)\n}\nConverter represents a character set converter.\nThe Convert method converts the given data,\nand returns the number of bytes of data consumed,\na slice containing the converted data (which may be\noverwritten on the next call to Convert), and any\nconversion error. If eof is true, the data represents\nthe final bytes of the input.\n",
			"disapproval": false,
			"date": "2011-01-25 15:21:59.679252",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> func NewReader(name string, r io.Reader) (io.Reader, os.Error)\n> NewWriter returns a new Reader; reading from\n> it returns UTF-8 text translated from text\n> in the named charset read from r.\n\nLooks good.  You might rename name to charset and\nsay\n\nNewReader returns a new Reader that translates\nfrom the named character set to UTF-8 as it reads r.\n\n> func NewWriter(charset string, w io.Writer) (io.WriteCloser, os.Error)\n> NewWriter returns a new Writer; writing\n> UTF-8 text to it to causes text in the named charset\n> to be written on w.\n\nShould explain why it's a WriteCloser.\n(Say what Close does.)\n\n> func ToCharsetConverterFunc(name string) (func() Converter, os.Error)\n> ToCharsetConverterFunc finds the character set named name,\n> and returns a function that returns new instances of\n> a Converter from UTF-8 to the character set.\n\nit's a little strange to call the function\nand then have to call another one.\nfactory factory and all that.\n\nfunc NewTranslatorTo(charset string) (Translator, os.Error)\nfunc NewTranslatorFrom(charset string) (Translator, os.Error)\n",
			"disapproval": false,
			"date": "2011-01-25 15:28:22.028937",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "thanks a lot for the review.\n\nOn 25 January 2011 15:28, Russ Cox <rsc@golang.org> wrote:\n>> func NewReader(name string, r io.Reader) (io.Reader, os.Error)\n>> NewWriter returns a new Reader; reading from\n>> it returns UTF-8 text translated from text\n>> in the named charset read from r.\n>\n> Looks good. \u00a0You might rename name to charset and\n> say\n>\n> NewReader returns a new Reader that translates\n> from the named character set to UTF-8 as it reads r.\n\ndone.\n\n>\n>> func NewWriter(charset string, w io.Writer) (io.WriteCloser, os.Error)\n>> NewWriter returns a new Writer; writing\n>> UTF-8 text to it to causes text in the named charset\n>> to be written on w.\n>\n> Should explain why it's a WriteCloser.\n> (Say what Close does.)\n\ndone.\n\n>> func ToCharsetConverterFunc(name string) (func() Converter, os.Error)\n>> ToCharsetConverterFunc finds the character set named name,\n>> and returns a function that returns new instances of\n>> a Converter from UTF-8 to the character set.\n>\n> it's a little strange to call the function\n> and then have to call another one.\n> factory factory and all that.\n>\n> func NewTranslatorTo(charset string) (Translator, os.Error)\n> func NewTranslatorFrom(charset string) (Translator, os.Error)\n\ni agree with the sentiment, but each Converter can be used only\nonce (it's stateful), what i need *is* a way to make many Converters\ngiven a single charset specification (which often implies reading a data file).\n\nan alternative might be to cache charsets, but i'd prefer\nto avoid the heuristics that requires.\n\nif Translator was:\n\ntype Translator interface {\n     New() Converter\n}\n\nwould that be better? it amounts to the same thing, of course.\ni do much prefer your names.\n",
			"disapproval": false,
			"date": "2011-01-25 15:50:04.622705",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Tue, Jan 25, 2011 at 10:50, roger peppe <rogpeppe@gmail.com> wrote:\n> thanks a lot for the review.\n>\n> On 25 January 2011 15:28, Russ Cox <rsc@golang.org> wrote:\n>>> func NewReader(name string, r io.Reader) (io.Reader, os.Error)\n>>> NewWriter returns a new Reader; reading from\n>>> it returns UTF-8 text translated from text\n>>> in the named charset read from r.\n>>\n>> Looks good. \u00a0You might rename name to charset and\n>> say\n>>\n>> NewReader returns a new Reader that translates\n>> from the named character set to UTF-8 as it reads r.\n>\n> done.\n>\n>>\n>>> func NewWriter(charset string, w io.Writer) (io.WriteCloser, os.Error)\n>>> NewWriter returns a new Writer; writing\n>>> UTF-8 text to it to causes text in the named charset\n>>> to be written on w.\n>>\n>> Should explain why it's a WriteCloser.\n>> (Say what Close does.)\n>\n> done.\n>\n>>> func ToCharsetConverterFunc(name string) (func() Converter, os.Error)\n>>> ToCharsetConverterFunc finds the character set named name,\n>>> and returns a function that returns new instances of\n>>> a Converter from UTF-8 to the character set.\n>>\n>> it's a little strange to call the function\n>> and then have to call another one.\n>> factory factory and all that.\n>>\n>> func NewTranslatorTo(charset string) (Translator, os.Error)\n>> func NewTranslatorFrom(charset string) (Translator, os.Error)\n>\n> i agree with the sentiment, but each Converter can be used only\n> once (it's stateful), what i need *is* a way to make many Converters\n> given a single charset specification (which often implies reading a data file).\n>\n> an alternative might be to cache charsets, but i'd prefer\n> to avoid the heuristics that requires.\n>\n> if Translator was:\n>\n> type Translator interface {\n> \u00a0 \u00a0 New() Converter\n> }\n>\n> would that be better?\n\nit's a little better.\ni think you're still going to want a cache though\nsince most people will use the NewReader and NewWriter\ninterfaces.  so i'd just hide it behind the cache.\n",
			"disapproval": false,
			"date": "2011-01-25 15:54:04.020649",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "the other thing i'm wondering is if i've got the\nright approach to the data file location.\ni assume they're in the go source directory,\nbut that obviously won't be great when a binary\nis deployed.\n\nperhaps there's no good answer.\n",
			"disapproval": false,
			"date": "2011-01-25 16:35:35.400434",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Tue, Jan 25, 2011 at 11:35, roger peppe <rogpeppe@gmail.com> wrote:\n> the other thing i'm wondering is if i've got the\n> right approach to the data file location.\n> i assume they're in the go source directory,\n> but that obviously won't be great when a binary\n> is deployed.\n>\n> perhaps there's no good answer.\n\nit's one of the things that needs to be solved.\nfor now\n\nvar dir = runtime.GOROOT() +\n\"/src/pkg/go-charset.googlecode.com/hg/charset/lib\"\n\nis as good as anything else\n",
			"disapproval": false,
			"date": "2011-01-25 16:42:05.221545",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"r@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as de59fd17d15e ***\n\ncharset: A new (external) package for conversion between character sets.\nSome code taken from inferno's convcs.\nAny feedback on the interface appreciated.\n\nR=golang-dev, rsc, r\nhttp://codereview.appspot.com/4088043\n\nCommitter: Roger Peppe <rogpeppe@gmail.com>",
			"disapproval": false,
			"date": "2011-02-01 15:43:59.020764",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "PTAL.\n\ni've changed the API as suggested, and added a tcs command.\n\ni'm still not entirely what to do about encoding/decoding\nerrors, and i could do with some source text in various\nencodings for testing.\n\nPACKAGE\n\npackage charset\nimport \"go-charset.googlecode.com/hg/charset\"\n\nVARIABLES\n\nvar CharsetDir = \"/usr/local/lib/go-charset/data\"\nCharsetDir is the data file directory.\n\n\nFUNCTIONS\n\nfunc Names() []string\nNames returns the canonical names of all supported character sets.\n\nfunc NewReader(charset string, r io.Reader) (io.Reader, os.Error)\nNewReader returns a new Reader that translates\nfrom the named character set to UTF-8 as it reads r.\n\nfunc NewTranslatingReader(r io.Reader, tr Translator) io.Reader\nNewTranslatingReader returns a new Reader that\ntranslates data using the given Translator as it reads r.\n\nfunc NewTranslatingWriter(w io.Writer, tr Translator) io.WriteCloser\nNewTranslatingWriter returns a new WriteCloser writing to w.\nIt passes the written bytes through the given Translator.\n\nfunc NewWriter(charset string, w io.Writer) (io.WriteCloser, os.Error)\nNewWriter returns a new WriteCloser writing to w.\nIt converts writes of UTF-8 text into writes\non w of text in the named character set.\nThe Close is necessary to flush any remaining partially\ntranslated characters to the output.\n\n\nTYPES\n\ntype Charset struct {\n    Name    string   // canonical name of character set.\n    Aliases []string // known aliases.\n    Desc    string   // description.\n}\nCharset holds information about a given character set.\n\nfunc Info(charset string) (*Charset, os.Error)\nInfo returns information on a character set.\n\ntype Translator interface {\n    Translate(data []byte, eof bool) (n int, cdata []byte, err os.Error)\n}\nTranslator represents a character set converter.\nThe Translate method translates the given data,\nand returns the number of bytes of data consumed,\na slice containing the converted data (which may be\noverwritten on the next call to Translate), and any\nconversion error. If eof is true, the data represents\nthe final bytes of the input.\n\nfunc NewTranslatorFrom(name string) (Translator, os.Error)\nNewTranslatorFrom finds the character set named name\nand returns a function that returns new instances of\na Translator from the character set to UTF-8.\n\nfunc NewTranslatorTo(name string) (Translator, os.Error)\nNewTranslatorTo finds the character set named name\nand returns a function that returns new instances of\na Translator from UTF-8 to the character set.\n",
			"disapproval": false,
			"date": "2011-01-26 14:19:23.604580",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"r@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "a few comments about charset.go. i  feel the API isn't quite right, but it's certainly usable and a fine thing to have.\n\nhttp://codereview.appspot.com/4088043/diff/31001/charset/charset.go\nFile charset/charset.go (right):\n\nhttp://codereview.appspot.com/4088043/diff/31001/charset/charset.go#newcode28\ncharset/charset.go:28: // but it allows garbage collection of unused data file data too.\ni agree this seems a little convoluted\n\nhttp://codereview.appspot.com/4088043/diff/31001/charset/charset.go#newcode29\ncharset/charset.go:29: type class struct {\nthat's a line you can't write in most languages.\n\nhttp://codereview.appspot.com/4088043/diff/31001/charset/charset.go#newcode52\ncharset/charset.go:52: var cache = [...]map[string] func() Translator{\nodd way to write this declaration, especially given the [2] inside the definition of class.\n\nhttp://codereview.appspot.com/4088043/diff/31001/charset/charset.go#newcode214\ncharset/charset.go:214: // Info returns information on a character set.\ns/ on / about /\n\nhttp://codereview.appspot.com/4088043/diff/31001/charset/charset.go#newcode237\ncharset/charset.go:237: func filename(f string) string {\ni suspect you should handle \"./\" and \"../\" as well - they should be relative.\n\nhttp://codereview.appspot.com/4088043/diff/31001/charset/charset.go#newcode306\ncharset/charset.go:306: // underlying Reader through the Convertor\nwhat's a Convertor? i think you mean Translator.  (for reference, it should be spelled Converter.)",
			"disapproval": false,
			"date": "2011-01-27 00:35:00.804924",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"r@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "thanks for the review. if you feel the API isn't quite right, please comment on it!\n\nhttp://codereview.appspot.com/4088043/diff/31001/charset/charset.go\nFile charset/charset.go (right):\n\nhttp://codereview.appspot.com/4088043/diff/31001/charset/charset.go#newcode52\ncharset/charset.go:52: var cache = [...]map[string] func() Translator{\nOn 2011/01/27 00:35:00, r wrote:\n> odd way to write this declaration, especially given the [2] inside the\n> definition of class.\n\nthe cache caches charset instances. each charset class can be used to generate multiple instances (for instance, a single class is used to generate all 1-byte character sets; each has its own data file)\n\none idea i've toyed with is having an interface rather than a closure; something like:\n\ntype instance interface {\n    newTranslator() Translator\n}\n\nbut i can't see that it would make a great deal of difference.\n\nhttp://codereview.appspot.com/4088043/diff/31001/charset/charset.go#newcode214\ncharset/charset.go:214: // Info returns information on a character set.\nOn 2011/01/27 00:35:00, r wrote:\n> s/ on / about /\n\nDone.\n\nhttp://codereview.appspot.com/4088043/diff/31001/charset/charset.go#newcode237\ncharset/charset.go:237: func filename(f string) string {\nOn 2011/01/27 00:35:00, r wrote:\n> i suspect you should handle \"./\" and \"../\" as well - they should be relative.\n\ni'm not sure it does. the only file name in the API is CharsetDir - all the others are static or come from the config file, which is itself inside CharsetDir. if there was a relative filename in the config file, it should be relative to the position of the config file, not to the user's cwd, so i think this is correct.\n\nhttp://codereview.appspot.com/4088043/diff/31001/charset/charset.go#newcode306\ncharset/charset.go:306: // underlying Reader through the Convertor\nOn 2011/01/27 00:35:00, r wrote:\n> what's a Convertor? i think you mean Translator.  (for reference, it should be\n> spelled Converter.)\n\nthis was an old comment with typo. deleted (Translator used to be spelled Converter).",
			"disapproval": false,
			"date": "2011-01-27 07:30:35.967451",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "godoc output?\n",
			"disapproval": false,
			"date": "2011-01-27 20:51:46.335610",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 27 January 2011 20:51, Russ Cox <rsc@golang.org> wrote:\n> godoc output?\n\nah yes, forgot to include it.\n\nPACKAGE\n\npackage charset\nimport \"go-charset.googlecode.com/hg/charset\"\n\nVARIABLES\n\nvar CharsetDir = \"/usr/local/lib/go-charset/data\"\nCharsetDir is the data file directory.\n\n\nFUNCTIONS\n\nfunc Names() []string\nNames returns the canonical names of all supported character sets.\n\nfunc NewReader(charset string, r io.Reader) (io.Reader, os.Error)\nNewReader returns a new Reader that translates from the named\ncharacter set to UTF-8 as it reads r.\n\nfunc NewTranslatingReader(r io.Reader, tr Translator) io.Reader\nNewTranslatingReader returns a new Reader that\ntranslates data using the given Translator as it reads r.\n\nfunc NewTranslatingWriter(w io.Writer, tr Translator) io.WriteCloser\nNewTranslatingWriter returns a new WriteCloser writing to w.\nIt passes the written bytes through the given Translator.\n\nfunc NewWriter(charset string, w io.Writer) (io.WriteCloser, os.Error)\nNewWriter returns a new WriteCloser writing to w.  It converts writes\nof UTF-8 text into writes on w of text in the named character set.\nThe Close is necessary to flush any remaining partially translated\ncharacters to the output.\n\n\nTYPES\n\ntype Charset struct {\n    Name           string                        // Canonical name of\ncharacter set.\n    Aliases        []string                      // Known aliases.\n    Desc           string                        // Description.\n    TranslatorFrom func() (Translator, os.Error) // Create a\nTranslator from this character set.\n    TranslatorTo   func() (Translator, os.Error) // Create a\nTranslator To this character set.\n}\nCharset holds information about a given character set.\n\nfunc Info(name string) *Charset\nInfo returns information about a character set, or nil\nif the character set is not found.\n\nfunc (cs *Charset) Register(override bool)\nRegister registers a new character set. If override is true,\nany existing character sets and aliases will be overridden.\n\ntype Translator interface {\n    Translate(data []byte, eof bool) (n int, cdata []byte, err os.Error)\n}\nTranslator represents a character set converter.\nThe Translate method translates the given data,\nand returns the number of bytes of data consumed,\na slice containing the converted data (which may be\noverwritten on the next call to Translate), and any\nconversion error. If eof is true, the data represents\nthe final bytes of the input.\n\nSUBDIRECTORIES\n\n\ticonv\n",
			"disapproval": false,
			"date": "2011-01-27 20:57:20.831459",
			"approval": false
		}
	],
	"owner_email": "rogpeppe@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "rog",
	"subject": "code review 4088043: A new package for conversion between character sets.",
	"created": "2011-01-25 14:59:16.106821",
	"patchsets": [
		1,
		2001,
		5001,
		7001,
		12001,
		18001,
		22001,
		25001,
		27001,
		31001,
		37001,
		5002
	],
	"modified": "2011-01-27 20:57:20.831459",
	"closed": false,
	"issue": 4088043
}