{
	"description": "fmt.Printf: introduce notation for random access to arguments.\nThis text is added to doc.go:\n\n        Explicit argument indexes:\n\n        In Printf, Sprintf, and Fprintf, the default behavior is for each\n        formatting verb to format successive arguments passed in the call.\n        However, the notation [n] immediately before the verb indicates that the\n        nth one-indexed argument is to be formatted instead. The same notation\n        before a '*' for a width or precision selects the argument index holding\n        the value. After processing a bracketed expression [n], arguments n+1,\n        n+2, etc. will be processed unless otherwise directed.\n\n        For example,\n                fmt.Sprintf(\"%[2]d %[1]d\\n\", 11, 22)\n        will yield \"22, 11\", while\n                fmt.Sprintf(\"%[3]*[2].*[1]f\", 12.0, 2, 6),\n        equivalent to\n                fmt.Sprintf(\"%6.2f\", 12.0),\n        will yield \" 12.00\". Because an explicit index affects subsequent verbs,\n        this notation can be used to print the same values multiple times\n        by resetting the index for the first argument to be repeated:\n                fmt.Sprintf(\"%d %d %#[1]x %#x\", 16, 17)\n        will yield \"16 17 0x10 0x11\".\n\nThe notation chosen differs from that in C, but I believe it's easier to read\nand to remember (we're indexing the arguments), and compatibility with\nC's printf was never a strong goal anyway.\n\nWhile we're here, change the word \"field\" to \"arg\" or \"argument\" in the\ncode; it was being misused and was confusing.",
	"cc": [
		"rsc@golang.org",
		"bradfitz@golang.org",
		"rogpeppe@gmail.com",
		"minux.ma@gmail.com",
		"peter.armitage@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-05-22 22:45:39.397620",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"rogpeppe@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, bradfitz@golang.org, rogpeppe@gmail.com, minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-05-23 16:51:06.823000",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What's the motivation here?  (there's no bug for background)\r\n\r\nIs this for gettext-like i18n stuff?\r\n\r\n\r\n\r\nOn Wed, May 22, 2013 at 3:45 PM, <r@golang.org> wrote:\r\n\r\n> Reviewers: rsc,\r\n>\r\n> Message:\r\n> Hello rsc (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> fmt.Printf: introduce notation for random access to arguments.\r\n> This text is added to doc.go:\r\n>\r\n>         Explicit argument indexes:\r\n>\r\n>         In Printf, Sprintf, and Fprintf, the default behavior is for\r\n> each\r\n>         formatting verb to format successive arguments passed in the\r\n> call.\r\n>         However, the notation [n] immediately after the % indicates that\r\n> the nth\r\n>         one-indexed argument is to be formatted instead. The same\r\n> notation\r\n>         attached to a '*' for a width or precision selects the argument\r\n> index\r\n>         holding the value. After processing a bracketed expression [n],\r\n>         arguments n+1, n+2, etc. will be processed unless otherwise\r\n> directed.\r\n>\r\n>         For example,\r\n>                 fmt.Sprintf(\"%[2]d %[1]d\\n\", 11, 22)\r\n>         will yield \"22, 11\", while\r\n>                 fmt.Sprintf(\"%[3]*[2].*[1]f\", 2, 6, 12.0),\r\n>         equivalent to\r\n>                 fmt.Sprintf(\"%6.2f\", 12.0),\r\n>         will yield \" 12.00\". Because an explicit index affects\r\n> subsequent verbs,\r\n>         this notation can be used to print the same values multiple\r\n> times\r\n>         by resetting the index for the first argument to be repeated:\r\n>                 fmt.Sprintf(\"%d %d %[1]#x %#x\", 16, 17)\r\n>         will yield \"16 17 0x10 0x11\".\r\n>\r\n> The notation chosen differs from that in C, but I believe it's easier to\r\n> read\r\n> and to remember (we're indexing the arguments), and compatibility with\r\n> C's printf was never a strong goal anyway.\r\n>\r\n> While we're here, change the word \"field\" to \"arg\" or \"argument\" in the\r\n> code; it was being misused and was confusing.\r\n>\r\n> Please review this at https://codereview.appspot.**com/9680043/<https://codereview.appspot.com/9680043/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/fmt/doc.go\r\n>   M src/pkg/fmt/fmt_test.go\r\n>   M src/pkg/fmt/print.go\r\n>   M src/pkg/fmt/scan.go\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-22 22:59:58.461200",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yes, it's for internationalization and translation databases and the\r\nlike. It's the one piece we can do without invoking masses of language\r\ntables.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-05-22 23:50:54.861100",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "why one-indexed?\r\n\r\nOn 22 May 2013 23:45,  <r@golang.org> wrote:\r\n> Reviewers: rsc,\r\n>\r\n> Message:\r\n> Hello rsc (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> fmt.Printf: introduce notation for random access to arguments.\r\n> This text is added to doc.go:\r\n>\r\n>         Explicit argument indexes:\r\n>\r\n>         In Printf, Sprintf, and Fprintf, the default behavior is for\r\n> each\r\n>         formatting verb to format successive arguments passed in the\r\n> call.\r\n>         However, the notation [n] immediately after the % indicates that\r\n> the nth\r\n>         one-indexed argument is to be formatted instead. The same\r\n> notation\r\n>         attached to a '*' for a width or precision selects the argument\r\n> index\r\n>         holding the value. After processing a bracketed expression [n],\r\n>         arguments n+1, n+2, etc. will be processed unless otherwise\r\n> directed.\r\n>\r\n>         For example,\r\n>                 fmt.Sprintf(\"%[2]d %[1]d\\n\", 11, 22)\r\n>         will yield \"22, 11\", while\r\n>                 fmt.Sprintf(\"%[3]*[2].*[1]f\", 2, 6, 12.0),\r\n>         equivalent to\r\n>                 fmt.Sprintf(\"%6.2f\", 12.0),\r\n>         will yield \" 12.00\". Because an explicit index affects\r\n> subsequent verbs,\r\n>         this notation can be used to print the same values multiple\r\n> times\r\n>         by resetting the index for the first argument to be repeated:\r\n>                 fmt.Sprintf(\"%d %d %[1]#x %#x\", 16, 17)\r\n>         will yield \"16 17 0x10 0x11\".\r\n>\r\n> The notation chosen differs from that in C, but I believe it's easier to\r\n> read\r\n> and to remember (we're indexing the arguments), and compatibility with\r\n> C's printf was never a strong goal anyway.\r\n>\r\n> While we're here, change the word \"field\" to \"arg\" or \"argument\" in the\r\n> code; it was being misused and was confusing.\r\n>\r\n> Please review this at https://codereview.appspot.com/9680043/\r\n>\r\n> Affected files:\r\n>   M src/pkg/fmt/doc.go\r\n>   M src/pkg/fmt/fmt_test.go\r\n>   M src/pkg/fmt/print.go\r\n>   M src/pkg/fmt/scan.go\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-23 13:27:32.700060",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "done.\r\n",
			"disapproval": false,
			"date": "2013-05-23 20:23:45.242250",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, May 23, 2013 at 9:27 PM, roger peppe <rogpeppe@gmail.com> wrote:\r\n\r\n> why one-indexed?\r\n\r\none-based index is also used by C.\r\nso that we can think the 0-th parameter is taken up by the format string\r\nitself?\r\n\r\ni love this syntax as it's much intuitive than C's \"%1$*2$d\".\r\ni'm not sure about the relative order or [] and the corresponding action\r\ncharacter.\r\n\r\ngiven that we already are incompatible with C, how about we use:\r\n         fmt.Sprintf(\"%[2]*.[1]*[3]f\", 2, 6, 12.0) for\r\nfmt.Sprintf(\"%6.2f\", 12.0),\r\ninstead of:\r\n         fmt.Sprintf(\"%[3]*[2].*[1]f\", 2, 6, 12.0) for\r\nfmt.Sprintf(\"%6.2f\", 12.0),\r\n\r\nso that the index will always immediately precede the the thing that it\r\naffects.\r\n",
			"disapproval": false,
			"date": "2013-05-23 14:00:19.317480",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Lucio suggested that too. Since we're breaking C compatibility, if we\r\never had it, it could go that way. I'm not totally convinced it's\r\nworth it, since this is only ever used to do translation tables and\r\nthey don't do much width-oriented stuff, but maybe if the facility\r\nwere nicer it would be used more. It's trickier to implement but maybe\r\nnot too much. I'll look into it.\r\n\r\nBesides being what C uses, one-indexing feels right to me as well,\r\nit's always the \"first argument\", as well as being (in Printf and\r\nSprintf) the index in the call.\r\n\r\n-rob\r\n\r\n\r\nOn Thu, May 23, 2013 at 6:59 AM, minux <minux.ma@gmail.com> wrote:\r\n>\r\n> On Thu, May 23, 2013 at 9:27 PM, roger peppe <rogpeppe@gmail.com> wrote:\r\n>>\r\n>> why one-indexed?\r\n>\r\n> one-based index is also used by C.\r\n> so that we can think the 0-th parameter is taken up by the format string\r\n> itself?\r\n>\r\n> i love this syntax as it's much intuitive than C's \"%1$*2$d\".\r\n> i'm not sure about the relative order or [] and the corresponding action\r\n> character.\r\n>\r\n> given that we already are incompatible with C, how about we use:\r\n>          fmt.Sprintf(\"%[2]*.[1]*[3]f\", 2, 6, 12.0) for\r\n> fmt.Sprintf(\"%6.2f\", 12.0),\r\n> instead of:\r\n>          fmt.Sprintf(\"%[3]*[2].*[1]f\", 2, 6, 12.0) for\r\n> fmt.Sprintf(\"%6.2f\", 12.0),\r\n>\r\n> so that the index will always immediately precede the the thing that it\r\n> affects.\r\n",
			"disapproval": false,
			"date": "2013-05-23 14:18:30.167740",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 23 May 2013 15:18, Rob Pike <r@golang.org> wrote:\r\n> Lucio suggested that too. Since we're breaking C compatibility, if we\r\n> ever had it, it could go that way. I'm not totally convinced it's\r\n> worth it, since this is only ever used to do translation tables and\r\n> they don't do much width-oriented stuff, but maybe if the facility\r\n> were nicer it would be used more. It's trickier to implement but maybe\r\n> not too much. I'll look into it.\r\n\r\n+1 - it seems quite a bit more intuitive.\r\n\r\n> Besides being what C uses, one-indexing feels right to me as well,\r\n> it's always the \"first argument\", as well as being (in Printf and\r\n> Sprintf) the index in the call.\r\n\r\ni was thinking of it as in index into the variadic argument slice,\r\nbut the above makes sense too.\r\n",
			"disapproval": false,
			"date": "2013-05-23 15:07:27.973920",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm unsure what's right here; flags complicate things.  The current\r\ndesign has the index modify its immediate predecessor, so %[2]x means,\r\n\"This spec applies to the second argument.\"  You are advocating that\r\nit instead mean, \"The following verb applies to the second argument.\"\r\nThat doesn't tell me whether the right syntax is in the presence of\r\nflags. Currently it would be %[2]#x, but in the proposed change if the\r\nindex modifies the verb, where does that mean the index should go?\r\n%[2]#x? %#[2]x? Either? The thing is, the entire directive applies to\r\nthe second argument, which is why it makes sense to bind it to the %.\r\nIf you bind it to the verb, it misses the point that all the other\r\nelements of the format also apply to argument 2.\r\n\r\nI'm inclined to leave it alone.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-05-23 16:03:36.935940",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Let me retract that inclination, because I really am unsure. I'm still\r\nthinking about it.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-05-23 16:15:54.406650",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Here's the argument that convinced me the new proposal is better: With\r\nit, in the most general case (%[1]*.[2]*[3]f), it puts the arguments\r\nto be fetched in the same order they would be fetched if the index\r\nexpressions were not there.\r\n\r\nI'll update the CL.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-05-23 16:29:14.788510",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"r@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"rogpeppe@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "could you please re-upload?\nI got \"error: old chunk mismatch\" for patch set 2.\n\nalso, please update CL description.",
			"disapproval": false,
			"date": "2013-05-23 20:21:44.512870",
			"approval": false
		},
		{
			"sender": "peter.armitage@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I have a rather philosophical question: What determines if changes such as \r\nthis violate the Go backwards-compatibility promises? In this case only \r\ncontrived examples such as \r\nhttp://play.golang.org/p/FUYtQbI4IT would change, yet the behaviour of this \r\nis determined by the documentation of error-conditions in package fmt.\r\n\r\nhttp://golang.org/doc/go1compat.html\r\nhttp://golang.org/pkg/fmt/ -> Format errors\r\n\r\nClearly this change is unlikely to break any real programs, and it sounds \r\nlike a useful feature. But does the current compatibility document cover \r\nthis sort of change?\r\n\r\nOn Wednesday, 22 May 2013 23:45:39 UTC+1, r...@golang.org wrote:\r\n>\r\n> Reviewers: rsc, \r\n>\r\n> Message: \r\n> Hello rsc (cc: golan...@googlegroups.com <javascript:>), \r\n>\r\n> I'd like you to review this change to \r\n> https://code.google.com/p/go/ \r\n>\r\n>\r\n> Description: \r\n> fmt.Printf: introduce notation for random access to arguments. \r\n> This text is added to doc.go: \r\n>\r\n>          Explicit argument indexes: \r\n>\r\n>          In Printf, Sprintf, and Fprintf, the default behavior is for \r\n> each \r\n>          formatting verb to format successive arguments passed in the \r\n> call. \r\n>          However, the notation [n] immediately after the % indicates that \r\n> the nth \r\n>          one-indexed argument is to be formatted instead. The same \r\n> notation \r\n>          attached to a '*' for a width or precision selects the argument \r\n> index \r\n>          holding the value. After processing a bracketed expression [n], \r\n>          arguments n+1, n+2, etc. will be processed unless otherwise \r\n> directed. \r\n>\r\n>          For example, \r\n>                  fmt.Sprintf(\"%[2]d %[1]d\\n\", 11, 22) \r\n>          will yield \"22, 11\", while \r\n>                  fmt.Sprintf(\"%[3]*[2].*[1]f\", 2, 6, 12.0), \r\n>          equivalent to \r\n>                  fmt.Sprintf(\"%6.2f\", 12.0), \r\n>          will yield \" 12.00\". Because an explicit index affects \r\n> subsequent verbs, \r\n>          this notation can be used to print the same values multiple \r\n> times \r\n>          by resetting the index for the first argument to be repeated: \r\n>                  fmt.Sprintf(\"%d %d %[1]#x %#x\", 16, 17) \r\n>          will yield \"16 17 0x10 0x11\". \r\n>\r\n> The notation chosen differs from that in C, but I believe it's easier to \r\n> read \r\n> and to remember (we're indexing the arguments), and compatibility with \r\n> C's printf was never a strong goal anyway. \r\n>\r\n> While we're here, change the word \"field\" to \"arg\" or \"argument\" in the \r\n> code; it was being misused and was confusing. \r\n>\r\n> Please review this at https://codereview.appspot.com/9680043/ \r\n>\r\n> Affected files: \r\n>    M src/pkg/fmt/doc.go \r\n>    M src/pkg/fmt/fmt_test.go \r\n>    M src/pkg/fmt/print.go \r\n>    M src/pkg/fmt/scan.go \r\n>\r\n>\r\n>",
			"disapproval": false,
			"date": "2013-05-24 11:28:03.093640",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 23 May 2013 17:28, Rob Pike <r@golang.org> wrote:\r\n> Here's the argument that convinced me the new proposal is better: With\r\n> it, in the most general case (%[1]*.[2]*[3]f), it puts the arguments\r\n> to be fetched in the same order they would be fetched if the index\r\n> expressions were not there.\r\n\r\nYes - I was trying to think of a way to say that succinctly\r\nbut got distracted.\r\n\r\nThanks.\r\n",
			"disapproval": false,
			"date": "2013-05-24 14:30:57.096780",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, May 22, 2013 at 4:50 PM, Rob Pike <r@golang.org> wrote:\r\n\r\n> Yes, it's for internationalization and translation databases and the\r\n> like. It's the one piece we can do without invoking masses of language\r\n> tables.\r\n>\r\n\r\nI'm concerned this isn't the format various translation databases use, so\r\nwe'll still need another system to deal with those formats (which isn't\r\nhard), and then we'll have this extra code in fmt.\r\n\r\nIf you assume this code won't actually help with i18n, is this worthwhile\r\non its own?\r\n",
			"disapproval": false,
			"date": "2013-05-24 14:35:26.687160",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "By \"the format various translation databases use\", do you mean the $\r\nnotation? The thing is, our printf isn't compatible anyway, so that\r\nhorse has already bolted.\r\n\r\nIs this worthwhile on its own? I think so; it covers a common case\r\n(within the subdomain) with a small amount of code.\r\n\r\nDoing this stuff at the level of handling multilanguage plurals and so\r\non is a massive undertaking that does not belong in fmt.\r\n\r\nRegarding compatibility, this change breaks no correct format string\r\nexcept the extremely implausible borderline case of a custom formatter\r\nusing %[ as a verb, so I claim it's OK.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-05-24 15:11:20.082690",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, May 24, 2013 at 7:28 PM, Peter Armitage <peter.armitage@gmail.com>wrote:\r\n\r\n> I have a rather philosophical question: What determines if changes such as\r\n> this violate the Go backwards-compatibility promises? In this case only\r\n> contrived examples such as\r\n> http://play.golang.org/p/FUYtQbI4IT would change, yet the behaviour of\r\n> this is determined by the documentation of error-conditions in package fmt.\r\n>\r\n> http://golang.org/doc/go1compat.html\r\n> http://golang.org/pkg/fmt/ -> Format errors\r\n>\r\n> Clearly this change is unlikely to break any real programs, and it sounds\r\n> like a useful feature. But does the current compatibility document cover\r\n> this sort of change?\r\n>\r\nMaking a previously erroneous cases correct is ok as otherwise we can't\r\nimplement any\r\nnew features to the language. so i think the same could apply to packages\r\ntoo.\r\n\r\nas a concrete example, Go 1.0 doesn't support zip64 in archive/zip, is it\r\ncorrect for the\r\nuser to expect future Go to also return \"incorrect format\" error for zip64?\r\nNo, as zip64 is added in Go 1.1.\r\n",
			"disapproval": false,
			"date": "2013-05-24 15:30:01.651610",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"r@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"rogpeppe@gmail.com",
				"minux.ma@gmail.com",
				"peter.armitage@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nI like the new syntax and semantics.",
			"disapproval": false,
			"date": "2013-05-24 21:49:10.324690",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"r@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"rogpeppe@gmail.com",
				"minux.ma@gmail.com",
				"peter.armitage@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "changes look good.\n\nhttps://codereview.appspot.com/9680043/diff/20001/src/pkg/fmt/print.go\nFile src/pkg/fmt/print.go (right):\n\nhttps://codereview.appspot.com/9680043/diff/20001/src/pkg/fmt/print.go#newcode220\nsrc/pkg/fmt/print.go:220: n64, err := w.Write(p.buf)\nit could be nitpicking, but\ndo you mind fixing this naming (n64 probably refers to int64\nreturned from WriteTo) and the unnecessary cast below?\n\nThank you.\n\n(there are other cases in this file)",
			"disapproval": false,
			"date": "2013-05-24 21:52:08.356310",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"rogpeppe@gmail.com",
				"minux.ma@gmail.com",
				"peter.armitage@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=e9e3359d9c84 ***\n\nfmt.Printf: introduce notation for random access to arguments.\nThis text is added to doc.go:\n\n        Explicit argument indexes:\n\n        In Printf, Sprintf, and Fprintf, the default behavior is for each\n        formatting verb to format successive arguments passed in the call.\n        However, the notation [n] immediately before the verb indicates that the\n        nth one-indexed argument is to be formatted instead. The same notation\n        before a '*' for a width or precision selects the argument index holding\n        the value. After processing a bracketed expression [n], arguments n+1,\n        n+2, etc. will be processed unless otherwise directed.\n\n        For example,\n                fmt.Sprintf(\"%[2]d %[1]d\\n\", 11, 22)\n        will yield \"22, 11\", while\n                fmt.Sprintf(\"%[3]*[2].*[1]f\", 12.0, 2, 6),\n        equivalent to\n                fmt.Sprintf(\"%6.2f\", 12.0),\n        will yield \" 12.00\". Because an explicit index affects subsequent verbs,\n        this notation can be used to print the same values multiple times\n        by resetting the index for the first argument to be repeated:\n                fmt.Sprintf(\"%d %d %#[1]x %#x\", 16, 17)\n        will yield \"16 17 0x10 0x11\".\n\nThe notation chosen differs from that in C, but I believe it's easier to read\nand to remember (we're indexing the arguments), and compatibility with\nC's printf was never a strong goal anyway.\n\nWhile we're here, change the word \"field\" to \"arg\" or \"argument\" in the\ncode; it was being misused and was confusing.\n\nR=rsc, bradfitz, rogpeppe, minux.ma, peter.armitage\nCC=golang-dev\nhttps://codereview.appspot.com/9680043",
			"disapproval": false,
			"date": "2013-05-24 22:49:30.031700",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 9680043: fmt.Printf: introduce notation for random access to arg...",
	"created": "2013-05-22 22:45:34.434260",
	"patchsets": [
		1,
		12001,
		20001,
		29001
	],
	"modified": "2013-05-25 03:27:51.713970",
	"closed": true,
	"issue": 9680043
}