{
	"description": "net: close fds eagerly in DialTimeout\n\nIntegrates with the pollserver now.\n\nUses the old implementation on windows and plan9.\n\nFixes issue 2631",
	"cc": [
		"paul@vanbrouwershaven.com",
		"iant@google.com",
		"adg@golang.org",
		"bendaglish@gmail.com",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "paul@vanbrouwershaven.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"paul@vanbrouwershaven.com",
				"iant@google.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Unfortunately, I need to set the local address which can only be done with DialTCP for now.\n\nOn 2012/10/31 13:51:51, bradfitz wrote:\n> That would be one line of code but continues an API proliferation\n> precedent. Can't you just use DialTimeout or do you need to set the local\n> address?",
			"disapproval": false,
			"date": "2012-10-31 13:59:45.677650",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"paul@vanbrouwershaven.com",
				"iant@google.com",
				"adg@golang.org",
				"bendaglish@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/6815049/diff/5028/src/pkg/net/dial.go\nFile src/pkg/net/dial.go (right):\n\nhttps://codereview.appspot.com/6815049/diff/5028/src/pkg/net/dial.go#newcode53\nsrc/pkg/net/dial.go:53: // TODO(bradfitz): consider pushing the deadline down into the\nOn 2012/11/01 18:39:44, rsc wrote:\n> It doesn't need to be pushed into the actual DNS lookup, but please do push it\n> down into unexported resolveTCPAddr, resolveUDPAddr, etc. If the address is\n> \"1.2.3.4:80\" it would be nice not to race a timing goroutine against the parsing\n> of the IP address.\n\nDone.\n\nI'd actually started on this from the other direction and had a bunch of deadlines propagated down below but not hooked up yet.  I connected the remaining dots.\n\nhttps://codereview.appspot.com/6815049/diff/5028/src/pkg/net/dial.go#newcode152\nsrc/pkg/net/dial.go:152: var useDialTimeoutRace = runtime.GOOS == \"windows\" || runtime.GOOS == \"plan9\"\nOn 2012/11/01 18:39:44, rsc wrote:\n> Might as well make this const\n\nDone.\n\nhttps://codereview.appspot.com/6815049/diff/5028/src/pkg/net/tcpsock_plan9.go\nFile src/pkg/net/tcpsock_plan9.go (right):\n\nhttps://codereview.appspot.com/6815049/diff/5028/src/pkg/net/tcpsock_plan9.go#newcode48\nsrc/pkg/net/tcpsock_plan9.go:48: panic(\"Not implemented, but shouldn't get here. See dial.go\")\nOn 2012/11/01 18:39:44, rsc wrote:\n> panic(\"net.dialTCP: deadline not implemented on Plan 9\")\n\nDone.\n\nhttps://codereview.appspot.com/6815049/diff/5028/src/pkg/net/udpsock_plan9.go\nFile src/pkg/net/udpsock_plan9.go (right):\n\nhttps://codereview.appspot.com/6815049/diff/5028/src/pkg/net/udpsock_plan9.go#newcode132\nsrc/pkg/net/udpsock_plan9.go:132: panic(\"Not implemented, but shouldn't get here. See dial.go\")\nOn 2012/11/01 18:39:44, rsc wrote:\n> panic(\"net.dialUDP: deadline not implemented on Plan 9\")\n\nDone.",
			"disapproval": false,
			"date": "2012-11-02 09:35:02.391380",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Oct 29, 2012 at 3:32 PM, <paul@vanbrouwershaven.com> wrote:\r\n\r\n> I tested DialTimeout with this patch applied but it does not release the\r\n> file descriptor nor the tcp session when connecting to a non existing IP\r\n> address.\r\n>\r\n\r\nI found the problem.  Thanks for pointing it out.\r\n",
			"disapproval": false,
			"date": "2012-10-30 17:16:24.256160",
			"approval": false
		},
		{
			"sender": "paul@vanbrouwershaven.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"paul@vanbrouwershaven.com",
				"iant@google.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I tested this code and it has passed all my initial tests! Thanks for all the hard work I'm really happy that this one is fixed!\n\nNow it becomes the challenge to apply this same logic to DialTCP. Are there any plans to create a DialTCPTimeout?\n\nOn 2012/10/31 11:01:31, bradfitz wrote:\n> This is ready for review now.\n> \n> On Wed, Oct 31, 2012 at 12:01 PM, <mailto:bradfitz@golang.org> wrote:\n> \n> > Hello mailto:golang-dev@googlegroups.com, mailto:paul@vanbrouwershaven.com,\n> > mailto:iant@google.com, mailto:adg@golang.org (cc: mailto:golang-dev@googlegroups.com),\n> >\n> > Please take another look.\n> >\n> >\n> >\n> http://codereview.appspot.com/**6815049/%3Chttp://codereview.appspot.com/6815049/>\n> >",
			"disapproval": false,
			"date": "2012-10-31 13:46:50.500420",
			"approval": false
		},
		{
			"sender": "paul@vanbrouwershaven.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"paul@vanbrouwershaven.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I tested DialTimeout with this patch applied but it does not release the file descriptor nor the tcp session when connecting to a non existing IP address.\n\nConsole 1: (_, err := net.DialTimeout(\"tcp\", \"192.168.178.33:443\", 4*time.Second))\n\n2012/10/29 07:24:49 Start\n2012/10/29 07:24:53 dial tcp 192.168.178.33:443: i/o timeout\n2012/10/29 07:24:53 Sleep: 2500\n\nConsole 2: (loop of: \"netstat -tn | grep SYN_SENT | wc -l;\" / \"/usr/bin/lsof -n | grep a.out | grep IPv4 | wc -l;\")\n\nMon Oct 29 07:24:49 PDT 2012\n0\nMon Oct 29 07:24:50 PDT 2012\n1\n......\nMon Oct 29 07:25:55 PDT 2012\n1\nMon Oct 29 07:25:56 PDT 2012\n0\nMon Oct 29 07:25:58 PDT 2012",
			"disapproval": false,
			"date": "2012-10-29 14:32:39.360080",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-10-29 12:50:09.473830",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Oct 29, 2012 at 5:54 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> Thoughts?\r\n>\r\n> I don't entirely like how many parameters the internal functions socket and\r\n> internetSocket take, but they were already gross, and it's private, so I\r\n> don't mind too much.\r\n>\r\n> I toyed with keeping the parameter counts the same but taking advantage of\r\n> raddr being an inteface type (syscall.Sockaddr) and instead just shoving\r\n> through the deadline in an wider runtime-asserted interface type (e.g.\r\n> deadlineSockaddr), but that was too clever and hard to follow.\r\n>\r\n> This way at least is explicit.\r\n>\r\n> If this looks okay, I'll finish it (not operating systems and socket types).\r\n\r\n\r\nLooks reasonable to me.\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2012-10-29 16:36:07.257630",
			"approval": false
		},
		{
			"sender": "paul@vanbrouwershaven.com",
			"recipients": [
				"bradfitz@golang.org",
				"paul@vanbrouwershaven.com",
				"iant@google.com",
				"adg@golang.org",
				"bendaglish@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I get and error when applying patch set 7, applying the failed patch by hand does not solve all problems.\n\nHunk #1 succeeded at 162 (offset -1 lines).\nHunk #2 succeeded at 187 (offset -1 lines).\nHunk #3 succeeded at 332 (offset 4 lines).\npatching file src/pkg/net/iprawsock.go\npatching file src/pkg/net/iprawsock_plan9.go\npatching file src/pkg/net/iprawsock_posix.go\npatching file src/pkg/net/ipsock.go\nHunk #1 FAILED at 6.\nHunk #2 succeeded at 103 (offset 5 lines).\nHunk #3 succeeded at 122 (offset 5 lines).\n1 out of 3 hunks FAILED -- saving rejects to file src/pkg/net/ipsock.go.rej\n\n------------------------------------------------------------------------------\n--- src/pkg/net/ipsock.go\n+++ src/pkg/net/ipsock.go\n@@ -6,6 +6,8 @@\n\n package net\n\n+import \"time\"\n+\n var supportsIPv6, supportsIPv4map = probeIPv6Stack()\n\n func firstFavoriteAddr(filter func(IP) IP, addrs []string) (addr IP) {\n\n------------------------------------------------------------------------------\n\nAdding 'import \"time\"' to 'src/pkg/net/ipsock.go' will no solve the whole problem. Running all.bash causes the following error:\n\n# Checking API compatibility.\n2012/11/07 23:42:09 unknown kind in const \"useDialTimeoutRace\" (*ast.BinaryExpr): in BinaryExpr, unhandled type mismatch; left=\"string\", right=\"ideal-string\"\ngo tool api: exit status 1\n\n------------------------------------------------------------------------------\n\nPatch set 6 now causes the same error for adding 'import \"time\"' to 'src/pkg/net/ipsock.go'. Patching this file by hand makes the compiler runs fine for patch set 6.",
			"disapproval": false,
			"date": "2012-11-08 07:48:29.660670",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thoughts?\r\n\r\nI don't entirely like how many parameters the internal functions socket\r\nand internetSocket take, but they were already gross, and it's private, so\r\nI don't mind too much.\r\n\r\nI toyed with keeping the parameter counts the same but taking advantage of\r\nraddr being an inteface type (syscall.Sockaddr) and instead just shoving\r\nthrough the deadline in an wider runtime-asserted interface type (e.g.\r\ndeadlineSockaddr), but that was too clever and hard to follow.\r\n\r\nThis way at least is explicit.\r\n\r\nIf this looks okay, I'll finish it (not operating systems and socket types).\r\n\r\n\r\nOn Mon, Oct 29, 2012 at 1:50 PM, <bradfitz@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> net: close fds eagerly in DialTimeout\r\n>\r\n> WIP FOR DISCUSSION; THIS VERSION NOT FOR SUBMISSION\r\n>\r\n> Integrates with the pollserver now.\r\n>\r\n> Only currently tested on Linux and I've only plumbed through\r\n> TCP for now.  The rest will be done before submission, as well\r\n> as using the deadline for DNS resolution in DialTimeout.\r\n>\r\n> Fixes issue 2631\r\n>\r\n> Please review this at http://codereview.appspot.com/**6815049/<http://codereview.appspot.com/6815049/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/net/dial.go\r\n>   M src/pkg/net/dial_test.go\r\n>   M src/pkg/net/iprawsock_posix.go\r\n>   M src/pkg/net/ipsock_posix.go\r\n>   M src/pkg/net/sock_posix.go\r\n>   M src/pkg/net/tcpsock_posix.go\r\n>   M src/pkg/net/udpsock_posix.go\r\n>   M src/pkg/net/unixsock_posix.go\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-29 12:54:17.904650",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Oct 29, 2012 at 3:32 PM, <paul@vanbrouwershaven.com> wrote:\r\n\r\n> I tested DialTimeout with this patch applied but it does not release the\r\n> file descriptor nor the tcp session when connecting to a non existing IP\r\n> address.\r\n>\r\n\r\nIt shouldn't matter whether it exists or not.\r\n\r\nMy tests pass with the fix and fail without the fix, so I fixed something.\r\n\r\nBut adding some debug prints, I'm not seeing the explicit socket close I\r\nexpected, so something's still missing.  I bet the finalizers are closing\r\nmy sockets, which might explain why my tests pass but your single fd test\r\nfails.\r\n\r\nI'll look into it more and expand the tests.\r\n",
			"disapproval": false,
			"date": "2012-10-29 16:39:03.329750",
			"approval": false
		},
		{
			"sender": "paul@vanbrouwershaven.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"paul@vanbrouwershaven.com",
				"iant@google.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The best way to implement this would be by using a setter as it's an infrequent used parameter. I haven't seen setters on GO, so this may not be an option? \n\nTo continue testing on a broader scale I implemented a temporary DialTCPTimeout function in src/pkg/net/dial.go (see below) and till now the patch it's exactly doing what it should do!\n\nThe number of fd / SYN_SENT connections is dropped exactly to the number of concurrent sessions.\n\n--------------------\n// DialTCPTimeout acts like DialTCP but takes a timeout.\n// The timeout includes name resolution, if required.\nfunc DialTCPTimeout(net, laddr, raddr string, timeout time.Duration) (Conn, error) {\n    deadline := time.Now().Add(timeout)\n\tladdri, err := ResolveTCPAddr(\"tcp\", laddr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n    raddri, err := ResolveTCPAddr(\"tcp\", raddr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n    return dialTCP(net, laddri, raddri, deadline)\n}",
			"disapproval": false,
			"date": "2012-10-31 15:12:37.745290",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"paul@vanbrouwershaven.com",
				"iant@google.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6815049/diff/3009/src/pkg/net/dial.go\nFile src/pkg/net/dial.go (right):\n\nhttps://codereview.appspot.com/6815049/diff/3009/src/pkg/net/dial.go#newcode96\nsrc/pkg/net/dial.go:96: return dialAddr(net, addr, addri, time.Time{})\nvar deadline time.Time\nreturn dialAddr(net, addr, addri, deadline)",
			"disapproval": false,
			"date": "2012-10-31 07:36:23.166950",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I have a noDeadline variable in the latest version (not yet mailed), which\r\nis more clear.\r\n\r\nOn Wed, Oct 31, 2012 at 8:36 AM, <adg@golang.org> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/6815049/diff/3009/src/pkg/**net/dial.go<https://codereview.appspot.com/6815049/diff/3009/src/pkg/net/dial.go>\r\n> File src/pkg/net/dial.go (right):\r\n>\r\n> https://codereview.appspot.**com/6815049/diff/3009/src/pkg/**\r\n> net/dial.go#newcode96<https://codereview.appspot.com/6815049/diff/3009/src/pkg/net/dial.go#newcode96>\r\n> src/pkg/net/dial.go:96: return dialAddr(net, addr, addri, time.Time{})\r\n> var deadline time.Time\r\n> return dialAddr(net, addr, addri, deadline)\r\n>\r\n> https://codereview.appspot.**com/6815049/<https://codereview.appspot.com/6815049/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-31 08:22:20.686980",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is ready for review now.\r\n\r\nOn Wed, Oct 31, 2012 at 12:01 PM, <bradfitz@golang.org> wrote:\r\n\r\n> Hello golang-dev@googlegroups.com, paul@vanbrouwershaven.com,\r\n> iant@google.com, adg@golang.org (cc: golang-dev@googlegroups.com),\r\n>\r\n> Please take another look.\r\n>\r\n>\r\n> http://codereview.appspot.com/**6815049/<http://codereview.appspot.com/6815049/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-31 11:01:31.907680",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"paul@vanbrouwershaven.com",
				"iant@google.com",
				"adg@golang.org",
				"bendaglish@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Seems fine so far.\n\nhttps://codereview.appspot.com/6815049/diff/5028/src/pkg/net/dial.go\nFile src/pkg/net/dial.go (right):\n\nhttps://codereview.appspot.com/6815049/diff/5028/src/pkg/net/dial.go#newcode53\nsrc/pkg/net/dial.go:53: // TODO(bradfitz): consider pushing the deadline down into the\nIt doesn't need to be pushed into the actual DNS lookup, but please do push it down into unexported resolveTCPAddr, resolveUDPAddr, etc. If the address is \"1.2.3.4:80\" it would be nice not to race a timing goroutine against the parsing of the IP address.\n\nhttps://codereview.appspot.com/6815049/diff/5028/src/pkg/net/dial.go#newcode152\nsrc/pkg/net/dial.go:152: var useDialTimeoutRace = runtime.GOOS == \"windows\" || runtime.GOOS == \"plan9\"\nMight as well make this const\n\nhttps://codereview.appspot.com/6815049/diff/5028/src/pkg/net/tcpsock_plan9.go\nFile src/pkg/net/tcpsock_plan9.go (right):\n\nhttps://codereview.appspot.com/6815049/diff/5028/src/pkg/net/tcpsock_plan9.go#newcode48\nsrc/pkg/net/tcpsock_plan9.go:48: panic(\"Not implemented, but shouldn't get here. See dial.go\")\npanic(\"net.dialTCP: deadline not implemented on Plan 9\")\n\nhttps://codereview.appspot.com/6815049/diff/5028/src/pkg/net/udpsock_plan9.go\nFile src/pkg/net/udpsock_plan9.go (right):\n\nhttps://codereview.appspot.com/6815049/diff/5028/src/pkg/net/udpsock_plan9.go#newcode132\nsrc/pkg/net/udpsock_plan9.go:132: panic(\"Not implemented, but shouldn't get here. See dial.go\")\npanic(\"net.dialUDP: deadline not implemented on Plan 9\")",
			"disapproval": false,
			"date": "2012-11-01 18:39:44.285890",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"paul@vanbrouwershaven.com",
				"iant@google.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, paul@vanbrouwershaven.com, iant@google.com, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-31 11:01:07.276910",
			"approval": false
		},
		{
			"sender": "BenDaglish@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"paul@vanbrouwershaven.com",
				"iant@google.com",
				"adg@golang.org",
				"BenDaglish@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Just to confirm, I had the same problem, and this patch works fine on Centos5 x86_64",
			"disapproval": false,
			"date": "2012-10-31 22:32:58.421360",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "That would be one line of code but continues an API proliferation\r\nprecedent. Can't you just use DialTimeout or do you need to set the local\r\naddress?\r\nOn Oct 31, 2012 2:46 PM, <paul@vanbrouwershaven.com> wrote:\r\n\r\n> I tested this code and it has passed all my initial tests! Thanks for\r\n> all the hard work I'm really happy that this one is fixed!\r\n>\r\n> Now it becomes the challenge to apply this same logic to DialTCP. Are\r\n> there any plans to create a DialTCPTimeout?\r\n>\r\n> On 2012/10/31 11:01:31, bradfitz wrote:\r\n>\r\n>> This is ready for review now.\r\n>>\r\n>\r\n>  On Wed, Oct 31, 2012 at 12:01 PM, <mailto:bradfitz@golang.org> wrote:\r\n>>\r\n>\r\n>  > Hello mailto:golang-dev@**googlegroups.com<golang-dev@googlegroups.com>\r\n>> ,\r\n>>\r\n> mailto:paul@vanbrouwershaven.**com <paul@vanbrouwershaven.com>,\r\n>\r\n>> > mailto:iant@google.com, mailto:adg@golang.org (cc:\r\n>>\r\n> mailto:golang-dev@**googlegroups.com <golang-dev@googlegroups.com>),\r\n>\r\n>> >\r\n>> > Please take another look.\r\n>> >\r\n>> >\r\n>> >\r\n>>\r\n>\r\n> http://codereview.appspot.com/****6815049/%3Chttp://**\r\n> codereview.appspot.com/**6815049/<http://codereview.appspot.com/**6815049/%3Chttp://codereview.appspot.com/6815049/>\r\n> >\r\n>\r\n>> >\r\n>>\r\n>\r\n>\r\n> https://codereview.appspot.**com/6815049/<https://codereview.appspot.com/6815049/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-31 13:51:51.254590",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"paul@vanbrouwershaven.com",
				"iant@google.com",
				"adg@golang.org",
				"bendaglish@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=20319e86e3c9 ***\n\nnet: close fds eagerly in DialTimeout\n\nIntegrates with the pollserver now.\n\nUses the old implementation on windows and plan9.\n\nFixes issue 2631\n\nR=paul, iant, adg, bendaglish, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6815049",
			"disapproval": false,
			"date": "2012-11-08 16:35:19.667680",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Oct 31, 2012 at 4:12 PM, <paul@vanbrouwershaven.com> wrote:\r\n\r\n> The best way to implement this would be by using a setter as it's an\r\n> infrequent used parameter. I haven't seen setters on GO, so this may not\r\n> be an option?\r\n>\r\n\r\nSee API discussion at the bottom of semi-related\r\nhttp://code.google.com/p/go/issues/detail?id=3610\r\n",
			"disapproval": false,
			"date": "2012-10-31 15:14:39.995030",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"paul@vanbrouwershaven.com",
				"iant@google.com",
				"adg@golang.org",
				"bendaglish@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello paul@vanbrouwershaven.com, iant@google.com, adg@golang.org, bendaglish@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-02 09:33:49.099830",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 6815049: net: close fds eagerly in DialTimeout",
	"created": "2012-10-29 12:49:56.043080",
	"patchsets": [
		1,
		1002,
		3009,
		10001,
		11002,
		5028,
		15001,
		3012
	],
	"modified": "2012-11-02 09:33:49.099830",
	"closed": true,
	"issue": 6815049
}