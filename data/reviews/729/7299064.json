{
	"description": "bytes: annotate assembly functions with //go:noescape",
	"cc": [
		"golang-dev@googlegroups.com",
		"agl@golang.org",
		"bradfitz@golang.org",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The noescape tag only matters when called with possibly-stack-allocated\r\nvalues.\r\n\r\nThe data in math/big is never stack allocated: the []Word slices are always\r\nallocated with make. So the tag isn't doing anything useful there, and I\r\nwould leave it out until it's needed.\r\n\r\nIn Bytes, it's definitely doing something useful, and it's worth keeping.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-02-08 04:11:47.196500",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nPlease remove the math/big benchmarks from the CL description.",
			"disapproval": false,
			"date": "2013-02-08 20:21:28.128810",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-02-07 20:18:43.308520",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Seems fine to me.\r\n\r\nI don't see how this could make anything worse, benchmark noise\r\nnotwithstanding.\r\n\r\n\r\nOn Thu, Feb 7, 2013 at 12:18 PM, <minux.ma@gmail.com> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> bytes, math/big: annotate assembly functions with //go:noescape\r\n>\r\n> benchmark                      old ns/op    new ns/op    delta\r\n> BenchmarkAddVV_1                       6            6   +2.07%\r\n> BenchmarkAddVV_2                       7            7   +3.98%\r\n> BenchmarkAddVV_3                       8           10  +19.05%\r\n> BenchmarkAddVV_4                       9            8   -1.77%\r\n> BenchmarkAddVV_5                       9            9   -0.75%\r\n> BenchmarkAddVV_1e1                    14           13   -0.71%\r\n> BenchmarkAddVV_1e2                   101           95   -5.15%\r\n> BenchmarkAddVV_1e3                   926          928   +0.22%\r\n> BenchmarkAddVV_1e4                 10733        10307   -3.97%\r\n> BenchmarkAddVV_1e5                128413       127793   -0.48%\r\n> BenchmarkAddVW_1                       5            5   +0.00%\r\n> BenchmarkAddVW_2                       5            5   +0.00%\r\n> BenchmarkAddVW_3                       6            6   +3.21%\r\n> BenchmarkAddVW_4                       7            7   +4.33%\r\n> BenchmarkAddVW_5                       8            8   +0.12%\r\n> BenchmarkAddVW_1e1                    11           12   +0.84%\r\n> BenchmarkAddVW_1e2                    80           84   +4.84%\r\n> BenchmarkAddVW_1e3                   777          776   -0.13%\r\n> BenchmarkAddVW_1e4                  8311         8222   -1.07%\r\n> BenchmarkAddVW_1e5                101832        98794   -2.98%\r\n> BenchmarkAddMulVVW_1                   6            5   -1.98%\r\n> BenchmarkAddMulVVW_2                   8            8   +0.59%\r\n> BenchmarkAddMulVVW_3                  10           10   +0.00%\r\n> BenchmarkAddMulVVW_4                  13           13   -0.74%\r\n> BenchmarkAddMulVVW_5                  15           16   +2.53%\r\n> BenchmarkAddMulVVW_1e1                30           30   +0.00%\r\n> BenchmarkAddMulVVW_1e2               225          226   +0.44%\r\n> BenchmarkAddMulVVW_1e3              2272         2256   -0.70%\r\n> BenchmarkAddMulVVW_1e4             23188        22217   -4.19%\r\n> BenchmarkAddMulVVW_1e5            225112       220366   -2.11%\r\n> BenchmarkBitLen0                       3            3   -6.12%\r\n> BenchmarkBitLen1                       2            2   -5.00%\r\n> BenchmarkBitLen2                       2            2   -3.11%\r\n> BenchmarkBitLen3                       2            2   -0.40%\r\n> BenchmarkBitLen4                       2            2   +0.81%\r\n> BenchmarkBitLen5                       2            2   +0.81%\r\n> BenchmarkBitLen8                       2            2   +0.41%\r\n> BenchmarkBitLen9                       2            2   +0.41%\r\n> BenchmarkBitLen16                      2            2   +0.00%\r\n> BenchmarkBitLen17                      2            2   +0.00%\r\n> BenchmarkBitLen31                      2            2   +0.41%\r\n> BenchmarkGCD10x10                   2012         2011   -0.05%\r\n> BenchmarkGCD10x100                  2130         2156   +1.22%\r\n> BenchmarkGCD10x1000                 2565         2572   +0.27%\r\n> BenchmarkGCD10x10000                6706         6240   -6.95%\r\n> BenchmarkGCD10x100000              46163        46719   +1.20%\r\n> BenchmarkGCD100x100                12110        12077   -0.27%\r\n> BenchmarkGCD100x1000               13324        13168   -1.17%\r\n> BenchmarkGCD100x10000              26380        27175   +3.01%\r\n> BenchmarkGCD100x100000            149445       148363   -0.72%\r\n> BenchmarkGCD1000x1000             142089       134634   -5.25%\r\n> BenchmarkGCD1000x10000            156219       152646   -2.29%\r\n> BenchmarkGCD1000x100000           334334       333413   -0.28%\r\n> BenchmarkGCD10000x10000          2902996      3020031   +4.03%\r\n> BenchmarkGCD10000x100000         3524949      3584233   +1.68%\r\n> BenchmarkGCD100000x100000      174171236    173973159   -0.11%\r\n> BenchmarkHilbert                 5135422      5221518   +1.68%\r\n> BenchmarkBitset                       74           73   -1.47%\r\n> BenchmarkBitsetNeg                   142          139   -2.11%\r\n> BenchmarkBitsetOrig                  347          360   +3.75%\r\n> BenchmarkBitsetNegOrig               519          521   +0.39%\r\n> BenchmarkMul                    30803483     31331871   +1.72%\r\n> BenchmarkScanPi                   164051       165827   +1.08%\r\n> BenchmarkStringPiParallel         266444       267620   +0.44%\r\n> BenchmarkScan10Base2                 485          500   +3.09%\r\n> BenchmarkScan100Base2               3773         3796   +0.61%\r\n> BenchmarkScan1000Base2             38514        38351   -0.42%\r\n> BenchmarkScan10000Base2           600564       574299   -4.37%\r\n> BenchmarkScan100000Base2        26443460     26579269   +0.51%\r\n> BenchmarkScan10Base8                 275          260   -5.45%\r\n> BenchmarkScan100Base8               1474         1493   +1.29%\r\n> BenchmarkScan1000Base8             15408        15490   +0.53%\r\n> BenchmarkScan10000Base8           364393       360190   -1.15%\r\n> BenchmarkScan100000Base8        24411901     24642391   +0.94%\r\n> BenchmarkScan10Base10                246          250   +1.63%\r\n> BenchmarkScan100Base10              1384         1382   -0.14%\r\n> BenchmarkScan1000Base10            14155        14793   +4.51%\r\n> BenchmarkScan10000Base10          345748       350300   +1.32%\r\n> BenchmarkScan100000Base10       24878133     24812274   -0.26%\r\n> BenchmarkScan10Base16                260          255   -1.92%\r\n> BenchmarkScan100Base16              1525         1500   -1.64%\r\n> BenchmarkScan1000Base16            15865        15188   -4.27%\r\n> BenchmarkScan10000Base16          391310       366633   -6.31%\r\n> BenchmarkScan100000Base16       25348078     25632928   +1.12%\r\n> BenchmarkString10Base2               361          305  -15.51%\r\n> BenchmarkString100Base2             1294         1255   -3.01%\r\n> BenchmarkString1000Base2           10214        10217   +0.03%\r\n> BenchmarkString10000Base2          98935        98522   -0.42%\r\n> BenchmarkString100000Base2       1004848       950703   -5.39%\r\n> BenchmarkString10Base8               259          257   -0.77%\r\n> BenchmarkString100Base8              601          606   +0.83%\r\n> BenchmarkString1000Base8            3972         3936   -0.91%\r\n> BenchmarkString10000Base8          37183        36834   -0.94%\r\n> BenchmarkString100000Base8        343546       342964   -0.17%\r\n> BenchmarkString10Base10              434          432   -0.46%\r\n> BenchmarkString100Base10            1532         1434   -6.40%\r\n> BenchmarkString1000Base10           8883         8003   -9.91%\r\n> BenchmarkString10000Base10         33802        33981   +0.53%\r\n> BenchmarkString100000Base10     12591633     12067671   -4.16%\r\n> BenchmarkString10Base16              227          224   -1.32%\r\n> BenchmarkString100Base16             519          485   -6.55%\r\n> BenchmarkString1000Base16           2994         2795   -6.65%\r\n> BenchmarkString10000Base16         27324        25758   -5.73%\r\n> BenchmarkString100000Base16       249363       238719   -4.27%\r\n> BenchmarkLeafSize0               2849174      2867741   +0.65%\r\n> BenchmarkLeafSize1                 47549        47213   -0.71%\r\n> BenchmarkLeafSize2                 47978        46200   -3.71%\r\n> BenchmarkLeafSize3                198875       194276   -2.31%\r\n> BenchmarkLeafSize4                 47698        45725   -4.14%\r\n> BenchmarkLeafSize5                246473       241683   -1.94%\r\n> BenchmarkLeafSize6                198940       194388   -2.29%\r\n> BenchmarkLeafSize7                135385       134520   -0.64%\r\n> BenchmarkLeafSize8                 47192        45615   -3.34%\r\n> BenchmarkLeafSize9                290060       273046   -5.87%\r\n> BenchmarkLeafSize10               245592       240901   -1.91%\r\n> BenchmarkLeafSize11               236018       233645   -1.01%\r\n> BenchmarkLeafSize12               200026       193037   -3.49%\r\n> BenchmarkLeafSize13               190719       179465   -5.90%\r\n> BenchmarkLeafSize14               143404       130896   -8.72%\r\n> BenchmarkLeafSize15                97642        94239   -3.49%\r\n> BenchmarkLeafSize16                51404        45457  -11.57%\r\n> BenchmarkLeafSize32                57565        50879  -11.61%\r\n> BenchmarkLeafSize64                75488        74740   -0.99%\r\n> BenchmarkExp3Power0x10               529          516   -2.46%\r\n> BenchmarkExp3Power0x40               615          586   -4.72%\r\n> BenchmarkExp3Power0x100              893          890   -0.34%\r\n> BenchmarkExp3Power0x400             2124         2102   -1.04%\r\n> BenchmarkExp3Power0x1000           11955        11874   -0.68%\r\n> BenchmarkExp3Power0x4000           96945       111122  +14.62%\r\n> BenchmarkExp3Power0x10000         917072       900930   -1.76%\r\n> BenchmarkExp3Power0x40000        8403059      8002261   -4.77%\r\n> BenchmarkExp3Power0x100000      80384815     75655918   -5.88%\r\n> BenchmarkExp3Power0x400000     674879694    663462054   -1.69%\r\n>\r\n> Please review this at https://codereview.appspot.**com/7299064/<https://codereview.appspot.com/7299064/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/bytes/bytes.go\r\n>   M src/pkg/bytes/bytes_decl.go\r\n>   M src/pkg/math/big/arith_decl.go\r\n>\r\n>\r\n> Index: src/pkg/bytes/bytes.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/bytes/bytes.go\r\n> +++ b/src/pkg/bytes/bytes.go\r\n> @@ -37,10 +37,6 @@\r\n>         return 0\r\n>  }\r\n>\r\n> -// Equal returns a boolean reporting whether a == b.\r\n> -// A nil argument is equivalent to an empty slice.\r\n> -func Equal(a, b []byte) bool\r\n> -\r\n>  func equalPortable(a, b []byte) bool {\r\n>         if len(a) != len(b) {\r\n>                 return false\r\n> Index: src/pkg/bytes/bytes_decl.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/bytes/bytes_decl.go\r\n> +++ b/src/pkg/bytes/bytes_decl.go\r\n> @@ -4,5 +4,13 @@\r\n>\r\n>  package bytes\r\n>\r\n> +//go:noescape\r\n> +\r\n>  // IndexByte returns the index of the first instance of c in s, or -1 if\r\n> c is not present in s.\r\n>  func IndexByte(s []byte, c byte) int // asm_$GOARCH.s\r\n> +\r\n> +//go:noescape\r\n> +\r\n> +// Equal returns a boolean reporting whether a == b.\r\n> +// A nil argument is equivalent to an empty slice.\r\n> +func Equal(a, b []byte) bool // asm_$GOARCH.s\r\n> Index: src/pkg/math/big/arith_decl.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/math/big/arith_decl.**go\r\n> +++ b/src/pkg/math/big/arith_decl.**go\r\n> @@ -5,15 +5,35 @@\r\n>  package big\r\n>\r\n>  // implemented in arith_$GOARCH.s\r\n> +\r\n>  func mulWW(x, y Word) (z1, z0 Word)\r\n>  func divWW(x1, x0, y Word) (q, r Word)\r\n> +\r\n> +//go:noescape\r\n>  func addVV(z, x, y []Word) (c Word)\r\n> +\r\n> +//go:noescape\r\n>  func subVV(z, x, y []Word) (c Word)\r\n> +\r\n> +//go:noescape\r\n>  func addVW(z, x []Word, y Word) (c Word)\r\n> +\r\n> +//go:noescape\r\n>  func subVW(z, x []Word, y Word) (c Word)\r\n> +\r\n> +//go:noescape\r\n>  func shlVU(z, x []Word, s uint) (c Word)\r\n> +\r\n> +//go:noescape\r\n>  func shrVU(z, x []Word, s uint) (c Word)\r\n> +\r\n> +//go:noescape\r\n>  func mulAddVWW(z, x []Word, y, r Word) (c Word)\r\n> +\r\n> +//go:noescape\r\n>  func addMulVVW(z, x []Word, y Word) (c Word)\r\n> +\r\n> +//go:noescape\r\n>  func divWVW(z []Word, xn Word, x []Word, y Word) (r Word)\r\n> +\r\n>  func bitLen(x Word) (n int)\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-07 20:26:25.694440",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "this is a RFC CL as i can't see clear sign of improvements in math/big.\r\nhowever, i'd expect some speedup for the bytes change.\r\n\r\nbtw, we also have some assembly functions in go.crypto sub-repository,\r\nshould I also change them to use the new annotation?\r\n",
			"disapproval": false,
			"date": "2013-02-07 20:21:48.868120",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Feb 7, 2013 at 3:21 PM, minux <minux.ma@gmail.com> wrote:\r\n> this is a RFC CL as i can't see clear sign of improvements in math/big.\r\n> however, i'd expect some speedup for the bytes change.\r\n\r\nHave you tried seeing how much noise there is between two runs of the\r\nsame code? If the noise is high you may need to switch off TurboBoost\r\n(if you're on an Intel system with it, or else other platforms have\r\nsomething similar).\r\n\r\n> btw, we also have some assembly functions in go.crypto sub-repository,\r\n> should I also change them to use the new annotation?\r\n\r\nI was planning to at some point, so LGTM if you beat me to it.\r\n\r\n\r\nCheers\r\n\r\nAGL\r\n",
			"disapproval": false,
			"date": "2013-02-07 20:23:46.418900",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\r\nReverted the change in math/big.\r\n",
			"disapproval": false,
			"date": "2013-02-08 07:55:28.396290",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 8, 2013 at 4:23 AM, Adam Langley <agl@golang.org> wrote:\r\n\r\n> On Thu, Feb 7, 2013 at 3:21 PM, minux <minux.ma@gmail.com> wrote:\r\n> > this is a RFC CL as i can't see clear sign of improvements in math/big.\r\n> > however, i'd expect some speedup for the bytes change.\r\n>\r\n> Have you tried seeing how much noise there is between two runs of the\r\n> same code? If the noise is high you may need to switch off TurboBoost\r\n> (if you're on an Intel system with it, or else other platforms have\r\n> something similar).\r\n>\r\nthanks, i will re-benchmark on linux later which i think i could better\r\ncontrol the cpu governor.\r\n",
			"disapproval": false,
			"date": "2013-02-07 20:35:27.587470",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=3c9d355fba18 ***\n\nbytes: annotate assembly functions with //go:noescape\n\nR=golang-dev, agl, bradfitz, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/7299064",
			"disapproval": false,
			"date": "2013-02-09 16:08:42.532870",
			"approval": false
		}
	],
	"owner_email": "minux.ma@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "minux",
	"subject": "code review 7299064: bytes, math/big: annotate assembly functions with //go:...",
	"created": "2013-02-07 19:40:22.898970",
	"patchsets": [
		1,
		2001,
		5001,
		9001,
		3,
		10003
	],
	"modified": "2013-02-09 16:08:46.815370",
	"closed": true,
	"issue": 7299064
}