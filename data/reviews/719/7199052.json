{
	"description": "exp/ssa: (#2 of 5): core utilities\n\nThis CL includes the implementation of Literal, all the\nValue.String and Instruction.String methods, the sanity\nchecker, and other misc utilities.",
	"cc": [
		"gri@google.com",
		"iant@google.com",
		"iant@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "iant@golang.org",
			"recipients": [
				"adonovan@google.com",
				"gri@google.com",
				"iant@google.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "A lot of files seem to have dropped out of this CL.",
			"disapproval": false,
			"date": "2013-01-25 16:07:30.161100",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@google.com",
				"iant@google.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7199052/diff/5001/src/pkg/exp/ssa/print.go\nFile src/pkg/exp/ssa/print.go (right):\n\nhttps://codereview.appspot.com/7199052/diff/5001/src/pkg/exp/ssa/print.go#newcode23\nsrc/pkg/exp/ssa/print.go:23: // references to Functions (including methods) and Globals, the\nOn 2013/01/25 05:33:02, iant wrote:\n> You can have cross-package references to types and consts, too.\n\nYes, but types are not SSA values and constants (Literal) do are not belong to any particular package.  (A Package has a map[string]*Literal for each 'const' decl but the Literal itself doesn't know about this.)\n\nSo only Function and Global concern us here.\n\nhttps://codereview.appspot.com/7199052/diff/5001/src/pkg/exp/ssa/print.go#newcode48\nsrc/pkg/exp/ssa/print.go:48: return fmt.Sprintf(\"literal %s rep=%s\", v.Name(), reflect.TypeOf(v.Value))\nOn 2013/01/25 05:33:02, iant wrote:\n> suggest rep=%T and just passing v.Value rather than calling reflect.Typeof\n> yourself.\n\nOh, that's nice.  Done everywhere.\n\nhttps://codereview.appspot.com/7199052/diff/5001/src/pkg/exp/ssa/print.go#newcode326\nsrc/pkg/exp/ssa/print.go:326: // Package.String()\nOn 2013/01/25 05:33:02, iant wrote:\n> Not sure this comment adds much here.\n\nDeleted.",
			"disapproval": false,
			"date": "2013-01-25 15:04:44.472890",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"adonovan@google.com",
				"gri@google.com",
				"iant@google.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7199052/diff/5001/src/pkg/exp/ssa/sanity.go\nFile src/pkg/exp/ssa/sanity.go (right):\n\nhttps://codereview.appspot.com/7199052/diff/5001/src/pkg/exp/ssa/sanity.go#newcode60\nsrc/pkg/exp/ssa/sanity.go:60: var buf bytes.Buffer\nOn 2013/01/25 15:37:51, adonovan wrote:\n> \n> (Curious: unlike C's fprintf/fputs, Fprintf/WriteString to os.Stderr are not\n> buffered.  Does \"Go style\" typically use a bytes.Buffer to avoid extra write(2)\n> calls or just ignore this until it shows up in a profile?)\n\nA bit of both, I suppose.  (In C stderr is unbuffered by default too, stdout is line buffered.)",
			"disapproval": false,
			"date": "2013-01-25 16:40:49.057040",
			"approval": true
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@google.com",
				"iant@google.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7199052/diff/5001/src/pkg/exp/ssa/sanity.go\nFile src/pkg/exp/ssa/sanity.go (right):\n\nhttps://codereview.appspot.com/7199052/diff/5001/src/pkg/exp/ssa/sanity.go#newcode23\nsrc/pkg/exp/ssa/sanity.go:23: // are written to reporter if non-nil, os.Stderr otherwise .  Some\nOn 2013/01/25 05:33:02, iant wrote:\n> s/otherwise ./otherwise./\n\nDone.\n\nhttps://codereview.appspot.com/7199052/diff/5001/src/pkg/exp/ssa/sanity.go#newcode60\nsrc/pkg/exp/ssa/sanity.go:60: var buf bytes.Buffer\nOn 2013/01/25 05:33:02, iant wrote:\n> Why do you use the bytes.Buffer here?  Why not always write directly to\n> s.reporter?\n\nIt's a legacy of when reporter was a callback.  Changed as suggested.\n\n(Curious: unlike C's fprintf/fputs, Fprintf/WriteString to os.Stderr are not buffered.  Does \"Go style\" typically use a bytes.Buffer to avoid extra write(2) calls or just ignore this until it shows up in a profile?)\n\nhttps://codereview.appspot.com/7199052/diff/5001/src/pkg/exp/ssa/util.go\nFile src/pkg/exp/ssa/util.go (right):\n\nhttps://codereview.appspot.com/7199052/diff/5001/src/pkg/exp/ssa/util.go#newcode20\nsrc/pkg/exp/ssa/util.go:20: for {\nOn 2013/01/25 05:33:02, iant wrote:\n> This function uses both a loop and a recursive call.  That seems like overkill. \n> Won't it always break out of the loop the second time around?\n\nI wrote that while coming down from an unusually heavy night on the crack-pipe.  (I was turning a tailcall into a loop but passed out halfway, leaving both.)\n\nhttps://codereview.appspot.com/7199052/diff/5001/src/pkg/exp/ssa/util.go#newcode36\nsrc/pkg/exp/ssa/util.go:36: case *ast.LabeledStmt:\nOn 2013/01/25 05:33:02, iant wrote:\n> If the last statement is a label, then it would seem that there could be a goto\n> to that label, in which case the last statement in the function isn't quite a\n> return statement at all.  But I'm not sure what you are using this function for.\n\nThis function is used only as part of a temporary workaround for the fact that the typechecker doesn't yet ensure all the (non-type-related) integrity properties such as control-flow integrity, e.g. no falling off the end of a non-void function.\n\nSo hasReturn would (correctly) return false for this (illegal) function:\n  func f() int {goto L; L:}\n\nBut I found a way to implement this check on the CFG rather than the AST, so I no longer need this function.\n\nhttps://codereview.appspot.com/7199052/diff/5001/src/pkg/exp/ssa/util.go#newcode65\nsrc/pkg/exp/ssa/util.go:65: if typ, ok := typ.(*types.NamedType); ok {\nOn 2013/01/25 05:33:02, iant wrote:\n> It's a bit subtle to use the name \"typ\" for both the parameter and for the\n> variable in this if statement.  It looks at first glance like typ will always be\n> nil in the next statement.  I suggest using a different name in the if\n> statement.\n\nFWIW, this is a copy of a function in go/types which I suggest be exported.  Both gri and I make heavy use of the \"x := x.(type)\" trick to avoid the need to come up with original names.\n\nIMHO the only downside is that the inner 'typ' hides the outer so that if you want the interface (not concrete) value again you are implicitly reconstructing it.  But it's hard for me to believe this cost is really measurable.",
			"disapproval": false,
			"date": "2013-01-25 15:37:50.947000",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@google.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@google.com, iant@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-01-24 20:58:20.610060",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"adonovan@google.com",
				"gri@google.com",
				"iant@google.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7199052/diff/5001/src/pkg/exp/ssa/print.go\nFile src/pkg/exp/ssa/print.go (right):\n\nhttps://codereview.appspot.com/7199052/diff/5001/src/pkg/exp/ssa/print.go#newcode23\nsrc/pkg/exp/ssa/print.go:23: // references to Functions (including methods) and Globals, the\nYou can have cross-package references to types and consts, too.\n\nhttps://codereview.appspot.com/7199052/diff/5001/src/pkg/exp/ssa/print.go#newcode48\nsrc/pkg/exp/ssa/print.go:48: return fmt.Sprintf(\"literal %s rep=%s\", v.Name(), reflect.TypeOf(v.Value))\nsuggest rep=%T and just passing v.Value rather than calling reflect.Typeof yourself.\n\nhttps://codereview.appspot.com/7199052/diff/5001/src/pkg/exp/ssa/print.go#newcode326\nsrc/pkg/exp/ssa/print.go:326: // Package.String()\nNot sure this comment adds much here.\n\nhttps://codereview.appspot.com/7199052/diff/5001/src/pkg/exp/ssa/sanity.go\nFile src/pkg/exp/ssa/sanity.go (right):\n\nhttps://codereview.appspot.com/7199052/diff/5001/src/pkg/exp/ssa/sanity.go#newcode23\nsrc/pkg/exp/ssa/sanity.go:23: // are written to reporter if non-nil, os.Stderr otherwise .  Some\ns/otherwise ./otherwise./\n\nhttps://codereview.appspot.com/7199052/diff/5001/src/pkg/exp/ssa/sanity.go#newcode60\nsrc/pkg/exp/ssa/sanity.go:60: var buf bytes.Buffer\nWhy do you use the bytes.Buffer here?  Why not always write directly to s.reporter?\n\nhttps://codereview.appspot.com/7199052/diff/5001/src/pkg/exp/ssa/util.go\nFile src/pkg/exp/ssa/util.go (right):\n\nhttps://codereview.appspot.com/7199052/diff/5001/src/pkg/exp/ssa/util.go#newcode20\nsrc/pkg/exp/ssa/util.go:20: for {\nThis function uses both a loop and a recursive call.  That seems like overkill.  Won't it always break out of the loop the second time around?\n\nhttps://codereview.appspot.com/7199052/diff/5001/src/pkg/exp/ssa/util.go#newcode36\nsrc/pkg/exp/ssa/util.go:36: case *ast.LabeledStmt:\nIf the last statement is a label, then it would seem that there could be a goto to that label, in which case the last statement in the function isn't quite a return statement at all.  But I'm not sure what you are using this function for.\n\nhttps://codereview.appspot.com/7199052/diff/5001/src/pkg/exp/ssa/util.go#newcode65\nsrc/pkg/exp/ssa/util.go:65: if typ, ok := typ.(*types.NamedType); ok {\nIt's a bit subtle to use the name \"typ\" for both the parameter and for the variable in this if statement.  It looks at first glance like typ will always be nil in the next statement.  I suggest using a different name in the if statement.",
			"disapproval": false,
			"date": "2013-01-25 05:33:02.331480",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@google.com",
				"iant@google.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=7f6a24ca6460 ***\n\nexp/ssa: (#2 of 5): core utilities\n\nThis CL includes the implementation of Literal, all the\nValue.String and Instruction.String methods, the sanity\nchecker, and other misc utilities.\n\nR=gri, iant, iant\nCC=golang-dev\nhttps://codereview.appspot.com/7199052",
			"disapproval": false,
			"date": "2013-01-28 23:06:18.312390",
			"approval": false
		}
	],
	"owner_email": "adonovan@google.com",
	"private": false,
	"base_url": "",
	"owner": "adonovan",
	"subject": "code review 7199052: exp/ssa: (#2 of 5): core utilities",
	"created": "2013-01-24 20:55:28.477090",
	"patchsets": [
		1,
		2001,
		5001,
		3005,
		13001,
		14001,
		16001
	],
	"modified": "2013-01-28 23:06:19.268970",
	"closed": true,
	"issue": 7199052
}