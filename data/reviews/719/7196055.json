{
	"description": "oauth/jwt: Added the \"typ\" field to JWT. Also added support for private claim names(http://self-iss\u2026",
	"cc": [
		"adg@google.com",
		"sledbetter@google.com",
		"adg@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "hattar@google.com",
			"recipients": [
				"hattar@google.com",
				"adg@google.com",
				"sledbetter@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please ignore the other issues I created earlier. Sorry for the confusion. It took me a couple of tries to figure out how to upload the files  properly.",
			"disapproval": false,
			"date": "2013-01-25 14:52:22.852290",
			"approval": false
		},
		{
			"sender": "sledbetter@google.com",
			"recipients": [
				"hattar@google.com",
				"adg@google.com",
				"sledbetter@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7196055/diff/1/oauth/jwt/jwt.go\nFile oauth/jwt/jwt.go (right):\n\nhttps://codereview.appspot.com/7196055/diff/1/oauth/jwt/jwt.go#newcode150\noauth/jwt/jwt.go:150: // Marshal private claim set and then merge it into the b\ns/merge it into/append to/\n\nhttps://codereview.appspot.com/7196055/diff/1/oauth/jwt/jwt.go#newcode155\noauth/jwt/jwt.go:155: j := b[0:end] // Remove the last closing curley bracket.\ncurly\n\nhttps://codereview.appspot.com/7196055/diff/1/oauth/jwt/jwt.go#newcode158\noauth/jwt/jwt.go:158: if end == -1 {\nend hasn't changed, do you need another computation here to generate another end value?\n\nhttps://codereview.appspot.com/7196055/diff/1/oauth/jwt/jwt_test.go\nFile oauth/jwt/jwt_test.go (right):\n\nhttps://codereview.appspot.com/7196055/diff/1/oauth/jwt/jwt_test.go#newcode223\noauth/jwt/jwt_test.go:223: for _, testCase := range testCases {\nshould you move the creation of c in here so each test case uses a new (untouched by previous encode?) claimSet?",
			"disapproval": false,
			"date": "2013-01-25 21:34:26.034580",
			"approval": false
		},
		{
			"sender": "hattar@google.com",
			"recipients": [
				"hattar@google.com",
				"adg@google.com",
				"sledbetter@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7196055/diff/1/oauth/jwt/jwt.go\nFile oauth/jwt/jwt.go (right):\n\nhttps://codereview.appspot.com/7196055/diff/1/oauth/jwt/jwt.go#newcode150\noauth/jwt/jwt.go:150: // Marshal private claim set and then merge it into the b\nOn 2013/01/25 21:34:26, sledbetter wrote:\n> s/merge it into/append to/\n\nDone.\n\nhttps://codereview.appspot.com/7196055/diff/1/oauth/jwt/jwt.go#newcode155\noauth/jwt/jwt.go:155: j := b[0:end] // Remove the last closing curley bracket.\nOn 2013/01/25 21:34:26, sledbetter wrote:\n> curly\n\nDone.\n\nhttps://codereview.appspot.com/7196055/diff/1/oauth/jwt/jwt.go#newcode158\noauth/jwt/jwt.go:158: if end == -1 {\nOn 2013/01/25 21:34:26, sledbetter wrote:\n> end hasn't changed, do you need another computation here to generate another end\n> value?\n\nCopy/paste problem! Fixed the if condition.\n\nhttps://codereview.appspot.com/7196055/diff/1/oauth/jwt/jwt_test.go\nFile oauth/jwt/jwt_test.go (right):\n\nhttps://codereview.appspot.com/7196055/diff/1/oauth/jwt/jwt_test.go#newcode223\noauth/jwt/jwt_test.go:223: for _, testCase := range testCases {\nOn 2013/01/25 21:34:26, sledbetter wrote:\n> should you move the creation of c in here so each test case uses a new\n> (untouched by previous encode?) claimSet?\n\nDone.",
			"disapproval": false,
			"date": "2013-01-28 02:06:17.461910",
			"approval": false
		},
		{
			"sender": "hattar@google.com",
			"recipients": [
				"hattar@google.com",
				"adg@google.com",
				"sledbetter@google.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7196055/diff/10001/oauth/jwt/jwt.go\nFile oauth/jwt/jwt.go (right):\n\nhttps://codereview.appspot.com/7196055/diff/10001/oauth/jwt/jwt.go#newcode72\noauth/jwt/jwt.go:72: jsonStart = []byte{'{'}\nOn 2013/01/29 06:57:45, adg wrote:\n> put these in a separate var block just above the encode function\n\nDone.\n\nhttps://codereview.appspot.com/7196055/diff/10001/oauth/jwt/jwt.go#newcode108\noauth/jwt/jwt.go:108: // See http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html#PrivateClaimName\nOn 2013/01/29 06:57:45, adg wrote:\n> is there a more authoritative source?\n\nDone.\n\nhttps://codereview.appspot.com/7196055/diff/10001/oauth/jwt/jwt.go#newcode157\noauth/jwt/jwt.go:157: prv, err := json.Marshal(c.PrivateClaims)\nOn 2013/01/29 06:57:45, adg wrote:\n> Marshal the private claims first, before merging the two.\n\nDone.\n\nhttps://codereview.appspot.com/7196055/diff/10001/oauth/jwt/jwt.go#newcode157\noauth/jwt/jwt.go:157: prv, err := json.Marshal(c.PrivateClaims)\nOn 2013/01/29 06:57:45, adg wrote:\n> Marshal the private claims first, before merging the two.\n\nDone.\n\nhttps://codereview.appspot.com/7196055/diff/10001/oauth/jwt/jwt.go#newcode163\noauth/jwt/jwt.go:163: j = append(j, prv[bytes.Index(prv, jsonStart)+1:]...)\nOn 2013/01/29 06:57:45, adg wrote:\n> This whole thing can be\n> \n> // Concatenate public and private claim JSON objects.\n> if !bytes.HasSuffix(b, jsonEnd) {\n>     panic(fmt.Errorf(\"Invalid JSON %s\", b))\n> }\n> if !bytes.HasPrefix(p, jsonStart) {\n>     panic(fmt.Errorf(\"Invalid JSON %s\", p))\n> }\n> j[len(j)-1] = ',' // Replace closing curly brace with a comma.\n> j = append(j, p[1:]...) // Append private claims.\n> \n> return base64Encode(j)\n> \n> (I think it's fine to be strict about the []byte blobs beginning and ending with\n> the braces.)\n\nDone.\n\nhttps://codereview.appspot.com/7196055/diff/10001/oauth/jwt/jwt_test.go\nFile oauth/jwt/jwt_test.go (right):\n\nhttps://codereview.appspot.com/7196055/diff/10001/oauth/jwt/jwt_test.go#newcode138\noauth/jwt/jwt_test.go:138: re, _ := base64Decode(enc)\nOn 2013/01/29 06:57:45, adg wrote:\n> check the error return values, use t.Fatalf\n\nDone.\n\nhttps://codereview.appspot.com/7196055/diff/10001/oauth/jwt/jwt_test.go#newcode153\noauth/jwt/jwt_test.go:153: i, _ := json.Marshal(iatT.Unix())\nOn 2013/01/29 06:57:45, adg wrote:\n> check errors\n\nDone.\n\nhttps://codereview.appspot.com/7196055/diff/10001/oauth/jwt/jwt_test.go#newcode221\noauth/jwt/jwt_test.go:221: exp:   expT,\nOn 2013/01/29 06:57:45, adg wrote:\n> use the field\n> PrivateClaims: testcase.input\n\nDone.\n\nhttps://codereview.appspot.com/7196055/diff/10001/oauth/jwt/jwt_test.go#newcode224\noauth/jwt/jwt_test.go:224: cJSON, _ := base64Decode(c.encode())\nOn 2013/01/29 06:57:45, adg wrote:\n> check error\n\nDone.",
			"disapproval": false,
			"date": "2013-01-30 02:28:02.353270",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"hattar@google.com",
				"adg@google.com",
				"sledbetter@google.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7196055/diff/10001/oauth/jwt/jwt.go\nFile oauth/jwt/jwt.go (right):\n\nhttps://codereview.appspot.com/7196055/diff/10001/oauth/jwt/jwt.go#newcode72\noauth/jwt/jwt.go:72: jsonStart = []byte{'{'}\nput these in a separate var block just above the encode function\n\nhttps://codereview.appspot.com/7196055/diff/10001/oauth/jwt/jwt.go#newcode108\noauth/jwt/jwt.go:108: // See http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html#PrivateClaimName\nis there a more authoritative source?\n\nhttps://codereview.appspot.com/7196055/diff/10001/oauth/jwt/jwt.go#newcode157\noauth/jwt/jwt.go:157: prv, err := json.Marshal(c.PrivateClaims)\nMarshal the private claims first, before merging the two.\n\nhttps://codereview.appspot.com/7196055/diff/10001/oauth/jwt/jwt.go#newcode163\noauth/jwt/jwt.go:163: j = append(j, prv[bytes.Index(prv, jsonStart)+1:]...)\nThis whole thing can be\n\n// Concatenate public and private claim JSON objects.\nif !bytes.HasSuffix(b, jsonEnd) {\n    panic(fmt.Errorf(\"Invalid JSON %s\", b))\n}\nif !bytes.HasPrefix(p, jsonStart) {\n    panic(fmt.Errorf(\"Invalid JSON %s\", p))\n}\nj[len(j)-1] = ',' // Replace closing curly brace with a comma.\nj = append(j, p[1:]...) // Append private claims.\n\nreturn base64Encode(j)\n\n(I think it's fine to be strict about the []byte blobs beginning and ending with the braces.)\n\nhttps://codereview.appspot.com/7196055/diff/10001/oauth/jwt/jwt_test.go\nFile oauth/jwt/jwt_test.go (right):\n\nhttps://codereview.appspot.com/7196055/diff/10001/oauth/jwt/jwt_test.go#newcode138\noauth/jwt/jwt_test.go:138: re, _ := base64Decode(enc)\ncheck the error return values, use t.Fatalf\n\nhttps://codereview.appspot.com/7196055/diff/10001/oauth/jwt/jwt_test.go#newcode153\noauth/jwt/jwt_test.go:153: i, _ := json.Marshal(iatT.Unix())\ncheck errors\n\nhttps://codereview.appspot.com/7196055/diff/10001/oauth/jwt/jwt_test.go#newcode221\noauth/jwt/jwt_test.go:221: exp:   expT,\nuse the field\nPrivateClaims: testcase.input\n\nhttps://codereview.appspot.com/7196055/diff/10001/oauth/jwt/jwt_test.go#newcode224\noauth/jwt/jwt_test.go:224: cJSON, _ := base64Decode(c.encode())\ncheck error",
			"disapproval": false,
			"date": "2013-01-29 06:57:45.677440",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"hattar@google.com",
				"adg@google.com",
				"sledbetter@google.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-01-30 06:18:03.512610",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"hattar@google.com",
				"adg@google.com",
				"sledbetter@google.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/goauth2/source/detail?r=0aa683b9a3ed ***\n\noauth/jwt: add the \"typ\" field to JWT and private claim names\n\nR=adg, sledbetter, adg\nCC=golang-dev\nhttps://codereview.appspot.com/7196055\n\nCommitter: Andrew Gerrand <adg@golang.org>",
			"disapproval": false,
			"date": "2013-01-30 06:28:25.042090",
			"approval": false
		}
	],
	"owner_email": "hattar@google.com",
	"private": false,
	"base_url": "",
	"owner": "hattar",
	"subject": "oauth/jwt: Added the \"typ\" field to JWT. Also added support for private claim names(http://self-iss\u2026",
	"created": "2013-01-25 14:51:17.372400",
	"patchsets": [
		1,
		3001,
		10001,
		5002
	],
	"modified": "2013-01-30 06:28:25.042090",
	"closed": false,
	"issue": 7196055
}