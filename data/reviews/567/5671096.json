{
	"description": "spec: make all comparison results untyped bool\n\nOr, depending on your point of view, make the\ncomparisons satisfy any surrounding boolean type.\n\nAlso, fix a few foo_bar -> fooBar in code fragments.\n\nFixes issue 2561.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"bradfitz@golang.org",
		"gri@golang.org",
		"iant@golang.org",
		"kevlar@google.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5671096/diff/3001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5671096/diff/3001/doc/go_spec.html#newcode2241\ndoc/go_spec.html:2241: func(ch chan int) { ch &lt;- ACK }(replyChan)\nall caps ACK variable/constant isn't really Go style either, if that's what you're fixing.\n\nhttp://codereview.appspot.com/5671096/diff/3001/doc/go_spec.html#newcode3510\ndoc/go_spec.html:3510: Untyped numeric, and string constants may be used as operands\ns/numeric,/numeric/ ?",
			"disapproval": false,
			"date": "2012-02-18 23:31:04.562717",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-02-18 21:10:32.642515",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Update cmd/api in this CL too?  It has a case for ideal-bool.\n\n\nOn Sat, Feb 18, 2012 at 1:10 PM, <rsc@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://code.google.com/p/go/\n>\n>\n> Description:\n> spec: delete untyped bool idea\n>\n> The spec and compilers were inconsistent about which\n> boolean expressions were 'ideal bool' and which were\n> the predefined named type bool.  Unlike the arithmetic\n> types, bools can arise from operations that do not begin\n> with bools, so there is no context to help decide the type.\n>\n> An alternative would be to define that all boolean expressions,\n> even non-constant ones, have a type inferred from the\n> surrounding context, in the same way that non-constant\n> shift expressions do.  However, non-constant shift expressions\n> have been such a rich source of bugs that it seems like a\n> mistake to do that a second time.\n>\n> Also, fix a few foo_bar -> fooBar in code fragments.\n>\n> Implementation in http://codereview.appspot.com/**5674098<http://codereview.appspot.com/5674098>\n> .\n> Only tests are affected.\n>\n> Fixes issue 2561.\n>\n> Please review this at http://codereview.appspot.com/**5671096/<http://codereview.appspot.com/5671096/>\n>\n> Affected files:\n>  M doc/go_spec.html\n>\n>\n> Index: doc/go_spec.html\n> ==============================**==============================**=======\n> --- a/doc/go_spec.html\n> +++ b/doc/go_spec.html\n> @@ -2238,7 +2238,7 @@\n>\n>  <pre>\n>  f := func(x, y int) int { return x + y }\n> -func(ch chan int) { ch &lt;- ACK } (reply_chan)\n> +func(ch chan int) { ch &lt;- ACK }(replyChan)\n>  </pre>\n>\n>  <p>\n> @@ -2827,7 +2827,7 @@\n>  x &lt;= f()\n>  ^a &gt;&gt; b\n>  f() || g()\n> -x == y+1 &amp;&amp; &lt;-chan_ptr &gt; 0\n> +x == y+1 &amp;&amp; &lt;-chanPtr &gt; 0\n>  </pre>\n>\n>\n> @@ -3507,8 +3507,8 @@\n>  </p>\n>\n>  <p>\n> -Untyped boolean, numeric, and string constants may be used as operands\n> -wherever it is legal to use an operand of boolean, numeric, or string\n> type,\n> +Untyped numeric, and string constants may be used as operands\n> +wherever it is legal to use an operand of numeric or string type,\n>  respectively.\n>  Except for shift operations, if the operands of a binary operation are\n>  different kinds of untyped constants, the operation and result use\n> @@ -3518,8 +3518,8 @@\n>  </p>\n>\n>  <p>\n> -A constant <a href=\"#Comparison_operators\">**comparison</a> always yields\n> -an untyped boolean constant. If the left operand of a constant\n> +Boolean constants and constant <a href=\"#Comparison_operators\">**\n> comparisons</a>\n> +have type <code>bool</code>.  If the left operand of a constant\n>  <a href=\"#Operators\">shift expression</a> is an untyped constant, the\n>  result is an integer constant; otherwise it is a constant of the same\n>  type as the left operand, which must be of integer type\n> @@ -3539,7 +3539,7 @@\n>  const f = int32(1) &lt;&lt; 33   // f == 0     (type int32)\n>  const g = float64(2) &gt;&gt; 1  // illegal    (float64(2) is a typed\n> floating-point constant)\n>  const h = \"foo\" &gt; \"bar\"    // h == true  (untyped boolean constant)\n> -const j = true             // j == true  (untyped boolean constant)\n> +const j = true             // j == true  (type bool)\n>  const k = 'w' + 1          // k == 'x'   (untyped character constant)\n>  const l = \"hi\"             // l == \"hi\"  (untyped string constant)\n>  const m = string(k)        // m == \"x\"   (type string)\n> @@ -3864,9 +3864,9 @@\n>  <a href=\"#Assignability\">**assignable</a> to the type of the\n>  operand to which it is assigned. If an untyped <a\n> href=\"#Constants\">constant</a>\n>  is assigned to a variable of interface type, the constant is <a\n> href=\"#Conversions\">converted<**/a>\n> -to type <code>bool</code>, <code>rune</code>, <code>int</code>,\n> <code>float64</code>,\n> +to type <code>rune</code>, <code>int</code>, <code>float64</code>,\n>  <code>complex128</code> or <code>string</code>\n> -respectively, depending on whether the value is a boolean,\n> +respectively, depending on whether the value is a\n>  character, integer, floating-point, complex, or string constant.\n>  </p>\n>\n> @@ -4049,16 +4049,16 @@\n>  v := x  // x is evaluated exactly once\n>  if v == nil {\n>        printString(\"x is nil\")\n> -} else if i, is_int := v.(int); is_int {\n> +} else if i, isInt := v.(int); isInt {\n>        printInt(i)  // i is an int\n> -} else if i, is_float64 := v.(float64); is_float64 {\n> +} else if i, isFloat64 := v.(float64); isFloat64 {\n>        printFloat64(i)  // i is a float64\n> -} else if i, is_func := v.(func(int) float64); is_func {\n> +} else if i, isFunc := v.(func(int) float64); isFunc {\n>        printFunction(i)  // i is a function\n>  } else {\n> -       i1, is_bool := v.(bool)\n> -       i2, is_string := v.(string)\n> -       if is_bool || is_string {\n> +       i1, isBool := v.(bool)\n> +       i2, isString := v.(string)\n> +       if isBool || isString {\n>                i := v\n>                printString(\"type is bool or string\")  // i is an\n> interface{}\n>        } else {\n> @@ -4388,7 +4388,7 @@\n>  specify any result values.\n>  </p>\n>  <pre>\n> -func no_result() {\n> +func noResult() {\n>        return\n>  }\n>  </pre>\n> @@ -4404,11 +4404,11 @@\n>                and <a href=\"#Assignability\">**assignable</a>\n>                to the corresponding element of the function's result type.\n>  <pre>\n> -func simple_f() int {\n> +func simpleF() int {\n>        return 2\n>  }\n>\n> -func complex_f1() (re float64, im float64) {\n> +func complexF1() (re float64, im float64) {\n>        return -7.0, -4.0\n>  }\n>  </pre>\n> @@ -4420,8 +4420,8 @@\n>                \"return\" statement listing these variables, at which point\n> the\n>                rules of the previous case apply.\n>  <pre>\n> -func complex_f2() (re float64, im float64) {\n> -       return complex_f1()\n> +func complexF2() (re float64, im float64) {\n> +       return complexF1()\n>  }\n>  </pre>\n>        </li>\n> @@ -4431,7 +4431,7 @@\n>                and the function may assign values to them as necessary.\n>                The \"return\" statement returns the values of these\n> variables.\n>  <pre>\n> -func complex_f3() (re float64, im float64) {\n> +func complexF3() (re float64, im float64) {\n>        re = 7.0\n>        im = 4.0\n>        return\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-02-18 23:28:45.831037",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nthat's one way to fix it",
			"disapproval": false,
			"date": "2012-02-18 21:19:38.014055",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'll send a different CL for cmd/api.\n",
			"disapproval": false,
			"date": "2012-02-18 23:30:06.172735",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It seems to me that this change is making bools more unusual than all the other types and adding an irregularity. Instead, one could just have said that boolean values resulting from comparison always yield an ideal bool no matter what operands are involved (I actually thought that spec said that at some time in the past).\n\nAfter all, such bools are made from \"whole cloth\" and arguably are untyped. The shift issue doesn't come in here. It would be a smaller spec change. Now we have cases where we need to introduce casts where there were none before.\n\nhttp://codereview.appspot.com/5671096/diff/3001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5671096/diff/3001/doc/go_spec.html#newcode3\ndoc/go_spec.html:3: \"Subtitle\": \"Version of February 16, 2012\"\nup-date before submitting",
			"disapproval": false,
			"date": "2012-02-21 19:46:48.648987",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Feb 21, 2012 at 14:46,  <gri@golang.org> wrote:\n> Instead, one could just have\n> said that boolean values resulting from comparison always yield an ideal\n> bool no matter what operands are involved (I actually thought that spec\n> said that at some time in the past).\n\nIn fact I am going to write that text today.\n",
			"disapproval": false,
			"date": "2012-02-21 20:02:43.177404",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I like this change much better.\n\nShould we make the analogous change for ,ok operations? Not required, but seems like it's in the same vain.\n\nhttp://codereview.appspot.com/5671096/diff/8001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5671096/diff/8001/doc/go_spec.html#newcode2595\ndoc/go_spec.html:2595: the result of the assertion is a pair of values with types <code>(T, bool)</code>.\nShould this also return an untyped boolean now? It is a form of \"comparison\". In the \"v, ok :=\" case, ok will be bool, but in \"v, ok = \" ok could be another boolean type.\n\nhttp://codereview.appspot.com/5671096/diff/8001/doc/go_spec.html#newcode2980\ndoc/go_spec.html:2980: Comparison operators compare two operands and yield a boolean value.\nmaybe: \"untyped boolean value\" to be more explicit?\n\nhttp://codereview.appspot.com/5671096/diff/8001/doc/go_spec.html#newcode3100\ndoc/go_spec.html:3100: test(x == y)  // ok; result of comparison has type Bool\nleave away \"ok;\" ?\n\nIn other examples we usually only point out illegal examples with \"Illegal\", otherwise we assume that the example is ok w/o saying it explicitly\n\nhttp://codereview.appspot.com/5671096/diff/8001/doc/go_spec.html#newcode3177\ndoc/go_spec.html:3177: The boolean variable <code>ok</code> indicates whether\nsame here: bool or untyped boolean? It should be the same as for type assertions.",
			"disapproval": false,
			"date": "2012-02-21 21:28:56.877585",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org, bradfitz@golang.org, gri@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-21 20:41:29.284610",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This new version of the change should be less intrusive.\nI will do the compiler fixes next.\n",
			"disapproval": false,
			"date": "2012-02-21 20:42:27.951731",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5671096/diff/11001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5671096/diff/11001/doc/go_spec.html#newcode3\ndoc/go_spec.html:3: \"Subtitle\": \"Version of February 16, 2012\"\nup-date\n\nhttp://codereview.appspot.com/5671096/diff/11001/doc/go_spec.html#newcode3099\ndoc/go_spec.html:3099: b1 MyBool = x == y // ok; result of comparison has type MyBool\ns/ok; //",
			"disapproval": false,
			"date": "2012-02-21 21:52:54.980768",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Feb 21, 2012 at 20:31,  <iant@golang.org> wrote:\n> The spec usually does have a comma before \"or\" or \"and\" in a list, so\n> this comma should probably be kept.\n\ndone.  really i just forgot to put it back; not intentional.\n",
			"disapproval": false,
			"date": "2012-02-22 03:12:36.545304",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5671096/diff/8001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5671096/diff/8001/doc/go_spec.html#newcode3095\ndoc/go_spec.html:3095: type Bool bool\ns/Bool/MyBool/ or /Truth/ or something more distinct from \"bool\"\n\nhttp://codereview.appspot.com/5671096/diff/8001/doc/go_spec.html#newcode3097\ndoc/go_spec.html:3097: func test2(bool)\nvariables of type bool and whateveryouchoose would be clearer than the implicit assignment to a function parameter for an unimplemented function",
			"disapproval": false,
			"date": "2012-02-21 21:03:49.622385",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n",
			"disapproval": false,
			"date": "2012-02-21 21:13:39.280746",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am inclined to leave ,ok alone.  It has not been a problem.\n",
			"disapproval": false,
			"date": "2012-02-21 21:35:44.251698",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"gri@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5671096/diff/11004/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5671096/diff/11004/doc/go_spec.html#newcode3089\ndoc/go_spec.html:3089: The result of a comparison can assigned to any boolean type.\ns/can assigned/can be assigned/\n\nhttp://codereview.appspot.com/5671096/diff/11004/doc/go_spec.html#newcode3528\ndoc/go_spec.html:3528: wherever it is legal to use an operand of boolean, numeric or string type,\nThe spec usually does have a comma before \"or\" or \"and\" in a list, so this comma should probably be kept.",
			"disapproval": false,
			"date": "2012-02-22 01:31:17.470732",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Feb 21, 2012 at 20:35,  <kevlar@google.com> wrote:\n> operation and, for non-boolean operations, the result use\n> use (for non-boolean operations) to simplify this hard-to-parse\n> sentence?\n\nparentheticals are usually reserved for optional text.\nthis text is needed for correctness.\n",
			"disapproval": false,
			"date": "2012-02-22 03:03:25.996374",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-02-21 21:15:20.026255",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "done\n\n> http://codereview.appspot.com/5671096/diff/11001/doc/go_spec.html#newcode3\n> doc/go_spec.html:3: \"Subtitle\": \"Version of February 16, 2012\"\n> up-date\n>\n> http://codereview.appspot.com/5671096/diff/11001/doc/go_spec.html#newcode3099\n> doc/go_spec.html:3099: b1 MyBool = x == y // ok; result of comparison\n> has type MyBool\n> s/ok; //\n>\n> http://codereview.appspot.com/5671096/\n",
			"disapproval": false,
			"date": "2012-02-21 22:29:21.919900",
			"approval": false
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"gri@golang.org",
				"iant@golang.org",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5671096/diff/11004/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5671096/diff/11004/doc/go_spec.html#newcode3531\ndoc/go_spec.html:3531: different kinds of untyped constants, the operation and, for non-boolean operations, the result use\nuse (for non-boolean operations) to simplify this hard-to-parse sentence?",
			"disapproval": false,
			"date": "2012-02-22 01:35:53.132523",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"gri@golang.org",
				"iant@golang.org",
				"kevlar@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=61e30316d672 ***\n\nspec: make all comparison results untyped bool\n\nOr, depending on your point of view, make the\ncomparisons satisfy any surrounding boolean type.\n\nAlso, fix a few foo_bar -> fooBar in code fragments.\n\nFixes issue 2561.\n\nR=golang-dev, r, bradfitz, gri, iant, kevlar\nCC=golang-dev\nhttp://codereview.appspot.com/5671096",
			"disapproval": false,
			"date": "2012-02-22 03:04:39.170083",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5671096: spec: make all comparison results untyped bool",
	"created": "2012-02-18 20:21:25.405543",
	"patchsets": [
		1,
		1002,
		3001,
		8001,
		11001,
		11004,
		13002
	],
	"modified": "2012-02-22 03:04:40.860773",
	"closed": true,
	"issue": 5671096
}