{
	"description": "test/interface: document tests\nMost already had comments (yay); adjusted for consistency.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-02-19 06:18:24.111396",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nOn Feb 19, 2012 5:18 PM, <r@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://code.google.com/p/go/\n>\n>\n> Description:\n> test/interface: document tests\n> Most already had comments (yay); adjusted for consistency.\n>\n> Please review this at http://codereview.appspot.com/**5676102/<http://codereview.appspot.com/5676102/>\n>\n> Affected files:\n>  M test/interface/bigdata.go\n>  M test/interface/convert.go\n>  M test/interface/convert1.go\n>  M test/interface/convert2.go\n>  M test/interface/embed.go\n>  M test/interface/embed0.go\n>  M test/interface/embed1.go\n>  M test/interface/embed2.go\n>  M test/interface/explicit.go\n>  M test/interface/fail.go\n>  M test/interface/fake.go\n>  M test/interface/noeq.go\n>  M test/interface/pointer.go\n>  M test/interface/private.go\n>  M test/interface/private1.go\n>  M test/interface/receiver.go\n>  M test/interface/receiver1.go\n>  M test/interface/recursive1.go\n>  M test/interface/recursive2.go\n>  M test/interface/returntype.go\n>  M test/interface/struct.go\n>\n>\n> Index: test/interface/bigdata.go\n> ==============================**==============================**=======\n> --- a/test/interface/bigdata.go\n> +++ b/test/interface/bigdata.go\n> @@ -4,8 +4,7 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> -// check that big vs small, pointer vs not\n> -// interface methods work.\n> +// Test big vs. small, pointer vs. value interface methods.\n>\n>  package main\n>\n> Index: test/interface/convert.go\n> ==============================**==============================**=======\n> --- a/test/interface/convert.go\n> +++ b/test/interface/convert.go\n> @@ -4,8 +4,7 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> -// Check uses of all the different interface\n> -// conversion runtime functions.\n> +// Test all the different interface conversion runtime functions.\n>\n>  package main\n>\n> Index: test/interface/convert1.go\n> ==============================**==============================**=======\n> --- a/test/interface/convert1.go\n> +++ b/test/interface/convert1.go\n> @@ -4,8 +4,7 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> -// Check that static interface conversion of\n> -// interface value nil succeeds.\n> +// Test static interface conversion of interface value nil.\n>\n>  package main\n>\n> Index: test/interface/convert2.go\n> ==============================**==============================**=======\n> --- a/test/interface/convert2.go\n> +++ b/test/interface/convert2.go\n> @@ -4,8 +4,7 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> -// Check that static interface conversion of\n> -// interface value nil succeeds.\n> +// Test static interface conversion of interface value nil.\n>\n>  package main\n>\n> Index: test/interface/embed.go\n> ==============================**==============================**=======\n> --- a/test/interface/embed.go\n> +++ b/test/interface/embed.go\n> @@ -4,7 +4,7 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> -// Check methods derived from embedded interface values.\n> +// Test methods derived from embedded interface values.\n>\n>  package main\n>\n> Index: test/interface/embed0.go\n> ==============================**==============================**=======\n> --- a/test/interface/embed0.go\n> +++ b/test/interface/embed0.go\n> @@ -4,7 +4,7 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> -// Check that embedded interface types can have local methods.\n> +// Test that embedded interface types can have local methods.\n>\n>  package p\n>\n> Index: test/interface/embed1.go\n> ==============================**==============================**=======\n> --- a/test/interface/embed1.go\n> +++ b/test/interface/embed1.go\n> @@ -4,7 +4,7 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> -// Check that embedded interface types can have local methods.\n> +// Test that embedded interface types can have local methods.\n>\n>  package main\n>\n> Index: test/interface/embed2.go\n> ==============================**==============================**=======\n> --- a/test/interface/embed2.go\n> +++ b/test/interface/embed2.go\n> @@ -4,7 +4,7 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> -// Check methods derived from embedded interface and *interface values.\n> +// Test methods derived from embedded interface and *interface values.\n>\n>  package main\n>\n> Index: test/interface/explicit.go\n> ==============================**==============================**=======\n> --- a/test/interface/explicit.go\n> +++ b/test/interface/explicit.go\n> @@ -4,7 +4,8 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> -// Static error messages about interface conversions.\n> +// Verify compiler messages about erroneous static interface conversions.\n> +// Does not compile.\n>\n>  package main\n>\n> Index: test/interface/fail.go\n> ==============================**==============================**=======\n> --- a/test/interface/fail.go\n> +++ b/test/interface/fail.go\n> @@ -4,7 +4,7 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> -// Check that interface conversion fails when method is missing.\n> +// Test that interface conversion fails when method is missing.\n>\n>  package main\n>\n> Index: test/interface/fake.go\n> ==============================**==============================**=======\n> --- a/test/interface/fake.go\n> +++ b/test/interface/fake.go\n> @@ -4,7 +4,7 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> -// Interface comparisons using types hidden\n> +// Test interface comparisons using types hidden\n>  // inside reflected-on structs.\n>\n>  package main\n> Index: test/interface/noeq.go\n> ==============================**==============================**=======\n> --- a/test/interface/noeq.go\n> +++ b/test/interface/noeq.go\n> @@ -4,7 +4,8 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> -// Interface values containing types that cannot be compared for equality.\n> +// Test run-time error detection for interface values containing types\n> +// that cannot be compared for equality.\n>\n>  package main\n>\n> Index: test/interface/pointer.go\n> ==============================**==============================**=======\n> --- a/test/interface/pointer.go\n> +++ b/test/interface/pointer.go\n> @@ -4,7 +4,8 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> -// Check that interface{M()} = *interface{M()} produces a compiler error.\n> +// Test that interface{M()} = *interface{M()} produces a compiler error.\n> +// Does not compile.\n>\n>  package main\n>\n> Index: test/interface/private.go\n> ==============================**==============================**=======\n> --- a/test/interface/private.go\n> +++ b/test/interface/private.go\n> @@ -4,6 +4,9 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// Test that unexported methods are not visible outside the package.\n> +// Does not compile.\n> +\n>  package main\n>\n>  import \"./private1\"\n> Index: test/interface/private1.go\n> ==============================**==============================**=======\n> --- a/test/interface/private1.go\n> +++ b/test/interface/private1.go\n> @@ -4,6 +4,8 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// Imported by private.go, which should not be able to see the private\n> method.\n> +\n>  package p\n>\n>  type Exported interface {\n> Index: test/interface/receiver.go\n> ==============================**==============================**=======\n> --- a/test/interface/receiver.go\n> +++ b/test/interface/receiver.go\n> @@ -4,8 +4,8 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> -// Implicit methods for embedded types.\n> -// Mixed pointer and non-pointer receivers.\n> +// Test Implicit methods for embedded types and\n> +// mixed pointer and non-pointer receivers.\n>\n>  package main\n>\n> Index: test/interface/receiver1.go\n> ==============================**==============================**=======\n> --- a/test/interface/receiver1.go\n> +++ b/test/interface/receiver1.go\n> @@ -4,7 +4,8 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> -// Error messages about missing implicit methods.\n> +// Verify compiler complains about missing implicit methods.\n> +// Does not compile.\n>\n>  package main\n>\n> Index: test/interface/recursive1.go\n> ==============================**==============================**=======\n> --- a/test/interface/recursive1.go\n> +++ b/test/interface/recursive1.go\n> @@ -4,6 +4,8 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> +// Mutually recursive type definitions imported and used by recursive1.go.\n> +\n>  package p\n>\n>  type I1 interface {\n> Index: test/interface/recursive2.go\n> ==============================**==============================**=======\n> --- a/test/interface/recursive2.go\n> +++ b/test/interface/recursive2.go\n> @@ -4,7 +4,7 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> -// Check that the mutually recursive types in recursive1.go made it\n> +// Test that the mutually recursive types in recursive1.go made it\n>  // intact and with the same meaning, by assigning to or using them.\n>\n>  package main\n> Index: test/interface/returntype.go\n> ==============================**==============================**=======\n> --- a/test/interface/returntype.go\n> +++ b/test/interface/returntype.go\n> @@ -4,7 +4,7 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> -// Check methods with different return types.\n> +// Test interface methods with different return types are distinct.\n>\n>  package main\n>\n> Index: test/interface/struct.go\n> ==============================**==============================**=======\n> --- a/test/interface/struct.go\n> +++ b/test/interface/struct.go\n> @@ -4,7 +4,7 @@\n>  // Use of this source code is governed by a BSD-style\n>  // license that can be found in the LICENSE file.\n>\n> -// Interface values containing structures.\n> +// Test interface values containing structures.\n>\n>  package main\n>\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-02-19 06:25:54.927483",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as d441db6dd1f5 ***\n\ntest/interface: document tests\nMost already had comments (yay); adjusted for consistency.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5676102",
			"disapproval": false,
			"date": "2012-02-19 06:33:47.813731",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5676102: test/interface: document tests",
	"created": "2012-02-19 06:18:11.031958",
	"patchsets": [
		1,
		1022
	],
	"modified": "2012-02-19 06:33:50.369676",
	"closed": true,
	"issue": 5676102
}