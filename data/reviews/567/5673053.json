{
	"description": "godoc: make example code more readable with new comment convention\ngo/doc: move Examples to go/ast\ncmd/go: use go/doc to read examples\nsrc/pkg: update examples to use new convention\n\nThis is to make whole file examples more readable. When presented as a\ncomplete function, preceding an Example with its output is confusing.\nThe new convention is to put the expected output in the final comment\nof the example, preceded by the string \"output:\" (case insensitive).\n\nAn idiomatic example looks like this:\n\n// This example demonstrates Foo by doing bar and quux.\nfunc ExampleFoo() {\n        // example body that does bar and quux\n\n        // Output:\n        // example output\n}",
	"cc": [
		"gri@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Can we move the Example code out of go/doc? It's only really useful together with godoc. It could just go there.\n\nhttp://codereview.appspot.com/5673053/diff/4/src/cmd/dist/build.c\nFile src/cmd/dist/build.c (right):\n\nhttp://codereview.appspot.com/5673053/diff/4/src/cmd/dist/build.c#newcode1123\nsrc/cmd/dist/build.c:1123: \"pkg/go/doc\",\nunfortunate that go/doc is part of this again - a few weeks back we worked at this so that we wouldn't need to depend on go/doc in here\n\nhttp://codereview.appspot.com/5673053/diff/4/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttp://codereview.appspot.com/5673053/diff/4/src/cmd/godoc/godoc.go#newcode1134\nsrc/cmd/godoc/godoc.go:1134: var files []*ast.File\nnot sure why you made this change - it appears to simply have moved the iteration from doc.Examples to here - am I missing something?\n\nhttp://codereview.appspot.com/5673053/diff/4/src/pkg/go/doc/example.go\nFile src/pkg/go/doc/example.go (right):\n\nhttp://codereview.appspot.com/5673053/diff/4/src/pkg/go/doc/example.go#newcode69\nsrc/pkg/go/doc/example.go:69: var outputPrefix = regexp.MustCompile(`(?i)^[[:space:]]*output:`)\nYou could use a simpler convention: The result is simply the last *ast.Comment in the *ast.CommentGroup associated with a function. Easier to find, easier to strip. For added safety, you could say that the output comment has to be a /* comment. For instance:\n\n// FooExample blab bla bla...\n// bla bla bla\n/* \"this is the result string\" */\nfunc FooExample () { ... }\n\nhttp://codereview.appspot.com/5673053/diff/4/src/pkg/go/doc/example.go#newcode71\nsrc/pkg/go/doc/example.go:71: func exampleOutput(node *ast.FuncDecl, comments []*ast.CommentGroup) string {\ns/node/fun/\n\nhttp://codereview.appspot.com/5673053/diff/4/src/pkg/go/doc/example.go#newcode76\nsrc/pkg/go/doc/example.go:76: if p := cg.Pos(); p < start || cg.End() > end || (last != nil && p < last.Pos()) {\nthis is fine, but you could rely on the fact that the comments list is sorted when coming from the parser\n\nhttp://codereview.appspot.com/5673053/diff/4/src/pkg/go/doc/example.go#newcode85\nsrc/pkg/go/doc/example.go:85: text := last.Text()\nmaybe just\n\nif last != nil {\n   ...\n}\n\nand get rid of the extra return above",
			"disapproval": false,
			"date": "2012-02-15 23:18:17.087701",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-02-16 00:33:28.340499",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2012-02-15 06:55:58.571381",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 16 February 2012 10:18,  <gri@golang.org> wrote:\n> Can we move the Example code out of go/doc? It's only really useful\n> together with godoc. It could just go there.\n\nBut it's also used by the go tool.\n",
			"disapproval": false,
			"date": "2012-02-15 23:55:47.577161",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Moving the comments down is a big win.  I am confused about the package ast thing.\n\nhttp://codereview.appspot.com/5673053/diff/2008/src/pkg/go/ast/example.go\nFile src/pkg/go/ast/example.go (right):\n\nhttp://codereview.appspot.com/5673053/diff/2008/src/pkg/go/ast/example.go#newcode7\nsrc/pkg/go/ast/example.go:7: package ast\nI disagree.  I think it is a mistake to be hard-coding information about documentation examples in package ast.  It has nothing to do with the fundamentals of the Go language abstract syntax trees, and it is exactly what package doc is for. \n\nI don't understand why putting this in go/doc is a problem.  I understand the suggestion to deemphasize it by moving it into godoc but also that that's not okay because cmd/go needs it.  But I don't understand why you'd turn around and emphasize it even more by moving it into go/ast.\n\nWhat am I missing?",
			"disapproval": false,
			"date": "2012-02-16 18:38:33.596384",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I was suggested to Andrew to move it out of doc because it made the go\ncmd dependent on doc again, just after we decoupled it. I am not\nfeeling strongly about it, but perhaps it can be somewhere else?\n- gri\n\nOn Thu, Feb 16, 2012 at 10:39 AM, Russ Cox <rsc@golang.org> wrote:\n> On Wed, Feb 15, 2012 at 19:50, \u00a0<adg@golang.org> wrote:\n>> *** Submitted as ...\n>\n> I am very skeptical about putting this code in go/ast.\n> Please see my comments on the other thread or on Rietveld.\n",
			"disapproval": false,
			"date": "2012-02-16 20:24:04.334322",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=rsc, gri\n\nhttp://codereview.appspot.com/5673053/diff/3007/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttp://codereview.appspot.com/5673053/diff/3007/src/cmd/godoc/godoc.go#newcode546\nsrc/cmd/godoc/godoc.go:546: // example_nameFunc takes an example function name and returns its display\nThis change is from http://codereview.appspot.com/5677047/ please ignore.\n\nhttp://codereview.appspot.com/5673053/diff/3007/src/cmd/godoc/godoc.go#newcode654\nsrc/cmd/godoc/godoc.go:654: \"example_name\":   example_nameFunc,\nThis change is from http://codereview.appspot.com/5677047/ please ignore.",
			"disapproval": false,
			"date": "2012-02-15 06:56:04.856922",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 16 February 2012 01:02, Russ Cox <rsc@golang.org> wrote:\n> On Wed, Feb 15, 2012 at 01:55, \u00a0<adg@golang.org> wrote:\n>> // ExampleFoo demonstrates Foo by doing bar and quux.\n>> func ExampleFoo() {\n>> \u00a0 \u00a0 \u00a0 \u00a0// example body that does bar and quux\n>>\n>> \u00a0 \u00a0 \u00a0 \u00a0// Output:\n>> \u00a0 \u00a0 \u00a0 \u00a0// example output\n>> }\n>\n> Is that doc comment printed? \u00a0The examples used to be nice\n> and short on the web page; are they all going to say\n> \u00a0 \u00a0func ExampleFoo() { ... }\n> now? \u00a0If not (and I hope not), the doc comment is referring\n> to a name (ExampleFoo) that does not exist.\n\nNo, the func declaration won't be included. You're right about the\nwording of the example comment. I haven't written the part that\ndisplays them on the web page yet. So instead example comments should\nbe written like\n\n// This example demonstrates blah blah\n\npresuming you feel the need to introduce the example at all. If not,\njust leave the comment out.\n\nThe main advantage of this change is that it makes whole file examples\nmuch more readable, as the output appears at the bottom of the\nfunction. (see /pkg/container/heap/)\n\nAndrew\n",
			"disapproval": false,
			"date": "2012-02-15 22:03:32.641422",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 15, 2012 at 3:55 PM, Andrew Gerrand <adg@golang.org> wrote:\n> On 16 February 2012 10:18, \u00a0<gri@golang.org> wrote:\n>> Can we move the Example code out of go/doc? It's only really useful\n>> together with godoc. It could just go there.\n>\n> But it's also used by the go tool.\n\nMove it into go/ast? (go/ast/example.go could contain those helper functions).\n- gri\n",
			"disapproval": false,
			"date": "2012-02-16 00:05:15.880212",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=92f4ca8f760c ***\n\ngodoc: make example code more readable with new comment convention\ngo/doc: move Examples to go/ast\ncmd/go: use go/doc to read examples\nsrc/pkg: update examples to use new convention\n\nThis is to make whole file examples more readable. When presented as a\ncomplete function, preceding an Example with its output is confusing.\nThe new convention is to put the expected output in the final comment\nof the example, preceded by the string \"output:\" (case insensitive).\n\nAn idiomatic example looks like this:\n\n// This example demonstrates Foo by doing bar and quux.\nfunc ExampleFoo() {\n        // example body that does bar and quux\n\n        // Output:\n        // example output\n}\n\nR=rsc, gri\nCC=golang-dev\nhttp://codereview.appspot.com/5673053\n\nhttp://codereview.appspot.com/5673053/diff/9/src/pkg/testing/testing.go\nFile src/pkg/testing/testing.go (right):\n\nhttp://codereview.appspot.com/5673053/diff/9/src/pkg/testing/testing.go#newcode41\nsrc/pkg/testing/testing.go:41: // The package also runs and verifies example code. Example functions include a\nOn 2012/02/16 00:46:40, gri wrote:\n> s/include/may include/ ?\n\nDone.\n\nhttp://codereview.appspot.com/5673053/diff/9/src/pkg/testing/testing.go#newcode48\nsrc/pkg/testing/testing.go:48: //             // Output: hello\nOn 2012/02/16 00:46:40, gri wrote:\n> Maybe also have an example ExampleHelloToo (pun intended) where the Output: is\n> on a separate line?\n\nDone.",
			"disapproval": false,
			"date": "2012-02-16 00:50:36.049606",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Feb 16, 2012 at 15:24, Robert Griesemer <gri@golang.org> wrote:\n> I was suggested to Andrew to move it out of doc because it made the go\n> cmd dependent on doc again, just after we decoupled it. I am not\n> feeling strongly about it, but perhaps it can be somewhere else?\n\nI remember it being problematic that the go command\ndepended on doc, but I don't remember why.\nWas it just for the dependency?  Now that we don't\nhave build scripts that is much less of an issue.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-02-16 20:28:39.497613",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "go/doc was in development, and when it didn't build, go could build\nanymore. Still, I would prefer if we could cut down the number of\ndependencies.\n- gri\n\nOn Thu, Feb 16, 2012 at 12:28 PM, Russ Cox <rsc@golang.org> wrote:\n> On Thu, Feb 16, 2012 at 15:24, Robert Griesemer <gri@golang.org> wrote:\n>> I was suggested to Andrew to move it out of doc because it made the go\n>> cmd dependent on doc again, just after we decoupled it. I am not\n>> feeling strongly about it, but perhaps it can be somewhere else?\n>\n> I remember it being problematic that the go command\n> depended on doc, but I don't remember why.\n> Was it just for the dependency? \u00a0Now that we don't\n> have build scripts that is much less of an issue.\n>\n> Russ\n",
			"disapproval": false,
			"date": "2012-02-16 20:46:53.820528",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Feb 16, 2012 at 15:46, Robert Griesemer <gri@golang.org> wrote:\n> go/doc was in development, and when it didn't build, go could build\n> anymore.\n\nThat's not true anymore: if go/doc is a dependency of the\ngo tool, it will be built by cmd/dist as part of building the\ngo binary.  If something changes, you just run make.bash\nagain.  If something fails during that build because go/doc\ndoesn't compile, you fix the go/doc source files and run\nmake.bash again.  You can't get into a bad state like you\ncould with the build scripts.\n\nI think it's reasonable for the go tool to depend on go/doc.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-02-16 20:49:18.833914",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 15, 2012 at 01:55,  <adg@golang.org> wrote:\n> // ExampleFoo demonstrates Foo by doing bar and quux.\n> func ExampleFoo() {\n> \u00a0 \u00a0 \u00a0 \u00a0// example body that does bar and quux\n>\n> \u00a0 \u00a0 \u00a0 \u00a0// Output:\n> \u00a0 \u00a0 \u00a0 \u00a0// example output\n> }\n\nIs that doc comment printed?  The examples used to be nice\nand short on the web page; are they all going to say\n    func ExampleFoo() { ... }\nnow?  If not (and I hope not), the doc comment is referring\nto a name (ExampleFoo) that does not exist.\n",
			"disapproval": false,
			"date": "2012-02-15 14:02:18.290975",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5673053/diff/4/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttp://codereview.appspot.com/5673053/diff/4/src/cmd/godoc/godoc.go#newcode1134\nsrc/cmd/godoc/godoc.go:1134: var files []*ast.File\nOn 2012/02/15 23:18:17, gri wrote:\n> not sure why you made this change - it appears to simply have moved the\n> iteration from doc.Examples to here - am I missing something?\n\nIn cmd/go we need to pass in a single *ast.File, not a package. There's no point in constructing the package just to pull the file list out again.\n\nhttp://codereview.appspot.com/5673053/diff/4/src/pkg/go/doc/example.go\nFile src/pkg/go/doc/example.go (right):\n\nhttp://codereview.appspot.com/5673053/diff/4/src/pkg/go/doc/example.go#newcode69\nsrc/pkg/go/doc/example.go:69: var outputPrefix = regexp.MustCompile(`(?i)^[[:space:]]*output:`)\nOn 2012/02/15 23:18:17, gri wrote:\n> You could use a simpler convention: The result is simply the last *ast.Comment\n> in the *ast.CommentGroup associated with a function. Easier to find, easier to\n> strip. For added safety, you could say that the output comment has to be a /*\n> comment. For instance:\n> \n> // FooExample blab bla bla...\n> // bla bla bla\n> /* \"this is the result string\" */\n> func FooExample () { ... }\n\nMany examples produce multi-line output.\n\nThe last comment in a function is typically indented.\n\n/**/ comments include the indentation when you call .Text() on the CommentGroup. The current convention explicitly forbids /**/ comments for this reason, although I haven't documented this yet. \n\nSome examples do not produce output, so using the last comment in that case is problematic.\n\nIt reads more nicely to see\n// Output: \n// foo bar baz\n\nthan just \n// foo bar baz\n\nwhen reading the comment (the entire purpose of this CL)\n\nhttp://codereview.appspot.com/5673053/diff/4/src/pkg/go/doc/example.go#newcode71\nsrc/pkg/go/doc/example.go:71: func exampleOutput(node *ast.FuncDecl, comments []*ast.CommentGroup) string {\nOn 2012/02/15 23:18:17, gri wrote:\n> s/node/fun/\n\nDone.\n\nhttp://codereview.appspot.com/5673053/diff/4/src/pkg/go/doc/example.go#newcode76\nsrc/pkg/go/doc/example.go:76: if p := cg.Pos(); p < start || cg.End() > end || (last != nil && p < last.Pos()) {\nOn 2012/02/15 23:18:17, gri wrote:\n> this is fine, but you could rely on the fact that the comments list is sorted\n> when coming from the parser\n\nDone.\n\nhttp://codereview.appspot.com/5673053/diff/4/src/pkg/go/doc/example.go#newcode85\nsrc/pkg/go/doc/example.go:85: text := last.Text()\nOn 2012/02/15 23:18:17, gri wrote:\n> maybe just\n> \n> if last != nil {\n>    ...\n> }\n> \n> and get rid of the extra return above\n\nDone.",
			"disapproval": false,
			"date": "2012-02-16 00:08:57.734713",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, gri@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-16 00:23:52.757368",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5673053/diff/9/src/pkg/testing/testing.go\nFile src/pkg/testing/testing.go (right):\n\nhttp://codereview.appspot.com/5673053/diff/9/src/pkg/testing/testing.go#newcode41\nsrc/pkg/testing/testing.go:41: // The package also runs and verifies example code. Example functions include a\ns/include/may include/ ?\n\nhttp://codereview.appspot.com/5673053/diff/9/src/pkg/testing/testing.go#newcode48\nsrc/pkg/testing/testing.go:48: //             // Output: hello\nMaybe also have an example ExampleHelloToo (pun intended) where the Output: is on a separate line?",
			"disapproval": false,
			"date": "2012-02-16 00:46:39.546503",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 15, 2012 at 19:50,  <adg@golang.org> wrote:\n> *** Submitted as ...\n\nI am very skeptical about putting this code in go/ast.\nPlease see my comments on the other thread or on Rietveld.\n",
			"disapproval": false,
			"date": "2012-02-16 18:39:53.098242",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'll clean it up this afternoon.\n- gri\n\nOn Thu, Feb 16, 2012 at 12:49 PM, Russ Cox <rsc@golang.org> wrote:\n> On Thu, Feb 16, 2012 at 15:46, Robert Griesemer <gri@golang.org> wrote:\n>> go/doc was in development, and when it didn't build, go could build\n>> anymore.\n>\n> That's not true anymore: if go/doc is a dependency of the\n> go tool, it will be built by cmd/dist as part of building the\n> go binary. \u00a0If something changes, you just run make.bash\n> again. \u00a0If something fails during that build because go/doc\n> doesn't compile, you fix the go/doc source files and run\n> make.bash again. \u00a0You can't get into a bad state like you\n> could with the build scripts.\n>\n> I think it's reasonable for the go tool to depend on go/doc.\n>\n> Russ\n",
			"disapproval": false,
			"date": "2012-02-16 20:53:09.111684",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, gri@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-15 22:47:18.594333",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, gri@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-16 00:39:29.036476",
			"approval": false
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 5673053: godoc: make example code more readable with new comment...",
	"created": "2012-02-15 06:47:37.766863",
	"patchsets": [
		1,
		2001,
		3007,
		3008,
		4,
		4008,
		7,
		9,
		2008
	],
	"modified": "2012-02-16 18:38:34.212368",
	"closed": true,
	"issue": 5673053
}