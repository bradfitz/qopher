{
	"description": "faq: add entry about nil interfaces vs. nil pointers\n\nFixes issue 2778.",
	"cc": [
		"bradfitz@golang.org",
		"rsc@google.com",
		"iant@golang.org",
		"adg@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@google.com",
			"recipients": [
				"r@golang.org",
				"bradfitz@golang.org",
				"rsc@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It might be worth saying that as a consequence,\na good rule of thumb is that functions that return\nerrors should always return them as interfaces,\nnot as concrete types.  This is why, for example,\nos.Open returns error even though the underlying\ntype is, we promise, an *os.PathError.\n\nhttp://codereview.appspot.com/5672078/diff/1/doc/go_faq.html\nFile doc/go_faq.html (right):\n\nhttp://codereview.appspot.com/5672078/diff/1/doc/go_faq.html#newcode688\ndoc/go_faq.html:688: Under the covers, interfaces are implemented by two elements, a value and a type.\ns/by/as/\n\nhttp://codereview.appspot.com/5672078/diff/1/doc/go_faq.html#newcode691\ndoc/go_faq.html:691: schematically, (<code>3</code>, <code>int</code>).\nMaybe swap these?  (int, 3) puts first the information you need\nto interpret the second half.  Also the type is the key part here.\n\nhttp://codereview.appspot.com/5672078/diff/1/doc/go_faq.html#newcode712\ndoc/go_faq.html:712: p == ErrBad\ns/==/=/",
			"disapproval": false,
			"date": "2012-02-17 04:45:15.800419",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"r@golang.org",
				"bradfitz@golang.org",
				"rsc@google.com",
				"iant@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5672078/diff/5001/doc/go_faq.html\nFile doc/go_faq.html (right):\n\nhttp://codereview.appspot.com/5672078/diff/5001/doc/go_faq.html#newcode730\ndoc/go_faq.html:730: var p *MyError = nil\nOn 2012/02/17 05:11:46, iant wrote:\n> No need for the variable p in this example.\n\nAgree; delete.",
			"disapproval": false,
			"date": "2012-02-17 05:21:40.378406",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"bradfitz@golang.org",
				"rsc@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, rsc@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-17 05:04:07.417924",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-02-17 04:31:03.431885",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"r@golang.org",
				"bradfitz@golang.org",
				"rsc@google.com",
				"iant@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5672078/diff/5001/doc/go_faq.html\nFile doc/go_faq.html (right):\n\nhttp://codereview.appspot.com/5672078/diff/5001/doc/go_faq.html#newcode695\ndoc/go_faq.html:695: An interface value is <code>nil</code> only if the inner value and type are both unset.\ns/\\./, (nil, nil)./\n\nAnd I think you could make better use of the \"schematic\" form in this paragraph.",
			"disapproval": false,
			"date": "2012-02-17 05:19:07.626253",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"bradfitz@golang.org",
				"rsc@google.com",
				"iant@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, rsc@google.com, iant@golang.org, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-17 05:20:38.247474",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5672078/diff/1/doc/go_faq.html\nFile doc/go_faq.html (right):\n\nhttp://codereview.appspot.com/5672078/diff/1/doc/go_faq.html#newcode729\ndoc/go_faq.html:729: var p *MyError = nil\np defined but not used",
			"disapproval": false,
			"date": "2012-02-17 04:38:59.296150",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"r@golang.org",
				"bradfitz@golang.org",
				"rsc@google.com",
				"iant@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5672078/diff/3004/doc/go_faq.html\nFile doc/go_faq.html (right):\n\nhttp://codereview.appspot.com/5672078/diff/3004/doc/go_faq.html#newcode701\ndoc/go_faq.html:701: (<code>*int</code>, <code>nil</code>)\nmissing a period here",
			"disapproval": false,
			"date": "2012-02-17 05:24:19.676091",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"r@golang.org",
				"bradfitz@golang.org",
				"rsc@google.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5672078/diff/5001/doc/go_faq.html\nFile doc/go_faq.html (right):\n\nhttp://codereview.appspot.com/5672078/diff/5001/doc/go_faq.html#newcode688\ndoc/go_faq.html:688: Under the covers, interfaces are implemented as two elements, a type and a value.\nThe spec calls this the \"dynamic type;\" perhaps we could work that in here somewhere.\n\nhttp://codereview.appspot.com/5672078/diff/5001/doc/go_faq.html#newcode719\ndoc/go_faq.html:719: When the function returns <code>p</code>, the return value is an <code>error</code> interface\nPerhaps \"When the function succeeds and returns....\"  Otherwise the text suggests that the function always returns p == nil.\n\nhttp://codereview.appspot.com/5672078/diff/5001/doc/go_faq.html#newcode730\ndoc/go_faq.html:730: var p *MyError = nil\nNo need for the variable p in this example.",
			"disapproval": false,
			"date": "2012-02-17 05:11:46.565432",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"bradfitz@golang.org",
				"rsc@google.com",
				"iant@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, rsc@google.com, iant@golang.org, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-17 05:22:14.329503",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"bradfitz@golang.org",
				"rsc@google.com",
				"iant@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as 51793ab42fa9 ***\n\nfaq: add entry about nil interfaces vs. nil pointers\n\nFixes issue 2778.\n\nR=bradfitz, rsc, iant, adg\nCC=golang-dev\nhttp://codereview.appspot.com/5672078",
			"disapproval": false,
			"date": "2012-02-17 05:27:22.140404",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"r@golang.org",
				"bradfitz@golang.org",
				"rsc@google.com",
				"iant@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-02-17 05:23:26.416427",
			"approval": true
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5672078: faq: add entry about nil interfaces vs. nil pointers",
	"created": "2012-02-17 04:30:51.652531",
	"patchsets": [
		1,
		5001,
		6001,
		3004,
		5008
	],
	"modified": "2012-02-17 05:27:25.049511",
	"closed": true,
	"issue": 5672078
}