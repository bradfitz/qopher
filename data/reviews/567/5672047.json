{
	"description": "os: delete os.EINVAL and so on\nThe set of errors forwarded by the os package varied with system and\nwas therefore non-portable.\nThree helpers added for portable error checking: IsExist, IsNotExist, and IsPermission.\nOne or two more may need to come, but let's keep the set very small to discourage\nthinking about errors that way.",
	"cc": [
		"mikioh.mikioh@gmail.com",
		"gustavo@niemeyer.net",
		"r@google.com",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-15 00:52:14.890002",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "plan 9 is a bit of a lost cause, but i fixed a few issues. the windows build works now.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-02-16 04:11:18.021364",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 15, 2012 at 9:52 AM,  <r@golang.org> wrote:\n\n> Description:\n> os: delete os.EINVAL and so on\n> The set of errors forwarded by the os package varied with system and\n> was therefore non-portable.\n\nI like doing something polish s/os.E/syscall.E/ but one question:\nwhy do you want to add helpers to package os, not to package errors?\n",
			"disapproval": false,
			"date": "2012-02-15 01:17:09.735270",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Feb 15, 2012, at 12:57 PM, Gustavo Niemeyer wrote:\n\n> On Tue, Feb 14, 2012 at 23:51, Rob 'Commander' Pike <r@google.com> wrote:\n>> \n>> On Feb 15, 2012, at 12:23 PM, Gustavo Niemeyer wrote:\n>> \n>>>> os: delete os.EINVAL and so on\n>>>> The set of errors forwarded by the os package varied with system and\n>>>> was therefore non-portable.\n>>> \n>>> I appreciate the goal and the way the critical errors are being made\n>>> accessible through a portable way. I just wonder a bit about the fact\n>>> we're introducing a fourth convention for error management that\n>>> doesn't look necessary.\n>>> \n>>> Right now, when an error happens we have three accepted approaches to\n>>> choose from:\n>>> \n>>> 1) return fmt.Errorf(\"world is over\")\n>>> \n>>> 2) return ErrWorldIsOver\n>>> \n>>> 3) return &IsOverError{\"world\"}\n>>> \n>>> This CL introduces a fourth one:\n>>> \n>>> 4) pkg.IsWorldOver(&UhOh{\"world\"})\n>> \n>> how does it do that?\n> \n> Replace IsWorldOver by IsExist and UhOh by PathError:\n> \n>    f, err := os.OpenFile(name, os.O_RDWR|os.O_CREATE|os.O_EXCL, 0600)\n>    if os.IsExist(err) { ... }\n> \n> I'm wondering how that's better than, for example:\n> \n>    if _, ok := err.(*ExistsError); ok { ... }\n\n\nOn Plan 9 I don't know how to do what you're asking since the underlying error is a variable string, not a fixed error code. At the point the error is created, we don't know its type.\n\nThere should be very very few uses of these functions. I even considered pulling the count down the zero; the only case that's in our library is in TempFile. But TempFile is best done this way, and there will be very rare other cases.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-02-15 02:02:49.358039",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> os: delete os.EINVAL and so on\n> The set of errors forwarded by the os package varied with system and\n> was therefore non-portable.\n\nI appreciate the goal and the way the critical errors are being made\naccessible through a portable way. I just wonder a bit about the fact\nwe're introducing a fourth convention for error management that\ndoesn't look necessary.\n\nRight now, when an error happens we have three accepted approaches to\nchoose from:\n\n1) return fmt.Errorf(\"world is over\")\n\n2) return ErrWorldIsOver\n\n3) return &IsOverError{\"world\"}\n\nThis CL introduces a fourth one:\n\n4) pkg.IsWorldOver(&UhOh{\"world\"})\n\nIt feels like this same issue could easily be solved by the 3rd\napproach instead, with something along the lines of:\n\n    type NotFoundError struct {\n        PathError\n    }\n\n    if _, ok := err.(*NotFoundError); ok { ... }\n\nIs there a reason why you're resisting that?\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-02-15 01:23:36.926873",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Feb 15, 2012, at 12:23 PM, Gustavo Niemeyer wrote:\n\n>> os: delete os.EINVAL and so on\n>> The set of errors forwarded by the os package varied with system and\n>> was therefore non-portable.\n> \n> I appreciate the goal and the way the critical errors are being made\n> accessible through a portable way. I just wonder a bit about the fact\n> we're introducing a fourth convention for error management that\n> doesn't look necessary.\n> \n> Right now, when an error happens we have three accepted approaches to\n> choose from:\n> \n> 1) return fmt.Errorf(\"world is over\")\n> \n> 2) return ErrWorldIsOver\n> \n> 3) return &IsOverError{\"world\"}\n> \n> This CL introduces a fourth one:\n> \n> 4) pkg.IsWorldOver(&UhOh{\"world\"})\n\nhow does it do that?\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-02-15 01:51:55.554529",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Feb 14, 2012 at 23:51, Rob 'Commander' Pike <r@google.com> wrote:\n>\n> On Feb 15, 2012, at 12:23 PM, Gustavo Niemeyer wrote:\n>\n>>> os: delete os.EINVAL and so on\n>>> The set of errors forwarded by the os package varied with system and\n>>> was therefore non-portable.\n>>\n>> I appreciate the goal and the way the critical errors are being made\n>> accessible through a portable way. I just wonder a bit about the fact\n>> we're introducing a fourth convention for error management that\n>> doesn't look necessary.\n>>\n>> Right now, when an error happens we have three accepted approaches to\n>> choose from:\n>>\n>> 1) return fmt.Errorf(\"world is over\")\n>>\n>> 2) return ErrWorldIsOver\n>>\n>> 3) return &IsOverError{\"world\"}\n>>\n>> This CL introduces a fourth one:\n>>\n>> 4) pkg.IsWorldOver(&UhOh{\"world\"})\n>\n> how does it do that?\n\nReplace IsWorldOver by IsExist and UhOh by PathError:\n\n    f, err := os.OpenFile(name, os.O_RDWR|os.O_CREATE|os.O_EXCL, 0600)\n    if os.IsExist(err) { ... }\n\nI'm wondering how that's better than, for example:\n\n    if _, ok := err.(*ExistsError); ok { ... }\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-02-15 01:58:15.911347",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Feb 16, 2012, at 1:27 PM, mikioh.mikioh@gmail.com wrote:\n\n> Please run belows too:\n> \n> GOOS=windows GOARCH=386 go tool dist bootstrap\n> go build -v std\n> \n> and\n> \n> GOOS=plan9 GOARCH=386 go tool dist bootstrap\n> go build -v std\n\nboth complete without errors.\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2012-02-16 02:39:11.694680",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Feb 15, 2012, at 12:17 PM, Mikio Hara wrote:\n\n> On Wed, Feb 15, 2012 at 9:52 AM,  <r@golang.org> wrote:\n> \n>> Description:\n>> os: delete os.EINVAL and so on\n>> The set of errors forwarded by the os package varied with system and\n>> was therefore non-portable.\n> \n> I like doing something polish s/os.E/syscall.E/ but one question:\n> why do you want to add helpers to package os, not to package errors?\n\nThat would require errors to depend on syscall, which would be circular.\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2012-02-15 02:03:09.737666",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 15, 2012 at 00:02, Rob 'Commander' Pike <r@google.com> wrote:\n> On Plan 9 I don't know how to do what you're asking since the underlying error is a variable string, not a fixed error code. At the point the error is created, we don't know its type.\n\nWe could do the same check at creation time. I agree it's not great,\nbut I suppose the syscall should dwarf the cost of doing an inline\nstring comparison.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-02-15 02:25:56.175759",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry (as always) I did typo on previos comment.\n\nGOOS=windows GOARCH=386 go tool dist bootstrap\nGOOS=windows GOARCH=386 go build -v std\n\nGOOS=plan9 GOARCH=386 go tool dist bootstrap\nGOOS=plan9 GOARCH=386 go build -v std\n\nThen you can see some error messages:\n\n# os\n/usr/home/mikioh/go/src/pkg/os/exec_windows.go:51: undefined: EINVAL\n/usr/home/mikioh/go/src/pkg/os/file_windows.go:101: undefined: EISDIR\n/usr/home/mikioh/go/src/pkg/os/file_windows.go:120: undefined: EINVAL\n/usr/home/mikioh/go/src/pkg/os/file_windows.go:141: undefined: EINVAL\n/usr/home/mikioh/go/src/pkg/os/file_windows.go:144: undefined: ENOTDIR\n/usr/home/mikioh/go/src/pkg/os/stat_windows.go:17: undefined: EINVAL\n",
			"disapproval": false,
			"date": "2012-02-16 02:44:41.566147",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"r@golang.org",
				"mikioh.mikioh@gmail.com",
				"gustavo@niemeyer.net",
				"r@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It bothers me slightly to have portable predicates that cannot be\nsatisfied portably: there is no way to construct an error such that\nIsPermission is true, without resorting to package syscall.\n\nErrPermission is added in lp_unix.go but not a case in IsPermission.\nMaybe it should move to a more common file along with \nnew errors ErrExist and ErrNotExist, and the predicates can allow\nthose in addition to the syscall values.\n\nhttp://codereview.appspot.com/5672047/diff/1/src/pkg/os/error_posix.go\nFile src/pkg/os/error_posix.go (right):\n\nhttp://codereview.appspot.com/5672047/diff/1/src/pkg/os/error_posix.go#newcode36\nsrc/pkg/os/error_posix.go:36: func contains(s, sep string) bool {\nUnused here; delete?",
			"disapproval": false,
			"date": "2012-02-15 13:37:28.277769",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"mikioh.mikioh@gmail.com",
				"gustavo@niemeyer.net",
				"r@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello mikioh.mikioh@gmail.com, gustavo@niemeyer.net, r@google.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-16 02:01:56.073722",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"r@golang.org",
				"mikioh.mikioh@gmail.com",
				"gustavo@niemeyer.net",
				"r@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please run belows too:\n\nGOOS=windows GOARCH=386 go tool dist bootstrap\ngo build -v std\n\nand \n\nGOOS=plan9 GOARCH=386 go tool dist bootstrap\ngo build -v std",
			"disapproval": false,
			"date": "2012-02-16 02:27:12.844907",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"r@golang.org",
				"mikioh.mikioh@gmail.com",
				"gustavo@niemeyer.net",
				"r@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-02-16 20:05:29.377329",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"mikioh.mikioh@gmail.com",
				"gustavo@niemeyer.net",
				"r@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as 9b81467f5f3f ***\n\nos: delete os.EINVAL and so on\nThe set of errors forwarded by the os package varied with system and\nwas therefore non-portable.\nThree helpers added for portable error checking: IsExist, IsNotExist, and IsPermission.\nOne or two more may need to come, but let's keep the set very small to discourage\nthinking about errors that way.\n\nR=mikioh.mikioh, gustavo, r, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5672047",
			"disapproval": false,
			"date": "2012-02-16 23:04:34.013888",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"mikioh.mikioh@gmail.com",
				"gustavo@niemeyer.net",
				"r@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello mikioh.mikioh@gmail.com, gustavo@niemeyer.net, r@google.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-16 04:11:07.262344",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"r@golang.org",
				"mikioh.mikioh@gmail.com",
				"gustavo@niemeyer.net",
				"r@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-02-16 04:35:31.690185",
			"approval": true
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping\n\n",
			"disapproval": false,
			"date": "2012-02-16 20:02:20.627737",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5672047: os: delete os.EINVAL and so on",
	"created": "2012-02-15 00:51:56.398246",
	"patchsets": [
		1,
		5002,
		32,
		2004,
		5006,
		4034,
		5007
	],
	"modified": "2012-02-16 23:04:36.498553",
	"closed": true,
	"issue": 5672047
}