{
	"description": "net/url: API\n\nConvert cryptotype to general go1rename fix.\nAdd os.Exec -> syscall.Exec fix along with new\nURL fixes.\n\nFixes issue 2946.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"dsymonds@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-16 18:22:38.293102",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Feb 16, 2012 at 16:31, Russ Cox <rsc@golang.org> wrote:\n> url.ParseURLWithFragment is a Java function.\n\nand it still sounds like it is using a fragment to do the parsing.\n",
			"disapproval": false,
			"date": "2012-02-16 21:31:38.200633",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Okay.  I'll revise this CL.\n",
			"disapproval": false,
			"date": "2012-02-16 23:38:37.083800",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nI am happy, thanks.",
			"disapproval": false,
			"date": "2012-02-17 03:37:45.788076",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as 789b1662e5ce ***\n\nnet/url: API\n\nConvert cryptotype to general go1rename fix.\nAdd os.Exec -> syscall.Exec fix along with new\nURL fixes.\n\nFixes issue 2946.\n\nR=golang-dev, r, dsymonds\nCC=golang-dev\nhttp://codereview.appspot.com/5672072",
			"disapproval": false,
			"date": "2012-02-17 04:46:31.610308",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Feb 16, 2012 at 16:30, David Symonds <dsymonds@golang.org> wrote:\n> I just explained the extra value.\n>\n> I'd take ParseURLWithFragment over ParseFragment any day. The latter is wrong.\n\nI think ParseWithFragment and ParseFragment are equally\nincomplete.  Given that, the shorter one wins.\n\nurl.ParseURLWithFragment is a Java function.\n",
			"disapproval": false,
			"date": "2012-02-16 21:31:20.602344",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nworks for me, but dsymonds didn't like ParseFragment. i'll let you two fight that out.",
			"disapproval": false,
			"date": "2012-02-16 19:52:42.760899",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "That's fine.  I dropped with With because there is nothing for it to modify.\n",
			"disapproval": false,
			"date": "2012-02-16 20:00:24.770902",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Feb 16, 2012 at 17:02, David Symonds <dsymonds@golang.org> wrote:\n> Yeah, I can't understand why ParseRequestURI is there either.\n\nAt least that one I can explain.\nParse and ParseRequestURI can return different results\non the same input.  One expects a URL like would be\nin an HTML page (without #fragment) and the other\nexpects what you'd get in an HTTP request.\nThe grammars are different and neither is a subset\nof the other:\n\n$ cat x.go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/url\"\n)\n\nfunc main() {\n\tconst x = \"//not.a.user@not.a.host/just/a/path\"\n\t\n\tu, _ := url.Parse(x)\n\tfmt.Printf(\"Parse: %+v\\n\", *u)\n\n\tu, _ = url.ParseRequestURI(x)\n\tfmt.Printf(\"ParseRequestURI: %+v\\n\", *u)\n}\n\n$ go run x.go\nParse: {Scheme: Opaque: User:not.a.user Host:not.a.host\nPath:/just/a/path RawQuery: Fragment:}\nParseRequestURI: {Scheme: Opaque: User:<nil> Host:\nPath://not.a.user@not.a.host/just/a/path RawQuery: Fragment:}\n$\n\nParseFragment and Parse similarly accept the same inputs but return\ndifferent results.\n\n$ cat x.go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/url\"\n)\n\nfunc main() {\n\tconst x = \"http://www.google.com/#foo\"\n\t\n\tu, _ := url.Parse(x)\n\tfmt.Printf(\"Parse: %+v\\n\", *u)\n\n\tu, _ = url.ParseFragment(x)\n\tfmt.Printf(\"ParseFragment: %+v\\n\", *u)\n\n\tu, _ = url.ParseRequestURI(x)\n\tfmt.Printf(\"ParseRequestURI: %+v\\n\", *u)\n}\n\n$ go run x.go\nParse: {Scheme:http Opaque: User:<nil> Host:www.google.com Path:/#foo\nRawQuery: Fragment:}\nParseFragment: {Scheme:http Opaque: User:<nil> Host:www.google.com\nPath:/ RawQuery: Fragment:foo}\nParseRequestURI: {Scheme:http Opaque: User:<nil> Host:www.google.com\nPath:/#foo RawQuery: Fragment:}\n$\n\nWhat I don't know is whether all the cases where you want the\ncurrent fragment-free Parse should be using ParseRequestURI\ninstead.  If so, we can delete the current Parse and rename\nParseFragment to Parse.  But that's a big if.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-02-16 22:27:22.511415",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 17, 2012 at 9:27 AM, Russ Cox <rsc@golang.org> wrote:\n\n> What I don't know is whether all the cases where you want the\n> current fragment-free Parse should be using ParseRequestURI\n> instead. \u00a0If so, we can delete the current Parse and rename\n> ParseFragment to Parse. \u00a0But that's a big if.\n\nI've convinced myself that we can. URLs without fragments currently\nbehave the same in both paths, so we only have to consider URLs with\nfragments. Doing this reshuffle would change code that currently\nexpects to get an error for a URL-with-fragment to no longer get an\nerror, but still get a valid URL. Sensible code would not be looking\nin the Fragment field after that, so the rest of their code should\nstill be valid. As you said, they typically aren't passed around a\nnetwork, and it's relatively rare to be dealing with them, so this is\na rare case that now causes code to work instead of erroring out. That\nseems fine to me (though worth noting in the release notes), and\ndefinitely worth the API simplification.\n\n\nDave.\n",
			"disapproval": false,
			"date": "2012-02-16 23:06:05.612289",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org, dsymonds@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-17 02:52:13.440793",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 17, 2012 at 7:00 AM, Russ Cox <rsc@golang.org> wrote:\n\n> That's fine. \u00a0I dropped with With because there is nothing for it to modify.\n\nI explained why I included the With in the previous CL.\n\"ParseFragment\" is incorrect; it says that it parses a fragment, which\nit does not. Also, in the caller's context, it will be\nurl.ParseWithFragment, so the \"url\" gives a context for the With. I\ncould make it ParseURLWithFragment if you're really concerned about\nthe With being ambiguous, but that seems unnecessary.\n\nFragments with structure are getting more and more common these days.\nIt's reasonable to parse one. So saying \"ParseFragment\" is, I believe,\nmisleading. I don't see the With being an unbearably imposition to\navoid the confusion.\n\n\nDave.\n",
			"disapproval": false,
			"date": "2012-02-16 21:25:28.600585",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Different thought: let's drop this function altogether. Parse can\neasily do both jobs. It's not like we have a ParsePort, or\nParseUserPassword, or ParseURLWithQuery or something.\n\n\nDave.\n",
			"disapproval": false,
			"date": "2012-02-16 21:40:30.070957",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Feb 16, 2012 at 16:40, David Symonds <dsymonds@golang.org> wrote:\n> Different thought: let's drop this function altogether. Parse can\n> easily do both jobs. It's not like we have a ParsePort, or\n> ParseUserPassword, or ParseURLWithQuery or something.\n\nI am not sure that Parse should do both jobs.\nMost URLs passed around on the network\nshould not have #fragment, so it is important\nto return an error if they do.  For example,\nit is important not to send the #fragment in\na GET request.\n\nParseFragment was supposed to be something\nthat you'd use if you were inside a web browser,\nand Parse if you were getting URLs from the\nnetwork.  However, we had to add ParseRequestURI\nfor reasons I have forgotten.  Maybe the people\nwho don't want to allow #fragment are already calling\nParseRequestURI, so that we can make Parse be\nthe old ParseReference?\n\nRuss\n",
			"disapproval": false,
			"date": "2012-02-16 21:49:27.899967",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Feb 16, 2012 at 16:25, David Symonds <dsymonds@golang.org> wrote:\n> I explained why I included the With in the previous CL.\n> \"ParseFragment\" is incorrect; it says that it parses a fragment, which\n> it does not. Also, in the caller's context, it will be\n> url.ParseWithFragment, so the \"url\" gives a context for the With. I\n> could make it ParseURLWithFragment if you're really concerned about\n> the With being ambiguous, but that seems unnecessary.\n>\n> Fragments with structure are getting more and more common these days.\n> It's reasonable to parse one. So saying \"ParseFragment\" is, I believe,\n> misleading. I don't see the With being an unbearably imposition to\n> avoid the confusion.\n\nYou don't parse with a fragment.  You parse with a parser.\nNeither name is complete; names never are.\nThe extra word is not adding any value here.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-02-16 21:26:59.161277",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 17, 2012 at 8:26 AM, Russ Cox <rsc@golang.org> wrote:\n\n> On Thu, Feb 16, 2012 at 16:25, David Symonds <dsymonds@golang.org> wrote:\n>> I explained why I included the With in the previous CL.\n>> \"ParseFragment\" is incorrect; it says that it parses a fragment, which\n>> it does not. Also, in the caller's context, it will be\n>> url.ParseWithFragment, so the \"url\" gives a context for the With. I\n>> could make it ParseURLWithFragment if you're really concerned about\n>> the With being ambiguous, but that seems unnecessary.\n>>\n>> Fragments with structure are getting more and more common these days.\n>> It's reasonable to parse one. So saying \"ParseFragment\" is, I believe,\n>> misleading. I don't see the With being an unbearably imposition to\n>> avoid the confusion.\n>\n> You don't parse with a fragment. \u00a0You parse with a parser.\n> Neither name is complete; names never are.\n> The extra word is not adding any value here.\n\nI just explained the extra value.\n\nI'd take ParseURLWithFragment over ParseFragment any day. The latter is wrong.\n\n\nDave.\n",
			"disapproval": false,
			"date": "2012-02-16 21:30:40.178511",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 17, 2012 at 8:49 AM, Russ Cox <rsc@golang.org> wrote:\n\n> On Thu, Feb 16, 2012 at 16:40, David Symonds <dsymonds@golang.org> wrote:\n>> Different thought: let's drop this function altogether. Parse can\n>> easily do both jobs. It's not like we have a ParsePort, or\n>> ParseUserPassword, or ParseURLWithQuery or something.\n>\n> I am not sure that Parse should do both jobs.\n> Most URLs passed around on the network\n> should not have #fragment, so it is important\n> to return an error if they do. \u00a0For example,\n> it is important not to send the #fragment in\n> a GET request.\n\nA URL with a fragment is still a URL. The fact that in certain\ncontexts its presence is incorrect implies that checking for it should\nprobably be done in those places, not in a general URL parser.\n\n\n> ParseFragment was supposed to be something\n> that you'd use if you were inside a web browser,\n> and Parse if you were getting URLs from the\n> network. \u00a0However, we had to add ParseRequestURI\n> for reasons I have forgotten. \u00a0Maybe the people\n> who don't want to allow #fragment are already calling\n> ParseRequestURI, so that we can make Parse be\n> the old ParseReference?\n\nYeah, I can't understand why ParseRequestURI is there either.\n\n\nDave.\n",
			"disapproval": false,
			"date": "2012-02-16 22:02:25.094930",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5672072: net/url: API",
	"created": "2012-02-16 18:16:29.575687",
	"patchsets": [
		1,
		1002,
		4001,
		5004,
		3014,
		1010
	],
	"modified": "2012-02-17 04:46:32.661687",
	"closed": true,
	"issue": 5672072
}