{
	"description": "os: replace non-portable Waitmsg with portable ProcessState\nUse methods for key questions.\nProvide access to non-portable pieces through portable methods.\nWindows and Plan 9 updated.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"bradfitz@google.com",
		"r@google.com",
		"dsymonds@golang.org",
		"rsc@google.com",
		"iant@golang.org",
		"iant@google.com"
	],
	"reviewers": [
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"bradfitz@google.com",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, bradfitz@google.com, r@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-17 03:47:43.476175",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"bradfitz@google.com",
				"r@google.com",
				"dsymonds@golang.org",
				"rsc@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Nice.\n\nhttp://codereview.appspot.com/5673077/diff/5001/src/pkg/os/exec_posix.go\nFile src/pkg/os/exec_posix.go (right):\n\nhttp://codereview.appspot.com/5673077/diff/5001/src/pkg/os/exec_posix.go#newcode65\nsrc/pkg/os/exec_posix.go:65: // Exited returns whether the program has exited.\nLong ago I think we agreed on \"reports whether\" but I never bothered\nto convert the tree.\n\nhttp://codereview.appspot.com/5673077/diff/5001/src/pkg/os/exec_posix.go#newcode76\nsrc/pkg/os/exec_posix.go:76: // SysStatus returns system-dependent exit information about\nMaybe just Sys; we've used that in a few other places.\n\nhttp://codereview.appspot.com/5673077/diff/5001/src/pkg/os/exec_posix.go#newcode78\nsrc/pkg/os/exec_posix.go:78: // type, such as syscall.WaitStaus on Unix, to access its contents.\nWaitStatus\n\nhttp://codereview.appspot.com/5673077/diff/5001/src/pkg/os/exec_posix.go#newcode83\nsrc/pkg/os/exec_posix.go:83: // UserTime returns the user CPU time of the exited process.\nand its children, presumably.\n\nhttp://codereview.appspot.com/5673077/diff/5001/src/pkg/os/exec_posix.go#newcode88\nsrc/pkg/os/exec_posix.go:88: // SystemTime returns the system CPU time of the exited process.\nSame.\n\nhttp://codereview.appspot.com/5673077/diff/5001/src/pkg/os/exec_posix.go#newcode100\nsrc/pkg/os/exec_posix.go:100: // Wait waits for process pid to exit or stop, and then returns the\nIt's possible we should retire this entirely and just tell people to\nuse FindProcess in the rare case they are holding just a pid.\nWait only works for child processes, and those are now created\n(always) via StartProcess, so this should be very rare.\n\nMaybe if a C program forked a child process and then exec'ed\na Go program this would be necessary.\n\nhttp://codereview.appspot.com/5673077/diff/5001/src/pkg/os/exec_unix.go\nFile src/pkg/os/exec_unix.go (right):\n\nhttp://codereview.appspot.com/5673077/diff/5001/src/pkg/os/exec_unix.go#newcode30\nsrc/pkg/os/exec_unix.go:30: func (p *Process) Wait(options int) (ps *ProcessState, err error) {\nI think maybe we can just drop the options.\nPeople who care about non-blocking or waiting\nfor a child to get SIGTTOU can use package syscall.",
			"disapproval": false,
			"date": "2012-02-17 03:59:32.311186",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-02-17 03:36:24.124553",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is half the battle.\n\nThe other half is http://code.google.com/p/go/issues/detail?id=2823 ...\nthat the \"options int\" argument to Wait is a mix of random portable &\nnon-portable bits.\n\n\nOn Fri, Feb 17, 2012 at 2:36 PM, <r@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://code.google.com/p/go/\n>\n>\n> Description:\n> os: proposal for Waitmsg replacement\n> not ready for checkin; no downstream work is done\n> (although go test os passes on darwin)\n> - call it ProcessState\n> - use methods for key questions\n> - provide access to non-portable pieces through portable methods\n>\n> Please review this at http://codereview.appspot.com/**5673077/<http://codereview.appspot.com/5673077/>\n>\n> Affected files:\n>  M src/pkg/os/exec_posix.go\n>  M src/pkg/os/exec_unix.go\n>  M src/pkg/os/os_test.go\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-02-17 03:42:14.909110",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Feb 17, 2012, at 3:17 PM, iant@golang.org wrote:\n\n> \n> http://codereview.appspot.com/5673077/diff/5001/src/pkg/os/exec_posix.go\n> File src/pkg/os/exec_posix.go (right):\n> \n> http://codereview.appspot.com/5673077/diff/5001/src/pkg/os/exec_posix.go#newcode65\n> src/pkg/os/exec_posix.go:65: // Exited returns whether the program has\n> exited.\n> This comment makes it seems that this function can be called while the\n> process is still running, to see if the process has stopped.\n\nCan't it? If your process is suspended but not exited, doesn't wait give you one of these?\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-02-17 04:34:23.482981",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI\n\nRob 'Commander' Pike <r@google.com> writes:\n\n> On Feb 17, 2012, at 3:17 PM, iant@golang.org wrote:\n>\n>> \n>> http://codereview.appspot.com/5673077/diff/5001/src/pkg/os/exec_posix.go\n>> File src/pkg/os/exec_posix.go (right):\n>> \n>> http://codereview.appspot.com/5673077/diff/5001/src/pkg/os/exec_posix.go#newcode65\n>> src/pkg/os/exec_posix.go:65: // Exited returns whether the program has\n>> exited.\n>> This comment makes it seems that this function can be called while the\n>> process is still running, to see if the process has stopped.\n>\n> Can't it? If your process is suspended but not exited, doesn't wait give you one of these?\n\nYou're right, don't mind me.\n\nIan\n",
			"disapproval": false,
			"date": "2012-02-17 04:49:10.314968",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"bradfitz@google.com",
				"r@google.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks nice to me.\n\nhttp://codereview.appspot.com/5673077/diff/1/src/pkg/os/exec_posix.go\nFile src/pkg/os/exec_posix.go (right):\n\nhttp://codereview.appspot.com/5673077/diff/1/src/pkg/os/exec_posix.go#newcode53\nsrc/pkg/os/exec_posix.go:53: // ProcessState stores information about process as reported by Wait.\ns/process as reported by Wait/a process/?\n\nhttp://codereview.appspot.com/5673077/diff/1/src/pkg/os/exec_posix.go#newcode61\nsrc/pkg/os/exec_posix.go:61: func (p *ProcessState) Pid() int {\nPID() ?\n\nhttp://codereview.appspot.com/5673077/diff/1/src/pkg/os/exec_posix.go#newcode71\nsrc/pkg/os/exec_posix.go:71: // such as with exit status 0 on Unix.\nShould this explicitly define semantics if Exited() is returning false?",
			"disapproval": false,
			"date": "2012-02-17 03:50:57.793750",
			"approval": false
		},
		{
			"sender": "bradfitz@google.com",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"bradfitz@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5673077/diff/1/src/pkg/os/exec_posix.go\nFile src/pkg/os/exec_posix.go (right):\n\nhttp://codereview.appspot.com/5673077/diff/1/src/pkg/os/exec_posix.go#newcode89\nsrc/pkg/os/exec_posix.go:89: func (p *ProcessState) SysTime() time.Duration {\nSystemTime might be better name? Giving it the \"Sys\" prefix makes it look system-dependent, like SysStatus and SysTime and FileInfo.Sys.",
			"disapproval": false,
			"date": "2012-02-17 03:45:19.313126",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Feb 17, 2012, at 2:45 PM, bradfitz@google.com wrote:\n\n> \n> http://codereview.appspot.com/5673077/diff/1/src/pkg/os/exec_posix.go\n> File src/pkg/os/exec_posix.go (right):\n> \n> http://codereview.appspot.com/5673077/diff/1/src/pkg/os/exec_posix.go#newcode89\n> src/pkg/os/exec_posix.go:89: func (p *ProcessState) SysTime()\n> time.Duration {\n> SystemTime might be better name? Giving it the \"Sys\" prefix makes it\n> look system-dependent, like SysStatus and SysTime and FileInfo.Sys.\n\ngood point. i'll change it.\n\nregarding Wait: different topic i'll address separately\n\n\n",
			"disapproval": false,
			"date": "2012-02-17 03:47:02.695085",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Feb 16, 2012 at 23:34, Rob 'Commander' Pike <r@google.com> wrote:\n> Can't it? If your process is suspended but not exited, doesn't wait give you one of these?\n\nNot if we get rid of options.\n\nTypically Exited distinguishes between the process\ncalling exit and the process being killed by a signal.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-02-17 04:40:23.789838",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"bradfitz@google.com",
				"r@google.com",
				"dsymonds@golang.org",
				"rsc@google.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5673077/diff/5001/src/pkg/os/exec_posix.go\nFile src/pkg/os/exec_posix.go (right):\n\nhttp://codereview.appspot.com/5673077/diff/5001/src/pkg/os/exec_posix.go#newcode65\nsrc/pkg/os/exec_posix.go:65: // Exited returns whether the program has exited.\nThis comment makes it seems that this function can be called while the process is still running, to see if the process has stopped.",
			"disapproval": false,
			"date": "2012-02-17 04:17:32.142519",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn 23/02/2012, at 4:42 AM, rsc@golang.org wrote:\n\n> \n> http://codereview.appspot.com/5673077/diff/14004/src/pkg/os/exec_posix.go\n> File src/pkg/os/exec_posix.go (right):\n> \n> http://codereview.appspot.com/5673077/diff/14004/src/pkg/os/exec_posix.go#newcode48\n> src/pkg/os/exec_posix.go:48: status *syscall.WaitStatus //\n> System-dependent status info.\n> I know I am late to this but I suspect that this should not be a\n> pointer.  The status is a single word on Unix and the methods are on the\n> value.  There hasn't been a weekly yet so we can still fix this.\n> \n> http://coderevi\n\nroger wilco",
			"disapproval": false,
			"date": "2012-02-22 20:37:51.787762",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"bradfitz@google.com",
				"r@google.com",
				"dsymonds@golang.org",
				"rsc@google.com",
				"iant@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, bradfitz@google.com, r@google.com, dsymonds@golang.org, rsc@google.com, iant@golang.org, iant@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-21 02:50:05.851531",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"bradfitz@google.com",
				"r@google.com",
				"dsymonds@golang.org",
				"rsc@google.com",
				"iant@golang.org",
				"iant@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as cc7630ccd586 ***\n\nos: replace non-portable Waitmsg with portable ProcessState\nUse methods for key questions.\nProvide access to non-portable pieces through portable methods.\nWindows and Plan 9 updated.\n\nR=golang-dev, bradfitz, bradfitz, r, dsymonds, rsc, iant, iant\nCC=golang-dev\nhttp://codereview.appspot.com/5673077",
			"disapproval": false,
			"date": "2012-02-21 03:10:38.643671",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Feb 21, 2012, at 2:08 PM, bradfitz@golang.org wrote:\n\n> I assume you'll be updating go1.tmpl at some point.\n\ni filed an issue about that earlier today. there's a potential complexity, but it'll get done.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-02-21 03:10:05.604303",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"bradfitz@google.com",
				"r@google.com",
				"dsymonds@golang.org",
				"rsc@google.com",
				"iant@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, bradfitz@google.com, r@google.com, dsymonds@golang.org, rsc@google.com, iant@golang.org, iant@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-21 02:13:13.834888",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"bradfitz@google.com",
				"r@google.com",
				"dsymonds@golang.org",
				"rsc@google.com",
				"iant@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-02-21 03:07:51.925629",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"bradfitz@google.com",
				"r@google.com",
				"dsymonds@golang.org",
				"rsc@google.com",
				"iant@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I assume you'll be updating go1.tmpl at some point.",
			"disapproval": false,
			"date": "2012-02-21 03:08:10.057605",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"bradfitz@google.com",
				"r@google.com",
				"dsymonds@golang.org",
				"rsc@google.com",
				"iant@golang.org",
				"iant@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5673077/diff/14004/src/pkg/os/exec_posix.go\nFile src/pkg/os/exec_posix.go (right):\n\nhttp://codereview.appspot.com/5673077/diff/14004/src/pkg/os/exec_posix.go#newcode48\nsrc/pkg/os/exec_posix.go:48: status *syscall.WaitStatus // System-dependent status info.\nI know I am late to this but I suspect that this should not be a pointer.  The status is a single word on Unix and the methods are on the value.  There hasn't been a weekly yet so we can still fix this.",
			"disapproval": false,
			"date": "2012-02-22 17:42:18.993999",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"bradfitz@google.com",
				"r@google.com",
				"dsymonds@golang.org",
				"rsc@google.com",
				"iant@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5673077/diff/10010/src/pkg/os/exec_unix.go\nFile src/pkg/os/exec_unix.go (right):\n\nhttp://codereview.appspot.com/5673077/diff/10010/src/pkg/os/exec_unix.go#newcode23\nsrc/pkg/os/exec_unix.go:23: pid1, e := syscall.Wait4(p.Pid, &status, 0, nil)\nI thought we were always going to request resource usage now... s/nil/&usage/",
			"disapproval": false,
			"date": "2012-02-21 02:54:22.923576",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"bradfitz@google.com",
				"r@google.com",
				"dsymonds@golang.org",
				"rsc@google.com",
				"iant@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5673077/diff/10009/src/cmd/godoc/main.go\nFile src/cmd/godoc/main.go (right):\n\nhttp://codereview.appspot.com/5673077/diff/10009/src/cmd/godoc/main.go#newcode114\nsrc/cmd/godoc/main.go:114: log.Printf(\"executing %v failed (exit status = %d)\", args, status)\nstatus is not set here.  it compiles, but it's always just zero (the result parameter).\n\nhttp://codereview.appspot.com/5673077/diff/10009/src/pkg/os/exec_posix.go\nFile src/pkg/os/exec_posix.go (right):\n\nhttp://codereview.appspot.com/5673077/diff/10009/src/pkg/os/exec_posix.go#newcode70\nsrc/pkg/os/exec_posix.go:70: // type, such as syscall.WaitStatus on Unix, to access its contents.\n*syscall.WaitStatus\n\nhttp://codereview.appspot.com/5673077/diff/10009/src/pkg/os/exec_windows.go\nFile src/pkg/os/exec_windows.go (right):\n\nhttp://codereview.appspot.com/5673077/diff/10009/src/pkg/os/exec_windows.go#newcode89\nsrc/pkg/os/exec_windows.go:89: // It is always reported as 0 on Windows.\ns/always/currently/ ?\n\nI wouldn't promise it's always zero, if we plan on implementing it in the future.\n\nhttp://codereview.appspot.com/5673077/diff/10009/src/pkg/os/exec_windows.go#newcode95\nsrc/pkg/os/exec_windows.go:95: // It is always reported as 0 on Windows.\nlikewise",
			"disapproval": false,
			"date": "2012-02-21 02:20:24.755005",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"bradfitz@google.com",
				"r@google.com",
				"dsymonds@golang.org",
				"rsc@google.com",
				"iant@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org, bradfitz@google.com, r@google.com, dsymonds@golang.org, rsc@google.com, iant@golang.org, iant@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-21 03:01:50.195398",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5673077: os: replace non-portable Waitmsg with portable ProcessState",
	"created": "2012-02-17 03:36:17.107576",
	"patchsets": [
		1,
		5001,
		8001,
		10009,
		10010,
		15002,
		14004
	],
	"modified": "2012-02-22 17:42:19.377612",
	"closed": true,
	"issue": 5673077
}