{
	"description": "go/parser: reject import paths containing special characters\n\nPart of issue 3021.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"r@golang.org",
		"rsc@golang.org",
		"r@google.com",
		"jan.mercl@nic.cz",
		"rsc@google.com",
		"gri@golang.org"
	],
	"messages": [
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn 19/02/2012, at 6:57 AM, Russ Cox wrote:\n\n> utf8.ValidString and strings.ContainsAny\n\neven better.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-02-18 20:41:30.958014",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn 19/02/2012, at 11:07 PM, jan.mercl@nic.cz wrote:\n\n> On 2012/02/18 09:14:34, ality wrote:\n>> Hello mailto:golang-dev@googlegroups.com,\n> \n>> I'd like you to review this change to\n>> https://code.google.com/p/go/\n> \n> Per specs:\n> [Q]\n> The interpretation of the ImportPath is implementation-dependent but it\n> is typically a substring of the full file name of the compiled package\n> and may be relative to a repository of installed packages.\n> [/Q]\n> \n> So IMO gc/gccgo are free to reject some ImportPaths, but I'm not sure if\n> the stdlib, possibly shared between other Go implementations, may\n> legally do this.\n> \n> Perhaps add a flag to parser.Mode? Otherwise a specs change is probably\n> required.\n> \n> http://codereview.appspot.com/5674097/\n\nalso update test/import5.go for more thoroughness.\n\n",
			"disapproval": false,
			"date": "2012-02-19 12:17:25.272959",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-02-18 09:14:34.296236",
			"approval": false
		},
		{
			"sender": "jan.mercl@nic.cz",
			"recipients": [
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"jan.mercl@nic.cz",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/02/18 09:14:34, ality wrote:\n> Hello mailto:golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go/\n\nPer specs:\n[Q]\nThe interpretation of the ImportPath is implementation-dependent but it is typically a substring of the full file name of the compiled package and may be relative to a repository of installed packages.\n[/Q]\n\nSo IMO gc/gccgo are free to reject some ImportPaths, but I'm not sure if the stdlib, possibly shared between other Go implementations, may legally do this.\n\nPerhaps add a flag to parser.Mode? Otherwise a specs change is probably required.",
			"disapproval": false,
			"date": "2012-02-19 12:07:09.323930",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5674097/diff/1001/src/pkg/go/parser/parser.go\nFile src/pkg/go/parser/parser.go (right):\n\nhttp://codereview.appspot.com/5674097/diff/1001/src/pkg/go/parser/parser.go#newcode1919\nsrc/pkg/go/parser/parser.go:1919: func isValidImportPath(s string) (ok bool, reason string) {\nutf8.ValidString and a pretty simple regexp would do this fine and be easier to believe correct.\nthe only message you need is, \"invalid character in import string\"",
			"disapproval": false,
			"date": "2012-02-18 10:53:12.406531",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "utf8.ValidString and strings.ContainsAny\n",
			"disapproval": false,
			"date": "2012-02-18 19:57:28.176767",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Feb 19, 2012 at 07:07,  <jan.mercl@nic.cz> wrote:\n> Per specs:\n> [Q]\n> The interpretation of the ImportPath is implementation-dependent but it\n> is typically a substring of the full file name of the compiled package\n> and may be relative to a repository of installed packages.\n> [/Q]\n>\n> So IMO gc/gccgo are free to reject some ImportPaths, but I'm not sure if\n> the stdlib, possibly shared between other Go implementations, may\n> legally do this.\n\nThe standard library should have the same restrictions\nthe tools do, so that things like the go tool can rely\non them.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-02-19 18:13:09.459325",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"jan.mercl@nic.cz",
				"rsc@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5674097/diff/1001/src/pkg/go/parser/parser_test.go\nFile src/pkg/go/parser/parser_test.go (right):\n\nhttp://codereview.appspot.com/5674097/diff/1001/src/pkg/go/parser/parser_test.go#newcode20\nsrc/pkg/go/parser/parser_test.go:20: \"package p; import \\\"a\\x00b\\\";\",\nPlease repeat these lines with `` instead of \"\",\nso that the \\x00 is passed to the parser.",
			"disapproval": false,
			"date": "2012-02-19 20:34:16.870758",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"jan.mercl@nic.cz",
				"rsc@google.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI\n\nhttp://codereview.appspot.com/5674097/diff/1001/src/pkg/go/parser/parser.go\nFile src/pkg/go/parser/parser.go (right):\n\nhttp://codereview.appspot.com/5674097/diff/1001/src/pkg/go/parser/parser.go#newcode1919\nsrc/pkg/go/parser/parser.go:1919: func isValidImportPath(s string) (ok bool, reason string) {\nOn 2012/02/18 10:53:12, r wrote:\n> utf8.ValidString and a pretty simple regexp would do this fine and be easier to\n> believe correct.\n> the only message you need is, \"invalid character in import string\"\n\nand thus the only result required is a bool\n\nhttp://codereview.appspot.com/5674097/diff/1001/src/pkg/go/parser/parser.go#newcode1960\nsrc/pkg/go/parser/parser.go:1960: path.Value = \"\"\nno need to set this to \"\" - it may be useful to see the illegal path",
			"disapproval": false,
			"date": "2012-02-21 18:43:54.001596",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"jan.mercl@nic.cz",
				"rsc@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org, rsc@golang.org, r@google.com, jan.mercl@nic.cz, rsc@google.com, gri@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-22 03:45:45.295323",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"jan.mercl@nic.cz",
				"rsc@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/5674097/diff/1001/src/pkg/go/parser/parser.go\nFile src/pkg/go/parser/parser.go (right):\n\nhttps://codereview.appspot.com/5674097/diff/1001/src/pkg/go/parser/parser.go#newcode1919\nsrc/pkg/go/parser/parser.go:1919: func isValidImportPath(s string) (ok bool, reason string) {\nOn 2012/02/18 10:53:12, r wrote:\n> utf8.ValidString and a pretty simple regexp would do this fine and be easier to\n> believe correct.\n> the only message you need is, \"invalid character in import string\"\n\nDone.\n\nhttps://codereview.appspot.com/5674097/diff/1001/src/pkg/go/parser/parser.go#newcode1960\nsrc/pkg/go/parser/parser.go:1960: path.Value = \"\"\nOn 2012/02/21 18:43:54, gri wrote:\n> no need to set this to \"\" - it may be useful to see the illegal path\n\nDone.\n\nhttps://codereview.appspot.com/5674097/diff/1001/src/pkg/go/parser/parser_test.go\nFile src/pkg/go/parser/parser_test.go (right):\n\nhttps://codereview.appspot.com/5674097/diff/1001/src/pkg/go/parser/parser_test.go#newcode20\nsrc/pkg/go/parser/parser_test.go:20: \"package p; import \\\"a\\x00b\\\";\",\nOn 2012/02/19 20:34:17, rsc1 wrote:\n> Please repeat these lines with `` instead of \"\",\n> so that the \\x00 is passed to the parser.\n\nDone.",
			"disapproval": false,
			"date": "2012-02-22 03:46:07.977846",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"ality@pbrane.org",
				"r@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"jan.mercl@nic.cz",
				"rsc@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5674097/diff/6003/src/pkg/go/parser/parser.go\nFile src/pkg/go/parser/parser.go (right):\n\nhttp://codereview.appspot.com/5674097/diff/6003/src/pkg/go/parser/parser.go#newcode1919\nsrc/pkg/go/parser/parser.go:1919: re := regexp.MustCompile(\"^[-+./@A-Za-z0-9\u00a1-\\U0010FFFF]+$\")\nPlease use strings.ContainsAny.  It is a more direct expression of the rule and avoids pulling in regexp.\n\nhttp://codereview.appspot.com/5674097/diff/6003/src/pkg/go/parser/parser.go#newcode1939\nsrc/pkg/go/parser/parser.go:1939: s := p.lit[1 : len(p.lit)-1] // strip surrounding double quotes\nYou should use strconv.Unquote here.  `` are possible too,\nand also import \"m\\x61th\", while silly, is legal, and this code\nwould reject it.\n\nhttp://codereview.appspot.com/5674097/diff/6003/src/pkg/go/parser/parser_test.go\nFile src/pkg/go/parser/parser_test.go (right):\n\nhttp://codereview.appspot.com/5674097/diff/6003/src/pkg/go/parser/parser_test.go#newcode16\nsrc/pkg/go/parser/parser_test.go:16: var illegalImports = []string{\nPlease add a test for legal inputs too, like \n\n`package p; import \"m\\x61th\";`.\n\nhttp://codereview.appspot.com/5674097/diff/6003/src/pkg/go/parser/parser_test.go#newcode20\nsrc/pkg/go/parser/parser_test.go:20: \"package p; import `a\\x00b`;\",\nPlease repeat these 3 lines with \\\\ instead of \\,\nso that the \\ gets through to the test.",
			"disapproval": false,
			"date": "2012-02-22 20:13:51.027856",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"r@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"jan.mercl@nic.cz",
				"rsc@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-02-22 22:45:53.686731",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please let me do this. This will be easier fo us.\n- gri\n\nOn Wed, Feb 22, 2012 at 12:13 PM,  <rsc@golang.org> wrote:\n>\n> http://codereview.appspot.com/5674097/diff/6003/src/pkg/go/parser/parser.go\n> File src/pkg/go/parser/parser.go (right):\n>\n> http://codereview.appspot.com/5674097/diff/6003/src/pkg/go/parser/parser.go#newcode1919\n> src/pkg/go/parser/parser.go:1919: re :=\n> regexp.MustCompile(\"^[-+./@A-Za-z0-9\u00a1-\\U0010FFFF]+$\")\n> Please use strings.ContainsAny. \u00a0It is a more direct expression of the\n> rule and avoids pulling in regexp.\n>\n> http://codereview.appspot.com/5674097/diff/6003/src/pkg/go/parser/parser.go#newcode1939\n> src/pkg/go/parser/parser.go:1939: s := p.lit[1 : len(p.lit)-1] // strip\n> surrounding double quotes\n> You should use strconv.Unquote here. \u00a0`` are possible too,\n> and also import \"m\\x61th\", while silly, is legal, and this code\n> would reject it.\n>\n> http://codereview.appspot.com/5674097/diff/6003/src/pkg/go/parser/parser_test.go\n> File src/pkg/go/parser/parser_test.go (right):\n>\n> http://codereview.appspot.com/5674097/diff/6003/src/pkg/go/parser/parser_test.go#newcode16\n> src/pkg/go/parser/parser_test.go:16: var illegalImports = []string{\n> Please add a test for legal inputs too, like\n>\n> `package p; import \"m\\x61th\";`.\n>\n> http://codereview.appspot.com/5674097/diff/6003/src/pkg/go/parser/parser_test.go#newcode20\n>\n> src/pkg/go/parser/parser_test.go:20: \"package p; import `a\\x00b`;\",\n> Please repeat these 3 lines with \\\\ instead of \\,\n> so that the \\ gets through to the test.\n>\n> http://codereview.appspot.com/5674097/\n",
			"disapproval": false,
			"date": "2012-02-22 20:31:14.763718",
			"approval": false
		}
	],
	"owner_email": "ality@pbrane.org",
	"private": false,
	"base_url": "",
	"owner": "ality",
	"subject": "code review 5674097: go/parser: reject import paths containing special characters",
	"created": "2012-02-18 09:12:27.907721",
	"patchsets": [
		1,
		1001,
		6003
	],
	"modified": "2012-02-22 22:45:55.846521",
	"closed": true,
	"issue": 5674097
}