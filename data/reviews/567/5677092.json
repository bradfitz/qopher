{
	"description": "runtime: fix tiny memory leak\n\nThe m->cret word holds the C return value when returning\nacross a stack split boundary.  It was not being cleared after\nuse, which means that the return value (if a C function)\nor else the value of AX/R0 at the time of the last stack unsplit\nwas being kept alive longer than necessary.  Clear it.\n\nI think the effect here should be very small, but worth fixing\nanyway.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-02-19 05:21:46.402052",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as b65103673706 ***\n\nruntime: fix tiny memory leak\n\nThe m->cret word holds the C return value when returning\nacross a stack split boundary.  It was not being cleared after\nuse, which means that the return value (if a C function)\nor else the value of AX/R0 at the time of the last stack unsplit\nwas being kept alive longer than necessary.  Clear it.\n\nI think the effect here should be very small, but worth fixing\nanyway.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5677092",
			"disapproval": false,
			"date": "2012-02-19 05:26:37.087021",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn Sat, Feb 18, 2012 at 9:21 PM, <rsc@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://code.google.com/p/go/\n>\n>\n> Description:\n> runtime: fix tiny memory leak\n>\n> The m->cret word holds the C return value when returning\n> across a stack split boundary.  It was not being cleared after\n> use, which means that the return value (if a C function)\n> or else the value of AX/R0 at the time of the last stack unsplit\n> was being kept alive longer than necessary.  Clear it.\n>\n> I think the effect here should be very small, but worth fixing\n> anyway.\n>\n> Please review this at http://codereview.appspot.com/**5677092/<http://codereview.appspot.com/5677092/>\n>\n> Affected files:\n>  M src/pkg/runtime/proc.c\n>\n>\n> Index: src/pkg/runtime/proc.c\n> ==============================**==============================**=======\n> --- a/src/pkg/runtime/proc.c\n> +++ b/src/pkg/runtime/proc.c\n> @@ -1011,6 +1011,7 @@\n>  {\n>        Stktop *top, old;\n>        uint32 argsize;\n> +       uintptr cret;\n>        byte *sp;\n>        G *g1;\n>        int32 goid;\n> @@ -1034,7 +1035,9 @@\n>        g1->stackbase = old.stackbase;\n>        g1->stackguard = old.stackguard;\n>\n> -       runtime\u00b7gogo(&old.gobuf, m->cret);\n> +       cret = m->cret;\n> +       m->cret = 0;  // drop reference\n> +       runtime\u00b7gogo(&old.gobuf, cret);\n>  }\n>\n>  // Called from reflect\u00b7call or from runtime\u00b7morestack when a new\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-02-19 05:23:58.336072",
			"approval": true
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5677092: runtime: fix tiny memory leak",
	"created": "2012-02-19 05:20:27.800452",
	"patchsets": [
		1,
		1002,
		1003,
		6001
	],
	"modified": "2012-02-19 05:26:38.504154",
	"closed": true,
	"issue": 5677092
}