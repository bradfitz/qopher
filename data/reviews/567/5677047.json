{
	"description": "godoc: support for package examples, display example suffixes\n\nFixes issue 2896.",
	"cc": [
		"golang-dev@googlegroups.com",
		"gri@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2012-02-15 05:08:43.978755",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as 28563504459a ***\n\ngodoc: support for package examples, display example suffixes\n\nFixes issue 2896.\n\nR=golang-dev, gri\nCC=golang-dev\nhttp://codereview.appspot.com/5677047\n\nhttp://codereview.appspot.com/5677047/diff/4002/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttp://codereview.appspot.com/5677047/diff/4002/src/cmd/godoc/godoc.go#newcode542\nsrc/cmd/godoc/godoc.go:542: name = strings.Replace(name, \"_\", \".\", 1)\nOn 2012/02/15 22:39:29, gri wrote:\n> what if it's not a method but the function name has an _ ? should there be\n> another convention?\n\nWe're already pretty far down this path. None of our public APIs have underscores in the name. This isn't the time to redesign this.\n\nhttp://codereview.appspot.com/5677047/diff/4002/src/pkg/container/heap/example_test.go\nFile src/pkg/container/heap/example_test.go (right):\n\nhttp://codereview.appspot.com/5677047/diff/4002/src/pkg/container/heap/example_test.go#newcode62\nsrc/pkg/container/heap/example_test.go:62: // The full code of this example, including the methods that implement\nOn 2012/02/15 22:39:29, gri wrote:\n> This can probably go now.\n\nDone.",
			"disapproval": false,
			"date": "2012-02-15 22:44:06.928244",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/5677047/diff/2001/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttp://codereview.appspot.com/5677047/diff/2001/src/cmd/godoc/godoc.go#newcode539\nsrc/cmd/godoc/godoc.go:539: func example_nameFunc(name string) string {\nOn 2012/02/15 22:19:28, gri wrote:\n> name perhaps:\n> \n> example_sigFunc \n> \n> (sig as in signature)\n\nBut it's not the signature, it's a display name. The parenthetical isn't an argument list, it's a unique identifier for this particular example. Most examples don't have them - they're really only useful for specifying multiple examples for the same func/type.\n\nhttp://codereview.appspot.com/5677047/diff/2001/src/cmd/godoc/godoc.go#newcode542\nsrc/cmd/godoc/godoc.go:542: if i := strings.LastIndex(name, \"_\"); i != -1 {\nOn 2012/02/15 22:19:28, gri wrote:\n> s/i != -1/i >= 0/\n> \n> (one of my pet peeves: you don't rely on an arbitrary return value, i >= 0 is a\n> valid index, and the test is cheaper to translate)\n\nDone. Surprised at myself - I usually use >= 0, too.\n\nhttp://codereview.appspot.com/5677047/diff/2001/src/cmd/godoc/godoc.go#newcode543\nsrc/cmd/godoc/godoc.go:543: if i < len(name)-1 && !startsWithUppercase(name[i+1:]) {\nOn 2012/02/15 22:19:28, gri wrote:\n> combine the two if's:\n> \n> ...; 0 <= i && i < len(name)-1 && !startsWithUppercase(name[i+1:]) { ...\n\nDone.\n\nhttp://codereview.appspot.com/5677047/diff/2001/src/cmd/godoc/godoc.go#newcode559\nsrc/cmd/godoc/godoc.go:559: func example_suffixFunc(name string) string {\nOn 2012/02/15 22:19:28, gri wrote:\n> This code is the same as above - should factor it out above and reuse.\n> \n> I would call this perhaps example_argFunc or something like that as is returns\n> the argument string, doesn't it?\n\nNot an arg string, an arbitrary identifier. Suffix is fitting, as it is optional.",
			"disapproval": false,
			"date": "2012-02-15 22:32:07.949097",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5677047/diff/4002/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttp://codereview.appspot.com/5677047/diff/4002/src/cmd/godoc/godoc.go#newcode542\nsrc/cmd/godoc/godoc.go:542: name = strings.Replace(name, \"_\", \".\", 1)\nwhat if it's not a method but the function name has an _ ? should there be another convention?\n\nhttp://codereview.appspot.com/5677047/diff/4002/src/pkg/container/heap/example_test.go\nFile src/pkg/container/heap/example_test.go (right):\n\nhttp://codereview.appspot.com/5677047/diff/4002/src/pkg/container/heap/example_test.go#newcode62\nsrc/pkg/container/heap/example_test.go:62: // The full code of this example, including the methods that implement\nThis can probably go now.",
			"disapproval": false,
			"date": "2012-02-15 22:39:28.767308",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Some general comments on the code. I am about to try it out.\n- gri\n\nhttp://codereview.appspot.com/5677047/diff/2001/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttp://codereview.appspot.com/5677047/diff/2001/src/cmd/godoc/godoc.go#newcode539\nsrc/cmd/godoc/godoc.go:539: func example_nameFunc(name string) string {\nname perhaps:\n\nexample_sigFunc \n\n(sig as in signature)\n\nhttp://codereview.appspot.com/5677047/diff/2001/src/cmd/godoc/godoc.go#newcode542\nsrc/cmd/godoc/godoc.go:542: if i := strings.LastIndex(name, \"_\"); i != -1 {\ns/i != -1/i >= 0/\n\n(one of my pet peeves: you don't rely on an arbitrary return value, i >= 0 is a valid index, and the test is cheaper to translate)\n\nhttp://codereview.appspot.com/5677047/diff/2001/src/cmd/godoc/godoc.go#newcode543\nsrc/cmd/godoc/godoc.go:543: if i < len(name)-1 && !startsWithUppercase(name[i+1:]) {\ncombine the two if's:\n\n...; 0 <= i && i < len(name)-1 && !startsWithUppercase(name[i+1:]) { ...\n\nhttp://codereview.appspot.com/5677047/diff/2001/src/cmd/godoc/godoc.go#newcode559\nsrc/cmd/godoc/godoc.go:559: func example_suffixFunc(name string) string {\nThis code is the same as above - should factor it out above and reuse.\n\nI would call this perhaps example_argFunc or something like that as is returns the argument string, doesn't it?\n\nhttp://codereview.appspot.com/5677047/diff/2001/src/cmd/godoc/godoc.go#newcode645\nsrc/cmd/godoc/godoc.go:645: \"example_name\":   example_nameFunc,\n\"example_sig\", \"example_signature\" ?\n\nhttp://codereview.appspot.com/5677047/diff/2001/src/cmd/godoc/godoc.go#newcode646\nsrc/cmd/godoc/godoc.go:646: \"example_suffix\": example_suffixFunc,\n\"example_arg\" ?",
			"disapproval": false,
			"date": "2012-02-15 22:19:28.153687",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PS: The actual example code should now be adjusted as well (the full\nexample code is shown now).\n- gri\n\nOn Wed, Feb 15, 2012 at 2:19 PM,  <gri@golang.org> wrote:\n> Some general comments on the code. I am about to try it out.\n> - gri\n>\n>\n> http://codereview.appspot.com/5677047/diff/2001/src/cmd/godoc/godoc.go\n> File src/cmd/godoc/godoc.go (right):\n>\n> http://codereview.appspot.com/5677047/diff/2001/src/cmd/godoc/godoc.go#newcode539\n> src/cmd/godoc/godoc.go:539: func example_nameFunc(name string) string {\n> name perhaps:\n>\n> example_sigFunc\n>\n> (sig as in signature)\n>\n> http://codereview.appspot.com/5677047/diff/2001/src/cmd/godoc/godoc.go#newcode542\n> src/cmd/godoc/godoc.go:542: if i := strings.LastIndex(name, \"_\"); i !=\n> -1 {\n> s/i != -1/i >= 0/\n>\n> (one of my pet peeves: you don't rely on an arbitrary return value, i >=\n> 0 is a valid index, and the test is cheaper to translate)\n>\n> http://codereview.appspot.com/5677047/diff/2001/src/cmd/godoc/godoc.go#newcode543\n> src/cmd/godoc/godoc.go:543: if i < len(name)-1 &&\n> !startsWithUppercase(name[i+1:]) {\n> combine the two if's:\n>\n> ...; 0 <= i && i < len(name)-1 && !startsWithUppercase(name[i+1:]) { ...\n>\n> http://codereview.appspot.com/5677047/diff/2001/src/cmd/godoc/godoc.go#newcode559\n> src/cmd/godoc/godoc.go:559: func example_suffixFunc(name string) string\n> {\n> This code is the same as above - should factor it out above and reuse.\n>\n> I would call this perhaps example_argFunc or something like that as is\n> returns the argument string, doesn't it?\n>\n> http://codereview.appspot.com/5677047/diff/2001/src/cmd/godoc/godoc.go#newcode645\n> src/cmd/godoc/godoc.go:645: \"example_name\": \u00a0 example_nameFunc,\n> \"example_sig\", \"example_signature\" ?\n>\n> http://codereview.appspot.com/5677047/diff/2001/src/cmd/godoc/godoc.go#newcode646\n> src/cmd/godoc/godoc.go:646: \"example_suffix\": example_suffixFunc,\n> \"example_arg\" ?\n>\n> http://codereview.appspot.com/5677047/\n",
			"disapproval": false,
			"date": "2012-02-15 22:31:47.124304",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "upload?\n\nOn Wed, Feb 15, 2012 at 2:32 PM,  <adg@golang.org> wrote:\n> PTAL\n>\n>\n>\n> http://codereview.appspot.com/5677047/diff/2001/src/cmd/godoc/godoc.go\n> File src/cmd/godoc/godoc.go (right):\n>\n> http://codereview.appspot.com/5677047/diff/2001/src/cmd/godoc/godoc.go#newcode539\n> src/cmd/godoc/godoc.go:539: func example_nameFunc(name string) string {\n> On 2012/02/15 22:19:28, gri wrote:\n>>\n>> name perhaps:\n>\n>\n>> example_sigFunc\n>\n>\n>> (sig as in signature)\n>\n>\n> But it's not the signature, it's a display name. The parenthetical isn't\n> an argument list, it's a unique identifier for this particular example.\n> Most examples don't have them - they're really only useful for\n> specifying multiple examples for the same func/type.\n>\n>\n> http://codereview.appspot.com/5677047/diff/2001/src/cmd/godoc/godoc.go#newcode542\n> src/cmd/godoc/godoc.go:542: if i := strings.LastIndex(name, \"_\"); i !=\n> -1 {\n> On 2012/02/15 22:19:28, gri wrote:\n>>\n>> s/i != -1/i >= 0/\n>\n>\n>> (one of my pet peeves: you don't rely on an arbitrary return value, i\n>> = 0 is a\n>> valid index, and the test is cheaper to translate)\n>\n>\n> Done. Surprised at myself - I usually use >= 0, too.\n>\n>\n> http://codereview.appspot.com/5677047/diff/2001/src/cmd/godoc/godoc.go#newcode543\n> src/cmd/godoc/godoc.go:543: if i < len(name)-1 &&\n> !startsWithUppercase(name[i+1:]) {\n> On 2012/02/15 22:19:28, gri wrote:\n>>\n>> combine the two if's:\n>\n>\n>> ...; 0 <= i && i < len(name)-1 && !startsWithUppercase(name[i+1:]) {\n>\n> ...\n>\n> Done.\n>\n>\n> http://codereview.appspot.com/5677047/diff/2001/src/cmd/godoc/godoc.go#newcode559\n> src/cmd/godoc/godoc.go:559: func example_suffixFunc(name string) string\n> {\n> On 2012/02/15 22:19:28, gri wrote:\n>>\n>> This code is the same as above - should factor it out above and reuse.\n>\n>\n>> I would call this perhaps example_argFunc or something like that as is\n>\n> returns\n>>\n>> the argument string, doesn't it?\n>\n>\n> Not an arg string, an arbitrary identifier. Suffix is fitting, as it is\n> optional.\n>\n> http://codereview.appspot.com/5677047/\n",
			"disapproval": false,
			"date": "2012-02-15 22:35:56.324985",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 16 February 2012 09:31, Robert Griesemer <gri@golang.org> wrote:\n> PS: The actual example code should now be adjusted as well (the full\n> example code is shown now).\n\nNot sure what you mean by this. The example format hasn't changed at all.\n\nThis url:\n\nhttp://localhost:6060/pkg/strings/#example_Fields\n\nShould display like the attached screenshot.\n",
			"disapproval": false,
			"date": "2012-02-15 22:37:49.666569",
			"approval": false
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 5677047: godoc: support for package examples, display example su...",
	"created": "2012-02-15 05:08:16.148664",
	"patchsets": [
		1,
		2001,
		4002,
		3008
	],
	"modified": "2012-02-15 22:44:08.828749",
	"closed": true,
	"issue": 5677047
}