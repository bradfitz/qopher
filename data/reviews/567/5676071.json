{
	"description": "pkg: a slew of examples",
	"cc": [
		"golang-dev@googlegroups.com",
		"gri@golang.org",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5676071/diff/3001/src/pkg/crypto/sha1/sha1_test.go\nFile src/pkg/crypto/sha1/sha1_test.go (right):\n\nhttp://codereview.appspot.com/5676071/diff/3001/src/pkg/crypto/sha1/sha1_test.go#newcode79\nsrc/pkg/crypto/sha1/sha1_test.go:79: fmt.Printf(\"%x\", h.Sum(nil))\nmaybe \"% x\"\n\nhttp://codereview.appspot.com/5676071/diff/3001/src/pkg/encoding/json/example_test.go\nFile src/pkg/encoding/json/example_test.go (right):\n\nhttp://codereview.appspot.com/5676071/diff/3001/src/pkg/encoding/json/example_test.go#newcode60\nsrc/pkg/encoding/json/example_test.go:60: {\"Name\": \"Ed\", \"Text\": \"Gofmt.\"}\nGo fmt\n\nhttp://codereview.appspot.com/5676071/diff/3001/src/pkg/errors/errors_test.go\nFile src/pkg/errors/errors_test.go (right):\n\nhttp://codereview.appspot.com/5676071/diff/3001/src/pkg/errors/errors_test.go#newcode37\nsrc/pkg/errors/errors_test.go:37: err := errors.New(\"unable to emit macho dwarf\")\nthis is a cute joke but actually a terrible error. you must say WHY! also the \"unable\" is someone else's business to report. converting to a real example, this would be like\n\nerr := errors.New(\"unable to open file\")\n\ninstead of something helpful, like\n\nerr := errors.New(\"open /etc/dwarf: permission denied\")\n\nso for our example we want:\n\nerr := errors.New(\"emit macho dwarf: elf header corrupted\")\n\nfinally, add an example of fmt.Errorf in another function, because it's so nice to know about and this is a good place to show it.",
			"disapproval": false,
			"date": "2012-02-16 22:30:41.990971",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 17 February 2012 09:42,  <adg@golang.org> wrote:\n> http://codereview.appspot.com/5676071/diff/3001/src/pkg/archive/zip/example_test.go#newcode49\n> src/pkg/archive/zip/example_test.go:49: func ExampleReader() {\n> On 2012/02/16 22:07:10, gri wrote:\n>>\n>> shouldn't this read the stuff written by the writer? would make this a\n>\n> good\n>>\n>> self-test and independent of readme.zip\n>\n>\n> I suppose I could make the whole thing a single example for the entire\n> package...\n\nI've thought about this some more. The zip package already has a\nself-test of this kind. I'd prefer these examples to be short and\nsweet, rather than conflate the two. Besides, then the most complex\npart of the example would be the dance you'd do to convert a\nbytes.Buffer into a bytes.Reader so that it supports ReadAt. I don't\nwant to distract from the central purpose of the examples, to\ndemonstrate the zip reader and writer.\n\nAndrew\n",
			"disapproval": false,
			"date": "2012-02-16 22:44:50.768973",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=fd7f2a4b69a9 ***\n\npkg: a slew of examples\n\nR=golang-dev, gri, r\nCC=golang-dev\nhttp://codereview.appspot.com/5676071\n\nhttp://codereview.appspot.com/5676071/diff/3002/src/pkg/errors/errors_test.go\nFile src/pkg/errors/errors_test.go (right):\n\nhttp://codereview.appspot.com/5676071/diff/3002/src/pkg/errors/errors_test.go#newcode47\nsrc/pkg/errors/errors_test.go:47: const username = \"bimmler\"\nOn 2012/02/16 23:25:09, r wrote:\n> const name = \"bimmler\"\n> const id = 17\n\nDone.\n\nhttp://codereview.appspot.com/5676071/diff/3002/src/pkg/errors/errors_test.go#newcode48\nsrc/pkg/errors/errors_test.go:48: err := fmt.Errorf(\"user %q not found\", username)\nOn 2012/02/16 23:25:09, r wrote:\n> (user %q (id %d) not found\", name, id)\n\nDone.",
			"disapproval": false,
			"date": "2012-02-18 00:48:35.206120",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5676071/diff/3001/src/pkg/archive/zip/example_test.go\nFile src/pkg/archive/zip/example_test.go (right):\n\nhttp://codereview.appspot.com/5676071/diff/3001/src/pkg/archive/zip/example_test.go#newcode1\nsrc/pkg/archive/zip/example_test.go:1: // Copyright 2010 The Go Authors. All rights reserved.\n2012\n\nhttp://codereview.appspot.com/5676071/diff/3001/src/pkg/archive/zip/example_test.go#newcode49\nsrc/pkg/archive/zip/example_test.go:49: func ExampleReader() {\nshouldn't this read the stuff written by the writer? would make this a good self-test and independent of readme.zip\n\nhttp://codereview.appspot.com/5676071/diff/3001/src/pkg/encoding/json/example_test.go\nFile src/pkg/encoding/json/example_test.go (right):\n\nhttp://codereview.appspot.com/5676071/diff/3001/src/pkg/encoding/json/example_test.go#newcode82\nsrc/pkg/encoding/json/example_test.go:82: // Ed: Gofmt yourself!\nvery nice, my friend...\n\nhttp://codereview.appspot.com/5676071/diff/3001/src/pkg/errors/example_test.go\nFile src/pkg/errors/example_test.go (right):\n\nhttp://codereview.appspot.com/5676071/diff/3001/src/pkg/errors/example_test.go#newcode1\nsrc/pkg/errors/example_test.go:1: // Copyright 2011 The Go Authors.  All rights reserved.\n2012\n\nhttp://codereview.appspot.com/5676071/diff/3001/src/pkg/errors/example_test.go#newcode33\nsrc/pkg/errors/example_test.go:33: // Output: 1989-03-15 22:30:00 +0000 UTC: the file system has gone away\nshould this be 2000-01-01 00:00:00 ?\n\nhttp://codereview.appspot.com/5676071/diff/3001/src/pkg/net/example_test.go\nFile src/pkg/net/example_test.go (right):\n\nhttp://codereview.appspot.com/5676071/diff/3001/src/pkg/net/example_test.go#newcode28\nsrc/pkg/net/example_test.go:28: go func(c net.Conn) {\nperhaps add a comment why c is a parameter (so you get an new instance) rather than using conn from the outside",
			"disapproval": false,
			"date": "2012-02-16 22:07:10.350365",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/5676071/diff/3001/src/pkg/archive/zip/example_test.go\nFile src/pkg/archive/zip/example_test.go (right):\n\nhttp://codereview.appspot.com/5676071/diff/3001/src/pkg/archive/zip/example_test.go#newcode1\nsrc/pkg/archive/zip/example_test.go:1: // Copyright 2010 The Go Authors. All rights reserved.\nOn 2012/02/16 22:07:10, gri wrote:\n> 2012\n\nDone.\n\nhttp://codereview.appspot.com/5676071/diff/3001/src/pkg/archive/zip/example_test.go#newcode49\nsrc/pkg/archive/zip/example_test.go:49: func ExampleReader() {\nOn 2012/02/16 22:07:10, gri wrote:\n> shouldn't this read the stuff written by the writer? would make this a good\n> self-test and independent of readme.zip\n\nI suppose I could make the whole thing a single example for the entire package...\n\nhttp://codereview.appspot.com/5676071/diff/3001/src/pkg/crypto/sha1/sha1_test.go\nFile src/pkg/crypto/sha1/sha1_test.go (right):\n\nhttp://codereview.appspot.com/5676071/diff/3001/src/pkg/crypto/sha1/sha1_test.go#newcode79\nsrc/pkg/crypto/sha1/sha1_test.go:79: fmt.Printf(\"%x\", h.Sum(nil))\nOn 2012/02/16 22:30:42, r wrote:\n> maybe \"% x\"\n\nDone.\n\nhttp://codereview.appspot.com/5676071/diff/3001/src/pkg/encoding/json/example_test.go\nFile src/pkg/encoding/json/example_test.go (right):\n\nhttp://codereview.appspot.com/5676071/diff/3001/src/pkg/encoding/json/example_test.go#newcode60\nsrc/pkg/encoding/json/example_test.go:60: {\"Name\": \"Ed\", \"Text\": \"Gofmt.\"}\nOn 2012/02/16 22:30:42, r wrote:\n> Go fmt\n> \n\nDone.\n\nhttp://codereview.appspot.com/5676071/diff/3001/src/pkg/errors/errors_test.go\nFile src/pkg/errors/errors_test.go (right):\n\nhttp://codereview.appspot.com/5676071/diff/3001/src/pkg/errors/errors_test.go#newcode37\nsrc/pkg/errors/errors_test.go:37: err := errors.New(\"unable to emit macho dwarf\")\nOn 2012/02/16 22:30:42, r wrote:\n> this is a cute joke but actually a terrible error. you must say WHY! also the\n> \"unable\" is someone else's business to report. converting to a real example,\n> this would be like\n> \n> err := errors.New(\"unable to open file\")\n> \n> instead of something helpful, like\n> \n> err := errors.New(\"open /etc/dwarf: permission denied\")\n> \n> so for our example we want:\n> \n> err := errors.New(\"emit macho dwarf: elf header corrupted\")\n> \n> finally, add an example of fmt.Errorf in another function, because it's so nice\n> to know about and this is a good place to show it.\n\nDone.\n\nhttp://codereview.appspot.com/5676071/diff/3001/src/pkg/errors/example_test.go\nFile src/pkg/errors/example_test.go (right):\n\nhttp://codereview.appspot.com/5676071/diff/3001/src/pkg/errors/example_test.go#newcode1\nsrc/pkg/errors/example_test.go:1: // Copyright 2011 The Go Authors.  All rights reserved.\nOn 2012/02/16 22:07:10, gri wrote:\n> 2012\n\nDone.\n\nhttp://codereview.appspot.com/5676071/diff/3001/src/pkg/errors/example_test.go#newcode33\nsrc/pkg/errors/example_test.go:33: // Output: 1989-03-15 22:30:00 +0000 UTC: the file system has gone away\nOn 2012/02/16 22:07:10, gri wrote:\n> should this be 2000-01-01 00:00:00 ?\n\nThe date I chose was deliberate. :-)\n\nhttp://codereview.appspot.com/5676071/diff/3001/src/pkg/net/example_test.go\nFile src/pkg/net/example_test.go (right):\n\nhttp://codereview.appspot.com/5676071/diff/3001/src/pkg/net/example_test.go#newcode28\nsrc/pkg/net/example_test.go:28: go func(c net.Conn) {\nOn 2012/02/16 22:07:10, gri wrote:\n> perhaps add a comment why c is a parameter (so you get an new instance) rather\n> than using conn from the outside\n\nI thought about that, but I'm not sure we want to explain the language in each of these examples (where does it end?). Providing correct examples should be enough.",
			"disapproval": false,
			"date": "2012-02-16 22:42:04.423200",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5676071/diff/6003/src/pkg/errors/errors_test.go\nFile src/pkg/errors/errors_test.go (right):\n\nhttp://codereview.appspot.com/5676071/diff/6003/src/pkg/errors/errors_test.go#newcode44\nsrc/pkg/errors/errors_test.go:44: // The fmt package's Errorf function is a convenient way to format errors.\nThe fmt package's Errorf function lets us use the package's formatting features to create helpful error messages.\n\nhttp://codereview.appspot.com/5676071/diff/6003/src/pkg/errors/errors_test.go#newcode47\nsrc/pkg/errors/errors_test.go:47: err := fmt.Errorf(\"open %s: file not found\", filename)\nnot a great example because Open already does a nice job with the errors, and this example implies you need to build your own.\nmake up a new example for a hypothetical situation",
			"disapproval": false,
			"date": "2012-02-16 23:02:39.131133",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5676071/diff/3002/src/pkg/errors/errors_test.go\nFile src/pkg/errors/errors_test.go (right):\n\nhttp://codereview.appspot.com/5676071/diff/3002/src/pkg/errors/errors_test.go#newcode45\nsrc/pkg/errors/errors_test.go:45: // features to create helpful error messages.\ns/helpful/descriptive/\n\nhttp://codereview.appspot.com/5676071/diff/3002/src/pkg/errors/errors_test.go#newcode47\nsrc/pkg/errors/errors_test.go:47: const username = \"bimmler\"\nconst name = \"bimmler\"\nconst id = 17\n\nhttp://codereview.appspot.com/5676071/diff/3002/src/pkg/errors/errors_test.go#newcode48\nsrc/pkg/errors/errors_test.go:48: err := fmt.Errorf(\"user %q not found\", username)\n(user %q (id %d) not found\", name, id)",
			"disapproval": false,
			"date": "2012-02-16 23:25:09.552138",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2012-02-16 21:38:36.993247",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5676071/diff/6003/src/pkg/errors/errors_test.go\nFile src/pkg/errors/errors_test.go (right):\n\nhttp://codereview.appspot.com/5676071/diff/6003/src/pkg/errors/errors_test.go#newcode44\nsrc/pkg/errors/errors_test.go:44: // The fmt package's Errorf function is a convenient way to format errors.\nOn 2012/02/16 23:02:39, r wrote:\n> The fmt package's Errorf function lets us use the package's formatting features\n> to create helpful error messages.\n\nDone.\n\nhttp://codereview.appspot.com/5676071/diff/6003/src/pkg/errors/errors_test.go#newcode44\nsrc/pkg/errors/errors_test.go:44: // The fmt package's Errorf function is a convenient way to format errors.\nOn 2012/02/16 22:57:46, gri wrote:\n> s/to format/to create errors with a formatted message/ (?)\n> \n> (the error itself is not formatted, it doesn't even exist at the point of\n> invocation)\n\nDone.\n\nhttp://codereview.appspot.com/5676071/diff/6003/src/pkg/errors/errors_test.go#newcode47\nsrc/pkg/errors/errors_test.go:47: err := fmt.Errorf(\"open %s: file not found\", filename)\nOn 2012/02/16 23:02:39, r wrote:\n> not a great example because Open already does a nice job with the errors, and\n> this example implies you need to build your own.\n> make up a new example for a hypothetical situation\n\nDone.",
			"disapproval": false,
			"date": "2012-02-16 23:22:19.697478",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5676071/diff/6003/src/pkg/errors/errors_test.go\nFile src/pkg/errors/errors_test.go (right):\n\nhttp://codereview.appspot.com/5676071/diff/6003/src/pkg/errors/errors_test.go#newcode44\nsrc/pkg/errors/errors_test.go:44: // The fmt package's Errorf function is a convenient way to format errors.\ns/helpful/descriptive/",
			"disapproval": false,
			"date": "2012-02-16 23:23:36.176888",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5676071/diff/6003/src/pkg/errors/errors_test.go\nFile src/pkg/errors/errors_test.go (right):\n\nhttp://codereview.appspot.com/5676071/diff/6003/src/pkg/errors/errors_test.go#newcode44\nsrc/pkg/errors/errors_test.go:44: // The fmt package's Errorf function is a convenient way to format errors.\ns/to format/to create errors with a formatted message/ (?)\n\n(the error itself is not formatted, it doesn't even exist at the point of invocation)",
			"disapproval": false,
			"date": "2012-02-16 22:57:46.570655",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5676071/diff/6003/src/pkg/errors/errors_test.go\nFile src/pkg/errors/errors_test.go (right):\n\nhttp://codereview.appspot.com/5676071/diff/6003/src/pkg/errors/errors_test.go#newcode44\nsrc/pkg/errors/errors_test.go:44: // The fmt package's Errorf function is a convenient way to format errors.\nOn 2012/02/16 23:23:36, r wrote:\n> s/helpful/descriptive/\n\nDone.",
			"disapproval": false,
			"date": "2012-02-16 23:25:22.982743",
			"approval": false
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 5676071: pkg: a slew of examples",
	"created": "2012-02-16 21:38:17.146135",
	"patchsets": [
		1,
		3001,
		6003,
		3002,
		1015,
		5010
	],
	"modified": "2012-02-18 00:48:37.496624",
	"closed": true,
	"issue": 5676071
}