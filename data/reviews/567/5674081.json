{
	"description": "go.crypto/ssh: add Stderr() in Channel interface.\n\nAdds support for piping Stderr to the client.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"agl@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Motivation for change is to provide the server a way to communicate to client std err.\n\nhttp://codereview.appspot.com/5674081/diff/3002/ssh/channel.go\nFile ssh/channel.go (right):\n\nhttp://codereview.appspot.com/5674081/diff/3002/ssh/channel.go#newcode18\nssh/channel.go:18: ExtraStdErr ExtraType = 1\nIf Extra(ExtraType) is renamed StdErr(), this can become private.\n\nOn 2012/02/19 05:08:09, dfc wrote:\n> see below, this could be made non exported and ideal.\n\nhttp://codereview.appspot.com/5674081/diff/3002/ssh/channel.go#newcode37\nssh/channel.go:37: Extra(extraType ExtraType) io.Writer\nThe \"Extra\" channel is very much needed, although it may not need the flexibility provided here. The other option is to call this StdErr() and default it to provide an \"Extra\" writer with that message type.\n\nSee:\nhttps://bitbucket.org/kardianos/vcsguard/src/cc7cf3a251c2/cmd.go#cl-56\nfor usage.\n\nOn 2012/02/19 05:08:09, dfc wrote:\n> I'm not sure what others feel, but I'd like to leave the extraType as a YAGNI\n> for another day. It could be reasonably added at a later time if there was a\n> need for it.\n\nhttp://codereview.appspot.com/5674081/diff/3002/ssh/channel.go#newcode217\nssh/channel.go:217: packet[12] = byte(len(todo))\nOn 2012/02/19 05:08:09, dfc wrote:\n> This is a bit of a mouthful, why not do something like\n> packet := []byte { msgChannelExtendedData, \n>    byte(c.theirId >> 24), byte(c.theirId >> 16) ....\n> }\n> packet = append(packet, todo...)\n> \n> Alternatively, now we have inlining, a lot of this bit bashing could be done in\n> helpers in common.go\n\nDone.\n\nhttp://codereview.appspot.com/5674081/diff/3002/ssh/channel.go#newcode225\nssh/channel.go:225: c.serverConn.lock.Unlock()\nOn 2012/02/19 05:08:09, dfc wrote:\n> I know this is the pattern copied from c.Write below, but the unbalanced calls\n> to Unlock could be improved. How about\n> \n> c.serverConn.lock.Lock()\n> err = c.serverConn.writePacket(...)\n> c.serverConn.lock.Unlock()\n> if err != nil {\n>    return\n> }\n\nDone.",
			"disapproval": false,
			"date": "2012-02-19 06:41:19.883395",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: agl@golang.org, dave@cheney.net, golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttp://code.google.com/p/go.crypto",
			"disapproval": false,
			"date": "2012-02-19 00:21:35.351513",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "STGM, leaving for agl.\n\nHow do you plan to use this?\n\nhttp://codereview.appspot.com/5674081/diff/3002/ssh/channel.go\nFile ssh/channel.go (right):\n\nhttp://codereview.appspot.com/5674081/diff/3002/ssh/channel.go#newcode18\nssh/channel.go:18: ExtraStdErr ExtraType = 1\nsee below, this could be made non exported and ideal.\n\nhttp://codereview.appspot.com/5674081/diff/3002/ssh/channel.go#newcode37\nssh/channel.go:37: Extra(extraType ExtraType) io.Writer\nI'm not sure what others feel, but I'd like to leave the extraType as a YAGNI for another day. It could be reasonably added at a later time if there was a need for it.\n\nhttp://codereview.appspot.com/5674081/diff/3002/ssh/channel.go#newcode217\nssh/channel.go:217: packet[12] = byte(len(todo))\nThis is a bit of a mouthful, why not do something like\npacket := []byte { msgChannelExtendedData, \n   byte(c.theirId >> 24), byte(c.theirId >> 16) ....\n}\npacket = append(packet, todo...)\n\nAlternatively, now we have inlining, a lot of this bit bashing could be done in helpers in common.go\n\nhttp://codereview.appspot.com/5674081/diff/3002/ssh/channel.go#newcode225\nssh/channel.go:225: c.serverConn.lock.Unlock()\nI know this is the pattern copied from c.Write below, but the unbalanced calls to Unlock could be improved. How about\n\nc.serverConn.lock.Lock()\nerr = c.serverConn.writePacket(...)\nc.serverConn.lock.Unlock()\nif err != nil {\n   return\n}",
			"disapproval": false,
			"date": "2012-02-19 05:08:09.775965",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net (cc: agl@golang.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-19 06:39:33.090931",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for your other changes and improvements. Please see my comments in common.go.\n\n> Motivation for change is to provide the server a way to communicate to client\n> std err.\n\nSGTM. That is what I thought, which is why I'm suggesting avoiding the argument to c.Extra() until someone comes up with a need for it.\n\nhttp://codereview.appspot.com/5674081/diff/6001/ssh/channel.go\nFile ssh/channel.go (right):\n\nhttp://codereview.appspot.com/5674081/diff/6001/ssh/channel.go#newcode209\nssh/channel.go:209: copy(packet[at:], todo)\nSee comments in common.go, \n\n\n                packet[0] = msgChannelExtendedData\n                packUint32(packet[1:5], c.theirId)\n                packUint32(packet[5:9], uint32(ex.t))\n                packUint32(packet[9:13], uint32(len(todo)))\n                copy(packet[13:], todo)\n\nhttp://codereview.appspot.com/5674081/diff/6001/ssh/channel.go#newcode324\nssh/channel.go:324: copy(packet[at:], todo)\nSee comments in common.go\n\n\n                packet[0] = msgChannelData\n                packUint32(packet[1:5], c.theirId)\n                packUint32(packet[5:9], uint32(len(todo)))\n                copy(packet[9:], todo)\n\nhttp://codereview.appspot.com/5674081/diff/6001/ssh/common.go\nFile ssh/common.go (right):\n\nhttp://codereview.appspot.com/5674081/diff/6001/ssh/common.go#newcode249\nssh/common.go:249: }\nThanks for adding this helper, but it's a bit more than the stock inliner can handle at the moment, this version can be inlined\n\n\nfunc packUint32(packet []byte, value uint32) {\n        packet[0] = byte(value >> 24)\n        packet[1] = byte(value >> 16)\n        packet[2] = byte(value >> 8)\n        packet[3] = byte(value)\n}",
			"disapproval": false,
			"date": "2012-02-19 06:58:49.287698",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5674081/diff/6001/ssh/channel.go\nFile ssh/channel.go (right):\n\nhttp://codereview.appspot.com/5674081/diff/6001/ssh/channel.go#newcode209\nssh/channel.go:209: copy(packet[at:], todo)\nOn 2012/02/19 06:58:49, dfc wrote:\n> See comments in common.go, \n> \n> \n>                 packet[0] = msgChannelExtendedData\n>                 packUint32(packet[1:5], c.theirId)\n>                 packUint32(packet[5:9], uint32(ex.t))\n>                 packUint32(packet[9:13], uint32(len(todo)))\n>                 copy(packet[13:], todo)\n\nDone.\n\nhttp://codereview.appspot.com/5674081/diff/6001/ssh/channel.go#newcode324\nssh/channel.go:324: copy(packet[at:], todo)\nOn 2012/02/19 06:58:49, dfc wrote:\n> See comments in common.go\n> \n> \n>                 packet[0] = msgChannelData\n>                 packUint32(packet[1:5], c.theirId)\n>                 packUint32(packet[5:9], uint32(len(todo)))\n>                 copy(packet[9:], todo)\n\nDone.\n\nhttp://codereview.appspot.com/5674081/diff/6001/ssh/common.go\nFile ssh/common.go (right):\n\nhttp://codereview.appspot.com/5674081/diff/6001/ssh/common.go#newcode249\nssh/common.go:249: }\nYou're correct.  Modified.  Starting at 0 in the slice feels better too.\n\nOn 2012/02/19 06:58:49, dfc wrote:\n> Thanks for adding this helper, but it's a bit more than the stock inliner can\n> handle at the moment, this version can be inlined\n> \n> \n> func packUint32(packet []byte, value uint32) {\n>         packet[0] = byte(value >> 24)\n>         packet[1] = byte(value >> 16)\n>         packet[2] = byte(value >> 8)\n>         packet[3] = byte(value)\n> }",
			"disapproval": false,
			"date": "2012-02-19 20:52:58.593089",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net (cc: agl@golang.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-19 21:56:22.115066",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as 04249616d7c2 ***\n\ngo.crypto/ssh: add Stderr() in Channel interface.\n\nAdds support for piping Stderr to the client.\n\nR=golang-dev, dave, agl\nCC=golang-dev\nhttp://codereview.appspot.com/5674081\n\nCommitter: Adam Langley <agl@golang.org>",
			"disapproval": false,
			"date": "2012-02-20 15:42:46.561218",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for making those changes. PutUint32 is now very similar to its marshal counterpart, but that can be a latter CL if you feel so inclined. \n\nLeaving for agl as the server side is his baby. \n\nOn 20/02/2012, at 7:52, kardianos@gmail.com wrote:\n\n> \n> http://codereview.appspot.com/5674081/diff/6001/ssh/channel.go\n> File ssh/channel.go (right):\n> \n> http://codereview.appspot.com/5674081/diff/6001/ssh/channel.go#newcode209\n> ssh/channel.go:209: copy(packet[at:], todo)\n> On 2012/02/19 06:58:49, dfc wrote:\n>> See comments in common.go,\n> \n> \n>>                 packet[0] = msgChannelExtendedData\n>>                 packUint32(packet[1:5], c.theirId)\n>>                 packUint32(packet[5:9], uint32(ex.t))\n>>                 packUint32(packet[9:13], uint32(len(todo)))\n>>                 copy(packet[13:], todo)\n> \n> Done.\n> \n> http://codereview.appspot.com/5674081/diff/6001/ssh/channel.go#newcode324\n> ssh/channel.go:324: copy(packet[at:], todo)\n> On 2012/02/19 06:58:49, dfc wrote:\n>> See comments in common.go\n> \n> \n>>                 packet[0] = msgChannelData\n>>                 packUint32(packet[1:5], c.theirId)\n>>                 packUint32(packet[5:9], uint32(len(todo)))\n>>                 copy(packet[9:], todo)\n> \n> Done.\n> \n> http://codereview.appspot.com/5674081/diff/6001/ssh/common.go\n> File ssh/common.go (right):\n> \n> http://codereview.appspot.com/5674081/diff/6001/ssh/common.go#newcode249\n> ssh/common.go:249: }\n> You're correct.  Modified.  Starting at 0 in the slice feels better too.\n> \n> On 2012/02/19 06:58:49, dfc wrote:\n>> Thanks for adding this helper, but it's a bit more than the stock\n> inliner can\n>> handle at the moment, this version can be inlined\n> \n> \n>> func packUint32(packet []byte, value uint32) {\n>>         packet[0] = byte(value >> 24)\n>>         packet[1] = byte(value >> 16)\n>>         packet[2] = byte(value >> 8)\n>>         packet[3] = byte(value)\n>> }\n> \n> http://codereview.appspot.com/5674081/\n",
			"disapproval": false,
			"date": "2012-02-19 20:58:22.226793",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net (cc: agl@golang.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-19 20:50:47.715969",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. Changed a couple of the names to better reflect the naming in the RFC. Will land in a sec.",
			"disapproval": false,
			"date": "2012-02-20 15:42:12.717003",
			"approval": true
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2012-02-20 15:42:18.592942",
			"approval": false
		}
	],
	"owner_email": "kardianos@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "kardia",
	"subject": "code review 5674081: go.crypto/ssh: add Stderr() in Channel interface.",
	"created": "2012-02-16 22:26:23.974871",
	"patchsets": [
		1,
		2001,
		3002,
		6001,
		8001,
		9004
	],
	"modified": "2012-02-20 17:22:58.270500",
	"closed": true,
	"issue": 5674081
}