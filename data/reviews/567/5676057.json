{
	"description": "exp/norm: Added Iter type for iterating on segment boundaries.  This type is mainly to be used\nby other low-level libraries, like collate.  Extra care has been given to optimize the performance\nof normalizing to NFD, as this is what will be used by the collator.  The overhead of checking\nwhether a string is normalized vs simply decomposing a string is neglible.  Assuming that most\nstrings are in the FCD form, this iterator can be used to decompose strings and normalize with\nminimal overhead.",
	"cc": [
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2012-02-15 20:57:38.896772",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nnice",
			"disapproval": false,
			"date": "2012-02-21 03:04:59.929175",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "some first-pass comments\n\nhttp://codereview.appspot.com/5676057/diff/3/src/pkg/exp/norm/composition.go\nFile src/pkg/exp/norm/composition.go (right):\n\nhttp://codereview.appspot.com/5676057/diff/3/src/pkg/exp/norm/composition.go#newcode70\nsrc/pkg/exp/norm/composition.go:70: // flush returns the number of bytes writen to buf.\ns/flush/It/\ns/writen/written/\n\nhttp://codereview.appspot.com/5676057/diff/3/src/pkg/exp/norm/composition.go#newcode74\nsrc/pkg/exp/norm/composition.go:74: start := rb.rune[i].pos\nit seems like rb.rune[i] is the thing to put in a local.\n\nrunep := &rb.rune[i]\np += copy(buf[p:], rb.byte[runep.pos, runep.pos + runep.size])\n\nhttp://codereview.appspot.com/5676057/diff/3/src/pkg/exp/norm/composition.go#newcode135\nsrc/pkg/exp/norm/composition.go:135: copy(rb.byte[pos:], dcomp[i:end])\ni += copy(rb.byte[pos:], dcomp[i:i+int(info.size)])\n\nhttp://codereview.appspot.com/5676057/diff/3/src/pkg/exp/norm/composition.go#newcode136\nsrc/pkg/exp/norm/composition.go:136: i = end\ni += copy(rb.byte[pos:], dcomp[i:i+info.size])\n\nhttp://codereview.appspot.com/5676057/diff/3/src/pkg/exp/norm/composition.go#newcode141\nsrc/pkg/exp/norm/composition.go:141: func (rb *reorderBuffer) insertSingle(src input, i int, info runeInfo) bool {\ncomment.\n\nhttp://codereview.appspot.com/5676057/diff/3/src/pkg/exp/norm/composition.go#newcode266\nsrc/pkg/exp/norm/composition.go:266: // decomposeHangul write the decomposed Hangul to buf and returns the number\ns/write/&s/\n\nhttp://codereview.appspot.com/5676057/diff/3/src/pkg/exp/norm/iter.go\nFile src/pkg/exp/norm/iter.go (right):\n\nhttp://codereview.appspot.com/5676057/diff/3/src/pkg/exp/norm/iter.go#newcode9\nsrc/pkg/exp/norm/iter.go:9: type Iter struct {\nneeds a good comment. this is exported.\n\nhttp://codereview.appspot.com/5676057/diff/3/src/pkg/exp/norm/iter.go#newcode26\nsrc/pkg/exp/norm/iter.go:26: func (i *Iter) SetInput(f Form, src []byte) {\nthese methods all need comments.\n\nhttp://codereview.appspot.com/5676057/diff/3/src/pkg/exp/norm/iter.go#newcode64\nsrc/pkg/exp/norm/iter.go:64: // Next returns the number of bytes written to out.\ns/Next/It/\n\nhttp://codereview.appspot.com/5676057/diff/3/src/pkg/exp/norm/iter.go#newcode67\nsrc/pkg/exp/norm/iter.go:67: func (i *Iter) Next(out []byte) int {\n\"out\" is a good word but makes the comment hard to parse. maybe \"buf\".\n\nhttp://codereview.appspot.com/5676057/diff/3/src/pkg/exp/norm/iter.go#newcode79\nsrc/pkg/exp/norm/iter.go:79: // setStart returns true if there is not enough room for the new segment.\ns/setStart/It/",
			"disapproval": false,
			"date": "2012-02-19 23:48:54.874278",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5676057/diff/3/src/pkg/exp/norm/composition.go\nFile src/pkg/exp/norm/composition.go (right):\n\nhttp://codereview.appspot.com/5676057/diff/3/src/pkg/exp/norm/composition.go#newcode70\nsrc/pkg/exp/norm/composition.go:70: // flush returns the number of bytes writen to buf.\nOn 2012/02/19 23:48:55, r wrote:\n> s/flush/It/\n> s/writen/written/\n\nDone.\n\nhttp://codereview.appspot.com/5676057/diff/3/src/pkg/exp/norm/composition.go#newcode74\nsrc/pkg/exp/norm/composition.go:74: start := rb.rune[i].pos\nAgreed, nicer.  Done.\n\nOn 2012/02/19 23:48:55, r wrote:\n> it seems like rb.rune[i] is the thing to put in a local.\n> \n> runep := &rb.rune[i]\n> p += copy(buf[p:], rb.byte[runep.pos, runep.pos + runep.size])\n\nhttp://codereview.appspot.com/5676057/diff/3/src/pkg/exp/norm/composition.go#newcode135\nsrc/pkg/exp/norm/composition.go:135: copy(rb.byte[pos:], dcomp[i:end])\nOn 2012/02/19 23:48:55, r wrote:\n> i += copy(rb.byte[pos:], dcomp[i:i+int(info.size)])\n\nDone.\n\nhttp://codereview.appspot.com/5676057/diff/3/src/pkg/exp/norm/composition.go#newcode136\nsrc/pkg/exp/norm/composition.go:136: i = end\nOn 2012/02/19 23:48:55, r wrote:\n> i += copy(rb.byte[pos:], dcomp[i:i+info.size])\n\nDone.\n\nhttp://codereview.appspot.com/5676057/diff/3/src/pkg/exp/norm/composition.go#newcode141\nsrc/pkg/exp/norm/composition.go:141: func (rb *reorderBuffer) insertSingle(src input, i int, info runeInfo) bool {\nOn 2012/02/19 23:48:55, r wrote:\n> comment.\n\nDone.\n\nhttp://codereview.appspot.com/5676057/diff/3/src/pkg/exp/norm/composition.go#newcode266\nsrc/pkg/exp/norm/composition.go:266: // decomposeHangul write the decomposed Hangul to buf and returns the number\nOn 2012/02/19 23:48:55, r wrote:\n> s/write/&s/\n\nDone.\n\nhttp://codereview.appspot.com/5676057/diff/3/src/pkg/exp/norm/iter.go\nFile src/pkg/exp/norm/iter.go (right):\n\nhttp://codereview.appspot.com/5676057/diff/3/src/pkg/exp/norm/iter.go#newcode9\nsrc/pkg/exp/norm/iter.go:9: type Iter struct {\nOops. Silly me.  Done.\n\nOn 2012/02/19 23:48:55, r wrote:\n> needs a good comment. this is exported.\n\nhttp://codereview.appspot.com/5676057/diff/3/src/pkg/exp/norm/iter.go#newcode26\nsrc/pkg/exp/norm/iter.go:26: func (i *Iter) SetInput(f Form, src []byte) {\nOn 2012/02/19 23:48:55, r wrote:\n> these methods all need comments.\n\nDone.\n\nhttp://codereview.appspot.com/5676057/diff/3/src/pkg/exp/norm/iter.go#newcode64\nsrc/pkg/exp/norm/iter.go:64: // Next returns the number of bytes written to out.\nOn 2012/02/19 23:48:55, r wrote:\n> s/Next/It/\n\nDone.\n\nhttp://codereview.appspot.com/5676057/diff/3/src/pkg/exp/norm/iter.go#newcode67\nsrc/pkg/exp/norm/iter.go:67: func (i *Iter) Next(out []byte) int {\nOn 2012/02/19 23:48:55, r wrote:\n> \"out\" is a good word but makes the comment hard to parse. maybe \"buf\".\n\nDone.\n\nhttp://codereview.appspot.com/5676057/diff/3/src/pkg/exp/norm/iter.go#newcode79\nsrc/pkg/exp/norm/iter.go:79: // setStart returns true if there is not enough room for the new segment.\nOn 2012/02/19 23:48:55, r wrote:\n> s/setStart/It/\n\nDone.",
			"disapproval": false,
			"date": "2012-02-20 09:36:02.662862",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-20 09:31:58.800725",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=be26a03f6be9 ***\n\nexp/norm: Added Iter type for iterating on segment boundaries.  This type is mainly to be used\nby other low-level libraries, like collate.  Extra care has been given to optimize the performance\nof normalizing to NFD, as this is what will be used by the collator.  The overhead of checking\nwhether a string is normalized vs simply decomposing a string is neglible.  Assuming that most\nstrings are in the FCD form, this iterator can be used to decompose strings and normalize with\nminimal overhead.\n\nR=r\nCC=golang-dev\nhttp://codereview.appspot.com/5676057",
			"disapproval": false,
			"date": "2012-02-21 12:13:27.246397",
			"approval": false
		}
	],
	"owner_email": "mpvl@golang.org",
	"private": false,
	"base_url": "",
	"owner": "mpvl",
	"subject": "code review 5676057: exp/norm: Added Iter type for iterating on segment boun...",
	"created": "2012-02-15 20:57:08.567701",
	"patchsets": [
		1,
		3,
		6001,
		8001,
		3020
	],
	"modified": "2012-02-21 12:13:28.157515",
	"closed": true,
	"issue": 5676057
}