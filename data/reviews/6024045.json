{
	"description": "runtime: inline several float64 routines to speed up complex128 division\nDepends on CL 6197045.\n\nResult obtained on Core i7 620M, Darwin/amd64:\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkComplex128DivNormal           57           28  -50.78%\nBenchmarkComplex128DivNisNaN           49           15  -68.90%\nBenchmarkComplex128DivDisNaN           49           15  -67.88%\nBenchmarkComplex128DivNisInf           40           12  -68.50%\nBenchmarkComplex128DivDisInf           33           13  -61.06%\n\nResult obtained on Core i7 620M, Darwin/386:\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkComplex128DivNormal           89           50  -44.05%\nBenchmarkComplex128DivNisNaN          307          802  +161.24%\nBenchmarkComplex128DivDisNaN          309          788  +155.02%\nBenchmarkComplex128DivNisInf          278          237  -14.75%\nBenchmarkComplex128DivDisInf           46           22  -52.46%\n\nResult obtained on 700MHz OMAP4460, Linux/ARM:\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkComplex128DivNormal         1557          465  -70.13%\nBenchmarkComplex128DivNisNaN         1443          220  -84.75%\nBenchmarkComplex128DivDisNaN         1481          218  -85.28%\nBenchmarkComplex128DivNisInf          952          216  -77.31%\nBenchmarkComplex128DivDisInf          861          231  -73.17%\n\nThe 386 version has a performance regression, but as we have\ndecided to use SSE2 instead of x87 FPU for 386 too (issue 3912),\nI won't address this issue.",
	"cc": [
		"dsymonds@golang.org",
		"mchaten@gmail.com",
		"iant@golang.org",
		"dave@cheney.net",
		"mtj@google.com",
		"rsc@golang.org",
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-04-13 08:03:16.561191",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't think gccgo needs these files (gcc already has its own complex\nhandling code),\nso we only need to ensure our cc generates good code.\n",
			"disapproval": false,
			"date": "2012-04-13 08:57:26.181064",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Apr 13, 2012 at 4:15 PM, <mchaten@gmail.com> wrote:\n\n> http://codereview.appspot.com/**6024045/diff/11001/src/pkg/**\n> runtime/runtime.h#newcode787<http://codereview.appspot.com/6024045/diff/11001/src/pkg/runtime/runtime.h#newcode787>\n> src/pkg/runtime/runtime.h:787: #define runtime\u00b7isNaN(f)\n> (((runtime\u00b7float64tobits((f)) >> 52) & 0x7ff) == 0x7ff &&\n> !runtime\u00b7isInf((f), 0))\n> This can be simplified to f != f (which is what math.IsNaN does)\n>\nThanks, yet another speed up:\n\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkComplex128DivNormal           20           20   +0.00%\nBenchmarkComplex128DivNisNaN           12           10  -18.03%\nBenchmarkComplex128DivDisNaN           11           10  -15.97%\nBenchmarkComplex128DivNisInf            9            8  -11.46%\nBenchmarkComplex128DivDisInf            9            8   -8.40%\n",
			"disapproval": false,
			"date": "2012-04-13 09:03:33.263471",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"minux.ma@gmail.com",
				"dsymonds@golang.org",
				"mchaten@gmail.com",
				"iant@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Here are some comparisons from arm.\n\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkComplex128DivNormal         1102          535  -51.45%\nBenchmarkComplex128DivNisNaN          990          360  -63.64%\nBenchmarkComplex128DivDisNaN          986          356  -63.89%\nBenchmarkComplex128DivNisInf          641          280  -56.32%\nBenchmarkComplex128DivDisInf          593          260  -56.16%",
			"disapproval": false,
			"date": "2012-04-13 10:45:10.447956",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Question: What do these stats really mean?\n\nBenchmarkComplex128DivDisNaN           11           10  -15.97%\n\nThe change from 11 to 10 is a reduction of 1/11, or -9.09% How is that -15.97%?\n\nOn Fri, Apr 13, 2012 at 2:03 AM, minux <minux.ma@gmail.com> wrote:\n>\n>\n> On Fri, Apr 13, 2012 at 4:15 PM, <mchaten@gmail.com> wrote:\n>>\n>>\n>> http://codereview.appspot.com/6024045/diff/11001/src/pkg/runtime/runtime.h#newcode787\n>> src/pkg/runtime/runtime.h:787: #define runtime\u00b7isNaN(f)\n>> (((runtime\u00b7float64tobits((f)) >> 52) & 0x7ff) == 0x7ff &&\n>> !runtime\u00b7isInf((f), 0))\n>> This can be simplified to f != f (which is what math.IsNaN does)\n>\n> Thanks, yet another speed up:\n>\n> benchmark \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 old ns/op \u00a0 \u00a0new ns/op \u00a0 \u00a0delta\n> BenchmarkComplex128DivNormal \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 20 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 20 \u00a0 +0.00%\n> BenchmarkComplex128DivNisNaN \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 12 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 10 \u00a0-18.03%\n> BenchmarkComplex128DivDisNaN \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 11 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 10 \u00a0-15.97%\n> BenchmarkComplex128DivNisInf \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a09 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a08 \u00a0-11.46%\n> BenchmarkComplex128DivDisInf \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a09 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a08 \u00a0 -8.40%\n>\n\n\n\n-- \nMichael T. Jones\u00a0|\u00a0Chief Technology Advocate \u00a0|\u00a0mtj@google.com\u00a0|\u00a0 +1\n650-335-5765\n",
			"disapproval": false,
			"date": "2012-04-13 13:18:08.378541",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Apr 13, 2012 at 4:12 PM, <dsymonds@golang.org> wrote:\n\n> http://codereview.appspot.com/**6024045/diff/11001/src/pkg/**\n> runtime/runtime.h#newcode780<http://codereview.appspot.com/6024045/diff/11001/src/pkg/runtime/runtime.h#newcode780>\n> src/pkg/runtime/runtime.h:780: #define runtime\u00b7float64frombits(i)\n> (*(float64 *)&(i))\n> The comment on the version you deleted said that this approach was not\n> valid.\n>\nThis code is valid for gc (albeit not standard compliant). gccgo might\nstill need the original implementation.\n",
			"disapproval": false,
			"date": "2012-04-13 08:17:55.061497",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Apr 13, 2012 at 4:17 PM, minux <minux.ma@gmail.com> wrote:\n\n> On Fri, Apr 13, 2012 at 4:12 PM, <dsymonds@golang.org> wrote:\n>\n>> http://codereview.appspot.com/**6024045/diff/11001/src/pkg/**\n>> runtime/runtime.h#newcode780<http://codereview.appspot.com/6024045/diff/11001/src/pkg/runtime/runtime.h#newcode780>\n>> src/pkg/runtime/runtime.h:780: #define runtime\u00b7float64frombits(i)\n>> (*(float64 *)&(i))\n>> The comment on the version you deleted said that this approach was not\n>> valid.\n>>\n> This code is valid for gc (albeit not standard compliant). gccgo might\n> still need the original implementation.\n>\n+iant\nI don't think gcc still miscompile the code.\n",
			"disapproval": false,
			"date": "2012-04-13 08:31:57.640933",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6024045/diff/11001/src/pkg/runtime/complex_test.go\nFile src/pkg/runtime/complex_test.go (right):\n\nhttp://codereview.appspot.com/6024045/diff/11001/src/pkg/runtime/complex_test.go#newcode12\nsrc/pkg/runtime/complex_test.go:12: var result complex128\nThis is odd to be up here by itself. Just declare it for each benchmark.\n\nhttp://codereview.appspot.com/6024045/diff/11001/src/pkg/runtime/runtime.h\nFile src/pkg/runtime/runtime.h (right):\n\nhttp://codereview.appspot.com/6024045/diff/11001/src/pkg/runtime/runtime.h#newcode780\nsrc/pkg/runtime/runtime.h:780: #define runtime\u00b7float64frombits(i) (*(float64 *)&(i))\nThe comment on the version you deleted said that this approach was not valid.",
			"disapproval": false,
			"date": "2012-04-13 08:12:43.979164",
			"approval": false
		},
		{
			"sender": "mchaten@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"mchaten@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6024045/diff/11001/src/pkg/runtime/runtime.h\nFile src/pkg/runtime/runtime.h (right):\n\nhttp://codereview.appspot.com/6024045/diff/11001/src/pkg/runtime/runtime.h#newcode783\nsrc/pkg/runtime/runtime.h:783: #define runtime\u00b7float32tobits(f) (*(uint32 *)&(f))\nI'd make sure these work in GCC. From the comment in the original function, gc compiles these as we expect, but GCC does not.\n\nhttp://codereview.appspot.com/6024045/diff/11001/src/pkg/runtime/runtime.h#newcode787\nsrc/pkg/runtime/runtime.h:787: #define runtime\u00b7isNaN(f) (((runtime\u00b7float64tobits((f)) >> 52) & 0x7ff) == 0x7ff && !runtime\u00b7isInf((f), 0))\nThis can be simplified to f != f (which is what math.IsNaN does)",
			"disapproval": false,
			"date": "2012-04-13 08:15:10.365746",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Apr 13, 2012 at 09:17, Michael Jones <mtj@google.com> wrote:\n> Question: What do these stats really mean?\n>\n> BenchmarkComplex128DivDisNaN \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 11 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 10 \u00a0-15.97%\n>\n> The change from 11 to 10 is a reduction of 1/11, or -9.09% How is that -15.97%?\n\nThere are more bits in the 11 and 10 than are printed.\nWe truncate to nanoseconds in those columns.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-04-13 13:28:58.830856",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "thanks.\n\nOn Fri, Apr 13, 2012 at 6:28 AM, Russ Cox <rsc@golang.org> wrote:\n\n> On Fri, Apr 13, 2012 at 09:17, Michael Jones <mtj@google.com> wrote:\n> > Question: What do these stats really mean?\n> >\n> > BenchmarkComplex128DivDisNaN           11           10  -15.97%\n> >\n> > The change from 11 to 10 is a reduction of 1/11, or -9.09% How is that\n> -15.97%?\n>\n> There are more bits in the 11 and 10 than are printed.\n> We truncate to nanoseconds in those columns.\n>\n> Russ\n>\n\n\n\n-- \nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\n650-335-5765\n",
			"disapproval": false,
			"date": "2012-04-13 14:25:10.232074",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"minux.ma@gmail.com",
				"dsymonds@golang.org",
				"mchaten@gmail.com",
				"iant@golang.org",
				"dave@cheney.net",
				"mtj@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Here are some comparison results from an old core duo 32bit host\n\nimac(~/go/src/pkg/runtime) % ~/go/misc/benchcmp {old,new}.txt\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkComplex128DivNormal          246          107  -56.50%\nBenchmarkComplex128DivNisNaN          491          377  -23.22%\nBenchmarkComplex128DivDisNaN          473          378  -20.08%\nBenchmarkComplex128DivNisInf          142           30  -78.87%\nBenchmarkComplex128DivDisInf          113           31  -72.48%",
			"disapproval": false,
			"date": "2012-04-14 00:50:35.798980",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"minux.ma@gmail.com",
				"dsymonds@golang.org",
				"mchaten@gmail.com",
				"iant@golang.org",
				"dave@cheney.net",
				"mtj@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.",
			"disapproval": false,
			"date": "2012-04-17 12:22:18.349856",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"dsymonds@golang.org",
				"mchaten@gmail.com",
				"iant@golang.org",
				"dave@cheney.net",
				"mtj@google.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6024045/diff/1002/src/pkg/runtime/float.c\nFile src/pkg/runtime/float.c (right):\n\nhttp://codereview.appspot.com/6024045/diff/1002/src/pkg/runtime/float.c#newcode18\nsrc/pkg/runtime/float.c:18: #pragma textflag 7\nthese routines call further functions and cannot be pragma 7.",
			"disapproval": false,
			"date": "2012-04-17 13:25:21.336262",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Apr 17, 2012 at 9:25 PM, <r@golang.org> wrote:\n\n> http://codereview.appspot.com/**6024045/diff/1002/src/pkg/**\n> runtime/float.c#newcode18<http://codereview.appspot.com/6024045/diff/1002/src/pkg/runtime/float.c#newcode18>\n> src/pkg/runtime/float.c:18: #pragma textflag 7\n> these routines call further functions and cannot be pragma 7.\n>\nboth runtime\u00b7float64tobits and runtime\u00b7float64frombits are macro now.\nI suppose I should rename them to all uppercase?\n",
			"disapproval": false,
			"date": "2012-04-17 13:36:42.056918",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I missed that, sorry. If they're not functions they shouldn't bother\nwith the center-dot notation because they won't go into the symbol\ntable and it will be confusing. I was confused.\n\n-rob\n",
			"disapproval": false,
			"date": "2012-04-17 13:42:19.862749",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"dsymonds@golang.org",
				"mchaten@gmail.com",
				"iant@golang.org",
				"dave@cheney.net",
				"mtj@google.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dsymonds@golang.org, mchaten@gmail.com, iant@golang.org, dave@cheney.net, mtj@google.com, rsc@golang.org, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-17 15:54:28.187499",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"minux.ma@gmail.com",
				"dsymonds@golang.org",
				"mchaten@gmail.com",
				"iant@golang.org",
				"dave@cheney.net",
				"mtj@google.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Patch set #8 looks good,\n\ncore i5, 2.3Ghz\n\nodessa(~/go/src/pkg/runtime) % ~/go/misc/benchcmp {old,new}.txt\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkComplex128DivNormal           67           27  -59.14%\nBenchmarkComplex128DivNisNaN           72           14  -79.84%\nBenchmarkComplex128DivDisNaN           73           13  -81.17%\nBenchmarkComplex128DivNisInf           55           11  -79.21%\nBenchmarkComplex128DivDisInf           45           11  -74.23%",
			"disapproval": false,
			"date": "2012-04-18 06:41:02.656128",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"minux.ma@gmail.com",
				"dsymonds@golang.org",
				"mchaten@gmail.com",
				"iant@golang.org",
				"dave@cheney.net",
				"mtj@google.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi,\n\nSorry patch #7 does not compile for me, osx/amd64\n\n# testmain\nruntime.complex128div: undefined: runtime.isInf\nruntime.complex128div: undefined: runtime.isNaN\nruntime.complex128div: undefined: runtime.NaN\nruntime.complex128div: undefined: runtime.Inf\n.dynsym: runtime.float64frombits(0): not defined\nFAIL    runtime [build failed]",
			"disapproval": false,
			"date": "2012-04-18 05:00:58.325324",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"dsymonds@golang.org",
				"mchaten@gmail.com",
				"iant@golang.org",
				"dave@cheney.net",
				"mtj@google.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/04/18 06:41:02, dfc wrote:\n> Patch set #8 looks good,\nThanks. I think I have to revert the changes to IsNaN(f) from (f != f) to the old integer-only\ntest, because on Core i7 620M it makes the BenchmarkComplex128DivNisNaN and\nBenchmarkComplex128DivDisNaN much slower.\n\nI will benchmark it again on Core i7-2600.",
			"disapproval": false,
			"date": "2012-04-18 07:08:49.238217",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"dsymonds@golang.org",
				"mchaten@gmail.com",
				"iant@golang.org",
				"dave@cheney.net",
				"mtj@google.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I've updated the benchmark section.",
			"disapproval": false,
			"date": "2012-04-19 16:42:15.455178",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"minux.ma@gmail.com",
				"dsymonds@golang.org",
				"mchaten@gmail.com",
				"iant@golang.org",
				"dave@cheney.net",
				"mtj@google.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/04/19 16:42:15, minux wrote:\n> I've updated the benchmark section.\n\n6070043 has been submitted.",
			"disapproval": false,
			"date": "2012-04-21 03:29:13.768712",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"dsymonds@golang.org",
				"mchaten@gmail.com",
				"iant@golang.org",
				"dave@cheney.net",
				"mtj@google.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/04/21 03:29:13, dfc wrote:\n> 6070043 has been submitted.\nOK, thanks.\n\nAssuming no more comments, I will submit it next Monday.",
			"disapproval": false,
			"date": "2012-04-21 14:24:41.750797",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I object.\n\nI am far from convinced that complex division needs to be\nas fast as possible, and we try to keep #defined macros to\nan absolute minimum.  Note this text from runtime.h:\n\n/*\n * defined macros\n *    you need super-gopher-guru privilege\n *    to add this list.\n */\n#define\tnelem(x)\t(sizeof(x)/sizeof((x)[0]))\n#define\tnil\t\t((void*)0)\n#define\toffsetof(s,m)\t(uint32)(&(((s*)0)->m))\n\nI would prefer to leave complex division as it is and not\nintroduce the macros.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-04-23 14:01:57.548663",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"dsymonds@golang.org",
				"mchaten@gmail.com",
				"iant@golang.org",
				"dave@cheney.net",
				"mtj@google.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/04/23 14:01:57, rsc wrote:\n> I am far from convinced that complex division needs to be\n> as fast as possible, and we try to keep #defined macros to\n> an absolute minimum.  Note this text from runtime.h:\nOK.\n\nCould cc compiler acquire some inline capability?\nEven manually hinted inline would be beneficial.\n\nIt seems some small inline will help improving the\nruntime performance by 20%-50%.\nFor example, CL 5795075 and CL 5798047.",
			"disapproval": false,
			"date": "2012-04-23 14:18:26.057994",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I looked more carefully at what's going on in package runtime.\r\nI propose the following:\r\n\r\n1. Delete most of float.c - ldexp, frexp, and modf are all unused.\r\n2. Having done that, the float<->bit conversions are unused too.\r\n3. In runtime.h, declare\r\n    extern float64 runtime\u00b7nan;\r\n    extern float64 runtime\u00b7posinf;\r\n    extern float64 runtime\u00b7neginf;\r\nIt is okay to add\r\n    #define ISNAN(x) ((x) != (x))\r\nbut make it all caps so that it is clear it uses the definition twice.\r\n\r\n4. In float.c, define\r\n    // used as float64 via runtime\u00b7 names.\r\n    uint64 \u00b7nan = 0x...;\r\n    uint64 \u00b7posinf = 0x...;\r\n    uint64 \u00b7neginf = 0x...;\r\n(This is sleazy - it is initializing declared float64s as uint64s, but\r\nit also works, because the compiler doesn't see the two names as\r\nequivalent, and it lets things get initialized by the linker instead of\r\nat startup.)\r\n\r\nAnd then where code says\r\n    IsInf(x, 0) => x == runtime\u00b7posinf || x == runtime\u00b7neginf\r\n    IsInf(x, 1) => x == runtime\u00b7posinf\r\n    IsInf(x, -1) => x == runtime\u00b7neginf\r\n    Inf(1) => runtime\u00b7posinf\r\n    Inf(-1) => runtime\u00b7neginf\r\n    NaN() => runtime\u00b7nan\r\n    IsNaN(x) => ISNAN(x)  (assuming x has no side effects)\r\n\r\nAnd then we can delete the runtime functions IsNaN, IsInf, Inf, and NaN.\r\n\r\nThis should end up deleting lots of code, introduce only a single\r\nnew macro, and still make complex division noticeably faster.\r\n\r\nWant to give it a try?\r\n\r\nThanks.\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-04-24 15:40:51.073148",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"dsymonds@golang.org",
				"mchaten@gmail.com",
				"iant@golang.org",
				"dave@cheney.net",
				"mtj@google.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please take a look at Patch set 12 (please apply CL 6197045 before evaluation).\n\nOn 2012/04/24 15:40:51, rsc wrote:\n>     #define ISNAN(x) ((x) != (x))\nif we use this defnition, on 386, the speedup isn't very significant.\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkComplex128DivNormal           91           45  -50.00%\nBenchmarkComplex128DivNisNaN          538          459  -14.68%\nBenchmarkComplex128DivDisNaN          534          459  -14.04%\nBenchmarkComplex128DivNisInf          298          246  -17.45%\nBenchmarkComplex128DivDisInf           52           17  -66.22%\n\nOf course, on amd64, the speedup is very significant:\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkComplex128DivNormal           66           27  -58.98%\nBenchmarkComplex128DivNisNaN           64           15  -76.25%\nBenchmarkComplex128DivDisNaN           67           14  -79.06%\nBenchmarkComplex128DivNisInf           51           13  -73.89%\nBenchmarkComplex128DivDisInf           46           14  -68.32%",
			"disapproval": false,
			"date": "2012-05-04 18:49:15.656122",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"dsymonds@golang.org",
				"mchaten@gmail.com",
				"iant@golang.org",
				"dave@cheney.net",
				"mtj@google.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6024045/diff/43001/src/pkg/runtime/complex.c\nFile src/pkg/runtime/complex.c (right):\n\nhttp://codereview.appspot.com/6024045/diff/43001/src/pkg/runtime/complex.c#newcode19\nsrc/pkg/runtime/complex.c:19: ninf = FLOAT64BITS(n.real) == \u00b7posinf || FLOAT64BITS(n.real) == \u00b7neginf ||\nSeems like this can be \n\nninf = n.real==runtime\u00b7posinf || n.real==runtime\u00b7neginf ||\n    n.imag==runtime\u00b7posinf || n.imag==runtime\u00b7neginf;\n\nand similarly for dinf.\n\nhttp://codereview.appspot.com/6024045/diff/43001/src/pkg/runtime/complex.c#newcode24\nsrc/pkg/runtime/complex.c:24: nnan = !ninf && (ISNANORINF(n.real) || ISNANORINF(n.imag));\nSeems like this can be \n\nnnan = ISNAN(n.real) || ISNAN(n.imag)\ndnan = ISNAN(d.real) || ISNAN(d.imag)\n\nhttp://codereview.appspot.com/6024045/diff/43001/src/pkg/runtime/complex.c#newcode30\nsrc/pkg/runtime/complex.c:30: } else if(ninf && !dinf && !dnan) {\nMight as well delete && !dnan.  The dnan case was handled above.\n\nhttp://codereview.appspot.com/6024045/diff/43001/src/pkg/runtime/complex.c#newcode33\nsrc/pkg/runtime/complex.c:33: } else if(!ninf && !nnan && dinf) {\nMight as well delete && !nnan",
			"disapproval": false,
			"date": "2012-05-04 18:56:35.929116",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, May 5, 2012 at 2:56 AM, <rsc@golang.org> wrote:\r\n\r\n> http://codereview.appspot.com/**6024045/diff/43001/src/pkg/**\r\n> runtime/complex.c#newcode19<http://codereview.appspot.com/6024045/diff/43001/src/pkg/runtime/complex.c#newcode19>\r\n> src/pkg/runtime/complex.c:19: ninf = FLOAT64BITS(n.real) == \u00b7posinf ||\r\n> FLOAT64BITS(n.real) == \u00b7neginf ||\r\n> Seems like this can be\r\n>\r\n> ninf = n.real==runtime\u00b7posinf || n.real==runtime\u00b7neginf ||\r\n>    n.imag==runtime\u00b7posinf || n.imag==runtime\u00b7neginf;\r\n>\r\n> and similarly for dinf.\r\n>\r\nI'm trying to avoid floating point comparison as much as possible, for it's\r\nvery slow on 386.\r\nI uploaded Patch Set 13 for this, and on Darwin/386 the benchcmp is:\r\nbenchmark                       old ns/op    new ns/op    delta\r\nBenchmarkComplex128DivNormal           92           51  -44.61%\r\nBenchmarkComplex128DivNisNaN          546         1013  +85.53%\r\nBenchmarkComplex128DivDisNaN          553         1010  +82.64%\r\nBenchmarkComplex128DivNisInf          295          254  -13.90%\r\nBenchmarkComplex128DivDisInf           48           23  -52.38%\r\n",
			"disapproval": false,
			"date": "2012-05-04 19:36:12.949811",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> I'm trying to avoid floating point comparison as much as possible, for it's\r\n> very slow on 386.\r\n> I uploaded Patch Set 13 for this, and on Darwin/386 the benchcmp is:\r\n> benchmark \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 old ns/op \u00a0 \u00a0new ns/op \u00a0 \u00a0delta\r\n> BenchmarkComplex128DivNormal \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 92 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 51 \u00a0-44.61%\r\n> BenchmarkComplex128DivNisNaN \u00a0 \u00a0 \u00a0 \u00a0 \u00a0546 \u00a0 \u00a0 \u00a0 \u00a0 1013 \u00a0+85.53%\r\n> BenchmarkComplex128DivDisNaN \u00a0 \u00a0 \u00a0 \u00a0 \u00a0553 \u00a0 \u00a0 \u00a0 \u00a0 1010 \u00a0+82.64%\r\n> BenchmarkComplex128DivNisInf \u00a0 \u00a0 \u00a0 \u00a0 \u00a0295 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0254 \u00a0-13.90%\r\n> BenchmarkComplex128DivDisInf \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 48 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 23 \u00a0-52.38%\r\n\r\nVery interesting, those results are reminiscent of the original\r\nresults of mchaten's Go based efforts.\r\n",
			"disapproval": false,
			"date": "2012-05-04 22:36:34.556277",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"dsymonds@golang.org",
				"mchaten@gmail.com",
				"iant@golang.org",
				"dave@cheney.net",
				"mtj@google.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Are you still planning to apply my comments and submit?",
			"disapproval": false,
			"date": "2012-07-30 03:49:28.347170",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"dsymonds@golang.org",
				"mchaten@gmail.com",
				"iant@golang.org",
				"dave@cheney.net",
				"mtj@google.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/07/30 03:49:28, rsc wrote:\n> Are you still planning to apply my comments and submit?\noh, yes. sorry for the long delay. the remaining problem is 386's performance\nregression. will investigate soon.",
			"disapproval": false,
			"date": "2012-07-30 04:58:32.801800",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "If it's 386-only, please don't worry too much about it: just submit\r\nthe CL and move on. Before long someone will throw away all the 387\r\ncode and drop in SSE.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-08-03 18:13:44.377820",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"dsymonds@golang.org",
				"mchaten@gmail.com",
				"iant@golang.org",
				"dave@cheney.net",
				"mtj@google.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=d3dd48c73d6d ***\n\nruntime: inline several float64 routines to speed up complex128 division\nDepends on CL 6197045.\n\nResult obtained on Core i7 620M, Darwin/amd64:\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkComplex128DivNormal           57           28  -50.78%\nBenchmarkComplex128DivNisNaN           49           15  -68.90%\nBenchmarkComplex128DivDisNaN           49           15  -67.88%\nBenchmarkComplex128DivNisInf           40           12  -68.50%\nBenchmarkComplex128DivDisInf           33           13  -61.06%\n\nResult obtained on Core i7 620M, Darwin/386:\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkComplex128DivNormal           89           50  -44.05%\nBenchmarkComplex128DivNisNaN          307          802  +161.24%\nBenchmarkComplex128DivDisNaN          309          788  +155.02%\nBenchmarkComplex128DivNisInf          278          237  -14.75%\nBenchmarkComplex128DivDisInf           46           22  -52.46%\n\nResult obtained on 700MHz OMAP4460, Linux/ARM:\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkComplex128DivNormal         1557          465  -70.13%\nBenchmarkComplex128DivNisNaN         1443          220  -84.75%\nBenchmarkComplex128DivDisNaN         1481          218  -85.28%\nBenchmarkComplex128DivNisInf          952          216  -77.31%\nBenchmarkComplex128DivDisInf          861          231  -73.17%\n\nThe 386 version has a performance regression, but as we have\ndecided to use SSE2 instead of x87 FPU for 386 too (issue 3912),\nI won't address this issue.\n\nR=dsymonds, mchaten, iant, dave, mtj, rsc, r\nCC=golang-dev\nhttp://codereview.appspot.com/6024045\n\nhttp://codereview.appspot.com/6024045/diff/43001/src/pkg/runtime/complex.c\nFile src/pkg/runtime/complex.c (right):\n\nhttp://codereview.appspot.com/6024045/diff/43001/src/pkg/runtime/complex.c#newcode24\nsrc/pkg/runtime/complex.c:24: nnan = !ninf && (ISNANORINF(n.real) || ISNANORINF(n.imag));\nOn 2012/05/04 18:56:36, rsc wrote:\n> Seems like this can be \n> \n> nnan = ISNAN(n.real) || ISNAN(n.imag)\n> dnan = ISNAN(d.real) || ISNAN(d.imag)\nit turns out that the !ninf part is necessary.\nthis variable is misnamed, it doesn't mean\nn has a NaN part in it.\n\nif I discard this !ninf condition, the test/cmplxdivide.go\ntest will fail.",
			"disapproval": false,
			"date": "2012-08-07 15:46:10.510250",
			"approval": false
		}
	],
	"owner_email": "minux.ma@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "minux",
	"subject": "code review 6024045: runtime: inline several float64 routines to speed up co...",
	"created": "2012-04-13 07:44:50.945888",
	"patchsets": [
		1,
		2001,
		5001,
		7001,
		11001,
		1002,
		20001,
		25001,
		23003,
		24009,
		40001,
		43001,
		50001,
		59005,
		65001,
		59006
	],
	"modified": "2012-08-07 15:46:14.541540",
	"closed": true,
	"issue": 6024045
}