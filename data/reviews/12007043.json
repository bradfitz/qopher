{
	"description": "misc/dashboard/builder: increase cmdTimeout to 10 minutes\n\nIt takes more then 5 minutes to clone go repo\non windows-386 builder now.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net"
	],
	"reviewers": [
		"bradfitz@golang.org",
		"dsymonds@golang.org"
	],
	"messages": [
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-07-29 04:27:34.906850",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. I think this is a reasonable increase. On my arm builders this\r\ncan take close to an hour, but I manage this locally with\r\n-cmdTimeout=60m\r\n\r\nOn Mon, Jul 29, 2013 at 2:27 PM,  <alex.brainman@gmail.com> wrote:\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> misc/dashboard/builder: increase cmdTimeout to 10 minutes\r\n>\r\n> It takes more then 5 minutes to clone go repo\r\n> on windows-386 builder now.\r\n>\r\n> Please review this at https://codereview.appspot.com/12007043/\r\n>\r\n> Affected files:\r\n>   M misc/dashboard/builder/main.go\r\n>\r\n>\r\n> Index: misc/dashboard/builder/main.go\r\n> ===================================================================\r\n> --- a/misc/dashboard/builder/main.go\r\n> +++ b/misc/dashboard/builder/main.go\r\n> @@ -61,7 +61,7 @@\r\n>         failAll        = flag.Bool(\"fail\", false, \"fail all builds\")\r\n>         parallel       = flag.Bool(\"parallel\", false, \"Build multiple\r\n> targets in parallel\")\r\n>         buildTimeout   = flag.Duration(\"buildTimeout\", 60*time.Minute,\r\n> \"Maximum time to wait for builds and tests\")\r\n> -       cmdTimeout     = flag.Duration(\"cmdTimeout\", 5*time.Minute, \"Maximum\r\n> time to wait for an external command\")\r\n> +       cmdTimeout     = flag.Duration(\"cmdTimeout\", 10*time.Minute,\r\n> \"Maximum time to wait for an external command\")\r\n>         commitInterval = flag.Duration(\"commitInterval\", 1*time.Minute,\r\n> \"Time to wait between polling for new commits (0 disables commit poller)\")\r\n>         verbose        = flag.Bool(\"v\", false, \"verbose\")\r\n>  )\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-29 04:29:50.515990",
			"approval": true
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=9305039274be ***\n\nmisc/dashboard/builder: increase cmdTimeout to 10 minutes\n\nIt takes more then 5 minutes to clone go repo\non windows-386 builder now.\n\nR=golang-dev, dave\nCC=golang-dev\nhttps://codereview.appspot.com/12007043",
			"disapproval": false,
			"date": "2013-07-29 04:31:28.687460",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It is only going to get worse. :-(\n\nAlex",
			"disapproval": false,
			"date": "2013-07-29 04:32:30.655360",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think it's time to also use an efficient set of hg commands.\r\n\r\nWhen we're done with a repo we can stash it away for future reuse, avoiding\r\na full clone.\r\n\r\nThere was resistance before, but these timeouts are also showing that this\r\nis really slow.\r\n On Jul 28, 2013 9:29 PM, \"Dave Cheney\" <dave@cheney.net> wrote:\r\n\r\n> LGTM. I think this is a reasonable increase. On my arm builders this\r\n> can take close to an hour, but I manage this locally with\r\n> -cmdTimeout=60m\r\n>\r\n> On Mon, Jul 29, 2013 at 2:27 PM,  <alex.brainman@gmail.com> wrote:\r\n> > Reviewers: golang-dev1,\r\n> >\r\n> > Message:\r\n> > Hello golang-dev@googlegroups.com,\r\n> >\r\n> > I'd like you to review this change to\r\n> > https://go.googlecode.com/hg/\r\n> >\r\n> >\r\n> > Description:\r\n> > misc/dashboard/builder: increase cmdTimeout to 10 minutes\r\n> >\r\n> > It takes more then 5 minutes to clone go repo\r\n> > on windows-386 builder now.\r\n> >\r\n> > Please review this at https://codereview.appspot.com/12007043/\r\n> >\r\n> > Affected files:\r\n> >   M misc/dashboard/builder/main.go\r\n> >\r\n> >\r\n> > Index: misc/dashboard/builder/main.go\r\n> > ===================================================================\r\n> > --- a/misc/dashboard/builder/main.go\r\n> > +++ b/misc/dashboard/builder/main.go\r\n> > @@ -61,7 +61,7 @@\r\n> >         failAll        = flag.Bool(\"fail\", false, \"fail all builds\")\r\n> >         parallel       = flag.Bool(\"parallel\", false, \"Build multiple\r\n> > targets in parallel\")\r\n> >         buildTimeout   = flag.Duration(\"buildTimeout\", 60*time.Minute,\r\n> > \"Maximum time to wait for builds and tests\")\r\n> > -       cmdTimeout     = flag.Duration(\"cmdTimeout\", 5*time.Minute,\r\n> \"Maximum\r\n> > time to wait for an external command\")\r\n> > +       cmdTimeout     = flag.Duration(\"cmdTimeout\", 10*time.Minute,\r\n> > \"Maximum time to wait for an external command\")\r\n> >         commitInterval = flag.Duration(\"commitInterval\", 1*time.Minute,\r\n> > \"Time to wait between polling for new commits (0 disables commit\r\n> poller)\")\r\n> >         verbose        = flag.Bool(\"v\", false, \"verbose\")\r\n> >  )\r\n> >\r\n> >\r\n> > --\r\n> >\r\n> > ---You received this message because you are subscribed to the Google\r\n> Groups\r\n> > \"golang-dev\" group.\r\n> > To unsubscribe from this group and stop receiving emails from it, send an\r\n> > email to golang-dev+unsubscribe@googlegroups.com.\r\n> > For more options, visit https://groups.google.com/groups/opt_out.\r\n> >\r\n> >\r\n>\r\n> --\r\n>\r\n> ---\r\n> You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-29 04:33:00.870010",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 29 July 2013 14:32, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n\r\n> I think it's time to also use an efficient set of hg commands.\r\n>\r\n> When we're done with a repo we can stash it away for future reuse, avoiding\r\n> a full clone.\r\n>\r\n> There was resistance before, but these timeouts are also showing that this\r\n> is really slow.\r\n\r\nThe risk with not using a completely clean base is that we might be\r\nfooled by getting an incompletely isolated build. I'd much rather\r\nidentify what's actually slow, and improve or skip that.\r\n\r\nThe handful of windows-386-ec2 failures currently showing are mostly\r\nbreakages at this point:\r\n  # runtime -cpu=1,2,4\r\n\r\nI note that there's a difference at that step between Windows and\r\nnon-Windows: non-Windows sets GOMAXPROCS=2.\r\n\r\nThis tells me two things:\r\n  (1) This CL is useless. It only increases the timeout for the\r\nbuilder to execute an command, but that's only for checking out repos.\r\nThat's not where this builder is failing. all.bat/run.bat would need\r\nchanging (it has the 300s timeout for this step).\r\n  (2) Perhaps skipping the ,4 on windows-386 might be worth trying.\r\nRace conditions should show up under -cpu=2, and there's another\r\nWindows builder anyway.\r\n",
			"disapproval": false,
			"date": "2013-07-29 04:47:06.477690",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This CL was for a failure of the builder to start again after\r\nrestarting. I noticed yesterday windows/386 had stopped working, told\r\nAlex, he restarted it, but it didn't come up because the clone took\r\nlonger than the 5m timeout.\r\n\r\nOn Mon, Jul 29, 2013 at 2:47 PM, David Symonds <dsymonds@golang.org> wrote:\r\n> On 29 July 2013 14:32, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n>\r\n>> I think it's time to also use an efficient set of hg commands.\r\n>>\r\n>> When we're done with a repo we can stash it away for future reuse, avoiding\r\n>> a full clone.\r\n>>\r\n>> There was resistance before, but these timeouts are also showing that this\r\n>> is really slow.\r\n>\r\n> The risk with not using a completely clean base is that we might be\r\n> fooled by getting an incompletely isolated build. I'd much rather\r\n> identify what's actually slow, and improve or skip that.\r\n>\r\n> The handful of windows-386-ec2 failures currently showing are mostly\r\n> breakages at this point:\r\n>   # runtime -cpu=1,2,4\r\n>\r\n> I note that there's a difference at that step between Windows and\r\n> non-Windows: non-Windows sets GOMAXPROCS=2.\r\n>\r\n> This tells me two things:\r\n>   (1) This CL is useless. It only increases the timeout for the\r\n> builder to execute an command, but that's only for checking out repos.\r\n> That's not where this builder is failing. all.bat/run.bat would need\r\n> changing (it has the 300s timeout for this step).\r\n>   (2) Perhaps skipping the ,4 on windows-386 might be worth trying.\r\n> Race conditions should show up under -cpu=2, and there's another\r\n> Windows builder anyway.\r\n",
			"disapproval": false,
			"date": "2013-07-29 04:49:12.526650",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 29 July 2013 14:49, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> This CL was for a failure of the builder to start again after\r\n> restarting. I noticed yesterday windows/386 had stopped working, told\r\n> Alex, he restarted it, but it didn't come up because the clone took\r\n> longer than the 5m timeout.\r\n\r\nI don't see any failures on build.golang.org to cover that. Can we\r\ninstrument the builders to log how long the cloning takes?\r\n",
			"disapproval": false,
			"date": "2013-07-29 04:53:43.116420",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"bradfitz@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/29 04:53:43, dsymonds wrote:\n> On 29 July 2013 14:49, Dave Cheney <mailto:dave@cheney.net> wrote:\n> \n> > This CL was for a failure of the builder to start again after\n> > restarting. I noticed yesterday windows/386 had stopped working, told\n> > Alex, he restarted it, but it didn't come up because the clone took\n> > longer than the 5m timeout.\n> \n> I don't see any failures on http://build.golang.org to cover that. ...\n\nYes, you wouldn't once I restarted gobuilder with -cmdTimeout=10m command line parameter it went past the error and started rebuilding again. So everything is done now. I just decided to make cmdTimeout=10m as default so next person does not need to remember to add that extra command line parameter.\n\n> ... Can we\n> instrument the builders to log how long the cloning takes?\n\nI am sure it is possible. Yesterday I saw it say \"timed out after 5 minutes\" on console even before building started. So I tracked it down to \"hg clone ...\" command, I run it in gdb.\n\nAlex",
			"disapproval": false,
			"date": "2013-07-29 05:17:29.570450",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"bradfitz@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/29 04:47:06, dsymonds wrote:\n> ...\n> The handful of windows-386-ec2 failures currently showing are mostly\n> breakages at this point:\n>   # runtime -cpu=1,2,4\n\nYes, runtime test takes too long to run on windows-386 builder. It is around 230s, but sometimes it takes longer when system is getting busy (the limit is 300s at the moment).\n\n>   (1) This CL is useless. It only increases the timeout for the\n> builder to execute an command, but that's only for checking out repos.\n> That's not where this builder is failing. all.bat/run.bat would need\n> changing (it has the 300s timeout for this step).\n\nYes, this CL fixes different unrelated issue. Sometimes failing runtime test is a different issue alltogether.\n\n>   (2) Perhaps skipping the ,4 on windows-386 might be worth trying.\n> Race conditions should show up under -cpu=2, and there's another\n> Windows builder anyway.\n\nI am not a race expert, I don't know. I can only say it has 1 CPU. About half of test time is spent in new TestGoroutineParallelism. Also run.bat is run by many people, not just our builders.\n\nAlex",
			"disapproval": false,
			"date": "2013-07-29 05:49:08.467310",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Jul 28, 2013 at 9:47 PM, David Symonds <dsymonds@golang.org> wrote:\r\n\r\n> On 29 July 2013 14:32, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n>\r\n> > I think it's time to also use an efficient set of hg commands.\r\n> >\r\n> > When we're done with a repo we can stash it away for future reuse,\r\n> avoiding\r\n> > a full clone.\r\n> >\r\n> > There was resistance before, but these timeouts are also showing that\r\n> this\r\n> > is really slow.\r\n>\r\n> The risk with not using a completely clean base is that we might be\r\n> fooled by getting an incompletely isolated build.\r\n\r\n\r\nI think that's an unfounded risk.\r\n\r\nWith:\r\n\r\n$ hg pull\r\n$ hg update --clean xxxxxx\r\n$ hg --config extensions.purge= purge --all\r\n\r\nYou can get a pristine tree.\r\n\r\nUnless you're saying that you don't trust hg to function as documented.\r\n",
			"disapproval": false,
			"date": "2013-07-29 20:47:59.176460",
			"approval": false
		}
	],
	"owner_email": "alex.brainman@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "brainman",
	"subject": "code review 12007043: misc/dashboard/builder: increase cmdTimeout to 10 minutes",
	"created": "2013-07-29 04:26:10.863940",
	"patchsets": [
		1,
		3001,
		6001,
		11001
	],
	"modified": "2013-07-29 20:47:59.321550",
	"closed": true,
	"issue": 12007043
}