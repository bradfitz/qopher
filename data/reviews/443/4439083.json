{
	"description": "cmd/godoc: added indexdelay flag to control when or if indexing starts.\n\nThe flag defaults to 60 (seconds), leaving current use unchanged. If set <= 0, indexing is disabled.\nFixes issue 1647.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"gri@golang.org"
	],
	"messages": [
		{
			"sender": "markhkamp@refola.com",
			"recipients": [
				"markhkamp@refola.com",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "Abandoning. Thanks for fixing the issue.\n-Mark\n\nOn 2011/05/02 20:29:30, gri wrote:\n> Please abandon this. See CL 4444083. Thanks.\n> - Robert\n> \n> On Fri, Apr 29, 2011 at 11:57 PM,  <mailto:markhkamp@refola.com> wrote:\n> > Reviewers: http://golang-dev_googlegroups.com,\n> >\n> > Message:\n> > Hello mailto:golang-dev@googlegroups.com (cc: mailto:golang-dev@googlegroups.com,\n> > rsc),\n> >\n> > I'd like you to review this change to\n> > https://go.googlecode.com/hg/\n> >\n> >\n> > Description:\n> > cmd/godoc: added indexdelay flag to control when or if indexing starts.\n> >\n> > The flag defaults to 60 (seconds), leaving current use unchanged. If set\n> > <= 0, indexing is disabled.\n> > Fixes issue 1647.\n> >\n> > Please review this at http://codereview.appspot.com/4439083/\n> >\n> > Affected files:\n> > &nbsp;M src/cmd/godoc/godoc.go\n> >\n> >\n> > Index: src/cmd/godoc/godoc.go\n> > ===================================================================\n> > --- a/src/cmd/godoc/godoc.go\n> > +++ b/src/cmd/godoc/godoc.go\n> > @@ -67,6 +67,9 @@\n> > &nbsp; &nbsp; &nbsp; &nbsp;maxResults &nbsp; &nbsp; = flag.Int(\"maxresults\", 10000, \"maximum number of\n> > full text search results shown\")\n> > &nbsp; &nbsp; &nbsp; &nbsp;templateDir &nbsp; &nbsp;= flag.String(\"templates\", \"\", \"directory containing\n> > alternate template files\")\n> >\n> > + &nbsp; &nbsp; &nbsp; // indexing\n> > + &nbsp; &nbsp; &nbsp; indexDelaySeconds = flag.Int64(\"indexdelay\", 60, \"number of seconds\n> > to wait between index updates; <= 0 to disable indexing\")\n> > +\n> > &nbsp; &nbsp; &nbsp; &nbsp;// file system mapping\n> > &nbsp; &nbsp; &nbsp; &nbsp;fsMap &nbsp; &nbsp; &nbsp;Mapping // user-defined mapping\n> > &nbsp; &nbsp; &nbsp; &nbsp;fsTree &nbsp; &nbsp; RWValue // *Directory tree of packages, updated with each\n> > sync\n> > @@ -1178,7 +1181,11 @@\n> > &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// The index is older than the latest file system change\n> > &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// under godoc's observation. Indexing may be in progress\n> > &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// or start shortly (see indexer()).\n> > - &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; result.Alert = \"Indexing in progress: result may be\n> > inaccurate\"\n> > + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if *indexDelaySeconds > 0 {\n> > + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; result.Alert = \"Indexing in progress: result may be\n> > inaccurate\"\n> > + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } else {\n> > + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; result.Alert = \"Indexing disabled: results are not\n> > available\"\n> > + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n> > &nbsp; &nbsp; &nbsp; &nbsp;}\n> >\n> > &nbsp; &nbsp; &nbsp; &nbsp;return\n> > @@ -1278,11 +1285,17 @@\n> > &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;runtime.GC()\n> > &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;log.Printf(\"after &nbsp;GC: bytes = %d footprint = %d\",\n> > runtime.MemStats.HeapAlloc, runtime.MemStats.Sys)\n> > &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}\n> > - &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var delay int64 = 60 * 1e9 // by default, try every 60s\n> > + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var delay int64 = (*indexDelaySeconds) * 1e9 // convert to\n> > nanoseconds\n> > &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if *testDir != \"\" {\n> > &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// in test mode, try once a second for fast startup\n> > &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;delay = 1 * 1e9\n> > &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}\n> > + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if delay <= 0 {\n> > + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if *verbose {\n> > + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; log.Printf(\"indexing disabled; exiting\n> > indexer\")\n> > + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n> > + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return\n> > + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n> > &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;time.Sleep(delay)\n> > &nbsp; &nbsp; &nbsp; &nbsp;}\n> > &nbsp;}\n> >\n> >\n> >",
			"disapproval": false,
			"date": "2011-05-03 04:44:59.843010",
			"approval": false
		},
		{
			"sender": "markhkamp@refola.com",
			"recipients": [
				"markhkamp@refola.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, rsc),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-04-30 06:57:26.762199",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"markhkamp@refola.com",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "adding gri",
			"disapproval": false,
			"date": "2011-04-30 17:27:27.459805",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Thanks for doing this.\n\nI have an alternative (but similar) CL sent out:\nhttp://codereview.appspot.com/4444083\n\nIt will provide you with the same functionality.\n- Robert\n\nOn Fri, Apr 29, 2011 at 11:57 PM,  <markhkamp@refola.com> wrote:\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com,\n> rsc),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> cmd/godoc: added indexdelay flag to control when or if indexing starts.\n>\n> The flag defaults to 60 (seconds), leaving current use unchanged. If set\n> <= 0, indexing is disabled.\n> Fixes issue 1647.\n>\n> Please review this at http://codereview.appspot.com/4439083/\n>\n> Affected files:\n> \u00a0M src/cmd/godoc/godoc.go\n>\n>\n> Index: src/cmd/godoc/godoc.go\n> ===================================================================\n> --- a/src/cmd/godoc/godoc.go\n> +++ b/src/cmd/godoc/godoc.go\n> @@ -67,6 +67,9 @@\n> \u00a0 \u00a0 \u00a0 \u00a0maxResults \u00a0 \u00a0 = flag.Int(\"maxresults\", 10000, \"maximum number of\n> full text search results shown\")\n> \u00a0 \u00a0 \u00a0 \u00a0templateDir \u00a0 \u00a0= flag.String(\"templates\", \"\", \"directory containing\n> alternate template files\")\n>\n> + \u00a0 \u00a0 \u00a0 // indexing\n> + \u00a0 \u00a0 \u00a0 indexDelaySeconds = flag.Int64(\"indexdelay\", 60, \"number of seconds\n> to wait between index updates; <= 0 to disable indexing\")\n> +\n> \u00a0 \u00a0 \u00a0 \u00a0// file system mapping\n> \u00a0 \u00a0 \u00a0 \u00a0fsMap \u00a0 \u00a0 \u00a0Mapping // user-defined mapping\n> \u00a0 \u00a0 \u00a0 \u00a0fsTree \u00a0 \u00a0 RWValue // *Directory tree of packages, updated with each\n> sync\n> @@ -1178,7 +1181,11 @@\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// The index is older than the latest file system change\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// under godoc's observation. Indexing may be in progress\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// or start shortly (see indexer()).\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 result.Alert = \"Indexing in progress: result may be\n> inaccurate\"\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if *indexDelaySeconds > 0 {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 result.Alert = \"Indexing in progress: result may be\n> inaccurate\"\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 } else {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 result.Alert = \"Indexing disabled: results are not\n> available\"\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n> \u00a0 \u00a0 \u00a0 \u00a0}\n>\n> \u00a0 \u00a0 \u00a0 \u00a0return\n> @@ -1278,11 +1285,17 @@\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime.GC()\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0log.Printf(\"after \u00a0GC: bytes = %d footprint = %d\",\n> runtime.MemStats.HeapAlloc, runtime.MemStats.Sys)\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 var delay int64 = 60 * 1e9 // by default, try every 60s\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 var delay int64 = (*indexDelaySeconds) * 1e9 // convert to\n> nanoseconds\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if *testDir != \"\" {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// in test mode, try once a second for fast startup\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0delay = 1 * 1e9\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if delay <= 0 {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if *verbose {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Printf(\"indexing disabled; exiting\n> indexer\")\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0time.Sleep(delay)\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0}\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-05-02 18:16:02.216355",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Please abandon this. See CL 4444083. Thanks.\n- Robert\n\nOn Fri, Apr 29, 2011 at 11:57 PM,  <markhkamp@refola.com> wrote:\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com,\n> rsc),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> cmd/godoc: added indexdelay flag to control when or if indexing starts.\n>\n> The flag defaults to 60 (seconds), leaving current use unchanged. If set\n> <= 0, indexing is disabled.\n> Fixes issue 1647.\n>\n> Please review this at http://codereview.appspot.com/4439083/\n>\n> Affected files:\n> \u00a0M src/cmd/godoc/godoc.go\n>\n>\n> Index: src/cmd/godoc/godoc.go\n> ===================================================================\n> --- a/src/cmd/godoc/godoc.go\n> +++ b/src/cmd/godoc/godoc.go\n> @@ -67,6 +67,9 @@\n> \u00a0 \u00a0 \u00a0 \u00a0maxResults \u00a0 \u00a0 = flag.Int(\"maxresults\", 10000, \"maximum number of\n> full text search results shown\")\n> \u00a0 \u00a0 \u00a0 \u00a0templateDir \u00a0 \u00a0= flag.String(\"templates\", \"\", \"directory containing\n> alternate template files\")\n>\n> + \u00a0 \u00a0 \u00a0 // indexing\n> + \u00a0 \u00a0 \u00a0 indexDelaySeconds = flag.Int64(\"indexdelay\", 60, \"number of seconds\n> to wait between index updates; <= 0 to disable indexing\")\n> +\n> \u00a0 \u00a0 \u00a0 \u00a0// file system mapping\n> \u00a0 \u00a0 \u00a0 \u00a0fsMap \u00a0 \u00a0 \u00a0Mapping // user-defined mapping\n> \u00a0 \u00a0 \u00a0 \u00a0fsTree \u00a0 \u00a0 RWValue // *Directory tree of packages, updated with each\n> sync\n> @@ -1178,7 +1181,11 @@\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// The index is older than the latest file system change\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// under godoc's observation. Indexing may be in progress\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// or start shortly (see indexer()).\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 result.Alert = \"Indexing in progress: result may be\n> inaccurate\"\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if *indexDelaySeconds > 0 {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 result.Alert = \"Indexing in progress: result may be\n> inaccurate\"\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 } else {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 result.Alert = \"Indexing disabled: results are not\n> available\"\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n> \u00a0 \u00a0 \u00a0 \u00a0}\n>\n> \u00a0 \u00a0 \u00a0 \u00a0return\n> @@ -1278,11 +1285,17 @@\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtime.GC()\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0log.Printf(\"after \u00a0GC: bytes = %d footprint = %d\",\n> runtime.MemStats.HeapAlloc, runtime.MemStats.Sys)\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 var delay int64 = 60 * 1e9 // by default, try every 60s\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 var delay int64 = (*indexDelaySeconds) * 1e9 // convert to\n> nanoseconds\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if *testDir != \"\" {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// in test mode, try once a second for fast startup\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0delay = 1 * 1e9\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if delay <= 0 {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if *verbose {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Printf(\"indexing disabled; exiting\n> indexer\")\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0time.Sleep(delay)\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0}\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-05-02 20:29:30.296611",
			"approval": false
		}
	],
	"owner_email": "markhkamp@refola.com",
	"private": false,
	"base_url": "",
	"owner": "refola",
	"subject": "code review 4439083: cmd/godoc: added indexdelay flag to control when or if ...",
	"created": "2011-04-30 06:45:00.009462",
	"patchsets": [
		1,
		2001,
		6001
	],
	"modified": "2011-05-02 20:29:30.296611",
	"closed": false,
	"issue": 4439083
}