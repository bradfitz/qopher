{
	"description": "go spec: receiver, parameter, and result names must always be unique\n\nFixes issue 4450.",
	"cc": [
		"rsc@golang.org",
		"iant@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, iant@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-29 19:48:03.356570",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, iant@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-11-27 21:50:44.991190",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nFor the review log, 6g already rejects every one of these cases EXCEPT type T2:\n\ntype T interface {\n    F1(i int) (i int)\n    F2(i, i int)\n    F3() (i, i int)\n}\n\ntype T1 func(i, i int)\ntype T2 func(i int) (i int)\ntype T3 func() (i, i int) \n\ntype R struct { }\n\nfunc (i *R) F1(i int) {}\nfunc (i *R) F2() (i int) {}\nfunc (i *R) F3(j int) (j int) {}\n\nfunc F1(i, i int) {}\nfunc F2(i int) (i int) {}\nfunc F3() (i, i int) {}\n\nso the T2 case is the only possible backwards incompatibility compared to Go 1.0, and it is rare enough that we're considering it a bug.",
			"disapproval": false,
			"date": "2012-11-29 20:04:57.960040",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=751e8610bd5d ***\n\ngo spec: receiver, parameter, and result names must always be unique\n\nFixes issue 4450.\n\nR=rsc, iant\nCC=golang-dev\nhttps://codereview.appspot.com/6845104",
			"disapproval": false,
			"date": "2012-11-29 22:47:52.052970",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6845104: go spec: receiver, parameter, and result names must alw...",
	"created": "2012-11-27 21:49:32.349780",
	"patchsets": [
		1,
		2001,
		5001,
		9001,
		9002,
		5002,
		5004
	],
	"modified": "2012-11-29 22:47:53.648860",
	"closed": true,
	"issue": 6845104
}