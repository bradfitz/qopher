{
	"description": "cmd/6g: fix componentgen for funarg structs.\n\nFixes issue 4518.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-12-11 07:33:14.531470",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-11 21:36:56.519390",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Sorry, I meant: I can add a test with your example but it makes be\r\n> unhappy that I can't produce an example that doesn't use the type switch\r\n> which looks like noise.\r\n\r\nI need to look more carefully at the code so don't read too much into\r\nthis but...\r\nI thought the type switch was helping by creating a temporary on the\r\nstack that turned out to registerize perfectly, so that there was\r\nsomething for stack frame compaction to reclaim.\r\n\r\nWill look at the code you sent a bit later.\r\n\r\nThanks.\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-12-11 22:16:39.126980",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This CL will need an appropriate test first. rsc's example looks fine but I tried reproducing using code like:\n\nvar seven, thirteen = 7, 13\n\nfunc F(a interface{}) (*int, *int) {\n\tDontInlineMe()\n      switch a.(type) {\n      case nil:\n      case int:\n            return &seven, &thirteen\n      }\n      panic(\"unreachable\")\n}\n\ntype T int\n\nfunc Bogus1() (*int, *int)                    { return F(5) }\nfunc Bogus2(a interface{}) (*int, *int)       { return F(a) }\nfunc (t T) Bogus3() (*int, *int)              { return F(23) }\nfunc (t T) Bogus4(a interface{}) (*int, *int) { return F(56) }\n\nand couldn't reproduce the bug there. The bug happens when the generated code for return F(...) is a direct assignment of the funarg struct.",
			"disapproval": false,
			"date": "2012-12-11 07:34:49.331060",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't fully understand your mail. Are you saying the CL breaks the example you posted?\n\nhttps://codereview.appspot.com/6932045/diff/3002/src/cmd/6g/cgen.c\nFile src/cmd/6g/cgen.c (right):\n\nhttps://codereview.appspot.com/6932045/diff/3002/src/cmd/6g/cgen.c#newcode1635\nsrc/cmd/6g/cgen.c:1635: // funarg structs may not begin at offset zero.\nDoes this work?\n\nI was expecting that the problem had something to do with the stack compaction and that the fix would be there. That is, my guess was that the offset was correct here but then was not adjusted properly during stack compaction.",
			"disapproval": false,
			"date": "2012-12-11 16:38:24.904870",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/12/11 16:38:24, rsc wrote:\n> I don't fully understand your mail. Are you saying the CL breaks the example you\n> posted?\n\nSorry, I meant: I can add a test with your example but it makes be unhappy that I can't produce an example that doesn't use the type switch which looks like noise.\n\nI'm pretty sure there is a smaller snippet that reproduces the situation.\n\n> \n> https://codereview.appspot.com/6932045/diff/3002/src/cmd/6g/cgen.c\n> File src/cmd/6g/cgen.c (right):\n> \n> https://codereview.appspot.com/6932045/diff/3002/src/cmd/6g/cgen.c#newcode1635\n> src/cmd/6g/cgen.c:1635: // funarg structs may not begin at offset zero.\n> Does this work?\n> \n> I was expecting that the problem had something to do with the stack compaction\n> and that the fix would be there. That is, my guess was that the offset was\n> correct here but then was not adjusted properly during stack compaction.\n\nThe nodarg function is quite clear about the fact that the width field in arguments is their offset wrt the first function arguments. So given a STRUCT that is also a funarg, xoffset + width of a field is wrong.",
			"disapproval": false,
			"date": "2012-12-11 21:31:47.306700",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Any opinion now?",
			"disapproval": false,
			"date": "2012-12-14 22:35:11.513380",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nIt makes sense to me now. I was assuming the offset change was due to the stack compaction, but it was due to recording the FP offset instead of the SP offset in the funarg node, which is what you're now accounting for.",
			"disapproval": false,
			"date": "2012-12-17 14:56:09.902450",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=0f491e663a44 ***\n\ncmd/6g: fix componentgen for funarg structs.\n\nFixes issue 4518.\n\nR=golang-dev, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/6932045",
			"disapproval": false,
			"date": "2012-12-17 21:37:55.374060",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 6932045: cmd/6g: fix componentgen for funarg structs.",
	"created": "2012-12-11 07:32:59.805400",
	"patchsets": [
		1,
		2001,
		3002,
		10001,
		12002
	],
	"modified": "2012-12-20 23:24:17.385060",
	"closed": true,
	"issue": 6932045
}