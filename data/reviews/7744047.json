{
	"description": "runtime: scan the type of an interface value",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: rsc),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-03-15 18:44:41.761190",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-03-15 18:50:15.376350",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Just curious: are changes like this not testable with a minimal go program\r\nand runtime.GC and runtime.SetFinalizer?\r\n\r\nOn Fri, Mar 15, 2013 at 11:44 AM, <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com (cc: rsc),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> runtime: scan the type of an interface value\r\n>\r\n> Please review this at https://codereview.appspot.**com/7744047/<https://codereview.appspot.com/7744047/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/runtime/mgc0.c\r\n>\r\n>\r\n> Index: src/pkg/runtime/mgc0.c\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/runtime/mgc0.c\r\n> +++ b/src/pkg/runtime/mgc0.c\r\n> @@ -754,11 +754,22 @@\r\n>                 case GC_EFACE:\r\n>                         eface = (Eface*)(stack_top.b + pc[1]);\r\n>                         pc += 2;\r\n> -                       if(eface->type != nil && (eface->data >=\r\n> arena_start && eface->data < arena_used)) {\r\n> -                               t = eface->type;\r\n> +                       if(eface->type == nil)\r\n> +                               continue;\r\n> +\r\n> +                       // eface->type\r\n> +                       t = eface->type;\r\n> +                       if((void*)t >= arena_start && (void*)t <\r\n> arena_used) {\r\n> +                               *ptrbufpos++ = (PtrTarget){t, 0};\r\n> +                               if(ptrbufpos == ptrbuf_end)\r\n> +                                       flushptrbuf(ptrbuf, &ptrbufpos,\r\n> &wp, &wbuf, &nobj);\r\n> +                       }\r\n> +\r\n> +                       // eface->data\r\n> +                       if(eface->data >= arena_start && eface->data <\r\n> arena_used) {\r\n>                                 if(t->size <= sizeof(void*)) {\r\n>                                         if((t->kind & KindNoPointers))\r\n> -                                               break;\r\n> +                                               continue;\r\n>\r\n>                                         obj = eface->data;\r\n>                                         if((t->kind & ~KindNoPointers) ==\r\n> KindPtr)\r\n> @@ -774,7 +785,7 @@\r\n>                         iface = (Iface*)(stack_top.b + pc[1]);\r\n>                         pc += 2;\r\n>                         if(iface->tab == nil)\r\n> -                               break;\r\n> +                               continue;\r\n>\r\n>                         // iface->tab\r\n>                         if((void*)iface->tab >= arena_start &&\r\n> (void*)iface->tab < arena_used) {\r\n> @@ -788,7 +799,7 @@\r\n>                                 t = iface->tab->type;\r\n>                                 if(t->size <= sizeof(void*)) {\r\n>                                         if((t->kind & KindNoPointers))\r\n> -                                               break;\r\n> +                                               continue;\r\n>\r\n>                                         obj = iface->data;\r\n>                                         if((t->kind & ~KindNoPointers) ==\r\n> KindPtr)\r\n> @@ -815,9 +826,8 @@\r\n>                 case GC_END:\r\n>                         if(--stack_top.count != 0) {\r\n>                                 // Next iteration of a loop if possible.\r\n> -                               elemsize = stack_top.elemsize;\r\n> -                               stack_top.b += elemsize;\r\n> -                               if(stack_top.b + elemsize <=\r\n> end_b+PtrSize) {\r\n> +                               stack_top.b += stack_top.elemsize;\r\n> +                               if(stack_top.b + stack_top.elemsize <=\r\n> end_b+PtrSize) {\r\n>                                         pc = stack_top.loop_or_ret;\r\n>                                         continue;\r\n>                                 }\r\n> @@ -945,7 +955,7 @@\r\n>                         *objbufpos++ = (Obj){obj, size, objti};\r\n>                         if(objbufpos == objbuf_end)\r\n>                                 flushobjbuf(objbuf, &objbufpos, &wp,\r\n> &wbuf, &nobj);\r\n> -                       break;\r\n> +                       continue;\r\n>\r\n>                 case GC_CHAN:\r\n>                         // There are no heap pointers in struct Hchan,\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-15 19:16:57.920390",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'll add a good test in the reflect package as part of the work I'm doing.\r\n",
			"disapproval": false,
			"date": "2013-03-15 19:20:16.558330",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/15 18:50:15, rsc wrote:\n> LGTM\n\n\"hg submit 7744047\" doesn't seem to be working on my machine.",
			"disapproval": false,
			"date": "2013-03-15 19:35:58.041110",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Mar 15, 2013 at 3:35 PM, <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n\r\n> On 2013/03/15 18:50:15, rsc wrote:\r\n>\r\n>> LGTM\r\n>>\r\n>\r\n> \"hg submit 7744047\" doesn't seem to be working on my machine.\r\n>\r\n\r\nhg commands seem incredibly slow today. i don't know which server is to\r\nblame.\r\n",
			"disapproval": false,
			"date": "2013-03-15 19:43:25.510950",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=0bb6c0d7391a ***\n\nruntime: scan the type of an interface value\n\nR=golang-dev, rsc, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/7744047\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2013-03-15 20:07:56.042630",
			"approval": false
		}
	],
	"owner_email": "0xE2.0x9A.0x9B@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "atom",
	"subject": "code review 7744047: runtime: scan the type of an interface value",
	"created": "2013-03-15 18:44:36.003640",
	"patchsets": [
		1,
		4001,
		7001,
		11001,
		15001,
		9002
	],
	"modified": "2013-03-16 07:11:39.592920",
	"closed": true,
	"issue": 7744047
}