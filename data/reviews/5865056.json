{
	"description": "godoc: use shorter titles for tabs\n\nIn a browser with many open tabs, the tab titles become short\nand uninformative because they all start with the same prefix\n(\"Package \", \"Directory \", etc.).\n\nPermit use of shorter tab titles that start with the relevant\ninformation first.\n\nFixes issue 3365.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-03-21 17:33:22.384060",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think servePage needs more positional parameters.\n\nOn Wed, Mar 21, 2012 at 10:33 AM, <gri@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://code.google.com/p/go\n>\n>\n> Description:\n> godoc: use shorter titles for tabs\n>\n> In a browser with many open tabs, the tab titles become short\n> and uninformative because they all start with the same prefix\n> (\"Package \", \"Directory \", etc.).\n>\n> Permit use of shorter tab titles that start with the relevant\n> information first.\n>\n> Fixes issue 3365.\n>\n> Please review this at http://codereview.appspot.com/**5865056/<http://codereview.appspot.com/5865056/>\n>\n> Affected files:\n>  M lib/godoc/godoc.html\n>  M src/cmd/godoc/codewalk.go\n>  M src/cmd/godoc/godoc.go\n>  M src/cmd/godoc/main.go\n>\n>\n> Index: lib/godoc/godoc.html\n> ==============================**==============================**=======\n> --- a/lib/godoc/godoc.html\n> +++ b/lib/godoc/godoc.html\n> @@ -2,7 +2,7 @@\n>  <html>\n>  <head>\n>  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n> -{{with .Title}}\n> +{{with .Tabtitle}}\n>   <title>{{html .}} - The Go Programming Language</title>\n>  {{else}}\n>   <title>The Go Programming Language</title>\n> Index: src/cmd/godoc/codewalk.go\n> ==============================**==============================**=======\n> --- a/src/cmd/godoc/codewalk.go\n> +++ b/src/cmd/godoc/codewalk.go\n> @@ -69,7 +69,7 @@\n>        }\n>\n>        b := applyTemplate(codewalkHTML, \"codewalk\", cw)\n> -       servePage(w, \"Codewalk: \"+cw.Title, \"\", \"\", b)\n> +       servePage(w, cw.Title, \"Codewalk: \"+cw.Title, \"\", \"\", b)\n>  }\n>\n>  // A Codewalk represents a single codewalk read from an XML file.\n> @@ -200,7 +200,7 @@\n>        }\n>\n>        b := applyTemplate(codewalkdirHTML, \"codewalkdir\", v)\n> -       servePage(w, \"Codewalks\", \"\", \"\", b)\n> +       servePage(w, \"\", \"Codewalks\", \"\", \"\", b)\n>  }\n>\n>  // codewalkFileprint serves requests with ?fileprint=f&lo=lo&hi=hi.\n> Index: src/cmd/godoc/godoc.go\n> ==============================**==============================**=======\n> --- a/src/cmd/godoc/godoc.go\n> +++ b/src/cmd/godoc/godoc.go\n> @@ -546,8 +546,12 @@\n>  // ------------------------------**------------------------------**\n> ----------------\n>  // Generic HTML wrapper\n>\n> -func servePage(w http.ResponseWriter, title, subtitle, query string,\n> content []byte) {\n> +func servePage(w http.ResponseWriter, tabtitle, title, subtitle, query\n> string, content []byte) {\n> +       if tabtitle == \"\" {\n> +               tabtitle = title\n> +       }\n>        d := struct {\n> +               Tabtitle  string\n>                Title     string\n>                Subtitle  string\n>                SearchBox bool\n> @@ -556,6 +560,7 @@\n>                Menu      []byte\n>                Content   []byte\n>        }{\n> +               tabtitle,\n>                title,\n>                subtitle,\n>                *indexEnabled,\n> @@ -630,7 +635,7 @@\n>                src = buf.Bytes()\n>        }\n>\n> -       servePage(w, meta.Title, meta.Subtitle, \"\", src)\n> +       servePage(w, \"\", meta.Title, meta.Subtitle, \"\", src)\n>  }\n>\n>  func applyTemplate(t *template.Template, name string, data interface{})\n> []byte {\n> @@ -666,7 +671,7 @@\n>        FormatText(&buf, src, 1, pathpkg.Ext(abspath) == \".go\",\n> r.FormValue(\"h\"), rangeSelection(r.FormValue(\"s\"**)))\n>        buf.WriteString(\"</pre>\")\n>\n> -       servePage(w, title+\" \"+relpath, \"\", \"\", buf.Bytes())\n> +       servePage(w, relpath, title+\" \"+relpath, \"\", \"\", buf.Bytes())\n>  }\n>\n>  func serveDirectory(w http.ResponseWriter, r *http.Request, abspath,\n> relpath string) {\n> @@ -681,7 +686,7 @@\n>        }\n>\n>        contents := applyTemplate(dirlistHTML, \"dirlistHTML\", list)\n> -       servePage(w, \"Directory \"+relpath, \"\", \"\", contents)\n> +       servePage(w, relpath, \"Directory \"+relpath, \"\", \"\", contents)\n>  }\n>\n>  func serveFile(w http.ResponseWriter, r *http.Request) {\n> @@ -1073,30 +1078,33 @@\n>                return\n>        }\n>\n> -       var title, subtitle string\n> +       var tabtitle, title, subtitle string\n>        switch {\n>        case info.PAst != nil:\n> -               title = \"Package \" + info.PAst.Name.Name\n> +               tabtitle = info.PAst.Name.Name\n> +               title = \"Package \" + tabtitle\n>        case info.PDoc != nil:\n> -               switch {\n> -               case info.IsPkg:\n> -                       title = \"Package \" + info.PDoc.Name\n> -               case info.PDoc.Name == fakePkgName:\n> +               if info.PDoc.Name == fakePkgName {\n>                        // assume that the directory name is the command\n> name\n> -                       _, pkgname := pathpkg.Split(relpath)\n> -                       title = \"Command \" + pkgname\n> -               default:\n> -                       title = \"Command \" + info.PDoc.Name\n> +                       _, tabtitle = pathpkg.Split(relpath)\n> +               } else {\n> +                       tabtitle = info.PDoc.Name\n> +               }\n> +               if info.IsPkg {\n> +                       title = \"Package \" + tabtitle\n> +               } else {\n> +                       title = \"Command \" + tabtitle\n>                }\n>        default:\n> -               title = \"Directory \" + info.Dirname\n> +               tabtitle = info.Dirname\n> +               title = \"Directory \" + tabtitle\n>                if *showTimestamps {\n>                        subtitle = \"Last update: \" + info.DirTime.String()\n>                }\n>        }\n>\n>        contents := applyTemplate(packageHTML, \"packageHTML\", info)\n> -       servePage(w, title, subtitle, \"\", contents)\n> +       servePage(w, tabtitle, title, subtitle, \"\", contents)\n>  }\n>\n>  // ------------------------------**------------------------------**\n> ----------------\n> @@ -1186,7 +1194,7 @@\n>        }\n>\n>        contents := applyTemplate(searchHTML, \"searchHTML\", result)\n> -       servePage(w, title, \"\", query, contents)\n> +       servePage(w, query, title, \"\", query, contents)\n>  }\n>\n>  // ------------------------------**------------------------------**\n> ----------------\n> Index: src/cmd/godoc/main.go\n> ==============================**==============================**=======\n> --- a/src/cmd/godoc/main.go\n> +++ b/src/cmd/godoc/main.go\n> @@ -73,7 +73,7 @@\n>  func serveError(w http.ResponseWriter, r *http.Request, relpath string,\n> err error) {\n>        contents := applyTemplate(errorHTML, \"errorHTML\", err) // err may\n> contain an absolute path!\n>        w.WriteHeader(http.**StatusNotFound)\n> -       servePage(w, \"File \"+relpath, \"\", \"\", contents)\n> +       servePage(w, relpath, \"File \"+relpath, \"\", \"\", contents)\n>  }\n>\n>  func usage() {\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-03-21 17:35:52.055297",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nSpecial-cased top-level package and command pages. Not sure it's worth it.\n- gri\n\nOn Wed, Mar 21, 2012 at 10:53 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n> I patched this in and am clicking around. \u00a0Overall, very nice.\n>\n> Clicking \"Packages\" at the top, though, results in a tabtitle of \"/src/pkg -\n> The Go Pr...\" which is a bit weird. \u00a0I'd expect something like \"Packages -\n> The Go Pr...\"\n>\n>\n> On Wed, Mar 21, 2012 at 10:33 AM, <gri@golang.org> wrote:\n>>\n>> Reviewers: golang-dev_googlegroups.com,\n>>\n>> Message:\n>> Hello golang-dev@googlegroups.com,\n>>\n>> I'd like you to review this change to\n>> https://code.google.com/p/go\n>>\n>>\n>> Description:\n>> godoc: use shorter titles for tabs\n>>\n>> In a browser with many open tabs, the tab titles become short\n>> and uninformative because they all start with the same prefix\n>> (\"Package \", \"Directory \", etc.).\n>>\n>> Permit use of shorter tab titles that start with the relevant\n>> information first.\n>>\n>> Fixes issue 3365.\n>>\n>> Please review this at http://codereview.appspot.com/5865056/\n>>\n>> Affected files:\n>> \u00a0M lib/godoc/godoc.html\n>> \u00a0M src/cmd/godoc/codewalk.go\n>> \u00a0M src/cmd/godoc/godoc.go\n>> \u00a0M src/cmd/godoc/main.go\n>>\n>>\n>> Index: lib/godoc/godoc.html\n>> ===================================================================\n>> --- a/lib/godoc/godoc.html\n>> +++ b/lib/godoc/godoc.html\n>> @@ -2,7 +2,7 @@\n>> \u00a0<html>\n>> \u00a0<head>\n>> \u00a0<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n>> -{{with .Title}}\n>> +{{with .Tabtitle}}\n>> \u00a0 <title>{{html .}} - The Go Programming Language</title>\n>> \u00a0{{else}}\n>> \u00a0 <title>The Go Programming Language</title>\n>> Index: src/cmd/godoc/codewalk.go\n>> ===================================================================\n>> --- a/src/cmd/godoc/codewalk.go\n>> +++ b/src/cmd/godoc/codewalk.go\n>> @@ -69,7 +69,7 @@\n>> \u00a0 \u00a0 \u00a0 \u00a0}\n>>\n>> \u00a0 \u00a0 \u00a0 \u00a0b := applyTemplate(codewalkHTML, \"codewalk\", cw)\n>> - \u00a0 \u00a0 \u00a0 servePage(w, \"Codewalk: \"+cw.Title, \"\", \"\", b)\n>> + \u00a0 \u00a0 \u00a0 servePage(w, cw.Title, \"Codewalk: \"+cw.Title, \"\", \"\", b)\n>> \u00a0}\n>>\n>> \u00a0// A Codewalk represents a single codewalk read from an XML file.\n>> @@ -200,7 +200,7 @@\n>> \u00a0 \u00a0 \u00a0 \u00a0}\n>>\n>> \u00a0 \u00a0 \u00a0 \u00a0b := applyTemplate(codewalkdirHTML, \"codewalkdir\", v)\n>> - \u00a0 \u00a0 \u00a0 servePage(w, \"Codewalks\", \"\", \"\", b)\n>> + \u00a0 \u00a0 \u00a0 servePage(w, \"\", \"Codewalks\", \"\", \"\", b)\n>> \u00a0}\n>>\n>> \u00a0// codewalkFileprint serves requests with ?fileprint=f&lo=lo&hi=hi.\n>> Index: src/cmd/godoc/godoc.go\n>> ===================================================================\n>> --- a/src/cmd/godoc/godoc.go\n>> +++ b/src/cmd/godoc/godoc.go\n>> @@ -546,8 +546,12 @@\n>> \u00a0//\n>> ----------------------------------------------------------------------------\n>> \u00a0// Generic HTML wrapper\n>>\n>> -func servePage(w http.ResponseWriter, title, subtitle, query string,\n>> content []byte) {\n>> +func servePage(w http.ResponseWriter, tabtitle, title, subtitle, query\n>> string, content []byte) {\n>> + \u00a0 \u00a0 \u00a0 if tabtitle == \"\" {\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 tabtitle = title\n>> + \u00a0 \u00a0 \u00a0 }\n>> \u00a0 \u00a0 \u00a0 \u00a0d := struct {\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Tabtitle \u00a0string\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Title \u00a0 \u00a0 string\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Subtitle \u00a0string\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0SearchBox bool\n>> @@ -556,6 +560,7 @@\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Menu \u00a0 \u00a0 \u00a0[]byte\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Content \u00a0 []byte\n>> \u00a0 \u00a0 \u00a0 \u00a0}{\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 tabtitle,\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0title,\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0subtitle,\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0*indexEnabled,\n>> @@ -630,7 +635,7 @@\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0src = buf.Bytes()\n>> \u00a0 \u00a0 \u00a0 \u00a0}\n>>\n>> - \u00a0 \u00a0 \u00a0 servePage(w, meta.Title, meta.Subtitle, \"\", src)\n>> + \u00a0 \u00a0 \u00a0 servePage(w, \"\", meta.Title, meta.Subtitle, \"\", src)\n>> \u00a0}\n>>\n>> \u00a0func applyTemplate(t *template.Template, name string, data interface{})\n>> []byte {\n>> @@ -666,7 +671,7 @@\n>> \u00a0 \u00a0 \u00a0 \u00a0FormatText(&buf, src, 1, pathpkg.Ext(abspath) == \".go\",\n>> r.FormValue(\"h\"), rangeSelection(r.FormValue(\"s\")))\n>> \u00a0 \u00a0 \u00a0 \u00a0buf.WriteString(\"</pre>\")\n>>\n>> - \u00a0 \u00a0 \u00a0 servePage(w, title+\" \"+relpath, \"\", \"\", buf.Bytes())\n>> + \u00a0 \u00a0 \u00a0 servePage(w, relpath, title+\" \"+relpath, \"\", \"\", buf.Bytes())\n>> \u00a0}\n>>\n>> \u00a0func serveDirectory(w http.ResponseWriter, r *http.Request, abspath,\n>> relpath string) {\n>> @@ -681,7 +686,7 @@\n>> \u00a0 \u00a0 \u00a0 \u00a0}\n>>\n>> \u00a0 \u00a0 \u00a0 \u00a0contents := applyTemplate(dirlistHTML, \"dirlistHTML\", list)\n>> - \u00a0 \u00a0 \u00a0 servePage(w, \"Directory \"+relpath, \"\", \"\", contents)\n>> + \u00a0 \u00a0 \u00a0 servePage(w, relpath, \"Directory \"+relpath, \"\", \"\", contents)\n>> \u00a0}\n>>\n>> \u00a0func serveFile(w http.ResponseWriter, r *http.Request) {\n>> @@ -1073,30 +1078,33 @@\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return\n>> \u00a0 \u00a0 \u00a0 \u00a0}\n>>\n>> - \u00a0 \u00a0 \u00a0 var title, subtitle string\n>> + \u00a0 \u00a0 \u00a0 var tabtitle, title, subtitle string\n>> \u00a0 \u00a0 \u00a0 \u00a0switch {\n>> \u00a0 \u00a0 \u00a0 \u00a0case info.PAst != nil:\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 title = \"Package \" + info.PAst.Name.Name\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 tabtitle = info.PAst.Name.Name\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 title = \"Package \" + tabtitle\n>> \u00a0 \u00a0 \u00a0 \u00a0case info.PDoc != nil:\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 switch {\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 case info.IsPkg:\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 title = \"Package \" + info.PDoc.Name\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 case info.PDoc.Name == fakePkgName:\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if info.PDoc.Name == fakePkgName {\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// assume that the directory name is the command\n>> name\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 _, pkgname := pathpkg.Split(relpath)\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 title = \"Command \" + pkgname\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 default:\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 title = \"Command \" + info.PDoc.Name\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 _, tabtitle = pathpkg.Split(relpath)\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 } else {\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 tabtitle = info.PDoc.Name\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if info.IsPkg {\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 title = \"Package \" + tabtitle\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 } else {\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 title = \"Command \" + tabtitle\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n>> \u00a0 \u00a0 \u00a0 \u00a0default:\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 title = \"Directory \" + info.Dirname\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 tabtitle = info.Dirname\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 title = \"Directory \" + tabtitle\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if *showTimestamps {\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0subtitle = \"Last update: \" + info.DirTime.String()\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n>> \u00a0 \u00a0 \u00a0 \u00a0}\n>>\n>> \u00a0 \u00a0 \u00a0 \u00a0contents := applyTemplate(packageHTML, \"packageHTML\", info)\n>> - \u00a0 \u00a0 \u00a0 servePage(w, title, subtitle, \"\", contents)\n>> + \u00a0 \u00a0 \u00a0 servePage(w, tabtitle, title, subtitle, \"\", contents)\n>> \u00a0}\n>>\n>> \u00a0//\n>> ----------------------------------------------------------------------------\n>> @@ -1186,7 +1194,7 @@\n>> \u00a0 \u00a0 \u00a0 \u00a0}\n>>\n>> \u00a0 \u00a0 \u00a0 \u00a0contents := applyTemplate(searchHTML, \"searchHTML\", result)\n>> - \u00a0 \u00a0 \u00a0 servePage(w, title, \"\", query, contents)\n>> + \u00a0 \u00a0 \u00a0 servePage(w, query, title, \"\", query, contents)\n>> \u00a0}\n>>\n>> \u00a0//\n>> ----------------------------------------------------------------------------\n>> Index: src/cmd/godoc/main.go\n>> ===================================================================\n>> --- a/src/cmd/godoc/main.go\n>> +++ b/src/cmd/godoc/main.go\n>> @@ -73,7 +73,7 @@\n>> \u00a0func serveError(w http.ResponseWriter, r *http.Request, relpath string,\n>> err error) {\n>> \u00a0 \u00a0 \u00a0 \u00a0contents := applyTemplate(errorHTML, \"errorHTML\", err) // err may\n>> contain an absolute path!\n>> \u00a0 \u00a0 \u00a0 \u00a0w.WriteHeader(http.StatusNotFound)\n>> - \u00a0 \u00a0 \u00a0 servePage(w, \"File \"+relpath, \"\", \"\", contents)\n>> + \u00a0 \u00a0 \u00a0 servePage(w, relpath, \"File \"+relpath, \"\", \"\", contents)\n>> \u00a0}\n>>\n>> \u00a0func usage() {\n>>\n>>\n>\n",
			"disapproval": false,
			"date": "2012-03-21 18:05:51.788747",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOr just \"Packages\" and \"Commands\".  Either way.\n\nOn Wed, Mar 21, 2012 at 11:05 AM, Robert Griesemer <gri@golang.org> wrote:\n\n> PTAL.\n>\n> Special-cased top-level package and command pages. Not sure it's worth it.\n> - gri\n>\n> On Wed, Mar 21, 2012 at 10:53 AM, Brad Fitzpatrick <bradfitz@golang.org>\n> wrote:\n> > I patched this in and am clicking around.  Overall, very nice.\n> >\n> > Clicking \"Packages\" at the top, though, results in a tabtitle of\n> \"/src/pkg -\n> > The Go Pr...\" which is a bit weird.  I'd expect something like \"Packages\n> -\n> > The Go Pr...\"\n> >\n> >\n> > On Wed, Mar 21, 2012 at 10:33 AM, <gri@golang.org> wrote:\n> >>\n> >> Reviewers: golang-dev_googlegroups.com,\n> >>\n> >> Message:\n> >> Hello golang-dev@googlegroups.com,\n> >>\n> >> I'd like you to review this change to\n> >> https://code.google.com/p/go\n> >>\n> >>\n> >> Description:\n> >> godoc: use shorter titles for tabs\n> >>\n> >> In a browser with many open tabs, the tab titles become short\n> >> and uninformative because they all start with the same prefix\n> >> (\"Package \", \"Directory \", etc.).\n> >>\n> >> Permit use of shorter tab titles that start with the relevant\n> >> information first.\n> >>\n> >> Fixes issue 3365.\n> >>\n> >> Please review this at http://codereview.appspot.com/5865056/\n> >>\n> >> Affected files:\n> >>  M lib/godoc/godoc.html\n> >>  M src/cmd/godoc/codewalk.go\n> >>  M src/cmd/godoc/godoc.go\n> >>  M src/cmd/godoc/main.go\n> >>\n> >>\n> >> Index: lib/godoc/godoc.html\n> >> ===================================================================\n> >> --- a/lib/godoc/godoc.html\n> >> +++ b/lib/godoc/godoc.html\n> >> @@ -2,7 +2,7 @@\n> >>  <html>\n> >>  <head>\n> >>  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n> >> -{{with .Title}}\n> >> +{{with .Tabtitle}}\n> >>   <title>{{html .}} - The Go Programming Language</title>\n> >>  {{else}}\n> >>   <title>The Go Programming Language</title>\n> >> Index: src/cmd/godoc/codewalk.go\n> >> ===================================================================\n> >> --- a/src/cmd/godoc/codewalk.go\n> >> +++ b/src/cmd/godoc/codewalk.go\n> >> @@ -69,7 +69,7 @@\n> >>        }\n> >>\n> >>        b := applyTemplate(codewalkHTML, \"codewalk\", cw)\n> >> -       servePage(w, \"Codewalk: \"+cw.Title, \"\", \"\", b)\n> >> +       servePage(w, cw.Title, \"Codewalk: \"+cw.Title, \"\", \"\", b)\n> >>  }\n> >>\n> >>  // A Codewalk represents a single codewalk read from an XML file.\n> >> @@ -200,7 +200,7 @@\n> >>        }\n> >>\n> >>        b := applyTemplate(codewalkdirHTML, \"codewalkdir\", v)\n> >> -       servePage(w, \"Codewalks\", \"\", \"\", b)\n> >> +       servePage(w, \"\", \"Codewalks\", \"\", \"\", b)\n> >>  }\n> >>\n> >>  // codewalkFileprint serves requests with ?fileprint=f&lo=lo&hi=hi.\n> >> Index: src/cmd/godoc/godoc.go\n> >> ===================================================================\n> >> --- a/src/cmd/godoc/godoc.go\n> >> +++ b/src/cmd/godoc/godoc.go\n> >> @@ -546,8 +546,12 @@\n> >>  //\n> >>\n> ----------------------------------------------------------------------------\n> >>  // Generic HTML wrapper\n> >>\n> >> -func servePage(w http.ResponseWriter, title, subtitle, query string,\n> >> content []byte) {\n> >> +func servePage(w http.ResponseWriter, tabtitle, title, subtitle, query\n> >> string, content []byte) {\n> >> +       if tabtitle == \"\" {\n> >> +               tabtitle = title\n> >> +       }\n> >>        d := struct {\n> >> +               Tabtitle  string\n> >>                Title     string\n> >>                Subtitle  string\n> >>                SearchBox bool\n> >> @@ -556,6 +560,7 @@\n> >>                Menu      []byte\n> >>                Content   []byte\n> >>        }{\n> >> +               tabtitle,\n> >>                title,\n> >>                subtitle,\n> >>                *indexEnabled,\n> >> @@ -630,7 +635,7 @@\n> >>                src = buf.Bytes()\n> >>        }\n> >>\n> >> -       servePage(w, meta.Title, meta.Subtitle, \"\", src)\n> >> +       servePage(w, \"\", meta.Title, meta.Subtitle, \"\", src)\n> >>  }\n> >>\n> >>  func applyTemplate(t *template.Template, name string, data interface{})\n> >> []byte {\n> >> @@ -666,7 +671,7 @@\n> >>        FormatText(&buf, src, 1, pathpkg.Ext(abspath) == \".go\",\n> >> r.FormValue(\"h\"), rangeSelection(r.FormValue(\"s\")))\n> >>        buf.WriteString(\"</pre>\")\n> >>\n> >> -       servePage(w, title+\" \"+relpath, \"\", \"\", buf.Bytes())\n> >> +       servePage(w, relpath, title+\" \"+relpath, \"\", \"\", buf.Bytes())\n> >>  }\n> >>\n> >>  func serveDirectory(w http.ResponseWriter, r *http.Request, abspath,\n> >> relpath string) {\n> >> @@ -681,7 +686,7 @@\n> >>        }\n> >>\n> >>        contents := applyTemplate(dirlistHTML, \"dirlistHTML\", list)\n> >> -       servePage(w, \"Directory \"+relpath, \"\", \"\", contents)\n> >> +       servePage(w, relpath, \"Directory \"+relpath, \"\", \"\", contents)\n> >>  }\n> >>\n> >>  func serveFile(w http.ResponseWriter, r *http.Request) {\n> >> @@ -1073,30 +1078,33 @@\n> >>                return\n> >>        }\n> >>\n> >> -       var title, subtitle string\n> >> +       var tabtitle, title, subtitle string\n> >>        switch {\n> >>        case info.PAst != nil:\n> >> -               title = \"Package \" + info.PAst.Name.Name\n> >> +               tabtitle = info.PAst.Name.Name\n> >> +               title = \"Package \" + tabtitle\n> >>        case info.PDoc != nil:\n> >> -               switch {\n> >> -               case info.IsPkg:\n> >> -                       title = \"Package \" + info.PDoc.Name\n> >> -               case info.PDoc.Name == fakePkgName:\n> >> +               if info.PDoc.Name == fakePkgName {\n> >>                        // assume that the directory name is the command\n> >> name\n> >> -                       _, pkgname := pathpkg.Split(relpath)\n> >> -                       title = \"Command \" + pkgname\n> >> -               default:\n> >> -                       title = \"Command \" + info.PDoc.Name\n> >> +                       _, tabtitle = pathpkg.Split(relpath)\n> >> +               } else {\n> >> +                       tabtitle = info.PDoc.Name\n> >> +               }\n> >> +               if info.IsPkg {\n> >> +                       title = \"Package \" + tabtitle\n> >> +               } else {\n> >> +                       title = \"Command \" + tabtitle\n> >>                }\n> >>        default:\n> >> -               title = \"Directory \" + info.Dirname\n> >> +               tabtitle = info.Dirname\n> >> +               title = \"Directory \" + tabtitle\n> >>                if *showTimestamps {\n> >>                        subtitle = \"Last update: \" +\n> info.DirTime.String()\n> >>                }\n> >>        }\n> >>\n> >>        contents := applyTemplate(packageHTML, \"packageHTML\", info)\n> >> -       servePage(w, title, subtitle, \"\", contents)\n> >> +       servePage(w, tabtitle, title, subtitle, \"\", contents)\n> >>  }\n> >>\n> >>  //\n> >>\n> ----------------------------------------------------------------------------\n> >> @@ -1186,7 +1194,7 @@\n> >>        }\n> >>\n> >>        contents := applyTemplate(searchHTML, \"searchHTML\", result)\n> >> -       servePage(w, title, \"\", query, contents)\n> >> +       servePage(w, query, title, \"\", query, contents)\n> >>  }\n> >>\n> >>  //\n> >>\n> ----------------------------------------------------------------------------\n> >> Index: src/cmd/godoc/main.go\n> >> ===================================================================\n> >> --- a/src/cmd/godoc/main.go\n> >> +++ b/src/cmd/godoc/main.go\n> >> @@ -73,7 +73,7 @@\n> >>  func serveError(w http.ResponseWriter, r *http.Request, relpath string,\n> >> err error) {\n> >>        contents := applyTemplate(errorHTML, \"errorHTML\", err) // err may\n> >> contain an absolute path!\n> >>        w.WriteHeader(http.StatusNotFound)\n> >> -       servePage(w, \"File \"+relpath, \"\", \"\", contents)\n> >> +       servePage(w, relpath, \"File \"+relpath, \"\", \"\", contents)\n> >>  }\n> >>\n> >>  func usage() {\n> >>\n> >>\n> >\n>\n",
			"disapproval": false,
			"date": "2012-03-21 18:21:04.950549",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I agree :-)\n\nI want to change it to use a field-indexed struct (instead of setting\nit up inside servePage), but I'd like to do that in a next step, just\nto make it easier to review the changes.\n\n- gri\n\n\nOn Wed, Mar 21, 2012 at 10:35 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n> I think\u00a0servePage needs more positional parameters.\n>\n>\n> On Wed, Mar 21, 2012 at 10:33 AM, <gri@golang.org> wrote:\n>>\n>> Reviewers: golang-dev_googlegroups.com,\n>>\n>> Message:\n>> Hello golang-dev@googlegroups.com,\n>>\n>> I'd like you to review this change to\n>> https://code.google.com/p/go\n>>\n>>\n>> Description:\n>> godoc: use shorter titles for tabs\n>>\n>> In a browser with many open tabs, the tab titles become short\n>> and uninformative because they all start with the same prefix\n>> (\"Package \", \"Directory \", etc.).\n>>\n>> Permit use of shorter tab titles that start with the relevant\n>> information first.\n>>\n>> Fixes issue 3365.\n>>\n>> Please review this at http://codereview.appspot.com/5865056/\n>>\n>> Affected files:\n>> \u00a0M lib/godoc/godoc.html\n>> \u00a0M src/cmd/godoc/codewalk.go\n>> \u00a0M src/cmd/godoc/godoc.go\n>> \u00a0M src/cmd/godoc/main.go\n>>\n>>\n>> Index: lib/godoc/godoc.html\n>> ===================================================================\n>> --- a/lib/godoc/godoc.html\n>> +++ b/lib/godoc/godoc.html\n>> @@ -2,7 +2,7 @@\n>> \u00a0<html>\n>> \u00a0<head>\n>> \u00a0<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n>> -{{with .Title}}\n>> +{{with .Tabtitle}}\n>> \u00a0 <title>{{html .}} - The Go Programming Language</title>\n>> \u00a0{{else}}\n>> \u00a0 <title>The Go Programming Language</title>\n>> Index: src/cmd/godoc/codewalk.go\n>> ===================================================================\n>> --- a/src/cmd/godoc/codewalk.go\n>> +++ b/src/cmd/godoc/codewalk.go\n>> @@ -69,7 +69,7 @@\n>> \u00a0 \u00a0 \u00a0 \u00a0}\n>>\n>> \u00a0 \u00a0 \u00a0 \u00a0b := applyTemplate(codewalkHTML, \"codewalk\", cw)\n>> - \u00a0 \u00a0 \u00a0 servePage(w, \"Codewalk: \"+cw.Title, \"\", \"\", b)\n>> + \u00a0 \u00a0 \u00a0 servePage(w, cw.Title, \"Codewalk: \"+cw.Title, \"\", \"\", b)\n>> \u00a0}\n>>\n>> \u00a0// A Codewalk represents a single codewalk read from an XML file.\n>> @@ -200,7 +200,7 @@\n>> \u00a0 \u00a0 \u00a0 \u00a0}\n>>\n>> \u00a0 \u00a0 \u00a0 \u00a0b := applyTemplate(codewalkdirHTML, \"codewalkdir\", v)\n>> - \u00a0 \u00a0 \u00a0 servePage(w, \"Codewalks\", \"\", \"\", b)\n>> + \u00a0 \u00a0 \u00a0 servePage(w, \"\", \"Codewalks\", \"\", \"\", b)\n>> \u00a0}\n>>\n>> \u00a0// codewalkFileprint serves requests with ?fileprint=f&lo=lo&hi=hi.\n>> Index: src/cmd/godoc/godoc.go\n>> ===================================================================\n>> --- a/src/cmd/godoc/godoc.go\n>> +++ b/src/cmd/godoc/godoc.go\n>> @@ -546,8 +546,12 @@\n>> \u00a0//\n>> ----------------------------------------------------------------------------\n>> \u00a0// Generic HTML wrapper\n>>\n>> -func servePage(w http.ResponseWriter, title, subtitle, query string,\n>> content []byte) {\n>> +func servePage(w http.ResponseWriter, tabtitle, title, subtitle, query\n>> string, content []byte) {\n>> + \u00a0 \u00a0 \u00a0 if tabtitle == \"\" {\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 tabtitle = title\n>> + \u00a0 \u00a0 \u00a0 }\n>> \u00a0 \u00a0 \u00a0 \u00a0d := struct {\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Tabtitle \u00a0string\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Title \u00a0 \u00a0 string\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Subtitle \u00a0string\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0SearchBox bool\n>> @@ -556,6 +560,7 @@\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Menu \u00a0 \u00a0 \u00a0[]byte\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Content \u00a0 []byte\n>> \u00a0 \u00a0 \u00a0 \u00a0}{\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 tabtitle,\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0title,\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0subtitle,\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0*indexEnabled,\n>> @@ -630,7 +635,7 @@\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0src = buf.Bytes()\n>> \u00a0 \u00a0 \u00a0 \u00a0}\n>>\n>> - \u00a0 \u00a0 \u00a0 servePage(w, meta.Title, meta.Subtitle, \"\", src)\n>> + \u00a0 \u00a0 \u00a0 servePage(w, \"\", meta.Title, meta.Subtitle, \"\", src)\n>> \u00a0}\n>>\n>> \u00a0func applyTemplate(t *template.Template, name string, data interface{})\n>> []byte {\n>> @@ -666,7 +671,7 @@\n>> \u00a0 \u00a0 \u00a0 \u00a0FormatText(&buf, src, 1, pathpkg.Ext(abspath) == \".go\",\n>> r.FormValue(\"h\"), rangeSelection(r.FormValue(\"s\")))\n>> \u00a0 \u00a0 \u00a0 \u00a0buf.WriteString(\"</pre>\")\n>>\n>> - \u00a0 \u00a0 \u00a0 servePage(w, title+\" \"+relpath, \"\", \"\", buf.Bytes())\n>> + \u00a0 \u00a0 \u00a0 servePage(w, relpath, title+\" \"+relpath, \"\", \"\", buf.Bytes())\n>> \u00a0}\n>>\n>> \u00a0func serveDirectory(w http.ResponseWriter, r *http.Request, abspath,\n>> relpath string) {\n>> @@ -681,7 +686,7 @@\n>> \u00a0 \u00a0 \u00a0 \u00a0}\n>>\n>> \u00a0 \u00a0 \u00a0 \u00a0contents := applyTemplate(dirlistHTML, \"dirlistHTML\", list)\n>> - \u00a0 \u00a0 \u00a0 servePage(w, \"Directory \"+relpath, \"\", \"\", contents)\n>> + \u00a0 \u00a0 \u00a0 servePage(w, relpath, \"Directory \"+relpath, \"\", \"\", contents)\n>> \u00a0}\n>>\n>> \u00a0func serveFile(w http.ResponseWriter, r *http.Request) {\n>> @@ -1073,30 +1078,33 @@\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return\n>> \u00a0 \u00a0 \u00a0 \u00a0}\n>>\n>> - \u00a0 \u00a0 \u00a0 var title, subtitle string\n>> + \u00a0 \u00a0 \u00a0 var tabtitle, title, subtitle string\n>> \u00a0 \u00a0 \u00a0 \u00a0switch {\n>> \u00a0 \u00a0 \u00a0 \u00a0case info.PAst != nil:\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 title = \"Package \" + info.PAst.Name.Name\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 tabtitle = info.PAst.Name.Name\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 title = \"Package \" + tabtitle\n>> \u00a0 \u00a0 \u00a0 \u00a0case info.PDoc != nil:\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 switch {\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 case info.IsPkg:\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 title = \"Package \" + info.PDoc.Name\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 case info.PDoc.Name == fakePkgName:\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if info.PDoc.Name == fakePkgName {\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// assume that the directory name is the command\n>> name\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 _, pkgname := pathpkg.Split(relpath)\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 title = \"Command \" + pkgname\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 default:\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 title = \"Command \" + info.PDoc.Name\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 _, tabtitle = pathpkg.Split(relpath)\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 } else {\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 tabtitle = info.PDoc.Name\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if info.IsPkg {\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 title = \"Package \" + tabtitle\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 } else {\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 title = \"Command \" + tabtitle\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n>> \u00a0 \u00a0 \u00a0 \u00a0default:\n>> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 title = \"Directory \" + info.Dirname\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 tabtitle = info.Dirname\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 title = \"Directory \" + tabtitle\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if *showTimestamps {\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0subtitle = \"Last update: \" + info.DirTime.String()\n>> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n>> \u00a0 \u00a0 \u00a0 \u00a0}\n>>\n>> \u00a0 \u00a0 \u00a0 \u00a0contents := applyTemplate(packageHTML, \"packageHTML\", info)\n>> - \u00a0 \u00a0 \u00a0 servePage(w, title, subtitle, \"\", contents)\n>> + \u00a0 \u00a0 \u00a0 servePage(w, tabtitle, title, subtitle, \"\", contents)\n>> \u00a0}\n>>\n>> \u00a0//\n>> ----------------------------------------------------------------------------\n>> @@ -1186,7 +1194,7 @@\n>> \u00a0 \u00a0 \u00a0 \u00a0}\n>>\n>> \u00a0 \u00a0 \u00a0 \u00a0contents := applyTemplate(searchHTML, \"searchHTML\", result)\n>> - \u00a0 \u00a0 \u00a0 servePage(w, title, \"\", query, contents)\n>> + \u00a0 \u00a0 \u00a0 servePage(w, query, title, \"\", query, contents)\n>> \u00a0}\n>>\n>> \u00a0//\n>> ----------------------------------------------------------------------------\n>> Index: src/cmd/godoc/main.go\n>> ===================================================================\n>> --- a/src/cmd/godoc/main.go\n>> +++ b/src/cmd/godoc/main.go\n>> @@ -73,7 +73,7 @@\n>> \u00a0func serveError(w http.ResponseWriter, r *http.Request, relpath string,\n>> err error) {\n>> \u00a0 \u00a0 \u00a0 \u00a0contents := applyTemplate(errorHTML, \"errorHTML\", err) // err may\n>> contain an absolute path!\n>> \u00a0 \u00a0 \u00a0 \u00a0w.WriteHeader(http.StatusNotFound)\n>> - \u00a0 \u00a0 \u00a0 servePage(w, \"File \"+relpath, \"\", \"\", contents)\n>> + \u00a0 \u00a0 \u00a0 servePage(w, relpath, \"File \"+relpath, \"\", \"\", contents)\n>> \u00a0}\n>>\n>> \u00a0func usage() {\n>>\n>>\n>\n",
			"disapproval": false,
			"date": "2012-03-21 17:48:36.883739",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=f180ac52630b ***\n\ngodoc: use shorter titles for tabs\n\nIn a browser with many open tabs, the tab titles become short\nand uninformative because they all start with the same prefix\n(\"Package \", \"Directory \", etc.).\n\nPermit use of shorter tab titles that start with the relevant\ninformation first.\n\nFixes issue 3365.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5865056",
			"disapproval": false,
			"date": "2012-03-21 18:29:33.114097",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I patched this in and am clicking around.  Overall, very nice.\n\nClicking \"Packages\" at the top, though, results in a tabtitle of \"/src/pkg\n- The Go Pr...\" which is a bit weird.  I'd expect something like \"Packages\n- The Go Pr...\"\n\n\nOn Wed, Mar 21, 2012 at 10:33 AM, <gri@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://code.google.com/p/go\n>\n>\n> Description:\n> godoc: use shorter titles for tabs\n>\n> In a browser with many open tabs, the tab titles become short\n> and uninformative because they all start with the same prefix\n> (\"Package \", \"Directory \", etc.).\n>\n> Permit use of shorter tab titles that start with the relevant\n> information first.\n>\n> Fixes issue 3365.\n>\n> Please review this at http://codereview.appspot.com/**5865056/\n>\n> Affected files:\n>  M lib/godoc/godoc.html\n>  M src/cmd/godoc/codewalk.go\n>  M src/cmd/godoc/godoc.go\n>  M src/cmd/godoc/main.go\n>\n>\n> Index: lib/godoc/godoc.html\n> ==============================**==============================**=======\n> --- a/lib/godoc/godoc.html\n> +++ b/lib/godoc/godoc.html\n> @@ -2,7 +2,7 @@\n>  <html>\n>  <head>\n>  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n> -{{with .Title}}\n> +{{with .Tabtitle}}\n>   <title>{{html .}} - The Go Programming Language</title>\n>  {{else}}\n>   <title>The Go Programming Language</title>\n> Index: src/cmd/godoc/codewalk.go\n> ==============================**==============================**=======\n> --- a/src/cmd/godoc/codewalk.go\n> +++ b/src/cmd/godoc/codewalk.go\n> @@ -69,7 +69,7 @@\n>        }\n>\n>        b := applyTemplate(codewalkHTML, \"codewalk\", cw)\n> -       servePage(w, \"Codewalk: \"+cw.Title, \"\", \"\", b)\n> +       servePage(w, cw.Title, \"Codewalk: \"+cw.Title, \"\", \"\", b)\n>  }\n>\n>  // A Codewalk represents a single codewalk read from an XML file.\n> @@ -200,7 +200,7 @@\n>        }\n>\n>        b := applyTemplate(codewalkdirHTML, \"codewalkdir\", v)\n> -       servePage(w, \"Codewalks\", \"\", \"\", b)\n> +       servePage(w, \"\", \"Codewalks\", \"\", \"\", b)\n>  }\n>\n>  // codewalkFileprint serves requests with ?fileprint=f&lo=lo&hi=hi.\n> Index: src/cmd/godoc/godoc.go\n> ==============================**==============================**=======\n> --- a/src/cmd/godoc/godoc.go\n> +++ b/src/cmd/godoc/godoc.go\n> @@ -546,8 +546,12 @@\n>  // ------------------------------**------------------------------**\n> ----------------\n>  // Generic HTML wrapper\n>\n> -func servePage(w http.ResponseWriter, title, subtitle, query string,\n> content []byte) {\n> +func servePage(w http.ResponseWriter, tabtitle, title, subtitle, query\n> string, content []byte) {\n> +       if tabtitle == \"\" {\n> +               tabtitle = title\n> +       }\n>        d := struct {\n> +               Tabtitle  string\n>                Title     string\n>                Subtitle  string\n>                SearchBox bool\n> @@ -556,6 +560,7 @@\n>                Menu      []byte\n>                Content   []byte\n>        }{\n> +               tabtitle,\n>                title,\n>                subtitle,\n>                *indexEnabled,\n> @@ -630,7 +635,7 @@\n>                src = buf.Bytes()\n>        }\n>\n> -       servePage(w, meta.Title, meta.Subtitle, \"\", src)\n> +       servePage(w, \"\", meta.Title, meta.Subtitle, \"\", src)\n>  }\n>\n>  func applyTemplate(t *template.Template, name string, data interface{})\n> []byte {\n> @@ -666,7 +671,7 @@\n>        FormatText(&buf, src, 1, pathpkg.Ext(abspath) == \".go\",\n> r.FormValue(\"h\"), rangeSelection(r.FormValue(\"s\"**)))\n>        buf.WriteString(\"</pre>\")\n>\n> -       servePage(w, title+\" \"+relpath, \"\", \"\", buf.Bytes())\n> +       servePage(w, relpath, title+\" \"+relpath, \"\", \"\", buf.Bytes())\n>  }\n>\n>  func serveDirectory(w http.ResponseWriter, r *http.Request, abspath,\n> relpath string) {\n> @@ -681,7 +686,7 @@\n>        }\n>\n>        contents := applyTemplate(dirlistHTML, \"dirlistHTML\", list)\n> -       servePage(w, \"Directory \"+relpath, \"\", \"\", contents)\n> +       servePage(w, relpath, \"Directory \"+relpath, \"\", \"\", contents)\n>  }\n>\n>  func serveFile(w http.ResponseWriter, r *http.Request) {\n> @@ -1073,30 +1078,33 @@\n>                return\n>        }\n>\n> -       var title, subtitle string\n> +       var tabtitle, title, subtitle string\n>        switch {\n>        case info.PAst != nil:\n> -               title = \"Package \" + info.PAst.Name.Name\n> +               tabtitle = info.PAst.Name.Name\n> +               title = \"Package \" + tabtitle\n>        case info.PDoc != nil:\n> -               switch {\n> -               case info.IsPkg:\n> -                       title = \"Package \" + info.PDoc.Name\n> -               case info.PDoc.Name == fakePkgName:\n> +               if info.PDoc.Name == fakePkgName {\n>                        // assume that the directory name is the command\n> name\n> -                       _, pkgname := pathpkg.Split(relpath)\n> -                       title = \"Command \" + pkgname\n> -               default:\n> -                       title = \"Command \" + info.PDoc.Name\n> +                       _, tabtitle = pathpkg.Split(relpath)\n> +               } else {\n> +                       tabtitle = info.PDoc.Name\n> +               }\n> +               if info.IsPkg {\n> +                       title = \"Package \" + tabtitle\n> +               } else {\n> +                       title = \"Command \" + tabtitle\n>                }\n>        default:\n> -               title = \"Directory \" + info.Dirname\n> +               tabtitle = info.Dirname\n> +               title = \"Directory \" + tabtitle\n>                if *showTimestamps {\n>                        subtitle = \"Last update: \" + info.DirTime.String()\n>                }\n>        }\n>\n>        contents := applyTemplate(packageHTML, \"packageHTML\", info)\n> -       servePage(w, title, subtitle, \"\", contents)\n> +       servePage(w, tabtitle, title, subtitle, \"\", contents)\n>  }\n>\n>  // ------------------------------**------------------------------**\n> ----------------\n> @@ -1186,7 +1194,7 @@\n>        }\n>\n>        contents := applyTemplate(searchHTML, \"searchHTML\", result)\n> -       servePage(w, title, \"\", query, contents)\n> +       servePage(w, query, title, \"\", query, contents)\n>  }\n>\n>  // ------------------------------**------------------------------**\n> ----------------\n> Index: src/cmd/godoc/main.go\n> ==============================**==============================**=======\n> --- a/src/cmd/godoc/main.go\n> +++ b/src/cmd/godoc/main.go\n> @@ -73,7 +73,7 @@\n>  func serveError(w http.ResponseWriter, r *http.Request, relpath string,\n> err error) {\n>        contents := applyTemplate(errorHTML, \"errorHTML\", err) // err may\n> contain an absolute path!\n>        w.WriteHeader(http.**StatusNotFound)\n> -       servePage(w, \"File \"+relpath, \"\", \"\", contents)\n> +       servePage(w, relpath, \"File \"+relpath, \"\", \"\", contents)\n>  }\n>\n>  func usage() {\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-03-21 17:53:17.545016",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 5865056: godoc: use shorter titles for tabs",
	"created": "2012-03-21 17:30:55.312559",
	"patchsets": [
		1,
		2001,
		2002,
		6002,
		4009,
		1003
	],
	"modified": "2012-03-21 18:29:35.541714",
	"closed": true,
	"issue": 5865056
}