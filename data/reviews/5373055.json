{
	"description": "exp/ssh: add client side support for publickey auth\n\nclient.go/client_auth.go:\n* add support for publickey key auth using the interface\n  outlined by rsc in the previous auth CL\n\nclient_auth_test.go:\n* password and publickey tests against server.go\n\ncommon.go/server.go:\n* move some helper methods from server.go into common.go\n* generalise serializeRSASignature",
	"cc": [
		"cw@f00f.org",
		"golang-dev@googlegroups.com",
		"n13m3y3r@gmail.com"
	],
	"reviewers": [
		"rsc@golang.org",
		"agl@golang.org",
		"huin@google.com"
	],
	"messages": [
		{
			"sender": "agl@golang.org",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"huin@google.com",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"n13m3y3r@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=c3ae7b7f6930 ***\n\nexp/ssh: add client side support for publickey auth\n\nclient.go/client_auth.go:\n* add support for publickey key auth using the interface\n  outlined by rsc in the previous auth CL\n\nclient_auth_test.go:\n* password and publickey tests against server.go\n\ncommon.go/server.go:\n* move some helper methods from server.go into common.go\n* generalise serializeRSASignature\n\nR=rsc, agl, huin\nCC=cw, golang-dev, n13m3y3r\nhttp://codereview.appspot.com/5373055\n\nCommitter: Adam Langley <agl@golang.org>",
			"disapproval": false,
			"date": "2011-11-13 19:48:22.464115",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"huin@google.com",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"n13m3y3r@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, agl@golang.org, huin@google.com (cc: cw@f00f.org, golang-dev@googlegroups.com, n13m3y3r@gmail.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-13 19:42:41.492710",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"huin@google.com",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"n13m3y3r@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, agl@golang.org, huin@google.com (cc: cw@f00f.org, golang-dev@googlegroups.com, n13m3y3r@gmail.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-12 01:33:35.220782",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"huin@google.com",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"n13m3y3r@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, agl@golang.org, huin@google.com (cc: cw@f00f.org, golang-dev@googlegroups.com, n13m3y3r@gmail.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-11 05:04:33.940647",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"huin@google.com",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"n13m3y3r@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "The authentication API is still a handful, it works, and is very flexible, but arguably a handful for the simple case.\n\nI have some ideas for improving the authentication API, but I would really like to see the public key functionality committed first.",
			"disapproval": false,
			"date": "2011-11-11 05:07:46.115814",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"huin@google.com",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"n13m3y3r@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5373055/diff/4001/src/pkg/exp/ssh/client_auth.go\nFile src/pkg/exp/ssh/client_auth.go (right):\n\nhttp://codereview.appspot.com/5373055/diff/4001/src/pkg/exp/ssh/client_auth.go#newcode160\nsrc/pkg/exp/ssh/client_auth.go:160: var ErrNoKeys = errors.New(\"No more keys\")\nNeeds comment and I think the naming scheme for errors would call this \"NoMoreKeysError\". (Although the naming scheme might have changed so, if you find examples of the Err* form, then go with that.)\n\nhttp://codereview.appspot.com/5373055/diff/4001/src/pkg/exp/ssh/client_auth.go#newcode163\nsrc/pkg/exp/ssh/client_auth.go:163: type ClientPublicKey interface {\n|ClientPublicKey| suggests that it's a single key. ClientPublicKeyRing maybe?\n\nhttp://codereview.appspot.com/5373055/diff/4001/src/pkg/exp/ssh/client_auth.go#newcode168\nsrc/pkg/exp/ssh/client_auth.go:168: Key(i int) (alg string, pub []*big.Int, err error)\nCan |pub| not be an interface{} where the valid concrete types are rsa.PublicKey and dsa.PublicKey? (http://golang.org/pkg/crypto/dsa/#PublicKey). We could get rid of |alg| then.\n\nAlso, a nil interface could indicate \"no more keys\", leaving |err| for real errors.\n\nhttp://codereview.appspot.com/5373055/diff/4001/src/pkg/exp/ssh/client_auth.go#newcode171\nsrc/pkg/exp/ssh/client_auth.go:171: Sign(i int, data []byte) (sig []byte, err error)\nIf |Key| returns an rsa/dsa.*Private*Key, then I don't think we need Sign, we can do the signing ourselves.\n\nIf you really want to keep Sign, you should pass in a io.Reader for random data. It makes testing easier if uncontrolled entropy doesn't appear in the call stack.\n\nhttp://codereview.appspot.com/5373055/diff/4001/src/pkg/exp/ssh/client_auth.go#newcode184\nsrc/pkg/exp/ssh/client_auth.go:184: Reply    bool\nThis argument isn't \"Reply\" it's \"hasSignature\" or something. If false, it means that there's no signature and that the message is just a query whether the public key would be valid, without the client having to decrypt it.\n\nhttp://codereview.appspot.com/5373055/diff/4001/src/pkg/exp/ssh/client_auth.go#newcode194\nsrc/pkg/exp/ssh/client_auth.go:194: alg, pub, err := p.Key(i)\nIt doesn't look like this tests the validity of the public key before trying it (hasSignature = false). That's generally useful as it allows the client to prompt the user only for the correct public key. Although this would require the ClientPublicKeyRing interface to have two methods: GetPublicKey and GetPrivateKey, with the latter only being called if the server indicates that the public key is acceptable.\n\nYou can also send query messages for every public key without waiting and collect the replies in one RTT.",
			"disapproval": false,
			"date": "2011-11-11 15:26:00.347095",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"huin@google.com",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"n13m3y3r@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Thank you for your comments agl, please take another look.\n\nhttp://codereview.appspot.com/5373055/diff/4001/src/pkg/exp/ssh/client_auth.go\nFile src/pkg/exp/ssh/client_auth.go (right):\n\nhttp://codereview.appspot.com/5373055/diff/4001/src/pkg/exp/ssh/client_auth.go#newcode160\nsrc/pkg/exp/ssh/client_auth.go:160: var ErrNoKeys = errors.New(\"No more keys\")\nOn 2011/11/11 15:26:00, agl1 wrote:\n> Needs comment and I think the naming scheme for errors would call this\n> \"NoMoreKeysError\". (Although the naming scheme might have changed so, if you\n> find examples of the Err* form, then go with that.)\n\nDone.\n\nhttp://codereview.appspot.com/5373055/diff/4001/src/pkg/exp/ssh/client_auth.go#newcode163\nsrc/pkg/exp/ssh/client_auth.go:163: type ClientPublicKey interface {\nGood point, in practice there can only be a single ClientPublicKey active per ClientConfig.[]Auth. I have renamed, and normalised the capitalisation to Publickey.\n\nOn 2011/11/11 15:26:00, agl1 wrote:\n> |ClientPublicKey| suggests that it's a single key. ClientPublicKeyRing maybe?\n\nhttp://codereview.appspot.com/5373055/diff/4001/src/pkg/exp/ssh/client_auth.go#newcode171\nsrc/pkg/exp/ssh/client_auth.go:171: Sign(i int, data []byte) (sig []byte, err error)\nIn a previous CL I suggested supplying the password and/or the keys in the ClientConfig but it was suggested that they actual signing shouldn't be done inside the ssh package, but by a callback inside the clients code.\n\nI'll take another swing at this retaining Sign for the moment, but if you feel strongly about Key supplying the private key so ssh can do the signing I'm happy to implement that.\n\nOn 2011/11/11 15:26:00, agl1 wrote:\n> If |Key| returns an rsa/dsa.*Private*Key, then I don't think we need Sign, we\n> can do the signing ourselves.\n> \n> If you really want to keep Sign, you should pass in a io.Reader for random data.\n> It makes testing easier if uncontrolled entropy doesn't appear in the call\n> stack.\n\nOn the subject of random and testing, would it work if ssh defined \n\nvar rand = rand.Reader\n\nand used that instead of the multitude of calls to rand.Reader currently spread over the package. I have not tested this, but it may make testing easier as well.\n\nhttp://codereview.appspot.com/5373055/diff/4001/src/pkg/exp/ssh/client_auth.go#newcode184\nsrc/pkg/exp/ssh/client_auth.go:184: Reply    bool\nWill fix. I've started to adopt this method of defining a private struct so I can offload as much of the packet construction to marshal.\n\nOn 2011/11/11 15:26:00, agl1 wrote:\n> This argument isn't \"Reply\" it's \"hasSignature\" or something. If false, it means\n> that there's no signature and that the message is just a query whether the\n> public key would be valid, without the client having to decrypt it.\n\nhttp://codereview.appspot.com/5373055/diff/4001/src/pkg/exp/ssh/client_auth.go#newcode194\nsrc/pkg/exp/ssh/client_auth.go:194: alg, pub, err := p.Key(i)\nPTAL\n\nOn 2011/11/11 15:26:00, agl1 wrote:\n> It doesn't look like this tests the validity of the public key before trying it\n> (hasSignature = false). That's generally useful as it allows the client to\n> prompt the user only for the correct public key. Although this would require the\n> ClientPublicKeyRing interface to have two methods: GetPublicKey and\n> GetPrivateKey, with the latter only being called if the server indicates that\n> the public key is acceptable.\n> \n> You can also send query messages for every public key without waiting and\n> collect the replies in one RTT.",
			"disapproval": false,
			"date": "2011-11-12 01:33:43.404024",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"huin@google.com",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"n13m3y3r@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM with the addition of an io.Reader for Sign.\n\nI would make this change in landing, but it seems a little forceful. If you agree with the rand io.Reader I can do so.\n\n\nCheers\n\nhttp://codereview.appspot.com/5373055/diff/4001/src/pkg/exp/ssh/client_auth.go\nFile src/pkg/exp/ssh/client_auth.go (right):\n\nhttp://codereview.appspot.com/5373055/diff/4001/src/pkg/exp/ssh/client_auth.go#newcode171\nsrc/pkg/exp/ssh/client_auth.go:171: Sign(i int, data []byte) (sig []byte, err error)\nOn 2011/11/11 15:26:00, agl1 wrote:\n> If |Key| returns an rsa/dsa.*Private*Key, then I don't think we need Sign, we\n> can do the signing ourselves.\n\nDoes Sign allow one to implement ssh agent support? That would be a great argument for doing it this way.\n\nIn any case, I'm happy with this interface now, save for below:\n\n> If you really want to keep Sign, you should pass in a io.Reader for random data.\n> It makes testing easier if uncontrolled entropy doesn't appear in the call\n> stack.\n\nI still believe that io.Reader should be passed in. We do this everywhere else.\n\nhttp://codereview.appspot.com/5373055/diff/6007/src/pkg/exp/ssh/client_auth.go\nFile src/pkg/exp/ssh/client_auth.go (right):\n\nhttp://codereview.appspot.com/5373055/diff/6007/src/pkg/exp/ssh/client_auth.go#newcode162\nsrc/pkg/exp/ssh/client_auth.go:162: // Key returns the i'th rsa.Publickey or dsa.Publickey, or nil if\nIt's PublicKey in rsa, dsa etc.\n\nhttp://codereview.appspot.com/5373055/diff/6007/src/pkg/exp/ssh/client_auth.go#newcode219\nsrc/pkg/exp/ssh/client_auth.go:219: packet, err := t.readPacket()\n(Doesn't have to be sorted out in this CL.)\n\nDoing each pubkey as a round trips means that n public keys are n RTTs of latency. Instead we could send n public keys at once and read n replies, with only a single RTT of latency.",
			"disapproval": false,
			"date": "2011-11-13 16:50:55.948159",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Agreed, and thanks\n\nSent from my iPhone\n\nOn 14/11/2011, at 3:50, agl@golang.org wrote:\n\n> LGTM with the addition of an io.Reader for Sign.\n> \n> I would make this change in landing, but it seems a little forceful. If\n> you agree with the rand io.Reader I can do so.\n> \n> \n> Cheers\n> \n> \n> http://codereview.appspot.com/5373055/diff/4001/src/pkg/exp/ssh/client_auth.go\n> File src/pkg/exp/ssh/client_auth.go (right):\n> \n> http://codereview.appspot.com/5373055/diff/4001/src/pkg/exp/ssh/client_auth.go#newcode171\n> src/pkg/exp/ssh/client_auth.go:171: Sign(i int, data []byte) (sig\n> []byte, err error)\n> On 2011/11/11 15:26:00, agl1 wrote:\n>> If |Key| returns an rsa/dsa.*Private*Key, then I don't think we need\n> Sign, we\n>> can do the signing ourselves.\n> \n> Does Sign allow one to implement ssh agent support? That would be a\n> great argument for doing it this way.\n> \n> In any case, I'm happy with this interface now, save for below:\n> \n>> If you really want to keep Sign, you should pass in a io.Reader for\n> random data.\n>> It makes testing easier if uncontrolled entropy doesn't appear in the\n> call\n>> stack.\n> \n> I still believe that io.Reader should be passed in. We do this\n> everywhere else.\n> \n> http://codereview.appspot.com/5373055/diff/6007/src/pkg/exp/ssh/client_auth.go\n> File src/pkg/exp/ssh/client_auth.go (right):\n> \n> http://codereview.appspot.com/5373055/diff/6007/src/pkg/exp/ssh/client_auth.go#newcode162\n> src/pkg/exp/ssh/client_auth.go:162: // Key returns the i'th\n> rsa.Publickey or dsa.Publickey, or nil if\n> It's PublicKey in rsa, dsa etc.\n> \n> http://codereview.appspot.com/5373055/diff/6007/src/pkg/exp/ssh/client_auth.go#newcode219\n> src/pkg/exp/ssh/client_auth.go:219: packet, err := t.readPacket()\n> (Doesn't have to be sorted out in this CL.)\n> \n> Doing each pubkey as a round trips means that n public keys are n RTTs\n> of latency. Instead we could send n public keys at once and read n\n> replies, with only a single RTT of latency.\n> \n> http://codereview.appspot.com/5373055/\n",
			"disapproval": false,
			"date": "2011-11-13 19:23:41.526204",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"huin@google.com",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"n13m3y3r@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I had some time before work so I added a rand io.Reader to the Sign method. This has made the signature for the internal ClientAuth.auth method larger. I will look at addressing that in a future CL.\n\nhttp://codereview.appspot.com/5373055/diff/4001/src/pkg/exp/ssh/client_auth.go\nFile src/pkg/exp/ssh/client_auth.go (right):\n\nhttp://codereview.appspot.com/5373055/diff/4001/src/pkg/exp/ssh/client_auth.go#newcode168\nsrc/pkg/exp/ssh/client_auth.go:168: Key(i int) (alg string, pub []*big.Int, err error)\nOn 2011/11/11 15:26:00, agl1 wrote:\n> Can |pub| not be an interface{} where the valid concrete types are rsa.PublicKey\n> and dsa.PublicKey? (http://golang.org/pkg/crypto/dsa/#PublicKey). We could get\n> rid of |alg| then.\n> \n> Also, a nil interface could indicate \"no more keys\", leaving |err| for real\n> errors.\n\nDone.\n\nhttp://codereview.appspot.com/5373055/diff/4001/src/pkg/exp/ssh/client_auth.go#newcode171\nsrc/pkg/exp/ssh/client_auth.go:171: Sign(i int, data []byte) (sig []byte, err error)\nYes, the idea is to delegate signing to something else, maybe even an external process. \n\nOn 2011/11/13 16:50:56, agl1 wrote:\n> On 2011/11/11 15:26:00, agl1 wrote:\n> > If |Key| returns an rsa/dsa.*Private*Key, then I don't think we need Sign, we\n> > can do the signing ourselves.\n> \n> Does Sign allow one to implement ssh agent support? That would be a great\n> argument for doing it this way.\n> \n> In any case, I'm happy with this interface now, save for below:\n> \n> > If you really want to keep Sign, you should pass in a io.Reader for random\n> data.\n> > It makes testing easier if uncontrolled entropy doesn't appear in the call\n> > stack.\n> \n> I still believe that io.Reader should be passed in. We do this everywhere else.",
			"disapproval": false,
			"date": "2011-11-13 19:49:29.912264",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 5373055: exp/ssh: add client side support for publickey auth",
	"created": "2011-11-11 05:01:13.460427",
	"patchsets": [
		1,
		2001,
		4001,
		1010,
		6007,
		3010,
		1017
	],
	"modified": "2011-11-13 19:53:04.847740",
	"closed": true,
	"issue": 5373055
}