{
	"description": "fmt: fix documentation glitch in index expressions in Printf\nAlso clean up the code a bit.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com"
	],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-05-24 23:40:10.729750",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ignore this for now please. I am still thinking.\r\n\r\nOn Friday, May 24, 2013, wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> fmt: fix documentation glitch in index expressions in Printf\r\n> Also clean up the code a bit.\r\n>\r\n> Please review this at https://codereview.appspot.**com/9761043/<https://codereview.appspot.com/9761043/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/fmt/doc.go\r\n>   M src/pkg/fmt/fmt_test.go\r\n>   M src/pkg/fmt/print.go\r\n>\r\n>\r\n> Index: src/pkg/fmt/doc.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/fmt/doc.go\r\n> +++ b/src/pkg/fmt/doc.go\r\n> @@ -124,9 +124,9 @@\r\n>         formatting verb to format successive arguments passed in the call.\r\n>         However, the notation [n] immediately before the verb indicates\r\n> that the\r\n>         nth one-indexed argument is to be formatted instead. The same\r\n> notation\r\n> -       before a '*' for a width or precision selects the argument index\r\n> holding\r\n> -       the value. After processing a bracketed expression [n], arguments\r\n> n+1,\r\n> -       n+2, etc. will be processed unless otherwise directed.\r\n> +       before a '*' for a width or a '.*' for precision selects the\r\n> argument\r\n> +       index holding the value. After processing a bracketed expression\r\n> [n],\r\n> +       arguments n+1, n+2, etc. will be processed unless otherwise\r\n> directed.\r\n>\r\n>         For example,\r\n>                 fmt.Sprintf(\"%[2]d %[1]d\\n\", 11, 22)\r\n> Index: src/pkg/fmt/fmt_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/fmt/fmt_test.go\r\n> +++ b/src/pkg/fmt/fmt_test.go\r\n> @@ -553,6 +553,7 @@\r\n>         {\"%6.2f\", SE{12.0}, \" 12.00\"},\r\n>         {\"%[3]*[2].*[1]f\", SE{12.0, 2, 6}, \" 12.00\"},\r\n>         {\"%[1]*[2].*[3]f\", SE{6, 2, 12.0}, \" 12.00\"},\r\n> +       {\"%[2].*[3]f\", SE{6, 3, 12.0}, \"12.000\"},\r\n>         // An actual use! Print the same arguments twice.\r\n>         {\"%d %d %d %#[1]o %#o %#o\", SE{11, 12, 13}, \"11 12 13 013 014\r\n> 015\"},\r\n>\r\n> Index: src/pkg/fmt/print.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/fmt/print.go\r\n> +++ b/src/pkg/fmt/print.go\r\n> @@ -1021,11 +1021,11 @@\r\n>  }\r\n>\r\n>  // intFromArg gets the argNumth element of a. On return, isInt reports\r\n> whether the argument has type int.\r\n> -func intFromArg(a []interface{}, end, i, argNum int) (num int, isInt\r\n> bool, newi, newArgNum int) {\r\n> -       newi, newArgNum = end, argNum\r\n> -       if i < end && argNum < len(a) {\r\n> +func intFromArg(a []interface{}, argNum int) (num int, isInt bool,\r\n> newArgNum int) {\r\n> +       newArgNum = argNum\r\n> +       if argNum < len(a) {\r\n>                 num, isInt = a[argNum].(int)\r\n> -               newi, newArgNum = i+1, argNum+1\r\n> +               newArgNum = argNum + 1\r\n>         }\r\n>         return\r\n>  }\r\n> @@ -1112,7 +1112,8 @@\r\n>\r\n>                 // Do we have width?\r\n>                 if i < end && format[i] == '*' {\r\n> -                       p.fmt.wid, p.fmt.widPresent, i, argNum =\r\n> intFromArg(a, end, i, argNum)\r\n> +                       i++\r\n> +                       p.fmt.wid, p.fmt.widPresent, argNum =\r\n> intFromArg(a, argNum)\r\n>                         if !p.fmt.widPresent {\r\n>                                 p.buf.Write(badWidthBytes)\r\n>                         }\r\n> @@ -1123,14 +1124,16 @@\r\n>\r\n>                 // Do we have precision?\r\n>                 if i+1 < end && format[i] == '.' {\r\n> -                       if format[i+1] == '*' {\r\n> -                               p.fmt.prec, p.fmt.precPresent, i, argNum =\r\n> intFromArg(a, end, i+1, argNum)\r\n> +                       i++\r\n> +                       if format[i] == '*' {\r\n> +                               i++\r\n> +                               p.fmt.prec, p.fmt.precPresent, argNum =\r\n> intFromArg(a, argNum)\r\n>                                 if !p.fmt.precPresent {\r\n>                                         p.buf.Write(badPrecBytes)\r\n>                                 }\r\n>                                 argNum, i = p.argNumber(argNum, format, i,\r\n> len(a)) // We consumed []; another can follow here.\r\n>                         } else {\r\n> -                               p.fmt.prec, p.fmt.precPresent, i =\r\n> parsenum(format, i+1, end)\r\n> +                               p.fmt.prec, p.fmt.precPresent, i =\r\n> parsenum(format, i, end)\r\n>                                 if !p.fmt.precPresent {\r\n>                                         p.fmt.prec = 0\r\n>                                         p.fmt.precPresent = true\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-25 01:28:45.633980",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-05-25 02:46:02.972220",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 9761043: fmt: fix documentation glitch in index expressions in Printf",
	"created": "2013-05-24 23:40:05.574210",
	"patchsets": [
		1
	],
	"modified": "2013-05-25 02:46:04.264640",
	"closed": true,
	"issue": 9761043
}