{
	"description": "spec: consistently use \"indices\" (rather than \"indexes\")\n\nWe have been using all three terms \"indices\", \"indexes\",\nand \"index expressions\" indiscriminatly for index values.\nWith this change, \"index\" refers to an index value,\n\"indices\" is the plural of \"index\", and \"index expression\"\nrefers to an array, slice, or map indexed by an index: a[x].",
	"cc": [
		"r@golang.org",
		"rsc@golang.org",
		"iant@golang.org",
		"ken@golang.org",
		"mtj@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Matrix & Matrices, though my point was only about pervasive normalization.\r\n;-)\r\n\r\nOn Fri, Dec 7, 2012 at 4:22 PM, <r@golang.org> wrote:\r\n\r\n> LGTM and thank you\r\n>\r\n> https://codereview.appspot.**com/6912056/<https://codereview.appspot.com/6912056/>\r\n>\r\n\r\nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n650-335-5765\r\n",
			"disapproval": false,
			"date": "2012-12-08 01:03:06.926020",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM and thank you",
			"disapproval": false,
			"date": "2012-12-08 00:22:09.182960",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "So what was the outcome in the battle between \"matrices\" and \"matrixes\" ? :-)\r\n\r\nOn Fri, Dec 7, 2012 at 4:13 PM, Michael Jones <mtj@google.com> wrote:\r\n> Awesome. When you get to this point, you're ready to be an international\r\n> standard. I remember just this normalization in OpenGL's spec/books for\r\n> matrix, matrices and matrixes. ;-)\r\n>\r\n>\r\n> On Fri, Dec 7, 2012 at 4:08 PM, <gri@golang.org> wrote:\r\n>>\r\n>> Reviewers: r, rsc, iant, ken2,\r\n>>\r\n>> Message:\r\n>> Hello r@golang.org, rsc@golang.org, iant@golang.org, ken@golang.org (cc:\r\n>> golang-dev@googlegroups.com),\r\n>>\r\n>> I'd like you to review this change to\r\n>> https://code.google.com/p/go\r\n>>\r\n>>\r\n>> Description:\r\n>> spec: consistently use \"indices\" (rather than \"indexes\")\r\n>>\r\n>> We have been using all three terms \"indices\", \"indexes\",\r\n>> and \"index expressions\" indiscriminatly for index values.\r\n>> With this change, \"index\" refers to an index value,\r\n>> \"indices\" is the plural of \"index\", and \"index expression\"\r\n>> refers to an array, slice, or map indexed by an index: a[x].\r\n>>\r\n>> Please review this at https://codereview.appspot.com/6912056/\r\n>>\r\n>> Affected files:\r\n>>   M doc/go_spec.html\r\n>>\r\n>>\r\n>> Index: doc/go_spec.html\r\n>> ===================================================================\r\n>> --- a/doc/go_spec.html\r\n>> +++ b/doc/go_spec.html\r\n>> @@ -1,6 +1,6 @@\r\n>>  <!--{\r\n>>         \"Title\": \"The Go Programming Language Specification\",\r\n>> -       \"Subtitle\": \"Version of December 6, 2012\",\r\n>> +       \"Subtitle\": \"Version of December 7, 2012\",\r\n>>         \"Path\": \"/ref/spec\"\r\n>>  }-->\r\n>>\r\n>> @@ -791,8 +791,8 @@\r\n>>  The length of a string <code>s</code> (its size in bytes) can be\r\n>> discovered using\r\n>>  the built-in function <a\r\n>> href=\"#Length_and_capacity\"><code>len</code></a>.\r\n>>  The length is a compile-time constant if the string is a constant.\r\n>> -A string's bytes can be accessed by integer indices 0 through\r\n>> -<code>len(s)-1</code> (\u00a7<a href=\"#Indexes\">Indexes</a>).\r\n>> +A string's bytes can be accessed by integer <a\r\n>> href=\"#Index_expressions\">indices</a>\r\n>> +0 through <code>len(s)-1</code>.\r\n>>  It is illegal to take the address of such an element; if\r\n>>  <code>s[i]</code> is the <code>i</code>'th byte of a\r\n>>  string, <code>&amp;s[i]</code> is invalid.\r\n>> @@ -819,8 +819,8 @@\r\n>>  <a href=\"#Constant_expressions\">constant expression</a> that evaluates to\r\n>> a non-negative\r\n>>  integer value.  The length of array <code>a</code> can be discovered\r\n>>  using the built-in function <a\r\n>> href=\"#Length_and_capacity\"><code>len</code></a>.\r\n>> -The elements can be indexed by integer\r\n>> -indices 0 through <code>len(a)-1</code> (\u00a7<a\r\n>> href=\"#Indexes\">Indexes</a>).\r\n>> +The elements can be addressed by integer <a\r\n>> href=\"#Index_expressions\">indices</a>\r\n>> +indices 0 through <code>len(a)-1</code>.\r\n>>  Array types are always one-dimensional but may be composed to form\r\n>>  multi-dimensional types.\r\n>>  </p>\r\n>> @@ -850,8 +850,8 @@\r\n>>  Like arrays, slices are indexable and have a length.  The length of a\r\n>>  slice <code>s</code> can be discovered by the built-in function\r\n>>  <a href=\"#Length_and_capacity\"><code>len</code></a>; unlike with arrays\r\n>> it may change during\r\n>> -execution.  The elements can be addressed by integer indices 0\r\n>> -through <code>len(s)-1</code> (\u00a7<a href=\"#Indexes\">Indexes</a>).  The\r\n>> slice index of a\r\n>> +execution.  The elements can be addressed by integer <a\r\n>> href=\"#Index_expressions\">indices</a>\r\n>> +0 through <code>len(s)-1</code>.  The slice index of a\r\n>>  given element may be less than the index of the same element in the\r\n>>  underlying array.\r\n>>  </p>\r\n>> @@ -1257,7 +1257,7 @@\r\n>>  built-in function <a href=\"#Length_and_capacity\"><code>len</code></a>\r\n>>  and may change during execution. Elements may be added during execution\r\n>>  using <a href=\"#Assignments\">assignments</a> and retrieved with\r\n>> -<a href=\"#Indexes\">index</a> expressions; they may be removed with the\r\n>> +<a href=\"#Index_expressions\">index expressions</a>; they may be removed\r\n>> with the\r\n>>  <a href=\"#Deletion_of_map_elements\"><code>delete</code></a> built-in\r\n>> function.\r\n>>  </p>\r\n>>  <p>\r\n>> @@ -2120,7 +2120,7 @@\r\n>>  to the respective field, element, and key types of the LiteralType;\r\n>>  there is no additional conversion.\r\n>>  The key is interpreted as a field name for struct literals,\r\n>> -an index expression for array and slice literals, and a key for map\r\n>> literals.\r\n>> +an index for array and slice literals, and a key for map literals.\r\n>>  For map literals, all elements must have a key. It is an error\r\n>>  to specify multiple elements with the same field name or\r\n>>  constant key value.\r\n>> @@ -2480,7 +2480,7 @@\r\n>>  -->\r\n>>\r\n>>\r\n>> -<h3 id=\"Indexes\">Indexes</h3>\r\n>> +<h3 id=\"Index_expressions\">Index expressions</h3>\r\n>>\r\n>>  <p>\r\n>>  A primary expression of the form\r\n>> @@ -2596,7 +2596,7 @@\r\n>>  </pre>\r\n>>\r\n>>  <p>\r\n>> -constructs a substring or slice. The index expressions <code>low</code>\r\n>> and\r\n>> +constructs a substring or slice. The indices <code>low</code> and\r\n>>  <code>high</code> select which elements appear in the result. The result\r\n>> has\r\n>>  indices starting at 0 and length equal to\r\n>>  <code>high</code>&nbsp;-&nbsp;<code>low</code>.\r\n>> @@ -2619,7 +2619,7 @@\r\n>>  </pre>\r\n>>\r\n>>  <p>\r\n>> -For convenience, any of the index expressions may be omitted. A missing\r\n>> <code>low</code>\r\n>> +For convenience, any of the indices may be omitted. A missing\r\n>> <code>low</code>\r\n>>  index defaults to zero; a missing <code>high</code> index defaults to the\r\n>> length of the\r\n>>  sliced operand:\r\n>>  </p>\r\n>> @@ -4010,7 +4010,7 @@\r\n>>\r\n>>  <p>\r\n>>  The assignment proceeds in two phases.\r\n>> -First, the operands of <a href=\"#Indexes\">index expressions</a>\r\n>> +First, the operands of <a href=\"#Index_expressions\">index expressions</a>\r\n>>  and <a href=\"#Address_operators\">pointer indirections</a>\r\n>>  (including implicit pointer indirections in <a\r\n>> href=\"#Selectors\">selectors</a>)\r\n>>  on the left and the expressions on the right are all\r\n>>\r\n>>\r\n>\r\n>\r\n>\r\n> --\r\n> Michael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n> 650-335-5765\r\n>\r\n",
			"disapproval": false,
			"date": "2012-12-08 00:19:44.555560",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org, rsc@golang.org, iant@golang.org, ken@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-12-08 00:08:45.039540",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Awesome. When you get to this point, you're ready to be an international\r\nstandard. I remember just this normalization in OpenGL's spec/books\r\nfor *matrix, matrices\r\nand matrixes.* ;-)\r\n\r\nOn Fri, Dec 7, 2012 at 4:08 PM, <gri@golang.org> wrote:\r\n\r\n> Reviewers: r, rsc, iant, ken2,\r\n>\r\n> Message:\r\n> Hello r@golang.org, rsc@golang.org, iant@golang.org, ken@golang.org (cc:\r\n> golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> spec: consistently use \"indices\" (rather than \"indexes\")\r\n>\r\n> We have been using all three terms \"indices\", \"indexes\",\r\n> and \"index expressions\" indiscriminatly for index values.\r\n> With this change, \"index\" refers to an index value,\r\n> \"indices\" is the plural of \"index\", and \"index expression\"\r\n> refers to an array, slice, or map indexed by an index: a[x].\r\n>\r\n> Please review this at https://codereview.appspot.**com/6912056/<https://codereview.appspot.com/6912056/>\r\n>\r\n> Affected files:\r\n>   M doc/go_spec.html\r\n>\r\n>\r\n> Index: doc/go_spec.html\r\n> ==============================**==============================**=======\r\n> --- a/doc/go_spec.html\r\n> +++ b/doc/go_spec.html\r\n> @@ -1,6 +1,6 @@\r\n>  <!--{\r\n>         \"Title\": \"The Go Programming Language Specification\",\r\n> -       \"Subtitle\": \"Version of December 6, 2012\",\r\n> +       \"Subtitle\": \"Version of December 7, 2012\",\r\n>         \"Path\": \"/ref/spec\"\r\n>  }-->\r\n>\r\n> @@ -791,8 +791,8 @@\r\n>  The length of a string <code>s</code> (its size in bytes) can be\r\n> discovered using\r\n>  the built-in function <a href=\"#Length_and_capacity\"><**\r\n> code>len</code></a>.\r\n>  The length is a compile-time constant if the string is a constant.\r\n> -A string's bytes can be accessed by integer indices 0 through\r\n> -<code>len(s)-1</code> (\u00a7<a href=\"#Indexes\">Indexes</a>).\r\n> +A string's bytes can be accessed by integer <a href=\"#Index_expressions\">\r\n> **indices</a>\r\n> +0 through <code>len(s)-1</code>.\r\n>  It is illegal to take the address of such an element; if\r\n>  <code>s[i]</code> is the <code>i</code>'th byte of a\r\n>  string, <code>&amp;s[i]</code> is invalid.\r\n> @@ -819,8 +819,8 @@\r\n>  <a href=\"#Constant_expressions\">**constant expression</a> that evaluates\r\n> to a non-negative\r\n>  integer value.  The length of array <code>a</code> can be discovered\r\n>  using the built-in function <a href=\"#Length_and_capacity\"><**\r\n> code>len</code></a>.\r\n> -The elements can be indexed by integer\r\n> -indices 0 through <code>len(a)-1</code> (\u00a7<a href=\"#Indexes\">Indexes</a>).\r\n> +The elements can be addressed by integer <a href=\"#Index_expressions\">**\r\n> indices</a>\r\n> +indices 0 through <code>len(a)-1</code>.\r\n>  Array types are always one-dimensional but may be composed to form\r\n>  multi-dimensional types.\r\n>  </p>\r\n> @@ -850,8 +850,8 @@\r\n>  Like arrays, slices are indexable and have a length.  The length of a\r\n>  slice <code>s</code> can be discovered by the built-in function\r\n>  <a href=\"#Length_and_capacity\"><**code>len</code></a>; unlike with\r\n> arrays it may change during\r\n> -execution.  The elements can be addressed by integer indices 0\r\n> -through <code>len(s)-1</code> (\u00a7<a href=\"#Indexes\">Indexes</a>).  The\r\n> slice index of a\r\n> +execution.  The elements can be addressed by integer <a\r\n> href=\"#Index_expressions\">**indices</a>\r\n> +0 through <code>len(s)-1</code>.  The slice index of a\r\n>  given element may be less than the index of the same element in the\r\n>  underlying array.\r\n>  </p>\r\n> @@ -1257,7 +1257,7 @@\r\n>  built-in function <a href=\"#Length_and_capacity\"><**code>len</code></a>\r\n>  and may change during execution. Elements may be added during execution\r\n>  using <a href=\"#Assignments\">**assignments</a> and retrieved with\r\n> -<a href=\"#Indexes\">index</a> expressions; they may be removed with the\r\n> +<a href=\"#Index_expressions\">**index expressions</a>; they may be\r\n> removed with the\r\n>  <a href=\"#Deletion_of_map_**elements\"><code>delete</code><**/a> built-in\r\n> function.\r\n>  </p>\r\n>  <p>\r\n> @@ -2120,7 +2120,7 @@\r\n>  to the respective field, element, and key types of the LiteralType;\r\n>  there is no additional conversion.\r\n>  The key is interpreted as a field name for struct literals,\r\n> -an index expression for array and slice literals, and a key for map\r\n> literals.\r\n> +an index for array and slice literals, and a key for map literals.\r\n>  For map literals, all elements must have a key. It is an error\r\n>  to specify multiple elements with the same field name or\r\n>  constant key value.\r\n> @@ -2480,7 +2480,7 @@\r\n>  -->\r\n>\r\n>\r\n> -<h3 id=\"Indexes\">Indexes</h3>\r\n> +<h3 id=\"Index_expressions\">Index expressions</h3>\r\n>\r\n>  <p>\r\n>  A primary expression of the form\r\n> @@ -2596,7 +2596,7 @@\r\n>  </pre>\r\n>\r\n>  <p>\r\n> -constructs a substring or slice. The index expressions <code>low</code>\r\n> and\r\n> +constructs a substring or slice. The indices <code>low</code> and\r\n>  <code>high</code> select which elements appear in the result. The result\r\n> has\r\n>  indices starting at 0 and length equal to\r\n>  <code>high</code>&nbsp;-&nbsp;**<code>low</code>.\r\n> @@ -2619,7 +2619,7 @@\r\n>  </pre>\r\n>\r\n>  <p>\r\n> -For convenience, any of the index expressions may be omitted. A missing\r\n> <code>low</code>\r\n> +For convenience, any of the indices may be omitted. A missing\r\n> <code>low</code>\r\n>  index defaults to zero; a missing <code>high</code> index defaults to the\r\n> length of the\r\n>  sliced operand:\r\n>  </p>\r\n> @@ -4010,7 +4010,7 @@\r\n>\r\n>  <p>\r\n>  The assignment proceeds in two phases.\r\n> -First, the operands of <a href=\"#Indexes\">index expressions</a>\r\n> +First, the operands of <a href=\"#Index_expressions\">**index\r\n> expressions</a>\r\n>  and <a href=\"#Address_operators\">**pointer indirections</a>\r\n>  (including implicit pointer indirections in <a\r\n> href=\"#Selectors\">selectors</**a>)\r\n>  on the left and the expressions on the right are all\r\n>\r\n>\r\n>\r\n\r\n\r\n-- \r\nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n650-335-5765\r\n",
			"disapproval": false,
			"date": "2012-12-08 00:14:21.555270",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=67026ef0e79e ***\n\nspec: consistently use \"indices\" (rather than \"indexes\")\n\nWe have been using all three terms \"indices\", \"indexes\",\nand \"index expressions\" indiscriminatly for index values.\nWith this change, \"index\" refers to an index value,\n\"indices\" is the plural of \"index\", and \"index expression\"\nrefers to an array, slice, or map indexed by an index: a[x].\n\nR=r, rsc, iant, ken, mtj\nCC=golang-dev\nhttps://codereview.appspot.com/6912056",
			"disapproval": false,
			"date": "2012-12-10 19:56:14.433070",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-12-10 18:40:41.429950",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6912056/diff/6001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/6912056/diff/6001/doc/go_spec.html#newcode3\ndoc/go_spec.html:3: \"Subtitle\": \"Version of December 7, 2012\",\ns/7/10/",
			"disapproval": false,
			"date": "2012-12-10 19:20:54.131050",
			"approval": true
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6912056: spec: consistently use \"indices\" (rather than \"indexes\")",
	"created": "2012-12-07 23:48:30.462770",
	"patchsets": [
		1,
		1001,
		1002,
		6001,
		3
	],
	"modified": "2012-12-12 17:07:37.071310",
	"closed": true,
	"issue": 6912056
}