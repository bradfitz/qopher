{
	"description": "sync/atomic: nil check before cas\n\nFixes issue 4422.\n\nImplements the suggestion by Remy and Minux as described in the issue.\n\nloco(~/src) % go run issue4422.go\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal 0xb code=0x1 addr=0x0 pc=0x2aa20]\n\ngoroutine 1 [running]:\nsync/atomic.CompareAndSwapUint32(0x0, 0x0, 0x1, 0x2, 0x0, ...)\n        /home/dfc/go/src/pkg/sync/atomic/asm_linux_arm.s:33 +0x8\nsync.(*Mutex).Lock(0x0, 0x1e1b4)\n        /home/dfc/go/src/pkg/sync/mutex.go:43 +0x38\nmain.main()\n        /home/dfc/src/issue4422.go:9 +0x28",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"remyoudompheng@gmail.com",
		"minux.ma@gmail.com",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks good once Minux is happy.\r\n",
			"disapproval": false,
			"date": "2012-12-15 18:15:55.108590",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello remyoudompheng@gmail.com, minux.ma@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-16 02:16:56.854910",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Dec 16, 2012 at 10:16 AM, <dave@cheney.net> wrote:\r\n\r\n> loco(~/src) % GOTRACEBACK=2 go run issue4422.go 2>&1 | head -n20\r\n>\r\n> panic: runtime error: invalid memory address or nil pointer dereference\r\n> [signal 0xb code=0x1 addr=0x0 pc=0x2aaf0]\r\n>\r\n> goroutine 1 [running]:\r\n> runtime.panic(0x2c008, 0x10500100)\r\n>         /home/dfc/go/src/pkg/runtime/**panic.c:154 +0x120\r\n> runtime.panicstring(0x53d73, 0x0)\r\n>         /home/dfc/go/src/pkg/runtime/**panic.c:384 +0x8c\r\n> runtime.sigpanic()\r\n>         /home/dfc/go/src/pkg/runtime/**thread_linux.c:199 +0x114\r\n>\r\n> sync/atomic.**CompareAndSwapUint64(0x0, 0x1)\r\n>         /home/dfc/go/src/pkg/sync/**atomic/asm_linux_arm.s:132 +0x4\r\n>\r\nwhy no main.main() here? the backtracer is still confused.\r\n\r\n>  runtime.main()\r\n>         /home/dfc/go/src/pkg/runtime/**proc.c:248 +0x90\r\n> runtime.main()\r\n>         /home/dfc/go/src/pkg/runtime/**proc.c:248 +0x90\r\n\r\nschedule(0x0, 0x1)\r\n>         /home/dfc/go/src/pkg/runtime/**proc.c:876\r\n> runtime.main()\r\n>         /home/dfc/go/src/pkg/runtime/**proc.c:225\r\n",
			"disapproval": false,
			"date": "2012-12-16 02:23:40.004900",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6939056/diff/2001/src/pkg/sync/atomic/asm_linux_arm.s\nFile src/pkg/sync/atomic/asm_linux_arm.s (right):\n\nhttps://codereview.appspot.com/6939056/diff/2001/src/pkg/sync/atomic/asm_linux_arm.s#newcode83\nsrc/pkg/sync/atomic/asm_linux_arm.s:83: MOVW\taddr+0(FP), R2 // ptr\nafter some thought, i think we can just add a load from\nR2 here (just don't use register R0 or R1 as destination).\nthe other two cases are both done by our code, and the\nbacktracer should be able to do its job.",
			"disapproval": false,
			"date": "2012-12-15 19:02:37.547700",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL. Now we get\n\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal 0xb code=0x1 addr=0x0 pc=0x2aaf0]\n\ngoroutine 1 [running]:\nsync/atomic.CompareAndSwapUint64(0x0, 0x1)\n        /home/dfc/go/src/pkg/sync/atomic/asm_linux_arm.s:132 +0x4\n\ngoroutine 2 [syscall]:\ncreated by runtime.main\n        /home/dfc/go/src/pkg/runtime/proc.c:225\nexit status 2",
			"disapproval": false,
			"date": "2012-12-16 01:42:25.584620",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Done, and removed all the other cleanups in that file, the diff is now very short.\n\nloco(~/src) % GOTRACEBACK=2 go run issue4422.go 2>&1 | head -n20\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal 0xb code=0x1 addr=0x0 pc=0x2aaf0]\n\ngoroutine 1 [running]:\nruntime.panic(0x2c008, 0x10500100)\n        /home/dfc/go/src/pkg/runtime/panic.c:154 +0x120\nruntime.panicstring(0x53d73, 0x0)\n        /home/dfc/go/src/pkg/runtime/panic.c:384 +0x8c\nruntime.sigpanic()\n        /home/dfc/go/src/pkg/runtime/thread_linux.c:199 +0x114\nsync/atomic.CompareAndSwapUint64(0x0, 0x1)\n        /home/dfc/go/src/pkg/sync/atomic/asm_linux_arm.s:132 +0x4\nruntime.main()\n        /home/dfc/go/src/pkg/runtime/proc.c:248 +0x90\nruntime.main()\n        /home/dfc/go/src/pkg/runtime/proc.c:248 +0x90\nschedule(0x0, 0x1)\n        /home/dfc/go/src/pkg/runtime/proc.c:876\nruntime.main()\n        /home/dfc/go/src/pkg/runtime/proc.c:225\n\nhttps://codereview.appspot.com/6939056/diff/12002/src/pkg/sync/atomic/asm_linux_arm.s\nFile src/pkg/sync/atomic/asm_linux_arm.s (right):\n\nhttps://codereview.appspot.com/6939056/diff/12002/src/pkg/sync/atomic/asm_linux_arm.s#newcode82\nsrc/pkg/sync/atomic/asm_linux_arm.s:82: MOVW\taddr+0(FP), R2\t// ptr\nOn 2012/12/16 01:58:53, minux wrote:\n> why reorder this line?\n\nWhoops. fixed",
			"disapproval": false,
			"date": "2012-12-16 02:16:34.275360",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello remyoudompheng@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-12-15 12:41:33.967770",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6939056/diff/2001/src/pkg/sync/atomic/asm_linux_arm.s\nFile src/pkg/sync/atomic/asm_linux_arm.s (right):\n\nhttps://codereview.appspot.com/6939056/diff/2001/src/pkg/sync/atomic/asm_linux_arm.s#newcode130\nsrc/pkg/sync/atomic/asm_linux_arm.s:130: TEXT \u00b7CompareAndSwapUint64(SB),7,$-4\ni think you also need to do the same here.",
			"disapproval": false,
			"date": "2012-12-15 12:45:54.958400",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for your comments. PTAL.\n\nhttps://codereview.appspot.com/6939056/diff/2001/src/pkg/sync/atomic/asm_linux_arm.s\nFile src/pkg/sync/atomic/asm_linux_arm.s (right):\n\nhttps://codereview.appspot.com/6939056/diff/2001/src/pkg/sync/atomic/asm_linux_arm.s#newcode83\nsrc/pkg/sync/atomic/asm_linux_arm.s:83: MOVW\taddr+0(FP), R2 // ptr\nOn 2012/12/15 19:02:37, minux wrote:\n> after some thought, i think we can just add a load from\n> R2 here (just don't use register R0 or R1 as destination).\n> the other two cases are both done by our code, and the\n> backtracer should be able to do its job.\n\nDone. But I did use R0 as the destination as it is overwritten in the following instruction. This gives us (for cas64)\n\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal 0xb code=0x1 addr=0x0 pc=0x2aa3c]\n\ngoroutine 1 [running]:\nmain.main()\n        /home/dfc/src/issue4422.go:9 +0x48\n\ngoroutine 2 [syscall]:\ncreated by runtime.main\n        /home/dfc/go/src/pkg/runtime/proc.c:225\nexit status 2",
			"disapproval": false,
			"date": "2012-12-16 01:23:22.213790",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Dec 16, 2012 at 9:23 AM, <dave@cheney.net> wrote:\r\n\r\n> Done. But I did use R0 as the destination as it is overwritten in the\r\n> following instruction. This gives us (for cas64)\r\n>\r\n> panic: runtime error: invalid memory address or nil pointer dereference\r\n> [signal 0xb code=0x1 addr=0x0 pc=0x2aa3c]\r\n>\r\n> goroutine 1 [running]:\r\n> main.main()\r\n>         /home/dfc/src/issue4422.go:9 +0x48\r\n>\r\n> goroutine 2 [syscall]:\r\n> created by runtime.main\r\n>         /home/dfc/go/src/pkg/runtime/**proc.c:225\r\n> exit status 2\r\n>\r\nI overlooked the fact that kernelCAS64 is a local function which won't be\r\nshown in\r\nback traces. One solution is remove all <> from function names, the other\r\nis just\r\ndo the check for nil in CompareAndSwapUint64.\r\n",
			"disapproval": false,
			"date": "2012-12-16 01:32:35.927740",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/12/16 01:42:25, dfc wrote:\n> panic: runtime error: invalid memory address or nil pointer dereference\n> [signal 0xb code=0x1 addr=0x0 pc=0x2aaf0]\n> \n> goroutine 1 [running]:\n> sync/atomic.CompareAndSwapUint64(0x0, 0x1)\n>         /home/dfc/go/src/pkg/sync/atomic/asm_linux_arm.s:132 +0x4\nIf you set GOTRACEBACK=2 does the output change?\n\nhttps://codereview.appspot.com/6939056/diff/12002/src/pkg/sync/atomic/asm_linux_arm.s\nFile src/pkg/sync/atomic/asm_linux_arm.s (right):\n\nhttps://codereview.appspot.com/6939056/diff/12002/src/pkg/sync/atomic/asm_linux_arm.s#newcode82\nsrc/pkg/sync/atomic/asm_linux_arm.s:82: MOVW\taddr+0(FP), R2\t// ptr\nwhy reorder this line?",
			"disapproval": false,
			"date": "2012-12-16 01:58:53.827240",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi Minux,\n\nDo you have any suggestions to fix the backtracer? Do we need to remove the NOSPLIT def from the asm call ?\n\nCheers\n\nDave",
			"disapproval": false,
			"date": "2012-12-18 23:37:57.739260",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What if you try main calling f calling g calling CompareAndSwapUint64?\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-12-18 23:52:37.396520",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think the cost of those additional instructions is minimal. +1 to\r\nthis approach with a TODO/issue to fix the backtracer.\r\n\r\n@minux, thank you again for your hard work. I\"ll add this change to\r\nthe CL. Do you want to raise the issue to improve the backtracer\r\n(probably don't need to be for Go 1.1.)\r\n\r\nOn Thu, Dec 20, 2012 at 8:00 AM, minux <minux.ma@gmail.com> wrote:\r\n>\r\n> On Thu, Dec 20, 2012 at 4:58 AM, minux <minux.ma@gmail.com> wrote:\r\n>>\r\n>> The only solution I found is to save LR onto stack before deref the\r\n>> pointer.\r\n>\r\n> Oh, this is not the only solution, but the only quick and easy solution.\r\n> the other alternative is to fix the backtracer to not assume return address\r\n> is always on the stack.\r\n>\r\n> Before I set out to fix the backtracer, I'd like to hear opinions about it.\r\n",
			"disapproval": false,
			"date": "2012-12-19 21:03:13.905640",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Dec 19, 2012 at 7:52 AM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> What if you try main calling f calling g calling CompareAndSwapUint64?\r\n>\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal 0xb code=0x1 addr=0x0 pc=0x2af08]\r\n\r\ngoroutine 1 [running]:\r\nsync/atomic.CompareAndSwapUint64(0x0, 0x0)\r\n/root/fast/go.hg/src/pkg/sync/atomic/asm_linux_arm.s:132 +0x4\r\nmain.f()\r\n/root/fast/go.hg/src/atomic.go:11 +0x20\r\nmain.f()\r\n/root/fast/go.hg/src/atomic.go:11 +0x20\r\n\r\ngoroutine 2 [syscall]:\r\ncreated by runtime.main\r\n/root/fast/go.hg/src/pkg/runtime/proc.c:225\r\n",
			"disapproval": false,
			"date": "2012-12-19 19:06:52.894760",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Dec 19, 2012 at 7:37 AM, <dave@cheney.net> wrote:\r\n\r\n> Do you have any suggestions to fix the backtracer? Do we need to remove\r\n> the NOSPLIT def from the asm call ?\r\n>\r\nThe only solution I found is to save LR onto stack before deref the pointer.\r\n\r\ndiff -r e7cd0a82d669 src/pkg/sync/atomic/asm_linux_arm.s\r\n--- a/src/pkg/sync/atomic/asm_linux_arm.s Tue Dec 18 16:38:00 2012 -0800\r\n+++ b/src/pkg/sync/atomic/asm_linux_arm.s Wed Dec 19 20:56:34 2012 +0000\r\n@@ -127,6 +128,10 @@\r\n  B   \u00b7CompareAndSwapUint64(SB)\r\n\r\n TEXT \u00b7CompareAndSwapUint64(SB),7,$-4\r\n+ MOVW.W R14,-4(R13) // just for the backtracer\r\n+ MOVW addr+0(FP), R1\r\n+ MOVW (R1), R0 // check that ptr is not nil\r\n+ ADD $4, R13\r\n  MOVW armCAS64(SB), R0\r\n  CMP $0, R0\r\n  MOVW.NE R0, PC\r\n",
			"disapproval": false,
			"date": "2012-12-19 20:58:56.303160",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Dec 20, 2012 at 4:58 AM, minux <minux.ma@gmail.com> wrote:\r\n\r\n> The only solution I found is to save LR onto stack before deref the\r\n> pointer.\r\n>\r\nOh, this is not the only solution, but the only quick and easy solution.\r\nthe other alternative is to fix the backtracer to not assume return address\r\nis always on the stack.\r\n\r\nBefore I set out to fix the backtracer, I'd like to hear opinions about it.\r\n",
			"disapproval": false,
			"date": "2012-12-19 21:01:03.645480",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Dec 20, 2012 at 5:03 AM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> @minux, thank you again for your hard work. I\"ll add this change to\r\n> the CL. Do you want to raise the issue to improve the backtracer\r\n> (probably don't need to be for Go 1.1.)\r\n\r\nI will see if the backtracer is easy to fix, feel free to file an issue and\r\nassign\r\nto me with label Go1.1Maybe, as i think this issue won't affect most people.\r\n\r\nthis CL LGTM with the 2 new lines of code (please add some comment for\r\nit though).\r\n",
			"disapproval": false,
			"date": "2012-12-19 21:07:30.524920",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "@minux,\n\nI applied your suggestion but on my pandaboard it was not a success\n\npandaboard(~/src) % go run issue4422.go\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal 0xb code=0x1 addr=0x0 pc=0xffff0f70]\n\ngoroutine 1 [running]:\n\ngoroutine 2 [syscall]:\ncreated by runtime.main\n        /home/dfc/go/src/pkg/runtime/proc.c:225\nexit status 2\n\nAt this point I'm not really adding anything to this CL so I will remove my name from the issue and others can use this CL as a starting point.",
			"disapproval": false,
			"date": "2012-12-20 05:40:28.403120",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Dec 20, 2012 at 1:40 PM, <dave@cheney.net> wrote:\r\n\r\n> @minux,\r\n>\r\n> I applied your suggestion but on my pandaboard it was not a succes\r\n>\r\nmy bad.\r\nyou need move the line \"MOVW.W  R14,-4(R13)     // just for the backtracer\"\r\nbelow\r\nthe line \"MOVW    addr+0(FP), R1\", as the linker is confused by the our\r\nmanipulation\r\nof R13.\r\n",
			"disapproval": false,
			"date": "2012-12-20 18:37:53.702930",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The whole runtime assumes faults do not happen when LR is live, and\r\nthis code is breaking that assumption. Adding the statements Minux\r\nsuggested should make the assumption true again, so that seems fine to\r\nme.\r\n",
			"disapproval": false,
			"date": "2012-12-20 19:18:22.222400",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Friday, December 21, 2012, Russ Cox wrote:\r\n\r\n> The whole runtime assumes faults do not happen when LR is live, and\r\n\r\ni think this assumption is not valid, even for Go programs when the inliner\r\nis disabled, as the linker won't save lr to stack if it is a leaf func.\r\n\r\n$ cat t.go\r\npackage main\r\n\r\nfunc f() {\r\n        var a *int\r\n        *a = 1\r\n}\r\n\r\nfunc main() {\r\n        f()\r\n}\r\n$ go tool 5g -l t.go\r\n$ go tool 5l -a t.5\r\ncodeblk [0x2000,0x17fe8) at offset 0x1000\r\n002000  main.f               | (3)      TEXT    main.f+0(SB),$-4-0\r\n002000  e3a02000             | (4)      MOVW    $0,R2\r\n002004  e1a00002             | (5)      MOVW    R2,R0\r\n002008  e3a01001             | (5)      MOVW    $1,R1\r\n00200c  e5821000             | (5)      MOVW    R1,0(R2)\r\n002010  e28ef000             | (6)      B       ,0(R14)\r\n002014  main.main            | (8)      TEXT    main.main+0(SB),$0-0\r\n// snip\r\n$ ./5.out\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal 0xb code=0x2 addr=0x0 pc=0x200c]\r\n\r\ngoroutine 1 [running]:\r\nmain.f()\r\n        /var/mobile/go/t.go:5 +0xc // where is the main.main function?\r\n\r\ngoroutine 2 [syscall]:\r\ncreated by runtime.main\r\n        /var/mobile/go/src/pkg/runtime/proc.c:226\r\n\r\ni think we need to fix the backtracer to always consider lr for the first\r\nframe, and then trace the frames on stack. I think this is safe, as we\r\ndo't use lr for any other purpose.\r\n\r\nthis code is breaking that assumption. Adding the statements Minux\r\n> suggested should make the assumption true again, so that seems fine to\r\n\r\nme.\r\n",
			"disapproval": false,
			"date": "2012-12-20 21:10:39.255150",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> i think we need to fix the backtracer to always consider lr for the first\r\n> frame, and then trace the frames on stack. I think this is safe, as we\r\n> do't use lr for any other purpose.\r\n\r\nthe backtracer already does that. the problem is that if a signal happens\r\nwhile lr is live, the extra stack frames laid down by the signal handler\r\nhave nowhere to store the lr.\r\n\r\nright now when a fault happens on arm we make it look like the faulting\r\ncode called sigpanic directly. that makes it easy to backtrace over the\r\nfault, but it leaves nowhere to put the lr. however, we also never return\r\nfrom sigpanic, so we don't have to be 100% accurate about the details as\r\nlong as we keep the backtracer in the loop.\r\n\r\nthe current signal_linux_arm.c says:\r\n\r\n// Make it look like a call to the signal func.\r\n// Have to pass arguments out of band since\r\n// augmenting the stack frame would break\r\n// the unwinding code.\r\ngp->sig = sig;\r\ngp->sigcode0 = info->si_code;\r\ngp->sigcode1 = r->fault_address;\r\ngp->sigpc = r->arm_pc;\r\n\r\n// If this is a leaf function, we do smash LR,\r\n// but we're not going back there anyway.\r\n// Don't bother smashing if r->arm_pc is 0,\r\n// which is probably a call to a nil func: the\r\n// old link register is more useful in the stack trace.\r\nif(r->arm_pc != 0)\r\nr->arm_lr = r->arm_pc;\r\n// In case we are panicking from external C code\r\nr->arm_r10 = (uintptr)gp;\r\nr->arm_r9 = (uintptr)m;\r\nr->arm_pc = (uintptr)runtime\u00b7sigpanic;\r\nreturn;\r\n\r\nit looks like we need to make this push the arm lr register onto the stack,\r\nand then the traceback code can pull it off here:\r\n\r\n// Unwind to next frame.\r\npc = lr;\r\nlr = 0;\r\nsp = fp;\r\nfp = nil;\r\nafter that it would do\r\n\r\nif(waspanic)\r\n lr = *sp++;\r\n\r\nor something like that.\r\n\r\nruss\r\n",
			"disapproval": false,
			"date": "2012-12-22 15:29:38.756660",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i think you should store it on the stack.\r\nsigpanic can trigger a panic, which can trigger deferred calls, which can\r\nthen panic, ad infinitum.\r\nalso instead of panicking those deferred calls can block, making the\r\ngoroutine reschedule, so it might end up executing on different m's\r\nthroughout.\r\n\r\nstoring lr on the stack keeps it attached to the goroutine and just\r\nrequires helping the backtrace routines get past it. they already know\r\nabout waspanic, so it's not a big deal to add a few more lines there.\r\n\r\nruss\r\n",
			"disapproval": false,
			"date": "2012-12-22 15:45:26.222500",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Dec 22, 2012 at 11:29 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> the backtracer already does that. the problem is that if a signal happens\r\n> while lr is live, the extra stack frames laid down by the signal handler\r\n> have nowhere to store the lr.\r\n>\r\ncan we store the lr into (otherwise unused) m->tls array in\r\nruntime.sighandler()?\r\nassuming only one signal (or less than 8 signals) could occur in a row.\r\n",
			"disapproval": false,
			"date": "2012-12-22 15:40:37.379620",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Dec 22, 2012 at 11:45 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> i think you should store it on the stack.\r\n> sigpanic can trigger a panic, which can trigger deferred calls, which can\r\n> then panic, ad infinitum.\r\n> also instead of panicking those deferred calls can block, making the\r\n> goroutine reschedule, so it might end up executing on different m's\r\n> throughout.\r\n>\r\n> storing lr on the stack keeps it attached to the goroutine and just\r\n> requires helping the backtrace routines get past it. they already know\r\n> about waspanic, so it's not a big deal to add a few more lines there.\r\n>\r\nsure. will prepare a CL.\r\n",
			"disapproval": false,
			"date": "2012-12-22 15:50:33.648390",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Minux, still planning to prepare the LR CL?",
			"disapproval": false,
			"date": "2013-02-01 19:57:57.984470",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Minux, still planning to prepare the LR CL?",
			"disapproval": false,
			"date": "2013-02-01 19:58:01.165150",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Feb 2, 2013 at 3:57 AM, <rsc@golang.org> wrote:\r\n\r\n> Minux, still planning to prepare the LR CL?\r\n>\r\nhttps://codereview.appspot.com/7289047\r\n",
			"disapproval": false,
			"date": "2013-02-03 20:01:12.358470",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 6939056: sync/atomic: nil check before cas",
	"created": "2012-12-15 12:38:52.083630",
	"patchsets": [
		1,
		2001,
		9001,
		12002,
		13001,
		20001
	],
	"modified": "2013-02-09 21:28:23.613490",
	"closed": true,
	"issue": 6939056
}