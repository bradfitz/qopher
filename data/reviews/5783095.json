{
	"description": "all: consistent error message (part 1)",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5783095/diff/3/src/pkg/fmt/scan_test.go\nFile src/pkg/fmt/scan_test.go (right):\n\nhttp://codereview.appspot.com/5783095/diff/3/src/pkg/fmt/scan_test.go#newcode829\nsrc/pkg/fmt/scan_test.go:829: if err == errors.New(\"fmt: input does not match format\") || err == io.ErrUnexpectedEOF {\nOn 2012/03/13 12:17:43, albert.strasheim wrote:\n> is this code right? I don't think any existing error will compare equal to the\n> output of errors.New?\n\nYeah, errors.New gives a new value each time. The existing code was broken, but I guess the test passes without it. Maybe just drop the first clause?",
			"disapproval": false,
			"date": "2012-03-13 12:23:40.534715",
			"approval": false
		},
		{
			"sender": "robert.hencke@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"dsymonds@golang.org",
				"r@golang.org",
				"robert.hencke@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5783095/diff/3/src/pkg/database/sql/convert.go\nFile src/pkg/database/sql/convert.go (right):\n\nhttp://codereview.appspot.com/5783095/diff/3/src/pkg/database/sql/convert.go#newcode26\nsrc/pkg/database/sql/convert.go:26: return nil, fmt.Errorf(\"sql: converting argument #%d's type: %v\", n+1, err)\nIs part one only targeting errors.New?  If not, would these types of calls be good candidates as well?",
			"disapproval": false,
			"date": "2012-03-13 12:32:28.168964",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Mar 13, 2012 at 8:26 PM, Rob 'Commander' Pike <r@golang.org> wrote:\n\n> I'm reluctant to change so many files right when we're trying to calm\n> things down. Can this wait? Should it wait?\n\nIt depends on whether we think error messages are part of Go 1 interface\nthat must be compatible\nthough all of Go 1.x.\n\nI think several of the changes need to be done right now for consistency in\none given package, and if\nwe decide that the others can be changed after Go 1, I'm glad to wait.\n",
			"disapproval": false,
			"date": "2012-03-13 12:48:36.841018",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Mar 13, 2012 at 8:32 PM, <robert.hencke@gmail.com> wrote:\n\n>\n> http://codereview.appspot.com/**5783095/diff/3/src/pkg/**\n> database/sql/convert.go<http://codereview.appspot.com/5783095/diff/3/src/pkg/database/sql/convert.go>\n> File src/pkg/database/sql/convert.**go (right):\n>\n> http://codereview.appspot.com/**5783095/diff/3/src/pkg/**\n> database/sql/convert.go#**newcode26<http://codereview.appspot.com/5783095/diff/3/src/pkg/database/sql/convert.go#newcode26>\n> src/pkg/database/sql/convert.**go:26: return nil, fmt.Errorf(\"sql:\n> converting argument #%d's type: %v\", n+1, err)\n> Is part one only targeting errors.New?  If not, would these types of\n> calls be good candidates as well?\n>\nThat will be part 3 (http://codereview.appspot.com/5794075/).\nPart 1 is about half of the changes directly related to errors.New.\n",
			"disapproval": false,
			"date": "2012-03-13 12:50:17.760364",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm reluctant to change so many files right when we're trying to calm\nthings down. Can this wait? Should it wait?\n\n-rob\n",
			"disapproval": false,
			"date": "2012-03-13 12:26:56.260459",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Mar 13, 2012 at 9:28 PM, Russ Cox <rsc@golang.org> wrote:\n\n> Let's wait on this until after Go 1.\n> It is not always helpful to have the prefix (sometimes it makes\n> errors look ridiculous when they get embedded in other errors),\n> and a mass change like this at the last minute is very likely\n> to introduce problems we don't realize.\n\nFine. I will propose a CL for the bug found in this review.\n",
			"disapproval": false,
			"date": "2012-03-13 13:32:30.531171",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-03-13 09:55:51.535255",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5783095/diff/3/src/pkg/fmt/scan_test.go\nFile src/pkg/fmt/scan_test.go (right):\n\nhttp://codereview.appspot.com/5783095/diff/3/src/pkg/fmt/scan_test.go#newcode829\nsrc/pkg/fmt/scan_test.go:829: if err == errors.New(\"fmt: input does not match format\") || err == io.ErrUnexpectedEOF {\nis this code right? I don't think any existing error will compare equal to the output of errors.New?",
			"disapproval": false,
			"date": "2012-03-13 12:17:43.012046",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Let's wait on this until after Go 1.\nIt is not always helpful to have the prefix (sometimes it makes\nerrors look ridiculous when they get embedded in other errors),\nand a mass change like this at the last minute is very likely\nto introduce problems we don't realize.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-03-13 13:28:12.853542",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2012-06-03 04:46:58.656307",
			"approval": false
		}
	],
	"owner_email": "minux.ma@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "minux",
	"subject": "code review 5783095: all: consistent error message (part 1)",
	"created": "2012-03-13 09:50:32.011123",
	"patchsets": [
		1,
		2001,
		3
	],
	"modified": "2012-06-03 04:46:58.656307",
	"closed": false,
	"issue": 5783095
}