{
	"description": "net/http: fix data race on countReader.n\n\nFixes issue 4220.",
	"cc": [
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"dvyukov@google.com"
	],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=57736947de5a ***\n\nnet/http: fix data race on countReader.n\n\nFixes issue 4220.\n\nR=dvyukov, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/6638053",
			"disapproval": false,
			"date": "2012-10-11 22:21:59.386480",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dvyukov@google.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-10-11 21:50:58.642750",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Thu, Oct 11, 2012 at 2:50 PM, <dave@cheney.net> wrote:\r\n\r\n> Reviewers: dvyukov, bradfitz,\r\n>\r\n> Message:\r\n> Hello dvyukov@google.com, bradfitz@golang.org (cc:\r\n> golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> net/http: fix data race on countReader.n\r\n>\r\n> Fixes issue 4220.\r\n>\r\n> Please review this at http://codereview.appspot.com/**6638053/<http://codereview.appspot.com/6638053/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/net/http/serve_test.go\r\n>\r\n>\r\n> Index: src/pkg/net/http/serve_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/http/serve_test.**go\r\n> +++ b/src/pkg/net/http/serve_test.**go\r\n> @@ -1063,7 +1063,7 @@\r\n>\r\n>  func (cr countReader) Read(p []byte) (n int, err error) {\r\n>         n, err = cr.r.Read(p)\r\n> -       *cr.n += int64(n)\r\n> +       atomic.AddInt64(cr.n, int64(n))\r\n>         return\r\n>  }\r\n>\r\n> @@ -1081,8 +1081,8 @@\r\n>         }))\r\n>         defer ts.Close()\r\n>\r\n> -       nWritten := int64(0)\r\n> -       req, _ := NewRequest(\"POST\", ts.URL, io.LimitReader(countReader{**neverEnding('a'),\r\n> &nWritten}, limit*200))\r\n> +       nWritten := new(int64)\r\n> +       req, _ := NewRequest(\"POST\", ts.URL, io.LimitReader(countReader{**neverEnding('a'),\r\n> nWritten}, limit*200))\r\n>\r\n>         // Send the POST, but don't care it succeeds or not.  The\r\n>         // remote side is going to reply and then close the TCP\r\n> @@ -1095,7 +1095,7 @@\r\n>         // the remote side hung up on us before we wrote too much.\r\n>         _, _ = DefaultClient.Do(req)\r\n>\r\n> -       if nWritten > limit*100 {\r\n> +       if atomic.LoadInt64(nWritten) > limit*100 {\r\n>                 t.Errorf(\"handler restricted the request body to %d bytes,\r\n> but client managed to write %d\",\r\n>                         limit, nWritten)\r\n>         }\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-11 22:04:47.352730",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dave@cheney.net",
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-10-12 07:11:40.760330",
			"approval": true
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 6638053: net/http: fix data race on countReader.n",
	"created": "2012-10-11 21:49:28.092970",
	"patchsets": [
		1,
		1001,
		2002,
		6001
	],
	"modified": "2012-10-13 03:47:31.607410",
	"closed": true,
	"issue": 6638053
}