{
	"description": "allocation package (for discussion)\n\nJust a sketch.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"borman@google.com",
		"dsymonds@golang.org",
		"r@golang.org",
		"adg@golang.org",
		"iant@google.com",
		"rsc@golang.org",
		"gri@golang.org"
	],
	"messages": [
		{
			"sender": "borman@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Sep 15, 2011 at 7:59 PM, <adg@golang.org> wrote:\n\n> I like this. It's cool.\n>\n>\n>\n> http://codereview.appspot.com/**5003056/diff/2001/src/pkg/**\n> allocation/alloc.go<http://codereview.appspot.com/5003056/diff/2001/src/pkg/allocation/alloc.go>\n> File src/pkg/allocation/alloc.go (right):\n>\n> http://codereview.appspot.com/**5003056/diff/2001/src/pkg/**\n> allocation/alloc.go#newcode58<http://codereview.appspot.com/5003056/diff/2001/src/pkg/allocation/alloc.go#newcode58>\n> src/pkg/allocation/alloc.go:**58: // referencing them.\n> On 2011/09/16 01:02:15, borman wrote:\n>\n>> If all you really want is a string from a slice of bytes, why not just\n>>\n> use\n>\n>> []byte(string)?\n>>\n>\n> Think of unmarshalling a protobuf. You want to allocate the memory once,\n> and then copy the contents of the various fields into your block of\n> memory and have Go values that refer to them. That's what this package\n> is for.\n\n\nBut why do they have to be in one block of memory?  I guess the argument has\nbeen to make it faster?\n",
			"disapproval": false,
			"date": "2011-09-16 03:50:23.886613",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"borman@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5003056/diff/2001/src/pkg/allocation/alloc.go\nFile src/pkg/allocation/alloc.go (right):\n\nhttp://codereview.appspot.com/5003056/diff/2001/src/pkg/allocation/alloc.go#newcode47\nsrc/pkg/allocation/alloc.go:47: b.used += t.Align() - (b.used % t.Align())\nOn 2011/09/16 00:16:20, borman wrote:\n> I don't think you want to increment b.used until you have determined the entire\n> object can be put in.\n\nyeah",
			"disapproval": false,
			"date": "2011-09-16 00:21:20.579739",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2011-09-15 23:53:08.181957",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Rob and I were discussing the gross things that goprotobuf does with unsafe\nfor efficiency.\n\nI proposed promoting some of the grossness up to a library, like this.\n\nThe idea is we could keep the grossness close to the core and keep\ngoprotobuf clean(er).\n\nThis example only has Int and String done.  You could imagine all the types.\n\n\nOn Thu, Sep 15, 2011 at 4:53 PM, <bradfitz@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg\n>\n>\n> Description:\n> allocation package (for discussion)\n>\n> Just a sketch.\n>\n> Please review this at http://codereview.appspot.com/**5003056/<http://codereview.appspot.com/5003056/>\n>\n> Affected files:\n>  A src/pkg/allocation/alloc.go\n>  A src/pkg/allocation/alloc_test.**go\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-09-15 23:54:50.166065",
			"approval": false
		},
		{
			"sender": "borman@google.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"borman@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Overall I like this idea.  I realize this CL is for discussion, but I have some detailed comments none the less.  I do think they discuss issues that should be carefully considered in a package like this.\n\nhttp://codereview.appspot.com/5003056/diff/2001/src/pkg/allocation/alloc.go\nFile src/pkg/allocation/alloc.go (right):\n\nhttp://codereview.appspot.com/5003056/diff/2001/src/pkg/allocation/alloc.go#newcode34\nsrc/pkg/allocation/alloc.go:34: remain = 0\nshould't this be a panic?  It should never happen.  Since this is using unsafe I think things should be really tight.\n\nhttp://codereview.appspot.com/5003056/diff/2001/src/pkg/allocation/alloc.go#newcode47\nsrc/pkg/allocation/alloc.go:47: b.used += t.Align() - (b.used % t.Align())\nI don't think you want to increment b.used until you have determined the entire object can be put in.\n\nhttp://codereview.appspot.com/5003056/diff/2001/src/pkg/allocation/alloc.go#newcode58\nsrc/pkg/allocation/alloc.go:58: // referencing them.\nWhy pass in a []byte?  I would think you would pass in a string.",
			"disapproval": false,
			"date": "2011-09-16 00:16:20.333373",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"borman@google.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I like the sound of this.\n\nhttp://codereview.appspot.com/5003056/diff/2001/src/pkg/allocation/alloc.go\nFile src/pkg/allocation/alloc.go (right):\n\nhttp://codereview.appspot.com/5003056/diff/2001/src/pkg/allocation/alloc.go#newcode1\nsrc/pkg/allocation/alloc.go:1: // Package allocation implements special-purpose memory allocators.\nBikeshed: can we call this package alloc? alloc.Block and alloc.New are kinda catchy.\n\nhttp://codereview.appspot.com/5003056/diff/2001/src/pkg/allocation/alloc.go#newcode19\nsrc/pkg/allocation/alloc.go:19: d    []byte // total allocation, never adjusted\ninstead of d and used, how about having just d, and use len/cap to measure used? Your New becomes\n  return &Block{d: make([]byte, 0, size)}\nand len(b.d) becomes cap(b.d), and b.used becomes len(b.d) throughout.\n\nhttp://codereview.appspot.com/5003056/diff/2001/src/pkg/allocation/alloc.go#newcode58\nsrc/pkg/allocation/alloc.go:58: // referencing them.\nOn 2011/09/16 00:16:20, borman wrote:\n> Why pass in a []byte?  I would think you would pass in a string.\n\nYou'd never care about turning a string into a string, because strings are immutable. You'd use this function if you wanted to turn a []byte into a string and wanted the string backing data written into this block.",
			"disapproval": false,
			"date": "2011-09-16 00:53:36.478446",
			"approval": false
		},
		{
			"sender": "borman@google.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"borman@google.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5003056/diff/2001/src/pkg/allocation/alloc.go\nFile src/pkg/allocation/alloc.go (right):\n\nhttp://codereview.appspot.com/5003056/diff/2001/src/pkg/allocation/alloc.go#newcode58\nsrc/pkg/allocation/alloc.go:58: // referencing them.\nOn 2011/09/16 00:53:36, dsymonds wrote:\n> On 2011/09/16 00:16:20, borman wrote:\n> > Why pass in a []byte?  I would think you would pass in a string.\n> \n> You'd never care about turning a string into a string, because strings are\n> immutable. You'd use this function if you wanted to turn a []byte into a string\n> and wanted the string backing data written into this block.\n\nI guess this depends on your use case.  I was imagining this to be able to be used in conjunction with non-go code.  In that case you might very well want to have the contents of a string in there.  There is an issue that the string could change out from under you, though I would hope not.  I also am making the assumption that only data is in this block, never meta-data (like the string meta-data, a slice's meta-data, etc)\n\nIf all you really want is a string from a slice of bytes, why not just use []byte(string)?",
			"disapproval": false,
			"date": "2011-09-16 01:02:15.269188",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"borman@google.com",
				"dsymonds@golang.org",
				"r@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/16 02:20:11, r wrote:\n> I understand that a few packages play dirty tricks with allocation for\n> speed. This package blesses that approach and will spread the idea,\n> probably to many places it doesn't belong.  That's a bad precedent.\n\nI agree with this, too. I have no answers.",
			"disapproval": false,
			"date": "2011-09-16 03:01:02.183319",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Please no.\n\n0. Let's be honest: The only precedent and use case here is proto.\n\n1. Proto is an incredibly special case: because it has\nterrible C++ semantics forced onto it, it has to make some\nnasty decisions about struct layout (namely, making every\nfield a pointer) that have unfortunate consequences.\nThe problem is not a general one.\n\n2. Even in proto, it is not clear to me that unsafe is needed.\nThe biggest win for proto is that the minimum allocated block\nin Go is something like 16 bytes, and by using a custom\nallocator it can use 4 bytes for an int32 instead of 16.\nYou don't need unsafe to do that, though: you can just allocate\na [4]int32, give out &x[0], &x[1], &x[2], &x[3], and repeat.\n\n3. Proto's 'one big block' allocation causes surprising problems.\nRecently someone ran into a problem saving just one\nsubmessage from each of a stream of bigger proto messages.\nBecause proto allocated the big message and the submessage\nfrom a single piece of memory, keeping the small message\nmeant that the big message got kept in memory too.  This is\nnot expected behavior for ordinary allocations, and it required\nan explicit memory copy as a work-around.\n\n3b. As Ian points out, using the 'one big block' for pure data\ncan actually put *more* load on the garbage collector.\n\n4. The explicit memory copy was helped by the fact that proto\ndoes not allocated string data from the 'one big block'.\nOtherwise proto.Clone would have to make copies of all strings\ntoo, just to be sure that a string reference wasn't pinning some\nbigger block in memory.  All because proto is a little too clever.\n\n5. Writing a nice API will only make this more common, and\nit is quite demonstrably a bad design (see 2-4).\n\n6. Writing a nice API will make people not accept\nthe consequences.  At least when proto causes problems we\ncan point at proto and say 'well it's using unsafe and doing\nthings behind Go's back'.  You can't do that if it's all behind\na sanctioned API.\n\nI would much rather see programs find ways to work\nwithin the Go language than build trap doors.  I think\nreflect is up to the point now where proto could be done\nusing reflect and have the same allocation load as the\ncurrent one.  And if we move forward with one of the\npending language changes, namely making structs\nwith unexported fields copyable, then a reflect version\nshould be able to run just as fast as the current one.\nBut the allocation load is by far the dominant factor, not\nthe actual speed of the encode/decode operation, so\neven now you might be able to write a competitive, safe\nproto.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-09-16 03:39:45.703377",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I worry about the consequences of this package and the message it\nsends. It could distort usage patterns and create superstitions about\nhow to write efficient Go code.\n\nI understand that a few packages play dirty tricks with allocation for\nspeed. This package blesses that approach and will spread the idea,\nprobably to many places it doesn't belong.  That's a bad precedent.\n\n-rob\n",
			"disapproval": false,
			"date": "2011-09-16 02:20:11.455678",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"borman@google.com",
				"dsymonds@golang.org",
				"r@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I like this. It's cool.\n\nhttp://codereview.appspot.com/5003056/diff/2001/src/pkg/allocation/alloc.go\nFile src/pkg/allocation/alloc.go (right):\n\nhttp://codereview.appspot.com/5003056/diff/2001/src/pkg/allocation/alloc.go#newcode58\nsrc/pkg/allocation/alloc.go:58: // referencing them.\nOn 2011/09/16 01:02:15, borman wrote:\n> If all you really want is a string from a slice of bytes, why not just use\n> []byte(string)?\n\nThink of unmarshalling a protobuf. You want to allocate the memory once, and then copy the contents of the various fields into your block of memory and have Go values that refer to them. That's what this package is for.",
			"disapproval": false,
			"date": "2011-09-16 02:59:30.268179",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I see and understand your fear, but to play devil's advocate: without this,\na safe version of goprotobuf (on App Engine) can't be as fast.\n\nAlso, we always say that Go lets you control memory layout.  It's one of the\noft-repeated selling points over, say, Java.  C++ has \"placement new\" but I\ndon't see that over-abused.  It's very nice when you need it, though.  I\nview this in a similar way.  Go has always struck me as very pragmatic: just\nbecause something's discouraged, that doesn't mean it's forbidden: we have\nshared mutable data between goroutines & sync{,/atomic} in addition to\nhigher-level channels, etc.\n\n\nOn Thu, Sep 15, 2011 at 7:20 PM, Rob 'Commander' Pike <r@golang.org> wrote:\n\n> I worry about the consequences of this package and the message it\n> sends. It could distort usage patterns and create superstitions about\n> how to write efficient Go code.\n>\n> I understand that a few packages play dirty tricks with allocation for\n> speed. This package blesses that approach and will spread the idea,\n> probably to many places it doesn't belong.  That's a bad precedent.\n>\n> -rob\n>\n",
			"disapproval": false,
			"date": "2011-09-16 02:59:41.654462",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"borman@google.com",
				"dsymonds@golang.org",
				"r@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/16 02:20:11, r wrote:\n> I understand that a few packages play dirty tricks with allocation for\n> speed. This package blesses that approach and will spread the idea,\n> probably to many places it doesn't belong.  That's a bad precedent.\n\nI agree with this, too. I have no answers.",
			"disapproval": false,
			"date": "2011-09-16 03:01:01.474638",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "The most important unsafe thing that makes proto fast is the use of\nunsafe to precompute structure offsets and unsafely access through\nthem. This speeds up encoding and decoding. The allocation trick is\ndecode only and helps only for smallish protobufs. Also, as Russ says,\nmost of the gain can be recovered by simple, safe pool allocation.\n\nUsing a pure reflection interface for protobufs will be perfectly safe\nand measurably slower but just fine for App Engine.\n\n-rob\n",
			"disapproval": false,
			"date": "2011-09-16 05:34:36.880086",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Brad Fitzpatrick <bradfitz@golang.org> writes:\n\n> Rob and I were discussing the gross things that goprotobuf does with unsafe\n> for efficiency.\n>\n> I proposed promoting some of the grossness up to a library, like this.\n>\n> The idea is we could keep the grossness close to the core and keep\n> goprotobuf clean(er).\n>\n> This example only has Int and String done.  You could imagine all the types.\n\nThis is a pool allocator.  It could have a single method\n\nfunc (p *Pool) Alloc(t reflect.Type) interface{}\n\nwhich would return a pointer to the type that is passed in.  Of course\nyou might want type-specific methods for speed.  And I guess you would\nalso want\n\nfunc (p *Pool) AllocSlice(t reflect.Type, n int) interface{}\n\nwhich would return a slice of the type with the backing store in p.\n\nIs this really what the protocol buffer code needs?  I would think that\nthat needs code which looks at an existing set of bytes and interprets\nit as various types, not code which allocates new bytes as specific\ntypes.\n\nThis approach doesn't do anything you can't already do with new and\nmake.  It makes allocation faster at the expense of giving the garbage\ncollector less type information to work with.  That is, the garbage\ncollector doesn't have to scan a []byte or []int, but it does have to\nscan this, because you might store a pointer in it.\n\nIf we pursue this I would think there should be locked and unlocked\nvariants of the allocation methods, and Lock/Unlock methods.\n\nIan\n",
			"disapproval": false,
			"date": "2011-09-16 03:36:45.671929",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Fri, Sep 16, 2011 at 1:36 PM, Ian Lance Taylor <iant@google.com> wrote:\n\n> Is this really what the protocol buffer code needs? \u00a0I would think that\n> that needs code which looks at an existing set of bytes and interprets\n> it as various types, not code which allocates new bytes as specific\n> types.\n\nThe protobuf code needs to be able to alloc a particular type, and\nthen decode the bytes it has into that type. For many of the types the\nencoded form isn't the same as what it gets decoded to (e.g. varint).\n\n\nDave.\n",
			"disapproval": false,
			"date": "2011-09-16 03:39:39.235433",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"borman@google.com",
				"dsymonds@golang.org",
				"r@golang.org",
				"adg@golang.org",
				"iant@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2011-09-16 17:34:07.290759",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "+1. Please no. Thanks.\n- gri\n\nOn Fri, Sep 16, 2011 at 10:34 AM,  <bradfitz@golang.org> wrote:\n> *** Abandoned ***\n>\n> http://codereview.appspot.com/5003056/\n>\n",
			"disapproval": false,
			"date": "2011-09-16 18:28:59.548587",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 5003056: allocation package (for discussion)",
	"created": "2011-09-15 23:52:31.609773",
	"patchsets": [
		1,
		2001
	],
	"modified": "2011-09-16 18:28:59.693999",
	"closed": true,
	"issue": 5003056
}