{
	"description": "encoding/gob: fix check for short input in slice decode",
	"cc": [
		"golang-dev@googlegroups.com",
		"dsymonds@golang.org",
		"r@google.com",
		"nigeltao@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-07-11 22:53:52.573520",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6374059/diff/1/src/pkg/encoding/gob/decode.go\nFile src/pkg/encoding/gob/decode.go (left):\n\nhttp://codereview.appspot.com/6374059/diff/1/src/pkg/encoding/gob/decode.go#oldcode655\nsrc/pkg/encoding/gob/decode.go:655: if nr > uint64(state.b.Len()) {\nI'm nervous about removing this. This was originally added as a DoS protection mechanism to stop a message of only a few bytes causing this code to allocate many GB.\n\nI still don't understand what goes wrong here. If there's a type definition after a slice then this condition still needs to hold, right? This function is going to require at least nr bytes.",
			"disapproval": false,
			"date": "2012-07-11 23:11:51.409830",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6374059/diff/1/src/pkg/encoding/gob/decode.go\nFile src/pkg/encoding/gob/decode.go (left):\n\nhttp://codereview.appspot.com/6374059/diff/1/src/pkg/encoding/gob/decode.go#oldcode655\nsrc/pkg/encoding/gob/decode.go:655: if nr > uint64(state.b.Len()) {\nyou can be nervous about removing it but the test is incorrect and that's what's wrong. in the case in question, we have a slice of interfaces. the first element of the slice defines a type, and each type definition is sent as a separate message. thus the length being looked at here is the the length of the type definition, not of the data that follows it as a separate length-delimited message.",
			"disapproval": false,
			"date": "2012-07-11 23:35:45.168580",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jul 12, 2012 at 9:35 AM,  <r@golang.org> wrote:\r\n\r\n> you can be nervous about removing it but the test is incorrect and\r\n> that's what's wrong. in the case in question, we have a slice of\r\n> interfaces. the first element of the slice defines a type, and each type\r\n> definition is sent as a separate message. thus the length being looked\r\n> at here is the the length of the type definition, not of the data that\r\n> follows it as a separate length-delimited message.\r\n\r\nAah, so can this check just be skipped for type definitions? And\r\nperhaps we can have some sensible upper bound for them (say, 1 KB)?\r\n",
			"disapproval": false,
			"date": "2012-07-11 23:41:09.479880",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"r@google.com",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=d5754b3d9f44 ***\n\nencoding/gob: fix check for short input in slice decode\n\nR=golang-dev, dsymonds, r, nigeltao\nCC=golang-dev\nhttp://codereview.appspot.com/6374059",
			"disapproval": false,
			"date": "2012-07-12 17:23:58.017080",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\r\nOn Jul 11, 2012, at 4:41 PM, David Symonds wrote:\r\n\r\n> On Thu, Jul 12, 2012 at 9:35 AM,  <r@golang.org> wrote:\r\n> \r\n>> you can be nervous about removing it but the test is incorrect and\r\n>> that's what's wrong. in the case in question, we have a slice of\r\n>> interfaces. the first element of the slice defines a type, and each type\r\n>> definition is sent as a separate message. thus the length being looked\r\n>> at here is the the length of the type definition, not of the data that\r\n>> follows it as a separate length-delimited message.\r\n> \r\n> Aah, so can this check just be skipped for type definitions? And\r\n> perhaps we can have some sensible upper bound for them (say, 1 KB)?\r\n\r\nWe can't tell if there's a type definition embedded somewhere in this slice element's encoding. In the original example, the type definition starts 6 bytes into the element encoding.\r\n\r\n-rob\r\n\r\n",
			"disapproval": false,
			"date": "2012-07-11 23:44:58.971900",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n",
			"disapproval": false,
			"date": "2012-07-11 23:48:58.489780",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"r@google.com",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\n\nhttp://codereview.appspot.com/6374059/diff/1/src/pkg/encoding/gob/encoder_test.go\nFile src/pkg/encoding/gob/encoder_test.go (right):\n\nhttp://codereview.appspot.com/6374059/diff/1/src/pkg/encoding/gob/encoder_test.go#newcode825\nsrc/pkg/encoding/gob/encoder_test.go:825: func Test29ElementSlice(t *testing.T) {\ns/29/Long/ ?",
			"disapproval": false,
			"date": "2012-07-12 01:03:12.123120",
			"approval": true
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 6374059: encoding/gob: fix check for short input in slice decode",
	"created": "2012-07-11 22:53:49.836150",
	"patchsets": [
		1,
		8001
	],
	"modified": "2012-07-12 17:24:02.152400",
	"closed": true,
	"issue": 6374059
}