{
	"description": "container/heap: use idiomatic doc comments in examples\n\nAdditionally: Break doc comments at 80 characters.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-02-20 10:36:42.486020",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Indefinite articles before subjects in docs are fine.\r\n\r\nOn Wed, Feb 20, 2013 at 2:36 AM, <dr.volker.dobler@gmail.com> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> container/heap: use idiomatic doc comments in examples\r\n>\r\n> Additionally: Break doc comments at 80 characters.\r\n>\r\n> Please review this at https://codereview.appspot.**com/7364044/<https://codereview.appspot.com/7364044/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/container/heap/**example_intheap_test.go\r\n>   M src/pkg/container/heap/**example_pq_test.go\r\n>\r\n>\r\n> Index: src/pkg/container/heap/**example_intheap_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/container/heap/**example_intheap_test.go\r\n> +++ b/src/pkg/container/heap/**example_intheap_test.go\r\n> @@ -10,7 +10,7 @@\r\n>         \"fmt\"\r\n>  )\r\n>\r\n> -// An IntHeap is a min-heap of ints.\r\n> +// IntHeap is a min-heap of ints.\r\n>  type IntHeap []int\r\n>\r\n>  func (h IntHeap) Len() int           { return len(h) }\r\n> @@ -18,8 +18,8 @@\r\n>  func (h IntHeap) Swap(i, j int)      { h[i], h[j] = h[j], h[i] }\r\n>\r\n>  func (h *IntHeap) Push(x interface{}) {\r\n> -       // Push and Pop use pointer receivers because they modify the\r\n> slice's length,\r\n> -       // not just its contents.\r\n> +       // Push and Pop use pointer receivers because they modify the\r\n> slice's\r\n> +       // length, not just its contents.\r\n>         *h = append(*h, x.(int))\r\n>  }\r\n>\r\n> @@ -31,7 +31,8 @@\r\n>         return x\r\n>  }\r\n>\r\n> -// This example inserts several ints into an IntHeap and removes them in\r\n> order of priority.\r\n> +// This example inserts several ints into an IntHeap and removes them in\r\n> order\r\n> +// of priority.\r\n>  func Example_intHeap() {\r\n>         h := &IntHeap{2, 1, 5}\r\n>         heap.Init(h)\r\n> Index: src/pkg/container/heap/**example_pq_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/container/heap/**example_pq_test.go\r\n> +++ b/src/pkg/container/heap/**example_pq_test.go\r\n> @@ -10,21 +10,23 @@\r\n>         \"fmt\"\r\n>  )\r\n>\r\n> -// An Item is something we manage in a priority queue.\r\n> +// Item is something we manage in a priority queue.\r\n>  type Item struct {\r\n>         value    string // The value of the item; arbitrary.\r\n>         priority int    // The priority of the item in the queue.\r\n> -       // The index is needed by update and is maintained by the\r\n> heap.Interface methods.\r\n> +       // The index is needed by update and is maintained by the\r\n> heap.Interface\r\n> +       // methods.\r\n>         index int // The index of the item in the heap.\r\n>  }\r\n>\r\n> -// A PriorityQueue implements heap.Interface and holds Items.\r\n> +// PriorityQueue implements heap.Interface and holds Items.\r\n>  type PriorityQueue []*Item\r\n>\r\n>  func (pq PriorityQueue) Len() int { return len(pq) }\r\n>\r\n>  func (pq PriorityQueue) Less(i, j int) bool {\r\n> -       // We want Pop to give us the highest, not lowest, priority so we\r\n> use greater than here.\r\n> +       // We want Pop to give us the highest, not lowest, priority so we\r\n> use\r\n> +       // greater than here.\r\n>         return pq[i].priority > pq[j].priority\r\n>  }\r\n>\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-20 15:24:51.182440",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 20, 2013 at 10:24 AM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n\r\n> Indefinite articles before subjects in docs are fine.\r\n\r\n\r\nAnd when they are correct, removing them can be incorrect.\r\n\r\nThere are two ways to define a type: by saying what the type is or does, or\r\nby saying what an instance of the type is or does. The former would have no\r\narticle, and the latter would.\r\n\r\nFor example:\r\n\r\n// Marshaler is the interface implemented by objects that can marshal\r\nthemselves into valid JSON.\r\n\r\n// A Marshaler can marshal itself into valid JSON.\r\n\r\nIt is incorrect to use an article in the first case, and it is incorrect\r\nnot to use one in the second.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-02-20 15:35:22.108720",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-02-20 15:42:32.650700",
			"approval": false
		}
	],
	"owner_email": "dr.volker.dobler@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "volker.dobler",
	"subject": "code review 7364044: container/heap: use idiomatic doc comments in examples",
	"created": "2013-02-20 10:35:42.606880",
	"patchsets": [
		1,
		2001,
		5001
	],
	"modified": "2013-02-20 15:42:34.140010",
	"closed": true,
	"issue": 7364044
}