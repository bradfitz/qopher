{
	"description": "gc: Better typechecks and errors in switches.\n\nAllow any type in switch on interface value.\nStatically check typeswitch early.\n\nFixes issue 2423.\nFixes issue 2424.",
	"cc": [
		"rsc@golang.org",
		"dsymonds@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Nov 7, 2011 at 18:36, <rsc@golang.org> wrote:\n\n>\n> http://codereview.appspot.com/**5339045/diff/1002/src/cmd/gc/**swt.c<http://codereview.appspot.com/5339045/diff/1002/src/cmd/gc/swt.c>\n> File src/cmd/gc/swt.c (right):\n>\n> http://codereview.appspot.com/**5339045/diff/1002/src/cmd/gc/**\n> swt.c#newcode863<http://codereview.appspot.com/5339045/diff/1002/src/cmd/gc/swt.c#newcode863>\n> src/cmd/gc/swt.c:863: ;\n> I think this new code is only necessary to work around the bug on line\n> 864.\n> That bug is that it should be using assignability, not type equality,\n> to make the decision.  switch x { case y: } is allowed if x == y is\n> allowed,\n> so the right test is whether assignop(x->type, y->type, nil) != 0 or\n> assignop(y->type, x->type, nil) != 0.\n>\n>\nthat makes perfect sense.  done.\n\n\n> http://codereview.appspot.com/**5339045/<http://codereview.appspot.com/5339045/>\n>\n",
			"disapproval": false,
			"date": "2011-11-07 19:00:44.041044",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5339045/diff/1002/src/cmd/gc/swt.c\nFile src/cmd/gc/swt.c (right):\n\nhttp://codereview.appspot.com/5339045/diff/1002/src/cmd/gc/swt.c#newcode863\nsrc/cmd/gc/swt.c:863: ;\nI think this new code is only necessary to work around the bug on line 864.\nThat bug is that it should be using assignability, not type equality,\nto make the decision.  switch x { case y: } is allowed if x == y is allowed,\nso the right test is whether assignop(x->type, y->type, nil) != 0 or\nassignop(y->type, x->type, nil) != 0.",
			"disapproval": false,
			"date": "2011-11-07 17:36:58.594483",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Nov 7, 2011 at 09:31, Luuk van Dijk <lvd@google.com> wrote:\n\n> (hm don't know why code. doesn't send my reply)\n>\n>\n> On Mon, Nov 7, 2011 at 09:18, David Symonds <dsymonds@golang.org> wrote:\n>\n>> Isn't this a language change? I understood (value) switches to be\n>> glorified if chains with ==, but interface{} is not comparable to string.\n>>\n>\n> if x == \"hello\" {... compiles and works fine here.\n>\n> i added in a fix for the next issue, but that trips\n>\n>  fixedbugs/bug270.go:19: impossible type switch case: I(T literal) (type\n> I) cannot have dynamic type interface {} (missing F method)\n>\n> bug 270 reads\n>\n> package main\n>\n> type I interface { F() }\n>\n> type T struct{}\n>\n> func (T) F() {}\n>\n> func main() {\n> switch I(T{}).(type) {\n> case interface{}:     // new error is here\n>  }\n> }\n>\n> i think the new behaviour is correct, since if i add\n>\n> var x interface{}\n> var y I = x\n>\n> i get\n>  cannot use x (type interface {}) as type I in assignment:\n>         interface {} does not implement I (missing F method)\n>\n>\n>\nI looked at the original issue\nhttp://code.google.com/p/go/issues/detail?id=746   and i think replacing\ninterface{} with default keeps the gist of the test (for missing typecheck\non the switch test)\n\n/L\n",
			"disapproval": false,
			"date": "2011-11-07 08:34:30.223120",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Nov 7, 2011 at 20:06, <rsc@golang.org> wrote:\n\n>\n> http://codereview.appspot.com/**5339045/diff/17002/test/**\n> fixedbugs/bug270.go<http://codereview.appspot.com/5339045/diff/17002/test/fixedbugs/bug270.go>\n> File test/fixedbugs/bug270.go (right):\n>\n> http://codereview.appspot.com/**5339045/diff/17002/test/**\n> fixedbugs/bug270.go#newcode19<http://codereview.appspot.com/5339045/diff/17002/test/fixedbugs/bug270.go#newcode19>\n> test/fixedbugs/bug270.go:19: default:\n> I think you can remove this test.\n> It was specifically testing I2E conversion\n> but that's impossible in a type switch.\n>\n>\ndone\n\n\n> http://codereview.appspot.com/**5339045/<http://codereview.appspot.com/5339045/>\n>\n",
			"disapproval": false,
			"date": "2011-11-07 19:10:25.251570",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-07 07:36:17.005633",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5339045/diff/17002/test/fixedbugs/bug270.go\nFile test/fixedbugs/bug270.go (right):\n\nhttp://codereview.appspot.com/5339045/diff/17002/test/fixedbugs/bug270.go#newcode19\ntest/fixedbugs/bug270.go:19: default:\nI think you can remove this test.\nIt was specifically testing I2E conversion\nbut that's impossible in a type switch.",
			"disapproval": false,
			"date": "2011-11-07 19:06:06.921631",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Isn't this a language change? I understood (value) switches to be glorified\nif chains with ==, but interface{} is not comparable to string.\n",
			"disapproval": false,
			"date": "2011-11-07 08:18:22.688231",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Nov 7, 2011 at 21:21, Luuk van Dijk <lvd@google.com> wrote:\n\n>\n>\n> On Mon, Nov 7, 2011 at 20:14, <rsc@golang.org> wrote:\n>\n>>\n>> http://codereview.appspot.com/**5339045/diff/17002/src/cmd/gc/**swt.c<http://codereview.appspot.com/5339045/diff/17002/src/cmd/gc/swt.c>\n>> File src/cmd/gc/swt.c (right):\n>>\n>> http://codereview.appspot.com/**5339045/diff/17002/src/cmd/gc/**\n>> swt.c#newcode864<http://codereview.appspot.com/5339045/diff/17002/src/cmd/gc/swt.c#newcode864>\n>> src/cmd/gc/swt.c:864: else if(ll->n->type != T && assignop(ll->n->type,\n>> t, &why) == 0)\n>> I believe you need both assignop checks, which means that\n>> keeping the why is a little tricky.  I would settle for using the\n>> same syntax as the error in this program:\n>>\n>> package main\n>> type I interface {m()}\n>> func main() {\n>>        var i I\n>>        _ = i == \"hello\"\n>> }\n>>\n>> It prints\n>>\n>> x.go:5: invalid operation: i == \"hello\" (mismatched types I and string)\n>>\n>> Please add tests for both cases:\n>>\n>> type I interface { M() }\n>> var i I\n>> var s string\n>>\n>> switch i {\n>> case s:  // ERROR \"mismatched types I and string\"\n>> }\n>> switch s {\n>> case i:  // ERROR \"mismatched types string and I\"\n>> }\n>>\n>> but also add test cases that if you have\n>>\n>> type I interface{}\n>>\n>> then both those switches are valid.\n>>\n>\n> added those to typeswitch2.go, and surprise, they aren't valid, because of\n> the symmetric assign check. i think.  let me think that over.\n>\n\nit is because i have no brain at all.\n\n\n>\n>\n>>\n>> http://codereview.appspot.com/**5339045/diff/17002/src/cmd/gc/**\n>> swt.c#newcode875<http://codereview.appspot.com/5339045/diff/17002/src/cmd/gc/swt.c#newcode875>\n>> src/cmd/gc/swt.c:875: if(have && !missing->broke && !have->broke)\n>> Presumably the !missing->broke && !have->broke is needed\n>> in typecheck.c's copy of this code too.  Maybe lift out into a\n>> bool checkimplements(Type*, Type*)\n>> or whatever the signature needs to be to reproduce the errors.\n>>\n>> http://codereview.appspot.com/**5339045/<http://codereview.appspot.com/5339045/>\n>>\n>\n>\n",
			"disapproval": false,
			"date": "2011-11-07 20:40:53.787506",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5339045/diff/17002/src/cmd/gc/swt.c\nFile src/cmd/gc/swt.c (right):\n\nhttp://codereview.appspot.com/5339045/diff/17002/src/cmd/gc/swt.c#newcode864\nsrc/cmd/gc/swt.c:864: else if(ll->n->type != T && assignop(ll->n->type, t, &why) == 0)\nI believe you need both assignop checks, which means that\nkeeping the why is a little tricky.  I would settle for using the\nsame syntax as the error in this program:\n\npackage main\ntype I interface {m()}\nfunc main() {\n\tvar i I\n\t_ = i == \"hello\"\n}\n\nIt prints\n\nx.go:5: invalid operation: i == \"hello\" (mismatched types I and string)\n\nPlease add tests for both cases:\n\ntype I interface { M() }\nvar i I\nvar s string\n\nswitch i {\ncase s:  // ERROR \"mismatched types I and string\"\n}\nswitch s {\ncase i:  // ERROR \"mismatched types string and I\"\n}\n\nbut also add test cases that if you have\n\ntype I interface{}\n\nthen both those switches are valid.\n\nhttp://codereview.appspot.com/5339045/diff/17002/src/cmd/gc/swt.c#newcode875\nsrc/cmd/gc/swt.c:875: if(have && !missing->broke && !have->broke)\nPresumably the !missing->broke && !have->broke is needed\nin typecheck.c's copy of this code too.  Maybe lift out into a\nbool checkimplements(Type*, Type*)\nor whatever the signature needs to be to reproduce the errors.",
			"disapproval": false,
			"date": "2011-11-07 19:14:36.381691",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, dsymonds@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-07 08:21:04.944168",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/11/07 08:18:22, dsymonds wrote:\n> Isn't this a language change? I understood (value) switches to be glorified\n> if chains with ==, but interface{} is not comparable to string.\n\nif x == \"hello\" {... just compiles and passes here",
			"disapproval": false,
			"date": "2011-11-07 08:22:40.498467",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Nov 7, 2011 at 7:31 PM, Luuk van Dijk <lvd@google.com> wrote:\n\n> On Mon, Nov 7, 2011 at 09:18, David Symonds <dsymonds@golang.org> wrote:\n>>\n>> Isn't this a language change? I understood (value) switches to be\n>> glorified if chains with ==, but interface{} is not comparable to string.\n>\n> if x == \"hello\" {... compiles and works fine here.\n\nAah, duh. \"hello\" is assignable to x, so they are comparable.\n\nNever mind me...\n",
			"disapproval": false,
			"date": "2011-11-07 11:09:10.267048",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Nov 7, 2011 at 20:14, <rsc@golang.org> wrote:\n\n>\n> http://codereview.appspot.com/**5339045/diff/17002/src/cmd/gc/**swt.c<http://codereview.appspot.com/5339045/diff/17002/src/cmd/gc/swt.c>\n> File src/cmd/gc/swt.c (right):\n>\n> http://codereview.appspot.com/**5339045/diff/17002/src/cmd/gc/**\n> swt.c#newcode864<http://codereview.appspot.com/5339045/diff/17002/src/cmd/gc/swt.c#newcode864>\n> src/cmd/gc/swt.c:864: else if(ll->n->type != T && assignop(ll->n->type,\n> t, &why) == 0)\n> I believe you need both assignop checks, which means that\n> keeping the why is a little tricky.  I would settle for using the\n> same syntax as the error in this program:\n>\n> package main\n> type I interface {m()}\n> func main() {\n>        var i I\n>        _ = i == \"hello\"\n> }\n>\n> It prints\n>\n> x.go:5: invalid operation: i == \"hello\" (mismatched types I and string)\n>\n> Please add tests for both cases:\n>\n> type I interface { M() }\n> var i I\n> var s string\n>\n> switch i {\n> case s:  // ERROR \"mismatched types I and string\"\n> }\n> switch s {\n> case i:  // ERROR \"mismatched types string and I\"\n> }\n>\n> but also add test cases that if you have\n>\n> type I interface{}\n>\n> then both those switches are valid.\n>\n\nadded those to typeswitch2.go, and surprise, they aren't valid, because of\nthe symmetric assign check. i think.  let me think that over.\n\n\n>\n> http://codereview.appspot.com/**5339045/diff/17002/src/cmd/gc/**\n> swt.c#newcode875<http://codereview.appspot.com/5339045/diff/17002/src/cmd/gc/swt.c#newcode875>\n> src/cmd/gc/swt.c:875: if(have && !missing->broke && !have->broke)\n> Presumably the !missing->broke && !have->broke is needed\n> in typecheck.c's copy of this code too.  Maybe lift out into a\n> bool checkimplements(Type*, Type*)\n> or whatever the signature needs to be to reproduce the errors.\n>\n> http://codereview.appspot.com/**5339045/<http://codereview.appspot.com/5339045/>\n>\n",
			"disapproval": false,
			"date": "2011-11-07 20:21:53.977274",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "all tests pass.\n\nwill leave the checkimplements for another CL, where i can add more ->broke inhibiting yyerrors too.",
			"disapproval": false,
			"date": "2011-11-07 21:51:59.515639",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "(hm don't know why code. doesn't send my reply)\n\nOn Mon, Nov 7, 2011 at 09:18, David Symonds <dsymonds@golang.org> wrote:\n\n> Isn't this a language change? I understood (value) switches to be\n> glorified if chains with ==, but interface{} is not comparable to string.\n>\n\nif x == \"hello\" {... compiles and works fine here.\n\ni added in a fix for the next issue, but that trips\n\n fixedbugs/bug270.go:19: impossible type switch case: I(T literal) (type I)\ncannot have dynamic type interface {} (missing F method)\n\nbug 270 reads\n\npackage main\n\ntype I interface { F() }\n\ntype T struct{}\n\nfunc (T) F() {}\n\nfunc main() {\nswitch I(T{}).(type) {\ncase interface{}:     // new error is here\n}\n}\n\ni think the new behaviour is correct, since if i add\n\nvar x interface{}\nvar y I = x\n\ni get\n cannot use x (type interface {}) as type I in assignment:\n        interface {} does not implement I (missing F method)\n",
			"disapproval": false,
			"date": "2011-11-07 08:31:16.753902",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Nov 7, 2011 at 21:40, Luuk van Dijk <lvd@google.com> wrote:\n\n>\n>\n> On Mon, Nov 7, 2011 at 21:21, Luuk van Dijk <lvd@google.com> wrote:\n>\n>>\n>>\n>> On Mon, Nov 7, 2011 at 20:14, <rsc@golang.org> wrote:\n>>\n>>>\n>>> http://codereview.appspot.com/**5339045/diff/17002/src/cmd/gc/**swt.c<http://codereview.appspot.com/5339045/diff/17002/src/cmd/gc/swt.c>\n>>> File src/cmd/gc/swt.c (right):\n>>>\n>>> http://codereview.appspot.com/**5339045/diff/17002/src/cmd/gc/**\n>>> swt.c#newcode864<http://codereview.appspot.com/5339045/diff/17002/src/cmd/gc/swt.c#newcode864>\n>>> src/cmd/gc/swt.c:864: else if(ll->n->type != T && assignop(ll->n->type,\n>>> t, &why) == 0)\n>>> I believe you need both assignop checks, which means that\n>>> keeping the why is a little tricky.  I would settle for using the\n>>> same syntax as the error in this program:\n>>>\n>>> package main\n>>> type I interface {m()}\n>>> func main() {\n>>>        var i I\n>>>        _ = i == \"hello\"\n>>> }\n>>>\n>>> It prints\n>>>\n>>> x.go:5: invalid operation: i == \"hello\" (mismatched types I and string)\n>>>\n>>> Please add tests for both cases:\n>>>\n>>> type I interface { M() }\n>>> var i I\n>>> var s string\n>>>\n>>> switch i {\n>>> case s:  // ERROR \"mismatched types I and string\"\n>>> }\n>>> switch s {\n>>> case i:  // ERROR \"mismatched types string and I\"\n>>> }\n>>>\n>>> but also add test cases that if you have\n>>>\n>>> type I interface{}\n>>>\n>>> then both those switches are valid.\n>>>\n>>\n>> added those to typeswitch2.go, and surprise, they aren't valid, because\n>> of the symmetric assign check. i think.  let me think that over.\n>>\n>\n> it is because i have no brain at all.\n>\n\nhad to fiddle a bit with the linenumbers, and made it typecheck3.go,\nbecause those errors will prevent walk from happening, which generates the\nexisting messages in typecheck2.go\n\n\n>\n>\n>>\n>>\n>>>\n>>> http://codereview.appspot.com/**5339045/diff/17002/src/cmd/gc/**\n>>> swt.c#newcode875<http://codereview.appspot.com/5339045/diff/17002/src/cmd/gc/swt.c#newcode875>\n>>> src/cmd/gc/swt.c:875: if(have && !missing->broke && !have->broke)\n>>> Presumably the !missing->broke && !have->broke is needed\n>>> in typecheck.c's copy of this code too.  Maybe lift out into a\n>>> bool checkimplements(Type*, Type*)\n>>> or whatever the signature needs to be to reproduce the errors.\n>>>\n>>> http://codereview.appspot.com/**5339045/<http://codereview.appspot.com/5339045/>\n>>>\n>>\n>>\n>\n",
			"disapproval": false,
			"date": "2011-11-07 21:41:06.718445",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5339045/diff/1002/src/cmd/gc/swt.c\nFile src/cmd/gc/swt.c (right):\n\nhttp://codereview.appspot.com/5339045/diff/1002/src/cmd/gc/swt.c#newcode863\nsrc/cmd/gc/swt.c:863: ;\nbtw i just realized I could do an implements() check here too.",
			"disapproval": false,
			"date": "2011-11-07 14:45:00.851637",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5339045/diff/9/test/fixedbugs/bug375.go\nFile test/fixedbugs/bug375.go (right):\n\nhttp://codereview.appspot.com/5339045/diff/9/test/fixedbugs/bug375.go#newcode12\ntest/fixedbugs/bug375.go:12: var x interface{} = \"hello\"\nplease gofmt. looks like some spaces crept in\n\nhttp://codereview.appspot.com/5339045/diff/9/test/fixedbugs/bug376.go\nFile test/fixedbugs/bug376.go (right):\n\nhttp://codereview.appspot.com/5339045/diff/9/test/fixedbugs/bug376.go#newcode17\ntest/fixedbugs/bug376.go:17: case string:\t// ERROR \"impossible\"\nplease add this case to test/typeswitch2.go \nand drop this file.  this is an important enough\ncase to be in a named file.\n\nhttp://codereview.appspot.com/5339045/diff/9/test/typeswitch3.go\nFile test/typeswitch3.go (right):\n\nhttp://codereview.appspot.com/5339045/diff/9/test/typeswitch3.go#newcode15\ntest/typeswitch3.go:15: switch i {\nThis is in a file called typeswitch3.go but it is a value switch.\nPlease rename to switchN.go for some N.",
			"disapproval": false,
			"date": "2011-11-09 04:37:35.052911",
			"approval": true
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5339045/diff/9/test/fixedbugs/bug375.go\nFile test/fixedbugs/bug375.go (right):\n\nhttp://codereview.appspot.com/5339045/diff/9/test/fixedbugs/bug375.go#newcode12\ntest/fixedbugs/bug375.go:12: var x interface{} = \"hello\"\nOn 2011/11/09 04:37:35, rsc wrote:\n> please gofmt. looks like some spaces crept in\n\nDone.\n\nhttp://codereview.appspot.com/5339045/diff/9/test/fixedbugs/bug376.go\nFile test/fixedbugs/bug376.go (right):\n\nhttp://codereview.appspot.com/5339045/diff/9/test/fixedbugs/bug376.go#newcode17\ntest/fixedbugs/bug376.go:17: case string:\t// ERROR \"impossible\"\nOn 2011/11/09 04:37:35, rsc wrote:\n> please add this case to test/typeswitch2.go \n> and drop this file.  this is an important enough\n> case to be in a named file.\n\nthis is a typecheck-time error, which will suppress the walk-time errors in typeswitch2.go.  I'll add it to typeswitch3.go and move the value switch out of there.\n\nhttp://codereview.appspot.com/5339045/diff/9/test/typeswitch3.go\nFile test/typeswitch3.go (right):\n\nhttp://codereview.appspot.com/5339045/diff/9/test/typeswitch3.go#newcode15\ntest/typeswitch3.go:15: switch i {\nOn 2011/11/09 04:37:35, rsc wrote:\n> This is in a file called typeswitch3.go but it is a value switch.\n> Please rename to switchN.go for some N.\n\nDone.",
			"disapproval": false,
			"date": "2011-11-09 09:44:24.336540",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=e19afb349d0e ***\n\ngc: Better typechecks and errors in switches.\n\nAllow any type in switch on interface value.\nStatically check typeswitch early.\n\nFixes issue 2423.\nFixes issue 2424.\n\nR=rsc, dsymonds\nCC=golang-dev\nhttp://codereview.appspot.com/5339045",
			"disapproval": false,
			"date": "2011-11-09 09:58:59.510287",
			"approval": false
		}
	],
	"owner_email": "lvd@google.com",
	"private": false,
	"base_url": "",
	"owner": "lvd",
	"subject": "code review 5339045: gc: Allow any type in switch on interface value. Static...",
	"created": "2011-11-07 07:33:03.084130",
	"patchsets": [
		1,
		2001,
		4001,
		8002,
		9001,
		3,
		1002,
		17002,
		12002,
		18002,
		20001,
		17003,
		9,
		23001,
		25007,
		27007
	],
	"modified": "2011-11-09 09:59:01.506539",
	"closed": true,
	"issue": 5339045
}