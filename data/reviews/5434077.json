{
	"description": "html/template: update to new template API\n\nNot quite done yet but enough is here to review.\n\nEmbedding is eliminated so clients can't accidentally reach\nmethods of text/template.Template that would break the\ninvariants.\n\nTODO: two test cases still fail in TestErrors; help requested.\n\nTODO later: Add and Clone are unimplemented.\nTODO later: address issue 2349",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@google.com",
		"rsc@golang.org"
	],
	"reviewers": [
		"mikesamuel@gmail.com"
	],
	"messages": [
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is ready for proper review now.\n\nThe TODOs can be done in another CL. There's plenty here already.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-11-28 18:43:47.898441",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-28 05:07:57.203233",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-28 18:41:52.785394",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThe two commented out test failures are because it says\n{{define \"z\"}}...{{end}}.  If you remove the framing around\nthe ... then the tests pass.\n\n\n\t\t{\n\t\t\t`<div{{template \"y\"}}>` +\n\t\t\t\t// Illegal starting in stateTag but not in stateText.\n\t\t\t\t`{{define \"y\"}} foo<b{{end}}`,\n\t\t\t`\"<\" in attribute name: \" foo<b\"`,\n\t\t},\n\t\t{\n\t\t\t`<script>reverseList = [{{template \"t\"}}]</script>` +\n\t\t\t\t// Missing \" after recursive call.\n\t\t\t\t`{{define \"t\"}}{{if .Tail}}{{template \"t\" .Tail}}{{end}}{{.Head}}\",{{end}}`,\n\t\t\t`: cannot compute output context for template\nt$htmltemplate_stateJS_elementScript`,\n\t\t},\n",
			"disapproval": false,
			"date": "2011-11-30 22:34:08.191229",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I have already clpatched and fixed the tests (to figure out\nwhat was wrong), so I will submit this.\n",
			"disapproval": false,
			"date": "2011-11-30 22:41:30.116221",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Nov 30, 2011, at 2:34 PM, Russ Cox wrote:\n\n> LGTM\n> \n> The two commented out test failures are because it says\n> {{define \"z\"}}...{{end}}.  If you remove the framing around\n> the ... then the tests pass.\n> \n> \n> \t\t{\n> \t\t\t`<div{{template \"y\"}}>` +\n> \t\t\t\t// Illegal starting in stateTag but not in stateText.\n> \t\t\t\t`{{define \"y\"}} foo<b{{end}}`,\n> \t\t\t`\"<\" in attribute name: \" foo<b\"`,\n> \t\t},\n> \t\t{\n> \t\t\t`<script>reverseList = [{{template \"t\"}}]</script>` +\n> \t\t\t\t// Missing \" after recursive call.\n> \t\t\t\t`{{define \"t\"}}{{if .Tail}}{{template \"t\" .Tail}}{{end}}{{.Head}}\",{{end}}`,\n> \t\t\t`: cannot compute output context for template\n> t$htmltemplate_stateJS_elementScript`,\n> \t\t},\n\npeculiar. i of course knew about the redefinition, but when i changed the name the test didn't pass. i've done a number of minor changes so i must have inadvertently fixed them.\n\ni'd also like mike samuel to vote, if he has time\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-11-30 22:50:37.524999",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"r@golang.org",
				"mikesamuel@gmail.com",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5434077/diff/4006/src/pkg/html/template/clone_test.go\nFile src/pkg/html/template/clone_test.go (right):\n\nhttp://codereview.appspot.com/5434077/diff/4006/src/pkg/html/template/clone_test.go#newcode56\nsrc/pkg/html/template/clone_test.go:56: d.text.Root = cloneList(s.text.Root)\nOk.  d's root still depends on s.text.Root so below we are testing independence post clone.\n\nhttp://codereview.appspot.com/5434077/diff/4006/src/pkg/html/template/clone_test.go#newcode87\nsrc/pkg/html/template/clone_test.go:87: s.text.Execute(&b, data)\nOk.  This is an explicit reference to the contained type.\n\nhttp://codereview.appspot.com/5434077/diff/4006/src/pkg/html/template/escape_test.go\nFile src/pkg/html/template/escape_test.go (right):\n\nhttp://codereview.appspot.com/5434077/diff/4006/src/pkg/html/template/escape_test.go#newcode933\nsrc/pkg/html/template/escape_test.go:933: /* TODO THESE TWO FAIL\nWill patch in and investigate.\n\nhttp://codereview.appspot.com/5434077/diff/4006/src/pkg/html/template/template.go\nFile src/pkg/html/template/template.go (right):\n\nhttp://codereview.appspot.com/5434077/diff/4006/src/pkg/html/template/template.go#newcode27\nsrc/pkg/html/template/template.go:27: // ExecuteTemplate applies the template associated with t that has the given name\n81 columns\n\nhttp://codereview.appspot.com/5434077/diff/4006/src/pkg/html/template/template.go#newcode32\nsrc/pkg/html/template/template.go:32: return fmt.Errorf(\"template: no template %q associated with template %q\", name, t.Name())\nIf lines 31-34 could be replaced\n\n     if tmpl != nil && !tmpl.escaped {\n\nand line 39 were\n\n     return t.text.ExecuteTemplate(...)\n\nthen you could delegate the error reporting on a nonexistent template to tmpl.text.\nA panic when\n    (t.Lookup(name) == nil) != (t.text.Lookup(name) == nil)\nwould prevent any possibility that we execute an unescaped template due to key skew.\n\nhttp://codereview.appspot.com/5434077/diff/4006/src/pkg/html/template/template.go#newcode86\nsrc/pkg/html/template/template.go:86: return fmt.Errorf(\"html/template: Add unimplemented\")\nAdd -> Clone\n\nhttp://codereview.appspot.com/5434077/diff/4006/src/pkg/html/template/template.go#newcode198\nsrc/pkg/html/template/template.go:198: }\nIs the body from the text version copied in here just so that we can reset the escaped bit on reparsed templates, and so that we can create a wrapper for the first allocated template?",
			"disapproval": false,
			"date": "2011-12-05 22:30:16.966965",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=f73733f21799 ***\n\nhtml/template: update to new template API\n\nNot quite done yet but enough is here to review.\n\nEmbedding is eliminated so clients can't accidentally reach\nmethods of text/template.Template that would break the\ninvariants.\n\nTODO later: Add and Clone are unimplemented.\nTODO later: address issue 2349\n\nR=golang-dev, r, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5434077\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2011-11-30 22:42:22.333473",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"mikesamuel@gmail.com",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5434077/diff/4006/src/pkg/html/template/template.go\nFile src/pkg/html/template/template.go (right):\n\nhttp://codereview.appspot.com/5434077/diff/4006/src/pkg/html/template/template.go#newcode198\nsrc/pkg/html/template/template.go:198: }\nyes. if you have a better approach, please let me know.",
			"disapproval": false,
			"date": "2011-12-06 19:05:56.112847",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"r@golang.org",
				"mikesamuel@gmail.com",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5434077/diff/4006/src/pkg/html/template/escape_test.go\nFile src/pkg/html/template/escape_test.go (right):\n\nhttp://codereview.appspot.com/5434077/diff/4006/src/pkg/html/template/escape_test.go#newcode933\nsrc/pkg/html/template/escape_test.go:933: /* TODO THESE TWO FAIL\nOn 2011/12/05 22:30:17, MikeSamuel wrote:\n> Will patch in and investigate.\n\nLooks like rsc already fixed.",
			"disapproval": false,
			"date": "2011-12-05 23:36:12.523785",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5434077: html/template: update to new template API",
	"created": "2011-11-28 05:07:54.092856",
	"patchsets": [
		1,
		3001,
		6001,
		4006
	],
	"modified": "2011-12-06 19:05:56.498148",
	"closed": true,
	"issue": 5434077
}