{
	"description": "libmach: support reading symbols from Windows .exe for nm\n\nFixes Issue 979.",
	"cc": [
		"rsc@golang.org",
		"alex.brainman@gmail.com",
		"golang-dev@googlegroups.com",
		"vcc.163@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "czapkofan@gmail.com",
			"recipients": [
				"czapkofan@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"vcc.163@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "> That was pretty easy!  Does 6nm work now?\n\nSure easier than debugging Windows callbacks :)\n\n6nm WorksForMe.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/cmd/ld/pe.c\nFile src/cmd/ld/pe.c (right):\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/cmd/ld/pe.c#newcode35\nsrc/cmd/ld/pe.c:35: static char *symlabels[] = {\nOn 2011/08/18 17:38:30, rsc wrote:\n> either make this 1 line or put the closing } on its own line.\n\nDone.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/cmd/ld/pe.c#newcode36\nsrc/cmd/ld/pe.c:36: \"symtab\", \"esymtab\", 0 };\nOn 2011/08/18 17:38:30, rsc wrote:\n> You're going to want pclntab and epclntab too.\n\nDone.\nDidn't want to introduce them if they're not used anywhere yet.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/cmd/ld/pe.c#newcode460\nsrc/cmd/ld/pe.c:460: size = nextsymoff + 4;\nOn 2011/08/18 17:38:30, rsc wrote:\n> On 2011/08/18 01:02:04, czaplinski wrote:\n> > I believe this is more correct. DUMPBIN still seems to be working OK.\n> Why?  Do you have a document?  It seems strange that .symtab's\n> size would not include the bytes taken up by the symbols\n> themselves.  \n\nArrgh, I missed that it's also used in addpesection(). I had noticed only the lputl(size) below, which is the one which should get the above value. Thanks.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/cmd/ld/pe.c#newcode469\nsrc/cmd/ld/pe.c:469: // TODO[ematcza]: assert(strlen(s->name)<=8)\nOn 2011/08/18 17:38:30, rsc wrote:\n> Handle or delete.\n> Don't assert.  If it's worth checking,\n> it's worth printing a useful error.\n> Since symlabels is defined above, just delete.\n\nDone.\nThanks for the clarifications; I wasn't sure what's the policy on these things. Maybe a warning comment near symlabels[] could still be helpful.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/cmd/ld/pe.c#newcode471\nsrc/cmd/ld/pe.c:471: lputl(datoff(s->value)); // TODO[ematcza]: assert(... <= 256**4)?\nOn 2011/08/18 17:38:30, rsc wrote:\n> Delete the TODO.\n> Nothing here is going to work well with >4GB files.\n\nDone.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/cmd/ld/pe.c#newcode472\nsrc/cmd/ld/pe.c:472: wputl(1); // TODO[ematcza]: is .text always section 1?\nOn 2011/08/18 17:38:30, rsc wrote:\n> Yes.  But comment what these fields are.  For example.\n> \n> wputl(1);  // .text is section 1\n> \n\nDone.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/libmach/executable.c\nFile src/libmach/executable.c (right):\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/libmach/executable.c#newcode316\nsrc/libmach/executable.c:316: { 0x4d5a9000,    /* TODO(czaplinski): should be 4d5a only, but can we limit comparison to 2 bytes? */\nOn 2011/08/18 17:38:30, rsc wrote:\n> No, it only lets you compare 4 bytes.\n> What's in the extra two bytes?  The MSDN docs I found\n> say that it is a 32-bit signature that contains \"PE\\0\\0\"\n> but obviously that's not this constant.\n\nThe \"PE\\0\\0\" appears only later in a file, in PE header. The very beginning of the file is a MSDOS EXE header, for Go EXEs exactly dosstub[] from the beginning of ld/pe.c. We can probably quite safely assume we'll never change it, and thus check for it.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/libmach/executable.c#newcode318\nsrc/libmach/executable.c:318: nil, /* TODO */\nOn 2011/08/18 17:38:30, rsc wrote:\n> Can drop the todo.  This is only for dynamic linking, \n> which we're not going to have any time soon.\n\nDone.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/libmach/executable.c#newcode321\nsrc/libmach/executable.c:321: nil, /* TODO */\nOn 2011/08/18 17:38:30, rsc wrote:\n> &mi386,\n> or\n> &mamd64,\n\nDone.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/libmach/executable.c#newcode1245\nsrc/libmach/executable.c:1245: /* TODO(czaplinski): structs are raw copy from pe.h; need factoring out */\nOn 2011/08/18 17:38:30, rsc wrote:\n> The duplication is not a problem.\n\nOk, so to be clear, I understand I can leave all this stuff here.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/libmach/executable.c#newcode1275\nsrc/libmach/executable.c:1275: #pragma pack(1)\nOn 2011/08/18 17:38:30, rsc wrote:\n> This isn't going to work with all compilers.  \n> Please just use a byte array and pull the data\n> out with explicit offsets.\n\nDone.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/libmach/executable.c#newcode1307\nsrc/libmach/executable.c:1307: read(fd, (char *)&start, sizeof(start)); /* TODO: check for underflow */\nOn 2011/08/18 17:38:30, rsc wrote:\n> Do check the error (return 0).\n> You can drop the cast.  Also, please use readn.\n> The surrounding code is admittedly quite sloppy about this.\n> \n\nDone.\nBTW, shouldn't nm.c display the errstr to user?\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/libmach/executable.c#newcode1309\nsrc/libmach/executable.c:1309: seek(fd, start, 0);\nOn 2011/08/18 17:38:30, rsc wrote:\n> Swap down below blank line, so it's next to the read\n> that depends on it.\n\nDone.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/libmach/executable.c#newcode1321\nsrc/libmach/executable.c:1321: if (match8(sh.Name, \".text\")) // TODO[ematcza]: entry = ?\nOn 2011/08/18 17:38:30, rsc wrote:\n> entry = AddressOfEntryPoint\n\nDone.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/libmach/executable.c#newcode1323\nsrc/libmach/executable.c:1323: if (match8(sh.Name, \".data\")) // TODO[ematcza]: bsssz = ?\nOn 2011/08/18 17:38:30, rsc wrote:\n> datsz = SizeOfRawData (not VirtualSize)\n> bsssz = VirtualSize - SizeOfRawData\n\nDone.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/libmach/executable.c#newcode1325\nsrc/libmach/executable.c:1325: if (match8(sh.Name, \".symtab\"))\nOn 2011/08/18 17:38:30, rsc wrote:\n> Looks like this is dead code.\n\nI believe it's not, but actually it doesn't matter anymore, as I've just realized we can really skip this fragment by perusing a direct header field.\n\nThe variable name reuse I've attempted here was partially motivated by a slightly unfortunate naming coincidence, that we have a Windows/COFF \".symtab\", which then points to a Go/Plan9 \"symtab\". But if we're at that, we shouldn't also probably miss the potentially amusing similarity between \"COFF symbols table\" and \"COFF strings table\". As well as ~3 official Magic Number fields lurking around...",
			"disapproval": false,
			"date": "2011-08-19 00:34:10.347233",
			"approval": false
		},
		{
			"sender": "czapkofan@gmail.com",
			"recipients": [
				"czapkofan@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"vcc.163@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4894051/diff/2001/src/cmd/ld/pe.c\nFile src/cmd/ld/pe.c (right):\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/cmd/ld/pe.c#newcode460\nsrc/cmd/ld/pe.c:460: size = nextsymoff + 4;\nI believe this is more correct. DUMPBIN still seems to be working OK.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/libmach/executable.c\nFile src/libmach/executable.c (right):\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/libmach/executable.c#newcode1245\nsrc/libmach/executable.c:1245: /* TODO(czaplinski): structs are raw copy from pe.h; need factoring out */\nShall these be moved to pe.h + #include \"../ld/pe.h\"? \nOr create $GOROOT/include/pecommon.h?",
			"disapproval": false,
			"date": "2011-08-18 01:02:03.616077",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"czapkofan@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"vcc.163@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "It is a good start. Thank you.\n\nPlease add \"Fixes Issue 979\" to CL description.\n\nIt fails to build:\n\n%%%% making libmach %%%%\n\nmake: Entering directory `/root/hg/go/src/libmach'\nquietgcc -I\"/root/hg/go/include\" -ggdb -O2 -c \"/root/hg/go/src/libmach/executable.c\"\nquietgcc -I\"/root/hg/go/include\" -ggdb -O2 -c \"/root/hg/go/src/libmach/fakeobj.c\"\nquietgcc -I\"/root/hg/go/include\" -ggdb -O2 -c \"/root/hg/go/src/libmach/map.c\"\nquietgcc -I\"/root/hg/go/include\" -ggdb -O2 -c \"/root/hg/go/src/libmach/obj.c\"\nquietgcc -I\"/root/hg/go/include\" -ggdb -O2 -c \"/root/hg/go/src/libmach/swap.c\"\ncc1: warnings being treated as errors\n/root/hg/go/src/libmach/executable.c:1307: error: ignoring return value of 'read', declared with attribute warn_unused_result\n/root/hg/go/src/libmach/executable.c:1311: error: ignoring return value of 'read', declared with attribute warn_unused_result\n/root/hg/go/src/libmach/executable.c:1320: error: ignoring return value of 'read', declared with attribute warn_unused_result\n/root/hg/go/src/libmach/executable.c:1332: error: ignoring return value of 'read', declared with attribute warn_unused_result\nmake: *** [executable.o] Error 1\nmake: *** Waiting for unfinished jobs\nmake: Leaving directory `/root/hg/go/src/libmach'\n\nI think, you have to check read return value here.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/cmd/ld/pe.c\nFile src/cmd/ld/pe.c (left):\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/cmd/ld/pe.c#oldcode457\nsrc/cmd/ld/pe.c:457: h = addpesection(\".symtab\", size, size);\naddpesection needs to be given total size of your data: size+18*i. So just move it after you know what the i is equal to.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/cmd/ld/pe.c\nFile src/cmd/ld/pe.c (right):\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/cmd/ld/pe.c#newcode460\nsrc/cmd/ld/pe.c:460: size = nextsymoff + 4;\nOn 2011/08/18 01:02:04, czaplinski wrote:\n> I believe this is more correct. ...\n\nYou are correct, there is a bug here.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/cmd/ld/pe.c#newcode460\nsrc/cmd/ld/pe.c:460: size = nextsymoff + 4;\nOn 2011/08/18 17:38:30, rsc wrote:\n> \n> Why?  Do you have a document?  \n\nhttp://kishorekumar.net/pecoff_v8.1.htm\n\nIt is all starts at PointerToSymbolTable, but there are 2 different things here \"symbol table\" followed by \"string table\". Our \".symtab\" pe section will include both, so pe section should be of size = \"symbol table\" size + \"string table\" size.\n\nAs to the contents of each:\n\n\"symbol table\" consists of NumberOfSymbols records 18 bytes each.\n\non the other hand\n\n\"string table\" starts with 4 byte size of \"string table\" followed by 0 terminated strings one after the other.\n\nThat is my interpretation anyway.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/cmd/ld/pe.c#newcode472\nsrc/cmd/ld/pe.c:472: wputl(1); // TODO[ematcza]: is .text always section 1?\nIt is at the moment. But it would be wise not to hard code this. I think if you grab value of nsect right after \".text\" pe section is created with addpesection, you should be good.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/cmd/ld/pe.c#newcode475\nsrc/cmd/ld/pe.c:475: cput(0);\nNot must, but would be nice to know what these mean. Perhaps you could add couple of these const to pe.h file and use them here.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/libmach/executable.c\nFile src/libmach/executable.c (right):\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/libmach/executable.c#newcode316\nsrc/libmach/executable.c:316: { 0x4d5a9000,    /* TODO(czaplinski): should be 4d5a only, but can we limit comparison to 2 bytes? */\nI think you have no choice, but compare 2 bytes only.\n\ntypedef struct _IMAGE_DOS_HEADER {  // DOS .EXE header\n    USHORT e_magic;         // Magic number\n    USHORT e_cblp;          // Bytes on last page of file\n...\n\nYou are checking for e_magic. There is nothing predefined about e_cblp. It will be 0x9000 for every Go program, but only because we made it so. Not sure that all other executables will match.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/libmach/executable.c#newcode1245\nsrc/libmach/executable.c:1245: /* TODO(czaplinski): structs are raw copy from pe.h; need factoring out */\nOn 2011/08/18 01:02:04, czaplinski wrote:\n> Shall these be moved to pe.h + #include \"../ld/pe.h\"? \n> Or create $GOROOT/include/pecommon.h?\n\nI don't know the answer. I hope Russ will help. I agree we should share pe.h between 8l and 6nm.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/libmach/executable.c#newcode1273\nsrc/libmach/executable.c:1273: } peheader;\nI don't think you need to invent this struct. Just match 4 byte signature and use IMAGE_FILE_HEADER straight after it.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/libmach/executable.c#newcode1329\nsrc/libmach/executable.c:1329: seek(fd, symtab, 0);\nI would use IMAGE_FILE_HEADER.PointerToSymbolTable to find your symbols instead. The fact that they are live in \".symtab\" pe section is purely my choice. It is not required by any documentation. While IMAGE_FILE_HEADER.PointerToSymbolTable is described in the manual.",
			"disapproval": false,
			"date": "2011-08-19 00:31:31.014888",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"czapkofan@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"vcc.163@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "That was pretty easy!  Does 6nm work now?\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/cmd/ld/pe.c\nFile src/cmd/ld/pe.c (right):\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/cmd/ld/pe.c#newcode35\nsrc/cmd/ld/pe.c:35: static char *symlabels[] = {\neither make this 1 line or put the closing } on its own line.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/cmd/ld/pe.c#newcode36\nsrc/cmd/ld/pe.c:36: \"symtab\", \"esymtab\", 0 };\nYou're going to want pclntab and epclntab too.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/cmd/ld/pe.c#newcode460\nsrc/cmd/ld/pe.c:460: size = nextsymoff + 4;\nOn 2011/08/18 01:02:04, czaplinski wrote:\n> I believe this is more correct. DUMPBIN still seems to be working OK.\n\nWhy?  Do you have a document?  It seems strange that .symtab's\nsize would not include the bytes taken up by the symbols\nthemselves.  I would have expected 18*2 + nextsymoff + 4\nfor two symbols.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/cmd/ld/pe.c#newcode469\nsrc/cmd/ld/pe.c:469: // TODO[ematcza]: assert(strlen(s->name)<=8)\nHandle or delete.\nDon't assert.  If it's worth checking,\nit's worth printing a useful error.\nSince symlabels is defined above, just delete.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/cmd/ld/pe.c#newcode471\nsrc/cmd/ld/pe.c:471: lputl(datoff(s->value)); // TODO[ematcza]: assert(... <= 256**4)?\nDelete the TODO.\nNothing here is going to work well with >4GB files.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/cmd/ld/pe.c#newcode472\nsrc/cmd/ld/pe.c:472: wputl(1); // TODO[ematcza]: is .text always section 1?\nYes.  But comment what these fields are.  For example.\n\nwputl(1);  // .text is section 1\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/libmach/executable.c\nFile src/libmach/executable.c (right):\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/libmach/executable.c#newcode316\nsrc/libmach/executable.c:316: { 0x4d5a9000,    /* TODO(czaplinski): should be 4d5a only, but can we limit comparison to 2 bytes? */\nNo, it only lets you compare 4 bytes.\nWhat's in the extra two bytes?  The MSDN docs I found\nsay that it is a 32-bit signature that contains \"PE\\0\\0\"\nbut obviously that's not this constant.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/libmach/executable.c#newcode318\nsrc/libmach/executable.c:318: nil, /* TODO */\nCan drop the todo.  This is only for dynamic linking, \nwhich we're not going to have any time soon.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/libmach/executable.c#newcode321\nsrc/libmach/executable.c:321: nil, /* TODO */\n&mi386,\nor\n&mamd64,\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/libmach/executable.c#newcode1245\nsrc/libmach/executable.c:1245: /* TODO(czaplinski): structs are raw copy from pe.h; need factoring out */\nOn 2011/08/18 01:02:04, czaplinski wrote:\n> Shall these be moved to pe.h + #include \"../ld/pe.h\"? \n> Or create $GOROOT/include/pecommon.h?\n\nThe duplication is not a problem.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/libmach/executable.c#newcode1275\nsrc/libmach/executable.c:1275: #pragma pack(1)\nThis isn't going to work with all compilers.  \nPlease just use a byte array and pull the data\nout with explicit offsets.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/libmach/executable.c#newcode1307\nsrc/libmach/executable.c:1307: read(fd, (char *)&start, sizeof(start)); /* TODO: check for underflow */\nDo check the error (return 0).\nYou can drop the cast.  Also, please use readn.\nThe surrounding code is admittedly quite sloppy about this.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/libmach/executable.c#newcode1309\nsrc/libmach/executable.c:1309: seek(fd, start, 0);\nSwap down below blank line, so it's next to the read\nthat depends on it.\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/libmach/executable.c#newcode1321\nsrc/libmach/executable.c:1321: if (match8(sh.Name, \".text\")) // TODO[ematcza]: entry = ?\nentry = AddressOfEntryPoint\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/libmach/executable.c#newcode1323\nsrc/libmach/executable.c:1323: if (match8(sh.Name, \".data\")) // TODO[ematcza]: bsssz = ?\ndatsz = SizeOfRawData (not VirtualSize)\nbsssz = VirtualSize - SizeOfRawData\n\nhttp://codereview.appspot.com/4894051/diff/2001/src/libmach/executable.c#newcode1325\nsrc/libmach/executable.c:1325: if (match8(sh.Name, \".symtab\"))\nLooks like this is dead code.",
			"disapproval": false,
			"date": "2011-08-18 17:38:30.587461",
			"approval": false
		},
		{
			"sender": "czapkofan@gmail.com",
			"recipients": [
				"czapkofan@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"vcc.163@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: alex.brainman@gmail.com, golang-dev@googlegroups.com, vcc.163@gmail.com),\n\nI'd like you to review this change to\nhttp://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-08-19 00:30:36.047740",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"czapkofan@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"vcc.163@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Please add \"Fixes Issue 979\" to CL description.\n\nOther then that, it LGTM. Thank you.\n\nhttp://codereview.appspot.com/4894051/diff/1002/src/cmd/ld/pe.c\nFile src/cmd/ld/pe.c (right):\n\nhttp://codereview.appspot.com/4894051/diff/1002/src/cmd/ld/pe.c#newcode472\nsrc/cmd/ld/pe.c:472: wputl(1);       // .text is section 1\nI am concerned about this hard coding. If someone will decide to move .text section about they would not have a clue about your assumption. I don't think it is hard to implement it as I have described in my previous review. Thank you.",
			"disapproval": false,
			"date": "2011-08-19 01:14:00.849501",
			"approval": true
		},
		{
			"sender": "czapkofan@gmail.com",
			"recipients": [
				"czapkofan@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"vcc.163@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Just some comments, patchset will come later.\n\nhttp://codereview.appspot.com/4894051/diff/1002/src/cmd/ld/pe.c\nFile src/cmd/ld/pe.c (right):\n\nhttp://codereview.appspot.com/4894051/diff/1002/src/cmd/ld/pe.c#newcode472\nsrc/cmd/ld/pe.c:472: wputl(1);       // .text is section 1\nOn 2011/08/19 01:14:00, brainman wrote:\n> I am concerned about this hard coding. If someone will decide to move .text\n> section about they would not have a clue about your assumption. I don't think it\n> is hard to implement it as I have described in my previous review. Thank you.\n\nOk, I'll try to do this, and also to update the CL desc.\n\nI can also remove the peheader struct in executable.c if you think that'll be cleaner.\n\nTo clarify, I sure didn't want to dismiss your comments, only coincidentally we published nearly in the same moment, so I didn't have reflexes to react.",
			"disapproval": false,
			"date": "2011-08-19 07:35:42.429771",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"czapkofan@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"vcc.163@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On Tue, Aug 23, 2011 at 2:57 PM, Russ Cox <rsc@golang.org> wrote:\n> In the long term the right thing to do is to write them all out\n> as Windows symbols.  It's okay that there are 3 copies:\n> only one gets loaded into memory. \n\nAll our pe sections are loaded into the memory at this moment.\n\nMemory map\nAddress   Size      Owner            Section    Contains                 Type  Access   Initial >Mapped as\n...\n00400000  00001000 >test            >           PE header                Img  >R        RWE Copy>\n00401000  000CA000 >test            >.text      Code                     Img  >R E      RWE Copy>\n004CB000  00417000 >test            >.data      Data                     Img  >RW  Copy>RWE Copy>\n008E2000  00001000 >test            >/4                                  Img  >R        RWE Copy>\n008E3000  0000C000 >test            >/18                                 Img  >R        RWE Copy>\n008EF000  00008000 >test            >/30                                 Img  >R        RWE Copy>\n008F7000  00022000 >test            >/43                                 Img  >R        RWE Copy>\n00919000  0000D000 >test            >/55                                 Img  >R        RWE Copy>\n00926000  00003000 >test            >/71                                 Img  >R        RWE Copy>\n00929000  00001000 >test            >/87                                 Img  >R        RWE Copy>\n0092A000  00001000 >test            >/102                                Img  >R        RWE Copy>\n0092B000  00001000 >test            >.idata     Imports                  Img  >RW  Copy>RWE Copy>\n0092C000  00001000 >test            >.symtab                             Img  >R        RWE Copy>\n...\n\n\".text\" section contains gosymbols and line numbers at this moment:\n\ntext = segtext.sect;\nrodata = text->next;\nsymtab = rodata->next;\npclntab = symtab->next;\n\nWe can't leave any of them out, they are used for reflect and others.\n\nSections named '/4', '/18' and so on are dwarf sections. I don't know for sure, but I suspect some of them repeat symbols and line number information too.\n\nSection \".symtab\" has 4 symbols introduced by that CL to point to \"symtab\" and \"pclntab\" in \".text\" section. It looks like nm will see symbols listed in this section. Are you're saying we should leave dwarf and \".text\" sections as they are and just add all symbols to \".symtab\" section as well?\n\n> Maybe if the nm copy\n> exists the DWARF copy can be omitted. \n\nDwarf is used by gdb, we can't omit any of that. Perhaps, pe dwarf sections can be changed, so they don't map into real memory, but I do not care about saving address space just now.\n\n> I don't think we\n> have separate ELF and DWARF symbol tables in ELF binaries.\n\nHow does nm find symbols on linux?\n\nAlex",
			"disapproval": false,
			"date": "2011-08-23 06:37:12.224377",
			"approval": false
		},
		{
			"sender": "czapkofan@gmail.com",
			"recipients": [
				"czapkofan@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"vcc.163@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "PTAL.",
			"disapproval": false,
			"date": "2011-08-19 12:31:31.848398",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"czapkofan@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"vcc.163@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I don't have computer to build and check but it LGTM. Thank you for doing it.\n\nAlex",
			"disapproval": false,
			"date": "2011-08-20 03:35:48.604758",
			"approval": true
		},
		{
			"sender": "czapkofan@gmail.com",
			"recipients": [
				"czapkofan@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"vcc.163@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Happy to help. Wish I had more time for having fun with these kinds of things.\n/M.",
			"disapproval": false,
			"date": "2011-08-21 21:07:28.848135",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"czapkofan@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"vcc.163@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I tried to use this changed 6nm with gopprof to view memory profile of a program. And gopprof still does not work. The issue seems to be that gopprof uses couple of different \"extract names and addresses from executable\" tools:\n\nnm -n  --demangle test.exe 2>/dev/null\nnm -D -n  --demangle test.exe 2>/dev/null\n6nm test.exe 2>/dev/null | sort\n\nin that order on off chance that one of them will work. Now, that we have added 4 symbols to our executable, nm will display them:\n\n# nm test.exe\n00000000004ca43c T epclntab\n00000000004c36d4 T esymtab\n00000000004c36d4 T pclntab\n000000000048a814 T symtab\n#\n\nUnfortunetly, that is not what we want to see. We would like to see something similar to ELF output:\n\n# nm test | grep main\n08048d42 T main.init\n080f518c R main.initdone\u00c2\n08048d02 T main.main\n08048c00 T main.stat\n08049916 T runtime.mainstart\n#\n\nIf I trim gopprof list of exe readers to 6nm only:\n\n6nm test.exe 2>/dev/null | sort\n\nthen it works. This is quick and dirty solution.\n\nAlternatively, our *windows symbol table* should contain all our real symbols. Then both nm and 6nm (and perhaps some other tools) will be able to read them. We could write them all out, but then we will have 3 copies of those: first inside \".text\" pe section that we have now, second inside dwarf, and third in \"windows symbol table\".\n\nPerhaps, we should decide what to do with gopprof before we submit this change. Any comments?\n\nAlex",
			"disapproval": false,
			"date": "2011-08-23 04:08:43.834213",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "In the long term the right thing to do is to write them all out\nas Windows symbols.  It's okay that there are 3 copies:\nonly one gets loaded into memory.  Maybe if the nm copy\nexists the DWARF copy can be omitted.  I don't think we\nhave separate ELF and DWARF symbol tables in ELF binaries.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-08-23 04:57:55.267326",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Tue, Aug 23, 2011 at 02:37,  <alex.brainman@gmail.com> wrote:\n> On Tue, Aug 23, 2011 at 2:57 PM, Russ Cox <rsc@golang.org> wrote:\n>>\n>> In the long term the right thing to do is to write them all out\n>> as Windows symbols. \u00a0It's okay that there are 3 copies:\n>> only one gets loaded into memory.\n>\n> All our pe sections are loaded into the memory at this moment.\n>\n> Memory map\n> Address \u00a0 Size \u00a0 \u00a0 \u00a0Owner \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Section \u00a0 \u00a0Contains\n> Type \u00a0Access \u00a0 Initial >Mapped as\n> ...\n> 00400000 \u00a000001000 >test \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 PE header\n> Img \u00a0>R \u00a0 \u00a0 \u00a0 \u00a0RWE Copy>\n> 00401000 \u00a0000CA000 >test \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0>.text \u00a0 \u00a0 \u00a0Code\n> Img \u00a0>R E \u00a0 \u00a0 \u00a0RWE Copy>\n> 004CB000 \u00a000417000 >test \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0>.data \u00a0 \u00a0 \u00a0Data\n> Img \u00a0>RW \u00a0Copy>RWE Copy>\n> 008E2000 \u00a000001000 >test \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0>/4\n> Img \u00a0>R \u00a0 \u00a0 \u00a0 \u00a0RWE Copy>\n> 008E3000 \u00a00000C000 >test \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0>/18\n> Img \u00a0>R \u00a0 \u00a0 \u00a0 \u00a0RWE Copy>\n> 008EF000 \u00a000008000 >test \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0>/30\n> Img \u00a0>R \u00a0 \u00a0 \u00a0 \u00a0RWE Copy>\n> 008F7000 \u00a000022000 >test \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0>/43\n> Img \u00a0>R \u00a0 \u00a0 \u00a0 \u00a0RWE Copy>\n> 00919000 \u00a00000D000 >test \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0>/55\n> Img \u00a0>R \u00a0 \u00a0 \u00a0 \u00a0RWE Copy>\n> 00926000 \u00a000003000 >test \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0>/71\n> Img \u00a0>R \u00a0 \u00a0 \u00a0 \u00a0RWE Copy>\n> 00929000 \u00a000001000 >test \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0>/87\n> Img \u00a0>R \u00a0 \u00a0 \u00a0 \u00a0RWE Copy>\n> 0092A000 \u00a000001000 >test \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0>/102\n> Img \u00a0>R \u00a0 \u00a0 \u00a0 \u00a0RWE Copy>\n> 0092B000 \u00a000001000 >test \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0>.idata \u00a0 \u00a0 Imports\n> Img \u00a0>RW \u00a0Copy>RWE Copy>\n> 0092C000 \u00a000001000 >test \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0>.symtab\n> Img \u00a0>R \u00a0 \u00a0 \u00a0 \u00a0RWE Copy>\n> ...\n>\n> \".text\" section contains gosymbols and line numbers at this moment:\n>\n> text = segtext.sect;\n> rodata = text->next;\n> symtab = rodata->next;\n> pclntab = symtab->next;\n>\n> We can't leave any of them out, they are used for reflect and others.\n>\n> Sections named '/4', '/18' and so on are dwarf sections. I don't know\n> for sure, but I suspect some of them repeat symbols and line number\n> information too.\n>\n> Section \".symtab\" has 4 symbols introduced by that CL to point to\n> \"symtab\" and \"pclntab\" in \".text\" section. It looks like nm will see\n> symbols listed in this section. Are you're saying we should leave dwarf\n> and \".text\" sections as they are and just add all symbols to \".symtab\"\n> section as well?\n\nAre you saying that the dwarf and \".symtab\" sections get\nloaded into memory?  I don't see why that would be necessary\nthough I can believe it was easy.  I was saying that since neither\nneeds to be loaded into memory it is not a big deal if they\nduplicate information that is also in memory.\n\nSo yes, I was suggesting to add all the symbols to '.symtab'\n(the Windows table, which need not be in memory and is different\nfrom the runtime's symtab data), so that Windows tools can\nsee Go's symbols.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-08-26 20:02:35.501361",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"czapkofan@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"vcc.163@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "> \n> Are you saying that the dwarf and \".symtab\" sections get\n> loaded into memory? \n\nI think they are, but will check:\n\nhttp://code.google.com/p/go/issues/detail?id=2198\n\n> So yes, I was suggesting to add all the symbols to '.symtab'\n> (the Windows table, which need not be in memory and is different\n> from the runtime's symtab data), so that Windows tools can\n> see Go's symbols.\n\nhttp://code.google.com/p/go/issues/detail?id=2199\n\nI think we should go ahead with this CL. 6nm works fine now, and that is what this CL was designed to achieve.\n\nAlex",
			"disapproval": false,
			"date": "2011-08-29 02:36:40.280123",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"czapkofan@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"vcc.163@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-08-29 13:30:14.360579",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"czapkofan@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"vcc.163@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=3e2c2acc9e86 ***\n\nlibmach: support reading symbols from Windows .exe for nm\n\nFixes Issue 979.\n\nR=rsc, alex.brainman\nCC=golang-dev, vcc.163\nhttp://codereview.appspot.com/4894051\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2011-08-29 18:25:47.137759",
			"approval": false
		}
	],
	"owner_email": "czapkofan@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "czaplinski",
	"subject": "code review 4894051: libmach: support reading symbols from Windows .exe for nm",
	"created": "2011-08-18 00:51:51.594431",
	"patchsets": [
		1,
		2001,
		9001,
		1002,
		16001
	],
	"modified": "2011-08-29 18:25:47.137759",
	"closed": false,
	"issue": 4894051
}