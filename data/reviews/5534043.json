{
	"description": "graphics/interp: move interpolation to its own package\n\nStill trying to work out what the affine API should look like.\nRight now I am leaning towards exposing transform functions for\neach image type.",
	"cc": [
		"nigeltao@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "crawshaw@google.com",
			"recipients": [
				"crawshaw@google.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/08 23:46:25, nigeltao wrote:\n> On 9 January 2012 10:35, David Crawshaw <mailto:crawshaw@google.com> wrote:\n> > 2. Make the interpolation function signatures match by taking an\n> > image.Image returning a color.Color:\n> >\n> > &nbsp;func(src image.Image, sx, sy float64) color.Color\n> >\n> > ...\n> >\n> > The second seems worse, because it means two type switches for each\n> > pixel in the image you apply the affine transform to. One in the\n> > interpolation function to extract the right image type, and one in\n> > transform to extract the color. How expensive are these?\n> \n> Here's a third way:\n> \n> Instead of an interpolation function, you could have an interface {\n>   Interp(src image.Image, sx, sy float64) color.Color\n> }\n> \n> Implementations could optionally implement interface {\n>   InterpRGBA(src *image.RGBA, sx, sy float64) color.RGBA\n> }\n> \n> The interface check is done once per transformation, not per pixel.\n\nPTAL - just a move, I will explore the interface in another CL\n\nOddly, I used \"hg rm bilinear.go\" and uploaded, and \"hg pending\" shows it as being in this CL, but I don't see it on rietveld.",
			"disapproval": false,
			"date": "2012-01-09 03:47:50.875417",
			"approval": false
		},
		{
			"sender": "crawshaw@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jan 9, 2012 at 10:26 AM,  <nigeltao@golang.org> wrote:\n> Again, you are doing file renames and API changes in the one CL.\n>\n> You are introducing color-model specific functions (e.g. TransformRGBA,\n> BilinearGray16) as exported API. A more Go-like approach (and not a\n> C/C++ approach) would be for the exported API to only deal with the\n> generic image.Image interface, but type-switch to fast paths for common\n> cases (like RGBA images), like the image/draw package. I don't know yet\n> if that's achievable with separate graphics, convolve and interp\n> packages, but I wouldn't want to rule it out immediately, and what you\n> have here (introducing color-model specific functions in a renaming CL)\n> seems to rule that out immediately.\n\nSo there are two ways I had thought of to do that:\n\n1. Create an enum for interpolation types which you pass into the\nTransform function.\n2. Make the interpolation function signatures match by taking an\nimage.Image returning a color.Color:\n\n  func(src image.Image, sx, sy float64) color.Color\n\nMy problem with the first option is it means you can't plug in your\nown interpolation function. That's not too big a deal, you could just\nimplement your own Transform function.\n\nThe second seems worse, because it means two type switches for each\npixel in the image you apply the affine transform to. One in the\ninterpolation function to extract the right image type, and one in\ntransform to extract the color. How expensive are these?\n\nThis is the same thing that led me to add Size and Radius to the\nconvolve Kernel: I want to break out the single-pixel code in the loop\nso I can use it in interpolation, but I don't want to recalculate the\nsize and radius for every pixel in the whole-image convolve case.\n\nI am probably overdoing it. I'll send you separate CLs for the move\nand then rework these to have a simpler interface.\n\n> Also, you need to \"hg remove\" something.\n\nHmm, I figured an \"hg mv\" would do that for me.\n\n> http://codereview.appspot.com/5534043/\n",
			"disapproval": false,
			"date": "2012-01-08 23:35:44.898357",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 9 January 2012 10:35, David Crawshaw <crawshaw@google.com> wrote:\n> 2. Make the interpolation function signatures match by taking an\n> image.Image returning a color.Color:\n>\n> \u00a0func(src image.Image, sx, sy float64) color.Color\n>\n> ...\n>\n> The second seems worse, because it means two type switches for each\n> pixel in the image you apply the affine transform to. One in the\n> interpolation function to extract the right image type, and one in\n> transform to extract the color. How expensive are these?\n\nHere's a third way:\n\nInstead of an interpolation function, you could have an interface {\n  Interp(src image.Image, sx, sy float64) color.Color\n}\n\nImplementations could optionally implement interface {\n  InterpRGBA(src *image.RGBA, sx, sy float64) color.RGBA\n}\n\nThe interface check is done once per transformation, not per pixel.\n",
			"disapproval": false,
			"date": "2012-01-08 23:46:25.963914",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"crawshaw@google.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Again, you are doing file renames and API changes in the one CL.\n\nYou are introducing color-model specific functions (e.g. TransformRGBA, BilinearGray16) as exported API. A more Go-like approach (and not a C/C++ approach) would be for the exported API to only deal with the generic image.Image interface, but type-switch to fast paths for common cases (like RGBA images), like the image/draw package. I don't know yet if that's achievable with separate graphics, convolve and interp packages, but I wouldn't want to rule it out immediately, and what you have here (introducing color-model specific functions in a renaming CL) seems to rule that out immediately.\n\nAlso, you need to \"hg remove\" something.",
			"disapproval": false,
			"date": "2012-01-08 23:26:48.363018",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"crawshaw@google.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\n\nhttp://codereview.appspot.com/5534043/diff/6009/graphics/interp/bilinear.go\nFile graphics/interp/bilinear.go (right):\n\nhttp://codereview.appspot.com/5534043/diff/6009/graphics/interp/bilinear.go#newcode17\ngraphics/interp/bilinear.go:17: // BinterpRGBA interpolates (sx, sy) and writes it to (x, y).\nSince this function is now exported, add a little commentary to say that the \"B\" stands for bilinear.",
			"disapproval": false,
			"date": "2012-01-09 04:46:47.679225",
			"approval": true
		},
		{
			"sender": "crawshaw@google.com",
			"recipients": [
				"crawshaw@google.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://crawshaw%40google.com@code.google.com/p/graphics-go/",
			"disapproval": false,
			"date": "2012-01-08 03:57:27.682208",
			"approval": false
		},
		{
			"sender": "crawshaw@google.com",
			"recipients": [
				"crawshaw@google.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5534043/diff/6009/graphics/interp/bilinear.go\nFile graphics/interp/bilinear.go (right):\n\nhttp://codereview.appspot.com/5534043/diff/6009/graphics/interp/bilinear.go#newcode17\ngraphics/interp/bilinear.go:17: // BinterpRGBA interpolates (sx, sy) and writes it to (x, y).\nOn 2012/01/09 04:46:47, nigeltao wrote:\n> Since this function is now exported, add a little commentary to say that the \"B\"\n> stands for bilinear.\n\nDone.",
			"disapproval": false,
			"date": "2012-01-09 04:58:38.027945",
			"approval": false
		},
		{
			"sender": "crawshaw@google.com",
			"recipients": [
				"crawshaw@google.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as f79a351b495f ***\n\ngraphics/interp: move interpolation to its own package\n\nStill trying to work out what the affine API should look like.\nRight now I am leaning towards exposing transform functions for\neach image type.\n\nR=nigeltao\nCC=golang-dev\nhttp://codereview.appspot.com/5534043",
			"disapproval": false,
			"date": "2012-01-09 04:59:10.229033",
			"approval": false
		}
	],
	"owner_email": "crawshaw@google.com",
	"private": false,
	"base_url": "",
	"owner": "crawshaw1",
	"subject": "code review 5534043: graphics/interp: move interpolation to its own package",
	"created": "2012-01-08 03:43:05.250780",
	"patchsets": [
		1,
		2001,
		4001,
		6001,
		2006,
		2007,
		6009,
		5006
	],
	"modified": "2012-01-09 05:01:38.766384",
	"closed": true,
	"issue": 5534043
}