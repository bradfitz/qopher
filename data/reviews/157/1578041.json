{
	"description": "\tadd Windows ForkExec, Syscall12\n        Updated script that generates syscalls to use them if need be.\n        Added windows ForkExec to windows.  Needs tracing, env, and Fd added still.\n\tRenamed syscall/exec.go to exec_unix.go.",
	"cc": [
		"alex.brainman@gmail.com",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello brainman, rsc1 (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change.",
			"disapproval": false,
			"date": "2010-06-07 03:56:05.576727",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"kardianos@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2010-06-07 19:38:28.517335",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"kardianos@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "thanks for doing this.  please make the first line\nof the CL description follow the guidelines at\nhttp://golang.org/doc/contribute.html.  for example:\n\nsyscall: add Windows ForkExec, Syscall12, Syscall15\n\nhttp://codereview.appspot.com/1578041/diff/2001/3004\nFile src/pkg/syscall/exec_windows.go (right):\n\nhttp://codereview.appspot.com/1578041/diff/2001/3004#newcode54\nsrc/pkg/syscall/exec_windows.go:54: // Convert array of string to array\nlooks like it was copied but is unused\n\nhttp://codereview.appspot.com/1578041/diff/2001/3004#newcode64\nsrc/pkg/syscall/exec_windows.go:64: func CloseOnExec(fd int) { fcntl(fd, F_SETFD, FD_CLOEXEC) }\non Windows this should be a no-op\n\nhttp://codereview.appspot.com/1578041/diff/2001/3004#newcode66\nsrc/pkg/syscall/exec_windows.go:66: func SetNonblock(fd int, nonblocking bool) (errno int) {\nThis is probably a no-op too, at least until there's a package net.\n\nhttp://codereview.appspot.com/1578041/diff/2001/3004#newcode96\nsrc/pkg/syscall/exec_windows.go:96: StringToUTF16Ptr(\"\\\"\"+argv0+\"\\\" \"+stringJoin(argv, \" \")),\nI'd like to see quotes around every argument.\nIs there some syntax to escape existing quotes?",
			"disapproval": false,
			"date": "2010-06-07 20:01:07.154539",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2010/06/07 03:56:05, kardia wrote:\n> Hello brainman, rsc1 (cc: mailto:golang-dev@googlegroups.com),\n> \n> I'd like you to review this change.\n\nThanks for making the effort.\n\nI tried to write small program similar to src\\pkg\\exec\\exec_test.go, like so:\n\n\tcmd, err := exec.Run(\"c:\\\\winnt\\\\system32\\\\netstat.exe\", []string{\"netstat\"}, nil, \"\",\n\t\texec.DevNull, exec.Pipe, exec.DevNull)\n\tif err != nil {\n\t\tabortf(\"run: %s\\n\", err)\n\t}\n\tbuf, err := ioutil.ReadAll(cmd.Stdout)\n\tif err != nil {\n\t\tabortf(\"read: %s\\n\", err)\n\t}\n\tfmt.Printf(\"buf: %v\\n\", buf)\n\tif err = cmd.Close(); err != nil {\n\t\tabortf(\"close: %s\\n\", err)\n\t}\n\nbut it fails with\n\nC:\\TMP>\\\\sos\\pub\\test\nrun: open /dev/null: The system cannot find the path specified.\n\nDo you have a small program that runs? \n\n\nAlex",
			"disapproval": false,
			"date": "2010-06-08 07:18:24.531477",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\n>     cmd, err := exec.Run(\"c:\\\\winnt\\\\system32\\\\netstat.exe\",\n> []string{\"netstat\"}, nil, \"\",\n>         exec.DevNull, exec.Pipe, exec.DevNull)\n\nRight now the working dir is mandatory.  Give it a real path, such as \n\"C:\\\\\".  If you don't it will complain.  For consistency, this is one of \nthe issues that might need to tested for.  I'll add a comment to the \ncode for now.\n\n\n",
			"disapproval": false,
			"date": "2010-06-08 13:43:38.580497",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello brainman, rsc (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-06-08 14:09:21.072379",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2010/06/08 14:09:21, kardia wrote:\n> Hello brainman, rsc (cc: mailto:golang-dev@googlegroups.com),\n> \n> Please take another look.\n\nAlex, here's a test program.  You'll probably need to change windows to winnt.\n\npackage main\n\nimport \"os\"\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Printf(\"A\\n\")\n\tpid, err := os.ForkExec(\"c:\\\\windows\\\\system32\\\\netstat.exe\", []string { \"\"}, []string{\"\"}, \"c:\\\\windows\\\\system32\\\\\", []*os.File{})\n\tfmt.Printf(\"B\\n\")\n\tif err != nil {\n\t\tfmt.Printf(\"Error: %s\", err.String())\n\t}\n\tfmt.Printf(\"C\\n\")\n\tfmt.Printf(\"PID: %d\\n\", pid)\n}",
			"disapproval": false,
			"date": "2010-06-08 14:17:04.322750",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello brainman, rsc (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-06-08 14:25:27.636320",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/1578041/diff/11018/26004\nFile src/pkg/syscall/exec_windows.go (right):\n\nhttp://codereview.appspot.com/1578041/diff/11018/26004#newcode109\nsrc/pkg/syscall/exec_windows.go:109: // 0x00000400 = UNICODE env\nDo not need the comment about UNICODE now.\n\nhttp://codereview.appspot.com/1578041/diff/11018/26006\nFile src/pkg/syscall/syscall_windows.go (right):\n\nhttp://codereview.appspot.com/1578041/diff/11018/26006#newcode132\nsrc/pkg/syscall/syscall_windows.go:132: //sys\tCreateProcess(appName *int16, commandLine *uint16, procSecurity *int16, threadSecurity *int16, inheritHandles int16, creationFlags uint32, env *uint16, currentDir *uint16, startupInfo *StartupInfo, outProcInfo *ProcessInformation)  (ok uint32, errno int) [failretval=0] = CreateProcessW\ninheritHandles is not int16, it is 4 bytes long, you will get away with it here, because in zsyscall_windows_386.go it is converted to uintptr anyway, but if you do it in a struc, you will get burned.\n\nIf you make it inheritHandles bool, this:\n\ndiff -r a9f764657223 src/pkg/syscall/mksyscall_windows.sh\n--- a/src/pkg/syscall/mksyscall_windows.sh      Thu Jun 10 13:30:39 2010 -0700\n+++ b/src/pkg/syscall/mksyscall_windows.sh      Fri Jun 11 12:54:47 2010 +1000\n@@ -133,6 +133,11 @@\n                        } else {\n                                push @args, \"uintptr($name)\", \"uintptr($name >> 32)\";\n                        }\n+               } elsif($type eq \"bool\") {\n+                       $text .= \"\\tvar _p$n uint32;\\n\";\n+                       $text .= \"\\tif $name { _p$n = 1; } else { _p$n = 0; }\\n\";\n+                       push @args, \"uintptr(unsafe.Pointer(_p$n))\";\n                } else {\n                        push @args, \"uintptr($name)\";\n                }\n\nshould take care of it. Then you don't need to think twice what you must pass to have your handles inherited - \"0\" or \"1\" or \"-1\" or \"9999\", it will be \"true\".\n\nhttp://codereview.appspot.com/1578041/diff/11018/26006#newcode132\nsrc/pkg/syscall/syscall_windows.go:132: //sys\tCreateProcess(appName *int16, commandLine *uint16, procSecurity *int16, threadSecurity *int16, inheritHandles int16, creationFlags uint32, env *uint16, currentDir *uint16, startupInfo *StartupInfo, outProcInfo *ProcessInformation)  (ok uint32, errno int) [failretval=0] = CreateProcessW\nReturn values should be:\n\n(ok bool, errno int) = CreateProcessW\n\nlike all other similar functions.\n\nhttp://codereview.appspot.com/1578041/diff/11018/26008\nFile src/pkg/syscall/ztypes_windows_386.go (right):\n\nhttp://codereview.appspot.com/1578041/diff/11018/26008#newcode175\nsrc/pkg/syscall/ztypes_windows_386.go:175: _             uint8\nIt is *byte (4 bytes long), not uint8 (1 byte long).\nBug like that would be difficult to find - offsets of StdInput, StdOutput, Stderr are now wrong and windows will not find you parameters there.",
			"disapproval": false,
			"date": "2010-06-11 11:16:37.001478",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/1578041/diff/14001/11009\nFile src/pkg/runtime/windows/syscall.goc (right):\n\nhttp://codereview.appspot.com/1578041/diff/14001/11009#newcode49\nsrc/pkg/runtime/windows/syscall.goc:49: func Syscall15(trap uintptr, a1 uintptr, a2 uintptr, a3 uintptr, a4 uintptr, a5 uintptr, a6 uintptr, a7 uintptr, a8 uintptr, a9 uintptr, a10 uintptr, a11 uintptr, a12 uintptr, a13 uintptr, a14 uintptr, a15 uintptr) (r1 uintptr, r2 uintptr, lasterr uintptr) {\nDo you really need Syscall15?\n\nhttp://codereview.appspot.com/1578041/diff/14001/11012\nFile src/pkg/syscall/exec_windows.go (right):\n\nhttp://codereview.appspot.com/1578041/diff/14001/11012#newcode102\nsrc/pkg/syscall/exec_windows.go:102: startupInfo := new(StartupInfo)\nAren't you supposed to at lease set startupInfo.Cb?\n\nhttp://codereview.appspot.com/1578041/diff/14001/11012#newcode109\nsrc/pkg/syscall/exec_windows.go:109: // 0x00000400 = UNICODE env\nInstead of the comment, I would have const:\n\nCREATE_UNICODE_ENVIRONMENT = 0x00000400\n\nhttp://codereview.appspot.com/1578041/diff/14001/11014\nFile src/pkg/syscall/syscall_windows.go (right):\n\nhttp://codereview.appspot.com/1578041/diff/14001/11014#newcode135\nsrc/pkg/syscall/syscall_windows.go:135: //sys\tWaitForSingleObject(handle int32, waitMilliseconds uint32) (newlowoffset uint32, errno int) [failretval=0xffffffff]\nI think, these should be:\n\n//sys   CreateProcess(appName *uint16, commandLine *uint16, procSecurity *byte, threadSecurity *byte, inheritHandles uint32, creationFlags uint32, env *byte, currentDir *uint16, startupInfo *StartupInfo, outProcInfo *ProcessInformation)  (ok bool, errno int) = CreateProcessW\n//sys   GetStartupInfo(startupInfo *StartupInfo) = GetStartupInfoW\n//sys   WaitForSingleObject(handle int32, waitMilliseconds uint32) (event uint32, errno int) [failretval=0xffffffff]\n\nI would even make it CreateProcess(..., inheritHandles bool, ...), but you would have to change mksyscall_windows.sh to handle bool input parameters.\n\nhttp://codereview.appspot.com/1578041/diff/14001/11014#newcode459\nsrc/pkg/syscall/syscall_windows.go:459: //CloseHandle(handle)\nWhy the comment?\n\nhttp://codereview.appspot.com/1578041/diff/14001/11016\nFile src/pkg/syscall/ztypes_windows_386.go (right):\n\nhttp://codereview.appspot.com/1578041/diff/14001/11016#newcode158\nsrc/pkg/syscall/ztypes_windows_386.go:158: type StartupInfo struct {\nGet all types right as much as you can:\n\nDWORD = uint32\nLPTSTR = *unit16\nLPBYTE = *byte\nHANDLE = int32\n\nhttp://codereview.appspot.com/1578041/diff/14001/11016#newcode158\nsrc/pkg/syscall/ztypes_windows_386.go:158: type StartupInfo struct {\nI say, keep field names as close to doco as possible, for example:\n\n  DWORD  Cb;\n  LPTSTR Reserved;\n  LPTSTR Desktop;\n  LPTSTR Title;\n  DWORD  X;\n  DWORD  Y;\n  DWORD  XSize;\n  DWORD  YSize;\n  DWORD  XCountChars;\n  DWORD  YCountChars;\n  DWORD  FillAttribute;\n  DWORD  Flags;\n  WORD   ShowWindow;\n  WORD   Reserved2;\n  LPBYTE Reserved2_;\n  HANDLE StdInput;\n  HANDLE StdOutput;\n  HANDLE StdError;\n\nhttp://codereview.appspot.com/1578041/diff/14001/11016#newcode179\nsrc/pkg/syscall/ztypes_windows_386.go:179: type ProcessInformation struct {\nAs above:\n\n  HANDLE Process;\n  HANDLE Thread;\n  DWORD  ProcessId;\n  DWORD  ThreadId;",
			"disapproval": false,
			"date": "2010-06-09 09:18:34.550368",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "> http://codereview.appspot.com/1578041/diff/14001/11009#newcode49\n> src/pkg/runtime/windows/syscall.goc:49: func Syscall15(trap uintptr, a1 uintptr,\n> a2 uintptr, a3 uintptr, a4 uintptr, a5 uintptr, a6 uintptr, a7 uintptr, a8\n> uintptr, a9 uintptr, a10 uintptr, a11 uintptr, a12 uintptr, a13 uintptr, a14\n> uintptr, a15 uintptr) (r1 uintptr, r2 uintptr, lasterr uintptr) {\n> Do you really need Syscall15?\n\nSyscall15 is not used in Go's base packages.  Removed.\n\n\n> http://codereview.appspot.com/1578041/diff/14001/11012#newcode102\n> src/pkg/syscall/exec_windows.go:102: startupInfo := new(StartupInfo)\n> Aren't you supposed to at lease set startupInfo.Cb?\n\nGetStartupInfo does this.\n\n> http://codereview.appspot.com/1578041/diff/14001/11012#newcode109\n> src/pkg/syscall/exec_windows.go:109: // 0x00000400 = UNICODE env\n> Instead of the comment, I would have const:\n> \n> CREATE_UNICODE_ENVIRONMENT = 0x00000400\n\nDone.\n\n\n> http://codereview.appspot.com/1578041/diff/14001/11014#newcode135\n> src/pkg/syscall/syscall_windows.go:135: //sys\tWaitForSingleObject(handle int32,\n> waitMilliseconds uint32) (newlowoffset uint32, errno int)\n> [failretval=0xffffffff]\n> I think, these should be:\n> \n> //sys   CreateProcess(appName *uint16, commandLine *uint16, procSecurity *byte,\n> threadSecurity *byte, inheritHandles uint32, creationFlags uint32, env *byte,\n> currentDir *uint16, startupInfo *StartupInfo, outProcInfo *ProcessInformation) \n> (ok bool, errno int) = CreateProcessW\n> //sys   GetStartupInfo(startupInfo *StartupInfo) = GetStartupInfoW\n> //sys   WaitForSingleObject(handle int32, waitMilliseconds uint32) (event\n> uint32, errno int) [failretval=0xffffffff]\n\nIn CreateProcess, changed uint16 to *uint16, changed calling 0 to nil.\nOther functions look good to me.\n\n> I would even make it CreateProcess(..., inheritHandles bool, ...), but you would\n> have to change mksyscall_windows.sh to handle bool input parameters.\n\nThat would be nice.  Maybe later.\n\n> http://codereview.appspot.com/1578041/diff/14001/11014#newcode459\n> src/pkg/syscall/syscall_windows.go:459: //CloseHandle(handle)\n> Why the comment?\n\nNote to myself (or whoever) in implementing a wait for process termination.\nRemoved.\n\n> http://codereview.appspot.com/1578041/diff/14001/11016#newcode158\n> src/pkg/syscall/ztypes_windows_386.go:158: type StartupInfo struct {\n> Get all types right as much as you can:\n> \n> DWORD = uint32\n> LPTSTR = *unit16\n> LPBYTE = *byte\n> HANDLE = int32\n>\n> http://codereview.appspot.com/1578041/diff/14001/11016#newcode158\n> src/pkg/syscall/ztypes_windows_386.go:158: type StartupInfo struct {\n> I say, keep field names as close to doco as possible, for example:\n> \n>   DWORD  Cb;\n>   LPTSTR Reserved;\n>   LPTSTR Desktop;\n>   LPTSTR Title;\n>   DWORD  X;\n>   DWORD  Y;\n>   DWORD  XSize;\n>   DWORD  YSize;\n>   DWORD  XCountChars;\n>   DWORD  YCountChars;\n>   DWORD  FillAttribute;\n>   DWORD  Flags;\n>   WORD   ShowWindow;\n>   WORD   Reserved2;\n>   LPBYTE Reserved2_;\n>   HANDLE StdInput;\n>   HANDLE StdOutput;\n>   HANDLE StdError;\n> \n> http://codereview.appspot.com/1578041/diff/14001/11016#newcode179\n> src/pkg/syscall/ztypes_windows_386.go:179: type ProcessInformation struct {\n> As above:\n> \n>   HANDLE Process;\n>   HANDLE Thread;\n>   DWORD  ProcessId;\n>   DWORD  ThreadId;\n\nMade names match windows symbols.",
			"disapproval": false,
			"date": "2010-06-11 01:32:15.291090",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello brainman, rsc (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-06-11 01:33:20.385235",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Made changes and modified for recent syscall change.  Tested, appears to function.  Thank you for your patience.\n\nhttp://codereview.appspot.com/1578041/diff/11018/26004\nFile src/pkg/syscall/exec_windows.go (right):\n\nhttp://codereview.appspot.com/1578041/diff/11018/26004#newcode109\nsrc/pkg/syscall/exec_windows.go:109: // 0x00000400 = UNICODE env\nOn 2010/06/11 11:16:37, brainman wrote:\n> Do not need the comment about UNICODE now.\nRemoved\n\nhttp://codereview.appspot.com/1578041/diff/11018/26006\nFile src/pkg/syscall/syscall_windows.go (right):\n\nhttp://codereview.appspot.com/1578041/diff/11018/26006#newcode132\nsrc/pkg/syscall/syscall_windows.go:132: //sys\tCreateProcess(appName *int16, commandLine *uint16, procSecurity *int16, threadSecurity *int16, inheritHandles int16, creationFlags uint32, env *uint16, currentDir *uint16, startupInfo *StartupInfo, outProcInfo *ProcessInformation)  (ok uint32, errno int) [failretval=0] = CreateProcessW\nNice.  Had to remove unsafe.Pointer, as it is a value.\n\nhttp://codereview.appspot.com/1578041/diff/11018/26006#newcode132\nsrc/pkg/syscall/syscall_windows.go:132: //sys\tCreateProcess(appName *int16, commandLine *uint16, procSecurity *int16, threadSecurity *int16, inheritHandles int16, creationFlags uint32, env *uint16, currentDir *uint16, startupInfo *StartupInfo, outProcInfo *ProcessInformation)  (ok uint32, errno int) [failretval=0] = CreateProcessW\nOn 2010/06/11 11:16:37, brainman wrote:\n> Return values should be:\n> \n> (ok bool, errno int) = CreateProcessW\n> \n> like all other similar functions.\nDone.\n\nhttp://codereview.appspot.com/1578041/diff/11018/26008\nFile src/pkg/syscall/ztypes_windows_386.go (right):\n\nhttp://codereview.appspot.com/1578041/diff/11018/26008#newcode175\nsrc/pkg/syscall/ztypes_windows_386.go:175: _             uint8\nOn 2010/06/11 11:16:37, brainman wrote:\n> It is *byte (4 bytes long), not uint8 (1 byte long).\n> Bug like that would be difficult to find - offsets of StdInput, StdOutput,\n> Stderr are now wrong and windows will not find you parameters there.\nThere are time I feel silly.  This is one of them.\nDone.",
			"disapproval": false,
			"date": "2010-06-14 01:34:46.852857",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello brainman, rsc (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-06-14 01:35:21.850150",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/1578041/diff/34001/35008\nFile src/pkg/syscall/syscall_windows.go (right):\n\nhttp://codereview.appspot.com/1578041/diff/34001/35008#newcode132\nsrc/pkg/syscall/syscall_windows.go:132: //sys\tCreateProcess(appName *int16, commandLine *uint16, procSecurity *int16, threadSecurity *int16, inheritHandles bool, creationFlags uint32, env *uint16, currentDir *uint16, startupInfo *StartupInfo, outProcInfo *ProcessInformation)  (ok bool, errno int) [failretval=0] = CreateProcessW\nReturn values should be:\n\n(ok bool, errno int) = CreateProcessW\n\nYou do not need [failretval=0] here. failretval is 0 by default, see mksyscall_windows.sh. And having return value of type \"bool\" fits that notion well.",
			"disapproval": false,
			"date": "2010-06-15 01:35:09.247280",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello brainman, rsc (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-06-15 01:54:33.362607",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2010-06-15 01:56:40.053595",
			"approval": true
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello brainman, rsc (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-06-30 20:55:58.710102",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello brainman, rsc (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-06-30 21:02:34.542187",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2010/06/30 21:02:34, kardia wrote:\n> Hello brainman, rsc (cc: mailto:golang-dev@googlegroups.com),\n> \n> Please take another look.\n\nUpdated patch set to merge with tip.",
			"disapproval": false,
			"date": "2010-06-30 21:03:30.373582",
			"approval": false
		},
		{
			"sender": "alex.brainman@eventree.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Daniel,\n\n\n> Updated patch set to merge with tip.\n>\n\nIt's out of date again.\n\nNow that Russ is back, would you like to refresh your change and will\nget it moving.\n\nThank you.\n\n\nAlex\n",
			"disapproval": false,
			"date": "2010-07-12 23:42:37.054506",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Merged again.\n\nThanks,\n-Daniel\n\n\n",
			"disapproval": false,
			"date": "2010-07-13 00:38:08.553850",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2010/06/07 20:01:07, rsc1 wrote:\n> ...\n\nPing.",
			"disapproval": false,
			"date": "2010-07-13 02:41:43.477437",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On a side note, I have tested the functionality and the fds and envv \nvars appear to function in the way described by the unix version.   I \nhave to give startup info to each stdin/out/err so that if nothing is \npassed, then it doesn't get a valid stdout.  It's rather ironic, in \norder to not inherit fds, you have to inherit fds :) .\n\nThanks,\n-Daniel\n\n\nOn 07/22/2010 11:48 PM, alex.brainman@gmail.com wrote:\n> I don't know much about this process. I think the only way we'll find\n> out is by testing it. LGTM.\n>\n> Just one thing, the fds you pass to new process aren't inheritable. All\n> current apis create fds with non-inheritable flag (by default). So,\n> again, we'll have to test all that.\n>\n>\n> Alex\n>\n> http://codereview.appspot.com/1578041/show\n\n",
			"disapproval": false,
			"date": "2010-07-23 14:23:26.245627",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Russ, I wans't sure about the exact desired behavior of ForkExec.  I'v e made the following comment:\n\n//Behavior:\n//\tIf envv is passed nil, then it uses the parent env\n//\tIf a fd is nil, contains value <= 0, or not present, then it uses the parent StdIn/Out/Err\n\nHowever, I'm not sure if this matches up with how it behaves on unix.  Please advise.  Thanks,\n-Daniel\n\n\nOn 2010/07/20 06:09:29, rsc wrote:\n> Thanks very much for working on this.\n> \n> This looks good to me but I'd like to see the environment\n> and fd slices addressed before we submit it.  The traceme\n> flag doesn't matter as much - it's just for the debugging library,\n> which isn't much used even on Linux.\n> \n> The environment should be an argument to CreateProcess,\n> and the fd slice can turn into the three arguments passed\n> in the STARTUPINFO.  It's okay to return an error when\n> len(fd) > 3.\n> \n> Russ\n>",
			"disapproval": false,
			"date": "2010-07-22 00:21:50.770552",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Thanks very much for working on this.\n\nThis looks good to me but I'd like to see the environment\nand fd slices addressed before we submit it.  The traceme\nflag doesn't matter as much - it's just for the debugging library,\nwhich isn't much used even on Linux.\n\nThe environment should be an argument to CreateProcess,\nand the fd slice can turn into the three arguments passed\nin the STARTUPINFO.  It's okay to return an error when\nlen(fd) > 3.\n\nRuss\n",
			"disapproval": false,
			"date": "2010-07-20 06:09:29.027349",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I know people are busy but is there interest or comments to this?\nThanks,\n-Daniel\n\n\nOn 2010/07/13 02:41:43, brainman wrote:\n> On 2010/06/07 20:01:07, rsc1 wrote:\n> > ...\n> \n> Ping.",
			"disapproval": false,
			"date": "2010-07-19 14:32:24.291622",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2010/07/19 14:32:24, kardia wrote:\n> I know people are busy but is there interest or comments to this?\n\nI can't submit your patch. But anyway you look at it, we need to implement ForkExec(), even so we can just make goinstall to work. So, I suggest, you continue, if you like. Get your goal to make goinstall work as intended, and do whatever required.\n\nThank you.\n\n\nAlex",
			"disapproval": false,
			"date": "2010-07-19 23:43:05.453586",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "kardianos@gmail.com writes:\n\n> Russ, I wans't sure about the exact desired behavior of ForkExec.  I'v e\n> made the following comment:\n>\n> //Behavior:\n> //\tIf envv is passed nil, then it uses the parent env\n> //\tIf a fd is nil, contains value <= 0, or not present, then it uses the\n> parent StdIn/Out/Err\n>\n> However, I'm not sure if this matches up with how it behaves on unix.\n\nOn Unix, the environment passed to ForkExec is the environment that the\nchild process gets.  If you want the child to get the same environment\nsa the parent, pass in os.Environ().\n\nThe fd array is the set of file descriptors passed to the child.  If the\narray is nil the child starts with no open file descriptors.  If an\nentry in the array is less than 0, that file descriptor is not open when\nthe child starts.  So, again, the child does not inherit from the\nparent by default.\n\nIan\n",
			"disapproval": false,
			"date": "2010-07-22 08:59:07.654765",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Please take another look.\nThanks,\n-Daniel",
			"disapproval": false,
			"date": "2010-07-22 15:33:48.757433",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I don't know much about this process. I think the only way we'll find out is by testing it. LGTM.\n\nJust one thing, the fds you pass to new process aren't inheritable. All current apis create fds with non-inheritable flag (by default). So, again, we'll have to test all that.\n\n\nAlex",
			"disapproval": false,
			"date": "2010-07-23 06:48:14.944838",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nleaving for alex\n",
			"disapproval": false,
			"date": "2010-07-23 06:56:26.975744",
			"approval": true
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=e0df83335988 ***\n\nsyscall: add ForkExec, Syscall12 on Windows\n\nR=brainman, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/1578041\n\nCommitter: Alex Brainman <alex.brainman@gmail.com>",
			"disapproval": false,
			"date": "2010-07-25 23:43:44.348447",
			"approval": false
		}
	],
	"owner_email": "kardianos@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "kardia",
	"subject": "code review 1578041: \tadd Windows ForkExec, Syscall12",
	"created": "2010-06-07 03:53:29.701596",
	"patchsets": [
		1,
		2001,
		9002,
		14001,
		11018,
		34001,
		40001,
		47001,
		50001,
		63001,
		88001,
		92001
	],
	"modified": "2012-05-19 02:25:15.712976",
	"closed": true,
	"issue": 1578041
}