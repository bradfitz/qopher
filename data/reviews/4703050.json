{
	"description": "big: refine printf formatting and optimize string conversion\n\nNow handles standard precision specifications, standard interactions of\nredundant specifications (such as precision and zero-fill), handles the\nspecial case of precision specified but equal to zero, and generates the\noutput without recursive calls to format/printf to be clearer and faster.",
	"cc": [
		"gri@google.com",
		"mtj@google.com",
		"gri@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"michael.jones@gmail.com",
				"gri@google.com",
				"mtj@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Apologies for the delay. Looks pretty good.\nSome comments.\n\nhttp://codereview.appspot.com/4703050/diff/2001/src/pkg/big/int.go\nFile src/pkg/big/int.go (right):\n\nhttp://codereview.appspot.com/4703050/diff/2001/src/pkg/big/int.go#newcode343\nsrc/pkg/big/int.go:343: // (lowercase hexadecimal), and 'X' (uppercase hexadecimal).\nThis comment should probably be updated.\n\nhttp://codereview.appspot.com/4703050/diff/2001/src/pkg/big/int.go#newcode383\nsrc/pkg/big/int.go:383: // determine digits in output base and desired case\nthis comment confused me for a while because you are referring to \"base\" which is defined just above, and it's not really the base but the prefix.\n\nCan we s/base/prefix/ or something like that, above? (not in this comment)\n\nhttp://codereview.appspot.com/4703050/diff/2001/src/pkg/big/int.go#newcode387\nsrc/pkg/big/int.go:387: var left, zeroes, right int\ndeclare each of these on a separate line and add a comment explaining the meaning of the variable - this will make the code easier to read\n\nhttp://codereview.appspot.com/4703050/diff/2001/src/pkg/big/int.go#newcode401\nsrc/pkg/big/int.go:401: switch {\nswitch d := width - length; {\ncase ...\n\nand then you case use d below instead of width - length\n\nhttp://codereview.appspot.com/4703050/diff/2001/src/pkg/big/int.go#newcode403\nsrc/pkg/big/int.go:403: right = width - length\nright = d\n\nhttp://codereview.appspot.com/4703050/diff/2001/src/pkg/big/int.go#newcode405\nsrc/pkg/big/int.go:405: zeroes = width - length\nzeroes = d\n\nhttp://codereview.appspot.com/4703050/diff/2001/src/pkg/big/int.go#newcode407\nsrc/pkg/big/int.go:407: left = width - length\nleft = d\n\nhttp://codereview.appspot.com/4703050/diff/2001/src/pkg/big/int.go#newcode421\nsrc/pkg/big/int.go:421: // send count copies of text to s\nmove this helper routine before Format, below charset (the other helper funcs are also before)\n\nhttp://codereview.appspot.com/4703050/diff/2001/src/pkg/big/int_test.go\nFile src/pkg/big/int_test.go (right):\n\nhttp://codereview.appspot.com/4703050/diff/2001/src/pkg/big/int_test.go#newcode513\nsrc/pkg/big/int_test.go:513: t.Errorf(\"#%d got %q; want %q, {%q,%q,%q}\", i, output, test.output, test.input, test.format, test.output)\ns/{%q,%q,%q}/{%q, %q, %q}/",
			"disapproval": false,
			"date": "2011-07-19 18:08:40.186136",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "thanks. Read and agree. At orange county airport about to visit Disney CIO.\nWill amend the code per your notes on the plane tonight.\nOn Jul 19, 2011 11:08 AM, <gri@golang.org> wrote:\n> Apologies for the delay. Looks pretty good.\n> Some comments.\n>\n>\n> http://codereview.appspot.com/4703050/diff/2001/src/pkg/big/int.go\n> File src/pkg/big/int.go (right):\n>\n>\nhttp://codereview.appspot.com/4703050/diff/2001/src/pkg/big/int.go#newcode343\n> src/pkg/big/int.go:343: // (lowercase hexadecimal), and 'X' (uppercase\n> hexadecimal).\n> This comment should probably be updated.\n>\n>\nhttp://codereview.appspot.com/4703050/diff/2001/src/pkg/big/int.go#newcode383\n> src/pkg/big/int.go:383: // determine digits in output base and desired\n> case\n> this comment confused me for a while because you are referring to \"base\"\n> which is defined just above, and it's not really the base but the\n> prefix.\n>\n> Can we s/base/prefix/ or something like that, above? (not in this\n> comment)\n>\n>\nhttp://codereview.appspot.com/4703050/diff/2001/src/pkg/big/int.go#newcode387\n> src/pkg/big/int.go:387: var left, zeroes, right int\n> declare each of these on a separate line and add a comment explaining\n> the meaning of the variable - this will make the code easier to read\n>\n>\nhttp://codereview.appspot.com/4703050/diff/2001/src/pkg/big/int.go#newcode401\n> src/pkg/big/int.go:401: switch {\n> switch d := width - length; {\n> case ...\n>\n> and then you case use d below instead of width - length\n>\n>\nhttp://codereview.appspot.com/4703050/diff/2001/src/pkg/big/int.go#newcode403\n> src/pkg/big/int.go:403: right = width - length\n> right = d\n>\n>\nhttp://codereview.appspot.com/4703050/diff/2001/src/pkg/big/int.go#newcode405\n> src/pkg/big/int.go:405: zeroes = width - length\n> zeroes = d\n>\n>\nhttp://codereview.appspot.com/4703050/diff/2001/src/pkg/big/int.go#newcode407\n> src/pkg/big/int.go:407: left = width - length\n> left = d\n>\n>\nhttp://codereview.appspot.com/4703050/diff/2001/src/pkg/big/int.go#newcode421\n> src/pkg/big/int.go:421: // send count copies of text to s\n> move this helper routine before Format, below charset (the other helper\n> funcs are also before)\n>\n> http://codereview.appspot.com/4703050/diff/2001/src/pkg/big/int_test.go\n> File src/pkg/big/int_test.go (right):\n>\n>\nhttp://codereview.appspot.com/4703050/diff/2001/src/pkg/big/int_test.go#newcode513\n> src/pkg/big/int_test.go:513: t.Errorf(\"#%d got %q; want %q, {%q,%q,%q}\",\n> i, output, test.output, test.input, test.format, test.output)\n> s/{%q,%q,%q}/{%q, %q, %q}/\n>\n> http://codereview.appspot.com/4703050/\n",
			"disapproval": false,
			"date": "2011-07-19 19:07:33.142449",
			"approval": false
		},
		{
			"sender": "michael.jones@gmail.com",
			"recipients": [
				"michael.jones@gmail.com",
				"gri@google.com",
				"mtj@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "All changes implemented as suggested. Appreciate all advice: documentation wording, the need to expand existing descriptions to encompass new code's extensions, expanding declarations to provide natural place for self-documenting code, use of local-scope declaration in switch to eliminate common subexpression and underscore sameness within the cases.\n\nhttp://codereview.appspot.com/4703050/diff/2001/src/pkg/big/int.go\nFile src/pkg/big/int.go (right):\n\nhttp://codereview.appspot.com/4703050/diff/2001/src/pkg/big/int.go#newcode343\nsrc/pkg/big/int.go:343: // (lowercase hexadecimal), and 'X' (uppercase hexadecimal).\nOn 2011/07/19 18:08:40, gri wrote:\n> This comment should probably be updated.\n\nDone.\n\nhttp://codereview.appspot.com/4703050/diff/2001/src/pkg/big/int.go#newcode383\nsrc/pkg/big/int.go:383: // determine digits in output base and desired case\nOn 2011/07/19 18:08:40, gri wrote:\n> this comment confused me for a while because you are referring to \"base\" which\n> is defined just above, and it's not really the base but the prefix.\n> \n> Can we s/base/prefix/ or something like that, above? (not in this comment)\n\nDone.\n\nhttp://codereview.appspot.com/4703050/diff/2001/src/pkg/big/int.go#newcode387\nsrc/pkg/big/int.go:387: var left, zeroes, right int\nOn 2011/07/19 18:08:40, gri wrote:\n> declare each of these on a separate line and add a comment explaining the\n> meaning of the variable - this will make the code easier to read\n\nDone.\n\nhttp://codereview.appspot.com/4703050/diff/2001/src/pkg/big/int.go#newcode401\nsrc/pkg/big/int.go:401: switch {\nOn 2011/07/19 18:08:40, gri wrote:\n> switch d := width - length; {\n> case ...\n> \n> and then you case use d below instead of width - length\n\nDone.\n\nhttp://codereview.appspot.com/4703050/diff/2001/src/pkg/big/int.go#newcode403\nsrc/pkg/big/int.go:403: right = width - length\nOn 2011/07/19 18:08:40, gri wrote:\n> right = d\n\nDone.\n\nhttp://codereview.appspot.com/4703050/diff/2001/src/pkg/big/int.go#newcode405\nsrc/pkg/big/int.go:405: zeroes = width - length\nOn 2011/07/19 18:08:40, gri wrote:\n> zeroes = d\n\nDone.\n\nhttp://codereview.appspot.com/4703050/diff/2001/src/pkg/big/int.go#newcode407\nsrc/pkg/big/int.go:407: left = width - length\nOn 2011/07/19 18:08:40, gri wrote:\n> left = d\n\nDone.\n\nhttp://codereview.appspot.com/4703050/diff/2001/src/pkg/big/int.go#newcode421\nsrc/pkg/big/int.go:421: // send count copies of text to s\nOn 2011/07/19 18:08:40, gri wrote:\n> move this helper routine before Format, below charset (the other helper funcs\n> are also before)\n\nDone.",
			"disapproval": false,
			"date": "2011-07-21 06:24:09.375685",
			"approval": false
		},
		{
			"sender": "michael.jones@gmail.com",
			"recipients": [
				"michael.jones@gmail.com",
				"gri@google.com",
				"mtj@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "changed as suggested\n\nhttp://codereview.appspot.com/4703050/diff/2001/src/pkg/big/int_test.go\nFile src/pkg/big/int_test.go (right):\n\nhttp://codereview.appspot.com/4703050/diff/2001/src/pkg/big/int_test.go#newcode513\nsrc/pkg/big/int_test.go:513: t.Errorf(\"#%d got %q; want %q, {%q,%q,%q}\", i, output, test.output, test.input, test.format, test.output)\nOn 2011/07/19 18:08:40, gri wrote:\n> s/{%q,%q,%q}/{%q, %q, %q}/\n\nDone.",
			"disapproval": false,
			"date": "2011-07-21 06:31:22.856839",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"michael.jones@gmail.com",
				"gri@google.com",
				"mtj@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nThere are a few comment issues but let's get this one in. I'll send you a CL for the comments.\n\nThanks!\n- gri\n\nhttp://codereview.appspot.com/4703050/diff/11001/src/pkg/big/int.go\nFile src/pkg/big/int.go (right):\n\nhttp://codereview.appspot.com/4703050/diff/11001/src/pkg/big/int.go#newcode333\nsrc/pkg/big/int.go:333: // codes for integral types, including PLUS, MINUS, and SPACE\nI think this should be:\n...  including '+', '-', and ' ' for sign control, '#' for leading zero in octal and hexadecimal representation, ...\n\nbut let's do this in a separate CL so we can get this in\n\nhttp://codereview.appspot.com/4703050/diff/11001/src/pkg/big/int.go#newcode383\nsrc/pkg/big/int.go:383: var zeroes int // zero characters (acutally cs[0]) as left-most digits (\"%.8d\")\ns/acutally/actually/",
			"disapproval": false,
			"date": "2011-07-21 21:28:53.724726",
			"approval": true
		},
		{
			"sender": "michael.jones@gmail.com",
			"recipients": [
				"michael.jones@gmail.com",
				"gri@google.com",
				"mtj@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello gri@google.com, mtj@google.com, gri@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-07-21 06:32:49.981782",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"michael.jones@gmail.com",
				"gri@google.com",
				"mtj@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=b483ec2a34b8 ***\n\nbig: refine printf formatting and optimize string conversion\n\nNow handles standard precision specifications, standard interactions of\nredundant specifications (such as precision and zero-fill), handles the\nspecial case of precision specified but equal to zero, and generates the\noutput without recursive calls to format/printf to be clearer and faster.\n\nR=gri, mtj, gri\nCC=golang-dev\nhttp://codereview.appspot.com/4703050\n\nCommitter: Robert Griesemer <gri@golang.org>",
			"disapproval": false,
			"date": "2011-07-21 21:29:11.175530",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Thanks!\nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\n650-335-5765\n\n\n\nOn Thu, Jul 21, 2011 at 2:29 PM, <gri@golang.org> wrote:\n\n> *** Submitted as\n> http://code.google.com/p/go/**source/detail?r=b483ec2a34b8<http://code.google.com/p/go/source/detail?r=b483ec2a34b8>***\n>\n> big: refine printf formatting and optimize string conversion\n>\n> Now handles standard precision specifications, standard interactions of\n> redundant specifications (such as precision and zero-fill), handles the\n> special case of precision specified but equal to zero, and generates the\n> output without recursive calls to format/printf to be clearer and\n> faster.\n>\n> R=gri, mtj, gri\n> CC=golang-dev\n>\n> http://codereview.appspot.com/**4703050<http://codereview.appspot.com/4703050>\n>\n> Committer: Robert Griesemer <gri@golang.org>\n>\n>\n>\n> http://codereview.appspot.com/**4703050/<http://codereview.appspot.com/4703050/>\n>\n",
			"disapproval": false,
			"date": "2011-07-21 21:47:18.735482",
			"approval": false
		}
	],
	"owner_email": "michael.jones@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mtj",
	"subject": "code review 4703050: big: refine printf formatting and optimize string conversion",
	"created": "2011-07-14 07:25:08.625337",
	"patchsets": [
		1,
		2001,
		11001
	],
	"modified": "2011-07-21 21:47:18.735482",
	"closed": false,
	"issue": 4703050
}