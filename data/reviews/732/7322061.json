{
	"description": "go/doc: add support for arbitrary notes\n\nAdd support for arbitrary notes of the form // MARKER(userid): comment \nin the same vein as BUG(userid): A marker must be two or more upper case [A-Z] letters.",
	"cc": [
		"gri@golang.org",
		"rsc@golang.org",
		"bradfitz@golang.org",
		"jscrockett01@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"cnicolaou@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7322061/diff/3/src/pkg/go/doc/doc.go\nFile src/pkg/go/doc/doc.go (right):\n\nhttps://codereview.appspot.com/7322061/diff/3/src/pkg/go/doc/doc.go#newcode21\nsrc/pkg/go/doc/doc.go:21: // Additional annotations such as TODO(userid): or SECURITY(userid):\nOn 2013/02/14 02:15:51, rsc wrote:\n> How about\n> \n> Notes map[string][]string\n> \n> and just record anything matching [A-Z][A-Z]+ at top level, instead of adding\n> the var Annotations below.\n\nYep. I suggested the map at lunch, today, and the list of \"keywords\" (Annotations) to look for. But just recording everything is even simpler.\n\nhttps://codereview.appspot.com/7322061/diff/3/src/pkg/go/doc/reader.go\nFile src/pkg/go/doc/reader.go (right):\n\nhttps://codereview.appspot.com/7322061/diff/3/src/pkg/go/doc/reader.go#newcode406\nsrc/pkg/go/doc/reader.go:406: annotation_regexp_format = \"^/[/*][ \\t]*(BUG%s)\\\\(.*\\\\):[ \\t]*(.*)\" // BUG(uid): or BUG|ANOTHERMARKER(uid):\nper Russ' suggestion just look for all\n\n// MARKER(uid): xxx\n\nwhere marker is [A-Z]+\n\nhttps://codereview.appspot.com/7322061/diff/3/src/pkg/go/doc/reader.go#newcode496\nsrc/pkg/go/doc/reader.go:496: if marker, text, present := readAnnotation(c); present {\nThis should become simpler - likely close to what there was originally.",
			"disapproval": false,
			"date": "2013-02-14 02:46:17.582430",
			"approval": false
		},
		{
			"sender": "cnicolaou@google.com",
			"recipients": [
				"cnicolaou@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-14 18:28:29.102230",
			"approval": false
		},
		{
			"sender": "cnicolaou@google.com",
			"recipients": [
				"cnicolaou@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"jscrockett01@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org, rsc@golang.org, bradfitz@golang.org, jscrockett01@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-14 19:47:31.923550",
			"approval": false
		},
		{
			"sender": "cnicolaou@google.com",
			"recipients": [
				"cnicolaou@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"jscrockett01@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/14 18:54:29, rsc wrote:\n> (And in response to Brad, yes, this is ancient code.)\n> \n> https://codereview.appspot.com/7322061/diff/9001/src/pkg/go/doc/doc.go\n> File src/pkg/go/doc/doc.go (right):\n> \n> https://codereview.appspot.com/7322061/diff/9001/src/pkg/go/doc/doc.go#newcode24\n> src/pkg/go/doc/doc.go:24: // BUGS is explicitly not included in these\n> annotations but will\n> s/BUGS/BUG/\n> \n> https://codereview.appspot.com/7322061/diff/9001/src/pkg/go/doc/doc.go#newcode26\n> src/pkg/go/doc/doc.go:26: Annotations map[string][]string\n> s/Annotations/Notes/\n> just as clear, far easier to type\n> \n> https://codereview.appspot.com/7322061/diff/9001/src/pkg/go/doc/reader.go\n> File src/pkg/go/doc/reader.go (right):\n> \n> https://codereview.appspot.com/7322061/diff/9001/src/pkg/go/doc/reader.go#newcode152\n> src/pkg/go/doc/reader.go:152: annotations map[string][]string\n> notes\n\ndone.",
			"disapproval": false,
			"date": "2013-02-14 19:44:47.864820",
			"approval": false
		},
		{
			"sender": "cnicolaou@google.com",
			"recipients": [
				"cnicolaou@google.com",
				"gri@golang.org",
				"gri@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org, gri@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-02-13 23:31:42.925600",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"cnicolaou@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7322061/diff/3/src/pkg/go/doc/doc.go\nFile src/pkg/go/doc/doc.go (right):\n\nhttps://codereview.appspot.com/7322061/diff/3/src/pkg/go/doc/doc.go#newcode21\nsrc/pkg/go/doc/doc.go:21: // Additional annotations such as TODO(userid): or SECURITY(userid):\nHow about\n\nNotes map[string][]string\n\nand just record anything matching [A-Z][A-Z]+ at top level, instead of adding the var Annotations below.",
			"disapproval": false,
			"date": "2013-02-14 02:15:51.779040",
			"approval": false
		},
		{
			"sender": "cnicolaou@google.com",
			"recipients": [
				"cnicolaou@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"jscrockett01@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/14 18:44:58, bradfitz wrote:\n> https://codereview.appspot.com/7322061/diff/9001/src/pkg/go/doc/reader.go\n> File src/pkg/go/doc/reader.go (right):\n> \n> https://codereview.appspot.com/7322061/diff/9001/src/pkg/go/doc/reader.go#newcode404\n> src/pkg/go/doc/reader.go:404: annotation_marker  = regexp.MustCompile(\"^/[/*][\n> \\t]*([A-Z][A-Z]+)\\\\(.*\\\\):[ \\t]*(.*)\") // MARKER(uid)\n> this must be ancient code because we no longer use underscores in variable\n> names.  annotationMarker.\n> \n> also, use backticks `` so you can remove the double backslashes like \\\\(.\n> \n> and shouldn't the username in parens be at least one character? \\(.+\\)?  I've\n> never seen BUG(): foo.  But I have seen TODO: foo.\n> \n> https://codereview.appspot.com/7322061/diff/9001/src/pkg/go/doc/reader.go#newcode405\n> src/pkg/go/doc/reader.go:405: annotation_content = regexp.MustCompile(\"[^\n> \\n\\r\\t]+\")                                  // at least one non-whitespace char\n> annotationContent and backticks.\n\ndone. I agree about needing a userid of at least one char, so I've made that regexp change.  A quick grep over all the core code doesn't show up any BUG(): instances without a userid. I think it's generally good practice to insist on a userid being there regardless of the note. Thanks.",
			"disapproval": false,
			"date": "2013-02-14 19:43:57.311770",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"cnicolaou@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7322061/diff/9001/src/pkg/go/doc/reader.go\nFile src/pkg/go/doc/reader.go (right):\n\nhttps://codereview.appspot.com/7322061/diff/9001/src/pkg/go/doc/reader.go#newcode404\nsrc/pkg/go/doc/reader.go:404: annotation_marker  = regexp.MustCompile(\"^/[/*][ \\t]*([A-Z][A-Z]+)\\\\(.*\\\\):[ \\t]*(.*)\") // MARKER(uid)\nthis must be ancient code because we no longer use underscores in variable names.  annotationMarker.\n\nalso, use backticks `` so you can remove the double backslashes like \\\\(.\n\nand shouldn't the username in parens be at least one character? \\(.+\\)?  I've never seen BUG(): foo.  But I have seen TODO: foo.\n\nhttps://codereview.appspot.com/7322061/diff/9001/src/pkg/go/doc/reader.go#newcode405\nsrc/pkg/go/doc/reader.go:405: annotation_content = regexp.MustCompile(\"[^ \\n\\r\\t]+\")                                  // at least one non-whitespace char\nannotationContent and backticks.",
			"disapproval": false,
			"date": "2013-02-14 18:44:58.216890",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"cnicolaou@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Also, CL description should be of the form:\n\ncmd/godoc: add support for arbitrary annotations\n\n(blank line, then arbitrary lengthy description)",
			"disapproval": false,
			"date": "2013-02-14 18:45:36.786190",
			"approval": false
		},
		{
			"sender": "jscrockett01@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Has it been considered to allow post-^ whitespace for annotations inside \r\nfunctions or at the end of lines?  Such as:\r\n\r\nx++ // TODO: there should be a better way\r\n\r\n\r\n\r\n\r\nOn Thursday, February 14, 2013 1:44:58 PM UTC-5, Brad Fitzpatrick wrote:\r\n>\r\n>\r\n> https://codereview.appspot.com/7322061/diff/9001/src/pkg/go/doc/reader.go \r\n> File src/pkg/go/doc/reader.go (right): \r\n>\r\n> https://codereview.appspot.com/7322061/diff/9001/src/pkg/go/doc/reader.go#newcode404 \r\n>\r\n> src/pkg/go/doc/reader.go:404<https://codereview.appspot.com/7322061/diff/9001/src/pkg/go/doc/reader.go#newcode404src/pkg/go/doc/reader.go:404>: \r\n> annotation_marker  = \r\n> regexp.MustCompile(\"^/[/*][ \\t]*([A-Z][A-Z]+)\\\\(.*\\\\):[ \\t]*(.*)\") // \r\n> MARKER(uid) \r\n> this must be ancient code because we no longer use underscores in \r\n> variable names.  annotationMarker. \r\n>\r\n> also, use backticks `` so you can remove the double backslashes like \r\n> \\\\(. \r\n>\r\n> and shouldn't the username in parens be at least one character? \\(.+\\)? \r\n> I've never seen BUG(): foo.  But I have seen TODO: foo. \r\n>\r\n> https://codereview.appspot.com/7322061/diff/9001/src/pkg/go/doc/reader.go#newcode405 \r\n>\r\n> src/pkg/go/doc/reader.go:405<https://codereview.appspot.com/7322061/diff/9001/src/pkg/go/doc/reader.go#newcode405src/pkg/go/doc/reader.go:405>: \r\n> annotation_content = \r\n> regexp.MustCompile(\"[^ \\n\\r\\t]+\")                                  // at \r\n> least one non-whitespace char \r\n> annotationContent and backticks. \r\n>\r\n> https://codereview.appspot.com/7322061/ \r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-14 19:01:27.567820",
			"approval": false
		},
		{
			"sender": "cnicolaou@google.com",
			"recipients": [
				"cnicolaou@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"jscrockett01@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/14 21:00:21, gri wrote:\n> LGTM\n> \n> https://codereview.appspot.com/7322061/diff/10009/src/pkg/go/doc/reader.go\n> File src/pkg/go/doc/reader.go (right):\n> \n> https://codereview.appspot.com/7322061/diff/10009/src/pkg/go/doc/reader.go#newcode410\n> src/pkg/go/doc/reader.go:410: if m := noteMarker.FindStringSubmatch(text); m !=\n> nil {\n> Maybe i'm sleep-deprived, but can't we just use a singular regexp here that uses\n> the noteContent expr in noteMarker rather than (.*) ? If it doesn't match, we're\n> done. (I know the old code was doing the same as you're doing now).\n\nwell, I tried it to be sure, but the two are a little different. The current form allows for multiword comments, i.e. with spaces in them,  provided there is at least one non-whitespace character there. The change to replace the .* with [^ \\n\\r\\t]+ will only extract the first word from the comment, removing the space leaves you open to only whitespace comments. So I think the current form is what you want. I can well believe that there is a regex that does exactly what we want, but it's not obvious to me that it would be simpler than what we have now.",
			"disapproval": false,
			"date": "2013-02-14 22:44:19.449530",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"cnicolaou@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7322061/diff/9001/src/pkg/go/doc/reader.go\nFile src/pkg/go/doc/reader.go (right):\n\nhttps://codereview.appspot.com/7322061/diff/9001/src/pkg/go/doc/reader.go#newcode408\nsrc/pkg/go/doc/reader.go:408: func readAnnotation(c *ast.CommentGroup) (marker, annotation string, found bool) {\njust return marker, annotation and use marker != \"\" as \"found\" indicator\n\nhttps://codereview.appspot.com/7322061/diff/9001/src/pkg/go/doc/reader.go#newcode495\nsrc/pkg/go/doc/reader.go:495: if r.annotations[marker] == nil {\nthis if should not be needed: append works fine with a nil list as long as it's typed, which it is. That is:\n\nr.annotations[marker] = append(r.annotations[marker], text)\n\nis sufficient\n\nhttps://codereview.appspot.com/7322061/diff/9001/src/pkg/go/doc/reader.go#newcode500\nsrc/pkg/go/doc/reader.go:500: continue\nremove continue",
			"disapproval": false,
			"date": "2013-02-14 18:47:29.991160",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"cnicolaou@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "(And in response to Brad, yes, this is ancient code.)\n\nhttps://codereview.appspot.com/7322061/diff/9001/src/pkg/go/doc/doc.go\nFile src/pkg/go/doc/doc.go (right):\n\nhttps://codereview.appspot.com/7322061/diff/9001/src/pkg/go/doc/doc.go#newcode24\nsrc/pkg/go/doc/doc.go:24: // BUGS is explicitly not included in these annotations but will\ns/BUGS/BUG/\n\nhttps://codereview.appspot.com/7322061/diff/9001/src/pkg/go/doc/doc.go#newcode26\nsrc/pkg/go/doc/doc.go:26: Annotations map[string][]string\ns/Annotations/Notes/\njust as clear, far easier to type\n\nhttps://codereview.appspot.com/7322061/diff/9001/src/pkg/go/doc/reader.go\nFile src/pkg/go/doc/reader.go (right):\n\nhttps://codereview.appspot.com/7322061/diff/9001/src/pkg/go/doc/reader.go#newcode152\nsrc/pkg/go/doc/reader.go:152: annotations map[string][]string\nnotes",
			"disapproval": false,
			"date": "2013-02-14 18:54:29.687910",
			"approval": false
		},
		{
			"sender": "cnicolaou@google.com",
			"recipients": [
				"cnicolaou@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"jscrockett01@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/14 18:45:36, bradfitz wrote:\n> Also, CL description should be of the form:\n> \n> cmd/godoc: add support for arbitrary annotations\n> \n> (blank line, then arbitrary lengthy description)\n\ndone.",
			"disapproval": false,
			"date": "2013-02-14 19:44:16.463340",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"cnicolaou@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"jscrockett01@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7322061/diff/10009/src/pkg/go/doc/reader.go\nFile src/pkg/go/doc/reader.go (right):\n\nhttps://codereview.appspot.com/7322061/diff/10009/src/pkg/go/doc/reader.go#newcode410\nsrc/pkg/go/doc/reader.go:410: if m := noteMarker.FindStringSubmatch(text); m != nil {\nMaybe i'm sleep-deprived, but can't we just use a singular regexp here that uses the noteContent expr in noteMarker rather than (.*) ? If it doesn't match, we're done. (I know the old code was doing the same as you're doing now).",
			"disapproval": false,
			"date": "2013-02-14 21:00:21.162070",
			"approval": true
		},
		{
			"sender": "cnicolaou@google.com",
			"recipients": [
				"cnicolaou@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"jscrockett01@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/14 18:47:29, gri wrote:\n> https://codereview.appspot.com/7322061/diff/9001/src/pkg/go/doc/reader.go\n> File src/pkg/go/doc/reader.go (right):\n> \n> https://codereview.appspot.com/7322061/diff/9001/src/pkg/go/doc/reader.go#newcode408\n> src/pkg/go/doc/reader.go:408: func readAnnotation(c *ast.CommentGroup) (marker,\n> annotation string, found bool) {\n> just return marker, annotation and use marker != \"\" as \"found\" indicator\n> \n> https://codereview.appspot.com/7322061/diff/9001/src/pkg/go/doc/reader.go#newcode495\n> src/pkg/go/doc/reader.go:495: if r.annotations[marker] == nil {\n> this if should not be needed: append works fine with a nil list as long as it's\n> typed, which it is. That is:\n> \n> r.annotations[marker] = append(r.annotations[marker], text)\n> \n> is sufficient\n> \n> https://codereview.appspot.com/7322061/diff/9001/src/pkg/go/doc/reader.go#newcode500\n> src/pkg/go/doc/reader.go:500: continue\n> remove continue\n\ndone.",
			"disapproval": false,
			"date": "2013-02-14 19:44:27.530640",
			"approval": false
		},
		{
			"sender": "cnicolaou@google.com",
			"recipients": [
				"cnicolaou@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"jscrockett01@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/14 19:01:27, jscrockett01 wrote:\n> Has it been considered to allow post-^ whitespace for annotations inside \n> functions or at the end of lines?  Such as:\n> \n> x++ // TODO: there should be a better way\n\nI wasn't envisaging catching every last TODO that we put in our code, just the ones that we consider worth putting in the documentation and hence for my usage it seems ok to have them standalone.\n\n> \n> \n> \n> \n> On Thursday, February 14, 2013 1:44:58 PM UTC-5, Brad Fitzpatrick wrote:\n> >\n> >\n> > https://codereview.appspot.com/7322061/diff/9001/src/pkg/go/doc/reader.go \n> > File src/pkg/go/doc/reader.go (right): \n> >\n> >\n> https://codereview.appspot.com/7322061/diff/9001/src/pkg/go/doc/reader.go#newcode404\n> \n> >\n> >\n> src/pkg/go/doc/reader.go:404<https://codereview.appspot.com/7322061/diff/9001/src/pkg/go/doc/reader.go#newcode404src/pkg/go/doc/reader.go:404>:\n> \n> > annotation_marker  = \n> > regexp.MustCompile(\"^/[/*][ \\t]*([A-Z][A-Z]+)\\\\(.*\\\\):[ \\t]*(.*)\") // \n> > MARKER(uid) \n> > this must be ancient code because we no longer use underscores in \n> > variable names.  annotationMarker. \n> >\n> > also, use backticks `` so you can remove the double backslashes like \n> > \\\\(. \n> >\n> > and shouldn't the username in parens be at least one character? \\(.+\\)? \n> > I've never seen BUG(): foo.  But I have seen TODO: foo. \n> >\n> >\n> https://codereview.appspot.com/7322061/diff/9001/src/pkg/go/doc/reader.go#newcode405\n> \n> >\n> >\n> src/pkg/go/doc/reader.go:405<https://codereview.appspot.com/7322061/diff/9001/src/pkg/go/doc/reader.go#newcode405src/pkg/go/doc/reader.go:405>:\n> \n> > annotation_content = \n> > regexp.MustCompile(\"[^ \\n\\r\\t]+\")                                  // at \n> > least one non-whitespace char \n> > annotationContent and backticks. \n> >\n> > https://codereview.appspot.com/7322061/ \n> >",
			"disapproval": false,
			"date": "2013-02-14 19:47:11.095500",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"cnicolaou@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"jscrockett01@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=ca70973f6b7a ***\n\ngo/doc: add support for arbitrary notes\n\nAdd support for arbitrary notes of the form // MARKER(userid): comment\nin the same vein as BUG(userid): A marker must be two or more upper case [A-Z] letters.\n\nR=gri, rsc, bradfitz, jscrockett01\nCC=golang-dev\nhttps://codereview.appspot.com/7322061\n\nCommitter: Robert Griesemer <gri@golang.org>",
			"disapproval": false,
			"date": "2013-02-15 04:21:08.748910",
			"approval": false
		}
	],
	"owner_email": "cnicolaou@google.com",
	"private": false,
	"base_url": "",
	"owner": "cnicolaou",
	"subject": "code review 7322061: go/doc: add support for arbitrary notes",
	"created": "2013-02-12 19:25:00.045540",
	"patchsets": [
		2001,
		3,
		9001,
		10009
	],
	"modified": "2013-02-19 18:17:03.146740",
	"closed": true,
	"issue": 7322061
}