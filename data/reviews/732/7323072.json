{
	"description": "runtime: preparation for non-Go threads running Go code\n\n* Handle p==nil in signalstack by setting SS_DISABLE flag.\n* Make minit only allocate a signal g if there's not one already.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=3e65e5b411d5 ***\n\nruntime: preparation for non-Go threads running Go code\n\n* Handle p==nil in signalstack by setting SS_DISABLE flag.\n* Make minit only allocate a signal g if there's not one already.\n\nR=golang-dev, r\nCC=golang-dev\nhttps://codereview.appspot.com/7323072",
			"disapproval": false,
			"date": "2013-02-18 18:43:17.228330",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm not sure what to comment. This CL essentially adds three lines of code:\r\n\r\nIn the sigaltstack wrapper, it adds:\r\n\r\n    if(p == nil)\r\n        st.ss_flags = SS_DISABLE;\r\n\r\nWe typically don't explain system call details that are in the man pages;\r\nsigaltstack(2) explains that SS_DISABLE means to disable use of the\r\nalternate signal stack (a good idea if p is nil). This makes the wrapper\r\nable to set the use of an alternate stack but also clear it.\r\n\r\nIn runtime.minit, the CL adds:\r\n\r\n    if(m->gsignal == nil)\r\n\r\nto avoid reallocating m->gsignal if one's already been preallocated. Again,\r\nit's hard to tell what to add here. It's just trying to avoid a leak when\r\nthere's already a gsignal.\r\n\r\nBecause of the many ports, these lines get added in many places, but\r\nthey're all trivial.\r\n\r\nPerhaps the confusing part is that there's absolutely no meat in this CL:\r\nthe goal was to get the mechanical stuff out of the way for the real CL\r\nthat will take advantage of this one. By factoring the rote stuff out, the\r\nreal CL will be easier to approach. And it does have large comments.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-02-18 17:42:18.775480",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-02-18 16:33:17.042160",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "a comment would be nice. to an outsider (me), the minutiae are inscrutable.",
			"disapproval": false,
			"date": "2013-02-18 17:13:16.124660",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-02-18 18:00:03.020040",
			"approval": true
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 7323072: runtime: preparation for non-Go threads running Go code",
	"created": "2013-02-18 16:32:00.701060",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		2002,
		14001,
		7023
	],
	"modified": "2013-02-18 18:43:19.953370",
	"closed": true,
	"issue": 7323072
}