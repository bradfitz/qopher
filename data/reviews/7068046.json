{
	"description": "cmd/gc: don't allocate &T{} on the heap if it does not escape\n\nFixes issue 4618.\n\nThanks to Daniel Morsing for his patient suggestions.\n\npackage main\n\ntype T struct{ int }\n\nfunc main() {\n        a := new(T)\n        b := &T{}\n        if a == b {\n                println(\"OK\")\n        }\n}\n\n--- prog list \"main\" ---\n0000 (/home/dfc/src/issue4619.go:5) TEXT    main+0(SB),$32-0\n0001 (/home/dfc/src/issue4619.go:6) MOVQ    $0,autotmp_0000+-16(SP)\n0002 (/home/dfc/src/issue4619.go:6) LEAQ    autotmp_0000+-16(SP),BX\n0003 (/home/dfc/src/issue4619.go:6) MOVQ    BX,CX\n0004 (/home/dfc/src/issue4619.go:7) LEAQ    autotmp_0002+-8(SP),BX\n0005 (/home/dfc/src/issue4619.go:7) MOVQ    BX,AX\n0006 (/home/dfc/src/issue4619.go:7) MOVQ    statictmp_0003+0(SB),BX\n0007 (/home/dfc/src/issue4619.go:7) MOVQ    BX,autotmp_0002+-8(SP)\n0008 (/home/dfc/src/issue4619.go:8) CMPQ    CX,AX\n0009 (/home/dfc/src/issue4619.go:8) JNE     ,18\n0010 (/home/dfc/src/issue4619.go:9) LEAQ    go.string.\"OK\"+0(SB),BX\n0011 (/home/dfc/src/issue4619.go:9) LEAQ    (SP),BP\n0012 (/home/dfc/src/issue4619.go:9) MOVQ    BP,DI\n0013 (/home/dfc/src/issue4619.go:9) MOVQ    BX,SI\n0014 (/home/dfc/src/issue4619.go:9) MOVSQ   ,\n0015 (/home/dfc/src/issue4619.go:9) MOVSQ   ,\n0016 (/home/dfc/src/issue4619.go:9) CALL    ,runtime.printstring+0(SB)\n0017 (/home/dfc/src/issue4619.go:9) CALL    ,runtime.printnl+0(SB)\n0018 (/home/dfc/src/issue4619.go:11) RET     ,",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"lvd@google.com",
		"daniel.morsing@gmail.com",
		"minux.ma@gmail.com",
		"rsc@golang.org",
		"remyoudompheng@gmail.com",
		"lvd@gmail.com"
	],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"lvd@google.com",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello lvd@google.com, daniel.morsing@gmail.com, minux.ma@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-01-06 00:47:06.440490",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"lvd@google.com",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "to model the test on escape.go",
			"disapproval": false,
			"date": "2013-01-06 08:56:27.452490",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"lvd@google.com",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"lvd@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL. I opted to keep the fixedissue/issue4619.go test as LVD's suggestion of adding a -m flag proved difficult.\n\nhttps://codereview.appspot.com/7068046/diff/11001/test/fixedbugs/issue4619.go\nFile test/fixedbugs/issue4619.go (right):\n\nhttps://codereview.appspot.com/7068046/diff/11001/test/fixedbugs/issue4619.go#newcode26\ntest/fixedbugs/issue4619.go:26: // &T{} should be allocated on the stack.\nOn 2013/01/06 06:03:55, minux wrote:\n> // both a and b should be allocated on the stack\n\nDone.\n\nhttps://codereview.appspot.com/7068046/diff/11001/test/fixedbugs/issue4619.go#newcode27\ntest/fixedbugs/issue4619.go:27: println(\"ERROR &T{} caused heap allocation\")\nOn 2013/01/06 06:03:55, minux wrote:\n> ERROR non-escaped variable caused heap allocation\n\nDone.",
			"disapproval": false,
			"date": "2013-01-07 01:36:10.148290",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"lvd@google.com",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7068046/diff/11001/test/fixedbugs/issue4619.go\nFile test/fixedbugs/issue4619.go (right):\n\nhttps://codereview.appspot.com/7068046/diff/11001/test/fixedbugs/issue4619.go#newcode26\ntest/fixedbugs/issue4619.go:26: // &T{} should be allocated on the stack.\n// both a and b should be allocated on the stack\n\nhttps://codereview.appspot.com/7068046/diff/11001/test/fixedbugs/issue4619.go#newcode27\ntest/fixedbugs/issue4619.go:27: println(\"ERROR &T{} caused heap allocation\")\nERROR non-escaped variable caused heap allocation",
			"disapproval": false,
			"date": "2013-01-06 06:03:54.904980",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"lvd@google.com",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello lvd@google.com, daniel.morsing@gmail.com, minux.ma@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-06 02:01:38.465980",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"lvd@google.com",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please add a test that tests that a complit has a unique address.\n\nSomething to the tune of:\n\ntype X struct { a,b int }\n\nfunc foo() {\n        var a,b *X\n        for i := 0; i < 2; i++ {\n                x := &X{1, 2}\n                if i == 0 {\n                        a = x\n                } else {\n                        b = x\n                }\n        }\n        if a == b {\n                panic(\"same address\")\n        }\n}\n\nThis way, the test will break if someone makes the escape analysis code too aggressive.",
			"disapproval": false,
			"date": "2013-01-06 10:54:29.410910",
			"approval": false
		},
		{
			"sender": "lvd@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"lvd@google.com",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"lvd@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "if you add an \n\n if(debug['m'])\n        print(\"%L: moved to heap: %N\\n\", n->lineno, n);\n\nyou can add a case to test/escape2.c. \n\nThat makes -m consistently report decisions like this.",
			"disapproval": false,
			"date": "2013-01-06 12:50:49.414670",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"lvd@google.com",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/06 08:56:27, remyoudompheng wrote:\n> to model the test on escape.go\n\nSorry I meant: the test should probably be modelled on test/escape.go.",
			"disapproval": false,
			"date": "2013-01-06 09:00:33.578070",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"lvd@google.com",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"lvd@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/06 12:50:49, lvd2 wrote:\n> if you add an \n> \n>  if(debug['m'])\n>         print(\"%L: moved to heap: %N\\n\", n->lineno, n);\n> \n> you can add a case to test/escape2.c. \n> \n> That makes -m consistently report decisions like this.\n\nAfter a quick chat with Luuk we've decided not to do this as it results in two lines of output for &T{}'s that _are_ moved to the heap, and that upsets the test harness a lot.",
			"disapproval": false,
			"date": "2013-01-07 01:31:35.336230",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"lvd@google.com",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"lvd@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7068046/diff/14001/src/cmd/gc/sinit.c\nFile src/cmd/gc/sinit.c (right):\n\nhttps://codereview.appspot.com/7068046/diff/14001/src/cmd/gc/sinit.c#newcode973\nsrc/cmd/gc/sinit.c:973: var = a->right->left;\nPlease use a temporary variable to store the node from temp()\n\nTypecheck might change the structure of the AST. It doesn't in this case, but it might in the future. If the AST structure changes, a->right->left might not point to the temp() variable.\n\nhttps://codereview.appspot.com/7068046/diff/14001/test/fixedbugs/issue4619.go\nFile test/fixedbugs/issue4619.go (right):\n\nhttps://codereview.appspot.com/7068046/diff/14001/test/fixedbugs/issue4619.go#newcode12\ntest/fixedbugs/issue4619.go:12: func foo() {\nThis is a runtime test, but isn't called anywhere.",
			"disapproval": false,
			"date": "2013-01-08 12:07:53.404000",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"lvd@google.com",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"lvd@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello lvd@google.com, daniel.morsing@gmail.com, minux.ma@gmail.com, rsc@golang.org, remyoudompheng@gmail.com, lvd@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-09 05:13:22.408840",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"lvd@google.com",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"lvd@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for your comments.\n\nhttps://codereview.appspot.com/7068046/diff/14001/src/cmd/gc/sinit.c\nFile src/cmd/gc/sinit.c (right):\n\nhttps://codereview.appspot.com/7068046/diff/14001/src/cmd/gc/sinit.c#newcode973\nsrc/cmd/gc/sinit.c:973: var = a->right->left;\nOn 2013/01/08 12:07:53, DMorsing wrote:\n> Please use a temporary variable to store the node from temp()\n> \n> Typecheck might change the structure of the AST. It doesn't in this case, but it\n> might in the future. If the AST structure changes, a->right->left might not\n> point to the temp() variable.\n\nDone.\n\nhttps://codereview.appspot.com/7068046/diff/14001/test/fixedbugs/issue4619.go\nFile test/fixedbugs/issue4619.go (right):\n\nhttps://codereview.appspot.com/7068046/diff/14001/test/fixedbugs/issue4619.go#newcode12\ntest/fixedbugs/issue4619.go:12: func foo() {\nOn 2013/01/08 12:07:53, DMorsing wrote:\n> This is a runtime test, but isn't called anywhere.\n\nyes, sorry, that wasn't helpful",
			"disapproval": false,
			"date": "2013-01-09 00:32:39.866760",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"lvd@google.com",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"lvd@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-01-11 05:23:51.958750",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"lvd@google.com",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"lvd@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/11 05:23:51, dfc wrote:\n> *** Abandoned ***\n\nThis change turned up a strange bug in juju related to reflection. The details of which I am entirely unqualified to describe. At best I can make out a string was passed to reflect that pointed to invalid stack memory.\n\nI've decided to abandon this change as I am unqualified to debug any issues that occur from this change.",
			"disapproval": false,
			"date": "2013-01-11 05:25:35.083040",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dave@cheney.net",
				"lvd@google.com",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"lvd@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm going to submit CL 7278048, which should do approximately what this CL does. If you run into problems please let me know.",
			"disapproval": false,
			"date": "2013-02-03 04:54:07.083450",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi Russ,\r\n\r\nSadly I can confirm that cf8e097deec5ad5c has caused the same issue in\r\nour juju codebase as my previous attempt. Also, reproducing the issue\r\nis not simple as our test harness requires a magic version of mongodb\r\nto run properly, so here goes.\r\n\r\nIn my previous CL, the error was slightly different, but pointed to\r\ngarbage on the stack, possibly indicating escape analysis was overly\r\naggressive with &T{}. I will try to generate a better error report and\r\na reproducible test case.\r\n\r\nCheers\r\n\r\nDave\r\n\r\n... Panic: runtime error: invalid memory address or nil pointer\r\ndereference (PC=0x411731)\r\n\r\n/home/dfc/go/src/pkg/runtime/panic.c:227\r\n  in panic\r\n/home/dfc/src/labix.org/v2/mgo/bson/bson.go:372\r\n  in handleErr\r\n/home/dfc/go/src/pkg/runtime/panic.c:227\r\n  in panic\r\n/home/dfc/go/src/pkg/runtime/panic.c:476\r\n  in panicstring\r\n/home/dfc/go/src/pkg/runtime/thread_linux.c:199\r\n  in sigpanic\r\n/home/dfc/go/src/pkg/runtime/memmove_amd64.s:46\r\n  in memmove\r\n/home/dfc/go/src/pkg/runtime/zstring_linux_amd64.c:304\r\n  in stringtoslicebyte\r\n/home/dfc/src/labix.org/v2/mgo/bson/encode.go:398\r\n  in encoder.addCStr\r\n/home/dfc/src/labix.org/v2/mgo/bson/encode.go:394\r\n  in encoder.addStr\r\n/home/dfc/src/labix.org/v2/mgo/bson/encode.go:237\r\n  in encoder.addElem\r\n/home/dfc/src/labix.org/v2/mgo/bson/encode.go:142\r\n  in encoder.addStruct\r\n/home/dfc/src/labix.org/v2/mgo/bson/encode.go:110\r\n  in encoder.addDoc\r\n/home/dfc/src/labix.org/v2/mgo/bson/encode.go:368\r\n  in encoder.addElem\r\n/home/dfc/src/labix.org/v2/mgo/bson/encode.go:220\r\n  in encoder.addElem\r\n/home/dfc/src/labix.org/v2/mgo/bson/encode.go:217\r\n  in encoder.addElem\r\n/home/dfc/src/labix.org/v2/mgo/bson/encode.go:142\r\n  in encoder.addStruct\r\n/home/dfc/src/labix.org/v2/mgo/bson/encode.go:110\r\n  in encoder.addDoc\r\n/home/dfc/src/labix.org/v2/mgo/bson/encode.go:368\r\n  in encoder.addElem\r\n/home/dfc/src/labix.org/v2/mgo/bson/encode.go:184\r\n  in encoder.addSlice\r\n/home/dfc/src/labix.org/v2/mgo/bson/encode.go:112\r\n  in encoder.addDoc\r\n/home/dfc/src/labix.org/v2/mgo/bson/encode.go:309\r\n  in encoder.addElem\r\n/home/dfc/src/labix.org/v2/mgo/bson/encode.go:142\r\n  in encoder.addStruct\r\n/home/dfc/src/labix.org/v2/mgo/bson/encode.go:110\r\n  in encoder.addDoc\r\n/home/dfc/src/labix.org/v2/mgo/bson/bson.go:423\r\n  in Marshal\r\n/home/dfc/src/labix.org/v2/mgo/socket.go:508\r\n  in addBSON\r\n/home/dfc/src/labix.org/v2/mgo/socket.go:279\r\n  in mongoSocket.Query\r\n/home/dfc/src/labix.org/v2/mgo/session.go:2998\r\n  in Collection.writeQuery\r\n/home/dfc/src/labix.org/v2/mgo/session.go:1428\r\n  in Collection.Insert\r\n/home/dfc/src/labix.org/v2/mgo/txn/txn.go:299\r\n  in Runner.Run\r\n/home/dfc/src/launchpad.net/juju-core/state/relation.go:108\r\n  in Relation.Destroy\r\nuniter_test.go:1448\r\n  in func.010\r\nuniter_test.go:1440\r\n  in custom.step\r\nuniter_test.go:780\r\n  in step\r\nuniter_test.go:118\r\n  in context.run\r\nuniter_test.go:725\r\n  in UniterSuite.TestUniter\r\nOOPS: 21 passed, 1 FAILED, 3 PANICKED\r\n\r\n\r\nOn Sun, Feb 3, 2013 at 3:54 PM,  <rsc@golang.org> wrote:\r\n> I'm going to submit CL 7278048, which should do approximately what this\r\n> CL does. If you run into problems please let me know.\r\n>\r\n>\r\n> https://codereview.appspot.com/7068046/\r\n",
			"disapproval": false,
			"date": "2013-02-03 06:35:42.573470",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is the more common error, which lead me to suspect incorrect\r\nescape analysis\r\n\r\non.DocElem{Name:\"d\", Value:[]interface {}{\"wp2:baz mysql:foo\"}},\r\nbson.DocElem{Name:\"r\", Value:[]interface {}{2}}}}}\r\nservice_test.go:831:\r\n    c.Assert(err, IsNil)\r\n... value *errors.errorString = &errors.errorString{s:\"cannot destroy\r\nrelation \\\"wp1:bar mysql:foo\\\": ObjectIDs must be exactly 12 bytes\r\nlong (got 352)\"} (\"cannot destroy relation \\\"wp1:bar mysql:foo\\\":\r\nObjectIDs must be exactly 12 bytes long (got 352)\")\r\n\r\n        case reflect.String:\r\n                s := v.String()\r\n                switch v.Type() {\r\n                case typeObjectId:\r\n                        if len(s) != 12 {\r\n                                panic(\"ObjectIDs must be exactly 12\r\nbytes long (got \" +\r\n                                        strconv.Itoa(len(s)) + \")\")\r\n                        }\r\n                        e.addElemName('\\x07', name)\r\n                        e.addBytes([]byte(s)...)\r\n                case typeSymbol:\r\n                        e.addElemName('\\x0E', name)\r\n                        e.addStr(s)\r\n                default:\r\n                        e.addElemName('\\x02', name)\r\n                        e.addStr(s)\r\n                }\r\n\r\n\r\n\r\nOn Sun, Feb 3, 2013 at 5:35 PM, Dave Cheney <dave@cheney.net> wrote:\r\n> Hi Russ,\r\n>\r\n> Sadly I can confirm that cf8e097deec5ad5c has caused the same issue in\r\n> our juju codebase as my previous attempt. Also, reproducing the issue\r\n> is not simple as our test harness requires a magic version of mongodb\r\n> to run properly, so here goes.\r\n>\r\n> In my previous CL, the error was slightly different, but pointed to\r\n> garbage on the stack, possibly indicating escape analysis was overly\r\n> aggressive with &T{}. I will try to generate a better error report and\r\n> a reproducible test case.\r\n>\r\n> Cheers\r\n>\r\n> Dave\r\n>\r\n> ... Panic: runtime error: invalid memory address or nil pointer\r\n> dereference (PC=0x411731)\r\n>\r\n> /home/dfc/go/src/pkg/runtime/panic.c:227\r\n>   in panic\r\n> /home/dfc/src/labix.org/v2/mgo/bson/bson.go:372\r\n>   in handleErr\r\n> /home/dfc/go/src/pkg/runtime/panic.c:227\r\n>   in panic\r\n> /home/dfc/go/src/pkg/runtime/panic.c:476\r\n>   in panicstring\r\n> /home/dfc/go/src/pkg/runtime/thread_linux.c:199\r\n>   in sigpanic\r\n> /home/dfc/go/src/pkg/runtime/memmove_amd64.s:46\r\n>   in memmove\r\n> /home/dfc/go/src/pkg/runtime/zstring_linux_amd64.c:304\r\n>   in stringtoslicebyte\r\n> /home/dfc/src/labix.org/v2/mgo/bson/encode.go:398\r\n>   in encoder.addCStr\r\n> /home/dfc/src/labix.org/v2/mgo/bson/encode.go:394\r\n>   in encoder.addStr\r\n> /home/dfc/src/labix.org/v2/mgo/bson/encode.go:237\r\n>   in encoder.addElem\r\n> /home/dfc/src/labix.org/v2/mgo/bson/encode.go:142\r\n>   in encoder.addStruct\r\n> /home/dfc/src/labix.org/v2/mgo/bson/encode.go:110\r\n>   in encoder.addDoc\r\n> /home/dfc/src/labix.org/v2/mgo/bson/encode.go:368\r\n>   in encoder.addElem\r\n> /home/dfc/src/labix.org/v2/mgo/bson/encode.go:220\r\n>   in encoder.addElem\r\n> /home/dfc/src/labix.org/v2/mgo/bson/encode.go:217\r\n>   in encoder.addElem\r\n> /home/dfc/src/labix.org/v2/mgo/bson/encode.go:142\r\n>   in encoder.addStruct\r\n> /home/dfc/src/labix.org/v2/mgo/bson/encode.go:110\r\n>   in encoder.addDoc\r\n> /home/dfc/src/labix.org/v2/mgo/bson/encode.go:368\r\n>   in encoder.addElem\r\n> /home/dfc/src/labix.org/v2/mgo/bson/encode.go:184\r\n>   in encoder.addSlice\r\n> /home/dfc/src/labix.org/v2/mgo/bson/encode.go:112\r\n>   in encoder.addDoc\r\n> /home/dfc/src/labix.org/v2/mgo/bson/encode.go:309\r\n>   in encoder.addElem\r\n> /home/dfc/src/labix.org/v2/mgo/bson/encode.go:142\r\n>   in encoder.addStruct\r\n> /home/dfc/src/labix.org/v2/mgo/bson/encode.go:110\r\n>   in encoder.addDoc\r\n> /home/dfc/src/labix.org/v2/mgo/bson/bson.go:423\r\n>   in Marshal\r\n> /home/dfc/src/labix.org/v2/mgo/socket.go:508\r\n>   in addBSON\r\n> /home/dfc/src/labix.org/v2/mgo/socket.go:279\r\n>   in mongoSocket.Query\r\n> /home/dfc/src/labix.org/v2/mgo/session.go:2998\r\n>   in Collection.writeQuery\r\n> /home/dfc/src/labix.org/v2/mgo/session.go:1428\r\n>   in Collection.Insert\r\n> /home/dfc/src/labix.org/v2/mgo/txn/txn.go:299\r\n>   in Runner.Run\r\n> /home/dfc/src/launchpad.net/juju-core/state/relation.go:108\r\n>   in Relation.Destroy\r\n> uniter_test.go:1448\r\n>   in func.010\r\n> uniter_test.go:1440\r\n>   in custom.step\r\n> uniter_test.go:780\r\n>   in step\r\n> uniter_test.go:118\r\n>   in context.run\r\n> uniter_test.go:725\r\n>   in UniterSuite.TestUniter\r\n> OOPS: 21 passed, 1 FAILED, 3 PANICKED\r\n>\r\n>\r\n> On Sun, Feb 3, 2013 at 3:54 PM,  <rsc@golang.org> wrote:\r\n>> I'm going to submit CL 7278048, which should do approximately what this\r\n>> CL does. If you run into problems please let me know.\r\n>>\r\n>>\r\n>> https://codereview.appspot.com/7068046/\r\n",
			"disapproval": false,
			"date": "2013-02-03 06:43:23.251400",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 7068046: cmd/gc: don't allocate &T{} on the heap if it does not ...",
	"created": "2013-01-05 23:10:00.855400",
	"patchsets": [
		1,
		2001,
		3,
		4,
		3003,
		2002,
		5,
		10001,
		11001,
		13001,
		14001,
		10,
		9006
	],
	"modified": "2013-02-03 04:54:07.290560",
	"closed": true,
	"issue": 7068046
}