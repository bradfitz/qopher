{
	"description": "runtime: allow SetFinalizer with a func(interface{})\n\nFixes issue 5368.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dvyukov@google.com"
	],
	"reviewers": [
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "pieter@binky.org.uk",
			"recipients": [
				"pieter@binky.org.uk",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, rsc@golang.org),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-07-25 19:47:08.694910",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"pieter@binky.org.uk",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/malloc.goc\nFile src/pkg/runtime/malloc.goc (right):\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/malloc.goc#newcode851\nsrc/pkg/runtime/malloc.goc:851: uintptr nret = 0;\ndo not initialize variable during declaration\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/malloc.goc#newcode870\nsrc/pkg/runtime/malloc.goc:870: if (ft->dotdotdot || ft->in.len != 1)\nremove the space\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/malloc.goc#newcode873\nsrc/pkg/runtime/malloc.goc:873: if (fint->kind == KindInterface && ((InterfaceType*)fint)->mhdr.len == 0) {\nno space between \"if(\"\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/malloc.goc#newcode873\nsrc/pkg/runtime/malloc.goc:873: if (fint->kind == KindInterface && ((InterfaceType*)fint)->mhdr.len == 0) {\ndrop unnecessary {}\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/malloc.goc#newcode875\nsrc/pkg/runtime/malloc.goc:875: } else if (fint != obj.type) {\nno space between \"if(\"\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/malloc.goc#newcode875\nsrc/pkg/runtime/malloc.goc:875: } else if (fint != obj.type) {\ndrop unnecessary {}\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/mfinal_test.go\nFile src/pkg/runtime/mfinal_test.go (right):\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/mfinal_test.go#newcode15\nsrc/pkg/runtime/mfinal_test.go:15: func TestFinalizerTypeSucceed(t *testing.T) {\nrun these tests iff runtime.GOARCH=amd64, 32-bit platforms has problems with GC precision and may not run any finalizers at all\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/mfinal_test.go#newcode16\nsrc/pkg/runtime/mfinal_test.go:16: ticker := time.After(time.Second * 4)\njust write:\ncase <-time.After(...):\nbelow\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/mfinal_test.go#newcode18\nsrc/pkg/runtime/mfinal_test.go:18: f := func(v *int) {\ndeclare it inline in SetFinalizer call\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/mfinal_test.go#newcode20\nsrc/pkg/runtime/mfinal_test.go:20: if *v != 97531 {\nyou need to check before chan close, otherwise the test may have already been finished\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/mfinal_test.go#newcode29\nsrc/pkg/runtime/mfinal_test.go:29: // otherwise this function gets optimized out.\nI do't think this is the case. gc is not all that agressive and this function does have side effects.\nprobably it just leaves some pointers on stack\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/mgc0.c#newcode2302\nsrc/pkg/runtime/mgc0.c:2302: framesz = argsz + f->nret;\nframesz = sizeof(Eface) + f->nret;\nThe additional word is absolutely not important here\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/mgc0.c#newcode2312\nsrc/pkg/runtime/mgc0.c:2312: if (f->ot == nil) {\ndrop {}\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/mgc0.c#newcode2315\nsrc/pkg/runtime/mgc0.c:2315: Eface *ef = (Eface*)frame;\nmove the declaration to the top of the function\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/runtime.h\nFile src/pkg/runtime/runtime.h (right):\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/runtime.h#newcode811\nsrc/pkg/runtime/runtime.h:811: bool\truntime\u00b7addfinalizer(void*, FuncVal *fn, uintptr, void *);\nno space between \"void *\" to match the code around",
			"disapproval": false,
			"date": "2013-07-26 09:55:04.839510",
			"approval": false
		},
		{
			"sender": "pieter@binky.org.uk",
			"recipients": [
				"pieter@binky.org.uk",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "All done except src/pkg/runtime/mfinal_test.go:29.\n\nWhat do you propose?\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/malloc.goc\nFile src/pkg/runtime/malloc.goc (right):\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/malloc.goc#newcode851\nsrc/pkg/runtime/malloc.goc:851: uintptr nret = 0;\nOn 2013/07/26 09:55:04, dvyukov wrote:\n> do not initialize variable during declaration\n\nDone.\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/malloc.goc#newcode870\nsrc/pkg/runtime/malloc.goc:870: if (ft->dotdotdot || ft->in.len != 1)\nOn 2013/07/26 09:55:04, dvyukov wrote:\n> remove the space\n\nDone.\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/malloc.goc#newcode873\nsrc/pkg/runtime/malloc.goc:873: if (fint->kind == KindInterface && ((InterfaceType*)fint)->mhdr.len == 0) {\nOn 2013/07/26 09:55:04, dvyukov wrote:\n> no space between \"if(\"\n\nDone.\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/malloc.goc#newcode873\nsrc/pkg/runtime/malloc.goc:873: if (fint->kind == KindInterface && ((InterfaceType*)fint)->mhdr.len == 0) {\nOn 2013/07/26 09:55:04, dvyukov wrote:\n> drop unnecessary {}\n\nDone.\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/malloc.goc#newcode875\nsrc/pkg/runtime/malloc.goc:875: } else if (fint != obj.type) {\nOn 2013/07/26 09:55:04, dvyukov wrote:\n> no space between \"if(\"\n\nDone.\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/malloc.goc#newcode875\nsrc/pkg/runtime/malloc.goc:875: } else if (fint != obj.type) {\nOn 2013/07/26 09:55:04, dvyukov wrote:\n> no space between \"if(\"\n\nDone.\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/mfinal_test.go\nFile src/pkg/runtime/mfinal_test.go (right):\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/mfinal_test.go#newcode15\nsrc/pkg/runtime/mfinal_test.go:15: func TestFinalizerTypeSucceed(t *testing.T) {\nOn 2013/07/26 09:55:04, dvyukov wrote:\n> run these tests iff runtime.GOARCH=amd64, 32-bit platforms has problems with GC\n> precision and may not run any finalizers at all\n\nDone.\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/mfinal_test.go#newcode16\nsrc/pkg/runtime/mfinal_test.go:16: ticker := time.After(time.Second * 4)\nOn 2013/07/26 09:55:04, dvyukov wrote:\n> just write:\n> case <-time.After(...):\n> below\n\nDone.\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/mfinal_test.go#newcode18\nsrc/pkg/runtime/mfinal_test.go:18: f := func(v *int) {\nOn 2013/07/26 09:55:04, dvyukov wrote:\n> declare it inline in SetFinalizer call\n\nDone.\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/mfinal_test.go#newcode20\nsrc/pkg/runtime/mfinal_test.go:20: if *v != 97531 {\nOn 2013/07/26 09:55:04, dvyukov wrote:\n> you need to check before chan close, otherwise the test may have already been\n> finished\n\nDone.\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/mfinal_test.go#newcode29\nsrc/pkg/runtime/mfinal_test.go:29: // otherwise this function gets optimized out.\nPerhaps. Fact remains that removing this makes it fail. What do you propose?\n\nOn 2013/07/26 09:55:04, dvyukov wrote:\n> I do't think this is the case. gc is not all that agressive and this function\n> does have side effects.\n> probably it just leaves some pointers on stack\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/mgc0.c#newcode2302\nsrc/pkg/runtime/mgc0.c:2302: framesz = argsz + f->nret;\nOn 2013/07/26 09:55:04, dvyukov wrote:\n> framesz = sizeof(Eface) + f->nret;\n> The additional word is absolutely not important here\n\nDone.\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/mgc0.c#newcode2312\nsrc/pkg/runtime/mgc0.c:2312: if (f->ot == nil) {\nOn 2013/07/26 09:55:04, dvyukov wrote:\n> drop {}\n\nDone.\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/mgc0.c#newcode2315\nsrc/pkg/runtime/mgc0.c:2315: Eface *ef = (Eface*)frame;\nOn 2013/07/26 09:55:04, dvyukov wrote:\n> move the declaration to the top of the function\n\nDone.\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/runtime.h\nFile src/pkg/runtime/runtime.h (right):\n\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/runtime.h#newcode811\nsrc/pkg/runtime/runtime.h:811: bool\truntime\u00b7addfinalizer(void*, FuncVal *fn, uintptr, void *);\nOn 2013/07/26 09:55:04, dvyukov wrote:\n> no space between \"void *\" to match the code around\n\nDone.",
			"disapproval": false,
			"date": "2013-07-26 23:31:24.825390",
			"approval": false
		},
		{
			"sender": "pieter@binky.org.uk",
			"recipients": [
				"pieter@binky.org.uk",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dvyukov@google.com (cc: golang-dev@googlegroups.com, rsc@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-07-26 23:33:40.473840",
			"approval": false
		},
		{
			"sender": "pieter@binky.org.uk",
			"recipients": [
				"pieter@binky.org.uk",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/27 10:06:35, dvyukov wrote:\n> On Sat, Jul 27, 2013 at 3:31 AM,  <mailto:pieter@binky.org.uk> wrote:\n> > All done except src/pkg/runtime/mfinal_test.go:29.\n> >\n> > What do you propose?\n> \n> \n> The test works for me on darwin/amd64 with t.Skipped() commented out.\n> Does it fail for you now?\n\nIndeed, it does work now. Magic.\n\nAnything else?",
			"disapproval": false,
			"date": "2013-07-27 10:16:48.911390",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Jul 27, 2013 at 3:31 AM,  <pieter@binky.org.uk> wrote:\r\n> All done except src/pkg/runtime/mfinal_test.go:29.\r\n>\r\n> What do you propose?\r\n\r\n\r\nThe test works for me on darwin/amd64 with t.Skipped() commented out.\r\nDoes it fail for you now?\r\n\r\n\r\nhttps://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/malloc.goc\r\n> File src/pkg/runtime/malloc.goc (right):\r\n>\r\n> https://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/malloc.goc#newcode851\r\n> src/pkg/runtime/malloc.goc:851: uintptr nret = 0;\r\n> On 2013/07/26 09:55:04, dvyukov wrote:\r\n>>\r\n>> do not initialize variable during declaration\r\n>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/malloc.goc#newcode870\r\n> src/pkg/runtime/malloc.goc:870: if (ft->dotdotdot || ft->in.len != 1)\r\n> On 2013/07/26 09:55:04, dvyukov wrote:\r\n>>\r\n>> remove the space\r\n>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/malloc.goc#newcode873\r\n> src/pkg/runtime/malloc.goc:873: if (fint->kind == KindInterface &&\r\n> ((InterfaceType*)fint)->mhdr.len == 0) {\r\n> On 2013/07/26 09:55:04, dvyukov wrote:\r\n>>\r\n>> no space between \"if(\"\r\n>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/malloc.goc#newcode873\r\n> src/pkg/runtime/malloc.goc:873: if (fint->kind == KindInterface &&\r\n> ((InterfaceType*)fint)->mhdr.len == 0) {\r\n> On 2013/07/26 09:55:04, dvyukov wrote:\r\n>>\r\n>> drop unnecessary {}\r\n>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/malloc.goc#newcode875\r\n> src/pkg/runtime/malloc.goc:875: } else if (fint != obj.type) {\r\n> On 2013/07/26 09:55:04, dvyukov wrote:\r\n>>\r\n>> no space between \"if(\"\r\n>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/malloc.goc#newcode875\r\n> src/pkg/runtime/malloc.goc:875: } else if (fint != obj.type) {\r\n> On 2013/07/26 09:55:04, dvyukov wrote:\r\n>>\r\n>> no space between \"if(\"\r\n>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/mfinal_test.go\r\n> File src/pkg/runtime/mfinal_test.go (right):\r\n>\r\n> https://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/mfinal_test.go#newcode15\r\n> src/pkg/runtime/mfinal_test.go:15: func TestFinalizerTypeSucceed(t\r\n> *testing.T) {\r\n> On 2013/07/26 09:55:04, dvyukov wrote:\r\n>>\r\n>> run these tests iff runtime.GOARCH=amd64, 32-bit platforms has\r\n>\r\n> problems with GC\r\n>>\r\n>> precision and may not run any finalizers at all\r\n>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/mfinal_test.go#newcode16\r\n> src/pkg/runtime/mfinal_test.go:16: ticker := time.After(time.Second * 4)\r\n> On 2013/07/26 09:55:04, dvyukov wrote:\r\n>>\r\n>> just write:\r\n>> case <-time.After(...):\r\n>> below\r\n>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/mfinal_test.go#newcode18\r\n> src/pkg/runtime/mfinal_test.go:18: f := func(v *int) {\r\n> On 2013/07/26 09:55:04, dvyukov wrote:\r\n>>\r\n>> declare it inline in SetFinalizer call\r\n>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/mfinal_test.go#newcode20\r\n> src/pkg/runtime/mfinal_test.go:20: if *v != 97531 {\r\n> On 2013/07/26 09:55:04, dvyukov wrote:\r\n>>\r\n>> you need to check before chan close, otherwise the test may have\r\n>\r\n> already been\r\n>>\r\n>> finished\r\n>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/mfinal_test.go#newcode29\r\n> src/pkg/runtime/mfinal_test.go:29: // otherwise this function gets\r\n> optimized out.\r\n> Perhaps. Fact remains that removing this makes it fail. What do you\r\n> propose?\r\n>\r\n>\r\n> On 2013/07/26 09:55:04, dvyukov wrote:\r\n>>\r\n>> I do't think this is the case. gc is not all that agressive and this\r\n>\r\n> function\r\n>>\r\n>> does have side effects.\r\n>> probably it just leaves some pointers on stack\r\n>\r\n>\r\n> https://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/mgc0.c\r\n> File src/pkg/runtime/mgc0.c (right):\r\n>\r\n> https://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/mgc0.c#newcode2302\r\n> src/pkg/runtime/mgc0.c:2302: framesz = argsz + f->nret;\r\n> On 2013/07/26 09:55:04, dvyukov wrote:\r\n>>\r\n>> framesz = sizeof(Eface) + f->nret;\r\n>> The additional word is absolutely not important here\r\n>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/mgc0.c#newcode2312\r\n> src/pkg/runtime/mgc0.c:2312: if (f->ot == nil) {\r\n> On 2013/07/26 09:55:04, dvyukov wrote:\r\n>>\r\n>> drop {}\r\n>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/mgc0.c#newcode2315\r\n> src/pkg/runtime/mgc0.c:2315: Eface *ef = (Eface*)frame;\r\n> On 2013/07/26 09:55:04, dvyukov wrote:\r\n>>\r\n>> move the declaration to the top of the function\r\n>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/runtime.h\r\n> File src/pkg/runtime/runtime.h (right):\r\n>\r\n> https://codereview.appspot.com/11858043/diff/5001/src/pkg/runtime/runtime.h#newcode811\r\n> src/pkg/runtime/runtime.h:811: bool     runtime\u00b7addfinalizer(void*, FuncVal\r\n> *fn, uintptr, void *);\r\n> On 2013/07/26 09:55:04, dvyukov wrote:\r\n>>\r\n>> no space between \"void *\" to match the code around\r\n>\r\n>\r\n> Done.\r\n>\r\n> https://codereview.appspot.com/11858043/\r\n",
			"disapproval": false,
			"date": "2013-07-27 10:06:35.853200",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"pieter@binky.org.uk",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/27 10:16:48, peted wrote:\n> On 2013/07/27 10:06:35, dvyukov wrote:\n> > On Sat, Jul 27, 2013 at 3:31 AM,  <mailto:pieter@binky.org.uk> wrote:\n> > > All done except src/pkg/runtime/mfinal_test.go:29.\n> > >\n> > > What do you propose?\n> > \n> > \n> > The test works for me on darwin/amd64 with t.Skipped() commented out.\n> > Does it fail for you now?\n> \n> Indeed, it does work now. Magic.\n> \n> Anything else?\n\nLGTM if you remove t.Skipped()",
			"disapproval": false,
			"date": "2013-07-27 10:18:52.520310",
			"approval": true
		},
		{
			"sender": "pieter@binky.org.uk",
			"recipients": [
				"pieter@binky.org.uk",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dvyukov@google.com (cc: golang-dev@googlegroups.com, rsc@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-07-27 10:20:34.008310",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"pieter@binky.org.uk",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=253cf8517c5d ***\n\nruntime: allow SetFinalizer with a func(interface{})\n\nFixes issue 5368.\n\nR=golang-dev, dvyukov\nCC=golang-dev, rsc\nhttps://codereview.appspot.com/11858043\n\nCommitter: Dmitriy Vyukov <dvyukov@google.com>",
			"disapproval": false,
			"date": "2013-07-29 15:43:51.812250",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"pieter@binky.org.uk",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I would have liked to have been given a chance to look at this before it was submitted.\n\nWhy is interface{} special? Why do we not allow any argument type to which x can be assigned?\n\nWhy are there only tests on amd64?",
			"disapproval": false,
			"date": "2013-07-29 17:16:01.888550",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jul 29, 2013 at 9:16 PM,  <rsc@golang.org> wrote:\r\n> I would have liked to have been given a chance to look at this before it\r\n> was submitted.\r\n>\r\n> Why is interface{} special? Why do we not allow any argument type to\r\n> which x can be assigned?\r\n\r\nThere are 2 use cases:\r\n1. Concrete finalizer for concrete type -- this is where current\r\nfinalizer is used.\r\n2. Generic reflect-based programming -- this is where interface{}\r\nfinalizer is necessary.\r\n\r\n> Why are there only tests on amd64?\r\n\r\nFinalizer tests are flaky on 32-bits because of conservative GC. We\r\nuse such check in test/ for finalizer tests as well.\r\n",
			"disapproval": false,
			"date": "2013-07-29 17:29:49.965730",
			"approval": false
		},
		{
			"sender": "pieter@binky.org.uk",
			"recipients": [
				"pieter@binky.org.uk",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/29 17:29:49, dvyukov wrote:\n> On Mon, Jul 29, 2013 at 9:16 PM,  <mailto:rsc@golang.org> wrote:\n> > I would have liked to have been given a chance to look at this before it\n> > was submitted.\n\nIf my impatience caused trouble, I apologise.\n\n> > Why is interface{} special? Why do we not allow any argument type to\n> > which x can be assigned?\n> \n> There are 2 use cases:\n> 1. Concrete finalizer for concrete type -- this is where current\n> finalizer is used.\n> 2. Generic reflect-based programming -- this is where interface{}\n> finalizer is necessary.\n\nWell, it would be nice if SetFinalizer() accepted any f whose argument is an interface implemented by x. I can imagine this finalizer quite easily:\n\nfunc fin(x io.Closer) {\n    x.Close()\n}\n\nNot exactly idiomatic, but not unthinkable. Cleaner and more descriptive than interface{}, and interface{} wouldn't feel like such a special case.\n\nSome more stuff would have to be moved to the runtime package. The body of reflect.implements() comes to mind, unless you want to go further than that (AssignableTo? ConvertibleTo?). And some more digging around the type system.\n\nBut it does sound like a seperate issue from allowing finalizers to be used with reflect.",
			"disapproval": false,
			"date": "2013-07-29 20:12:03.389420",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'll think about it and figure out whether I want to change anything.\r\nThanks.\r\n",
			"disapproval": false,
			"date": "2013-07-30 23:28:27.755100",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "CL https://codereview.appspot.com/12895043 expands this.\r\n",
			"disapproval": false,
			"date": "2013-08-13 21:30:45.356880",
			"approval": false
		}
	],
	"owner_email": "pieter@binky.org.uk",
	"private": false,
	"base_url": "",
	"owner": "peted",
	"subject": "code review 11858043: runtime: allow SetFinalizer with a func(interface{})",
	"created": "2013-07-25 19:42:51.500700",
	"patchsets": [
		1,
		2001,
		5001,
		14001,
		18001,
		28001,
		31001
	],
	"modified": "2013-08-13 21:30:45.631260",
	"closed": true,
	"issue": 11858043
}