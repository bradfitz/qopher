{
	"description": "exp/ssh: simplify Listener by pre handshaking incoming connections\n\n*** for discussion ***\n\nUse an internal goroutine to avoid blocking the\nlistener while handshaking. Connections returned\nfrom Accept are post handshake. Connections that\nfail handshaking are discarded.",
	"cc": [
		"golang-dev@googlegroups.com",
		"jose@genexies.net"
	],
	"reviewers": [
		"agl@golang.org",
		"gustav.paul@gmail.com",
		"n13m3y3r@gmail.com"
	],
	"messages": [
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jan 16, 2012 at 4:52 AM,  <dave@cheney.net> wrote:\n> I have been thinking about the Server side of the ssh package,\n> specifically ways to reduce the need for the consumer of the package to\n> call ServerConn.Accept() to drive the processing of incoming messages.\n>\n> This CL is one idea to insert goroutines behind the scenes to simplify\n> the visible interface for people implementing ssh servers.\n\nThe need to call ServerConn.Accept to drive the message loop is a\nlittle ugly, but I don't believe that it actually costs very much:\n\nSSH is a multiplexed protocol and most servers are going to need to be\nable to handle additionally streams being initiated from the client.\nSo most servers are going to have to sit in ServerConn.Accept in any\ncase.\n\nLikewise with handshaking: this change hides any Accept errors and\nforces all handshaking on a single goroutine. However, most servers\nwill fork off goroutines per-connection anyway, so it's not clear that\nit actually saves them anything.\n\n\nCheers\n\nAGL\n",
			"disapproval": false,
			"date": "2012-01-16 21:13:11.925838",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"jose@genexies.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@golang.org, gustav.paul@gmail.com, n13m3y3r@gmail.com (cc: golang-dev@googlegroups.com, jose@genexies.net),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-16 09:49:58.517352",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"jose@genexies.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I have been thinking about the Server side of the ssh package, specifically ways to reduce the need for the consumer of the package to \ncall ServerConn.Accept() to drive the processing of incoming messages.\n\nThis CL is one idea to insert goroutines behind the scenes to simplify the visible interface for people implementing ssh servers.",
			"disapproval": false,
			"date": "2012-01-16 09:52:34.130529",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi AGL\n\nThanks for your comments.\n\n> The need to call ServerConn.Accept to drive the message loop is a\n> little ugly, but I don't believe that it actually costs very much:\n\nI think that this CL adds symmetry, ClientConn's returned from Dial or\nClient have been handshaken for you and I feel we can offer the same\nto consumers of Listen or Server.\n\n> SSH is a multiplexed protocol and most servers are going to need to be\n> able to handle additionally streams being initiated from the client.\n> So most servers are going to have to sit in ServerConn.Accept in any\n> case.\n\nAgreed, there will have to be something like a per ServerConn go\nroutine waiting to Accept Channel requests, however I would like to\nseparate that Accept'ing off incoming Channels from the mechanics of\nprocessing messages for existing channels. This would be the subject\nof a subsiquent CL.\n\n> Likewise with handshaking: this change hides any Accept errors and\n> forces all handshaking on a single goroutine. However, most servers\n> will fork off goroutines per-connection anyway, so it's not clear that\n> it actually saves them anything.\n\nThe actual handshaking is done in an individual go routine spawned\nonce the socket is accepted. Granted all errors are swallowed at the\nmoment, but as there is little that could be done with them I argue\nthat closing the accept channel sends the same signal, \"nothing more\nto do, cleanup and quit\". If you like, an acceptErr channel could be\nadded to transmit the error, or accept made chan interface{} and a\ntype switch used by the receiver to demux errors and Channels.\n\nThanks for your time.\n\nDave\n",
			"disapproval": false,
			"date": "2012-01-17 20:14:14.971042",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"jose@genexies.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-01-26 01:54:38.849129",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 5542051: exp/ssh: simplify Listener by pre handshaking incoming ...",
	"created": "2012-01-16 09:41:30.991626",
	"patchsets": [
		1,
		2001,
		3001,
		2002,
		5004
	],
	"modified": "2012-01-26 01:54:41.254027",
	"closed": true,
	"issue": 5542051
}