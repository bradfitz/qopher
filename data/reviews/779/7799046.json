{
	"description": "os/exec: fix fd leak with Std*Pipe + LookPath\n\nIf LookPath in Command fails, sets a sticky error, and then\nStdinPipe, StdoutPipe, or StderrPipe were called, those pipe\nfds were never cleaned up.\n\nFixes issue 5071",
	"cc": [
		"golang-dev@googlegroups.com",
		"rogpeppe@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-03-18 14:56:04.581930",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/18 14:56:04, bradfitz wrote:\n> Hello mailto:golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n\nI'm not sure this is right. this may well break code that currently does (correctly):\n\n   f, err := c.StdinPipe()\n   if err != nil {\n       return err\n   }\n   osf := f.(*os.File)\n\nThe underlying type may not be part of the automatically checked\nGo 1 contract, but I'd argue that it is just as important\nto maintain - with this change people's code will compile fine\nbut may crash when run.",
			"disapproval": false,
			"date": "2013-03-18 16:04:18.679250",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I anticipated this complaint.  See the earlier patchset in that CL for\r\nanother approach.\r\n\r\nI don't think Go 1 code assuming the concrete type is \"correct\", but\r\nwhatever.\r\n\r\nWould you LGTM the other fix?\r\n\r\n\r\nOn Mon, Mar 18, 2013 at 9:04 AM, <rogpeppe@gmail.com> wrote:\r\n\r\n> On 2013/03/18 14:56:04, bradfitz wrote:\r\n>\r\n>> Hello mailto:golang-dev@**googlegroups.com <golang-dev@googlegroups.com>,\r\n>>\r\n>\r\n>  I'd like you to review this change to\r\n>> https://go.googlecode.com/hg/\r\n>>\r\n>\r\n> I'm not sure this is right. this may well break code that currently does\r\n> (correctly):\r\n>\r\n>    f, err := c.StdinPipe()\r\n>    if err != nil {\r\n>        return err\r\n>    }\r\n>    osf := f.(*os.File)\r\n>\r\n> The underlying type may not be part of the automatically checked\r\n> Go 1 contract, but I'd argue that it is just as important\r\n> to maintain - with this change people's code will compile fine\r\n> but may crash when run.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7799046/<https://codereview.appspot.com/7799046/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-18 16:09:14.001540",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 18 March 2013 16:09, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> I anticipated this complaint.  See the earlier patchset in that CL for\r\n> another approach.\r\n>\r\n> I don't think Go 1 code assuming the concrete type is \"correct\", but\r\n> whatever.\r\n\r\nIt's difficult to say. By my reading of\r\nhttp://tip.golang.org/doc/go1compat.html#expectations\r\nwe guarantee compatible behaviour even in this case (there's nothing\r\nsaying \"you must not rely on the concrete type of a returned interface value\").\r\n\r\n> Would you LGTM the other fix?\r\n\r\nYes, I think that's better - os.Pipe will fail much less often than LookPath,\r\nand although we potentially leak fds when it does, the process is probably\r\nalready in bad trouble when that's happening. That is, we have mitigated\r\nthe problem in a backwardly compatible way despite not fixing it completely.\r\nI'm not sure we can do better at this point.\r\n\r\nLGTM with the alternative fix.\r\n",
			"disapproval": false,
			"date": "2013-03-18 16:47:59.534300",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=bcb5f45aa10e ***\n\nos/exec: fix fd leak with Std*Pipe + LookPath\n\nIf LookPath in Command fails, sets a sticky error, and then\nStdinPipe, StdoutPipe, or StderrPipe were called, those pipe\nfds were never cleaned up.\n\nFixes issue 5071\n\nR=golang-dev, rogpeppe\nCC=golang-dev\nhttps://codereview.appspot.com/7799046",
			"disapproval": false,
			"date": "2013-03-18 16:52:47.014340",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 7799046: os/exec: fix fd leak with Std*Pipe + LookPath",
	"created": "2013-03-18 14:48:44.268470",
	"patchsets": [
		1,
		2001,
		5001,
		12001
	],
	"modified": "2013-03-18 16:52:49.099020",
	"closed": true,
	"issue": 7799046
}