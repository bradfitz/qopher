{
	"description": "cmd/vet: make struct tag literal test work better with no go/types\n\nEliminate false positives when you can tell even without\ntype information that the literal does not need field tags.\n\nFar too noisy otherwise.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-03-13 20:09:10.674110",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=fd9e10489786 ***\n\ncmd/vet: make struct tag literal test work better with no go/types\n\nEliminate false positives when you can tell even without\ntype information that the literal does not need field tags.\n\nFar too noisy otherwise.\n\nR=golang-dev, r\nCC=golang-dev\nhttps://codereview.appspot.com/7797043",
			"disapproval": false,
			"date": "2013-03-13 21:37:41.468890",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7797043/diff/2001/src/cmd/vet/taglit.go\nFile src/cmd/vet/taglit.go (right):\n\nhttps://codereview.appspot.com/7797043/diff/2001/src/cmd/vet/taglit.go#newcode17\nsrc/cmd/vet/taglit.go:17: // checkUntaggedLiteral checks if a composite literal is an struct literal with\ns/an/a/\n\nhttps://codereview.appspot.com/7797043/diff/2001/src/cmd/vet/taglit.go#newcode44\nsrc/cmd/vet/taglit.go:44: // those are already breaking the Go 1 compatibility contract,\ns/contract/promise/\nit's not a contract.\n\nhttps://codereview.appspot.com/7797043/diff/2001/src/cmd/vet/taglit.go#newcode56\nsrc/cmd/vet/taglit.go:56: if typeString == \"struct\" { // typestub.go lies\nit's not lying, it's doing all it can. don't criticize it, fix it to say what you want (although i don't know what would be better.)\n\nhttps://codereview.appspot.com/7797043/diff/2001/src/cmd/vet/test_taglit.go\nFile src/cmd/vet/test_taglit.go (right):\n\nhttps://codereview.appspot.com/7797043/diff/2001/src/cmd/vet/test_taglit.go#newcode28\nsrc/cmd/vet/test_taglit.go:28: var Okay1 = []string{\nthese contradict the comment above so deserve a comment of their own. or that needs to be fixed.\n\nhttps://codereview.appspot.com/7797043/diff/2001/src/cmd/vet/types.go\nFile src/cmd/vet/types.go (right):\n\nhttps://codereview.appspot.com/7797043/diff/2001/src/cmd/vet/types.go#newcode51\nsrc/cmd/vet/types.go:51: // TODO: Seems wrong: different from typestub.go.\njudgment call, but for consistency should probably be true. please change it and add a comment as in the stub.",
			"disapproval": false,
			"date": "2013-03-13 20:19:04.893260",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-13 20:47:06.332360",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7797043/diff/2001/src/cmd/vet/taglit.go\nFile src/cmd/vet/taglit.go (right):\n\nhttps://codereview.appspot.com/7797043/diff/2001/src/cmd/vet/taglit.go#newcode17\nsrc/cmd/vet/taglit.go:17: // checkUntaggedLiteral checks if a composite literal is an struct literal with\nOn 2013/03/13 20:19:05, r wrote:\n> s/an/a/\n\nDone.\n\nhttps://codereview.appspot.com/7797043/diff/2001/src/cmd/vet/taglit.go#newcode44\nsrc/cmd/vet/taglit.go:44: // those are already breaking the Go 1 compatibility contract,\nOn 2013/03/13 20:19:05, r wrote:\n> s/contract/promise/\n> it's not a contract.\n\nDone.\n\nhttps://codereview.appspot.com/7797043/diff/2001/src/cmd/vet/taglit.go#newcode56\nsrc/cmd/vet/taglit.go:56: if typeString == \"struct\" { // typestub.go lies\nOn 2013/03/13 20:19:05, r wrote:\n> it's not lying, it's doing all it can. don't criticize it, fix it to say what\n> you want (although i don't know what would be better.)\n\n\tif typeString == \"struct\" { // typestub.go does not give a real type string\n\nI was going to fix typestub.go but it doesn't have access to f and I didn't want to change the interface.\n\nhttps://codereview.appspot.com/7797043/diff/2001/src/cmd/vet/test_taglit.go\nFile src/cmd/vet/test_taglit.go (right):\n\nhttps://codereview.appspot.com/7797043/diff/2001/src/cmd/vet/test_taglit.go#newcode28\nsrc/cmd/vet/test_taglit.go:28: var Okay1 = []string{\nOn 2013/03/13 20:19:05, r wrote:\n> these contradict the comment above so deserve a comment of their own. or that\n> needs to be fixed.\n\nI moved lines 18-26 down below the new part. I think that's what you meant but am not sure.\n\nhttps://codereview.appspot.com/7797043/diff/2001/src/cmd/vet/types.go\nFile src/cmd/vet/types.go (right):\n\nhttps://codereview.appspot.com/7797043/diff/2001/src/cmd/vet/types.go#newcode51\nsrc/cmd/vet/types.go:51: // TODO: Seems wrong: different from typestub.go.\nOn 2013/03/13 20:19:05, r wrote:\n> judgment call, but for consistency should probably be true. please change it and\n> add a comment as in the stub.\n\nI think it's important not just for consistency but also so that vet degrades gracefully in the absence of type information. Even if go/types is being used, it might not have a full picture. For vet to remain useful in those cases, it needs to do the best it can with what it has available.\n\nDone. I also changed the function to use the named type in preference to the unnamed one when generating the string. The old code printed errors like:\n\ntest_taglit.go:55: struct{Name string; Usage string; Value flag.Value; DefValue string} composite literal uses untagged fields\n\ninstead of\n\ntest_taglit.go:55: flag.Flag composite literal uses untagged fields",
			"disapproval": false,
			"date": "2013-03-13 20:47:14.030150",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7797043/diff/2001/src/cmd/vet/taglit.go\nFile src/cmd/vet/taglit.go (right):\n\nhttps://codereview.appspot.com/7797043/diff/2001/src/cmd/vet/taglit.go#newcode56\nsrc/cmd/vet/taglit.go:56: if typeString == \"struct\" { // typestub.go lies\nOn 2013/03/13 20:47:14, rsc wrote:\n> On 2013/03/13 20:19:05, r wrote:\n> > it's not lying, it's doing all it can. don't criticize it, fix it to say what\n> > you want (although i don't know what would be better.)\n> \n> \tif typeString == \"struct\" { // typestub.go does not give a real type string\n> \n> I was going to fix typestub.go but it doesn't have access to f and I didn't want\n> to change the interface.\n\nActually, even better, I used typeString == \"\" to mean no type string.",
			"disapproval": false,
			"date": "2013-03-13 20:47:50.093590",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7797043/diff/6002/src/cmd/vet/taglit.go\nFile src/cmd/vet/taglit.go (right):\n\nhttps://codereview.appspot.com/7797043/diff/6002/src/cmd/vet/taglit.go#newcode56\nsrc/cmd/vet/taglit.go:56: if typeString == \"\" { // could not find using type information\n\"find using\" is hard to read. rephrase.",
			"disapproval": false,
			"date": "2013-03-13 20:53:32.657520",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": " if typeString == \"\" { // isStruct doesn't know\r\n",
			"disapproval": false,
			"date": "2013-03-13 21:08:43.594260",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n",
			"disapproval": false,
			"date": "2013-03-13 21:15:11.661530",
			"approval": true
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 7797043: cmd/vet: make struct tag literal test work better with ...",
	"created": "2013-03-13 20:01:00.875920",
	"patchsets": [
		1,
		2001,
		6002,
		18001
	],
	"modified": "2013-03-13 21:37:42.413770",
	"closed": true,
	"issue": 7797043
}