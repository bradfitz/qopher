{
	"description": "exp/ssh: add Std{in,out,err}Pipe methods to Session",
	"cc": [
		"gustav.paul@gmail.com",
		"cw@f00f.org",
		"agl@golang.org",
		"rsc@golang.org",
		"n13m3y3r@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"cw@f00f.org",
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gustav.paul@gmail.com, cw@f00f.org, agl@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-29 10:52:56.231455",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"cw@f00f.org",
				"agl@golang.org",
				"rsc@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gustav.paul@gmail.com, cw@f00f.org, agl@golang.org, rsc@golang.org, n13m3y3r@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-30 21:14:10.304975",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"cw@f00f.org",
				"agl@golang.org",
				"rsc@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gustav.paul@gmail.com, cw@f00f.org, agl@golang.org, rsc@golang.org, n13m3y3r@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-01 10:23:42.548808",
			"approval": false
		},
		{
			"sender": "cw@f00f.org",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"cw@f00f.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "so far so good\n\nhttp://codereview.appspot.com/5433080/diff/2001/src/pkg/exp/ssh/session.go\nFile src/pkg/exp/ssh/session.go (right):\n\nhttp://codereview.appspot.com/5433080/diff/2001/src/pkg/exp/ssh/session.go#newcode298\nsrc/pkg/exp/ssh/session.go:298: return nil, errors.New(\"ssh: Stdin already set\")\ni'm on the fence about using errors.New here vs something that might return ssh.Err",
			"disapproval": false,
			"date": "2011-11-28 17:24:32.188443",
			"approval": false
		},
		{
			"sender": "gustav.paul@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. I look forward to using this. I've been setting session.std{out/err}\nto buffers and calling Read() on those. This is much nicer.\n\nRegards,\nGustav\n\nOn Mon, Nov 28, 2011 at 7:24 PM, <cw@f00f.org> wrote:\n\n> so far so good\n>\n>\n> http://codereview.appspot.com/**5433080/diff/2001/src/pkg/exp/**\n> ssh/session.go<http://codereview.appspot.com/5433080/diff/2001/src/pkg/exp/ssh/session.go>\n> File src/pkg/exp/ssh/session.go (right):\n>\n> http://codereview.appspot.com/**5433080/diff/2001/src/pkg/exp/**\n> ssh/session.go#newcode298<http://codereview.appspot.com/5433080/diff/2001/src/pkg/exp/ssh/session.go#newcode298>\n> src/pkg/exp/ssh/session.go:**298: return nil, errors.New(\"ssh: Stdin\n> already set\")\n> i'm on the fence about using errors.New here vs something that might\n> return ssh.Err\n>\n> http://codereview.appspot.com/**5433080/<http://codereview.appspot.com/5433080/>\n>\n",
			"disapproval": false,
			"date": "2011-11-29 06:32:02.974608",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"cw@f00f.org",
				"agl@golang.org",
				"rsc@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/11/30 20:25:52, rsc wrote:\n> This is kind of odd.  The reason we reversed the\n> API was so that the ssh session would not block:\n> it could always pull stdin and push stdout/stderr\n> as needed.  Inserting an io.Pipe here (which is\n> synchronous) restores the old API and its problems,\n> but now with an extraneous goroutine in the middle.\n\nI never intended the API reversal to fix the potential blocking issues with stdout/err. Granted, under most circumstances it's made the situation better by providing the draining goroutine for you, and making it easy to provide targets for that data that don't block. But I wouldn't claim that it's fixed the problem.\n\n> I certainly understand that the API is useful, but it\n> should bypass the goroutine instead of reversing it\n> with an io.Pipe, \n\nI agree, I think I can remove all of the Copy an Pipe conversions, but I need to do a bit more work behind the scenes. It's coming up next after this CL.\n\n> and it should be very clearly documented\n> that if you do not read from Stdout/Stderr fast enough\n> the SSH session will die.\n\nI will add a comment to the Pipe() methods to reflect that.",
			"disapproval": false,
			"date": "2011-11-30 21:07:08.346969",
			"approval": false
		},
		{
			"sender": "gustav.paul@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"cw@f00f.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/11/29 06:32:02, gpaul wrote:\n> LGTM. I look forward to using this. I've been setting session.std{out/err}\n> to buffers and calling Read() on those. This is much nicer.\n> \n> Regards,\n> Gustav\n> \n> On Mon, Nov 28, 2011 at 7:24 PM, <mailto:cw@f00f.org> wrote:\n> \n> > so far so good\n> >\n> >\n> > http://codereview.appspot.com/**5433080/diff/2001/src/pkg/exp/**\n> >\n> ssh/session.go<http://codereview.appspot.com/5433080/diff/2001/src/pkg/exp/ssh/session.go>\n> > File src/pkg/exp/ssh/session.go (right):\n> >\n> > http://codereview.appspot.com/**5433080/diff/2001/src/pkg/exp/**\n> >\n> ssh/session.go#newcode298<http://codereview.appspot.com/5433080/diff/2001/src/pkg/exp/ssh/session.go#newcode298>\n> > src/pkg/exp/ssh/session.go:**298: return nil, errors.New(\"ssh: Stdin\n> > already set\")\n> > i'm on the fence about using errors.New here vs something that might\n> > return ssh.Err\n> >\n> >\n> http://codereview.appspot.com/**5433080/%3Chttp://codereview.appspot.com/5433080/>\n> >\n\nJust noticed,\non client_auth_test.go:199\nI suggest using pw on line 156 in your CL as you do in TestClientAuthPassword",
			"disapproval": false,
			"date": "2011-11-29 06:56:47.412164",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.  Leaving for Gustavo.\n",
			"disapproval": false,
			"date": "2011-11-30 21:25:08.392494",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"cw@f00f.org",
				"agl@golang.org",
				"rsc@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gustav.paul@gmail.com, cw@f00f.org, agl@golang.org, rsc@golang.org, n13m3y3r@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-30 10:32:58.397687",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"cw@f00f.org",
				"agl@golang.org",
				"rsc@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nPlease just fix this comment and I'll submit:\n\nhttp://codereview.appspot.com/5433080/diff/7005/src/pkg/exp/ssh/session.go\nFile src/pkg/exp/ssh/session.go (right):\n\nhttp://codereview.appspot.com/5433080/diff/7005/src/pkg/exp/ssh/session.go#newcode57\nsrc/pkg/exp/ssh/session.go:57: started        bool // true once a Shell or Exec is invoked.\n// true once Start, Run, or Shell is invoked.",
			"disapproval": false,
			"date": "2011-12-01 10:21:06.631806",
			"approval": true
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"cw@f00f.org",
				"agl@golang.org",
				"rsc@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=16f9f293a550 ***\n\nexp/ssh: add Std{in,out,err}Pipe methods to Session\n\nR=gustav.paul, cw, agl, rsc, n13m3y3r\nCC=golang-dev\nhttp://codereview.appspot.com/5433080\n\nCommitter: Gustavo Niemeyer <gustavo@niemeyer.net>",
			"disapproval": false,
			"date": "2011-12-01 10:30:24.196920",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"cw@f00f.org",
				"agl@golang.org",
				"rsc@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM, with only a few minors.\n\nBtw, is Output and CombinedOutput in your upcoming plans?\n\nhttp://codereview.appspot.com/5433080/diff/7003/src/pkg/exp/ssh/session_test.go\nFile src/pkg/exp/ssh/session_test.go (right):\n\nhttp://codereview.appspot.com/5433080/diff/7003/src/pkg/exp/ssh/session_test.go#newcode31\nsrc/pkg/exp/ssh/session_test.go:31: t.Fatalf(\"Unable to accept: %v\", err)\nThis still feels bogus. It's misguiding at best. I suggest at least replacing this by Errorf + return, so it's clear that the test will _not_ stop running here.\n\nhttp://codereview.appspot.com/5433080/diff/7003/src/pkg/exp/ssh/session_test.go#newcode35\nsrc/pkg/exp/ssh/session_test.go:35: t.Fatal(\"Unable to handshake: %v\", err)\nSame.\n\nhttp://codereview.appspot.com/5433080/diff/7003/src/pkg/exp/ssh/session_test.go#newcode43\nsrc/pkg/exp/ssh/session_test.go:43: t.Fatal(err)\nSame.\n\nhttp://codereview.appspot.com/5433080/diff/7003/src/pkg/exp/ssh/session_test.go#newcode106\nsrc/pkg/exp/ssh/session_test.go:106: actual := string(stdout.String())\ns/string(s)/s/\n\nhttp://codereview.appspot.com/5433080/diff/7003/src/pkg/exp/ssh/session_test.go#newcode142\nsrc/pkg/exp/ssh/session_test.go:142: actual := string(buf.String())\ns/string(s)/s/",
			"disapproval": false,
			"date": "2011-11-30 14:18:38.225724",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"cw@f00f.org",
				"agl@golang.org",
				"rsc@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is kind of odd.  The reason we reversed the\nAPI was so that the ssh session would not block:\nit could always pull stdin and push stdout/stderr\nas needed.  Inserting an io.Pipe here (which is\nsynchronous) restores the old API and its problems,\nbut now with an extraneous goroutine in the middle.\n\nI certainly understand that the API is useful, but it\nshould bypass the goroutine instead of reversing it\nwith an io.Pipe, and it should be very clearly documented\nthat if you do not read from Stdout/Stderr fast enough\nthe SSH session will die.",
			"disapproval": false,
			"date": "2011-11-30 20:25:52.518586",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"cw@f00f.org",
				"agl@golang.org",
				"rsc@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Nice change.. we'll definitely make some good use of this in the near future.\n\nSome comments on the testing only.\n\nhttp://codereview.appspot.com/5433080/diff/8003/src/pkg/exp/ssh/session_test.go\nFile src/pkg/exp/ssh/session_test.go (right):\n\nhttp://codereview.appspot.com/5433080/diff/8003/src/pkg/exp/ssh/session_test.go#newcode31\nsrc/pkg/exp/ssh/session_test.go:31: t.Fatal(err)\nFatal doesn't do what you want here. It won't kill the test, and will instead kill its own goroutine, while the test moves on.\n\nhttp://codereview.appspot.com/5433080/diff/8003/src/pkg/exp/ssh/session_test.go#newcode37\nsrc/pkg/exp/ssh/session_test.go:37: C, err := c.Accept()\nI suggest s/c/conn/ and s/C/ch/. The single letters here aren't helping.\n\nhttp://codereview.appspot.com/5433080/diff/8003/src/pkg/exp/ssh/session_test.go#newcode42\nsrc/pkg/exp/ssh/session_test.go:42: t.Fatal(err)\nFatal won't work well here either.\n\nhttp://codereview.appspot.com/5433080/diff/8003/src/pkg/exp/ssh/session_test.go#newcode67\nsrc/pkg/exp/ssh/session_test.go:67: ch.serverConn.writePacket(marshal(msgChannelRequest, msg))\nInteresting.. separate CL, but we need a way to do this without going out of the public API.\n\nhttp://codereview.appspot.com/5433080/diff/8003/src/pkg/exp/ssh/session_test.go#newcode73\nsrc/pkg/exp/ssh/session_test.go:73: defer l.Close()\nThese defers should be after the respective value creation. At the end of the function is too late to defer.\n\nhttp://codereview.appspot.com/5433080/diff/8003/src/pkg/exp/ssh/session_test.go#newcode106\nsrc/pkg/exp/ssh/session_test.go:106: actual := string(stdout.Bytes())\nstdout.String()\n\nhttp://codereview.appspot.com/5433080/diff/8003/src/pkg/exp/ssh/session_test.go#newcode120\nsrc/pkg/exp/ssh/session_test.go:120: stdout, err := session.StdoutPipe()\nWould be nice to have testing for the other pipe functions too.\n\nhttp://codereview.appspot.com/5433080/diff/8003/src/pkg/exp/ssh/session_test.go#newcode131\nsrc/pkg/exp/ssh/session_test.go:131: t.Fatalf(\"Copy of stdout failed: %v\", err)\nFatalf here will cause the goroutine to exit, and the channel send below will never be done. The actual test goroutine will block forever without a note.\n\nhttp://codereview.appspot.com/5433080/diff/8003/src/pkg/exp/ssh/session_test.go#newcode139\nsrc/pkg/exp/ssh/session_test.go:139: actual := string(buf.Bytes())\nbuf.String()",
			"disapproval": false,
			"date": "2011-11-29 12:13:01.329146",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"cw@f00f.org",
				"agl@golang.org",
				"rsc@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for your comments Gustavo. I will continue to flesh out the Std...Pipe tests. I think in that respect I have overstepped what can be done reusing the ServerShell code.\n\nhttp://codereview.appspot.com/5433080/diff/8003/src/pkg/exp/ssh/session_test.go\nFile src/pkg/exp/ssh/session_test.go (right):\n\nhttp://codereview.appspot.com/5433080/diff/8003/src/pkg/exp/ssh/session_test.go#newcode31\nsrc/pkg/exp/ssh/session_test.go:31: t.Fatal(err)\nRight, that is good to know. Thanks.\n\nWhile it doesn't do what I wanted, I think it's still good enough as the client will fail to complete properly.\n\nOn 2011/11/29 12:13:01, niemeyer wrote:\n> Fatal doesn't do what you want here. It won't kill the test, and will instead\n> kill its own goroutine, while the test moves on.\n\nhttp://codereview.appspot.com/5433080/diff/8003/src/pkg/exp/ssh/session_test.go#newcode37\nsrc/pkg/exp/ssh/session_test.go:37: C, err := c.Accept()\nOn 2011/11/29 12:13:01, niemeyer wrote:\n> I suggest s/c/conn/ and s/C/ch/. The single letters here aren't helping.\n\nDone.\n\nhttp://codereview.appspot.com/5433080/diff/8003/src/pkg/exp/ssh/session_test.go#newcode42\nsrc/pkg/exp/ssh/session_test.go:42: t.Fatal(err)\nOn 2011/11/29 12:13:01, niemeyer wrote:\n> Fatal won't work well here either.\n\nDone.\n\nhttp://codereview.appspot.com/5433080/diff/8003/src/pkg/exp/ssh/session_test.go#newcode67\nsrc/pkg/exp/ssh/session_test.go:67: ch.serverConn.writePacket(marshal(msgChannelRequest, msg))\nYeah, it's bit messy. TODO added\n\nOn 2011/11/29 12:13:01, niemeyer wrote:\n> Interesting.. separate CL, but we need a way to do this without going out of the\n> public API.\n\nhttp://codereview.appspot.com/5433080/diff/8003/src/pkg/exp/ssh/session_test.go#newcode73\nsrc/pkg/exp/ssh/session_test.go:73: defer l.Close()\nOn 2011/11/29 12:13:01, niemeyer wrote:\n> These defers should be after the respective value creation. At the end of the\n> function is too late to defer.\n\nDone.\n\nhttp://codereview.appspot.com/5433080/diff/8003/src/pkg/exp/ssh/session_test.go#newcode106\nsrc/pkg/exp/ssh/session_test.go:106: actual := string(stdout.Bytes())\nOn 2011/11/29 12:13:01, niemeyer wrote:\n> stdout.String()\n\nDone.\n\nhttp://codereview.appspot.com/5433080/diff/8003/src/pkg/exp/ssh/session_test.go#newcode120\nsrc/pkg/exp/ssh/session_test.go:120: stdout, err := session.StdoutPipe()\nPTAL.\n\nOn 2011/11/29 12:13:01, niemeyer wrote:\n> Would be nice to have testing for the other pipe functions too.\n\nhttp://codereview.appspot.com/5433080/diff/8003/src/pkg/exp/ssh/session_test.go#newcode131\nsrc/pkg/exp/ssh/session_test.go:131: t.Fatalf(\"Copy of stdout failed: %v\", err)\nI've changed it to Errorf, the done will fire and the buffer will not match the expected text.\n\nOn 2011/11/29 12:13:01, niemeyer wrote:\n> Fatalf here will cause the goroutine to exit, and the channel send below will\n> never be done. The actual test goroutine will block forever without a note.\n\nhttp://codereview.appspot.com/5433080/diff/8003/src/pkg/exp/ssh/session_test.go#newcode139\nsrc/pkg/exp/ssh/session_test.go:139: actual := string(buf.Bytes())\nOn 2011/11/29 12:13:01, niemeyer wrote:\n> buf.String()\n\nDone.",
			"disapproval": false,
			"date": "2011-11-30 10:34:32.112534",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"cw@f00f.org",
				"agl@golang.org",
				"rsc@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for your comments Gustavo. I hadn't intended to add Output and CombinedOutput, but it should be pretty straight forward to add them if you were feeling like it. Otherwise I'll put it on my TODO list.\n\nhttp://codereview.appspot.com/5433080/diff/7003/src/pkg/exp/ssh/session_test.go\nFile src/pkg/exp/ssh/session_test.go (right):\n\nhttp://codereview.appspot.com/5433080/diff/7003/src/pkg/exp/ssh/session_test.go#newcode31\nsrc/pkg/exp/ssh/session_test.go:31: t.Fatalf(\"Unable to accept: %v\", err)\nOn 2011/11/30 14:18:38, niemeyer wrote:\n> This still feels bogus. It's misguiding at best. I suggest at least replacing\n> this by Errorf + return, so it's clear that the test will _not_ stop running\n> here.\n\nDone.\n\nhttp://codereview.appspot.com/5433080/diff/7003/src/pkg/exp/ssh/session_test.go#newcode35\nsrc/pkg/exp/ssh/session_test.go:35: t.Fatal(\"Unable to handshake: %v\", err)\nOn 2011/11/30 14:18:38, niemeyer wrote:\n> Same.\n\nDone.\n\nhttp://codereview.appspot.com/5433080/diff/7003/src/pkg/exp/ssh/session_test.go#newcode43\nsrc/pkg/exp/ssh/session_test.go:43: t.Fatal(err)\nOn 2011/11/30 14:18:38, niemeyer wrote:\n> Same.\n\nDone.\n\nhttp://codereview.appspot.com/5433080/diff/7003/src/pkg/exp/ssh/session_test.go#newcode106\nsrc/pkg/exp/ssh/session_test.go:106: actual := string(stdout.String())\nDoh. Done\n\nOn 2011/11/30 14:18:38, niemeyer wrote:\n> s/string(s)/s/\n\nhttp://codereview.appspot.com/5433080/diff/7003/src/pkg/exp/ssh/session_test.go#newcode142\nsrc/pkg/exp/ssh/session_test.go:142: actual := string(buf.String())\nOn 2011/11/30 14:18:38, niemeyer wrote:\n> s/string(s)/s/\n\nDone.",
			"disapproval": false,
			"date": "2011-11-30 20:52:03.167759",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 5433080: exp/ssh: add Std{in,out,err}Pipe methods to Session",
	"created": "2011-11-28 04:19:22.192751",
	"patchsets": [
		1,
		2001,
		7001,
		5002,
		8003,
		11004,
		7003,
		7005,
		1008
	],
	"modified": "2011-12-01 10:36:30.567756",
	"closed": true,
	"issue": 5433080
}