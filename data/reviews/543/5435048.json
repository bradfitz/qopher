{
	"description": "runtime: faster defers\nAdd per-M cache of spare Defer objects.\nbenchmark             old ns/op    new ns/op    delta\nBenchmarkDefer              173           90  -47.86%\nBenchmarkDefer-2            183           90  -50.77%\nBenchmarkNoDefer              4            4   +0.20%\nBenchmarkNoDefer-2            4            4   +0.20%",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"mpimenov@google.com",
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/11/22 12:04:04, mpimenov wrote:\n> http://codereview.appspot.com/5435048/diff/6001/src/pkg/runtime/defer_test.go\n> File src/pkg/runtime/defer_test.go (right):\n> \n> http://codereview.appspot.com/5435048/diff/6001/src/pkg/runtime/defer_test.go#newcode1\n> src/pkg/runtime/defer_test.go:1: // Copyright 201 The Go Authors. All rights\n> reserved.\n> s/201/2011\n\nDone",
			"disapproval": false,
			"date": "2011-11-22 13:38:57.997999",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"mpimenov@google.com",
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, mpimenov@google.com, lvd@google.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-22 13:38:37.664302",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"mpimenov@google.com",
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/11/22 12:54:46, lvd wrote:\n> can't we just allocate them on the stack (as long as they're not made in a\n> loop)? esc.c can be made to figure this out.\n\nI think we can. However note that with the change defer call still costs about 80ns, and I think allocation/deallocation takes no more than 10ns or so now. Even if stack allocation will reduce it to 0ns,  defer call will still take 70ns. We better optimize that other parts (70ns). In either case, my change will be useful for defers in loops (and potentially in other tricky cases)... and in the end it is ready for submit now for everybody's benefit :)",
			"disapproval": false,
			"date": "2011-11-22 13:46:43.127150",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-22 11:30:09.031692",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Nov 22, 2011 at 07:54, Luuk van Dijk <lvd@google.com> wrote:\n> can't we just allocate them on the stack (as long as they're not made in a\n> loop)? esc.c can be made to figure this out.\n\ni'd rather do the parallel stack.  it is more general,\nsimpler, and not more expensive.\n",
			"disapproval": false,
			"date": "2011-11-22 13:23:11.645859",
			"approval": false
		},
		{
			"sender": "mpimenov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"mpimenov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5435048/diff/6001/src/pkg/runtime/defer_test.go\nFile src/pkg/runtime/defer_test.go (right):\n\nhttp://codereview.appspot.com/5435048/diff/6001/src/pkg/runtime/defer_test.go#newcode1\nsrc/pkg/runtime/defer_test.go:1: // Copyright 201 The Go Authors. All rights reserved.\ns/201/2011",
			"disapproval": false,
			"date": "2011-11-22 12:04:04.012549",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "can't we just allocate them on the stack (as long as they're not made in a\nloop)? esc.c can be made to figure this out.\n\nOn Tue, Nov 22, 2011 at 12:30, <dvyukov@google.com> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> runtime: faster defers\n> Add per-M cache of spare Defer objects.\n> benchmark      old, ns/op   new, ns/op\n> BenchmarkDefer        179           91   -49%\n> Still far behind BenchmarkNoDefer (explicitly calls deferred function)\n> which is 10 ns/op.\n>\n> Please review this at http://codereview.appspot.com/**5435048/<http://codereview.appspot.com/5435048/>\n>\n> Affected files:\n>  A src/pkg/runtime/defer_test.go\n>  M src/pkg/runtime/proc.c\n>  M src/pkg/runtime/runtime.h\n>\n>\n> Index: src/pkg/runtime/defer_test.go\n> ==============================**==============================**=======\n> new file mode 100644\n> --- /dev/null\n> +++ b/src/pkg/runtime/defer_test.**go\n> @@ -0,0 +1,57 @@\n> +// Copyright 201 The Go Authors. All rights reserved.\n> +// Use of this source code is governed by a BSD-style\n> +// license that can be found in the LICENSE file.\n> +\n> +package runtime_test\n> +\n> +import (\n> +       \"testing\"\n> +)\n> +\n> +type mutex struct {\n> +       state int\n> +}\n> +\n> +func (m *mutex) lock() {\n> +       m.state++\n> +}\n> +\n> +func (m *mutex) unlock() {\n> +       m.state--\n> +}\n> +\n> +func doDefer(m *mutex) {\n> +       m.lock()\n> +       defer m.unlock()\n> +       if m.state == 0 {\n> +               panic(\"mutex state == 0\")\n> +       }\n> +}\n> +\n> +func BenchmarkDefer(b *testing.B) {\n> +       var m mutex\n> +       for i := 0; i < b.N; i++ {\n> +               doDefer(&m)\n> +       }\n> +       if m.state != 0 {\n> +               panic(\"mutex state != 0\")\n> +       }\n> +}\n> +\n> +func doNoDefer(m *mutex) {\n> +       m.lock()\n> +       if m.state == 0 {\n> +               panic(\"mutex state == 0\")\n> +       }\n> +       m.unlock()\n> +}\n> +\n> +func BenchmarkNoDefer(b *testing.B) {\n> +       var m mutex\n> +       for i := 0; i < b.N; i++ {\n> +               doNoDefer(&m)\n> +       }\n> +       if m.state != 0 {\n> +               panic(\"mutex state != 0\")\n> +       }\n> +}\n> Index: src/pkg/runtime/proc.c\n> ==============================**==============================**=======\n> --- a/src/pkg/runtime/proc.c\n> +++ b/src/pkg/runtime/proc.c\n> @@ -1239,6 +1239,17 @@\n>  //printf(\" goid=%d\\n\", newg->goid);\n>  }\n>\n> +static void\n> +freedefer(Defer *d)\n> +{\n> +       if(d->nofree)\n> +               {} // stack allocated\n> +       else if(d->siz <= sizeof(d->args) && m->ndefer <\n> nelem(m->defercache))\n> +               m->defercache[m->ndefer++] = d;\n> +       else\n> +               runtime\u00b7free(d);\n> +}\n> +\n>  // Create a new deferred function fn with siz bytes of arguments.\n>  // The compiler turns a defer statement into a call to this.\n>  // Cannot split the stack because it assumes that the arguments\n> @@ -1251,7 +1262,10 @@\n>  {\n>        Defer *d;\n>\n> -       d = runtime\u00b7malloc(sizeof(*d) + siz - sizeof(d->args));\n> +       if(siz <= sizeof(d->args) && m->ndefer > 0)\n> +               d = m->defercache[--m->ndefer];\n> +       else\n> +               d = runtime\u00b7malloc(sizeof(*d) + (siz <= sizeof(d->args) ?\n> 0 : siz - sizeof(d->args)));\n>        d->fn = fn;\n>        d->siz = siz;\n>        d->pc = runtime\u00b7getcallerpc(&siz);\n> @@ -1299,8 +1313,7 @@\n>        runtime\u00b7memmove(argp, d->args, d->siz);\n>        g->defer = d->link;\n>        fn = d->fn;\n> -       if(!d->nofree)\n> -               runtime\u00b7free(d);\n> +       freedefer(d);\n>        runtime\u00b7jmpdefer(fn, argp);\n>  }\n>\n> @@ -1313,8 +1326,7 @@\n>        while((d = g->defer) != nil) {\n>                g->defer = d->link;\n>                reflect\u00b7call(d->fn, d->args, d->siz);\n> -               if(!d->nofree)\n> -                       runtime\u00b7free(d);\n> +               freedefer(d);\n>        }\n>  }\n>\n> @@ -1396,8 +1408,7 @@\n>                        runtime\u00b7mcall(recovery);\n>                        runtime\u00b7throw(\"recovery failed\"); // mcall should\n> not return\n>                }\n> -               if(!d->nofree)\n> -                       runtime\u00b7free(d);\n> +               freedefer(d);\n>        }\n>\n>        // ran out of deferred calls - old-school panic now\n> @@ -1435,8 +1446,7 @@\n>        else\n>                gp->sched.sp = (byte*)d->argp - 2*sizeof(uintptr);\n>        gp->sched.pc = d->pc;\n> -       if(!d->nofree)\n> -               runtime\u00b7free(d);\n> +       freedefer(d);\n>        runtime\u00b7gogo(&gp->sched, 1);\n>  }\n>\n> Index: src/pkg/runtime/runtime.h\n> ==============================**==============================**=======\n> --- a/src/pkg/runtime/runtime.h\n> +++ b/src/pkg/runtime/runtime.h\n> @@ -241,6 +241,8 @@\n>        uintptr waitsema;       // semaphore for parking on locks\n>        uint32  waitsemacount;\n>        uint32  waitsemalock;\n> +       Defer*  defercache[64];\n> +       int32   ndefer;\n>\n>  #ifdef __WINDOWS__\n>        void*   thread;         // thread handle\n> @@ -393,7 +395,7 @@\n>        byte*   pc;\n>        byte*   fn;\n>        Defer*  link;\n> -       byte    args[8];        // padded to actual size\n> +       byte    args[32];       // padded to actual size\n>  };\n>\n>  /*\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-11-22 12:54:46.882552",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Apr 23, 2012 at 04:51,  <dvyukov@google.com> wrote:\n> Is anybody working on control flow analysis or parallel stacks? Don't we\n> want to land this CL now?\n\nI would prefer not to submit this CL.\nI haven't actually looked at it, but I am concerned that\nadding this code will remove the motivation to fix this\nusing a true defer stack, which is an even better solution.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-04-23 15:30:29.408060",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"mpimenov@google.com",
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi,\n\nIs anybody working on control flow analysis or parallel stacks? Don't we want to land this CL now?\nJIC, I've update it and re-benchmarked on tip.",
			"disapproval": false,
			"date": "2012-04-23 08:51:51.502082",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2012-06-03 04:55:30.449147",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=close",
			"disapproval": false,
			"date": "2013-07-20 07:17:43.270170",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2013-07-20 21:28:33.234870",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 5435048: runtime: faster defers",
	"created": "2011-11-22 10:36:07.807650",
	"patchsets": [
		1,
		2001,
		4001,
		1007,
		4005,
		6001,
		6004,
		7001
	],
	"modified": "2013-07-20 21:28:33.820370",
	"closed": false,
	"issue": 5435048
}