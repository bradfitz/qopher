{
	"description": "syscall: replace Perl with AWK in mksyscall\n\nI very carefully made sure the formatting\nwas retained so the only changes to the z*\nfiles are in the headers.\n\nI also added a bunch of comments.\n\nTested against:\n        9 awk,\n        gawk,\n        mawk,\n        and the one, true awk.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"lucio.dere@gmail.com",
		"rsc@golang.org",
		"iant@google.com"
	],
	"messages": [
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"lucio.dere@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello lucio.dere@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2011-11-23 06:25:01.162637",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Lucio De Re <lucio.dere@gmail.com> once said:\n> Does join() with a negative count ever occur in the awk script?  At a\n> glance it does not seem to keep the promise of returning the\n> concatenation of all input fields, but rather returns an empty string.\n\nThat's what I get for writing code that\nisn't used but may be \"in the future\".\n\nI've removed the negative case.\n\nThanks,\n  Anthony\n",
			"disapproval": false,
			"date": "2011-11-23 12:24:39.294299",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Does join() with a negative count ever occur in the awk script?  At a\nglance it does not seem to keep the promise of returning the\nconcatenation of all input fields, but rather returns an empty string.\n\nI may be missing something, of course.\n\nLucio.\n\nOn 11/23/11, ality@pbrane.org <ality@pbrane.org> wrote:\n> Reviewers: lucio,\n>\n> Message:\n> Hello lucio.dere@gmail.com (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://code.google.com/p/go/\n>\n>\n> Description:\n> syscall: replace Perl with AWK in mksyscall\n>\n> I very carefully made sure the formatting\n> was retained so the only changes to the z*\n> files are in the headers.\n>\n> I also added a bunch of comments.\n>\n> Tested against:\n>          9 awk,\n>          gawk,\n>          mawk,\n>          and the one, true awk.\n>\n> Please review this at http://codereview.appspot.com/5430052/\n>\n> Affected files:\n>    M src/pkg/syscall/mkall.sh\n>    R src/pkg/syscall/mksyscall.pl\n>    A src/pkg/syscall/mksyscall.sh\n>    M src/pkg/syscall/syscall.go\n>    M src/pkg/syscall/zsyscall_darwin_386.go\n>    M src/pkg/syscall/zsyscall_darwin_amd64.go\n>    M src/pkg/syscall/zsyscall_freebsd_386.go\n>    M src/pkg/syscall/zsyscall_freebsd_amd64.go\n>    M src/pkg/syscall/zsyscall_linux_386.go\n>    M src/pkg/syscall/zsyscall_linux_amd64.go\n>    M src/pkg/syscall/zsyscall_linux_arm.go\n>    M src/pkg/syscall/zsyscall_openbsd_386.go\n>    M src/pkg/syscall/zsyscall_openbsd_amd64.go\n>    M src/pkg/syscall/zsyscall_plan9_386.go\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-11-23 11:33:30.492922",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"lucio.dere@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello lucio.dere@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-23 14:15:34.458188",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Also, please discuss these kinds of\nthings before sending out code.  It can\nsave time on both sides.  See\nhttp://golang.org/doc/contribute.html#Design\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-23 14:32:45.199307",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "lucio.dere@gmail.com once said:\n> Why do you assign the tail to s in extract():97,98, then assign s to\n> a[1] and not assign the tail directly to a[1]?  It's not serious, but it\n> does suggest that you may have had something else in mind at the time.\n\nFixed.\n\n> Line 111 makes the construct \", \" mandatory, I would be more\n> conservative.\n\nThat was a typo.  Fixed.\n\n> Line 117 is similarly restrictive and the parentheses (()) are in my\n> opinion redundant.\n\nIndeed.  Fixed.\n\n> 282-293: the first two conditionals exhaust the \"name == err\"\n> possibilities and suggest a different statement structure.\n\nI tried to keep the structure of the original Perl\ncode here.  This part is a little complex so I'd\nrather leave it alone.\n\n> I'm not sure you wanted such a picky review, I apologise for that and\n> for not looking at everything in that awk script with the same critical\n> eye, I'm not a keen user of awk.\n\nPicky is good for me. :-)\n\n> In passing, you promised to publish the Plan 9 yacc changes, where can I\n> find them, please?\n\nhttp://codereview.appspot.com/5415048/\n\nThanks for the review,\n  Anthony\n",
			"disapproval": false,
			"date": "2011-11-23 14:15:57.413455",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"lucio.dere@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello lucio.dere@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-23 12:23:13.988871",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"ality@pbrane.org",
				"lucio.dere@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/11/23 12:24:39, ality wrote:\n> \n> I've removed the negative case.\n> \nWhy do you assign the tail to s in extract():97,98, then assign s to a[1] and not assign the tail directly to a[1]?  It's not serious, but it does suggest that you may have had something else in mind at the time.\n\nLine 111 makes the construct \", \" mandatory, I would be more conservative.\n\nLine 117 is similarly restrictive and the parentheses (()) are in my opinion redundant.\n\n282-293: the first two conditionals exhaust the \"name == err\" possibilities and suggest a different statement structure.\n\nI'm not sure you wanted such a picky review, I apologise for that and for not looking at everything in that awk script with the same critical eye, I'm not a keen user of awk.\n\nAll changes to other modules seemed perfectly fine to me.\n\nIn passing, you promised to publish the Plan 9 yacc changes, where can I find them, please?\n\nLucio.",
			"disapproval": false,
			"date": "2011-11-23 13:46:40.849463",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Great idea, thanks.  I'll check just now.\n\nLucio.\n\nOn 11/23/11, ality@pbrane.org <ality@pbrane.org> wrote:\n> Reviewers: lucio,\n>\n> Message:\n> Hello lucio.dere@gmail.com (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://code.google.com/p/go/\n>\n>\n> Description:\n> syscall: replace Perl with AWK in mksyscall\n>\n> I very carefully made sure the formatting\n> was retained so the only changes to the z*\n> files are in the headers.\n>\n> I also added a bunch of comments.\n>\n> Tested against:\n>          9 awk,\n>          gawk,\n>          mawk,\n>          and the one, true awk.\n>\n> Please review this at http://codereview.appspot.com/5430052/\n>\n> Affected files:\n>    M src/pkg/syscall/mkall.sh\n>    R src/pkg/syscall/mksyscall.pl\n>    A src/pkg/syscall/mksyscall.sh\n>    M src/pkg/syscall/syscall.go\n>    M src/pkg/syscall/zsyscall_darwin_386.go\n>    M src/pkg/syscall/zsyscall_darwin_amd64.go\n>    M src/pkg/syscall/zsyscall_freebsd_386.go\n>    M src/pkg/syscall/zsyscall_freebsd_amd64.go\n>    M src/pkg/syscall/zsyscall_linux_386.go\n>    M src/pkg/syscall/zsyscall_linux_amd64.go\n>    M src/pkg/syscall/zsyscall_linux_arm.go\n>    M src/pkg/syscall/zsyscall_openbsd_386.go\n>    M src/pkg/syscall/zsyscall_openbsd_amd64.go\n>    M src/pkg/syscall/zsyscall_plan9_386.go\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-11-23 10:55:00.768075",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'd prefer not to do this.\n\nThis is an unnecessary change.  Ordinary Plan 9 users\ndo not have to run this script.  Only people adding new\nsystem calls do, and they can find a way to run Perl.\n(I know there's a port for Plan 9, because I did it.)\n\nFor things that have to run during ordinary builds, we\nhave no choice but to use least common denominators\nlike this, but for things that are only run by developers\nchanging the system, it's okay to depend on things like\nPerl.  The sad fact is that as clumsy a programming\nlanguage as Perl is, Awk is a clumsier one.  Writing\nportable Awk is far harder than writing portable Perl.\nAnd the Perl script already exists and works.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-23 14:31:43.503355",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Russ Cox <rsc@golang.org> writes:\n\n> I'd prefer not to do this.\n>\n> This is an unnecessary change.  Ordinary Plan 9 users\n> do not have to run this script.  Only people adding new\n> system calls do, and they can find a way to run Perl.\n> (I know there's a port for Plan 9, because I did it.)\n>\n> For things that have to run during ordinary builds, we\n> have no choice but to use least common denominators\n> like this, but for things that are only run by developers\n> changing the system, it's okay to depend on things like\n> Perl.  The sad fact is that as clumsy a programming\n> language as Perl is, Awk is a clumsier one.  Writing\n> portable Awk is far harder than writing portable Perl.\n> And the Perl script already exists and works.\n\nI agree.  I just want to mention that for gccgo I run the similar script\nat build time, so I did use awk.  The script is here:\n\nhttp://code.google.com/p/gofrontend/source/browse/libgo/go/syscall/mksyscall.awk\n\nIt's not the same as the gc script, but it's conceptually similar.\n\nIan\n",
			"disapproval": false,
			"date": "2011-11-23 19:14:00.219644",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"lucio.dere@gmail.com",
				"rsc@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2011-12-01 00:38:16.657722",
			"approval": false
		}
	],
	"owner_email": "ality@pbrane.org",
	"private": false,
	"base_url": "",
	"owner": "ality",
	"subject": "code review 5430052: syscall: replace Perl with AWK in mksyscall",
	"created": "2011-11-23 06:24:29.812359",
	"patchsets": [
		1,
		2001,
		2002,
		1017,
		6018
	],
	"modified": "2011-12-01 00:38:17.768641",
	"closed": true,
	"issue": 5430052
}