{
	"description": "exp/ssh: allow for msgUserAuthBanner during authentication\n\nThe SSH spec allows for the server to send a banner message to the client at any point during the authentication process. Currently the ssh client auth types all assume that the first response from the server after issuing a userAuthRequestMsg will be one of a couple of possible authentication success/failure messages. This means that client authentication breaks if the ssh server being connected to has a banner message configured.\n\nThis changeset refactors the noneAuth, passwordAuth and publickeyAuth types' auth() function and allows for msgUserAuthBanner during authentication.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org",
		"dave@cheney.net",
		"agl@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gustav.paul@gmail.com",
			"recipients": [
				"gustav.paul@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, dave@cheney.net, agl@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-24 08:34:37.337604",
			"approval": false
		},
		{
			"sender": "gustav.paul@gmail.com",
			"recipients": [
				"gustav.paul@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, dave@cheney.net, agl@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-30 08:43:17.312940",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"gustav.paul@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5447049 cleans up the client auth tests a bit and adds a test for key negotiation (validateKey) failure. \n\nWith the current logic in this CL the test loops, skipping over invalid keys should restore the test to working order.",
			"disapproval": false,
			"date": "2011-11-30 11:31:30.793830",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"gustav.paul@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi Gustav,\n\nThank you for this patch. As mentioned in the comments, the changes to the logic in the publickey method are a bit confusing (that method was already too large to start with) so consider being more aggressive with the refactoring.\n\nhttp://codereview.appspot.com/5432065/diff/4/src/pkg/exp/ssh/client_auth.go\nFile src/pkg/exp/ssh/client_auth.go (right):\n\nhttp://codereview.appspot.com/5432065/diff/4/src/pkg/exp/ssh/client_auth.go#newcode82\nsrc/pkg/exp/ssh/client_auth.go:82: // Loop past packets that are legal but don't form part of the authentication flow\nnit: possibly move the comment to the msgUserAuthBanner case\n\nhttp://codereview.appspot.com/5432065/diff/4/src/pkg/exp/ssh/client_auth.go#newcode137\nsrc/pkg/exp/ssh/client_auth.go:137: // Loop past packets that are legal but don't form part of the authentication flow\nditto.\n\nhttp://codereview.appspot.com/5432065/diff/4/src/pkg/exp/ssh/client_auth.go#newcode153\nsrc/pkg/exp/ssh/client_auth.go:153: return false, nil, UnexpectedMessageError{msgUserAuthSuccess, packet[0]}\nnit: can this logic be reused ? none and password are pretty straight forward, but publickey is a monster\n\nhttp://codereview.appspot.com/5432065/diff/4/src/pkg/exp/ssh/client_auth.go#newcode235\nsrc/pkg/exp/ssh/client_auth.go:235: // Loop past packets that are legal but don't form part of the authentication flow\nditto\n\nhttp://codereview.appspot.com/5432065/diff/4/src/pkg/exp/ssh/client_auth.go#newcode252\nsrc/pkg/exp/ssh/client_auth.go:252: gotPacket = true\ni'm not sure about this change in the logic. why not just break at this point, rather than setting a 'break' flag, then falling through to it?\n\nhttp://codereview.appspot.com/5432065/diff/4/src/pkg/exp/ssh/client_auth.go#newcode296\nsrc/pkg/exp/ssh/client_auth.go:296: for {\nditto",
			"disapproval": false,
			"date": "2011-11-24 14:53:45.306145",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"gustav.paul@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. Thanks for cleaning up the public key methods.",
			"disapproval": false,
			"date": "2011-12-01 22:09:46.325251",
			"approval": true
		},
		{
			"sender": "gustav.paul@gmail.com",
			"recipients": [
				"gustav.paul@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/11/30 08:44:40, gpaul wrote:\n> Hello mailto:golang-dev@googlegroups.com, mailto:rsc@golang.org, mailto:dave@cheney.net,\n> mailto:agl@golang.org (cc: mailto:golang-dev@googlegroups.com),\n> \n> Please take another look.\n\nSee patch set 3. Patch set 4 is just a formatting update.",
			"disapproval": false,
			"date": "2011-11-30 08:49:24.354886",
			"approval": false
		},
		{
			"sender": "gustav.paul@gmail.com",
			"recipients": [
				"gustav.paul@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, dave@cheney.net, agl@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-01 13:45:46.732849",
			"approval": false
		},
		{
			"sender": "gustav.paul@gmail.com",
			"recipients": [
				"gustav.paul@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/12/01 13:45:46, gpaul wrote:\n> Hello mailto:golang-dev@googlegroups.com, mailto:rsc@golang.org, mailto:dave@cheney.net,\n> mailto:agl@golang.org (cc: mailto:golang-dev@googlegroups.com),\n> \n> Please take another look.\n\nYikes. Please ignore this patch set. Noticed too late that tests aren't passing.",
			"disapproval": false,
			"date": "2011-12-01 13:47:52.570067",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"gustav.paul@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"agl@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=7551fda5eeef ***\n\nexp/ssh: allow for msgUserAuthBanner during authentication\n\nThe SSH spec allows for the server to send a banner message to the client at any point during the authentication process. Currently the ssh client auth types all assume that the first response from the server after issuing a userAuthRequestMsg will be one of a couple of possible authentication success/failure messages. This means that client authentication breaks if the ssh server being connected to has a banner message configured.\n\nThis changeset refactors the noneAuth, passwordAuth and publickeyAuth types' auth() function and allows for msgUserAuthBanner during authentication.\n\nR=golang-dev, rsc, dave, agl\nCC=golang-dev\nhttp://codereview.appspot.com/5432065\n\nCommitter: Adam Langley <agl@golang.org>\n\nhttp://codereview.appspot.com/5432065/diff/1004/src/pkg/exp/ssh/client_auth.go\nFile src/pkg/exp/ssh/client_auth.go (right):\n\nhttp://codereview.appspot.com/5432065/diff/1004/src/pkg/exp/ssh/client_auth.go#newcode82\nsrc/pkg/exp/ssh/client_auth.go:82: return handleResponse(t)\nhandleResponse is a rather generic name. I've renamed it handleAuthResponse.",
			"disapproval": false,
			"date": "2011-12-02 15:34:52.811414",
			"approval": false
		},
		{
			"sender": "gustav.paul@gmail.com",
			"recipients": [
				"gustav.paul@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, dave@cheney.net, agl@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-30 08:44:40.600765",
			"approval": false
		},
		{
			"sender": "gustav.paul@gmail.com",
			"recipients": [
				"gustav.paul@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/11/30 08:49:24, gpaul wrote:\n> On 2011/11/30 08:44:40, gpaul wrote:\n> > Hello mailto:golang-dev@googlegroups.com, mailto:rsc@golang.org,\n> mailto:dave@cheney.net,\n> > mailto:agl@golang.org (cc: mailto:golang-dev@googlegroups.com),\n> > \n> > Please take another look.\n> \n> See patch set 3. Patch set 4 is just a formatting update.\n\nMy mistake - see patch set 4, 5 is just a formatting update.",
			"disapproval": false,
			"date": "2011-11-30 08:51:46.115086",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"gustav.paul@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for taking another pass at the massive publickeyAuth method, much cleaner. \n\nPlease check the logic validateKey and friends. This is my fault for not providing a unit test for an invalid key.\n\nhttp://codereview.appspot.com/5432065/diff/8001/src/pkg/exp/ssh/client_auth.go\nFile src/pkg/exp/ssh/client_auth.go (right):\n\nhttp://codereview.appspot.com/5432065/diff/8001/src/pkg/exp/ssh/client_auth.go#newcode161\nsrc/pkg/exp/ssh/client_auth.go:161: // Sig is defined as []byte so marshal will exclude it during the query phase\n... during validateKey.\n\nhttp://codereview.appspot.com/5432065/diff/8001/src/pkg/exp/ssh/client_auth.go#newcode185\nsrc/pkg/exp/ssh/client_auth.go:185: if err := p.validateKey(key, user, t); err != nil {\nYou've changed the logic here. validateKey should return a bool and an error. validKeys[index] = key should only be hit if validateKey returns true.\n\nhttp://codereview.appspot.com/5432065/diff/8001/src/pkg/exp/ssh/client_auth.go#newcode226\nsrc/pkg/exp/ssh/client_auth.go:226: if success == true {\nif success {\n\nhttp://codereview.appspot.com/5432065/diff/8001/src/pkg/exp/ssh/client_auth.go#newcode233\nsrc/pkg/exp/ssh/client_auth.go:233: func (p *publickeyAuth) validateKey(key interface{}, user string, t *transport) error {\n// validateKey validates the key provided is acceptable to the server.\n\nhttp://codereview.appspot.com/5432065/diff/8001/src/pkg/exp/ssh/client_auth.go#newcode248\nsrc/pkg/exp/ssh/client_auth.go:248: err := p.confirmKeyAck(key, t)\nreturn p.confirmKey(key, t), see below\n\nhttp://codereview.appspot.com/5432065/diff/8001/src/pkg/exp/ssh/client_auth.go#newcode266\nsrc/pkg/exp/ssh/client_auth.go:266: // TODO: add callback to present the banner to the user\n// TODO(gpaul): ...\n\nStake your claim :)\n\nhttp://codereview.appspot.com/5432065/diff/8001/src/pkg/exp/ssh/client_auth.go#newcode270\nsrc/pkg/exp/ssh/client_auth.go:270: continue\nreturn false, nil\n\nhttp://codereview.appspot.com/5432065/diff/8001/src/pkg/exp/ssh/client_auth.go#newcode272\nsrc/pkg/exp/ssh/client_auth.go:272: return nil\nreturn true, nil\n\nhttp://codereview.appspot.com/5432065/diff/8001/src/pkg/exp/ssh/client_auth.go#newcode275\nsrc/pkg/exp/ssh/client_auth.go:275: return UnexpectedMessageError{msgUserAuthSuccess, packet[0]}\nreturn false, ...\n\nhttp://codereview.appspot.com/5432065/diff/8001/src/pkg/exp/ssh/client_auth.go#newcode290\nsrc/pkg/exp/ssh/client_auth.go:290: // Read the next standard authentication packet\nI think either the comment should change, or this method should be called readResponse{Packet}.\n\nhttp://codereview.appspot.com/5432065/diff/8001/src/pkg/exp/ssh/client_auth.go#newcode300\nsrc/pkg/exp/ssh/client_auth.go:300: // TODO: add callback to present the banner to the user\nditto",
			"disapproval": false,
			"date": "2011-11-30 10:01:11.438888",
			"approval": false
		},
		{
			"sender": "gustav.paul@gmail.com",
			"recipients": [
				"gustav.paul@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, dave@cheney.net, agl@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-01 13:53:29.053161",
			"approval": false
		}
	],
	"owner_email": "gustav.paul@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "gpaul",
	"subject": "code review 5432065: exp/ssh: allow for msgUserAuthBanner during authentication",
	"created": "2011-11-24 08:30:55.265739",
	"patchsets": [
		1,
		1001,
		4,
		6001,
		8001,
		9004,
		7004,
		11001,
		1004
	],
	"modified": "2011-12-01 13:53:29.053161",
	"closed": false,
	"issue": 5432065
}