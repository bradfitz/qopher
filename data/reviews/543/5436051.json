{
	"description": "gofix: trivial rewrite for template.ParseFiles\nAlso warn about uses of Set.",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5436051/diff/2002/src/cmd/gofix/template.go\nFile src/cmd/gofix/template.go (right):\n\nhttp://codereview.appspot.com/5436051/diff/2002/src/cmd/gofix/template.go#newcode52\nsrc/cmd/gofix/template.go:52: if sel.Sel.Name == \"ParseFile\" {\nThis test is not safe, because there might be some other\ntype with a ParseFile method.  It would be fine to say that if\nfixed is already true (there was a reference to template.ParseFile\nelsewhere) then this rewrite can proceed, if you want to do two\npasses.  Other alternatives: add type checking, delete the rewrite.\n\nhttp://codereview.appspot.com/5436051/diff/2002/src/cmd/gofix/template.go#newcode59\nsrc/cmd/gofix/template.go:59: if sel.Sel.Name == name {\nif isPkgDot(sel, \"template\", name) {",
			"disapproval": false,
			"date": "2011-11-22 20:05:43.038728",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5436051/diff/4001/src/cmd/gofix/template.go\nFile src/cmd/gofix/template.go (right):\n\nhttp://codereview.appspot.com/5436051/diff/4001/src/cmd/gofix/template.go#newcode45\nsrc/cmd/gofix/template.go:45: \"ParseFile\": \"*template.Template,error\",\nIf you add the chaining methods and an entry in Funcs for template.New, you'll be able to catch things like template.New(\"x\").Funcs(m).ParseFile.",
			"disapproval": false,
			"date": "2011-11-22 21:38:37.385883",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-11-22 22:21:20.278185",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "To use the type checker, the first step is to write a TypeConfig\nthat describes the types of interest, the return types of their\nmethod calls, the return types of any functions of interest,\nand the types of any variables of interest (probably none here):\n\n\nvar templateTypeConfig = &TypeConfig{\n\tType: map[string]*Type{\n\t\t\"template.Template\": &Type{\n\t\t\tMethod: map[string]string{\n\t\t\t\t\"Delims\": \"*template.Template\",\n\t\t\t\t\"Funcs\": \"*template.Template\",\n\t\t\t\t...\n\t\t\t},\n\t\t},\n\t\t\"template.Set\": &Type{\n\t\t\tMethod: map[string]string{\n\t\t\t\t...\n\t\t\t},\n\t\t},\n\t},\n\t\n\tFunc: map[string]string{\n\t\t\"template.Must\": \"*template.Template,error\",\n\t\t\"template.SetMust\": \"*template.Set,error\",\n\t\t...\n\t},\n\t\n\tVar: map[string]string{\n\t\t// probably empty\n\t},\n}\n\nThe next step is to invoke the type checker at the top of the fix:\n\n    typeof, _ := typecheck(templateTypeConfig, f)\n\nThen in the type checker, when you are looking at a selector\nexpression, you should be able to say\n\n    if typeof[sel.X] == \"*template.Template\" && sel.Name.Name == \"ParseFiles\" {\n        ... do rewrite\n    }\n\nto constrain the rewrite to an appropriate context.\n\nI will not be surprised if you hit small bugs.  Feel free to\nping me before getting too confused.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-22 20:19:22.616886",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-22 21:32:33.074396",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-22 19:52:52.592155",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5436051/diff/2002/src/cmd/gofix/template.go\nFile src/cmd/gofix/template.go (right):\n\nhttp://codereview.appspot.com/5436051/diff/2002/src/cmd/gofix/template.go#newcode52\nsrc/cmd/gofix/template.go:52: if sel.Sel.Name == \"ParseFile\" {\n\na typical file will have a single call to ParseFile, either a function or a method, so a separate reference won't fix this in most cases.\n\nso i suppose the best i can offer is to warn that there appears to be a ParseFile call i can't fix, unless you can explain how to type check with the current ast.\n\nhttp://codereview.appspot.com/5436051/diff/2002/src/cmd/gofix/template.go#newcode59\nsrc/cmd/gofix/template.go:59: if sel.Sel.Name == name {\nOn 2011/11/22 20:05:43, rsc wrote:\n> if isPkgDot(sel, \"template\", name) {\n\nthat won't get method calls.",
			"disapproval": false,
			"date": "2011-11-22 20:10:34.265197",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-22 22:20:03.399641",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=565dc56d5e30 ***\n\ngofix: trivial rewrite for template.ParseFiles\nAlso warn about uses of Set.\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5436051",
			"disapproval": false,
			"date": "2011-11-24 04:17:41.729278",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5436051: gofix: trivial rewrite for template.ParseFiles",
	"created": "2011-11-22 19:52:49.278695",
	"patchsets": [
		1,
		2002,
		3002,
		4001,
		2007,
		5004,
		1012,
		6002,
		3009,
		19,
		5008,
		1019
	],
	"modified": "2011-11-24 04:17:42.570118",
	"closed": true,
	"issue": 5436051
}