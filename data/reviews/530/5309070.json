{
	"description": "runtime: lock the main goroutine to the main OS thread during init\n\nWe only guarantee that the main goroutine runs on the\nmain OS thread for initialization.  Programs that wish to\npreserve that property for main.main can call runtime.LockOSThread.\nThis is what programs used to do before we unleashed\ngoroutines during init, so it is both a simple fix and keeps\nexisting programs working.",
	"cc": [
		"iant@golang.org",
		"r@golang.org",
		"dave@cheney.net",
		"dvyukov@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I pre-emptively claim this as too expensive, and surprisingly and\nunpredictably to boot.  Every little demo of concurrency has the\nchance to become much too slow.\n\nThis is distorting the language to fix a particular, rare problem in a\nparticular, specific setup. There must be a less invasive solution.\nWhat exactly needs to run on the main thread, and how can we make that\nhappen?\n\n-rob\n",
			"disapproval": false,
			"date": "2011-10-27 03:12:56.894307",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Russ Cox <rsc@golang.org> writes:\n\n> On Wed, Oct 26, 2011 at 21:04, Ian Lance Taylor <iant@google.com> wrote:\n>> It really does not sound like the right approach to me, either. \u00a0But I\n>> don't fully understand the problem.\n>\n> The problem is that OS X requires that you call certain API functions\n> from the 'main thread', meaning the thread where program execution\n> begins.  This change would make the main thread be guaranteed to\n> coincide with the main goroutine, the one that runs initialization and\n> main.main.\n>\n> If you allow other goroutines to run in the main thread, one may block\n> that thread for an indefinite amount of time, making it impossible to\n> run an API call in the main goroutine.  This CL avoids that problem by\n> reserving the main thread for the main goroutine.\n\nSuppose we just don't use the main thread on OS X, except for these\nmagic operations.\n\nOr, on OS X, let's lock the main goroutine to the main thread at program\nstartup, and then release it before starting main, unless the program\ncalls runtime.LockOSThread itself in some init routine.  Because we have\nlocked the main goroutine, all init routines will run on the main\nthread.\n\nIan\n",
			"disapproval": false,
			"date": "2011-10-27 05:37:47.826831",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM at least as an experiment.\n",
			"disapproval": false,
			"date": "2011-10-27 15:47:26.944053",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"dave@cheney.net",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-10-27 19:44:29.986025",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Oct 26, 2011 at 22:16, Dave Cheney <dave@cheney.net> wrote:\n> How would the 'only if you use CGO' requirement fit with\n> something that is built with pkg/net? I think the cgo detection\n> would be too easily fooled.\n\nThe question is what the cost of being fooled is.\n\nThe only measurable cost I am aware of is that\npingponging between two goroutines would be\nnoticeably slower when one goroutine is the main\ngoroutine.  As far as I am aware that only happens\nin synthetic microbenchmarks.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-10-27 05:40:57.001802",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello iant, r (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-27 02:41:21.034590",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\"Rob 'Commander' Pike\" <r@golang.org> writes:\n\n> I pre-emptively claim this as too expensive, and surprisingly and\n> unpredictably to boot.  Every little demo of concurrency has the\n> chance to become much too slow.\n>\n> This is distorting the language to fix a particular, rare problem in a\n> particular, specific setup. There must be a less invasive solution.\n> What exactly needs to run on the main thread, and how can we make that\n> happen?\n\nIt really does not sound like the right approach to me, either.  But I\ndon't fully understand the problem.\n\nIan\n",
			"disapproval": false,
			"date": "2011-10-27 04:04:27.502583",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Oct 26, 2011 at 21:36, Rob 'Commander' Pike <r@golang.org> wrote:\n> But doesn't essentially every program use cgo now, because of networking?\n\nI believe that any real Go program is not going to be bottlenecked\nby the speed of channel communication between a pair of goroutines.\nWe decided that was not a case to promote: it's why we removed\nthe 'channel as iterator' methods from the containers.\n\nThe only programs I expect this CL to affect are microbenchmark\nchannel pingpong programs, and those typically do not import \"net\",\nso the cgo heuristic would be a way to avoid affecting them.\n\nIt is a clumsy distinction, though; hence my suggestion that\nwe apply it to all programs and refine the condition only if, in practice,\nit makes a measurable impact on real programs.  I am worried\nthat too much focus on microbenchmarks is keeping us from\ndoing things that matter in real programs.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-10-27 04:51:33.796015",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Oct 26, 2011 at 20:12, Rob 'Commander' Pike <r@golang.org> wrote:\n> I pre-emptively claim this as too expensive, and surprisingly and\n> unpredictably to boot. \u00a0Every little demo of concurrency has the\n> chance to become much too slow.\n\nOnly demos with 2 goroutines.  Demos with 100,000 goroutines are fine,\nbecause 99,999 of them will be in a single thread.  And it is far from clear\nthat this microbenchmarks have real relevance.  But I take your point.\n\n> This is distorting the language to fix a particular, rare problem in a\n> particular, specific setup. There must be a less invasive solution.\n> What exactly needs to run on the main thread, and how can we make that\n> happen?\n\nIt is distorting the implementation, not the language.\nI was very careful not to say anything about this in the spec:\nit truly is an implementation detail.\n\nIt is possible, as the comment says, that we can restrict\nthe locking to OS X programs that use cgo, since that is\nthe case where we have a demonstrated need.  A middle\nground would be any program that uses cgo (runtime can\ntell, even at that early stage).\n\nRuss\n",
			"disapproval": false,
			"date": "2011-10-27 04:27:22.736584",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "PTAL\n\nI have updated the code to force init (only) onto the main thread.\nAfter init is done, unless an init function called runtime.LockOSThread,\nthe forced association disappears.  Programs that do not use\nruntime.LockOSThread will be unaffected except during init.\n\nPrograms that do care can call runtime.LockOSThread in an init\nfunction and then assume that the main goroutine will be locked\nto the main thread even during main.main.  Coincidentally, this\nis exactly what programs that cared were already doing before\nwe allowed goroutines during init.  So those programs will just\ncontinue to work.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-10-27 14:53:51.980071",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Oct 26, 2011 at 21:04, Ian Lance Taylor <iant@google.com> wrote:\n> It really does not sound like the right approach to me, either. \u00a0But I\n> don't fully understand the problem.\n\nThe problem is that OS X requires that you call certain API functions\nfrom the 'main thread', meaning the thread where program execution\nbegins.  This change would make the main thread be guaranteed to\ncoincide with the main goroutine, the one that runs initialization and\nmain.main.\n\nIf you allow other goroutines to run in the main thread, one may block\nthat thread for an indefinite amount of time, making it impossible to\nrun an API call in the main goroutine.  This CL avoids that problem by\nreserving the main thread for the main goroutine.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-10-27 04:31:03.931686",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "PTAL\n\nI should not write code first thing in the morning.\nYay code reviews.\n",
			"disapproval": false,
			"date": "2011-10-27 19:30:37.502566",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "But doesn't essentially every program use cgo now, because of networking?\n\n-rob\n",
			"disapproval": false,
			"date": "2011-10-27 04:36:06.235888",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"iant@google.com",
				"dave@cheney.net",
				"r@google.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I have a bad feeling about locking main goroutine to main thread either. However, it's merely intuition.\n\nAnother possible solution is to provide runtime.LockOnMainThread(), then a program can do:\nfunc main() {\n  runtime.LockOnMainThread()\n  ...\n}\nor even \nfunc main() {\n  go eventHandler()\n  ...\n}\nfunc eventHandler() {\n  runtime.LockOnMainThread()\n  ...\n}\nHowever, it's also amenable to the problem pointed by Russ - third party package starts a goroutine during init that initiates an infinite system call on the main thread. Then, main thread can be reserved for execution of the goroutine that calls LockOnMainThread() (parked otherwise). It is similar to proposed RunOnMainThread(f func()), but not callback based.\n\n\nAnother solution is to lock main thread before init and unblock before main. Then a user program can carry on with locking in it's init. It requires recursion support in LockOSThread() (not necessary officially declared). The sequence of events is:\n\nLockOSThread() // locks main goroutine to main thread\n\n// packages inits run\n\nfunc init() { // main init\n  LockOSThread() // bumps lock count\n}\n\nUnlockOSThread() // decrements lock count\n\nfunc main() {\n  // locked to main thread\n  ...\n}\n\nIt looks like the cheapest and most handy for user solution, was it considered?",
			"disapproval": false,
			"date": "2011-10-27 07:46:57.920257",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"dave@cheney.net",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=d51031a1d932 ***\n\nruntime: lock the main goroutine to the main OS thread during init\n\nWe only guarantee that the main goroutine runs on the\nmain OS thread for initialization.  Programs that wish to\npreserve that property for main.main can call runtime.LockOSThread.\nThis is what programs used to do before we unleashed\ngoroutines during init, so it is both a simple fix and keeps\nexisting programs working.\n\nR=iant, r, dave, dvyukov\nCC=golang-dev\nhttp://codereview.appspot.com/5309070",
			"disapproval": false,
			"date": "2011-10-28 01:04:18.225528",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Hi Russ,\n\nHow would the 'only if you use CGO' requirement fit with something that is built with pkg/net? I think the cgo detection would be too easily fooled. \n\nCheers\n\nDave\n\nSent from my iPhone\n\nOn 27/10/2011, at 15:27, Russ Cox <rsc@golang.org> wrote:\n\n> On Wed, Oct 26, 2011 at 20:12, Rob 'Commander' Pike <r@golang.org> wrote:\n>> I pre-emptively claim this as too expensive, and surprisingly and\n>> unpredictably to boot.  Every little demo of concurrency has the\n>> chance to become much too slow.\n> \n> Only demos with 2 goroutines.  Demos with 100,000 goroutines are fine,\n> because 99,999 of them will be in a single thread.  And it is far from clear\n> that this microbenchmarks have real relevance.  But I take your point.\n> \n>> This is distorting the language to fix a particular, rare problem in a\n>> particular, specific setup. There must be a less invasive solution.\n>> What exactly needs to run on the main thread, and how can we make that\n>> happen?\n> \n> It is distorting the implementation, not the language.\n> I was very careful not to say anything about this in the spec:\n> it truly is an implementation detail.\n> \n> It is possible, as the comment says, that we can restrict\n> the locking to OS X programs that use cgo, since that is\n> the case where we have a demonstrated need.  A middle\n> ground would be any program that uses cgo (runtime can\n> tell, even at that early stage).\n> \n> Russ\n",
			"disapproval": false,
			"date": "2011-10-27 05:16:30.955840",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Oct 26, 2011 at 22:37, Ian Lance Taylor <iant@google.com> wrote:\n> Or, on OS X, let's lock the main goroutine to the main thread at program\n> startup, and then release it before starting main, unless the program\n> calls runtime.LockOSThread itself in some init routine. \u00a0Because we have\n> locked the main goroutine, all init routines will run on the main\n> thread.\n\nHow about doing that on all systems: during initialization the main\ngoroutine is locked to the main thread.  Again, not a spec, just an\nimplementation convention.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-10-27 06:02:07.575114",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> How about doing that on all systems: during initialization the main\n> goroutine is locked to the main thread. \u00a0Again, not a spec, just an\n> implementation convention.\n\ni could live with that, but i'm pretty unhappy about it. i fear a\nslippery slope where every stupid OS decision (and they're starting to\ncome fast an furious) puts pressure on the implementation and, in\neffect, the language.\n\nit may be the best we can do, except for OS X only. is there a\ncompelling reason to do it everywhere?\n\n-rob\n",
			"disapproval": false,
			"date": "2011-10-27 06:33:09.875318",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"iant@google.com",
				"dave@cheney.net",
				"r@google.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/10/27 07:59:16, rsc wrote:\n> On Wed, Oct 26, 2011 at 23:33, Rob 'Commander' Pike <mailto:r@google.com> wrote:\n> >> How about doing that on all systems: during initialization the main\n> >> goroutine is locked to the main thread. &nbsp;Again, not a spec, just an\n> >> implementation convention.\n> >\n> > i could live with that, but i'm pretty unhappy about it. i fear a\n> > slippery slope where every stupid OS decision (and they're starting to\n> > come fast an furious) puts pressure on the implementation and, in\n> > effect, the language.\n> >\n> > it may be the best we can do, except for OS X only. is there a\n> > compelling reason to do it everywhere?\n> \n> the reason to do it everywhere is just to reduce variation among\n> implementations.  it helps to reduce the ways in which OS X\n> (and more often Windows) are exceptions as much as possible.\n> \n> i don't see this as a language issue.  it's something we can try\n> in the implementation, and if it doesn't work well we can try\n> something else.  locking the thread just during init is easy to\n> explain, sufficient for the problems people have run into, and\n> has zero performance impact once you get to main.\n\nLooks like the best solution in my view.",
			"disapproval": false,
			"date": "2011-10-27 08:12:53.620763",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Oct 26, 2011 at 23:33, Rob 'Commander' Pike <r@google.com> wrote:\n>> How about doing that on all systems: during initialization the main\n>> goroutine is locked to the main thread. \u00a0Again, not a spec, just an\n>> implementation convention.\n>\n> i could live with that, but i'm pretty unhappy about it. i fear a\n> slippery slope where every stupid OS decision (and they're starting to\n> come fast an furious) puts pressure on the implementation and, in\n> effect, the language.\n>\n> it may be the best we can do, except for OS X only. is there a\n> compelling reason to do it everywhere?\n\nthe reason to do it everywhere is just to reduce variation among\nimplementations.  it helps to reduce the ways in which OS X\n(and more often Windows) are exceptions as much as possible.\n\ni don't see this as a language issue.  it's something we can try\nin the implementation, and if it doesn't work well we can try\nsomething else.  locking the thread just during init is easy to\nexplain, sufficient for the problems people have run into, and\nhas zero performance impact once you get to main.\n\nruss\n",
			"disapproval": false,
			"date": "2011-10-27 07:59:16.167319",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"dave@cheney.net",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5309070/diff/14001/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttp://codereview.appspot.com/5309070/diff/14001/src/pkg/runtime/proc.c#newcode229\nsrc/pkg/runtime/proc.c:229: runtime\u00b7LockOSThread();\nIs m already set to m0 here? If yes, LockOSThread will merely set lockmain. I think the above 2 lines better be swapped.",
			"disapproval": false,
			"date": "2011-10-27 16:23:36.336353",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"dave@cheney.net",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5309070/diff/14001/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttp://codereview.appspot.com/5309070/diff/14001/src/pkg/runtime/proc.c#newcode1564\nsrc/pkg/runtime/proc.c:1564: if(m == &runtime\u00b7m0 && runtime\u00b7sched.init) {\nThe logic here does not look right.  It seems that this condition will be true when this is called from runtime\u00b7main.  The effect will be that lockmain is always set to true.",
			"disapproval": false,
			"date": "2011-10-27 16:19:50.025184",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"dave@cheney.net",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5309070/diff/14001/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttp://codereview.appspot.com/5309070/diff/14001/src/pkg/runtime/proc.c#newcode221\nsrc/pkg/runtime/proc.c:221: \nDelete empty line.\n\nhttp://codereview.appspot.com/5309070/diff/14001/src/pkg/runtime/proc.c#newcode228\nsrc/pkg/runtime/proc.c:228: runtime\u00b7sched.init = true;\nWhere do you reset it to false?",
			"disapproval": false,
			"date": "2011-10-27 16:21:28.446355",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5309070: runtime: lock the main goroutine to the main OS thread",
	"created": "2011-10-27 01:52:43.506410",
	"patchsets": [
		1,
		3,
		3001,
		14001,
		3002,
		10003,
		20001
	],
	"modified": "2011-10-28 01:04:20.033163",
	"closed": true,
	"issue": 5309070
}