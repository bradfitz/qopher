{
	"description": "sync: Use a fair RWMutex.\n\nThe current RWMutex is writer biased. This change uses the strategy proposed\nin http://www.rfc1149.net/blog/2011/01/07/the-third-readers-writers-problem/\nto provide a solution that starves neither readers nor writers.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"dvyukov@google.com"
	],
	"messages": [
		{
			"sender": "awreece@gmail.com",
			"recipients": [
				"awreece@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-25 18:18:59.766316",
			"approval": false
		},
		{
			"sender": "awreece@gmail.com",
			"recipients": [
				"awreece@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/10/25 18:18:59, awreece wrote:\n> Hello mailto:golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n\nI'm sorry, I was mistaken. The current solution does not appear to be writer biased (a writer leaving will release all the readers that blocked in the interim). I feel foolish, and I'll take down the review request.",
			"disapproval": false,
			"date": "2011-10-26 00:18:28.349013",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"awreece@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/10/26 00:18:28, awreece wrote:\n> On 2011/10/25 18:18:59, awreece wrote:\n> > Hello mailto:golang-dev@googlegroups.com,\n> > \n> > I'd like you to review this change to\n> > https://go.googlecode.com/hg/\n> \n> I'm sorry, I was mistaken. The current solution does not appear to be writer\n> biased (a writer leaving will release all the readers that blocked in the\n> interim). I feel foolish, and I'll take down the review request.\n\nTo the best of my knowledge, the current algorithm is the best rwmutex algo out there. It not only gracefully alternates readers and writers, but also provides cheap wait-free reader lock/unlock.\nEven if the algo in this change would be better fairness-wise, lock, defer unlock, lock, defer uinlock, lock per RLock() + lock, defer unlock, unlock per RUnlock is just not acceptable. It has to be 1 atomic RMW (potentially lock-free CAS loop, ideally wait-free XCHG/XADD).",
			"disapproval": false,
			"date": "2011-10-26 06:43:48.367537",
			"approval": false
		},
		{
			"sender": "awreece@gmail.com",
			"recipients": [
				"awreece@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2011-10-31 17:43:20.755820",
			"approval": false
		}
	],
	"owner_email": "awreece@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "awreece",
	"subject": "code review 5309066: sync: Use a fair RWMutex.",
	"created": "2011-10-25 18:17:52.168749",
	"patchsets": [
		1,
		2001,
		4001
	],
	"modified": "2011-10-31 17:43:21.478389",
	"closed": true,
	"issue": 5309066
}