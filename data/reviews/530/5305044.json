{
	"description": "govet: check canonical dynamic method signatures\n\nAdds check that, for example, a Scan method taking\na first argument of type fmt.ScanState has the correct\nsignature to satisfy fmt.Scanner.\n\nSimilarly, a ReadByte should return byte, os.Error.\n\nThese are important to check because various pieces\nof code (fmt, gob, json, flate) do dynamic checks\nfor these methods, so code with incorrect signatures\nwould not be flagged at compile time.\n\nThese become even more important to check when\nrune is introduced.",
	"cc": [
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5305044/diff/6001/src/cmd/govet/govet.go\nFile src/cmd/govet/govet.go (right):\n\nhttp://codereview.appspot.com/5305044/diff/6001/src/cmd/govet/govet.go#newcode202\nsrc/cmd/govet/govet.go:202: // checkInterfaceType checks for canonical method signatures\nthese two functions have the same doc comment. also, neither ends with a period.\n\nhttp://codereview.appspot.com/5305044/diff/6001/src/cmd/govet/govet.go#newcode212\nsrc/cmd/govet/govet.go:212: // that are checked for using dynamic interface checks.  Because the\ns/for //\nmaybe\ntype-checked by their implementations using ...\n\nhttp://codereview.appspot.com/5305044/diff/6001/src/cmd/govet/govet.go#newcode227\nsrc/cmd/govet/govet.go:227: var canonicalMethods = map[string][2][]string{\nthe crazy type is cool but i would have used a struct for clarity as the map value.\ntype MethodSig struct {\n  args []string\n  results []string\n}\nvar canonicalMethods = map[string]MethodSig {\n}\n\nhttp://codereview.appspot.com/5305044/diff/6001/src/cmd/govet/govet.go#newcode229\nsrc/cmd/govet/govet.go:229: \"Format\":        {{\"+fmt.State\", \"int\"}, {}},                // fmt.Formatter\ni suggest = rather than +, as in, really this type\n\nhttp://codereview.appspot.com/5305044/diff/6001/src/cmd/govet/govet.go#newcode253\nsrc/cmd/govet/govet.go:253: cin, cout := c[0], c[1]\nthis just isn't clear.\nargs, results := c.args, c.results\nis\n\nalso, i find the use of c and t vars throughout this code hinders comprehension. they carry no weight regarding expected vs. user-input.\nmaybe canon and expr/user/call?\n\nhttp://codereview.appspot.com/5305044/diff/6001/src/cmd/govet/govet.go#newcode258\nsrc/cmd/govet/govet.go:258: if t.Results != nil {\ni don't think this test is necessary\n\nhttp://codereview.appspot.com/5305044/diff/6001/src/cmd/govet/govet.go#newcode276\nsrc/cmd/govet/govet.go:276: }\nif len(cout) == 1 {\n} else if len(cout) > 1 {\n}\nyou don't need the check for zero\n\nhttp://codereview.appspot.com/5305044/diff/6001/src/cmd/govet/govet.go#newcode303\nsrc/cmd/govet/govet.go:303: // Turn parameter list into slice of types.\ntypes? it returns Expr",
			"disapproval": false,
			"date": "2011-10-19 18:13:07.855556",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello r (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-19 03:15:29.329546",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=8829408437d8 ***\n\ngovet: check canonical dynamic method signatures\n\nAdds check that, for example, a Scan method taking\na first argument of type fmt.ScanState has the correct\nsignature to satisfy fmt.Scanner.\n\nSimilarly, a ReadByte should return byte, os.Error.\n\nThese are important to check because various pieces\nof code (fmt, gob, json, flate) do dynamic checks\nfor these methods, so code with incorrect signatures\nwould not be flagged at compile time.\n\nThese become even more important to check when\nrune is introduced.\n\nR=r\nCC=golang-dev\nhttp://codereview.appspot.com/5305044",
			"disapproval": false,
			"date": "2011-10-19 20:06:19.303793",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "PTAL\n\nOn Oct 19, 2011 at 14:13, r@golang.org wrote:\n> http://codereview.appspot.com/5305044/diff/6001/src/cmd/govet/govet.go#newcode202\n> src/cmd/govet/govet.go:202: // checkInterfaceType checks for canonical\n> method signatures\n> these two functions have the same doc comment. also, neither ends with a\n> period.\n\nDone.\n\n> http://codereview.appspot.com/5305044/diff/6001/src/cmd/govet/govet.go#newcode212\n> src/cmd/govet/govet.go:212: // that are checked for using dynamic\n> interface checks.  Because the\n> s/for //\n> maybe\n> type-checked by their implementations using ...\n\nI did the s/for //.  I think \"their implementations\"\nrefers to the wrong code.\n\n> http://codereview.appspot.com/5305044/diff/6001/src/cmd/govet/govet.go#newcode227\n> src/cmd/govet/govet.go:227: var canonicalMethods =\n> map[string][2][]string{\n> the crazy type is cool but i would have used a struct for clarity as the\n> map value.\n> type MethodSig struct {\n>    args []string\n>    results []string\n> }\n> var canonicalMethods = map[string]MethodSig {\n> }\n\nDone.  It got a lot bigger.\n\n> http://codereview.appspot.com/5305044/diff/6001/src/cmd/govet/govet.go#newcode229\n> src/cmd/govet/govet.go:229: \"Format\":        {{\"+fmt.State\", \"int\"},\n> {}},                // fmt.Formatter\n> i suggest = rather than +, as in, really this type\n\nNice, done.\n\n> http://codereview.appspot.com/5305044/diff/6001/src/cmd/govet/govet.go#newcode253\n> src/cmd/govet/govet.go:253: cin, cout := c[0], c[1]\n> this just isn't clear.\n> args, results := c.args, c.results\n> is\n\nDone.\n\n> also, i find the use of c and t vars throughout this code hinders\n> comprehension. they carry no weight regarding expected vs. user-input.\n> maybe canon and expr/user/call?\n\nDone.\n\n> http://codereview.appspot.com/5305044/diff/6001/src/cmd/govet/govet.go#newcode258\n> src/cmd/govet/govet.go:258: if t.Results != nil {\n> i don't think this test is necessary\n\nIf you have func f(), then I believe t.Results == nil.\nIf you have func f()(), then t.Results != nil.\n\n> http://codereview.appspot.com/5305044/diff/6001/src/cmd/govet/govet.go#newcode276\n> src/cmd/govet/govet.go:276: }\n> if len(cout) == 1 {\n> } else if len(cout) > 1 {\n> }\n> you don't need the check for zero\n\nDone.\n\n> http://codereview.appspot.com/5305044/diff/6001/src/cmd/govet/govet.go#newcode303\n> src/cmd/govet/govet.go:303: // Turn parameter list into slice of types.\n> types? it returns Expr\n\nDone (commented).\n\n",
			"disapproval": false,
			"date": "2011-10-19 18:33:51.676262",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\nmuch clearer now.",
			"disapproval": false,
			"date": "2011-10-19 18:40:15.976100",
			"approval": true
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5305044: govet: check canonical dynamic method signatures",
	"created": "2011-10-19 02:58:30.829467",
	"patchsets": [
		1,
		2001,
		1002,
		6001,
		9001,
		11001,
		16001
	],
	"modified": "2011-10-19 20:06:20.442256",
	"closed": true,
	"issue": 5305044
}