{
	"description": "misc/windows: do not leave \";\" at the end of %PATH% after uninstall",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"jdpoirier@gmail.com",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Tue, Nov 1, 2011 at 9:00 PM,  <alex.brainman@gmail.com> wrote:\n> Russ,\n>\n> I have no problem changing my code as you suggested, with these\n> comments:\n>\n> 1) Your InitializeUninstall function fails in this scenario:\n>\n> - start with PATH=c:\\a\n> - install Go\n> - now PATH=c:\\a;c:/Go/Bin\n> - install product XXX with binary files in c:\\b\n> - now PATH=c:\\a;c:/Go/Bin;c:\\b\n> - uninstall Go\n> - now PATH=c:\\ac:\\b, but should be PATH=c:\\a;c:\\b\nShould be an easy fix...\n\n> 2) PATH search is case insensitive on Windows and we should implement it\n> as such.\nThis is irrelevant to the processing being done by the installer/uninstaller.\n\n>\n> We are changing global PATH setting on user's computer, we have to be\n> very careful about it.\nUsing a unique string is as careful as it gets and I don't see how\nit could be any more specific.\n\n>\n> PATH on Windows is always very very long. Every new program, that user\n> installs, gets installed into their own private directory. If it needs\n> to be accessible by \"short name\" and not \"full path\", then it gets added\n> to the global PATH. Lots of programs do add their directories to the\n> PATH. It is important to keep this list clean and as short as possible.\n> No duplicate entries if possible. We will look silly if we change PATH\n> to c:\\a;c:\\go\\bin;C:\\GO\\BIN.\nAdding a Go bin path string to a really long PATH would be imperceptible.\n\nInstaller/uninstaller objectives: the installer adds only what the app\nneeds, the uninstaller removes only what the installer added and PATH\nis left exactly as it was prior to the installer running.\n\nIt's silly for the user to be manually adding a path string when they\nknow it'll be added by an installer. But that sort of thing happens\nall the time and it's not the end of the world. Some installers don't\neven do a PATH check before appending a path string.\n\nThe readme says what's added and removed so there should be no finger\npointing or name calling .\n\n>\n> We are checking PATH for $GOBIN during installation (see\n> ShouldChangePath function) anyway. Why not do it properly?\n>\n> 3) We should not use forward slashes in PATH.\n>\n> No one does. I suspect, some (if not most) programs that operate on PATH\n> will break because they only expect \\, not /. Windows itself does handle\n> them both properly. But why be special?\nFUD Why be a lemming. Who cares what everyone else does. The installer\nhas been using forward slashes from the beginning, that's hundreds and\nhundreds and hundreds and hundreds of installs, and there's been no\ncomplaint of breakage.\n\n> I am not sure that we can change it now. I would like to see go working\n> without MinGW first.\n>\n> I suspect, we might be forced to change our installation directory\n> anyway - Windows programs are supposed to be installed into \"C:\\Program\n> Files\\\" directory, not \"C:\\\". Perhaps we could change it then.\nHuh?\n\n\n-joe\n",
			"disapproval": false,
			"date": "2011-11-02 08:08:05.305913",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"jdpoirier@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Russ,\n\nI have no problem changing my code as you suggested, with these comments:\n\n1) Your InitializeUninstall function fails in this scenario:\n\n- start with PATH=c:\\a\n- install Go\n- now PATH=c:\\a;c:/Go/Bin\n- install product XXX with binary files in c:\\b\n- now PATH=c:\\a;c:/Go/Bin;c:\\b\n- uninstall Go\n- now PATH=c:\\ac:\\b, but should be PATH=c:\\a;c:\\b\n\n2) PATH search is case insensitive on Windows and we should implement it as such.\n\nWe are changing global PATH setting on user's computer, we have to be very careful about it.\n\nPATH on Windows is always very very long. Every new program, that user installs, gets installed into their own private directory. If it needs to be accessible by \"short name\" and not \"full path\", then it gets added to the global PATH. Lots of programs do add their directories to the PATH. It is important to keep this list clean and as short as possible. No duplicate entries if possible. We will look silly if we change PATH to c:\\a;c:\\go\\bin;C:\\GO\\BIN.\n\nWe are checking PATH for $GOBIN during installation (see ShouldChangePath function) anyway. Why not do it properly?\n\n3) We should not use forward slashes in PATH.\n\nNo one does. I suspect, some (if not most) programs that operate on PATH will break because they only expect \\, not /. Windows itself does handle them both properly. But why be special?\n\nI am not sure that we can change it now. I would like to see go working without MinGW first.\n\nI suspect, we might be forced to change our installation directory anyway - Windows programs are supposed to be installed into \"C:\\Program Files\\\" directory, not \"C:\\\". Perhaps we could change it then.\n\nAlex",
			"disapproval": false,
			"date": "2011-11-02 02:00:11.069192",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Oct 26, 2011 at 12:54 AM,  <alex.brainman@gmail.com> wrote:\n> I think we are speaking different language here <g>. Sure enough, it is\n> not Go.\n>\n> Alex\n>\n>\n> http://codereview.appspot.com/5302059/diff/3001/misc/windows/installer.iss\n> File misc/windows/installer.iss (right):\n>\n> http://codereview.appspot.com/5302059/diff/3001/misc/windows/installer.iss#newcode53\n> misc/windows/installer.iss:53: Root: HKLM; Subkey:\n> \"SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\";\n> ValueType: expandsz; ValueName: \"Path\"; \u00a0ValueData:\n> \"{olddata};{sd}/Go/bin\"; Check: ShouldWeChangePath('{sd}/Go/bin')\n> On 2011/10/26 01:02:13, Joe Poirier wrote:\n>>\n>> This checks to see if the Go bin path needs to be _added_ to PATH, so\n>\n> maybe a\n>>\n>> name that uses \"add\" rather than \"change\" in it.\n>\n> Please, suggest a name better then ShouldWeChangePath, and I will use\n> it.\n\nCheck: ShouldWeAddPath('{sd}/Go/bin')\n\n>\n> http://codereview.appspot.com/5302059/diff/3001/misc/windows/installer.iss#newcode80\n> misc/windows/installer.iss:80: if not GetPath(p) then\n> On 2011/10/26 01:02:13, Joe Poirier wrote:\n>>\n>> Result should be True for an empty path string\n>\n> It will be, as this function plays until its end.\n\nThis is the code snippet in question:\n  Result := False;\n  if not GetPath(p) then\n    exit;\n\nIf it's a null PATH environment, GetPath returns false, it drops\nthrough and exits with Result := False which tells the Check not to\nadd the Go path to the PATH environment\nValueData: \"{olddata};{sd}/Go/bin\"; Check: ShouldWeChangePath('{sd}/Go/bin')\n\n>\n> http://codereview.appspot.com/5302059/diff/3001/misc/windows/installer.iss#newcode84\n> misc/windows/installer.iss:84: if Pos(LowerCase(d), LowerCase(p)) > 0\n> then\n> On 2011/10/26 01:02:13, Joe Poirier wrote:\n>>\n>> Windows file systems can be, and are, case sensitive.\n>\n> My file system (NTFS) is not case sensitive.\n>\n> If my path is set to PATH=C:\\BIN;C:\\GO\\BIN, and you want to add\n> GOBIN=C:\\Go\\bin, should you go ahead and make it\n> PATH=C:\\BIN;C:\\GO\\BIN;C:\\Go\\bin, or should you leave it alone as\n> PATH=C:\\BIN;C:\\GO\\BIN?\n>\nI have a windows 7 box that is case sensitive, most of our Windows\n(NFS) servers and half of our lab machines at work are case sensitive\nbut it's probably not the common case.\n\nHaving the Go bin path hard coded to C:/Go/bin makes it fairly unique\nand easy to remove. I wanted to have as little interaction with the\nuser's path environment as possible so the code tries to add something\nunique and it only removes an exact copy of what it may have added, we\nleave path sanity and sanitizing to the user.\n\n> http://codereview.appspot.com/5302059/diff/3001/misc/windows/installer.iss#newcode98\n> misc/windows/installer.iss:98: i := Pos(LowerCase(d), LowerCase(p));\n> On 2011/10/26 01:02:13, Joe Poirier wrote:\n>>\n>> ditto previous comment about Windows case sensitivity\n>\n> Same answer.\n>\n> http://codereview.appspot.com/5302059/diff/3001/misc/windows/installer.iss#newcode103\n> misc/windows/installer.iss:103: SetPath(p);\n> On 2011/10/26 01:02:13, Joe Poirier wrote:\n>>\n>> There are too many ways to mess-up Path here.\n>\n>> Delete is simpler and does exactly what needs to be done, then just do\n>\n> a bug fix\n>>\n>> for deleting an orphaned semicolon on the old code.\n>\n> I can't see how this can be made any simpler. I am open to suggestions.\n> I would be even happy to drop this CL, if you want to send one yourself.\n>\n> http://codereview.appspot.com/5302059/\n>\nThe original code didn't have a problem removing the Go bin path it\nadded and this is much simpler\n    Delete(p, i, Length(d));\n\nthan this\n    p := Copy(p, 1, i - 1) + ';' + Copy(p, i + Length(d), Length(p));\n    p := Copy(p, 2, Length(p) - 2);\n\nAll that needs to be fixed/changed/added is the deletion of an\norphaned semicolon\n\nif Copy(OrigPath, Index, 1) = ';' then begin\n            Delete(OrigPath, Index, 1);\nend;\n\nI'll can look for the bug in the original code later tonight.\n\n-joe\n",
			"disapproval": false,
			"date": "2011-10-26 19:47:45.771814",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"jdpoirier@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: jdpoirier@gmail.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-25 06:18:19.194883",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"jdpoirier@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5302059/diff/3001/misc/windows/installer.iss\nFile misc/windows/installer.iss (right):\n\nhttp://codereview.appspot.com/5302059/diff/3001/misc/windows/installer.iss#newcode53\nmisc/windows/installer.iss:53: Root: HKLM; Subkey: \"SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\"; ValueType: expandsz; ValueName: \"Path\";  ValueData: \"{olddata};{sd}/Go/bin\"; Check: ShouldWeChangePath('{sd}/Go/bin')\nThis checks to see if the Go bin path needs to be _added_ to PATH, so maybe a name that uses \"add\" rather than \"change\" in it.\n\nhttp://codereview.appspot.com/5302059/diff/3001/misc/windows/installer.iss#newcode80\nmisc/windows/installer.iss:80: if not GetPath(p) then\nResult should be True for an empty path string\n\nhttp://codereview.appspot.com/5302059/diff/3001/misc/windows/installer.iss#newcode84\nmisc/windows/installer.iss:84: if Pos(LowerCase(d), LowerCase(p)) > 0 then\nWindows file systems can be, and are, case sensitive.\n\nhttp://codereview.appspot.com/5302059/diff/3001/misc/windows/installer.iss#newcode98\nmisc/windows/installer.iss:98: i := Pos(LowerCase(d), LowerCase(p));\nditto previous comment about Windows case sensitivity\n\nhttp://codereview.appspot.com/5302059/diff/3001/misc/windows/installer.iss#newcode103\nmisc/windows/installer.iss:103: SetPath(p);\nThere are too many ways to mess-up Path here. \n\nDelete is simpler and does exactly what needs to be done, then just do a bug fix for deleting an orphaned semicolon on the old code.",
			"disapproval": false,
			"date": "2011-10-26 01:02:13.279150",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"jdpoirier@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I think we are speaking different language here <g>. Sure enough, it is not Go.\n\nAlex\n\nhttp://codereview.appspot.com/5302059/diff/3001/misc/windows/installer.iss\nFile misc/windows/installer.iss (right):\n\nhttp://codereview.appspot.com/5302059/diff/3001/misc/windows/installer.iss#newcode53\nmisc/windows/installer.iss:53: Root: HKLM; Subkey: \"SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\"; ValueType: expandsz; ValueName: \"Path\";  ValueData: \"{olddata};{sd}/Go/bin\"; Check: ShouldWeChangePath('{sd}/Go/bin')\nOn 2011/10/26 01:02:13, Joe Poirier wrote:\n> This checks to see if the Go bin path needs to be _added_ to PATH, so maybe a\n> name that uses \"add\" rather than \"change\" in it. \n\nPlease, suggest a name better then ShouldWeChangePath, and I will use it.\n\nhttp://codereview.appspot.com/5302059/diff/3001/misc/windows/installer.iss#newcode80\nmisc/windows/installer.iss:80: if not GetPath(p) then\nOn 2011/10/26 01:02:13, Joe Poirier wrote:\n> Result should be True for an empty path string\n\nIt will be, as this function plays until its end.\n\nhttp://codereview.appspot.com/5302059/diff/3001/misc/windows/installer.iss#newcode84\nmisc/windows/installer.iss:84: if Pos(LowerCase(d), LowerCase(p)) > 0 then\nOn 2011/10/26 01:02:13, Joe Poirier wrote:\n> Windows file systems can be, and are, case sensitive.\n\nMy file system (NTFS) is not case sensitive.\n\nIf my path is set to PATH=C:\\BIN;C:\\GO\\BIN, and you want to add GOBIN=C:\\Go\\bin, should you go ahead and make it PATH=C:\\BIN;C:\\GO\\BIN;C:\\Go\\bin, or should you leave it alone as PATH=C:\\BIN;C:\\GO\\BIN?\n\nhttp://codereview.appspot.com/5302059/diff/3001/misc/windows/installer.iss#newcode98\nmisc/windows/installer.iss:98: i := Pos(LowerCase(d), LowerCase(p));\nOn 2011/10/26 01:02:13, Joe Poirier wrote:\n> ditto previous comment about Windows case sensitivity\n\nSame answer.\n\nhttp://codereview.appspot.com/5302059/diff/3001/misc/windows/installer.iss#newcode103\nmisc/windows/installer.iss:103: SetPath(p);\nOn 2011/10/26 01:02:13, Joe Poirier wrote:\n> There are too many ways to mess-up Path here. \n> \n> Delete is simpler and does exactly what needs to be done, then just do a bug fix\n> for deleting an orphaned semicolon on the old code. \n\nI can't see how this can be made any simpler. I am open to suggestions. I would be even happy to drop this CL, if you want to send one yourself.",
			"disapproval": false,
			"date": "2011-10-26 05:54:46.462051",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Alex,\n\nThe clean-up was definitely needed so don't drop the CL. I've been\nreally busy so I'll need a little bit of time to do a proper reply.\n\n-joe\n\n\nOn Wed, Oct 26, 2011 at 12:54 AM,  <alex.brainman@gmail.com> wrote:\n> I think we are speaking different language here <g>. Sure enough, it is\n> not Go.\n>\n> Alex\n>\n>\n> http://codereview.appspot.com/5302059/diff/3001/misc/windows/installer.iss\n> File misc/windows/installer.iss (right):\n>\n> http://codereview.appspot.com/5302059/diff/3001/misc/windows/installer.iss#newcode53\n> misc/windows/installer.iss:53: Root: HKLM; Subkey:\n> \"SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\";\n> ValueType: expandsz; ValueName: \"Path\"; \u00a0ValueData:\n> \"{olddata};{sd}/Go/bin\"; Check: ShouldWeChangePath('{sd}/Go/bin')\n> On 2011/10/26 01:02:13, Joe Poirier wrote:\n>>\n>> This checks to see if the Go bin path needs to be _added_ to PATH, so\n>\n> maybe a\n>>\n>> name that uses \"add\" rather than \"change\" in it.\n>\n> Please, suggest a name better then ShouldWeChangePath, and I will use\n> it.\n>\n> http://codereview.appspot.com/5302059/diff/3001/misc/windows/installer.iss#newcode80\n> misc/windows/installer.iss:80: if not GetPath(p) then\n> On 2011/10/26 01:02:13, Joe Poirier wrote:\n>>\n>> Result should be True for an empty path string\n>\n> It will be, as this function plays until its end.\n>\n> http://codereview.appspot.com/5302059/diff/3001/misc/windows/installer.iss#newcode84\n> misc/windows/installer.iss:84: if Pos(LowerCase(d), LowerCase(p)) > 0\n> then\n> On 2011/10/26 01:02:13, Joe Poirier wrote:\n>>\n>> Windows file systems can be, and are, case sensitive.\n>\n> My file system (NTFS) is not case sensitive.\n>\n> If my path is set to PATH=C:\\BIN;C:\\GO\\BIN, and you want to add\n> GOBIN=C:\\Go\\bin, should you go ahead and make it\n> PATH=C:\\BIN;C:\\GO\\BIN;C:\\Go\\bin, or should you leave it alone as\n> PATH=C:\\BIN;C:\\GO\\BIN?\n>\n> http://codereview.appspot.com/5302059/diff/3001/misc/windows/installer.iss#newcode98\n> misc/windows/installer.iss:98: i := Pos(LowerCase(d), LowerCase(p));\n> On 2011/10/26 01:02:13, Joe Poirier wrote:\n>>\n>> ditto previous comment about Windows case sensitivity\n>\n> Same answer.\n>\n> http://codereview.appspot.com/5302059/diff/3001/misc/windows/installer.iss#newcode103\n> misc/windows/installer.iss:103: SetPath(p);\n> On 2011/10/26 01:02:13, Joe Poirier wrote:\n>>\n>> There are too many ways to mess-up Path here.\n>\n>> Delete is simpler and does exactly what needs to be done, then just do\n>\n> a bug fix\n>>\n>> for deleting an orphaned semicolon on the old code.\n>\n> I can't see how this can be made any simpler. I am open to suggestions.\n> I would be even happy to drop this CL, if you want to send one yourself.\n>\n> http://codereview.appspot.com/5302059/\n>\n",
			"disapproval": false,
			"date": "2011-10-26 16:46:24.769324",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, jdpoirier@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-27 00:42:06.178939",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"jdpoirier@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/10/26 19:47:45, Joe Poirier wrote:\n> > ...\n> > Please, suggest a name better then ShouldWeChangePath, and I will use\n> > it.\n> \n> Check: ShouldWeAddPath('{sd}/Go/bin')\n> \n\nI do not think it is better. Compare:\n\nShould we change path?\n\nwith\n\nShould we add path?\n\nI think, \"add path\" is confusing. What does \"add path\" do?\n\n> ...\n> If it's a null PATH environment, ...\n\nYou are correct. I have changed it.\n\n> >\n> I have a windows 7 box that is case sensitive, ...\n\nI think you are wrong about that. Windows PATH search does not care about letter case, regardless of Windows version and storage media kind. Here is Windows 7 using EXT3 file system from Linux (drive U:):\n\nU:\\a>cd\nU:\\a\n\nU:\\a>type a.go\npackage main\n\nfunc main() {\n        println(\"Hello\")\n}\n\nU:\\a>8g a.go\n\nU:\\a>8l -o aaa.exe a.8\n\nU:\\a>aaa.exe\nHello\n\nU:\\a>echo %PATH%\nC:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\go\\bin\n\nU:\\a>aaa.exe\nHello\n\nU:\\a>cd ..\n\nU:\\>aaa.exe\n'aaa.exe' is not recognized as an internal or external command, operable program or batch file.\n\nU:\\>set PATH=%PATH%;u:\\A\n\nU:\\>echo %PATH%\nC:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\go\\bin;u:\\A\n\nU:\\>aaa.exe\nHello\n\nU:\\>\n\n> I'll can look for the bug in the original code later tonight.\n> \n\nTake your time.\n\nAlex\n\nPS: Could you, please, check another related CL http://codereview.appspot.com/5305048/. Thank you.",
			"disapproval": false,
			"date": "2011-10-27 00:41:47.251173",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Oct 26, 2011 at 7:41 PM,  <alex.brainman@gmail.com> wrote:\n> On 2011/10/26 19:47:45, Joe Poirier wrote:\n>>\n>> > ...\n>> > Please, suggest a name better then ShouldWeChangePath, and I will\n>\n> use\n>>\n>> > it.\n>\n>> Check: ShouldWeAddPath('{sd}/Go/bin')\n>\n>\n> I do not think it is better. Compare:\n>\n> Should we change path?\n>\n> with\n>\n> Should we add path?\n>\n> I think, \"add path\" is confusing. What does \"add path\" do?\n\nIt makes sense if viewed within the entire context of the code\nRoot: HKLM; Subkey: ... ; ValueType: expandsz; ValueName: \"Path\";\nValueData: \"{olddata};{sd}/Go/bin\"; Check:\nShouldWeAddPath('{sd}/Go/bin')\nI read this as, \"Check\" if we should add the path \"{sd}/Go/bin\" to the\n\"Path\" environment variable\n>\n\n>\n>> >\n>> I have a windows 7 box that is case sensitive, ...\n>\n> I think you are wrong about that. Windows PATH search does not care\n> about letter case, regardless of Windows version and storage media kind.\n> Here is Windows 7 using EXT3 file system from Linux (drive U:):\n>\nOn Windows case sensitivity is disabled by default and has to be set\nvia the registry. But I think you're correct in that even if it's\nenabled it only works when the POSIX subsystem (aka Windows Services\nfor Unix) is used and not with the normal Windows API.\n\nI still recommend sticking with adding and removing only the unique Go\nbin path.\n\n>\n> PS: Could you, please, check another related CL\n> http://codereview.appspot.com/5305048/. Thank you.\n\ndone\n",
			"disapproval": false,
			"date": "2011-10-27 09:46:19.597465",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/10/28 07:49:28, Joe Poirier wrote:\n> ...\n\nPerhaps your suggestion will fix the problem. But I am not going back to the old code. Here is why.\n\n- Old code does not ignore letter case. I think this is wrong. We should not change users PATH environment variable unless we really have to.\n\n- PathCheck function behaves differently when it is called from different places. It is confusing.\n\n- PathCheck function modifies PATH environment variable. Sometimes. It is confusing. If it modifies PATH, it should be called ModifyPath or something.\n\nPlease, tell me which bit of my new code you would like to change. I am happy to adjust it.\n\nAlex",
			"disapproval": false,
			"date": "2011-10-31 01:54:26.574265",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/10/27 09:46:19, Joe Poirier wrote:\n> ...\n> It makes sense if viewed within the entire context of the code\n> Root: HKLM; Subkey: ... ; ValueType: expandsz; ValueName: \"Path\";\n> ValueData: \"{olddata};{sd}/Go/bin\"; Check:\n> ShouldWeAddPath('{sd}/Go/bin')\n> I read this as, \"Check\" if we should add the path \"{sd}/Go/bin\" to the\n> \"Path\" environment variable\n> >\n\nI think the name ShouldWeChangePath works as well as ShouldWeAddPath in that context. On the other hand, ShouldWeChangePath name describes what we do regardless of context. It determines, if we need to modify $PATH variable to include $GOBIN. It does not matter, if we append $GOBIN to the end of $PATH, insert it at the start or squeeze in the middle somewhere.\n\nBut I am not married to that name and will change it, if you insist. Should I ShouldWeChangePath to ShouldWeAddPath? Maybe you want to try something different.\n\n> \n> On Windows case sensitivity is disabled by default and has to be set\n> via the registry. \n\nI know nothing about that.\n\n> ... But I think you're correct in that even if it's\n> enabled it only works when the POSIX subsystem (aka Windows Services\n> for Unix) is used and not with the normal Windows API.\n\nI didn't say that. What I said is: \"Windows PATH search does not care about letter case\".\n\n> I still recommend sticking with adding and removing only the unique Go\n> bin path.\n\nPlease explain why. I think it is wrong, because this way we will end up with PATH like this:\n\nPATH=c:\\windows\\system32;c:\\go\\bin;c:\\go\\Bin;c:\\go\\BIn;c:\\go\\BIN;c:\\go\\BiN;c:\\gO\\bin\n\nDoes not look right to me. Does it?\n\n> > http://codereview.appspot.com/5305048/. Thank you.\n> \n> done\n\nThank you.\n\nPlease, tell me what else I need to change, so I can get this closed.\n\nAlex",
			"disapproval": false,
			"date": "2011-10-27 22:08:10.293638",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "The post uninstall leftover semicolons are due to the uninstaller not\nchecking for and deleting a prepended semicolon. I.e. if the installer\nappends the Go bin path to PATH it places a semicolon between PATH and\nthe Go bin path string it appends: \"{olddata};{sd}/Go/bin\" The fix is\nfor the uninstaller to check for a semicolon preceding an identified\nGo bin path string.\n\nA snippet of the code used to successfully test for and delete a\nprepended semicolon.\n\n    // Pos returns 0 if not found\n    Index := Pos(';' + Param + ';', ';' + OrigPath + ';');\n\n    if (IsUninstaller() = True) AND (Index > 0) then begin\n\n        if (index-1 >= 0) AND (Copy(OrigPath, Index-1, 1) = ';') then begin\n          // remove prepended semicolon\n          Index := Index - 1\n          Delete(OrigPath, Index, Length(';' + Param));\n        end else begin\n          Delete(OrigPath, Index, Length(Param));\n        end\n\n        // remove orphaned semicolon if necessary\n        if (Length(OrigPath) >= Index) AND (Copy(OrigPath, Index, 1) =\n';') then begin\n            Delete(OrigPath, Index, 1);\n        end;\n\n        RegWriteStringValue(HKEY_LOCAL_MACHINE,\n'SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment',\n'Path', OrigPath);\n    end;\n\n-joe\n",
			"disapproval": false,
			"date": "2011-10-28 07:49:28.365710",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "It is true that the existing PathCheck is doing a bit too much.\nThe fundamental reason is that the first half is a library routine\nand the second half does different things with the results of the\nlibrary routine depending on the context.  If instead we write\nit as an explicit library routine called from other functions, then\nI think the spirit of the original code remains but it gets more\nreadable.  Comments never hurt too.  The below is one way\nthat it might get simpler.  It is just food for thought.  I am happy\nto leave the actual decisions up to you, Joe and Alex.\nPlease at least think about adding some comments along\nthe lines below.  This email discussion has identified many\nimportant subtleties of the problem at hand, and they deserve\nto be called out explicitly.\n\nThe code below almost certainly doesn't work - I have no way\nto compile, let alone test it - but maybe it will help nudge the\nconversation in a fruitful direction.\n\nRuss\n\n[Code]\n# The installer adds 'c:/Go/bin' to the path if it is not there already\n# and removes 'c:/Go/bin' from the path during uninstall.\n# The installer only uses that exact spelling.\n# Because it uses forward slashes, these operations are\n# unlikely to conflict with the user's existing path settings.\n\n# GetPathInfo returns the current path, the Go bin directory we should use,\n# and the first index at which that directory can be found in the Path, if any.\nfunction GetPathInfo(out Path: String, out GoBin: String, out Index: Integer);\nbegin\n    RegQueryStringValue(ENVKEY, 'Path', Path);\n    GoBin := ExpandConstant('{sd}/Go/bin');\n    Index := Pos(';' + Param + ';', ';' + OrigPath + ';');\nend\n\n# ShouldChangePath returns true if we should replace the current\n# path with the result of NewPath.\nfunction ShouldChangePath(): Boolean;\nvar\n    Path, GoBin: String;\n    Index: Integer;\nbegin\n    GetPathInfo(Path, GoBin, Index);\n    Result := Index = 0;  # GoBin not in Path\nend\n\n# NewPath returns the result of adding the Go bin directory\n# to the end of the current path.\nfunction NewPath(): String;\nvar\n    Path, GoBin: String;\n    Index: Integer;\nbegin\n    GetPathInfo(Path, GoBin, Index);\n    if Path = '' then\n        Result := GoBin;\n    else\n        Result := Path + ';' + GoBin;\nend\n\n# InitializeUninstall is called by the installer to decide whether to uninstall.\n# We always let it uninstall (Result := True) but as a side effect remove our\n# c:/Go/bin entry from the path.\nfunction InitializeUninstall(): Boolean\nvar\n    Path, GoBin: String;\n    Index: Integer;\nbegin\n    GetPathInfo(Path, GoBin, Index);\n    if Index > 0 then begin\n        Delete(Path, Index-1, 1+Length(GoBin)+1);\n        RegWriteStringValue(ENVKEY, 'Path', Path);\n    end;\n    Result := True\nend\n",
			"disapproval": false,
			"date": "2011-11-01 15:52:36.001994",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Oct 27, 2011 at 5:08 PM,  <alex.brainman@gmail.com> wrote:\n> On 2011/10/27 09:46:19, Joe Poirier wrote:\n> But I am not married to that name and will change it, if you insist.\n\n...same thoughts here, and not insisting.\n\n>\n>\n>> I still recommend sticking with adding and removing only the unique Go\n>> bin path.\n>\n> Please explain why. I think it is wrong, because this way we will end up\n> with PATH like this:\n>\n> PATH=c:\\windows\\system32;c:\\go\\bin;c:\\go\\Bin;c:\\go\\BIn;c:\\go\\BIN;c:\\go\\BiN;c:\\gO\\bin\n\nAFAIK in its current incantation, it's not possible for the installer\nto add multiple versions of its unique path string. I'm not sure how\nyou came up with the example above but the installer only adds its\nunique path string if it doesn't already exist and only removes its\nunique path string if it does exist.\n\nSure, a user can add different variations of the Go bin path to their\npath environment, to include the one used by the installer, but that\nis none of the current installer's/uninstaller's concern. You'll find\nonly a single instance of the installer's unique Go bin path string in\nPATH even if A) the uninstaller isn't run prior to doing a new install\nand B) the user manually adds a Go bin path string exactly like the\none the installer uses.\n\nThe user shouldn't be manually messing with the Go bin path and PATH\nif they choose to use the installer, except maybe removing a manually\nadded Go bin path prior to using the installer for the first time.\n\nThe only way to use the lowercase conversions correctly would be to\nlowercase everything in PATH then normalize all the path separators in\nPATH then do a loop to look for multiple instances of the Go bin path\nstring that's used by the installer.\n\n>\n> Does not look right to me. Does it?\nNo, but that's because the example is contrived.\n\n>\n> Please, tell me what else I need to change, so I can get this closed.\n>\n\nI'll look at the orphaned semicolon bug a few hours after I send this email out.\n\n-joe\n",
			"disapproval": false,
			"date": "2011-10-28 00:09:16.488579",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Oct 27, 2011 at 8:42 PM,  <alex.brainman@gmail.com> wrote:\n> On 2011/10/28 00:09:16, Joe Poirier wrote:\n>\n>> > Does not look right to me. Does it?\n>> No, but that's because the example is contrived.\n>\n> Perhaps. But why do you insist on using case-sensitive PATH search?\n\nI thought the previous explanation about the installer's use of a\n\"unique\" Go bin path string made it obvious. It works, right? And it's\nsimple.\nFor reference, there's a proper modpath implementation here\nhttp://legroom.net/files/software/modpath.iss\n\n> can't imagine a situation where there is any benefit. Can you? Please\n> tell me.\n>\n\nI'm not sure if you're asking in general or specifically about\nWindows, so I'll do both.\n\nWell, the very code we're discussing here is a great Windows example.\nAs for the general case, on a case sensitive system the path search\n_is_ case sensitive, except of course on Windows.\n\nFor example, on a Linux machine if you add /Go/bin to PATH but the\nfolder is actually named /go/bin then calling $ 6g/8g fails as will $\nwhich 6g/8g, but that's expected because /Go/bin isn't the same as\n/go/bin. And I get the same behavior on my Mac, which is setup to be\ncase sensitive.\n\n-joe\n",
			"disapproval": false,
			"date": "2011-10-28 03:26:26.488670",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/10/28 00:09:16, Joe Poirier wrote:\n> \n> The only way to use the lowercase conversions correctly would be to\n> lowercase everything in PATH ...\n\nThat is what I do, isn't it.\n\n> ... then normalize all the path separators in\n> PATH ...\n\nI am happy to add this. I was thinking to leave it for later, when I attempt to change your c:/Go/Bin onto c:\\Go\\Bin.\n\n> ... then do a loop to look for multiple instances of the Go bin path\n> string that's used by the installer.\n\nThat is bit overkill.\n\n> > Does not look right to me. Does it?\n> No, but that's because the example is contrived.\n\nPerhaps. But why do you insist on using case-sensitive PATH search? I can't imagine a situation where there is any benefit. Can you? Please tell me.\n\n> I'll look at the orphaned semicolon bug a few hours after I send this email out.\n> \n\nNo rush. If you want to do it yourself. I will wait.\n\nAlex",
			"disapproval": false,
			"date": "2011-10-28 01:42:02.911720",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Sun, Oct 30, 2011 at 8:54 PM,  <alex.brainman@gmail.com> wrote:\n> On 2011/10/28 07:49:28, Joe Poirier wrote:\n>>\n>> ...\n>\n> Perhaps your suggestion will fix the problem. But I am not going back to\n> the old code. Here is why.\n\n[1] As we're all aware, you're the gatekeeper.\n\nAs an FYI, the old code was used to find and fix the leftover\nsemicolon problem because it's a _working_ baseline. I posted the code\nfor the fix as a reference.\n\n>\n> - Old code does not ignore letter case. I think this is wrong. We should\n> not change users PATH environment variable unless we really have to.\n\nTechnically the implementation in this CL also modifies the user's\nPATH when it doesn't/shouldn't need to. E.g. if the user manually\nadded C:\\gO/BiN to PATH and at some future time the installer is run.\nThen when the uninstaller runs it assumes it's okay to remove\nC:\\gO/BiN even though the installer didn't add it. But maybe the user\nwanted it there and/or is expecting it there. How do you propose\nhandling this scenario? It's a rhetorical question; regardless of the\nimplementation the user needs to assume some responsibility for\npolicing PATH otherwise the code quickly gets out of hand if it tries\nto handle all scenarios and/or edge/corner cases.\n\n>\n> - PathCheck function behaves differently when it is called from\n> different places. It is confusing.\n\nThere are only two scenarios, installation and uninstallation.\n\nAt installation PathCheck just checks to see if the Inno Setup process\nshould add the Go bin path string we define based on the function\nreturn value of True or False. Only when the uninstaller runs is the\nuser PATH modified directly by the code, but it's easy to identify\nwhere this occurs because it's wrapped explicitly with an uninstaller\ncheck. There's not much code to look at and it's not confusing if\nyou're familiar with the language, and time is taken to read the code.\nI think you're making it seem a lot worse than what it is, possibly an\nunconscious response because you don't like the code. Sigh. It's not\nthe perfect implementation either.\n\n>\n> - PathCheck function modifies PATH environment variable. Sometimes. It\n> is confusing. If it modifies PATH, it should be called ModifyPath or\n> something.\n\nLike I said, at install PathCheck _only_ does a path check and it's\nInno Setup that modifies the user's PATH, not the code.\n\n>\n> Please, tell me which bit of my new code you would like to change. I am\n> happy to adjust it.\n\nThe old implementation assumes a clean PATH, i.e. no existing Go bin\npath string/s, and that the uninstaller will be run. But there's no\nharm no foul if a user hasn't cleaned PATH of Go bin path artifacts\nand the installer adds another-unique-Go bin path string. The\nuninstaller will remove only the unique path string that the installer\nadded and Go bin path string artifacts that existed prior to the\ninstaller being run remain. If the uninstaller isn't run, PATH will\nneed to be cleaned manually at which time the user will find the\nstring added by the installer as well as any other Go bin path string\nartifacts.\n\nThe difference between the old code and the new code is that it's\npossible for one to modify PATH during the installation process and\nthe other during uninstallation even though it's not required, old\ncode new code respectively. Only the old code leaves the user's PATH\n_exactly_ as it was prior to the installer/uninstaller being run in\n_all_ cases.\n\n\nWhy didn't any of this come up during the original CL submission? Good question.\nFrom an add/remove Go bin path point of view, did the old code work? Yes.\nDid I show a fix for the extra semicolons? Yes.\nDo you like the old code? No.\nDid you acquiesce to my rebuttal concerning my insistence on\ncase-sensitive PATH searches? Yes.\nDoes it matter whether the old code worked or what I think? No [1].\n\nWith that being said, I'm baffled as to why you'd replace delete with\nthe multiple calls to copy.\n\nRegardless of what's proposed you'll find a [trivial] reason not to\nlike it and when faced with facts that counter your dislike you'll\ncreate a diversion in some other area... So from this point on I'll\nforgo the games and leave the color choice entirely up to you.\n\n-joe\n",
			"disapproval": false,
			"date": "2011-10-31 20:48:17.312776",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"jdpoirier@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/11/02 08:08:05, Joe Poirier wrote:\n> >\n> > ...\n> Should be an easy fix...\n> \n\nIt seems, I can't convince you to accept my changes. So I will let you fix it yourself.\n\nI have created http://code.google.com/p/go/issues/detail?id=2420 to keep track of this problem.\n\nAlex",
			"disapproval": false,
			"date": "2011-11-04 06:08:06.613605",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"jdpoirier@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2011-11-04 06:08:48.201162",
			"approval": false
		}
	],
	"owner_email": "alex.brainman@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "brainman",
	"subject": "code review 5302059: misc/windows: do not leave \";\" at the end of %PATH% aft...",
	"created": "2011-10-25 06:16:38.733128",
	"patchsets": [
		1,
		1002,
		3001,
		4002
	],
	"modified": "2011-11-04 06:08:50.537686",
	"closed": true,
	"issue": 5302059
}