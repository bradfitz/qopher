{
	"description": "src/cmd/gopack/ar.c: Minor tweaks for consistency with Plan 9\n\n. removed an unnexessary initialisation.\n. replaced 0 with 0L to match print format that in turn matched\n  the type of the original function return value.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"lucio.dere@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, rsc@golang.org),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-27 18:39:01.156881",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "How about\n\ncp = ctime(&date)\nif(strlen(cp) > 25)  // plan 9 includes time zone\n    Bprint(&bout, \" %-12.12s %-4.4s \", cp+4, cp+24);\nelse\n    Bprint(&bout, \" %-12.12s %-4.4s \", cp+4, cp+20);\n\nRuss\n",
			"disapproval": false,
			"date": "2011-10-31 16:51:38.183677",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I note that (a) Plan 9 ctime () takes a plain long value, while Posix\nctime() wants a pointer to time_t; (b) the date format differs\nregarding the leading zero in the day.\n\nShould one not drop assumptions and use a more appropriate (strftime()\ncomes to mind) function?\n\nLucio.\n\nOn 11/1/11, Lucio De Re <lucio.dere@gmail.com> wrote:\n> It's a lot simpler, but can one safely rely on it?  How will one track\n> this down in the (extremely unlikely, I admit) event of the return\n> string size changing?\n>\n> I concede that the suggestion has merit, I will submit it.\n>\n> Lucio.\n>\n>\n> On 10/31/11, Russ Cox <rsc@golang.org> wrote:\n>> How about\n>>\n>> cp = ctime(&date)\n>> if(strlen(cp) > 25)  // plan 9 includes time zone\n>>     Bprint(&bout, \" %-12.12s %-4.4s \", cp+4, cp+24);\n>> else\n>>     Bprint(&bout, \" %-12.12s %-4.4s \", cp+4, cp+20);\n>>\n>> Russ\n>>\n>\n",
			"disapproval": false,
			"date": "2011-11-02 11:46:50.870355",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "It's a lot simpler, but can one safely rely on it?  How will one track\nthis down in the (extremely unlikely, I admit) event of the return\nstring size changing?\n\nI concede that the suggestion has merit, I will submit it.\n\nLucio.\n\n\nOn 10/31/11, Russ Cox <rsc@golang.org> wrote:\n> How about\n>\n> cp = ctime(&date)\n> if(strlen(cp) > 25)  // plan 9 includes time zone\n>     Bprint(&bout, \" %-12.12s %-4.4s \", cp+4, cp+24);\n> else\n>     Bprint(&bout, \" %-12.12s %-4.4s \", cp+4, cp+20);\n>\n> Russ\n>\n",
			"disapproval": false,
			"date": "2011-11-01 03:33:34.726980",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I created 5363043 to take care of this.\n",
			"disapproval": false,
			"date": "2011-11-07 16:03:46.271282",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"lucio.dere@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, rsc@golang.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-09 14:46:00.925056",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n",
			"disapproval": false,
			"date": "2011-11-09 18:24:34.340923",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lucio.dere@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=c9e54f9c6f29 ***\n\ngopack: fixes for Plan 9 build\n\n. removed an unnexessary initialisation.\n. replaced 0 with 0L to match print format that in turn matched\n  the type of the original function return value.\n\nR=golang-dev\nCC=golang-dev, rsc\nhttp://codereview.appspot.com/5306072\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2011-11-09 18:24:41.017250",
			"approval": false
		}
	],
	"owner_email": "lucio.dere@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "lucio",
	"subject": "code review 5306072: src/cmd/gopack/ar.c: Minor tweaks for consistency with ...",
	"created": "2011-10-27 17:58:14.006886",
	"patchsets": [
		1,
		2001,
		4001,
		10001
	],
	"modified": "2011-11-11 13:07:46.339716",
	"closed": true,
	"issue": 5306072
}