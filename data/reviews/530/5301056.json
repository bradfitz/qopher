{
	"description": "big: usable zero Rat values without need for explicit initialization\n\n- no explicit API change, but new(big.Rat) now creates a big.Rat value\n  of 0 that is immediately usable, in sync. w/ the conventions elsewhere\n- various cleanups along the way",
	"cc": [
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rogpeppe@gmail.com"
	],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rogpeppe@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-20 23:24:53.987567",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-21 20:56:09.893162",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-10-21 21:07:38.443261",
			"approval": true
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "[sorry for slow response - i've been abroad since wednesday]\n\nLGTM, except that i think that nat{} should be written as nat(nil)\nthroughout, which will save an unnecessary allocation each time, AFAICS.\n\nOn 21 October 2011 01:24,  <gri@golang.org> wrote:\n> Reviewers: rog,\n>\n> Message:\n> Hello rogpeppe@gmail.com (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> big: (make) zero Rat values usable w/o initialization\n>\n> - various cleanups along the way\n> - includes pending CL 5312044\n>\n> Please review this at http://codereview.appspot.com/5301056/\n>\n> Affected files:\n> \u00a0M src/pkg/big/int.go\n> \u00a0M src/pkg/big/int_test.go\n> \u00a0M src/pkg/big/nat.go\n> \u00a0M src/pkg/big/nat_test.go\n> \u00a0M src/pkg/big/rat.go\n> \u00a0M src/pkg/big/rat_test.go\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-10-24 10:48:35.501825",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=f1a2043b33cd ***\n\nbig: usable zero Rat values without need for explicit initialization\n\n- no explicit API change, but new(big.Rat) now creates a big.Rat value\n  of 0 that is immediately usable, in sync. w/ the conventions elsewhere\n- various cleanups along the way\n\nR=r\nCC=golang-dev\nhttp://codereview.appspot.com/5301056",
			"disapproval": false,
			"date": "2011-10-21 21:11:39.668016",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 24 October 2011 12:48, roger peppe <rogpeppe@gmail.com> wrote:\n> LGTM, except that i think that nat{} should be written as nat(nil)\n> throughout, which will save an unnecessary allocation each time, AFAICS.\n\nactually it occurs to me that an easy compiler optimisation would be to\nuse the same data pointer when making all zero-length slices,\nthus avoiding the need for nat{} to do an allocation.\n\ni can't off-hand think of anything this would break, as slices\naren't comparable, and there's no element to take the address of.\n(Printf(\"%p\") is one place non-unsafe code can observe it, but\ni don't see that's necessarily a problem).\n",
			"disapproval": false,
			"date": "2011-10-24 12:09:32.114779",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 5301056: big: usable zero Rat values without need for explicit i...",
	"created": "2011-10-20 23:18:45.760825",
	"patchsets": [
		1,
		3,
		3001,
		5001,
		7001,
		10001,
		12001
	],
	"modified": "2011-10-24 10:48:35.562200",
	"closed": true,
	"issue": 5301056
}