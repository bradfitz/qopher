{
	"description": "gc: Don't pollute the xmethod list with non-methods.\n\nFixes issue 2355.\n\nI have a test, but not sure if it's worth adding.  Instead i've made\nthe patching-over in reflect.c methods more fatal and more descriptive.",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Nov 3, 2011 at 15:31, Russ Cox <rsc@golang.org> wrote:\n\n> thistuple > 0\n>\n\n\nyes\n",
			"disapproval": false,
			"date": "2011-11-03 14:36:03.847438",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-03 14:09:15.933520",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "hold on a sec, getthis() != T is not a good test for being a method..\n\nOn Thu, Nov 3, 2011 at 15:09, <lvd@google.com> wrote:\n\n> Reviewers: rsc,\n>\n> Message:\n> Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> gc: Don't pollute the xmethod list with non-methods.\n>\n> Fixes issue 2355.\n>\n> I have a test, but not sure if it's worth adding.  Instead i've made\n> the patching-over in reflect.c methods more fatal and more descriptive.\n>\n> Please review this at http://codereview.appspot.com/**5302082/<http://codereview.appspot.com/5302082/>\n>\n> Affected files:\n>  M src/cmd/gc/reflect.c\n>  M src/cmd/gc/subr.c\n>\n>\n> Index: src/cmd/gc/reflect.c\n> ==============================**==============================**=======\n> --- a/src/cmd/gc/reflect.c\n> +++ b/src/cmd/gc/reflect.c\n> @@ -158,10 +158,13 @@\n>        // generating code if necessary.\n>        a = nil;\n>        for(f=mt->xmethod; f; f=f->down) {\n> -               if(f->type->etype != TFUNC)\n> -                       continue;\n>                if(f->etype != TFIELD)\n> -                       fatal(\"methods: not field\");\n> +                       fatal(\"methods: not field %T\", f);\n> +               if (f->type->etype != TFUNC || !getthisx(f->type))\n> +                       fatal(\"non-method on %T method %S %T\\n\", mt,\n> f->sym, f);\n> +               if (!getthisx(f->type)->type)\n> +                       fatal(\"receiver with no type on %T method %S\n> %T\\n\", mt, f->sym, f);\n> +\n>                method = f->sym;\n>                if(method == nil)\n>                        continue;\n> Index: src/cmd/gc/subr.c\n> ==============================**==============================**=======\n> --- a/src/cmd/gc/subr.c\n> +++ b/src/cmd/gc/subr.c\n> @@ -2178,8 +2178,11 @@\n>                        if(c == 0)\n>                                continue;\n>                        if(c == 1) {\n> -                               sl->good = 1;\n> -                               sl->field = f;\n> +                               // addot1 may have dug out arbitrary\n> fields, we only want methods.\n> +                               if(f->type->etype == TFUNC &&\n> getthis(f->type)) {\n> +                                       sl->good = 1;\n> +                                       sl->field = f;\n> +                               } // else print(\"not adding non-method %T:\n> %T\\n\", sl->field, f);\n>                        }\n>                        break;\n>                }\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-11-03 14:23:35.739884",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/11/03 14:36:03, lvd wrote:\n> On Thu, Nov 3, 2011 at 15:31, Russ Cox <mailto:rsc@golang.org> wrote:\n> \n> > thistuple > 0\n> >\n> \n> \n> yes\n\nready now.  ptal.",
			"disapproval": false,
			"date": "2011-11-03 14:41:54.274294",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=e1e97028a407 ***\n\ngc: Don't pollute the xmethod list with non-methods.\n\nFixes issue 2355.\n\nI have a test, but not sure if it's worth adding.  Instead i've made\nthe patching-over in reflect.c methods more fatal and more descriptive.\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5302082",
			"disapproval": false,
			"date": "2011-11-03 16:51:20.733170",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "thistuple > 0\n",
			"disapproval": false,
			"date": "2011-11-03 14:31:07.497733",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5302082/diff/15001/test/fixedbugs/bug372.go\nFile test/fixedbugs/bug372.go (right):\n\nhttp://codereview.appspot.com/5302082/diff/15001/test/fixedbugs/bug372.go#newcode1\ntest/fixedbugs/bug372.go:1: // $G $D/$F.go && $L $F.$A && ./$A.out || echo BUG: issue2355\nbug372 please\n\nhttp://codereview.appspot.com/5302082/diff/15001/test/fixedbugs/bug372.go#newcode6\ntest/fixedbugs/bug372.go:6: \nadd\n\n// Issue 2355\n\nhere",
			"disapproval": false,
			"date": "2011-11-03 16:48:31.363618",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5302082/diff/13001/src/cmd/gc/reflect.c\nFile src/cmd/gc/reflect.c (right):\n\nhttp://codereview.appspot.com/5302082/diff/13001/src/cmd/gc/reflect.c#newcode163\nsrc/cmd/gc/reflect.c:163: if (f->type->etype != TFUNC || f->type->thistuple == 0)\ns/if (/if(/\nlike rest of file",
			"disapproval": false,
			"date": "2011-11-03 16:47:33.654125",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5302082/diff/15001/test/fixedbugs/bug372.go\nFile test/fixedbugs/bug372.go (right):\n\nhttp://codereview.appspot.com/5302082/diff/15001/test/fixedbugs/bug372.go#newcode1\ntest/fixedbugs/bug372.go:1: // $G $D/$F.go && $L $F.$A && ./$A.out || echo BUG: issue2355\nOn 2011/11/03 16:48:31, rsc wrote:\n> bug372 please\n\nDone.\n\nhttp://codereview.appspot.com/5302082/diff/15001/test/fixedbugs/bug372.go#newcode6\ntest/fixedbugs/bug372.go:6: \nOn 2011/11/03 16:48:31, rsc wrote:\n> add\n> \n> // Issue 2355\n> \n> here\n\nDone.",
			"disapproval": false,
			"date": "2011-11-03 16:50:39.919962",
			"approval": false
		}
	],
	"owner_email": "lvd@google.com",
	"private": false,
	"base_url": "",
	"owner": "lvd",
	"subject": "code review 5302082: gc: Don't pollute the xmethod list with non-methods.",
	"created": "2011-11-03 14:07:42.036430",
	"patchsets": [
		1,
		1001,
		3001,
		8001,
		9001,
		11001,
		13001,
		15001,
		8003
	],
	"modified": "2011-11-03 16:51:21.652215",
	"closed": true,
	"issue": 5302082
}