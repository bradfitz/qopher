{
	"description": "godoc, exp/ebnf, exp/types, go/scanner, scanner: use rune\n\nAPI question: is a scanner token an int or a rune?\n\nSince the rune is the common case and the token values\nare the special (negative) case, I chose rune.  But it could\neasily go the other way.",
	"cc": [
		"gri@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello gri (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-19 17:27:49.554742",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Updated verifyChar.\n",
			"disapproval": false,
			"date": "2011-10-19 18:09:47.113795",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\na couple of comments.\n\nHaving token be rune seems ok.\n\nhttp://codereview.appspot.com/5301049/diff/5001/src/pkg/exp/ebnf/ebnf.go\nFile src/pkg/exp/ebnf/ebnf.go (right):\n\nhttp://codereview.appspot.com/5301049/diff/5001/src/pkg/exp/ebnf/ebnf.go#newcode166\nsrc/pkg/exp/ebnf/ebnf.go:166: func (v *verifier) verifyChar(x *Token) int {\ns/int/rune/\n\nhttp://codereview.appspot.com/5301049/diff/5001/src/pkg/exp/ebnf/ebnf.go#newcode173\nsrc/pkg/exp/ebnf/ebnf.go:173: return int(ch)\nreturn ch\n\nhttp://codereview.appspot.com/5301049/diff/5001/src/pkg/go/scanner/scanner.go\nFile src/pkg/go/scanner/scanner.go (right):\n\nhttp://codereview.appspot.com/5301049/diff/5001/src/pkg/go/scanner/scanner.go#newcode254\nsrc/pkg/go/scanner/scanner.go:254: return int(ch - '0')\nI think the fallback should be int in this case and then the conversion would fall away.\n\nhttp://codereview.appspot.com/5301049/diff/5001/src/pkg/go/scanner/scanner.go#newcode256\nsrc/pkg/go/scanner/scanner.go:256: return int(ch - 'a' + 10)\nditto\n\nhttp://codereview.appspot.com/5301049/diff/5001/src/pkg/go/scanner/scanner.go#newcode258\nsrc/pkg/go/scanner/scanner.go:258: return int(ch - 'A' + 10)\nditto\n\nhttp://codereview.appspot.com/5301049/diff/5001/src/pkg/scanner/scanner.go\nFile src/pkg/scanner/scanner.go (right):\n\nhttp://codereview.appspot.com/5301049/diff/5001/src/pkg/scanner/scanner.go#newcode349\nsrc/pkg/scanner/scanner.go:349: return int(ch - '0')\nwith a fallback to int, this conversion would fall away",
			"disapproval": false,
			"date": "2011-10-19 17:59:04.281853",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> src/pkg/go/scanner/scanner.go:254: return int(ch - '0')\n> I think the fallback should be int in this case and then the conversion\n> would fall away.\n\nch is a variable, not a constant.  It sounds like\nyou are proposing that for this one case,\nthe subtraction T - constant does not\nhave type T.  We've had so much trouble\nnailing down the special cases around shift.\nI am hesitant to consider adding special cases\nfor other operations.\n\nThis code is turning a rune expression into\nan int expression.  It seems okay to need a\nconversion.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-10-19 18:06:53.401087",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Oct 19, 2011 at 11:06 AM, Russ Cox <rsc@golang.org> wrote:\n\n> > src/pkg/go/scanner/scanner.go:254: return int(ch - '0')\n> > I think the fallback should be int in this case and then the conversion\n> > would fall away.\n>\n> ch is a variable, not a constant.  It sounds like\n> you are proposing that for this one case,\n> the subtraction T - constant does not\n> have type T.  We've had so much trouble\n> nailing down the special cases around shift.\n> I am hesitant to consider adding special cases\n> for other operations.\n>\n\nNo, I am not proposing this. I was just wrong here. I realized afterwards\nwhen reviewing other code.\n- gri\n\n>\n> This code is turning a rune expression into\n> an int expression.  It seems okay to need a\n> conversion.\n>\n\nyes\n\n>\n> Russ\n>\n",
			"disapproval": false,
			"date": "2011-10-19 18:15:26.756020",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=e187cd9d5999 ***\n\ngodoc, exp/ebnf, exp/types, go/scanner, scanner: use rune\n\nAPI question: is a scanner token an int or a rune?\n\nSince the rune is the common case and the token values\nare the special (negative) case, I chose rune.  But it could\neasily go the other way.\n\nR=gri\nCC=golang-dev\nhttp://codereview.appspot.com/5301049",
			"disapproval": false,
			"date": "2011-10-26 05:20:24.718091",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5301049: godoc, exp/ebnf, exp/types, go/scanner, scanner: use rune",
	"created": "2011-10-19 03:54:50.572022",
	"patchsets": [
		1,
		2001,
		5001,
		1002,
		14001
	],
	"modified": "2011-10-26 05:20:25.920398",
	"closed": true,
	"issue": 5301049
}