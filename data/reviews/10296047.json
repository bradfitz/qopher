{
	"description": "go.tools/go/types: fix Type.Deref (!)",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"adonovan@google.com"
	],
	"messages": [
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10296047/diff/1/go/types/types.go\nFile go/types/types.go (right):\n\nhttps://codereview.appspot.com/10296047/diff/1/go/types/types.go#newcode384\ngo/types/types.go:384: func (t *Named) Deref() Type     { return t }\nThis change breaks the specified behaviour, and probably a lot of code in go.tools/ssa which relies on it.\n\nWhy do you want to make this change?",
			"disapproval": false,
			"date": "2013-06-19 21:13:52.583710",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.tools",
			"disapproval": false,
			"date": "2013-06-19 21:11:04.393010",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Actually, it doesn't break anything because where it matters, named types\r\nwith underlying types of the form *T are not permitted.\r\nThe old if actually hard to understand and subtly wrong in some cases.\r\n- gri\r\n\r\n\r\nOn Wed, Jun 19, 2013 at 2:13 PM, <adonovan@google.com> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/10296047/diff/1/go/types/**types.go<https://codereview.appspot.com/10296047/diff/1/go/types/types.go>\r\n> File go/types/types.go (right):\r\n>\r\n> https://codereview.appspot.**com/10296047/diff/1/go/types/**\r\n> types.go#newcode384<https://codereview.appspot.com/10296047/diff/1/go/types/types.go#newcode384>\r\n> go/types/types.go:384: func (t *Named) Deref() Type     { return t }\r\n> This change breaks the specified behaviour, and probably a lot of code\r\n> in go.tools/ssa which relies on it.\r\n>\r\n> Why do you want to make this change?\r\n>\r\n> https://codereview.appspot.**com/10296047/<https://codereview.appspot.com/10296047/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-06-19 21:15:45.965350",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 19 June 2013 17:15, Robert Griesemer <gri@golang.org> wrote:\r\n\r\n> Actually, it doesn't break anything because where it matters, named types\r\n> with underlying types of the form *T are not permitted.\r\n>\r\n\r\nAre you sure?   I found several places already where I'm skeptical:\r\n- len on a named pointer-to-array type\r\n- x.f where typeof(x) is a named pointer to struct\r\n- &T{...} where T is a named pointer type.\r\n- range over a named pointer-to-array type\r\n\r\nThe old if actually hard to understand and subtly wrong in some cases.\r\n>\r\n\r\nWel, it still breaks the method's spec, so you'll need to update that.\r\nAlso, methods that exist on only a single concrete type perhaps don't\r\nwarrant being included in the type interface.\r\n",
			"disapproval": false,
			"date": "2013-06-19 21:23:01.140440",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Fair enough. I'll reconsider.\r\nThis change was prompted by a case for the new form of Deref. Maybe the\r\nright thing to do is to have a local specialized form.\r\n- gri\r\n\r\n\r\nOn Wed, Jun 19, 2013 at 2:23 PM, Alan Donovan <adonovan@google.com> wrote:\r\n\r\n> On 19 June 2013 17:15, Robert Griesemer <gri@golang.org> wrote:\r\n>\r\n>> Actually, it doesn't break anything because where it matters, named types\r\n>> with underlying types of the form *T are not permitted.\r\n>>\r\n>\r\n> Are you sure?   I found several places already where I'm skeptical:\r\n> - len on a named pointer-to-array type\r\n> - x.f where typeof(x) is a named pointer to struct\r\n> - &T{...} where T is a named pointer type.\r\n> - range over a named pointer-to-array type\r\n>\r\n> The old if actually hard to understand and subtly wrong in some cases.\r\n>>\r\n>\r\n> Wel, it still breaks the method's spec, so you'll need to update that.\r\n> Also, methods that exist on only a single concrete type perhaps don't\r\n> warrant being included in the type interface.\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-06-19 21:28:24.779500",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-06-19 21:29:48.386990",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 10296047: go.tools/go/types: fix Type.Deref (!)",
	"created": "2013-06-19 21:11:01.116410",
	"patchsets": [
		1,
		3001
	],
	"modified": "2013-06-19 21:29:49.654630",
	"closed": true,
	"issue": 10296047
}