{
	"description": "go.tools/go/types: improved LookupFieldOrMethod, ast.Nodes for Scopes\n\n- LookupFieldOrMethod now computes if any indirection was found on the\n  way to an embedded field/method: this is the only information required\n  to determine if a result method is in the method set.\n\n- Scopes now provide a link to the ast.Node responsible for them.\n\nAlso:\n- don't permit unsafe.Offsetof on method values\n- report ambiguities in field/method lookup errors\n- added some missing checks for anonymous fields\n- lots of new tests\n\nFixes issue 5499.",
	"cc": [
		"adonovan@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.tools",
			"disapproval": false,
			"date": "2013-06-20 22:36:03.980010",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=7a0800d10ab0&repo=tools ***\n\ngo.tools/go/types: improved LookupFieldOrMethod, ast.Nodes for Scopes\n\n- LookupFieldOrMethod now computes if any indirection was found on the\n  way to an embedded field/method: this is the only information required\n  to determine if a result method is in the method set.\n\n- Scopes now provide a link to the ast.Node responsible for them.\n\nAlso:\n- don't permit unsafe.Offsetof on method values\n- report ambiguities in field/method lookup errors\n- added some missing checks for anonymous fields\n- lots of new tests\n\nFixes issue 5499.\n\nR=adonovan\nCC=golang-dev\nhttps://codereview.appspot.com/10411045",
			"disapproval": false,
			"date": "2013-06-21 15:57:30.197290",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10411045/diff/31001/go/types/check.go\nFile go/types/check.go (right):\n\nhttps://codereview.appspot.com/10411045/diff/31001/go/types/check.go#newcode26\ngo/types/check.go:26: // TODO(gri) Decide if this should be a permanent (always present)\nOn 2013/06/21 13:54:26, adonovan wrote:\n> I don't think it should be always-present because this would pin all ASTs for\n> the entire program for all clients of the SSA IR.\n> \n> A mode flag sounds good.\nack\n\nhttps://codereview.appspot.com/10411045/diff/31001/go/types/expr.go\nFile go/types/expr.go (right):\n\nhttps://codereview.appspot.com/10411045/diff/31001/go/types/expr.go#newcode1390\ngo/types/expr.go:1390: if recv := obj.typ.(*Signature).recv; recv != nil {\nOn 2013/06/21 13:54:26, adonovan wrote:\n> This pattern appears three times.  Can it be profitably factored?\n\nIt's 2x the same, once slightly different. Yes, it should be factored eventually. Added TODO.\n\nhttps://codereview.appspot.com/10411045/diff/31001/go/types/lookup.go\nFile go/types/lookup.go (right):\n\nhttps://codereview.appspot.com/10411045/diff/31001/go/types/lookup.go#newcode223\ngo/types/lookup.go:223: // Otherwise it returns (typ, false).\nOn 2013/06/21 13:54:26, adonovan wrote:\n> Document how it differs from typ.Deref().\n\nDone.\n\nhttps://codereview.appspot.com/10411045/diff/31001/go/types/testdata/decls3.src\nFile go/types/testdata/decls3.src (right):\n\nhttps://codereview.appspot.com/10411045/diff/31001/go/types/testdata/decls3.src#newcode93\ngo/types/testdata/decls3.src:93: P1 /* ERROR \"cannot be a pointer\" */\nOn 2013/06/21 13:54:26, adonovan wrote:\n> What about unsafe.Pointer?  Is it subject to the same restriction as pointer\n> types?  The spec is unclear; gc treats it as a basic type.\n\nunsafe.Pointers are not regular pointers (they cannot be dereferenciated) - they are pointer-like but behave more like uint64s. Added test cases.\n\nhttps://codereview.appspot.com/10411045/diff/31001/go/types/testdata/expr3.src\nFile go/types/testdata/expr3.src (right):\n\nhttps://codereview.appspot.com/10411045/diff/31001/go/types/testdata/expr3.src#newcode109\ngo/types/testdata/expr3.src:109: _ = T /* ERROR \"not in method set\" */ .m\nOn 2013/06/21 13:54:26, adonovan wrote:\n> Is this test redundant w.r.t L112 or does it verify something more?\n> \n> Similarly L110 vs L113.\n\nI guess it is. But turning it around, L112 and L113 test also that the types match. Leaving for symmetry.\n\nhttps://codereview.appspot.com/10411045/diff/31001/go/types/testdata/methodsets.src\nFile go/types/testdata/methodsets.src (right):\n\nhttps://codereview.appspot.com/10411045/diff/31001/go/types/testdata/methodsets.src#newcode30\ngo/types/testdata/methodsets.src:30: _ = T0.v0\nOn 2013/06/21 13:54:26, adonovan wrote:\n> Consider asserting the types like so:\n> \n> var _ func(T0) = T0.v0\n> ...\n\nDone.\n\nhttps://codereview.appspot.com/10411045/diff/31001/go/types/testdata/methodsets.src#newcode33\ngo/types/testdata/methodsets.src:33: _ = (*T0).v0\nOn 2013/06/21 13:54:26, adonovan wrote:\n> What's the identity of the *Func object inferred for this?\n> Is it the same as T0.v0, or is there a separate object for the indirection\n> wrapper?\n\nThere's no indirection wrapper created yet.",
			"disapproval": false,
			"date": "2013-06-21 15:55:58.198580",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/10411045/diff/31001/go/types/check.go\nFile go/types/check.go (right):\n\nhttps://codereview.appspot.com/10411045/diff/31001/go/types/check.go#newcode26\ngo/types/check.go:26: // TODO(gri) Decide if this should be a permanent (always present)\nI don't think it should be always-present because this would pin all ASTs for the entire program for all clients of the SSA IR.\n\nA mode flag sounds good.\n\nhttps://codereview.appspot.com/10411045/diff/31001/go/types/expr.go\nFile go/types/expr.go (right):\n\nhttps://codereview.appspot.com/10411045/diff/31001/go/types/expr.go#newcode1390\ngo/types/expr.go:1390: if recv := obj.typ.(*Signature).recv; recv != nil {\nThis pattern appears three times.  Can it be profitably factored?\n\nhttps://codereview.appspot.com/10411045/diff/31001/go/types/lookup.go\nFile go/types/lookup.go (right):\n\nhttps://codereview.appspot.com/10411045/diff/31001/go/types/lookup.go#newcode223\ngo/types/lookup.go:223: // Otherwise it returns (typ, false).\nDocument how it differs from typ.Deref().\n\nhttps://codereview.appspot.com/10411045/diff/31001/go/types/testdata/decls3.src\nFile go/types/testdata/decls3.src (right):\n\nhttps://codereview.appspot.com/10411045/diff/31001/go/types/testdata/decls3.src#newcode93\ngo/types/testdata/decls3.src:93: P1 /* ERROR \"cannot be a pointer\" */\nWhat about unsafe.Pointer?  Is it subject to the same restriction as pointer types?  The spec is unclear; gc treats it as a basic type.\n\nhttps://codereview.appspot.com/10411045/diff/31001/go/types/testdata/expr3.src\nFile go/types/testdata/expr3.src (right):\n\nhttps://codereview.appspot.com/10411045/diff/31001/go/types/testdata/expr3.src#newcode109\ngo/types/testdata/expr3.src:109: _ = T /* ERROR \"not in method set\" */ .m\nIs this test redundant w.r.t L112 or does it verify something more?\n\nSimilarly L110 vs L113.\n\nhttps://codereview.appspot.com/10411045/diff/31001/go/types/testdata/methodsets.src\nFile go/types/testdata/methodsets.src (right):\n\nhttps://codereview.appspot.com/10411045/diff/31001/go/types/testdata/methodsets.src#newcode30\ngo/types/testdata/methodsets.src:30: _ = T0.v0\nConsider asserting the types like so:\n\nvar _ func(T0) = T0.v0\n...\n\nhttps://codereview.appspot.com/10411045/diff/31001/go/types/testdata/methodsets.src#newcode33\ngo/types/testdata/methodsets.src:33: _ = (*T0).v0\nWhat's the identity of the *Func object inferred for this?\nIs it the same as T0.v0, or is there a separate object for the indirection wrapper?",
			"disapproval": false,
			"date": "2013-06-21 13:54:26.388450",
			"approval": true
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 10411045: go.tools/go/types: return indirection information from ...",
	"created": "2013-06-19 21:46:02.577690",
	"patchsets": [
		1,
		3,
		4001,
		7001,
		10001,
		13001,
		16001,
		19001,
		23001,
		24020,
		29001,
		31001,
		38001
	],
	"modified": "2013-06-21 15:57:31.533630",
	"closed": true,
	"issue": 10411045
}