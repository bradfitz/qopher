{
	"description": "run.bash: set appropriate ulimits\n    mainly for NetBSD/OpenBSD.",
	"cc": [
		"bradfitz@golang.org",
		"r@golang.org",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This feels wrong.\r\n\r\nWhy would you want to lower if it's already higher?\r\n\r\nAnd if it's lower, you won't have permission to raise it, unless you're\r\nroot.\r\n\r\ne.g.\r\nba12:~ bradfitz$ ulimit -n\r\n2560\r\nba12:~ bradfitz$ ulimit -n 5\r\nba12:~ bradfitz$ ulimit -n 6\r\n-bash: ulimit: open files: cannot modify limit: Operation not permitted\r\n\r\n\r\nOn Mon, Aug 20, 2012 at 10:34 PM, <minux.ma@gmail.com> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> run.bash: set appropriate ulimits\r\n>     mainly for NetBSD/OpenBSD.\r\n>\r\n> Please review this at http://codereview.appspot.com/**6453154/<http://codereview.appspot.com/6453154/>\r\n>\r\n> Affected files:\r\n>   M src/run.bash\r\n>\r\n>\r\n> Index: src/run.bash\r\n> ==============================**==============================**=======\r\n> --- a/src/run.bash\r\n> +++ b/src/run.bash\r\n> @@ -14,6 +14,11 @@\r\n>  # no core files, please\r\n>  ulimit -c 0\r\n>\r\n> +# we need at least 256 open files (for NetBSD/OpenBSD)\r\n> +ulimit -n 256\r\n> +# raise data limit on NetBSD, as test/nilptr.go needs ~300MB of bss\r\n> +ulimit -d 524288\r\n> +\r\n>  # allow all.bash to avoid double-build of everything\r\n>  rebuild=true\r\n>  if [ \"$1\" = \"--no-rebuild\" ]; then\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-08-20 13:23:41.905580",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Aug 20, 2012 at 9:23 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n\r\n> Why would you want to lower if it's already higher?\r\n>\r\n> And if it's lower, you won't have permission to raise it, unless you're\r\n> root.\r\n>\r\n> e.g.\r\n> ba12:~ bradfitz$ ulimit -n\r\n> 2560\r\n> ba12:~ bradfitz$ ulimit -n 5\r\n> ba12:~ bradfitz$ ulimit -n 6\r\n> -bash: ulimit: open files: cannot modify limit: Operation not permitted\r\n>\r\nbut this ulimit runs in its own subshell, it won't affect your environment.\r\nand i think it can also help catching leaking fd in tests (besides relieving\r\nuser from reading respective go-wiki article before running ./all.bash)\r\n\r\n(of course, i assume nobody run \". run.bash\", it's just unreasonable, and\r\nwill surely cause other problems, for example, we \"set -e\" in run.bash)\r\n\r\nif it is acceptable, i think we can add OS specific checks to make.bash\r\nalso.\r\nfor example, we need rthread on OpenBSD.\r\n",
			"disapproval": false,
			"date": "2012-08-20 13:37:13.332780",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-08-20 12:34:28.366950",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping?",
			"disapproval": false,
			"date": "2012-08-27 20:02:05.165560",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6453154/diff/1003/src/run.bash\nFile src/run.bash (right):\n\nhttp://codereview.appspot.com/6453154/diff/1003/src/run.bash#newcode20\nsrc/run.bash:20: ulimit -d 524288\nthese changes are for netbsd, but are set globally. it still feels wrong.",
			"disapproval": false,
			"date": "2012-08-27 20:12:48.898190",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Aug 28, 2012 at 4:12 AM, <r@golang.org> wrote:\r\n>\r\n> http://codereview.appspot.com/**6453154/diff/1003/src/run.**bash#newcode20<http://codereview.appspot.com/6453154/diff/1003/src/run.bash#newcode20>\r\n> src/run.bash:20: ulimit -d 524288\r\n> these changes are for netbsd, but are set globally. it still feels\r\n> wrong.\r\n>\r\nHow about we do this:\r\nulimit -S -d $(ulimit -H -d)\r\n\r\nit's only a best effort setting, and it will have minimum impact on\r\nexisting systems.\r\n",
			"disapproval": false,
			"date": "2012-08-28 08:15:29.158940",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Sep 1, 2012 at 12:05 AM, <rsc@golang.org> wrote:\r\n\r\n> http://codereview.appspot.com/**6453154/diff/12001/src/run.**\r\n> bash#newcode18<http://codereview.appspot.com/6453154/diff/12001/src/run.bash#newcode18>\r\n> src/run.bash:18: [ \"$(ulimit -H -n)\" != \"unlimited\" ] && ulimit -S -n\r\n> $(ulimit -H -n)\r\n> You can't use x && y unless x is always true. If x is false, the set -e\r\n> above should make the script exit. You can use !x || y.\r\n>\r\nstrange, this script runs to completion:\r\n#!/bin/bash\r\nset -e\r\na=\"B\"\r\n[ $a ==  \"A\" ] && echo a is A\r\necho status=$?\r\necho done\r\n\r\n>\r\n> But I don't understand this logic either. Why not just\r\n>\r\nOn Mac OS X 10.6.8 at least, this command:\r\nulimit -S -n $(ulimit -H -n)\r\nfails with: -bash: ulimit: open files: cannot modify limit: Invalid argument\r\nbecause $(ulimit -H -n) is \"unlimited\".\r\n",
			"disapproval": false,
			"date": "2012-09-01 08:29:56.289800",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n",
			"disapproval": false,
			"date": "2012-09-10 15:40:46.240600",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It must be yet another strange inconsistent corner of bash and set -e.\r\nIt might still be nice to avoid.\r\n\r\nHow about this?\r\n\r\n# Raise soft limits to hard limits for NetBSD/OpenBSD.\r\n# We need at least 256 files and ~300 MB of bss.\r\n# On OS X ulimit -S rejects 'unlimited'.\r\n[ \"$(ulimit -H -n)\" == \"unlimited\" ] || ulimit -S -n $(ulimit -H -n)\r\n[ \"$(ulimit -H -d)\" == \"unlimited\" ] || ulimit -S -n $(ulimit -H -d)\r\n",
			"disapproval": false,
			"date": "2012-09-01 13:58:47.077970",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6453154/diff/12001/src/run.bash\nFile src/run.bash (right):\n\nhttp://codereview.appspot.com/6453154/diff/12001/src/run.bash#newcode18\nsrc/run.bash:18: [ \"$(ulimit -H -n)\" != \"unlimited\" ] && ulimit -S -n $(ulimit -H -n)\nYou can't use x && y unless x is always true. If x is false, the set -e above should make the script exit. You can use !x || y.\n\nBut I don't understand this logic either. Why not just\n\n# Raise soft limits to hard limits on NetBSD/OpenBSD.\n# We need at least 256 files and ~300 MB of bss.\nulimit -S -n $(ulimit -H -n)\nulimit -S -d $(ulimit -H -d)",
			"disapproval": false,
			"date": "2012-08-31 16:05:35.365460",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.",
			"disapproval": false,
			"date": "2012-09-02 19:08:11.783490",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=a97b81d2600f ***\n\nrun.bash: set appropriate ulimits\n    mainly for NetBSD/OpenBSD.\n\nR=bradfitz, r, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6453154",
			"disapproval": false,
			"date": "2012-09-16 17:11:41.770910",
			"approval": false
		}
	],
	"owner_email": "minux.ma@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "minux",
	"subject": "code review 6453154: run.bash: set appropriate ulimits",
	"created": "2012-08-20 11:57:15.163340",
	"patchsets": [
		1,
		4,
		1003,
		7001,
		10001,
		12001,
		9002,
		17002,
		10003,
		9004
	],
	"modified": "2012-09-16 17:11:45.077700",
	"closed": true,
	"issue": 6453154
}