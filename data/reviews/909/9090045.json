{
	"description": "runtime: add simple malloc benchmarks\nAllocs of size 16 can bypass atomic set of the allocated bit, while allocs of size 8 can not.\nAllocs with and w/o type info hit different paths inside of malloc.\nCurrent results on linux/amd64:\nBenchmarkMalloc8\t50000000\t        43.6 ns/op\nBenchmarkMalloc16\t50000000\t        46.7 ns/op\nBenchmarkMallocTypeInfo8\t50000000\t        61.3 ns/op\nBenchmarkMallocTypeInfo16\t50000000\t        63.5 ns/op\n",
	"cc": [
		"golang-dev@googlegroups.com",
		"remyoudompheng@gmail.com",
		"minux.ma@gmail.com",
		"bradfitz@golang.org",
		"iant@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-05-13 07:20:04.757700",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Maybe you want to call b.SetBytes(sizeof(int)) ?\r\nOr test various sizes?\r\n\r\nWhat do you want to measure?\r\n\r\n2013/5/13, dvyukov@google.com <dvyukov@google.com>:\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://dvyukov%40google.com@code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> runtime: add simple malloc benchmark\r\n>\r\n> Please review this at https://codereview.appspot.com/9090045/\r\n>\r\n> Affected files:\r\n>    A src/pkg/runtime/malloc_test.go\r\n>\r\n>\r\n> Index: src/pkg/runtime/malloc_test.go\r\n> ===================================================================\r\n> new file mode 100644\r\n> --- /dev/null\r\n> +++ b/src/pkg/runtime/malloc_test.go\r\n> @@ -0,0 +1,21 @@\r\n> +// Copyright 2013 The Go Authors. All rights reserved.\r\n> +// Use of this source code is governed by a BSD-style\r\n> +// license that can be found in the LICENSE file.\r\n> +\r\n> +package runtime_test\r\n> +\r\n> +import (\r\n> +\t\"testing\"\r\n> +\t\"unsafe\"\r\n> +)\r\n> +\r\n> +func BenchmarkMalloc(b *testing.B) {\r\n> +\tvar x uintptr\r\n> +\tfor i := 0; i < b.N; i++ {\r\n> +\t\tp := new(int)\r\n> +\t\tx ^= uintptr(unsafe.Pointer(p))\r\n> +\t}\r\n> +\tif x == 42 {\r\n> +\t\tb.Log(\"hit\")\r\n> +\t}\r\n> +}\r\n>\r\n>\r\n> --\r\n>\r\n> ---\r\n> You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-13 07:24:59.699030",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/13 07:24:59, remyoudompheng wrote:\n> Maybe you want to call b.SetBytes(sizeof(int)) ?\n\nNo, I don't. Will it be useful?\n\n> Or test various sizes?\n\nNeither.\n\n> What do you want to measure?\n\nI want to measure malloc() overhead.",
			"disapproval": false,
			"date": "2013-05-13 07:30:13.993470",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/13 07:30:13, dvyukov wrote:\n> On 2013/05/13 07:24:59, remyoudompheng wrote:\n> > Maybe you want to call b.SetBytes(sizeof(int)) ?\n> \n> No, I don't. Will it be useful?\n> \n> > Or test various sizes?\n> \n> Neither.\n> \n> > What do you want to measure?\n> \n> I want to measure malloc() overhead.\n\nPTAL\nI've added 4 benchmarks now:\nAllocs of size 16 can bypass atomic set of the allocated bit, while allocs of size 8 can not.\nAllocs with and w/o type info hit different paths inside of malloc.",
			"disapproval": false,
			"date": "2013-05-13 09:50:07.062120",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9090045/diff/12001/src/pkg/runtime/malloc_test.go\nFile src/pkg/runtime/malloc_test.go (right):\n\nhttps://codereview.appspot.com/9090045/diff/12001/src/pkg/runtime/malloc_test.go#newcode18\nsrc/pkg/runtime/malloc_test.go:18: if x == 42 {\ni'm curious as why add this?\n\nhttps://codereview.appspot.com/9090045/diff/12001/src/pkg/runtime/malloc_test.go#newcode34\nsrc/pkg/runtime/malloc_test.go:34: func BenchmarkMallocTypeInfo8(b *testing.B) {\ntechnically, 8 here is only correct for 64-bit platforms.\nhow about BenchmarkMallockTypeInfo1Word?\n\nsame below.",
			"disapproval": false,
			"date": "2013-05-13 11:39:38.769950",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9090045/diff/12001/src/pkg/runtime/malloc_test.go\nFile src/pkg/runtime/malloc_test.go (right):\n\nhttps://codereview.appspot.com/9090045/diff/12001/src/pkg/runtime/malloc_test.go#newcode18\nsrc/pkg/runtime/malloc_test.go:18: if x == 42 {\nOn 2013/05/13 11:39:38, minux wrote:\n> i'm curious as why add this?\nnevermind, i see. why not just assign\nx to a global variable?",
			"disapproval": false,
			"date": "2013-05-13 12:08:09.495370",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/9090045/diff/12001/src/pkg/runtime/malloc_test.go\nFile src/pkg/runtime/malloc_test.go (right):\n\nhttps://codereview.appspot.com/9090045/diff/12001/src/pkg/runtime/malloc_test.go#newcode18\nsrc/pkg/runtime/malloc_test.go:18: if x == 42 {\nOn 2013/05/13 12:08:09, minux wrote:\n> On 2013/05/13 11:39:38, minux wrote:\n> > i'm curious as why add this?\n> nevermind, i see. why not just assign\n> x to a global variable?\n\nDone.\n\nhttps://codereview.appspot.com/9090045/diff/12001/src/pkg/runtime/malloc_test.go#newcode34\nsrc/pkg/runtime/malloc_test.go:34: func BenchmarkMallocTypeInfo8(b *testing.B) {\nOn 2013/05/13 11:39:38, minux wrote:\n> technically, 8 here is only correct for 64-bit platforms.\n> how about BenchmarkMallockTypeInfo1Word?\n> \n> same below.\n\n8 is the minimum allocation size, so it will be rounded up.\nhowever 2 words on 32-bits will fit into 8 bytes, I've fixed that.",
			"disapproval": false,
			"date": "2013-05-13 15:24:01.940370",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9090045/diff/19001/src/pkg/runtime/malloc_test.go\nFile src/pkg/runtime/malloc_test.go (right):\n\nhttps://codereview.appspot.com/9090045/diff/19001/src/pkg/runtime/malloc_test.go#newcode32\nsrc/pkg/runtime/malloc_test.go:32: func BenchmarkMallocTypeInfo8(b *testing.B) {\nif the 8 means \"8 bytes\", that's only true on 64-bit arches.",
			"disapproval": false,
			"date": "2013-05-13 16:24:50.330310",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9090045/diff/19001/src/pkg/runtime/malloc_test.go\nFile src/pkg/runtime/malloc_test.go (right):\n\nhttps://codereview.appspot.com/9090045/diff/19001/src/pkg/runtime/malloc_test.go#newcode32\nsrc/pkg/runtime/malloc_test.go:32: func BenchmarkMallocTypeInfo8(b *testing.B) {\nOn 2013/05/13 16:24:50, bradfitz wrote:\n> if the 8 means \"8 bytes\", that's only true on 64-bit arches.\nas this particular comment is given twice, we probably\nshould add comment here why this will always allocate 8-byte.\n\nor better yet, use something like this to be explicit:\nstruct { p [8 / unsafe.Sizeof(uintptr(0))]*int }",
			"disapproval": false,
			"date": "2013-05-13 18:25:12.080170",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-05-15 14:46:45.031420",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=1ecea2734d4b ***\n\nruntime: add simple malloc benchmarks\nAllocs of size 16 can bypass atomic set of the allocated bit, while allocs of size 8 can not.\nAllocs with and w/o type info hit different paths inside of malloc.\nCurrent results on linux/amd64:\nBenchmarkMalloc8\t50000000\t        43.6 ns/op\nBenchmarkMalloc16\t50000000\t        46.7 ns/op\nBenchmarkMallocTypeInfo8\t50000000\t        61.3 ns/op\nBenchmarkMallocTypeInfo16\t50000000\t        63.5 ns/op\n\nR=golang-dev, remyoudompheng, minux.ma, bradfitz, iant\nCC=golang-dev\nhttps://codereview.appspot.com/9090045",
			"disapproval": false,
			"date": "2013-05-15 17:22:45.884700",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/13 18:25:12, minux wrote:\n> https://codereview.appspot.com/9090045/diff/19001/src/pkg/runtime/malloc_test.go\n> File src/pkg/runtime/malloc_test.go (right):\n> \n> https://codereview.appspot.com/9090045/diff/19001/src/pkg/runtime/malloc_test.go#newcode32\n> src/pkg/runtime/malloc_test.go:32: func BenchmarkMallocTypeInfo8(b *testing.B) {\n> On 2013/05/13 16:24:50, bradfitz wrote:\n> > if the 8 means \"8 bytes\", that's only true on 64-bit arches.\n> as this particular comment is given twice, we probably\n> should add comment here why this will always allocate 8-byte.\n> \n> or better yet, use something like this to be explicit:\n> struct { p [8 / unsafe.Sizeof(uintptr(0))]*int }\n\n\nDone\nPTAL",
			"disapproval": false,
			"date": "2013-05-15 13:15:49.034370",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.",
			"disapproval": false,
			"date": "2013-05-15 14:03:58.001170",
			"approval": true
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 9090045: runtime: add simple malloc benchmark",
	"created": "2013-05-13 06:59:33.921420",
	"patchsets": [
		1,
		2001,
		5001,
		7001,
		12001,
		19001,
		26001,
		31001
	],
	"modified": "2013-05-15 17:22:47.205020",
	"closed": true,
	"issue": 9090045
}