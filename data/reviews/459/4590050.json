{
	"description": "net, syscall: interface for windows",
	"cc": [
		"mikioh.mikioh@gmail.com",
		"alex.brainman@gmail.com",
		"rsc@golang.org",
		"vincent.vanackere@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/06/13 00:56:50, mattn wrote:\n> Hello mailto:golang-dev@googlecode.com, mailto:mikioh.mikioh@gmail.com (cc:\n> mailto:golang-dev@googlegroups.com),\n> \n> Please take another look.\n\nIf we submit your change, no go program will be able to run on Windows 2000:\n\n$ ./8.out.exe\npanic: syscall: could not GetProcAddress for GetAdaptersAddresses\n\nruntime.panic+0x9e /root/hg/go/src/pkg/runtime/proc.c:1060\n        runtime.panic(0x47f13c, 0x109d01a0)\nsyscall.getSysProcAddr+0xa0 /root/hg/go/src/pkg/syscall/syscall_windows.go:94\n        syscall.getSysProcAddr(0x77340000, 0x4bcd90, 0x14, 0x77990d96, 0x43c765, ...)\nsyscall.init+0xe01 /root/hg/go/src/pkg/syscall/exec_windows.go:-1899\n        syscall.init()\nos.init+0x4b /root/hg/go/src/pkg/os/signal_windows.go:26\n        os.init()\nstrings.init+0x45 /root/hg/go/src/pkg/strings/strings.go:572\n        strings.init()\nregexp.init+0x46 /root/hg/go/src/pkg/regexp/regexp.go:1487\n        regexp.init()\nmain.init+0x41 /root/hg/go/src/pkg/net/_testmain.go:43\n        main.init()\nruntime.mainstart+0x5 /root/hg/go/src/pkg/runtime/386/asm.s:91\n        runtime.mainstart()\nruntime.goexit /root/hg/go/src/pkg/runtime/proc.c:178\n        runtime.goexit()\n----- goroutine created by -----\n_rt0_386+0xbf /root/hg/go/src/pkg/runtime/386/asm.s:80\n\nPerhaps, you could find a way to do what you're trying to do that is compatible with Windows 2000.\n\nAlternatively, we could:\n\n- Decide that we do not support Windows 2000 anymore;\n- Redesign way we load dlls in syscall: at this moment we just load them all at startup, we could change it to load them selectively, on \"as used\" basis, but I do not know of a simple and efficient way of doing it yet.\n\nAlex",
			"disapproval": false,
			"date": "2011-06-14 02:57:10.380575",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Thank you for your review.\n\nhttp://codereview.appspot.com/4590050/diff/4001/src/pkg/net/interface_windows.go\nFile src/pkg/net/interface_windows.go (right):\n\nhttp://codereview.appspot.com/4590050/diff/4001/src/pkg/net/interface_windows.go#newcode5\nsrc/pkg/net/interface_windows.go:5: // Network interface identification for BSD variants\nOn 2011/06/10 12:24:03, mikioh wrote:\n> s/BSD variants/Windows/\n\nDone.\n\nhttp://codereview.appspot.com/4590050/diff/4001/src/pkg/net/interface_windows.go#newcode17\nsrc/pkg/net/interface_windows.go:17: iff_up          = 1 << 0\nOn 2011/06/10 12:24:03, mikioh wrote:\n> Please hold on these changes until CL4602044 get merged.\n\nI think so. :)\n\nhttp://codereview.appspot.com/4590050/diff/4001/src/pkg/net/interface_windows.go#newcode25\nsrc/pkg/net/interface_windows.go:25: func (ifi *Interface) IsUp() bool {\nOn 2011/06/10 12:24:03, mikioh wrote:\n> Likewise.\n\nok",
			"disapproval": false,
			"date": "2011-06-10 12:34:53.026452",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Thanks for fixing this.\n\nhttp://codereview.appspot.com/4590050/diff/9006/src/pkg/net/interface_windows.go\nFile src/pkg/net/interface_windows.go (right):\n\nhttp://codereview.appspot.com/4590050/diff/9006/src/pkg/net/interface_windows.go#newcode270\nsrc/pkg/net/interface_windows.go:270: //sys\tgetAdaptersAddresses(family uint32, flags uint32, reserved uintptr, adapterAddresses *_IP_ADAPTER_ADDRESSES, sizeOfPointer *uint32) (errcode uint32) = iphlpapi.GetAdaptersAddresses\nI'm confused.  These comments only have an effect in syscall, but this is package net.  What's going on?  Is there a file missing?",
			"disapproval": false,
			"date": "2011-06-14 15:25:48.062354",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/06/15 02:08:56, brainman wrote:\n> On 2011/06/15 01:52:59, mattn wrote:\n> > \n> > interfaceTable2 is using GetAdaptersAddresses() ...\n> \n> I propose we forget about GetAdaptersAddresses() for now. I think it is more\n> important to keep code simple and compatible with as many OSes used as we can at\n> this moment. Your proposed code is far from simple. If you compare just size of\n> your source code to other OSes:\n> \n>  4023 interface_bsd.go     \n>  4343 interface_linux.go   \n> 16906 interface_windows.go \n> \n> it is not even close. Also, since you moved all your code from syscall package,\n> your code won't use any of our \"os api code generation\" facilities and have to\n> be handcrafted from no on. What about 64bit version?\n> \n> > i.e. it shouldn't back into syscall.\n> \n> I don't agree.\n> \n> Alex\n\nI uploaded changes.",
			"disapproval": false,
			"date": "2011-06-15 04:52:32.978115",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"vincent.vanackere@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4590050/diff/12009/src/pkg/net/interface_windows.go\nFile src/pkg/net/interface_windows.go (right):\n\nhttp://codereview.appspot.com/4590050/diff/12009/src/pkg/net/interface_windows.go#newcode71\nsrc/pkg/net/interface_windows.go:71: if row.OperStatus == syscall.IF_OPER_STATUS_CONNECTED || row.OperStatus == syscall.IF_OPER_STATUS_OPERATIONAL || row.AdminStatus == syscall.MIB_IF_ADMIN_STATUS_UP {\nPlease refer to MIB_IFROW and MIB_IF_ROW2 structure properly.\n\nif you look at the IFROW, if-statement should be:\nif row.AdminStatus == MIB_IF_ADMIN_STATUS_UP &&\n(row.OperStatus == MIB_IF_OPER_STATUS_CONNECTED ||\nrow.OperStatus == MIB_IF_OPER_STATUS_OPERATIONAL) {\n// Not sure MIB_IF_OPER_STATUS_OPERATIONAL is equiv to UP... what's this?\n\nif you look at the IF_ROW2, if-statement should be:\nif row.AdminStatus == NET_IF_ADMIN_STATUS_UP &&\nif row.OperStatus == IfOperStatusUp {",
			"disapproval": false,
			"date": "2011-06-15 13:24:22.630948",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlecode.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttp://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-06-10 09:50:52.060787",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/06/15 02:30:55, mattn wrote:\n> \n> BTW, We may have to think about delay loading of APIs.\n\nVery good idea.\n\nThis program:\n\npackage main\n\nfunc main() {\n  println(\"Hello\")\n}\n\nwill not use any syscalls, but will load every dll we use in all go packages. I don't think it is very cheap.\n\nIf you can think of a simple solution, I'm happy to listen.\n\nAlex",
			"disapproval": false,
			"date": "2011-06-15 02:39:38.367259",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "CL description: net, syscall: interface for windows might be better.\n\nhttp://codereview.appspot.com/4590050/diff/4001/src/pkg/net/interface_windows.go\nFile src/pkg/net/interface_windows.go (right):\n\nhttp://codereview.appspot.com/4590050/diff/4001/src/pkg/net/interface_windows.go#newcode5\nsrc/pkg/net/interface_windows.go:5: // Network interface identification for BSD variants\ns/BSD variants/Windows/\n\nhttp://codereview.appspot.com/4590050/diff/4001/src/pkg/net/interface_windows.go#newcode17\nsrc/pkg/net/interface_windows.go:17: iff_up          = 1 << 0\nPlease hold on these changes until CL4602044 get merged.\n\nhttp://codereview.appspot.com/4590050/diff/4001/src/pkg/net/interface_windows.go#newcode25\nsrc/pkg/net/interface_windows.go:25: func (ifi *Interface) IsUp() bool {\nLikewise.",
			"disapproval": false,
			"date": "2011-06-10 12:24:03.796049",
			"approval": false
		},
		{
			"sender": "vincent.vanackere@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Jun 15, 2011 at 4:08 AM,  <alex.brainman@gmail.com> wrote:\n> On 2011/06/15 01:52:59, mattn wrote:\n>\n>> interfaceTable2 is using GetAdaptersAddresses() ...\n>\n> I propose we forget about GetAdaptersAddresses() for now. I think it is\n> more important to keep code simple and compatible with as many OSes used\n> as we can at this moment. Your proposed code is far from simple. If you\n> compare just size of your source code to other OSes:\n\nSorry for coming so late into this discussion, but since Microsoft has\nofficially ended support for Windows 2000 since July 13, 2010, don't\nyou think it would be better to instead simplify the code the other\nway by giving up Windows 2000 compatibility... ?  AFAICT a lot of\nWindows software vendors have also already stopped supporting Win2K at\nall.\nWindows XP should be a much less constraining common denominator and\nhas been available since October 2001...\n\nVincent\n",
			"disapproval": false,
			"date": "2011-06-15 12:43:29.312368",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I updated CL.\n\nAll of function that manipulating Interface/Addr are confined to interface_windows.go\n\nThis should be working on Win2K, WinXp, or later.",
			"disapproval": false,
			"date": "2011-06-14 08:48:21.663720",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/06/15 02:39:38, brainman wrote:\n> On 2011/06/15 02:30:55, mattn wrote:\n> > \n> > BTW, We may have to think about delay loading of APIs.\n> \n> Very good idea.\n> \n> This program:\n> \n> package main\n> \n> func main() {\n>   println(\"Hello\")\n> }\n> \n> will not use any syscalls, but will load every dll we use in all go packages. I\n> don't think it is very cheap.\n> \n> If you can think of a simple solution, I'm happy to listen.\n> \n> Alex\n\nok, lets discuss in another topic.",
			"disapproval": false,
			"date": "2011-06-15 04:52:10.632035",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Thank you\n\nhttp://codereview.appspot.com/4590050/diff/13007/src/pkg/net/interface_windows.go\nFile src/pkg/net/interface_windows.go (right):\n\nhttp://codereview.appspot.com/4590050/diff/13007/src/pkg/net/interface_windows.go#newcode18\nsrc/pkg/net/interface_windows.go:18: if ifi == nil {\nOn 2011/06/15 10:59:25, mikioh wrote:\n> Interface struct no longer takes any method.\n> Please refer to other OSes.\n\nDone.\n\nhttp://codereview.appspot.com/4590050/diff/13007/src/pkg/net/interface_windows.go#newcode114\nsrc/pkg/net/interface_windows.go:114: if row.OperStatus == syscall.IF_OPER_STATUS_CONNECTED || row.OperStatus == syscall.IF_OPER_STATUS_OPERATIONAL {\nOn 2011/06/15 10:59:25, mikioh wrote:\n> Not sure Windows but no need to check AdminStatus here?\n> If MS did implement MIB-like network interface management,\n> there will be administratively down but operational up state.\n\nDone.",
			"disapproval": false,
			"date": "2011-06-15 11:16:40.085561",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"vincent.vanackere@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello mikioh.mikioh@gmail.com, alex.brainman@gmail.com, rsc@golang.org, vincent.vanackere@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-06-16 00:31:34.485661",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I tested your \"win2k\" version here. And it works just fine. TestInterface* tests list my interfaces and addresses correctly.\n\nWhy don't you make your \"win2k\" version to be used everywhere. I think it is good enough for now (none of windows net functions do ip6 anyway).\n\nAnd, please, put everything back into syscall package, now that you've found functions that will work for you on any windows os. Let's do what all other packages do.\n\nThank you.\n\nAlex",
			"disapproval": false,
			"date": "2011-06-15 01:32:48.725743",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I did't do really checking.\n\nI checked this patch with specifyign isWin2k = true forcely for Windows2000.\nI hope that someone can check it. :)\n\nhttp://codereview.appspot.com/4590050/diff/9006/src/pkg/net/interface_windows.go\nFile src/pkg/net/interface_windows.go (right):\n\nhttp://codereview.appspot.com/4590050/diff/9006/src/pkg/net/interface_windows.go#newcode270\nsrc/pkg/net/interface_windows.go:270: //sys\tgetAdaptersAddresses(family uint32, flags uint32, reserved uintptr, adapterAddresses *_IP_ADAPTER_ADDRESSES, sizeOfPointer *uint32) (errcode uint32) = iphlpapi.GetAdaptersAddresses\nOn 2011/06/14 15:25:48, rsc wrote:\n> I'm confused.  These comments only have an effect in syscall, but this is\n> package net.  What's going on?  Is there a file missing?\n> \n\nWindows2000 don't have GetAdaptersAddres(), But it have GetIpAddrTable().\nAnd windows200 don't support IPv6 APIs.\n\nThen net package should choose APIs as checking the API is enabled.\nI generated API wrapper with using mksyscall_windows.pl . And I left it for re-gerateing wrapper of APIs.\nBut I won't change it. I'll remove it.",
			"disapproval": false,
			"date": "2011-06-15 00:12:11.272971",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/06/15 01:32:48, brainman wrote:\n> I tested your \"win2k\" version here. And it works just fine. TestInterface* tests\n> list my interfaces and addresses correctly.\n\nThank you for checking.\n\n> Why don't you make your \"win2k\" version to be used everywhere. I think it is\n> good enough for now (none of windows net functions do ip6 anyway).\n\nGetIfTable/GetIfEntry don't work with IPv6. If some functions will be fixed to work on IPv6, this part will be work well.\n\n> And, please, put everything back into syscall package, now that you've found\n> functions that will work for you on any windows os. Let's do what all other\n> packages do.\n\ninterfaceTable2 is using GetAdaptersAddresses() yet. And windows2000 don't have GetAdaptersAddresses().\nWhen the API is not found, syscall occur error and panic. net package is calling API dynamically.\ni.e. it shouldn't back into syscall.\n\nThanks.\n\n- Yasuhiro Matsumoto",
			"disapproval": false,
			"date": "2011-06-15 01:52:59.349140",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"vincent.vanackere@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4590050/diff/12009/src/pkg/net/interface_windows.go\nFile src/pkg/net/interface_windows.go (right):\n\nhttp://codereview.appspot.com/4590050/diff/12009/src/pkg/net/interface_windows.go#newcode71\nsrc/pkg/net/interface_windows.go:71: if row.OperStatus == syscall.IF_OPER_STATUS_CONNECTED || row.OperStatus == syscall.IF_OPER_STATUS_OPERATIONAL || row.AdminStatus == syscall.MIB_IF_ADMIN_STATUS_UP {\nOn 2011/06/15 13:24:22, mikioh wrote:\n> Please refer to MIB_IFROW and MIB_IF_ROW2 structure properly.\n> \n> if you look at the IFROW, if-statement should be:\n> if row.AdminStatus == MIB_IF_ADMIN_STATUS_UP &&\n> (row.OperStatus == MIB_IF_OPER_STATUS_CONNECTED ||\n> row.OperStatus == MIB_IF_OPER_STATUS_OPERATIONAL) {\n> // Not sure MIB_IF_OPER_STATUS_OPERATIONAL is equiv to UP... what's this?\n> \n> if you look at the IF_ROW2, if-statement should be:\n> if row.AdminStatus == NET_IF_ADMIN_STATUS_UP &&\n> if row.OperStatus == IfOperStatusUp {\n\nYou can see the spec of OperStatus at:\nhttp://msdn.microsoft.com/en-us/library/aa366836(v=vs.85).aspx\n\nAnd dwAdminStatus at:\nhttp://msdn.microsoft.com/en-us/library/aa366362(v=vs.85).aspx\n\nIt should equiv Up with your first code. I had mis-reading that. I'll fix in later.\n(I'm not from windows now)\n\nThanks.",
			"disapproval": false,
			"date": "2011-06-15 17:02:52.358429",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlecode.com, mikioh.mikioh@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-06-13 00:56:50.335000",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"vincent.vanackere@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4590050/diff/12009/src/pkg/net/interface_windows.go\nFile src/pkg/net/interface_windows.go (right):\n\nhttp://codereview.appspot.com/4590050/diff/12009/src/pkg/net/interface_windows.go#newcode71\nsrc/pkg/net/interface_windows.go:71: if row.OperStatus == syscall.IF_OPER_STATUS_CONNECTED || row.OperStatus == syscall.IF_OPER_STATUS_OPERATIONAL || row.AdminStatus == syscall.MIB_IF_ADMIN_STATUS_UP {\nOn 2011/06/15 17:02:52, mattn wrote:\n> On 2011/06/15 13:24:22, mikioh wrote:\n> > Please refer to MIB_IFROW and MIB_IF_ROW2 structure properly.\n> > \n> > if you look at the IFROW, if-statement should be:\n> > if row.AdminStatus == MIB_IF_ADMIN_STATUS_UP &&\n> > (row.OperStatus == MIB_IF_OPER_STATUS_CONNECTED ||\n> > row.OperStatus == MIB_IF_OPER_STATUS_OPERATIONAL) {\n> > // Not sure MIB_IF_OPER_STATUS_OPERATIONAL is equiv to UP... what's this?\n> > \n> > if you look at the IF_ROW2, if-statement should be:\n> > if row.AdminStatus == NET_IF_ADMIN_STATUS_UP &&\n> > if row.OperStatus == IfOperStatusUp {\n> \n> You can see the spec of OperStatus at:\n> http://msdn.microsoft.com/en-us/library/aa366836%28v=vs.85%29.aspx\n> \n> And dwAdminStatus at:\n> http://msdn.microsoft.com/en-us/library/aa366362%28v=vs.85%29.aspx\n> \n> It should equiv Up with your first code. I had mis-reading that. I'll fix in\n> later.\n> (I'm not from windows now)\n> \n> Thanks.\n\nDone.",
			"disapproval": false,
			"date": "2011-06-16 00:31:02.563969",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/06/15 01:52:59, mattn wrote:\n> \n> interfaceTable2 is using GetAdaptersAddresses() ...\n\nI propose we forget about GetAdaptersAddresses() for now. I think it is more important to keep code simple and compatible with as many OSes used as we can at this moment. Your proposed code is far from simple. If you compare just size of your source code to other OSes:\n\n 4023 interface_bsd.go     \n 4343 interface_linux.go   \n16906 interface_windows.go \n\nit is not even close. Also, since you moved all your code from syscall package, your code won't use any of our \"os api code generation\" facilities and have to be handcrafted from no on. What about 64bit version?\n\n> i.e. it shouldn't back into syscall.\n\nI don't agree.\n\nAlex",
			"disapproval": false,
			"date": "2011-06-15 02:08:56.029074",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello mikioh.mikioh@gmail.com, alex.brainman@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-06-15 01:08:46.835531",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/06/15 00:12:11, mattn wrote:\n> I did't do really checking.\n> \n> I checked this patch with specifyign isWin2k = true forcely for Windows2000.\n> I hope that someone can check it. :)\n> \n> http://codereview.appspot.com/4590050/diff/9006/src/pkg/net/interface_windows.go\n> File src/pkg/net/interface_windows.go (right):\n> \n> http://codereview.appspot.com/4590050/diff/9006/src/pkg/net/interface_windows.go#newcode270\n> src/pkg/net/interface_windows.go:270: //sys\tgetAdaptersAddresses(family uint32,\n> flags uint32, reserved uintptr, adapterAddresses *_IP_ADAPTER_ADDRESSES,\n> sizeOfPointer *uint32) (errcode uint32) = iphlpapi.GetAdaptersAddresses\n> On 2011/06/14 15:25:48, rsc wrote:\n> > I'm confused.  These comments only have an effect in syscall, but this is\n> > package net.  What's going on?  Is there a file missing?\n> > \n> \n> Windows2000 don't have GetAdaptersAddres(), But it have GetIpAddrTable().\n> And windows200 don't support IPv6 APIs.\n> \n> Then net package should choose APIs as checking the API is enabled.\n> I generated API wrapper with using mksyscall_windows.pl . And I left it for\n> re-gerateing wrapper of APIs.\n> But I won't change it. I'll remove it.\n\nrsc, If you think that this have better to left for future re-generating, I'll keep it.",
			"disapproval": false,
			"date": "2011-06-15 00:55:24.773791",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello mikioh.mikioh@gmail.com, alex.brainman@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-06-15 11:16:09.941068",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/06/15 02:08:56, brainman wrote:\n> On 2011/06/15 01:52:59, mattn wrote:\n> > \n> > interfaceTable2 is using GetAdaptersAddresses() ...\n> \n> I propose we forget about GetAdaptersAddresses() for now. I think it is more\n> important to keep code simple and compatible with as many OSes used as we can at\n> this moment. Your proposed code is far from simple. If you compare just size of\n> your source code to other OSes:\n> \n>  4023 interface_bsd.go     \n>  4343 interface_linux.go   \n> 16906 interface_windows.go \n> \n> it is not even close. Also, since you moved all your code from syscall package,\n> your code won't use any of our \"os api code generation\" facilities and have to\n> be handcrafted from no on. What about 64bit version?\n> \n> > i.e. it shouldn't back into syscall.\n> \n> I don't agree.\n\nAh, I understood your said. I agreed.\nWe should re-generate zsyscall_windows_xxx.go for 64bit.\n\nI'll update interface_windows.go for moving \"loading APIs\", \"structure\", \"const definitions\" to syscall package.\nI will take some times for the changes, Sorry.\n\nBTW, We may have to think about delay loading of APIs.",
			"disapproval": false,
			"date": "2011-06-15 02:30:55.239092",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello mikioh.mikioh@gmail.com, alex.brainman@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-06-15 04:52:44.277525",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4590050/diff/13007/src/pkg/net/interface_windows.go\nFile src/pkg/net/interface_windows.go (right):\n\nhttp://codereview.appspot.com/4590050/diff/13007/src/pkg/net/interface_windows.go#newcode18\nsrc/pkg/net/interface_windows.go:18: if ifi == nil {\nInterface struct no longer takes any method.\nPlease refer to other OSes.\n\nhttp://codereview.appspot.com/4590050/diff/13007/src/pkg/net/interface_windows.go#newcode114\nsrc/pkg/net/interface_windows.go:114: if row.OperStatus == syscall.IF_OPER_STATUS_CONNECTED || row.OperStatus == syscall.IF_OPER_STATUS_OPERATIONAL {\nNot sure Windows but no need to check AdminStatus here?\nIf MS did implement MIB-like network interface management,\nthere will be administratively down but operational up state.",
			"disapproval": false,
			"date": "2011-06-15 10:59:25.483575",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"vincent.vanackere@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4590050/diff/36007/src/pkg/net/interface_windows.go\nFile src/pkg/net/interface_windows.go (right):\n\nhttp://codereview.appspot.com/4590050/diff/36007/src/pkg/net/interface_windows.go#newcode35\nsrc/pkg/net/interface_windows.go:35: return nil, os.NewSyscallError(\"GetAdaptersInfo\", int(e))\ns/int(e)/e/\n\nhttp://codereview.appspot.com/4590050/diff/36007/src/pkg/net/interface_windows.go#newcode43\nsrc/pkg/net/interface_windows.go:43: return nil, os.NewSyscallError(\"Socket\", int(e))\ns/int(e)/e/\n\nhttp://codereview.appspot.com/4590050/diff/36007/src/pkg/net/interface_windows.go#newcode52\nsrc/pkg/net/interface_windows.go:52: return nil, os.NewSyscallError(\"WSAIoctl\", int(e))\ns/int(e)/e/\n\nhttp://codereview.appspot.com/4590050/diff/36007/src/pkg/net/interface_windows.go#newcode82\nsrc/pkg/net/interface_windows.go:82: return nil, os.NewSyscallError(\"GetIfEntry\", int(e))\ns/int(e)/e/\n\nhttp://codereview.appspot.com/4590050/diff/36007/src/pkg/net/interface_windows.go#newcode116\nsrc/pkg/net/interface_windows.go:116: name := bytePtrToString(&ai.AdapterName[0])\nThis is what my name is: \"{F2CEBFA0-4E73-4791-AA3A-56CC7BC19F88}\". I don't think it is better then what you had before. But I have no better suggestion, so I'll leave it up to you to decide.\n\nhttp://codereview.appspot.com/4590050/diff/36007/src/pkg/syscall/syscall_windows.go\nFile src/pkg/syscall/syscall_windows.go (right):\n\nhttp://codereview.appspot.com/4590050/diff/36007/src/pkg/syscall/syscall_windows.go#newcode471\nsrc/pkg/syscall/syscall_windows.go:471: //sys\tWSAIoctl(s int32, iocc uint32, inbuf uintptr, cbif uint32, outbuf uintptr, cbob uint32, cbbr *uint32, overlapped *Overlapped, completionRoutine uintptr) (errno int) [failretval==-1] = ws2_32.WSAIoctl\ns/inbuf uintptr/inbuf *byte/\ns/outbuf uintptr/outbuf *byte/\n\nthen you could use variables like b := make([]byte, 100) without unsafe.Pointer typecast.\n\nhttp://codereview.appspot.com/4590050/diff/36007/src/pkg/syscall/syscall_windows.go#newcode492\nsrc/pkg/syscall/syscall_windows.go:492: //sys\tGetIfEntry(pIfRow *MIB_IFROW) (errcode uint32) = iphlpapi.GetIfEntry\ns/errcode uint32/errcode int/\n\nAll our errors are int.\n\nhttp://codereview.appspot.com/4590050/diff/36007/src/pkg/syscall/syscall_windows.go#newcode493\nsrc/pkg/syscall/syscall_windows.go:493: //sys\tGetAdaptersInfo(ai *IP_ADAPTER_INFO, ol *uint32) (errcode uint32) = iphlpapi.GetAdaptersInfo\ns/errcode uint32/errcode int/\n\nhttp://codereview.appspot.com/4590050/diff/36007/src/pkg/syscall/ztypes_windows_386.go\nFile src/pkg/syscall/ztypes_windows_386.go (right):\n\nhttp://codereview.appspot.com/4590050/diff/36007/src/pkg/syscall/ztypes_windows_386.go#newcode577\nsrc/pkg/syscall/ztypes_windows_386.go:577: type SockaddrGen [24]byte // TODO(mattn)\nPut TODO on the line above and provide a description of what todo.\n\nhttp://codereview.appspot.com/4590050/diff/36007/src/pkg/syscall/ztypes_windows_386.go#newcode579\nsrc/pkg/syscall/ztypes_windows_386.go:579: type INTERFACE_INFO struct {\ns/INTERFACE_INFO/InterfaceInfo/\n\nlike all other types in here.\n\nSame for all new types you've introduced.",
			"disapproval": false,
			"date": "2011-06-22 05:47:45.725275",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"vincent.vanackere@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4590050/diff/38001/src/pkg/net/interface_windows.go\nFile src/pkg/net/interface_windows.go (right):\n\nhttp://codereview.appspot.com/4590050/diff/38001/src/pkg/net/interface_windows.go#newcode54\nsrc/pkg/net/interface_windows.go:54: }\nReplace the above by a call to something like this:\n\nfunc getAdapterList() (*syscall.IP_ADAPTER_INFO, os.Error) {\n        b := make([]byte, 1000)\n        l := uint32(len(b))\n        a := (*syscall.IP_ADAPTER_INFO)(unsafe.Pointer(&b[0]))\n        e := syscall.GetAdaptersInfo(a, &l)\n        if e == syscall.ERROR_BUFFER_OVERFLOW {\n                b = make([]byte, l)\n                a = (*syscall.IP_ADAPTER_INFO)(unsafe.Pointer(&b[0]))\n                e = syscall.GetAdaptersInfo(a, &l)\n        }\n        if e != 0 {\n                return nil, os.NewSyscallError(\"GetAdaptersInfo\", int(e))\n        }\n        return a, nil\n}\n\nhttp://codereview.appspot.com/4590050/diff/38001/src/pkg/net/interface_windows.go#newcode56\nsrc/pkg/net/interface_windows.go:56: s, err := syscall.Socket(syscall.AF_INET, syscall.SOCK_DGRAM, syscall.IPPROTO_UDP)\nAgain, I think your code will look simpler, if you put following into a separate function, like\n\nfunc getInterfaces() ([]syscall.INTERFACE_INFO, os.Error)\n\nhttp://codereview.appspot.com/4590050/diff/38001/src/pkg/net/interface_windows.go#newcode68\nsrc/pkg/net/interface_windows.go:68: }\nYou should truncate iinfo to the length populated by WSAIoctl. From the manual:\n\n>>>\nThe number of interfaces returned (number of structures returned in the buffer pointed to by lpvOutBuffer parameter) can be determined based on the actual length of the output buffer returned in lpcbBytesReturned parameter.\n<<<\n\nhttp://codereview.appspot.com/4590050/diff/38001/src/pkg/net/interface_windows.go#newcode70\nsrc/pkg/net/interface_windows.go:70: for ai != nil {\nfor ; ai != nil; ai = ai.Next {\n\nhttp://codereview.appspot.com/4590050/diff/38001/src/pkg/net/interface_windows.go#newcode112\nsrc/pkg/net/interface_windows.go:112: name := string(row.Descr[:row.DescrLen-1])\nI don't think it is appropriate you use row.Descr for the \"name\" field. I take it \"name\" should uniquely identify an interface, I'm not sure if row.Descr will do that.\n\nI don't have an alternative, so leave it up to you.\n\nhttp://codereview.appspot.com/4590050/diff/38001/src/pkg/net/interface_windows.go#newcode113\nsrc/pkg/net/interface_windows.go:113: wcl := syscall.MultiByteToWideChar(syscall.GetACP(), syscall.MB_PRECOMPOSED, &row.Descr[0], int32(row.DescrLen), nil, 0)\nI would put that in a separate function, something like\n\nfunction MultiByteToString(...) (string, errno int)\n\nMaybe even have it in syscall, so others can use it too.\n\nhttp://codereview.appspot.com/4590050/diff/38001/src/pkg/net/interface_windows.go#newcode113\nsrc/pkg/net/interface_windows.go:113: wcl := syscall.MultiByteToWideChar(syscall.GetACP(), syscall.MB_PRECOMPOSED, &row.Descr[0], int32(row.DescrLen), nil, 0)\nPlease, don't call syscall.MultiByteToWideChar with empty return buffer. Try give it something reasonable first time round.\n\nhttp://codereview.appspot.com/4590050/diff/38001/src/pkg/net/interface_windows.go#newcode154\nsrc/pkg/net/interface_windows.go:154: }\nReplace the above by a call to getAdapterList, as before.\n\nhttp://codereview.appspot.com/4590050/diff/38001/src/pkg/net/interface_windows.go#newcode156\nsrc/pkg/net/interface_windows.go:156: for ai != nil {\nfor ; ai != nil; ai = ai.Next {\n\nhttp://codereview.appspot.com/4590050/diff/38001/src/pkg/syscall/syscall_windows.go\nFile src/pkg/syscall/syscall_windows.go (right):\n\nhttp://codereview.appspot.com/4590050/diff/38001/src/pkg/syscall/syscall_windows.go#newcode471\nsrc/pkg/syscall/syscall_windows.go:471: //sys\tWSAIoctl(s int32, iocc uint32, inbuf uintptr, cbif uint32, outbuf uintptr, cbob uint32, cbbr *uint32, overlapped *Overlapped, completionRoutine uintptr) (errno int) [failretval==-1] = ws2_32.WSAIoctl\ns/inbuf uintptr/inbuf *byte/\ns/outbuf uintptr/outbuf *byte/\n\nthen you could use variables like\nb := make([]byte, 100)\nwithout unsafe.Pointer typecast.\n\nhttp://codereview.appspot.com/4590050/diff/38001/src/pkg/syscall/syscall_windows.go#newcode494\nsrc/pkg/syscall/syscall_windows.go:494: //sys\tMultiByteToWideChar(cp uint32, flags uint32, mbs *byte, mbl int32, wcs *uint16, wcl int32) (written int32) = kernel32.MultiByteToWideChar\ns/written int32/written uint32, errno int/\n\nhttp://codereview.appspot.com/4590050/diff/38001/src/pkg/syscall/ztypes_windows_386.go\nFile src/pkg/syscall/ztypes_windows_386.go (right):\n\nhttp://codereview.appspot.com/4590050/diff/38001/src/pkg/syscall/ztypes_windows_386.go#newcode584\nsrc/pkg/syscall/ztypes_windows_386.go:584: type SockaddrGen [24]byte // TODO(mattn)\nPut TODO on the line above and provide a description of what todo.\n\nhttp://codereview.appspot.com/4590050/diff/38001/src/pkg/syscall/ztypes_windows_386.go#newcode586\nsrc/pkg/syscall/ztypes_windows_386.go:586: type INTERFACE_INFO struct {\ns/INTERFACE_INFO/InterfaceInfo/\n\nlike all other types in here.\n\nSame for all new types you've introduced.",
			"disapproval": false,
			"date": "2011-06-22 01:30:37.903314",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"vincent.vanackere@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM.\n\nI'll leave it to Windows experts because I saw the reliable \nevidence of many people still love Windows yesterday.\n\nhttp://codereview.appspot.com/4590050/diff/19008/src/pkg/net/interface_windows.go\nFile src/pkg/net/interface_windows.go (right):\n\nhttp://codereview.appspot.com/4590050/diff/19008/src/pkg/net/interface_windows.go#newcode50\nsrc/pkg/net/interface_windows.go:50: piftable := (*syscall.MIB_IFTABLE)(unsafe.Pointer(&heap[0]))\nno hungarian notation pls.\n\nhttp://codereview.appspot.com/4590050/diff/19008/src/pkg/net/interface_windows.go#newcode56\nsrc/pkg/net/interface_windows.go:56: var ptable *syscall.IP_INTERFACE_NAME_INFO\nno hungarian notation pls.\n\nhttp://codereview.appspot.com/4590050/diff/19008/src/pkg/net/interface_windows.go#newcode88\nsrc/pkg/net/interface_windows.go:88: if tables[n].AccessType&syscall.IF_ACCESS_POINT_TO_MULTI_POINT != 0 {\nIs this the right way to determine a multicast access capability \non Windows?\n\nI believe NBMA/P-MP are different capabilities on different \nconcept. For example, InARP/NHRP can help us (I mean, layer 3 \nguys) to make a broadcast, multicast access over NBMA/P-MP \nlinks. I'd like to suggest that if you are not sure this stuff, \nleave it or use it just as it is.\n\nhttp://codereview.appspot.com/4590050/diff/19008/src/pkg/net/interface_windows.go#newcode131\nsrc/pkg/net/interface_windows.go:131: pipinfo := (*syscall.MIB_IPADDRTABLE)(unsafe.Pointer(&heap[0]))\nno hungarian notation pls.",
			"disapproval": false,
			"date": "2011-06-17 01:05:45.374757",
			"approval": true
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"vincent.vanackere@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4590050/diff/36007/src/pkg/net/interface_windows.go\nFile src/pkg/net/interface_windows.go (right):\n\nhttp://codereview.appspot.com/4590050/diff/36007/src/pkg/net/interface_windows.go#newcode35\nsrc/pkg/net/interface_windows.go:35: return nil, os.NewSyscallError(\"GetAdaptersInfo\", int(e))\nOn 2011/06/22 05:47:45, brainman wrote:\n> s/int(e)/e/\n\nDone.\n\nhttp://codereview.appspot.com/4590050/diff/36007/src/pkg/net/interface_windows.go#newcode43\nsrc/pkg/net/interface_windows.go:43: return nil, os.NewSyscallError(\"Socket\", int(e))\nOn 2011/06/22 05:47:45, brainman wrote:\n> s/int(e)/e/\n\nDone.\n\nhttp://codereview.appspot.com/4590050/diff/36007/src/pkg/net/interface_windows.go#newcode52\nsrc/pkg/net/interface_windows.go:52: return nil, os.NewSyscallError(\"WSAIoctl\", int(e))\nOn 2011/06/22 05:47:45, brainman wrote:\n> s/int(e)/e/\n\nDone.\n\nhttp://codereview.appspot.com/4590050/diff/36007/src/pkg/net/interface_windows.go#newcode82\nsrc/pkg/net/interface_windows.go:82: return nil, os.NewSyscallError(\"GetIfEntry\", int(e))\nOn 2011/06/22 05:47:45, brainman wrote:\n> s/int(e)/e/\n\nDone.\n\nhttp://codereview.appspot.com/4590050/diff/36007/src/pkg/net/interface_windows.go#newcode116\nsrc/pkg/net/interface_windows.go:116: name := bytePtrToString(&ai.AdapterName[0])\nOn 2011/06/22 05:47:45, brainman wrote:\n> This is what my name is: \"{F2CEBFA0-4E73-4791-AA3A-56CC7BC19F88}\". I don't think\n> it is better then what you had before. But I have no better suggestion, so I'll\n> leave it up to you to decide.\n\nThis should be ID. And we can remove MultiByteToWideChar/GetACP from syscall. Then I want to keep this line(using AdapterName).\n\nhttp://codereview.appspot.com/4590050/diff/36007/src/pkg/syscall/syscall_windows.go\nFile src/pkg/syscall/syscall_windows.go (right):\n\nhttp://codereview.appspot.com/4590050/diff/36007/src/pkg/syscall/syscall_windows.go#newcode471\nsrc/pkg/syscall/syscall_windows.go:471: //sys\tWSAIoctl(s int32, iocc uint32, inbuf uintptr, cbif uint32, outbuf uintptr, cbob uint32, cbbr *uint32, overlapped *Overlapped, completionRoutine uintptr) (errno int) [failretval==-1] = ws2_32.WSAIoctl\nOn 2011/06/22 05:47:45, brainman wrote:\n> s/inbuf uintptr/inbuf *byte/\n> s/outbuf uintptr/outbuf *byte/\n> \n> then you could use variables like b := make([]byte, 100) without unsafe.Pointer\n> typecast.\n\nDone.\n\nhttp://codereview.appspot.com/4590050/diff/36007/src/pkg/syscall/syscall_windows.go#newcode492\nsrc/pkg/syscall/syscall_windows.go:492: //sys\tGetIfEntry(pIfRow *MIB_IFROW) (errcode uint32) = iphlpapi.GetIfEntry\nOn 2011/06/22 05:47:45, brainman wrote:\n> s/errcode uint32/errcode int/\n> \n> All our errors are int.\n\nDone.\n\nhttp://codereview.appspot.com/4590050/diff/36007/src/pkg/syscall/syscall_windows.go#newcode493\nsrc/pkg/syscall/syscall_windows.go:493: //sys\tGetAdaptersInfo(ai *IP_ADAPTER_INFO, ol *uint32) (errcode uint32) = iphlpapi.GetAdaptersInfo\nOn 2011/06/22 05:47:45, brainman wrote:\n> s/errcode uint32/errcode int/\n\nDone.\n\nhttp://codereview.appspot.com/4590050/diff/36007/src/pkg/syscall/ztypes_windows_386.go\nFile src/pkg/syscall/ztypes_windows_386.go (right):\n\nhttp://codereview.appspot.com/4590050/diff/36007/src/pkg/syscall/ztypes_windows_386.go#newcode577\nsrc/pkg/syscall/ztypes_windows_386.go:577: type SockaddrGen [24]byte // TODO(mattn)\nOn 2011/06/22 05:47:45, brainman wrote:\n> Put TODO on the line above and provide a description of what todo.\n\nDone.\n\nhttp://codereview.appspot.com/4590050/diff/36007/src/pkg/syscall/ztypes_windows_386.go#newcode579\nsrc/pkg/syscall/ztypes_windows_386.go:579: type INTERFACE_INFO struct {\nOn 2011/06/22 05:47:45, brainman wrote:\n> s/INTERFACE_INFO/InterfaceInfo/\n> \n> like all other types in here.\n> \n> Same for all new types you've introduced.\n\nDone.",
			"disapproval": false,
			"date": "2011-06-22 06:15:35.700013",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"vincent.vanackere@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello mikioh.mikioh@gmail.com, alex.brainman@gmail.com, rsc@golang.org, vincent.vanackere@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-06-22 06:16:09.169520",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nI'm happy if everyone else is.\n",
			"disapproval": false,
			"date": "2011-06-22 23:52:23.308532",
			"approval": true
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"vincent.vanackere@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/06/17 13:07:15, mikioh wrote:\n> > To me, there is no reason to make a new...\n> \n> no reason you won't make a...\n\nIn my environment, MultiByteToWideChar/GetCP works for converting text from cp932 to utf-8. Maybe, you also?\n\nFor ascii bytes which is like IP string(ex: \"192.168.1.1\"), it don't need to call MultiByteToWideChar/GetCP. Then it call bytePtrToString.\nAnd MultiByteToWideChar convert bytes encoded with locale to widechar(UCS-2). not string. Then I added utf16PtrToString.\n\nCertainty, it is not in need of stay at net package.\n\nI want to hear other's minds. :)\n\n\u30ec\u30d3\u30e5\u30fc\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002",
			"disapproval": false,
			"date": "2011-06-17 15:21:16.510565",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"vincent.vanackere@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I found the way to get interface flags.\nThen, I updated drastic.\n\nOn 2011/06/17 01:05:45, mikioh wrote:\n> LGTM.\n> \n> I'll leave it to Windows experts because I saw the reliable \n> evidence of many people still love Windows yesterday.\n> \n> http://codereview.appspot.com/4590050/diff/19008/src/pkg/net/interface_windows.go\n> File src/pkg/net/interface_windows.go (right):\n> \n> http://codereview.appspot.com/4590050/diff/19008/src/pkg/net/interface_windows.go#newcode50\n> src/pkg/net/interface_windows.go:50: piftable :=\n> (*syscall.MIB_IFTABLE)(unsafe.Pointer(&heap[0]))\n> no hungarian notation pls.\n> \n> http://codereview.appspot.com/4590050/diff/19008/src/pkg/net/interface_windows.go#newcode56\n> src/pkg/net/interface_windows.go:56: var ptable *syscall.IP_INTERFACE_NAME_INFO\n> no hungarian notation pls.\n> \n> http://codereview.appspot.com/4590050/diff/19008/src/pkg/net/interface_windows.go#newcode88\n> src/pkg/net/interface_windows.go:88: if\n> tables[n].AccessType&syscall.IF_ACCESS_POINT_TO_MULTI_POINT != 0 {\n> Is this the right way to determine a multicast access capability \n> on Windows?\n> \n> I believe NBMA/P-MP are different capabilities on different \n> concept. For example, InARP/NHRP can help us (I mean, layer 3 \n> guys) to make a broadcast, multicast access over NBMA/P-MP \n> links. I'd like to suggest that if you are not sure this stuff, \n> leave it or use it just as it is.\n> \n> http://codereview.appspot.com/4590050/diff/19008/src/pkg/net/interface_windows.go#newcode131\n> src/pkg/net/interface_windows.go:131: pipinfo :=\n> (*syscall.MIB_IPADDRTABLE)(unsafe.Pointer(&heap[0]))\n> no hungarian notation pls.",
			"disapproval": false,
			"date": "2011-06-17 06:38:07.893601",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"vincent.vanackere@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4590050/diff/38001/src/pkg/net/interface_windows.go\nFile src/pkg/net/interface_windows.go (right):\n\nhttp://codereview.appspot.com/4590050/diff/38001/src/pkg/net/interface_windows.go#newcode16\nsrc/pkg/net/interface_windows.go:16: func bytePtrToString(p *uint8) string {\nSeems like not the right place here.\nsyscall/syscall.go or syscall/syscall_windows.go?\n\nhttp://codereview.appspot.com/4590050/diff/38001/src/pkg/net/interface_windows.go#newcode25\nsrc/pkg/net/interface_windows.go:25: func utf16PtrToString(p *uint16) string {\nSeems like not the right place here.\nsyscall/syscall_windows.go?",
			"disapproval": false,
			"date": "2011-06-17 10:42:32.738857",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"vincent.vanackere@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4590050/diff/38001/src/pkg/net/interface_windows.go\nFile src/pkg/net/interface_windows.go (right):\n\nhttp://codereview.appspot.com/4590050/diff/38001/src/pkg/net/interface_windows.go#newcode16\nsrc/pkg/net/interface_windows.go:16: func bytePtrToString(p *uint8) string {\nOn 2011/06/17 10:42:32, mikioh wrote:\n> Seems like not the right place here.\n> syscall/syscall.go or syscall/syscall_windows.go?\n\nI left this for below\n\nhttp://codereview.appspot.com/4590050/diff/38001/src/pkg/net/interface_windows.go#newcode25\nsrc/pkg/net/interface_windows.go:25: func utf16PtrToString(p *uint16) string {\nOn 2011/06/17 10:42:32, mikioh wrote:\n> Seems like not the right place here.\n> syscall/syscall_windows.go?\n\nRemoved\n\nhttp://codereview.appspot.com/4590050/diff/38001/src/pkg/net/interface_windows.go#newcode54\nsrc/pkg/net/interface_windows.go:54: }\nOn 2011/06/22 01:30:37, brainman wrote:\n> Replace the above by a call to something like this:\n> \n> func getAdapterList() (*syscall.IP_ADAPTER_INFO, os.Error) {\n>         b := make([]byte, 1000)\n>         l := uint32(len(b))\n>         a := (*syscall.IP_ADAPTER_INFO)(unsafe.Pointer(&b[0]))\n>         e := syscall.GetAdaptersInfo(a, &l)\n>         if e == syscall.ERROR_BUFFER_OVERFLOW {\n>                 b = make([]byte, l)\n>                 a = (*syscall.IP_ADAPTER_INFO)(unsafe.Pointer(&b[0]))\n>                 e = syscall.GetAdaptersInfo(a, &l)\n>         }\n>         if e != 0 {\n>                 return nil, os.NewSyscallError(\"GetAdaptersInfo\", int(e))\n>         }\n>         return a, nil\n> }\n\nDone.\n\nhttp://codereview.appspot.com/4590050/diff/38001/src/pkg/net/interface_windows.go#newcode56\nsrc/pkg/net/interface_windows.go:56: s, err := syscall.Socket(syscall.AF_INET, syscall.SOCK_DGRAM, syscall.IPPROTO_UDP)\nOn 2011/06/22 01:30:37, brainman wrote:\n> Again, I think your code will look simpler, if you put following into a separate\n> function, like\n> \n> func getInterfaces() ([]syscall.INTERFACE_INFO, os.Error)\n\nDone.\n\nhttp://codereview.appspot.com/4590050/diff/38001/src/pkg/net/interface_windows.go#newcode68\nsrc/pkg/net/interface_windows.go:68: }\nOn 2011/06/22 01:30:37, brainman wrote:\n> You should truncate iinfo to the length populated by WSAIoctl. From the manual:\n> \n> >>>\n> The number of interfaces returned (number of structures returned in the buffer\n> pointed to by lpvOutBuffer parameter) can be determined based on the actual\n> length of the output buffer returned in lpcbBytesReturned parameter.\n> <<<\n\nDone.\n\nhttp://codereview.appspot.com/4590050/diff/38001/src/pkg/net/interface_windows.go#newcode70\nsrc/pkg/net/interface_windows.go:70: for ai != nil {\nOn 2011/06/22 01:30:37, brainman wrote:\n> for ; ai != nil; ai = ai.Next {\n\nDone.\n\nhttp://codereview.appspot.com/4590050/diff/38001/src/pkg/net/interface_windows.go#newcode112\nsrc/pkg/net/interface_windows.go:112: name := string(row.Descr[:row.DescrLen-1])\nOn 2011/06/22 01:30:37, brainman wrote:\n> I don't think it is appropriate you use row.Descr for the \"name\" field. I take\n> it \"name\" should uniquely identify an interface, I'm not sure if row.Descr will\n> do that.\n> \n> I don't have an alternative, so leave it up to you.\n\nDone.\n\nhttp://codereview.appspot.com/4590050/diff/38001/src/pkg/net/interface_windows.go#newcode113\nsrc/pkg/net/interface_windows.go:113: wcl := syscall.MultiByteToWideChar(syscall.GetACP(), syscall.MB_PRECOMPOSED, &row.Descr[0], int32(row.DescrLen), nil, 0)\nOn 2011/06/22 01:30:37, brainman wrote:\n> Please, don't call syscall.MultiByteToWideChar with empty return buffer. Try\n> give it something reasonable first time round.\n\nDone.\n\nhttp://codereview.appspot.com/4590050/diff/38001/src/pkg/net/interface_windows.go#newcode154\nsrc/pkg/net/interface_windows.go:154: }\nOn 2011/06/22 01:30:37, brainman wrote:\n> Replace the above by a call to getAdapterList, as before.\n\nDone.\n\nhttp://codereview.appspot.com/4590050/diff/38001/src/pkg/net/interface_windows.go#newcode156\nsrc/pkg/net/interface_windows.go:156: for ai != nil {\nOn 2011/06/22 01:30:37, brainman wrote:\n> for ; ai != nil; ai = ai.Next {\n\nDone.",
			"disapproval": false,
			"date": "2011-06-22 02:11:23.483375",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"vincent.vanackere@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello mikioh.mikioh@gmail.com, alex.brainman@gmail.com, rsc@golang.org, vincent.vanackere@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-06-22 02:11:50.338007",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"vincent.vanackere@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/06/17 10:42:32, mikioh wrote:\n> http://codereview.appspot.com/4590050/diff/38001/src/pkg/net/interface_windows.go\n> File src/pkg/net/interface_windows.go (right):\n> \n> http://codereview.appspot.com/4590050/diff/38001/src/pkg/net/interface_windows.go#newcode16\n> src/pkg/net/interface_windows.go:16: func bytePtrToString(p *uint8) string {\n> Seems like not the right place here.\n> syscall/syscall.go or syscall/syscall_windows.go?\n> \n> http://codereview.appspot.com/4590050/diff/38001/src/pkg/net/interface_windows.go#newcode25\n> src/pkg/net/interface_windows.go:25: func utf16PtrToString(p *uint16) string {\n> Seems like not the right place here.\n> syscall/syscall_windows.go?\n\nbytePtrToString/utf16PtrToString is using pointer. not slice or array.\nIt seems that is bits dangerous for me.\n\nRuss, brainman: how do you think about?",
			"disapproval": false,
			"date": "2011-06-17 10:49:38.057110",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"vincent.vanackere@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "More comments anyone?\nIf no more takers, I'll submit this.\n\nAlex",
			"disapproval": false,
			"date": "2011-06-22 23:50:19.783236",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"vincent.vanackere@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "> bytePtrToString/utf16PtrToString is using pointer. not slice or array.\n> It seems that is bits dangerous for me.\n\nTo me, there is no reason to make a new function that calls \nMultiByteToWideChar inside and returns string. Am I mssing\nsomething?",
			"disapproval": false,
			"date": "2011-06-17 12:30:42.506963",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"vincent.vanackere@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=6adcc9f52615 ***\n\nnet, syscall: interface for windows\n\nR=mikioh.mikioh, alex.brainman, rsc, vincent.vanackere\nCC=golang-dev\nhttp://codereview.appspot.com/4590050\n\nCommitter: Alex Brainman <alex.brainman@gmail.com>",
			"disapproval": false,
			"date": "2011-06-22 23:55:06.161073",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> To me, there is no reason to make a new...\n\nno reason you won't make a...\n",
			"disapproval": false,
			"date": "2011-06-17 13:07:15.273970",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"vincent.vanackere@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM.\n\nhttp://codereview.appspot.com/4590050/diff/33004/src/pkg/syscall/syscall_windows.go\nFile src/pkg/syscall/syscall_windows.go (right):\n\nhttp://codereview.appspot.com/4590050/diff/33004/src/pkg/syscall/syscall_windows.go#newcode471\nsrc/pkg/syscall/syscall_windows.go:471: //sys\tWSAIoctl(s int32, iocc uint32, inbuf *byte, cbif uint32, outbuf uintptr, cbob uint32, cbbr *uint32, overlapped *Overlapped, completionRoutine uintptr) (errno int) [failretval==-1] = ws2_32.WSAIoctl\ns/outbuf uintptr/outbuf *byte/\n\nhttp://codereview.appspot.com/4590050/diff/33004/src/pkg/syscall/ztypes_windows_386.go\nFile src/pkg/syscall/ztypes_windows_386.go (right):\n\nhttp://codereview.appspot.com/4590050/diff/33004/src/pkg/syscall/ztypes_windows_386.go#newcode631\nsrc/pkg/syscall/ztypes_windows_386.go:631: type MibIpAddrRow struct {\nDon't need that now. Please remove.",
			"disapproval": false,
			"date": "2011-06-22 07:08:44.886988",
			"approval": true
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"mikioh.mikioh@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"vincent.vanackere@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4590050/diff/33004/src/pkg/syscall/syscall_windows.go\nFile src/pkg/syscall/syscall_windows.go (right):\n\nhttp://codereview.appspot.com/4590050/diff/33004/src/pkg/syscall/syscall_windows.go#newcode471\nsrc/pkg/syscall/syscall_windows.go:471: //sys\tWSAIoctl(s int32, iocc uint32, inbuf *byte, cbif uint32, outbuf uintptr, cbob uint32, cbbr *uint32, overlapped *Overlapped, completionRoutine uintptr) (errno int) [failretval==-1] = ws2_32.WSAIoctl\nOn 2011/06/22 07:08:44, brainman wrote:\n> s/outbuf uintptr/outbuf *byte/\n\nDone.\n\nhttp://codereview.appspot.com/4590050/diff/33004/src/pkg/syscall/ztypes_windows_386.go\nFile src/pkg/syscall/ztypes_windows_386.go (right):\n\nhttp://codereview.appspot.com/4590050/diff/33004/src/pkg/syscall/ztypes_windows_386.go#newcode631\nsrc/pkg/syscall/ztypes_windows_386.go:631: type MibIpAddrRow struct {\nOn 2011/06/22 07:08:44, brainman wrote:\n> Don't need that now. Please remove.\n\nDone.",
			"disapproval": false,
			"date": "2011-06-22 07:17:07.893707",
			"approval": false
		}
	],
	"owner_email": "mattn.jp@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mattn",
	"subject": "code review 4590050: net, syscall: interface for windows",
	"created": "2011-06-10 09:50:16.882858",
	"patchsets": [
		1,
		3,
		4001,
		6007,
		12001,
		1002,
		9006,
		21001,
		22001,
		14008,
		13007,
		14014,
		12009,
		26001,
		19008,
		38001,
		34002,
		36007,
		38002,
		33004,
		28012
	],
	"modified": "2012-02-11 13:39:07.676511",
	"closed": true,
	"issue": 4590050
}