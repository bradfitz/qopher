{
	"description": "encoding/xml: handle anonymous pointer fields\n\nThis CL makes\n\n    type T struct { *U }\n\nbehave in a similar way to:\n\n    type T struct { U }\n\nFixes issue 3108.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org",
		"gustavo@niemeyer.net"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm sorry, but I think it's too late.  Let's let xml sit and get\npounded on.  We can fix this after Go 1.  It is a rare and relatively\nunimportant case, and the fact that the fields are ignored means that\nwe can fix it without changing behavior too much.\n",
			"disapproval": false,
			"date": "2012-02-23 03:25:28.477475",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-23 03:19:04.134830",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-17 01:29:48.506207",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Can you please describe what this CL does before I read the code?\r\nI was kind of hoping for a discussion of what \"handle\" might mean.\r\nIt's not entirely obvious to me.\r\n\r\nThe CL description should also give more detail, and presumably\r\nthe package document comment needs editing.  This is a significant\r\nAPI change but from a quick glance you wouldn't realize that.\r\n\r\nThanks.\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-04-25 02:52:29.318684",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Apr 25, 2012 at 00:25, Russ Cox <rsc@golang.org> wrote:\n> I see. \u00a0I thought xml was ignoring all anonymous fields.\n> At the very least this comment needs updating, no?\n>\n> // \u00a0 * A non-pointer anonymous struct field is handled as if the\n> // \u00a0 \u00a0 \u00a0fields of its value were part of the outer struct.\n\nGood catch.\n",
			"disapproval": false,
			"date": "2012-04-25 03:47:12.961365",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Apr 24, 2012 at 23:52, Russ Cox <rsc@golang.org> wrote:\n> Can you please describe what this CL does before I read the code?\n> I was kind of hoping for a discussion of what \"handle\" might mean.\n> It's not entirely obvious to me.\n>\n> The CL description should also give more detail, and presumably\n> the package document comment needs editing. \u00a0This is a significant\n> API change but from a quick glance you wouldn't realize that.\n\nMaybe that's because I don't really see that as a significant API change.\n\nThis CL makes\n\n    type Foo struct {\n        *Bar\n    }\n\nbehave as\n\n    type Foo struct {\n        Bar\n    }\n\ndoes today.\n",
			"disapproval": false,
			"date": "2012-04-25 03:01:35.753958",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I see.  I thought xml was ignoring all anonymous fields.\r\nAt the very least this comment needs updating, no?\r\n\r\n//   * A non-pointer anonymous struct field is handled as if the\r\n//      fields of its value were part of the outer struct.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-04-25 03:26:20.542167",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"gustavo@niemeyer.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, gustavo@niemeyer.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-25 05:05:01.202974",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"gustavo@niemeyer.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping",
			"disapproval": false,
			"date": "2012-04-30 22:54:00.288081",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"gustavo@niemeyer.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5694044/diff/15001/src/pkg/encoding/xml/typeinfo.go\nFile src/pkg/encoding/xml/typeinfo.go (right):\n\nhttp://codereview.appspot.com/5694044/diff/15001/src/pkg/encoding/xml/typeinfo.go#newcode70\nsrc/pkg/encoding/xml/typeinfo.go:70: if t.Kind() == reflect.Ptr && t.Elem().Kind() == reflect.Struct {\nYou can make the cases less special by doing\n\nif t.Kind() == reflect.Ptr {\n    t = t.Elem()\n}\nif t.Kind() != reflect.Struct {\n    continue\n}\n\nhttp://codereview.appspot.com/5694044/diff/15001/src/pkg/encoding/xml/typeinfo.go#newcode334\nsrc/pkg/encoding/xml/typeinfo.go:334: // Value returns v's field value corresponding to finfo.\nCan you please call this 'value', so that it's obvious at call sites that it is not an method usable by clients of this package?",
			"disapproval": false,
			"date": "2012-05-01 22:49:46.016464",
			"approval": true
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"gustavo@niemeyer.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=7339b16a1f58 ***\n\nencoding/xml: handle anonymous pointer fields\n\nThis CL makes\n\n    type T struct { *U }\n\nbehave in a similar way to:\n\n    type T struct { U }\n\nFixes issue 3108.\n\nR=golang-dev, rsc, gustavo\nCC=golang-dev\nhttp://codereview.appspot.com/5694044\n\nhttp://codereview.appspot.com/5694044/diff/15001/src/pkg/encoding/xml/typeinfo.go\nFile src/pkg/encoding/xml/typeinfo.go (right):\n\nhttp://codereview.appspot.com/5694044/diff/15001/src/pkg/encoding/xml/typeinfo.go#newcode70\nsrc/pkg/encoding/xml/typeinfo.go:70: if t.Kind() == reflect.Ptr && t.Elem().Kind() == reflect.Struct {\nOn 2012/05/01 22:49:46, rsc wrote:\n> You can make the cases less special by doing\n> \n> if t.Kind() == reflect.Ptr {\n>     t = t.Elem()\n> }\n> if t.Kind() != reflect.Struct {\n>     continue\n> }\n\nDone.\n\nhttp://codereview.appspot.com/5694044/diff/15001/src/pkg/encoding/xml/typeinfo.go#newcode334\nsrc/pkg/encoding/xml/typeinfo.go:334: // Value returns v's field value corresponding to finfo.\nOn 2012/05/01 22:49:46, rsc wrote:\n> Can you please call this 'value', so that it's obvious at call sites that it is\n> not an method usable by clients of this package?\n> \n\nDone.",
			"disapproval": false,
			"date": "2012-05-17 02:21:44.600042",
			"approval": false
		}
	],
	"owner_email": "n13m3y3r@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "niemeyer",
	"subject": "code review 5694044: encoding/xml: handle anonymous pointer fields",
	"created": "2012-02-23 03:17:18.198774",
	"patchsets": [
		1,
		1001,
		1002,
		6001,
		12002,
		15001,
		21001,
		28001
	],
	"modified": "2012-05-17 02:21:47.139113",
	"closed": true,
	"issue": 5694044
}