{
	"description": "go.image/tiff: initial support for writing TIFF images\n\nThe basic functionality works. Features to add in future CLs:\n\n- compression\n- fast paths for image formats that can be directly expressed in TIFF,\n  such as RGBA, NRGBA and maybe Gray and Paletted.",
	"cc": [
		"nigeltao@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"bsiegert@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-24 20:22:55.258971",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"bsiegert@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.image",
			"disapproval": false,
			"date": "2012-02-23 17:31:09.839980",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"bsiegert@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm still not convinced that we really need an encoder type, but I might see how that looks in a follow-up CL, not in this one.\n\nhttp://codereview.appspot.com/5694051/diff/1002/tiff/writer.go\nFile tiff/writer.go (right):\n\nhttp://codereview.appspot.com/5694051/diff/1002/tiff/writer.go#newcode67\ntiff/writer.go:67: imageLen uint32 // Length of the image in bytes.\ns/uint32/int/\n\nhttp://codereview.appspot.com/5694051/diff/1002/tiff/writer.go#newcode73\ntiff/writer.go:73: e := &encoder{img: m}\nYou might as well make this a complete struct literal, instead of initializing some fields afterwards:\n\nreturn &encoder{\n  img: m,\n  // For uncompressed etc.\n  imageLen: width * height * 4,\n  // There is etc\n  ifd: ifd{\n    {tImageWidth, etc},\n  },\n}",
			"disapproval": false,
			"date": "2012-02-27 12:02:27.796343",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"bsiegert@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5694051/diff/2001/tiff/writer.go\nFile tiff/writer.go (right):\n\nhttp://codereview.appspot.com/5694051/diff/2001/tiff/writer.go#newcode31\ntiff/writer.go:31: data     []uint\nOn 2012/02/24 02:17:33, nigeltao wrote:\n> Should uint instead be uint32?\n\nDone.\n\nhttp://codereview.appspot.com/5694051/diff/2001/tiff/writer.go#newcode74\ntiff/writer.go:74: width:  uint(m.Bounds().Dx()),\nOn 2012/02/24 02:17:33, nigeltao wrote:\n> Why are width and height fields, instead of just local variables?\n\nHm. It was necessary in an earlier version of the patch. Removed.\n\nhttp://codereview.appspot.com/5694051/diff/2001/tiff/writer.go#newcode82\ntiff/writer.go:82: // so give a bogus value of 72x72 dpi.\nOn 2012/02/24 02:17:33, nigeltao wrote:\n> Instead of a bogus 72x72, can we just leave the field out altogether?\n\nAlas, no. These tags are mentioned in the table about \"required fields\" on page 21 of the spec. They are thus mandatory. 72 dpi is the \"standard\" definition of a point (well, 72.27 actually).\n\nhttp://codereview.appspot.com/5694051/diff/2001/tiff/writer.go#newcode84\ntiff/writer.go:84: {tImageWidth, dtShort, []uint{uint(e.width)}},\nOn 2012/02/24 02:17:33, nigeltao wrote:\n> The uint seems unnecessary.\n\nDone.\n\nhttp://codereview.appspot.com/5694051/diff/2001/tiff/writer.go#newcode109\ntiff/writer.go:109: buf[i] = uint8(r)\nOn 2012/02/24 02:17:33, nigeltao wrote:\n> s/i/i+0/ maintains symmetry with the lines below.\n> \n> Also, Color.RGBA returns values within [0, 0xFFFF]. Thus, s/r/r>>8/, and\n> similarly below.\n\nDone. Thanks.\n\nhttp://codereview.appspot.com/5694051/diff/2001/tiff/writer.go#newcode150\ntiff/writer.go:150: newarea := make([]byte, len(parea)+1024)\nOn 2012/02/24 02:17:33, nigeltao wrote:\n> 1024 isn't guaranteed to be long enough, right?\n\nGood point. I replaced the if by for above.\n\nhttp://codereview.appspot.com/5694051/diff/2001/tiff/writer.go#newcode155\ntiff/writer.go:155: enc.PutUint32(buf[8:12], uint32(pstart+o))\nOn 2012/02/24 02:17:33, nigeltao wrote:\n> uint32 is unnecessary, but I think it would be cleaner if you computed mostly in\n> terms of ints, instead of in uint32s. In other words, do the conversion of\n> things like slice lengths from int to uint32 later rather than earlier.\n\nDone, I think.\n\nhttp://codereview.appspot.com/5694051/diff/2001/tiff/writer.go#newcode172\ntiff/writer.go:172: var err error\nOn 2012/02/24 02:17:33, nigeltao wrote:\n> Just use := on the next line.\n\nDone.\n\nhttp://codereview.appspot.com/5694051/diff/2001/tiff/writer.go#newcode187\ntiff/writer.go:187: err = e.writeIFD(w)\nOn 2012/02/24 02:17:33, nigeltao wrote:\n> return e.writeIFD(w)\n\nDone.\n\nhttp://codereview.appspot.com/5694051/diff/2001/tiff/writer.go#newcode193\ntiff/writer.go:193: e := newEncoder(m)\nOn 2012/02/24 02:17:33, nigeltao wrote:\n> return newEncoder(m).encode(w)\n\nDone.",
			"disapproval": false,
			"date": "2012-02-24 20:23:18.702183",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"bsiegert@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5694051/diff/2001/tiff/writer.go\nFile tiff/writer.go (right):\n\nhttp://codereview.appspot.com/5694051/diff/2001/tiff/writer.go#newcode31\ntiff/writer.go:31: data     []uint\nShould uint instead be uint32?\n\nhttp://codereview.appspot.com/5694051/diff/2001/tiff/writer.go#newcode74\ntiff/writer.go:74: width:  uint(m.Bounds().Dx()),\nWhy are width and height fields, instead of just local variables?\n\nhttp://codereview.appspot.com/5694051/diff/2001/tiff/writer.go#newcode82\ntiff/writer.go:82: // so give a bogus value of 72x72 dpi.\nInstead of a bogus 72x72, can we just leave the field out altogether?\n\nhttp://codereview.appspot.com/5694051/diff/2001/tiff/writer.go#newcode84\ntiff/writer.go:84: {tImageWidth, dtShort, []uint{uint(e.width)}},\nThe uint seems unnecessary.\n\nhttp://codereview.appspot.com/5694051/diff/2001/tiff/writer.go#newcode109\ntiff/writer.go:109: buf[i] = uint8(r)\ns/i/i+0/ maintains symmetry with the lines below.\n\nAlso, Color.RGBA returns values within [0, 0xFFFF]. Thus, s/r/r>>8/, and similarly below.\n\nhttp://codereview.appspot.com/5694051/diff/2001/tiff/writer.go#newcode150\ntiff/writer.go:150: newarea := make([]byte, len(parea)+1024)\n1024 isn't guaranteed to be long enough, right?\n\nhttp://codereview.appspot.com/5694051/diff/2001/tiff/writer.go#newcode155\ntiff/writer.go:155: enc.PutUint32(buf[8:12], uint32(pstart+o))\nuint32 is unnecessary, but I think it would be cleaner if you computed mostly in terms of ints, instead of in uint32s. In other words, do the conversion of things like slice lengths from int to uint32 later rather than earlier.\n\nhttp://codereview.appspot.com/5694051/diff/2001/tiff/writer.go#newcode172\ntiff/writer.go:172: var err error\nJust use := on the next line.\n\nhttp://codereview.appspot.com/5694051/diff/2001/tiff/writer.go#newcode187\ntiff/writer.go:187: err = e.writeIFD(w)\nreturn e.writeIFD(w)\n\nhttp://codereview.appspot.com/5694051/diff/2001/tiff/writer.go#newcode193\ntiff/writer.go:193: e := newEncoder(m)\nreturn newEncoder(m).encode(w)",
			"disapproval": false,
			"date": "2012-02-24 02:17:33.609358",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"bsiegert@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "All done, PTAL.\n\nRegarding the need for a encoder type: I tried to use this as a structuring element for the code. The type is not exported, so it is not set in stone.\n\nhttp://codereview.appspot.com/5694051/diff/1002/tiff/writer.go\nFile tiff/writer.go (right):\n\nhttp://codereview.appspot.com/5694051/diff/1002/tiff/writer.go#newcode67\ntiff/writer.go:67: imageLen uint32 // Length of the image in bytes.\nOn 2012/02/27 12:02:27, nigeltao wrote:\n> s/uint32/int/\n\nDone.\n\nhttp://codereview.appspot.com/5694051/diff/1002/tiff/writer.go#newcode73\ntiff/writer.go:73: e := &encoder{img: m}\nOn 2012/02/27 12:02:27, nigeltao wrote:\n> You might as well make this a complete struct literal, instead of initializing\n> some fields afterwards:\n> \n> return &encoder{\n>   img: m,\n>   // For uncompressed etc.\n>   imageLen: width * height * 4,\n>   // There is etc\n>   ifd: ifd{\n>     {tImageWidth, etc},\n>   },\n> }\n\nDone.\n\nhttp://codereview.appspot.com/5694051/diff/6001/tiff/writer.go\nFile tiff/writer.go (right):\n\nhttp://codereview.appspot.com/5694051/diff/6001/tiff/writer.go#newcode143\ntiff/writer.go:143: datalen := int(count * lengths[ent.datatype])\nI also fixed a bug here. For a dtRational, too many bytes were written.",
			"disapproval": false,
			"date": "2012-03-02 17:36:59.452821",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"bsiegert@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.",
			"disapproval": false,
			"date": "2012-03-05 00:45:13.567189",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"bsiegert@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=2bf0db14a16d&repo=image ***\n\ngo.image/tiff: initial support for writing TIFF images\n\nThe basic functionality works. Features to add in future CLs:\n\n- compression\n- fast paths for image formats that can be directly expressed in TIFF,\n  such as RGBA, NRGBA and maybe Gray and Paletted.\n\nR=nigeltao\nCC=golang-dev\nhttp://codereview.appspot.com/5694051\n\nCommitter: Nigel Tao <nigeltao@golang.org>",
			"disapproval": false,
			"date": "2012-03-05 00:46:03.080910",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"bsiegert@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-03-05 23:08:48.417305",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Mar 6, 2012 at 00:08,  <bsiegert@gmail.com> wrote:\n> *** Abandoned ***\n>\n> http://codereview.appspot.com/5694051/\n\nThis looks like a bug in codereview:\n\n% hg sync\npulling from https://code.google.com/p/go.image\nadded 1 changesets with 3 changes to 3 files\n3 files updated, 0 files merged, 0 files removed, 0 files unresolved\nRemoving unmodified files from CL 5694051:\n       tiff/consts.go\n       tiff/writer.go\n       tiff/writer_test.go\nCL 5694051 has no files; delete (abandon) with hg change -d 5694051\n\n--Benny.\n",
			"disapproval": false,
			"date": "2012-03-05 23:17:44.712353",
			"approval": false
		}
	],
	"owner_email": "bsiegert@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "bsiegert",
	"subject": "code review 5694051: go.image/tiff: initial support for writing TIFF images",
	"created": "2012-02-23 17:30:38.533048",
	"patchsets": [
		1,
		2001,
		1002,
		6001
	],
	"modified": "2012-03-05 23:08:50.566183",
	"closed": true,
	"issue": 5694051
}