{
	"description": "crypto/tls: use dlsym to determine symbol availability in OS X root fetcher\n\nFixes issue 3131.",
	"cc": [
		"golang-dev@googlegroups.com",
		"mjhollins@gmail.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"agl@golang.org",
		"minux.ma@gmail.com",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Far from thrilled about this.  We have had no problems\nrunning all.bash on any known Mac systems.  The problems\nwe have are building on one system and taking the binaries\nelsewhere.  I believe there is an environment variable that\nXcode respects called something like MAC_OS_X_VERSION_FOR_BUILD\nthat will make us generate the right binaries for these other systems.\n\nHowever, to test we need to identify the problematic\n(system-we-built-on, system-the-binaries-don't-run-on)\ncombinations.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-02-27 16:09:09.619737",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think we should make sure our binary distribution\nscripts use MACOSX_VERSION_MAX_ALLOWED\n(thanks for tracking that down) and not worry about\nworking around it in each package that uses cgo.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-02-27 16:51:01.061709",
			"approval": false
		},
		{
			"sender": "krautz@gmail.com",
			"recipients": [
				"krautz@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"mjhollins@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/02/27 16:32:54, minux wrote:\n> On 2012/02/27 16:09:09, rsc wrote:\n> > Far from thrilled about this.  We have had no problems\n> > running all.bash on any known Mac systems.  The problems\n> > we have are building on one system and taking the binaries\n> > elsewhere.  I believe there is an environment variable that\n> > Xcode respects called something like MAC_OS_X_VERSION_FOR_BUILD\n> > that will make us generate the right binaries for these other systems.\n> How about add this (w/o this CL):\n> #cgo LDFLAGS: --with-macos-sdk=/Developer/SDKs/MacOSX10.6.sdk\n> \n> I've tested this on 10.6, but I know it won't break Mac OS X 10.6.\n\nThat might work, but with Apple's move to a single-app Xcode with 4.2, SDKs now live inside the app bundle. It would be hard to handle the divide between pre and post Xcode 4.2.\n\nThe other problem is that Apple typically removes old SDKs from Xcode once a new version's out. So come Mountain Lion, the 10.6 SDK probably won't be bundled with Xcode anymore.\n\nAnd I don't think the SDK version matters - it's fine to build using a newer SDK so long as you only use symbols that are available on the systems  you're targetting (use use the MACOSX_VERSION_MAX_ALLOWED, etc. macros to do that).",
			"disapproval": false,
			"date": "2012-02-27 16:37:20.983346",
			"approval": false
		},
		{
			"sender": "krautz@gmail.com",
			"recipients": [
				"krautz@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"mjhollins@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-02-27 18:45:46.210429",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"krautz@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"mjhollins@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/02/26 21:20:41, agl1 wrote:\n> LGTM, although I know very little about OS X's system APIs. Will leave for\n> someone who, at least, runs a Mac to glace at.\nLGTM. Tested on Mac OS X 10.6.8.\n\nBTW, I think we probably should fix the original weak import approach after Go 1.",
			"disapproval": false,
			"date": "2012-02-27 14:52:49.004113",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"krautz@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"mjhollins@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/02/27 16:09:09, rsc wrote:\n> Far from thrilled about this.  We have had no problems\n> running all.bash on any known Mac systems.  The problems\n> we have are building on one system and taking the binaries\n> elsewhere.  I believe there is an environment variable that\n> Xcode respects called something like MAC_OS_X_VERSION_FOR_BUILD\n> that will make us generate the right binaries for these other systems.\nHow about add this (w/o this CL):\n#cgo LDFLAGS: --with-macos-sdk=/Developer/SDKs/MacOSX10.6.sdk\n\nI've tested this on 10.6, but I know it won't break Mac OS X 10.6.",
			"disapproval": false,
			"date": "2012-02-27 16:32:54.152454",
			"approval": false
		},
		{
			"sender": "krautz@gmail.com",
			"recipients": [
				"krautz@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"mjhollins@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/02/27 16:51:01, rsc wrote:\n> I think we should make sure our binary distribution\n> scripts use MACOSX_VERSION_MAX_ALLOWED\n> (thanks for tracking that down) and not worry about\n> working around it in each package that uses cgo.\n> \n> Russ\n\nNote that its a preprocessor define, not an env var.  Can we force that through the scripts?",
			"disapproval": false,
			"date": "2012-02-27 16:57:47.157829",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Feb 28, 2012 at 12:57 AM, <krautz@gmail.com> wrote:\n\n> On 2012/02/27 16:51:01, rsc wrote:\n>\n>> I think we should make sure our binary distribution\n>> scripts use MACOSX_VERSION_MAX_ALLOWED\n>> (thanks for tracking that down) and not worry about\n>> working around it in each package that uses cgo.\n>>\n>\n>  Russ\n>>\n>\n> Note that its a preprocessor define, not an env var.  Can we force that\n> through the scripts?\n>\nI think currently we can't. There is a pending TODO in cmd/go/build.go line\n1168.\nI've made a CL for this, http://codereview.appspot.com/5699091\nWith that CL, you can define TARGET_CC=\"gcc\n-D MACOSX_VERSION_MAX_ALLOWED=xxx\"\nin misc/dist/darwin/dist.bash.\nBut I don't know whether this approach is OK.\n",
			"disapproval": false,
			"date": "2012-02-27 17:25:20.450131",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hmm.\n\nMaybe the best thing in this case is the #cgo CFLAGS line that was suggested.\nIt's per-package, which I'm not wild about, but it is significantly\nless intrusive.\nI am not planning to add any new environment variables to the go command.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-02-27 17:27:27.924715",
			"approval": false
		},
		{
			"sender": "krautz@gmail.com",
			"recipients": [
				"krautz@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"mjhollins@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, mjhollins@gmail.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-26 14:18:46.959894",
			"approval": false
		},
		{
			"sender": "krautz@gmail.com",
			"recipients": [
				"krautz@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"mjhollins@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/02/27 17:27:27, rsc wrote:\n> Hmm.\n> \n> Maybe the best thing in this case is the #cgo CFLAGS line that was suggested.\n> It's per-package, which I'm not wild about, but it is significantly\n> less intrusive.\n> I am not planning to add any new environment variables to the go command.\n> \n> Russ\n\nOK. But as I mentioned, SDK paths vary widly depending on which Xcode version you have.\n\nThis is (hopefully) only an issue until we, as suggested by Minux, honor the weak import annotations. Until then I think we should just strive to use the availability macros in all OS X stdlib cgo files that use frameworks (currently only crypto/tls) to force our API usage to be 10.6-compatible. (That's our lower bound, right?)\n\nSee this CL: http://codereview.appspot.com/5700083/\n\nIt complains if I use APIs introduced in Lion, and does not throw deprecation warnings at me for using the (in Lion), deprecated SecKeychainExportItem function.\n\nI still need to figure out why it only works with the two underscores before the MAX_ALLOWED define, though.\n\nWhat do you think?",
			"disapproval": false,
			"date": "2012-02-27 18:11:47.431797",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "5700083 looks good to me.\n",
			"disapproval": false,
			"date": "2012-02-27 18:15:24.590591",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"krautz@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"mjhollins@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM, although I know very little about OS X's system APIs. Will leave for someone who, at least, runs a Mac to glace at.",
			"disapproval": false,
			"date": "2012-02-26 21:20:41.898551",
			"approval": true
		},
		{
			"sender": "krautz@gmail.com",
			"recipients": [
				"krautz@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"mjhollins@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/02/27 16:09:09, rsc wrote:\n> Far from thrilled about this.  We have had no problems\n> running all.bash on any known Mac systems.  The problems\n> we have are building on one system and taking the binaries\n> elsewhere.  I believe there is an environment variable that\n> Xcode respects called something like MAC_OS_X_VERSION_FOR_BUILD\n> that will make us generate the right binaries for these other systems.\n> \n> However, to test we need to identify the problematic\n> (system-we-built-on, system-the-binaries-don't-run-on)\n> combinations.\n> \n> Russ\n\nHi Russ,\n\nThe real problem is simply that the linker (I assume) is discarding the weak import annotations for the Security.framework symbols.  This causes binaries built using a 10.7 SDK not to load at all on 10.6, since we're using symbols aren't available there (SecItemExport).\n\nHere's the relevant technical note from Apple: https://developer.apple.com/library/mac/#technotes/tn2064/_index.html\n\nI suppose we could just set MAC_OS_X_VERSION_MAX_ALLOWED to 10.6 and use the deprecated symbol, if you wish.\n\nNote that it's only deprecated, not removed.  I was just trying to be future proof when I wrote the code.",
			"disapproval": false,
			"date": "2012-02-27 16:28:56.494622",
			"approval": false
		}
	],
	"owner_email": "krautz@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mkrautz",
	"subject": "code review 5697065: crypto/tls: use dlsym to determine symbol availability ...",
	"created": "2012-02-26 14:17:27.199074",
	"patchsets": [
		1,
		1001,
		3001
	],
	"modified": "2012-02-27 18:45:47.715310",
	"closed": true,
	"issue": 5697065
}