{
	"description": "archive/zip: don't reimplement encoding/binary LittleEndian\n\nNo change in the 65k files slow test performance (30s\nbefore and after).",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"gri@golang.org"
	],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn Mon, Feb 27, 2012 at 1:07 PM,  <bradfitz@golang.org> wrote:\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> archive/zip: don't reimplement encoding/binary LittleEndian\n>\n> No change in the 65k files slow test performance (30s\n> before and after).\n>\n> Please review this at http://codereview.appspot.com/5695078/\n>\n> Affected files:\n> \u00a0M src/pkg/archive/zip/reader.go\n> \u00a0M src/pkg/archive/zip/writer.go\n>\n>\n> Index: src/pkg/archive/zip/reader.go\n> ===================================================================\n> --- a/src/pkg/archive/zip/reader.go\n> +++ b/src/pkg/archive/zip/reader.go\n> @@ -7,6 +7,7 @@\n> \u00a0import (\n> \u00a0 \u00a0 \u00a0 \u00a0\"bufio\"\n> \u00a0 \u00a0 \u00a0 \u00a0\"compress/flate\"\n> + \u00a0 \u00a0 \u00a0 \"encoding/binary\"\n> \u00a0 \u00a0 \u00a0 \u00a0\"errors\"\n> \u00a0 \u00a0 \u00a0 \u00a0\"hash\"\n> \u00a0 \u00a0 \u00a0 \u00a0\"hash/crc32\"\n> @@ -15,6 +16,8 @@\n> \u00a0 \u00a0 \u00a0 \u00a0\"os\"\n> \u00a0)\n>\n> +var le = binary.LittleEndian\n> +\n> \u00a0var (\n> \u00a0 \u00a0 \u00a0 \u00a0ErrFormat \u00a0 \u00a0= errors.New(\"zip: not a valid zip file\")\n> \u00a0 \u00a0 \u00a0 \u00a0ErrAlgorithm = errors.New(\"zip: unsupported compression algorithm\")\n> @@ -173,19 +176,19 @@\n> \u00a0 \u00a0 \u00a0 \u00a0if _, err := io.ReadFull(r, b[:]); err != nil {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return err\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> - \u00a0 \u00a0 \u00a0 if sig := toUint32(b[:]); sig != fileHeaderSignature {\n> + \u00a0 \u00a0 \u00a0 if sig := le.Uint32(b[:]); sig != fileHeaderSignature {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return ErrFormat\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> - \u00a0 \u00a0 \u00a0 f.ReaderVersion = toUint16(b[4:])\n> - \u00a0 \u00a0 \u00a0 f.Flags = toUint16(b[6:])\n> - \u00a0 \u00a0 \u00a0 f.Method = toUint16(b[8:])\n> - \u00a0 \u00a0 \u00a0 f.ModifiedTime = toUint16(b[10:])\n> - \u00a0 \u00a0 \u00a0 f.ModifiedDate = toUint16(b[12:])\n> - \u00a0 \u00a0 \u00a0 f.CRC32 = toUint32(b[14:])\n> - \u00a0 \u00a0 \u00a0 f.CompressedSize = toUint32(b[18:])\n> - \u00a0 \u00a0 \u00a0 f.UncompressedSize = toUint32(b[22:])\n> - \u00a0 \u00a0 \u00a0 filenameLen := int(toUint16(b[26:]))\n> - \u00a0 \u00a0 \u00a0 extraLen := int(toUint16(b[28:]))\n> + \u00a0 \u00a0 \u00a0 f.ReaderVersion = le.Uint16(b[4:])\n> + \u00a0 \u00a0 \u00a0 f.Flags = le.Uint16(b[6:])\n> + \u00a0 \u00a0 \u00a0 f.Method = le.Uint16(b[8:])\n> + \u00a0 \u00a0 \u00a0 f.ModifiedTime = le.Uint16(b[10:])\n> + \u00a0 \u00a0 \u00a0 f.ModifiedDate = le.Uint16(b[12:])\n> + \u00a0 \u00a0 \u00a0 f.CRC32 = le.Uint32(b[14:])\n> + \u00a0 \u00a0 \u00a0 f.CompressedSize = le.Uint32(b[18:])\n> + \u00a0 \u00a0 \u00a0 f.UncompressedSize = le.Uint32(b[22:])\n> + \u00a0 \u00a0 \u00a0 filenameLen := int(le.Uint16(b[26:]))\n> + \u00a0 \u00a0 \u00a0 extraLen := int(le.Uint16(b[28:]))\n> \u00a0 \u00a0 \u00a0 \u00a0d := make([]byte, filenameLen+extraLen)\n> \u00a0 \u00a0 \u00a0 \u00a0if _, err := io.ReadFull(r, d); err != nil {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return err\n> @@ -203,11 +206,11 @@\n> \u00a0 \u00a0 \u00a0 \u00a0if _, err := io.ReadFull(r, b[:]); err != nil {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return 0, err\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> - \u00a0 \u00a0 \u00a0 if sig := toUint32(b[:4]); sig != fileHeaderSignature {\n> + \u00a0 \u00a0 \u00a0 if sig := le.Uint32(b[:4]); sig != fileHeaderSignature {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return 0, ErrFormat\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> - \u00a0 \u00a0 \u00a0 filenameLen := int(toUint16(b[26:28]))\n> - \u00a0 \u00a0 \u00a0 extraLen := int(toUint16(b[28:30]))\n> + \u00a0 \u00a0 \u00a0 filenameLen := int(le.Uint16(b[26:28]))\n> + \u00a0 \u00a0 \u00a0 extraLen := int(le.Uint16(b[28:30]))\n> \u00a0 \u00a0 \u00a0 \u00a0return int64(fileHeaderLen + filenameLen + extraLen), nil\n> \u00a0}\n>\n> @@ -219,24 +222,24 @@\n> \u00a0 \u00a0 \u00a0 \u00a0if _, err := io.ReadFull(r, b[:]); err != nil {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return err\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> - \u00a0 \u00a0 \u00a0 if sig := toUint32(b[:]); sig != directoryHeaderSignature {\n> + \u00a0 \u00a0 \u00a0 if sig := le.Uint32(b[:]); sig != directoryHeaderSignature {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return ErrFormat\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> - \u00a0 \u00a0 \u00a0 f.CreatorVersion = toUint16(b[4:])\n> - \u00a0 \u00a0 \u00a0 f.ReaderVersion = toUint16(b[6:])\n> - \u00a0 \u00a0 \u00a0 f.Flags = toUint16(b[8:])\n> - \u00a0 \u00a0 \u00a0 f.Method = toUint16(b[10:])\n> - \u00a0 \u00a0 \u00a0 f.ModifiedTime = toUint16(b[12:])\n> - \u00a0 \u00a0 \u00a0 f.ModifiedDate = toUint16(b[14:])\n> - \u00a0 \u00a0 \u00a0 f.CRC32 = toUint32(b[16:])\n> - \u00a0 \u00a0 \u00a0 f.CompressedSize = toUint32(b[20:])\n> - \u00a0 \u00a0 \u00a0 f.UncompressedSize = toUint32(b[24:])\n> - \u00a0 \u00a0 \u00a0 filenameLen := int(toUint16(b[28:]))\n> - \u00a0 \u00a0 \u00a0 extraLen := int(toUint16(b[30:32]))\n> - \u00a0 \u00a0 \u00a0 commentLen := int(toUint16(b[32:]))\n> + \u00a0 \u00a0 \u00a0 f.CreatorVersion = le.Uint16(b[4:])\n> + \u00a0 \u00a0 \u00a0 f.ReaderVersion = le.Uint16(b[6:])\n> + \u00a0 \u00a0 \u00a0 f.Flags = le.Uint16(b[8:])\n> + \u00a0 \u00a0 \u00a0 f.Method = le.Uint16(b[10:])\n> + \u00a0 \u00a0 \u00a0 f.ModifiedTime = le.Uint16(b[12:])\n> + \u00a0 \u00a0 \u00a0 f.ModifiedDate = le.Uint16(b[14:])\n> + \u00a0 \u00a0 \u00a0 f.CRC32 = le.Uint32(b[16:])\n> + \u00a0 \u00a0 \u00a0 f.CompressedSize = le.Uint32(b[20:])\n> + \u00a0 \u00a0 \u00a0 f.UncompressedSize = le.Uint32(b[24:])\n> + \u00a0 \u00a0 \u00a0 filenameLen := int(le.Uint16(b[28:]))\n> + \u00a0 \u00a0 \u00a0 extraLen := int(le.Uint16(b[30:32]))\n> + \u00a0 \u00a0 \u00a0 commentLen := int(le.Uint16(b[32:]))\n> \u00a0 \u00a0 \u00a0 \u00a0// skipped start disk number and internal attributes (2x uint16)\n> - \u00a0 \u00a0 \u00a0 f.ExternalAttrs = toUint32(b[38:])\n> - \u00a0 \u00a0 \u00a0 f.headerOffset = int64(toUint32(b[42:]))\n> + \u00a0 \u00a0 \u00a0 f.ExternalAttrs = le.Uint32(b[38:])\n> + \u00a0 \u00a0 \u00a0 f.headerOffset = int64(le.Uint32(b[42:]))\n> \u00a0 \u00a0 \u00a0 \u00a0d := make([]byte, filenameLen+extraLen+commentLen)\n> \u00a0 \u00a0 \u00a0 \u00a0if _, err := io.ReadFull(r, d); err != nil {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return err\n> @@ -252,9 +255,9 @@\n> \u00a0 \u00a0 \u00a0 \u00a0if _, err := io.ReadFull(r, b[:]); err != nil {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return err\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> - \u00a0 \u00a0 \u00a0 f.CRC32 = toUint32(b[:4])\n> - \u00a0 \u00a0 \u00a0 f.CompressedSize = toUint32(b[4:8])\n> - \u00a0 \u00a0 \u00a0 f.UncompressedSize = toUint32(b[8:12])\n> + \u00a0 \u00a0 \u00a0 f.CRC32 = le.Uint32(b[:4])\n> + \u00a0 \u00a0 \u00a0 f.CompressedSize = le.Uint32(b[4:8])\n> + \u00a0 \u00a0 \u00a0 f.UncompressedSize = le.Uint32(b[8:12])\n> \u00a0 \u00a0 \u00a0 \u00a0return nil\n> \u00a0}\n>\n> @@ -280,13 +283,13 @@\n>\n> \u00a0 \u00a0 \u00a0 \u00a0// read header into struct\n> \u00a0 \u00a0 \u00a0 \u00a0d := new(directoryEnd)\n> - \u00a0 \u00a0 \u00a0 d.diskNbr = toUint16(b[4:])\n> - \u00a0 \u00a0 \u00a0 d.dirDiskNbr = toUint16(b[6:])\n> - \u00a0 \u00a0 \u00a0 d.dirRecordsThisDisk = toUint16(b[8:])\n> - \u00a0 \u00a0 \u00a0 d.directoryRecords = toUint16(b[10:])\n> - \u00a0 \u00a0 \u00a0 d.directorySize = toUint32(b[12:])\n> - \u00a0 \u00a0 \u00a0 d.directoryOffset = toUint32(b[16:])\n> - \u00a0 \u00a0 \u00a0 d.commentLen = toUint16(b[20:])\n> + \u00a0 \u00a0 \u00a0 d.diskNbr = le.Uint16(b[4:])\n> + \u00a0 \u00a0 \u00a0 d.dirDiskNbr = le.Uint16(b[6:])\n> + \u00a0 \u00a0 \u00a0 d.dirRecordsThisDisk = le.Uint16(b[8:])\n> + \u00a0 \u00a0 \u00a0 d.directoryRecords = le.Uint16(b[10:])\n> + \u00a0 \u00a0 \u00a0 d.directorySize = le.Uint32(b[12:])\n> + \u00a0 \u00a0 \u00a0 d.directoryOffset = le.Uint32(b[16:])\n> + \u00a0 \u00a0 \u00a0 d.commentLen = le.Uint16(b[20:])\n> \u00a0 \u00a0 \u00a0 \u00a0d.comment = string(b[22 : 22+int(d.commentLen)])\n> \u00a0 \u00a0 \u00a0 \u00a0return d, nil\n> \u00a0}\n> @@ -304,9 +307,3 @@\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0return -1\n> \u00a0}\n> -\n> -func toUint16(b []byte) uint16 { return uint16(b[0]) | uint16(b[1])<<8 }\n> -\n> -func toUint32(b []byte) uint32 {\n> - \u00a0 \u00a0 \u00a0 return uint32(b[0]) | uint32(b[1])<<8 | uint32(b[2])<<16 |\n> uint32(b[3])<<24\n> -}\n> Index: src/pkg/archive/zip/writer.go\n> ===================================================================\n> --- a/src/pkg/archive/zip/writer.go\n> +++ b/src/pkg/archive/zip/writer.go\n> @@ -7,6 +7,7 @@\n> \u00a0import (\n> \u00a0 \u00a0 \u00a0 \u00a0\"bufio\"\n> \u00a0 \u00a0 \u00a0 \u00a0\"compress/flate\"\n> + \u00a0 \u00a0 \u00a0 \"encoding/binary\"\n> \u00a0 \u00a0 \u00a0 \u00a0\"errors\"\n> \u00a0 \u00a0 \u00a0 \u00a0\"hash\"\n> \u00a0 \u00a0 \u00a0 \u00a0\"hash/crc32\"\n> @@ -255,15 +256,11 @@\n> \u00a0type writeBuf []byte\n>\n> \u00a0func (b *writeBuf) uint16(v uint16) {\n> - \u00a0 \u00a0 \u00a0 (*b)[0] = byte(v)\n> - \u00a0 \u00a0 \u00a0 (*b)[1] = byte(v >> 8)\n> + \u00a0 \u00a0 \u00a0 binary.LittleEndian.PutUint16(*b, v)\n> \u00a0 \u00a0 \u00a0 \u00a0*b = (*b)[2:]\n> \u00a0}\n>\n> \u00a0func (b *writeBuf) uint32(v uint32) {\n> - \u00a0 \u00a0 \u00a0 (*b)[0] = byte(v)\n> - \u00a0 \u00a0 \u00a0 (*b)[1] = byte(v >> 8)\n> - \u00a0 \u00a0 \u00a0 (*b)[2] = byte(v >> 16)\n> - \u00a0 \u00a0 \u00a0 (*b)[3] = byte(v >> 24)\n> + \u00a0 \u00a0 \u00a0 binary.LittleEndian.PutUint32(*b, v)\n> \u00a0 \u00a0 \u00a0 \u00a0*b = (*b)[4:]\n> \u00a0}\n>\n>\n",
			"disapproval": false,
			"date": "2012-02-27 21:08:49.803091",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-27 21:07:06.451897",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-02-27 22:49:47.825741",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 5695078: archive/zip: don't reimplement encoding/binary LittleEndian",
	"created": "2012-02-27 21:03:48.923369",
	"patchsets": [
		1,
		2001,
		3
	],
	"modified": "2012-02-27 22:49:50.105168",
	"closed": true,
	"issue": 5695078
}