{
	"description": "cmd/go: drop -example, apply -run to examples\nOnce more, with feeling.",
	"cc": [
		"golang-dev@googlegroups.com",
		"gri@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-02-27 21:16:17.413492",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn Mon, Feb 27, 2012 at 1:16 PM,  <r@golang.org> wrote:\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://code.google.com/p/go/\n>\n>\n> Description:\n> cmd/go: drop -example, apply -run to examples\n> Once more, with feeling.\n>\n> Please review this at http://codereview.appspot.com/5698080/\n>\n> Affected files:\n> \u00a0M src/cmd/go/test.go\n> \u00a0M src/cmd/go/testflag.go\n> \u00a0M src/pkg/testing/example.go\n> \u00a0M src/pkg/testing/testing.go\n>\n>\n> Index: src/cmd/go/test.go\n> ===================================================================\n> --- a/src/cmd/go/test.go\n> +++ b/src/cmd/go/test.go\n> @@ -99,11 +99,6 @@\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Run benchmarks matching the regular expression.\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0By default, no benchmarks run.\n>\n> - \u00a0 \u00a0 \u00a0 -test.example pattern\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Run examples matching the regular expression.\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 By default, all examples run, but if -test.run is set,\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 no examples are run.\n> -\n> \u00a0 \u00a0 \u00a0 \u00a0-test.cpuprofile cpu.out\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Write a CPU profile to the specified file before exiting.\n>\n> Index: src/cmd/go/testflag.go\n> ===================================================================\n> --- a/src/cmd/go/testflag.go\n> +++ b/src/cmd/go/testflag.go\n> @@ -28,7 +28,6 @@\n> \u00a0 -benchtime=1: passes -test.benchtime to test\n> \u00a0 -cpu=\"\": passes -test.cpu to test\n> \u00a0 -cpuprofile=\"\": passes -test.cpuprofile to test\n> - \u00a0-example=\"\": passes -test.example to test\n> \u00a0 -memprofile=\"\": passes -test.memprofile to test\n> \u00a0 -memprofilerate=0: passes -test.memprofilerate to test\n> \u00a0 -parallel=0: passes -test.parallel to test\n> @@ -68,7 +67,6 @@\n> \u00a0 \u00a0 \u00a0 \u00a0{name: \"benchtime\", passToTest: true},\n> \u00a0 \u00a0 \u00a0 \u00a0{name: \"cpu\", passToTest: true},\n> \u00a0 \u00a0 \u00a0 \u00a0{name: \"cpuprofile\", passToTest: true},\n> - \u00a0 \u00a0 \u00a0 {name: \"example\", passToTest: true},\n> \u00a0 \u00a0 \u00a0 \u00a0{name: \"memprofile\", passToTest: true},\n> \u00a0 \u00a0 \u00a0 \u00a0{name: \"memprofilerate\", passToTest: true},\n> \u00a0 \u00a0 \u00a0 \u00a0{name: \"parallel\", passToTest: true},\n> Index: src/pkg/testing/example.go\n> ===================================================================\n> --- a/src/pkg/testing/example.go\n> +++ b/src/pkg/testing/example.go\n> @@ -6,7 +6,6 @@\n>\n> \u00a0import (\n> \u00a0 \u00a0 \u00a0 \u00a0\"bytes\"\n> - \u00a0 \u00a0 \u00a0 \"flag\"\n> \u00a0 \u00a0 \u00a0 \u00a0\"fmt\"\n> \u00a0 \u00a0 \u00a0 \u00a0\"io\"\n> \u00a0 \u00a0 \u00a0 \u00a0\"os\"\n> @@ -14,8 +13,6 @@\n> \u00a0 \u00a0 \u00a0 \u00a0\"time\"\n> \u00a0)\n>\n> -var matchExamples = flag.String(\"test.example\", \"\", \"regular expression to\n> select examples to run\")\n> -\n> \u00a0type InternalExample struct {\n> \u00a0 \u00a0 \u00a0 \u00a0Name \u00a0 string\n> \u00a0 \u00a0 \u00a0 \u00a0F \u00a0 \u00a0 \u00a0func()\n> @@ -23,9 +20,6 @@\n> \u00a0}\n>\n> \u00a0func RunExamples(matchString func(pat, str string) (bool, error), examples\n> []InternalExample) (ok bool) {\n> - \u00a0 \u00a0 \u00a0 if *match != \"\" && *matchExamples == \"\" {\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return // Don't run examples if testing is restricted: we're\n> debugging.\n> - \u00a0 \u00a0 \u00a0 }\n> \u00a0 \u00a0 \u00a0 \u00a0ok = true\n>\n> \u00a0 \u00a0 \u00a0 \u00a0var eg InternalExample\n> @@ -33,9 +27,9 @@\n> \u00a0 \u00a0 \u00a0 \u00a0stdout, stderr := os.Stdout, os.Stderr\n>\n> \u00a0 \u00a0 \u00a0 \u00a0for _, eg = range examples {\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 matched, err := matchString(*matchExamples, eg.Name)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 matched, err := matchString(*match, eg.Name)\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if err != nil {\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(os.Stderr, \"testing: invalid regexp for\n> -test.example: %s\\n\", err)\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(os.Stderr, \"testing: invalid regexp for\n> -test.run: %s\\n\", err)\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0os.Exit(1)\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if !matched {\n> Index: src/pkg/testing/testing.go\n> ===================================================================\n> --- a/src/pkg/testing/testing.go\n> +++ b/src/pkg/testing/testing.go\n> @@ -99,7 +99,7 @@\n>\n> \u00a0 \u00a0 \u00a0 \u00a0// Report as tests are run; default is silent for success.\n> \u00a0 \u00a0 \u00a0 \u00a0chatty \u00a0 \u00a0 \u00a0 \u00a0 = flag.Bool(\"test.v\", false, \"verbose: print\n> additional output\")\n> - \u00a0 \u00a0 \u00a0 match \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= flag.String(\"test.run\", \"\", \"regular expression to\n> select tests to run\")\n> + \u00a0 \u00a0 \u00a0 match \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= flag.String(\"test.run\", \"\", \"regular expression to\n> select tests and examples to run\")\n> \u00a0 \u00a0 \u00a0 \u00a0memProfile \u00a0 \u00a0 = flag.String(\"test.memprofile\", \"\", \"write a memory\n> profile to the named file after execution\")\n> \u00a0 \u00a0 \u00a0 \u00a0memProfileRate = flag.Int(\"test.memprofilerate\", 0, \"if >=0, sets\n> runtime.MemProfileRate\")\n> \u00a0 \u00a0 \u00a0 \u00a0cpuProfile \u00a0 \u00a0 = flag.String(\"test.cpuprofile\", \"\", \"write a cpu\n> profile to the named file during execution\")\n>\n>\n",
			"disapproval": false,
			"date": "2012-02-27 21:22:37.817993",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=c4bd8c697c5b ***\n\ncmd/go: drop -example, apply -run to examples\nOnce more, with feeling.\n\nR=golang-dev, gri\nCC=golang-dev\nhttp://codereview.appspot.com/5698080",
			"disapproval": false,
			"date": "2012-02-27 21:33:13.098926",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5698080: cmd/go: drop -example, apply -run to examples",
	"created": "2012-02-27 21:16:10.161175",
	"patchsets": [
		1,
		3002
	],
	"modified": "2012-02-27 21:33:14.977790",
	"closed": true,
	"issue": 5698080
}