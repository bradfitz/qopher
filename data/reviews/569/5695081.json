{
	"description": "go.crypto/ssh: Initial checkin of ssh agent support.",
	"cc": [
		"agl@golang.org",
		"dave@cheney.net",
		"djm@djm.net.au",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "agl@golang.org",
			"recipients": [
				"jmpittman@google.com",
				"agl@golang.org",
				"dave@cheney.net",
				"djm@djm.net.au",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5695081/diff/4001/ssh/agent.go\nFile ssh/agent.go (right):\n\nhttp://codereview.appspot.com/5695081/diff/4001/ssh/agent.go#newcode20\nssh/agent.go:20: msgRequestRSAIdentities   = 1\nWe already use the 'msg' prefix in messages.go for SSH protocol messages. We should use something different here. 'agent' maybe?\n\nhttp://codereview.appspot.com/5695081/diff/4001/ssh/agent.go#newcode63\nssh/agent.go:63: type failureMsg struct{}\nagain with the 'Msg' suffix. 'AgentMsg' maybe?\n\nhttp://codereview.appspot.com/5695081/diff/4001/ssh/agent.go#newcode109\nssh/agent.go:109: ok = true\ncan remove this line and s/ok/true on the next.\n\nhttp://codereview.appspot.com/5695081/diff/4001/ssh/agent.go#newcode132\nssh/agent.go:132: n, err := ac.Read(respSizeBuf[:])\nNormally a short read is ok and it's the receiver's job to loop until the data is ready. io.ReadFull?\n\nhttp://codereview.appspot.com/5695081/diff/4001/ssh/agent.go#newcode137\nssh/agent.go:137: return nil, errors.New(\"ssh: Short read while reading response size.\")\nby custom, there are no periods at the end of error strings. Also, no capital letters at the start.\n\nhttp://codereview.appspot.com/5695081/diff/4001/ssh/agent.go#newcode146\nssh/agent.go:146: if n, err = ac.Read(buf); err != nil {\nditto about io.ReadFull\n\nhttp://codereview.appspot.com/5695081/diff/4001/ssh/agent.go#newcode218\nssh/agent.go:218: switch packet[0] {\nneeds to test that len(packet) > 0 first.\n\nhttp://codereview.appspot.com/5695081/diff/4001/ssh/messages.go\nFile ssh/messages.go (right):\n\nhttp://codereview.appspot.com/5695081/diff/4001/ssh/messages.go#newcode261\nssh/messages.go:261: // Currently, the only known reason for a\nI think that this is too message specific. A \"rest\" tag can be used to grab the trailer of a message and then it can be parsed more specifically closer to home (i.e. decodeAgentMsg).",
			"disapproval": false,
			"date": "2012-02-28 01:04:13.991892",
			"approval": false
		},
		{
			"sender": "jmpittman@google.com",
			"recipients": [
				"jmpittman@google.com",
				"agl@golang.org",
				"dave@cheney.net",
				"djm@djm.net.au",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@golang.org, dave@cheney.net, djm@djm.net.au (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.crypto",
			"disapproval": false,
			"date": "2012-02-27 23:25:51.695555",
			"approval": false
		},
		{
			"sender": "jmpittman@google.com",
			"recipients": [
				"jmpittman@google.com",
				"agl@golang.org",
				"dave@cheney.net",
				"djm@djm.net.au",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@golang.org, dave@cheney.net, djm@djm.net.au (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-29 04:44:04.250859",
			"approval": false
		},
		{
			"sender": "jmpittman@google.com",
			"recipients": [
				"jmpittman@google.com",
				"agl@golang.org",
				"dave@cheney.net",
				"djm@djm.net.au",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@golang.org, dave@cheney.net, djm@djm.net.au (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-29 04:57:57.824879",
			"approval": false
		},
		{
			"sender": "jmpittman@google.com",
			"recipients": [
				"jmpittman@google.com",
				"agl@golang.org",
				"dave@cheney.net",
				"djm@djm.net.au",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I refactored some things I realized I did not like and also did not make any sense.  At djm's suggestion, I completely dropped anything related to protocol 1 keys and requests/responses.  I changed proto2Key to AgentKey and ListProto2Keys to RequestIdentities (which more closely aligns with the name in PROTOCOL.agent).  And now RequestIdentities returns a []*AgentKey instead of []interface{}.\n\nI am not completely happy about line 88 (\"malformed key\"), but am not certain what the approach should be here.  The String() string method is useful to show a typical representation of a key/cert as would be seen on disk.\n\nhttp://codereview.appspot.com/5695081/diff/4001/ssh/agent.go\nFile ssh/agent.go (right):\n\nhttp://codereview.appspot.com/5695081/diff/4001/ssh/agent.go#newcode20\nssh/agent.go:20: msgRequestRSAIdentities   = 1\nSGTM.  I had agent at first, but thought I should conform to the msg prefix since these messages are very similar in form and format to the ssh protocol messages.\n\nDone.\n\nhttp://codereview.appspot.com/5695081/diff/4001/ssh/agent.go#newcode63\nssh/agent.go:63: type failureMsg struct{}\nOn 2012/02/28 01:04:14, agl1 wrote:\n> again with the 'Msg' suffix. 'AgentMsg' maybe?\n\nDone.\n\nhttp://codereview.appspot.com/5695081/diff/4001/ssh/agent.go#newcode109\nssh/agent.go:109: ok = true\nOn 2012/02/28 01:04:14, agl1 wrote:\n> can remove this line and s/ok/true on the next.\n\nDone.\n\nhttp://codereview.appspot.com/5695081/diff/4001/ssh/agent.go#newcode132\nssh/agent.go:132: n, err := ac.Read(respSizeBuf[:])\nOn 2012/02/28 01:04:14, agl1 wrote:\n> Normally a short read is ok and it's the receiver's job to loop until the data\n> is ready. io.ReadFull?\n\nDone.\n\nhttp://codereview.appspot.com/5695081/diff/4001/ssh/agent.go#newcode137\nssh/agent.go:137: return nil, errors.New(\"ssh: Short read while reading response size.\")\nOn 2012/02/28 01:04:14, agl1 wrote:\n> by custom, there are no periods at the end of error strings. Also, no capital\n> letters at the start.\n\nDone.\n\nhttp://codereview.appspot.com/5695081/diff/4001/ssh/agent.go#newcode146\nssh/agent.go:146: if n, err = ac.Read(buf); err != nil {\nOn 2012/02/28 01:04:14, agl1 wrote:\n> ditto about io.ReadFull\n\nDone.\n\nhttp://codereview.appspot.com/5695081/diff/4001/ssh/agent.go#newcode218\nssh/agent.go:218: switch packet[0] {\nShould that return nil or an error such as...\n\nif len(packet) < 1 {\n        return ...\n}\n\nreturn nil\nreturn ParseError{0}\nreturn errors.New(\"ssh: empty packet\")\n\nhttp://codereview.appspot.com/5695081/diff/4001/ssh/messages.go\nFile ssh/messages.go (right):\n\nhttp://codereview.appspot.com/5695081/diff/4001/ssh/messages.go#newcode261\nssh/messages.go:261: // Currently, the only known reason for a\n*sigh* That makes so much more sense.  I did not particularly like this bit anyway.  Happy to remove it.\n\nDone.",
			"disapproval": false,
			"date": "2012-02-29 04:50:47.353719",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"jmpittman@google.com",
				"agl@golang.org",
				"dave@cheney.net",
				"djm@djm.net.au",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5695081/diff/9002/ssh/agent.go\nFile ssh/agent.go (right):\n\nhttp://codereview.appspot.com/5695081/diff/9002/ssh/agent.go#newcode88\nssh/agent.go:88: return \"malformed key\"\nLooks like you need to return a bool too :)\n\nhttp://codereview.appspot.com/5695081/diff/9002/ssh/agent.go#newcode102\nssh/agent.go:102: // Key returns the corresponding struct form of a public key that an AgentKey\nThe comment seems a little obtuse.\n\n\"Key returns the agent's public key as a *rsa.PublicKey or *dsa.PublicKey.\" ?\n\nhttp://codereview.appspot.com/5695081/diff/9002/ssh/agent.go#newcode118\nssh/agent.go:118: cmnt, in, ok := parseString(in)\ns/cmnt/comment/\n\nhttp://codereview.appspot.com/5695081/diff/9002/ssh/agent.go#newcode176\nssh/agent.go:176: keys := make([]*AgentKey, msg.NumKeys)\nSanity check NumKeys first. (i.e. < 1000000 or so)\n\nhttp://codereview.appspot.com/5695081/diff/9002/ssh/agent.go#newcode196\nssh/agent.go:196: // as defined in PROTOCOL.agent section 2.6.2.\nComment should say what concrete types |key| can take.\n\nhttp://codereview.appspot.com/5695081/diff/9002/ssh/agent.go#newcode201\nssh/agent.go:201: Flags:   0,\nFlags will default to zero.",
			"disapproval": false,
			"date": "2012-03-02 17:04:55.351650",
			"approval": false
		},
		{
			"sender": "jmpittman@google.com",
			"recipients": [
				"jmpittman@google.com",
				"agl@golang.org",
				"dave@cheney.net",
				"djm@djm.net.au",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@golang.org, dave@cheney.net, djm@djm.net.au (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-03-02 19:01:12.570913",
			"approval": false
		},
		{
			"sender": "jmpittman@google.com",
			"recipients": [
				"jmpittman@google.com",
				"agl@golang.org",
				"dave@cheney.net",
				"djm@djm.net.au",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5695081/diff/9002/ssh/agent.go\nFile ssh/agent.go (right):\n\nhttp://codereview.appspot.com/5695081/diff/9002/ssh/agent.go#newcode88\nssh/agent.go:88: return \"malformed key\"\nhmmm...  I was going for the fmt.Stringer interface for generic fmt printing purposes.  If returning a bool/error is the proper thing to do, then what would you suggest for a method name?  And what should a \"String() string\" method return for a malformed key?\n\nhttp://codereview.appspot.com/5695081/diff/9002/ssh/agent.go#newcode102\nssh/agent.go:102: // Key returns the corresponding struct form of a public key that an AgentKey\nI felt the wording funny, but couldn't come up with anything good (it was late).  I wanted to make it more generic.  The AgentKey is not limited to *rsa.PublicKey or *dsa.PublicKey.  For the time being, I added those and *OpenSSHCertV01.\n\nPTAL\n\nhttp://codereview.appspot.com/5695081/diff/9002/ssh/agent.go#newcode118\nssh/agent.go:118: cmnt, in, ok := parseString(in)\nOn 2012/03/02 17:04:55, agl1 wrote:\n> s/cmnt/comment/\n\nDone.\n\nhttp://codereview.appspot.com/5695081/diff/9002/ssh/agent.go#newcode176\nssh/agent.go:176: keys := make([]*AgentKey, msg.NumKeys)\nI have not seen a limit specified anywhere for number of keys.  In c++ and python code I have seen that do this sort of thing (ssh-add.c & authfd.c from openssh, agent.py from twisted, etc), none of them seem to add a sanity check for limits on NumKeys.  The only limit appears to be the upper bound of a uint32.\n\nHowever, I have seen examples that do a limit check on the generic response size (would be done in readResponse above).  In authfd.c...\n\n/* Extract the length, and check it for sanity. */\nlen = get_u32(buf);\nif (len > 256 * 1024)\n\tfatal(\"Authentication response too long: %u\", len);\n\nAnother example compared (1024 * 1024) for the response size sanity check.\n\nDoes adding a sanity check for respSize seem more reasonable to you?\n\nhttp://codereview.appspot.com/5695081/diff/9002/ssh/agent.go#newcode196\nssh/agent.go:196: // as defined in PROTOCOL.agent section 2.6.2.\nPTAL\n\nhttp://codereview.appspot.com/5695081/diff/9002/ssh/agent.go#newcode201\nssh/agent.go:201: Flags:   0,\nOn 2012/03/02 17:04:55, agl1 wrote:\n> Flags will default to zero.\n\nDone.",
			"disapproval": false,
			"date": "2012-03-02 19:01:29.671198",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Mar 2, 2012 at 11:08 AM,  <jmpittman@google.com> wrote:\n> Gotcha. \u00a0Before you submit, I can do...\n>\n> var keys []*AgentKey\n>\n> and then use apppend below instead of i for direct assignment. \u00a0Would\n> that be more satisfactory?\n\nEh, more allocation and no very clear code gain. Don't worry about it.\n\n\nCheers\n\nAGL\n",
			"disapproval": false,
			"date": "2012-03-02 19:10:17.315607",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"jmpittman@google.com",
				"agl@golang.org",
				"dave@cheney.net",
				"djm@djm.net.au",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. Will land.\n\nhttp://codereview.appspot.com/5695081/diff/9002/ssh/agent.go\nFile ssh/agent.go (right):\n\nhttp://codereview.appspot.com/5695081/diff/9002/ssh/agent.go#newcode88\nssh/agent.go:88: return \"malformed key\"\nOn 2012/03/02 19:01:29, jmpittman wrote:\n> hmmm...  I was going for the fmt.Stringer interface for generic fmt printing\n> purposes.  If returning a bool/error is the proper thing to do, then what would\n> you suggest for a method name?  And what should a \"String() string\" method\n> return for a malformed key?\n\nOh, I see. Sorry. Please forget about my comment.\n\nhttp://codereview.appspot.com/5695081/diff/9002/ssh/agent.go#newcode176\nssh/agent.go:176: keys := make([]*AgentKey, msg.NumKeys)\nOn 2012/03/02 19:01:29, jmpittman wrote:\n> Does adding a sanity check for respSize seem more reasonable to you?\n\nI'm worried about a bad agent causing GBs of memory to be allocated. But we probably have other bugs like that elsewhere in ssh and need to do a fix pass. So never mind about this for now.",
			"disapproval": false,
			"date": "2012-03-02 19:06:24.552418",
			"approval": true
		},
		{
			"sender": "jmpittman@google.com",
			"recipients": [
				"jmpittman@google.com",
				"agl@golang.org",
				"dave@cheney.net",
				"djm@djm.net.au",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Gotcha.  Before you submit, I can do...\n\nvar keys []*AgentKey\n\nand then use apppend below instead of i for direct assignment.  Would that be more satisfactory?",
			"disapproval": false,
			"date": "2012-03-02 19:08:04.071022",
			"approval": false
		},
		{
			"sender": "jmpittman@google.com",
			"recipients": [
				"jmpittman@google.com",
				"agl@golang.org",
				"dave@cheney.net",
				"djm@djm.net.au",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Cool.  Thanks!",
			"disapproval": false,
			"date": "2012-03-02 19:11:10.903249",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"jmpittman@google.com",
				"agl@golang.org",
				"dave@cheney.net",
				"djm@djm.net.au",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=861daa0e6913&repo=crypto ***\n\ngo.crypto/ssh: Initial checkin of ssh agent support.\n\nR=agl, dave, djm\nCC=golang-dev\nhttp://codereview.appspot.com/5695081\n\nCommitter: Adam Langley <agl@golang.org>",
			"disapproval": false,
			"date": "2012-03-02 19:17:30.715168",
			"approval": false
		},
		{
			"sender": "jmpittman@google.com",
			"recipients": [
				"jmpittman@google.com",
				"agl@golang.org",
				"dave@cheney.net",
				"djm@djm.net.au",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-03-05 14:54:27.517758",
			"approval": false
		}
	],
	"owner_email": "jmpittman@google.com",
	"private": false,
	"base_url": "",
	"owner": "jmpittman",
	"subject": "code review 5695081: go.crypto/ssh: Initial checkin of ssh agent support.",
	"created": "2012-02-27 23:14:19.017608",
	"patchsets": [
		1,
		2001,
		4001,
		6001,
		9002,
		12001
	],
	"modified": "2012-03-05 14:54:28.799274",
	"closed": true,
	"issue": 5695081
}