{
	"description": "    encoding/csv: add arbitrary quote character support\n\nThis is inspired by the quotechar option in python's csv package. It came\nup in a go project I am working on, so I figured I may as well add the\nfunctionality. The change is relatively straightforward, but as this is my\nfirst code submission to golang, I'd appreciate any and all advice anyone\nhas to offer.\n\nAlso, I'm not very happy with writer.go:67. That seems like a dumb way to\ndo what needs to be done, but I can't really think of a better way, I hope\nthose wiser than me can come up with something, or at least reassure me\nthat it isn't too bad. ;D",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"bradfitz@golang.org"
	],
	"messages": [
		{
			"sender": "peter@thepicard.org",
			"recipients": [
				"peter@thepicard.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-05-03 01:47:12.135100",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"peter@thepicard.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It does seem reasonable but\n- it's non-standard\n- it's an API change, although permitted by the rules\n- we're holding off on non-critical changes right now\n\nNever having used CSV in anger (is there any other way?) I'm not sure whether this is a good idea or not. Opinions welcome.\n\nhttps://codereview.appspot.com/9157043/diff/5001/src/pkg/encoding/csv/writer.go\nFile src/pkg/encoding/csv/writer.go (right):\n\nhttps://codereview.appspot.com/9157043/diff/5001/src/pkg/encoding/csv/writer.go#newcode67\nsrc/pkg/encoding/csv/writer.go:67: _, err = w.w.WriteString(string([]rune{w.Quote, w.Quote}))\njust call w.w.WriteRune twice. as written, you're allocating every time you hit this line.",
			"disapproval": false,
			"date": "2013-05-03 01:56:36.896180",
			"approval": false
		},
		{
			"sender": "peter@thepicard.org",
			"recipients": [
				"peter@thepicard.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I know it's nonstandard, but a lot of things make weird CSV files. The case could definitely be made that Go shouldn't support writing invalid files. But as far as reading goes, the only way to convert a csv file for reading by a standards-only parser is to parse it with a different quote character, which you can't currently do. Doing regular character replacement is... a mess.\n\nAs for critical/noncritical, I'll be using this code in _my_ version of Go for my application, so whether it gets released sooner, later, or at all doesn't matter to me too much. But I am happy to contribute if this change is deemed valuable. =)\n\nhttps://codereview.appspot.com/9157043/diff/5001/src/pkg/encoding/csv/writer.go\nFile src/pkg/encoding/csv/writer.go (right):\n\nhttps://codereview.appspot.com/9157043/diff/5001/src/pkg/encoding/csv/writer.go#newcode67\nsrc/pkg/encoding/csv/writer.go:67: _, err = w.w.WriteString(string([]rune{w.Quote, w.Quote}))\nOn 2013/05/03 01:56:37, r wrote:\n> just call w.w.WriteRune twice. as written, you're allocating every time you hit\n> this line.\n\nI figured that something along those lines would be happening. Do you see the need to check for errors in between the two writes or would any error just occur the same for both of them and be caught by the check on line 81? I was trying to avoid duplicating that check but I'd rather duplicate it than do an allocation.",
			"disapproval": false,
			"date": "2013-05-03 02:07:35.391790",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "NOT LGTM\r\n\r\nAlthough it's a minor change, it adds complexity for a marginal,\r\nnon-standard purpose and can be worked around.\r\n\r\nIn the interests of API purity, we say a polite \"no, thank you\".\r\n\r\n-rob\r\n",
			"disapproval": true,
			"date": "2013-05-14 23:27:53.951080",
			"approval": false
		},
		{
			"sender": "peter@thepicard.org",
			"recipients": [
				"peter@thepicard.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Understandable, considering I worked around the problem without much difficulty. Thank you for the review, and sharing your reasoning.\n\nPeter\n\nOn 2013/05/14 23:27:53, r wrote:\n> NOT LGTM\n> \n> Although it's a minor change, it adds complexity for a marginal,\n> non-standard purpose and can be worked around.\n> \n> In the interests of API purity, we say a polite \"no, thank you\".\n> \n> -rob",
			"disapproval": false,
			"date": "2013-05-16 15:05:15.250510",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"peter@thepicard.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=close",
			"disapproval": false,
			"date": "2013-06-18 02:39:26.303800",
			"approval": false
		}
	],
	"owner_email": "peter@thepicard.org",
	"private": false,
	"base_url": "",
	"owner": "peterfaiman",
	"subject": "code review 9157043:     encoding/csv: add arbitrary quote character support",
	"created": "2013-05-03 01:40:50.533550",
	"patchsets": [
		1,
		2001,
		5001,
		12001
	],
	"modified": "2013-06-18 02:39:26.410360",
	"closed": false,
	"issue": 9157043
}