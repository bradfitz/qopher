{
	"description": "go.tools/cmd/cover: new tool\n\nThis is just the tool proper; stitching into \"go test\" will be a separate CL.\nTests are missing - they'll come once it's integrated - but it can handle,\nperhaps correctly, all of src/pkg/...\n\nThe basic approach is to rewrite the source to add annotations that will\ntrack coverage; the rewritten source must of course be compiled and\nrun after this tool has done its job.",
	"cc": [
		"adonovan@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.tools",
			"disapproval": false,
			"date": "2013-06-06 22:55:58.338610",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"r@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/10102043/diff/5001/cmd/cover/cover.go\nFile cmd/cover/cover.go (right):\n\nhttps://codereview.appspot.com/10102043/diff/5001/cmd/cover/cover.go#newcode198\ncmd/cover/cover.go:198: return &ast.ExprStmt{\nOn 2013/06/07 01:05:19, r wrote:\n> On 2013/06/06 23:25:36, adonovan wrote:\n> > Would this look nicer (more tree-like) as one big composite literal?\n> \n> maybe, but i think the comment is what you read anyway. let's try it though. see\n> if you're gruntled.\n\nI am gruntled since you resheveled it.\n\nhttps://codereview.appspot.com/10102043/diff/5001/cmd/cover/cover.go#newcode247\ncmd/cover/cover.go:247: newList = append(newList, f.newCounter(pos, end)[0])\nOn 2013/06/07 01:05:19, r wrote:\n> On 2013/06/06 23:25:36, adonovan wrote:\n> > Combine appends? \n> >   newList = append(newList, f.newCounter(pos, end), list[0:last])\n> \n> that's not legal Go\n\nEr, right.\n\nhttps://codereview.appspot.com/10102043/diff/5001/cmd/cover/cover.go#newcode306\ncmd/cover/cover.go:306: if _, ok := s.Call.Fun.(*ast.FuncLit); ok {\nOn 2013/06/07 01:05:19, r wrote:\n> On 2013/06/06 23:25:36, adonovan wrote:\n> > Apply noparens(s.Call.Fun) when testing subexpressions.\n> > \n> > (noparens is a utility that strips all ast.ParenExpr constructors.)\n> \n> does that utility exist, or must i write it?\n> \n> doesn't matter anyway because this was a dreg.\n\nIt's unexported in go/ast so it's copypasta for now.",
			"disapproval": false,
			"date": "2013-06-07 01:58:35.986280",
			"approval": true
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"r@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LG, though it needs tests obviously.\n\nhttps://codereview.appspot.com/10102043/diff/5001/cmd/cover/cover.go\nFile cmd/cover/cover.go (right):\n\nhttps://codereview.appspot.com/10102043/diff/5001/cmd/cover/cover.go#newcode31\ncmd/cover/cover.go:31: mode     = flag.String(\"mode\", \"set\", \"coverage mode: set, sum, atomic\")\nWhere should the command-line documentation live?  \"go help test\"?\n\nhttps://codereview.appspot.com/10102043/diff/5001/cmd/cover/cover.go#newcode73\ncmd/cover/cover.go:73: startByte token.Pos\ns/Byte/Pos/g/\nThe token.Pos documentation doesn't talk about byte offsets, and if you parse multiple files, they'll be byte offsets + some constant.\n\nhttps://codereview.appspot.com/10102043/diff/5001/cmd/cover/cover.go#newcode81\ncmd/cover/cover.go:81: name        string // Name of file.\nRedundant comment.\n\nhttps://codereview.appspot.com/10102043/diff/5001/cmd/cover/cover.go#newcode88\ncmd/cover/cover.go:88: // Visit implements the ast.Visitor interface.\nReally it's *File that implements the interface.\n\n\"Visit transforms each list of statements beneath node by applying f.addCounters to it.\"\n\nhttps://codereview.appspot.com/10102043/diff/5001/cmd/cover/cover.go#newcode118\ncmd/cover/cover.go:118: {\nIs this block to become a loop someday?\n\nhttps://codereview.appspot.com/10102043/diff/5001/cmd/cover/cover.go#newcode198\ncmd/cover/cover.go:198: return &ast.ExprStmt{\nWould this look nicer (more tree-like) as one big composite literal?\n\nhttps://codereview.appspot.com/10102043/diff/5001/cmd/cover/cover.go#newcode212\ncmd/cover/cover.go:212: return []ast.Stmt{stmt}\nMight be more natural to move the slice-making to the caller, especially since one of them immediately undoes it.\n\nhttps://codereview.appspot.com/10102043/diff/5001/cmd/cover/cover.go#newcode215\ncmd/cover/cover.go:215: // addCounters takes a list of statements and adds counters to the beginning of\nDo nested BlockStmts get unnecessary counters?\n\ni.e. does S2 get its own counter here?\n   S1\n   {\n     S2\n   }\n   S3\n\nhttps://codereview.appspot.com/10102043/diff/5001/cmd/cover/cover.go#newcode247\ncmd/cover/cover.go:247: newList = append(newList, f.newCounter(pos, end)[0])\nCombine appends? \n  newList = append(newList, f.newCounter(pos, end), list[0:last])\n\nhttps://codereview.appspot.com/10102043/diff/5001/cmd/cover/cover.go#newcode306\ncmd/cover/cover.go:306: if _, ok := s.Call.Fun.(*ast.FuncLit); ok {\nApply noparens(s.Call.Fun) when testing subexpressions.\n\n(noparens is a utility that strips all ast.ParenExpr constructors.)\n\nhttps://codereview.appspot.com/10102043/diff/5001/cmd/cover/cover.go#newcode332\ncmd/cover/cover.go:332: found bool      // whether a function literal was found.\nYou could replace found by pos!=token.NoPos and thus funcLitFinder by just a token.Pos if you like.\n\nhttps://codereview.appspot.com/10102043/diff/5001/cmd/cover/cover.go#newcode344\ncmd/cover/cover.go:344: return nil\nreturn nil // prune search\n\nhttps://codereview.appspot.com/10102043/diff/5001/cmd/cover/cover.go#newcode351\ncmd/cover/cover.go:351: type Block1 struct {\nDoes this type really want to be exported?",
			"disapproval": false,
			"date": "2013-06-06 23:25:36.551020",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-06-07 01:04:38.320010",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10102043/diff/5001/cmd/cover/cover.go\nFile cmd/cover/cover.go (right):\n\nhttps://codereview.appspot.com/10102043/diff/5001/cmd/cover/cover.go#newcode31\ncmd/cover/cover.go:31: mode     = flag.String(\"mode\", \"set\", \"coverage mode: set, sum, atomic\")\nOn 2013/06/06 23:25:36, adonovan wrote:\n> Where should the command-line documentation live?  \"go help test\"?\n\nyes, but i'll put some more here too once it's finalized.\n\nhttps://codereview.appspot.com/10102043/diff/5001/cmd/cover/cover.go#newcode118\ncmd/cover/cover.go:118: {\nOn 2013/06/06 23:25:36, adonovan wrote:\n> Is this block to become a loop someday?\n\nno. it once was. now it's one file at a time.\n\nhttps://codereview.appspot.com/10102043/diff/5001/cmd/cover/cover.go#newcode198\ncmd/cover/cover.go:198: return &ast.ExprStmt{\nOn 2013/06/06 23:25:36, adonovan wrote:\n> Would this look nicer (more tree-like) as one big composite literal?\n\nmaybe, but i think the comment is what you read anyway. let's try it though. see if you're gruntled.\n\nhttps://codereview.appspot.com/10102043/diff/5001/cmd/cover/cover.go#newcode212\ncmd/cover/cover.go:212: return []ast.Stmt{stmt}\nOn 2013/06/06 23:25:36, adonovan wrote:\n> Might be more natural to move the slice-making to the caller, especially since\n> one of them immediately undoes it.\n\ndone. it was a holdover from an earlier implementation\n\nhttps://codereview.appspot.com/10102043/diff/5001/cmd/cover/cover.go#newcode215\ncmd/cover/cover.go:215: // addCounters takes a list of statements and adds counters to the beginning of\nyes, but they're correct. added a TODO\n\nhttps://codereview.appspot.com/10102043/diff/5001/cmd/cover/cover.go#newcode247\ncmd/cover/cover.go:247: newList = append(newList, f.newCounter(pos, end)[0])\nOn 2013/06/06 23:25:36, adonovan wrote:\n> Combine appends? \n>   newList = append(newList, f.newCounter(pos, end), list[0:last])\n\nthat's not legal Go\n\nhttps://codereview.appspot.com/10102043/diff/5001/cmd/cover/cover.go#newcode306\ncmd/cover/cover.go:306: if _, ok := s.Call.Fun.(*ast.FuncLit); ok {\nOn 2013/06/06 23:25:36, adonovan wrote:\n> Apply noparens(s.Call.Fun) when testing subexpressions.\n> \n> (noparens is a utility that strips all ast.ParenExpr constructors.)\n\ndoes that utility exist, or must i write it?\n\ndoesn't matter anyway because this was a dreg.\n\nhttps://codereview.appspot.com/10102043/diff/5001/cmd/cover/cover.go#newcode332\ncmd/cover/cover.go:332: found bool      // whether a function literal was found.\nOn 2013/06/06 23:25:36, adonovan wrote:\n> You could replace found by pos!=token.NoPos and thus funcLitFinder by just a\n> token.Pos if you like.\n\ni started with that, but then thought it was tricky. you talked me into it.\n\nhttps://codereview.appspot.com/10102043/diff/5001/cmd/cover/cover.go#newcode344\ncmd/cover/cover.go:344: return nil\nOn 2013/06/06 23:25:36, adonovan wrote:\n> return nil // prune search\n\nDone.\n\nhttps://codereview.appspot.com/10102043/diff/5001/cmd/cover/cover.go#newcode351\ncmd/cover/cover.go:351: type Block1 struct {\nOn 2013/06/06 23:25:36, adonovan wrote:\n> Does this type really want to be exported?\n\n\nit's not exported far - this is a main. but ok.",
			"disapproval": false,
			"date": "2013-06-07 01:05:18.933810",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=956fb611bffb&repo=tools ***\n\ngo.tools/cmd/cover: new tool\n\nThis is just the tool proper; stitching into \"go test\" will be a separate CL.\nTests are missing - they'll come once it's integrated - but it can handle,\nperhaps correctly, all of src/pkg/...\n\nThe basic approach is to rewrite the source to add annotations that will\ntrack coverage; the rewritten source must of course be compiled and\nrun after this tool has done its job.\n\nR=adonovan\nCC=golang-dev\nhttps://codereview.appspot.com/10102043",
			"disapproval": false,
			"date": "2013-06-07 06:51:54.826090",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 10102043: go.tools/cmd/cover: new tool",
	"created": "2013-06-06 22:55:53.398580",
	"patchsets": [
		1,
		3,
		5001,
		10001,
		15001,
		5
	],
	"modified": "2013-06-07 06:51:56.540610",
	"closed": true,
	"issue": 10102043
}