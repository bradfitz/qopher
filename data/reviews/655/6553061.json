{
	"description": "net/http: use r.Body.Close to close connection during TestServeFileFromCWD\n\nFixes issue 3917.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-09-24 02:29:35.229570",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=8841bdb36594 ***\n\nnet/http: use r.Body.Close to close connection during TestServeFileFromCWD\n\nFixes issue 3917.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/6553061",
			"disapproval": false,
			"date": "2012-09-24 02:48:27.410940",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nbut leaking 1 fd was enough to make the windows builders flaky?\r\n\r\n\r\nOn Sun, Sep 23, 2012 at 7:29 PM, <alex.brainman@gmail.com> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> net/http: use r.Body.Close to close connection during\r\n> TestServeFileFromCWD\r\n>\r\n> Fixes issue 3917.\r\n>\r\n> Please review this at http://codereview.appspot.com/**6553061/<http://codereview.appspot.com/6553061/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/net/http/fs_test.go\r\n>\r\n>\r\n> Index: src/pkg/net/http/fs_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/http/fs_test.go\r\n> +++ b/src/pkg/net/http/fs_test.go\r\n> @@ -340,11 +340,6 @@\r\n>  }\r\n>\r\n>  func TestServeFileFromCWD(t *testing.T) {\r\n> -       if runtime.GOOS == \"windows\" {\r\n> -               // TODO(brainman): find out why this test is broken\r\n> -               t.Logf(\"Temporarily skipping test on Windows; see\r\n> http://golang.org/issue/3917\")\r\n> -               return\r\n> -       }\r\n>         ts := httptest.NewServer(**HandlerFunc(func(w ResponseWriter, r\r\n> *Request) {\r\n>                 ServeFile(w, r, \"fs_test.go\")\r\n>         }))\r\n> @@ -353,6 +348,7 @@\r\n>         if err != nil {\r\n>                 t.Fatal(err)\r\n>         }\r\n> +       r.Body.Close()\r\n>         if r.StatusCode != 200 {\r\n>                 t.Fatalf(\"expected 200 OK, got %s\", r.Status)\r\n>         }\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-09-24 02:31:36.238870",
			"approval": true
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/24 02:31:36, bradfitz wrote:\n> \n> but leaking 1 fd was enough to make the windows builders flaky?\n> \n\nI had the benefit of looking at the builder, so I can investigate the problem. What is happening is ServeFile never finishes, because it waits for the client to receive the file, but client never does, unless I put r.BodyClose in. I think this test is \"flaky\", and now I am fixing it.\n\nAlex",
			"disapproval": false,
			"date": "2012-09-24 02:46:10.794280",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Sep 23, 2012 at 7:46 PM, <alex.brainman@gmail.com> wrote:\r\n\r\n> On 2012/09/24 02:31:36, bradfitz wrote:\r\n>\r\n>  but leaking 1 fd was enough to make the windows builders flaky?\r\n>>\r\n>\r\n>\r\n> I had the benefit of looking at the builder, so I can investigate the\r\n> problem. What is happening is ServeFile never finishes, because it waits\r\n> for the client to receive the file, but client never does, unless I put\r\n> r.BodyClose in. I think this test is \"flaky\", and now I am fixing it.\r\n>\r\n\r\nThat sounds like an implementation difference between Windows and Unix.\r\n The client closing or not shouldn't affect the server's blocking.  I'm\r\nmore worried about that.\r\n",
			"disapproval": false,
			"date": "2012-09-24 05:37:21.211220",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/24 05:37:21, bradfitz wrote:\n> \n> That sounds like an implementation difference between Windows and Unix.\n\nI wish I could agree with you here, but I do not see how.\n\n>  The client closing or not shouldn't affect the server's blocking.  I'm\n> more worried about that.\n\nBefore my change, the client was not closing connection, the server was supposed to. But server could only get to that line after it has finished writing response body. And writing response body was blocked, because client was not reading it. You say server writes should not be affected by client reads, but they are. Writing 1 byte will probably succeed, 100 bytes will too, but 100 Mbytes would fail. Don't you think? So, it just a matter of where this limit is. And it, obviously, varies in different environments.\n\nHere is to demonstrate original problem:\n\nc:\\go\\src\\pkg\\net\\http>hg par\nchangeset:   14126:86c06191bea6\ntag:         tip\nuser:        Mikio Hara <mikioh.mikioh@gmail.com>\ndate:        Wed Sep 19 07:04:12 2012 +0900\nsummary:     cmd/api: fix signatures like func(x, y, z int)\n\nI have applied this:\n\ndiff --git a/src/pkg/net/http/alex.go b/src/pkg/net/http/alex.go\nnew file mode 100644\n--- /dev/null\n+++ b/src/pkg/net/http/alex.go\n@@ -0,0 +1,60 @@\n+package http\n+\n+import (\n+\t\"fmt\"\n+\t\"net\"\n+\t\"time\"\n+)\n+\n+type ConnSniffer struct {\n+\tconn net.Conn\n+}\n+\n+func NewConnSniffer(conn net.Conn) *ConnSniffer {\n+\treturn &ConnSniffer{\n+\t\tconn: conn,\n+\t}\n+}\n+\n+func showSome(b []byte) string {\n+\tif len(b) < 40 {\n+\t\treturn string(b)\n+\t}\n+\treturn fmt.Sprintf(\"%q ... %q\", b[:20], b[len(b)-20:])\n+}\n+\n+func (s *ConnSniffer) Read(b []byte) (int, error) {\n+\tn, err := s.conn.Read(b)\n+\tfmt.Printf(\"read n=%d data=[%v] err=%v\\n\", n, showSome(b[:n]), err)\n+\treturn n, err\n+}\n+\n+func (s *ConnSniffer) Write(b []byte) (int, error) {\n+\tn, err := s.conn.Write(b)\n+\tfmt.Printf(\"written n=%d data=[%v] err=%v\\n\", n, showSome(b[:n]), err)\n+\treturn n, err\n+}\n+\n+func (s *ConnSniffer) Close() error {\n+\treturn s.conn.Close()\n+}\n+\n+func (s *ConnSniffer) LocalAddr() net.Addr {\n+\treturn s.conn.LocalAddr()\n+}\n+\n+func (s *ConnSniffer) RemoteAddr() net.Addr {\n+\treturn s.conn.RemoteAddr()\n+}\n+\n+func (s *ConnSniffer) SetDeadline(t time.Time) error {\n+\treturn s.conn.SetDeadline(t)\n+}\n+\n+func (s *ConnSniffer) SetReadDeadline(t time.Time) error {\n+\treturn s.conn.SetReadDeadline(t)\n+}\n+\n+func (s *ConnSniffer) SetWriteDeadline(t time.Time) error {\n+\treturn s.conn.SetWriteDeadline(t)\n+}\ndiff --git a/src/pkg/net/http/fs_test.go b/src/pkg/net/http/fs_test.go\n--- a/src/pkg/net/http/fs_test.go\n+++ b/src/pkg/net/http/fs_test.go\n@@ -340,11 +340,6 @@\n }\n \n func TestServeFileFromCWD(t *testing.T) {\n-\tif runtime.GOOS == \"windows\" {\n-\t\t// TODO(brainman): find out why this test is broken\n-\t\tt.Logf(\"Temporarily skipping test on Windows; see http://golang.org/issue/3917\")\n-\t\treturn\n-\t}\n \tts := httptest.NewServer(HandlerFunc(func(w ResponseWriter, r *Request) {\n \t\tServeFile(w, r, \"fs_test.go\")\n \t}))\ndiff --git a/src/pkg/net/http/transport.go b/src/pkg/net/http/transport.go\n--- a/src/pkg/net/http/transport.go\n+++ b/src/pkg/net/http/transport.go\n@@ -308,7 +308,8 @@\n \tif t.Dial != nil {\n \t\treturn t.Dial(network, addr)\n \t}\n-\treturn net.Dial(network, addr)\n+\tconn, err := net.Dial(network, addr)\n+\treturn NewConnSniffer(conn), err    \n }\n \n // getConn dials and creates a new persistConn to the target as\n\nNow, I see this:\n\nc:\\go\\src\\pkg\\net\\http>go test -v -run=FromCWD\nwarning: building out-of-date packages:\n        net/http/httptest\n        net/http/httputil\ninstalling these packages with 'go test -i' will speed future tests.\n\n=== RUN TestServeFileFromCWD\nwritten n=93 data=[\"GET / HTTP/1.1\\r\\nHost\" ... \"t-Encoding: gzip\\r\\n\\r\\n\"] err=<nil>\nread n=188 data=[\"HTTP/1.1 200 OK\\r\\nAcc\" ... \"012 07:09:22 GMT\\r\\n\\r\\n\"] err=<nil>\n...\n\nBlocks here. Connection is still up. What happens to the body of this response? Why http.Get does not read the body? Which part of http package will trigger reading of that?\n\nAlex",
			"disapproval": false,
			"date": "2012-09-24 07:33:59.951340",
			"approval": false
		}
	],
	"owner_email": "alex.brainman@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "brainman",
	"subject": "code review 6553061: net/http: use r.Body.Close to close connection during T...",
	"created": "2012-09-24 02:28:25.368490",
	"patchsets": [
		1,
		3,
		4001,
		5002
	],
	"modified": "2012-09-24 07:34:00.102960",
	"closed": true,
	"issue": 6553061
}