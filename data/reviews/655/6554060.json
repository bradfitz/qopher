{
	"description": "runtime: add types to MSpan",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-09-21 15:13:03.080690",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6554060/diff/1/src/pkg/runtime/runtime.h\nFile src/pkg/runtime/runtime.h (right):\n\nhttps://codereview.appspot.com/6554060/diff/1/src/pkg/runtime/runtime.h#newcode842\nsrc/pkg/runtime/runtime.h:842: UseSpanType = 1,\nMaybe this flag should be called MSpanType. I am not sure about the name.",
			"disapproval": false,
			"date": "2012-09-21 15:28:06.496270",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Do you have a sense of the memory overhead this incurs? I wonder if\r\nfor the smaller sizes we will want to have separate spans for\r\npointer-free data.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-09-21 16:33:46.713740",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/21 16:33:46, rsc wrote:\n> Do you have a sense of the memory overhead this incurs?\n\nIt varies with application. Maximum increase in memory consumption I have seen was a few percent. There is no noticeable memory overhead when running \"godoc -http=:6060\".\n\n> I wonder if\n> for the smaller sizes we will want to have separate spans for\n> pointer-free data.\n\n2 spans for objects of a particular size (instead of 1 span) may in some cases increase memory consumption because free items in the additional span are consuming extra memory.",
			"disapproval": false,
			"date": "2012-09-21 17:28:30.271710",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-24 19:06:50.381260",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The code looks good. Please write the comment I asked for in malloc.h describing the layout of 'data' for each case and then I will do a second pass.\n\nThanks.\n\nhttps://codereview.appspot.com/6554060/diff/1/src/pkg/runtime/malloc.goc\nFile src/pkg/runtime/malloc.goc (right):\n\nhttps://codereview.appspot.com/6554060/diff/1/src/pkg/runtime/malloc.goc#newcode490\nsrc/pkg/runtime/malloc.goc:490: if(s->sizeclass != 0) {\nPlease invert this so we can avoid some indenting and mental context:\n\nif(s->sizeclass == 0) {\n    ... code from bottom ...\n    continue;\n}\n\n...\n\nhttps://codereview.appspot.com/6554060/diff/1/src/pkg/runtime/malloc.goc#newcode521\nsrc/pkg/runtime/malloc.goc:521: if( ((uintptr*)data3)[j] == typ ) {\nthroughout, s/( /(/g s/ )/)/g\n\nhttps://codereview.appspot.com/6554060/diff/1/src/pkg/runtime/malloc.goc#newcode542\nsrc/pkg/runtime/malloc.goc:542: bool sysalloc3 = s->types.sysalloc;\nPlease move the bool declaration to the top.\n\nhttps://codereview.appspot.com/6554060/diff/1/src/pkg/runtime/malloc.goc#newcode632\nsrc/pkg/runtime/malloc.goc:632: runtime\u00b7gettype(void *v) {\n{ on next line\n\nhttps://codereview.appspot.com/6554060/diff/1/src/pkg/runtime/malloc.h\nFile src/pkg/runtime/malloc.h (right):\n\nhttps://codereview.appspot.com/6554060/diff/1/src/pkg/runtime/malloc.h#newcode306\nsrc/pkg/runtime/malloc.h:306: enum\nPlease move this enum and the struct MTypes definition above the MSpan enum, so that you can put it in a separate section and write a comment for it.\n\n// MTypes describes the types of blocks allocated within a span.\n// The compression field describes the layout of the data.\n//\n// MTypes_Empty:\n//     XXX description here\n// MTypes_Single:\n//     XXX description here\n// ...\n\nhttps://codereview.appspot.com/6554060/diff/1/src/pkg/runtime/malloc.h#newcode317\nsrc/pkg/runtime/malloc.h:317: uintptr\tdata;\nWhy not void*?\n\nhttps://codereview.appspot.com/6554060/diff/1/src/pkg/runtime/runtime.h\nFile src/pkg/runtime/runtime.h (right):\n\nhttps://codereview.appspot.com/6554060/diff/1/src/pkg/runtime/runtime.h#newcode842\nsrc/pkg/runtime/runtime.h:842: UseSpanType = 1,\nOn 2012/09/21 15:28:06, atom wrote:\n> Maybe this flag should be called MSpanType. I am not sure about the name.\n\nUseSpanType is fine.",
			"disapproval": false,
			"date": "2012-09-24 17:21:50.372440",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-09-24 20:00:57.908990",
			"approval": true
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6554060/diff/1/src/pkg/runtime/malloc.h\nFile src/pkg/runtime/malloc.h (right):\n\nhttps://codereview.appspot.com/6554060/diff/1/src/pkg/runtime/malloc.h#newcode306\nsrc/pkg/runtime/malloc.h:306: enum\nOn 2012/09/24 17:21:50, rsc wrote:\n> Please move this enum and the struct MTypes definition above the MSpan enum, so\n> that you can put it in a separate section and write a comment for it.\n> \n> // MTypes describes the types of blocks allocated within a span.\n> // The compression field describes the layout of the data.\n> //\n> // MTypes_Empty:\n> //     XXX description here\n> // MTypes_Single:\n> //     XXX description here\n> // ...\n\nDone.\n\nhttps://codereview.appspot.com/6554060/diff/1/src/pkg/runtime/malloc.h#newcode317\nsrc/pkg/runtime/malloc.h:317: uintptr\tdata;\nOn 2012/09/24 17:21:50, rsc wrote:\n> Why not void*?\n\nIn case of MTypes_Single, the field 'data' directly holds the type information.\n\nThe function malloc.goc:new (and other functions in forthcoming patches) uses the low bits of 'typ'. The mask used in malloc.goc:new is TypeInfo_SingleObject. The resulting value is therefore of type uintptr.\n\nStruct MTypes completely abstracts away from the meaning of uintptr values stored within the struct. From the viewpoint of MTypes as such, the values have type uintptr.",
			"disapproval": false,
			"date": "2012-09-24 19:07:07.408550",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks good. Thanks for the comment: it was a big help understanding the details of the Bytes compression. Please tweak the below and sync. I just submitted some changes to make the runtime 64-bit int safe, so you might have a minor merge conflict or two. Apologies if so.\n\nhttps://codereview.appspot.com/6554060/diff/6001/src/pkg/runtime/malloc.goc\nFile src/pkg/runtime/malloc.goc (right):\n\nhttps://codereview.appspot.com/6554060/diff/6001/src/pkg/runtime/malloc.goc#newcode601\nsrc/pkg/runtime/malloc.goc:601: MSpan *s = runtime\u00b7MHeap_Lookup(&runtime\u00b7mheap, v);\nI know I'm annoying but please put the MSpan *s at the top.\n\nhttps://codereview.appspot.com/6554060/diff/6001/src/pkg/runtime/malloc.h\nFile src/pkg/runtime/malloc.h (right):\n\nhttps://codereview.appspot.com/6554060/diff/6001/src/pkg/runtime/malloc.h#newcode315\nsrc/pkg/runtime/malloc.h:315: //     The span contains multiple blocks.\nThe span contains at most seven different types of blocks.\n?",
			"disapproval": false,
			"date": "2012-09-24 19:16:47.129960",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-24 19:51:54.404980",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=0a3866d6cc6b ***\n\nruntime: add types to MSpan\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6554060\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2012-09-25 00:08:09.063460",
			"approval": false
		}
	],
	"owner_email": "0xE2.0x9A.0x9B@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "atom",
	"subject": "code review 6554060: runtime: add types to MSpan",
	"created": "2012-09-21 15:12:59.367790",
	"patchsets": [
		1,
		6001,
		6003
	],
	"modified": "2012-09-25 01:53:51.868480",
	"closed": true,
	"issue": 6554060
}