{
	"description": "runtime: fix typos in comments",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-20 23:00:36.893610",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-09-20 12:31:02.883890",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I've been trying to avoid adding type information to the allocated\r\nstructures like this. Is it necessary? If so, should we also add to\r\nthe chan struct, to describe the channel buffer?\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-09-20 19:41:03.250030",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/20 19:41:03, rsc wrote:\n> I've been trying to avoid adding type information to the allocated\n> structures like this. Is it necessary? If so, should we also add to\n> the chan struct, to describe the channel buffer?\n> \n> Russ\n\nIt isn't necessary.",
			"disapproval": false,
			"date": "2012-09-20 23:01:46.377920",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": ">> I've been trying to avoid adding type information to the allocated\r\n>> structures like this. Is it necessary? If so, should we also add to\r\n>> the chan struct, to describe the channel buffer?\r\n>\r\n> It isn't necessary.\r\n\r\nWhat was your reasoning for sending the CL? I'm sure you had a reason.\r\nI assume it makes garbage collection more precise? That might be a\r\ngood reason, I just want to know what it is.\r\n\r\nThanks.\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-09-21 02:14:13.589710",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/21 02:14:13, rsc wrote:\n> >> I've been trying to avoid adding type information to the allocated\n> >> structures like this. Is it necessary? If so, should we also add to\n> >> the chan struct, to describe the channel buffer?\n> >\n> > It isn't necessary.\n> \n> What was your reasoning for sending the CL? I'm sure you had a reason.\n> I assume it makes garbage collection more precise? That might be a\n> good reason, I just want to know what it is.\n> \n> Thanks.\n> Russ\n\nEach new CL I am submitting is a portion of CL 6114046. My intention was to make CL 6114046 smaller again, at least locally on my machine. One way or the other, the end result of examining hashmap.c is that CL 6114046 is now smaller.",
			"disapproval": false,
			"date": "2012-09-21 05:55:20.285270",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Each new CL I am submitting is a portion of CL 6114046. My intention was\r\n> to make CL 6114046 smaller again, at least locally on my machine. One\r\n> way or the other, the end result of examining hashmap.c is that CL\r\n> 6114046 is now smaller.\r\n\r\nAn alternative to this CL would be to put the map type information in\r\nthe GC_MAP instruction, so that when you get to a GC_MAP you already\r\nknow what its type is. That would require an extra pointer per map\r\nfield in the GC information, but it would avoid a pointer per map\r\ncreated at runtime. I think that's probably the right tradeoff. If I\r\nremember correctly, the map implementation used to have a pointer like\r\nthis, and I pulled it out to cut down the fixed size overheads\r\nassociated with small maps. The idea is that all the functions\r\nmanipulating maps know what type of map it is at the specific call\r\nsites, so they can pass that information in. Putting the pointer in\r\nthe GC_MAP instruction is in the spirit of that idea. The same should\r\nprobably happen for channel buffers.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-09-21 14:49:18.257550",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=a3fb97af739b ***\n\nruntime: fix typos in comments\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6554043\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2012-09-21 16:25:59.710980",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/21 14:49:18, rsc wrote:\n> > Each new CL I am submitting is a portion of CL 6114046. My intention was\n> > to make CL 6114046 smaller again, at least locally on my machine. One\n> > way or the other, the end result of examining hashmap.c is that CL\n> > 6114046 is now smaller.\n> \n> An alternative to this CL would be to put the map type information in\n> the GC_MAP instruction, so that when you get to a GC_MAP you already\n> know what its type is. That would require an extra pointer per map\n> field in the GC information, but it would avoid a pointer per map\n> created at runtime. I think that's probably the right tradeoff. If I\n> remember correctly, the map implementation used to have a pointer like\n> this, and I pulled it out to cut down the fixed size overheads\n> associated with small maps. The idea is that all the functions\n> manipulating maps know what type of map it is at the specific call\n> sites, so they can pass that information in. Putting the pointer in\n> the GC_MAP instruction is in the spirit of that idea. The same should\n> probably happen for channel buffers.\n> \n> Russ\n\nThat is already the case. I apologize for the confusion. A comment in mgc0.h (already merged into Go) states that GC_MAP_PTR takes an argument of MapType*. So adding type to Hmap was completely redundant.\n\nI updated the description of this CL to just \"runtime: fix typos in comments\".",
			"disapproval": false,
			"date": "2012-09-21 15:21:26.298900",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-09-21 16:25:41.779670",
			"approval": true
		}
	],
	"owner_email": "0xE2.0x9A.0x9B@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "atom",
	"subject": "code review 6554043: runtime: add type to struct Hmap, fix typos in comments",
	"created": "2012-09-20 12:30:58.312120",
	"patchsets": [
		1,
		1003
	],
	"modified": "2012-09-21 16:44:47.274890",
	"closed": true,
	"issue": 6554043
}