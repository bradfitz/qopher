{
	"description": "exp/inotify: cleanup ignored watch\n\ninotify sends the IN_IGNORED event whenever a watch was removed.\nFixes issue 2483",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"dave@cheney.net",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "mbnull.org@googlemail.com",
			"recipients": [
				"mbnull.org@googlemail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-09-23 12:21:00.634420",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mbnull.org@googlemail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/23 12:21:00, mb0 wrote:\n> Hello mailto:golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go\n\nThank you for this fix. I think the test needs a bit more work.",
			"disapproval": false,
			"date": "2012-09-28 02:16:25.715360",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mbnull.org@googlemail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6553059/diff/5001/src/pkg/exp/inotify/inotify_linux.go\nFile src/pkg/exp/inotify/inotify_linux.go (right):\n\nhttps://codereview.appspot.com/6553059/diff/5001/src/pkg/exp/inotify/inotify_linux.go#newcode200\nsrc/pkg/exp/inotify/inotify_linux.go:200: if event.Mask&IN_IGNORED != 0 {\n^ gofmt ?\n\nhttps://codereview.appspot.com/6553059/diff/5001/src/pkg/exp/inotify/inotify_linux_test.go\nFile src/pkg/exp/inotify/inotify_linux_test.go (right):\n\nhttps://codereview.appspot.com/6553059/diff/5001/src/pkg/exp/inotify/inotify_linux_test.go#newcode112\nsrc/pkg/exp/inotify/inotify_linux_test.go:112: }\ndefer watcher.Close()\n\nhttps://codereview.appspot.com/6553059/diff/5001/src/pkg/exp/inotify/inotify_linux_test.go#newcode123\nsrc/pkg/exp/inotify/inotify_linux_test.go:123: for err := range watcher.Error {\nDoes this goroutine exit properly, or does it live on until the end of the test run ?\n\nhttps://codereview.appspot.com/6553059/diff/5001/src/pkg/exp/inotify/inotify_linux_test.go#newcode124\nsrc/pkg/exp/inotify/inotify_linux_test.go:124: t.Fatalf(\"error received: %s\", err)\nyou cannot use Fatalf inside a goroutine, use t.Errorf() instead\n\nhttps://codereview.appspot.com/6553059/diff/5001/src/pkg/exp/inotify/inotify_linux_test.go#newcode128\nsrc/pkg/exp/inotify/inotify_linux_test.go:128: for event := range watcher.Event {\nSame as above\n\nhttps://codereview.appspot.com/6553059/diff/5001/src/pkg/exp/inotify/inotify_linux_test.go#newcode134\nsrc/pkg/exp/inotify/inotify_linux_test.go:134: _, ok := watcher.watches[dir]\nIs this safe to observe a map that may be mutated by another goroutine ?",
			"disapproval": false,
			"date": "2012-09-28 02:16:34.676690",
			"approval": false
		},
		{
			"sender": "mbnull.org@googlemail.com",
			"recipients": [
				"mbnull.org@googlemail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6553059/diff/5001/src/pkg/exp/inotify/inotify_linux.go\nFile src/pkg/exp/inotify/inotify_linux.go (right):\n\nhttp://codereview.appspot.com/6553059/diff/5001/src/pkg/exp/inotify/inotify_linux.go#newcode156\nsrc/pkg/exp/inotify/inotify_linux.go:156: n, err := syscall.Read(w.fd, buf[0:])\n^ this will block until a new event is received.\nthis is only a problem if there are no watches when closing the watcher. (otherwise the syscall.InotifyRmWatch call triggers a new IN_IGNORED event that unblocks the syscall.Read).\n\ncould you advise me if i should use a syscall.Select or a lazy readEvents go routine to tackle that problem?\n\nboth solutions are drafted in github.com/mb0/inotify (latest two commits).\ni would like two fix both issues in the next patch. thank you!",
			"disapproval": false,
			"date": "2012-10-07 17:39:18.060460",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mbnull.org@googlemail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6553059/diff/5001/src/pkg/exp/inotify/inotify_linux.go\nFile src/pkg/exp/inotify/inotify_linux.go (right):\n\nhttps://codereview.appspot.com/6553059/diff/5001/src/pkg/exp/inotify/inotify_linux.go#newcode156\nsrc/pkg/exp/inotify/inotify_linux.go:156: n, err := syscall.Read(w.fd, buf[0:])\nIf this only happens when closing the watcher, I would solve this by doing an InotifyAddWatch to unblock the read. :-)",
			"disapproval": false,
			"date": "2012-11-01 18:46:05.040160",
			"approval": false
		},
		{
			"sender": "mbnull.org@googlemail.com",
			"recipients": [
				"mbnull.org@googlemail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-01 21:01:51.637210",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mbnull.org@googlemail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "seems plausible. anyone else?\n\nhttps://codereview.appspot.com/6553059/diff/14001/src/pkg/exp/inotify/inotify_linux.go\nFile src/pkg/exp/inotify/inotify_linux.go (right):\n\nhttps://codereview.appspot.com/6553059/diff/14001/src/pkg/exp/inotify/inotify_linux.go#newcode88\nsrc/pkg/exp/inotify/inotify_linux.go:88: w.AddWatch(\"/\", IN_DELETE_SELF)\n// Add a spurious watch so that the watching goroutine will return\n// from syscall.Read when we remove watches below.",
			"disapproval": false,
			"date": "2012-11-01 21:11:48.972700",
			"approval": false
		},
		{
			"sender": "mbnull.org@googlemail.com",
			"recipients": [
				"mbnull.org@googlemail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-01 21:21:53.869620",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mbnull.org@googlemail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry this took three months to be reviewed. Please <ping /> in the future.\n\nhttps://codereview.appspot.com/6553059/diff/15003/src/pkg/exp/inotify/inotify_linux.go\nFile src/pkg/exp/inotify/inotify_linux.go (right):\n\nhttps://codereview.appspot.com/6553059/diff/15003/src/pkg/exp/inotify/inotify_linux.go#newcode87\nsrc/pkg/exp/inotify/inotify_linux.go:87: if len(w.watches) == 0 {\nThis is racy, do you need to hold w.mu ? even then, you can race after w.mu is unlocked to call w.AddWatch",
			"disapproval": false,
			"date": "2013-02-16 02:41:39.500550",
			"approval": false
		},
		{
			"sender": "mbnull.org@googlemail.com",
			"recipients": [
				"mbnull.org@googlemail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-17 01:25:56.539710",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mbnull.org@googlemail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "==================\nWARNING: DATA RACE\nRead by goroutine 11:\n  runtime.mapaccess2()\n      /home/dfc/go/src/pkg/runtime/hashmap.c:944 +0x0\n  exp/inotify.(*Watcher).RemoveWatch()\n      /home/dfc/go/src/pkg/exp/inotify/inotify_linux.go:142 +0x7d\n  exp/inotify.TestInotifyIgnored()\n      /home/dfc/go/src/pkg/exp/inotify/inotify_linux_test.go:140 +0x4fe\n  testing.tRunner()\n      /home/dfc/go/src/pkg/testing/testing.go:315 +0xe8\n\nPrevious write by goroutine 12:\n  runtime.mapdelete()\n      /home/dfc/go/src/pkg/runtime/hashmap.c:1063 +0x0\n  exp/inotify.(*Watcher).readEvents()\n      /home/dfc/go/src/pkg/exp/inotify/inotify_linux.go:207 +0x5de\n\nGoroutine 11 (running) created at:\n  testing.RunTests()\n      /home/dfc/go/src/pkg/testing/testing.go:430 +0xc7a\n  testing.Main()\n      /home/dfc/go/src/pkg/testing/testing.go:327 +0xcd\n  main.main()\n      exp/inotify/_test/_testmain.go:47 +0xda\n  runtime.main()\n      /home/dfc/go/src/pkg/runtime/proc.c:253 +0x8e\n\nGoroutine 12 (running) created at:\n  exp/inotify.NewWatcher()\n      /home/dfc/go/src/pkg/exp/inotify/inotify_linux.go:76 +0x332\n  exp/inotify.TestInotifyIgnored()\n      /home/dfc/go/src/pkg/exp/inotify/inotify_linux_test.go:109 +0x76\n  testing.tRunner()\n      /home/dfc/go/src/pkg/testing/testing.go:315 +0xe8\n\n==================\nPASS\nFound 1 data race(s)\nFAIL    exp/inotify     2.074s",
			"disapproval": false,
			"date": "2013-02-16 02:45:41.367010",
			"approval": false
		},
		{
			"sender": "mbnull.org@googlemail.com",
			"recipients": [
				"mbnull.org@googlemail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i pointed out the data race in the discussion mail 5 month ago. it was not introduced by me. it only started to show because RemoveWatch is now called by the test.\n\nin this path i also put the isClosed check inside the lock. i think we should not expect the user to call AddWatch and Close from the same go routine.",
			"disapproval": false,
			"date": "2013-02-16 11:56:24.572460",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mbnull.org@googlemail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM modulo these comments.\n\nhttps://codereview.appspot.com/6553059/diff/24001/src/pkg/exp/inotify/inotify_linux.go\nFile src/pkg/exp/inotify/inotify_linux.go (right):\n\nhttps://codereview.appspot.com/6553059/diff/24001/src/pkg/exp/inotify/inotify_linux.go#newcode92\nsrc/pkg/exp/inotify/inotify_linux.go:92: w.add(\"/\", IN_DELETE_SELF)\nWhat about handling the error here ?\n\nhttps://codereview.appspot.com/6553059/diff/24001/src/pkg/exp/inotify/inotify_linux.go#newcode109\nsrc/pkg/exp/inotify/inotify_linux.go:109: w.mu.Unlock()\nit is fine to use defer here, the cost is minimal.\n\nhttps://codereview.appspot.com/6553059/diff/24001/src/pkg/exp/inotify/inotify_linux.go#newcode112\nsrc/pkg/exp/inotify/inotify_linux.go:112: \n// add adds path to the watched file set. The caller must have already locked w.mu.\n\nhttps://codereview.appspot.com/6553059/diff/24001/src/pkg/exp/inotify/inotify_linux.go#newcode149\nsrc/pkg/exp/inotify/inotify_linux.go:149: w.mu.Unlock()\nditto\n\nhttps://codereview.appspot.com/6553059/diff/24001/src/pkg/exp/inotify/inotify_linux.go#newcode152\nsrc/pkg/exp/inotify/inotify_linux.go:152: \nsee comment on // add\n\nhttps://codereview.appspot.com/6553059/diff/24001/src/pkg/exp/inotify/inotify_linux.go#newcode156\nsrc/pkg/exp/inotify/inotify_linux.go:156: return errors.New(fmt.Sprintf(\"can't remove non-existent inotify watch for: %s\", path))\nfmt.Errorf might be simpler here.",
			"disapproval": false,
			"date": "2013-02-17 00:54:53.580110",
			"approval": true
		}
	],
	"owner_email": "mbnull.org@googlemail.com",
	"private": false,
	"base_url": "",
	"owner": "mb0",
	"subject": "code review 6553059: exp/inotify: cleanup ignored watch",
	"created": "2012-09-23 12:18:50.044340",
	"patchsets": [
		1,
		2001,
		5001,
		14001,
		15003,
		24001,
		36001
	],
	"modified": "2013-02-17 00:54:53.580110",
	"closed": false,
	"issue": 6553059
}