{
	"description": "reflect: add MakeFunc (API CHANGE)\n\nFixes issue 1765.",
	"cc": [
		"iant@golang.org",
		"r@golang.org",
		"daniel.morsing@gmail.com",
		"minux.ma@gmail.com",
		"bradfitz@google.com",
		"rogpeppe@gmail.com",
		"remyoudompheng@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6554067/diff/3/src/pkg/reflect/value.go\nFile src/pkg/reflect/value.go (right):\n\nhttp://codereview.appspot.com/6554067/diff/3/src/pkg/reflect/value.go#newcode651\nsrc/pkg/reflect/value.go:651: switch runtime.GOARCH {\nCould this be moved into a conditionally compiled file?\n\nhttp://codereview.appspot.com/6554067/diff/3/src/pkg/reflect/value.go#newcode698\nsrc/pkg/reflect/value.go:698: var amd64CallStub = []byte{\nConditional compilation again\n\nhttp://codereview.appspot.com/6554067/diff/3/src/pkg/reflect/value.go#newcode712\nsrc/pkg/reflect/value.go:712: var _386CallStub = []byte{\nditto.\n\nhttp://codereview.appspot.com/6554067/diff/3/src/pkg/reflect/value.go#newcode726\nsrc/pkg/reflect/value.go:726: var armCallStub = []uintptr{\nditto.",
			"disapproval": false,
			"date": "2012-09-22 16:53:31.276340",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@google.com",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "is there urgent need for this? i don't have this itch to scratch.\n\nif it cannot wait for improved representation of function values, please park it somewhere self-contained.\n\non a different topic, i worry about the generic abuse this will encourage.\n\nhttp://codereview.appspot.com/6554067/diff/11/src/pkg/reflect/value.go\nFile src/pkg/reflect/value.go (right):\n\nhttp://codereview.appspot.com/6554067/diff/11/src/pkg/reflect/value.go#newcode627\nsrc/pkg/reflect/value.go:627: // results returned to the caller.\nthis still isn't clear because the words are hard to follow and because the function is a small part of a longer story that is what we want to do. for instance, there are slices involved but no indication about how the slices relate in the multiple functions involved. i believe you really want an example here. at least point to where an example can be found.\n\nhttp://codereview.appspot.com/6554067/diff/11/src/pkg/reflect/value.go#newcode727\nsrc/pkg/reflect/value.go:727: 0xe59f000c, // MOVW 0x14(PC), R0\ncan we at least put all this ugliness, including MakeFunc, into a separate file? it's jarring, plus i believe it will all be rewritten if we change the representation of function values. here we have hexadecimal instruction decodes immediately before the clean, simple implementation of Cap.  worlds are colliding.",
			"disapproval": false,
			"date": "2012-09-23 01:07:56.148010",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Sep 22, 2012 at 9:07 PM,  <r@golang.org> wrote:\r\n> is there urgent need for this? i don't have this itch to scratch.\r\n> if it cannot wait for improved representation of function values, please\r\n> park it somewhere self-contained.\r\n\r\nit will get cleaned up then, but i'd rather not wait until then.\r\n\r\n> on a different topic, i worry about the generic abuse this will\r\n> encourage.\r\n\r\ni do too, but to some extent that's true of all of reflect. anything\r\ncan be abused.\r\ni will move the ugly part to a new file.\r\n\r\nruss\r\n",
			"disapproval": false,
			"date": "2012-09-23 01:17:34.029870",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@google.com",
				"rogpeppe@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/6554067/diff/20/src/pkg/reflect/example_test.go\nFile src/pkg/reflect/example_test.go (right):\n\nhttp://codereview.appspot.com/6554067/diff/20/src/pkg/reflect/example_test.go#newcode24\nsrc/pkg/reflect/example_test.go:24: // into Values, calls swap, and then turns swaps result slice\nOn 2012/09/23 20:41:25, r wrote:\n> s/swaps/swap's/\n\nDone.\n\nhttp://codereview.appspot.com/6554067/diff/20/src/pkg/reflect/example_test.go#newcode39\nsrc/pkg/reflect/example_test.go:39: // Make and call an int-valued swap function.\nOn 2012/09/23 20:41:25, r wrote:\n> the swap function isn't int-valued, its arguments are.\n> \n> // Make and call a swap function for ints.\n\nDone.\n\nhttp://codereview.appspot.com/6554067/diff/20/src/pkg/reflect/example_test.go#newcode44\nsrc/pkg/reflect/example_test.go:44: // Make a float64-valued swap function.\nOn 2012/09/23 20:41:25, r wrote:\n> // Make and call a swap function for float64s.\n\nDone.\n\nhttp://codereview.appspot.com/6554067/diff/20/src/pkg/reflect/makefunc.go\nFile src/pkg/reflect/makefunc.go (right):\n\nhttp://codereview.appspot.com/6554067/diff/20/src/pkg/reflect/makefunc.go#newcode18\nsrc/pkg/reflect/makefunc.go:18: // The code holds the same references.\nOn 2012/09/23 20:41:25, r wrote:\n> which code? be clear.\n\nDone.\n\nhttp://codereview.appspot.com/6554067/diff/20/src/pkg/reflect/makefunc.go#newcode22\nsrc/pkg/reflect/makefunc.go:22: // code is the actual machine code invoked for the function.\nOn 2012/09/23 20:41:25, r wrote:\n> which function? be clear.\n\nDone.\n\nhttp://codereview.appspot.com/6554067/diff/20/src/pkg/reflect/makefunc.go#newcode31\nsrc/pkg/reflect/makefunc.go:31: //\t- return the values listed in out.\nOn 2012/09/23 20:41:25, r wrote:\n> 'in' is a bad choice of name here. so is list.\n> - convert its arguments to a slice of Values, args.\n> - run results := fn(args)\n> - returns the results as a slice of Values, one per formal result.\n\nDone.\n\nhttp://codereview.appspot.com/6554067/diff/20/src/pkg/reflect/makefunc.go#newcode31\nsrc/pkg/reflect/makefunc.go:31: //\t- return the values listed in out.\nOn 2012/09/23 20:41:25, r wrote:\n> 'in' is a bad choice of name here. so is list.\n> - convert its arguments to a slice of Values, args.\n> - run results := fn(args)\n> - returns the results as a slice of Values, one per formal result.\n\nDone.\n\nhttp://codereview.appspot.com/6554067/diff/20/src/pkg/reflect/makefunc.go#newcode36\nsrc/pkg/reflect/makefunc.go:36: // a slice representing the variadic arguments, like in the\nOn 2012/09/23 20:41:25, r wrote:\n> s/like/as/\n\nDone.\n\nhttp://codereview.appspot.com/6554067/diff/20/src/pkg/reflect/makefunc.go#newcode45\nsrc/pkg/reflect/makefunc.go:45: // See the example for <WHAT GOES HERE>?\nOn 2012/09/23 20:41:25, r wrote:\n> // The Examples section of the documentation includes an illustration of\n> // how to use MakeFunc to build a swap function for different types.\n> (you might even be able to make a useful URL here - not sure)\n\nDone.\n\nhttp://codereview.appspot.com/6554067/diff/20/src/pkg/reflect/makefunc.go#newcode47\nsrc/pkg/reflect/makefunc.go:47: func MakeFunc(typ Type, fn func(in []Value) (out []Value)) Value {\nOn 2012/09/23 20:41:25, r wrote:\n> s/in/args/\n> s/out/results/\n\nDone.",
			"disapproval": false,
			"date": "2012-09-24 19:59:15.780090",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@google.com",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello iant@golang.org, r@golang.org, daniel.morsing@gmail.com, minux.ma@gmail.com, bradfitz@google.com, rogpeppe@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-22 23:40:27.361120",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@google.com",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/6554067/diff/11/src/pkg/reflect/value.go\nFile src/pkg/reflect/value.go (right):\n\nhttps://codereview.appspot.com/6554067/diff/11/src/pkg/reflect/value.go#newcode627\nsrc/pkg/reflect/value.go:627: // results returned to the caller.\nOn 2012/09/23 01:07:56, r wrote:\n> this still isn't clear because the words are hard to follow and because the\n> function is a small part of a longer story that is what we want to do. for\n> instance, there are slices involved but no indication about how the slices\n> relate in the multiple functions involved. i believe you really want an example\n> here. at least point to where an example can be found.\n\nI agree that the existence of the example should be made clear, but how? In godoc HTML output it will just say\n\n > Example\n\nand you click on the > and there it is. But in the command-line output there's no indication and no way to get to the example (an open bug). I am not sure what to write that works in both contexts.\n\n\"See the example for ...\"\n\nhttps://codereview.appspot.com/6554067/diff/11/src/pkg/reflect/value.go#newcode727\nsrc/pkg/reflect/value.go:727: 0xe59f000c, // MOVW 0x14(PC), R0\nOn 2012/09/23 01:07:56, r wrote:\n> can we at least put all this ugliness, including MakeFunc, into a separate file?\n> it's jarring, plus i believe it will all be rewritten if we change the\n> representation of function values. here we have hexadecimal instruction decodes\n> immediately before the clean, simple implementation of Cap.  worlds are\n> colliding.\n\nDone.\n\nhttps://codereview.appspot.com/6554067/diff/9003/src/pkg/reflect/all_test.go\nFile src/pkg/reflect/all_test.go (right):\n\nhttps://codereview.appspot.com/6554067/diff/9003/src/pkg/reflect/all_test.go#newcode1428\nsrc/pkg/reflect/all_test.go:1428: var f func(byte, int, byte, two, byte) (byte, int, byte, two, byte)\nOn 2012/09/23 05:10:54, iant wrote:\n> It doesn't matter for gc, but for gccgo this test would be better if it used\n> some floating point values, as they are passed in different registers.\n\nDone.\n\nhttps://codereview.appspot.com/6554067/diff/9003/src/pkg/reflect/example_test.go\nFile src/pkg/reflect/example_test.go (right):\n\nhttps://codereview.appspot.com/6554067/diff/9003/src/pkg/reflect/example_test.go#newcode28\nsrc/pkg/reflect/example_test.go:28: reflect.ValueOf(fptr).Elem().Set(v)\nOn 2012/09/23 05:56:08, r wrote:\n> this line needs explanation.\n\nRewrote the code to be clearer, added explanation.\n\nhttps://codereview.appspot.com/6554067/diff/9003/src/pkg/reflect/makefunc.go\nFile src/pkg/reflect/makefunc.go (right):\n\nhttps://codereview.appspot.com/6554067/diff/9003/src/pkg/reflect/makefunc.go#newcode30\nsrc/pkg/reflect/makefunc.go:30: func MakeFunc(typ Type, fn func([]Value) []Value) Value {\nOn 2012/09/23 05:56:08, r wrote:\n> i think the type\n> func([]Value) []Value\n> should be given an exported name, maybe MakeFuncFunc but perhaps there's a\n> better one.\n> that would give this the signature\n> \n> func MakeFunc(typ Type, fn MakeFuncFunc) Value\n> which is easier to read, with the slices tucked away. it also gives you a\n> declaration (the one for MakeFuncFunc) to explain what it is and why.\n\nWhile I see the documentation benefit, this would introduce a name that has no use in client code, so I'd prefer not to. (FuncMap is the obvious parallel, but there clients can declare FuncMap literals.) Also the documentation would end up in a different place on the page than the MakeFunc function, so it would require finding two places instead of one. I think we can probably work to make the documentation clear here. I certainly agree it's not there yet. \n\nI have attempted to rewrite it, and I also named the []Value in the func type:\n\n// MakeFunc returns a new function of the given type.\n// When invoked, that new function does the following:\n//\n//\t- convert its arguments to a list of Values in.\n//\t- run out := fn(in).\n//\t- return the values listed in out.\n//\n// The Value.Call method allows the caller to\n// invoke a typed function in terms of Values;\n// in contrast, MakeFunc allows the caller to\n// implement a typed function in terms of Values.\n//\n// See the example for <WHAT GOES HERE>?\n//\nfunc MakeFunc(typ Type, fn func(in []Value) (out []Value)) Value {\n\nhttps://codereview.appspot.com/6554067/diff/9003/src/pkg/reflect/makefunc.go#newcode74\nsrc/pkg/reflect/makefunc.go:74: }\nOn 2012/09/23 05:10:54, iant wrote:\n> default:\n>     panic(\"forgot to implement this\")\n\nDone.\n\nhttps://codereview.appspot.com/6554067/diff/9003/src/pkg/reflect/makefunc.go#newcode131\nsrc/pkg/reflect/makefunc.go:131: 0xe28d2004, // MOVW $4(SP), R2\nOn 2012/09/23 05:10:54, iant wrote:\n> Is MOVW $4(SP), R2 really the 5a mnemonic for this instruction?  Conventionally\n> it is add r2, sp, #4.\n\nIt is certainly a valid one; I don't know if it is the only one.\n\nhttps://codereview.appspot.com/6554067/diff/9003/src/pkg/reflect/value.go\nFile src/pkg/reflect/value.go (right):\n\nhttps://codereview.appspot.com/6554067/diff/9003/src/pkg/reflect/value.go#newcode562\nsrc/pkg/reflect/value.go:562: var in []Value\nOn 2012/09/23 05:10:54, iant wrote:\n> in := make([]Value, 0, len(ftyp.in))\n\nDone.\n\nhttps://codereview.appspot.com/6554067/diff/9003/src/pkg/reflect/value.go#newcode600\nsrc/pkg/reflect/value.go:600: panic(\"reflect: function created by MakeFunc returned value obtained from unexported field\")\nOn 2012/09/23 05:56:08, r wrote:\n> can you dig out the function's name type for the message? i imagine when this\n> triggers it could be far removed from where the error was created.\n\nDone.",
			"disapproval": false,
			"date": "2012-09-23 17:51:53.290890",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Sep 23, 2012 at 2:03 PM,  <remyoudompheng@gmail.com> wrote:\r\n> How does it interact with variadic function types? The supplied\r\n> func([]Value) []Value must behave like Value.Call or like\r\n> Value.CallSlice?\r\n>\r\n> I think it should be documented in some way.\r\n\r\nDone. The answer is that since fn is in effect the function body, it\r\nsees a single argument of slice type holding all the variadic\r\nparameters, just as in an ordinary function body.\r\n",
			"disapproval": false,
			"date": "2012-09-23 18:15:28.892440",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@google.com",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello iant@golang.org, r@golang.org, daniel.morsing@gmail.com, minux.ma@gmail.com, bradfitz@google.com, rogpeppe@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-23 01:24:11.536980",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@google.com",
				"rogpeppe@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "How does it interact with variadic function types? The supplied func([]Value) []Value must behave like Value.Call or like Value.CallSlice?\n\nI think it should be documented in some way.",
			"disapproval": false,
			"date": "2012-09-23 18:03:03.349250",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@google.com",
				"rogpeppe@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6554067/diff/20/src/pkg/reflect/makefunc.go\nFile src/pkg/reflect/makefunc.go (right):\n\nhttp://codereview.appspot.com/6554067/diff/20/src/pkg/reflect/makefunc.go#newcode31\nsrc/pkg/reflect/makefunc.go:31: //\t- return the values listed in out.\nmy mistake: in the last line, s/returns/return/",
			"disapproval": false,
			"date": "2012-09-23 20:42:26.088790",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sigh, one more place of dynamic code generation.\r\nDo you have plan to remove dyn. code gen. in the future?\r\n",
			"disapproval": false,
			"date": "2012-09-22 17:48:12.556040",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@google.com",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6554067/diff/3/src/pkg/reflect/asm_386.s\nFile src/pkg/reflect/asm_386.s (right):\n\nhttp://codereview.appspot.com/6554067/diff/3/src/pkg/reflect/asm_386.s#newcode5\nsrc/pkg/reflect/asm_386.s:5: TEXT \u00b7callStub(SB),7,$12\nOn 2012/09/22 18:44:19, r wrote:\n> a word or two of documentation would be nice. to call this magic is to praise it\n> unduly.\n\nI'm sorry this is the first file you saw. There are big comments in value.go but I will add a comment here pointing there.\n\nhttp://codereview.appspot.com/6554067/diff/3/src/pkg/reflect/value.go\nFile src/pkg/reflect/value.go (right):\n\nhttp://codereview.appspot.com/6554067/diff/3/src/pkg/reflect/value.go#newcode627\nsrc/pkg/reflect/value.go:627: // results returned to the caller.\nOn 2012/09/22 18:44:19, r wrote:\n> needs an example.\n\nIndeed. The swap from the issue is in example_test.go.\n\nhttp://codereview.appspot.com/6554067/diff/3/src/pkg/reflect/value.go#newcode686\nsrc/pkg/reflect/value.go:686: //\tJMP callStub\nOn 2012/09/22 18:44:19, r wrote:\n> callStub isn't a good name: other than the vowels it shares no characters with\n> MakeFunc. why not makeFuncStub or something like that?  is it even a stub? \n\nWill rename to makeFuncStub.\n\nhttp://codereview.appspot.com/6554067/diff/3/src/pkg/reflect/value.go#newcode694\nsrc/pkg/reflect/value.go:694: // Nothing ever returns to the allocated code.\nOn 2012/09/22 18:44:19, r wrote:\n> i think this belongs in the asm files, and here you say:\n> \n> // callStub is a callStub is an assembly function used by the code generated\n> // and returned from MakeFunc. See the assembly implementations for more\n> // information.\n> func callStub() // except give it a name that helps\n\nI am happy to rename it, but I'd like to keep the comment here. All the logic and explanation is in one place right now, and if I move the comment out I have to duplicate it in three different files. I will add a pointer comment in the assembly.\n\nhttp://codereview.appspot.com/6554067/diff/3/src/pkg/reflect/value.go#newcode708\nsrc/pkg/reflect/value.go:708: 0xff, 0xe2,\nOn 2012/09/22 18:44:19, r wrote:\n> this is disgusting. \n\nIt is, yes. It will go away when we remove dynamic code generation, both from here and from closures. For what it's worth, this code is far *less* disgusting than what's in src/pkg/runtime/closure*.c.\n\n> it may even be worse than an asm call. at least move it to\n> the files with the other assembler code\n\nI don't think that would help. Here the bytes and the code using the bytes (above in the switch in MakeFunc) are in the same file, so that you can match them against each other. Writing in the assembly file I'd have to use DATA statements, making the definitions even more awkward than they are now. At least here I don't have to lay out a slice header by hand.",
			"disapproval": false,
			"date": "2012-09-22 23:34:26.577910",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@google.com",
				"rogpeppe@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6554067/diff/20/src/pkg/reflect/example_test.go\nFile src/pkg/reflect/example_test.go (right):\n\nhttp://codereview.appspot.com/6554067/diff/20/src/pkg/reflect/example_test.go#newcode24\nsrc/pkg/reflect/example_test.go:24: // into Values, calls swap, and then turns swaps result slice\ns/swaps/swap's/\n\nhttp://codereview.appspot.com/6554067/diff/20/src/pkg/reflect/example_test.go#newcode39\nsrc/pkg/reflect/example_test.go:39: // Make and call an int-valued swap function.\nthe swap function isn't int-valued, its arguments are.\n\n// Make and call a swap function for ints.\n\nhttp://codereview.appspot.com/6554067/diff/20/src/pkg/reflect/example_test.go#newcode44\nsrc/pkg/reflect/example_test.go:44: // Make a float64-valued swap function.\n// Make and call a swap function for float64s.\n\nhttp://codereview.appspot.com/6554067/diff/20/src/pkg/reflect/makefunc.go\nFile src/pkg/reflect/makefunc.go (right):\n\nhttp://codereview.appspot.com/6554067/diff/20/src/pkg/reflect/makefunc.go#newcode18\nsrc/pkg/reflect/makefunc.go:18: // The code holds the same references.\nwhich code? be clear.\n\nhttp://codereview.appspot.com/6554067/diff/20/src/pkg/reflect/makefunc.go#newcode22\nsrc/pkg/reflect/makefunc.go:22: // code is the actual machine code invoked for the function.\nwhich function? be clear.\n\nhttp://codereview.appspot.com/6554067/diff/20/src/pkg/reflect/makefunc.go#newcode31\nsrc/pkg/reflect/makefunc.go:31: //\t- return the values listed in out.\n'in' is a bad choice of name here. so is list.\n- convert its arguments to a slice of Values, args.\n- run results := fn(args)\n- returns the results as a slice of Values, one per formal result.\n\nhttp://codereview.appspot.com/6554067/diff/20/src/pkg/reflect/makefunc.go#newcode36\nsrc/pkg/reflect/makefunc.go:36: // a slice representing the variadic arguments, like in the\ns/like/as/\n\nhttp://codereview.appspot.com/6554067/diff/20/src/pkg/reflect/makefunc.go#newcode45\nsrc/pkg/reflect/makefunc.go:45: // See the example for <WHAT GOES HERE>?\n// The Examples section of the documentation includes an illustration of\n// how to use MakeFunc to build a swap function for different types.\n(you might even be able to make a useful URL here - not sure)\n\nhttp://codereview.appspot.com/6554067/diff/20/src/pkg/reflect/makefunc.go#newcode47\nsrc/pkg/reflect/makefunc.go:47: func MakeFunc(typ Type, fn func(in []Value) (out []Value)) Value {\ns/in/args/\ns/out/results/",
			"disapproval": false,
			"date": "2012-09-23 20:41:24.990980",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello iant, r (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-09-22 14:17:14.576960",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6554067/diff/3/src/pkg/reflect/value.go\nFile src/pkg/reflect/value.go (right):\n\nhttp://codereview.appspot.com/6554067/diff/3/src/pkg/reflect/value.go#newcode651\nsrc/pkg/reflect/value.go:651: switch runtime.GOARCH {\nOn 2012/09/22 16:53:31, DMorsing wrote:\n> Could this be moved into a conditionally compiled file?\n\nI haven't double-checked, but since this is a constant switch with constant cases, the compiler should only emit code for the case that matters. Then the linker will throw away the data mentioned by the other cases. If that's not the case, I'd prefer to fix that than to create a few tiny files.",
			"disapproval": false,
			"date": "2012-09-22 16:58:30.713270",
			"approval": false
		},
		{
			"sender": "bradfitz@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Wow, nice surprise.\r\n\r\nFixes issue nnnn.\r\n On Sep 22, 2012 7:17 AM, <rsc@golang.org> wrote:\r\n\r\n> Reviewers: iant, r,\r\n>\r\n> Message:\r\n> Hello iant, r (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> reflect: add MakeFunc (API CHANGE)\r\n>\r\n> Please review this at http://codereview.appspot.com/**6554067/<http://codereview.appspot.com/6554067/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/reflect/all_test.go\r\n>   M src/pkg/reflect/value.go\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-09-22 18:17:23.069400",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Minux is right about code generation, but given the variable type I\r\ndon't see how to avoid that. Worth thinking about more, though.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-09-22 18:45:34.247850",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 22 September 2012 19:45, Rob Pike <r@golang.org> wrote:\r\n> Minux is right about code generation, but given the variable type I\r\n> don't see how to avoid that. Worth thinking about more, though.\r\n\r\nI suspect that using a two-word representation of function\r\npointers would alleviate the need for runtime code generation\r\nhere as it does for closures.\r\n\r\nInteresting new capability.\r\n",
			"disapproval": false,
			"date": "2012-09-22 19:07:21.501780",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "this is one of the ugliest CLs i've ever seen.\n\nhttp://codereview.appspot.com/6554067/diff/3/src/pkg/reflect/asm_386.s\nFile src/pkg/reflect/asm_386.s (right):\n\nhttp://codereview.appspot.com/6554067/diff/3/src/pkg/reflect/asm_386.s#newcode5\nsrc/pkg/reflect/asm_386.s:5: TEXT \u00b7callStub(SB),7,$12\na word or two of documentation would be nice. to call this magic is to praise it unduly.\n\nhttp://codereview.appspot.com/6554067/diff/3/src/pkg/reflect/value.go\nFile src/pkg/reflect/value.go (right):\n\nhttp://codereview.appspot.com/6554067/diff/3/src/pkg/reflect/value.go#newcode627\nsrc/pkg/reflect/value.go:627: // results returned to the caller.\nneeds an example. it's hard to see what this does given only this explanation. the swap example in the issue is a good one.\n\nhttp://codereview.appspot.com/6554067/diff/3/src/pkg/reflect/value.go#newcode686\nsrc/pkg/reflect/value.go:686: //\tJMP callStub\ncallStub isn't a good name: other than the vowels it shares no characters with MakeFunc. why not makeFuncStub or something like that?  is it even a stub?\n\nhttp://codereview.appspot.com/6554067/diff/3/src/pkg/reflect/value.go#newcode694\nsrc/pkg/reflect/value.go:694: // Nothing ever returns to the allocated code.\ni think this belongs in the asm files, and here you say:\n\n// callStub is a callStub is an assembly function used by the code generated\n// and returned from MakeFunc. See the assembly implementations for more\n// information.\nfunc callStub() // except give it a name that helps\n\nhttp://codereview.appspot.com/6554067/diff/3/src/pkg/reflect/value.go#newcode708\nsrc/pkg/reflect/value.go:708: 0xff, 0xe2,\nthis is disgusting. it may even be worse than an asm call. at least move it to the files with the other assembler code",
			"disapproval": false,
			"date": "2012-09-22 18:44:19.493390",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Sep 22, 2012 at 1:48 PM, minux <minux.ma@gmail.com> wrote:\r\n> Sigh, one more place of dynamic code generation.\r\n> Do you have plan to remove dyn. code gen. in the future?\r\n\r\nYes, quite soon. This is no different than making closures; the same\r\nsolution will handle both.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-09-22 23:23:55.295500",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@google.com",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6554067/diff/9003/src/pkg/reflect/all_test.go\nFile src/pkg/reflect/all_test.go (right):\n\nhttps://codereview.appspot.com/6554067/diff/9003/src/pkg/reflect/all_test.go#newcode1428\nsrc/pkg/reflect/all_test.go:1428: var f func(byte, int, byte, two, byte) (byte, int, byte, two, byte)\nIt doesn't matter for gc, but for gccgo this test would be better if it used some floating point values, as they are passed in different registers.\n\nhttps://codereview.appspot.com/6554067/diff/9003/src/pkg/reflect/makefunc.go\nFile src/pkg/reflect/makefunc.go (right):\n\nhttps://codereview.appspot.com/6554067/diff/9003/src/pkg/reflect/makefunc.go#newcode74\nsrc/pkg/reflect/makefunc.go:74: }\ndefault:\n    panic(\"forgot to implement this\")\n\nhttps://codereview.appspot.com/6554067/diff/9003/src/pkg/reflect/makefunc.go#newcode131\nsrc/pkg/reflect/makefunc.go:131: 0xe28d2004, // MOVW $4(SP), R2\nIs MOVW $4(SP), R2 really the 5a mnemonic for this instruction?  Conventionally it is add r2, sp, #4.\n\nhttps://codereview.appspot.com/6554067/diff/9003/src/pkg/reflect/value.go\nFile src/pkg/reflect/value.go (right):\n\nhttps://codereview.appspot.com/6554067/diff/9003/src/pkg/reflect/value.go#newcode562\nsrc/pkg/reflect/value.go:562: var in []Value\nin := make([]Value, 0, len(ftyp.in))",
			"disapproval": false,
			"date": "2012-09-23 05:10:54.212120",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@google.com",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6554067/diff/9003/src/pkg/reflect/example_test.go\nFile src/pkg/reflect/example_test.go (right):\n\nhttps://codereview.appspot.com/6554067/diff/9003/src/pkg/reflect/example_test.go#newcode28\nsrc/pkg/reflect/example_test.go:28: reflect.ValueOf(fptr).Elem().Set(v)\nthis line needs explanation.\n\nhttps://codereview.appspot.com/6554067/diff/9003/src/pkg/reflect/makefunc.go\nFile src/pkg/reflect/makefunc.go (right):\n\nhttps://codereview.appspot.com/6554067/diff/9003/src/pkg/reflect/makefunc.go#newcode30\nsrc/pkg/reflect/makefunc.go:30: func MakeFunc(typ Type, fn func([]Value) []Value) Value {\ni think the type\nfunc([]Value) []Value\nshould be given an exported name, maybe MakeFuncFunc but perhaps there's a better one.\nthat would give this the signature\n\nfunc MakeFunc(typ Type, fn MakeFuncFunc) Value\nwhich is easier to read, with the slices tucked away. it also gives you a declaration (the one for MakeFuncFunc) to explain what it is and why.\n\nhttps://codereview.appspot.com/6554067/diff/9003/src/pkg/reflect/value.go\nFile src/pkg/reflect/value.go (right):\n\nhttps://codereview.appspot.com/6554067/diff/9003/src/pkg/reflect/value.go#newcode600\nsrc/pkg/reflect/value.go:600: panic(\"reflect: function created by MakeFunc returned value obtained from unexported field\")\ncan you dig out the function's name type for the message? i imagine when this triggers it could be far removed from where the error was created.",
			"disapproval": false,
			"date": "2012-09-23 05:56:08.000770",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@google.com",
				"rogpeppe@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "comments almost there\n\nhttp://codereview.appspot.com/6554067/diff/12011/src/pkg/reflect/makefunc.go\nFile src/pkg/reflect/makefunc.go (right):\n\nhttp://codereview.appspot.com/6554067/diff/12011/src/pkg/reflect/makefunc.go#newcode27\nsrc/pkg/reflect/makefunc.go:27: // MakeFunc returns a new function of the given type.\nMakeFunc returns a Value representing a new function of the given Type\nthat wraps the function fn.\n\nhttp://codereview.appspot.com/6554067/diff/12011/src/pkg/reflect/makefunc.go#newcode28\nsrc/pkg/reflect/makefunc.go:28: // When invoked, that new function does the following:\nWhen invoked by Call, that new function...\n\nhttp://codereview.appspot.com/6554067/diff/12011/src/pkg/reflect/makefunc.go#newcode30\nsrc/pkg/reflect/makefunc.go:30: //\t- convert its arguments to a list of Values in.\ns/in/args/\n\nhttp://codereview.appspot.com/6554067/diff/12011/src/pkg/reflect/makefunc.go#newcode32\nsrc/pkg/reflect/makefunc.go:32: //\t- return the results as a slice of Values, one per formal result.\nthese should be singular verbs to echo 'does'\n\nconverts\nruns\nreturns\n\nhttp://codereview.appspot.com/6554067/diff/12011/src/pkg/reflect/makefunc.go#newcode34\nsrc/pkg/reflect/makefunc.go:34: // The implementation fn can assume that the input Value slice\ns/input/argument/\n\nhttp://codereview.appspot.com/6554067/diff/12011/src/pkg/reflect/makefunc.go#newcode38\nsrc/pkg/reflect/makefunc.go:38: // body of a variadic function. The output Value slice returned by fn\ns/output/result/\n\nhttp://codereview.appspot.com/6554067/diff/12011/src/pkg/reflect/makefunc.go#newcode44\nsrc/pkg/reflect/makefunc.go:44: // implement a typed function in terms of Values.\ninconsistent formatting of line breaks",
			"disapproval": false,
			"date": "2012-09-24 21:59:02.592620",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@google.com",
				"rogpeppe@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/6554067/diff/12011/src/pkg/reflect/makefunc.go\nFile src/pkg/reflect/makefunc.go (right):\n\nhttp://codereview.appspot.com/6554067/diff/12011/src/pkg/reflect/makefunc.go#newcode27\nsrc/pkg/reflect/makefunc.go:27: // MakeFunc returns a new function of the given type.\nOn 2012/09/24 21:59:02, r wrote:\n> MakeFunc returns a Value representing a new function of the given Type\n> that wraps the function fn.\n\nDone.\n\nhttp://codereview.appspot.com/6554067/diff/12011/src/pkg/reflect/makefunc.go#newcode28\nsrc/pkg/reflect/makefunc.go:28: // When invoked, that new function does the following:\nOn 2012/09/24 21:59:02, r wrote:\n> When invoked by Call, that new function...\n\nI used \"When called\". The new function is almost never invoked using Call. This routine is the opposite of Call. You use it when you need to supply some non-reflecty code with a function of a specific type that can be called directly as an ordinary Go function.\n\nhttp://codereview.appspot.com/6554067/diff/12011/src/pkg/reflect/makefunc.go#newcode30\nsrc/pkg/reflect/makefunc.go:30: //\t- convert its arguments to a list of Values in.\nOn 2012/09/24 21:59:02, r wrote:\n> s/in/args/\n\nDone.\n\nhttp://codereview.appspot.com/6554067/diff/12011/src/pkg/reflect/makefunc.go#newcode32\nsrc/pkg/reflect/makefunc.go:32: //\t- return the results as a slice of Values, one per formal result.\nOn 2012/09/24 21:59:02, r wrote:\n> these should be singular verbs to echo 'does'\n> \n> converts\n> runs\n> returns\n\nDone.\n\nhttp://codereview.appspot.com/6554067/diff/12011/src/pkg/reflect/makefunc.go#newcode34\nsrc/pkg/reflect/makefunc.go:34: // The implementation fn can assume that the input Value slice\nOn 2012/09/24 21:59:02, r wrote:\n> s/input/argument/\n\nDone.\n\nhttp://codereview.appspot.com/6554067/diff/12011/src/pkg/reflect/makefunc.go#newcode38\nsrc/pkg/reflect/makefunc.go:38: // body of a variadic function. The output Value slice returned by fn\nOn 2012/09/24 21:59:02, r wrote:\n> s/output/result/\n\nDone.\n\nhttp://codereview.appspot.com/6554067/diff/12011/src/pkg/reflect/makefunc.go#newcode44\nsrc/pkg/reflect/makefunc.go:44: // implement a typed function in terms of Values.\nOn 2012/09/24 21:59:02, r wrote:\n> inconsistent formatting of line breaks\n\nDone. (I'd been trying to make the parallelism clear, but even godoc in text mode is going to reformat it.)",
			"disapproval": false,
			"date": "2012-09-24 22:07:59.267500",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@google.com",
				"rogpeppe@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-09-24 22:34:33.219750",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"daniel.morsing@gmail.com",
				"minux.ma@gmail.com",
				"bradfitz@google.com",
				"rogpeppe@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=c0b106409d18 ***\n\nreflect: add MakeFunc (API CHANGE)\n\nFixes issue 1765.\n\nR=iant, r, daniel.morsing, minux.ma, bradfitz, rogpeppe, remyoudompheng\nCC=golang-dev\nhttp://codereview.appspot.com/6554067",
			"disapproval": false,
			"date": "2012-09-25 00:06:39.346330",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 6554067: reflect: add MakeFunc (API CHANGE)",
	"created": "2012-09-22 04:45:58.647580",
	"patchsets": [
		1,
		3,
		5010,
		11,
		7014,
		9003,
		13013,
		20,
		12011,
		16001,
		15009
	],
	"modified": "2012-09-25 00:06:41.365880",
	"closed": true,
	"issue": 6554067
}