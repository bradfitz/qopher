{
	"description": "runtime: prepare for 64-bit ints\n\nThis CL makes the runtime understand that the type of\nthe len or cap of a map, slice, or string is 'int', not 'int32',\nand it is also careful to distinguish between function arguments\nand results of type 'int' vs type 'int32'.\n\nIn the runtime, the new typedefs 'intgo' and 'uintgo' refer\nto Go int and uint. The C types int and uint continue to be\nunavailable (cause intentional compile errors).\n\nThis CL does not change the meaning of int, but it should make\nthe eventual change of the meaning of int on amd64 a bit\nsmoother.\n\nUpdate issue 2188.",
	"cc": [
		"iant@golang.org",
		"r@golang.org",
		"dave@cheney.net",
		"remyoudompheng@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> might as well do \"Go's uint\" for parallelism.\r\n\r\nDone. Will wait for iant.\r\n",
			"disapproval": false,
			"date": "2012-09-24 04:09:14.398360",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for all the bug fixes. :-)\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/reflect/value.go\nFile src/pkg/reflect/value.go (right):\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/reflect/value.go#newcode2238\nsrc/pkg/reflect/value.go:2238: func chancap(ch iword) int32\nOn 2012/09/24 17:17:07, iant wrote:\n> s/int32/int/\n\nOuch, thanks. Looked for others and didn't find any but maplen (also fixed).\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/reflect/value.go#newcode2240\nsrc/pkg/reflect/value.go:2240: func chanlen(ch iword) int32\nOn 2012/09/24 17:17:07, iant wrote:\n> s/int32/int/\n\nDone.\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/chan.c\nFile src/pkg/runtime/chan.c (right):\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/chan.c#newcode42\nsrc/pkg/runtime/chan.c:42: uint32\tsendx;\t\t\t// send index\nOn 2012/09/24 17:17:07, iant wrote:\n> sendx and recvx should logically now become uintgo.\n\nDone.\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/chan.c#newcode104\nsrc/pkg/runtime/chan.c:104: c->elemsize = elem->size;\nOn 2012/09/24 17:17:07, iant wrote:\n> Unrelated to this CL, but this assignment could overflow elemsize, which is a\n> uint16.\n\nThe compiler checks that but I added a runtime throw for it too.\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/chan.c#newcode1096\nsrc/pkg/runtime/chan.c:1096: chosen = (int32)(uintptr)selectgo(&sel);\nOn 2012/09/24 17:17:07, iant wrote:\n> s/(int32)/(intgo)/\n\nDone.\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/chan.c#newcode1170\nsrc/pkg/runtime/chan.c:1170: //\tfunc chancap(c chan) (cap int32)\nOn 2012/09/24 17:17:07, iant wrote:\n> s/int32/int/\n\nDone.\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/chan.c#newcode1172\nsrc/pkg/runtime/chan.c:1172: reflect\u00b7chancap(Hchan *c, int32 cap)\nOn 2012/09/24 17:17:07, iant wrote:\n> s/int32/intgo/\n\nDone.\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/hashmap.c\nFile src/pkg/runtime/hashmap.c (right):\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/hashmap.c#newcode731\nsrc/pkg/runtime/hashmap.c:731: // makemap(typ *Type, hint uint32) (hmap *map[any]any);\nOn 2012/09/24 05:58:12, remyoudompheng wrote:\n> this seems mismatching\n\nDone.\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/malloc.goc\nFile src/pkg/runtime/malloc.goc (right):\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/malloc.goc#newcode31\nsrc/pkg/runtime/malloc.goc:31: int32 sizeclass, rate;\nOn 2012/09/24 05:58:12, remyoudompheng wrote:\n> rate should be intgo\n\nDone.\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/malloc.goc#newcode229\nsrc/pkg/runtime/malloc.goc:229: int32 rate;\nOn 2012/09/24 05:58:12, remyoudompheng wrote:\n> intgo\n\nDone.\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/malloc.goc#newcode510\nsrc/pkg/runtime/malloc.goc:510: int32 i, nret;\nOn 2012/09/24 17:17:07, iant wrote:\n> nret should be intgo or uintptr, which will require knockon changes in mfinal.c\n> and mgc0.c.  Right now the code assumes that the total size of the return\n> parameters of a finalizer will fit in an int32, which is safe enough in practice\n> but technically insufficient.  Could be done in a different CL.\n\nDone.\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/slice.c\nFile src/pkg/runtime/slice.c (right):\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/slice.c#newcode157\nsrc/pkg/runtime/slice.c:157: // copy(to any, fr any, wid uintptr) int\nOn 2012/09/24 17:17:07, iant wrote:\n> s/uintptr/int/ ?\n\nThis is the width of a single element in the slice, so it is uintptr.\n(The length and cap are in the slice headers but memmove needs\nto know how much to scale them by.)\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/string.goc\nFile src/pkg/runtime/string.goc (right):\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/string.goc#newcode52\nsrc/pkg/runtime/string.goc:52: if((uint32)l <= ms || runtime\u00b7cas(&runtime\u00b7maxstring, ms, (uint32)l))\nChanged to \"string too long\".\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/string.goc#newcode182\nsrc/pkg/runtime/string.goc:182: uint32 i, l;\nOn 2012/09/24 17:17:07, iant wrote:\n> s/uint32/intgo/\n\nDone.",
			"disapproval": false,
			"date": "2012-09-24 18:56:42.489310",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello iant, r (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-09-24 02:49:40.602900",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> This is an additional place to update when addressing issue 2142. I\r\n> think you should mention this in 2142\r\n\r\nDone.\r\n",
			"disapproval": false,
			"date": "2012-09-24 04:08:18.020770",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but wait for iant\ni like the exposed symmetry break via intgo and uintgo\n*\n\nhttp://codereview.appspot.com/6551067/diff/1002/src/pkg/runtime/runtime.h\nFile src/pkg/runtime/runtime.h (right):\n\nhttp://codereview.appspot.com/6551067/diff/1002/src/pkg/runtime/runtime.h#newcode23\nsrc/pkg/runtime/runtime.h:23: typedef\tuint32\t\tuintgo;\nmight as well do \"Go's uint\" for parallelism. there are several appearances",
			"disapproval": false,
			"date": "2012-09-24 03:28:40.576870",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/hashmap.c\nFile src/pkg/runtime/hashmap.c (right):\n\nhttp://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/hashmap.c#newcode731\nsrc/pkg/runtime/hashmap.c:731: // makemap(typ *Type, hint uint32) (hmap *map[any]any);\nthis seems mismatching\n\nhttp://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/malloc.goc\nFile src/pkg/runtime/malloc.goc (right):\n\nhttp://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/malloc.goc#newcode31\nsrc/pkg/runtime/malloc.goc:31: int32 sizeclass, rate;\nrate should be intgo\n\nhttp://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/malloc.goc#newcode229\nsrc/pkg/runtime/malloc.goc:229: int32 rate;\nintgo",
			"disapproval": false,
			"date": "2012-09-24 05:58:12.743080",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. I agree with r, intgo and friends grow on you after a while.\n\nhttp://codereview.appspot.com/6551067/diff/1002/src/pkg/runtime/malloc.h\nFile src/pkg/runtime/malloc.h (right):\n\nhttp://codereview.appspot.com/6551067/diff/1002/src/pkg/runtime/malloc.h#newcode138\nsrc/pkg/runtime/malloc.h:138: #endif\nThis is an additional place to update when addressing issue 2142. I think you should mention this in 2142, or add\n\nUpdates issues 2142.\n\nto the description.",
			"disapproval": false,
			"date": "2012-09-24 03:58:31.667250",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/reflect/value.go\nFile src/pkg/reflect/value.go (right):\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/reflect/value.go#newcode2238\nsrc/pkg/reflect/value.go:2238: func chancap(ch iword) int32\ns/int32/int/\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/reflect/value.go#newcode2240\nsrc/pkg/reflect/value.go:2240: func chanlen(ch iword) int32\ns/int32/int/\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/chan.c\nFile src/pkg/runtime/chan.c (right):\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/chan.c#newcode42\nsrc/pkg/runtime/chan.c:42: uint32\tsendx;\t\t\t// send index\nsendx and recvx should logically now become uintgo.\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/chan.c#newcode104\nsrc/pkg/runtime/chan.c:104: c->elemsize = elem->size;\nUnrelated to this CL, but this assignment could overflow elemsize, which is a uint16.\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/chan.c#newcode1096\nsrc/pkg/runtime/chan.c:1096: chosen = (int32)(uintptr)selectgo(&sel);\ns/(int32)/(intgo)/\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/chan.c#newcode1170\nsrc/pkg/runtime/chan.c:1170: //\tfunc chancap(c chan) (cap int32)\ns/int32/int/\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/chan.c#newcode1172\nsrc/pkg/runtime/chan.c:1172: reflect\u00b7chancap(Hchan *c, int32 cap)\ns/int32/intgo/\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/malloc.goc\nFile src/pkg/runtime/malloc.goc (right):\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/malloc.goc#newcode510\nsrc/pkg/runtime/malloc.goc:510: int32 i, nret;\nnret should be intgo or uintptr, which will require knockon changes in mfinal.c and mgc0.c.  Right now the code assumes that the total size of the return parameters of a finalizer will fit in an int32, which is safe enough in practice but technically insufficient.  Could be done in a different CL.\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/slice.c\nFile src/pkg/runtime/slice.c (right):\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/slice.c#newcode157\nsrc/pkg/runtime/slice.c:157: // copy(to any, fr any, wid uintptr) int\ns/uintptr/int/ ?\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/string.goc\nFile src/pkg/runtime/string.goc (right):\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/string.goc#newcode52\nsrc/pkg/runtime/string.goc:52: if((uint32)l <= ms || runtime\u00b7cas(&runtime\u00b7maxstring, ms, (uint32)l))\nDoes the wrong thing if the string is more than 4GB.  Since print rejects any string longer than maxstring, I think maxstring has to change from uint32 to intgo or uintgo.  (I think it's fine for the runtime printf code to refuse to print strings above a certain size, but not by printing [invalid string].\n\nhttps://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/string.goc#newcode182\nsrc/pkg/runtime/string.goc:182: uint32 i, l;\ns/uint32/intgo/",
			"disapproval": false,
			"date": "2012-09-24 17:17:07.784300",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> http://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/hashmap.c#newcode731\r\n> src/pkg/runtime/hashmap.c:731: // makemap(typ *Type, hint uint32) (hmap\r\n> *map[any]any);\r\n> this seems mismatching\r\n\r\nYeah, dreg comment. This is not called directly from Go. Deleted.\r\n\r\n> http://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/malloc.goc#newcode31\r\n> src/pkg/runtime/malloc.goc:31: int32 sizeclass, rate;\r\n> rate should be intgo\r\n>\r\n> http://codereview.appspot.com/6551067/diff/2019/src/pkg/runtime/malloc.goc#newcode229\r\n> src/pkg/runtime/malloc.goc:229: int32 rate;\r\n> intgo\r\n\r\nFixed.\r\n\r\nThanks.\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-09-24 16:38:39.992930",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=c341dd763471 ***\n\nruntime: prepare for 64-bit ints\n\nThis CL makes the runtime understand that the type of\nthe len or cap of a map, slice, or string is 'int', not 'int32',\nand it is also careful to distinguish between function arguments\nand results of type 'int' vs type 'int32'.\n\nIn the runtime, the new typedefs 'intgo' and 'uintgo' refer\nto Go int and uint. The C types int and uint continue to be\nunavailable (cause intentional compile errors).\n\nThis CL does not change the meaning of int, but it should make\nthe eventual change of the meaning of int on amd64 a bit\nsmoother.\n\nUpdate issue 2188.\n\nR=iant, r, dave, remyoudompheng\nCC=golang-dev\nhttp://codereview.appspot.com/6551067",
			"disapproval": false,
			"date": "2012-09-24 18:58:38.687040",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 6551067: runtime: prepare for 64-bit ints",
	"created": "2012-09-24 02:30:14.048130",
	"patchsets": [
		1,
		2001,
		1002,
		2019,
		7003,
		3033
	],
	"modified": "2012-09-24 18:58:39.816560",
	"closed": true,
	"issue": 6551067
}