{
	"description": "html: refactor parse test infrastructure\n\nMy excuse for doing this is that test cases with newlines in them didn't\nwork. But instead of just fixing that, I rearranged everything in\nparse_test.go to use fewer channels and pipes, and just call a\nstraightforward function to read test cases from a file.",
	"cc": [
		"nigeltao@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"andybalholm@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-18 16:53:33.499052",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"andybalholm@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=83cf4673a261 ***\n\nhtml: refactor parse test infrastructure\n\nMy excuse for doing this is that test cases with newlines in them didn't\nwork. But instead of just fixing that, I rearranged everything in\nparse_test.go to use fewer channels and pipes, and just call a\nstraightforward function to read test cases from a file.\n\nR=nigeltao\nCC=golang-dev\nhttp://codereview.appspot.com/5410049\n\nCommitter: Nigel Tao <nigeltao@golang.org>",
			"disapproval": false,
			"date": "2011-11-20 11:42:12.722792",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"andybalholm@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM, submitting.\n\nhttp://codereview.appspot.com/5410049/diff/4001/src/pkg/html/parse_test.go\nFile src/pkg/html/parse_test.go (right):\n\nhttp://codereview.appspot.com/5410049/diff/4001/src/pkg/html/parse_test.go#newcode21\nsrc/pkg/html/parse_test.go:21: line, err = r.ReadSlice('\\n')\nOther people on the Go team differ, but I much prefer explicit returns, which lets you use a := here.\n\nhttp://codereview.appspot.com/5410049/diff/4001/src/pkg/html/parse_test.go#newcode28\nsrc/pkg/html/parse_test.go:28: if !bytes.Equal(line, []byte(\"#data\\n\")) {\nI prefer `if string(line) == \"#data\\n\" {`. It's shorter, clearer, and it seems more likely for the compiler to optimize away the string/[]byte conversion.\n\nhttp://codereview.appspot.com/5410049/diff/4001/src/pkg/html/parse_test.go#newcode29\nsrc/pkg/html/parse_test.go:29: err = fmt.Errorf(`expected \"#data\\n\", found %q instead`, line)\nThe usual language is `got %q want \"#data\\n\"`.\n\nhttp://codereview.appspot.com/5410049/diff/4001/src/pkg/html/parse_test.go#newcode197\nsrc/pkg/html/parse_test.go:197: f.Close()\nUnnecessary, since you defer f.Close at line 153.",
			"disapproval": false,
			"date": "2011-11-20 11:41:50.010304",
			"approval": true
		}
	],
	"owner_email": "andybalholm@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "andybalholm",
	"subject": "code review 5410049: html: refactor parse test infrastructure",
	"created": "2011-11-18 16:53:11.047852",
	"patchsets": [
		1,
		2001,
		4001
	],
	"modified": "2011-11-21 17:20:48.897478",
	"closed": true,
	"issue": 5410049
}