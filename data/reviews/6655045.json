{
	"description": "cmd/5l: reorder some struct fields to reduce memory consumption\nValgrind Massif result when linking godoc:\nOn amd64:\n                    old          new         -/+\nmem_heap_B       185844612    175358047    -5.7%\nmem_heap_extra_B    773404       773137    -0.0%\n\nOn 386/ARM:\n                    old          new         -/+\nmem_heap_B       141775701    131289941    -7.4%\nmem_heap_extra_B    737011       736955    -0.0%\n",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"dave@cheney.net"
	],
	"reviewers": [
		"remyoudompheng@gmail.com"
	],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "5.3Gb to compile! That is getting into Firefox territory.\r\nhttp://www.phoronix.com/scan.php?page=news_item&px=MTA3MTQ\r\n\r\nOn Fri, Oct 12, 2012 at 6:07 PM, minux <minux.ma@gmail.com> wrote:\r\n>\r\n> On Fri, Oct 12, 2012 at 2:41 PM, R\u00e9my Oudompheng <remyoudompheng@gmail.com>\r\n> wrote:\r\n>>\r\n>> As far as I remember, the largest memory usage when compiling the\r\n>> dreadful output of test/rotate.go was essentially in Nodes. It's not\r\n>> clear what we can do for that.\r\n>\r\n> Yeah, true.\r\n>\r\n> By freely reordering struct Node, I can make the 6g's maximum RSS\r\n> smaller by 1.43% (from 5357168 KiB to 5281024 KiB, -76144 KiB).\r\n>\r\n> After reordering struct Sym, RSS go down by 3776 KiB (to 5277248 KiB).\r\n>\r\n> After reordering struct Type, RSS go down by 9168 KiB (to 5268080 KiB).\r\n>\r\n> To see the maximum RSS saved this way, I added #pragma pack to gc/go.h,\r\n> and the RSS is now 5198800 KiB (down by 158368 KiB, a merely 3%).\r\n>\r\n> No big improvements (and doing this will severely affect code documentation\r\n> quality), so maybe we need to use different type of Node struct for\r\n> different\r\n> kinds of node (which is a pretty big task).\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-12 07:14:04.100540",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Oct 12, 2012 at 2:41 PM, R\u00e9my Oudompheng\r\n<remyoudompheng@gmail.com>wrote:\r\n\r\n> As far as I remember, the largest memory usage when compiling the\r\n> dreadful output of test/rotate.go was essentially in Nodes. It's not\r\n> clear what we can do for that.\r\n>\r\nYeah, true.\r\n\r\nBy freely reordering struct Node, I can make the 6g's maximum RSS\r\nsmaller by 1.43% (from 5357168 KiB to 5281024 KiB, -76144 KiB).\r\n\r\nAfter reordering struct Sym, RSS go down by 3776 KiB (to 5277248 KiB).\r\n\r\nAfter reordering struct Type, RSS go down by 9168 KiB (to 5268080 KiB).\r\n\r\nTo see the maximum RSS saved this way, I added #pragma pack to gc/go.h,\r\nand the RSS is now 5198800 KiB (down by 158368 KiB, a merely 3%).\r\n\r\nNo big improvements (and doing this will severely affect code documentation\r\nquality), so maybe we need to use different type of Node struct for\r\ndifferent\r\nkinds of node (which is a pretty big task).\r\n",
			"disapproval": false,
			"date": "2012-10-12 07:07:23.454090",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Oct 12, 2012 at 10:41 AM, <dave@cheney.net> wrote:\r\n\r\n> Are there similar savings inside 5g ?\r\n>\r\nAs I didn't suspect gc would use much memory, I haven't looked at gc.\r\n\r\nBut I suspect there are similar saving in gc.\r\n",
			"disapproval": false,
			"date": "2012-10-12 06:01:16.773350",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Oct 12, 2012 at 2:00 PM, minux <minux.ma@gmail.com> wrote:\r\n>\r\n> On Fri, Oct 12, 2012 at 10:41 AM, <dave@cheney.net> wrote:\r\n>\r\n>> Are there similar savings inside 5g ?\r\n>>\r\n> As I didn't suspect gc would use much memory, I haven't looked at gc.\r\n>\r\n> But I suspect there are similar saving in gc.\r\n>\r\nThe same reordering is applicable to gc, but i think gc orders fields for\r\nbetter documentations (group related fields together), and the space\r\nsaving won't be big if i can't reorder the fields freely.\r\n\r\nRuss said that gc put every number (even 0 is) as bigint/bigfloat, and\r\nremoving\r\nthat could bring us big space savings. Also, he said that we could reuse\r\nused\r\nnumber (or cache small frequently used numbers, say -1, 0, 1-100, 128, 256,\r\netc\r\nin an array).\r\n",
			"disapproval": false,
			"date": "2012-10-12 06:32:19.937290",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/10/11 20:52:12, r wrote:\n> LGTM\n\nLGTM. Are there similar savings inside 5g ?",
			"disapproval": false,
			"date": "2012-10-12 02:41:02.303300",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-10-11 16:22:09.504590",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Note: the same field reorder isn't applicable to cmd/8l or cmd/6l.",
			"disapproval": false,
			"date": "2012-10-11 18:43:31.798190",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/10/12 minux <minux.ma@gmail.com> wrote:\r\n> The same reordering is applicable to gc, but i think gc orders fields for\r\n> better documentations (group related fields together), and the space\r\n> saving won't be big if i can't reorder the fields freely.\r\n>\r\n> Russ said that gc put every number (even 0 is) as bigint/bigfloat, and\r\n> removing\r\n> that could bring us big space savings. Also, he said that we could reuse\r\n> used\r\n> number (or cache small frequently used numbers, say -1, 0, 1-100, 128, 256,\r\n> etc\r\n> in an array).\r\n\r\nAs far as I remember, the largest memory usage when compiling the\r\ndreadful output of test/rotate.go was essentially in Nodes. It's not\r\nclear what we can do for that.\r\n\r\nR\u00e9my.\r\n",
			"disapproval": false,
			"date": "2012-10-12 06:41:05.518240",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-10-11 20:52:12.194060",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=1baa80f7f4a4 ***\n\ncmd/5l: reorder some struct fields to reduce memory consumption\nValgrind Massif result when linking godoc:\nOn amd64:\n                    old          new         -/+\nmem_heap_B       185844612    175358047    -5.7%\nmem_heap_extra_B    773404       773137    -0.0%\n\nOn 386/ARM:\n                    old          new         -/+\nmem_heap_B       141775701    131289941    -7.4%\nmem_heap_extra_B    737011       736955    -0.0%\n\nR=golang-dev, r, dave\nCC=golang-dev\nhttp://codereview.appspot.com/6655045",
			"disapproval": false,
			"date": "2012-10-12 05:39:33.909720",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Oct 12, 2012 at 3:14 PM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> 5.3Gb to compile! That is getting into Firefox territory.\r\n> http://www.phoronix.com/scan.php?page=news_item&px=MTA3MTQ\r\n\r\nThat's the very reason that test is not enabled by default, or\r\nall the builders will blow up. :-)\r\n",
			"disapproval": false,
			"date": "2012-10-12 07:51:20.765210",
			"approval": false
		}
	],
	"owner_email": "minux.ma@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "minux",
	"subject": "code review 6655045: cmd/5l: reorder some struct fields to reduce memory con...",
	"created": "2012-10-11 16:12:54.854010",
	"patchsets": [
		1,
		2001,
		2002,
		9001,
		1002
	],
	"modified": "2012-10-12 06:41:05.685430",
	"closed": true,
	"issue": 6655045
}