{
	"description": "runtime: update field types in preparation for GC changes",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rsc@golang.org",
		"remyoudompheng@gmail.com",
		"minux.ma@gmail.com",
		"ality@pbrane.org"
	],
	"messages": [
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-05-26 08:30:29.991535",
			"approval": false
		},
		{
			"sender": "0xe2.0x9a.0x9b@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This patch is controversial. I suggest we blindly ignore all the \r\ncontroversies.\r\n\r\nOn Saturday, May 26, 2012 12:40:54 PM UTC+2, Anthony Martin wrote:\r\n>\r\n> It feels like there's too much casting going on. \r\n>\r\n> For example, in src/pkg/runtime/mgc0.c:/^addstackroots \r\n> you can change the sp and guard variables to be uintptrs. \r\n> Then you would only need to change the current byte*  to uintptr casts and \r\n> add one new cast. \r\n>\r\n> What you have now adds five new casts in that function. \r\n>\r\n> Cheers, \r\n>   Anthony \r\n>\r\n",
			"disapproval": false,
			"date": "2012-05-26 11:21:51.885665",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It feels like there's too much casting going on.\r\n\r\nFor example, in src/pkg/runtime/mgc0.c:/^addstackroots\r\nyou can change the sp and guard variables to be uintptrs.\r\nThen you would only need to change the current byte*\r\ncasts to uintptr casts and add one new cast.\r\n\r\nWhat you have now adds five new casts in that function.\r\n\r\nCheers,\r\n  Anthony\r\n",
			"disapproval": false,
			"date": "2012-05-26 10:41:07.403452",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n",
			"disapproval": false,
			"date": "2012-05-30 17:07:37.871231",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6242061/diff/2008/src/pkg/runtime/runtime.h\nFile src/pkg/runtime/runtime.h (right):\n\nhttp://codereview.appspot.com/6242061/diff/2008/src/pkg/runtime/runtime.h#newcode481\nsrc/pkg/runtime/runtime.h:481: void*\targs[2];\t// padded to actual size\nOn 2012/05/26 08:39:09, remyoudompheng wrote:\n> deoesn't this change the size of the padding ?\nthe actual size doesn't matter, see proc.c:/^runtime\u00b7deferproc\n\nactually, imo, the comment is somewhat misleading here:\nbecause it's not a padding in strict sense, it means that\ndeferproc will enlarge the structure to hold all the arguments.\n\nhttp://codereview.appspot.com/6242061/diff/2008/src/pkg/runtime/thread_linux.c\nFile src/pkg/runtime/thread_linux.c (right):\n\nhttp://codereview.appspot.com/6242061/diff/2008/src/pkg/runtime/thread_linux.c#newcode189\nsrc/pkg/runtime/thread_linux.c:189: runtime\u00b7signalstack((byte*)m->gsignal->stackguard - StackGuard, 32*1024);\nalso need to change thread_{darwin,freebsd,netbsd,openbsd}.c\n\nhttp://codereview.appspot.com/6242061/diff/2008/src/pkg/runtime/traceback_x86.c\nFile src/pkg/runtime/traceback_x86.c (right):\n\nhttp://codereview.appspot.com/6242061/diff/2008/src/pkg/runtime/traceback_x86.c#newcode26\nsrc/pkg/runtime/traceback_x86.c:26: runtime\u00b7gentraceback(byte *pc0, byte *sp, byte *lr0, G *g, int32 skip, uintptr *pcbuf, int32 max)\ngiven all these casts, maybe we can just change the prototype to\nuse uintptr as type for sp (for consistency, maybe also for lr0)\n\nbtw, don't you also need to change traceback_arm.c?",
			"disapproval": false,
			"date": "2012-05-26 09:19:40.692554",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is submitted but I interrupted hg before it could send the mail.\r\n",
			"disapproval": false,
			"date": "2012-05-30 17:20:53.084051",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, remyoudompheng@gmail.com, minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-05-26 10:30:23.714325",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, remyoudompheng@gmail.com, minux.ma@gmail.com, ality@pbrane.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-05-30 16:55:08.452115",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6242061/diff/3008/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttp://codereview.appspot.com/6242061/diff/3008/src/pkg/runtime/mgc0.c#newcode560\nsrc/pkg/runtime/mgc0.c:560: if(gp->gcstack != 0) {\nOn 2012/05/29 18:32:03, rsc wrote:\n> Please use (uintptr)nil here, just because that's what you used everywhere else.\n\nDone.\n\nhttp://codereview.appspot.com/6242061/diff/3008/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttp://codereview.appspot.com/6242061/diff/3008/src/pkg/runtime/proc.c#newcode1328\nsrc/pkg/runtime/proc.c:1328: if(siz > sizeof(d->args))\nOn 2012/05/29 18:32:03, rsc wrote:\n> Maybe instead we should make the Defer say byte args[0] and simplify this?\n\n8c cannot compile args[0]. I changed it to args[1], so that at least it is the minimum count.",
			"disapproval": false,
			"date": "2012-05-30 17:03:23.147387",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6242061/diff/2008/src/pkg/runtime/runtime.h\nFile src/pkg/runtime/runtime.h (right):\n\nhttp://codereview.appspot.com/6242061/diff/2008/src/pkg/runtime/runtime.h#newcode481\nsrc/pkg/runtime/runtime.h:481: void*\targs[2];\t// padded to actual size\ndeoesn't this change the size of the padding ?",
			"disapproval": false,
			"date": "2012-05-26 08:39:09.729086",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6242061/diff/3008/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttp://codereview.appspot.com/6242061/diff/3008/src/pkg/runtime/mgc0.c#newcode560\nsrc/pkg/runtime/mgc0.c:560: if(gp->gcstack != 0) {\nPlease use (uintptr)nil here, just because that's what you used everywhere else.\n\nhttp://codereview.appspot.com/6242061/diff/3008/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttp://codereview.appspot.com/6242061/diff/3008/src/pkg/runtime/proc.c#newcode1328\nsrc/pkg/runtime/proc.c:1328: if(siz > sizeof(d->args))\nMaybe instead we should make the Defer say byte args[0] and simplify this?",
			"disapproval": false,
			"date": "2012-05-29 18:32:03.043009",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Russ Cox <rsc@golang.org> once said:\r\n> casts are free.  I'm not worried about this.\r\n\r\nCasts are only free for the compiler.\r\nProgrammers still have to understand\r\nwhy they're present.\r\n\r\nThough, I agree it's a minor complaint.\r\n\r\n  Anthony\r\n",
			"disapproval": false,
			"date": "2012-05-30 12:16:30.386944",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6242061/diff/2008/src/pkg/runtime/runtime.h\nFile src/pkg/runtime/runtime.h (right):\n\nhttp://codereview.appspot.com/6242061/diff/2008/src/pkg/runtime/runtime.h#newcode481\nsrc/pkg/runtime/runtime.h:481: void*\targs[2];\t// padded to actual size\nOn 2012/05/26 08:39:09, remyoudompheng wrote:\n> deoesn't this change the size of the padding ?\n\nYes, in some cases it changes the number of bytes allocated.\n\nI looked at the code in proc.c and found out that I was passing a wrong number to runtime\u00b7malloc. The code always worked correctly, but in certain situations it was by chance (not by reason).\n\nhttp://codereview.appspot.com/6242061/diff/2008/src/pkg/runtime/thread_linux.c\nFile src/pkg/runtime/thread_linux.c (right):\n\nhttp://codereview.appspot.com/6242061/diff/2008/src/pkg/runtime/thread_linux.c#newcode189\nsrc/pkg/runtime/thread_linux.c:189: runtime\u00b7signalstack((byte*)m->gsignal->stackguard - StackGuard, 32*1024);\nOn 2012/05/26 09:19:40, minux wrote:\n> also need to change thread_{darwin,freebsd,netbsd,openbsd}.c\n\nDone.\n\nhttp://codereview.appspot.com/6242061/diff/2008/src/pkg/runtime/traceback_x86.c\nFile src/pkg/runtime/traceback_x86.c (right):\n\nhttp://codereview.appspot.com/6242061/diff/2008/src/pkg/runtime/traceback_x86.c#newcode26\nsrc/pkg/runtime/traceback_x86.c:26: runtime\u00b7gentraceback(byte *pc0, byte *sp, byte *lr0, G *g, int32 skip, uintptr *pcbuf, int32 max)\nOn 2012/05/26 09:19:40, minux wrote:\n> given all these casts, maybe we can just change the prototype to\n> use uintptr as type for sp (for consistency, maybe also for lr0)\n\nThe patch which improves GC precision is big. By splitting it into smaller pieces, the individual pieces are starting to make less sense (even to myself) than the big patch.",
			"disapproval": false,
			"date": "2012-05-26 11:18:56.453730",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, May 26, 2012 at 6:40 AM, Anthony Martin <ality@pbrane.org> wrote:\r\n> It feels like there's too much casting going on.\r\n>\r\n> For example, in src/pkg/runtime/mgc0.c:/^addstackroots\r\n> you can change the sp and guard variables to be uintptrs.\r\n> Then you would only need to change the current byte*\r\n> casts to uintptr casts and add one new cast.\r\n>\r\n> What you have now adds five new casts in that function.\r\n\r\ncasts are free.  I'm not worried about this.\r\n",
			"disapproval": false,
			"date": "2012-05-29 18:32:58.386463",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, May 30, 2012 at 8:16 AM, Anthony Martin <ality@pbrane.org> wrote:\r\n> Casts are only free for the compiler.\r\n> Programmers still have to understand\r\n> why they're present.\r\n\r\nI'm confident that everything will turn out okay in the end.\r\n",
			"disapproval": false,
			"date": "2012-05-30 13:06:20.208967",
			"approval": false
		}
	],
	"owner_email": "0xE2.0x9A.0x9B@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "atom",
	"subject": "code review 6242061: runtime: update field types in preparation for GC changes",
	"created": "2012-05-26 08:22:48.014819",
	"patchsets": [
		1,
		3,
		2008,
		3008,
		8004
	],
	"modified": "2012-05-30 17:22:32.511597",
	"closed": true,
	"issue": 6242061
}