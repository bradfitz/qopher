{
	"description": "compress/flate: fix overflow on 2GB input. Reset hashOffset every 16 MB.\n\nThis bug has been introduced in the following revision:\n\nchangeset:   11404:26dceba5c610\nuser:        Ivan Krasin <krasin@golang.org>\ndate:        Mon Jan 23 09:19:39 2012 -0500\nsummary:     compress/flate: reduce memory pressure at cost of additional arithmetic operation.\n\nThis is the review page for that CL: http://codereview.appspot.com/5555070/",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"imkrasin@gmail.com"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nThanks for all the revisions. I feel good about this fix now.\r\n",
			"disapproval": false,
			"date": "2012-05-30 20:08:52.004208",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks good. Now that you understand the bug, is it possible to write a\r\nsimple test that will trigger it (one that doesn't require a 2GB input\r\nfile)? It would be good to have such a test that was disabled for\r\ntesting.Short() but run during long tests.\r\n\r\nThanks.\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-30 03:19:10.320095",
			"approval": false
		},
		{
			"sender": "imkrasin@gmail.com",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"imkrasin@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The idea of the test: the bug is reproduced when hashHead contains a very (> 2GB ago) stale reference that is being requested. So, the test satisfies: \n\n111111111 <many zeros> 111111111\n\nbecause most of the time we update the same hash.",
			"disapproval": false,
			"date": "2012-05-30 18:31:13.342358",
			"approval": false
		},
		{
			"sender": "krasin@golang.org",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2012-05-30 01:28:42.259363",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"imkrasin@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=00a1ca1ea3bd ***\n\ncompress/flate: fix overflow on 2GB input. Reset hashOffset every 16 MB.\n\nThis bug has been introduced in the following revision:\n\nchangeset:   11404:26dceba5c610\nuser:        Ivan Krasin <krasin@golang.org>\ndate:        Mon Jan 23 09:19:39 2012 -0500\nsummary:     compress/flate: reduce memory pressure at cost of additional arithmetic operation.\n\nThis is the review page for that CL: http://codereview.appspot.com/5555070/\n\nR=rsc, imkrasin\nCC=golang-dev\nhttp://codereview.appspot.com/6249067\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2012-05-30 20:08:44.202211",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I patched this in, reverted deflate.go, and changed 2*maxHashOffset to\r\n1<<25 in the test, and the test passes. I was hoping for a test that\r\nfails without this CL. Is that possible?\r\n\r\nThanks.\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-30 17:23:01.755153",
			"approval": false
		},
		{
			"sender": "imkrasin@gmail.com",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"imkrasin@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi Russ,\n\nI have added the test (a very long, sparse input). Also, I don't run DeflateInflateTest on the inputs larger than a threshold.\n\nShort tests for compress/flate run 0.8 sec on my machine and large tests run 16 sec. This might be a problem on ARM.",
			"disapproval": false,
			"date": "2012-05-30 17:11:21.527480",
			"approval": false
		},
		{
			"sender": "imkrasin@gmail.com",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"imkrasin@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Just a sec.",
			"disapproval": false,
			"date": "2012-05-30 17:25:21.404362",
			"approval": false
		},
		{
			"sender": "imkrasin@gmail.com",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"imkrasin@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/05/30 17:25:21, imkrasin wrote:\n> Just a sec.\n\nMy estimation was about 3600x more optimistic than the reality, but the test is ready. Please, take a look. It works ~ 15 sec on my machine.",
			"disapproval": false,
			"date": "2012-05-30 18:26:12.857660",
			"approval": false
		},
		{
			"sender": "imkrasin@gmail.com",
			"recipients": [
				"krasin@golang.org",
				"imkrasin@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/05/30 20:08:52, rsc wrote:\n> LGTM\n> \n> Thanks for all the revisions. I feel good about this fix now.\n\nThank for showing me ioutil.Discard (I tend to look at types and methods in the docs, and frequently ignore vars).\n\nSorry for yet another bug in my code.",
			"disapproval": false,
			"date": "2012-05-30 20:21:55.461205",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"imkrasin@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for working out a test.\n\nhttp://codereview.appspot.com/6249067/diff/6004/src/pkg/compress/flate/deflate_test.go\nFile src/pkg/compress/flate/deflate_test.go (right):\n\nhttp://codereview.appspot.com/6249067/diff/6004/src/pkg/compress/flate/deflate_test.go#newcode103\nsrc/pkg/compress/flate/deflate_test.go:103: type sparseReader struct {\n// A sparseReader returns a stream consisting of 10 1s followed by l-20 0s followed by 10 1s.\n// This tests very old hash references.\n\nhttp://codereview.appspot.com/6249067/diff/6004/src/pkg/compress/flate/deflate_test.go#newcode115\nsrc/pkg/compress/flate/deflate_test.go:115: n -= int(cur - r.l)\nadd\ncur = r.l\n\nhttp://codereview.appspot.com/6249067/diff/6004/src/pkg/compress/flate/deflate_test.go#newcode118\nsrc/pkg/compress/flate/deflate_test.go:118: if cur+int64(i) < 10 || cur+int64(i) >= r.l-10 {\nLooks like this should be r.cur. Otherwise the location of the 1s depends on exactly how big a read was done, no?\n\nhttp://codereview.appspot.com/6249067/diff/6004/src/pkg/compress/flate/deflate_test.go#newcode130\nsrc/pkg/compress/flate/deflate_test.go:130: return\nt.Logf(\"skipping sparse chunk during short test\")\n\nhttp://codereview.appspot.com/6249067/diff/6004/src/pkg/compress/flate/deflate_test.go#newcode132\nsrc/pkg/compress/flate/deflate_test.go:132: w, err := NewWriter(&nullWriter{}, 1)\nYou can use ioutil.Discard instead of defining nullWriter.",
			"disapproval": false,
			"date": "2012-05-30 18:39:18.144981",
			"approval": false
		},
		{
			"sender": "imkrasin@gmail.com",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"imkrasin@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6249067/diff/6004/src/pkg/compress/flate/deflate_test.go\nFile src/pkg/compress/flate/deflate_test.go (right):\n\nhttp://codereview.appspot.com/6249067/diff/6004/src/pkg/compress/flate/deflate_test.go#newcode103\nsrc/pkg/compress/flate/deflate_test.go:103: type sparseReader struct {\nOn 2012/05/30 18:39:18, rsc wrote:\n> // A sparseReader returns a stream consisting of 10 1s followed by l-20 0s\n> followed by 10 1s.\n> // This tests very old hash references.\n\nDone.\n\nhttp://codereview.appspot.com/6249067/diff/6004/src/pkg/compress/flate/deflate_test.go#newcode115\nsrc/pkg/compress/flate/deflate_test.go:115: n -= int(cur - r.l)\nOn 2012/05/30 18:39:18, rsc wrote:\n> add\n> cur = r.l\n\nDone.\n\nhttp://codereview.appspot.com/6249067/diff/6004/src/pkg/compress/flate/deflate_test.go#newcode118\nsrc/pkg/compress/flate/deflate_test.go:118: if cur+int64(i) < 10 || cur+int64(i) >= r.l-10 {\nOn 2012/05/30 18:39:18, rsc wrote:\n> Looks like this should be r.cur. Otherwise the location of the 1s depends on\n> exactly how big a read was done, no?\nIt turns out that the bug is harder to reproduce than I thought. I have changed the test to a more correct form that reproduces the issue.\n\nhttp://codereview.appspot.com/6249067/diff/6004/src/pkg/compress/flate/deflate_test.go#newcode130\nsrc/pkg/compress/flate/deflate_test.go:130: return\nOn 2012/05/30 18:39:18, rsc wrote:\n> t.Logf(\"skipping sparse chunk during short test\")\n\nDone.\n\nhttp://codereview.appspot.com/6249067/diff/6004/src/pkg/compress/flate/deflate_test.go#newcode132\nsrc/pkg/compress/flate/deflate_test.go:132: w, err := NewWriter(&nullWriter{}, 1)\nOn 2012/05/30 18:39:18, rsc wrote:\n> You can use ioutil.Discard instead of defining nullWriter.\n\nDone.",
			"disapproval": false,
			"date": "2012-05-30 20:01:19.475187",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"krasin@golang.org",
				"imkrasin@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=close",
			"disapproval": false,
			"date": "2013-07-21 19:57:26.851110",
			"approval": false
		}
	],
	"owner_email": "krasin@golang.org",
	"private": false,
	"base_url": "",
	"owner": "Ivan Krasin",
	"subject": "compress/flate: fix overflow on 2GB input. Reset hashOf...",
	"created": "2012-05-30 01:23:04.848629",
	"patchsets": [
		1,
		2001,
		6001,
		9001,
		5002,
		5003,
		6004,
		13002,
		3004
	],
	"modified": "2013-07-21 19:57:27.163960",
	"closed": false,
	"issue": 6249067
}