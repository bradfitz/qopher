{
	"description": "cmd/gc: contiguous loop layout\n\nDrop expecttaken function in favor of extra argument\nto gbranch and bgen. Mark loop condition as likely to\nbe true, so that loops are generated inline.\n\nThe main benefit here is contiguous code when trying\nto read the generated assembly. It has only minor effects\non the timing, and they mostly cancel the minor effects\nthat aligning function entry points had.  One exception:\nboth changes made Fannkuch faster.\n\nCompared to before CL 6244066 (before aligned functions)\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17    4222117400   4201958800   -0.48%\nBenchmarkFannkuch11      3462631800   3215908600   -7.13%\nBenchmarkGobDecode         20887622     20899164   +0.06%\nBenchmarkGobEncode          9548772      9439083   -1.15%\nBenchmarkGzip                151687       152060   +0.25%\nBenchmarkGunzip                8742         8711   -0.35%\nBenchmarkJSONEncode        62730560     62686700   -0.07%\nBenchmarkJSONDecode       252569180    252368960   -0.08%\nBenchmarkMandelbrot200      5267599      5252531   -0.29%\nBenchmarkRevcomp25M       980813500    985248400   +0.45%\nBenchmarkTemplate         361259100    357414680   -1.06%\n\nCompared to tip (aligned functions):\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17    4140739800   4201958800   +1.48%\nBenchmarkFannkuch11      3259914400   3215908600   -1.35%\nBenchmarkGobDecode         20620222     20899164   +1.35%\nBenchmarkGobEncode          9384886      9439083   +0.58%\nBenchmarkGzip                150333       152060   +1.15%\nBenchmarkGunzip                8741         8711   -0.34%\nBenchmarkJSONEncode        65210990     62686700   -3.87%\nBenchmarkJSONDecode       249394860    252368960   +1.19%\nBenchmarkMandelbrot200      5273394      5252531   -0.40%\nBenchmarkRevcomp25M       996013800    985248400   -1.08%\nBenchmarkTemplate         360620840    357414680   -0.89%",
	"cc": [
		"ken@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"ken@google.com"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello ken2 (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-05-30 22:07:36.927391",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=31c459151a78 ***\n\ncmd/gc: contiguous loop layout\n\nDrop expecttaken function in favor of extra argument\nto gbranch and bgen. Mark loop condition as likely to\nbe true, so that loops are generated inline.\n\nThe main benefit here is contiguous code when trying\nto read the generated assembly. It has only minor effects\non the timing, and they mostly cancel the minor effects\nthat aligning function entry points had.  One exception:\nboth changes made Fannkuch faster.\n\nCompared to before CL 6244066 (before aligned functions)\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17    4222117400   4201958800   -0.48%\nBenchmarkFannkuch11      3462631800   3215908600   -7.13%\nBenchmarkGobDecode         20887622     20899164   +0.06%\nBenchmarkGobEncode          9548772      9439083   -1.15%\nBenchmarkGzip                151687       152060   +0.25%\nBenchmarkGunzip                8742         8711   -0.35%\nBenchmarkJSONEncode        62730560     62686700   -0.07%\nBenchmarkJSONDecode       252569180    252368960   -0.08%\nBenchmarkMandelbrot200      5267599      5252531   -0.29%\nBenchmarkRevcomp25M       980813500    985248400   +0.45%\nBenchmarkTemplate         361259100    357414680   -1.06%\n\nCompared to tip (aligned functions):\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17    4140739800   4201958800   +1.48%\nBenchmarkFannkuch11      3259914400   3215908600   -1.35%\nBenchmarkGobDecode         20620222     20899164   +1.35%\nBenchmarkGobEncode          9384886      9439083   +0.58%\nBenchmarkGzip                150333       152060   +1.15%\nBenchmarkGunzip                8741         8711   -0.34%\nBenchmarkJSONEncode        65210990     62686700   -3.87%\nBenchmarkJSONDecode       249394860    252368960   +1.19%\nBenchmarkMandelbrot200      5273394      5252531   -0.40%\nBenchmarkRevcomp25M       996013800    985248400   -1.08%\nBenchmarkTemplate         360620840    357414680   -0.89%\n\nR=ken2\nCC=golang-dev\nhttp://codereview.appspot.com/6245069",
			"disapproval": false,
			"date": "2012-05-30 22:07:47.936615",
			"approval": false
		},
		{
			"sender": "ken@google.com",
			"recipients": [
				"rsc@golang.org",
				"ken@google.com",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "lgtm",
			"disapproval": false,
			"date": "2012-05-31 04:16:22.635778",
			"approval": true
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 6245069: cmd/gc: contiguous loop layout",
	"created": "2012-05-30 13:17:53.036279",
	"patchsets": [
		1,
		2001,
		4001,
		7001,
		4002
	],
	"modified": "2012-05-31 04:16:22.758801",
	"closed": true,
	"issue": 6245069
}