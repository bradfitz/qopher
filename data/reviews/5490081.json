{
	"description": "dashboard: send mail on build failure",
	"cc": [
		"rsc@golang.org",
		"adg@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2011-12-20 06:53:46.314161",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The App Engine stuff is hard to follow without comments.\n\nhttp://codereview.appspot.com/5490081/diff/6001/misc/dashboard/app/build/build.go\nFile misc/dashboard/app/build/build.go (right):\n\nhttp://codereview.appspot.com/5490081/diff/6001/misc/dashboard/app/build/build.go#newcode212\nmisc/dashboard/app/build/build.go:212: func (l *Log) String() string {\nThis is pretty heavy-weight for a string method.\nI would expect this to be called Text or something\nand let String just return string(l.CompressedLog).\nIf you put l in a Print statement you will be sorry.\nAlso there's no reason to return a string; return []byte\nand save an allocation + copy.\n\nhttp://codereview.appspot.com/5490081/diff/6001/misc/dashboard/app/build/build.go#newcode217\nmisc/dashboard/app/build/build.go:217: var buf bytes.Buffer\nuse ioutil.ReadAll\n\nhttp://codereview.appspot.com/5490081/diff/6001/misc/dashboard/app/build/build.go#newcode530\nmisc/dashboard/app/build/build.go:530: fmt.Fprint(w, l)\nw.Write(l.Text())\n\nhttp://codereview.appspot.com/5490081/diff/6001/misc/dashboard/app/build/fail-notify.txt\nFile misc/dashboard/app/build/fail-notify.txt (right):\n\nhttp://codereview.appspot.com/5490081/diff/6001/misc/dashboard/app/build/fail-notify.txt#newcode9\nmisc/dashboard/app/build/fail-notify.txt:9: {{tail 100 .Log.String}}\n.Log.Text | printf \"%s\" | tail 100\nor change signature of tail\n\nhttp://codereview.appspot.com/5490081/diff/6001/misc/dashboard/app/build/notify.go\nFile misc/dashboard/app/build/notify.go (right):\n\nhttp://codereview.appspot.com/5490081/diff/6001/misc/dashboard/app/build/notify.go#newcode32\nmisc/dashboard/app/build/notify.go:32: // have been retrieved from the datastore within that transaction.\nSeems like this comment should say something about\nthe magic of the delay, which is never explained.\n\nhttp://codereview.appspot.com/5490081/diff/6001/misc/dashboard/app/build/notify.go#newcode86\nmisc/dashboard/app/build/notify.go:86: func getFirst(c appengine.Context, q *datastore.Query, v interface{}) os.Error {\nhttp://golang.org/doc/effective_go.html#commentary\nhttp://golang.org/doc/effective_go.html#Getters\n\nThis can be firstFoo for whatever Foo it is the first of.\n\nhttp://codereview.appspot.com/5490081/diff/6001/misc/dashboard/app/build/notify.go#newcode103\nmisc/dashboard/app/build/notify.go:103: func sendFailMail(c appengine.Context, com *Commit, builder string) {\nhttp://golang.org/doc/effective_go.html#commentary",
			"disapproval": false,
			"date": "2011-12-20 21:35:41.512629",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"adg@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as f82e8102025c ***\n\ndashboard: send mail on build failure\n\nR=rsc, adg\nCC=golang-dev\nhttp://codereview.appspot.com/5490081",
			"disapproval": false,
			"date": "2011-12-21 02:16:52.000154",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-20 21:12:15.473203",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"adg@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nMuch nicer.\n\nhttp://codereview.appspot.com/5490081/diff/7009/misc/dashboard/app/build/notify.go\nFile misc/dashboard/app/build/notify.go (right):\n\nhttp://codereview.appspot.com/5490081/diff/7009/misc/dashboard/app/build/notify.go#newcode85\nmisc/dashboard/app/build/notify.go:85: // firstEntity executes the query q and loads the first entity into v.\nso that's what it does.\n\nfirstMatch?",
			"disapproval": false,
			"date": "2011-12-21 02:00:19.178676",
			"approval": true
		},
		{
			"sender": "adg@google.com",
			"recipients": [
				"adg@golang.org",
				"rsc@golang.org",
				"adg@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/5490081/diff/6001/misc/dashboard/app/build/build.go\nFile misc/dashboard/app/build/build.go (right):\n\nhttp://codereview.appspot.com/5490081/diff/6001/misc/dashboard/app/build/build.go#newcode212\nmisc/dashboard/app/build/build.go:212: func (l *Log) String() string {\nOn 2011/12/20 21:35:41, rsc wrote:\n> This is pretty heavy-weight for a string method.\n> I would expect this to be called Text or something\n> and let String just return string(l.CompressedLog).\n> If you put l in a Print statement you will be sorry.\n> Also there's no reason to return a string; return []byte\n> and save an allocation + copy.\n\nDone.\n\nhttp://codereview.appspot.com/5490081/diff/6001/misc/dashboard/app/build/build.go#newcode217\nmisc/dashboard/app/build/build.go:217: var buf bytes.Buffer\nOn 2011/12/20 21:35:41, rsc wrote:\n> use ioutil.ReadAll\n\nDone.\n\nhttp://codereview.appspot.com/5490081/diff/6001/misc/dashboard/app/build/build.go#newcode530\nmisc/dashboard/app/build/build.go:530: fmt.Fprint(w, l)\nOn 2011/12/20 21:35:41, rsc wrote:\n> w.Write(l.Text())\n\nDone.\n\nhttp://codereview.appspot.com/5490081/diff/6001/misc/dashboard/app/build/fail-notify.txt\nFile misc/dashboard/app/build/fail-notify.txt (right):\n\nhttp://codereview.appspot.com/5490081/diff/6001/misc/dashboard/app/build/fail-notify.txt#newcode9\nmisc/dashboard/app/build/fail-notify.txt:9: {{tail 100 .Log.String}}\nOn 2011/12/20 21:35:41, rsc wrote:\n> .Log.Text | printf \"%s\" | tail 100\n> or change signature of tail\n\nDone.\n\nhttp://codereview.appspot.com/5490081/diff/6001/misc/dashboard/app/build/notify.go\nFile misc/dashboard/app/build/notify.go (right):\n\nhttp://codereview.appspot.com/5490081/diff/6001/misc/dashboard/app/build/notify.go#newcode32\nmisc/dashboard/app/build/notify.go:32: // have been retrieved from the datastore within that transaction.\nOn 2011/12/20 21:35:41, rsc wrote:\n> Seems like this comment should say something about\n> the magic of the delay, which is never explained.\n\nDone.\n\nhttp://codereview.appspot.com/5490081/diff/6001/misc/dashboard/app/build/notify.go#newcode86\nmisc/dashboard/app/build/notify.go:86: func getFirst(c appengine.Context, q *datastore.Query, v interface{}) os.Error {\nOn 2011/12/20 21:35:41, rsc wrote:\n> http://golang.org/doc/effective_go.html#commentary\n> http://golang.org/doc/effective_go.html#Getters\n> \n> This can be firstFoo for whatever Foo it is the first of.\n\nDone.\n\nAgain, I used \"get\" because this effectively does a datastore.Get for a query.\n\nhttp://codereview.appspot.com/5490081/diff/6001/misc/dashboard/app/build/notify.go#newcode103\nmisc/dashboard/app/build/notify.go:103: func sendFailMail(c appengine.Context, com *Commit, builder string) {\nOn 2011/12/20 21:35:41, rsc wrote:\n> http://golang.org/doc/effective_go.html#commentary\n\nDone.",
			"disapproval": false,
			"date": "2011-12-21 01:06:48.282823",
			"approval": false
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 5490081: dashboard: send mail on build failure",
	"created": "2011-12-20 06:53:39.647032",
	"patchsets": [
		1,
		3001,
		6001,
		10002,
		7009,
		10004,
		9005
	],
	"modified": "2011-12-21 02:16:53.892577",
	"closed": true,
	"issue": 5490081
}