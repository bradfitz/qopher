{
	"description": "cmd/5c: re-enable regopt()\n        After CL 6185047, ./all.bash passed.\n\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkAppend                      5558         4894  -11.95%\nBenchmarkAppendSpecialCase           5242         4572  -12.78%\nBenchmarkSelectUncontended           3719         2821  -24.15%\nBenchmarkSelectContended             3776         2832  -25.00%\nBenchmarkSelectNonblock              1030         1089   +5.73%\nBenchmarkChanUncontended              530          422  -20.38%\nBenchmarkChanContended                534          444  -16.85%\nBenchmarkChanSync                    1613         1492   -7.50%\nBenchmarkChanProdCons0               1520         1351  -11.12%\nBenchmarkChanProdCons10               785          668  -14.90%\nBenchmarkChanProdCons100              564          473  -16.13%\nBenchmarkChanProdConsWork0          11205        10337   -7.75%\nBenchmarkChanProdConsWork10          9806         9567   -2.44%\nBenchmarkChanProdConsWork100         9413         9398   -0.16%\nBenchmarkChanCreation               11687         8715  -25.43%\nBenchmarkChanSem                      553          453  -18.08%\nBenchmarkCallClosure                   22           22   +0.44%\nBenchmarkCallClosure1                  28           28   +0.71%\nBenchmarkCallClosure2                2224         1668  -25.00%\nBenchmarkCallClosure3                2217         1629  -26.52%\nBenchmarkCallClosure4                2240         1684  -24.82%\nBenchmarkComplex128DivNormal          930          912   -1.94%\nBenchmarkComplex128DivNisNaN          862          866   +0.46%\nBenchmarkComplex128DivDisNaN          849          852   +0.35%\nBenchmarkComplex128DivNisInf          556          583   +4.86%\nBenchmarkComplex128DivDisInf          522          512   -1.92%\nBenchmarkConvT2E                      175          159   -9.14%\nBenchmarkConvT2EBig                  2418         1823  -24.61%\nBenchmarkConvT2I                      545          549   +0.73%\nBenchmarkConvI2E                       35           32   -9.58%\nBenchmarkConvI2I                      404          391   -3.22%\nBenchmarkAssertE2T                     75           62  -16.25%\nBenchmarkAssertE2TBig                  76           63  -16.80%\nBenchmarkAssertE2I                    427          409   -4.22%\nBenchmarkAssertI2T                     82           66  -20.29%\nBenchmarkAssertI2I                    430          416   -3.26%\nBenchmarkAssertI2E                     36           32  -12.50%\nBenchmarkAssertE2E                     35           35   +0.57%\nBenchmarkFinalizer                   3224         2941   -8.78%\nBenchmarkFinalizerRun              117392        84772  -27.79%\nBenchmarkStackGrowth                 5267         5930  +12.59%\nBenchmarkSyscall                      191          167  -12.57%\nBenchmarkSyscallWork                 9918         7713  -22.23%\nBenchmarkIfaceCmp100                 1645         1652   +0.43%\nBenchmarkIfaceCmpNil100              1433         1440   +0.49%\n",
	"cc": [
		"dave@cheney.net",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, May 17, 2012 at 1:32 AM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> Have you verified that the optimizer no longer smashes R8 when running\r\n> out of registers?\r\n>\r\nIt uses R8, but IFAIK, we only need to preserve R9/R10/SP/LR/PC across\r\nfunction calls, isn't it?\r\n",
			"disapproval": false,
			"date": "2012-05-16 17:38:33.258521",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "For the record, here is the result on my pandaboard\n\npando(~/go/src/pkg/runtime) % ~/go/misc/benchcmp {old,new}.txt\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkAppend                      6575         5905  -10.19%\nBenchmarkAppendSpecialCase           6277         5526  -11.96%\nBenchmarkSelectUncontended           4430         3535  -20.20%\nBenchmarkSelectContended             4430         3514  -20.68%\nBenchmarkSelectNonblock              1277         1490  +16.68%\nBenchmarkChanUncontended              651          604   -7.22%\nBenchmarkChanContended                652          605   -7.21%\nBenchmarkChanSync                    2075         2021   -2.60%\nBenchmarkChanProdCons0               1872         1880   +0.43%\nBenchmarkChanProdCons10               966          920   -4.76%\nBenchmarkChanProdCons100              691          645   -6.66%\nBenchmarkChanProdConsWork0          12736        12596   -1.10%\nBenchmarkChanProdConsWork10         11763        11613   -1.28%\nBenchmarkChanProdConsWork100        11478        11335   -1.25%\nBenchmarkChanCreation               14149        10381  -26.63%\nBenchmarkChanSem                      678          560  -17.40%\nBenchmarkCallClosure                   26           26   +0.00%\nBenchmarkCallClosure1                  33           32   -0.91%\nBenchmarkCallClosure2                2667         1985  -25.57%\nBenchmarkCallClosure3                2639         1996  -24.37%\nBenchmarkCallClosure4                2754         2005  -27.20%\nBenchmarkComplex128DivNormal         1098         1116   +1.64%\nBenchmarkComplex128DivNisNaN         1028         1038   +0.97%\nBenchmarkComplex128DivDisNaN         1008         1019   +1.09%\nBenchmarkComplex128DivNisInf          659          698   +5.92%\nBenchmarkComplex128DivDisInf          613          618   +0.82%\nBenchmarkMapUint8Get                  554          486  -12.27%\nBenchmarkMapUint16Get                 829          752   -9.29%\nBenchmarkMapUint32Get                 837          789   -5.73%\nBenchmarkMapUint64Get                 905          849   -6.19%\nBenchmarkMapAccess1                   818          772   -5.62%\nBenchmarkMapAccess2a                  833          773   -7.20%\nBenchmarkMapAccess2b                  836          770   -7.89%\nBenchmarkConvT2E                      215          188  -12.56%\nBenchmarkConvT2EBig                  2772         2084  -24.82%\nBenchmarkConvT2I                      662          649   -1.96%\nBenchmarkConvI2E                       42           38   -9.91%\nBenchmarkConvI2I                      490          471   -3.88%\nBenchmarkAssertE2T                     90           72  -19.56%\nBenchmarkAssertE2TBig                  91           72  -20.52%\nBenchmarkAssertE2I                    515          495   -3.88%\nBenchmarkAssertI2T                     98           75  -23.05%\nBenchmarkAssertI2I                    516          499   -3.29%\nBenchmarkAssertI2E                     44           38  -13.74%\nBenchmarkAssertE2E                     42           41   -2.11%\nBenchmarkFinalizer                   3893         3537   -9.14%\nBenchmarkFinalizerRun              141796       107644  -24.09%\nBenchmarkStackGrowth                 7469         7250   -2.93%\nBenchmarkSyscall                      243          208  -14.40%\nBenchmarkSyscallWork                 9242         9339   +1.05%\nBenchmarkIfaceCmp100                 1971         1966   -0.25%\nBenchmarkIfaceCmpNil100              1560         1718  +10.13%",
			"disapproval": false,
			"date": "2012-05-15 02:56:12.448012",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, May 17, 2012 at 1:48 AM, Russ Cox <rsc@golang.org> wrote:\r\n>\r\n> int add(int *x) {\r\n>        int a, b, c, d, e, f, g, h, i, j;\r\n>\r\n>        a = x[0];\r\n>        b = x[1];\r\n>        c = x[2];\r\n>        d = x[3];\r\n>        e = x[4];\r\n>        f = x[5];\r\n>        g = x[6];\r\n>        h = x[7];\r\n>        i = x[8];\r\n>        j = x[9];\r\n>        return a + b + c + d + e + f + g + h + i + j;\r\n> }\r\n>\r\nIt doesn't use R9 or R10:\r\nminux@omap4460:~/go$ pkg/tool/linux_arm/5c -S 5c.c\r\nTEXT add+0(SB),0,$40-4\r\n MOVW x+0(FP),R2\r\nMOVW 0(R2),R1\r\n MOVW R1,a-4(SP)\r\nMOVW 4(R2),R1\r\n MOVW R1,b-8(SP)\r\nMOVW 8(R2),R1\r\n MOVW R1,c-12(SP)\r\nMOVW 12(R2),R8\r\n MOVW 16(R2),R7\r\nMOVW 20(R2),R6\r\n MOVW 24(R2),R5\r\nMOVW 28(R2),R4\r\n MOVW 32(R2),R3\r\nMOVW 36(R2),R2\r\n MOVW a-4(SP),R0\r\nMOVW b-8(SP),R1\r\n ADD R1,R0\r\nMOVW c-12(SP),R1\r\n ADD R1,R0\r\nADD R8,R0\r\n ADD R7,R0\r\nADD R6,R0\r\n ADD R5,R0\r\nADD R4,R0\r\n ADD R3,R0\r\nADD R2,R0\r\n RET ,\r\nRET ,\r\n END ,\r\nminux@omap4460:~/go$ pkg/tool/linux_arm/5c -S -N 5c.c\r\nTEXT add+0(SB),0,$40-4\r\n MOVW x+0(FP),R1\r\nMOVW 0(R1),R1\r\n MOVW R1,a-4(SP)\r\nMOVW x+0(FP),R1\r\n MOVW 4(R1),R1\r\nMOVW R1,b-8(SP)\r\n MOVW x+0(FP),R1\r\nMOVW 8(R1),R1\r\n MOVW R1,c-12(SP)\r\nMOVW x+0(FP),R1\r\n MOVW 12(R1),R1\r\nMOVW R1,d-16(SP)\r\n MOVW x+0(FP),R1\r\nMOVW 16(R1),R1\r\n MOVW R1,e-20(SP)\r\nMOVW x+0(FP),R1\r\n MOVW 20(R1),R1\r\nMOVW R1,f-24(SP)\r\n MOVW x+0(FP),R1\r\nMOVW 24(R1),R1\r\n MOVW R1,g-28(SP)\r\nMOVW x+0(FP),R1\r\n MOVW 28(R1),R1\r\nMOVW R1,h-32(SP)\r\n MOVW x+0(FP),R1\r\nMOVW 32(R1),R1\r\n MOVW R1,i-36(SP)\r\nMOVW x+0(FP),R1\r\n MOVW 36(R1),R1\r\nMOVW R1,j-40(SP)\r\n MOVW a-4(SP),R0\r\nMOVW b-8(SP),R1\r\n ADD R1,R0\r\nMOVW c-12(SP),R1\r\n ADD R1,R0\r\nMOVW d-16(SP),R1\r\n ADD R1,R0\r\nMOVW e-20(SP),R1\r\n ADD R1,R0\r\nMOVW f-24(SP),R1\r\n ADD R1,R0\r\nMOVW g-28(SP),R1\r\n ADD R1,R0\r\nMOVW h-32(SP),R1\r\n ADD R1,R0\r\nMOVW i-36(SP),R1\r\n ADD R1,R0\r\nMOVW j-40(SP),R1\r\n ADD R1,R0\r\nNOP ,F0\r\n RET ,\r\nNOP ,R0\r\n NOP ,F0\r\nRET ,\r\n END ,\r\n\r\nvanilla '5c -S' produces the same version as above (5c.patched -S -N).\r\n",
			"disapproval": false,
			"date": "2012-05-16 18:06:21.453154",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-05-16 17:32:15.792168",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Have you verified that the optimizer no longer smashes R8 when running\r\nout of registers?\r\n",
			"disapproval": false,
			"date": "2012-05-16 17:33:22.737902",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is a RFC code review.\r\n\r\nAlthough all.bash passed with this CL applied, I would like to ask if there\r\nis any more\r\ntest for 5c.\r\n\r\nAny suggestion welcome.\r\n",
			"disapproval": false,
			"date": "2012-05-16 17:34:45.860665",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, May 16, 2012 at 1:38 PM, minux <minux.ma@gmail.com> wrote:\r\n> It uses R8, but IFAIK, we only need to preserve R9/R10/SP/LR/PC across\r\n> function calls, isn't it?\r\n\r\nIt's likely the comment is wrong and means R9/R10.  CL 204064 both\r\ndisabled the optimizer and attempted to fix it.  I'm not sure why it\r\nwasn't one or the other.\r\n\r\nWhat does 5c -S do for\r\n\r\nint add(int *x) {\r\n\tint a, b, c, d, e, f, g, h, i, j;\r\n\t\r\n\ta = x[0];\r\n\tb = x[1];\r\n\tc = x[2];\r\n\td = x[3];\r\n\te = x[4];\r\n\tf = x[5];\r\n\tg = x[6];\r\n\th = x[7];\r\n\ti = x[8];\r\n\tj = x[9];\r\n\treturn a + b + c + d + e + f + g + h + i + j;\r\n}\r\n\r\nWhen using 6c -S it uses 10 registers, which is more than the ARM has\r\navailable.  If 5c -S avoids using R9 and R10 for this program then I'm\r\nhappy.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-16 17:48:28.193466",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n",
			"disapproval": false,
			"date": "2012-05-16 18:26:14.843528",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=4073e93209fb ***\n\ncmd/5c: re-enable regopt()\n        After CL 6185047, ./all.bash passed.\n\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkAppend                      5558         4894  -11.95%\nBenchmarkAppendSpecialCase           5242         4572  -12.78%\nBenchmarkSelectUncontended           3719         2821  -24.15%\nBenchmarkSelectContended             3776         2832  -25.00%\nBenchmarkSelectNonblock              1030         1089   +5.73%\nBenchmarkChanUncontended              530          422  -20.38%\nBenchmarkChanContended                534          444  -16.85%\nBenchmarkChanSync                    1613         1492   -7.50%\nBenchmarkChanProdCons0               1520         1351  -11.12%\nBenchmarkChanProdCons10               785          668  -14.90%\nBenchmarkChanProdCons100              564          473  -16.13%\nBenchmarkChanProdConsWork0          11205        10337   -7.75%\nBenchmarkChanProdConsWork10          9806         9567   -2.44%\nBenchmarkChanProdConsWork100         9413         9398   -0.16%\nBenchmarkChanCreation               11687         8715  -25.43%\nBenchmarkChanSem                      553          453  -18.08%\nBenchmarkCallClosure                   22           22   +0.44%\nBenchmarkCallClosure1                  28           28   +0.71%\nBenchmarkCallClosure2                2224         1668  -25.00%\nBenchmarkCallClosure3                2217         1629  -26.52%\nBenchmarkCallClosure4                2240         1684  -24.82%\nBenchmarkComplex128DivNormal          930          912   -1.94%\nBenchmarkComplex128DivNisNaN          862          866   +0.46%\nBenchmarkComplex128DivDisNaN          849          852   +0.35%\nBenchmarkComplex128DivNisInf          556          583   +4.86%\nBenchmarkComplex128DivDisInf          522          512   -1.92%\nBenchmarkConvT2E                      175          159   -9.14%\nBenchmarkConvT2EBig                  2418         1823  -24.61%\nBenchmarkConvT2I                      545          549   +0.73%\nBenchmarkConvI2E                       35           32   -9.58%\nBenchmarkConvI2I                      404          391   -3.22%\nBenchmarkAssertE2T                     75           62  -16.25%\nBenchmarkAssertE2TBig                  76           63  -16.80%\nBenchmarkAssertE2I                    427          409   -4.22%\nBenchmarkAssertI2T                     82           66  -20.29%\nBenchmarkAssertI2I                    430          416   -3.26%\nBenchmarkAssertI2E                     36           32  -12.50%\nBenchmarkAssertE2E                     35           35   +0.57%\nBenchmarkFinalizer                   3224         2941   -8.78%\nBenchmarkFinalizerRun              117392        84772  -27.79%\nBenchmarkStackGrowth                 5267         5930  +12.59%\nBenchmarkSyscall                      191          167  -12.57%\nBenchmarkSyscallWork                 9918         7713  -22.23%\nBenchmarkIfaceCmp100                 1645         1652   +0.43%\nBenchmarkIfaceCmpNil100              1433         1440   +0.49%\n\nR=dave, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6202070",
			"disapproval": false,
			"date": "2012-05-16 18:58:27.118249",
			"approval": false
		}
	],
	"owner_email": "minux.ma@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "minux",
	"subject": "code review 6202070: cmd/5c: re-enable regopt()",
	"created": "2012-05-11 19:20:14.087709",
	"patchsets": [
		1,
		1001,
		2002,
		4002
	],
	"modified": "2012-05-16 18:58:32.415511",
	"closed": true,
	"issue": 6202070
}