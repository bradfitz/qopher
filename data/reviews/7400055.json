{
	"description": "net: fix slow network interface manipulations\n\nThis CL reduces unnecessary network facility lookups introduced\nby recent changes below.\n\nchangeset: 15798:53a4da6a4f4a\nnet: return correct point-to-point interface address on linux\n\nchangeset: 15799:a81ef8e0cc05\nnet: set up IPv6 scoped addressing zone for network facilities\n\nAlso adds a test case for issue\t4839.\n\nBenchmark results on linux/amd64, virtual machine:\nbenchmark                                 old ns/op    new ns/op    delta\nBenchmarkInterfaces-2                         80487        80382   -0.13%\nBenchmarkInterfaceByIndex-2                   72013        71391   -0.86%\nBenchmarkInterfaceByName-2                    79865        80101   +0.30%\nBenchmarkInterfaceAddrs-2                     42071       829677  +1872.09%\nBenchmarkInterfacesAndAddrs-2                 35016       607622  +1635.27%\nBenchmarkInterfacesAndMulticastAddrs-2       169849       169082   -0.45%\nold: 15797:9c3930413c1b, new: tip\n\nBenchmark results on linux/amd64, virtual machine:\nbenchmark                                 old ns/op    new ns/op    delta\nBenchmarkInterfaces-2                         80487        81459   +1.21%\nBenchmarkInterfaceByIndex-2                   72013        71512   -0.70%\nBenchmarkInterfaceByName-2                    79865        80567   +0.88%\nBenchmarkInterfaceAddrs-2                     42071       120108  +185.49%\nBenchmarkInterfacesAndAddrs-2                 35016        33259   -5.02%\nBenchmarkInterfacesAndMulticastAddrs-2       169849        82391  -51.49%\nold: 15797:9c3930413c1b, new: tip+CL7400055\n\nBenchmark results on darwin/amd64:\nbenchmark                                 old ns/op    new ns/op    delta\nBenchmarkInterfaces-2                         34402        34231   -0.50%\nBenchmarkInterfaceByIndex-2                   13192        12956   -1.79%\nBenchmarkInterfaceByName-2                    34791        34388   -1.16%\nBenchmarkInterfaceAddrs-2                     36565        63906  +74.77%\nBenchmarkInterfacesAndAddrs-2                 17497        31068  +77.56%\nBenchmarkInterfacesAndMulticastAddrs-2        25276        66711  +163.93%\nold: 15797:9c3930413c1b, new: tip\n\nBenchmark results on darwin/amd64:\nbenchmark                                 old ns/op    new ns/op    delta\nBenchmarkInterfaces-2                         34402        31854   -7.41%\nBenchmarkInterfaceByIndex-2                   13192        12950   -1.83%\nBenchmarkInterfaceByName-2                    34791        31926   -8.23%\nBenchmarkInterfaceAddrs-2                     36565        42144  +15.26%\nBenchmarkInterfacesAndAddrs-2                 17497        17329   -0.96%\nBenchmarkInterfacesAndMulticastAddrs-2        25276        24870   -1.61%\nold: 15797:9c3930413c1b, new: tip+CL7400055\n\nUpdate issue 4234.\nFixes issue 4839 (again).\nFixes issue 4866.",
	"cc": [
		"golang-dev@googlegroups.com",
		"fullung@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 27, 2013 at 4:38 PM, Mikio Hara <mikioh.mikioh@gmail.com> wrote:\r\n\r\n>> Maybe you need a binary search somewhere.\r\n(snip)\r\n> Does this make sense to you?\r\n\r\nWhat I mean... thanks, will investigate tonight.\r\nWell, does this CL fix your IPoIB lookup problem?\r\n",
			"disapproval": false,
			"date": "2013-02-27 08:45:56.907530",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-02-27 05:29:29.410750",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Some interesting stuff going on...\n\nold: tip, new: tip+CL7400055\nBenchmarkInterfaces-8                       4380009      4936148  +12.70%\nBenchmarkInterfaceByIndex-8                 4529097      5456280  +20.47%\nBenchmarkInterfaceByName-8                  4368222      4181615   -4.27%\nBenchmarkInterfaceAddrs-8                 189645232      4781708  -97.48%\nBenchmarkInterfacesAndAddrs-8             305493996        53603  -99.98%\nBenchmarkInterfacesAndMulticastAddrs-8     16474957        62964  -99.62%\n\nold: 15797:9c3930413c1b, new: tip+CL7400055\n\nBenchmarkInterfaces-8                       4567956      4936148   +8.06%\nBenchmarkInterfaceByIndex-8                 4245916      5456280  +28.51%\nBenchmarkInterfaceByName-8                  4077000      4181615   +2.57%\nBenchmarkInterfaceAddrs-8                     81632      4781708  +5757.64%\nBenchmarkInterfacesAndAddrs-8                 51109        53603   +4.88%\nBenchmarkInterfacesAndMulticastAddrs-8      3869755        62964  -98.37%\n\nThis is a pretty standard server, but it has 20 interfaces that show up in ip link, probably due to some KVM virtual machine stuff.\n\nI'll send you some more details in an email.\n\nMaybe you need a binary search somewhere.\n\nOn 2013/02/27 05:29:29, mikio wrote:\n> Hello mailto:golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go\n\ninterfaceTableCache might not be the best name given the legacy of the previous CL.\n\nAs far as I can see, you're just looking for a type to add byIndex to?\n\nHow about just calling it interfaceTables?",
			"disapproval": false,
			"date": "2013-02-27 07:10:22.765830",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 27, 2013 at 4:10 PM,  <fullung@gmail.com> wrote:\r\n\r\n> This is a pretty standard server, but it has 20 interfaces that show up\r\n> in ip link, probably due to some KVM virtual machine stuff.\r\n>\r\n> I'll send you some more details in an email.\r\n\r\nThanks.\r\n\r\n> Maybe you need a binary search somewhere.\r\n\r\nI suppose that the users use network interface API for fetching\r\nthe kernel state at their applications start point. Then they starts\r\nmaintaining own tables using notifications via netlink or routing\r\nsockets.\r\n\r\nPerhaps we need a helper package to mitigate such boilerplate\r\nkernel communication stuff but it would be go.net/route or similar\r\npackage.\r\n\r\nDoes this make sense to you?\r\n\r\n> interfaceTableCache might not be the best name given the legacy of the\r\n> previous CL.\r\n>\r\n> As far as I can see, you're just looking for a type to add byIndex to?\r\n>\r\n> How about just calling it interfaceTables?\r\n\r\nThanks, I'm not good at naming things.\r\nAt first it was just \"type memo []Interface\".\r\n",
			"disapproval": false,
			"date": "2013-02-27 07:38:20.862190",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello\n\nOn 2013/02/27 07:38:20, mikio wrote:\n> On Wed, Feb 27, 2013 at 4:10 PM,  <mailto:fullung@gmail.com> wrote:\n> > This is a pretty standard server, but it has 20 interfaces that show up\n> > in ip link, probably due to some KVM virtual machine stuff.\n> > I'll send you some more details in an email.\n> Thanks.\n> > Maybe you need a binary search somewhere.\n> I suppose that the users use network interface API for fetching\n> the kernel state at their applications start point. Then they starts\n> maintaining own tables using notifications via netlink or routing\n> sockets.\n\nDo I understand correctly that the old code in 9c3930413c1b somehow avoided ever making the system calls more than once and that the new code makes the system calls each time, but that this avoids all the caching uneasiness from the previous CL?\n\nAs far as I can see, BenchmarkInterfaceAddrs is spending all its time making the system calls, and its ns/op seems to correspond to the kind of timings you get from stracing ip addr, so then although it's much slower than it was, it's as fast as it can be.\n\nIs this right?\n\n> Perhaps we need a helper package to mitigate such boilerplate\n> kernel communication stuff but it would be go.net/route or similar\n> package.\n> \n> Does this make sense to you?\n\nSounds potentially useful. I was just wondering why BenchmarkInterfaceAddrs got so slow, but hopefully what I wrote above explains it.\n\nCheers\n\nAlbert",
			"disapproval": false,
			"date": "2013-02-27 08:44:31.019440",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello\n\nOn 2013/02/27 08:45:56, mikio wrote:\n> On Wed, Feb 27, 2013 at 4:38 PM, Mikio Hara <mailto:mikioh.mikioh@gmail.com> wrote:\n> >> Maybe you need a binary search somewhere.\n> (snip)\n> > Does this make sense to you?\n> What I mean... thanks, will investigate tonight.\n> Well, does this CL fix your IPoIB lookup problem?\n\nI think we've crossed messages.\n\nI think it fixes it and this CL is as fast as it can be (if I understand the problem correctly), so LGTM.\n\nCheers\n\nAlbert",
			"disapproval": false,
			"date": "2013-02-27 08:47:55.065810",
			"approval": true
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=0b4084d8be42 ***\n\nnet: fix slow network interface manipulations\n\nThis CL reduces unnecessary network facility lookups introduced\nby recent changes below.\n\nchangeset: 15798:53a4da6a4f4a\nnet: return correct point-to-point interface address on linux\n\nchangeset: 15799:a81ef8e0cc05\nnet: set up IPv6 scoped addressing zone for network facilities\n\nAlso adds a test case for issue\t4839.\n\nBenchmark results on linux/amd64, virtual machine:\nbenchmark                                 old ns/op    new ns/op    delta\nBenchmarkInterfaces-2                         80487        80382   -0.13%\nBenchmarkInterfaceByIndex-2                   72013        71391   -0.86%\nBenchmarkInterfaceByName-2                    79865        80101   +0.30%\nBenchmarkInterfaceAddrs-2                     42071       829677  +1872.09%\nBenchmarkInterfacesAndAddrs-2                 35016       607622  +1635.27%\nBenchmarkInterfacesAndMulticastAddrs-2       169849       169082   -0.45%\nold: 15797:9c3930413c1b, new: tip\n\nBenchmark results on linux/amd64, virtual machine:\nbenchmark                                 old ns/op    new ns/op    delta\nBenchmarkInterfaces-2                         80487        81459   +1.21%\nBenchmarkInterfaceByIndex-2                   72013        71512   -0.70%\nBenchmarkInterfaceByName-2                    79865        80567   +0.88%\nBenchmarkInterfaceAddrs-2                     42071       120108  +185.49%\nBenchmarkInterfacesAndAddrs-2                 35016        33259   -5.02%\nBenchmarkInterfacesAndMulticastAddrs-2       169849        82391  -51.49%\nold: 15797:9c3930413c1b, new: tip+CL7400055\n\nBenchmark results on darwin/amd64:\nbenchmark                                 old ns/op    new ns/op    delta\nBenchmarkInterfaces-2                         34402        34231   -0.50%\nBenchmarkInterfaceByIndex-2                   13192        12956   -1.79%\nBenchmarkInterfaceByName-2                    34791        34388   -1.16%\nBenchmarkInterfaceAddrs-2                     36565        63906  +74.77%\nBenchmarkInterfacesAndAddrs-2                 17497        31068  +77.56%\nBenchmarkInterfacesAndMulticastAddrs-2        25276        66711  +163.93%\nold: 15797:9c3930413c1b, new: tip\n\nBenchmark results on darwin/amd64:\nbenchmark                                 old ns/op    new ns/op    delta\nBenchmarkInterfaces-2                         34402        31854   -7.41%\nBenchmarkInterfaceByIndex-2                   13192        12950   -1.83%\nBenchmarkInterfaceByName-2                    34791        31926   -8.23%\nBenchmarkInterfaceAddrs-2                     36565        42144  +15.26%\nBenchmarkInterfacesAndAddrs-2                 17497        17329   -0.96%\nBenchmarkInterfacesAndMulticastAddrs-2        25276        24870   -1.61%\nold: 15797:9c3930413c1b, new: tip+CL7400055\n\nUpdate issue 4234.\nFixes issue 4839 (again).\nFixes issue 4866.\n\nR=golang-dev, fullung\nCC=golang-dev\nhttps://codereview.appspot.com/7400055",
			"disapproval": false,
			"date": "2013-02-28 05:58:50.104520",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 27, 2013 at 5:44 PM,  <fullung@gmail.com> wrote:\r\n\r\n> Do I understand correctly that the old code in 9c3930413c1b somehow\r\n> avoided ever making the system calls more than once and that the new\r\n> code makes the system calls each time, but that this avoids all the\r\n> caching uneasiness from the previous CL?\r\n\r\nYes.\r\n\r\n> As far as I can see, BenchmarkInterfaceAddrs is spending all its time\r\n> making the system calls, and its ns/op seems to correspond to the kind\r\n> of timings you get from stracing ip addr, so then although it's much\r\n> slower than it was, it's as fast as it can be.\r\n>\r\n> Is this right?\r\n\r\nRight. Previous InterfaceAddrs doesn't need to lookup interfaces but at tip,\r\na) On linux, it's required to identify whether the address belongs to point-to-\r\npoint link, b) On all platforms supporting IPv6, to identify IPv6 scoped\r\naddressing zone.\r\n\r\n> Sounds potentially useful. I was just wondering why\r\n> BenchmarkInterfaceAddrs got so slow, but hopefully what I wrote above\r\n> explains it.\r\n\r\nThanks. Also I didn't get the same situation you had;\r\n\r\n> old: tip, new: tip+CL7400055\r\n> benchmark                                 old ns/op    new ns/op    delta\r\n> BenchmarkInterfaces-8                       4380009      4936148 +12.70%\r\n> BenchmarkInterfaceByIndex-8                 4529097      5456280 +20.47%\r\n\r\nperhaps, it depends on numbers of CPU core, virtual machine runtime.\r\n",
			"disapproval": false,
			"date": "2013-02-28 01:31:51.937520",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"fullung@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> I think it fixes it and this CL is as fast as it can be (if I understand the\n> problem correctly), so LGTM.\n\nThanks, will submit later.",
			"disapproval": false,
			"date": "2013-02-28 01:33:40.573940",
			"approval": false
		}
	],
	"owner_email": "mikioh.mikioh@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mikio",
	"subject": "code review 7400055: net: fix slow network interface manipulations",
	"created": "2013-02-26 14:06:51.063690",
	"patchsets": [
		1,
		6013,
		21013
	],
	"modified": "2013-02-28 05:58:53.590450",
	"closed": true,
	"issue": 7400055
}