{
	"description": "cmd/cc: reject unions containing pointers\n\nIf a union contains a pointer, it will mess up the garbage collector, causing memory corruption.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"nightlyone@googlemail.com",
		"adg@golang.org",
		"dvyukov@google.com",
		"bradfitz@golang.org",
		"minux.ma@gmail.com",
		"r@golang.org",
		"iant@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"nightlyone@googlemail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "There's no need to because it will reject the inner union when it is parsed.",
			"disapproval": false,
			"date": "2013-04-07 14:54:05.574910",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Nice work. Did you find any more cases that were overlooked ?\r\n\r\nOn Mon, Apr 8, 2013 at 12:02 AM,  <daniel.morsing@gmail.com> wrote:\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> cmd/cc: reject unions containing pointers\r\n>\r\n> If a union contains a pointer, it will mess up the garbage collector,\r\n> causing memory corruption.\r\n>\r\n> Please review this at https://codereview.appspot.com/8469043/\r\n>\r\n> Affected files:\r\n>   M src/cmd/cc/dcl.c\r\n>\r\n>\r\n> Index: src/cmd/cc/dcl.c\r\n> ===================================================================\r\n> --- a/src/cmd/cc/dcl.c\r\n> +++ b/src/cmd/cc/dcl.c\r\n> @@ -554,6 +554,28 @@\r\n>         return new(OLIST, l, r);\r\n>  }\r\n>\r\n> +static int\r\n> +haspointers(Type *t)\r\n> +{\r\n> +       Type *fld;\r\n> +\r\n> +       switch(t->etype) {\r\n> +       case TSTRUCT:\r\n> +               for(fld = t->link; fld != T; fld = fld->down) {\r\n> +                       if(haspointers(fld))\r\n> +                               return 1;\r\n> +               }\r\n> +               return 0;\r\n> +       case TARRAY:\r\n> +               return haspointers(t->link);\r\n> +       case TFUNC:\r\n> +       case TIND:\r\n> +               return 1;\r\n> +       default:\r\n> +               return 0;\r\n> +       }\r\n> +}\r\n> +\r\n>  void\r\n>  sualign(Type *t)\r\n>  {\r\n> @@ -608,6 +630,9 @@\r\n>                                         diag(Z, \"incomplete union element\");\r\n>                         l->offset = 0;\r\n>                         l->shift = 0;\r\n> +                       if(haspointers(l))\r\n> +                               diag(Z, \"unions containing pointers messes\r\n> up the garbage collector\");\r\n> +\r\n>                         o = align(align(0, l, Ael1, &maxal), l, Ael2,\r\n> &maxal);\r\n>                         if(o > w)\r\n>                                 w = o;\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-07 14:04:24.977150",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-04-07 14:02:24.307650",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This will keep us from making such mistakes again.\n\nI'm not too familiar with cc, so I probably missed some cases.",
			"disapproval": false,
			"date": "2013-04-07 14:04:30.748650",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Didn't find any more bugs in $GOROOT.",
			"disapproval": false,
			"date": "2013-04-07 14:09:25.110000",
			"approval": false
		},
		{
			"sender": "nightlyone@googlemail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"nightlyone@googlemail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Just a small nit to catch unions of unions.\n\nhttps://codereview.appspot.com/8469043/diff/5001/src/cmd/cc/dcl.c\nFile src/cmd/cc/dcl.c (right):\n\nhttps://codereview.appspot.com/8469043/diff/5001/src/cmd/cc/dcl.c#newcode563\nsrc/cmd/cc/dcl.c:563: case TSTRUCT:\nHandling TUNION here might be useful, too. \n\nSuch non-sense (union of unions) is AFAICS currently not present in the code to be compiled, but it would avoid regressions.",
			"disapproval": false,
			"date": "2013-04-07 14:35:12.749370",
			"approval": false
		},
		{
			"sender": "nightlyone@googlemail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"nightlyone@googlemail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/07 14:54:05, DMorsing wrote:\n> There's no need to because it will reject the inner union when it is parsed.\n\nah cool :-)",
			"disapproval": false,
			"date": "2013-04-07 14:54:56.916120",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"nightlyone@googlemail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for this change. I manually applied it to rev 7767d71dcc7b (just prior to dmitry's set of CLs) and it correctly identified the issues fixed in changes b127aaab80eb, 86d6b4b66fb6, 915504d8aa44, and 4f3dd44f3eb2.\n\nAlthough necessary, changes 38009b76c220, 8580ea3506e4, and 78a5faa22bbf, were not identified, as they don't relate to unions.",
			"disapproval": false,
			"date": "2013-04-08 05:14:57.326550",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"nightlyone@googlemail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Dangling pointer is going to be hard to identify. The best solution is probably making a macro that frees memory and zeroes the field, and use that consistently.\n\nType punning pointers can probably be detected by making the C compiler more stringent about which type conversions are valid.",
			"disapproval": false,
			"date": "2013-04-08 06:17:45.699900",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you. I wasn't suggesting that you implement this as part of this\r\nCL, more scratching my own itch to see what this tool, and dmitry's\r\nheap checker can do to assist us.\r\n\r\nOn Mon, Apr 8, 2013 at 4:17 PM,  <daniel.morsing@gmail.com> wrote:\r\n> Dangling pointer is going to be hard to identify. The best solution is\r\n> probably making a macro that frees memory and zeroes the field, and use\r\n> that consistently.\r\n>\r\n> Type punning pointers can probably be detected by making the C compiler\r\n> more stringent about which type conversions are valid.\r\n>\r\n> https://codereview.appspot.com/8469043/\r\n",
			"disapproval": false,
			"date": "2013-04-08 06:18:51.432920",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please leave this until after the 1.1 release.\r\n\r\n\r\nOn 8 April 2013 16:18, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> Thank you. I wasn't suggesting that you implement this as part of this\r\n> CL, more scratching my own itch to see what this tool, and dmitry's\r\n> heap checker can do to assist us.\r\n>\r\n> On Mon, Apr 8, 2013 at 4:17 PM,  <daniel.morsing@gmail.com> wrote:\r\n> > Dangling pointer is going to be hard to identify. The best solution is\r\n> > probably making a macro that frees memory and zeroes the field, and use\r\n> > that consistently.\r\n> >\r\n> > Type punning pointers can probably be detected by making the C compiler\r\n> > more stringent about which type conversions are valid.\r\n> >\r\n> > https://codereview.appspot.com/8469043/\r\n>\r\n> --\r\n>\r\n> ---\r\n> You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-08 06:29:42.754240",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"nightlyone@googlemail.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ping",
			"disapproval": false,
			"date": "2013-05-15 12:06:57.295810",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"nightlyone@googlemail.com",
				"adg@golang.org",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It's a better idea to reject such unions only during \"6g -q\" which generates Go definitions.",
			"disapproval": false,
			"date": "2013-05-15 12:36:00.132820",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"nightlyone@googlemail.com",
				"adg@golang.org",
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8469043/diff/5001/src/cmd/cc/dcl.c\nFile src/cmd/cc/dcl.c (right):\n\nhttps://codereview.appspot.com/8469043/diff/5001/src/cmd/cc/dcl.c#newcode634\nsrc/cmd/cc/dcl.c:634: diag(Z, \"unions containing pointers messes up the garbage collector\");\ns/messes/mess/.  or something less colloquial.",
			"disapproval": false,
			"date": "2013-05-15 16:14:37.338260",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"nightlyone@googlemail.com",
				"adg@golang.org",
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/15 12:36:00, dvyukov wrote:\n> It's a better idea to reject such unions only during \"6g -q\" which generates Go\n> definitions.\n\nShould this check be enabled for -Q as well?\n\nI don't think it's necessary to make the distinction though. Do we have any code that we run through 6c but don't run through with -q?",
			"disapproval": false,
			"date": "2013-05-16 15:31:33.396640",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, May 16, 2013 at 11:31 PM, <daniel.morsing@gmail.com> wrote:\r\n\r\n> On 2013/05/15 12:36:00, dvyukov wrote:\r\n>\r\n>> It's a better idea to reject such unions only during \"6g -q\" which\r\n>>\r\n> generates Go\r\n>\r\n>> definitions.\r\n>>\r\n>\r\n> Should this check be enabled for -Q as well?\r\n>\r\n> I don't think it's necessary to make the distinction though. Do we have\r\n> any code that we run through 6c but don't run through with -q?\r\n\r\n6c -F -V -w -I $WORK -I $GOROOT/pkg/linux_amd64 -D GOOS_linux -D\r\nGOARCH_amd64 \\\r\n-o $WORK/alg.o $GOROOT/src/pkg/runtime/alg.c\r\n\r\nin fact, only 4 runtime files are passed through '6c -q': proc.c, iface.c,\r\nhashmap.c and parfor.c\r\n",
			"disapproval": false,
			"date": "2013-05-16 16:59:37.810540",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"nightlyone@googlemail.com",
				"adg@golang.org",
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/8469043/diff/5001/src/cmd/cc/dcl.c\nFile src/cmd/cc/dcl.c (right):\n\nhttps://codereview.appspot.com/8469043/diff/5001/src/cmd/cc/dcl.c#newcode634\nsrc/cmd/cc/dcl.c:634: diag(Z, \"unions containing pointers messes up the garbage collector\");\nOn 2013/05/15 16:14:37, bradfitz wrote:\n> s/messes/mess/.  or something less colloquial.\n\nDone.",
			"disapproval": false,
			"date": "2013-05-17 17:13:05.855300",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"nightlyone@googlemail.com",
				"adg@golang.org",
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-05-22 01:59:19.909190",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm conflicted about this. It seems too special-purpose and specific\r\nto Go, but then that's what this compiler supports. The message even\r\nmentions a garbage collector.\r\n\r\nIt doesn't pass the smell test for me.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-05-22 04:07:21.405090",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"nightlyone@googlemail.com",
				"adg@golang.org",
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"r@golang.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/22 04:07:21, r wrote:\n> I'm conflicted about this. It seems too special-purpose and specific\n> to Go, but then that's what this compiler supports. The message even\n> mentions a garbage collector.\n> \n> It doesn't pass the smell test for me.\n\nThis message is only printed when using -q or -Q, which are Go specific options.\n\n  -Q\tprint exported Go definitions\n  -q\tprint Go definitions\n\nI think this is a good idea to avoid future problems.",
			"disapproval": false,
			"date": "2013-05-22 04:31:07.580530",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"nightlyone@googlemail.com",
				"adg@golang.org",
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"r@golang.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\ni'm blind",
			"disapproval": false,
			"date": "2013-05-22 04:52:57.072140",
			"approval": true
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"nightlyone@googlemail.com",
				"adg@golang.org",
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"minux.ma@gmail.com",
				"r@golang.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=ca0067091b83 ***\n\ncmd/cc: reject unions containing pointers\n\nIf a union contains a pointer, it will mess up the garbage collector, causing memory corruption.\n\nR=golang-dev, dave, nightlyone, adg, dvyukov, bradfitz, minux.ma, r, iant\nCC=golang-dev\nhttps://codereview.appspot.com/8469043",
			"disapproval": false,
			"date": "2013-05-22 19:13:36.244730",
			"approval": false
		}
	],
	"owner_email": "daniel.morsing@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "DMorsing",
	"subject": "code review 8469043: cmd/cc: reject unions containing pointers",
	"created": "2013-04-07 13:57:59.839450",
	"patchsets": [
		1,
		2001,
		5001,
		22001,
		32001
	],
	"modified": "2013-05-22 19:13:38.450000",
	"closed": true,
	"issue": 8469043
}