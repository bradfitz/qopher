{
	"description": "math/big: simplify fast string conversion\n\n- use slice ops for convertWords instead of lo/hi boundaries\n- always compute leading zeroes (simplifies logic significantly),\n  but remove them once, at the end (since leafSize is small, the\n  worst-case scenario is not adding significant overhead)\n- various comment cleanups (specifically, replaced direct -> iterative,\n  and indirect -> recursive)\n- slightly faster overall for -bench=String\n\n(This CL incorporates the changes re: my comments to CL 5418047\nhttp://codereview.appspot.com/5418047/ )\n\nbenchmark                          old ns/op    new ns/op    delta\nbig.BenchmarkString10Base2               519          527   +1.54%\nbig.BenchmarkString100Base2             2279         2158   -5.31%\nbig.BenchmarkString1000Base2           18475        17323   -6.24%\nbig.BenchmarkString10000Base2         178248       166219   -6.75%\nbig.BenchmarkString100000Base2       1548494      1431587   -7.55%\nbig.BenchmarkString10Base8               415          422   +1.69%\nbig.BenchmarkString100Base8             1025          978   -4.59%\nbig.BenchmarkString1000Base8            6822         6428   -5.78%\nbig.BenchmarkString10000Base8          64598        61065   -5.47%\nbig.BenchmarkString100000Base8        593788       549150   -7.52%\nbig.BenchmarkString10Base10              654          645   -1.38%\nbig.BenchmarkString100Base10            1863         1835   -1.50%\nbig.BenchmarkString1000Base10          12099        11981   -0.98%\nbig.BenchmarkString10000Base10         57601        56888   -1.24%\nbig.BenchmarkString100000Base10     20123120     19827890   -1.47%\nbig.BenchmarkString10Base16              358          362   +1.12%\nbig.BenchmarkString100Base16             815          776   -4.79%\nbig.BenchmarkString1000Base16           4710         4421   -6.14%\nbig.BenchmarkString10000Base16         43938        40968   -6.76%\nbig.BenchmarkString100000Base16       406307       373930   -7.97%",
	"cc": [
		"michael.jones@gmail.com",
		"mtj@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"michael.jones@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello michael.jones@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-27 22:32:55.308406",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It is so great to have the real tree in sync with my tree at last. Thank\nyou so much! Now, the beauty of the algorithmic advantage is clear:\n\nbig.BenchmarkScan10Base2-8 5000000       726 ns/op\nbig.BenchmarkScan100Base2-8  500000      4936 ns/op\nbig.BenchmarkScan1000Base2-8   50000     49706 ns/op\nbig.BenchmarkScan10000Base2-8    5000    712824 ns/op\nbig.BenchmarkScan100000Base2-8     100  29224220 ns/op\nbig.BenchmarkScan10Base8-8 5000000       410 ns/op\nbig.BenchmarkScan100Base8-8 1000000      1968 ns/op\nbig.BenchmarkScan1000Base8-8  100000     19325 ns/op\nbig.BenchmarkScan10000Base8-8    5000    411760 ns/op\nbig.BenchmarkScan100000Base8-8     100  26221860 ns/op\nbig.BenchmarkScan10Base10-8 5000000       399 ns/op\nbig.BenchmarkScan100Base10-8 1000000      1850 ns/op\nbig.BenchmarkScan1000Base10-8  100000     18065 ns/op\nbig.BenchmarkScan10000Base10-8    5000    397445 ns/op\nbig.BenchmarkScan100000Base10-8     100  26036990 ns/op\nbig.BenchmarkScan10Base16-8 5000000       406 ns/op\nbig.BenchmarkScan100Base16-8 1000000      1949 ns/op\nbig.BenchmarkScan1000Base16-8  100000     19680 ns/op\nbig.BenchmarkScan10000Base16-8    5000    421560 ns/op\nbig.BenchmarkScan100000Base16-8     100  27486760 ns/op\nbig.BenchmarkString10Base2-8 5000000       581 ns/op\nbig.BenchmarkString100Base2-8 1000000      2385 ns/op\nbig.BenchmarkString1000Base2-8  100000     16632 ns/op\nbig.BenchmarkString10000Base2-8   10000    163193 ns/op\nbig.BenchmarkString100000Base2-8    1000   1491703 ns/op\nbig.BenchmarkString10Base8-8 5000000       451 ns/op\nbig.BenchmarkString100Base8-8 1000000      1160 ns/op\nbig.BenchmarkString1000Base8-8  500000      6631 ns/op\nbig.BenchmarkString10000Base8-8   50000     60120 ns/op\nbig.BenchmarkString100000Base8-8    5000    562413 ns/op\nbig.BenchmarkString10Base10-8 5000000       732 ns/op\nbig.BenchmarkString100Base10-8 1000000      2120 ns/op\nbig.BenchmarkString1000Base10-8  200000     12699 ns/op\nbig.BenchmarkString10000Base10-8   50000     59014 ns/op\nbig.BenchmarkString100000Base10-8     100  18520420 ns/op\nbig.BenchmarkString10Base16-8 5000000       395 ns/op\nbig.BenchmarkString100Base16-8 2000000       942 ns/op\nbig.BenchmarkString1000Base16-8  500000      4816 ns/op\nbig.BenchmarkString10000Base16-8   50000     41675 ns/op\nbig.BenchmarkString100000Base16-8    5000    383506 ns/op\n\nThe power of two handling keeps this version (the July version) much faster\nthan the scan code, and the big-divisor code keeps the base ten path\ncompetitive for smaller values and slightly faster >1000 digits. This is\ngood for div-based rather than mul-based situations.\n\nSo pleased. Will look at the proposed changes soon. One, the use of slice\ncommunication rather than hi-lo is certainly how I designed it and how it\nworked in the development process, up until the final performance tuning in\nBudapest. I don't remember the cost, but the slice version was a few\npercent slower. Since low performance is death by a thousand cuts, I made\nthe change regretfully. I liked showing the role of slices in an\nalgorithmic setting and regretted taking that out.\n\nMichael\n\nOn Sun, Nov 27, 2011 at 2:32 PM, <gri@golang.org> wrote:\n\n> Reviewers: mtj,\n>\n> Message:\n> Hello michael.jones@gmail.com (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> math/big: simplify fast string conversion\n>\n> - use slice ops for convertWords instead of lo/hi boundaries\n> - always compute leading zeroes (simplifies logic significantly),\n>  but remove them once, at the end (since leafSize is small, the\n>  worst-case scenario is not adding significant overhead)\n> - various comment cleanups (specifically, replaced direct -> iterative,\n>  and indirect -> recursive)\n> - no significant performance changes with -bench=String\n>\n> Please review this at http://codereview.appspot.com/**5432090/<http://codereview.appspot.com/5432090/>\n>\n> Affected files:\n>  M src/pkg/math/big/nat.go\n>\n>\n>\n\n\n-- \nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\n650-335-5765\n",
			"disapproval": false,
			"date": "2011-11-28 16:11:58.649570",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"michael.jones@gmail.com",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2011-12-23 07:11:24.398064",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Not really. Please ignore.\n- gri\n\nOn Thu, Dec 22, 2011 at 11:11 PM,  <gri@golang.org> wrote:\n> *** Abandoned ***\n>\n> http://codereview.appspot.com/5432090/\n",
			"disapproval": false,
			"date": "2011-12-23 07:15:48.086967",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"michael.jones@gmail.com",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello michael.jones@gmail.com, mtj@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-23 07:23:01.953859",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ok!\n\nOn Thu, Dec 22, 2011 at 11:23 PM, <gri@golang.org> wrote:\n\n> Hello michael.jones@gmail.com, mtj@google.com (cc:\n> golang-dev@googlegroups.com),\n>\n> Please take another look.\n>\n>\n> http://codereview.appspot.com/**5432090/<http://codereview.appspot.com/5432090/>\n>\n\n\n\n-- \nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\n650-335-5765\n",
			"disapproval": false,
			"date": "2011-12-23 16:53:28.812121",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"gri@golang.org",
				"michael.jones@gmail.com",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "no changes",
			"disapproval": false,
			"date": "2012-01-07 01:20:41.403672",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "old:\nbig.BenchmarkString10Base10-4 5000000       697 ns/op\nbig.BenchmarkString100Base10-4 1000000      1931 ns/op\nbig.BenchmarkString1000Base10-4  100000     13368 ns/op\nbig.BenchmarkString10000Base10-4   50000     66668 ns/op\nbig.BenchmarkString100000Base10-4     100  21395320 ns/op\n\nnew:\nbig.BenchmarkString10Base10-4 5000000       776 ns/op\nbig.BenchmarkString100Base10-4 1000000      2079 ns/op\nbig.BenchmarkString1000Base10-4  100000     13240 ns/op\nbig.BenchmarkString10000Base10-4   20000     73111 ns/op\nbig.BenchmarkString100000Base10-4     100  20972350 ns/op\n\ntiming ratios (delta time old to new):\n+11.33%\n+7.66%\n-0.96% (faster)\n+9.66%\n-1.98% (faster)\n\nHmmm....\n\nOn Fri, Jan 6, 2012 at 5:20 PM, <mtj@google.com> wrote:\n\n> no changes\n>\n> http://codereview.appspot.com/**5432090/<http://codereview.appspot.com/5432090/>\n>\n\n\n\n-- \nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\n650-335-5765\n",
			"disapproval": false,
			"date": "2012-01-07 01:36:53.284100",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"gri@golang.org",
				"michael.jones@gmail.com",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-01-07 04:23:08.095373",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"michael.jones@gmail.com",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=78944b6b971c ***\n\nmath/big: simplify fast string conversion\n\n- use slice ops for convertWords instead of lo/hi boundaries\n- always compute leading zeroes (simplifies logic significantly),\n  but remove them once, at the end (since leafSize is small, the\n  worst-case scenario is not adding significant overhead)\n- various comment cleanups (specifically, replaced direct -> iterative,\n  and indirect -> recursive)\n- slightly faster overall for -bench=String\n\n(This CL incorporates the changes re: my comments to CL 5418047\nhttp://codereview.appspot.com/5418047/ )\n\nbenchmark                          old ns/op    new ns/op    delta\nbig.BenchmarkString10Base2               519          527   +1.54%\nbig.BenchmarkString100Base2             2279         2158   -5.31%\nbig.BenchmarkString1000Base2           18475        17323   -6.24%\nbig.BenchmarkString10000Base2         178248       166219   -6.75%\nbig.BenchmarkString100000Base2       1548494      1431587   -7.55%\nbig.BenchmarkString10Base8               415          422   +1.69%\nbig.BenchmarkString100Base8             1025          978   -4.59%\nbig.BenchmarkString1000Base8            6822         6428   -5.78%\nbig.BenchmarkString10000Base8          64598        61065   -5.47%\nbig.BenchmarkString100000Base8        593788       549150   -7.52%\nbig.BenchmarkString10Base10              654          645   -1.38%\nbig.BenchmarkString100Base10            1863         1835   -1.50%\nbig.BenchmarkString1000Base10          12099        11981   -0.98%\nbig.BenchmarkString10000Base10         57601        56888   -1.24%\nbig.BenchmarkString100000Base10     20123120     19827890   -1.47%\nbig.BenchmarkString10Base16              358          362   +1.12%\nbig.BenchmarkString100Base16             815          776   -4.79%\nbig.BenchmarkString1000Base16           4710         4421   -6.14%\nbig.BenchmarkString10000Base16         43938        40968   -6.76%\nbig.BenchmarkString100000Base16       406307       373930   -7.97%\n\nR=michael.jones, mtj\nCC=golang-dev\nhttp://codereview.appspot.com/5432090",
			"disapproval": false,
			"date": "2012-01-09 19:20:13.809708",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 5432090: math/big: simplify fast string conversion",
	"created": "2011-11-27 22:04:45.056155",
	"patchsets": [
		1,
		2001,
		3002,
		1002,
		3003,
		1004,
		8002,
		10001,
		15001,
		20003
	],
	"modified": "2012-01-09 19:20:15.508737",
	"closed": true,
	"issue": 5432090
}