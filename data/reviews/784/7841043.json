{
	"description": "cmd/gc: disallow fallthrough in final case of switch\n\nSmall change to cmd/gc to catch a \"fallthrough\" in the final case of a switch.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org",
		"mtj@google.com"
	],
	"reviewers": [
		"dave@cheney.net"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"tylerbunnell@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but please put the test file back\n\nSorry, I meant 'don't feel bad about needing to create a new test file'. I didn't mean to remove it.",
			"disapproval": false,
			"date": "2013-03-15 03:43:34.284470",
			"approval": true
		},
		{
			"sender": "tylerbunnell@gmail.com",
			"recipients": [
				"tylerbunnell@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, mtj@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-15 03:36:28.326950",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"tylerbunnell@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-03-15 04:34:55.563350",
			"approval": true
		},
		{
			"sender": "tylerbunnell@gmail.com",
			"recipients": [
				"tylerbunnell@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-03-15 02:13:19.421720",
			"approval": false
		},
		{
			"sender": "tylerbunnell@gmail.com",
			"recipients": [
				"tylerbunnell@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "switch4.go was created because the new compiler error is not generated unless it is the only error present. This is consistent with the type switch fallthrough error. It also is only generated if no other errors are present.\n\nIs this desired behavior, or should this be altered to always generate the error regardless of whether other errors are present?",
			"disapproval": false,
			"date": "2013-03-15 02:43:41.938360",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Mar 14, 2013 at 11:31 PM, Michael Jones <mtj@google.com> wrote:\r\n\r\n> It seems odd that you can't fallthrough in the last case (a noop) but you\r\n> must put the extra comma on the final element of an initializer list.\r\n>\r\n\r\nFallthrough means \"jump to the next case, instead of the default implicit\r\nbreak out of the switch\". It's confusing to see fallthrough in the final\r\ncase, because there is no next case to jump to. The only possible meaning\r\nis to do what would happen without the fallthrough statement, in which case\r\nwhat's the purpose in writing the fallthrough? It's more likely a mistake\r\nor a misunderstanding of the semantics. The spec has always used the next\r\ncase language, so this is fixing a bug in the compiler rather than changing\r\nthe language.\r\n\r\nChanging things to allow this special case \"fallthrough that is really a\r\nbreak\" would require corresponding special cases in the new return rules (\r\ngolang.org/s/go11return).\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-03-15 03:35:31.609390",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"tylerbunnell@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for fixing this. Looks good, just the minor nit below.\n\nDon't worry about needing an extra test file.\nWe let the compiler generate errors when it likes. There are a few phases and errors in one stop future phases from running, so you don't necessarily get all the errors you might, but that's okay. You also don't get as many unnecessary \nerrors that might arise from the subsequent phases being confused.\n\nhttps://codereview.appspot.com/7841043/diff/5001/src/cmd/gc/swt.c\nFile src/cmd/gc/swt.c (right):\n\nhttps://codereview.appspot.com/7841043/diff/5001/src/cmd/gc/swt.c#newcode325\nsrc/cmd/gc/swt.c:325: if(l->next == NULL) {\nplease use nil instead of NULL, to match the surrounding code (for example lines 292 and 284)",
			"disapproval": false,
			"date": "2013-03-15 03:26:57.231110",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It seems odd that you can't fallthrough in the last case (a noop) but you\r\nmust put the extra comma on the final element of an initializer list.\r\n\r\n\r\nOn Thu, Mar 14, 2013 at 8:26 PM, <rsc@golang.org> wrote:\r\n\r\n> Thanks for fixing this. Looks good, just the minor nit below.\r\n>\r\n> Don't worry about needing an extra test file.\r\n> We let the compiler generate errors when it likes. There are a few\r\n> phases and errors in one stop future phases from running, so you don't\r\n> necessarily get all the errors you might, but that's okay. You also\r\n> don't get as many unnecessary\r\n> errors that might arise from the subsequent phases being confused.\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.**com/7841043/diff/5001/src/cmd/**gc/swt.c<https://codereview.appspot.com/7841043/diff/5001/src/cmd/gc/swt.c>\r\n> File src/cmd/gc/swt.c (right):\r\n>\r\n> https://codereview.appspot.**com/7841043/diff/5001/src/cmd/**\r\n> gc/swt.c#newcode325<https://codereview.appspot.com/7841043/diff/5001/src/cmd/gc/swt.c#newcode325>\r\n> src/cmd/gc/swt.c:325: if(l->next == NULL) {\r\n> please use nil instead of NULL, to match the surrounding code (for\r\n> example lines 292 and 284)\r\n>\r\n>\r\n> https://codereview.appspot.**com/7841043/<https://codereview.appspot.com/7841043/>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n\r\n\r\n-- \r\nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n650-335-5765\r\n",
			"disapproval": false,
			"date": "2013-03-15 03:31:38.734000",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Fixes issue 4924.\r\n\r\nOn Fri, Mar 15, 2013 at 3:35 PM,  <rsc@golang.org> wrote:\r\n> *** Submitted as\r\n> https://code.google.com/p/go/source/detail?r=ea7a6c956f6a ***\r\n>\r\n>\r\n> cmd/gc: disallow fallthrough in final case of switch\r\n>\r\n> Small change to cmd/gc to catch a \"fallthrough\" in the final case of a\r\n> switch.\r\n>\r\n> R=golang-dev, rsc, mtj\r\n> CC=golang-dev\r\n> https://codereview.appspot.com/7841043\r\n>\r\n> Committer: Russ Cox <rsc@golang.org>\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.com/7841043/\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-15 04:43:45.166120",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I thought *fallthrough* meant \"don't implicitly break at a next\r\n*case*statement.\" Clearly the semantics are the same, but my reading\r\ndoes not\r\nneed a subsequent *case* to make sense. This is pedantic though, a final\r\ncase with a *fallthrough* is very likely a logic mistake. (Though not\r\nnecessarially.)\r\n\r\nMichael\r\n\r\nP.S. Admission from my wayward past. More than a decade ago, maybe two\r\ndecades ago, the State where I lived passed a law to make it illegal to\r\n\"introduce leaded gasoline into vehicles marked 'unleadded fuel only.'\" I\r\ntook great objection to this pointing out that it should only be illegal to\r\nrun an engine in such an improperly fueled vehicle. I asserted that my\r\nwanting, for example, to tow a vehicle with an empty unleaded tank to the\r\nstation; fill it with leaded fuel; tow it home and drain the fuel into an\r\nappropriate engine for leaded fuel (say, a lawn mower fueling station);\r\nclean the tank, then arrange for unleaded fuel for that vehicle should be\r\nlegal under any sense of the law. Further, such a law that regulates uses\r\noutside any possible realm of applicability (\"running an engine on wrong\r\nfuel\") is overbroad and must be struck down. Perhaps my\r\n*fallthrough*observation is of the same devilish nature. ;-)\r\n\r\n\r\nOn Thu, Mar 14, 2013 at 8:35 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> On Thu, Mar 14, 2013 at 11:31 PM, Michael Jones <mtj@google.com> wrote:\r\n>\r\n>> It seems odd that you can't fallthrough in the last case (a noop) but you\r\n>> must put the extra comma on the final element of an initializer list.\r\n>>\r\n>\r\n> Fallthrough means \"jump to the next case, instead of the default implicit\r\n> break out of the switch\". It's confusing to see fallthrough in the final\r\n> case, because there is no next case to jump to. The only possible meaning\r\n> is to do what would happen without the fallthrough statement, in which case\r\n> what's the purpose in writing the fallthrough? It's more likely a mistake\r\n> or a misunderstanding of the semantics. The spec has always used the next\r\n> case language, so this is fixing a bug in the compiler rather than changing\r\n> the language.\r\n>\r\n> Changing things to allow this special case \"fallthrough that is really a\r\n> break\" would require corresponding special cases in the new return rules (\r\n> golang.org/s/go11return).\r\n>\r\n> Russ\r\n>\r\n\r\n\r\n\r\n-- \r\nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n650-335-5765\r\n",
			"disapproval": false,
			"date": "2013-03-15 03:45:13.101420",
			"approval": false
		},
		{
			"sender": "tylerbunnell@gmail.com",
			"recipients": [
				"tylerbunnell@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/15 03:43:34, rsc wrote:\n> LGTM but please put the test file back\n> \n> Sorry, I meant 'don't feel bad about needing to create a new test file'. I\n> didn't mean to remove it.\n\nWhoops! I completely misunderstood. :)",
			"disapproval": false,
			"date": "2013-03-15 03:44:14.216360",
			"approval": false
		},
		{
			"sender": "tylerbunnell@gmail.com",
			"recipients": [
				"tylerbunnell@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, mtj@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-15 03:48:23.120180",
			"approval": false
		},
		{
			"sender": "tylerbunnell@gmail.com",
			"recipients": [
				"tylerbunnell@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/15 03:43:34, rsc wrote:\n> LGTM but please put the test file back\n> \n> Sorry, I meant 'don't feel bad about needing to create a new test file'. I\n> didn't mean to remove it.\n\nDone.",
			"disapproval": false,
			"date": "2013-03-15 03:57:53.508090",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"tylerbunnell@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"mtj@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=ea7a6c956f6a ***\n\ncmd/gc: disallow fallthrough in final case of switch\n\nSmall change to cmd/gc to catch a \"fallthrough\" in the final case of a switch.\n\nR=golang-dev, rsc, mtj\nCC=golang-dev\nhttps://codereview.appspot.com/7841043\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2013-03-15 04:35:14.982760",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "thanks, done\r\n",
			"disapproval": false,
			"date": "2013-03-15 05:11:18.479390",
			"approval": false
		}
	],
	"owner_email": "tylerbunnell@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "TylerB",
	"subject": "code review 7841043: cmd/gc: disallow fallthrough in final case of switch",
	"created": "2013-03-15 02:12:39.785530",
	"patchsets": [
		1,
		2001,
		5001,
		13001,
		9003
	],
	"modified": "2013-03-20 23:23:37.539140",
	"closed": true,
	"issue": 7841043
}