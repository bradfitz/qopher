{
	"description": "runtime/gc: Run garbage collector on g0 stack\ninstead of regular g stack. We do this so that the g stack\nwe're currently running on is no longer changing.  Cuts\nthe root set down a bit (g0 stacks are not scanned, and\nwe don't need to scan gc's internal state).  Also an\nenabler for copyable stacks.",
	"cc": [
		"golang-dev@googlegroups.com",
		"cshapiro@google.com",
		"khr@google.com",
		"0xe2.0x9a.0x9b@gmail.com",
		"dvyukov@google.com",
		"rsc@golang.org",
		"iant@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "khr@golang.org",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://khr%40golang.org@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-05-29 22:49:01.269330",
			"approval": false
		},
		{
			"sender": "cshapiro@google.com",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"cshapiro@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "looks pretty good, just a few questions and comments\n\nhttps://codereview.appspot.com/9754044/diff/8001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/9754044/diff/8001/src/pkg/runtime/mgc0.c#newcode1902\nsrc/pkg/runtime/mgc0.c:1902: int64 t0;\nCan we document this member as being the start time of the GC?  (Comment, name change, whatever you would like.)  The name 'force' has meaning in the context of the garbage collection, but t0 is really local to the gc function.\n\nhttps://codereview.appspot.com/9754044/diff/8001/src/pkg/runtime/mgc0.c#newcode1977\nsrc/pkg/runtime/mgc0.c:1977: if(g == m->g0) {\nGiven the lone goto, is there any reason not to make this a do-while loop?\n\nhttps://codereview.appspot.com/9754044/diff/8001/src/pkg/runtime/mgc0.c#newcode1994\nsrc/pkg/runtime/mgc0.c:1994: // now that gc is done and we're back on g stack, run some finalizers\nMust this code be executed on the G stack?\n\nhttps://codereview.appspot.com/9754044/diff/8001/src/pkg/runtime/mgc0.c#newcode2010\nsrc/pkg/runtime/mgc0.c:2010: static void\nMove this up to avoid the additional forward declaration of mgc on line 1906?",
			"disapproval": false,
			"date": "2013-05-29 23:56:58.312360",
			"approval": false
		},
		{
			"sender": "cshapiro@google.com",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"cshapiro@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9754044/diff/8001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/9754044/diff/8001/src/pkg/runtime/mgc0.c#newcode1458\nsrc/pkg/runtime/mgc0.c:1458: // Scanning our own stack: start at &gp.\nIs this case now obsolete?  Can we get away with the code on lines 1465 to 1473?",
			"disapproval": false,
			"date": "2013-05-30 00:07:21.582190",
			"approval": false
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, May 29, 2013 at 5:07 PM, <cshapiro@google.com> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/9754044/diff/8001/src/pkg/**\r\n> runtime/mgc0.c<https://codereview.appspot.com/9754044/diff/8001/src/pkg/runtime/mgc0.c>\r\n> File src/pkg/runtime/mgc0.c (right):\r\n>\r\n> https://codereview.appspot.**com/9754044/diff/8001/src/pkg/**\r\n> runtime/mgc0.c#newcode1458<https://codereview.appspot.com/9754044/diff/8001/src/pkg/runtime/mgc0.c#newcode1458>\r\n> src/pkg/runtime/mgc0.c:1458: // Scanning our own stack: start at &gp.\r\n> Is this case now obsolete?  Can we get away with the code on lines 1465\r\n> to 1473?\r\n>\r\n\r\nYes, you're right.  The second condition ((mp = gp->m) != nil &&\r\nmp->helpgc) is useless as well, we never scan gchelpers which also run on\r\ng0 (addstackroots iterates over allg, which contains only g's, not g0's).\r\n I've left the conditions and put a throw in the body.\r\n\r\n\r\n> https://codereview.appspot.**com/9754044/<https://codereview.appspot.com/9754044/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-30 04:13:06.885110",
			"approval": false
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, May 29, 2013 at 4:56 PM, <cshapiro@google.com> wrote:\r\n\r\n> looks pretty good, just a few questions and comments\r\n>\r\n>\r\n> https://codereview.appspot.**com/9754044/diff/8001/src/pkg/**\r\n> runtime/mgc0.c<https://codereview.appspot.com/9754044/diff/8001/src/pkg/runtime/mgc0.c>\r\n> File src/pkg/runtime/mgc0.c (right):\r\n>\r\n> https://codereview.appspot.**com/9754044/diff/8001/src/pkg/**\r\n> runtime/mgc0.c#newcode1902<https://codereview.appspot.com/9754044/diff/8001/src/pkg/runtime/mgc0.c#newcode1902>\r\n> src/pkg/runtime/mgc0.c:1902: int64 t0;\r\n> Can we document this member as being the start time of the GC?\r\n> (Comment, name change, whatever you would like.)  The name 'force' has\r\n> meaning in the context of the garbage collection, but t0 is really local\r\n> to the gc function.\r\n>\r\n\r\nSure, changed it to start_time.\r\n\r\n\r\n>\r\n> https://codereview.appspot.**com/9754044/diff/8001/src/pkg/**\r\n> runtime/mgc0.c#newcode1977<https://codereview.appspot.com/9754044/diff/8001/src/pkg/runtime/mgc0.c#newcode1977>\r\n> src/pkg/runtime/mgc0.c:1977: if(g == m->g0) {\r\n> Given the lone goto, is there any reason not to make this a do-while\r\n> loop?\r\n>\r\n\r\nThe more I look at this, the more I don't understand what was intended.\r\n Atom, can you explain what is supposed to happen when gctrace > 1?  In\r\ntip, it looks like when not forced and gctrace > 1, it runs a second forced\r\ngc pass.  Is is really required to have a second gc?  Or is it ok to just\r\nrun one gc forced with the conditional (force || gctrace > 1)?  In fact, if\r\ngctrace > 1 and N threads call gc around the same time, it looks like we\r\nwill run N+1 gcs!\r\n\r\nAlso, this second gc isn't run on a fresh stack segment like the first gc.\r\n Probably not a big deal, performance isn't that important when tracing gc.\r\n\r\n\r\n> https://codereview.appspot.**com/9754044/diff/8001/src/pkg/**\r\n> runtime/mgc0.c#newcode1994<https://codereview.appspot.com/9754044/diff/8001/src/pkg/runtime/mgc0.c#newcode1994>\r\n> src/pkg/runtime/mgc0.c:1994: // now that gc is done and we're back on g\r\n> stack, run some finalizers\r\n> Must this code be executed on the G stack?\r\n>\r\n\r\nYes, we can't run general Go code on the g0 stack.  It isn't a growable\r\nstack, it won't be scanned by the next gc, etc.  Only the runtime gets to\r\nrun on g0.\r\n\r\n\r\n>\r\n> https://codereview.appspot.**com/9754044/diff/8001/src/pkg/**\r\n> runtime/mgc0.c#newcode2010<https://codereview.appspot.com/9754044/diff/8001/src/pkg/runtime/mgc0.c#newcode2010>\r\n> src/pkg/runtime/mgc0.c:2010: static void\r\n> Move this up to avoid the additional forward declaration of mgc on line\r\n> 1906?\r\n>\r\n\r\nI'd rather leave it here, so mgc and gc are right next to each other.\r\n Reading the code flows better that way.\r\n\r\n\r\n>\r\n> https://codereview.appspot.**com/9754044/<https://codereview.appspot.com/9754044/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-30 04:03:14.129650",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"cshapiro@google.com",
				"khr@google.com",
				"0xE2.0x9A.0x9B@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/30 04:03:14, khr1 wrote:\n> On Wed, May 29, 2013 at 4:56 PM, <mailto:cshapiro@google.com> wrote:\n> \n> >\n> > https://codereview.appspot.**com/9754044/diff/8001/src/pkg/**\n> >\n> runtime/mgc0.c#newcode1977<https://codereview.appspot.com/9754044/diff/8001/src/pkg/runtime/mgc0.c#newcode1977>\n> > src/pkg/runtime/mgc0.c:1977: if(g == m->g0) {\n> > Given the lone goto, is there any reason not to make this a do-while\n> > loop?\n> >\n> \n> The more I look at this, the more I don't understand what was intended.\n>  Atom, can you explain what is supposed to happen when gctrace > 1?\n\nI didn't write the original code containing force=1.",
			"disapproval": false,
			"date": "2013-05-30 07:25:35.976890",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"cshapiro@google.com",
				"khr@google.com",
				"0xe2.0x9a.0x9b@gmail.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9754044/diff/15001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/9754044/diff/15001/src/pkg/runtime/mgc0.c#newcode1458\nsrc/pkg/runtime/mgc0.c:1458: runtime\u00b7throw(\"can't scan our own stack\\n\");\nremove \\n in throw message\n\nhttps://codereview.appspot.com/9754044/diff/15001/src/pkg/runtime/mgc0.c#newcode1459\nsrc/pkg/runtime/mgc0.c:1459: sp = pc = 0;\nis it to silence compiler?\n\nyou can do just:\n\nif(gp == g)\n    runtime\u00b7throw(\"can't scan our own stack\");\nif((mp = gp->m) != nil && mp->helpgc)\n    runtime\u00b7throw(\"can't scan gchelper stack\");\n\nand remove the trailing else\ncompiler must be happy\nit's now a sanity check, not function logic\n\nhttps://codereview.appspot.com/9754044/diff/15001/src/pkg/runtime/mgc0.c#newcode1958\nsrc/pkg/runtime/mgc0.c:1958: if(!force && gctrace <= 1 && mstats.heap_alloc < mstats.next_gc) {\nremove \"gctrace <= 1\", it can cause thousands of unnecessary GC's\nI do not mind if you do not restore that weird \"if(gctrace > 1 && !force)\" part, I do not understand what it means either.\n\nhttps://codereview.appspot.com/9754044/diff/15001/src/pkg/runtime/mgc0.c#newcode1980\nsrc/pkg/runtime/mgc0.c:1980: g->param = (void*)&a;\ns/(void*)//\n\nhttps://codereview.appspot.com/9754044/diff/15001/src/pkg/runtime/mgc0.c#newcode2008\nsrc/pkg/runtime/mgc0.c:2008: gc((struct gc_args*)gp->param);\ns/(struct gc_args*)//\n\nhttps://codereview.appspot.com/9754044/diff/15001/src/pkg/runtime/mgc0.c#newcode2009\nsrc/pkg/runtime/mgc0.c:2009: gp->status = Grunning;\nplease set gp->param=nil here, so that it does not come up somewhere else",
			"disapproval": false,
			"date": "2013-05-30 14:49:40.971710",
			"approval": false
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, May 30, 2013 at 7:49 AM, <dvyukov@google.com> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/9754044/diff/15001/src/**\r\n> pkg/runtime/mgc0.c<https://codereview.appspot.com/9754044/diff/15001/src/pkg/runtime/mgc0.c>\r\n> File src/pkg/runtime/mgc0.c (right):\r\n>\r\n> https://codereview.appspot.**com/9754044/diff/15001/src/**\r\n> pkg/runtime/mgc0.c#newcode1458<https://codereview.appspot.com/9754044/diff/15001/src/pkg/runtime/mgc0.c#newcode1458>\r\n> src/pkg/runtime/mgc0.c:1458: runtime\u00b7throw(\"can't scan our own\r\n> stack\\n\");\r\n> remove \\n in throw message\r\n>\r\n>\r\ndone.\r\n\r\n\r\n> https://codereview.appspot.**com/9754044/diff/15001/src/**\r\n> pkg/runtime/mgc0.c#newcode1459<https://codereview.appspot.com/9754044/diff/15001/src/pkg/runtime/mgc0.c#newcode1459>\r\n> src/pkg/runtime/mgc0.c:1459: sp = pc = 0;\r\n> is it to silence compiler?\r\n>\r\n>\r\nyes.\r\n\r\n\r\n> you can do just:\r\n>\r\n> if(gp == g)\r\n>     runtime\u00b7throw(\"can't scan our own stack\");\r\n> if((mp = gp->m) != nil && mp->helpgc)\r\n>     runtime\u00b7throw(\"can't scan gchelper stack\");\r\n>\r\n> and remove the trailing else\r\n> compiler must be happy\r\n> it's now a sanity check, not function logic\r\n>\r\n\r\nok, did that.\r\n\r\n\r\n>\r\n> https://codereview.appspot.**com/9754044/diff/15001/src/**\r\n> pkg/runtime/mgc0.c#newcode1958<https://codereview.appspot.com/9754044/diff/15001/src/pkg/runtime/mgc0.c#newcode1958>\r\n> src/pkg/runtime/mgc0.c:1958: if(!force && gctrace <= 1 &&\r\n> mstats.heap_alloc < mstats.next_gc) {\r\n> remove \"gctrace <= 1\", it can cause thousands of unnecessary GC's\r\n> I do not mind if you do not restore that weird \"if(gctrace > 1 &&\r\n> !force)\" part, I do not understand what it means either.\r\n>\r\n>\r\nSo the actual docs (src/pkg/runtime/extern.go) say:  \"Setting GOGCTRACE=2\r\nemits the same summary but also repeats each collection.\"\r\n\r\nI'm not sure why you would want that (want to make sure nothing is\r\ncollected on the second pass?  want to know the time when nothing needs to\r\nbe collected?), but I'll implement it.\r\n\r\n\r\n> https://codereview.appspot.**com/9754044/diff/15001/src/**\r\n> pkg/runtime/mgc0.c#newcode1980<https://codereview.appspot.com/9754044/diff/15001/src/pkg/runtime/mgc0.c#newcode1980>\r\n> src/pkg/runtime/mgc0.c:1980: g->param = (void*)&a;\r\n> s/(void*)//\r\n>\r\n> https://codereview.appspot.**com/9754044/diff/15001/src/**\r\n> pkg/runtime/mgc0.c#newcode2008<https://codereview.appspot.com/9754044/diff/15001/src/pkg/runtime/mgc0.c#newcode2008>\r\n> src/pkg/runtime/mgc0.c:2008: gc((struct gc_args*)gp->param);\r\n> s/(struct gc_args*)//\r\n>\r\n> https://codereview.appspot.**com/9754044/diff/15001/src/**\r\n> pkg/runtime/mgc0.c#newcode2009<https://codereview.appspot.com/9754044/diff/15001/src/pkg/runtime/mgc0.c#newcode2009>\r\n> src/pkg/runtime/mgc0.c:2009: gp->status = Grunning;\r\n> please set gp->param=nil here, so that it does not come up somewhere\r\n> else\r\n>\r\n>\r\ndid all those.\r\n\r\n\r\n> https://codereview.appspot.**com/9754044/<https://codereview.appspot.com/9754044/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-30 15:57:55.239000",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, May 30, 2013 at 11:57 AM, Keith Randall <khr@google.com> wrote:\r\n\r\n> So the actual docs (src/pkg/runtime/extern.go) say:  \"Setting GOGCTRACE=2\r\n> emits the same summary but also repeats each collection.\"\r\n> I'm not sure why you would want that (want to make sure nothing is\r\n> collected on the second pass?  want to know the time when nothing needs to\r\n> be collected?), but I'll implement it.\r\n>\r\n\r\nYes, both.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-05-30 16:01:27.089470",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"cshapiro@google.com",
				"khr@google.com",
				"0xe2.0x9a.0x9b@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM!",
			"disapproval": false,
			"date": "2013-05-31 04:02:41.780360",
			"approval": true
		},
		{
			"sender": "cshapiro@google.com",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"cshapiro@google.com",
				"khr@google.com",
				"0xe2.0x9a.0x9b@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Minor comment...\n\nhttps://codereview.appspot.com/9754044/diff/16002/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/9754044/diff/16002/src/pkg/runtime/mgc0.c#newcode1991\nsrc/pkg/runtime/mgc0.c:1991: // now that gc is done and we're back on g stack, run some finalizers\nCan we use another worth than \"some\" here?  After all, we will run everything on the finalizer queue.",
			"disapproval": false,
			"date": "2013-05-31 04:05:18.437290",
			"approval": false
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, May 30, 2013 at 9:05 PM, <cshapiro@google.com> wrote:\r\n\r\n> Minor comment...\r\n>\r\n>\r\n> https://codereview.appspot.**com/9754044/diff/16002/src/**\r\n> pkg/runtime/mgc0.c<https://codereview.appspot.com/9754044/diff/16002/src/pkg/runtime/mgc0.c>\r\n> File src/pkg/runtime/mgc0.c (right):\r\n>\r\n> https://codereview.appspot.**com/9754044/diff/16002/src/**\r\n> pkg/runtime/mgc0.c#newcode1991<https://codereview.appspot.com/9754044/diff/16002/src/pkg/runtime/mgc0.c#newcode1991>\r\n> src/pkg/runtime/mgc0.c:1991: // now that gc is done and we're back on g\r\n> stack, run some finalizers\r\n> Can we use another worth than \"some\" here?  After all, we will run\r\n> everything on the finalizer queue.\r\n>\r\n\r\nFixed.\r\n\r\n\r\n>\r\n> https://codereview.appspot.**com/9754044/<https://codereview.appspot.com/9754044/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-31 17:06:39.840660",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"cshapiro@google.com",
				"khr@google.com",
				"0xe2.0x9a.0x9b@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-06-01 00:50:44.542600",
			"approval": true
		},
		{
			"sender": "khr@golang.org",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"cshapiro@google.com",
				"khr@google.com",
				"0xe2.0x9a.0x9b@gmail.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=e2c60757c60d ***\n\nruntime/gc: Run garbage collector on g0 stack\ninstead of regular g stack. We do this so that the g stack\nwe're currently running on is no longer changing.  Cuts\nthe root set down a bit (g0 stacks are not scanned, and\nwe don't need to scan gc's internal state).  Also an\nenabler for copyable stacks.\n\nR=golang-dev, cshapiro, khr, 0xe2.0x9a.0x9b, dvyukov, rsc, iant\nCC=golang-dev\nhttps://codereview.appspot.com/9754044",
			"disapproval": false,
			"date": "2013-06-01 03:43:36.015470",
			"approval": false
		}
	],
	"owner_email": "khr@golang.org",
	"private": false,
	"base_url": "",
	"owner": "khr",
	"subject": "code review 9754044: runtime/gc: Run garbage collector on g0 stack",
	"created": "2013-05-29 22:33:22.844720",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		12001,
		15001,
		16002,
		25001,
		29001
	],
	"modified": "2013-06-01 03:43:38.099010",
	"closed": true,
	"issue": 9754044
}