{
	"description": "sort: SortBy API\n\nThis is a fully implemented proposal.\n\nFrequently, a data structure has to be sorted\nexactly once and the sort criteria is simple.\nSortBy permits sorting by providing two closures\n(less and swap) and thus eliminates the need for\ndefining a helper data type just for sorting.\nIn many cases, the resulting code is more concise\nand simpler.\n\nThe current implementation piggybacks on top of\nthe existing implementation and thus sorting\nwith SortBy likely is slower. However, this is\na temporary implementation detail - there's no\nreason that SortBy cannot be as fast as Sort.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"sameer@golang.org",
		"adg@golang.org",
		"christoph@tux21b.org",
		"r@google.com"
	],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"sameer@golang.org",
				"adg@golang.org",
				"christoph@tux21b.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/05 22:52:17, adg wrote:\n> Please include an ExampleSortBy test function demonstrating its use.\n\ndone",
			"disapproval": false,
			"date": "2012-01-05 23:35:45.157684",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"sameer@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5520048/diff/3003/src/pkg/sort/sort.go\nFile src/pkg/sort/sort.go (right):\n\nhttp://codereview.appspot.com/5520048/diff/3003/src/pkg/sort/sort.go#newcode198\nsrc/pkg/sort/sort.go:198: // IsSorted returns true if data.Less(j, i) is false for any 0 <= i < j < data.Len().\nOn 2012/01/05 18:50:09, Sameer Ajmani wrote:\n> I read this as \"IsSorted returns true if there exists any indexes i, j where i <\n> j and data.Less(j, i) is false.\"  Can we change \"for any\" to \"for all\"?\n\nDone.\n\nhttp://codereview.appspot.com/5520048/diff/3003/src/pkg/sort/sort.go#newcode273\nsrc/pkg/sort/sort.go:273: // false. The swap function swaps elements i and j in the data structure.\nOn 2012/01/05 18:50:09, Sameer Ajmani wrote:\n> Unlike above, this reads fine.  Perhaps just change the word order above to be\n> like this.\n\nIt's different above because I have to define IsSorted. Anyway, used your suggestion above.\n\nhttp://codereview.appspot.com/5520048/diff/3003/src/pkg/sort/sort_test.go\nFile src/pkg/sort/sort_test.go (right):\n\nhttp://codereview.appspot.com/5520048/diff/3003/src/pkg/sort/sort_test.go#newcode52\nsrc/pkg/sort/sort_test.go:52: SortBy(\nOn 2012/01/05 18:50:09, Sameer Ajmani wrote:\n> While concise, I'm not convinced this is more readable.  In the cases where I've\n> seen sort.Interface used, the type that implements that interface usually has a\n> descriptive name, like \"byIncreasingKey\".  This yields code like:\n>   sort.Sort(byIncreasingKey(data))\n> which reads better than:\n>   sort.SortBy(\n>     func(i, j int) bool { return data[i].key < data[j].key },\n>     func(i, j int) { data[i], data[j] = data[j], data[i] },\n>     len(data),\n>   )\n> This difference gets more pronounced when the sort has a secondary key, and so\n> the less function contains some conditionals.\n\nThe more complex cases can still be handled the old way. Also, one can always write:\n\nsmallerKey := func(i, j int) bool { return data[i].key < data[j].key }\nswap := func(i, j int) { data[i], data[j] = data[j], data[i] }\nsort.SortBy(smallerKey, swap, len(data))\n\nwhich seems equally readable to me.\n\n- gri",
			"disapproval": false,
			"date": "2012-01-05 19:15:37.526753",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jan 5, 2012 at 2:52 PM,  <adg@golang.org> wrote:\n> Please include an ExampleSortBy test function demonstrating its use.\n>\n> http://codereview.appspot.com/5520048/\n",
			"disapproval": false,
			"date": "2012-01-05 23:28:21.842899",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "After consideration, I vote for leaving Sort alone and dropping this approach, at least for now. It's merely the latest in a line of attempts to provide a generic sorting algorithm in a non-generic language. These new suggestions are worth discussing in the abstract but not as a check-in right before Go 1, whose APIs should be close to fixed by now. I realize this is an addition, not a replacement, but I am concerned about the precedent this work-around-the-interface-model approach sets. In some cases the approach may be more convenient but I am unconvinced it's superior enough to suggest it as a general approach, and it also raises the issue of why only Sort gets this treatment.\n\nIf Sort needs a different API, let's take our leisurely time designing, playing, and adapting with it, but after Go 1 is out and perhaps in a wider context involving collation and the general topic of the future of containers and algorithms in Go.\n\nIt's likely more things will arrive in the next few weeks that will trigger a similar reply from me (there have been others already), so let me avoid all the explanation in those cases by establishing a shorthand:\n\nNot now.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-01-06 01:36:08.288414",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"sameer@golang.org",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please include an ExampleSortBy test function demonstrating its use.",
			"disapproval": false,
			"date": "2012-01-05 22:52:17.802965",
			"approval": false
		},
		{
			"sender": "christoph@tux21b.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"sameer@golang.org",
				"adg@golang.org",
				"christoph@tux21b.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5520048/diff/3003/src/pkg/sort/sort.go\nFile src/pkg/sort/sort.go (right):\n\nhttp://codereview.appspot.com/5520048/diff/3003/src/pkg/sort/sort.go#newcode186\nsrc/pkg/sort/sort.go:186: // Sort sorts data via its interface. After sorting, isSorted(data) is true.\ns/isSorted/IsSorted/?",
			"disapproval": false,
			"date": "2012-01-05 22:56:29.494725",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"sameer@golang.org",
				"adg@golang.org",
				"christoph@tux21b.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5520048/diff/3003/src/pkg/sort/sort.go\nFile src/pkg/sort/sort.go (right):\n\nhttp://codereview.appspot.com/5520048/diff/3003/src/pkg/sort/sort.go#newcode186\nsrc/pkg/sort/sort.go:186: // Sort sorts data via its interface. After sorting, isSorted(data) is true.\nOn 2012/01/05 22:56:29, tux21b wrote:\n> s/isSorted/IsSorted/?\n\nDone.",
			"disapproval": false,
			"date": "2012-01-05 23:28:05.331218",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-05 18:19:24.077563",
			"approval": false
		},
		{
			"sender": "sameer@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"sameer@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5520048/diff/3003/src/pkg/sort/sort.go\nFile src/pkg/sort/sort.go (right):\n\nhttp://codereview.appspot.com/5520048/diff/3003/src/pkg/sort/sort.go#newcode198\nsrc/pkg/sort/sort.go:198: // IsSorted returns true if data.Less(j, i) is false for any 0 <= i < j < data.Len().\nI read this as \"IsSorted returns true if there exists any indexes i, j where i < j and data.Less(j, i) is false.\"  Can we change \"for any\" to \"for all\"?\n\nhttp://codereview.appspot.com/5520048/diff/3003/src/pkg/sort/sort.go#newcode273\nsrc/pkg/sort/sort.go:273: // false. The swap function swaps elements i and j in the data structure.\nUnlike above, this reads fine.  Perhaps just change the word order above to be like this.\n\nhttp://codereview.appspot.com/5520048/diff/3003/src/pkg/sort/sort_test.go\nFile src/pkg/sort/sort_test.go (right):\n\nhttp://codereview.appspot.com/5520048/diff/3003/src/pkg/sort/sort_test.go#newcode52\nsrc/pkg/sort/sort_test.go:52: SortBy(\nWhile concise, I'm not convinced this is more readable.  In the cases where I've seen sort.Interface used, the type that implements that interface usually has a descriptive name, like \"byIncreasingKey\".  This yields code like:\n  sort.Sort(byIncreasingKey(data))\nwhich reads better than:\n  sort.SortBy(\n    func(i, j int) bool { return data[i].key < data[j].key },\n    func(i, j int) { data[i], data[j] = data[j], data[i] },\n    len(data),\n  )\nThis difference gets more pronounced when the sort has a secondary key, and so the less function contains some conditionals.",
			"disapproval": false,
			"date": "2012-01-05 18:50:09.425684",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ok. I will postpone this.\n\nJust for the record: I modified the implementation, and a sort\nimplementation based on a less and swap function instead of an\ninterface appears to be faster then the current interface approach.\nSpecifically:\n\nOld code:\nsort_test.BenchmarkSortInt1K\t   10000\t    285444 ns/op\nsort_test.BenchmarkSortInt64K\t     100\t  28132250 ns/op\n\nNew code:\nsort_test.BenchmarkSortNInt1K\t   10000\t    242571 ns/op\nsort_test.BenchmarkSortNInt64K\t     100\t  23886690 ns/op\n\nThe difference is about 15%. More exactly, this is using SortN, a\nfurther modification of SortBy, hinted at in my original mail:\n\n    func SortN(less Criteria, n int)\n\nwhich requires only a single closure:\n\n    type Criteria func(i, j int, swap bool) bool\n\nwhere Criteria is basically the same as Interface.Less in the existing\ncode, except that it also swaps if swap is set and the result is true\n(i.e., a[i] < a[j]). The two functions less and swap as needed for\nSortBy can be obtained as follows from Criteria:\n\n    func (less Criteria) Less(i, j) bool { return less(i, j, false) {\n\nand (credits to lvd who pointed this out):\n\n    func (less Criteria) Swap(i, j int) {\n       \tif !less(i, j, true) {\n\t\tless(j, i, true)\n\t}\n    }\n\nIt turns out that in some cases, Swap doesn't need to be called\nanymore in the implementation, which reduces the number of upcalls.\nBut the extra complexity for swapping when it is needed may destroy\nsome of the benefit again. Nevertheless, this approach is faster than\nwhat we have now.\n\nAnd Criteria can also be created from an existing sort.Interface,\nwhich outlines the connection between the current sort.Sort, and\nsort.SortN.\n\nfunc MakeCriteria(data Interface) Criteria {\n\treturn func(i, j int, swap bool) bool {\n\t\tif data.Less(i, j) {\n\t\t\tif swap {\n\t\t\t\tdata.Swap(i, j)\n\t\t\t}\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}\n}\n\nTo summarize:\n\n1) The existing API can be improved, both for ease of use, and better\nperformance.\n2) There is evidence that a closure-based approach is faster.\n3) SortBy (current proposal) can be further simplified to an approach\nwhere only a single function (Criteria) is needed; albeit at the cost\nof a more complex such function.\n\n- gri\n\n\n\nOn Thu, Jan 5, 2012 at 5:36 PM, Rob 'Commander' Pike <r@google.com> wrote:\n> After consideration, I vote for leaving Sort alone and dropping this approach, at least for now. It's merely the latest in a line of attempts to provide a generic sorting algorithm in a non-generic language. These new suggestions are worth discussing in the abstract but not as a check-in right before Go 1, whose APIs should be close to fixed by now. I realize this is an addition, not a replacement, but I am concerned about the precedent this work-around-the-interface-model approach sets. In some cases the approach may be more convenient but I am unconvinced it's superior enough to suggest it as a general approach, and it also raises the issue of why only Sort gets this treatment.\n>\n> If Sort needs a different API, let's take our leisurely time designing, playing, and adapting with it, but after Go 1 is out and perhaps in a wider context involving collation and the general topic of the future of containers and algorithms in Go.\n>\n> It's likely more things will arrive in the next few weeks that will trigger a similar reply from me (there have been others already), so let me avoid all the explanation in those cases by establishing a shorthand:\n>\n> Not now.\n>\n> -rob\n>\n",
			"disapproval": false,
			"date": "2012-01-06 02:12:33.304813",
			"approval": false
		},
		{
			"sender": "christoph@tux21b.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"sameer@golang.org",
				"adg@golang.org",
				"christoph@tux21b.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2012-01-05 22:56:30.809905",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 5520048: sort: SortBy API",
	"created": "2012-01-05 18:18:24.124734",
	"patchsets": [
		1,
		2001,
		3003,
		4003,
		7
	],
	"modified": "2012-01-05 22:56:30.809905",
	"closed": false,
	"issue": 5520048
}