{
	"description": "text/template: add filter action\r\n\r\nSUPERSEDED BY: http://codereview.appspot.com/5532054/",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"dsymonds@golang.org",
		"gustavo@niemeyer.net",
		"r@google.com",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "(...)\n> 'if' and repetition). Your change means that \"foo\" might be something\n> arbitrarily different.\n\nSo your argument is that the text of the template may become\nincomprehensible with this feature. Indeed, it may, but it may become\nhard to understand with the existing features as well. My motivation\nisn't to do something incomprehensible, though, but quite the\nopposite. I want to make the template text _more_ comprehensible by\nwriting content I don't have to escape by hand, and can instead let Go\ndo the computation work on top of the template text.\n\nAs an example, this is the offending page that made me do this change:\n\n    http://labix.org/lunatic-python\n\nYesterday I was porting the page content itself to Go's template\npackage for integrating into a new Go-based site that is evolving, but\nthe amount of escaping involved is just too inconvenient.\n\nI could take those 30+ snippets and move them outside the page for\nescaping with some other mechanism as you suggest, but again, this\nwould hurt the template readability significantly rather than\nimproving it.\n\n> If I'm trying to track down how a particular\n> piece of text came out of a template execution, your change makes it\n> much, much harder.\n\nFor the reasons above, I disagree. It only makes it harder if you make\na _really_ bad use of the feature, but then all bets are off.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-01-09 00:39:00.639521",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": ">> + \u00a0 \u00a0 \u00a0 {{filter pipeline}} T1 {{end}}\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The default textual representation of the value of the pipeline\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 is copied to the output. During evaluation of the pipeline, dot\n>> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 is set to the string resulting of T1's execution.\n>\n> This is a pretty major change, and I don't think it's a good one.\n> Everywhere else in the templating language, the special parts are in\n> {{...}}, and all other text will appear verbatim (modulo repetition\n> and optionality). This new action is causing that other text to\n> occasionally be executed.\n\nI disagree with it being a major change (see the patch), but I agree\nwith it being a significant one that enables something that is not\npossible nowadays. That's exactly why I'm proposing this change rather\nthan rolling my own local solution! There's absolutely no way to\nfilter through Go logic some text that is inlined in the template. Not\nto escape, not to colorize, not to do anything at all. I've been using\nthe template package, and I'm getting extremely bored from escaping\ncode snippets.\n\nI'm curious, though. You've explained what the logic does, and pointed\nout you find it a bad idea, but I'm missing the reasoning why you find\nit a bad idea. I personally find it quite within the spirit of the\npackage.. the goal is to enable Go to process pieces of text in the\ntemplate with the already defined mechanisms. So, what exactly is your\ngrip about it?\n\n> Why not just put T1 as an action argument instead?\n\nBecause actions cannot span newlines, and even if they did it'd look\nsomewhat ugly and prone to matching the \"`\" character in the text.\nAlso, it'd prevent using the template syntax within the processed\nregion.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-01-08 23:54:12.754244",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"gustavo@niemeyer.net",
				"r@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-01-09 11:30:31.263552",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": ">>> 1) It's a model change, one I'm not comfortable with.\n>>>\n>>> 2) Any change to text/template must be securable by html/template and, if necessary, supported by changes there.\n>>>\n>>> 3) Not now.\n>>\n>> Ok, I guess I'll fork it off to continue using the base of template, at least.\n>\n> Points 1 and 2 are important.\n\nSorry, I hope it doesn't look like I was running away from the review.\nI'm glad to fix 2, and to wait for 3 until it's an appropriate time,\nbut 1 looked like a plain \"Not gonna happen!\" kind of comment that I\ncan't really do anything about. If that's not the case, I'm glad to\ntalk further about alternatives.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-01-09 16:55:42.696883",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Jan 9, 2012, at 2:33 PM, Gustavo Niemeyer wrote:\n\n> On Mon, Jan 9, 2012 at 23:25, Russ Cox <rsc@golang.org> wrote:\n>>> It would be almost equivalent for my specific purposes, since I'm not\n>>> really using the benefit of using further syntax within the filtered\n>>> text at this point. There's a small additional problem, though: some\n>>> of the snippets actually contain the back quote character.\n>> \n>> You could put strings.Join in your func map and then you'd be all set.\n> \n> True, but this:\n> \n>    {{filter html .}}\n>    Some text that may\n>    contain ` potentially\n>    {{end}}\n> \n> is still significantly better to deal with than:\n> \n>    {{`\n>    Some text\n>    that may contain` | join \"`\" | join `potentially.\n>    ` | html}}\n\nthat's why i mentioned parentheses.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-01-09 22:35:37.110605",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think we should leave this for after Go 1.\nIt looks like it could be done in a backwards compatible\nway, if it can be done safely at all (and that is the bigger\nquestion).\n\nIs the specific case you are worried about really this one:\n\n>    {{filter html .}}\n>    Some text that may\n>    contain ` potentially\n>    {{end}}\n\n(that is, filter through *html* specifically)?\n\nBecause the whole point of using html/template is that it\ndoes the right escaping for you, so this would be redundant.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-09 22:40:39.849497",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jan 9, 2012 at 10:53 AM, Gustavo Niemeyer <gustavo@niemeyer.net> wrote:\n\n> I'm curious, though. You've explained what the logic does, and pointed\n> out you find it a bad idea, but I'm missing the reasoning why you find\n> it a bad idea. I personally find it quite within the spirit of the\n> package.. the goal is to enable Go to process pieces of text in the\n> template with the already defined mechanisms. So, what exactly is your\n> grip about it?\n\nIn my mind at least, it inverts the flow between the program, the\ntemplate data and the template itself. At the moment, when you are\nreading or editing a template, you can mostly ignore actions when\ntrying to understand what will end up in the output. With something\nthat looks like\n  {{...}}foo{{...}}\nthen I know that the literal \"foo\" will end up in the output (modulo\n'if' and repetition). Your change means that \"foo\" might be something\narbitrarily different. If I'm trying to track down how a particular\npiece of text came out of a template execution, your change makes it\nmuch, much harder.\n\nI can certainly see uses for this, but I'm wary of its fallout. It\nseems it can be done with literal strings in actions, or in doing some\nof the processing work in the program before template execution.\n\n\nDave.\n",
			"disapproval": false,
			"date": "2012-01-09 00:03:02.953135",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=r\n\nYeah, it's a judgement call, and it's not mine to make.\n",
			"disapproval": false,
			"date": "2012-01-09 00:54:10.983531",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Also, other template libraries I know offer a \"translate\" and a \"pluralize\"\n> block (they pass the raw text to gettext internally, before substituting variables)\n\nYeah, that's a pretty good example as well. The proposed feature enables, e.g.:\n\n{{filter . | gettext}}\nSome long text\nto be translated.\n{{end}}\n\nI'll push the non-endorsed feature into an external package when I\nhave a moment so I can use it, and will maintain it as a superset of\nthe {text,html}/template packages.\n\nI can let you know of the location later if you're interested.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-01-09 16:30:35.415630",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> It would be almost equivalent for my specific purposes, since I'm not\n> really using the benefit of using further syntax within the filtered\n> text at this point. There's a small additional problem, though: some\n> of the snippets actually contain the back quote character.\n\nYou could put strings.Join in your func map and then you'd be all set.\n",
			"disapproval": false,
			"date": "2012-01-09 22:25:46.103903",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jan 9, 2012 at 23:25, Russ Cox <rsc@golang.org> wrote:\n>> It would be almost equivalent for my specific purposes, since I'm not\n>> really using the benefit of using further syntax within the filtered\n>> text at this point. There's a small additional problem, though: some\n>> of the snippets actually contain the back quote character.\n>\n> You could put strings.Join in your func map and then you'd be all set.\n\nTrue, but this:\n\n    {{filter html .}}\n    Some text that may\n    contain ` potentially\n    {{end}}\n\nis still significantly better to deal with than:\n\n    {{`\n    Some text\n    that may contain` | join \"`\" | join `potentially.\n    ` | html}}\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-01-09 22:34:09.012171",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Not exactly. I meant a separate action like:\n>\n> {{ translate }}\n> Some long text {{ some_variable|html }}\n> {{ end }}\n\n{{filter . | translate $some_variable}}\nSome long text %s\n{{end}}\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-01-09 17:01:52.688130",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Would it be sufficient for actions to span multiple lines, plus `` strings to do so as well?\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-01-09 18:28:31.282115",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Jan 9, 2012, at 8:55 AM, Gustavo Niemeyer wrote:\n\n>>>> 1) It's a model change, one I'm not comfortable with.\n>>>> \n>>>> 2) Any change to text/template must be securable by html/template and, if necessary, supported by changes there.\n>>>> \n>>>> 3) Not now.\n>>> \n>>> Ok, I guess I'll fork it off to continue using the base of template, at least.\n>> \n>> Points 1 and 2 are important.\n> \n> Sorry, I hope it doesn't look like I was running away from the review.\n> I'm glad to fix 2, and to wait for 3 until it's an appropriate time,\n> but 1 looked like a plain \"Not gonna happen!\" kind of comment that I\n> can't really do anything about. If that's not the case, I'm glad to\n> talk further about alternatives.\n\n#2 is the critical one. If it can't be mirrored by html/template, it's officially a Bad Idea. Regardless, I'm uncomfortable about it but not fixedly against it without further thought, so #3 is my current official response.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-01-09 17:02:11.924360",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> I think we should leave this for after Go 1.\n\nI'm certainly fine with that.\n\n> It looks like it could be done in a backwards compatible\n> way, if it can be done safely at all (and that is the bigger\n> question).\n\nBut I'm not sure I understand the constraints here. The content is\ncoming from the rendered template itself, which by definition is\ntrusted.\n\n> Is the specific case you are worried about really this one:\n>\n>> \u00a0 \u00a0{{filter html .}}\n>> \u00a0 \u00a0Some text that may\n>> \u00a0 \u00a0contain ` potentially\n>> \u00a0 \u00a0{{end}}\n>\n> (that is, filter through *html* specifically)?\n\nYes, in this specific pipeline, escape the provided string (which may\nbe a Go snippet, for instance) so it's safe for inclusion in the final\npage.\n\n> Because the whole point of using html/template is that it\n> does the right escaping for you, so this would be redundant.\n\nNot necessarily, as explained above.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-01-09 22:47:41.349775",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-08 23:24:06.535332",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "1) It's a model change, one I'm not comfortable with.\n\n2) Any change to text/template must be securable by html/template and, if necessary, supported by changes there.\n\n3) Not now.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-01-09 01:13:24.531068",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> 1) It's a model change, one I'm not comfortable with.\n>\n> 2) Any change to text/template must be securable by html/template and, if necessary, supported by changes there.\n>\n> 3) Not now.\n\nOk, I guess I'll fork it off to continue using the base of template, at least.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-01-09 07:55:46.984849",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jan 9, 2012 at 10:24 AM,  <n13m3y3r@gmail.com> wrote:\n\n> + \u00a0 \u00a0 \u00a0 {{filter pipeline}} T1 {{end}}\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The default textual representation of the value of the pipeline\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 is copied to the output. During evaluation of the pipeline, dot\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 is set to the string resulting of T1's execution.\n\nThis is a pretty major change, and I don't think it's a good one.\nEverywhere else in the templating language, the special parts are in\n{{...}}, and all other text will appear verbatim (modulo repetition\nand optionality). This new action is causing that other text to\noccasionally be executed. Why not just put T1 as an action argument\ninstead?\n\n\nDave.\n",
			"disapproval": false,
			"date": "2012-01-08 23:34:07.339132",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> #2 is the critical one. If it can't be mirrored by html/template, it's\n> officially a Bad Idea. Regardless, I'm uncomfortable about it but\n> not fixedly against it without further thought, so #3 is my current\n> official response.\n\nOk. I'll fix 2, and push a holding up CL waiting for 3 and more\ncomments related to 1, and will experiment with it meanwhile.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-01-09 17:10:15.256617",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Rob already said not now.\n> I would like to echo that.\n(...)\n\nAs I already said a few times, I'm perfectly fine with that, and I'm\nnot trying to push that now onto you. I've just made the CL available\nas a reference for when you're interested, if ever.\n\nMeanwhile, I'll fork my own package with that exact content since I do\nwant to use it now.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-01-10 00:19:57.619461",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Jan 8, 2012, at 11:55 PM, Gustavo Niemeyer wrote:\n\n>> 1) It's a model change, one I'm not comfortable with.\n>> \n>> 2) Any change to text/template must be securable by html/template and, if necessary, supported by changes there.\n>> \n>> 3) Not now.\n> \n> Ok, I guess I'll fork it off to continue using the base of template, at least.\n\nPoints 1 and 2 are important.\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2012-01-09 16:47:43.945538",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jan 9, 2012 at 19:28, Rob 'Commander' Pike <r@google.com> wrote:\n> Would it be sufficient for actions to span multiple lines, plus `` strings to do so as well?\n\nIt would be almost equivalent for my specific purposes, since I'm not\nreally using the benefit of using further syntax within the filtered\ntext at this point. There's a small additional problem, though: some\nof the snippets actually contain the back quote character.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-01-09 22:00:00.455142",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Jan 9, 2012, at 2:25 PM, Russ Cox wrote:\n\n>> It would be almost equivalent for my specific purposes, since I'm not\n>> really using the benefit of using further syntax within the filtered\n>> text at this point. There's a small additional problem, though: some\n>> of the snippets actually contain the back quote character.\n> \n> You could put strings.Join in your func map and then you'd be all set.\n\nperhaps not before i put in parens for grouping, but that's on my list too.\n\nbut not now.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-01-09 22:27:15.609205",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": ">> Because the whole point of using html/template is that it\n>> does the right escaping for you, so this would be redundant.\n>\n> Not necessarily, as explained above.\n\nActually, you're right on this one. After actual experimentation with\na few alternatives, the best way to integrate filter with the\nhtml/template logic, making it entirely safe by default, indeed makes\nthe above construction look like:\n\n    {{filter .}}\n    Any non-safe text.\n    {{end}}\n\nThis also means that both of these are safe:\n\n    {{filter $var}}{{end}}\n    {{filter .}}{{$var}}{{end}}\n\nI've pushed the revised change including proper html/template support to:\n\n    http://codereview.appspot.com/5532054\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-01-09 23:42:13.819873",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Rob already said not now.\nI would like to echo that.\nNesting in this way is a significant\nchange to the model and needs to\nbe considered very carefully.\nI think we should postpone it.\nWe can always do it in Go 1.1\nwithout breaking things.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-09 23:55:50.347132",
			"approval": false
		}
	],
	"owner_email": "n13m3y3r@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "niemeyer",
	"subject": "code review 5528048: text/template: add filter action",
	"created": "2012-01-08 23:04:25.867466",
	"patchsets": [
		1,
		2001,
		4,
		1002
	],
	"modified": "2012-01-09 23:51:03.944027",
	"closed": true,
	"issue": 5528048
}