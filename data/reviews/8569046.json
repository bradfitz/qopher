{
	"description": "exp/ssa: support for calls f(g()) where g has multiple return values (MRVs).\n\nThe new logic is much simpler:\n(1) emit code for all actual parameter expressions and make a\n    list of SSA values.\n(2) in the \"chained MRV\" case, we flatten out the tuple from\n    g() into this list.\n(3) we apply assignability conversions of the prefix\n    corresponding to normal formal parameters.\n(4) we apply assignability conversions and build a slice for\n    the suffix corresponding to the variadic formal parameter.\n\nEllipsis calls are handled as a simple special case.\n\nBuilt-ins are handled using exactly the same code, but we must\nfirst infer a types.Signature for the callsite.\n\nTested in testdata/mrvchain.go and $GOROOT/test/simassign.go.\n\nAlso in this CL:\n\n- fix: apply assignability conversions when returning a single\n  multi-valued expression in an MRV function.  Added test.\n- fix: ensure that createSyntacticParams creates\n  Function.Params for anonymous parameters.\n- ssa.Select now uses the empty interface type to represent\n  the recv parameter.  I shoulda done this earlier...\n- ssa.Function now has an AnonFuncs field.\n  (Required for converting a token.Pos to its enclosing\n  *ssa.Function)\n- ssa.Package.Pos is gone; it was bogus.\n- Set the Package.Init.Pos correctly: to the lexically first\n  'func init()' decl, or zero if implicit.\n- Documented some doubts about the spec of ChangeInterface,\n  TypeAssert.",
	"cc": [
		"gri@golang.org",
		"minux.ma@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.exp",
			"disapproval": false,
			"date": "2013-04-26 21:05:35.877810",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "where is mrvtest.go mentioned in the description?",
			"disapproval": false,
			"date": "2013-04-27 14:06:16.607030",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/27 14:06:16, minux wrote:\n> where is mrvtest.go mentioned in the description?\n\nOops, I meant testdata/mrvchain.go.  Updated.",
			"disapproval": false,
			"date": "2013-04-27 16:53:00.355150",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "(notes to self)\n\nhttps://codereview.appspot.com/8569046/diff/7001/ssa/builder.go\nFile ssa/builder.go (right):\n\nhttps://codereview.appspot.com/8569046/diff/7001/ssa/builder.go#newcode25\nssa/builder.go:25: // - fix: support f(g()) where g has multiple result parameters.\nNTS: remove, done.\n\nhttps://codereview.appspot.com/8569046/diff/7001/ssa/builder.go#newcode2156\nssa/builder.go:2156: // TODO(adonovan): add regtest for this.\nNTS: remove, done.",
			"disapproval": false,
			"date": "2013-04-27 18:47:15.722390",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/8569046/diff/18001/ssa/builder.go\nFile ssa/builder.go (right):\n\nhttps://codereview.appspot.com/8569046/diff/18001/ssa/builder.go#newcode2412\nssa/builder.go:2412: if pkg.Init.Pos == 0 {\nif !pkg.Init.Pos.IsValid() { ... ?\n\nhttps://codereview.appspot.com/8569046/diff/18001/ssa/func.go\nFile ssa/func.go (right):\n\nhttps://codereview.appspot.com/8569046/diff/18001/ssa/func.go#newcode224\nssa/func.go:224: recvVar := f.Signature.Recv\nif len(field.Names) == 0 ...\n\nis safer\n\nhttps://codereview.appspot.com/8569046/diff/18001/ssa/func.go#newcode238\nssa/func.go:238: if field.Names == nil {\nlen(field.Names) == 0\n\nis safer\n\nhttps://codereview.appspot.com/8569046/diff/18001/ssa/typeinfo.go\nFile ssa/typeinfo.go (right):\n\nhttps://codereview.appspot.com/8569046/diff/18001/ssa/typeinfo.go#newcode97\nssa/typeinfo.go:97: // This logic is morally part of the typechecker, and should arguably\ns/is morally/could be/",
			"disapproval": false,
			"date": "2013-04-30 20:38:55.630220",
			"approval": true
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks!\n\nhttps://codereview.appspot.com/8569046/diff/18001/ssa/builder.go\nFile ssa/builder.go (right):\n\nhttps://codereview.appspot.com/8569046/diff/18001/ssa/builder.go#newcode2412\nssa/builder.go:2412: if pkg.Init.Pos == 0 {\nOn 2013/04/30 20:38:55, gri wrote:\n> if !pkg.Init.Pos.IsValid() { ... ?\n\nDone.\n\nhttps://codereview.appspot.com/8569046/diff/18001/ssa/func.go\nFile ssa/func.go (right):\n\nhttps://codereview.appspot.com/8569046/diff/18001/ssa/func.go#newcode224\nssa/func.go:224: recvVar := f.Signature.Recv\nOn 2013/04/30 20:38:55, gri wrote:\n> if len(field.Names) == 0 ...\n> \n> is safer\n\nThe API specification explicitly says nil => anonymous, which is why I used that check here.\n\nhttps://codereview.appspot.com/8569046/diff/18001/ssa/typeinfo.go\nFile ssa/typeinfo.go (right):\n\nhttps://codereview.appspot.com/8569046/diff/18001/ssa/typeinfo.go#newcode97\nssa/typeinfo.go:97: // This logic is morally part of the typechecker, and should arguably\nOn 2013/04/30 20:38:55, gri wrote:\n> s/is morally/could be/\n\nDone.",
			"disapproval": false,
			"date": "2013-04-30 20:45:54.724000",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=adfcfcce7b53&repo=exp ***\n\nexp/ssa: support for calls f(g()) where g has multiple return values (MRVs).\n\nThe new logic is much simpler:\n(1) emit code for all actual parameter expressions and make a\n    list of SSA values.\n(2) in the \"chained MRV\" case, we flatten out the tuple from\n    g() into this list.\n(3) we apply assignability conversions of the prefix\n    corresponding to normal formal parameters.\n(4) we apply assignability conversions and build a slice for\n    the suffix corresponding to the variadic formal parameter.\n\nEllipsis calls are handled as a simple special case.\n\nBuilt-ins are handled using exactly the same code, but we must\nfirst infer a types.Signature for the callsite.\n\nTested in testdata/mrvchain.go and $GOROOT/test/simassign.go.\n\nAlso in this CL:\n\n- fix: apply assignability conversions when returning a single\n  multi-valued expression in an MRV function.  Added test.\n- fix: ensure that createSyntacticParams creates\n  Function.Params for anonymous parameters.\n- ssa.Select now uses the empty interface type to represent\n  the recv parameter.  I shoulda done this earlier...\n- ssa.Function now has an AnonFuncs field.\n  (Required for converting a token.Pos to its enclosing\n  *ssa.Function)\n- ssa.Package.Pos is gone; it was bogus.\n- Set the Package.Init.Pos correctly: to the lexically first\n  'func init()' decl, or zero if implicit.\n- Documented some doubts about the spec of ChangeInterface,\n  TypeAssert.\n\nR=gri, minux.ma\nCC=golang-dev\nhttps://codereview.appspot.com/8569046",
			"disapproval": false,
			"date": "2013-04-30 20:53:50.073670",
			"approval": false
		}
	],
	"owner_email": "adonovan@google.com",
	"private": false,
	"base_url": "",
	"owner": "adonovan",
	"subject": "code review 8569046: exp/ssa: support for calls f(g()) where g has multiple ...",
	"created": "2013-04-26 20:21:47.689120",
	"patchsets": [
		1,
		2001,
		5001,
		7001,
		18001,
		32001
	],
	"modified": "2013-04-30 20:53:50.977350",
	"closed": true,
	"issue": 8569046
}