{
	"description": "reflect: add frame sizes for assembly bits.\n\nFixes issue 5954.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"khr@google.com"
	],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. Thank you.\n\nPrior to this \n\nGOGC=1 go test -v -run Method reflect\n\nwould fail almost every time, at the asm_arm function call. Afterwards I cannot reproduce the error.\n\nShould the assembler be changed to require a frame pointer on all functions ?",
			"disapproval": false,
			"date": "2013-07-29 01:01:51.371090",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-07-30 02:22:21.095460",
			"approval": false
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm worried about this.  Functions like makeFuncStub do actually have\r\narguments on the stack, pretending as if they don't may make the stack\r\nscanning code think those arguments are dead (and thus things they point to\r\nwill get GCed).\r\n\r\n\r\n\r\nOn Mon, Jul 29, 2013 at 7:22 PM, <remyoudompheng@gmail.com> wrote:\r\n\r\n> Reviewers: golang-dev1, dfc,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com, dave@cheney.net (cc:\r\n> golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> reflect: add frame sizes for assembly bits.\r\n>\r\n> Fixes issue 5954.\r\n>\r\n> Please review this at https://codereview.appspot.**com/11998043/<https://codereview.appspot.com/11998043/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/reflect/asm_386.s\r\n>   M src/pkg/reflect/asm_amd64.s\r\n>   M src/pkg/reflect/asm_arm.s\r\n>\r\n>\r\n> Index: src/pkg/reflect/asm_386.s\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/reflect/asm_386.s\r\n> +++ b/src/pkg/reflect/asm_386.s\r\n> @@ -5,7 +5,7 @@\r\n>  // makeFuncStub is the code half of the function returned by MakeFunc.\r\n>  // See the comment on the declaration of makeFuncStub in makefunc.go\r\n>  // for more details.\r\n> -TEXT \u00b7makeFuncStub(SB),7,$8\r\n> +TEXT \u00b7makeFuncStub(SB),7,$8-0\r\n>         MOVL    DX, 0(SP)\r\n>         LEAL    argframe+0(FP), CX\r\n>         MOVL    CX, 4(SP)\r\n> @@ -15,7 +15,7 @@\r\n>  // methodValueCall is the code half of the function returned by\r\n> makeMethodValue.\r\n>  // See the comment on the declaration of methodValueCall in makefunc.go\r\n>  // for more details.\r\n> -TEXT \u00b7methodValueCall(SB),7,$8\r\n> +TEXT \u00b7methodValueCall(SB),7,$8-0\r\n>         MOVL    DX, 0(SP)\r\n>         LEAL    argframe+0(FP), CX\r\n>         MOVL    CX, 4(SP)\r\n> Index: src/pkg/reflect/asm_amd64.s\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/reflect/asm_amd64.s\r\n> +++ b/src/pkg/reflect/asm_amd64.s\r\n> @@ -5,7 +5,7 @@\r\n>  // makeFuncStub is the code half of the function returned by MakeFunc.\r\n>  // See the comment on the declaration of makeFuncStub in makefunc.go\r\n>  // for more details.\r\n> -TEXT \u00b7makeFuncStub(SB),7,$16\r\n> +TEXT \u00b7makeFuncStub(SB),7,$16-0\r\n>         MOVQ    DX, 0(SP)\r\n>         LEAQ    argframe+0(FP), CX\r\n>         MOVQ    CX, 8(SP)\r\n> @@ -15,7 +15,7 @@\r\n>  // methodValueCall is the code half of the function returned by\r\n> makeMethodValue.\r\n>  // See the comment on the declaration of methodValueCall in makefunc.go\r\n>  // for more details.\r\n> -TEXT \u00b7methodValueCall(SB),7,$16\r\n> +TEXT \u00b7methodValueCall(SB),7,$16-0\r\n>         MOVQ    DX, 0(SP)\r\n>         LEAQ    argframe+0(FP), CX\r\n>         MOVQ    CX, 8(SP)\r\n> Index: src/pkg/reflect/asm_arm.s\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/reflect/asm_arm.s\r\n> +++ b/src/pkg/reflect/asm_arm.s\r\n> @@ -5,7 +5,7 @@\r\n>  // makeFuncStub is jumped to by the code generated by MakeFunc.\r\n>  // See the comment on the declaration of makeFuncStub in makefunc.go\r\n>  // for more details.\r\n> -TEXT \u00b7makeFuncStub(SB),7,$8\r\n> +TEXT \u00b7makeFuncStub(SB),7,$8-0\r\n>         MOVW    R7, 4(R13)\r\n>         MOVW    $argframe+0(FP), R1\r\n>         MOVW    R1, 8(R13)\r\n> @@ -15,7 +15,7 @@\r\n>  // methodValueCall is the code half of the function returned by\r\n> makeMethodValue.\r\n>  // See the comment on the declaration of methodValueCall in makefunc.go\r\n>  // for more details.\r\n> -TEXT \u00b7methodValueCall(SB),7,$8\r\n> +TEXT \u00b7methodValueCall(SB),7,$8-0\r\n>         MOVW    R7, 4(R13)\r\n>         MOVW    $argframe+0(FP), R1\r\n>         MOVW    R1, 8(R13)\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-30 04:46:29.023820",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"khr@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/30 04:46:29, khr1 wrote:\n> I'm worried about this.  Functions like makeFuncStub do actually have\n> arguments on the stack, pretending as if they don't may make the stack\n> scanning code think those arguments are dead (and thus things they point to\n> will get GCed).\n\nYou're right. I wonder what's the right way to make this work.\n\nThe arguments are copied later to be arguments of a proper function so it would break if the GC passes in between.",
			"disapproval": false,
			"date": "2013-07-30 05:53:33.381570",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"khr@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-07-31 19:38:45.986930",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 11998043: reflect: add frame sizes for assembly bits.",
	"created": "2013-07-29 00:43:38.608240",
	"patchsets": [
		1,
		3001,
		7001
	],
	"modified": "2013-07-31 19:38:48.051320",
	"closed": true,
	"issue": 11998043
}