{
	"description": "encoding/xml: Do not pass through invalid utf8 bytes\r\n\r\nEscapeText now escapes 0xFFFD returned from DecodeRune as 0xFFFD, rather than passing through the original byte.\r\nFixes issue 5880.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"bradfitz@golang.org",
		"adg@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "alex@lx.lc",
			"recipients": [
				"alex@lx.lc",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-07-28 00:45:41.402370",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"alex@lx.lc",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11975043/diff/6001/src/pkg/encoding/xml/xml.go\nFile src/pkg/encoding/xml/xml.go (right):\n\nhttps://codereview.appspot.com/11975043/diff/6001/src/pkg/encoding/xml/xml.go#newcode1761\nsrc/pkg/encoding/xml/xml.go:1761: if !isInCharacterRange(r) || r == 0xFFFD {\nU+FFFD is a valid rune but it encodes to three bytes. the error condition will have width==1.\n\nyou therefore need to check r=='\\uFFFD' && width==1\n\nbut then we have this question: why are you checking for U+FFFD just to print U+FFFD?",
			"disapproval": false,
			"date": "2013-07-28 22:02:21.387290",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"alex@lx.lc",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11975043/diff/6001/src/pkg/encoding/xml/xml.go\nFile src/pkg/encoding/xml/xml.go (right):\n\nhttps://codereview.appspot.com/11975043/diff/6001/src/pkg/encoding/xml/xml.go#newcode1763\nsrc/pkg/encoding/xml/xml.go:1763: break\nah i see, the break is important. still, you need to check the width.",
			"disapproval": false,
			"date": "2013-07-28 22:03:56.818450",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "No test?\r\n On Jul 28, 2013 1:16 AM, <alex@lx.lc> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> xml: Do not pass through invalid utf8 bytes\r\n>\r\n> EscapeText now escapes 0xFFFD returned from DecodeRune as 0xFFFD, rather\r\n> than passing through the original byte.\r\n> Fixes issue 5880.\r\n>\r\n> Please review this at https://codereview.appspot.**com/11975043/<https://codereview.appspot.com/11975043/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/encoding/xml/xml.go\r\n>\r\n>\r\n> Index: src/pkg/encoding/xml/xml.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/encoding/xml/xml.go\r\n> +++ b/src/pkg/encoding/xml/xml.go\r\n> @@ -1758,7 +1758,7 @@\r\n>                 case '\\r':\r\n>                         esc = esc_cr\r\n>                 default:\r\n> -                       if !isInCharacterRange(r) {\r\n> +                       if !isInCharacterRange(r) || r == 0xFFFD {\r\n>                                 esc = esc_fffd\r\n>                                 break\r\n>                         }\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-28 22:13:57.466880",
			"approval": false
		},
		{
			"sender": "alex@lx.lc",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ADG,\r\n\r\nThank you for advice.  I'm sorry to come across as dense but would like to\r\nget this right - should this be its own new test file, or added as part of\r\nexisting xml_test.go?\r\n\r\nThanks,\r\nAlex\r\n\r\n\r\nOn Sun, Jul 28, 2013 at 10:31 PM, <adg@golang.org> wrote:\r\n\r\n> The test case is essentially there in the issue description. Here it is\r\n> as a test function:\r\n>\r\n> func TestIssue5880(t *testing.T) {\r\n>   type T []byte\r\n>   data, err := xml.Marshal(T{192,168,0,1})\r\n>   if err != nil {\r\n>      t.Errorf(\"Marshal error: %v'', err)\r\n>   }\r\n>   if !utf8.Valid(data) {\r\n>     t.Errorf(\"Marshal generated invalid UTF-8: %x\", data)\r\n>   }\r\n> }\r\n>\r\n> Please add this to your CL, and confirm that it fails before your fix is\r\n> applied and passes afterward.\r\n>\r\n> https://codereview.appspot.**com/11975043/<https://codereview.appspot.com/11975043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-29 02:36:04.711350",
			"approval": false
		},
		{
			"sender": "alex@lx.lc",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello,\r\n\r\n@Brad - This is my first attempt at submitting a change, apologies if I'm \r\nscrewing up the format - I did try to follow the contributing guidelines. \r\n I'm not sure what test is typical - add to existing test or attach a one \r\noff?  In this case, I changed the xml_test EscapeText, which previously \r\nonly checked to ensure byte 0 was handled properly, to also check bytes 192 \r\nand 168 per RSC's bug, and also \\uFFFD itself.  This is now part of this \r\nCL.   Please review and let me know if this is not what you meant and I \r\nshould redo a test somehow. \r\n  \r\n@RSC - I'm not sure what you mean by doing more width checking.  It took me \r\na bit also to figure out how the function was written, very clever.  In \r\nthis case of say - 192,168 - DecodeRune returns \\uFFFD, 1  which is \r\ncorrect.  This means only 192 is written, but as 3 byte \\uFFFD which seems \r\ncorrect.  Then 168 gets the same treatment.  So, even though it's writing 3 \r\nbytes, it only increments the width by one as it should.  In the case of \r\nvalid \\uFFFD, DecodeRune returns a width of three and the same three bytes. \r\n I did no editing to any of this functionality, and do not see why we must \r\ncheck width further because of this change.  Please guide if you feel \r\nfurther is necessary.\r\n\r\nRegards,\r\nAlex\r\n\r\nOn Sunday, July 28, 2013 6:13:55 PM UTC-4, Brad Fitzpatrick wrote:\r\n>\r\n> No test?\r\n>  On Jul 28, 2013 1:16 AM, <al...@lx.lc <javascript:>> wrote:\r\n>\r\n>> Reviewers: golang-dev1,\r\n>>\r\n>> Message:\r\n>> Hello golan...@googlegroups.com <javascript:>,\r\n>>\r\n>> I'd like you to review this change to\r\n>> https://code.google.com/p/go\r\n>>\r\n>>\r\n>> Description:\r\n>> xml: Do not pass through invalid utf8 bytes\r\n>>\r\n>> EscapeText now escapes 0xFFFD returned from DecodeRune as 0xFFFD, rather\r\n>> than passing through the original byte.\r\n>> Fixes issue 5880.\r\n>>\r\n>> Please review this at https://codereview.appspot.**com/11975043/<https://codereview.appspot.com/11975043/>\r\n>>\r\n>> Affected files:\r\n>>   M src/pkg/encoding/xml/xml.go\r\n>>\r\n>>\r\n>> Index: src/pkg/encoding/xml/xml.go\r\n>> ==============================**==============================**=======\r\n>> --- a/src/pkg/encoding/xml/xml.go\r\n>> +++ b/src/pkg/encoding/xml/xml.go\r\n>> @@ -1758,7 +1758,7 @@\r\n>>                 case '\\r':\r\n>>                         esc = esc_cr\r\n>>                 default:\r\n>> -                       if !isInCharacterRange(r) {\r\n>> +                       if !isInCharacterRange(r) || r == 0xFFFD {\r\n>>                                 esc = esc_fffd\r\n>>                                 break\r\n>>                         }\r\n>>\r\n>>\r\n>> -- \r\n>>\r\n>> ---You received this message because you are subscribed to the Google \r\n>> Groups \"golang-dev\" group.\r\n>> To unsubscribe from this group and stop receiving emails from it, send an \r\n>> email to golang-dev+...@**googlegroups.com <javascript:>.\r\n>> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n>> .\r\n>>\r\n>>\r\n>>  ",
			"disapproval": false,
			"date": "2013-07-29 02:23:36.694110",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"alex@lx.lc",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The test case is essentially there in the issue description. Here it is as a test function:\n\nfunc TestIssue5880(t *testing.T) {\n  type T []byte\n  data, err := xml.Marshal(T{192,168,0,1})\n  if err != nil {\n     t.Errorf(\"Marshal error: %v'', err)\n  }\n  if !utf8.Valid(data) {\n    t.Errorf(\"Marshal generated invalid UTF-8: %x\", data)\n  } \n}\n\nPlease add this to your CL, and confirm that it fails before your fix is applied and passes afterward.",
			"disapproval": false,
			"date": "2013-07-29 02:31:40.567240",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 29 July 2013 12:36, Alex Skinner <alex@lx.lc> wrote:\r\n\r\n> Thank you for advice.  I'm sorry to come across as dense but would like to\r\n> get this right - should this be its own new test file, or added as part of\r\n> existing xml_test.go?\r\n\r\n\r\nPart of xml_test.go is fine.\r\n\r\nThanks for your help!\r\n",
			"disapproval": false,
			"date": "2013-07-29 02:39:31.619550",
			"approval": false
		},
		{
			"sender": "alex@lx.lc",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you very much, Andrew.\r\n\r\nI've resubmitted xml_test.go with properly formatted testcase provided, and\r\nverified that it does pass.\r\n\r\nRob - Ignore previous width comments in my last message(incorrectly\r\naddressed to RSC - sorry!).  You're right - although it works without width\r\nchecking by nature of design, it's unnecessary to break on an actual valid\r\n0xFFFD input with a 3 byte width.   So xml.go has been updated to ensure (r\r\n== 0xFFFD && width == 1) before breaking, which indicates an error decoding\r\nthe rune.\r\n\r\nPlease review and thanks for guidance.\r\n\r\nThanks,\r\nAlex\r\n\r\n\r\nOn Sun, Jul 28, 2013 at 10:39 PM, Andrew Gerrand <adg@golang.org> wrote:\r\n\r\n>\r\n> On 29 July 2013 12:36, Alex Skinner <alex@lx.lc> wrote:\r\n>\r\n>> Thank you for advice.  I'm sorry to come across as dense but would like\r\n>> to get this right - should this be its own new test file, or added as part\r\n>> of existing xml_test.go?\r\n>\r\n>\r\n> Part of xml_test.go is fine.\r\n>\r\n> Thanks for your help!\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-29 03:07:56.883650",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"alex@lx.lc",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "looks good to me. leaving for adg.",
			"disapproval": false,
			"date": "2013-07-30 01:48:02.704030",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"alex@lx.lc",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "please edit the CL description to start\n\nencoding/xml:\n\nrather than just\n\nxml:",
			"disapproval": false,
			"date": "2013-07-30 01:48:30.814600",
			"approval": false
		},
		{
			"sender": "alex@lx.lc",
			"recipients": [
				"alex@lx.lc",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/30 01:48:30, r wrote:\n> please edit the CL description to start\n> \n> encoding/xml:\n> \n> rather than just\n> \n> xml:\n\nDone.  Thank you!",
			"disapproval": false,
			"date": "2013-07-30 01:59:33.601180",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"alex@lx.lc",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nHave you signed the CLA? http://golang.org/s/cla",
			"disapproval": false,
			"date": "2013-07-30 03:33:18.078060",
			"approval": true
		},
		{
			"sender": "alex@lx.lc",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for the link.  I've just signed the individual CLA.\r\n\r\nAlex\r\n\r\n\r\nOn Mon, Jul 29, 2013 at 11:33 PM, <adg@golang.org> wrote:\r\n\r\n> LGTM\r\n>\r\n> Have you signed the CLA? http://golang.org/s/cla\r\n>\r\n> https://codereview.appspot.**com/11975043/<https://codereview.appspot.com/11975043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-30 04:05:42.800520",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"alex@lx.lc",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=986281309b3e ***\n\nencoding/xml: Do not pass through invalid utf8 bytes\n\nEscapeText now escapes 0xFFFD returned from DecodeRune as 0xFFFD, rather than passing through the original byte.\nFixes issue 5880.\n\nR=golang-dev, r, bradfitz, adg\nCC=golang-dev\nhttps://codereview.appspot.com/11975043\n\nCommitter: Andrew Gerrand <adg@golang.org>",
			"disapproval": false,
			"date": "2013-07-30 04:11:54.524050",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for the fix! :-)\r\n",
			"disapproval": false,
			"date": "2013-07-30 04:13:35.369920",
			"approval": false
		}
	],
	"owner_email": "alex@lx.lc",
	"private": false,
	"base_url": "",
	"owner": "axaxs",
	"subject": "code review 11975043: encoding/xml: Do not pass through invalid utf8 bytes",
	"created": "2013-07-28 00:41:17.034110",
	"patchsets": [
		1,
		3001,
		6001,
		14001,
		17001,
		16003,
		15003
	],
	"modified": "2013-07-30 04:13:35.697120",
	"closed": false,
	"issue": 11975043
}