{
	"description": "runtime: avoid hashing strings until needed in single-bucket maps\n\nThis changes the map lookup behavior for string maps with 2-8 keys.\n\nThere was already previously a fastpath for 0 items and 1 item.\n\nNow, if a string-keyed map has <= 8 items, first check all the\nkeys for length first. If only one has the right length, then\njust check it for equality and avoid hashing altogether. Once\nthe map has more than 8 items, always hash like normal.\n\nI don't know why some of the other non-string map benchmarks\ngot faster. This was with benchtime=2s, multiple times. I haven't\nanything else getting slower, though.\n\nbenchmark                             old ns/op    new ns/op    delta\nBenchmarkHashStringSpeed                     37           34   -8.20%\nBenchmarkHashInt32Speed                      32           29  -10.67%\nBenchmarkHashInt64Speed                      31           27  -12.82%\nBenchmarkHashStringArraySpeed               105           99   -5.43%\nBenchmarkMegMap                          274206       255153   -6.95%\nBenchmarkMegOneMap                           27           23  -14.80%\nBenchmarkMegEqMap                        148332       116089  -21.74%\nBenchmarkMegEmptyMap                          4            3  -12.72%\nBenchmarkSmallStrMap                         22           22   -0.89%\nBenchmarkMapStringKeysEight_32               42           23  -43.71%\nBenchmarkMapStringKeysEight_64               55           23  -56.96%\nBenchmarkMapStringKeysEight_1M           279688           24  -99.99%\nBenchmarkIntMap                              16           15  -10.18%\nBenchmarkRepeatedLookupStrMapKey32           40           37   -8.15%\nBenchmarkRepeatedLookupStrMapKey1M       287918       272980   -5.19%\nBenchmarkNewEmptyMap                        156          130  -16.67%",
	"cc": [
		"golang-dev@googlegroups.com",
		"khr@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-04-03 00:59:48.720410",
			"approval": false
		},
		{
			"sender": "khr@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7641057/diff/21001/src/pkg/runtime/hashmap_fast.c\nFile src/pkg/runtime/hashmap_fast.c (right):\n\nhttps://codereview.appspot.com/7641057/diff/21001/src/pkg/runtime/hashmap_fast.c#newcode65\nsrc/pkg/runtime/hashmap_fast.c:65: }\nkeymaybe >= 0 might be one instruction better than keymaybe != -1\n\nhttps://codereview.appspot.com/7641057/diff/21001/src/pkg/runtime/hashmap_fast.c#newcode71\nsrc/pkg/runtime/hashmap_fast.c:71: k = (KEYTYPE*)b->data + keymaybe;\nNot sure if it is worth it, but you might want to catch equal length and equal str if you see it while iterating through the bucket.",
			"disapproval": false,
			"date": "2013-04-03 02:59:15.637120",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-04-03 01:00:22.639550",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"khr@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=47053fd8f41e ***\n\nruntime: avoid hashing strings until needed in single-bucket maps\n\nThis changes the map lookup behavior for string maps with 2-8 keys.\n\nThere was already previously a fastpath for 0 items and 1 item.\n\nNow, if a string-keyed map has <= 8 items, first check all the\nkeys for length first. If only one has the right length, then\njust check it for equality and avoid hashing altogether. Once\nthe map has more than 8 items, always hash like normal.\n\nI don't know why some of the other non-string map benchmarks\ngot faster. This was with benchtime=2s, multiple times. I haven't\nanything else getting slower, though.\n\nbenchmark                             old ns/op    new ns/op    delta\nBenchmarkHashStringSpeed                     37           34   -8.20%\nBenchmarkHashInt32Speed                      32           29  -10.67%\nBenchmarkHashInt64Speed                      31           27  -12.82%\nBenchmarkHashStringArraySpeed               105           99   -5.43%\nBenchmarkMegMap                          274206       255153   -6.95%\nBenchmarkMegOneMap                           27           23  -14.80%\nBenchmarkMegEqMap                        148332       116089  -21.74%\nBenchmarkMegEmptyMap                          4            3  -12.72%\nBenchmarkSmallStrMap                         22           22   -0.89%\nBenchmarkMapStringKeysEight_32               42           23  -43.71%\nBenchmarkMapStringKeysEight_64               55           23  -56.96%\nBenchmarkMapStringKeysEight_1M           279688           24  -99.99%\nBenchmarkIntMap                              16           15  -10.18%\nBenchmarkRepeatedLookupStrMapKey32           40           37   -8.15%\nBenchmarkRepeatedLookupStrMapKey1M       287918       272980   -5.19%\nBenchmarkNewEmptyMap                        156          130  -16.67%\n\nR=golang-dev, khr\nCC=golang-dev\nhttps://codereview.appspot.com/7641057\n\nhttps://codereview.appspot.com/7641057/diff/21001/src/pkg/runtime/hashmap_fast.c\nFile src/pkg/runtime/hashmap_fast.c (right):\n\nhttps://codereview.appspot.com/7641057/diff/21001/src/pkg/runtime/hashmap_fast.c#newcode65\nsrc/pkg/runtime/hashmap_fast.c:65: }\nOn 2013/04/03 02:59:16, khr wrote:\n> keymaybe >= 0 might be one instruction better than keymaybe != -1\n\nDone.\n\nhttps://codereview.appspot.com/7641057/diff/21001/src/pkg/runtime/hashmap_fast.c#newcode71\nsrc/pkg/runtime/hashmap_fast.c:71: k = (KEYTYPE*)b->data + keymaybe;\nOn 2013/04/03 02:59:16, khr wrote:\n> Not sure if it is worth it, but you might want to catch equal length and equal\n> str if you see it while iterating through the bucket.\n\nAdded a TODO instead.",
			"disapproval": false,
			"date": "2013-04-03 03:58:33.649290",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 7641057: runtime: avoid hashing strings until needed in single-b...",
	"created": "2013-03-28 00:48:35.648100",
	"patchsets": [
		1,
		2001,
		7001,
		10001,
		13001,
		16001,
		18001,
		21001,
		24001,
		27001
	],
	"modified": "2013-04-03 03:58:35.852260",
	"closed": true,
	"issue": 7641057
}