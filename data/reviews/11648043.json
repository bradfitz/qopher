{
	"description": "crypto/md5: native arm assembler version\n\nAn ARM version of md5block.go with a big improvement in\nthroughput (up to 2.5x) and a reduction in object size (21%).\n\nCode size\n\n  Before 3100 bytes\n  After 2424 bytes\n  21% smaller\n\nBenchmarks on Rasperry Pi\n\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkHash8Bytes                 11703         6636  -43.30%\nBenchmarkHash1K                     38057        21881  -42.50%\nBenchmarkHash8K                    208131       142735  -31.42%\nBenchmarkHash8BytesUnaligned        11457         6570  -42.66%\nBenchmarkHash1KUnaligned            69334        26841  -61.29%\nBenchmarkHash8KUnaligned           455120       182223  -59.96%\n\nbenchmark                        old MB/s     new MB/s  speedup\nBenchmarkHash8Bytes                  0.68         1.21    1.78x\nBenchmarkHash1K                     26.91        46.80    1.74x\nBenchmarkHash8K                     39.36        57.39    1.46x\nBenchmarkHash8BytesUnaligned         0.70         1.22    1.74x\nBenchmarkHash1KUnaligned            14.77        38.15    2.58x\nBenchmarkHash8KUnaligned            18.00        44.96    2.50x\n\nbenchmark                      old allocs   new allocs    delta\nBenchmarkHash8Bytes                     1            0  -100.00%\nBenchmarkHash1K                         2            0  -100.00%\nBenchmarkHash8K                         2            0  -100.00%\nBenchmarkHash8BytesUnaligned            1            0  -100.00%\nBenchmarkHash1KUnaligned                2            0  -100.00%\nBenchmarkHash8KUnaligned                2            0  -100.00%\n\nbenchmark                       old bytes    new bytes    delta\nBenchmarkHash8Bytes                    64            0  -100.00%\nBenchmarkHash1K                       128            0  -100.00%\nBenchmarkHash8K                       128            0  -100.00%\nBenchmarkHash8BytesUnaligned           64            0  -100.00%\nBenchmarkHash1KUnaligned              128            0  -100.00%\nBenchmarkHash8KUnaligned              128            0  -100.00%\n\nThis also adds another test which makes sure that the sums\nover larger blocks work properly. I wrote this test when I was\nworried about memory corruption.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"bradfitz@golang.org",
		"rsc@golang.org",
		"ajstarks@gmail.com",
		"minux.ma@gmail.com",
		"remyoudompheng@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "nickcw@gmail.com",
			"recipients": [
				"nickcw@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-07-21 07:55:18.767700",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Protip, misc/benchcmp before.txt after.txt\r\n\r\n\r\n\r\nOn 21/07/2013, at 17:55, nickcw@gmail.com wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n> \r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n> \r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n> \r\n> \r\n> Description:\r\n> crypto/md5: native arm assembler version\r\n> \r\n> An ARM version of md5block.go with a big improvement in\r\n> throughput (up to 150%) and a reduction in object size (21%).\r\n> \r\n> Code size\r\n> \r\n>  Before 3100 bytes\r\n>  After 2440 bytes\r\n>  21% smaller\r\n> \r\n> Benchmarks\r\n> \r\n> Before on Raspberry PI\r\n> \r\n> PASS\r\n> BenchmarkHash8Bytes               200000             11703 ns/op\r\n>  0.68 MB/s          64 B/op          1 allocs/op\r\n> BenchmarkHash1K                    50000             38057 ns/op\r\n> 26.91 MB/s         128 B/op          2 allocs/op\r\n> BenchmarkHash8K                    10000            208131 ns/op\r\n> 39.36 MB/s         128 B/op          2 allocs/op\r\n> BenchmarkHash8BytesUnaligned      200000             11457 ns/op\r\n>  0.70 MB/s          64 B/op          1 allocs/op\r\n> BenchmarkHash1KUnaligned           50000             69334 ns/op\r\n> 14.77 MB/s         128 B/op          2 allocs/op\r\n> BenchmarkHash8KUnaligned            5000            455120 ns/op\r\n> 18.00 MB/s         128 B/op          2 allocs/op\r\n> \r\n> After on Raspberry PI\r\n> \r\n> PASS\r\n> BenchmarkHash8Bytes               500000              7091 ns/op\r\n>  1.13 MB/s   +66%    0 B/op          0 allocs/op\r\n> BenchmarkHash1K                   100000             22469 ns/op\r\n> 45.57 MB/s   +69%    0 B/op          0 allocs/op\r\n> BenchmarkHash8K                    10000            144155 ns/op\r\n> 56.83 MB/s   +44%    0 B/op          0 allocs/op\r\n> BenchmarkHash8BytesUnaligned      500000              7025 ns/op\r\n>  1.14 MB/s   +62%    0 B/op          0 allocs/op\r\n> BenchmarkHash1KUnaligned          100000             27727 ns/op\r\n> 36.93 MB/s  +150%    0 B/op          0 allocs/op\r\n> BenchmarkHash8KUnaligned           10000            185963 ns/op\r\n> 44.05 MB/s  +140%    0 B/op          0 allocs/op\r\n> \r\n> This also adds another test which makes sure that the sums\r\n> over larger blocks work properly. I wrote this test when I was\r\n> worried about memory corruption.\r\n> \r\n> Please review this at https://codereview.appspot.com/11648043/\r\n> \r\n> Affected files:\r\n>  M src/pkg/crypto/md5/gen.go\r\n>  M src/pkg/crypto/md5/md5_test.go\r\n>  M src/pkg/crypto/md5/md5block.go\r\n>  A src/pkg/crypto/md5/md5block_arm.s\r\n>  M src/pkg/crypto/md5/md5block_decl.go\r\n> \r\n> \r\n> -- \r\n> \r\n> ---You received this message because you are subscribed to the Google Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n> \r\n> \r\n",
			"disapproval": false,
			"date": "2013-07-21 08:00:10.248230",
			"approval": false
		},
		{
			"sender": "nickcw@gmail.com",
			"recipients": [
				"nickcw@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/21 08:00:10, dfc wrote:\n> Protip, misc/benchcmp before.txt after.txt\n\nI've updated the description with that - thanks!",
			"disapproval": false,
			"date": "2013-07-21 08:21:55.272550",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "No worries, I'm delighted to have more people enthusiastic to work on arm. \r\n\r\n\r\n\r\nOn 21/07/2013, at 18:21, nickcw@gmail.com wrote:\r\n\r\n> On 2013/07/21 08:00:10, dfc wrote:\r\n>> Protip, misc/benchcmp before.txt after.txt\r\n> \r\n> I've updated the description with that - thanks!\r\n> \r\n> https://codereview.appspot.com/11648043/\r\n",
			"disapproval": false,
			"date": "2013-07-21 08:23:10.826720",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"nickcw@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Very nicely done, very clear, thank you.\n\nCc'ing remy and minux who more about the assembler.\n\nhttps://codereview.appspot.com/11648043/diff/6001/src/pkg/crypto/md5/md5block_arm.s\nFile src/pkg/crypto/md5/md5block_arm.s (right):\n\nhttps://codereview.appspot.com/11648043/diff/6001/src/pkg/crypto/md5/md5block_arm.s#newcode37\nsrc/pkg/crypto/md5/md5block_arm.s:37: TEXT\t\u00b7block(SB), 7, $(20*4)-16\nI've never seen this 20*4 form before, does it actually work ?\n\nMy marking this method textflag 7 you're saying it won't have a split stack check. It sounds unlikely that 80 bytes will always be available on the stack.",
			"disapproval": false,
			"date": "2013-07-22 04:19:53.631360",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"nickcw@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Results from linux/arm on RPi\n\nraspberrypi(~/go/src/pkg/crypto/md5) % ~/go/misc/benchcmp {old,new}.txt\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkHash8Bytes                 11145         6808  -38.91%\nBenchmarkHash1K                     36886        22407  -39.25%\nBenchmarkHash8K                    207408       143808  -30.66%\nBenchmarkHash8BytesUnaligned        11206         6874  -38.66%\nBenchmarkHash1KUnaligned            68679        27387  -60.12%\nBenchmarkHash8KUnaligned           456961       183253  -59.90%\n\nbenchmark                        old MB/s     new MB/s  speedup\nBenchmarkHash8Bytes                  0.72         1.18    1.64x\nBenchmarkHash1K                     27.76        45.70    1.65x\nBenchmarkHash8K                     39.50        56.96    1.44x\nBenchmarkHash8BytesUnaligned         0.71         1.16    1.63x\nBenchmarkHash1KUnaligned            14.91        37.39    2.51x\nBenchmarkHash8KUnaligned            17.93        44.70    2.49x",
			"disapproval": false,
			"date": "2013-07-22 04:20:39.529060",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Next up: SHA-1? :-)\r\n\r\nCamlistore on Raspberry Pi would like that.\r\n\r\n\r\n\r\n\r\nOn Sun, Jul 21, 2013 at 9:20 PM, <dave@cheney.net> wrote:\r\n\r\n> Results from linux/arm on RPi\r\n>\r\n> raspberrypi(~/go/src/pkg/**crypto/md5) % ~/go/misc/benchcmp {old,new}.txt\r\n> benchmark                       old ns/op    new ns/op    delta\r\n> BenchmarkHash8Bytes                 11145         6808  -38.91%\r\n> BenchmarkHash1K                     36886        22407  -39.25%\r\n> BenchmarkHash8K                    207408       143808  -30.66%\r\n> BenchmarkHash8BytesUnaligned        11206         6874  -38.66%\r\n> BenchmarkHash1KUnaligned            68679        27387  -60.12%\r\n> BenchmarkHash8KUnaligned           456961       183253  -59.90%\r\n>\r\n> benchmark                        old MB/s     new MB/s  speedup\r\n> BenchmarkHash8Bytes                  0.72         1.18    1.64x\r\n> BenchmarkHash1K                     27.76        45.70    1.65x\r\n> BenchmarkHash8K                     39.50        56.96    1.44x\r\n> BenchmarkHash8BytesUnaligned         0.71         1.16    1.63x\r\n> BenchmarkHash1KUnaligned            14.91        37.39    2.51x\r\n> BenchmarkHash8KUnaligned            17.93        44.70    2.49x\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.**com/11648043/<https://codereview.appspot.com/11648043/>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-22 04:23:17.048660",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"nickcw@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "linux/arm pandaboard\n\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkHash8Bytes                  4419         3333  -24.58%\nBenchmarkHash1K                     15271        13449  -11.93%\nBenchmarkHash8K                     91361        91065   -0.32%\nBenchmarkHash8BytesUnaligned         4408         3341  -24.21%\nBenchmarkHash1KUnaligned            30836        15363  -50.18%\nBenchmarkHash8KUnaligned           215425       106409  -50.61%\n\nbenchmark                        old MB/s     new MB/s  speedup\nBenchmarkHash8Bytes                  1.81         2.40    1.33x\nBenchmarkHash1K                     67.05        76.13    1.14x\nBenchmarkHash8K                     89.67        89.96    1.00x\nBenchmarkHash8BytesUnaligned         1.81         2.39    1.32x\nBenchmarkHash1KUnaligned            33.21        66.65    2.01x\nBenchmarkHash8KUnaligned            38.03        76.99    2.02x",
			"disapproval": false,
			"date": "2013-07-22 12:27:06.672590",
			"approval": false
		},
		{
			"sender": "nickcw@gmail.com",
			"recipients": [
				"nickcw@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11648043/diff/6001/src/pkg/crypto/md5/md5block_arm.s\nFile src/pkg/crypto/md5/md5block_arm.s (right):\n\nhttps://codereview.appspot.com/11648043/diff/6001/src/pkg/crypto/md5/md5block_arm.s#newcode37\nsrc/pkg/crypto/md5/md5block_arm.s:37: TEXT\t\u00b7block(SB), 7, $(20*4)-16\nOn 2013/07/22 04:19:53, dfc wrote:\n> I've never seen this 20*4 form before, does it actually work ?\n\nThe assembler generated is correct\n\nstr     r14, [r13, #-84]!\n\nSo I guess so!\n \n> My marking this method textflag 7 you're saying it won't have a split stack\n> check. It sounds unlikely that 80 bytes will always be available on the stack.\n\nMy reading of pkg/runtime/stack.h is that if you use < 128 bytes of stack you are OK with non split stacks, but that may be wide of the truth!\n\n        // The maximum number of bytes that a chain of NOSPLIT\n        // functions can use.\n        StackLimit = StackGuard - StackSystem - StackSmall,\n\nStackLimit is 128 on ARM linux.\n\nmd5.block uses 84 bytes and runtime.memmove uses 8 bytes.\n\nNote that crypto/sha1/sha1block_386.s this which uses even more stack?\n\nTEXT \u00b7block(SB),7,$92-16\n\nI think to make a stack check I'd turn the 7 into a 3 - is that right?",
			"disapproval": false,
			"date": "2013-07-22 15:37:40.358780",
			"approval": false
		},
		{
			"sender": "nickcw@gmail.com",
			"recipients": [
				"nickcw@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2013-07-22 18:31:12.362550",
			"approval": false
		},
		{
			"sender": "nickcw@gmail.com",
			"recipients": [
				"nickcw@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/22 12:27:06, dfc wrote:\n> linux/arm pandaboard\n\nInteresting - thanks for testing on other ARM hardware.\n\nDo you have any ARM hardware which really needs the non-aligned stuff? All my ARM hardware does new style non aligned reads.\n\nI'm going to do another revision to sort out (SP) vs (R13) confusion",
			"disapproval": false,
			"date": "2013-07-22 18:32:17.887750",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"nickcw@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11648043/diff/6001/src/pkg/crypto/md5/md5block_arm.s\nFile src/pkg/crypto/md5/md5block_arm.s (right):\n\nhttps://codereview.appspot.com/11648043/diff/6001/src/pkg/crypto/md5/md5block_arm.s#newcode5\nsrc/pkg/crypto/md5/md5block_arm.s:5: // ARM version of md5block.go by Nick Craig-Wood\nDelete. There are no author lines in the Go tree. We'll use the hg history if we need to find you.\n\nhttps://codereview.appspot.com/11648043/diff/6001/src/pkg/crypto/md5/md5block_arm.s#newcode37\nsrc/pkg/crypto/md5/md5block_arm.s:37: TEXT\t\u00b7block(SB), 7, $(20*4)-16\nYes, it works, but please just write 80.\nTo allow it to split the stack you'd turn the 7 into a 0, by dropping the \"7,\" entirely. (Long story.)\nAs long as the linker isn't telling you about a stack split overflow, you're fine.\n\nhttps://codereview.appspot.com/11648043/diff/6001/src/pkg/crypto/md5/md5block_arm.s#newcode40\nsrc/pkg/crypto/md5/md5block_arm.s:40: BIC.S\t$63, R(t0)\t\t// make a multiple of 64\nYou can assume the length is a multiple of 64. The other assembly implementations do.\n\nhttps://codereview.appspot.com/11648043/diff/6001/src/pkg/crypto/md5/md5block_arm.s#newcode41\nsrc/pkg/crypto/md5/md5block_arm.s:41: BEQ\tend\t\t\t// end if none\nYou can also assume the length is nonzero. The other implementations do not, but they could.\n\nhttps://codereview.appspot.com/11648043/diff/6001/src/pkg/crypto/md5/md5block_arm.s#newcode78\nsrc/pkg/crypto/md5/md5block_arm.s:78: ADD\tR(const), R(t0)\t\t\t; \\\nIf you do\n\nADD $0x######, R(t0)\n\nor\n\nMOVW $0x######(R(t0)), R(t0)\n\ndoes the linker emit a load of a PC-relative constant into R11 and then use R11 in the ADD?\nIf so, is that faster than doing the MOVM.IA.W to load 4 at a time from farther away?\n\nhttps://codereview.appspot.com/11648043/diff/6001/src/pkg/crypto/md5/md5block_arm.s#newcode232\nsrc/pkg/crypto/md5/md5block_arm.s:232: // Md5 constants table\nMD5\n\nhttps://codereview.appspot.com/11648043/diff/6001/src/pkg/crypto/md5/md5block_arm.s#newcode233\nsrc/pkg/crypto/md5/md5block_arm.s:233: TEXT\t_md5_block_table(SB),7,$-4\nPlease make this (read-only) data. See the masks and shifts tables used for AES in ../../runtime/*.s.",
			"disapproval": false,
			"date": "2013-07-22 18:41:51.521260",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"nickcw@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/22 18:32:17, Nick Craig-Wood wrote:\n> On 2013/07/22 12:27:06, dfc wrote:\n> > linux/arm pandaboard\n> \n> Interesting - thanks for testing on other ARM hardware.\n> \n> Do you have any ARM hardware which really needs the non-aligned stuff? All my\n> ARM hardware does new style non aligned reads.\n\nI have a Kickwood based ARMv5 host which I have configured to scream on unaligned memory access for just such an occasion. I think it is always worth doing the unaligned check as the ARM documentation says unaligned accesses at least cost two bus cycles even on ARMv6 and above. Memory bandwidth is not something any of my ARM hosts have to spare.",
			"disapproval": false,
			"date": "2013-07-22 22:40:55.771780",
			"approval": false
		},
		{
			"sender": "ajstarks@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Visualization of the Raspi and Pandaboard benchmarks:\r\n\r\nhttp://www.flickr.com/photos/ajstarks/9348936988/\r\n\r\n\r\nOn Monday, July 22, 2013 8:27:07 AM UTC-4, Dave Cheney wrote:\r\n>\r\n> linux/arm pandaboard \r\n>\r\n> benchmark                       old ns/op    new ns/op    delta \r\n> BenchmarkHash8Bytes                  4419         3333  -24.58% \r\n> BenchmarkHash1K                     15271        13449  -11.93% \r\n> BenchmarkHash8K                     91361        91065   -0.32% \r\n> BenchmarkHash8BytesUnaligned         4408         3341  -24.21% \r\n> BenchmarkHash1KUnaligned            30836        15363  -50.18% \r\n> BenchmarkHash8KUnaligned           215425       106409  -50.61% \r\n>\r\n> benchmark                        old MB/s     new MB/s  speedup \r\n> BenchmarkHash8Bytes                  1.81         2.40    1.33x \r\n> BenchmarkHash1K                     67.05        76.13    1.14x \r\n> BenchmarkHash8K                     89.67        89.96    1.00x \r\n> BenchmarkHash8BytesUnaligned         1.81         2.39    1.32x \r\n> BenchmarkHash1KUnaligned            33.21        66.65    2.01x \r\n> BenchmarkHash8KUnaligned            38.03        76.99    2.02x \r\n>\r\n> https://codereview.appspot.com/11648043/ \r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-23 02:53:47.008780",
			"approval": false
		},
		{
			"sender": "nickcw@gmail.com",
			"recipients": [
				"nickcw@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"ajstarks@gmail.com",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for the feedback - I'll fix those things and resubmit shortly.\n\nhttps://codereview.appspot.com/11648043/diff/6001/src/pkg/crypto/md5/md5block_arm.s\nFile src/pkg/crypto/md5/md5block_arm.s (right):\n\nhttps://codereview.appspot.com/11648043/diff/6001/src/pkg/crypto/md5/md5block_arm.s#newcode78\nsrc/pkg/crypto/md5/md5block_arm.s:78: ADD\tR(const), R(t0)\t\t\t; \\\nOn 2013/07/22 18:41:51, rsc wrote:\n> If you do\n> \n> ADD $0x######, R(t0)\n\nThis generates\n\n  LDR r11, 0xxxx(PC)\n  ADD R(t0), R(t0), r11\n\n> MOVW $0x######(R(t0)), R(t0)\n\nI imagine that generates the same code but I haven't tried it.  There isn't really any alternative in native instructions anyway since the constants in question don't fit into an immediate load.\n \n> does the linker emit a load of a PC-relative constant into R11 and then use R11\n> in the ADD?\n> If so, is that faster than doing the MOVM.IA.W to load 4 at a time from farther\n> away?\n\nIgnoring cache effects, the LDR/MOVW takes one cycle on an ARM A8 (for instance) whereas the 4 register MOVM/LDM load only takes 2 cycles which is a win of 2 cycles and 12 bytes of instruction cache.\n\nI did in fact try the ADD version you suggested and it was quite a bit slower in the benchmarks (I don't have the exact figures any more though) - it was one of my intermediate versions.\n\nIn old and modern ARM MOVM is the same or faster than multiple MOVW s if you are loading >= 2 registers as far as I know.\n\nhttps://codereview.appspot.com/11648043/diff/6001/src/pkg/crypto/md5/md5block_arm.s#newcode233\nsrc/pkg/crypto/md5/md5block_arm.s:233: TEXT\t_md5_block_table(SB),7,$-4\nOn 2013/07/22 18:41:51, rsc wrote:\n> Please make this (read-only) data. See the masks and shifts tables used for AES\n> in ../../runtime/*.s.\n\nOK I'll have a go with that.\n\nIn an ideal world one would quad word align the table to minimise the number of cache lines it uses but I don't think that is possible is it?",
			"disapproval": false,
			"date": "2013-07-23 08:25:13.796550",
			"approval": false
		},
		{
			"sender": "nickcw@gmail.com",
			"recipients": [
				"nickcw@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"ajstarks@gmail.com",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I hope I've addressed everyone's concerns - please take another look!\n\nThe changes since the last revision are\n  * Remove attribution\n  * Remove 64 byte alignment\n  * Remove check for 0 length\n  * Re-arrange stack locals to use -n(SP) addressing instead of +n(R13)\n  * Make sure we don't re-use arguments for memmove (uses 4 extra bytes of stack)\n  * Use MOVM.IB to quickly write arguments for memmove\n  * Put table of constants into read only memory\n  * Remove trailing whitespace\n\nThese changes have reduced the code size and increased the speed slightly as a bonus!",
			"disapproval": false,
			"date": "2013-07-23 22:17:56.303810",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"nickcw@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"ajstarks@gmail.com",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. Over to rsc for his sign off.",
			"disapproval": false,
			"date": "2013-07-24 10:49:03.771600",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"nickcw@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"ajstarks@gmail.com",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/11648043/diff/25001/src/pkg/crypto/md5/md5block_arm.s\nFile src/pkg/crypto/md5/md5block_arm.s (right):\n\nhttps://codereview.appspot.com/11648043/diff/25001/src/pkg/crypto/md5/md5block_arm.s#newcode297\nsrc/pkg/crypto/md5/md5block_arm.s:297: GLOBL\t\u00b7table(SB), $256\n,8,$256 please; that will make it read-only data",
			"disapproval": false,
			"date": "2013-07-24 13:08:44.492570",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"nickcw@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"ajstarks@gmail.com",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This built fine on my arm5 host. If there are no objections I will address rsc's final comment and submit this on behalf of Nick.",
			"disapproval": false,
			"date": "2013-07-25 02:30:26.407730",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"nickcw@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"ajstarks@gmail.com",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=40bbcafc819c ***\n\ncrypto/md5: native arm assembler version\n\nAn ARM version of md5block.go with a big improvement in\nthroughput (up to 2.5x) and a reduction in object size (21%).\n\nCode size\n\n  Before 3100 bytes\n  After 2424 bytes\n  21% smaller\n\nBenchmarks on Rasperry Pi\n\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkHash8Bytes                 11703         6636  -43.30%\nBenchmarkHash1K                     38057        21881  -42.50%\nBenchmarkHash8K                    208131       142735  -31.42%\nBenchmarkHash8BytesUnaligned        11457         6570  -42.66%\nBenchmarkHash1KUnaligned            69334        26841  -61.29%\nBenchmarkHash8KUnaligned           455120       182223  -59.96%\n\nbenchmark                        old MB/s     new MB/s  speedup\nBenchmarkHash8Bytes                  0.68         1.21    1.78x\nBenchmarkHash1K                     26.91        46.80    1.74x\nBenchmarkHash8K                     39.36        57.39    1.46x\nBenchmarkHash8BytesUnaligned         0.70         1.22    1.74x\nBenchmarkHash1KUnaligned            14.77        38.15    2.58x\nBenchmarkHash8KUnaligned            18.00        44.96    2.50x\n\nbenchmark                      old allocs   new allocs    delta\nBenchmarkHash8Bytes                     1            0  -100.00%\nBenchmarkHash1K                         2            0  -100.00%\nBenchmarkHash8K                         2            0  -100.00%\nBenchmarkHash8BytesUnaligned            1            0  -100.00%\nBenchmarkHash1KUnaligned                2            0  -100.00%\nBenchmarkHash8KUnaligned                2            0  -100.00%\n\nbenchmark                       old bytes    new bytes    delta\nBenchmarkHash8Bytes                    64            0  -100.00%\nBenchmarkHash1K                       128            0  -100.00%\nBenchmarkHash8K                       128            0  -100.00%\nBenchmarkHash8BytesUnaligned           64            0  -100.00%\nBenchmarkHash1KUnaligned              128            0  -100.00%\nBenchmarkHash8KUnaligned              128            0  -100.00%\n\nThis also adds another test which makes sure that the sums\nover larger blocks work properly. I wrote this test when I was\nworried about memory corruption.\n\nR=golang-dev, dave, bradfitz, rsc, ajstarks\nCC=golang-dev, minux.ma, remyoudompheng\nhttps://codereview.appspot.com/11648043\n\nCommitter: Dave Cheney <dave@cheney.net>",
			"disapproval": false,
			"date": "2013-07-25 03:24:47.316340",
			"approval": false
		}
	],
	"owner_email": "nickcw@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Nick Craig-Wood",
	"subject": "code review 11648043: crypto/md5: native arm assembler version",
	"created": "2013-07-21 07:51:45.172150",
	"patchsets": [
		1,
		3001,
		6001,
		25001
	],
	"modified": "2013-07-25 03:24:48.128810",
	"closed": false,
	"issue": 11648043
}