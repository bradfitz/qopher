{
	"description": "cmd/gc: avoid right recursion in unary expression parsing.\n\nLeft recursion allows for tail-call optimization and avoids\noverflowing Bison stack.\n\nFixes issue 5598.",
	"cc": [
		"golang-dev@googlegroups.com",
		"arnehormann@gmail.com",
		"gobot@golang.org"
	],
	"reviewers": [
		"rsc@golang.org",
		"daniel.morsing@gmail.com",
		"dave@cheney.net"
	],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-06-01 11:18:01.096250",
			"approval": false
		},
		{
			"sender": "arnehormann@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"arnehormann@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/01 11:18:01, remyoudompheng wrote:\n> Hello mailto:golang-dev@googlegroups.com (cc: mailto:golang-dev@googlegroups.com),\n> \n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n\ny.tab.c shows the \"Can't parse the patch to chunks\" error for me.",
			"disapproval": false,
			"date": "2013-06-01 11:27:45.176910",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"arnehormann@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/01 11:27:45, ahormann wrote:\n> On 2013/06/01 11:18:01, remyoudompheng wrote:\n> > Hello mailto:golang-dev@googlegroups.com (cc:\n> mailto:golang-dev@googlegroups.com),\n> > \n> > I'd like you to review this change to\n> > https://go.googlecode.com/hg/\n> \n> y.tab.c shows the \"Can't parse the patch to chunks\" error for me.\n\nI'm afraid the issue is deterministic. The file is auto-generated, you can look at the unified diff.",
			"disapproval": false,
			"date": "2013-06-01 11:32:25.924200",
			"approval": false
		},
		{
			"sender": "arnehormann@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"arnehormann@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/01 11:32:25, remyoudompheng wrote:\n> On 2013/06/01 11:27:45, ahormann wrote:\n> > On 2013/06/01 11:18:01, remyoudompheng wrote:\n> > > Hello mailto:golang-dev@googlegroups.com (cc:\n> > mailto:golang-dev@googlegroups.com),\n> > > \n> > > I'd like you to review this change to\n> > > https://go.googlecode.com/hg/\n> > \n> > y.tab.c shows the \"Can't parse the patch to chunks\" error for me.\n> \n> I'm afraid the issue is deterministic. The file is auto-generated, you can look\n> at the unified diff.\n\nI'm sorry for the noise. Thanks!",
			"disapproval": false,
			"date": "2013-06-01 11:35:57.339530",
			"approval": false
		},
		{
			"sender": "gobot@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"arnehormann@gmail.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=rsc (assigned by r)",
			"disapproval": false,
			"date": "2013-06-01 13:45:58.442890",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"arnehormann@gmail.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9933043/diff/9001/src/cmd/gc/go.y\nFile src/cmd/gc/go.y (right):\n\nhttps://codereview.appspot.com/9933043/diff/9001/src/cmd/gc/go.y#newcode857\nsrc/cmd/gc/go.y:857: primexpr:\nNot a fan of this name. & * and <- aren't primary expressions.\n\nCan't come up with a good replacement though.\n\nhttps://codereview.appspot.com/9933043/diff/9001/src/cmd/gc/go.y#newcode870\nsrc/cmd/gc/go.y:870: |\t'*' uexpr\nWhy the change in precedence here? It's a no-op.",
			"disapproval": false,
			"date": "2013-06-02 07:51:01.571240",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"arnehormann@gmail.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9933043/diff/9001/src/cmd/gc/go.y\nFile src/cmd/gc/go.y (right):\n\nhttps://codereview.appspot.com/9933043/diff/9001/src/cmd/gc/go.y#newcode870\nsrc/cmd/gc/go.y:870: |\t'*' uexpr\nOn 2013/06/02 07:51:01, DMorsing wrote:\n> Why the change in precedence here? It's a no-op.\n\nOriginally I wanted to put it in uop_list but got bitten by inscrutable conflicts with the grammar of types, so put it back here.\n\nWill revert.",
			"disapproval": false,
			"date": "2013-06-02 07:53:07.201730",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"daniel.morsing@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"arnehormann@gmail.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/02 07:53:07, remyoudompheng wrote:\n> https://codereview.appspot.com/9933043/diff/9001/src/cmd/gc/go.y\n> File src/cmd/gc/go.y (right):\n> \n> https://codereview.appspot.com/9933043/diff/9001/src/cmd/gc/go.y#newcode870\n> src/cmd/gc/go.y:870: |\t'*' uexpr\n> On 2013/06/02 07:51:01, DMorsing wrote:\n> > Why the change in precedence here? It's a no-op.\n> \n> Originally I wanted to put it in uop_list but got bitten by inscrutable\n> conflicts with the grammar of types, so put it back here.\n> \n> Will revert.\n\nping.",
			"disapproval": false,
			"date": "2013-06-27 12:06:15.402530",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"daniel.morsing@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"arnehormann@gmail.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I thought I'd replied to this, sorry.\n\nI'm not sure this is worth the complexity and obscurity it introduces in the grammar. Sure, unary operations can be handled at some cost, but there is no easy fix for deeply nested binary operations, or deeply nested brace blocks, or ...\n\nWhy is this one case important enough to fix when we can't fix all the others?",
			"disapproval": false,
			"date": "2013-06-27 15:36:17.383710",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"daniel.morsing@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"arnehormann@gmail.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/27 12:06:15, dfc wrote:\n> On 2013/06/02 07:53:07, remyoudompheng wrote:\n> > https://codereview.appspot.com/9933043/diff/9001/src/cmd/gc/go.y\n> > File src/cmd/gc/go.y (right):\n> > \n> > https://codereview.appspot.com/9933043/diff/9001/src/cmd/gc/go.y#newcode870\n> > src/cmd/gc/go.y:870: |\t'*' uexpr\n> > On 2013/06/02 07:51:01, DMorsing wrote:\n> > > Why the change in precedence here? It's a no-op.\n> > \n> > Originally I wanted to put it in uop_list but got bitten by inscrutable\n> > conflicts with the grammar of types, so put it back here.\n> > \n> > Will revert.\n> \n> ping.\n\nIt's a corner case, and it's a bit ugly. Some corner cases are interesting because they can show up in automatically generated code, but I don't think piles of unary operators are a likely case even in such situations.",
			"disapproval": false,
			"date": "2013-06-27 15:41:05.440390",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 9933043: cmd/gc: avoid right recursion in unary expression parsing.",
	"created": "2013-06-01 11:17:37.441870",
	"patchsets": [
		1,
		2001,
		5001,
		9001
	],
	"modified": "2013-06-27 15:41:06.101930",
	"closed": false,
	"issue": 9933043
}