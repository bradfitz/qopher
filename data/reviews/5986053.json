{
	"description": "go.crypto/ssh: replace window channel with an atomic variable and condition\n\nFixes issue 3479.\n\nUsing a channel to model window size was a mistake. Unlike stdin and\nstdout, which are streams of data, window size is an variable and\nshould be modeled as such.",
	"cc": [
		"golang-dev@googlegroups.com",
		"agl@golang.org",
		"gustav.paul@gmail.com",
		"kardianos@gmail.com",
		"dvyukov@google.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"kardianos@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\nIn another CL, I think in chanReader, we should replace the chan []byte buffer with circular byte buffer, as found in CL 5970056.  I'll move the circular byte buffer out of channel.go so the client can also use it.\n\nhttp://codereview.appspot.com/5986053/diff/2002/ssh/client.go\nFile ssh/client.go (right):\n\nhttp://codereview.appspot.com/5986053/diff/2002/ssh/client.go#newcode501\nssh/client.go:501: win int\nRFC 4254 5.2: Implementations MUST correctly handle window sizes of up to 2^32 - 1 bytes.\nMake this uint32.",
			"disapproval": false,
			"date": "2012-04-08 17:30:26.509393",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, agl@golang.org, gustav.paul@gmail.com, kardianos@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-09 01:46:42.586114",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM with a couple of updates.\n\nhttp://codereview.appspot.com/5986053/diff/7003/ssh/client.go\nFile ssh/client.go (right):\n\nhttp://codereview.appspot.com/5986053/diff/7003/ssh/client.go#newcode257\nssh/client.go:257: c.getChan(msg.PeersId).stdin.win.add(msg.AdditionalBytes)\nif !c.getChan(msg.PeersId).stdin.win.add(...) {\n  // Invalid window update.\n  break\n}\n\nhttp://codereview.appspot.com/5986053/diff/7003/ssh/client.go#newcode507\nssh/client.go:507: win uint32 // RFC 4254 5.2 says the window size can grow to 2 ^ 32 -1\nspacing: \"2^32 - 1\" or \"2^32-1\"\n\nhttp://codereview.appspot.com/5986053/diff/7003/ssh/client.go#newcode514\nssh/client.go:514: w.win += win\nif (w.win + win < w.win) {\n  return false\n}",
			"disapproval": false,
			"date": "2012-04-09 14:40:06.295623",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.crypto",
			"disapproval": false,
			"date": "2012-04-08 11:58:25.147125",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for your comments. I've converted the window size to a uint32, there are probably other cases in the package where this should be done as well.\n\nhttp://codereview.appspot.com/5986053/diff/2002/ssh/client.go\nFile ssh/client.go (right):\n\nhttp://codereview.appspot.com/5986053/diff/2002/ssh/client.go#newcode191\nssh/client.go:191: // The msg, win, data and dataExt channels of a clientChan can\nOn 2012/04/08 15:00:28, gpaul wrote:\n> s/, win//\n\nDone.\n\nhttp://codereview.appspot.com/5986053/diff/2002/ssh/client.go#newcode501\nssh/client.go:501: win int\nDone. I think there are other places where uint32 should replace int.",
			"disapproval": false,
			"date": "2012-04-09 01:49:06.507951",
			"approval": false
		},
		{
			"sender": "gustav.paul@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. I haven't been able to reproduce this issue, even when writing >65MB over stdin. \n\nThanks Dave\n\nhttp://codereview.appspot.com/5986053/diff/2002/ssh/client.go\nFile ssh/client.go (right):\n\nhttp://codereview.appspot.com/5986053/diff/2002/ssh/client.go#newcode191\nssh/client.go:191: // The msg, win, data and dataExt channels of a clientChan can\ns/, win//",
			"disapproval": false,
			"date": "2012-04-08 15:00:28.099378",
			"approval": true
		},
		{
			"sender": "gustav.paul@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The latest update still fixes the issue: I am able to correctly transfer\n>64MB.\n\nI'm testing against ssh server:\n22/tcp open  ssh     OpenSSH 5.8 (protocol 2.0)\n\nOn Sun, Apr 15, 2012 at 9:41 AM, <dvyukov@google.com> wrote:\n\n>\n> http://codereview.appspot.com/**5986053/diff/9002/ssh/client.**go<http://codereview.appspot.com/5986053/diff/9002/ssh/client.go>\n> File ssh/client.go (right):\n>\n> http://codereview.appspot.com/**5986053/diff/9002/ssh/client.**\n> go#newcode518<http://codereview.appspot.com/5986053/diff/9002/ssh/client.go#newcode518>\n> ssh/client.go:518: w.Signal()\n> On 2012/04/15 07:01:02, dfc wrote:\n>\n>> Not quite sure what you mean here. the value of the window should\n>>\n> appear atomic.\n>\n>> There is typically one consumer of the window, whatever is connected\n>>\n> to the\n>\n>> stdin of the channel.\n>>\n>\n> There is *typically* one consumer? Or just one consumer? :)\n> I just meant if there can possibly be more than 1 consumer, then\n> w.Broadcast() must be used. However, I understand that it's somewhat\n> weird to write concurrently to ssh channel.\n>\n>\n>  Should the order of the Signal and Unlock be reversed ?\n>>\n>\n> I think it may be either way here. Signaling under mutex has some\n> preference towards correctness, while signaling outside of mutex has\n> some preference towards performance.\n>\n> http://codereview.appspot.com/**5986053/<http://codereview.appspot.com/5986053/>\n>\n",
			"disapproval": false,
			"date": "2012-04-15 08:06:40.862831",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, agl@golang.org, gustav.paul@gmail.com, kardianos@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-14 03:37:06.494621",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for your comments agl. PTAL.\n\nGustav, would you be able to reconfirm that this fixes your issue after adding a check for wrap around in the window size.\n\nhttp://codereview.appspot.com/5986053/diff/7003/ssh/client.go\nFile ssh/client.go (right):\n\nhttp://codereview.appspot.com/5986053/diff/7003/ssh/client.go#newcode257\nssh/client.go:257: c.getChan(msg.PeersId).stdin.win.add(msg.AdditionalBytes)\nOn 2012/04/09 14:40:06, agl1 wrote:\n> if !c.getChan(msg.PeersId).stdin.win.add(...) {\n>   // Invalid window update.\n>   break\n> }\n\nDone.\n\nhttp://codereview.appspot.com/5986053/diff/7003/ssh/client.go#newcode507\nssh/client.go:507: win uint32 // RFC 4254 5.2 says the window size can grow to 2 ^ 32 -1\nOn 2012/04/09 14:40:06, agl1 wrote:\n> spacing: \"2^32 - 1\" or \"2^32-1\"\n\nDone.\n\nhttp://codereview.appspot.com/5986053/diff/7003/ssh/client.go#newcode514\nssh/client.go:514: w.win += win\nOn 2012/04/09 14:40:06, agl1 wrote:\n> if (w.win + win < w.win) {\n>   return false\n> }\n\nDone.",
			"disapproval": false,
			"date": "2012-04-14 03:40:02.214710",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"kardianos@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5986053/diff/9002/ssh/client.go\nFile ssh/client.go (right):\n\nhttp://codereview.appspot.com/5986053/diff/9002/ssh/client.go#newcode518\nssh/client.go:518: w.Signal()\nCan't reserve() be called concurrently?\n\nhttp://codereview.appspot.com/5986053/diff/9002/ssh/client.go#newcode529\nssh/client.go:529: w.Wait()\nCan't w.win == 0 after Wait()? I do not see where code checks that add is not called with 0 arg.",
			"disapproval": false,
			"date": "2012-04-15 06:51:10.831803",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"kardianos@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for your review. Please take another (final?) look.\n\nhttp://codereview.appspot.com/5986053/diff/9002/ssh/client.go\nFile ssh/client.go (right):\n\nhttp://codereview.appspot.com/5986053/diff/9002/ssh/client.go#newcode518\nssh/client.go:518: w.Signal()\nThere should only be one goroutine calling Write, but the write lock isn't enforced until the request gets to the transport.\n\nI'll change it to Broadcast to be safe.",
			"disapproval": false,
			"date": "2012-04-15 09:38:18.665226",
			"approval": false
		},
		{
			"sender": "gustav.paul@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Certainly. I'll let you know by tomorrow.\n\nOn Sat, Apr 14, 2012 at 5:40 AM, <dave@cheney.net> wrote:\n\n> Thank you for your comments agl. PTAL.\n>\n> Gustav, would you be able to reconfirm that this fixes your issue after\n> adding a check for wrap around in the window size.\n>\n>\n>\n> http://codereview.appspot.com/**5986053/diff/7003/ssh/client.**go<http://codereview.appspot.com/5986053/diff/7003/ssh/client.go>\n> File ssh/client.go (right):\n>\n> http://codereview.appspot.com/**5986053/diff/7003/ssh/client.**\n> go#newcode257<http://codereview.appspot.com/5986053/diff/7003/ssh/client.go#newcode257>\n> ssh/client.go:257:\n> c.getChan(msg.PeersId).stdin.**win.add(msg.AdditionalBytes)\n> On 2012/04/09 14:40:06, agl1 wrote:\n>\n>> if !c.getChan(msg.PeersId).stdin.**win.add(...) {\n>>   // Invalid window update.\n>>   break\n>> }\n>>\n>\n> Done.\n>\n>\n> http://codereview.appspot.com/**5986053/diff/7003/ssh/client.**\n> go#newcode507<http://codereview.appspot.com/5986053/diff/7003/ssh/client.go#newcode507>\n> ssh/client.go:507: win uint32 // RFC 4254 5.2 says the window size can\n> grow to 2 ^ 32 -1\n> On 2012/04/09 14:40:06, agl1 wrote:\n>\n>> spacing: \"2^32 - 1\" or \"2^32-1\"\n>>\n>\n> Done.\n>\n>\n> http://codereview.appspot.com/**5986053/diff/7003/ssh/client.**\n> go#newcode514<http://codereview.appspot.com/5986053/diff/7003/ssh/client.go#newcode514>\n> ssh/client.go:514: w.win += win\n> On 2012/04/09 14:40:06, agl1 wrote:\n>\n>> if (w.win + win < w.win) {\n>>   return false\n>> }\n>>\n>\n> Done.\n>\n> http://codereview.appspot.com/**5986053/<http://codereview.appspot.com/5986053/>\n>\n",
			"disapproval": false,
			"date": "2012-04-14 06:18:32.412733",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"kardianos@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, agl@golang.org, gustav.paul@gmail.com, kardianos@gmail.com, dvyukov@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-15 09:37:37.810226",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"kardianos@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FWIW LGTM",
			"disapproval": false,
			"date": "2012-04-15 10:22:13.405892",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"kardianos@gmail.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=b42815235d16&repo=crypto ***\n\ngo.crypto/ssh: replace window channel with an atomic variable and condition\n\nFixes issue 3479.\n\nUsing a channel to model window size was a mistake. Unlike stdin and\nstdout, which are streams of data, window size is an variable and\nshould be modeled as such.\n\nR=golang-dev, agl, gustav.paul, kardianos, dvyukov\nCC=golang-dev\nhttp://codereview.appspot.com/5986053",
			"disapproval": false,
			"date": "2012-04-15 10:30:52.068252",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"kardianos@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, agl@golang.org, gustav.paul@gmail.com, kardianos@gmail.com, dvyukov@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-15 07:00:27.610847",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"kardianos@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5986053/diff/9002/ssh/client.go\nFile ssh/client.go (right):\n\nhttp://codereview.appspot.com/5986053/diff/9002/ssh/client.go#newcode518\nssh/client.go:518: w.Signal()\nOn 2012/04/15 07:01:02, dfc wrote:\n> Not quite sure what you mean here. the value of the window should appear atomic.\n> There is typically one consumer of the window, whatever is connected to the\n> stdin of the channel.\n\nThere is *typically* one consumer? Or just one consumer? :)\nI just meant if there can possibly be more than 1 consumer, then w.Broadcast() must be used. However, I understand that it's somewhat weird to write concurrently to ssh channel.\n\n> Should the order of the Signal and Unlock be reversed ?\n\nI think it may be either way here. Signaling under mutex has some preference towards correctness, while signaling outside of mutex has some preference towards performance.",
			"disapproval": false,
			"date": "2012-04-15 07:41:34.704563",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"gustav.paul@gmail.com",
				"kardianos@gmail.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for your comments Dmity. PTAL.\n\nhttp://codereview.appspot.com/5986053/diff/9002/ssh/client.go\nFile ssh/client.go (right):\n\nhttp://codereview.appspot.com/5986053/diff/9002/ssh/client.go#newcode518\nssh/client.go:518: w.Signal()\nNot quite sure what you mean here. the value of the window should appear atomic. There is typically one consumer of the window, whatever is connected to the stdin of the channel.\n\nShould the order of the Signal and Unlock be reversed ?\n\nOn 2012/04/15 06:51:11, dvyukov wrote:\n> Can't reserve() be called concurrently?\n\nhttp://codereview.appspot.com/5986053/diff/9002/ssh/client.go#newcode529\nssh/client.go:529: w.Wait()\nHmm. Good point I've added a check to window#add to reject 0 sized window updates.\n\nOn 2012/04/15 06:51:11, dvyukov wrote:\n> Can't w.win == 0 after Wait()? I do not see where code checks that add is not\n> called with 0 arg.",
			"disapproval": false,
			"date": "2012-04-15 07:01:01.961379",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 5986053: go.crypto/ssh: replace window channel with an atomic va...",
	"created": "2012-04-06 10:32:35.421182",
	"patchsets": [
		1,
		2001,
		3001,
		5001,
		5003,
		2002,
		7003,
		8001,
		9002,
		16001,
		15003,
		14004
	],
	"modified": "2012-04-15 10:30:55.257308",
	"closed": true,
	"issue": 5986053
}