{
	"description": "spec: rewrite the description of panic and recover.\nThe old description was misleading and inaccurate.\n\nFixes issue 4774.",
	"cc": [
		"iant@golang.org",
		"rsc@golang.org",
		"gri@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-03-12 18:27:13.726060",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Mar 12, 2013 at 5:19 PM, <gri@golang.org> wrote:\r\n\r\n> https://codereview.appspot.**com/7761044/diff/10001/doc/go_**\r\n> spec.html#newcode5299<https://codereview.appspot.com/7761044/diff/10001/doc/go_spec.html#newcode5299>\r\n> doc/go_spec.html:5299: <code>panic</code>, the panicking sequence stops.\r\n> In that case,\r\n> Technically, doesn't panicking stop _immediately_ with the call of\r\n> recover?\r\n>\r\n\r\nNo. If the deferred function calls panic again the original call stack is\r\nstill there. If the panic had truly stopped, the original context would be\r\ngone.\r\n",
			"disapproval": false,
			"date": "2013-03-12 21:26:10.487020",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI\n\nhttps://codereview.appspot.com/7761044/diff/1/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7761044/diff/1/doc/go_spec.html#newcode5297\ndoc/go_spec.html:5297: popping all stack frames from the call to <code>panic</code> up to but not including that of <code>G</code>.\nRather than \"popping all stack frames\", how about something along the lines of \"discarding all the callers\".  The spec doesn't talk about stack frames at all.",
			"disapproval": false,
			"date": "2013-03-12 19:55:28.755130",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7761044/diff/1/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7761044/diff/1/doc/go_spec.html#newcode5296\ndoc/go_spec.html:5296: The panicking sequence then stops,\nThis makes it sound like the panicking stops and the callers are popped when recover is called. Those things don't happen until D returns successfully (without causing a new panic).\n\nhttps://codereview.appspot.com/7761044/diff/1/doc/go_spec.html#newcode5298\ndoc/go_spec.html:5298: The deferred function <code>D</code> completes normally, and execution resumes by returning\nNot quite.\nWhen D does return and the panic is stopped and the callers are popped, execution resumes by continuing to run any older defers due to G. Only once those are done does G return to its caller.",
			"disapproval": false,
			"date": "2013-03-12 20:04:26.533590",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, iant@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-12 20:46:44.787750",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"iant@golang.org",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=e64a2d5dfb93 ***\n\nspec: rewrite the description of panic and recover.\nThe old description was misleading and inaccurate.\n\nFixes issue 4774.\n\nR=iant, rsc, gri\nCC=golang-dev\nhttps://codereview.appspot.com/7761044\n\nhttps://codereview.appspot.com/7761044/diff/10001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7761044/diff/10001/doc/go_spec.html#newcode5297\ndoc/go_spec.html:5297: the return value of <code>D</code>'s call to <code>recover</code> will be the value passed to the call of <code>panic</code>.\nOn 2013/03/12 21:19:32, gri wrote:\n> Perhaps mention run-time panics in parentheses? There is no explicit call to\n> panic and no explicit value passed.\n\nDone.\n\nhttps://codereview.appspot.com/7761044/diff/10001/doc/go_spec.html#newcode5299\ndoc/go_spec.html:5299: <code>panic</code>, the panicking sequence stops. In that case,\nNo. That's the point of this CL.",
			"disapproval": false,
			"date": "2013-03-12 21:28:19.369670",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"r@golang.org",
				"iant@golang.org",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7761044/diff/6001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7761044/diff/6001/doc/go_spec.html#newcode5293\ndoc/go_spec.html:5293: If a function <code>G</code> defers a function <code>D</code> that calls\nI think it would help to break up this sentence. I got lost halfway.\n\nSuppose a function ...\nend at \"is executing.\"\n\"When the running ...\"\n\nhttps://codereview.appspot.com/7761044/diff/6001/doc/go_spec.html#newcode5297\ndoc/go_spec.html:5297: the return value of its call to <code>recover</code> will be the value passed to the call of <code>panic</code>.\ns/its/D's/ or the\n\"it\" could refer to \"the running\"\n\nhttps://codereview.appspot.com/7761044/diff/6001/doc/go_spec.html#newcode5298\ndoc/go_spec.html:5298: The deferred function <code>D</code> then completes normally and the panicking sequence stops.\nIf the deferred function D returns normally, without starting a new panic, the panicking sequence stops.\n\n(It's important that re-panics do not lose the original stack context.)\n\nhttps://codereview.appspot.com/7761044/diff/6001/doc/go_spec.html#newcode5306\ndoc/go_spec.html:5306: The <code>recover</code> function must be called directly by a deferred function,\ns/must be/only returns a non-nil value when/\n\n\"must\" sounds like it's an error (i.e. your program will die) to use recover otherwise, and it's not.",
			"disapproval": false,
			"date": "2013-03-12 20:58:33.499900",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"iant@golang.org",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello iant@golang.org, rsc@golang.org, gri@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-12 21:05:34.120890",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"r@golang.org",
				"iant@golang.org",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-03-12 21:06:55.337180",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"r@golang.org",
				"iant@golang.org",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI\n\nhttps://codereview.appspot.com/7761044/diff/10001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7761044/diff/10001/doc/go_spec.html#newcode5297\ndoc/go_spec.html:5297: the return value of <code>D</code>'s call to <code>recover</code> will be the value passed to the call of <code>panic</code>.\nPerhaps mention run-time panics in parentheses? There is no explicit call to panic and no explicit value passed.\n\nhttps://codereview.appspot.com/7761044/diff/10001/doc/go_spec.html#newcode5299\ndoc/go_spec.html:5299: <code>panic</code>, the panicking sequence stops. In that case,\nTechnically, doesn't panicking stop _immediately_ with the call of recover?",
			"disapproval": false,
			"date": "2013-03-12 21:19:32.303300",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 7761044: spec: rewrite the description of panic and recover.",
	"created": "2013-03-12 18:27:08.416920",
	"patchsets": [
		1,
		6001,
		10001,
		17001
	],
	"modified": "2013-03-12 21:28:21.452680",
	"closed": true,
	"issue": 7761044
}