{
	"description": "go.crypto/ssh: improve marshal performance\n\nAtom N450, 6g\n\nbenchmark                         old ns/op    new ns/op    delta\nBenchmarkMarshalKexInitMsg            96446        66675  -30.87%\nBenchmarkUnmarshalKexInitMsg         155341       142715   -8.13%\nBenchmarkMarshalKexDHInitMsg           9499         8340  -12.20%\nBenchmarkUnmarshalKexDHInitMsg         4973         5145   +3.46%\n\nIntel E3-1270, 6g\n\nbenchmark                         old ns/op    new ns/op    delta\nBenchmarkMarshalKexInitMsg            23218        16903  -27.20%\nBenchmarkUnmarshalKexInitMsg          31384        31640   +0.82%\nBenchmarkMarshalKexDHInitMsg           1943         1661  -14.51%\nBenchmarkUnmarshalKexDHInitMsg          915          941   +2.84%",
	"cc": [
		"agl@golang.org",
		"minux.ma@gmail.com",
		"remyoudompheng@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5728053/diff/4001/ssh/common.go\nFile ssh/common.go (right):\n\nhttp://codereview.appspot.com/5728053/diff/4001/ssh/common.go#newcode260\nssh/common.go:260: *b = append((*b), byte(n>>8), byte(n))\nWhy not instead wrap encoding/binary.BigEndian.PutUint16() to\navoid code duplication and rely on compiler inlining for efficiency?\n\nThere are many inline expanding of encoding/binary.BigEndian.Uint*\nand PutUint* in ssh code, I think they should all be converted to use\nencoding/binary directly.",
			"disapproval": false,
			"date": "2012-03-03 09:40:29.178478",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5728053/diff/4001/ssh/messages.go\nFile ssh/messages.go (right):\n\nhttp://codereview.appspot.com/5728053/diff/4001/ssh/messages.go#newcode313\nssh/messages.go:313: case reflect.Uint8:\nisn't it a []byte in most cases? it could be type-asserted and appended directly.\n\nhttp://codereview.appspot.com/5728053/diff/4001/ssh/messages.go#newcode438\nssh/messages.go:438: out = uint64(in[0])<<56 |\nthis is out = binary.BigEndian.Uint64(in)\n\nhttp://codereview.appspot.com/5728053/diff/4001/ssh/messages.go#newcode487\nssh/messages.go:487: func marshalUint32(to []byte, n uint32) []byte {\ns = marshalUint32(s, n)\nlooks no different from\nbinary.BigEndian.PutUint32(s, n)\ns = s[:4]",
			"disapproval": false,
			"date": "2012-03-03 09:45:17.945004",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for the adjustments to the method names, I agree your versions are an improvement. \n\nOn 05/03/2012, at 9:34, agl@golang.org wrote:\n\n> *** Submitted as\n> http://code.google.com/p/go/source/detail?r=b87c16c531f3&repo=crypto ***\n> \n> go.crypto/ssh: improve marshal performance\n> \n> Atom N450, 6g\n> \n> benchmark                         old ns/op    new ns/op    delta\n> BenchmarkMarshalKexInitMsg            96446        66675  -30.87%\n> BenchmarkUnmarshalKexInitMsg         155341       142715   -8.13%\n> BenchmarkMarshalKexDHInitMsg           9499         8340  -12.20%\n> BenchmarkUnmarshalKexDHInitMsg         4973         5145   +3.46%\n> \n> Intel E3-1270, 6g\n> \n> benchmark                         old ns/op    new ns/op    delta\n> BenchmarkMarshalKexInitMsg            23218        16903  -27.20%\n> BenchmarkUnmarshalKexInitMsg          31384        31640   +0.82%\n> BenchmarkMarshalKexDHInitMsg           1943         1661  -14.51%\n> BenchmarkUnmarshalKexDHInitMsg          915          941   +2.84%\n> \n> R=agl, minux.ma, remyoudompheng\n> CC=golang-dev\n> http://codereview.appspot.com/5728053\n> \n> Committer: Adam Langley <agl@golang.org>\n> \n> \n> \n> http://codereview.appspot.com/5728053/diff/4008/ssh/common.go\n> File ssh/common.go (right):\n> \n> http://codereview.appspot.com/5728053/diff/4008/ssh/common.go#newcode255\n> ssh/common.go:255: func (b *writeBuf) uint8(n uint8) {\n> Since this is just putting a function call around append(), I removed\n> it.\n> \n> http://codereview.appspot.com/5728053/diff/4008/ssh/common.go#newcode259\n> ssh/common.go:259: func (b *writeBuf) uint16(n uint16) {\n> at that point, it became cleaner to make these appendU16 and so on.\n> \n> http://codereview.appspot.com/5728053/\n",
			"disapproval": false,
			"date": "2012-03-04 22:43:46.546385",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.crypto",
			"disapproval": false,
			"date": "2012-03-03 09:28:15.335219",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for the quick replies. Please take another look.\n\nhttp://codereview.appspot.com/5728053/diff/4001/ssh/common.go\nFile ssh/common.go (right):\n\nhttp://codereview.appspot.com/5728053/diff/4001/ssh/common.go#newcode260\nssh/common.go:260: *b = append((*b), byte(n>>8), byte(n))\nOn 2012/03/03 09:40:29, minux wrote:\n> Why not instead wrap encoding/binary.BigEndian.PutUint16() to\n> avoid code duplication and rely on compiler inlining for efficiency?\n\nCurrently the compiler won't inline non leaf functions.\n \n> There are many inline expanding of encoding/binary.BigEndian.Uint*\n> and PutUint* in ssh code, I think they should all be converted to use\n> encoding/binary directly.\n\nYes, I'm planning to address those in a future CL.\n\nhttp://codereview.appspot.com/5728053/diff/4001/ssh/messages.go\nFile ssh/messages.go (right):\n\nhttp://codereview.appspot.com/5728053/diff/4001/ssh/messages.go#newcode313\nssh/messages.go:313: case reflect.Uint8:\nOn 2012/03/03 09:45:18, remyoudompheng wrote:\n> isn't it a []byte in most cases? it could be type-asserted and appended\n> directly.\n\nDone.\n\nhttp://codereview.appspot.com/5728053/diff/4001/ssh/messages.go#newcode438\nssh/messages.go:438: out = uint64(in[0])<<56 |\nOn 2012/03/03 09:45:18, remyoudompheng wrote:\n> this is out = binary.BigEndian.Uint64(in)\n\nDone.\n\nhttp://codereview.appspot.com/5728053/diff/4001/ssh/messages.go#newcode487\nssh/messages.go:487: func marshalUint32(to []byte, n uint32) []byte {\nOn 2012/03/03 09:45:18, remyoudompheng wrote:\n> s = marshalUint32(s, n)\n> looks no different from\n> binary.BigEndian.PutUint32(s, n)\n> s = s[:4]\n\nDone.",
			"disapproval": false,
			"date": "2012-03-03 10:51:11.295801",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@golang.org, minux.ma@gmail.com, remyoudompheng@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-03-03 10:50:47.250464",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=b87c16c531f3&repo=crypto ***\n\ngo.crypto/ssh: improve marshal performance\n\nAtom N450, 6g\n\nbenchmark                         old ns/op    new ns/op    delta\nBenchmarkMarshalKexInitMsg            96446        66675  -30.87%\nBenchmarkUnmarshalKexInitMsg         155341       142715   -8.13%\nBenchmarkMarshalKexDHInitMsg           9499         8340  -12.20%\nBenchmarkUnmarshalKexDHInitMsg         4973         5145   +3.46%\n\nIntel E3-1270, 6g\n\nbenchmark                         old ns/op    new ns/op    delta\nBenchmarkMarshalKexInitMsg            23218        16903  -27.20%\nBenchmarkUnmarshalKexInitMsg          31384        31640   +0.82%\nBenchmarkMarshalKexDHInitMsg           1943         1661  -14.51%\nBenchmarkUnmarshalKexDHInitMsg          915          941   +2.84%\n\nR=agl, minux.ma, remyoudompheng\nCC=golang-dev\nhttp://codereview.appspot.com/5728053\n\nCommitter: Adam Langley <agl@golang.org>\n\nhttp://codereview.appspot.com/5728053/diff/4008/ssh/common.go\nFile ssh/common.go (right):\n\nhttp://codereview.appspot.com/5728053/diff/4008/ssh/common.go#newcode255\nssh/common.go:255: func (b *writeBuf) uint8(n uint8) {\nSince this is just putting a function call around append(), I removed it.\n\nhttp://codereview.appspot.com/5728053/diff/4008/ssh/common.go#newcode259\nssh/common.go:259: func (b *writeBuf) uint16(n uint16) {\nat that point, it became cleaner to make these appendU16 and so on.",
			"disapproval": false,
			"date": "2012-03-04 22:34:45.418334",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 5728053: go.crypto/ssh: improve marshal performance",
	"created": "2012-03-03 09:25:39.740831",
	"patchsets": [
		1,
		3,
		4001,
		4003,
		4007,
		4008
	],
	"modified": "2012-04-01 07:35:49.074457",
	"closed": true,
	"issue": 5728053
}