{
	"description": "go/parser: Use explicit parser.Mode type.",
	"cc": [
		"r@golang.org",
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-01-25 00:25:01.134292",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn Tue, Jan 24, 2012 at 4:25 PM, <gri@golang.org> wrote:\n\n> Reviewers: r,\n>\n> Message:\n> Hello r@golang.org (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://code.google.com/p/go\n>\n>\n> Description:\n> go/parser: Use explicit parser.Mode type.\n>\n> Please review this at http://codereview.appspot.com/**5574058/<http://codereview.appspot.com/5574058/>\n>\n> Affected files:\n>  M src/cmd/cgo/ast.go\n>  M src/cmd/godoc/parser.go\n>  M src/cmd/gofmt/gofmt.go\n>  M src/pkg/go/parser/interface.go\n>  M src/pkg/go/parser/parser.go\n>\n>\n> Index: src/cmd/cgo/ast.go\n> ==============================**==============================**=======\n> --- a/src/cmd/cgo/ast.go\n> +++ b/src/cmd/cgo/ast.go\n> @@ -16,7 +16,7 @@\n>        \"strings\"\n>  )\n>\n> -func parse(name string, flags uint) *ast.File {\n> +func parse(name string, flags parser.Mode) *ast.File {\n>        ast1, err := parser.ParseFile(fset, name, nil, flags)\n>        if err != nil {\n>                if list, ok := err.(scanner.ErrorList); ok {\n> Index: src/cmd/godoc/parser.go\n> ==============================**==============================**=======\n> --- a/src/cmd/godoc/parser.go\n> +++ b/src/cmd/godoc/parser.go\n> @@ -17,7 +17,7 @@\n>        \"path/filepath\"\n>  )\n>\n> -func parseFile(fset *token.FileSet, filename string, mode uint)\n> (*ast.File, error) {\n> +func parseFile(fset *token.FileSet, filename string, mode parser.Mode)\n> (*ast.File, error) {\n>        src, err := ReadFile(fs, filename)\n>        if err != nil {\n>                return nil, err\n> Index: src/cmd/gofmt/gofmt.go\n> ==============================**==============================**=======\n> --- a/src/cmd/gofmt/gofmt.go\n> +++ b/src/cmd/gofmt/gofmt.go\n> @@ -44,7 +44,7 @@\n>        fset        = token.NewFileSet()\n>        exitCode    = 0\n>        rewrite     func(*ast.File) *ast.File\n> -       parserMode  uint\n> +       parserMode  parser.Mode\n>        printerMode uint\n>  )\n>\n> @@ -60,7 +60,7 @@\n>  }\n>\n>  func initParserMode() {\n> -       parserMode = uint(0)\n> +       parserMode = parser.Mode(0)\n>        if *comments {\n>                parserMode |= parser.ParseComments\n>        }\n> Index: src/pkg/go/parser/interface.go\n> ==============================**==============================**=======\n> --- a/src/pkg/go/parser/interface.**go\n> +++ b/src/pkg/go/parser/interface.**go\n> @@ -45,12 +45,14 @@\n>        return ioutil.ReadFile(filename)\n>  }\n>\n> -// The mode parameter to the Parse* functions is a set of flags (or 0).\n> +// A Mode value is a set of flags (or 0).\n>  // They control the amount of source code parsed and other optional\n>  // parser functionality.\n>  //\n> +type Mode uint\n> +\n>  const (\n> -       PackageClauseOnly uint = 1 << iota // parsing stops after package\n> clause\n> +       PackageClauseOnly Mode = 1 << iota // parsing stops after package\n> clause\n>        ImportsOnly                        // parsing stops after import\n> declarations\n>        ParseComments                      // parse comments and add them\n> to AST\n>        Trace                              // print a trace of parsed\n> productions\n> @@ -77,7 +79,7 @@\n>  // representing the fragments of erroneous source code). Multiple errors\n>  // are returned via a scanner.ErrorList which is sorted by file position.\n>  //\n> -func ParseFile(fset *token.FileSet, filename string, src interface{},\n> mode uint) (*ast.File, error) {\n> +func ParseFile(fset *token.FileSet, filename string, src interface{},\n> mode Mode) (*ast.File, error) {\n>        text, err := readSource(filename, src)\n>        if err != nil {\n>                return nil, err\n> @@ -97,7 +99,7 @@\n>  // returned. If a parse error occurred, a non-nil but incomplete map and\n> the\n>  // first error encountered are returned.\n>  //\n> -func ParseDir(fset *token.FileSet, path string, filter func(os.FileInfo)\n> bool, mode uint) (pkgs map[string]*ast.Package, first error) {\n> +func ParseDir(fset *token.FileSet, path string, filter func(os.FileInfo)\n> bool, mode Mode) (pkgs map[string]*ast.Package, first error) {\n>        fd, err := os.Open(path)\n>        if err != nil {\n>                return nil, err\n> @@ -117,7 +119,10 @@\n>                                name := src.Name.Name\n>                                pkg, found := pkgs[name]\n>                                if !found {\n> -                                       pkg = &ast.Package{name, nil, nil,\n> make(map[string]*ast.File)}\n> +                                       pkg = &ast.Package{\n> +                                               Name:  name,\n> +                                               Files:\n> make(map[string]*ast.File),\n> +                                       }\n>                                        pkgs[name] = pkg\n>                                }\n>                                pkg.Files[filename] = src\n> Index: src/pkg/go/parser/parser.go\n> ==============================**==============================**=======\n> --- a/src/pkg/go/parser/parser.go\n> +++ b/src/pkg/go/parser/parser.go\n> @@ -23,7 +23,7 @@\n>        scanner scanner.Scanner\n>\n>        // Tracing/debugging\n> -       mode   uint // parsing mode\n> +       mode   Mode // parsing mode\n>        trace  bool // == (mode & Trace != 0)\n>        indent uint // indentation used for tracing output\n>\n> @@ -52,7 +52,7 @@\n>        targetStack [][]*ast.Ident // stack of unresolved labels\n>  }\n>\n> -func (p *parser) init(fset *token.FileSet, filename string, src []byte,\n> mode uint) {\n> +func (p *parser) init(fset *token.FileSet, filename string, src []byte,\n> mode Mode) {\n>        p.file = fset.AddFile(filename, fset.Base(), len(src))\n>        var m uint\n>        if mode&ParseComments != 0 {\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-01-25 00:35:23.582508",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as 1489b862c511 ***\n\ngo/parser: Use explicit parser.Mode type.\n\nR=r, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5574058",
			"disapproval": false,
			"date": "2012-01-25 00:36:23.033605",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 5574058: go/parser: Use explicit parser.Mode type.",
	"created": "2012-01-25 00:22:21.810963",
	"patchsets": [
		1,
		4,
		2001,
		4001
	],
	"modified": "2012-01-25 00:36:24.262857",
	"closed": true,
	"issue": 5574058
}