{
	"description": "leveldb: leveldb: implement DB.{Set,Delete,Apply}. Mutations are only\nwritten to memtables for now; copying a full memtable to an on-disk\nsstable is a TODO.",
	"cc": [
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/leveldb-go",
			"disapproval": false,
			"date": "2013-02-16 01:30:05.607100",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7314111/diff/4001/leveldb/batch.go\nFile leveldb/batch.go (right):\n\nhttps://codereview.appspot.com/7314111/diff/4001/leveldb/batch.go#newcode62\nleveldb/batch.go:62: p := b.data[8:12]\nOn 2013/02/17 19:27:44, bradfitz wrote:\n> what was wrong with the countData accessor? it should be inlined, no?\n\nI didn't feel like the method was pulling its weight, but if you prefer the methods, I'll put them back.\n\nhttps://codereview.appspot.com/7314111/diff/4001/leveldb/leveldb.go\nFile leveldb/leveldb.go (right):\n\nhttps://codereview.appspot.com/7314111/diff/4001/leveldb/leveldb.go#newcode43\nleveldb/leveldb.go:43: // mem points to two memtables. mem[0] is non-nil and the MemDB pointed\nOn 2013/02/17 19:27:44, bradfitz wrote:\n> I would just give these separate names, rather than [2].\n> \n> in the range below, I think you can just as efficiently do:\n> \n> for _, mem := range [...]*memdb.MemDB{d.fooMem, d.barMem} {\n> \n> }\n\nDone.\n\nhttps://codereview.appspot.com/7314111/diff/4001/leveldb/leveldb.go#newcode105\nleveldb/leveldb.go:105: // This may require temporarily releasing d.mu.\nOn 2013/02/17 19:27:44, bradfitz wrote:\n> may? is the C++ behavior applicable here, or has this diverged in implementation\n> at this point?\n\nI haven't implemented the Go side yet, but I think that it's diverged.",
			"disapproval": false,
			"date": "2013-02-18 03:16:24.738590",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7314111/diff/4001/leveldb/batch.go\nFile leveldb/batch.go (left):\n\nhttps://codereview.appspot.com/7314111/diff/4001/leveldb/batch.go#oldcode95\nleveldb/batch.go:95: return binary.LittleEndian.Uint64(b.seqNumData())\nlikewise.\n\nat least cite here a bug number for a compiler feature request issue in a TODO: make this more readable again later.\n\nhttps://codereview.appspot.com/7314111/diff/4001/leveldb/batch.go\nFile leveldb/batch.go (right):\n\nhttps://codereview.appspot.com/7314111/diff/4001/leveldb/batch.go#newcode62\nleveldb/batch.go:62: p := b.data[8:12]\nwhat was wrong with the countData accessor? it should be inlined, no?\n\nhttps://codereview.appspot.com/7314111/diff/4001/leveldb/leveldb.go\nFile leveldb/leveldb.go (right):\n\nhttps://codereview.appspot.com/7314111/diff/4001/leveldb/leveldb.go#newcode43\nleveldb/leveldb.go:43: // mem points to two memtables. mem[0] is non-nil and the MemDB pointed\nI would just give these separate names, rather than [2].\n\nin the range below, I think you can just as efficiently do:\n\nfor _, mem := range [...]*memdb.MemDB{d.fooMem, d.barMem} {\n\n}\n\nhttps://codereview.appspot.com/7314111/diff/4001/leveldb/leveldb.go#newcode105\nleveldb/leveldb.go:105: // This may require temporarily releasing d.mu.\nmay? is the C++ behavior applicable here, or has this diverged in implementation at this point?\n\nhttps://codereview.appspot.com/7314111/diff/4001/leveldb/leveldb_test.go\nFile leveldb/leveldb_test.go (right):\n\nhttps://codereview.appspot.com/7314111/diff/4001/leveldb/leveldb_test.go#newcode207\nleveldb/leveldb_test.go:207: testCases := []string{\nnice\n\nhttps://codereview.appspot.com/7314111/diff/4001/leveldb/version.go\nFile leveldb/version.go (right):\n\nhttps://codereview.appspot.com/7314111/diff/4001/leveldb/version.go#newcode187\nleveldb/version.go:187: value []byte, conclusive bool, err error) {\ninteresting line break before result parameters. not bad. just never seen that style.",
			"disapproval": false,
			"date": "2013-02-17 19:27:43.979580",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/leveldb-go/source/detail?r=1289df606b29 ***\n\nleveldb: leveldb: implement DB.{Set,Delete,Apply}. Mutations are only\nwritten to memtables for now; copying a full memtable to an on-disk\nsstable is a TODO.\n\nR=bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/7314111",
			"disapproval": false,
			"date": "2013-02-18 03:17:07.128040",
			"approval": false
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 7314111: leveldb: leveldb: implement DB.{Set,Delete,Apply}. Muta...",
	"created": "2013-02-16 01:29:36.962770",
	"patchsets": [
		1,
		2001,
		4001,
		4002
	],
	"modified": "2013-02-18 03:17:09.278090",
	"closed": true,
	"issue": 7314111
}