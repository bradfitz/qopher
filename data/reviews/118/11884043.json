{
	"description": "spec: clarify index and selector expressions\n\n1) Explain a[i] and a[i:j] where a is of type *A as\n   shortcut for (*a)[i] and (*a)[i:j], respectively.\n\n2) Together with 1), because len() of nil slices is\n   well defined, there's no need to special case nil\n   operands anymore.\n\n3) The result of indexing or slicing a constant string\n   is always a non-constant byte or string value.\n\n4) The result of slicing an untyped string is a value\n   of type string.\n\n5) If the operand of a valid slice a[i:j] is nil (i, j\n   must be 0 for it to be valid - this already follows\n   from the in-range rules), the result is a nil slice.\n\nFixes issue 4913.\nFixes issue 5951.",
	"cc": [
		"rsc@golang.org",
		"iant@golang.org",
		"ken@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"r@golang.org"
	],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, r@golang.org, iant@golang.org, ken@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-07-26 00:03:08.248900",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "friendly ping\r\n\r\n(this is not change but a more complete documentation of the status quo)\r\n\r\n\r\nOn Thu, Jul 25, 2013 at 5:03 PM, <gri@golang.org> wrote:\r\n\r\n> Reviewers: rsc, r, iant, ken2,\r\n>\r\n> Message:\r\n> Hello rsc@golang.org, r@golang.org, iant@golang.org, ken@golang.org (cc:\r\n> golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> spec: clarify index and selector expressions\r\n>\r\n> 1) Explain a[i] and a[i:j] where a is of type *A as\r\n>    shortcut for (*a)[i] and (*a)[i:j], respectively.\r\n>\r\n> 2) Together with 1), because len() of nil slices is\r\n>    well defined, there's no need to special case nil\r\n>    operands anymore.\r\n>\r\n> 3) The result of indexing or slicing a constant string\r\n>    is always a non-constant byte or string value.\r\n>\r\n> 4) The result of slicing an untyped string is a value\r\n>    of type string.\r\n>\r\n> 5) If the operand of a valid slice a[i:j] is nil (i, j\r\n>    must be 0 for it to be valid - this already follows\r\n>    from the in-range rules), the result is a nil slice.\r\n>\r\n> Fixes issue 4913.\r\n> Fixes issue 5951.\r\n>\r\n> Please review this at https://codereview.appspot.**com/11884043/<https://codereview.appspot.com/11884043/>\r\n>\r\n> Affected files:\r\n>   M doc/go_spec.html\r\n>\r\n>\r\n> Index: doc/go_spec.html\r\n> ==============================**==============================**=======\r\n> --- a/doc/go_spec.html\r\n> +++ b/doc/go_spec.html\r\n> @@ -1,6 +1,6 @@\r\n>  <!--{\r\n>         \"Title\": \"The Go Programming Language Specification\",\r\n> -       \"Subtitle\": \"Version of July 25, 2013\",\r\n> +       \"Subtitle\": \"Version of July 26, 2013\",\r\n>         \"Path\": \"/ref/spec\"\r\n>  }-->\r\n>\r\n> @@ -2519,10 +2519,9 @@\r\n>  </pre>\r\n>\r\n>  <p>\r\n> -denotes the element of the array, slice, string or map <code>a</code>\r\n> indexed by <code>x</code>.\r\n> -The value <code>x</code> is called the\r\n> -<i>index</i> or <i>map key</i>, respectively. The following\r\n> -rules apply:\r\n> +denotes the element of the array, pointer to array, slice, string or map\r\n> <code>a</code> indexed by <code>x</code>.\r\n> +The value <code>x</code> is called the <i>index</i> or <i>map key</i>,\r\n> respectively.\r\n> +The following rules apply:\r\n>  </p>\r\n>\r\n>  <p>\r\n> @@ -2537,44 +2536,48 @@\r\n>  </ul>\r\n>\r\n>  <p>\r\n> -For <code>a</code> of type <code>A</code> or <code>*A</code>\r\n> -where <code>A</code> is an <a href=\"#Array_types\">array type</a>:\r\n> +For <code>a</code> of <a href=\"#Array_types\">array type</a>\r\n> <code>A</code>:\r\n>  </p>\r\n>  <ul>\r\n>         <li>a <a href=\"#Constants\">constant</a> index must be in range</li>\r\n> -       <li>if <code>a</code> is <code>nil</code> or if <code>x</code> is\r\n> out of range at run time,\r\n> +       <li>if <code>x</code> is out of range at run time,\r\n>             a <a href=\"#Run_time_panics\">run-**time panic</a> occurs</li>\r\n>         <li><code>a[x]</code> is the array element at index <code>x</code>\r\n> and the type of\r\n>             <code>a[x]</code> is the element type of <code>A</code></li>\r\n>  </ul>\r\n>\r\n>  <p>\r\n> -For <code>a</code> of type <code>S</code> where <code>S</code> is a <a\r\n> href=\"#Slice_types\">slice type</a>:\r\n> +For <code>a</code> of <a href=\"#Pointer_types\">pointer<**/a> to array\r\n> type:\r\n>  </p>\r\n>  <ul>\r\n> -       <li>if the slice is <code>nil</code> or if <code>x</code> is out\r\n> of range at run time,\r\n> +       <li><code>a[x]</code> is a shortcut for <code>(*a)[x]</code></li>\r\n> +</ul>\r\n> +\r\n> +<p>\r\n> +For <code>a</code> of <a href=\"#Slice_types\">slice type</a>\r\n> <code>S</code>:\r\n> +</p>\r\n> +<ul>\r\n> +       <li>if <code>x</code> is out of range at run time,\r\n>             a <a href=\"#Run_time_panics\">run-**time panic</a> occurs</li>\r\n>         <li><code>a[x]</code> is the slice element at index <code>x</code>\r\n> and the type of\r\n>             <code>a[x]</code> is the element type of <code>S</code></li>\r\n>  </ul>\r\n>\r\n>  <p>\r\n> -For <code>a</code> of type <code>T</code>\r\n> -where <code>T</code> is a <a href=\"#String_types\">string type</a>:\r\n> +For <code>a</code> of <a href=\"#String_types\">string type</a>:\r\n>  </p>\r\n>  <ul>\r\n>         <li>a <a href=\"#Constants\">constant</a> index must be in range\r\n>             if the string <code>a</code> is also constant</li>\r\n>         <li>if <code>x</code> is out of range at run time,\r\n>             a <a href=\"#Run_time_panics\">run-**time panic</a> occurs</li>\r\n> -       <li><code>a[x]</code> is the byte at index <code>x</code> and the\r\n> type of\r\n> +       <li><code>a[x]</code> is the non-constant byte value at index\r\n> <code>x</code> and the type of\r\n>             <code>a[x]</code> is <code>byte</code></li>\r\n>         <li><code>a[x]</code> may not be assigned to</li>\r\n>  </ul>\r\n>\r\n>  <p>\r\n> -For <code>a</code> of type <code>M</code>\r\n> -where <code>M</code> is a <a href=\"#Map_types\">map type</a>:\r\n> +For <code>a</code> of <a href=\"#Map_types\">map type</a> <code>M</code>:\r\n>  </p>\r\n>  <ul>\r\n>         <li><code>x</code>'s type must be\r\n> @@ -2628,9 +2631,9 @@\r\n>  </pre>\r\n>\r\n>  <p>\r\n> -constructs a substring or slice. The indices <code>low</code> and\r\n> -<code>high</code> select which elements appear in the result. The result\r\n> has\r\n> -indices starting at 0 and length equal to\r\n> +constructs a substring or slice. The <i>indices</i> <code>low</code> and\r\n> +<code>high</code> select which elements of operand <code>a</code> appear\r\n> +in the result. The result has indices starting at 0 and length equal to\r\n>  <code>high</code>&nbsp;-&nbsp;**<code>low</code>.\r\n>  After slicing the array <code>a</code>\r\n>  </p>\r\n> @@ -2663,24 +2666,34 @@\r\n>  </pre>\r\n>\r\n>  <p>\r\n> +If <code>a</code> is a pointer to an array, <code>a[low : high]</code> is\r\n> a shortcut for\r\n> +<code>(*a)[low : high]</code>.\r\n> +</p>\r\n> +\r\n> +<p>\r\n>  For arrays or strings, the indices <code>low</code> and <code>high</code>\r\n> are\r\n>  <i>in range</i> if <code>0</code> &lt;= <code>low</code> &lt;=\r\n> <code>high</code> &lt;= <code>len(a)</code>,\r\n>  otherwise they are <i>out of range</i>.\r\n>  For slices, the upper index bound is the slice capacity\r\n> <code>cap(a)</code> rather than the length.\r\n>  A <a href=\"#Constants\">constant</a> index must be non-negative and\r\n> representable by a value of type\r\n>  <code>int</code>.\r\n> -If both indices\r\n> -are constant, they must satisfy <code>low &lt;= high</code>. If\r\n> <code>a</code> is <code>nil</code>\r\n> -or if the indices are out of range at run time, a <a\r\n> href=\"#Run_time_panics\">run-**time panic</a> occurs.\r\n> -</p>\r\n> -\r\n> -<p>\r\n> -If the sliced operand is a string or slice, the result of the slice\r\n> operation\r\n> -is a string or slice of the same type.\r\n> +If both indices are constant, they must satisfy <code>low &lt;=\r\n> high</code>.\r\n> +If the indices are out of range at run time, a <a\r\n> href=\"#Run_time_panics\">run-**time panic</a> occurs.\r\n> +</p>\r\n> +\r\n> +<p>\r\n> +Except for <a href=\"#Constants\">untyped strings</a>, if the sliced\r\n> operand is a string or slice,\r\n> +the result of the slice operation is a non-constant string or slice of\r\n> the same type.\r\n> +For untyped string operands the result is a non-constant value of type\r\n> <code>string</code>.\r\n>  If the sliced operand is an array, it must be <a\r\n> href=\"#Address_operators\">**addressable</a>\r\n>  and the result of the slice operation is a slice with the same element\r\n> type as the array.\r\n>  </p>\r\n>\r\n> +<!-- TODO: should this be an implementation restriction? -->\r\n> +<p>\r\n> +If the sliced operand of a valid slice expression is a <code>nil</code>\r\n> slice, the result\r\n> +is a <code>nil</code> slice.\r\n> +<p>\r\n>\r\n>  <h3 id=\"Type_assertions\">Type assertions</h3>\r\n>\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-30 15:59:45.810240",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11884043/diff/15001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/11884043/diff/15001/doc/go_spec.html#newcode2553\ndoc/go_spec.html:2553: <li><code>a[x]</code> is a shortcut for <code>(*a)[x]</code></li>\n\"shortcut\" is a bit odd. i think \"shorthand\" is the right term, or you could say\n\n<li><code>a[x]</code> is equivalent to <code>(*a)[x]</code></li>\n\nhttps://codereview.appspot.com/11884043/diff/15001/doc/go_spec.html#newcode2670\ndoc/go_spec.html:2670: <code>(*a)[low : high]</code>.\nditto.\n\nhttps://codereview.appspot.com/11884043/diff/15001/doc/go_spec.html#newcode2676\ndoc/go_spec.html:2676: otherwise they are <i>out of range</i>.\nyou use this terminology before you define it.",
			"disapproval": false,
			"date": "2013-07-31 03:41:37.830830",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/11884043/diff/15001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/11884043/diff/15001/doc/go_spec.html#newcode2553\ndoc/go_spec.html:2553: <li><code>a[x]</code> is a shortcut for <code>(*a)[x]</code></li>\nOn 2013/07/31 03:41:38, r wrote:\n> \"shortcut\" is a bit odd. i think \"shorthand\" is the right term, or you could say\n> \n> <li><code>a[x]</code> is equivalent to <code>(*a)[x]</code></li>\n> \n\ntypo - I meant shorthand\n\nalso fixed all other uses of \"shortcut\"\n\nhttps://codereview.appspot.com/11884043/diff/15001/doc/go_spec.html#newcode2670\ndoc/go_spec.html:2670: <code>(*a)[low : high]</code>.\nOn 2013/07/31 03:41:38, r wrote:\n> ditto.\n\nDone.\n\nhttps://codereview.appspot.com/11884043/diff/15001/doc/go_spec.html#newcode2676\ndoc/go_spec.html:2676: otherwise they are <i>out of range</i>.\nOn 2013/07/31 03:41:38, r wrote:\n> you use this terminology before you define it.\n\nthis _is_ the definition",
			"disapproval": false,
			"date": "2013-07-31 20:30:58.920050",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=bfd5ed8236d5 ***\n\nspec: clarify index and selector expressions\n\n1) Explain a[i] and a[i:j] where a is of type *A as\n   shortcut for (*a)[i] and (*a)[i:j], respectively.\n\n2) Together with 1), because len() of nil slices is\n   well defined, there's no need to special case nil\n   operands anymore.\n\n3) The result of indexing or slicing a constant string\n   is always a non-constant byte or string value.\n\n4) The result of slicing an untyped string is a value\n   of type string.\n\n5) If the operand of a valid slice a[i:j] is nil (i, j\n   must be 0 for it to be valid - this already follows\n   from the in-range rules), the result is a nil slice.\n\nFixes issue 4913.\nFixes issue 5951.\n\nR=rsc, r, iant, ken\nCC=golang-dev\nhttps://codereview.appspot.com/11884043",
			"disapproval": false,
			"date": "2013-07-31 20:40:05.019200",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I didn't LGTM this.\r\n",
			"disapproval": false,
			"date": "2013-07-31 21:06:40.978590",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "oops - my bad. I used the wrong CL #. Will revert.\r\n- gri\r\n\r\n\r\nOn Wed, Jul 31, 2013 at 2:06 PM, Rob Pike <r@golang.org> wrote:\r\n\r\n> I didn't LGTM this.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-31 21:07:35.833100",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11884043/diff/23001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/11884043/diff/23001/doc/go_spec.html#newcode2676\ndoc/go_spec.html:2676: otherwise they are <i>out of range</i>.\nlook at line 2532.",
			"disapproval": false,
			"date": "2013-07-31 21:09:16.082720",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11884043/diff/23001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/11884043/diff/23001/doc/go_spec.html#newcode2676\ndoc/go_spec.html:2676: otherwise they are <i>out of range</i>.\nOn 2013/07/31 21:09:16, r wrote:\n> look at line 2532.\n\nLine 2532 defines these terms for index expressions, this section defines them for slice expressions.\n\nBut perhaps I am missing something?\n\nPlease comment on new CL 12198043.",
			"disapproval": false,
			"date": "2013-07-31 21:23:13.953500",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 11884043: spec: clarify index and selector expressions",
	"created": "2013-07-25 23:17:14.713970",
	"patchsets": [
		1,
		2001,
		5001,
		7002,
		10001,
		11001,
		15001,
		19001,
		23001
	],
	"modified": "2013-07-31 21:23:14.816890",
	"closed": true,
	"issue": 11884043
}