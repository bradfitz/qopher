{
	"description": "regexp: re-enable TestBadCompile\n\nThe code that was commented out was for the old regexp package.\nIn the new one the errors and the space of valid regexps are different.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-12-11 17:00:46.141600",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-11 17:00:54.974100",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Tue, Dec 11, 2012 at 12:00 PM, <rsc@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> regexp: re-enable TestBadCompile\r\n>\r\n> The code that was commented out was for the old regexp package.\r\n> In the new one the errors and the space of valid regexps are different.\r\n>\r\n> Please review this at https://codereview.appspot.**com/6873063/<https://codereview.appspot.com/6873063/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/regexp/all_test.go\r\n>\r\n>\r\n> Index: src/pkg/regexp/all_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/regexp/all_test.go\r\n> +++ b/src/pkg/regexp/all_test.go\r\n> @@ -30,53 +30,52 @@\r\n>         `\\!\\\\`,\r\n>  }\r\n>\r\n> -/*\r\n>  type stringError struct {\r\n>         re  string\r\n> -       err error\r\n> +       err string\r\n>  }\r\n>\r\n>  var bad_re = []stringError{\r\n> -       {`*`, ErrBareClosure},\r\n> -       {`+`, ErrBareClosure},\r\n> -       {`?`, ErrBareClosure},\r\n> -       {`(abc`, ErrUnmatchedLpar},\r\n> -       {`abc)`, ErrUnmatchedRpar},\r\n> -       {`x[a-z`, ErrUnmatchedLbkt},\r\n> -       {`abc]`, ErrUnmatchedRbkt},\r\n> -       {`[z-a]`, ErrBadRange},\r\n> -       {`abc\\`, ErrExtraneousBackslash},\r\n> -       {`a**`, ErrBadClosure},\r\n> -       {`a*+`, ErrBadClosure},\r\n> -       {`a??`, ErrBadClosure},\r\n> -       {`\\x`, ErrBadBackslash},\r\n> +       {`*`, \"missing argument to repetition operator: `*`\"},\r\n> +       {`+`, \"missing argument to repetition operator: `+`\"},\r\n> +       {`?`, \"missing argument to repetition operator: `?`\"},\r\n> +       {`(abc`, \"missing closing ): `(abc`\"},\r\n> +       {`abc)`, \"unexpected ): `abc)`\"},\r\n> +       {`x[a-z`, \"missing closing ]: `[a-z`\"},\r\n> +       {`[z-a]`, \"invalid character class range: `z-a`\"},\r\n> +       {`abc\\`, \"trailing backslash at end of expression\"},\r\n> +       {`a**`, \"invalid nested repetition operator: `**`\"},\r\n> +       {`a*+`, \"invalid nested repetition operator: `*+`\"},\r\n> +       {`\\x`, \"invalid escape sequence: `\\\\x`\"},\r\n>  }\r\n> -*/\r\n>\r\n> -func compileTest(t *testing.T, expr string, error error) *Regexp {\r\n> +func compileTest(t *testing.T, expr string, error string) *Regexp {\r\n>         re, err := Compile(expr)\r\n> -       if err != error {\r\n> +       if error == \"\" && err != nil {\r\n>                 t.Error(\"compiling `\", expr, \"`; unexpected error: \",\r\n> err.Error())\r\n>         }\r\n> +       if error != \"\" && err == nil {\r\n> +               t.Error(\"compiling `\", expr, \"`; missing error\")\r\n> +       } else if error != \"\" && !strings.Contains(err.Error(), error) {\r\n> +               t.Error(\"compiling `\", expr, \"`; wrong error: \",\r\n> err.Error(), \"; want \", error)\r\n> +       }\r\n>         return re\r\n>  }\r\n>\r\n>  func TestGoodCompile(t *testing.T) {\r\n>         for i := 0; i < len(good_re); i++ {\r\n> -               compileTest(t, good_re[i], nil)\r\n> +               compileTest(t, good_re[i], \"\")\r\n>         }\r\n>  }\r\n>\r\n> -/*\r\n>  func TestBadCompile(t *testing.T) {\r\n>         for i := 0; i < len(bad_re); i++ {\r\n>                 compileTest(t, bad_re[i].re, bad_re[i].err)\r\n>         }\r\n>  }\r\n> -*/\r\n>\r\n>  func matchTest(t *testing.T, test *FindTest) {\r\n> -       re := compileTest(t, test.pat, nil)\r\n> +       re := compileTest(t, test.pat, \"\")\r\n>         if re == nil {\r\n>                 return\r\n>         }\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-12-11 17:08:21.865230",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=3a97cf1c51ba ***\n\nregexp: re-enable TestBadCompile\n\nThe code that was commented out was for the old regexp package.\nIn the new one the errors and the space of valid regexps are different.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/6873063",
			"disapproval": false,
			"date": "2012-12-11 17:19:42.978730",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 6873063: regexp: re-enable TestBadCompile",
	"created": "2012-12-11 17:00:42.096350",
	"patchsets": [
		1,
		3001,
		4002
	],
	"modified": "2012-12-11 17:19:43.905290",
	"closed": true,
	"issue": 6873063
}