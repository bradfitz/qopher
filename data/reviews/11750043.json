{
	"description": "go.tools/go/types: simplified and faster Scope\n\n- implemented objset for tracking duplicates of fields and methods\n  which permitted a simpler and faster scope implementation in turn\n- related cleanups and internal renames\n- fixed a couple of identifier reporting bugs\n\nSpeed of type-checking itself increased by almost 10%\n(from ~71Kloc/s to ~78Kloc/s on one machine, measured\nvia go test -run=Self).",
	"cc": [
		"adonovan@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.tools",
			"disapproval": false,
			"date": "2013-07-24 01:15:18.625900",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/11750043/diff/15001/go/types/resolver.go\nFile go/types/resolver.go (right):\n\nhttps://codereview.appspot.com/11750043/diff/15001/go/types/resolver.go#newcode30\ngo/types/resolver.go:30: obj = nil\nIs this right?  I thought we wanted \"var _ int\" to be a blank ident declaring a Var of type int, that you couldn't refer to?  That's what the api.go docs say.\n\nhttps://codereview.appspot.com/11750043/diff/15001/go/types/scope.go\nFile go/types/scope.go (right):\n\nhttps://codereview.appspot.com/11750043/diff/15001/go/types/scope.go#newcode118\ngo/types/scope.go:118: if len(s.entries) == 32 {\nI would expect the payoff threshold to be lower than this, esp. since small maps were recently optimised; have you benchmarked various values?\n\nhttps://codereview.appspot.com/11750043/diff/15001/go/types/types.go\nFile go/types/types.go (right):\n\nhttps://codereview.appspot.com/11750043/diff/15001/go/types/types.go#newcode196\ngo/types/types.go:196: scope      *Scope // function scope, always present\nWhat if the client passes nil to NewSignature (as ssa does for some fake functions IIRC)?\nDo you want an assertion?",
			"disapproval": false,
			"date": "2013-07-24 01:37:56.179540",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I have added the missing importer, ssa, and ssa/interp files where a scope argument (for NewSignature) was missing, or an extra package argument was supplied (for Scope.Insert). Those changes were purely mechanical.\n\nhttps://codereview.appspot.com/11750043/diff/15001/go/types/resolver.go\nFile go/types/resolver.go (right):\n\nhttps://codereview.appspot.com/11750043/diff/15001/go/types/resolver.go#newcode30\ngo/types/resolver.go:30: obj = nil\nOn 2013/07/24 01:37:56, adonovan wrote:\n> Is this right?  I thought we wanted \"var _ int\" to be a blank ident declaring a\n> Var of type int, that you couldn't refer to?  That's what the api.go docs say.\n\nThe api says (perhaps not clear enough), that Objects records _all_ identifiers in the source, but obj is nil for identifiers that were not declared. _ identifiers never \"lead to a binding\" (== declaration), per spec. This is correct per API doc.\n\nhttps://codereview.appspot.com/11750043/diff/15001/go/types/scope.go\nFile go/types/scope.go (right):\n\nhttps://codereview.appspot.com/11750043/diff/15001/go/types/scope.go#newcode118\ngo/types/scope.go:118: if len(s.entries) == 32 {\nOn 2013/07/24 01:37:56, adonovan wrote:\n> I would expect the payoff threshold to be lower than this, esp. since small maps\n> were recently optimised; have you benchmarked various values?\n\nSmaller values made it slower, but perhaps it's due to the extra data structure rather than it's specific size. I'll add a TODO. Maybe we can get away with just the map (if we don't care about insertion order, which I think we don't anymore).\n\nhttps://codereview.appspot.com/11750043/diff/15001/go/types/types.go\nFile go/types/types.go (right):\n\nhttps://codereview.appspot.com/11750043/diff/15001/go/types/types.go#newcode196\ngo/types/types.go:196: scope      *Scope // function scope, always present\nOn 2013/07/24 01:37:56, adonovan wrote:\n> What if the client passes nil to NewSignature (as ssa does for some fake\n> functions IIRC)?\n> Do you want an assertion?\n\nNot sure. The issue is: what is the correct factory API really? I don't know yet. I know that the scope is always present for signatures created by go/types.\n\nI'll add a TODO.",
			"disapproval": false,
			"date": "2013-07-24 04:14:55.478900",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=6ce131f7769e&repo=tools ***\n\ngo.tools/go/types: simplified and faster Scope\n\n- implemented objset for tracking duplicates of fields and methods\n  which permitted a simpler and faster scope implementation in turn\n- related cleanups and internal renames\n- fixed a couple of identifier reporting bugs\n\nSpeed of type-checking itself increased by almost 10%\n(from ~71Kloc/s to ~78Kloc/s on one machine, measured\nvia go test -run=Self).\n\nR=adonovan\nCC=golang-dev\nhttps://codereview.appspot.com/11750043",
			"disapproval": false,
			"date": "2013-07-24 04:22:03.034460",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 11750043: go.tools/go/types: simplified and faster Scope",
	"created": "2013-07-23 23:56:08.374440",
	"patchsets": [
		1,
		3001,
		6001,
		9001,
		12001,
		15001,
		20001,
		13013,
		19002
	],
	"modified": "2013-07-24 04:22:05.504070",
	"closed": true,
	"issue": 11750043
}