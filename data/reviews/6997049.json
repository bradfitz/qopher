{
	"description": "runtime/linux: die more gracefully when locked mem quota is overrun.\n\nUsed to then die on a nil pointer situation. Most Linux standard setups are rather restrictive regarding the default amount of lockable memory.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"minux.ma@gmail.com",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"sebastien.paolacci@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\nWill wait for Russ's comment.",
			"disapproval": false,
			"date": "2012-12-23 19:59:58.440640",
			"approval": true
		},
		{
			"sender": "sebastien.paolacci@gmail.com",
			"recipients": [
				"sebastien.paolacci@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6997049/diff/2002/src/pkg/runtime/mem_linux.c\nFile src/pkg/runtime/mem_linux.c (right):\n\nhttps://codereview.appspot.com/6997049/diff/2002/src/pkg/runtime/mem_linux.c#newcode68\nsrc/pkg/runtime/mem_linux.c:68: runtime\u00b7printf(\"runtime: mmap: too much locked memory (check rlimits).\\n\");\nOn 2012/12/23 13:35:22, minux wrote:\n> check 'ulimit -l'?\n\nDone.",
			"disapproval": false,
			"date": "2012-12-23 19:56:08.611680",
			"approval": false
		},
		{
			"sender": "sebastien.paolacci@gmail.com",
			"recipients": [
				"sebastien.paolacci@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-12-23 10:16:12.243770",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"sebastien.paolacci@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6997049/diff/2002/src/pkg/runtime/mem_linux.c\nFile src/pkg/runtime/mem_linux.c (right):\n\nhttps://codereview.appspot.com/6997049/diff/2002/src/pkg/runtime/mem_linux.c#newcode68\nsrc/pkg/runtime/mem_linux.c:68: runtime\u00b7printf(\"runtime: mmap: too much locked memory (check rlimits).\\n\");\ncheck 'ulimit -l'?",
			"disapproval": false,
			"date": "2012-12-23 13:35:22.067050",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "How can this happen?\r\n",
			"disapproval": false,
			"date": "2012-12-23 19:22:02.084940",
			"approval": false
		},
		{
			"sender": "sebastien.paolacci@gmail.com",
			"recipients": [
				"sebastien.paolacci@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/12/23 19:22:02, rsc wrote:\n> How can this happen?\n\nFor exemple, by using `syscall.Mlockall(syscall.MCL_FUTURE)' with an under-provisioned enough \"ulimit -l\". That's (at least) what happened to me.\n\nmmap's describe the situation as \"EAGAIN: The file has been locked, or too much memory has been locked\". I can't really get why they choose that error code, but it really does happen..\n\nSebastien",
			"disapproval": false,
			"date": "2012-12-23 19:52:28.301750",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"sebastien.paolacci@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-12-29 19:25:52.698350",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Submitted but hg didn't manage to send mail about it.\r\nYou may need to run hg change -D 6997049 after hg sync.\r\n",
			"disapproval": false,
			"date": "2012-12-30 02:36:03.760120",
			"approval": false
		}
	],
	"owner_email": "sebastien.paolacci@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Sebastien Paolacci",
	"subject": "code review 6997049: runtime/linux: die more gracefully when locked mem quot...",
	"created": "2012-12-23 10:14:43.921550",
	"patchsets": [
		1,
		2001,
		2002,
		3002
	],
	"modified": "2012-12-30 02:36:03.760120",
	"closed": false,
	"issue": 6997049
}