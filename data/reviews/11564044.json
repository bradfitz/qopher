{
	"description": "regexp: use a very fast random generator for benchmarks.\n\nCalls into math/rand are very slow, especially under race\ndetector because of heap accesses.\n\ngo test -bench . -run none -benchtime .1s\nBefore: 23.0s\nAfter:  17.4s\n\nFixes issue 5837.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/19 06:42:57, remyoudompheng wrote:\n> Hello mailto:golang-dev@googlegroups.com (cc: mailto:golang-dev@googlegroups.com),\n> \n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n\nWell, hold on, the \"random\" numbers will repeat in a loop, this is a bit stupid, but you see the idea.",
			"disapproval": false,
			"date": "2013-07-19 06:44:18.453060",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-07-19 06:42:57.045520",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-07-19 06:54:50.052780",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/19 06:54:50, remyoudompheng wrote:\n> Hello mailto:golang-dev@googlegroups.com (cc: mailto:golang-dev@googlegroups.com),\n> \n> Please take another look.\n\nLGTM. This has reduced the run time for the problematic benchmark from 400s to 262.478s (uncontented). This should allow the builder to finish the benchmark in the 10 minute window.",
			"disapproval": false,
			"date": "2013-07-19 07:38:44.493860",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11564044/diff/8001/src/pkg/regexp/exec_test.go\nFile src/pkg/regexp/exec_test.go (right):\n\nhttps://codereview.appspot.com/11564044/diff/8001/src/pkg/regexp/exec_test.go#newcode664\nsrc/pkg/regexp/exec_test.go:664: }\nif you want fast...\n\nhttp://play.golang.org/p/W7ITvslaqV\n\nit's a fast fast PRG designed for this kind of thing for me by Jim Reeds. it's inside the implementation of select in newsqueak\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar x = 0xFFFFFFFF\n\tvar text[200]byte\n\tfor i := range text {\n\t\tx += x\n\t\tif int(x) < 0 {\n\t\t\tx^=0x88888EEF\n\t\t}\n\t\tv := byte(uint(x)%95)\n\t\tif v == 0 {\n\t\t\ttext[i] = '\\n'\n\t\t} else {\n\t\t\ttext[i] = v+' '\n\t\t}\n\t}\n\tfmt.Printf(\"%q\\n\", text)\n\n}",
			"disapproval": false,
			"date": "2013-07-19 08:56:13.917060",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "x should be an int32 here.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-07-19 09:01:06.140760",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-07-20 09:05:45.078530",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11564044/diff/17001/src/pkg/regexp/exec_test.go\nFile src/pkg/regexp/exec_test.go (right):\n\nhttps://codereview.appspot.com/11564044/diff/17001/src/pkg/regexp/exec_test.go#newcode655\nsrc/pkg/regexp/exec_test.go:655: x ^= 1\ni don't understand why this is here. the bit pattern for addition is unaffected by signedness. why flip the low bit?\n\nhere is the C code.\n\nlong\tx=-1;\n...\n\t\tx+=x;\n\t\tif(x<0)\n\t\t\tx^=0x88888EEFL;\n\nwhat am i missing?",
			"disapproval": false,
			"date": "2013-07-20 12:16:00.091250",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/20 12:16:00, r wrote:\n> https://codereview.appspot.com/11564044/diff/17001/src/pkg/regexp/exec_test.go\n> File src/pkg/regexp/exec_test.go (right):\n> \n> https://codereview.appspot.com/11564044/diff/17001/src/pkg/regexp/exec_test.go#newcode655\n> src/pkg/regexp/exec_test.go:655: x ^= 1\n> i don't understand why this is here. the bit pattern for addition is unaffected\n> by signedness. why flip the low bit?\n> \n> here is the C code.\n> \n> long\tx=-1;\n> ...\n> \t\tx+=x;\n> \t\tif(x<0)\n> \t\t\tx^=0x88888EEFL;\n> \n> what am i missing?\n\nUsing this generator in (x%n) patterns tends to generate runs of zeroes much more frequently than it should. The bit flip breaks these extra zeroes so it \"looks more random\".\n\nI was afraid it would affect the benchmarks but they behave similarly with the consecutive blank lines so I can remove the extra line if you prefer.",
			"disapproval": false,
			"date": "2013-07-20 15:58:15.816640",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-07-20 21:21:12.000800",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=3bf9ffdcca1f ***\n\nregexp: use a very fast random generator for benchmarks.\n\nCalls into math/rand are very slow, especially under race\ndetector because of heap accesses.\n\ngo test -bench . -run none -benchtime .1s\nBefore: 23.0s\nAfter:  17.4s\n\nFixes issue 5837.\n\nR=golang-dev, dave, r\nCC=golang-dev\nhttps://codereview.appspot.com/11564044",
			"disapproval": false,
			"date": "2013-07-20 21:33:51.206560",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 11564044: regexp: use a very fast random generator for benchmarks.",
	"created": "2013-07-19 06:29:29.017540",
	"patchsets": [
		1,
		3001,
		1002,
		8001,
		17001,
		25001
	],
	"modified": "2013-07-20 21:33:53.598000",
	"closed": true,
	"issue": 11564044
}