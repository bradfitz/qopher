{
	"description": "fmt: only use Stringer or Error for strings\nThis is a slight change to fmt's semantics, but means that if you use\n%d to print an integer with a Stringable value, it will print as an integer.\nThis came up because Time.Month() couldn't cleanly print as an integer\nrather than a name. Using %d on Stringables is silly anyway, so there\nshould be no effect outside the fmt tests.\nAs a mild bonus, certain recursive failures of String methods\nwill also be avoided this way.",
	"cc": [
		"golang-dev@googlegroups.com",
		"adg@golang.org"
	],
	"reviewers": [
		"rsc@golang.org",
		"rogpeppe@gmail.com"
	],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-06 00:07:28.081261",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nYay.\n\nhttp://codereview.appspot.com/5453053/diff/2007/src/pkg/fmt/doc.go\nFile src/pkg/fmt/doc.go (right):\n\nhttp://codereview.appspot.com/5453053/diff/2007/src/pkg/fmt/doc.go#newcode106\nsrc/pkg/fmt/doc.go:106: cast the value before recurring:\ns/cast/convert/",
			"disapproval": false,
			"date": "2011-12-06 01:32:55.054155",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-05 23:57:35.778908",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5453053/diff/3001/src/pkg/fmt/print.go\nFile src/pkg/fmt/print.go (right):\n\nhttp://codereview.appspot.com/5453053/diff/3001/src/pkg/fmt/print.go#newcode634\nsrc/pkg/fmt/print.go:634: // If a string is acceptable according to the format, see if\n\"If the format admits a string\" ?\n\nhttp://codereview.appspot.com/5453053/diff/8/src/pkg/fmt/doc.go\nFile src/pkg/fmt/doc.go (right):\n\nhttp://codereview.appspot.com/5453053/diff/8/src/pkg/fmt/doc.go#newcode97\nsrc/pkg/fmt/doc.go:97: satisfies the (possibly implicit) format, that method will be used\nWhen is the format implicit? And, like the comment, I suggest you make the format the subject, not the string. (so it's the operand and then the format that are discussed with respect to string methods and strings)",
			"disapproval": false,
			"date": "2011-12-06 00:13:21.157759",
			"approval": true
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yay +1!\nOn 6 Dec 2011 01:32, <rsc@golang.org> wrote:\n\n> LGTM\n>\n> Yay.\n>\n>\n>\n> http://codereview.appspot.com/**5453053/diff/2007/src/pkg/fmt/**doc.go<http://codereview.appspot.com/5453053/diff/2007/src/pkg/fmt/doc.go>\n> File src/pkg/fmt/doc.go (right):\n>\n> http://codereview.appspot.com/**5453053/diff/2007/src/pkg/fmt/**\n> doc.go#newcode106<http://codereview.appspot.com/5453053/diff/2007/src/pkg/fmt/doc.go#newcode106>\n> src/pkg/fmt/doc.go:106: cast the value before recurring:\n> s/cast/convert/\n>\n> http://codereview.appspot.com/**5453053/<http://codereview.appspot.com/5453053/>\n>\n",
			"disapproval": false,
			"date": "2011-12-06 08:44:34.423966",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nMuch more comprehensible.",
			"disapproval": false,
			"date": "2011-12-06 00:44:41.428450",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-06 00:29:44.166272",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=8ed47e9783c3 ***\n\nfmt: only use Stringer or Error for strings\nThis is a slight change to fmt's semantics, but means that if you use\n%d to print an integer with a Stringable value, it will print as an integer.\nThis came up because Time.Month() couldn't cleanly print as an integer\nrather than a name. Using %d on Stringables is silly anyway, so there\nshould be no effect outside the fmt tests.\nAs a mild bonus, certain recursive failures of String methods\nwill also be avoided this way.\n\nR=golang-dev, adg\nCC=golang-dev\nhttp://codereview.appspot.com/5453053",
			"disapproval": false,
			"date": "2011-12-06 00:45:54.529313",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5453053: fmt: only use Stringer or Error for strings",
	"created": "2011-12-05 23:57:31.930063",
	"patchsets": [
		1,
		3001,
		8,
		5001,
		2007
	],
	"modified": "2011-12-06 08:44:34.522321",
	"closed": true,
	"issue": 5453053
}