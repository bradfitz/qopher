{
	"description": "compress/flate: avoid ReadByte method lookups during decode\n\nNot for Go 1.1. But I'm curious if anybody could make this\neven faster. It seems like the method value \"fm\" thunks or\nwhatever could be faster.\n\nbenchmark                           old ns/op    new ns/op    delta\nBenchmarkDecodeDigitsSpeed1e4          236192       238760   +1.09%\nBenchmarkDecodeDigitsSpeed1e5         3366977      2239414  -33.49%\nBenchmarkDecodeDigitsSpeed1e6        21859968     22174977   +1.44%\nBenchmarkDecodeDigitsDefault1e4        367851       235580  -35.96%\nBenchmarkDecodeDigitsDefault1e5       2172862      2010736   -7.46%\nBenchmarkDecodeDigitsDefault1e6      63883924     67595164   +5.81%\nBenchmarkDecodeDigitsCompress1e4       472264       235809  -50.07%\nBenchmarkDecodeDigitsCompress1e5      6844199      2015219  -70.56%\nBenchmarkDecodeDigitsCompress1e6     67487852     19401260  -71.25%\nBenchmarkDecodeTwainSpeed1e4           244094       245997   +0.78%\nBenchmarkDecodeTwainSpeed1e5          7047986      2207383  -68.68%\nBenchmarkDecodeTwainSpeed1e6         47650369     21472133  -54.94%\nBenchmarkDecodeTwainDefault1e4         227607       231637   +1.77%\nBenchmarkDecodeTwainDefault1e5        4151651      1846065  -55.53%\nBenchmarkDecodeTwainDefault1e6       17855847     17496550   -2.01%\nBenchmarkDecodeTwainCompress1e4        234654       232314   -1.00%\nBenchmarkDecodeTwainCompress1e5       1821876      1827412   +0.30%\nBenchmarkDecodeTwainCompress1e6      60391883     17410524  -71.17%\n\nbenchmark                            old MB/s     new MB/s  speedup\nBenchmarkDecodeDigitsSpeed1e4           42.34        41.88    0.99x\nBenchmarkDecodeDigitsSpeed1e5           29.70        44.65    1.50x\nBenchmarkDecodeDigitsSpeed1e6           45.75        45.10    0.99x\nBenchmarkDecodeDigitsDefault1e4         27.18        42.45    1.56x\nBenchmarkDecodeDigitsDefault1e5         46.02        49.73    1.08x\nBenchmarkDecodeDigitsDefault1e6         15.65        14.79    0.95x\nBenchmarkDecodeDigitsCompress1e4        21.17        42.41    2.00x\nBenchmarkDecodeDigitsCompress1e5        14.61        49.62    3.40x\nBenchmarkDecodeDigitsCompress1e6        14.82        51.54    3.48x\nBenchmarkDecodeTwainSpeed1e4            40.97        40.65    0.99x\nBenchmarkDecodeTwainSpeed1e5            14.19        45.30    3.19x\nBenchmarkDecodeTwainSpeed1e6            20.99        46.57    2.22x\nBenchmarkDecodeTwainDefault1e4          43.94        43.17    0.98x\nBenchmarkDecodeTwainDefault1e5          24.09        54.17    2.25x\nBenchmarkDecodeTwainDefault1e6          56.00        57.15    1.02x\nBenchmarkDecodeTwainCompress1e4         42.62        43.05    1.01x\nBenchmarkDecodeTwainCompress1e5         54.89        54.72    1.00x\nBenchmarkDecodeTwainCompress1e6         16.56        57.44    3.47x",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"daniel.morsing@gmail.com",
		"dsymonds@golang.org"
	],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-04-28 17:42:16.607230",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am puzzled by this. Method value calls and interface calls should have the same performance characteristics.",
			"disapproval": false,
			"date": "2013-04-29 11:17:23.311440",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Apr 29, 2013 at 9:17 PM,  <daniel.morsing@gmail.com> wrote:\r\n\r\n> I am puzzled by this. Method value calls and interface calls should have\r\n> the same performance characteristics.\r\n\r\nHow can they? Each method call via an interface value needs to\r\nindirect through the itab, but the method value needs no indirection.\r\n",
			"disapproval": false,
			"date": "2013-04-29 11:51:49.564340",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/29 11:51:49, dsymonds wrote:\n> On Mon, Apr 29, 2013 at 9:17 PM,  <mailto:daniel.morsing@gmail.com> wrote:\n> \n> > I am puzzled by this. Method value calls and interface calls should have\n> > the same performance characteristics.\n> \n> How can they? Each method call via an interface value needs to\n> indirect through the itab, but the method value needs no indirection.\n\nFunction values are also indirected after the representation was changed to 2 words.",
			"disapproval": false,
			"date": "2013-04-29 11:55:15.133950",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Apr 29, 2013 at 9:55 PM,  <daniel.morsing@gmail.com> wrote:\r\n\r\n> Function values are also indirected after the representation was changed\r\n> to 2 words.\r\n\r\nYes, but that's just dereferencing a pointer to get the jump address.\r\nResolving a method is a few more instructions, no?\r\n",
			"disapproval": false,
			"date": "2013-04-29 11:58:21.831430",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Plus this is replacing\r\n  f.r.ReadByte()\r\nby\r\n  f.readByte()\r\nso it's changing a method lookup to a pointer deref, and dropping an\r\nextra pointer deref.\r\n",
			"disapproval": false,
			"date": "2013-04-29 12:00:12.872520",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Method lookup is just an offset indirect of the itab pointer in the interface. Essentially the same as call prologue for calling the function value.\n\nThe indirect through the struct doesn't disappear. You just get another indirect in the method value thunk.\n\nHere is the assembly from 2 functions, one which goes through an interface, the other through a function pointer:\n \n--- prog list \"testInterface\" ---\n0061 (C:\\cygwin\\home\\dmo\\blah.go:23) TEXT    testInterface+0(SB),$32-8\n0062 (C:\\cygwin\\home\\dmo\\blah.go:23) LOCALS  ,$0\n0063 (C:\\cygwin\\home\\dmo\\blah.go:23) TYPE    x+0(FP){*\"\".test1},$8\n0064 (C:\\cygwin\\home\\dmo\\blah.go:24) MOVQ    x+0(FP),BX\n0065 (C:\\cygwin\\home\\dmo\\blah.go:24) MOVQ    (BX),CX\n0066 (C:\\cygwin\\home\\dmo\\blah.go:24) MOVQ    8(BX),BP\n0067 (C:\\cygwin\\home\\dmo\\blah.go:24) MOVQ    BP,(SP)\n0068 (C:\\cygwin\\home\\dmo\\blah.go:24) MOVQ    32(CX),BX\n0069 (C:\\cygwin\\home\\dmo\\blah.go:24) CALL    ,BX\n0070 (C:\\cygwin\\home\\dmo\\blah.go:25) RET     ,\n\n--- prog list \"testFuncVal\" ---\n0071 (C:\\cygwin\\home\\dmo\\blah.go:27) TEXT    testFuncVal+0(SB),$24-8\n0072 (C:\\cygwin\\home\\dmo\\blah.go:27) LOCALS  ,$0\n0073 (C:\\cygwin\\home\\dmo\\blah.go:27) TYPE    x+0(FP){*\"\".test2},$8\n0074 (C:\\cygwin\\home\\dmo\\blah.go:28) MOVQ    x+0(FP),BP\n0075 (C:\\cygwin\\home\\dmo\\blah.go:28) MOVQ    (BP),DX\n0076 (C:\\cygwin\\home\\dmo\\blah.go:28) MOVQ    (DX),BX\n0077 (C:\\cygwin\\home\\dmo\\blah.go:28) CALL    DX,BX\n0078 (C:\\cygwin\\home\\dmo\\blah.go:29) RET     ,\n\nWhen you take into consideration that the thunk adds an indirect and some stack moves, I am skeptical in that this should have any effect, barring a bug in the interface generation.",
			"disapproval": false,
			"date": "2013-04-29 12:33:18.036490",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I wrote a little microbenchmark: http://play.golang.org/p/OW98kmWeJz\n\nStill puzzled as to why Brad is seeing performance improvements. Maybe the optimizer can registerize some values on functions that it can't for interfaces.",
			"disapproval": false,
			"date": "2013-04-29 15:20:59.185620",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I discovered after sending this email that these benchmarks are incredibly\r\nvolatile, even without any code changes.  (e.g. modifying -test.benchtime)\r\n\r\nWith json's volatility we could at least attribute it to stack split\r\nmisfortune.  I can't figure out the cause here.  I'm still looking.\r\n\r\n\r\n\r\n\r\n\r\nOn Mon, Apr 29, 2013 at 8:20 AM, <daniel.morsing@gmail.com> wrote:\r\n\r\n> I wrote a little microbenchmark: http://play.golang.org/p/**OW98kmWeJz<http://play.golang.org/p/OW98kmWeJz>\r\n>\r\n> Still puzzled as to why Brad is seeing performance improvements. Maybe\r\n> the optimizer can registerize some values on functions that it can't for\r\n> interfaces.\r\n>\r\n> https://codereview.appspot.**com/8975046/<https://codereview.appspot.com/8975046/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-29 15:37:32.057850",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-05-17 20:35:53.207600",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 8975046: compress/flate: avoid ReadByte method lookups during decode",
	"created": "2013-04-28 17:40:00.934990",
	"patchsets": [
		1,
		2001,
		5001
	],
	"modified": "2013-05-17 20:35:54.758080",
	"closed": true,
	"issue": 8975046
}