{
	"description": "doc: simplify How to write Go code article\n\nThis version just tells you what to do, rather\nthan trying to teach you how it all works.\nShould be much better for newcomers.",
	"cc": [
		"dave@cheney.net",
		"gary.burd@gmail.com",
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"alcosholik@gmail.com"
	],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-04-02 04:20:19.380560",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks Andrew, this is a big improvement.\n\nhttps://codereview.appspot.com/8247044/diff/1/doc/code.html\nFile doc/code.html (right):\n\nhttps://codereview.appspot.com/8247044/diff/1/doc/code.html#newcode45\ndoc/code.html:45: accordingly. Your workspace can be located wherever you like, but we'll use\nMaybe add that you do not need to create src,pkg and bin as they will be created as needed.\n\nhttps://codereview.appspot.com/8247044/diff/1/doc/code.html#newcode60\ndoc/code.html:60: $ export PATH=$HOME/gocode/bin\n $ export PATH=$PATH:$HOME/gocode/bin\n\nhttps://codereview.appspot.com/8247044/diff/1/doc/code.html#newcode66\ndoc/code.html:66: The standard packages are given short paths such as <code>\"fmt\"</code> and\npackages from the standard library\n\nhttps://codereview.appspot.com/8247044/diff/1/doc/code.html#newcode126\ndoc/code.html:126: This command builds the <code>hello</code> package, producing an executable\n/s/package/command/\n\nhttps://codereview.appspot.com/8247044/diff/1/doc/code.html#newcode150\ndoc/code.html:150: <h3>Your first library</h3>\ncan you standardize on package or library, preferably package.\n\nhttps://codereview.appspot.com/8247044/diff/1/doc/code.html#newcode153\ndoc/code.html:153: Let's write a library and use it from the <code>hello</code> program.\ns/library/package",
			"disapproval": false,
			"date": "2013-04-02 04:37:29.784610",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8247044/diff/1/doc/code.html\nFile doc/code.html (right):\n\nhttps://codereview.appspot.com/8247044/diff/1/doc/code.html#newcode45\ndoc/code.html:45: accordingly. Your workspace can be located wherever you like, but we'll use\nOn 2013/04/02 04:37:30, dfc wrote:\n> Maybe add that you do not need to create src,pkg and bin as they will be created\n> as needed.\n\nI thought about it, but I feel like each word I add to this doc reduces the number of people that will read it.\n\nhttps://codereview.appspot.com/8247044/diff/1/doc/code.html#newcode60\ndoc/code.html:60: $ export PATH=$HOME/gocode/bin\nOn 2013/04/02 04:37:30, dfc wrote:\n>  $ export PATH=$PATH:$HOME/gocode/bin\n\ngood call.\n\nhttps://codereview.appspot.com/8247044/diff/1/doc/code.html#newcode66\ndoc/code.html:66: The standard packages are given short paths such as <code>\"fmt\"</code> and\nOn 2013/04/02 04:37:30, dfc wrote:\n> packages from the standard library\n\nDone.\n\nhttps://codereview.appspot.com/8247044/diff/1/doc/code.html#newcode126\ndoc/code.html:126: This command builds the <code>hello</code> package, producing an executable\nOn 2013/04/02 04:37:30, dfc wrote:\n> /s/package/command/\n\nDone.\n\nhttps://codereview.appspot.com/8247044/diff/1/doc/code.html#newcode150\ndoc/code.html:150: <h3>Your first library</h3>\nOn 2013/04/02 04:37:30, dfc wrote:\n> can you standardize on package or library, preferably package.\n\nWell the previous one was technically a package too, so I'm trying to draw the distinction between commands and libraries.\n\nRemember that most people reading this doc have no idea what a package is.",
			"disapproval": false,
			"date": "2013-04-02 06:11:56.110790",
			"approval": false
		},
		{
			"sender": "gary.burd@gmail.com",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"gary.burd@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Should the document mention that you can \n\n$ cd $GOPATH/src/example.com/hello\n$ go test\n$ go install\n\ninstead of typing the import path every time?",
			"disapproval": false,
			"date": "2013-04-02 06:22:00.382890",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"adg@golang.org",
				"dave@cheney.net",
				"gary.burd@gmail.com",
				"alcosholik@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "getting close.\ni'll take another look tomorrow\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html\nFile doc/code.html (right):\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode136\ndoc/code.html:136: publish it someday. In practice, you can choose an arbitrary path name.\nthis paragraph says it but it's pretty clumsy. try a rewrite. i think the solution is to reverse the order of presentation: choose a path. if your code is in a repo, that should be it. now you have the directory: $GOPATH/src/PATH\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode192\ndoc/code.html:192: You can also omit the package path and by running <code>go install</code> from\nbad grammar. rewrite. maybe\nyou can also omit the package path if you run go install from ...\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode218\ndoc/code.html:218: simply type the binary name:\ns/simply/just/\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode228\ndoc/code.html:228: repository, add the files, and commit your first change.\nmake clear this is optional\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode262\ndoc/code.html:262: Next, create a file named <code>sqrt.go</code> with the following contents.\nin that directory\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode297\ndoc/code.html:297: these commands produce no output then they have executed successfully.\ns/then //\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode343\ndoc/code.html:343: Now that you have followed the steps above, your workspace should look like\ntoo many \"Nows\".\n\nAfter the steps above, your workspace...\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode427\ndoc/code.html:427: Now run the test with <code>go test</code>:\ns/Now/Then/ (ha)\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode546\ndoc/code.html:546: \nd",
			"disapproval": false,
			"date": "2013-04-03 06:21:40.925140",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2 April 2013 17:22, <gary.burd@gmail.com> wrote:\r\n\r\n> Should the document mention that you can\r\n>\r\n> $ cd $GOPATH/src/example.com/hello\r\n> $ go test\r\n> $ go install\r\n>\r\n> instead of typing the import path every time?\r\n>\r\n\r\nGood point. I had originally written this but edited it out. I've added it\r\nagain.\r\n",
			"disapproval": false,
			"date": "2013-04-02 06:47:22.159940",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"dave@cheney.net",
				"gary.burd@gmail.com",
				"alcosholik@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2013-04-02 11:08:12.036050",
			"approval": false
		},
		{
			"sender": "alcosholik@gmail.com",
			"recipients": [
				"adg@golang.org",
				"dave@cheney.net",
				"gary.burd@gmail.com",
				"alcosholik@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8247044/diff/10001/doc/code.html\nFile doc/code.html (right):\n\nhttps://codereview.appspot.com/8247044/diff/10001/doc/code.html#newcode28\ndoc/code.html:28: Go code must be be kept inside a workspace. A workspace is a directory\n\"must be be\" -> \"must be\"\n\nhttps://codereview.appspot.com/8247044/diff/10001/doc/code.html#newcode75\ndoc/code.html:75: control repository. For instance, if your source repository is at\nThis would be confusing for me: I'm only starting with Go, why on Earth do I need a version control repository for my first programs?\n\nA bit of clarification would help: \"You don't need to publish your code to example.com before you can build it. This is just a convention adopted by Go, in practice you could have arbitrary directory names. In this case, we're using example.com as our base path...\" and so on, continuing to your next paragraph.\n\nhttps://codereview.appspot.com/8247044/diff/10001/doc/code.html#newcode122\ndoc/code.html:122: $ go install example.com/hello\nI think it would help reiterating here that \"example.com/hello\" is a path constructed from $GOPATH, no matter your current directory.\n\nLike \"The path to the package, \"example.com/hello\", is always relative to our $GOPATH.\" And in the next paragraph you already show a simpler way -- running `go install` from inside the package's directory.",
			"disapproval": false,
			"date": "2013-04-02 12:02:30.978000",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"adg@golang.org",
				"dave@cheney.net",
				"gary.burd@gmail.com",
				"alcosholik@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8247044/diff/10001/doc/code.html\nFile doc/code.html (right):\n\nhttps://codereview.appspot.com/8247044/diff/10001/doc/code.html#newcode51\ndoc/code.html:51: $ export GOPATH=$HOME/gocode\n'gocode' is a new name in a world full of 'gothis' and 'gothat'. can we avoid a new one? what about $HOME/golang, say? or even just $HOME/go? where does the binary distribution get installed - would this conflict?\n\nhttps://codereview.appspot.com/8247044/diff/10001/doc/code.html#newcode75\ndoc/code.html:75: control repository. For instance, if your source repository is at\nagree - you need to say that this is structured for sccs's. without that information it seems too arbitrary\n\nhttps://codereview.appspot.com/8247044/diff/10001/doc/code.html#newcode81\ndoc/code.html:81: We'll use <code>example.com/</code> as our base import path. Create a\nuse a real(er) one to make things clearer. gitub.com/xxx/yyy where xxx and yyy feel right - this whole thing should work if the reader makes one or two trivial substitutions.\n\nmaybe \n\ngithub.com/you/hello\n\nhttps://codereview.appspot.com/8247044/diff/10001/doc/code.html#newcode157\ndoc/code.html:157: </pre>\nOnce you're happy with your program, you can commit it to your repository with a command like git -oneofthemanyconfusinggitoptions -anotherofthemanyconfusinggitoptions\n\nhttps://codereview.appspot.com/8247044/diff/10001/doc/code.html#newcode197\ndoc/code.html:197: $ go install example.com/newmath\nyou said compile but then installed. when i want to see if it compiles, i run go build. when i want to make it available, i say go install. the difference is important. you don't need to explain it all, but choose words and examples that don't muddy the waters.\n\nTo see if the package compiles, run\n\ngo build example.com/newmath\n\nOnce it compiles, you can install it for your system with\n\ngo install example.com/newmath\n\nor if you are working in the source directory, just\n\ngo install\n\nhttps://codereview.appspot.com/8247044/diff/10001/doc/code.html#newcode202\ndoc/code.html:202: the command above produces no output then it successfully built a package\n\"these commands produce\"\n\ndrop the \"above\" and make it plural if you take my suggestion\n\nhttps://codereview.appspot.com/8247044/diff/10001/doc/code.html#newcode207\ndoc/code.html:207: Finally, modify <code>hello.go</code> to use the <code>newmath</code> package:\nnot finally - we're just getting started\n\nOnce the newmath package is installed, modify hello.go to use it.\n\nhttps://codereview.appspot.com/8247044/diff/10001/doc/code.html#newcode233\ndoc/code.html:233: </pre>\nworth explaining more.\nWhenever the go tool installs a package or binary, it also installs whatever\ndependencies it has. For example, if you modify the newmath package and then run\njust\n\ngo install example.com/hello\n\nnewmath will be installed as well, automatically.\n\n\n[i realize you're trying to keep things short but there are some details that do\nneed to be explained or it's all just magic.]\n\nhttps://codereview.appspot.com/8247044/diff/10001/doc/code.html#newcode244\ndoc/code.html:244: linux_amd64/       # this should reflect your OS and architecture\ns/should/will/\n\nhttps://codereview.appspot.com/8247044/diff/10001/doc/code.html#newcode329\ndoc/code.html:329: Or, running it from inside the package directory, you can omit the package path:\nwhat's \"it\"\n\nAs always, if your shell is in the package directory, you can omit the package path in the go command:",
			"disapproval": false,
			"date": "2013-04-02 13:47:14.276780",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"dave@cheney.net",
				"gary.burd@gmail.com",
				"alcosholik@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8247044/diff/10001/doc/code.html\nFile doc/code.html (right):\n\nhttps://codereview.appspot.com/8247044/diff/10001/doc/code.html#newcode28\ndoc/code.html:28: Go code must be be kept inside a workspace. A workspace is a directory\nOn 2013/04/02 12:02:31, alco wrote:\n> \"must be be\" -> \"must be\"\n\nDone.\n\nhttps://codereview.appspot.com/8247044/diff/10001/doc/code.html#newcode51\ndoc/code.html:51: $ export GOPATH=$HOME/gocode\nOn 2013/04/02 13:47:14, r wrote:\n> 'gocode' is a new name in a world full of 'gothis' and 'gothat'. can we avoid a\n> new one? what about $HOME/golang, say? or even just $HOME/go? where does the\n> binary distribution get installed - would this conflict?\n\nDone.\n\nhttps://codereview.appspot.com/8247044/diff/10001/doc/code.html#newcode75\ndoc/code.html:75: control repository. For instance, if your source repository is at\nOn 2013/04/02 12:02:31, alco wrote:\n> This would be confusing for me: I'm only starting with Go, why on Earth do I\n> need a version control repository for my first programs?\n> \n> A bit of clarification would help: \"You don't need to publish your code to\n> http://example.com before you can build it. This is just a convention adopted by Go, in\n> practice you could have arbitrary directory names. In this case, we're using\n> http://example.com as our base path...\" and so on, continuing to your next paragraph. \n\nDone.\n\nhttps://codereview.appspot.com/8247044/diff/10001/doc/code.html#newcode122\ndoc/code.html:122: $ go install example.com/hello\nOn 2013/04/02 12:02:31, alco wrote:\n> I think it would help reiterating here that \"example.com/hello\" is a path\n> constructed from $GOPATH, no matter your current directory.\n> \n> Like \"The path to the package, \"example.com/hello\", is always relative to our\n> $GOPATH.\" And in the next paragraph you already show a simpler way -- running\n> `go install` from inside the package's directory.\n\nDone.\n\nhttps://codereview.appspot.com/8247044/diff/10001/doc/code.html#newcode157\ndoc/code.html:157: </pre>\nOn 2013/04/02 13:47:14, r wrote:\n> Once you're happy with your program, you can commit it to your repository with a\n> command like git -oneofthemanyconfusinggitoptions\n> -anotherofthemanyconfusinggitoptions \n> \n\nDone.\n\nhttps://codereview.appspot.com/8247044/diff/10001/doc/code.html#newcode197\ndoc/code.html:197: $ go install example.com/newmath\nOn 2013/04/02 13:47:14, r wrote:\n> you said compile but then installed. when i want to see if it compiles, i run go\n> build. when i want to make it available, i say go install. the difference is\n> important. you don't need to explain it all, but choose words and examples that\n> don't muddy the waters.\n> \n> To see if the package compiles, run\n> \n> go build example.com/newmath\n> \n> Once it compiles, you can install it for your system with\n> \n> go install example.com/newmath\n> \n> or if you are working in the source directory, just\n> \n> go install\n\nDone.\n\nhttps://codereview.appspot.com/8247044/diff/10001/doc/code.html#newcode202\ndoc/code.html:202: the command above produces no output then it successfully built a package\nOn 2013/04/02 13:47:14, r wrote:\n> \"these commands produce\"\n> \n> drop the \"above\" and make it plural if you take my suggestion\n\nDone.\n\nhttps://codereview.appspot.com/8247044/diff/10001/doc/code.html#newcode207\ndoc/code.html:207: Finally, modify <code>hello.go</code> to use the <code>newmath</code> package:\nOn 2013/04/02 13:47:14, r wrote:\n> not finally - we're just getting started\n> \n> Once the newmath package is installed, modify hello.go to use it.\n\nDone.\n\nhttps://codereview.appspot.com/8247044/diff/10001/doc/code.html#newcode233\ndoc/code.html:233: </pre>\nOn 2013/04/02 13:47:14, r wrote:\n> worth explaining more.\n> Whenever the go tool installs a package or binary, it also installs whatever\n> dependencies it has. For example, if you modify the newmath package and then run\n> just\n> \n> go install example.com/hello\n> \n> newmath will be installed as well, automatically.\n> \n> \n> [i realize you're trying to keep things short but there are some details that do\n> need to be explained or it's all just magic.]\n\nDone.\n\nhttps://codereview.appspot.com/8247044/diff/10001/doc/code.html#newcode244\ndoc/code.html:244: linux_amd64/       # this should reflect your OS and architecture\nOn 2013/04/02 13:47:14, r wrote:\n> s/should/will/\n\nDone.\n\nhttps://codereview.appspot.com/8247044/diff/10001/doc/code.html#newcode329\ndoc/code.html:329: Or, running it from inside the package directory, you can omit the package path:\nOn 2013/04/02 13:47:14, r wrote:\n> what's \"it\"\n> \n> As always, if your shell is in the package directory, you can omit the package\n> path in the go command:\n> \n\nDone.",
			"disapproval": false,
			"date": "2013-04-03 03:21:08.297880",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"dave@cheney.net",
				"gary.burd@gmail.com",
				"alcosholik@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, gary.burd@gmail.com, alcosholik@gmail.com, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-04-03 03:21:16.985130",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"adg@golang.org",
				"dave@cheney.net",
				"gary.burd@gmail.com",
				"alcosholik@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8247044/diff/18001/doc/code.html\nFile doc/code.html (right):\n\nhttps://codereview.appspot.com/8247044/diff/18001/doc/code.html#newcode15\ndoc/code.html:15: way. Please read this document carefully.\nIt explains the simplest way to get up and running with your Go installation.\n\nhttps://codereview.appspot.com/8247044/diff/18001/doc/code.html#newcode40\ndoc/code.html:40: workspace (or workspaces).\nthe parentheses have thrown me off and i haven't started yet. delete the parenthetical remark\n\nhttps://codereview.appspot.com/8247044/diff/18001/doc/code.html#newcode76\ndoc/code.html:76: control repository. For instance, if your GitHub account is at\nwhat version control repository? you need a paragraph above here that explains the idea. in fact it needs to go near the 'workspace' definition.\n\nsomething like this. feel free to edit\n\nthe go tool is designed to work with open source code maintained in public repositories.  although you don't need to publish your code, the model for how the workspace is set up works the same whether you do or not. a workspace represents a collection of \"repositories\" of source code installed into a common library of binaries and compiled package files. the source code is maintained as a set of directories, under a common 'src' directory, one per repository. \n\nthen show an example\n\nthen say what GOPATH is\n\nthen package paths start to make sense.\n\ni know you're trying not to explain this but what's going on is incomprehensible if you don't",
			"disapproval": false,
			"date": "2013-04-03 04:56:20.770770",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"dave@cheney.net",
				"gary.burd@gmail.com",
				"alcosholik@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8247044/diff/18001/doc/code.html\nFile doc/code.html (right):\n\nhttps://codereview.appspot.com/8247044/diff/18001/doc/code.html#newcode15\ndoc/code.html:15: way. Please read this document carefully.\nOn 2013/04/03 04:56:21, r wrote:\n> It explains the simplest way to get up and running with your Go installation.\n\nDone.\n\nhttps://codereview.appspot.com/8247044/diff/18001/doc/code.html#newcode40\ndoc/code.html:40: workspace (or workspaces).\nOn 2013/04/03 04:56:21, r wrote:\n> the parentheses have thrown me off and i haven't started yet. delete the\n> parenthetical remark\n\nDone.\n\nhttps://codereview.appspot.com/8247044/diff/18001/doc/code.html#newcode76\ndoc/code.html:76: control repository. For instance, if your GitHub account is at\nOn 2013/04/03 04:56:21, r wrote:\n> what version control repository? you need a paragraph above here that explains\n> the idea. in fact it needs to go near the 'workspace' definition.\n> \n> something like this. feel free to edit\n> \n> the go tool is designed to work with open source code maintained in public\n> repositories.  although you don't need to publish your code, the model for how\n> the workspace is set up works the same whether you do or not. a workspace\n> represents a collection of \"repositories\" of source code installed into a common\n> library of binaries and compiled package files. the source code is maintained as\n> a set of directories, under a common 'src' directory, one per repository. \n> \n> then show an example\n> \n> then say what GOPATH is\n> \n> then package paths start to make sense.\n> \n> i know you're trying not to explain this but what's going on is incomprehensible\n> if you don't\n\nDone.",
			"disapproval": false,
			"date": "2013-04-03 05:54:18.941170",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"dave@cheney.net",
				"gary.burd@gmail.com",
				"alcosholik@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, gary.burd@gmail.com, alcosholik@gmail.com, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-04-03 05:54:32.384750",
			"approval": false
		},
		{
			"sender": "alcosholik@gmail.com",
			"recipients": [
				"adg@golang.org",
				"dave@cheney.net",
				"gary.burd@gmail.com",
				"alcosholik@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8247044/diff/26001/doc/code.html\nFile doc/code.html (right):\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode297\ndoc/code.html:297: these commands produce no output then they have executed successfully.\nOn 2013/04/03 09:16:10, adg wrote:\n> On 2013/04/03 07:37:21, alco wrote:\n> > Should definitely mention that `go build` for a non-main package doesn't\n> produce\n> > a binary.\n> > \n> > Text from \"go help build\", rephrased:\n> > \"Running <code>go build</code> for a non-main package compiles the package but\n> > discards the results, serving only as a check that the package can be built.\"\n> \n> I would really rather avoid this. It's quite a subtle thing, and it's not going\n> to matter in practice; if you're using a library, it'll get installed when you\n> \"go install\". Otherwise, what do you expect from go build? Even if it gave you\n> an object file, what would you do with it?\n\nIt's just confusing the first time you build a library and see nothing produced from it. People coming from C expect to see the .a files for every source file.\n\nYou've already mentioned that no output means no errors, but an additional note that says \"and unlike running `go build` for a command, building a library doesn't produce any binaries, so don't worry and don't try to look for one\" will help keep the reader reading instead of trying to figure out where the binary went.\n\nhttps://codereview.appspot.com/8247044/diff/37001/doc/code.html\nFile doc/code.html (right):\n\nhttps://codereview.appspot.com/8247044/diff/37001/doc/code.html#newcode54\ndoc/code.html:54: more source packages.\nMaybe it's my English, but this whole paragraph seems unclear. I think it can be safely dropped. You've already briefly described the contents of the src dir in the list above, and you show an example of a typical workspace below.",
			"disapproval": false,
			"date": "2013-04-03 09:36:35.293470",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"dave@cheney.net",
				"gary.burd@gmail.com",
				"alcosholik@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8247044/diff/26001/doc/code.html\nFile doc/code.html (right):\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode136\ndoc/code.html:136: publish it someday. In practice, you can choose an arbitrary path name.\nOn 2013/04/03 06:21:41, r wrote:\n> this paragraph says it but it's pretty clumsy. try a rewrite. i think the\n> solution is to reverse the order of presentation: choose a path. if your code is\n> in a repo, that should be it. now you have the directory: $GOPATH/src/PATH\n\nDone.\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode192\ndoc/code.html:192: You can also omit the package path and by running <code>go install</code> from\nOn 2013/04/03 06:21:41, r wrote:\n> bad grammar. rewrite. maybe\n> you can also omit the package path if you run go install from ...\n\nDone.\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode218\ndoc/code.html:218: simply type the binary name:\nOn 2013/04/03 06:21:41, r wrote:\n> s/simply/just/\n\nDone.\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode228\ndoc/code.html:228: repository, add the files, and commit your first change.\nOn 2013/04/03 06:21:41, r wrote:\n> make clear this is optional\n\nDone.\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode262\ndoc/code.html:262: Next, create a file named <code>sqrt.go</code> with the following contents.\nOn 2013/04/03 06:21:41, r wrote:\n> in that directory\n\nDone.\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode297\ndoc/code.html:297: these commands produce no output then they have executed successfully.\nOn 2013/04/03 06:21:41, r wrote:\n> s/then //\n\nDone.\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode343\ndoc/code.html:343: Now that you have followed the steps above, your workspace should look like\nOn 2013/04/03 06:21:41, r wrote:\n> too many \"Nows\".\n> \n> After the steps above, your workspace...\n\nDone.\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode427\ndoc/code.html:427: Now run the test with <code>go test</code>:\nOn 2013/04/03 06:21:41, r wrote:\n> s/Now/Then/ (ha)\n\nDone.\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode546\ndoc/code.html:546: \nOn 2013/04/03 06:21:41, r wrote:\n> d\n\nDone.",
			"disapproval": false,
			"date": "2013-04-03 06:46:57.536370",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"dave@cheney.net",
				"gary.burd@gmail.com",
				"alcosholik@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, gary.burd@gmail.com, alcosholik@gmail.com, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-04-03 09:16:27.907770",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"dave@cheney.net",
				"gary.burd@gmail.com",
				"alcosholik@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, gary.burd@gmail.com, alcosholik@gmail.com, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-04-03 06:47:18.574850",
			"approval": false
		},
		{
			"sender": "alcosholik@gmail.com",
			"recipients": [
				"adg@golang.org",
				"dave@cheney.net",
				"gary.burd@gmail.com",
				"alcosholik@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "A few more corrections\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html\nFile doc/code.html (right):\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode32\ndoc/code.html:32: binaries and compiled package files.\nThis is unclear: \"of source code installed into a common library of binaries\". Mixing meanings for the words \"installed\" and \"library\".\n\nMaybe, better put it along the following lines: \"A workspace contains a collection of packages (represented by subdirectories) with their source code and binaries (both in specific locations inside the workspace)\"\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode36\ndoc/code.html:36: A workspace is a directory that contains three subdirectories:\nThe previous sentence started the same way. If you want to say \"a workspace is a directory\", better do it in the previous paragraph. And here you can then go on with \"Each workspace contains three subdirectories:\"\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode87\ndoc/code.html:87: (<code>oauth</code> and <code>task</code>).\nNot clear how is a command different from a library at this point. Add one more explanation?\n\n\"The difference between commands and libraries is going to become clear soon\" or \"Both commands an libraries live side by side in your workspace. Go on reading to find out how they're different from each other\"\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode99\ndoc/code.html:99: To get started, create a workspace directory and set <code>GOPATH</code>\nA minor thing\n\ns/create a workspace directory/create a directory for your workspace/\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode297\ndoc/code.html:297: these commands produce no output then they have executed successfully.\nShould definitely mention that `go build` for a non-main package doesn't produce a binary.\n\nText from \"go help build\", rephrased:\n\"Running <code>go build</code> for a non-main package compiles the package but discards the results, serving only as a check that the package can be built.\"\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode330\ndoc/code.html:330: the <code>newmath</code> package will be installed as well, automatically.\nNot clear for a newbie. You have installed a command before (line 202), so a newbie will try to look for the package's binary in bin? Also, it kind of implies that the resulting program executable needs the newmath package installed, although in reality it's linked into the executable.\n\nIt's going to be more text, but I think it's a good place at this point in the document to explain the difference between go build and go install and mention where the binaries go, to avoid surprises.\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode437\ndoc/code.html:437: path from the <code>go</code> tool:\n\"If your shell is in\" sounds weird. Should instead be\n\n\"As always, if you are running go tool from inside the package's directory, you can omit the path:\" Or maybe even use an indefinite article \"a package's directory\" if that's appropriate.",
			"disapproval": false,
			"date": "2013-04-03 07:37:21.127360",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"dave@cheney.net",
				"gary.burd@gmail.com",
				"alcosholik@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks, this is really valuable feedback.\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html\nFile doc/code.html (right):\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode32\ndoc/code.html:32: binaries and compiled package files.\nOn 2013/04/03 07:37:21, alco wrote:\n> This is unclear: \"of source code installed into a common library of binaries\".\n> Mixing meanings for the words \"installed\" and \"library\".\n> \n> Maybe, better put it along the following lines: \"A workspace contains a\n> collection of packages (represented by subdirectories) with their source code\n> and binaries (both in specific locations inside the workspace)\"\n\nDone.\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode36\ndoc/code.html:36: A workspace is a directory that contains three subdirectories:\nOn 2013/04/03 07:37:21, alco wrote:\n> The previous sentence started the same way. If you want to say \"a workspace is a\n> directory\", better do it in the previous paragraph. And here you can then go on\n> with \"Each workspace contains three subdirectories:\"\n\nDone.\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode87\ndoc/code.html:87: (<code>oauth</code> and <code>task</code>).\nOn 2013/04/03 07:37:21, alco wrote:\n> Not clear how is a command different from a library at this point. Add one more\n> explanation?\n> \n> \"The difference between commands and libraries is going to become clear soon\" or\n> \"Both commands an libraries live side by side in your workspace. Go on reading\n> to find out how they're different from each other\"\n\nDone.\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode99\ndoc/code.html:99: To get started, create a workspace directory and set <code>GOPATH</code>\nOn 2013/04/03 07:37:21, alco wrote:\n> A minor thing\n> \n> s/create a workspace directory/create a directory for your workspace/\n\nIt is the workspace's directory, though. I'd like to leave this as is.\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode297\ndoc/code.html:297: these commands produce no output then they have executed successfully.\nOn 2013/04/03 07:37:21, alco wrote:\n> Should definitely mention that `go build` for a non-main package doesn't produce\n> a binary.\n> \n> Text from \"go help build\", rephrased:\n> \"Running <code>go build</code> for a non-main package compiles the package but\n> discards the results, serving only as a check that the package can be built.\"\n\nI would really rather avoid this. It's quite a subtle thing, and it's not going to matter in practice; if you're using a library, it'll get installed when you \"go install\". Otherwise, what do you expect from go build? Even if it gave you an object file, what would you do with it?\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode330\ndoc/code.html:330: the <code>newmath</code> package will be installed as well, automatically.\nOn 2013/04/03 07:37:21, alco wrote:\n> Not clear for a newbie. You have installed a command before (line 202), so a\n> newbie will try to look for the package's binary in bin? Also, it kind of\n> implies that the resulting program executable needs the newmath package\n> installed, although in reality it's linked into the executable.\n> \n> It's going to be more text, but I think it's a good place at this point in the\n> document to explain the difference between go build and go install and mention\n> where the binaries go, to avoid surprises.\n\nI've added a discussion below the \"your workspace should look like\"\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode330\ndoc/code.html:330: the <code>newmath</code> package will be installed as well, automatically.\nOn 2013/04/03 07:37:21, alco wrote:\n> Not clear for a newbie. You have installed a command before (line 202), so a\n> newbie will try to look for the package's binary in bin? Also, it kind of\n> implies that the resulting program executable needs the newmath package\n> installed, although in reality it's linked into the executable.\n> \n> It's going to be more text, but I think it's a good place at this point in the\n> document to explain the difference between go build and go install and mention\n> where the binaries go, to avoid surprises.\n\nAgain, I added some discussion to the end of this section. I really don't want to break up the flow here.\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode437\ndoc/code.html:437: path from the <code>go</code> tool:\nOn 2013/04/03 07:37:21, alco wrote:\n> \"If your shell is in\" sounds weird. Should instead be\n> \n> \"As always, if you are running go tool from inside the package's directory, you\n> can omit the path:\" Or maybe even use an indefinite article \"a package's\n> directory\" if that's appropriate.\n\nDone.",
			"disapproval": false,
			"date": "2013-04-03 09:16:09.699400",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"dave@cheney.net",
				"gary.burd@gmail.com",
				"alcosholik@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8247044/diff/26001/doc/code.html\nFile doc/code.html (right):\n\nhttps://codereview.appspot.com/8247044/diff/26001/doc/code.html#newcode297\ndoc/code.html:297: these commands produce no output then they have executed successfully.\nOn 2013/04/03 09:36:35, alco wrote:\n> On 2013/04/03 09:16:10, adg wrote:\n> > On 2013/04/03 07:37:21, alco wrote:\n> > > Should definitely mention that `go build` for a non-main package doesn't\n> > produce\n> > > a binary.\n> > > \n> > > Text from \"go help build\", rephrased:\n> > > \"Running <code>go build</code> for a non-main package compiles the package\n> but\n> > > discards the results, serving only as a check that the package can be\n> built.\"\n> > \n> > I would really rather avoid this. It's quite a subtle thing, and it's not\n> going\n> > to matter in practice; if you're using a library, it'll get installed when you\n> > \"go install\". Otherwise, what do you expect from go build? Even if it gave you\n> > an object file, what would you do with it?\n> \n> It's just confusing the first time you build a library and see nothing produced\n> from it. People coming from C expect to see the .a files for every source file.\n> \n> You've already mentioned that no output means no errors, but an additional note\n> that says \"and unlike running `go build` for a command, building a library\n> doesn't produce any binaries, so don't worry and don't try to look for one\" will\n> help keep the reader reading instead of trying to figure out where the binary\n> went.\n\nDone.",
			"disapproval": false,
			"date": "2013-04-03 10:30:26.557120",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"adg@golang.org",
				"dave@cheney.net",
				"gary.burd@gmail.com",
				"alcosholik@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8247044/diff/42001/doc/code.html\nFile doc/code.html (right):\n\nhttps://codereview.appspot.com/8247044/diff/42001/doc/code.html#newcode47\ndoc/code.html:47: The <code>go</code> tool builds source packages and installs the resultant\ns/resultant/resulting/  use the 10-cent word\n\nhttps://codereview.appspot.com/8247044/diff/42001/doc/code.html#newcode53\ndoc/code.html:53: repositories (such as Git or Mercurial) that track the development of one or\ns/as/as for/\n\nhttps://codereview.appspot.com/8247044/diff/42001/doc/code.html#newcode91\ndoc/code.html:91: <code>streak</code>, and <code>todo</code>) comprising two commands\nnice to see comprising used correctly for a change.\n\nhttps://codereview.appspot.com/8247044/diff/42001/doc/code.html#newcode97\ndoc/code.html:97: Commands and libraries are both kinds of source packages.\nhard to parse (garden path)\nCommands and libraries are built from different kinds of source packages.\n\nhttps://codereview.appspot.com/8247044/diff/42001/doc/code.html#newcode98\ndoc/code.html:98: We will discuss the disctinction later.\ns/ct/t/\n\nput a link on \"later\"\n\nhttps://codereview.appspot.com/8247044/diff/42001/doc/code.html#newcode122\ndoc/code.html:122: For convenience, you should add the workspace's <code>bin</code> subdirectory\ns/you should /\n\nhttps://codereview.appspot.com/8247044/diff/42001/doc/code.html#newcode151\ndoc/code.html:151: as long as it is unique to the standard library and greater Go ecosystem.\nthis is good now\n\nhttps://codereview.appspot.com/8247044/diff/42001/doc/code.html#newcode218\ndoc/code.html:218: binary. It then installs that binary to the workspace's <code>bin</code>\nmaybe s/to/in/\n\nhttps://codereview.appspot.com/8247044/diff/42001/doc/code.html#newcode219\ndoc/code.html:219: directory as <code>hello</code> (or, under Windows, <code>hello.exe</code>).\nIn our example, that will be $GOROOT/bin/hello, which is $HOME/go/bin/hello.\n\n(let's be really clear about what's going on)\n\nhttps://codereview.appspot.com/8247044/diff/42001/doc/code.html#newcode248\ndoc/code.html:248: repository, add the files, and commit your first change. Note that this step is\ns/Note that /Of course, / or /Again/\n\nbut maybe better to rewrite\n\nIf you're using a source control system, once the program is working is a good time\nto initialize the repository, add the files, and commit the change.\nAgain, this step is optional: you do not need to use source control\nto write Go code.\n\nhttps://codereview.appspot.com/8247044/diff/42001/doc/code.html#newcode325\ndoc/code.html:325: modify <code>hello.go</code> to use it:\nmaybe\nmodify your original hello.go, which is in <directory name>\n(just to remind them)",
			"disapproval": false,
			"date": "2013-04-03 20:53:07.571230",
			"approval": false
		},
		{
			"sender": "alcosholik@gmail.com",
			"recipients": [
				"adg@golang.org",
				"alcosholik@gmail.com",
				"dave@cheney.net",
				"gary.burd@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/03 21:20:22, adg wrote:\n> On 4 April 2013 08:12, <mailto:r@golang.org> wrote:\n> \n> > LGTM nice work\n> >\n> \n> Thanks for the comments Rob, Alexei, Dave, and Gary. I think the doc is\n> much better now.\n\nGreat job!",
			"disapproval": false,
			"date": "2013-04-03 21:43:59.825800",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"dave@cheney.net",
				"gary.burd@gmail.com",
				"alcosholik@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/8247044/diff/42001/doc/code.html\nFile doc/code.html (right):\n\nhttps://codereview.appspot.com/8247044/diff/42001/doc/code.html#newcode47\ndoc/code.html:47: The <code>go</code> tool builds source packages and installs the resultant\nOn 2013/04/03 20:53:07, r wrote:\n> s/resultant/resulting/  use the 10-cent word\n\nDone.\n\nhttps://codereview.appspot.com/8247044/diff/42001/doc/code.html#newcode53\ndoc/code.html:53: repositories (such as Git or Mercurial) that track the development of one or\nOn 2013/04/03 20:53:07, r wrote:\n> s/as/as for/\n\nDone.\n\nhttps://codereview.appspot.com/8247044/diff/42001/doc/code.html#newcode91\ndoc/code.html:91: <code>streak</code>, and <code>todo</code>) comprising two commands\nOn 2013/04/03 20:53:07, r wrote:\n> nice to see comprising used correctly for a change.\n\nThanks.\n\nhttps://codereview.appspot.com/8247044/diff/42001/doc/code.html#newcode97\ndoc/code.html:97: Commands and libraries are both kinds of source packages.\nOn 2013/04/03 20:53:07, r wrote:\n> hard to parse (garden path)\n> Commands and libraries are built from different kinds of source packages.\n\nDone.\n\nhttps://codereview.appspot.com/8247044/diff/42001/doc/code.html#newcode98\ndoc/code.html:98: We will discuss the disctinction later.\nOn 2013/04/03 20:53:07, r wrote:\n> s/ct/t/\n> \n> put a link on \"later\"\n\nDone.\n\nhttps://codereview.appspot.com/8247044/diff/42001/doc/code.html#newcode122\ndoc/code.html:122: For convenience, you should add the workspace's <code>bin</code> subdirectory\nOn 2013/04/03 20:53:07, r wrote:\n> s/you should /\n\nDone.\n\nhttps://codereview.appspot.com/8247044/diff/42001/doc/code.html#newcode151\ndoc/code.html:151: as long as it is unique to the standard library and greater Go ecosystem.\nOn 2013/04/03 20:53:07, r wrote:\n> this is good now\n\nGood.\n\nhttps://codereview.appspot.com/8247044/diff/42001/doc/code.html#newcode218\ndoc/code.html:218: binary. It then installs that binary to the workspace's <code>bin</code>\nOn 2013/04/03 20:53:07, r wrote:\n> maybe s/to/in/\n\nI prefer \"to\". Maybe \"Inside\" ?\n\nhttps://codereview.appspot.com/8247044/diff/42001/doc/code.html#newcode219\ndoc/code.html:219: directory as <code>hello</code> (or, under Windows, <code>hello.exe</code>).\nOn 2013/04/03 20:53:07, r wrote:\n> In our example, that will be $GOROOT/bin/hello, which is $HOME/go/bin/hello.\n> \n> (let's be really clear about what's going on)\n\nDone.\n\nhttps://codereview.appspot.com/8247044/diff/42001/doc/code.html#newcode248\ndoc/code.html:248: repository, add the files, and commit your first change. Note that this step is\nOn 2013/04/03 20:53:07, r wrote:\n> s/Note that /Of course, / or /Again/\n> \n> but maybe better to rewrite\n> \n> If you're using a source control system, once the program is working is a good\n> time\n> to initialize the repository, add the files, and commit the change.\n> Again, this step is optional: you do not need to use source control\n> to write Go code.\n\nDone.\n\nhttps://codereview.appspot.com/8247044/diff/42001/doc/code.html#newcode325\ndoc/code.html:325: modify <code>hello.go</code> to use it:\nOn 2013/04/03 20:53:07, r wrote:\n> maybe\n> modify your original hello.go, which is in <directory name>\n> (just to remind them)\n\nDone.",
			"disapproval": false,
			"date": "2013-04-03 21:05:40.692190",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"adg@golang.org",
				"dave@cheney.net",
				"gary.burd@gmail.com",
				"alcosholik@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM nice work",
			"disapproval": false,
			"date": "2013-04-03 21:12:23.698030",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"dave@cheney.net",
				"gary.burd@gmail.com",
				"alcosholik@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=b36a8b649018 ***\n\ndoc: simplify How to write Go code article\n\nThis version just tells you what to do, rather\nthan trying to teach you how it all works.\nShould be much better for newcomers.\n\nR=dave, gary.burd, alcosholik, r\nCC=golang-dev\nhttps://codereview.appspot.com/8247044",
			"disapproval": false,
			"date": "2013-04-03 21:19:39.864650",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 4 April 2013 08:12, <r@golang.org> wrote:\r\n\r\n> LGTM nice work\r\n>\r\n\r\nThanks for the comments Rob, Alexei, Dave, and Gary. I think the doc is\r\nmuch better now.\r\n",
			"disapproval": false,
			"date": "2013-04-03 21:20:22.429790",
			"approval": false
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 8247044: doc: simplify How to write Go code article",
	"created": "2013-04-02 04:20:11.057840",
	"patchsets": [
		1,
		6001,
		10001,
		18001,
		26001,
		32001,
		37001,
		42001,
		47001,
		53001
	],
	"modified": "2013-04-03 21:43:59.826280",
	"closed": true,
	"issue": 8247044
}