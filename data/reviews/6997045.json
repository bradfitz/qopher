{
	"description": "encoding/json: A JSON tag can be any valid JSON string.\n\nFixes issue 3887.",
	"cc": [
		"golang-dev@googlegroups.com",
		"daniel.morsing@gmail.com",
		"remyoudompheng@gmail.com",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "stephane.travostino@gmail.com",
			"recipients": [
				"stephane.travostino@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "@rsc, @DMorsing: I know that corner cases such as \",\" being a valid JSON string character are correctly unhandled, but this is due to a limitation of the how the JSON tag in the struct is coded and parsed.\n\nI'd leave those particular cases out, but the change modifies how the key is validated after being parsed from the `json:etc\" tag. Once it is parsed correctly, just make sure it is a valid JSON string.\nI don't think this breaks anything, and gives more freedom to the user that wants to put weird characters in their JSON, as long as it is valid JSON.",
			"disapproval": false,
			"date": "2012-12-22 16:21:54.012770",
			"approval": false
		},
		{
			"sender": "stephane.travostino@gmail.com",
			"recipients": [
				"stephane.travostino@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL",
			"disapproval": false,
			"date": "2012-12-22 16:50:16.329640",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"stephane.travostino@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This CL doesn't seem to handle the case where someone wants a , in their json field name.\n\nAlso, because of the go field tag syntax, getting \\\" in the string from a tag means the tag looks like `json:\"\\\\\\\"\"`. Hardly intuitive. I think the better option is just to have the tag parser handle that case.",
			"disapproval": false,
			"date": "2012-12-22 10:21:56.134440",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "We are intentionally reserving some syntax for future expansion. We will\r\ngladly consider specific characters but we're not just going to accept\r\nanything at all. Spaces are okay.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-12-22 16:32:30.257360",
			"approval": false
		},
		{
			"sender": "stephane.travostino@gmail.com",
			"recipients": [
				"stephane.travostino@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-12-22 01:26:34.451790",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"stephane.travostino@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThanks. The backwards compatibility promise means we have to be very conservative about what we allow, because we're stuck with it once we do.",
			"disapproval": false,
			"date": "2012-12-22 18:35:58.815170",
			"approval": true
		},
		{
			"sender": "stephane.travostino@gmail.com",
			"recipients": [
				"stephane.travostino@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please discard the modification to encode_test.go.\n\nI can't really figure out a way to discard that file.",
			"disapproval": false,
			"date": "2012-12-22 01:32:06.321750",
			"approval": false
		},
		{
			"sender": "stephane.travostino@gmail.com",
			"recipients": [
				"stephane.travostino@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/12/22 10:14:06, remyoudompheng wrote:\n> https://codereview.appspot.com/6997045/diff/5001/src/pkg/encoding/json/encode.go\n> File src/pkg/encoding/json/encode.go (right):\n> \n> https://codereview.appspot.com/6997045/diff/5001/src/pkg/encoding/json/encode.go#newcode432\n> src/pkg/encoding/json/encode.go:432: func isValidString(s string) bool {\n> I don't understand what this function is doing nor the relation with the CL\n> description. Can you explain?\n\nThe spec at json.org specifies that the member key in an object can be any valid string. This is what this function is doing: checking that the custom key passed by the user in the struct tag is a valid JSON string.",
			"disapproval": false,
			"date": "2012-12-22 16:17:53.493420",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"stephane.travostino@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/12/22 01:32:06, stephane.travostino wrote:\n> Please discard the modification to encode_test.go.\n> \n> I can't really figure out a way to discard that file.\n\nhg change 6997045 , remove encode_test.go from the file and then hg upload 6997045",
			"disapproval": false,
			"date": "2012-12-22 09:45:52.589590",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"stephane.travostino@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6997045/diff/5001/src/pkg/encoding/json/encode.go\nFile src/pkg/encoding/json/encode.go (right):\n\nhttps://codereview.appspot.com/6997045/diff/5001/src/pkg/encoding/json/encode.go#newcode432\nsrc/pkg/encoding/json/encode.go:432: func isValidString(s string) bool {\nI don't understand what this function is doing nor the relation with the CL description. Can you explain?",
			"disapproval": false,
			"date": "2012-12-22 10:14:06.683210",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"stephane.travostino@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=bd8499d19a94 ***\n\nencoding/json: A JSON tag can be any valid JSON string.\n\nFixes issue 3887.\n\nR=golang-dev, daniel.morsing, remyoudompheng, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/6997045\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2012-12-22 18:37:09.071570",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"stephane.travostino@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for working on this. I don't believe that we need to go quite this far. We've been careful about limiting what we allow as JSON tags, and I haven't seen any argument or even discussion about removing those limitations. The issue is about allowing spaces in the tag names, so it should suffice to add space to the allowed character set, a 1-line change.\n\nhttps://codereview.appspot.com/6997045/diff/5001/src/pkg/encoding/json/encode.go\nFile src/pkg/encoding/json/encode.go (left):\n\nhttps://codereview.appspot.com/6997045/diff/5001/src/pkg/encoding/json/encode.go#oldcode440\nsrc/pkg/encoding/json/encode.go:440: case strings.ContainsRune(\"!#$%&()*+-./:<=>?@[]^_{|}~\", c):\nIt seems to me that you can just add space here.",
			"disapproval": false,
			"date": "2012-12-22 15:40:28.152190",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The json keys we allow in struct tags are a subset of those allowed by full\r\njson. That's intentional, and fine. For example we do not allow comma,\r\nbecause we use comma to introduce attributes controlling the encoding. This\r\nbug is about allowing spaces, not about allowing everything. In the worst\r\ncase clients can always use a map[string]interface{} to get access to keys\r\nwith arbitrary syntax.\r\n",
			"disapproval": false,
			"date": "2012-12-22 16:19:48.764270",
			"approval": false
		}
	],
	"owner_email": "stephane.travostino@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "stephane.travostino",
	"subject": "code review 6997045: encoding/json: A JSON tag can be any valid JSON string.",
	"created": "2012-12-22 01:25:14.473810",
	"patchsets": [
		1,
		2001,
		5001,
		7003,
		8003
	],
	"modified": "2012-12-23 16:50:03.292660",
	"closed": true,
	"issue": 6997045
}