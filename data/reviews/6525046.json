{
	"description": "go/doc: synthesize \"package main\" for examples",
	"cc": [
		"gri@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adg@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6525046/diff/9001/src/pkg/go/doc/example.go\nFile src/pkg/go/doc/example.go (right):\n\nhttp://codereview.appspot.com/6525046/diff/9001/src/pkg/go/doc/example.go#newcode25\nsrc/pkg/go/doc/example.go:25: Play     *printer.CommentedNode\ncould use a comment\n\nhttp://codereview.appspot.com/6525046/diff/9001/src/pkg/go/doc/example.go#newcode123\nsrc/pkg/go/doc/example.go:123: // playExample synthesizes a new go source file based on the provided\ns/go source file/*ast.File/ ? (it's not really source anymore)\n\nhttp://codereview.appspot.com/6525046/diff/9001/src/pkg/go/doc/example.go#newcode125\nsrc/pkg/go/doc/example.go:125: func playExample(node ast.Node, file *ast.File) *printer.CommentedNode {\nI would swap the arguments, file first (also better matches the comment)\n\nhttp://codereview.appspot.com/6525046/diff/9001/src/pkg/go/doc/example.go#newcode125\nsrc/pkg/go/doc/example.go:125: func playExample(node ast.Node, file *ast.File) *printer.CommentedNode {\ns/node ast.Node/body *ast.BlockStmt/ ?\n\nif you panic anyway, you can do the unchecked (no ok) type assertion at the call site (it's not going to fail if the source was correct)\n\nhttp://codereview.appspot.com/6525046/diff/9001/src/pkg/go/doc/example.go#newcode126\nsrc/pkg/go/doc/example.go:126: body, ok := node.(*ast.BlockStmt)\nnot needed w/ the above change\n\nhttp://codereview.appspot.com/6525046/diff/9001/src/pkg/go/doc/example.go#newcode140\nsrc/pkg/go/doc/example.go:140: if id, ok := n.(*ast.Ident); ok && id.Obj == nil {\nperhaps look for ast.SelectorExprs (qualified identifiers) to make this a bit more precise?\n\nhttp://codereview.appspot.com/6525046/diff/9001/src/pkg/go/doc/example.go#newcode146\nsrc/pkg/go/doc/example.go:146: // Determine the imports we need based on unresolved identifiers.\nShould probably say that this is all a heuristic.\n\nhttp://codereview.appspot.com/6525046/diff/9001/src/pkg/go/doc/example.go#newcode149\nsrc/pkg/go/doc/example.go:149: p := strings.TrimFunc(s.Path.Value, func(r rune) bool { return r == '\"' })\nuse strconv.Unquote\n\nhttp://codereview.appspot.com/6525046/diff/9001/src/pkg/go/doc/example.go#newcode171\nsrc/pkg/go/doc/example.go:171: Lparen: 1,\ns/1/token.NoPos/ should be ok, or better, don't set it (is it needed for it to work?)\n\nhttp://codereview.appspot.com/6525046/diff/9001/src/pkg/go/doc/example.go#newcode172\nsrc/pkg/go/doc/example.go:172: Rparen: 1,\nditto\n\nhttp://codereview.appspot.com/6525046/diff/9001/src/pkg/go/doc/example.go#newcode175\nsrc/pkg/go/doc/example.go:175: s := &ast.ImportSpec{Path: &ast.BasicLit{Value: `\"` + p + `\"`}}\ns/`\"` + p + `\"`/strconv.Quote(p)/\n\nhttp://codereview.appspot.com/6525046/diff/9001/src/pkg/go/doc/example.go#newcode198\nsrc/pkg/go/doc/example.go:198: // Filter out comments that are outside the function body.\nIf you return a CommentedNode, the printer already does this, I think. If you need to do this here for some reason, than you can simply set the comments in the ast.File and return the *ast.File and not bother with a CommentedNode.\n\n(CommentedNodes were introduced to support comments for partial ASTs).",
			"disapproval": false,
			"date": "2012-09-18 19:45:41.667900",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=42b884930d7c ***\n\ngo/doc: synthesize \"package main\" for examples\n\nR=gri\nCC=golang-dev\nhttp://codereview.appspot.com/6525046\n\nhttp://codereview.appspot.com/6525046/diff/15001/src/pkg/go/doc/example.go\nFile src/pkg/go/doc/example.go (right):\n\nhttp://codereview.appspot.com/6525046/diff/15001/src/pkg/go/doc/example.go#newcode25\nsrc/pkg/go/doc/example.go:25: Play     *ast.File // a whole program verison of the example\nOn 2012/09/18 20:50:02, gri wrote:\n> s/verison/version/\n\nDone.\n\nhttp://codereview.appspot.com/6525046/diff/15001/src/pkg/go/doc/example.go#newcode148\nsrc/pkg/go/doc/example.go:148: panic(err)\nOn 2012/09/18 20:50:02, gri wrote:\n> If the AST was created by the parser and there were no parse errors, this should\n> never panic, so one could ignore this. On the other hand, if it does (due to\n> some bug elsewhere), should it kill godoc? Perhaps ignore this import (continue\n> instead of panic, or return nil)?\n\nDone.\n\nhttp://codereview.appspot.com/6525046/diff/15001/src/pkg/go/doc/example.go#newcode171\nsrc/pkg/go/doc/example.go:171: Lparen: 1,\nOn 2012/09/18 20:50:02, gri wrote:\n> should add a comment explaining the need for 1\n\nDone.\n\nhttp://codereview.appspot.com/6525046/diff/15001/src/pkg/go/doc/example.go#newcode192\nsrc/pkg/go/doc/example.go:192: if c.Pos() < body.Pos() || c.Pos() > body.End() {\nOn 2012/09/18 20:50:02, gri wrote:\n> s/>/>=/\n> \n> (body.End() is the position of the first character after the body - a comment\n> immediately following the closing } should probably be excluded)\n\nDone.",
			"disapproval": false,
			"date": "2012-09-18 21:14:03.615480",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2012-09-18 18:39:15.889280",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/6525046/diff/9001/src/pkg/go/doc/example.go\nFile src/pkg/go/doc/example.go (right):\n\nhttp://codereview.appspot.com/6525046/diff/9001/src/pkg/go/doc/example.go#newcode25\nsrc/pkg/go/doc/example.go:25: Play     *printer.CommentedNode\nOn 2012/09/18 19:45:41, gri wrote:\n> could use a comment\n\nDone.\n\nhttp://codereview.appspot.com/6525046/diff/9001/src/pkg/go/doc/example.go#newcode123\nsrc/pkg/go/doc/example.go:123: // playExample synthesizes a new go source file based on the provided\nOn 2012/09/18 19:45:41, gri wrote:\n> s/go source file/*ast.File/ ? (it's not really source anymore)\n\nDone.\n\nhttp://codereview.appspot.com/6525046/diff/9001/src/pkg/go/doc/example.go#newcode125\nsrc/pkg/go/doc/example.go:125: func playExample(node ast.Node, file *ast.File) *printer.CommentedNode {\nOn 2012/09/18 19:45:41, gri wrote:\n> s/node ast.Node/body *ast.BlockStmt/ ?\n> \n> if you panic anyway, you can do the unchecked (no ok) type assertion at the call\n> site (it's not going to fail if the source was correct)\n\nDone.\n\nhttp://codereview.appspot.com/6525046/diff/9001/src/pkg/go/doc/example.go#newcode125\nsrc/pkg/go/doc/example.go:125: func playExample(node ast.Node, file *ast.File) *printer.CommentedNode {\nOn 2012/09/18 19:45:41, gri wrote:\n> I would swap the arguments, file first (also better matches the comment)\n\nDone.\n\nhttp://codereview.appspot.com/6525046/diff/9001/src/pkg/go/doc/example.go#newcode126\nsrc/pkg/go/doc/example.go:126: body, ok := node.(*ast.BlockStmt)\nOn 2012/09/18 19:45:41, gri wrote:\n> not needed w/ the above change\n\nDone.\n\nhttp://codereview.appspot.com/6525046/diff/9001/src/pkg/go/doc/example.go#newcode140\nsrc/pkg/go/doc/example.go:140: if id, ok := n.(*ast.Ident); ok && id.Obj == nil {\nOn 2012/09/18 19:45:41, gri wrote:\n> perhaps look for ast.SelectorExprs (qualified identifiers) to make this a bit\n> more precise?\n\nDone.\n\nhttp://codereview.appspot.com/6525046/diff/9001/src/pkg/go/doc/example.go#newcode146\nsrc/pkg/go/doc/example.go:146: // Determine the imports we need based on unresolved identifiers.\nOn 2012/09/18 19:45:41, gri wrote:\n> Should probably say that this is all a heuristic.\n\nDone.\n\nhttp://codereview.appspot.com/6525046/diff/9001/src/pkg/go/doc/example.go#newcode149\nsrc/pkg/go/doc/example.go:149: p := strings.TrimFunc(s.Path.Value, func(r rune) bool { return r == '\"' })\nOn 2012/09/18 19:45:41, gri wrote:\n> use strconv.Unquote\n\nDone.\n\nhttp://codereview.appspot.com/6525046/diff/9001/src/pkg/go/doc/example.go#newcode171\nsrc/pkg/go/doc/example.go:171: Lparen: 1,\nOn 2012/09/18 19:45:41, gri wrote:\n> s/1/token.NoPos/ should be ok, or better, don't set it (is it needed for it to\n> work?)\n\nIf it equals NoPos then printer assumes that it's not a factored import and only outputs the first import.\n\nhttp://codereview.appspot.com/6525046/diff/9001/src/pkg/go/doc/example.go#newcode172\nsrc/pkg/go/doc/example.go:172: Rparen: 1,\nOn 2012/09/18 19:45:41, gri wrote:\n> ditto\n\nditto\n\nhttp://codereview.appspot.com/6525046/diff/9001/src/pkg/go/doc/example.go#newcode175\nsrc/pkg/go/doc/example.go:175: s := &ast.ImportSpec{Path: &ast.BasicLit{Value: `\"` + p + `\"`}}\nOn 2012/09/18 19:45:41, gri wrote:\n> s/`\"` + p + `\"`/strconv.Quote(p)/\n\nDone.\n\nhttp://codereview.appspot.com/6525046/diff/9001/src/pkg/go/doc/example.go#newcode198\nsrc/pkg/go/doc/example.go:198: // Filter out comments that are outside the function body.\nOn 2012/09/18 19:45:41, gri wrote:\n> If you return a CommentedNode, the printer already does this, I think. If you\n> need to do this here for some reason, than you can simply set the comments in\n> the ast.File and return the *ast.File and not bother with a CommentedNode.\n> \n> (CommentedNodes were introduced to support comments for partial ASTs).\n\nDone.",
			"disapproval": false,
			"date": "2012-09-18 20:21:28.665340",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adg@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM so far\n\nhttp://codereview.appspot.com/6525046/diff/15001/src/pkg/go/doc/example.go\nFile src/pkg/go/doc/example.go (right):\n\nhttp://codereview.appspot.com/6525046/diff/15001/src/pkg/go/doc/example.go#newcode25\nsrc/pkg/go/doc/example.go:25: Play     *ast.File // a whole program verison of the example\ns/verison/version/\n\nhttp://codereview.appspot.com/6525046/diff/15001/src/pkg/go/doc/example.go#newcode148\nsrc/pkg/go/doc/example.go:148: panic(err)\nIf the AST was created by the parser and there were no parse errors, this should never panic, so one could ignore this. On the other hand, if it does (due to some bug elsewhere), should it kill godoc? Perhaps ignore this import (continue instead of panic, or return nil)?\n\nhttp://codereview.appspot.com/6525046/diff/15001/src/pkg/go/doc/example.go#newcode171\nsrc/pkg/go/doc/example.go:171: Lparen: 1,\nshould add a comment explaining the need for 1\n\nhttp://codereview.appspot.com/6525046/diff/15001/src/pkg/go/doc/example.go#newcode192\nsrc/pkg/go/doc/example.go:192: if c.Pos() < body.Pos() || c.Pos() > body.End() {\ns/>/>=/\n\n(body.End() is the position of the first character after the body - a comment immediately following the closing } should probably be excluded)",
			"disapproval": false,
			"date": "2012-09-18 20:50:02.502040",
			"approval": true
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 6525046: go/doc: synthesize \"package main\" for examples",
	"created": "2012-09-18 18:36:12.112060",
	"patchsets": [
		1,
		2001,
		3,
		7001,
		9001,
		12001,
		9002,
		13001,
		4,
		15001,
		13003
	],
	"modified": "2012-09-18 21:14:04.612040",
	"closed": true,
	"issue": 6525046
}