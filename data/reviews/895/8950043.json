{
	"description": "fmt: document that if String or Error panics, that value is printed\n\nFixes issue 5350.",
	"cc": [
		"r@golang.org",
		"minux.ma@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-04-25 00:09:23.326490",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Any thoughts on this doc change?",
			"disapproval": false,
			"date": "2013-04-29 16:33:39.195790",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"iant@golang.org",
				"r@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8950043/diff/1/src/pkg/fmt/doc.go\nFile src/pkg/fmt/doc.go (right):\n\nhttps://codereview.appspot.com/8950043/diff/1/src/pkg/fmt/doc.go#newcode123\nsrc/pkg/fmt/doc.go:123: is due to a panic.\ni think we should give an example for such indication\n(like line 131 - 139 below).",
			"disapproval": false,
			"date": "2013-04-29 16:36:45.720730",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"r@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL",
			"disapproval": false,
			"date": "2013-04-29 16:51:56.004550",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"iant@golang.org",
				"r@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8950043/diff/6001/src/pkg/fmt/doc.go\nFile src/pkg/fmt/doc.go (right):\n\nhttps://codereview.appspot.com/8950043/diff/6001/src/pkg/fmt/doc.go#newcode145\nsrc/pkg/fmt/doc.go:145: %s(PANIC=panic called)\nperhaps it is, but i had great difficulty understanding it (obviously). let's try again\n\nIf an Error or String method triggers a panic when called by a print routine,\nthe fmt package reformats the error message from the panic, decorating\nit with an indication that it came through the fmt\npackage. For example, if String(\"bad\") triggers a panic inside the String\nmethod, the resulting panic message will look like\n    %s(PANIC=bad)\nThe %s is not interpreted by panic; it just shows the print verb in use when the\nfailure occurred.",
			"disapproval": false,
			"date": "2013-04-29 18:16:00.272290",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"iant@golang.org",
				"r@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8950043/diff/6001/src/pkg/fmt/doc.go\nFile src/pkg/fmt/doc.go (right):\n\nhttps://codereview.appspot.com/8950043/diff/6001/src/pkg/fmt/doc.go#newcode145\nsrc/pkg/fmt/doc.go:145: %s(PANIC=panic called)\ndocumenting this is good, but i find this explanation hard to follow. there are multiple layers of panic, and the example you use adds another. it's tricky. how about\n\nIf an Error or String method triggers a panic when called by a print routine, the fmt package recovers from the panic. The value passed to the method is then reformatted with the default print rules absent the method and decorated with an indication that it caused a panic. The resulting string is then passed to panic directly. For example, if String(\"bad\") triggers a panic inside the String method, the fmt package will recover, then call panic like this:\n    panic(\"%s(PANIC=bad)\")\nThe %s is not interpreted by panic; it just shows the print verb in use when the failure occurred.",
			"disapproval": false,
			"date": "2013-04-29 17:06:19.526590",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"r@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/29 17:06:19, r wrote:\n> https://codereview.appspot.com/8950043/diff/6001/src/pkg/fmt/doc.go\n> File src/pkg/fmt/doc.go (right):\n> \n> https://codereview.appspot.com/8950043/diff/6001/src/pkg/fmt/doc.go#newcode145\n> src/pkg/fmt/doc.go:145: %s(PANIC=panic called)\n> documenting this is good, but i find this explanation hard to follow. there are\n> multiple layers of panic, and the example you use adds another. it's tricky. how\n> about\n> \n> If an Error or String method triggers a panic when called by a print routine,\n> the fmt package recovers from the panic. The value passed to the method is then\n> reformatted with the default print rules absent the method and decorated with an\n> indication that it caused a panic. The resulting string is then passed to panic\n> directly. For example, if String(\"bad\") triggers a panic inside the String\n> method, the fmt package will recover, then call panic like this:\n>     panic(\"%s(PANIC=bad)\")\n> The %s is not interpreted by panic; it just shows the print verb in use when the\n> failure occurred.\n\nThat's not what happens, though.  The fmt package doesn't call panic.  It doesn't reformat the field; it reformats the value passed to panic, that it caught using recover.  I think that what I wrote is closer to what happens.\n\nIan",
			"disapproval": false,
			"date": "2013-04-29 17:28:10.806580",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"r@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/29 18:16:00, r wrote:\n> https://codereview.appspot.com/8950043/diff/6001/src/pkg/fmt/doc.go\n> File src/pkg/fmt/doc.go (right):\n> \n> https://codereview.appspot.com/8950043/diff/6001/src/pkg/fmt/doc.go#newcode145\n> src/pkg/fmt/doc.go:145: %s(PANIC=panic called)\n> perhaps it is, but i had great difficulty understanding it (obviously). let's\n> try again\n> \n> If an Error or String method triggers a panic when called by a print routine,\n> the fmt package reformats the error message from the panic, decorating\n> it with an indication that it came through the fmt\n> package. For example, if String(\"bad\") triggers a panic inside the String\n> method, the resulting panic message will look like\n>     %s(PANIC=bad)\n> The %s is not interpreted by panic; it just shows the print verb in use when the\n> failure occurred.\n\nI took your words and tweaked them to better match my understanding of what happens.\n\nYou're suggesting that the value being printed gets reprinted without calling the String method.  But it doesn't.  Instead, the value passed to panic, whatever it was, gets printed instead of the original value.  The tests are a little bit confusing in this regard, because the tests call panic with the value they would print anyhow.  E.g., see http://play.golang.org/p/bxTahziAUv .\n\nAnyhow, PTAL, and see what you think.",
			"disapproval": false,
			"date": "2013-04-29 18:22:15.190520",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"iant@golang.org",
				"r@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nthat's very clear. thanks for listening",
			"disapproval": false,
			"date": "2013-04-29 18:32:22.023970",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"r@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=569c5f41f0e6 ***\n\nfmt: document that if String or Error panics, that value is printed\n\nFixes issue 5350.\n\nR=r, minux.ma\nCC=golang-dev\nhttps://codereview.appspot.com/8950043",
			"disapproval": false,
			"date": "2013-04-29 19:01:37.426730",
			"approval": false
		}
	],
	"owner_email": "iant@golang.org",
	"private": false,
	"base_url": "",
	"owner": "iant",
	"subject": "code review 8950043: fmt: document that if String or Error panics, that valu...",
	"created": "2013-04-25 00:09:17.580100",
	"patchsets": [
		1,
		6001,
		12001,
		4002
	],
	"modified": "2013-04-29 19:01:38.621100",
	"closed": true,
	"issue": 8950043
}