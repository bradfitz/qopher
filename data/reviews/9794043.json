{
	"description": "runtime: export type information for Itab* hash[1009]\n\nThe compiler or linker does not add type information to the static\nvariable 'hash' defined in iface.c. This unnecessarily slows down\nthe garbage collector.\n\nThis changeset exports the variable (it is no longer static)\nand renames it into 'runtime\u00b7itabhash'. This causes the\ntype information to be defined in the executable.\n\nIt is unclear why the compiler or linker fails with the original code.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"dvyukov@google.com",
		"daniel.morsing@gmail.com"
	],
	"messages": [
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/26 19:27:29, dvyukov wrote:\n> I would prefer to move Itab hash table, Itab's themselves as well as all\n> function and type info into persistent non-GC memory outside of heap. All that\n> is persistent and does not contain interesting pointers.\n> That will require special range-like allocator on top of SysAlloc. It can be\n> useful in some other places as well.\n\nI agree and I am closing this issue.\n\nI plan to try to implement a general purpose non-GC allocator whose code base does not interfere with mallocgc() in any way. But before that I would like to update some garbage collector code in the linker and develop a trivial command line tool for backtracking pointers during a garbage collection, so it may take some time before the allocator is submitted for code review.",
			"disapproval": false,
			"date": "2013-05-26 19:55:48.698580",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: dvyukov@google.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-05-26 19:12:15.519130",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I would prefer to move Itab hash table, Itab's themselves as well as all function and type info into persistent non-GC memory outside of heap. All that is persistent and does not contain interesting pointers.\nThat will require special range-like allocator on top of SysAlloc. It can be useful in some other places as well.",
			"disapproval": false,
			"date": "2013-05-26 19:27:29.371960",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, May 26, 2013 at 9:27 PM,  <dvyukov@google.com> wrote:\r\n> I would prefer to move Itab hash table, Itab's themselves as well as all\r\n> function and type info into persistent non-GC memory outside of heap.\r\n> All that is persistent and does not contain interesting pointers.\r\n> That will require special range-like allocator on top of SysAlloc. It\r\n> can be useful in some other places as well.\r\n>\r\n\r\nWe already have a flag for allocating memory that the GC should not\r\nfree nor scan, but it looks like it's not even looked at by the\r\nallocator or GC.\r\n\r\nIt's used for allocating stack segments, so we're probably scanning\r\nevery stack segment for pointers even thought we've already added them\r\nvia the addroots.\r\n\r\n> https://codereview.appspot.com/9794043/\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-26 20:09:52.032760",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"daniel.morsing@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/26 20:09:52, DMorsing wrote:\n> On Sun, May 26, 2013 at 9:27 PM,  <mailto:dvyukov@google.com> wrote:\n> > I would prefer to move Itab hash table, Itab's themselves as well as all\n> > function and type info into persistent non-GC memory outside of heap.\n> > All that is persistent and does not contain interesting pointers.\n> > That will require special range-like allocator on top of SysAlloc. It\n> > can be useful in some other places as well.\n> >\n> \n> We already have a flag for allocating memory that the GC should not\n> free nor scan, but it looks like it's not even looked at by the\n> allocator or GC.\n\nThat is true.\n\nOn the other hand, some overheads can be avoided by more explicit separation of GC memory from non-GC memory.\n\n> It's used for allocating stack segments, so we're probably scanning\n> every stack segment for pointers even thought we've already added them\n> via the addroots.\n\nA stack segment is scanned once per GC.",
			"disapproval": false,
			"date": "2013-05-26 20:48:07.010410",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"daniel.morsing@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/26 20:09:52, DMorsing wrote:\n> On Sun, May 26, 2013 at 9:27 PM,  <mailto:dvyukov@google.com> wrote:\n> > I would prefer to move Itab hash table, Itab's themselves as well as all\n> > function and type info into persistent non-GC memory outside of heap.\n> > All that is persistent and does not contain interesting pointers.\n> > That will require special range-like allocator on top of SysAlloc. It\n> > can be useful in some other places as well.\n> >\n> \n> We already have a flag for allocating memory that the GC should not\n> free nor scan, but it looks like it's not even looked at by the\n> allocator or GC.\n> \n> It's used for allocating stack segments, so we're probably scanning\n> every stack segment for pointers even thought we've already added them\n> via the addroots.\n> \n> > https://codereview.appspot.com/9794043/\n> >\n> >\n> > --\n> >\n> > ---You received this message because you are subscribed to the Google Groups\n> > \"golang-dev\" group.\n> > To unsubscribe from this group and stop receiving emails from it, send an\n> > email to mailto:golang-dev+unsubscribe@googlegroups.com.\n> > For more options, visit https://groups.google.com/groups/opt_out.\n> >\n> >\n\nNevermind. Read the code wrong, we are using it.\n\nAll that's left then is just alloc itab memory with that flag and mark itab is nopointers",
			"disapproval": false,
			"date": "2013-05-26 20:48:48.841730",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, May 27, 2013 at 12:48 AM, <daniel.morsing@gmail.com> wrote:\r\n\r\n> On 2013/05/26 20:09:52, DMorsing wrote:\r\n>\r\n>> On Sun, May 26, 2013 at 9:27 PM,  <mailto:dvyukov@google.com> wrote:\r\n>> > I would prefer to move Itab hash table, Itab's themselves as well as\r\n>>\r\n> all\r\n>\r\n>> > function and type info into persistent non-GC memory outside of\r\n>>\r\n> heap.\r\n>\r\n>> > All that is persistent and does not contain interesting pointers.\r\n>> > That will require special range-like allocator on top of SysAlloc.\r\n>>\r\n> It\r\n>\r\n>> > can be useful in some other places as well.\r\n>> >\r\n>>\r\n>\r\n>  We already have a flag for allocating memory that the GC should not\r\n>> free nor scan, but it looks like it's not even looked at by the\r\n>> allocator or GC.\r\n>>\r\n>\r\n>  It's used for allocating stack segments, so we're probably scanning\r\n>> every stack segment for pointers even thought we've already added them\r\n>> via the addroots.\r\n>>\r\n>\r\n>  > https://codereview.appspot.**com/9794043/<https://codereview.appspot.com/9794043/>\r\n>> >\r\n>> >\r\n>> > --\r\n>> >\r\n>> > ---You received this message because you are subscribed to the\r\n>>\r\n> Google Groups\r\n>\r\n>> > \"golang-dev\" group.\r\n>> > To unsubscribe from this group and stop receiving emails from it,\r\n>>\r\n> send an\r\n>\r\n>> > email to mailto:golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n>> .\r\n>>\r\n>> > For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n>> .\r\n>> >\r\n>> >\r\n>>\r\n>\r\n> Nevermind. Read the code wrong, we are using it.\r\n>\r\n> All that's left then is just alloc itab memory with that flag and mark\r\n> itab is nopointers\r\n>\r\n\r\n\r\nFlagNoGC blocks still needs to be swept and they prevent spans from being\r\nfreed and reused.\r\n",
			"disapproval": false,
			"date": "2013-05-27 04:15:27.213010",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Mailed https://codereview.appspot.com/9805043 with\r\nruntime.persistentalloc() which can used to allocate itab outside of heap.\r\n\r\n\r\n\r\nOn Sun, May 26, 2013 at 11:55 PM, <0xE2.0x9A.0x9B@gmail.com> wrote:\r\n\r\n> On 2013/05/26 19:27:29, dvyukov wrote:\r\n>\r\n>> I would prefer to move Itab hash table, Itab's themselves as well as\r\n>>\r\n> all\r\n>\r\n>> function and type info into persistent non-GC memory outside of heap.\r\n>>\r\n> All that\r\n>\r\n>> is persistent and does not contain interesting pointers.\r\n>> That will require special range-like allocator on top of SysAlloc. It\r\n>>\r\n> can be\r\n>\r\n>> useful in some other places as well.\r\n>>\r\n>\r\n> I agree and I am closing this issue.\r\n>\r\n> I plan to try to implement a general purpose non-GC allocator whose code\r\n> base does not interfere with mallocgc() in any way. But before that I\r\n> would like to update some garbage collector code in the linker and\r\n> develop a trivial command line tool for backtracking pointers during a\r\n> garbage collection, so it may take some time before the allocator is\r\n> submitted for code review.\r\n>\r\n> https://codereview.appspot.**com/9794043/<https://codereview.appspot.com/9794043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-27 09:34:20.599380",
			"approval": false
		}
	],
	"owner_email": "0xE2.0x9A.0x9B@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "atom",
	"subject": "code review 9794043: runtime: export type information for Itab* hash[1009]",
	"created": "2013-05-26 19:11:00.767640",
	"patchsets": [
		1,
		2001,
		5001
	],
	"modified": "2013-05-27 09:34:20.681340",
	"closed": true,
	"issue": 9794043
}