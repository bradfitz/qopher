{
	"description": "cmd/go, runtime/cgo: explicitly target ARMv5T\n\nThe baseline architecture had been left to the GCC configured\ndefault which can be more accomodating than the rest of the Go\ntoolchain.  This prevented instructions used by the 5g compiler,\nlike BLX, from being used in GCC compiled assembler code.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"rsc@golang.org",
		"elias.naur@gmail.com",
		"cshapiro@google.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "cshapiro@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Aug 14, 2013 at 2:22 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> Cl desc should begin cmd/go (dir under src)\r\n\r\n\r\nI've replaced go/build with cmd/go, which is what I think you want.\r\n",
			"disapproval": false,
			"date": "2013-08-14 21:27:12.511700",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\nCl desc should begin cmd/go (dir under src)\r\n",
			"disapproval": false,
			"date": "2013-08-14 21:22:16.548310",
			"approval": true
		},
		{
			"sender": "cshapiro@golang.org",
			"recipients": [
				"cshapiro@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-08-14 21:14:18.477590",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. untested, but Carl knows what he is talking about. \r\n\r\n\r\n\r\nOn 15/08/2013, at 6:14, cshapiro@golang.org wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n> \r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n> \r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n> \r\n> \r\n> Description:\r\n> go/build, runtime/cgo: explicitly target ARMv5T\r\n> \r\n> The baseline architecture had been left to the GCC configured\r\n> default which can be more accomodating than the rest of the Go\r\n> toolchain.  This prevented instructions used by the 5g compiler,\r\n> like BLX, from being used in GCC compiled assembler code.\r\n> \r\n> Please review this at https://codereview.appspot.com/12954043/\r\n> \r\n> Affected files:\r\n>  M src/cmd/go/build.go\r\n>  M src/pkg/runtime/cgo/gcc_arm.S\r\n> \r\n> \r\n> Index: src/cmd/go/build.go\r\n> ===================================================================\r\n> --- a/src/cmd/go/build.go\r\n> +++ b/src/cmd/go/build.go\r\n> @@ -1837,7 +1837,7 @@\r\n>    case \"6\":\r\n>        return []string{\"-m64\"}\r\n>    case \"5\":\r\n> -        return []string{\"-marm\"} // not thumb\r\n> +        return []string{\"-marm\", \"-march=armv5t\"} // not thumb\r\n>    }\r\n>    return nil\r\n> }\r\n> Index: src/pkg/runtime/cgo/gcc_arm.S\r\n> ===================================================================\r\n> --- a/src/pkg/runtime/cgo/gcc_arm.S\r\n> +++ b/src/pkg/runtime/cgo/gcc_arm.S\r\n> @@ -25,12 +25,8 @@\r\n>    mov r5, r1\r\n>    mov r0, r2\r\n>    mov r1, r3\r\n> -    // setmg(m, g)\r\n> -    mov lr, pc\r\n> -    mov pc, r5\r\n> -    // fn()\r\n> -    mov lr, pc\r\n> -    mov pc, r4\r\n> +    blx r5 // setmg(m, g)\r\n> +    blx r4 // fn()\r\n>    pop {r4, r5, r6, r7, r8, r9, r10, r11, ip, pc}\r\n> \r\n> .globl EXT(__stack_chk_fail_local)\r\n> \r\n> \r\n> -- \r\n> \r\n> ---You received this message because you are subscribed to the Google Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n",
			"disapproval": false,
			"date": "2013-08-14 21:16:52.382690",
			"approval": true
		},
		{
			"sender": "elias.naur@gmail.com",
			"recipients": [
				"cshapiro@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"elias.naur@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/14 21:14:18, cshapiro wrote:\n> Hello mailto:golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go\n\nLGTM. Thanks. Should 5l (lib.c:hostlink()) also be changed to add -march=armv5t to gcc when external linking?",
			"disapproval": false,
			"date": "2013-08-14 22:05:52.315850",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yes thanks\r\n",
			"disapproval": false,
			"date": "2013-08-14 21:38:06.592650",
			"approval": false
		},
		{
			"sender": "cshapiro@google.com",
			"recipients": [
				"cshapiro@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"elias.naur@gmail.com",
				"cshapiro@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/14 22:05:52, elias.naur wrote:\n> LGTM. Thanks. Should 5l (lib.c:hostlink()) also be changed to add -march=armv5t\n> to gcc when external linking?\n\nMaybe not, but I could be wrong.  The -march=armv5t flag affects code generation while the flags in hostlink() affect linking.  Are we generating code as part of host linking?",
			"disapproval": false,
			"date": "2013-08-14 22:13:03.999620",
			"approval": false
		},
		{
			"sender": "elias.naur@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\r\n\r\nOn Thursday, August 15, 2013 12:13:04 AM UTC+2, Carl Shapiro wrote:\r\n>\r\n> On 2013/08/14 22:05:52, elias.naur wrote: \r\n> > LGTM. Thanks. Should 5l (lib.c:hostlink()) also be changed to add \r\n> -march=armv5t \r\n> > to gcc when external linking? \r\n>\r\n> Maybe not, but I could be wrong.  The -march=armv5t flag affects code \r\n> generation while the flags in hostlink() affect linking.  Are we \r\n> generating code as part of host linking? \r\n>\r\n> https://codereview.appspot.com/12954043/ \r\n>\r\n\r\nRuss knows better, but AFAIK 5l only uses gcc to link not to generate any \r\ncode. It works as is, I just wondered if the two gcc invocations would be \r\nbetter off in sync.\r\n",
			"disapproval": false,
			"date": "2013-08-14 22:16:05.205620",
			"approval": false
		},
		{
			"sender": "cshapiro@golang.org",
			"recipients": [
				"cshapiro@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"rsc@golang.org",
				"elias.naur@gmail.com",
				"cshapiro@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=0a4959c5402a ***\n\ncmd/go, runtime/cgo: explicitly target ARMv5T\n\nThe baseline architecture had been left to the GCC configured\ndefault which can be more accomodating than the rest of the Go\ntoolchain.  This prevented instructions used by the 5g compiler,\nlike BLX, from being used in GCC compiled assembler code.\n\nR=golang-dev, dave, rsc, elias.naur, cshapiro\nCC=golang-dev\nhttps://codereview.appspot.com/12954043",
			"disapproval": false,
			"date": "2013-08-14 22:22:03.347930",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "no, host linking only links\r\n",
			"disapproval": false,
			"date": "2013-08-14 22:50:26.417710",
			"approval": false
		}
	],
	"owner_email": "cshapiro@golang.org",
	"private": false,
	"base_url": "",
	"owner": "cshapiro",
	"subject": "code review 12954043: go/build, runtime/cgo: explicitly target ARMv5T",
	"created": "2013-08-14 21:10:43.820530",
	"patchsets": [
		1,
		3001,
		6001,
		9001,
		8003,
		14001,
		17001,
		19001,
		21001,
		25001,
		27001,
		30001
	],
	"modified": "2013-08-14 22:50:26.617110",
	"closed": true,
	"issue": 12954043
}