{
	"description": "go.exp/go/types: accessors instead of exported fields\n\nFirst step towards not exporting internals anymore.\n\nCAUTION: This is an intermediated step. The API will\n         go through more refinement.",
	"cc": [
		"adonovan@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/8770045/diff/53022/go/types/check.go\nFile go/types/check.go (right):\n\nhttps://codereview.appspot.com/8770045/diff/53022/go/types/check.go#newcode427\ngo/types/check.go:427: pkg:         &Package{path: path, scope: &Scope{Outer: Universe}, imports: make(map[string]*Package)},\nnewlines after commas?\n\nhttps://codereview.appspot.com/8770045/diff/53022/go/types/check_test.go\nFile go/types/check_test.go (right):\n\nhttps://codereview.appspot.com/8770045/diff/53022/go/types/check_test.go#newcode192\ngo/types/check_test.go:192: ctxt.Check(\"\", fset, files...)\n\"main\" or \"check_test\" might be better than \"\".\n(a package-level type might get printed in error messages as \".foo\")\n\nhttps://codereview.appspot.com/8770045/diff/53022/go/types/errors.go\nFile go/types/errors.go (right):\n\nhttps://codereview.appspot.com/8770045/diff/53022/go/types/errors.go#newcode322\ngo/types/errors.go:322: fmt.Fprintf(buf, \"<type %T>\", t)\nI think this will cause the ssa opaqueTypes to render as \"<type iter>\".\nJust call t.String()?\n\nhttps://codereview.appspot.com/8770045/diff/53022/go/types/gcimporter.go\nFile go/types/gcimporter.go (right):\n\nhttps://codereview.appspot.com/8770045/diff/53022/go/types/gcimporter.go#newcode499\ngo/types/gcimporter.go:499: if tag != \"\" {\nMight be good to motivate the various tags changes in the CL description.\n\nhttps://codereview.appspot.com/8770045/diff/53022/go/types/objects.go\nFile go/types/objects.go (right):\n\nhttps://codereview.appspot.com/8770045/diff/53022/go/types/objects.go#newcode122\ngo/types/objects.go:122: func (obj *Var) Scope() *Scope { panic(\"unimplemented\") }\nDo you plan to document the concrete or interface methods?\n\nhttps://codereview.appspot.com/8770045/diff/53022/go/types/resolver_test.go\nFile go/types/resolver_test.go (right):\n\nhttps://codereview.appspot.com/8770045/diff/53022/go/types/resolver_test.go#newcode69\ngo/types/resolver_test.go:69: pkg, err := ctxt.Check(\"\", fset, files...)\n\"main\" or \"resolver_test\", perhaps?\n\nhttps://codereview.appspot.com/8770045/diff/53022/go/types/stdlib_test.go\nFile go/types/stdlib_test.go (right):\n\nhttps://codereview.appspot.com/8770045/diff/53022/go/types/stdlib_test.go#newcode78\ngo/types/stdlib_test.go:78: ctxt.Check(\"\", fset, files...)\n\"main\" or \"stdlib_test\"?\n\nhttps://codereview.appspot.com/8770045/diff/53022/go/types/types.go\nFile go/types/types.go (right):\n\nhttps://codereview.appspot.com/8770045/diff/53022/go/types/types.go#newcode143\ngo/types/types.go:143: return s.tags[i]\nI think this may panic even when i < len(NumFields()) if the final field does not have a tag.  I noticed you handled the case where a prefix of the fields don't have tags, but not a suffix.",
			"disapproval": false,
			"date": "2013-04-18 01:58:08.602550",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8770045/diff/53022/go/types/check.go\nFile go/types/check.go (right):\n\nhttps://codereview.appspot.com/8770045/diff/53022/go/types/check.go#newcode427\ngo/types/check.go:427: pkg:         &Package{path: path, scope: &Scope{Outer: Universe}, imports: make(map[string]*Package)},\nOn 2013/04/18 01:58:08, adonovan wrote:\n> newlines after commas?\nnah\n\nhttps://codereview.appspot.com/8770045/diff/53022/go/types/check_test.go\nFile go/types/check_test.go (right):\n\nhttps://codereview.appspot.com/8770045/diff/53022/go/types/check_test.go#newcode192\ngo/types/check_test.go:192: ctxt.Check(\"\", fset, files...)\nOn 2013/04/18 01:58:08, adonovan wrote:\n> \"main\" or \"check_test\" might be better than \"\".\n> (a package-level type might get printed in error messages as \".foo\")\n\nDone.\n\nhttps://codereview.appspot.com/8770045/diff/53022/go/types/errors.go\nFile go/types/errors.go (right):\n\nhttps://codereview.appspot.com/8770045/diff/53022/go/types/errors.go#newcode322\ngo/types/errors.go:322: fmt.Fprintf(buf, \"<type %T>\", t)\nOn 2013/04/18 01:58:08, adonovan wrote:\n> I think this will cause the ssa opaqueTypes to render as \"<type iter>\".\n> Just call t.String()\n\nI prefer leaving as is, for now at least (development). Calling t.String() may recursively invoke this function if there's a bug (i.e., if one forgets to add a new package-local type to the list of cases), and it will be harder to track down.\n\nAdded TODO.\n\nhttps://codereview.appspot.com/8770045/diff/53022/go/types/gcimporter.go\nFile go/types/gcimporter.go (right):\n\nhttps://codereview.appspot.com/8770045/diff/53022/go/types/gcimporter.go#newcode499\ngo/types/gcimporter.go:499: if tag != \"\" {\nOn 2013/04/18 01:58:08, adonovan wrote:\n> Might be good to motivate the various tags changes in the CL description.\n\nACK\n\nhttps://codereview.appspot.com/8770045/diff/53022/go/types/objects.go\nFile go/types/objects.go (right):\n\nhttps://codereview.appspot.com/8770045/diff/53022/go/types/objects.go#newcode122\ngo/types/objects.go:122: func (obj *Var) Scope() *Scope { panic(\"unimplemented\") }\nOn 2013/04/18 01:58:08, adonovan wrote:\n> Do you plan to document the concrete or interface methods?\n\nIf they are all in the Type interface, only the ones not in Type need documentation I think.\n\nhttps://codereview.appspot.com/8770045/diff/53022/go/types/resolver_test.go\nFile go/types/resolver_test.go (right):\n\nhttps://codereview.appspot.com/8770045/diff/53022/go/types/resolver_test.go#newcode69\ngo/types/resolver_test.go:69: pkg, err := ctxt.Check(\"\", fset, files...)\nOn 2013/04/18 01:58:08, adonovan wrote:\n> \"main\" or \"resolver_test\", perhaps?\n\nDone.\n\nhttps://codereview.appspot.com/8770045/diff/53022/go/types/stdlib_test.go\nFile go/types/stdlib_test.go (right):\n\nhttps://codereview.appspot.com/8770045/diff/53022/go/types/stdlib_test.go#newcode78\ngo/types/stdlib_test.go:78: ctxt.Check(\"\", fset, files...)\nOn 2013/04/18 01:58:08, adonovan wrote:\n> \"main\" or \"stdlib_test\"?\n\nDone.\n\nhttps://codereview.appspot.com/8770045/diff/53022/go/types/types.go\nFile go/types/types.go (right):\n\nhttps://codereview.appspot.com/8770045/diff/53022/go/types/types.go#newcode143\ngo/types/types.go:143: return s.tags[i]\nOn 2013/04/18 01:58:08, adonovan wrote:\n> I think this may panic even when i < len(NumFields()) if the final field does\n> not have a tag.  I noticed you handled the case where a prefix of the fields\n> don't have tags, but not a suffix.\n\nGood catch! Fixed.",
			"disapproval": false,
			"date": "2013-04-18 17:41:39.055850",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> There's some accessors missing (in, out params) ...\n\n(and BasicKind etc too)\n\n> Together with a TypeKind and ObjectKind,\n> one might be able to remove the type implementations completely.\n\n(I assume you mean \"remove from the API\".)\n\n> Does this look more attractive?\n\nI'm happy with the reflect.Type-style interface with no exposed implementations, so long as you permit other (even if degenerate) implementations such as opaqueType.\n\n> I think for clients it could mean that ... \n> one might not have to call Underlying(typ) all the time.\n\nI don't mind calling underlyingType because I feel the mental model corresponds exactly to the language spec.\n\nIt took me a while to realise that it's crucially important to know when you're dealing with a named type vs. its underlying type, so the explicitness helps.  For example, certain SSA operators like string slicing (s[lo:hi]) must preserve the named-ness or otherwise of the string type s in the result type, otherwise the result has the wrong method set.  (This can be a very subtle bug to track down since it doesn't necessarily lead to an error; it can merely change the method set of another type far away due to embedding/promotion rules.)    \n\nBeing always aware of named types made this easier to understand, so I would prefer a Type interface that didn't try to conflate a named type and its underlying one.\n\nhttps://codereview.appspot.com/8770045/diff/34021/go/types/types.go\nFile go/types/types.go (right):\n\nhttps://codereview.appspot.com/8770045/diff/34021/go/types/types.go#newcode17\ngo/types/types.go:17: Id() Tid\nWhat's the purpose of this?  What properties does it have?  How is it more or less useful than (say) the address of the underlying object?  AFACT Id() isn't actually called in this CL or the one to exp/ssa.\n\nhttps://codereview.appspot.com/8770045/diff/34021/go/types/types.go#newcode61\ngo/types/types.go:61: // Tid implements the Tid field of each type.\nTid appears to be a default implementation of the Type interface intended as a mix-in for other implementations in this package.  If so, I would name it DefaultImpl or TypeMixin or TypeCommon or something more suggestive, and I would favour making it a nonexported type.  External clients can easily roll their own without you growing your API.\n\nI can't really tell yet what purpose you have in mind for the integer part, so until then I would suggest that you remove it (i.e. make this an empty struct with methods).",
			"disapproval": false,
			"date": "2013-04-19 14:08:39.764080",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.exp",
			"disapproval": false,
			"date": "2013-05-09 21:42:40.214270",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\n(pair-reviewed)",
			"disapproval": false,
			"date": "2013-05-09 21:55:18.495450",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=69991b9668a0&repo=exp ***\n\ngo.exp/go/types: accessors instead of exported fields\n\nFirst step towards not exporting internals anymore.\n\nCAUTION: This is an intermediated step. The API will\n         go through more refinement.\n\nR=adonovan\nCC=golang-dev\nhttps://codereview.appspot.com/8770045",
			"disapproval": false,
			"date": "2013-05-09 21:57:21.270010",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 8770045: go.exp/go/types: accessors instead of exported fields",
	"created": "2013-04-15 21:36:53.150310",
	"patchsets": [
		1,
		2001,
		5001,
		31001,
		24003,
		35001,
		36021,
		40001,
		43001,
		44001,
		47001,
		50001,
		52001,
		55001,
		13002,
		59001,
		62001,
		53022,
		71001,
		34021,
		77001,
		80001,
		82001,
		85001,
		89001,
		91001,
		93001,
		93002,
		99001
	],
	"modified": "2013-05-09 21:57:22.450830",
	"closed": true,
	"issue": 8770045
}