{
	"description": "strings: implement a faster byte->byte Replacer\n\nWhen all old & new string values are single bytes,\nbyteReplacer is now used, instead of the generic\nalgorithm.\n\nBenchmarkGenericMatch       10000  102519 ns/op\nBenchmarkByteByteMatch    1000000    2178 ns/op\n\nfast path, when nothing matches:\nBenchmarkByteByteNoMatch  1000000    1109 ns/op\n\ncomparisons to multiple Replace calls:\nBenchmarkByteByteReplaces  100000   16164 ns/op\n\ncomparison to strings.Map:\nBenchmarkByteByteMap       500000    5454 ns/op",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rogpeppe@gmail.com"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "separate is okay with a good name.\n",
			"disapproval": false,
			"date": "2011-10-03 18:35:47.471472",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-03 18:03:41.627793",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"rogpeppe@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "one minor comment, too late.\n\nhttp://codereview.appspot.com/5175050/diff/18005/src/pkg/strings/replace.go\nFile src/pkg/strings/replace.go (right):\n\nhttp://codereview.appspot.com/5175050/diff/18005/src/pkg/strings/replace.go#newcode20\nsrc/pkg/strings/replace.go:20: WriteString(w io.Writer, s string) (n int, err os.Error)\nisn't it a bit misleading that these two methods are exported? AFAICS they're not used outside strings.",
			"disapproval": false,
			"date": "2011-10-04 07:29:35.087122",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Nice.\n\nhttp://codereview.appspot.com/5175050/diff/1002/src/pkg/strings/replace.go\nFile src/pkg/strings/replace.go (right):\n\nhttp://codereview.appspot.com/5175050/diff/1002/src/pkg/strings/replace.go#newcode14\nsrc/pkg/strings/replace.go:14: algorithm impl\nalg replacer\nr replacer\n?\n\nhttp://codereview.appspot.com/5175050/diff/1002/src/pkg/strings/replace.go#newcode18\nsrc/pkg/strings/replace.go:18: type impl interface {\nstrings.impl is not descriptive enough\n\ntype replacer interface\n\nhttp://codereview.appspot.com/5175050/diff/1002/src/pkg/strings/replace.go#newcode23\nsrc/pkg/strings/replace.go:23: // bytesfield represents bytes which are sought for replacement.\nbyteBitmap ?\nProbably not worth a separate type.\nI'd just put the field inside byteReplacer\nand add a set(byte) byte method to *byteReplacer.\n\nhttp://codereview.appspot.com/5175050/diff/1002/src/pkg/strings/replace.go#newcode42\nsrc/pkg/strings/replace.go:42: for len(oldnew) >= 2 {\n>=2 is fine but > 0 seems more common\n\nhttp://codereview.appspot.com/5175050/diff/1002/src/pkg/strings/replace.go#newcode56\nsrc/pkg/strings/replace.go:56: bb.newbyte[int(old[0])] = new[0]\nThe int conversion is unnecessary.\n\nhttp://codereview.appspot.com/5175050/diff/1002/src/pkg/strings/replace.go#newcode77\nsrc/pkg/strings/replace.go:77: // genericImpl is the fully generic (and least optimized) algorithm.\ngenericReplacer\nor\nstringReplacer\n\n(strings.genericImpl is not descriptive enough)\n\nhttp://codereview.appspot.com/5175050/diff/1002/src/pkg/strings/replace.go#newcode127\nsrc/pkg/strings/replace.go:127: // byteByteImpl is the implementation that's used when all the \"old\"\nbyteReplacer\n\nhttp://codereview.appspot.com/5175050/diff/1002/src/pkg/strings/replace.go#newcode131\nsrc/pkg/strings/replace.go:131: oldbits bytesfield\nold [8]uint32\nnew [256]byte\n\nhttp://codereview.appspot.com/5175050/diff/1002/src/pkg/strings/replace.go#newcode156\nsrc/pkg/strings/replace.go:156: if len(s) < bufsize {\nIf you allocate the buffer of the right size:\n\nn := 32<<10\nif n > len(s) {\n    n = len(s)\n}\nbuf := make([]byte, n)\n\nthat's fewer allocations and simpler code.\n\nhttp://codereview.appspot.com/5175050/diff/1002/src/pkg/strings/replace.go#newcode163\nsrc/pkg/strings/replace.go:163: for i := 0; i < ncopy; i++ {\nfor i, b := range buf[:ncopy] {\n\nhttp://codereview.appspot.com/5175050/diff/1002/src/pkg/strings/replace.go#newcode178\nsrc/pkg/strings/replace.go:178: // Can't import ioutil for ioutil.Discard, due to ioutil/tempfile.go -> strconv -> strings\n// strings is too low-level to import io/ioutil.",
			"disapproval": false,
			"date": "2011-10-03 18:20:55.283033",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5175050/diff/8006/src/pkg/strings/replace.go\nFile src/pkg/strings/replace.go (right):\n\nhttp://codereview.appspot.com/5175050/diff/8006/src/pkg/strings/replace.go#newcode26\nsrc/pkg/strings/replace.go:26: type byteBitmap [8]uint32\nOn 2011/10/03 18:48:02, rsc wrote:\n> 256/32?\n\nDone.\n\nhttp://codereview.appspot.com/5175050/diff/8006/src/pkg/strings/replace.go#newcode52\nsrc/pkg/strings/replace.go:52: if old == \"\" {\nOn 2011/10/03 18:48:02, rsc wrote:\n> Continuing here seems wrong.\n> If old == \"\" it should be handed to the genericReplacer.\n\nah!\n\nI was falsely assuming that \"\" never matched.  Fixed, with tests.\n\nhttp://codereview.appspot.com/5175050/diff/8006/src/pkg/strings/replace.go#newcode147\nsrc/pkg/strings/replace.go:147: buf[i] = r.new[int(b)]\nOn 2011/10/03 18:48:02, rsc wrote:\n> int conversion is unnecessary (and slow).\n\nWhoops, missed some before.  Also: didn't know this part of the language spec.  Cool.\n\nhttp://codereview.appspot.com/5175050/diff/8006/src/pkg/strings/replace.go#newcode168\nsrc/pkg/strings/replace.go:168: buf[i] = r.new[int(b)]\nOn 2011/10/03 18:48:02, rsc wrote:\n> int conversion is unnecessary (and slow).\n\nDone.",
			"disapproval": false,
			"date": "2011-10-03 19:59:25.551279",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5175050/diff/1002/src/pkg/strings/replace.go\nFile src/pkg/strings/replace.go (right):\n\nhttp://codereview.appspot.com/5175050/diff/1002/src/pkg/strings/replace.go#newcode23\nsrc/pkg/strings/replace.go:23: // bytesfield represents bytes which are sought for replacement.\nOn 2011/10/03 18:20:55, rsc wrote:\n> byteBitmap ?\n\nsounds better, yeah.  I struggled with a name.\n\n> Probably not worth a separate type.\n\nActually, an upcoming CL needs it too.  (the byteStringReplacer)\n\nYou prefer it separate or copied in both replacers?",
			"disapproval": false,
			"date": "2011-10-03 18:29:49.377900",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-03 18:42:00.801472",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5175050/diff/1002/src/pkg/strings/replace.go\nFile src/pkg/strings/replace.go (right):\n\nhttp://codereview.appspot.com/5175050/diff/1002/src/pkg/strings/replace.go#newcode14\nsrc/pkg/strings/replace.go:14: algorithm impl\nOn 2011/10/03 18:20:55, rsc wrote:\n> alg replacer\n> r replacer\n> ?\n\nDone.\n\nhttp://codereview.appspot.com/5175050/diff/1002/src/pkg/strings/replace.go#newcode18\nsrc/pkg/strings/replace.go:18: type impl interface {\nOn 2011/10/03 18:20:55, rsc wrote:\n> strings.impl is not descriptive enough\n> \n> type replacer interface\n> \n\nDone.\n\nhttp://codereview.appspot.com/5175050/diff/1002/src/pkg/strings/replace.go#newcode42\nsrc/pkg/strings/replace.go:42: for len(oldnew) >= 2 {\nOn 2011/10/03 18:20:55, rsc wrote:\n> >=2 is fine but > 0 seems more common\n\nDone.\n\nhttp://codereview.appspot.com/5175050/diff/1002/src/pkg/strings/replace.go#newcode56\nsrc/pkg/strings/replace.go:56: bb.newbyte[int(old[0])] = new[0]\nOn 2011/10/03 18:20:55, rsc wrote:\n> The int conversion is unnecessary.\n\nDone.\n\nhttp://codereview.appspot.com/5175050/diff/1002/src/pkg/strings/replace.go#newcode77\nsrc/pkg/strings/replace.go:77: // genericImpl is the fully generic (and least optimized) algorithm.\nOn 2011/10/03 18:20:55, rsc wrote:\n> genericReplacer\n> or\n> stringReplacer\n> \n> (strings.genericImpl is not descriptive enough)\n\nDone.\n\nhttp://codereview.appspot.com/5175050/diff/1002/src/pkg/strings/replace.go#newcode127\nsrc/pkg/strings/replace.go:127: // byteByteImpl is the implementation that's used when all the \"old\"\nOn 2011/10/03 18:20:55, rsc wrote:\n> byteReplacer\n\nDone.\n\nhttp://codereview.appspot.com/5175050/diff/1002/src/pkg/strings/replace.go#newcode131\nsrc/pkg/strings/replace.go:131: oldbits bytesfield\nOn 2011/10/03 18:20:55, rsc wrote:\n> old [8]uint32\n> new [256]byte\n\nDone.\n\nhttp://codereview.appspot.com/5175050/diff/1002/src/pkg/strings/replace.go#newcode156\nsrc/pkg/strings/replace.go:156: if len(s) < bufsize {\nOn 2011/10/03 18:20:55, rsc wrote:\n> If you allocate the buffer of the right size:\n> \n> n := 32<<10\n> if n > len(s) {\n>     n = len(s)\n> }\n> buf := make([]byte, n)\n> \n> that's fewer allocations and simpler code.\n\nDone.\n\nhttp://codereview.appspot.com/5175050/diff/1002/src/pkg/strings/replace.go#newcode163\nsrc/pkg/strings/replace.go:163: for i := 0; i < ncopy; i++ {\nOn 2011/10/03 18:20:55, rsc wrote:\n> for i, b := range buf[:ncopy] {\n\nDone.\n\nhttp://codereview.appspot.com/5175050/diff/1002/src/pkg/strings/replace.go#newcode178\nsrc/pkg/strings/replace.go:178: // Can't import ioutil for ioutil.Discard, due to ioutil/tempfile.go -> strconv -> strings\nOn 2011/10/03 18:20:55, rsc wrote:\n> // strings is too low-level to import io/ioutil.\n\nDone.",
			"disapproval": false,
			"date": "2011-10-03 18:42:15.703839",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=98484b363aab ***\n\nstrings: implement a faster byte->byte Replacer\n\nWhen all old & new string values are single bytes,\nbyteReplacer is now used, instead of the generic\nalgorithm.\n\nBenchmarkGenericMatch       10000  102519 ns/op\nBenchmarkByteByteMatch    1000000    2178 ns/op\n\nfast path, when nothing matches:\nBenchmarkByteByteNoMatch  1000000    1109 ns/op\n\ncomparisons to multiple Replace calls:\nBenchmarkByteByteReplaces  100000   16164 ns/op\n\ncomparison to strings.Map:\nBenchmarkByteByteMap       500000    5454 ns/op\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5175050",
			"disapproval": false,
			"date": "2011-10-03 20:12:06.558931",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5175050/diff/8006/src/pkg/strings/replace.go\nFile src/pkg/strings/replace.go (right):\n\nhttp://codereview.appspot.com/5175050/diff/8006/src/pkg/strings/replace.go#newcode26\nsrc/pkg/strings/replace.go:26: type byteBitmap [8]uint32\n256/32?\n\nhttp://codereview.appspot.com/5175050/diff/8006/src/pkg/strings/replace.go#newcode52\nsrc/pkg/strings/replace.go:52: if old == \"\" {\nContinuing here seems wrong.\nIf old == \"\" it should be handed to the genericReplacer.\n\nhttp://codereview.appspot.com/5175050/diff/8006/src/pkg/strings/replace.go#newcode147\nsrc/pkg/strings/replace.go:147: buf[i] = r.new[int(b)]\nint conversion is unnecessary (and slow).\n\nhttp://codereview.appspot.com/5175050/diff/8006/src/pkg/strings/replace.go#newcode168\nsrc/pkg/strings/replace.go:168: buf[i] = r.new[int(b)]\nint conversion is unnecessary (and slow).\n\nhttp://codereview.appspot.com/5175050/diff/8006/src/pkg/strings/replace_test.go\nFile src/pkg/strings/replace_test.go (right):\n\nhttp://codereview.appspot.com/5175050/diff/8006/src/pkg/strings/replace_test.go#newcode100\nsrc/pkg/strings/replace_test.go:100: _ = generic.Replace(str)\nThe canonical way to write \n   _ = f()\nis\n   f()",
			"disapproval": false,
			"date": "2011-10-03 18:48:02.114114",
			"approval": true
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 5175050: strings: implement a faster byte->byte Replacer",
	"created": "2011-10-03 18:02:35.939104",
	"patchsets": [
		1,
		2001,
		5001,
		1002,
		3005,
		8006,
		15001,
		6005,
		19001,
		18005
	],
	"modified": "2011-10-04 07:29:35.206002",
	"closed": true,
	"issue": 5175050
}