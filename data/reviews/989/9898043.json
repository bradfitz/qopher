{
	"description": "go.types/ssa: split the load/parse/typecheck logic off into a separate package.\n\nPLEASE NOTE: the APIs for both \"importer\" and \"ssa\" packages\nwill continue to evolve and both need some polishing; the key\nthing is that this CL splits them.\n\nThe go.types/importer package contains contains the Importer,\nwhich takes care of the mechanics of loading a set of packages\nand type-checking them.  It exposes for each package a\nPackageInfo containing:\n- the package's ASTs (i.e. the input to the typechecker)\n- the types.Package object\n- the memoization of the typechecker callbacks for identifier\n  resolution, constant folding and expression type inference.\n\nMethod-set computation (and hence bridge-method creation) is\nnow moved to after creation of all packages: since they are no\nlonger created in topological order, we can't guarantee the\nneeded delegate methods exist yet.\n\nssa.Package no longer has public TypeOf, ObjectOf, ValueOf methods.\nThe private counterparts are valid only during the build phase.\n\nAlso:\n- added to go/types an informative error (not crash) for an\n  importer() returning nil without error.\n- removed Package.Name(), barely needed.\n- changed Package.String() slightly.\n- flag what looks like a bug in makeBridgeMethod. Will follow up.",
	"cc": [
		"golang-dev@googlegroups.com",
		"gri@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.tools",
			"disapproval": false,
			"date": "2013-05-31 17:24:54.080880",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/9898043/diff/7017/go/types/resolver.go\nFile go/types/resolver.go (right):\n\nhttps://codereview.appspot.com/9898043/diff/7017/go/types/resolver.go#newcode107\ngo/types/resolver.go:107: imp, err := importer(pkg.imports, path)\nif imp == nil && err == nil {\n   err = fmt.Errorf(\"Context.Import returned nil\")\n}\n\nhttps://codereview.appspot.com/9898043/diff/7017/go/types/resolver.go#newcode110\ngo/types/resolver.go:110: //importErrors = true\nyou must be working with old source code\n\nhttps://codereview.appspot.com/9898043/diff/7017/go/types/resolver.go#newcode113\ngo/types/resolver.go:113: if imp == nil {\nremove this in favor of the snippet above\n\nhttps://codereview.appspot.com/9898043/diff/7017/importer/importer.go\nFile importer/importer.go (right):\n\nhttps://codereview.appspot.com/9898043/diff/7017/importer/importer.go#newcode1\nimporter/importer.go:1: // This package defines the Importer.\n// Package importer loads, parses, and type-checks...\n\nhttps://codereview.appspot.com/9898043/diff/7017/importer/importer.go#newcode5\nimporter/importer.go:5: // trees and the facts learned during identifier resolution, constant\ndon't repeat this every time. It's collectively called \"typechecking\".\n\nhttps://codereview.appspot.com/9898043/diff/7017/importer/importer.go#newcode21\nimporter/importer.go:21: // An Importer loads parses and type-checks one or more Go packages\ndon't repeat this over and over\n\nhttps://codereview.appspot.com/9898043/diff/7017/importer/importer.go#newcode25\nimporter/importer.go:25: // Importer's methods are not thread-safe.\nAn Importer's ...\n\nhttps://codereview.appspot.com/9898043/diff/7017/importer/importer.go#newcode31\nimporter/importer.go:31: importErrs map[string]error        // cache of import errors\nJust: Errors?\n\nIt's Importer.Errors after all\n\nhttps://codereview.appspot.com/9898043/diff/7017/importer/importer.go#newcode43\nimporter/importer.go:43: // Loader is a SourceLoader function that finds, loads and\nyou're repeating again what you say below\n\nhttps://codereview.appspot.com/9898043/diff/7017/importer/pkginfo.go\nFile importer/pkginfo.go (right):\n\nhttps://codereview.appspot.com/9898043/diff/7017/importer/pkginfo.go#newcode3\nimporter/pkginfo.go:3: // This file defines PackageInfo which holds the ASTs and facts\nI think almost all the code in here should become part of go/types.\nPerhaps add a TODO(gri).\n\nhttps://codereview.appspot.com/9898043/diff/7017/importer/util.go\nFile importer/util.go (right):\n\nhttps://codereview.appspot.com/9898043/diff/7017/importer/util.go#newcode21\nimporter/util.go:21: // rest is the suffix of args that were not consumed.\nSentences start with capital letters. Just \"Rest is the ...\"\n\nhttps://codereview.appspot.com/9898043/diff/7017/importer/util.go#newcode109\nimporter/util.go:109: // noparens returns e with any enclosing parentheses stripped.\nI call this traditionally \"unparen\"\n\nhttps://codereview.appspot.com/9898043/diff/7017/ssa/ssadump.go\nFile ssa/ssadump.go (right):\n\nhttps://codereview.appspot.com/9898043/diff/7017/ssa/ssadump.go#newcode105\nssa/ssadump.go:105: // Load, parse and type-check the program.\n// type-check program ?",
			"disapproval": false,
			"date": "2013-05-31 18:51:10.082310",
			"approval": true
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9898043/diff/7017/go/types/resolver.go\nFile go/types/resolver.go (right):\n\nhttps://codereview.appspot.com/9898043/diff/7017/go/types/resolver.go#newcode107\ngo/types/resolver.go:107: imp, err := importer(pkg.imports, path)\nOn 2013/05/31 18:51:10, gri wrote:\n> if imp == nil && err == nil {\n>    err = fmt.Errorf(\"Context.Import returned nil\")\n> }\n\nDone.\n\nhttps://codereview.appspot.com/9898043/diff/7017/go/types/resolver.go#newcode110\ngo/types/resolver.go:110: //importErrors = true\nOn 2013/05/31 18:51:10, gri wrote:\n> you must be working with old source code\n\nYep; I just synced.\n\nhttps://codereview.appspot.com/9898043/diff/7017/go/types/resolver.go#newcode113\ngo/types/resolver.go:113: if imp == nil {\nOn 2013/05/31 18:51:10, gri wrote:\n> remove this in favor of the snippet above\n\nDone.\n\nhttps://codereview.appspot.com/9898043/diff/7017/importer/importer.go\nFile importer/importer.go (right):\n\nhttps://codereview.appspot.com/9898043/diff/7017/importer/importer.go#newcode1\nimporter/importer.go:1: // This package defines the Importer.\nOn 2013/05/31 18:51:10, gri wrote:\n> // Package importer loads, parses, and type-checks...\n\nDone.\n\nhttps://codereview.appspot.com/9898043/diff/7017/importer/importer.go#newcode5\nimporter/importer.go:5: // trees and the facts learned during identifier resolution, constant\nOn 2013/05/31 18:51:10, gri wrote:\n> don't repeat this every time. It's collectively called \"typechecking\".\n\nDone.\n\nhttps://codereview.appspot.com/9898043/diff/7017/importer/importer.go#newcode21\nimporter/importer.go:21: // An Importer loads parses and type-checks one or more Go packages\nOn 2013/05/31 18:51:10, gri wrote:\n> don't repeat this over and over\n\nDone.\n\nhttps://codereview.appspot.com/9898043/diff/7017/importer/importer.go#newcode25\nimporter/importer.go:25: // Importer's methods are not thread-safe.\nOn 2013/05/31 18:51:10, gri wrote:\n> An Importer's ...\n\nDone.\n\nhttps://codereview.appspot.com/9898043/diff/7017/importer/importer.go#newcode31\nimporter/importer.go:31: importErrs map[string]error        // cache of import errors\nOn 2013/05/31 18:51:10, gri wrote:\n> Just: Errors?\n> \n> It's Importer.Errors after all\n\nDone.\n\nhttps://codereview.appspot.com/9898043/diff/7017/importer/importer.go#newcode43\nimporter/importer.go:43: // Loader is a SourceLoader function that finds, loads and\nOn 2013/05/31 18:51:10, gri wrote:\n> you're repeating again what you say below\n\nDone.\n\nhttps://codereview.appspot.com/9898043/diff/7017/importer/pkginfo.go\nFile importer/pkginfo.go (right):\n\nhttps://codereview.appspot.com/9898043/diff/7017/importer/pkginfo.go#newcode3\nimporter/pkginfo.go:3: // This file defines PackageInfo which holds the ASTs and facts\nOn 2013/05/31 18:51:10, gri wrote:\n> I think almost all the code in here should become part of go/types.\n> Perhaps add a TODO(gri).\n\nYay!  Done.\n\nhttps://codereview.appspot.com/9898043/diff/7017/importer/util.go\nFile importer/util.go (right):\n\nhttps://codereview.appspot.com/9898043/diff/7017/importer/util.go#newcode21\nimporter/util.go:21: // rest is the suffix of args that were not consumed.\nOn 2013/05/31 18:51:10, gri wrote:\n> Sentences start with capital letters. Just \"Rest is the ...\"\n\nEven for identifers?  That's a little surprising since they're case-sensitive.  I'll reword it.\n\nhttps://codereview.appspot.com/9898043/diff/7017/importer/util.go#newcode109\nimporter/util.go:109: // noparens returns e with any enclosing parentheses stripped.\nOn 2013/05/31 18:51:10, gri wrote:\n> I call this traditionally \"unparen\"\n\nDone.\n\nhttps://codereview.appspot.com/9898043/diff/7017/ssa/ssadump.go\nFile ssa/ssadump.go (right):\n\nhttps://codereview.appspot.com/9898043/diff/7017/ssa/ssadump.go#newcode105\nssa/ssadump.go:105: // Load, parse and type-check the program.\nOn 2013/05/31 18:51:10, gri wrote:\n> // type-check program ?\n\nFor tests you often want to skip loading and use a string, so it's worth making clear what steps are actually occurring here.",
			"disapproval": false,
			"date": "2013-05-31 19:34:15.821980",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=b59848132d12&repo=tools ***\n\ngo.types/ssa: split the load/parse/typecheck logic off into a separate package.\n\nPLEASE NOTE: the APIs for both \"importer\" and \"ssa\" packages\nwill continue to evolve and both need some polishing; the key\nthing is that this CL splits them.\n\nThe go.types/importer package contains contains the Importer,\nwhich takes care of the mechanics of loading a set of packages\nand type-checking them.  It exposes for each package a\nPackageInfo containing:\n- the package's ASTs (i.e. the input to the typechecker)\n- the types.Package object\n- the memoization of the typechecker callbacks for identifier\n  resolution, constant folding and expression type inference.\n\nMethod-set computation (and hence bridge-method creation) is\nnow moved to after creation of all packages: since they are no\nlonger created in topological order, we can't guarantee the\nneeded delegate methods exist yet.\n\nssa.Package no longer has public TypeOf, ObjectOf, ValueOf methods.\nThe private counterparts are valid only during the build phase.\n\nAlso:\n- added to go/types an informative error (not crash) for an\n  importer() returning nil without error.\n- removed Package.Name(), barely needed.\n- changed Package.String() slightly.\n- flag what looks like a bug in makeBridgeMethod. Will follow up.\n\nR=golang-dev, gri\nCC=golang-dev\nhttps://codereview.appspot.com/9898043",
			"disapproval": false,
			"date": "2013-05-31 20:14:15.318060",
			"approval": false
		}
	],
	"owner_email": "adonovan@google.com",
	"private": false,
	"base_url": "",
	"owner": "adonovan",
	"subject": "code review 9898043: go.types/ssa: split the load/parse/typecheck logic off ...",
	"created": "2013-05-31 16:21:32.858470",
	"patchsets": [
		1,
		1002,
		3001,
		6001,
		9001,
		7017,
		14001,
		22001,
		40001,
		43001
	],
	"modified": "2013-05-31 20:14:16.056050",
	"closed": true,
	"issue": 9898043
}