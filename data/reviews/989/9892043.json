{
	"description": "runtime: dump scheduler state when GOSCHEDTRACE env var set\nIn default mode the trace looks as follows:\nGOSCHEDTRACE 0ms: gomaxprocs=4 idleprocs=0 threads=3 idlethreads=0 runqueue=0 [1 0 0 0]\nGOSCHEDTRACE 1001ms: gomaxprocs=4 idleprocs=3 threads=6 idlethreads=3 runqueue=0 [0 0 0 0]\nGOSCHEDTRACE 2008ms: gomaxprocs=4 idleprocs=1 threads=6 idlethreads=1 runqueue=0 [0 1 0 0]\nIn detailed mode the trace looks as follows:\nGOSCHEDTRACE 0ms: gomaxprocs=4 idleprocs=0 threads=3 idlethreads=0 runqueue=0 singleproc=0 gcwaiting=1 mlocked=0 nmspinning=0 stopwait=0 sysmonwait=0\n  P0: status=3 tick=1 m=0 runqsize=1/128 gfreecnt=0\n  P1: status=3 tick=0 m=-1 runqsize=0/128 gfreecnt=0\n  P2: status=3 tick=0 m=-1 runqsize=0/128 gfreecnt=0\n  P3: status=3 tick=0 m=-1 runqsize=0/128 gfreecnt=0\n  M2: p=-1 curg=-1 mallocing=0 throwing=0 gcing=0 locks=1 dying=0 helpgc=0 spinning=0 lockedg=-1\n  M1: p=-1 curg=-1 mallocing=0 throwing=0 gcing=0 locks=1 dying=0 helpgc=0 spinning=0 lockedg=-1\n  M0: p=0 curg=1 mallocing=0 throwing=0 gcing=0 locks=1 dying=0 helpgc=0 spinning=0 lockedg=1\n  G1: status=2() m=0 lockedm=0\n  G2: status=1() m=-1 lockedm=-1",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"khr@golang.org",
		"r@golang.org",
		"remyoudompheng@gmail.com",
		"rsc@golang.org",
		"minux.ma@gmail.com"
	],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jun 4, 2013 at 12:21 AM, <dvyukov@google.com> wrote:\r\n\r\n> On 2013/06/03 16:10:14, dvyukov wrote:\r\n>\r\n>> On Mon, Jun 3, 2013 at 5:24 PM, Russ Cox <mailto:rsc@golang.org>\r\n>>\r\n> wrote:\r\n>\r\n>  > One possibility is to merge GOGCTRACE and GOSCHEDTRACE into a single\r\n>> > GODEBUG variable with a syntax like\r\n>> >\r\n>> > GODEBUG=gctrace=1\r\n>> > GODEBUG=gctrace=2,schedtrace=1\r\n>> >\r\n>> > That's just as complex but at least it's one variable.\r\n>> >\r\n>>\r\n>\r\n>  What do you think about the general syntax for detailed info as:\r\n>> GODEBUG=gctrace=+2,schedtrace=**+1\r\n>> ?\r\n>> I think gctrace can benefit from it as well. Currently we output too\r\n>>\r\n> much\r\n>\r\n>> details for end users, and for GC developers we can extend it even\r\n>>\r\n> more in\r\n>\r\n>> future.\r\n>>\r\n>\r\n>\r\n> GOGCTRACE and GOTRACEBACK are documented in runtime package\r\n> documentation.\r\n> Is it fine to change the \"interface\" to:\r\n> GODEBUG=gctrace=1,traceback=**crash\r\n> ?\r\n\r\nI guess we should continue to support GOGCTRACE and GOTRACEBACK.\r\n",
			"disapproval": false,
			"date": "2013-06-03 16:32:11.578970",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-06-02 18:43:54.765500",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is useful to track down issues like:\nhttps://code.google.com/p/go/issues/detail?id=5586\nThe trace looks like:\nGOSCHEDTRACE 2008ms: gomaxprocs=4 idleprocs=1 threads=6 idlethreads=1 runqueue=0 [0 1 0 0]\nGOSCHEDTRACE 3015ms: gomaxprocs=4 idleprocs=1 threads=6 idlethreads=1 runqueue=0 [0 0 1 0]\nThere are both runnable goroutines in local run queues and idle procs. This is a bug.\n\nI've also used similar code (in detailed mode) to track down several issues with the new scheduler (there were several hangs under different conditions).",
			"disapproval": false,
			"date": "2013-06-02 18:49:57.915400",
			"approval": false
		},
		{
			"sender": "khr@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"khr@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't like the fact that we have two names like goschedtrace and scheddump.  They should both be \"dump\"s or both be \"trace\"s, so it is clearer that one is talking about the other.\n\nOtherwise, LGTM.",
			"disapproval": false,
			"date": "2013-06-03 05:03:47.427210",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jun 3, 2013 at 4:40 PM, R\u00e9my Oudompheng\r\n<remyoudompheng@gmail.com> wrote:\r\n> Maybe it is possible to make it available through the */pprof packages\r\n> interface?\r\n\r\nHow will it work? It should not require changing source code nor\r\nsending HTTP requests.\r\n",
			"disapproval": false,
			"date": "2013-06-03 13:03:02.659450",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"khr@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/03 05:03:47, khr wrote:\n> I don't like the fact that we have two names like goschedtrace and scheddump. \n> They should both be \"dump\"s or both be \"trace\"s, so it is clearer that one is\n> talking about the other.\n> \n> Otherwise, LGTM.\n\nRenamed everything to \"schedtrace\" to be consistent with GOGCTRACE.\n\nAnybody else? Ian? Russ? Brad?",
			"disapproval": false,
			"date": "2013-06-03 10:51:32.716970",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't question the usefulness, only the UI. We have a lot of knobs\r\nfor configuration and they're still arriving.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-06-03 12:50:54.923550",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This may be worth having but I am getting worried by the proliferation\r\nof magic variables.\r\n",
			"disapproval": false,
			"date": "2013-06-03 12:33:29.804940",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Maybe it is possible to make it available through the */pprof packages\r\ninterface?\r\n\r\nR\u00e9my.\r\n",
			"disapproval": false,
			"date": "2013-06-03 12:40:49.200450",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jun 3, 2013 at 4:33 PM, Rob Pike <r@golang.org> wrote:\r\n> This may be worth having but I am getting worried by the proliferation\r\n> of magic variables.\r\n\r\nGOGCTRACE proved to be very useful.\r\nWe can start with internal variable that can be changes only by\r\nrecompiling from source.\r\n",
			"disapproval": false,
			"date": "2013-06-03 12:45:01.843570",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is not configuration, only tracing. So at least we don't need to\r\ntest additional configurations (as in GOGC=10 and GOGC=1000).\r\n\r\nOn Mon, Jun 3, 2013 at 4:50 PM, Rob Pike <r@golang.org> wrote:\r\n> I don't question the usefulness, only the UI. We have a lot of knobs\r\n> for configuration and they're still arriving.\r\n>\r\n> -rob\r\n",
			"disapproval": false,
			"date": "2013-06-03 13:04:35.451900",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't see what that has to do with my complaint that there is a\r\nproliferation of special variables. Plus you've got another little\r\nminiconfiguration language here.\r\n\r\nAgain, I don't question the utility but I'd like to see if there's a\r\nway to control this growth in obscure features, variables, and\r\nconfiguration.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-06-03 13:22:25.822320",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"khr@golang.org",
				"r@golang.org",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/03 16:10:14, dvyukov wrote:\n> On Mon, Jun 3, 2013 at 5:24 PM, Russ Cox <mailto:rsc@golang.org> wrote:\n> \n> > One possibility is to merge GOGCTRACE and GOSCHEDTRACE into a single\n> > GODEBUG variable with a syntax like\n> >\n> > GODEBUG=gctrace=1\n> > GODEBUG=gctrace=2,schedtrace=1\n> >\n> > That's just as complex but at least it's one variable.\n> >\n> \n> What do you think about the general syntax for detailed info as:\n> GODEBUG=gctrace=+2,schedtrace=+1\n> ?\n> I think gctrace can benefit from it as well. Currently we output too much\n> details for end users, and for GC developers we can extend it even more in\n> future.\n\n\nGOGCTRACE and GOTRACEBACK are documented in runtime package documentation.\nIs it fine to change the \"interface\" to:\nGODEBUG=gctrace=1,traceback=crash\n?",
			"disapproval": false,
			"date": "2013-06-03 16:21:23.919380",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "One possibility is to merge GOGCTRACE and GOSCHEDTRACE into a single\r\nGODEBUG variable with a syntax like\r\n\r\nGODEBUG=gctrace=1\r\nGODEBUG=gctrace=2,schedtrace=1\r\n\r\nThat's just as complex but at least it's one variable.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-06-03 13:24:32.673990",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I was about to suggest a similar combination.\r\n\r\n-rob\r\n\r\n\r\nOn Mon, Jun 3, 2013 at 9:24 AM, Russ Cox <rsc@golang.org> wrote:\r\n> One possibility is to merge GOGCTRACE and GOSCHEDTRACE into a single GODEBUG\r\n> variable with a syntax like\r\n>\r\n> GODEBUG=gctrace=1\r\n> GODEBUG=gctrace=2,schedtrace=1\r\n>\r\n> That's just as complex but at least it's one variable.\r\n>\r\n> Russ\r\n",
			"disapproval": false,
			"date": "2013-06-03 13:28:22.392120",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jun 3, 2013 at 9:24 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> One possibility is to merge GOGCTRACE and GOSCHEDTRACE into a single\r\n> GODEBUG variable with a syntax like\r\n>\r\n> GODEBUG=gctrace=1\r\n> GODEBUG=gctrace=2,schedtrace=1\r\n>\r\n> That's just as complex but at least it's one variable.\r\n>\r\nI like this proposal.\r\n",
			"disapproval": false,
			"date": "2013-06-03 13:30:31.509040",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"khr@golang.org",
				"r@golang.org",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/03 13:24:32, rsc wrote:\n> One possibility is to merge GOGCTRACE and GOSCHEDTRACE into a single\n> GODEBUG variable with a syntax like\n> \n> GODEBUG=gctrace=1\n> GODEBUG=gctrace=2,schedtrace=1\n> \n> That's just as complex but at least it's one variable.\n\n\nsounds good",
			"disapproval": false,
			"date": "2013-06-03 13:31:26.081820",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jun 3, 2013 at 5:24 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> One possibility is to merge GOGCTRACE and GOSCHEDTRACE into a single\r\n> GODEBUG variable with a syntax like\r\n>\r\n> GODEBUG=gctrace=1\r\n> GODEBUG=gctrace=2,schedtrace=1\r\n>\r\n> That's just as complex but at least it's one variable.\r\n>\r\n\r\nWhat do you think about the general syntax for detailed info as:\r\nGODEBUG=gctrace=+2,schedtrace=+1\r\n?\r\nI think gctrace can benefit from it as well. Currently we output too much\r\ndetails for end users, and for GC developers we can extend it even more in\r\nfuture.\r\n",
			"disapproval": false,
			"date": "2013-06-03 16:10:14.543830",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"khr@golang.org",
				"r@golang.org",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "this is superseded by https://codereview.appspot.com/11435044/",
			"disapproval": false,
			"date": "2013-07-18 14:22:40.034310",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"khr@golang.org",
				"r@golang.org",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-07-18 14:24:18.034660",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 9892043: runtime: dump scheduler state when GOSCHEDTRACE env var set",
	"created": "2013-05-31 10:10:17.774510",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		11001,
		14001,
		17001,
		23001
	],
	"modified": "2013-07-18 14:24:20.608700",
	"closed": true,
	"issue": 9892043
}