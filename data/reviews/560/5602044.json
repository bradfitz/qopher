{
	"description": "os: make the NewFile signature match between posix & windows",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Nice, but I am not sure this is necessary.\nI think it is clearer to get a compiler error.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-31 19:55:47.419733",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2012-01-31 19:53:00.217903",
			"approval": false
		},
		{
			"sender": "borman@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Why wasn't there a declared type for file descriptors?  For posix it could\nbe (using the windows name):\n\n    type Handle int\n\nSadly this would trickle through a lot of code and would be an API change.\n\nI am not a fan of dynamic typing.  Makes it feel like python.\n\nOn Tue, Jan 31, 2012 at 11:55 AM, Russ Cox <rsc@golang.org> wrote:\n\n> Nice, but I am not sure this is necessary.\n> I think it is clearer to get a compiler error.\n>\n> Russ\n>\n",
			"disapproval": false,
			"date": "2012-01-31 20:11:36.007166",
			"approval": false
		},
		{
			"sender": "borman@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "No, there is not _a_ declared type for file descriptors.  There are least\ntwo declared types that are mutually exclusive.  Having _a_ declared\ntype would address issue that Brad brought up.\n\n    -Paul\n\nOn Tue, Jan 31, 2012 at 12:12 PM, Russ Cox <rsc@golang.org> wrote:\n\n> There _is_ a declared type for file descriptors.\n> On Windows it is syscall.Handle, and on Unix it is int.\n>\n> Russ\n>\n",
			"disapproval": false,
			"date": "2012-01-31 21:06:36.905288",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I agree with Paul. syscall.Hanlde for file descriptors would fix Brad's \nproblem. But it could affect many programs out there.\n\nHere is a bit of history. When we started windows/386 port we used int for \nfile handles on windows, just like unix alternatives. Then, as \nwindows/amd64 come along, we discovered that int is not big enough. So we \nhad no choice but to introduce new type syscall.Handle to mask the \ndifferences between windows 386 and amd64. That made things \"non-portable\" \nbetween OSes (see file.go and file_windows.go in $GOROOT/doc/progs). \nPerhaps, we do need single syscall type for file descriptors, if not \nsyscall.Handle, but something else. int is good enough at this moment, but \nthat might change one day. One less thing to worry about.\n\nAlex\n",
			"disapproval": false,
			"date": "2012-01-31 22:38:04.775979",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "There _is_ a declared type for file descriptors.\nOn Windows it is syscall.Handle, and on Unix it is int.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-31 20:12:34.995828",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I agree that this is ugly, but all the other cases seem uglier.\nCan we leave this as is?\n\nRuss\n",
			"disapproval": false,
			"date": "2012-02-06 17:18:26.836823",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2012-06-03 04:42:34.825319",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 5602044: os: make the NewFile signature match between posix & windows",
	"created": "2012-01-31 19:52:49.685709",
	"patchsets": [
		1,
		3,
		2003
	],
	"modified": "2013-05-17 20:18:23.613290",
	"closed": true,
	"issue": 5602044
}