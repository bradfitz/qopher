{
	"description": "crypto/openpgp: add clear-signing support.\n\nClear signed messages are often seen in email and are formatted so\nthat the plaintext of the signed message is readable without any\nspecial tools.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5604043/diff/4/openpgp/clearsign/clearsign.go\nFile openpgp/clearsign/clearsign.go (right):\n\nhttp://codereview.appspot.com/5604043/diff/4/openpgp/clearsign/clearsign.go#newcode11\nopenpgp/clearsign/clearsign.go:11: \"code.google.com/p/go.crypto/openpgp/armor\"\nUnless we have a different style guide here that I don't know about, these should go after the \"time\" import, with a blank line in-between.\n\nhttp://codereview.appspot.com/5604043/diff/4/openpgp/clearsign/clearsign.go#newcode24\nopenpgp/clearsign/clearsign.go:24: Headers          map[string]string // These are the optional message headers\ntextproto.MIMEHeader?\n\ndo you care about multi-valued keys?\n\nhttp://codereview.appspot.com/5604043/diff/4/openpgp/clearsign/clearsign.go#newcode284\nopenpgp/clearsign/clearsign.go:284: func Encode(w io.Writer, rand io.Reader, signingTime time.Time, hashType crypto.Hash, privateKey *packet.PrivateKey) (plaintext io.WriteCloser, err error) {\nholy signature.\n\nI wonder if a\n\ntype Encoder struct {\n    OptionalFields\n    ...\n}\n\nmakes more sense.  With Write and Close methods, and return an error on first Write if something's wrong.\n\nOr:\n\nenc := NewEncoder(requiredParams)\nenc.OptionalFoo = ...\nenc.Write(...)\nenc.Close()",
			"disapproval": false,
			"date": "2012-01-31 17:58:08.599526",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5604043/diff/4/openpgp/clearsign/clearsign.go\nFile openpgp/clearsign/clearsign.go (right):\n\nhttp://codereview.appspot.com/5604043/diff/4/openpgp/clearsign/clearsign.go#newcode11\nopenpgp/clearsign/clearsign.go:11: \"code.google.com/p/go.crypto/openpgp/armor\"\nOn 2012/01/31 17:58:08, bradfitz wrote:\n> Unless we have a different style guide here that I don't know about, these\n> should go after the \"time\" import, with a blank line in-between.\n\nDone.\n\nhttp://codereview.appspot.com/5604043/diff/4/openpgp/clearsign/clearsign.go#newcode24\nopenpgp/clearsign/clearsign.go:24: Headers          map[string]string // These are the optional message headers\nOn 2012/01/31 17:58:08, bradfitz wrote:\n> textproto.MIMEHeader?\n\nYep, looks like it. Thanks.\n\nhttp://codereview.appspot.com/5604043/diff/4/openpgp/clearsign/clearsign.go#newcode284\nopenpgp/clearsign/clearsign.go:284: func Encode(w io.Writer, rand io.Reader, signingTime time.Time, hashType crypto.Hash, privateKey *packet.PrivateKey) (plaintext io.WriteCloser, err error) {\nOn 2012/01/31 17:58:08, bradfitz wrote:\n> holy signature.\n\nThere's a bug open to allow the random and time to be overridden in OpenPGP in any case. That means that it'll probably need a Config structure, so I've added that in this CL and used it here. See what you think.\n\nIf that works then I'll redo several of the other calls to take a config in order to address that bug.",
			"disapproval": false,
			"date": "2012-01-31 18:59:03.900083",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5604043/diff/6001/openpgp/packet/config.go\nFile openpgp/packet/config.go (right):\n\nhttp://codereview.appspot.com/5604043/diff/6001/openpgp/packet/config.go#newcode14\nopenpgp/packet/config.go:14: // Config collects a number of parameters along with sensible defaults. A nil\nawkward second sentence.  I'd also make it start on its own line.\n\nhttp://codereview.appspot.com/5604043/diff/6001/openpgp/packet/config.go#newcode18\nopenpgp/packet/config.go:18: // cryptographic random reader in package crypto/rand is used.\n// Rand provides the source of entropy.\n// If nil, the crypto/rand Reader is used.\n\nhttp://codereview.appspot.com/5604043/diff/6001/openpgp/packet/config.go#newcode20\nopenpgp/packet/config.go:20: // DefaultHash is the default hash function to be used. If nil, SHA-256\nSo this is a default for a default?  Seems like too many layers of defaults.\n\nhttp://codereview.appspot.com/5604043/diff/6001/openpgp/packet/config.go#newcode22\nopenpgp/packet/config.go:22: DefaultHash *crypto.Hash\nthe zero value of crypto.Hash is reserved.  Do you like using a pointer more than just saying \"if zero\"?\n\nhttp://codereview.appspot.com/5604043/diff/6001/openpgp/packet/config.go#newcode26\nopenpgp/packet/config.go:26: // epoch. If Time is nil, TLS uses time.Now.\ns/TLS//",
			"disapproval": false,
			"date": "2012-01-31 19:08:42.501971",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://agl%40golang.org@code.google.com/p/go.crypto/",
			"disapproval": false,
			"date": "2012-01-31 17:48:10.123680",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5604043/diff/6001/openpgp/packet/config.go\nFile openpgp/packet/config.go (right):\n\nhttp://codereview.appspot.com/5604043/diff/6001/openpgp/packet/config.go#newcode14\nopenpgp/packet/config.go:14: // Config collects a number of parameters along with sensible defaults. A nil\nOn 2012/01/31 19:08:42, bradfitz wrote:\n> awkward second sentence.  I'd also make it start on its own line.\n\nDone.\n\nhttp://codereview.appspot.com/5604043/diff/6001/openpgp/packet/config.go#newcode18\nopenpgp/packet/config.go:18: // cryptographic random reader in package crypto/rand is used.\nOn 2012/01/31 19:08:42, bradfitz wrote:\n> // Rand provides the source of entropy.\n> // If nil, the crypto/rand Reader is used.\n\nDone.\n\nhttp://codereview.appspot.com/5604043/diff/6001/openpgp/packet/config.go#newcode20\nopenpgp/packet/config.go:20: // DefaultHash is the default hash function to be used. If nil, SHA-256\nOn 2012/01/31 19:08:42, bradfitz wrote:\n> So this is a default for a default?  Seems like too many layers of defaults.\n\nYea, it's the default default :( But I worry that if I call it Hash, people might think that they need to figure out the correct hash function to verify a signature or something. There would also be the question of what to call the accessor function in that case.\n\nhttp://codereview.appspot.com/5604043/diff/6001/openpgp/packet/config.go#newcode22\nopenpgp/packet/config.go:22: DefaultHash *crypto.Hash\nOn 2012/01/31 19:08:42, bradfitz wrote:\n> the zero value of crypto.Hash is reserved.  Do you like using a pointer more\n> than just saying \"if zero\"?\n\nI've reserved the zero CipherFunction too and done this.\n\nhttp://codereview.appspot.com/5604043/diff/6001/openpgp/packet/config.go#newcode26\nopenpgp/packet/config.go:26: // epoch. If Time is nil, TLS uses time.Now.\nOn 2012/01/31 19:08:42, bradfitz wrote:\n> s/TLS//\n\nDone.",
			"disapproval": false,
			"date": "2012-01-31 19:29:42.939626",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5604043/diff/1004/openpgp/clearsign/clearsign.go\nFile openpgp/clearsign/clearsign.go (right):\n\nhttp://codereview.appspot.com/5604043/diff/1004/openpgp/clearsign/clearsign.go#newcode30\nopenpgp/clearsign/clearsign.go:30: Headers          textproto.MIMEHeader // These are the optional message headers\ns/These are the //\n\nhttp://codereview.appspot.com/5604043/diff/1004/openpgp/clearsign/clearsign.go#newcode288\nopenpgp/clearsign/clearsign.go:288: // Encode returns a WriteCloser which will clear-sign a message with privateKey\nyou don't document that Config can be nil.  also, if it's the only optional parameter, it should probably go at the end, after the private key.\n\nhttp://codereview.appspot.com/5604043/diff/1004/openpgp/packet/config.go\nFile openpgp/packet/config.go (right):\n\nhttp://codereview.appspot.com/5604043/diff/1004/openpgp/packet/config.go#newcode21\nopenpgp/packet/config.go:21: // DefaultHash is the default hash function to be used. If nil, SHA-256\nzero, not nil. its underlying type is a uint. \nalso, newline before \"If\", so the sentence doesn't wrap oddly.\n\nhttp://codereview.appspot.com/5604043/diff/1004/openpgp/packet/config.go#newcode24\nopenpgp/packet/config.go:24: // DefaultCipher is the cipher to be used. If nil, AES-128 is used.\nzero",
			"disapproval": false,
			"date": "2012-02-03 20:55:04.772063",
			"approval": true
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "poke.\n",
			"disapproval": false,
			"date": "2012-02-03 20:48:52.539622",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as 8f5093a0cad1 ***\n\ncrypto/openpgp: add clear-signing support.\n\nClear signed messages are often seen in email and are formatted so\nthat the plaintext of the signed message is readable without any\nspecial tools.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5604043\n\nhttp://codereview.appspot.com/5604043/diff/1004/openpgp/clearsign/clearsign.go\nFile openpgp/clearsign/clearsign.go (right):\n\nhttp://codereview.appspot.com/5604043/diff/1004/openpgp/clearsign/clearsign.go#newcode30\nopenpgp/clearsign/clearsign.go:30: Headers          textproto.MIMEHeader // These are the optional message headers\nOn 2012/02/03 20:55:04, bradfitz wrote:\n> s/These are the //\n\nDone.\n\nhttp://codereview.appspot.com/5604043/diff/1004/openpgp/clearsign/clearsign.go#newcode288\nopenpgp/clearsign/clearsign.go:288: // Encode returns a WriteCloser which will clear-sign a message with privateKey\nOn 2012/02/03 20:55:04, bradfitz wrote:\n> you don't document that Config can be nil.  also, if it's the only optional\n> parameter, it should probably go at the end, after the private key.\n\nDone.\n\nhttp://codereview.appspot.com/5604043/diff/1004/openpgp/packet/config.go\nFile openpgp/packet/config.go (right):\n\nhttp://codereview.appspot.com/5604043/diff/1004/openpgp/packet/config.go#newcode21\nopenpgp/packet/config.go:21: // DefaultHash is the default hash function to be used. If nil, SHA-256\nOn 2012/02/03 20:55:04, bradfitz wrote:\n> zero, not nil. its underlying type is a uint. \n> also, newline before \"If\", so the sentence doesn't wrap oddly.\n\nDone.\n\nhttp://codereview.appspot.com/5604043/diff/1004/openpgp/packet/config.go#newcode24\nopenpgp/packet/config.go:24: // DefaultCipher is the cipher to be used. If nil, AES-128 is used.\nOn 2012/02/03 20:55:04, bradfitz wrote:\n> zero\n\nDone.",
			"disapproval": false,
			"date": "2012-02-03 21:46:33.663218",
			"approval": false
		}
	],
	"owner_email": "agl@golang.org",
	"private": false,
	"base_url": "",
	"owner": "agl1",
	"subject": "code review 5604043: crypto/openpgp: add clear-signing support.",
	"created": "2012-01-31 17:47:16.060363",
	"patchsets": [
		1,
		3,
		4,
		6001,
		1004,
		10001
	],
	"modified": "2012-02-03 21:46:34.536328",
	"closed": true,
	"issue": 5604043
}