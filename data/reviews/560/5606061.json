{
	"description": "cmd/gc: fix codegen reordering for expressions involving && and ||\n\nFixes issue 2821.",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-03 10:27:05.912067",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=58badc8d57f6 ***\n\ncmd/gc: fix codegen reordering for expressions involving && and ||\n\nFixes issue 2821.\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5606061",
			"disapproval": false,
			"date": "2012-02-06 14:41:06.580637",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ouch.  Thanks for finding this.  It's a little odd to\nsingle out OANDAND and OOROR as having possibly\ncomplex children; a simple OADD might have a call\ninside it, but we don't penalize all the OADDs for that.\nThe code in the general case, which considers the two\nchildren, is supposed to handle this case.  It might\nbe cleaner and easier to understand to add\n    if(n->ninit) {\n        ul = UINF;\n        goto out;\n    }\nbefore or after the switch instead.\n\nThat said, that was one of the first things I tried when\nI saw this report, and it didn't work for me, but maybe\nI confused myself about which compiler I was really\nrunning.  If that doesn't work but the edit in this CL does,\nwe should add a comment explaining those two cases\nvery carefully.\n\nThanks.\nRuss\n",
			"disapproval": false,
			"date": "2012-02-03 14:51:34.620420",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 3, 2012 at 15:51, Russ Cox <rsc@golang.org> wrote:\n> Ouch. \u00a0Thanks for finding this. \u00a0It's a little odd to\n> single out OANDAND and OOROR as having possibly\n\ni think it only hurts b/c ANDAND and OROR get handled by bgen.\nDiffing the -W output i noticed that reorder1 had swapped the OANDAND\nin i = true && expr\nin the generated call to convT2E with the 'type.bool' argument.\ndiffing the -S output i noticed that the assembly code for that that\nhad the type argument being set up in the new code, then the bgen\ngenerated OAND branching, and then that call, by wich time the\n'type.bool' pointer was clobbered.\n\n> complex children; a simple OADD might have a call\n> inside it, but we don't penalize all the OADDs for that.\n> The code in the general case, which considers the two\n> children, is supposed to handle this case. \u00a0It might\n> be cleaner and easier to understand to add\n> \u00a0 \u00a0if(n->ninit) {\n> \u00a0 \u00a0 \u00a0 \u00a0ul = UINF;\n> \u00a0 \u00a0 \u00a0 \u00a0goto out;\n> \u00a0 \u00a0}\n\ni'll try.  i'll also try triggering the bug with an OADD\n\n> before or after the switch instead.\n>\n> That said, that was one of the first things I tried when\n> I saw this report, and it didn't work for me, but maybe\n> I confused myself about which compiler I was really\n> running.\n\nthe go tool made everything easier, including confusing oneself what\ncompiler is running\n\n>\u00a0If that doesn't work but the edit in this CL does,\n> we should add a comment explaining those two cases\n> very carefully.\n>\n> Thanks.\n> Russ\n",
			"disapproval": false,
			"date": "2012-02-03 15:03:11.921225",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "btw its not that the andand has a potential ninit, its that its ->rigth\ngets reordered in place.\nOn Feb 3, 2012 4:03 PM, \"Luuk van Dijk\" <lvd@google.com> wrote:\n\n> On Fri, Feb 3, 2012 at 15:51, Russ Cox <rsc@golang.org> wrote:\n> > Ouch.  Thanks for finding this.  It's a little odd to\n> > single out OANDAND and OOROR as having possibly\n>\n> i think it only hurts b/c ANDAND and OROR get handled by bgen.\n> Diffing the -W output i noticed that reorder1 had swapped the OANDAND\n> in i = true && expr\n> in the generated call to convT2E with the 'type.bool' argument.\n> diffing the -S output i noticed that the assembly code for that that\n> had the type argument being set up in the new code, then the bgen\n> generated OAND branching, and then that call, by wich time the\n> 'type.bool' pointer was clobbered.\n>\n> > complex children; a simple OADD might have a call\n> > inside it, but we don't penalize all the OADDs for that.\n> > The code in the general case, which considers the two\n> > children, is supposed to handle this case.  It might\n> > be cleaner and easier to understand to add\n> >    if(n->ninit) {\n> >        ul = UINF;\n> >        goto out;\n> >    }\n>\n> i'll try.  i'll also try triggering the bug with an OADD\n>\n> > before or after the switch instead.\n> >\n> > That said, that was one of the first things I tried when\n> > I saw this report, and it didn't work for me, but maybe\n> > I confused myself about which compiler I was really\n> > running.\n>\n> the go tool made everything easier, including confusing oneself what\n> compiler is running\n>\n> > If that doesn't work but the edit in this CL does,\n> > we should add a comment explaining those two cases\n> > very carefully.\n> >\n> > Thanks.\n> > Russ\n>\n",
			"disapproval": false,
			"date": "2012-02-03 16:18:27.455618",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Right so its right should have a ninit and be UINF which should percolate\nup.\n",
			"disapproval": false,
			"date": "2012-02-03 16:25:16.356623",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/02/03 16:25:16, rsc wrote:\n> Right so its right should have a ninit and be UINF which should percolate\n> up.\n\nthe conv doesn't get the ninit until after it's been ulmanncalc'ed.  looking for the best fix...",
			"disapproval": false,
			"date": "2012-02-06 10:38:46.967222",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/02/06 10:38:46, lvd wrote:\n> On 2012/02/03 16:25:16, rsc wrote:\n> > Right so its right should have a ninit and be UINF which should percolate\n> > up.\n> \n> the conv doesn't get the ninit until after it's been ulmanncalc'ed.  looking for\n> the best fix...\n\npatch set 4 works, but maybe it would be better to pull the entire ullmancalc into order.",
			"disapproval": false,
			"date": "2012-02-06 10:49:31.782464",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-02-06 14:34:44.029364",
			"approval": true
		}
	],
	"owner_email": "lvd@google.com",
	"private": false,
	"base_url": "",
	"owner": "lvd",
	"subject": "code review 5606061: cmd/gc: fix codegen reordering for expressions involvin...",
	"created": "2012-02-03 10:15:52.223240",
	"patchsets": [
		1,
		1002,
		1003,
		7001,
		7002
	],
	"modified": "2012-02-06 14:41:07.677570",
	"closed": true,
	"issue": 5606061
}