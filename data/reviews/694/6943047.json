{
	"description": "encoding/json: encode map key is of string kind, decode only of string type\n\nAllows encoding and decoding of maps with key of string kind, not just string type.\nFixes issue 3519.",
	"cc": [
		"rsc@golang.org",
		"dave@cheney.net",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"ryanslade@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-12-17 15:57:46.968440",
			"approval": true
		},
		{
			"sender": "ryanslade@gmail.com",
			"recipients": [
				"ryanslade@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-13 20:59:08.410780",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"ryanslade@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for working on this.\n\nhttps://codereview.appspot.com/6943047/diff/7001/src/pkg/encoding/json/decode.go\nFile src/pkg/encoding/json/decode.go (right):\n\nhttps://codereview.appspot.com/6943047/diff/7001/src/pkg/encoding/json/decode.go#newcode441\nsrc/pkg/encoding/json/decode.go:441: if t.Key().Kind() != reflect.TypeOf(\"\").Kind() {\n!= reflect.String\n\nhttps://codereview.appspot.com/6943047/diff/7001/src/pkg/encoding/json/decode.go#newcode550\nsrc/pkg/encoding/json/decode.go:550: kv := reflect.New(v.Type().Key())\nkv := reflect.ValueOf(key).Convert(v.Type().Key())\nmv.SetMapIndex(kv, subv)\n\nwill avoid the allocation of reflect.New.\n\nhttps://codereview.appspot.com/6943047/diff/7001/src/pkg/encoding/json/decode_test.go\nFile src/pkg/encoding/json/decode_test.go (right):\n\nhttps://codereview.appspot.com/6943047/diff/7001/src/pkg/encoding/json/decode_test.go#newcode1008\nsrc/pkg/encoding/json/decode_test.go:1008: b := bytes.NewBufferString(`{\"foo\":42}`)\nLet's test both encoding and decoding. Please do:\n\nvar m1, m2 map[stringKind]int\nm1 = map[stringKind]int{\n    \"foo\": 42,\n}\n\nand then Marshal m1, Unmarshal into m2, and check that reflect.DeepEqual(m1, m2) is true.",
			"disapproval": false,
			"date": "2012-12-13 21:24:30.540200",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry but it looks like someone else made some conflicting changes.\r\nPlease hg sync, resolve the changes, and hg mail again.\r\n",
			"disapproval": false,
			"date": "2012-12-17 15:59:14.505320",
			"approval": false
		},
		{
			"sender": "ryanslade@gmail.com",
			"recipients": [
				"ryanslade@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-12-13 17:21:16.048840",
			"approval": false
		},
		{
			"sender": "ryanslade@gmail.com",
			"recipients": [
				"ryanslade@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I've made the changes as suggested, thanks for taking a look.\n\nhttps://codereview.appspot.com/6943047/diff/7001/src/pkg/encoding/json/decode.go\nFile src/pkg/encoding/json/decode.go (right):\n\nhttps://codereview.appspot.com/6943047/diff/7001/src/pkg/encoding/json/decode.go#newcode441\nsrc/pkg/encoding/json/decode.go:441: if t.Key().Kind() != reflect.TypeOf(\"\").Kind() {\nOn 2012/12/13 21:24:30, rsc wrote:\n> != reflect.String\n\nDone.\n\nhttps://codereview.appspot.com/6943047/diff/7001/src/pkg/encoding/json/decode.go#newcode550\nsrc/pkg/encoding/json/decode.go:550: kv := reflect.New(v.Type().Key())\nOn 2012/12/13 21:24:30, rsc wrote:\n> kv := reflect.ValueOf(key).Convert(v.Type().Key())\n> mv.SetMapIndex(kv, subv)\n> \n> will avoid the allocation of reflect.New.\n\nDone.",
			"disapproval": false,
			"date": "2012-12-13 22:20:40.129690",
			"approval": false
		},
		{
			"sender": "ryanslade@gmail.com",
			"recipients": [
				"ryanslade@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-13 22:15:49.662050",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "@ryanslade, something like this should work against +tip\r\ndiff -r 7fe729534c6d src/pkg/encoding/json/decode.go\r\n--- a/src/pkg/encoding/json/decode.go   Fri Dec 21 15:14:38 2012 +1100\r\n+++ b/src/pkg/encoding/json/decode.go   Fri Dec 21 16:11:28 2012 +1100\r\n@@ -432,7 +432,7 @@\r\n        case reflect.Map:\r\n                // map must have string type\r\n                t := v.Type()\r\n-               if t.Key() != reflect.TypeOf(\"\") {\r\n+               if t.Key().Kind() != reflect.String {\r\n                        d.saveError(&UnmarshalTypeError{\"object\", v.Type()})\r\n                        break\r\n                }\r\n@@ -539,7 +539,8 @@\r\n                // Write value back to map;\r\n                // if using struct, subv points into struct already.\r\n                if v.Kind() == reflect.Map {\r\n-                       v.SetMapIndex(reflect.ValueOf(key), subv)\r\n+                       kv := reflect.ValueOf(key).Convert(v.Type().Key())\r\n+                       v.SetMapIndex(kv, subv)\r\n                }\r\n\r\n\r\nOn Tue, Dec 18, 2012 at 2:59 AM, Russ Cox <rsc@golang.org> wrote:\r\n> Sorry but it looks like someone else made some conflicting changes.\r\n> Please hg sync, resolve the changes, and hg mail again.\r\n",
			"disapproval": false,
			"date": "2012-12-21 05:12:08.485460",
			"approval": false
		},
		{
			"sender": "ryanslade@gmail.com",
			"recipients": [
				"ryanslade@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-24 18:08:44.618110",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"ryanslade@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=7b6096868871 ***\n\nencoding/json: encode map key is of string kind, decode only of string type\n\nAllows encoding and decoding of maps with key of string kind, not just string type.\nFixes issue 3519.\n\nR=rsc, dave\nCC=golang-dev\nhttps://codereview.appspot.com/6943047\n\nCommitter: Dave Cheney <dave@cheney.net>",
			"disapproval": false,
			"date": "2012-12-30 04:41:02.684860",
			"approval": false
		}
	],
	"owner_email": "ryanslade@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "ryanslade",
	"subject": "code review 6943047: encoding/json: encode map key is of string kind, decode...",
	"created": "2012-12-13 17:20:21.032670",
	"patchsets": [
		1,
		2001,
		4003,
		7001,
		3005,
		13001
	],
	"modified": "2012-12-30 11:02:08.323990",
	"closed": true,
	"issue": 6943047
}