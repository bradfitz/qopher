{
	"description": "doc: add race detector manual",
	"cc": [
		"minux.ma@gmail.com",
		"franciscossouza@gmail.com",
		"rsc@golang.org",
		"adg@golang.org",
		"adg@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-12-13 19:08:23.071380",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-14 09:35:34.665500",
			"approval": false
		},
		{
			"sender": "franciscossouza@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"franciscossouza@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-12-15 14:57:00.668910",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"minux.ma@gmail.com",
				"franciscossouza@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello minux.ma@gmail.com, franciscossouza@gmail.com, rsc@golang.org, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-17 09:30:17.275610",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6948043/diff/3/doc/articles/race_detector.html\nFile doc/articles/race_detector.html (right):\n\nhttps://codereview.appspot.com/6948043/diff/3/doc/articles/race_detector.html#newcode6\ndoc/articles/race_detector.html:6: <h2 id=\"Introduction\">Introduction</h2>\nOn 2012/12/13 19:29:50, minux wrote:\n> if you don't need to quote a specific section of this article by URL\n> (like tip.golang.org/doc/articles/race_detector.html#Introduction),\n> i think you can just drop the id=\"xx\" part.\n> \n> it won't affect the toc.\n\nDone.\n\nhttps://codereview.appspot.com/6948043/diff/3/doc/articles/race_detector.html#newcode22\ndoc/articles/race_detector.html:22: c <- true\nOn 2012/12/13 19:29:50, minux wrote:\n> s/</&lt;/g\n> \n> there are other instances.\n\nDone.\n\nhttps://codereview.appspot.com/6948043/diff/3/doc/articles/race_detector.html#newcode89\ndoc/articles/race_detector.html:89: You can pass some options to the race detector by means of `GORACE` environment variable.  The format is:\nOn 2012/12/13 19:29:50, minux wrote:\n> <code>GORACE</code>\n\nDone.\n\nhttps://codereview.appspot.com/6948043/diff/3/doc/articles/race_detector.html#newcode115\ndoc/articles/race_detector.html:115: You may start with just running your tests under the race detector (go test -race).  However sometimes tests have limited coverage, especially with respect to concurrency.  The race detector finds only races that actually happen in the execution, it can't find races in code paths that were not executed.  So it may be beneficial to run the whole program built with -race under a realistic workload, frequently it discovers much more bugs than tests.\nOn 2012/12/13 19:29:50, minux wrote:\n> <code>go test -race</code>\n\nDone.\n\nhttps://codereview.appspot.com/6948043/diff/3/doc/articles/race_detector.html#newcode191\ndoc/articles/race_detector.html:191: The fix is simple, one just needs to introduce new variables in the goroutines (note :=):\nOn 2012/12/13 19:29:50, minux wrote:\n> <code>:=</code>\n\nDone.\n\nhttps://codereview.appspot.com/6948043/diff/3/doc/articles/race_detector.html#newcode203\ndoc/articles/race_detector.html:203: If the following code is called from several goroutines, it leads to bad races on the services map.\nOn 2012/12/13 19:29:50, minux wrote:\n> <code>services</code>\n\nDone.\n\nhttps://codereview.appspot.com/6948043/diff/3/doc/articles/race_detector.html#newcode242\ndoc/articles/race_detector.html:242: Data races can happen on variables of primitive types as well (bool, int, int64), like in the following example:\nOn 2012/12/13 19:29:50, minux wrote:\n> <code>bool</code>, etc.\n\nDone.\n\nhttps://codereview.appspot.com/6948043/diff/3/doc/articles/race_detector.html#newcode271\ndoc/articles/race_detector.html:271: To fix such data race one can use (aside from chan and sync.Mutex) package sync/atomic, which provides atomic operations on primitive types.  sync/atomic functions solve all of the above issues.\nOn 2012/12/13 19:29:50, minux wrote:\n> <code>chan</code>, etc.\n> <a href=\"/pkg/sync/atomic><code>sync/atomic</code></a>\n\nDone.",
			"disapproval": false,
			"date": "2012-12-14 09:34:49.229140",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM modulo the template issue below.\n\nplease wait for others before submitting.\n\nhttps://codereview.appspot.com/6948043/diff/4/doc/articles/race_detector.html\nFile doc/articles/race_detector.html (right):\n\nhttps://codereview.appspot.com/6948043/diff/4/doc/articles/race_detector.html#newcode3\ndoc/articles/race_detector.html:3: \"Template\": true\ndoes this document really need templates?\n\nIf you want to separate all the Go code segment out into\ntheir own files under /doc/progs, and also make run.bash\ntest their compilation you can keep this to true but please\nextract all the big code segments out.\n\nyou can see doc/articles/image_package.html for examples.",
			"disapproval": false,
			"date": "2012-12-14 09:56:08.987160",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"minux.ma@gmail.com",
				"franciscossouza@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/12/17 01:10:41, rsc wrote:\n> I tried to tighten much of the text. I am not 100% sure it belongs here. Maybe\n> it should be a package-level doc comment for runtime/race. Will leave that\n> decision for adg.\n\nI'm happy for it to go here.",
			"disapproval": false,
			"date": "2012-12-17 03:02:02.746030",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"franciscossouza@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Done. Thanks!\n\nhttps://codereview.appspot.com/6948043/diff/4/doc/articles/race_detector.html\nFile doc/articles/race_detector.html (right):\n\nhttps://codereview.appspot.com/6948043/diff/4/doc/articles/race_detector.html#newcode9\ndoc/articles/race_detector.html:9: Data races are one of the most common and hardest to debug types of bugs in concurrent systems.  A data race occurs when two goroutines access the same variable w/o proper synchronization and at least one of the accesses is write.  See the <a href=\"/ref/mem\">The Go Memory Model</a> for details.\nOn 2012/12/14 12:16:05, fss wrote:\n> Isn't \"without\" better than \"w/o\"?\n\nDone.\n\nhttps://codereview.appspot.com/6948043/diff/4/doc/articles/race_detector.html#newcode35\ndoc/articles/race_detector.html:35: Fortunately, Go includes built-in data race detector.  The usage is very simple -- you just need to add -race flag to go command:\nOn 2012/12/14 12:16:05, fss wrote:\n> s/includes built-in/includes a built-in/\n> \n> s/flag to go command/flag to the go command/\n\nDone.\n\nhttps://codereview.appspot.com/6948043/diff/4/doc/articles/race_detector.html#newcode121\ndoc/articles/race_detector.html:121: Here are some example of typical data races.  All of them can be automatically detected with the race detector.\nOn 2012/12/14 12:16:05, fss wrote:\n> s/example/examples/\n\nDone.",
			"disapproval": false,
			"date": "2012-12-14 12:29:42.559590",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6948043/diff/3/doc/articles/race_detector.html\nFile doc/articles/race_detector.html (right):\n\nhttps://codereview.appspot.com/6948043/diff/3/doc/articles/race_detector.html#newcode6\ndoc/articles/race_detector.html:6: <h2 id=\"Introduction\">Introduction</h2>\nif you don't need to quote a specific section of this article by URL\n(like tip.golang.org/doc/articles/race_detector.html#Introduction),\ni think you can just drop the id=\"xx\" part.\n\nit won't affect the toc.\n\nhttps://codereview.appspot.com/6948043/diff/3/doc/articles/race_detector.html#newcode22\ndoc/articles/race_detector.html:22: c <- true\ns/</&lt;/g\n\nthere are other instances.\n\nhttps://codereview.appspot.com/6948043/diff/3/doc/articles/race_detector.html#newcode89\ndoc/articles/race_detector.html:89: You can pass some options to the race detector by means of `GORACE` environment variable.  The format is:\n<code>GORACE</code>\n\nhttps://codereview.appspot.com/6948043/diff/3/doc/articles/race_detector.html#newcode115\ndoc/articles/race_detector.html:115: You may start with just running your tests under the race detector (go test -race).  However sometimes tests have limited coverage, especially with respect to concurrency.  The race detector finds only races that actually happen in the execution, it can't find races in code paths that were not executed.  So it may be beneficial to run the whole program built with -race under a realistic workload, frequently it discovers much more bugs than tests.\n<code>go test -race</code>\n\nhttps://codereview.appspot.com/6948043/diff/3/doc/articles/race_detector.html#newcode191\ndoc/articles/race_detector.html:191: The fix is simple, one just needs to introduce new variables in the goroutines (note :=):\n<code>:=</code>\n\nhttps://codereview.appspot.com/6948043/diff/3/doc/articles/race_detector.html#newcode203\ndoc/articles/race_detector.html:203: If the following code is called from several goroutines, it leads to bad races on the services map.\n<code>services</code>\n\nhttps://codereview.appspot.com/6948043/diff/3/doc/articles/race_detector.html#newcode242\ndoc/articles/race_detector.html:242: Data races can happen on variables of primitive types as well (bool, int, int64), like in the following example:\n<code>bool</code>, etc.\n\nhttps://codereview.appspot.com/6948043/diff/3/doc/articles/race_detector.html#newcode271\ndoc/articles/race_detector.html:271: To fix such data race one can use (aside from chan and sync.Mutex) package sync/atomic, which provides atomic operations on primitive types.  sync/atomic functions solve all of the above issues.\n<code>chan</code>, etc.\n<a href=\"/pkg/sync/atomic><code>sync/atomic</code></a>\n\nhttps://codereview.appspot.com/6948043/diff/3/doc/articles/race_detector.html#newcode303\ndoc/articles/race_detector.html:303: The data race detector significantly increases both memory consumption and execution time.  The concrete numbers highly dependent on the particular program, but some reference numbers would be: memory consumption ~5-10x, execution time ~2-20x.\n\"The concrete numbers _are_ highly dependent on ..\"?",
			"disapproval": false,
			"date": "2012-12-13 19:29:49.968830",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"minux.ma@gmail.com",
				"franciscossouza@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I tried to tighten much of the text. I am not 100% sure it belongs here. Maybe it should be a package-level doc comment for runtime/race. Will leave that decision for adg.\n\nhttps://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html\nFile doc/articles/race_detector.html (right):\n\nhttps://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode9\ndoc/articles/race_detector.html:9: Data races are one of the most common and hardest to debug types of bugs in concurrent systems.  A data race occurs when two goroutines access the same variable without proper synchronization and at least one of the accesses is write.  See the <a href=\"/ref/mem\">The Go Memory Model</a> for details.\ns/without proper synchronization/concurrently/\n\nhttps://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode13\ndoc/articles/race_detector.html:13: Here is an example of a data race on map variable that can lead to crashes and memory corruptions:\ns/on map variable //\n\nhttps://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode35\ndoc/articles/race_detector.html:35: Fortunately, Go includes a built-in data race detector.  The usage is very simple -- you just need to add -race flag to the go command:\ns/The usage.*/To use it, add the -race flag to the go command:\n\nhttps://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode48\ndoc/articles/race_detector.html:48: When the race detector finds a data race in the program, it prints an informative report.  The report contains stack traces for conflicting accesses, as well as stacks where the involved goroutines were created.  You may see an example below:\ns/an informative/a/\ns/You may see an example below/For example/\n\nhttps://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode89\ndoc/articles/race_detector.html:89: You can pass some options to the race detector by means of <code>GORACE</code> environment variable.  The format is:\nThe GORACE environment variable sets race detector options.\nThe format is:\n\nhttps://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode99\ndoc/articles/race_detector.html:99: <li> log_path: Tells race detector to write reports to 'log_path.pid' file.  The special values are 'stdout' and 'stderr'.  The default is 'stderr'.</li>\nlog_path (default stderr): The race detector writes its report to a file named log_path.pid. The special names stdout and stderr cause reports to be written to standard output and standard error, respectively.\n\nhttps://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode100\ndoc/articles/race_detector.html:100: <li> exitcode: Override exit status of the process if something was reported.  Default value is 66.</li>\nexitcode (default 66): The exit status to use when exiting after a detected race.\n\nhttps://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode101\ndoc/articles/race_detector.html:101: <li> strip_path_prefix: Allows to strip beginnings of file paths in reports to make them more concise.</li>\nstrip_path_prefix (default \"\"): Strip this prefix from all reported file paths, to make reports more concise.\n\nhttps://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode102\ndoc/articles/race_detector.html:102: <li> history_size: Per-goroutine history size, controls how many previous memory accesses are remembered per goroutine.  Possible values are [0..7].  history_size=0 amounts to 32K memory accesses.  Each next value doubles the amount of memory accesses, up to history_size=7 that amounts to 4M memory accesses.  The default value is 1 (64K memory accesses).  Try to increase this value when you see \"failed to restore the stack\" in reports.  However, it can significantly increase memory consumption.</li>\nhistory_size (default 1): The per-goroutine memory access history is 32K * 2**history_size elements. Increasing this value can avoid a \"failed to restore the stack\" error in reports, but at the cost of increased memory usage.\n\nhttps://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode115\ndoc/articles/race_detector.html:115: You may start with just running your tests under the race detector (<code>go test -race</code>).  However sometimes tests have limited coverage, especially with respect to concurrency.  The race detector finds only races that actually happen in the execution, it can't find races in code paths that were not executed.  So it may be beneficial to run the whole program built with -race under a realistic workload, frequently it discovers much more bugs than tests.\nTo start, run your tests using the race detector (go test -race).\nThe race detector only finds races that happen at runtime, so it can't find races\nin code paths that are not executed. If your tests have incomplete coverage,\nyou may find more races by running a binary built with -race under a realistic workload.\n\nhttps://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode121\ndoc/articles/race_detector.html:121: Here are some examples of typical data races.  All of them can be automatically detected with the race detector.\ns/examples of //\ns/automatically //\n\nhttps://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode141\ndoc/articles/race_detector.html:141: Closures capture variables by reference rather than by value, so the reads of the <code>i</code> variable in the goroutines race with <code>i</code> increment in the loop statement.  Such program typically outputs 55555 instead of expected 01234.  The program can be fixed by explicitly making a copy of the loop counter:\nThe variable i in the function literal is the same variable used by the loop, so the read in the goroutine races with the loop increment. (This program typically prints 55555, not 01234.) The program can be fixed by making a copy of the variable:\n\nhttps://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode191\ndoc/articles/race_detector.html:191: The fix is simple, one just needs to introduce new variables in the goroutines (note <code>:=</code>):\nThe fix is to introduce new ...\n\nhttps://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode203\ndoc/articles/race_detector.html:203: If the following code is called from several goroutines, it leads to bad races on the <code>services</code> map.\nConcurrent reads and writes of a map are not safe:\n\nhttps://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode213\ndoc/articles/race_detector.html:213: func GetService(name string) net.Addr {\ns/Get/Lookup/\n\nhttps://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode219\ndoc/articles/race_detector.html:219: It can be fixed by protecting the accesses with a mutex:\nTo make the code safe, protect the accesses with a mutex:\n\nhttps://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode232\ndoc/articles/race_detector.html:232: func GetService(name string) net.Addr {\ns/Get/Lookup/\n\nhttps://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode267\ndoc/articles/race_detector.html:267: Even such \"innocent\" data races can lead to hard to debug problems caused by (1) non-atomicity of the memory accesses, (2) interference with compiler optimizations and (3) processor memory access reordering issues.\n&ldquo;innocent&rdquo;\n\nhttps://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode271\ndoc/articles/race_detector.html:271: To fix such data race one can use (aside from <code>chan</code> and <code>sync.Mutex</code>) package <a href=\"/pkg/sync/atomic\"><code>sync/atomic</code></a>, which provides atomic operations on primitive types.  <a href=\"/pkg/sync/atomic\"><code>sync/atomic</code></a> functions solve all of the above issues.\nA typical fix for this race is to use a channel or a mutex.\nTo preserve the lock-free behavior, one can also use the sync/atomic pcakage.\n\nhttps://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode294\ndoc/articles/race_detector.html:294: <h2>Supported Platforms</h2>\ns/Platforms/Systems/\n\nhttps://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode297\ndoc/articles/race_detector.html:297: Supported platforms are darwin/amd64, linux/amd64 and windows/amd64.\nThe race detector runs on darwin/amd64, linux/amd64, and windows/amd64.\n\nhttps://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode300\ndoc/articles/race_detector.html:300: <h2>Runtime Overheads</h2>\ns/Overheads/Overhead/\n\nhttps://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode303\ndoc/articles/race_detector.html:303: The data race detector significantly increases both memory consumption and execution time.  The concrete numbers are highly dependent on the particular program, but some reference numbers would be: memory consumption ~5-10x, execution time ~2-20x.\nThe cost of race detection varies by program, but for a typical program, memory usage may increase by 5-10x and execution time by 2-20x.",
			"disapproval": false,
			"date": "2012-12-17 01:10:41.715530",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"minux.ma@gmail.com",
				"franciscossouza@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "All done. Thanks!\n\nOn 2012/12/17 01:10:41, rsc wrote:\n> I tried to tighten much of the text. I am not 100% sure it belongs here. Maybe\n> it should be a package-level doc comment for runtime/race. Will leave that\n> decision for adg.\n> \n> https://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html\n> File doc/articles/race_detector.html (right):\n> \n> https://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode9\n> doc/articles/race_detector.html:9: Data races are one of the most common and\n> hardest to debug types of bugs in concurrent systems.  A data race occurs when\n> two goroutines access the same variable without proper synchronization and at\n> least one of the accesses is write.  See the <a href=\"/ref/mem\">The Go Memory\n> Model</a> for details.\n> s/without proper synchronization/concurrently/\n> \n> https://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode13\n> doc/articles/race_detector.html:13: Here is an example of a data race on map\n> variable that can lead to crashes and memory corruptions:\n> s/on map variable //\n> \n> https://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode35\n> doc/articles/race_detector.html:35: Fortunately, Go includes a built-in data\n> race detector.  The usage is very simple -- you just need to add -race flag to\n> the go command:\n> s/The usage.*/To use it, add the -race flag to the go command:\n> \n> https://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode48\n> doc/articles/race_detector.html:48: When the race detector finds a data race in\n> the program, it prints an informative report.  The report contains stack traces\n> for conflicting accesses, as well as stacks where the involved goroutines were\n> created.  You may see an example below:\n> s/an informative/a/\n> s/You may see an example below/For example/\n> \n> https://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode89\n> doc/articles/race_detector.html:89: You can pass some options to the race\n> detector by means of <code>GORACE</code> environment variable.  The format is:\n> The GORACE environment variable sets race detector options.\n> The format is:\n> \n> https://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode99\n> doc/articles/race_detector.html:99: <li> log_path: Tells race detector to write\n> reports to 'log_path.pid' file.  The special values are 'stdout' and 'stderr'. \n> The default is 'stderr'.</li>\n> log_path (default stderr): The race detector writes its report to a file named\n> log_path.pid. The special names stdout and stderr cause reports to be written to\n> standard output and standard error, respectively.\n> \n> https://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode100\n> doc/articles/race_detector.html:100: <li> exitcode: Override exit status of the\n> process if something was reported.  Default value is 66.</li>\n> exitcode (default 66): The exit status to use when exiting after a detected\n> race.\n> \n> https://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode101\n> doc/articles/race_detector.html:101: <li> strip_path_prefix: Allows to strip\n> beginnings of file paths in reports to make them more concise.</li>\n> strip_path_prefix (default \"\"): Strip this prefix from all reported file paths,\n> to make reports more concise.\n> \n> https://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode102\n> doc/articles/race_detector.html:102: <li> history_size: Per-goroutine history\n> size, controls how many previous memory accesses are remembered per goroutine. \n> Possible values are [0..7].  history_size=0 amounts to 32K memory accesses. \n> Each next value doubles the amount of memory accesses, up to history_size=7 that\n> amounts to 4M memory accesses.  The default value is 1 (64K memory accesses). \n> Try to increase this value when you see \"failed to restore the stack\" in\n> reports.  However, it can significantly increase memory consumption.</li>\n> history_size (default 1): The per-goroutine memory access history is 32K *\n> 2**history_size elements. Increasing this value can avoid a \"failed to restore\n> the stack\" error in reports, but at the cost of increased memory usage.\n> \n> https://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode115\n> doc/articles/race_detector.html:115: You may start with just running your tests\n> under the race detector (<code>go test -race</code>).  However sometimes tests\n> have limited coverage, especially with respect to concurrency.  The race\n> detector finds only races that actually happen in the execution, it can't find\n> races in code paths that were not executed.  So it may be beneficial to run the\n> whole program built with -race under a realistic workload, frequently it\n> discovers much more bugs than tests.\n> To start, run your tests using the race detector (go test -race).\n> The race detector only finds races that happen at runtime, so it can't find\n> races\n> in code paths that are not executed. If your tests have incomplete coverage,\n> you may find more races by running a binary built with -race under a realistic\n> workload.\n> \n> https://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode121\n> doc/articles/race_detector.html:121: Here are some examples of typical data\n> races.  All of them can be automatically detected with the race detector.\n> s/examples of //\n> s/automatically //\n> \n> https://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode141\n> doc/articles/race_detector.html:141: Closures capture variables by reference\n> rather than by value, so the reads of the <code>i</code> variable in the\n> goroutines race with <code>i</code> increment in the loop statement.  Such\n> program typically outputs 55555 instead of expected 01234.  The program can be\n> fixed by explicitly making a copy of the loop counter:\n> The variable i in the function literal is the same variable used by the loop, so\n> the read in the goroutine races with the loop increment. (This program typically\n> prints 55555, not 01234.) The program can be fixed by making a copy of the\n> variable:\n> \n> https://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode191\n> doc/articles/race_detector.html:191: The fix is simple, one just needs to\n> introduce new variables in the goroutines (note <code>:=</code>):\n> The fix is to introduce new ...\n> \n> https://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode203\n> doc/articles/race_detector.html:203: If the following code is called from\n> several goroutines, it leads to bad races on the <code>services</code> map.\n> Concurrent reads and writes of a map are not safe:\n> \n> https://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode213\n> doc/articles/race_detector.html:213: func GetService(name string) net.Addr {\n> s/Get/Lookup/\n> \n> https://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode219\n> doc/articles/race_detector.html:219: It can be fixed by protecting the accesses\n> with a mutex:\n> To make the code safe, protect the accesses with a mutex:\n> \n> https://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode232\n> doc/articles/race_detector.html:232: func GetService(name string) net.Addr {\n> s/Get/Lookup/\n> \n> https://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode267\n> doc/articles/race_detector.html:267: Even such \"innocent\" data races can lead to\n> hard to debug problems caused by (1) non-atomicity of the memory accesses, (2)\n> interference with compiler optimizations and (3) processor memory access\n> reordering issues.\n> &ldquo;innocent&rdquo;\n> \n> https://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode271\n> doc/articles/race_detector.html:271: To fix such data race one can use (aside\n> from <code>chan</code> and <code>sync.Mutex</code>) package <a\n> href=\"/pkg/sync/atomic\"><code>sync/atomic</code></a>, which provides atomic\n> operations on primitive types.  <a\n> href=\"/pkg/sync/atomic\"><code>sync/atomic</code></a> functions solve all of the\n> above issues.\n> A typical fix for this race is to use a channel or a mutex.\n> To preserve the lock-free behavior, one can also use the sync/atomic pcakage.\n> \n> https://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode294\n> doc/articles/race_detector.html:294: <h2>Supported Platforms</h2>\n> s/Platforms/Systems/\n> \n> https://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode297\n> doc/articles/race_detector.html:297: Supported platforms are darwin/amd64,\n> linux/amd64 and windows/amd64.\n> The race detector runs on darwin/amd64, linux/amd64, and windows/amd64.\n> \n> https://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode300\n> doc/articles/race_detector.html:300: <h2>Runtime Overheads</h2>\n> s/Overheads/Overhead/\n> \n> https://codereview.appspot.com/6948043/diff/6003/doc/articles/race_detector.html#newcode303\n> doc/articles/race_detector.html:303: The data race detector significantly\n> increases both memory consumption and execution time.  The concrete numbers are\n> highly dependent on the particular program, but some reference numbers would be:\n> memory consumption ~5-10x, execution time ~2-20x.\n> The cost of race detection varies by program, but for a typical program, memory\n> usage may increase by 5-10x and execution time by 2-20x.",
			"disapproval": false,
			"date": "2012-12-17 09:29:58.880490",
			"approval": false
		},
		{
			"sender": "adg@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It's already documented in the go tool docs, I believe.\r\n\r\n$ go help build\r\n...\r\n-race\r\n enable data race detection.\r\nCurrently supported only on linux/amd64,\r\n darwin/amd64 and windows/amd64.\r\n...\r\n\r\nI'd remove the word \"Currently\" ;-)\r\n\r\nOn 20 December 2012 21:25, <minux.ma@gmail.com> wrote:\r\n\r\n> two more suggestions:\r\n> 1. please document the race build tag\r\n> maybe we also need to document that in the go tool\r\n> docs (perhaps in a separate CL)\r\n> 2. please list the race detector feature to doc/go1.1.html\r\n> and link to this article.\r\n>\r\n> https://codereview.appspot.**com/6948043/<https://codereview.appspot.com/6948043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-12-20 20:24:06.680940",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"minux.ma@gmail.com",
				"franciscossouza@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/12/17 03:02:17, adg wrote:\n> https://codereview.appspot.com/6948043/diff/3/doc/articles/race_detector.html\n> File doc/articles/race_detector.html (right):\n> \n> https://codereview.appspot.com/6948043/diff/3/doc/articles/race_detector.html#newcode6\n> doc/articles/race_detector.html:6: <h2 id=\"Introduction\">Introduction</h2>\n> On 2012/12/13 19:29:50, minux wrote:\n> > if you don't need to quote a specific section of this article by URL\n> > (like tip.golang.org/doc/articles/race_detector.html#Introduction),\n> > i think you can just drop the id=\"xx\" part.\n> > \n> > it won't affect the toc.\n> \n> Nice to include good anchors, though. I'd leave it.\n\n\nAha! Here is what they do! Added them back.",
			"disapproval": false,
			"date": "2012-12-17 09:29:36.629290",
			"approval": false
		},
		{
			"sender": "franciscossouza@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"franciscossouza@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Some minor details.\n\nhttps://codereview.appspot.com/6948043/diff/4/doc/articles/race_detector.html\nFile doc/articles/race_detector.html (right):\n\nhttps://codereview.appspot.com/6948043/diff/4/doc/articles/race_detector.html#newcode9\ndoc/articles/race_detector.html:9: Data races are one of the most common and hardest to debug types of bugs in concurrent systems.  A data race occurs when two goroutines access the same variable w/o proper synchronization and at least one of the accesses is write.  See the <a href=\"/ref/mem\">The Go Memory Model</a> for details.\nIsn't \"without\" better than \"w/o\"?\n\nhttps://codereview.appspot.com/6948043/diff/4/doc/articles/race_detector.html#newcode35\ndoc/articles/race_detector.html:35: Fortunately, Go includes built-in data race detector.  The usage is very simple -- you just need to add -race flag to go command:\ns/includes built-in/includes a built-in/\n\ns/flag to go command/flag to the go command/\n\nhttps://codereview.appspot.com/6948043/diff/4/doc/articles/race_detector.html#newcode121\ndoc/articles/race_detector.html:121: Here are some example of typical data races.  All of them can be automatically detected with the race detector.\ns/example/examples/",
			"disapproval": false,
			"date": "2012-12-14 12:16:05.617400",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"minux.ma@gmail.com",
				"franciscossouza@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6948043/diff/3/doc/articles/race_detector.html\nFile doc/articles/race_detector.html (right):\n\nhttps://codereview.appspot.com/6948043/diff/3/doc/articles/race_detector.html#newcode6\ndoc/articles/race_detector.html:6: <h2 id=\"Introduction\">Introduction</h2>\nOn 2012/12/13 19:29:50, minux wrote:\n> if you don't need to quote a specific section of this article by URL\n> (like tip.golang.org/doc/articles/race_detector.html#Introduction),\n> i think you can just drop the id=\"xx\" part.\n> \n> it won't affect the toc.\n\nNice to include good anchors, though. I'd leave it.",
			"disapproval": false,
			"date": "2012-12-17 03:02:17.983400",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Instead of worrying about all the escaping, it might be better to split the\r\ncode samples out into Go files, and include them with the \"code\" template\r\nfunction. See the other articles for inspiration.\r\n\r\nOn 19 Dec 2012 17:42, <dvyukov@google.com> wrote:\r\n>\r\n> Done. PTAL.\r\n>\r\n>\r\n>\r\n>\r\nhttps://codereview.appspot.com/6948043/diff/14001/doc/articles/race_detector.html\r\n> File doc/articles/race_detector.html (right):\r\n>\r\n>\r\nhttps://codereview.appspot.com/6948043/diff/14001/doc/articles/race_detector.html#newcode99\r\n> doc/articles/race_detector.html:99: <li>log_path (default stderr): The\r\n> race detector writes its report to a file named\r\n> On 2012/12/19 02:57:26, adg wrote:\r\n>>\r\n>> <code>log_path</code>\r\n>> <code>stderr</code>\r\n>> etc\r\n>\r\n>\r\n> Please check that I correctly guessed etc\r\n>\r\n>\r\nhttps://codereview.appspot.com/6948043/diff/17001/doc/articles/race_detector.html\r\n> File doc/articles/race_detector.html (right):\r\n>\r\n>\r\nhttps://codereview.appspot.com/6948043/diff/17001/doc/articles/race_detector.html#newcode126\r\n> doc/articles/race_detector.html:126: you may find more races by running\r\n> a binary built with <code>-race</code> under a realistic\r\n> Added <code> here as well\r\n>\r\n>\r\nhttps://codereview.appspot.com/6948043/diff/17001/doc/articles/race_detector.html#newcode297\r\n> doc/articles/race_detector.html:297: atomic.StoreInt64(&amp;w.last,\r\n> time.Now().UnixNano())\r\n> Replaced & with &amp;\r\n>\r\n>\r\nhttps://codereview.appspot.com/6948043/diff/17001/doc/articles/race_detector.html#newcode304\r\n> doc/articles/race_detector.html:304: if atomic.LoadInt64(&amp;w.last) <\r\n> time.Now().Add(-10*time.Second).UnixNano() {\r\n> Replaced & with &amp;\r\n>\r\n> https://codereview.appspot.com/6948043/\r\n",
			"disapproval": false,
			"date": "2012-12-19 07:21:43.482850",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"minux.ma@gmail.com",
				"franciscossouza@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6948043/diff/14001/doc/articles/race_detector.html\nFile doc/articles/race_detector.html (right):\n\nhttps://codereview.appspot.com/6948043/diff/14001/doc/articles/race_detector.html#newcode9\ndoc/articles/race_detector.html:9: Data races are one of the most common and hardest to debug types of bugs in concurrent systems.  A data race occurs when two goroutines access the same variable concurrently and at least one of the accesses is write.  See the <a href=\"/ref/mem\">The Go Memory Model</a> for details.\ns/write/a write/\n\nhttps://codereview.appspot.com/6948043/diff/14001/doc/articles/race_detector.html#newcode13\ndoc/articles/race_detector.html:13: Here is an example of a data race that can lead to crashes and memory corruptions:\ns/corruptions/corruption/\n\nhttps://codereview.appspot.com/6948043/diff/14001/doc/articles/race_detector.html#newcode35\ndoc/articles/race_detector.html:35: Fortunately, Go includes a built-in data race detector.  To use it, add the -race flag to the go command:\n<code>-race</code>\n\nhttps://codereview.appspot.com/6948043/diff/14001/doc/articles/race_detector.html#newcode39\ndoc/articles/race_detector.html:39: $ go test -race mypkg // to test the package\nalign these comments\n\nhttps://codereview.appspot.com/6948043/diff/14001/doc/articles/race_detector.html#newcode89\ndoc/articles/race_detector.html:89: The GORACE environment variable sets race detector options.  The format is:\n<code>GORACE</code>\n\nhttps://codereview.appspot.com/6948043/diff/14001/doc/articles/race_detector.html#newcode99\ndoc/articles/race_detector.html:99: <li>log_path (default stderr): The race detector writes its report to a file named\n<code>log_path</code>\n<code>stderr</code>\netc\n\nhttps://codereview.appspot.com/6948043/diff/14001/doc/articles/race_detector.html#newcode221\ndoc/articles/race_detector.html:221: var services map[string]net.Addr\ns/services/service/\n\nhttps://codereview.appspot.com/6948043/diff/14001/doc/articles/race_detector.html#newcode238\ndoc/articles/race_detector.html:238: var mu sync.Mutex\nvar (\n  service map[string]net.Addr\n  serviceMu sync.Mutex\n)\n\nhttps://codereview.appspot.com/6948043/diff/14001/doc/articles/race_detector.html#newcode312\ndoc/articles/race_detector.html:312: The race detector runs on darwin/amd64, linux/amd64, and windows/amd64.\n<code> around os/arch",
			"disapproval": false,
			"date": "2012-12-19 02:57:26.441720",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"minux.ma@gmail.com",
				"franciscossouza@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"adg@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "two more suggestions:\n1. please document the race build tag \nmaybe we also need to document that in the go tool\ndocs (perhaps in a separate CL)\n2. please list the race detector feature to doc/go1.1.html\nand link to this article.",
			"disapproval": false,
			"date": "2012-12-20 10:25:44.012920",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"minux.ma@gmail.com",
				"franciscossouza@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Done. PTAL.\n\nhttps://codereview.appspot.com/6948043/diff/14001/doc/articles/race_detector.html\nFile doc/articles/race_detector.html (right):\n\nhttps://codereview.appspot.com/6948043/diff/14001/doc/articles/race_detector.html#newcode99\ndoc/articles/race_detector.html:99: <li>log_path (default stderr): The race detector writes its report to a file named\nOn 2012/12/19 02:57:26, adg wrote:\n> <code>log_path</code>\n> <code>stderr</code>\n> etc\n\nPlease check that I correctly guessed etc\n\nhttps://codereview.appspot.com/6948043/diff/17001/doc/articles/race_detector.html\nFile doc/articles/race_detector.html (right):\n\nhttps://codereview.appspot.com/6948043/diff/17001/doc/articles/race_detector.html#newcode126\ndoc/articles/race_detector.html:126: you may find more races by running a binary built with <code>-race</code> under a realistic\nAdded <code> here as well\n\nhttps://codereview.appspot.com/6948043/diff/17001/doc/articles/race_detector.html#newcode297\ndoc/articles/race_detector.html:297: atomic.StoreInt64(&amp;w.last, time.Now().UnixNano())\nReplaced & with &amp;\n\nhttps://codereview.appspot.com/6948043/diff/17001/doc/articles/race_detector.html#newcode304\ndoc/articles/race_detector.html:304: if atomic.LoadInt64(&amp;w.last) < time.Now().Add(-10*time.Second).UnixNano() {\nReplaced & with &amp;",
			"disapproval": false,
			"date": "2012-12-19 06:42:31.968220",
			"approval": false
		},
		{
			"sender": "adg@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "You don't have to do it but it might end up nicer. :-)\r\nOn 19 Dec 2012 18:21, \"Andrew Gerrand\" <adg@golang.org> wrote:\r\n\r\n> Instead of worrying about all the escaping, it might be better to split\r\n> the code samples out into Go files, and include them with the \"code\"\r\n> template function. See the other articles for inspiration.\r\n>\r\n> On 19 Dec 2012 17:42, <dvyukov@google.com> wrote:\r\n> >\r\n> > Done. PTAL.\r\n> >\r\n> >\r\n> >\r\n> >\r\n> https://codereview.appspot.com/6948043/diff/14001/doc/articles/race_detector.html\r\n> > File doc/articles/race_detector.html (right):\r\n> >\r\n> >\r\n> https://codereview.appspot.com/6948043/diff/14001/doc/articles/race_detector.html#newcode99\r\n> > doc/articles/race_detector.html:99: <li>log_path (default stderr): The\r\n> > race detector writes its report to a file named\r\n> > On 2012/12/19 02:57:26, adg wrote:\r\n> >>\r\n> >> <code>log_path</code>\r\n> >> <code>stderr</code>\r\n> >> etc\r\n> >\r\n> >\r\n> > Please check that I correctly guessed etc\r\n> >\r\n> >\r\n> https://codereview.appspot.com/6948043/diff/17001/doc/articles/race_detector.html\r\n> > File doc/articles/race_detector.html (right):\r\n> >\r\n> >\r\n> https://codereview.appspot.com/6948043/diff/17001/doc/articles/race_detector.html#newcode126\r\n> > doc/articles/race_detector.html:126: you may find more races by running\r\n> > a binary built with <code>-race</code> under a realistic\r\n> > Added <code> here as well\r\n> >\r\n> >\r\n> https://codereview.appspot.com/6948043/diff/17001/doc/articles/race_detector.html#newcode297\r\n> > doc/articles/race_detector.html:297: atomic.StoreInt64(&amp;w.last,\r\n> > time.Now().UnixNano())\r\n> > Replaced & with &amp;\r\n> >\r\n> >\r\n> https://codereview.appspot.com/6948043/diff/17001/doc/articles/race_detector.html#newcode304\r\n> > doc/articles/race_detector.html:304: if atomic.LoadInt64(&amp;w.last) <\r\n> > time.Now().Add(-10*time.Second).UnixNano() {\r\n> > Replaced & with &amp;\r\n> >\r\n> > https://codereview.appspot.com/6948043/\r\n>\r\n",
			"disapproval": false,
			"date": "2012-12-19 07:22:04.899750",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Friday, December 21, 2012, Andrew Gerrand wrote:\r\n\r\n> It's already documented in the go tool docs, I believe.\r\n>\r\n> $ go help build\r\n> ...\r\n> -race\r\n>  enable data race detection.\r\n> Currently supported only on linux/amd64,\r\n>  darwin/amd64 and windows/amd64.\r\n> ...\r\n>\r\nmaybe my original wording is confusing, i refer to the ability to say this:\r\n// +build !race\r\n>\r\n>\r\n> I'd remove the word \"Currently\" ;-)\r\n>\r\n> On 20 December 2012 21:25, <minux.ma@gmail.com <javascript:_e({}, 'cvml',\r\n> 'minux.ma@gmail.com');>> wrote:\r\n>\r\n>> two more suggestions:\r\n>> 1. please document the race build tag\r\n>> maybe we also need to document that in the go tool\r\n>> docs (perhaps in a separate CL)\r\n>> 2. please list the race detector feature to doc/go1.1.html\r\n>> and link to this article.\r\n>>\r\n>> https://codereview.appspot.**com/6948043/<https://codereview.appspot.com/6948043/>\r\n>>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-12-20 20:51:22.763110",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"minux.ma@gmail.com",
				"franciscossouza@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"adg@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/12/20 20:24:06, adg1 wrote:\n> It's already documented in the go tool docs, I believe.\n> \n> $ go help build\n> ...\n> -race\n>  enable data race detection.\n> Currently supported only on linux/amd64,\n>  darwin/amd64 and windows/amd64.\n> ...\n> \n> I'd remove the word \"Currently\" ;-)\n\n\nDone in a separate CL:\nhttps://codereview.appspot.com/7006043",
			"disapproval": false,
			"date": "2012-12-21 08:48:45.777980",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"minux.ma@gmail.com",
				"franciscossouza@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"adg@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/12/19 07:22:04, adg1 wrote:\n> You don't have to do it but it might end up nicer. :-)\n> On 19 Dec 2012 18:21, \"Andrew Gerrand\" <mailto:adg@golang.org> wrote:\n> \n> > Instead of worrying about all the escaping, it might be better to split\n> > the code samples out into Go files, and include them with the \"code\"\n> > template function. See the other articles for inspiration.\n\nIf you do not feel very strongly about it, I would prefer to commit the first version as-is. Later we can improve it... if needed.",
			"disapproval": false,
			"date": "2012-12-21 08:52:44.516650",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"minux.ma@gmail.com",
				"franciscossouza@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"adg@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/6948043/diff/32001/doc/articles/race_detector.html\nFile doc/articles/race_detector.html (right):\n\nhttps://codereview.appspot.com/6948043/diff/32001/doc/articles/race_detector.html#newcode129\ndoc/articles/race_detector.html:129: // +build !race\nOn 2012/12/21 18:26:14, minux wrote:\n> leave a blank line here or the build tag won't be effective.\n\nDone.",
			"disapproval": false,
			"date": "2012-12-24 08:34:42.950140",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"minux.ma@gmail.com",
				"franciscossouza@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"adg@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nI've mentioned race build tag and how it can be used.\n\nRenamed title \"Race Detector\" -> \"Data Race Detector\".\n\nAdded note to go1.1.html.",
			"disapproval": false,
			"date": "2012-12-21 09:21:07.017150",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"minux.ma@gmail.com",
				"franciscossouza@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"adg@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6948043/diff/32001/doc/articles/race_detector.html\nFile doc/articles/race_detector.html (right):\n\nhttps://codereview.appspot.com/6948043/diff/32001/doc/articles/race_detector.html#newcode129\ndoc/articles/race_detector.html:129: // +build !race\nleave a blank line here or the build tag won't be effective.",
			"disapproval": false,
			"date": "2012-12-21 18:26:13.818330",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"minux.ma@gmail.com",
				"franciscossouza@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"adg@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-01-02 04:22:00.316250",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"minux.ma@gmail.com",
				"franciscossouza@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"adg@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=f03e22ca5fea ***\n\ndoc: add race detector manual\n\nR=minux.ma, franciscossouza, rsc, adg, adg\nCC=golang-dev\nhttps://codereview.appspot.com/6948043",
			"disapproval": false,
			"date": "2013-01-02 12:47:14.416860",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 6948043: doc: add race detector manual",
	"created": "2012-12-13 13:59:00.745730",
	"patchsets": [
		1,
		2001,
		5001,
		3,
		10001,
		4,
		6003,
		9004,
		1008,
		14001,
		17001,
		27001,
		32001,
		26002,
		38001
	],
	"modified": "2013-01-03 15:03:51.262430",
	"closed": true,
	"issue": 6948043
}