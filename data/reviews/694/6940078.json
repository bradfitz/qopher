{
	"description": "go/token: add test for concurrent use of FileSet.Pos\n\nUpdate issue 4354.\n\nAdd a test to expose the race in the FileSet position cache.",
	"cc": [
		"dvyukov@google.com",
		"gri@golang.org",
		"fullung@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dave@cheney.net",
				"dvyukov@google.com",
				"gri@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "leaving the rest for gri",
			"disapproval": false,
			"date": "2012-12-18 10:43:46.399810",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Is it required?\r\n> Race detector does not need GOMAXPROCS to find races. It can also be\r\n> executed on a machine with 1 core.\r\n\r\nThe race detector does not report this version races unless GOMAXPROCS > 1\r\n\r\nfunc TestFileSetRace(t *testing.T) {\r\n        fset := NewFileSet()\r\n        for i := 0; i < 100; i++ {\r\n                fset.AddFile(fmt.Sprintf(\"file-%d\", i), fset.Base(), 1031)\r\n        }\r\n        max := int32(fset.Base())\r\n        var wg sync.WaitGroup\r\n        for i := 0; i < 16; i++ {\r\n                wg.Add(1)\r\n                go func() {\r\n                        defer wg.Done()\r\n                        for i := 0 ; i < 10000 ; i++ {\r\n                                p := Pos(rand.Int31n(max))\r\n                                fset.Position(p)\r\n                        }\r\n                }()\r\n        }\r\n        wg.Wait()\r\n}\r\n",
			"disapproval": false,
			"date": "2012-12-18 11:12:02.194670",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"dvyukov@google.com",
				"gri@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dvyukov@google.com, gri@golang.org (cc: fullung@gmail.com, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-18 22:05:06.052170",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"dvyukov@google.com",
				"gri@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Dmitry, Robert, please take another look. I have removed the blocking on the shared math.Rand and the race detector no longer needs GOMAXPROCS > 1 to fire.\n\nDmitry: there is one issue\n\n==================\nWARNING: DATA RACE\nRead by goroutine 8:\n  go/token.(*FileSet).file()\n      /home/dfc/go/src/pkg/go/token/position.go:371 +0x38\n  go/token.(*FileSet).Position()\n      /home/dfc/go/src/pkg/go/token/position.go:403 +0x70\n  go/token.func\u00b7004()\n      /home/dfc/go/src/pkg/go/token/position_test.go:201 +0xbd\n\nPrevious write by goroutine 7:\n  [failed to restore the stack]\n\nGoroutine 8 (running) created at:\n  go/token.TestFileSetRace()\n      /home/dfc/go/src/pkg/go/token/position_test.go:203 +0x46e\n  testing.tRunner()\n      /home/dfc/go/src/pkg/testing/testing.go:302 +0xe8\n\nGoroutine 7 (finished) created at:\n  go/token.TestFileSetRace()\n      /home/dfc/go/src/pkg/go/token/position_test.go:203 +0x46e\n  testing.tRunner()\n      /home/dfc/go/src/pkg/testing/testing.go:302 +0xe8\n\n==================\n\nNote the missing stack trace in the 2nd goroutine.",
			"disapproval": false,
			"date": "2012-12-18 22:03:55.267350",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"dvyukov@google.com",
				"gri@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dvyukov@google.com, gri@golang.org (cc: fullung@gmail.com, golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-12-18 10:27:56.266300",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dave@cheney.net",
				"dvyukov@google.com",
				"gri@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6940078/diff/1003/src/pkg/go/token/position_test.go\nFile src/pkg/go/token/position_test.go (right):\n\nhttps://codereview.appspot.com/6940078/diff/1003/src/pkg/go/token/position_test.go#newcode189\nsrc/pkg/go/token/position_test.go:189: defer runtime.GOMAXPROCS(runtime.GOMAXPROCS(runtime.NumCPU()))\nIs it required?\nRace detector does not need GOMAXPROCS to find races. It can also be executed on a machine with 1 core.",
			"disapproval": false,
			"date": "2012-12-18 10:43:24.033050",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"dvyukov@google.com",
				"gri@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dvyukov@google.com, gri@golang.org (cc: fullung@gmail.com, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-18 22:11:27.194990",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Humm... I think it's possible. First, the goroutines may run till\r\ncompletion w/o blocking calls, and the second is that I suspect\r\nrand.Int31n() contains internal mutex and so synchronizes goroutines.\r\n\r\nPerhaps set GOMAXPROCS to 4 then.\r\n\r\n\r\n\r\n\r\nOn Tue, Dec 18, 2012 at 3:12 PM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> > Is it required?\r\n> > Race detector does not need GOMAXPROCS to find races. It can also be\r\n> > executed on a machine with 1 core.\r\n>\r\n> The race detector does not report this version races unless GOMAXPROCS > 1\r\n>\r\n> func TestFileSetRace(t *testing.T) {\r\n>         fset := NewFileSet()\r\n>         for i := 0; i < 100; i++ {\r\n>                 fset.AddFile(fmt.Sprintf(\"file-%d\", i), fset.Base(), 1031)\r\n>         }\r\n>         max := int32(fset.Base())\r\n>         var wg sync.WaitGroup\r\n>         for i := 0; i < 16; i++ {\r\n>                 wg.Add(1)\r\n>                 go func() {\r\n>                         defer wg.Done()\r\n>                         for i := 0 ; i < 10000 ; i++ {\r\n>                                 p := Pos(rand.Int31n(max))\r\n>                                 fset.Position(p)\r\n>                         }\r\n>                 }()\r\n>         }\r\n>         wg.Wait()\r\n> }\r\n>\r\n",
			"disapproval": false,
			"date": "2012-12-18 11:17:47.452590",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"dave@cheney.net",
				"dvyukov@google.com",
				"gri@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "some minor comments\n\notherwise looks great; just what I was waiting for\n\nhttps://codereview.appspot.com/6940078/diff/1003/src/pkg/go/token/position_test.go\nFile src/pkg/go/token/position_test.go (right):\n\nhttps://codereview.appspot.com/6940078/diff/1003/src/pkg/go/token/position_test.go#newcode196\nsrc/pkg/go/token/position_test.go:196: for i := 0; i < runtime.GOMAXPROCS(0)*2; i++ {\nmaybe count down? (no need to call GOMAXPROCS repeatedly).\n\nfor i := runtime.GOMAXPROCS(0)*2; i > 0; i--\n\nhttps://codereview.appspot.com/6940078/diff/1003/src/pkg/go/token/position_test.go#newcode204\nsrc/pkg/go/token/position_test.go:204: fset.Position(p)\nfset.Position(Pos(rand.Int31n(max)))\n\nhttps://codereview.appspot.com/6940078/diff/1003/src/pkg/go/token/position_test.go#newcode209\nsrc/pkg/go/token/position_test.go:209: <-time.After(200 * time.Millisecond)\ntime.Sleep(200 * time.Millisecond)",
			"disapproval": false,
			"date": "2012-12-18 18:10:29.267610",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"dave@cheney.net",
				"dvyukov@google.com",
				"gri@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI\n\nhttps://codereview.appspot.com/6940078/diff/14001/src/pkg/go/token/position_test.go\nFile src/pkg/go/token/position_test.go (right):\n\nhttps://codereview.appspot.com/6940078/diff/14001/src/pkg/go/token/position_test.go#newcode199\nsrc/pkg/go/token/position_test.go:199: defer stop.Done()\njust call stop.Done() at the end - defer seems overkill\n\nhttps://codereview.appspot.com/6940078/diff/14001/src/pkg/go/token/position_test.go#newcode205\nsrc/pkg/go/token/position_test.go:205: stop.Wait()\nif the race shows up very quickly, just use time.Sleep() here (with a short time) and then this test's runt-time is independent of machine. And then you don't need the WaitGroup and the inner loop can just be endless. Even less code overall.",
			"disapproval": false,
			"date": "2012-12-18 22:55:00.040390",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"dave@cheney.net",
				"dvyukov@google.com",
				"gri@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=e7cd0a82d669 ***\n\ngo/token: add test for concurrent use of FileSet.Pos\n\nUpdate issue 4354.\n\nAdd a test to expose the race in the FileSet position cache.\n\nR=dvyukov, gri\nCC=fullung, golang-dev\nhttps://codereview.appspot.com/6940078\n\nCommitter: Robert Griesemer <gri@golang.org>",
			"disapproval": false,
			"date": "2012-12-19 00:38:07.086560",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"dvyukov@google.com",
				"gri@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for your comments.\n\nhttps://codereview.appspot.com/6940078/diff/14001/src/pkg/go/token/position_test.go\nFile src/pkg/go/token/position_test.go (right):\n\nhttps://codereview.appspot.com/6940078/diff/14001/src/pkg/go/token/position_test.go#newcode199\nsrc/pkg/go/token/position_test.go:199: defer stop.Done()\nOn 2012/12/18 22:55:00, gri wrote:\n> just call stop.Done() at the end - defer seems overkill\n\nDone.\n\nhttps://codereview.appspot.com/6940078/diff/14001/src/pkg/go/token/position_test.go#newcode205\nsrc/pkg/go/token/position_test.go:205: stop.Wait()\nOn 2012/12/18 22:55:00, gri wrote:\n> if the race shows up very quickly, just use time.Sleep() here (with a short\n> time) and then this test's runt-time is independent of machine. And then you\n> don't need the WaitGroup and the inner loop can just be endless. Even less code\n> overall.\n\nI'm concerned about leaving these goroutines running after the Test is finished. I've reduced the loop count to 1000 which is sufficient for triggering the race. The run time on the slowest arm host that I have for go test go/token is 300ms, much less than the time it takes to compile and link the test binary.",
			"disapproval": false,
			"date": "2012-12-19 00:10:28.960940",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"dave@cheney.net",
				"dvyukov@google.com",
				"gri@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. Thanks.",
			"disapproval": false,
			"date": "2012-12-19 00:22:12.374150",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Dec 19, 2012 at 2:03 AM, <dave@cheney.net> wrote:\r\n\r\n> Dmitry, Robert, please take another look. I have removed the blocking on\r\n> the shared math.Rand and the race detector no longer needs GOMAXPROCS >\r\n> 1 to fire.\r\n>\r\n> Dmitry: there is one issue\r\n>\r\n> ==================\r\n> WARNING: DATA RACE\r\n> Read by goroutine 8:\r\n>   go/token.(*FileSet).file()\r\n>       /home/dfc/go/src/pkg/go/token/**position.go:371 +0x38\r\n>   go/token.(*FileSet).Position()\r\n>       /home/dfc/go/src/pkg/go/token/**position.go:403 +0x70\r\n>   go/token.func\u00b7004()\r\n>       /home/dfc/go/src/pkg/go/token/**position_test.go:201 +0xbd\r\n>\r\n> Previous write by goroutine 7:\r\n>   [failed to restore the stack]\r\n>\r\n> Goroutine 8 (running) created at:\r\n>   go/token.TestFileSetRace()\r\n>       /home/dfc/go/src/pkg/go/token/**position_test.go:203 +0x46e\r\n>   testing.tRunner()\r\n>       /home/dfc/go/src/pkg/testing/**testing.go:302 +0xe8\r\n>\r\n> Goroutine 7 (finished) created at:\r\n>   go/token.TestFileSetRace()\r\n>       /home/dfc/go/src/pkg/go/token/**position_test.go:203 +0x46e\r\n>   testing.tRunner()\r\n>       /home/dfc/go/src/pkg/testing/**testing.go:302 +0xe8\r\n>\r\n> ==================\r\n>\r\n> Note the missing stack trace in the 2nd goroutine.\r\n\r\n\r\nLet's see whether documentation is usable :)\r\n\r\nhttp://code.google.com/p/go-wiki/wiki/RaceDetector\r\n",
			"disapproval": false,
			"date": "2012-12-19 06:24:07.189050",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 6940078: go/token: add test for concurrent use of FileSet.Pos",
	"created": "2012-12-18 10:25:50.437310",
	"patchsets": [
		1,
		1002,
		1003,
		10001,
		4003,
		14001,
		17001
	],
	"modified": "2012-12-19 09:55:53.854190",
	"closed": true,
	"issue": 6940078
}