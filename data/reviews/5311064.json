{
	"description": "goinstall: Add support for bitbucket git repositories\r\n\r\nBitbucket now provides git hosting in addition to mercurial.  URLs for\r\ngit repositories are of the form https://bitbucket.org/user/project.git,\r\nwhich means that they will match the mercurial regex.  However, since we\r\ncheck for git before mercurial that check will never happen.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"dchest@gmail.com",
		"rsc@golang.org",
		"adg@golang.org"
	],
	"messages": [
		{
			"sender": "julian@quantumfyre.co.uk",
			"recipients": [
				"julian@quantumfyre.co.uk",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-26 18:27:08.185150",
			"approval": false
		},
		{
			"sender": "julian@quantumfyre.co.uk",
			"recipients": [
				"julian@quantumfyre.co.uk",
				"golang-dev@googlegroups.com",
				"dchest@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dchest@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-26 19:12:12.182813",
			"approval": false
		},
		{
			"sender": "dchest@gmail.com",
			"recipients": [
				"julian@quantumfyre.co.uk",
				"golang-dev@googlegroups.com",
				"dchest@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Probably there should be a comment somewhere explaining that git should come before hg in the list of vcs.",
			"disapproval": false,
			"date": "2011-10-26 19:07:48.050400",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I am not sure.  Maybe we should, for bitbucket, figure out\nwhether a project is Git or Mercurial and then not need the\nsuffix.  I expect to need to do this for Google Code eventually\ntoo with the new URL format.\n\nIs there a simple way to ping Bitbucket to ask \"is this project\nMercurial or Git\"?\n\nRuss\n",
			"disapproval": false,
			"date": "2011-10-26 19:19:52.443564",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "bitbucket has an API that we can query, eg:\n\n$ curl https://api.bitbucket.org/1.0/repositories/0x0000/icarus\n{\n    \"website\": \"\",\n    \"scm\": \"hg\",\n    \"name\": \"Icarus\",\n    \"followers_count\": 6,\n    \"owner\": \"0x0000\",\n    \"logo\": null,\n    \"resource_uri\": \"/api/1.0/repositories/0x0000/icarus\",\n    \"slug\": \"icarus\",\n    \"description\": \"Use a android (g1) phone for flight telemetry recorder.\"\n}\n\nWe could hit that and pull the 'scm' field out of the response.\n\nOn 27 October 2011 04:19, Russ Cox <rsc@golang.org> wrote:\n> I am not sure. \u00a0Maybe we should, for bitbucket, figure out\n> whether a project is Git or Mercurial and then not need the\n> suffix. \u00a0I expect to need to do this for Google Code eventually\n> too with the new URL format.\n>\n> Is there a simple way to ping Bitbucket to ask \"is this project\n> Mercurial or Git\"?\n>\n> Russ\n>\n",
			"disapproval": false,
			"date": "2011-10-26 19:25:49.844928",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 27 October 2011 04:45, Julian Phillips <julian@quantumfyre.co.uk> wrote:\n> On Thu, 27 Oct 2011 04:25:17 +0900, Andrew Gerrand wrote:\n>>\n>> bitbucket has an API that we can query, eg:\n>>\n>> $ curl https://api.bitbucket.org/1.0/repositories/0x0000/icarus\n>> {\n>> \u00a0 \u00a0\"website\": \"\",\n>> \u00a0 \u00a0\"scm\": \"hg\",\n>> \u00a0 \u00a0\"name\": \"Icarus\",\n>> \u00a0 \u00a0\"followers_count\": 6,\n>> \u00a0 \u00a0\"owner\": \"0x0000\",\n>> \u00a0 \u00a0\"logo\": null,\n>> \u00a0 \u00a0\"resource_uri\": \"/api/1.0/repositories/0x0000/icarus\",\n>> \u00a0 \u00a0\"slug\": \"icarus\",\n>> \u00a0 \u00a0\"description\": \"Use a android (g1) phone for flight telemetry\n>> recorder.\"\n>> }\n>>\n>> We could hit that and pull the 'scm' field out of the response.\n>\n> Sounds useful.\n>\n> So, how about changing download so that it iterates through a list of regex,\n> func (pkg string) (*vcsMatch, os.Error) pairs - for the first regex that\n> matches the pkg string call the function.\n>\n> github and launchpad would have fairly trivial functions, and we could parse\n> the pkg string for the current Google Code format. \u00a0The bitbucket function\n> could query that handy API.\n>\n> If we add public to vcsMatch, then findAnyRepo could simply go in as the\n> last entry with a \".*\" regex?\n\nI think it's time to rethink the way the vcs global vars work.\n\nWe're now dealing with two types of thing that have a many-to-many\nrelationship. There should be a list of VCS tools and a list of\nsupported code hosts, with each host referring to its supported vcs,\nand not the other way around.\n\nDrop the defaultHosts field from each vcs variable, and add new global\nvariables:\n\nvar googlecode = &host{...}\n// etc\n\nvar hosts []*host{googlecode, github, bitbucket, ...}\n\nThe host struct could become:\n\ntype host struct {\n\tpattern  *regexp.Regexp\n\tprotocol string\n\tsuffix   string\n\tvcs      *vcs\n\tvcsFunc  func(path string) *vcs\n}\n\nOne of vcs or vcsFunc should be nil. If vcs is non-nil, findPublicRepo\nreturns that vcs in the vcsMatch . If vcsFunc is non-nil,\nfindPublicRepo calls that function with the package path to determine\nwhich vcs to choose.\n\nHow does that sound?\n\nAndrew\n",
			"disapproval": false,
			"date": "2011-10-27 02:20:22.293804",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Ah, I just saw your other CL. Stand by.\n\nOn 27 October 2011 11:19, Andrew Gerrand <adg@golang.org> wrote:\n> On 27 October 2011 04:45, Julian Phillips <julian@quantumfyre.co.uk> wrote:\n>> On Thu, 27 Oct 2011 04:25:17 +0900, Andrew Gerrand wrote:\n>>>\n>>> bitbucket has an API that we can query, eg:\n>>>\n>>> $ curl https://api.bitbucket.org/1.0/repositories/0x0000/icarus\n>>> {\n>>> \u00a0 \u00a0\"website\": \"\",\n>>> \u00a0 \u00a0\"scm\": \"hg\",\n>>> \u00a0 \u00a0\"name\": \"Icarus\",\n>>> \u00a0 \u00a0\"followers_count\": 6,\n>>> \u00a0 \u00a0\"owner\": \"0x0000\",\n>>> \u00a0 \u00a0\"logo\": null,\n>>> \u00a0 \u00a0\"resource_uri\": \"/api/1.0/repositories/0x0000/icarus\",\n>>> \u00a0 \u00a0\"slug\": \"icarus\",\n>>> \u00a0 \u00a0\"description\": \"Use a android (g1) phone for flight telemetry\n>>> recorder.\"\n>>> }\n>>>\n>>> We could hit that and pull the 'scm' field out of the response.\n>>\n>> Sounds useful.\n>>\n>> So, how about changing download so that it iterates through a list of regex,\n>> func (pkg string) (*vcsMatch, os.Error) pairs - for the first regex that\n>> matches the pkg string call the function.\n>>\n>> github and launchpad would have fairly trivial functions, and we could parse\n>> the pkg string for the current Google Code format. \u00a0The bitbucket function\n>> could query that handy API.\n>>\n>> If we add public to vcsMatch, then findAnyRepo could simply go in as the\n>> last entry with a \".*\" regex?\n>\n> I think it's time to rethink the way the vcs global vars work.\n>\n> We're now dealing with two types of thing that have a many-to-many\n> relationship. There should be a list of VCS tools and a list of\n> supported code hosts, with each host referring to its supported vcs,\n> and not the other way around.\n>\n> Drop the defaultHosts field from each vcs variable, and add new global\n> variables:\n>\n> var googlecode = &host{...}\n> // etc\n>\n> var hosts []*host{googlecode, github, bitbucket, ...}\n>\n> The host struct could become:\n>\n> type host struct {\n> \u00a0 \u00a0 \u00a0 \u00a0pattern \u00a0*regexp.Regexp\n> \u00a0 \u00a0 \u00a0 \u00a0protocol string\n> \u00a0 \u00a0 \u00a0 \u00a0suffix \u00a0 string\n> \u00a0 \u00a0 \u00a0 \u00a0vcs \u00a0 \u00a0 \u00a0*vcs\n> \u00a0 \u00a0 \u00a0 \u00a0vcsFunc \u00a0func(path string) *vcs\n> }\n>\n> One of vcs or vcsFunc should be nil. If vcs is non-nil, findPublicRepo\n> returns that vcs in the vcsMatch . If vcsFunc is non-nil,\n> findPublicRepo calls that function with the package path to determine\n> which vcs to choose.\n>\n> How does that sound?\n>\n> Andrew\n>\n",
			"disapproval": false,
			"date": "2011-10-27 02:49:55.657561",
			"approval": false
		}
	],
	"owner_email": "julian@quantumfyre.co.uk",
	"private": false,
	"base_url": "",
	"owner": "quantumfyre",
	"subject": "code review 5311064: goinstall: Add support for bitbucket git repositories",
	"created": "2011-10-26 18:18:56.416652",
	"patchsets": [
		1,
		2001,
		4001,
		6001,
		9001
	],
	"modified": "2011-10-27 12:36:56.833404",
	"closed": true,
	"issue": 5311064
}