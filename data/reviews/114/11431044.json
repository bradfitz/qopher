{
	"description": "go.tools/go/types: Provide PkgInfo instead of callbacks.\n\nAllmost all uses of go/types that wanted the type\ninformation computed, installed callback functions\nthat stored the information in maps. Most of the\ntime this is the only thing that can be done because\nthere is no guarantee that types are completely set\nup before the end of type checking.\n\nThis CL removes the respective Context callbacks in favor\nor corresponding maps that collect the desired information\non demand, grouped together in a PkgInfo struct. This struct\nalso serves as container for the package specification (package\npath, file set, and files), and the resulting package, and\nerror, if any.\n\nAlso: Provide access to the function decl. for Func objects.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"adonovan@google.com",
		"dominik.honnef@gmail.com"
	],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.tools",
			"disapproval": false,
			"date": "2013-07-17 22:40:33.792180",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-07-17 23:06:32.003050",
			"approval": false
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11431044/diff/26001/go/types/api.go\nFile go/types/api.go (right):\n\nhttps://codereview.appspot.com/11431044/diff/26001/go/types/api.go#newcode36\ngo/types/api.go:36: func Check(path string, fset *token.FileSet, files ...*ast.File) (*Package, error) {\nIs there a real benefit to having different signatures for Check() and Context.Check(), or would a uniform API outweigh not having to learn about PkgInfo?\n\nIt would seem to me that using go/types without the need for an explicit Context is more common than before now, so maybe using PkgInfo to tweak parameters should be available without having to create a Context?\n\nhttps://codereview.appspot.com/11431044/diff/26001/go/types/api.go#newcode138\ngo/types/api.go:138: // NewPkgInfo is convenience function to create a new PkgInfo\nis *a* convenience function",
			"disapproval": false,
			"date": "2013-07-17 23:58:09.675190",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/11431044/diff/26001/cmd/vet/types.go\nFile cmd/vet/types.go (right):\n\nhttps://codereview.appspot.com/11431044/diff/26001/cmd/vet/types.go#newcode26\ncmd/vet/types.go:26: info := types.NewPkgInfo(pkg.path, fs, astFiles...)\nUse literal syntax here?\n\nhttps://codereview.appspot.com/11431044/diff/26001/go/types/api.go\nFile go/types/api.go (right):\n\nhttps://codereview.appspot.com/11431044/diff/26001/go/types/api.go#newcode6\ngo/types/api.go:6: // the algorithms for typechecking of Go packages.\n\"type-checking\"\n\nhttps://codereview.appspot.com/11431044/diff/26001/go/types/api.go#newcode9\ngo/types/api.go:9: // Typechecking consists of several interdependent phases:\n\"Type-checking\"\n\nhttps://codereview.appspot.com/11431044/diff/26001/go/types/api.go#newcode19\ngo/types/api.go:19: // Type evaluation computes the type (Type) of every expression (ast.Expr)\nLet's not start that again, shall we? :)\n\n\"Type inference\".\n\nhttps://codereview.appspot.com/11431044/diff/26001/go/types/api.go#newcode35\ngo/types/api.go:35: // with. For more control over typechecking and results, use Context.Check.\n\"type-checking\"\n\nhttps://codereview.appspot.com/11431044/diff/26001/go/types/api.go#newcode85\ngo/types/api.go:85: // PkgInfo holds the input package files and the result type information for\ns/package files/syntax trees for package files/?\n\nhttps://codereview.appspot.com/11431044/diff/26001/go/types/api.go#newcode98\ngo/types/api.go:98: // same package (i.e., have the same package name as Files[0])\nWhat about the foo / foo_test distinction (which I still don't fully understand)?\nIs that a go/build thing?\n\nhttps://codereview.appspot.com/11431044/diff/26001/go/types/api.go#newcode107\ngo/types/api.go:107: // If Err != nil, typechecking and result information may be incomplete.\nThis is timely!  I wanted a way to know whether a package contains type errors.\n\nhttps://codereview.appspot.com/11431044/diff/26001/go/types/api.go#newcode122\ngo/types/api.go:122: // the corresponding object is nil.\nPerhaps mention that it includes defining and referring idents?\n\nhttps://codereview.appspot.com/11431044/diff/26001/go/types/api.go#newcode138\ngo/types/api.go:138: // NewPkgInfo is convenience function to create a new PkgInfo\nThe composite literal syntax does this for you.  I'm not sure it adds anything.\n\nhttps://codereview.appspot.com/11431044/diff/26001/go/types/objects.go\nFile go/types/objects.go (right):\n\nhttps://codereview.appspot.com/11431044/diff/26001/go/types/objects.go#newcode188\ngo/types/objects.go:188: decl *ast.FuncDecl\nI think the TODO should stand until we've discussed a way to avoid pinning the ASTs for the whole program in memory.\n\nhttps://codereview.appspot.com/11431044/diff/26001/importer/importer.go\nFile importer/importer.go (right):\n\nhttps://codereview.appspot.com/11431044/diff/26001/importer/importer.go#newcode150\nimporter/importer.go:150: info1 := types.NewPkgInfo(importPath, imp.Fset, files...)\nThe New function is buying us much here; composite literal syntax would be better.\n\nThat said, I can probably eliminate importer.PackageInfo tomorrow.",
			"disapproval": false,
			"date": "2013-07-18 00:02:25.773820",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-07-18 20:03:34.976050",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 11431044: go.tools/go/types: Provide PkgInfo instead of callbacks.",
	"created": "2013-07-17 17:50:28.620820",
	"patchsets": [
		1,
		3001,
		6001,
		9001,
		11001,
		14001,
		17001,
		20001,
		23001,
		24001,
		26001
	],
	"modified": "2013-07-18 20:03:36.713030",
	"closed": true,
	"issue": 11431044
}