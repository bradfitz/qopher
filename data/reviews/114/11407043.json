{
	"description": "go.talks: Best Practices in Go",
	"cc": [
		"adg@golang.org",
		"campoy@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.talks",
			"disapproval": false,
			"date": "2013-07-17 03:25:10.783430",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide\nFile 2013/bestpractices.slide (right):\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode10\n2013/bestpractices.slide:10: From Wikipedia:\nthis and the next slide would be better as a single slide\n\n* \"Best practices\"?\n\nTechniques to write Go code\u00a0that is\n\n- simple, \n- readable,\n- maintainable.\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode17\n2013/bestpractices.slide:17: * First some code\ns/First s/S/\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode21\n2013/bestpractices.slide:21: * Early return for flatter code\n\"Avoid nesting by handling errors first\"\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode25\n2013/bestpractices.slide:25: Flatter code\n\"Flatter\" means two things, avoid\n\nHow about \"Less nesting means less cognitive load on the reader\"\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode29\n2013/bestpractices.slide:29: * DRY: Don't Repeat Yourself\nI really dislike the acronym \"DRY\" because people use it as a religion. Go actually makes it hard to \"DRY\" to the extent some people would like. \n\nHow about \"Avoiding repetition\"\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode33\n2013/bestpractices.slide:33: Improved readability of the `DumpBinary` function.\nthis line doesn't say much; delete it, and consider adding\n\"Deploy one-off utility types for simpler code\" ?\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode35\n2013/bestpractices.slide:35: * Moving some complexity into BinWriter\n\"An opportunity\"\n \nShow the new Write function first, then show the result (or vice versa)\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode39\n2013/bestpractices.slide:39: * Type switch magic\nIt's not magic\n\"Type switch to handle special cases\"\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode43\n2013/bestpractices.slide:43: * Function adapters for DRY\ns/ for DRY//\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode51\n2013/bestpractices.slide:51: * Best practices to avoid frequent bugs\nNot sure this heading is necessary\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode53\n2013/bestpractices.slide:53: * What the bug?\n\"Spot the bug\"\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode61\n2013/bestpractices.slide:61: * Range loops\nI think these slides are good candidates for deletion. Too obvious.\n\nThe previous shadowing examples could go, too.\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode71\n2013/bestpractices.slide:71: * Template method pattern in Go\nThese examples are really unclear. It's not obvious what the purpose is. Also I'm not familiar with the term \"Template method\"\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode83\n2013/bestpractices.slide:83: .code bestpractices/templatemethod.go /START_F/,/START_MAIN/\nI have _never_ seen code like this!\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode103\n2013/bestpractices.slide:103: Send expects a `net.Conn`\nWhat does this mean?\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode117\n2013/bestpractices.slide:117: * Best practices for package organization\n\"Package organization\"\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices/mock.go\nFile 2013/bestpractices/mock.go (right):\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices/mock.go#newcode16\n2013/bestpractices/mock.go:16: net.Conn\nMight as well make this an io.Writer implementation. You're only testing Write anyway.\n\nOr you need a more interesting example.\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices/shadow.go\nFile 2013/bestpractices/shadow.go (right):\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices/shadow.go#newcode6\n2013/bestpractices/shadow.go:6: func initID() (string, error) { return \"magic-id\", nil }\nuse a real example\n\nmaybe *rpc.Client ?\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices/shadow.go#newcode23\n2013/bestpractices/shadow.go:23: func betterInit() {\nFWIW, you can have multiple init functions, so this can be named init too\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices/shortercode.go\nFile 2013/bestpractices/shortercode.go (right):\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices/shortercode.go#newcode27\n2013/bestpractices/shortercode.go:27: } else {\nI'd drop the else blocks; they're clearly unnecessary and the code will be gross without them anyway\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices/shortercode.go#newcode39\n2013/bestpractices/shortercode.go:39: func (g *Gopher) DumpBinary2(w io.Writer) error {\nmaybe you should put all these in separate files so they can have the same name\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices/shortercode.go#newcode56\n2013/bestpractices/shortercode.go:56: type BinWriter struct {\ncall it binWriter, as you're unlikely to make this part of an exported interface\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices/shortercode.go#newcode58\n2013/bestpractices/shortercode.go:58: Err error\ns/Err/err/",
			"disapproval": false,
			"date": "2013-07-17 10:50:09.423280",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide\nFile 2013/bestpractices.slide (right):\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode10\n2013/bestpractices.slide:10: From Wikipedia:\nOn 2013/07/17 10:50:09, adg wrote:\n> this and the next slide would be better as a single slide\n> \n> * \"Best practices\"?\n> \n> Techniques to write Go code&nbsp;that is\n> \n> - simple, \n> - readable,\n> - maintainable.\n\nDone.\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode17\n2013/bestpractices.slide:17: * First some code\nOn 2013/07/17 10:50:09, adg wrote:\n> s/First s/S/\n\nDone.\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode21\n2013/bestpractices.slide:21: * Early return for flatter code\nOn 2013/07/17 10:50:09, adg wrote:\n> \"Avoid nesting by handling errors first\"\n\nDone.\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode25\n2013/bestpractices.slide:25: Flatter code\nOn 2013/07/17 10:50:09, adg wrote:\n> \"Flatter\" means two things, avoid\n> \n> How about \"Less nesting means less cognitive load on the reader\"\n\nDone.\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode29\n2013/bestpractices.slide:29: * DRY: Don't Repeat Yourself\nOn 2013/07/17 10:50:09, adg wrote:\n> I really dislike the acronym \"DRY\" because people use it as a religion. Go\n> actually makes it hard to \"DRY\" to the extent some people would like. \n> \n> How about \"Avoiding repetition\"\n\nI think that DRY is good as long as you understand it's not the top priority.\n\nBetween DRY or KISS, go with KISS. I feel like leaving it this way and adding that as a comment when I'm presenting.\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode33\n2013/bestpractices.slide:33: Improved readability of the `DumpBinary` function.\nOn 2013/07/17 10:50:09, adg wrote:\n> this line doesn't say much; delete it, and consider adding\n> \"Deploy one-off utility types for simpler code\" ? \n\nDone.\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode35\n2013/bestpractices.slide:35: * Moving some complexity into BinWriter\nOn 2013/07/17 10:50:09, adg wrote:\n> \"An opportunity\"\n>  \n> Show the new Write function first, then show the result (or vice versa)\n\nDone.\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode39\n2013/bestpractices.slide:39: * Type switch magic\nOn 2013/07/17 10:50:09, adg wrote:\n> It's not magic\n> \"Type switch to handle special cases\"\n\nDone.\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode43\n2013/bestpractices.slide:43: * Function adapters for DRY\nOn 2013/07/17 10:50:09, adg wrote:\n> s/ for DRY//\n\nDone.\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode51\n2013/bestpractices.slide:51: * Best practices to avoid frequent bugs\nOn 2013/07/17 10:50:09, adg wrote:\n> Not sure this heading is necessary\n\nCommented out with the rest of the section\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode53\n2013/bestpractices.slide:53: * What the bug?\nOn 2013/07/17 10:50:09, adg wrote:\n> \"Spot the bug\"\n\nI personally like \"what the bug\" as it's slightly funny without being offensive.\n\nIt reminds me a bit of \"go fmt yourself\", but with non offensive interpretations: what the heck?\n\nBut if you think that the mood in OSCON is rather serious I'll change it\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode61\n2013/bestpractices.slide:61: * Range loops\nOn 2013/07/17 10:50:09, adg wrote:\n> I think these slides are good candidates for deletion. Too obvious.\n> \n> The previous shadowing examples could go, too.\n\nCommented out for the moment.\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode71\n2013/bestpractices.slide:71: * Template method pattern in Go\nOn 2013/07/17 10:50:09, adg wrote:\n> These examples are really unclear. It's not obvious what the purpose is. Also\n> I'm not familiar with the term \"Template method\"\n\nDone.\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode83\n2013/bestpractices.slide:83: .code bestpractices/templatemethod.go /START_F/,/START_MAIN/\nOn 2013/07/17 10:50:09, adg wrote:\n> I have _never_ seen code like this!\n\nDone.\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode103\n2013/bestpractices.slide:103: Send expects a `net.Conn`\nOn 2013/07/17 10:50:09, adg wrote:\n> What does this mean?\n\nDone.\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode117\n2013/bestpractices.slide:117: * Best practices for package organization\nOn 2013/07/17 10:50:09, adg wrote:\n> \"Package organization\"\n\nDone.\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices/mock.go\nFile 2013/bestpractices/mock.go (right):\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices/mock.go#newcode16\n2013/bestpractices/mock.go:16: net.Conn\nOn 2013/07/17 10:50:09, adg wrote:\n> Might as well make this an io.Writer implementation. You're only testing Write\n> anyway.\n> \n> Or you need a more interesting example.\n\nThe point is that net.Conn has more methods, but I only have to redefine those that the tested method uses.\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices/shadow.go\nFile 2013/bestpractices/shadow.go (right):\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices/shadow.go#newcode6\n2013/bestpractices/shadow.go:6: func initID() (string, error) { return \"magic-id\", nil }\nOn 2013/07/17 10:50:09, adg wrote:\n> use a real example\n> \n> maybe *rpc.Client ?\n\nDone.\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices/shadow.go#newcode23\n2013/bestpractices/shadow.go:23: func betterInit() {\nOn 2013/07/17 10:50:09, adg wrote:\n> FWIW, you can have multiple init functions, so this can be named init too\n\nYeah, but then the code wouldn't fail\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices/shortercode.go\nFile 2013/bestpractices/shortercode.go (right):\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices/shortercode.go#newcode27\n2013/bestpractices/shortercode.go:27: } else {\nOn 2013/07/17 10:50:09, adg wrote:\n> I'd drop the else blocks; they're clearly unnecessary and the code will be gross\n> without them anyway\n\nDone.\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices/shortercode.go#newcode39\n2013/bestpractices/shortercode.go:39: func (g *Gopher) DumpBinary2(w io.Writer) error {\nOn 2013/07/17 10:50:09, adg wrote:\n> maybe you should put all these in separate files so they can have the same name\n\nDone.\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices/shortercode.go#newcode56\n2013/bestpractices/shortercode.go:56: type BinWriter struct {\nOn 2013/07/17 10:50:09, adg wrote:\n> call it binWriter, as you're unlikely to make this part of an exported interface\n\nDone.\n\nhttps://codereview.appspot.com/11407043/diff/6001/2013/bestpractices/shortercode.go#newcode58\n2013/bestpractices/shortercode.go:58: Err error\nOn 2013/07/17 10:50:09, adg wrote:\n> s/Err/err/\n\nDone.",
			"disapproval": false,
			"date": "2013-07-17 22:22:02.025190",
			"approval": false
		},
		{
			"sender": "campoy@google.com",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"campoy@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/17 22:22:02, gocampoy wrote:\n> PTAL\n> \n> https://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide\n> File 2013/bestpractices.slide (right):\n> \n> https://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode10\n> 2013/bestpractices.slide:10: From Wikipedia:\n> On 2013/07/17 10:50:09, adg wrote:\n> > this and the next slide would be better as a single slide\n> > \n> > * \"Best practices\"?\n> > \n> > Techniques to write Go code&nbsp;that is\n> > \n> > - simple, \n> > - readable,\n> > - maintainable.\n> \n> Done.\n> \n> https://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode17\n> 2013/bestpractices.slide:17: * First some code\n> On 2013/07/17 10:50:09, adg wrote:\n> > s/First s/S/\n> \n> Done.\n> \n> https://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode21\n> 2013/bestpractices.slide:21: * Early return for flatter code\n> On 2013/07/17 10:50:09, adg wrote:\n> > \"Avoid nesting by handling errors first\"\n> \n> Done.\n> \n> https://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode25\n> 2013/bestpractices.slide:25: Flatter code\n> On 2013/07/17 10:50:09, adg wrote:\n> > \"Flatter\" means two things, avoid\n> > \n> > How about \"Less nesting means less cognitive load on the reader\"\n> \n> Done.\n> \n> https://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode29\n> 2013/bestpractices.slide:29: * DRY: Don't Repeat Yourself\n> On 2013/07/17 10:50:09, adg wrote:\n> > I really dislike the acronym \"DRY\" because people use it as a religion. Go\n> > actually makes it hard to \"DRY\" to the extent some people would like. \n> > \n> > How about \"Avoiding repetition\"\n> \n> I think that DRY is good as long as you understand it's not the top priority.\n> \n> Between DRY or KISS, go with KISS. I feel like leaving it this way and adding\n> that as a comment when I'm presenting.\n> \n> https://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode33\n> 2013/bestpractices.slide:33: Improved readability of the `DumpBinary` function.\n> On 2013/07/17 10:50:09, adg wrote:\n> > this line doesn't say much; delete it, and consider adding\n> > \"Deploy one-off utility types for simpler code\" ? \n> \n> Done.\n> \n> https://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode35\n> 2013/bestpractices.slide:35: * Moving some complexity into BinWriter\n> On 2013/07/17 10:50:09, adg wrote:\n> > \"An opportunity\"\n> >  \n> > Show the new Write function first, then show the result (or vice versa)\n> \n> Done.\n> \n> https://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode39\n> 2013/bestpractices.slide:39: * Type switch magic\n> On 2013/07/17 10:50:09, adg wrote:\n> > It's not magic\n> > \"Type switch to handle special cases\"\n> \n> Done.\n> \n> https://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode43\n> 2013/bestpractices.slide:43: * Function adapters for DRY\n> On 2013/07/17 10:50:09, adg wrote:\n> > s/ for DRY//\n> \n> Done.\n> \n> https://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode51\n> 2013/bestpractices.slide:51: * Best practices to avoid frequent bugs\n> On 2013/07/17 10:50:09, adg wrote:\n> > Not sure this heading is necessary\n> \n> Commented out with the rest of the section\n> \n> https://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode53\n> 2013/bestpractices.slide:53: * What the bug?\n> On 2013/07/17 10:50:09, adg wrote:\n> > \"Spot the bug\"\n> \n> I personally like \"what the bug\" as it's slightly funny without being offensive.\n> \n> It reminds me a bit of \"go fmt yourself\", but with non offensive\n> interpretations: what the heck?\n> \n> But if you think that the mood in OSCON is rather serious I'll change it\n> \n> https://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode61\n> 2013/bestpractices.slide:61: * Range loops\n> On 2013/07/17 10:50:09, adg wrote:\n> > I think these slides are good candidates for deletion. Too obvious.\n> > \n> > The previous shadowing examples could go, too.\n> \n> Commented out for the moment.\n> \n> https://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode71\n> 2013/bestpractices.slide:71: * Template method pattern in Go\n> On 2013/07/17 10:50:09, adg wrote:\n> > These examples are really unclear. It's not obvious what the purpose is. Also\n> > I'm not familiar with the term \"Template method\"\n> \n> Done.\n> \n> https://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode83\n> 2013/bestpractices.slide:83: .code bestpractices/templatemethod.go\n> /START_F/,/START_MAIN/\n> On 2013/07/17 10:50:09, adg wrote:\n> > I have _never_ seen code like this!\n> \n> Done.\n> \n> https://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode103\n> 2013/bestpractices.slide:103: Send expects a `net.Conn`\n> On 2013/07/17 10:50:09, adg wrote:\n> > What does this mean?\n> \n> Done.\n> \n> https://codereview.appspot.com/11407043/diff/6001/2013/bestpractices.slide#newcode117\n> 2013/bestpractices.slide:117: * Best practices for package organization\n> On 2013/07/17 10:50:09, adg wrote:\n> > \"Package organization\"\n> \n> Done.\n> \n> https://codereview.appspot.com/11407043/diff/6001/2013/bestpractices/mock.go\n> File 2013/bestpractices/mock.go (right):\n> \n> https://codereview.appspot.com/11407043/diff/6001/2013/bestpractices/mock.go#newcode16\n> 2013/bestpractices/mock.go:16: net.Conn\n> On 2013/07/17 10:50:09, adg wrote:\n> > Might as well make this an io.Writer implementation. You're only testing Write\n> > anyway.\n> > \n> > Or you need a more interesting example.\n> \n> The point is that net.Conn has more methods, but I only have to redefine those\n> that the tested method uses.\n> \n> https://codereview.appspot.com/11407043/diff/6001/2013/bestpractices/shadow.go\n> File 2013/bestpractices/shadow.go (right):\n> \n> https://codereview.appspot.com/11407043/diff/6001/2013/bestpractices/shadow.go#newcode6\n> 2013/bestpractices/shadow.go:6: func initID() (string, error) { return\n> \"magic-id\", nil }\n> On 2013/07/17 10:50:09, adg wrote:\n> > use a real example\n> > \n> > maybe *rpc.Client ?\n> \n> Done.\n> \n> https://codereview.appspot.com/11407043/diff/6001/2013/bestpractices/shadow.go#newcode23\n> 2013/bestpractices/shadow.go:23: func betterInit() {\n> On 2013/07/17 10:50:09, adg wrote:\n> > FWIW, you can have multiple init functions, so this can be named init too\n> \n> Yeah, but then the code wouldn't fail\n> \n> https://codereview.appspot.com/11407043/diff/6001/2013/bestpractices/shortercode.go\n> File 2013/bestpractices/shortercode.go (right):\n> \n> https://codereview.appspot.com/11407043/diff/6001/2013/bestpractices/shortercode.go#newcode27\n> 2013/bestpractices/shortercode.go:27: } else {\n> On 2013/07/17 10:50:09, adg wrote:\n> > I'd drop the else blocks; they're clearly unnecessary and the code will be\n> gross\n> > without them anyway\n> \n> Done.\n> \n> https://codereview.appspot.com/11407043/diff/6001/2013/bestpractices/shortercode.go#newcode39\n> 2013/bestpractices/shortercode.go:39: func (g *Gopher) DumpBinary2(w io.Writer)\n> error {\n> On 2013/07/17 10:50:09, adg wrote:\n> > maybe you should put all these in separate files so they can have the same\n> name\n> \n> Done.\n> \n> https://codereview.appspot.com/11407043/diff/6001/2013/bestpractices/shortercode.go#newcode56\n> 2013/bestpractices/shortercode.go:56: type BinWriter struct {\n> On 2013/07/17 10:50:09, adg wrote:\n> > call it binWriter, as you're unlikely to make this part of an exported\n> interface\n> \n> Done.\n> \n> https://codereview.appspot.com/11407043/diff/6001/2013/bestpractices/shortercode.go#newcode58\n> 2013/bestpractices/shortercode.go:58: Err error\n> On 2013/07/17 10:50:09, adg wrote:\n> > s/Err/err/\n> \n> Done.\n\nPTAL",
			"disapproval": false,
			"date": "2013-07-23 06:29:32.164050",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"campoy@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11407043/diff/13001/2013/bestpractices.slide\nFile 2013/bestpractices.slide (right):\n\nhttps://codereview.appspot.com/11407043/diff/13001/2013/bestpractices.slide#newcode10\n2013/bestpractices.slide:10: From Wikipedia:\ndrop the wikipedia quote. it's a terrible source for anything\n\nhttps://codereview.appspot.com/11407043/diff/13001/2013/bestpractices.slide#newcode31\n2013/bestpractices.slide:31: Less nesting means less cognitive load on the reader\nperiod\n\nhttps://codereview.appspot.com/11407043/diff/13001/2013/bestpractices.slide#newcode47\n2013/bestpractices.slide:47: * Type switch with short variable declaration\nI'd consider dropping this slide and putting the short var decl in the previous one. It's the natural way anyway, not a 'best practice'.\n\nhttps://codereview.appspot.com/11407043/diff/13001/2013/bestpractices/shortercode1.go\nFile 2013/bestpractices/shortercode1.go (right):\n\nhttps://codereview.appspot.com/11407043/diff/13001/2013/bestpractices/shortercode1.go#newcode31\n2013/bestpractices/shortercode1.go:31: \ndelete blank line\n\nhttps://codereview.appspot.com/11407043/diff/22001/2013/bestpractices.slide\nFile 2013/bestpractices.slide (right):\n\nhttps://codereview.appspot.com/11407043/diff/22001/2013/bestpractices.slide#newcode38\n2013/bestpractices.slide:38: Deploy one-off utility types for simpler code\nmove this above the first code sample\n\nhttps://codereview.appspot.com/11407043/diff/22001/2013/bestpractices.slide#newcode150\n2013/bestpractices.slide:150: Import statements, cohesive groups separated by blank lines.\ns/cohesive/related/\n\nhttps://codereview.appspot.com/11407043/diff/22001/2013/bestpractices.slide#newcode160\n2013/bestpractices.slide:160: Constants, functions, and types used across the rest of the code.\nNot sure how this is distinct from \"other\" (below), also you forgot variables.\nI think you should instead draw a distinction between internal and exported declarations.\n\nhttps://codereview.appspot.com/11407043/diff/22001/2013/bestpractices.slide#newcode172\n2013/bestpractices.slide:172: Reasons to separate code in different files.\n\"Why split a package into multiple files?\"\n\nhttps://codereview.appspot.com/11407043/diff/22001/2013/bestpractices.slide#newcode180\n2013/bestpractices.slide:180: `net/http/cookie.go` and `net/http/cookie_test.go` are both part of the `http`\nMention that tests are part of the package name space, but are only compiled at test time.\n\nhttps://codereview.appspot.com/11407043/diff/22001/2013/bestpractices.slide#newcode209\n2013/bestpractices.slide:209: .image bestpractices/cmd.png\nmissing image\n\nhttps://codereview.appspot.com/11407043/diff/22001/2013/bestpractices.slide#newcode211\n2013/bestpractices.slide:211: * Keeping independent packages independent\ns/Keeping/Keep/\n\nhttps://codereview.appspot.com/11407043/diff/22001/2013/bestpractices.slide#newcode215\n2013/bestpractices.slide:215: They can independent if `b` defines an interface with the needed methods of `a.T`.\nPick a concrete example? Or at least more informative names. I'm lost looking at this code\n\nhttps://codereview.appspot.com/11407043/diff/22001/2013/bestpractices.slide#newcode246\n2013/bestpractices.slide:246: - In package `encoding/json` we find the type `Encoder` instead of `JSONEncoder`.\ns/instead of/, not/\n\nhttps://codereview.appspot.com/11407043/diff/22001/2013/bestpractices.slide#newcode248\n2013/bestpractices.slide:248: - It is referred as `json.Encoder`, shorter than `json.JSONEncoder`, but also clear.\nIt is used as `json.Encoder`.\n\n(the rest is obvious)\n\nhttps://codereview.appspot.com/11407043/diff/22001/2013/bestpractices.slide#newcode254\n2013/bestpractices.slide:254: .code bestpractices/shortercode1.go /GOPHER/,/DUMP/\nyou use pointers to interfaces a lot throughout this code\n\nlook for *io in your code samples\n\nhttps://codereview.appspot.com/11407043/diff/22001/2013/bestpractices.slide#newcode282\n2013/bestpractices.slide:282: * goroutines attached to values\nuse goroutines to manage state\n\nhttps://codereview.appspot.com/11407043/diff/22001/2013/bestpractices.slide#newcode292\n2013/bestpractices.slide:292: * avoid goroutines leaks with buffered chans\ns/goroutines/goroutine/\n\nhttps://codereview.appspot.com/11407043/diff/22001/2013/bestpractices.slide#newcode294\n2013/bestpractices.slide:294: .play bestpractices/bufchan.go /START/,\nuse the classic example here; a chan of errors. it's the most widely applicable",
			"disapproval": false,
			"date": "2013-07-23 07:45:03.931060",
			"approval": false
		},
		{
			"sender": "campoy@google.com",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"campoy@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/11407043/diff/22001/2013/bestpractices.slide\nFile 2013/bestpractices.slide (right):\n\nhttps://codereview.appspot.com/11407043/diff/22001/2013/bestpractices.slide#newcode38\n2013/bestpractices.slide:38: Deploy one-off utility types for simpler code\nOn 2013/07/23 07:45:04, adg wrote:\n> move this above the first code sample\n\nDone.\n\nhttps://codereview.appspot.com/11407043/diff/22001/2013/bestpractices.slide#newcode150\n2013/bestpractices.slide:150: Import statements, cohesive groups separated by blank lines.\nOn 2013/07/23 07:45:04, adg wrote:\n> s/cohesive/related/\n\nDone.\n\nhttps://codereview.appspot.com/11407043/diff/22001/2013/bestpractices.slide#newcode160\n2013/bestpractices.slide:160: Constants, functions, and types used across the rest of the code.\nOn 2013/07/23 07:45:04, adg wrote:\n> Not sure how this is distinct from \"other\" (below), also you forgot variables.\n> I think you should instead draw a distinction between internal and exported\n> declarations.\n\nConstants and helper functions are normally at the beginning of the package (or at least that's what I normally see). That's what I wanted to express.\n\nI reworded it.\n\nhttps://codereview.appspot.com/11407043/diff/22001/2013/bestpractices.slide#newcode172\n2013/bestpractices.slide:172: Reasons to separate code in different files.\nOn 2013/07/23 07:45:04, adg wrote:\n> \"Why split a package into multiple files?\"\n\nDone.\n\nhttps://codereview.appspot.com/11407043/diff/22001/2013/bestpractices.slide#newcode180\n2013/bestpractices.slide:180: `net/http/cookie.go` and `net/http/cookie_test.go` are both part of the `http`\nOn 2013/07/23 07:45:04, adg wrote:\n> Mention that tests are part of the package name space, but are only compiled at\n> test time.\n\nDone.\n\nhttps://codereview.appspot.com/11407043/diff/22001/2013/bestpractices.slide#newcode209\n2013/bestpractices.slide:209: .image bestpractices/cmd.png\nOn 2013/07/23 07:45:04, adg wrote:\n> missing image\n\nDone.\n\nhttps://codereview.appspot.com/11407043/diff/22001/2013/bestpractices.slide#newcode211\n2013/bestpractices.slide:211: * Keeping independent packages independent\nOn 2013/07/23 07:45:04, adg wrote:\n> s/Keeping/Keep/\n\nDone.\n\nhttps://codereview.appspot.com/11407043/diff/22001/2013/bestpractices.slide#newcode215\n2013/bestpractices.slide:215: They can independent if `b` defines an interface with the needed methods of `a.T`.\nOn 2013/07/23 07:45:04, adg wrote:\n> Pick a concrete example? Or at least more informative names. I'm lost looking at\n> this code\n\nDone.\n\nhttps://codereview.appspot.com/11407043/diff/22001/2013/bestpractices.slide#newcode246\n2013/bestpractices.slide:246: - In package `encoding/json` we find the type `Encoder` instead of `JSONEncoder`.\nOn 2013/07/23 07:45:04, adg wrote:\n> s/instead of/, not/\n\nDone.\n\nhttps://codereview.appspot.com/11407043/diff/22001/2013/bestpractices.slide#newcode248\n2013/bestpractices.slide:248: - It is referred as `json.Encoder`, shorter than `json.JSONEncoder`, but also clear.\nOn 2013/07/23 07:45:04, adg wrote:\n> It is used as `json.Encoder`.\n> \n> (the rest is obvious)\n\nDone.\n\nhttps://codereview.appspot.com/11407043/diff/22001/2013/bestpractices.slide#newcode254\n2013/bestpractices.slide:254: .code bestpractices/shortercode1.go /GOPHER/,/DUMP/\nOn 2013/07/23 07:45:04, adg wrote:\n> you use pointers to interfaces a lot throughout this code\n> \n> look for *io in your code samples\n\nDone.\n\nhttps://codereview.appspot.com/11407043/diff/22001/2013/bestpractices.slide#newcode282\n2013/bestpractices.slide:282: * goroutines attached to values\nOn 2013/07/23 07:45:04, adg wrote:\n> use goroutines to manage state\n\nDone.\n\nhttps://codereview.appspot.com/11407043/diff/22001/2013/bestpractices.slide#newcode292\n2013/bestpractices.slide:292: * avoid goroutines leaks with buffered chans\nOn 2013/07/23 07:45:04, adg wrote:\n> s/goroutines/goroutine/\n\nDone.\n\nhttps://codereview.appspot.com/11407043/diff/22001/2013/bestpractices.slide#newcode294\n2013/bestpractices.slide:294: .play bestpractices/bufchan.go /START/,\nOn 2013/07/23 07:45:04, adg wrote:\n> use the classic example here; a chan of errors. it's the most widely applicable\n\nDone.",
			"disapproval": false,
			"date": "2013-07-23 23:37:16.867660",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"campoy@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11407043/diff/33001/2013/bestpractices.slide\nFile 2013/bestpractices.slide (right):\n\nhttps://codereview.appspot.com/11407043/diff/33001/2013/bestpractices.slide#newcode160\n2013/bestpractices.slide:160: Constants, variables, and helper functions and types.\nI would say that helper functions and types go at the bottom. The most significant types and funcs should go at the top.\n\nhttps://codereview.appspot.com/11407043/diff/33001/2013/bestpractices.slide#newcode269\n2013/bestpractices.slide:269: * Avoid concurrency on your API\ns/on/in/\n\nhttps://codereview.appspot.com/11407043/diff/33001/2013/bestpractices.slide#newcode273\n2013/bestpractices.slide:273: What if we want to use it concurrently?\nthis is a non-sequitur, considering you're using it concurrently already\n\nhttps://codereview.appspot.com/11407043/diff/33001/2013/bestpractices.slide#newcode275\n2013/bestpractices.slide:275: * Avoid concurrency on your API\nditto\n\nhttps://codereview.appspot.com/11407043/diff/33001/2013/bestpractices.slide#newcode285\n2013/bestpractices.slide:285: Use a chan or a struct with a chan as a handle to a goroutine\ns/as a handle to/to communicate with/\n\nhttps://codereview.appspot.com/11407043/diff/33001/2013/bestpractices.slide#newcode289\n2013/bestpractices.slide:289: * goroutines attached to values (cont.)\n\"Use goroutines to manage state (continued)\"\n\nhttps://codereview.appspot.com/11407043/diff/33001/2013/bestpractices.slide#newcode293\n2013/bestpractices.slide:293: * avoid goroutine leaks with buffered chans\nbad capitalization",
			"disapproval": false,
			"date": "2013-07-24 01:46:19.700130",
			"approval": false
		},
		{
			"sender": "campoy@google.com",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"campoy@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11407043/diff/33001/2013/bestpractices.slide\nFile 2013/bestpractices.slide (right):\n\nhttps://codereview.appspot.com/11407043/diff/33001/2013/bestpractices.slide#newcode160\n2013/bestpractices.slide:160: Constants, variables, and helper functions and types.\nOn 2013/07/24 01:46:19, adg wrote:\n> I would say that helper functions and types go at the bottom. The most\n> significant types and funcs should go at the top.\n\nDone.\n\nhttps://codereview.appspot.com/11407043/diff/33001/2013/bestpractices.slide#newcode269\n2013/bestpractices.slide:269: * Avoid concurrency on your API\nOn 2013/07/24 01:46:19, adg wrote:\n> s/on/in/\n\nDone.\n\nhttps://codereview.appspot.com/11407043/diff/33001/2013/bestpractices.slide#newcode273\n2013/bestpractices.slide:273: What if we want to use it concurrently?\nOn 2013/07/24 01:46:19, adg wrote:\n> this is a non-sequitur, considering you're using it concurrently already\n\nDone.\n\nhttps://codereview.appspot.com/11407043/diff/33001/2013/bestpractices.slide#newcode275\n2013/bestpractices.slide:275: * Avoid concurrency on your API\nOn 2013/07/24 01:46:19, adg wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/11407043/diff/33001/2013/bestpractices.slide#newcode285\n2013/bestpractices.slide:285: Use a chan or a struct with a chan as a handle to a goroutine\nOn 2013/07/24 01:46:19, adg wrote:\n> s/as a handle to/to communicate with/\n\nDone.\n\nhttps://codereview.appspot.com/11407043/diff/33001/2013/bestpractices.slide#newcode289\n2013/bestpractices.slide:289: * goroutines attached to values (cont.)\nOn 2013/07/24 01:46:19, adg wrote:\n> \"Use goroutines to manage state (continued)\"\n\nDone.\n\nhttps://codereview.appspot.com/11407043/diff/33001/2013/bestpractices.slide#newcode293\n2013/bestpractices.slide:293: * avoid goroutine leaks with buffered chans\nOn 2013/07/24 01:46:19, adg wrote:\n> bad capitalization\n\nDone.",
			"disapproval": false,
			"date": "2013-07-24 18:30:05.377120",
			"approval": false
		},
		{
			"sender": "campoy@google.com",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"campoy@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/24 18:30:05, campoy wrote:\n> https://codereview.appspot.com/11407043/diff/33001/2013/bestpractices.slide\n> File 2013/bestpractices.slide (right):\n> \n> https://codereview.appspot.com/11407043/diff/33001/2013/bestpractices.slide#newcode160\n> 2013/bestpractices.slide:160: Constants, variables, and helper functions and\n> types.\n> On 2013/07/24 01:46:19, adg wrote:\n> > I would say that helper functions and types go at the bottom. The most\n> > significant types and funcs should go at the top.\n> \n> Done.\n> \n> https://codereview.appspot.com/11407043/diff/33001/2013/bestpractices.slide#newcode269\n> 2013/bestpractices.slide:269: * Avoid concurrency on your API\n> On 2013/07/24 01:46:19, adg wrote:\n> > s/on/in/\n> \n> Done.\n> \n> https://codereview.appspot.com/11407043/diff/33001/2013/bestpractices.slide#newcode273\n> 2013/bestpractices.slide:273: What if we want to use it concurrently?\n> On 2013/07/24 01:46:19, adg wrote:\n> > this is a non-sequitur, considering you're using it concurrently already\n> \n> Done.\n> \n> https://codereview.appspot.com/11407043/diff/33001/2013/bestpractices.slide#newcode275\n> 2013/bestpractices.slide:275: * Avoid concurrency on your API\n> On 2013/07/24 01:46:19, adg wrote:\n> > ditto\n> \n> Done.\n> \n> https://codereview.appspot.com/11407043/diff/33001/2013/bestpractices.slide#newcode285\n> 2013/bestpractices.slide:285: Use a chan or a struct with a chan as a handle to\n> a goroutine\n> On 2013/07/24 01:46:19, adg wrote:\n> > s/as a handle to/to communicate with/\n> \n> Done.\n> \n> https://codereview.appspot.com/11407043/diff/33001/2013/bestpractices.slide#newcode289\n> 2013/bestpractices.slide:289: * goroutines attached to values (cont.)\n> On 2013/07/24 01:46:19, adg wrote:\n> > \"Use goroutines to manage state (continued)\"\n> \n> Done.\n> \n> https://codereview.appspot.com/11407043/diff/33001/2013/bestpractices.slide#newcode293\n> 2013/bestpractices.slide:293: * avoid goroutine leaks with buffered chans\n> On 2013/07/24 01:46:19, adg wrote:\n> > bad capitalization\n> \n> Done.\n\nPTAL\n\nI just uploaded the pretty much what I presented. I  ended up dropping some slides to make the talk fit in 30 minutes.",
			"disapproval": false,
			"date": "2013-07-24 23:44:03.369920",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"campoy@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-07-24 23:47:06.719620",
			"approval": true
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"campoy@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=dd84e6e4aecd&repo=talks ***\n\ngo.talks: Best Practices in Go\n\nR=adg, campoy\nCC=golang-dev\nhttps://codereview.appspot.com/11407043",
			"disapproval": false,
			"date": "2013-07-24 23:49:44.228070",
			"approval": false
		},
		{
			"sender": "campoy@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi Christoph,\r\n\r\nMy code wasn't intended to be safe in the case of multiple concurrent calls\r\nto stop, it's something I knew.\r\n\r\nAnd yes, I agree that your solution fixes it :-) Nice job!\r\n\r\n Francesc Campoy Flores | Go Developer Relations | campoy@google.com |\r\n 415-990-4126\r\n\r\n\r\nOn Wed, Jul 24, 2013 at 6:24 PM, Christoph Hack <christoph@tux21b.org>wrote:\r\n\r\n> Sorry for yet another mail, but I think I have found a cleaner solution\r\n> based on sync.Once. I am happy now with this approach:\r\n> http://play.golang.org/p/KAn1Y8uczj\r\n>\r\n> Am Donnerstag, 25. Juli 2013 02:54:57 UTC+2 schrieb Christoph Hack:\r\n>\r\n>> The \"Use goroutines to manage state\" example code looks a bit racy to me.\r\n>> The Stop method must not be called concurrently or otherwise clients might\r\n>> either observe a stopped state before the server was shut down properly or\r\n>> they may block indefinitely if someone else stopped the server before. I am\r\n>> guessing that's not the intended behavior, since the whole purpose of the\r\n>> dedicated server goroutine is to allow concurrent access, isn't it?\r\n>>\r\n>> http://play.golang.org/p/**l9s7SZZBJb<http://play.golang.org/p/l9s7SZZBJb>should fix the problem, but I am not sure if I would consider it best\r\n>> practice. Does anyone know a simpler solution to this common problem?\r\n>>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-26 21:19:11.689380",
			"approval": false
		}
	],
	"owner_email": "campoy@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gocampoy",
	"subject": "code review 11407043: go.talks: Best Practices in Go",
	"created": "2013-07-17 03:24:45.537240",
	"patchsets": [
		1,
		3001,
		6001,
		11001,
		13001,
		22001,
		29001,
		33001,
		41001,
		43001,
		49001,
		44030,
		53002
	],
	"modified": "2013-07-26 21:19:12.017370",
	"closed": true,
	"issue": 11407043
}