{
	"description": "runtime: use funcdata to supply garbage collection information\n\nThis CL introduces a FUNCDATA number for runtime-specific\ngarbage collection metadata, changes the C and Go compilers\nto emit that metadata, and changes the runtime to expect it.\n\nThe old pseudo-instructions that carried this information\nare gone, as is the linker code to process them.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dvyukov@google.com",
		"cshapiro@google.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-07-18 19:20:35.838860",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I updated the CL to bring the C compiler back to where it was, emitting the\r\ncount for the local variable section. Unfortunately, that count is\r\nincorrect, but we'll have to leave that for another day.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-07-18 19:37:40.848080",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM for runtime part",
			"disapproval": false,
			"date": "2013-07-19 12:15:02.328140",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Carl, do you want to look at this?\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-07-19 15:22:03.717320",
			"approval": false
		},
		{
			"sender": "cshapiro@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'll take a look at it shortly.\r\n\r\n\r\nOn Fri, Jul 19, 2013 at 8:22 AM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> Carl, do you want to look at this?\r\n>\r\n> Russ\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-19 17:00:39.808410",
			"approval": false
		},
		{
			"sender": "cshapiro@google.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"cshapiro@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "lgtm to me, just a few minor questions and comments",
			"disapproval": false,
			"date": "2013-07-19 17:42:04.643000",
			"approval": true
		},
		{
			"sender": "cshapiro@google.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"cshapiro@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11406044/diff/14001/src/cmd/gc/pgen.c\nFile src/cmd/gc/pgen.c (right):\n\nhttps://codereview.appspot.com/11406044/diff/14001/src/cmd/gc/pgen.c#newcode96\nsrc/cmd/gc/pgen.c:96: snprint(namebuf, sizeof namebuf, \"gc\u00b7%d\", ngcsym++);\nI am not familiar with the motivation or convention for these names (assuming they exists) but it would seem preferable to me to have the name of the function being compiled added to the name rather than an integer.  This would make locating the metadata in the output simpler as you could search for the gc symbol directly as opposed to first having to locate the function to find out the name of its symbol.\n\nhttps://codereview.appspot.com/11406044/diff/14001/src/cmd/gc/pgen.c#newcode185\nsrc/cmd/gc/pgen.c:185: int ot;\nWhat does ot stand for?\n\nhttps://codereview.appspot.com/11406044/diff/14001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/11406044/diff/14001/src/pkg/runtime/mgc0.c#newcode1408\nsrc/pkg/runtime/mgc0.c:1408: gcf = (GCFunc*)runtime\u00b7funcdata(f, FUNCDATA_GC);\nIs this cast needed?\n\nhttps://codereview.appspot.com/11406044/diff/14001/src/pkg/runtime/runtime.h\nFile src/pkg/runtime/runtime.h (right):\n\nhttps://codereview.appspot.com/11406044/diff/14001/src/pkg/runtime/runtime.h#newcode416\nsrc/pkg/runtime/runtime.h:416: int32\tx1;\t// locals size\nIs there any reason now to leave these x variables in the Func structure?",
			"disapproval": false,
			"date": "2013-07-19 17:43:51.912560",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"cshapiro@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11406044/diff/14001/src/cmd/gc/pgen.c\nFile src/cmd/gc/pgen.c (right):\n\nhttps://codereview.appspot.com/11406044/diff/14001/src/cmd/gc/pgen.c#newcode96\nsrc/cmd/gc/pgen.c:96: snprint(namebuf, sizeof namebuf, \"gc\u00b7%d\", ngcsym++);\nOn 2013/07/19 17:43:52, cshapiro1 wrote:\n> I am not familiar with the motivation or convention for these names (assuming\n> they exists) but it would seem preferable to me to have the name of the function\n> being compiled added to the name rather than an integer.  This would make\n> locating the metadata in the output simpler as you could search for the gc\n> symbol directly as opposed to first having to locate the function to find out\n> the name of its symbol.\n\nThey just need to be unique within this package (they are already package scoped). In general the function names can get quite long and this seemed simpler. I should really merge them all into a single symbol in the final symbol table in the executable anyway, and then it won't matter.\n\nhttps://codereview.appspot.com/11406044/diff/14001/src/cmd/gc/pgen.c#newcode185\nsrc/cmd/gc/pgen.c:185: int ot;\nOn 2013/07/19 17:43:52, cshapiro1 wrote:\n> What does ot stand for?\n\nThe o is offset. I don't know about the t. It's the name that very similar code in reflect.c uses. Maybe off would be better.\n\nhttps://codereview.appspot.com/11406044/diff/14001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/11406044/diff/14001/src/pkg/runtime/mgc0.c#newcode1408\nsrc/pkg/runtime/mgc0.c:1408: gcf = (GCFunc*)runtime\u00b7funcdata(f, FUNCDATA_GC);\nOn 2013/07/19 17:43:52, cshapiro1 wrote:\n> Is this cast needed?\n\nNot anymore. When I wrote it funcdata returned uintptr not void*.\n\nhttps://codereview.appspot.com/11406044/diff/14001/src/pkg/runtime/runtime.h\nFile src/pkg/runtime/runtime.h (right):\n\nhttps://codereview.appspot.com/11406044/diff/14001/src/pkg/runtime/runtime.h#newcode416\nsrc/pkg/runtime/runtime.h:416: int32\tx1;\t// locals size\nOn 2013/07/19 17:43:52, cshapiro1 wrote:\n> Is there any reason now to leave these x variables in the Func structure?\n\nOnly that the CL is already pretty large. Deleting these fields requires changing code here, in the linker, in libmach, and in debug/gosym, all together. By postponing these to a later CL I avoid having to pull those last two into this one.",
			"disapproval": false,
			"date": "2013-07-19 17:54:34.689790",
			"approval": false
		},
		{
			"sender": "cshapiro@google.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"cshapiro@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "sgtm",
			"disapproval": false,
			"date": "2013-07-19 18:39:10.020770",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"cshapiro@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=ea5c70726372 ***\n\nruntime: use funcdata to supply garbage collection information\n\nThis CL introduces a FUNCDATA number for runtime-specific\ngarbage collection metadata, changes the C and Go compilers\nto emit that metadata, and changes the runtime to expect it.\n\nThe old pseudo-instructions that carried this information\nare gone, as is the linker code to process them.\n\nR=golang-dev, dvyukov, cshapiro\nCC=golang-dev\nhttps://codereview.appspot.com/11406044",
			"disapproval": false,
			"date": "2013-07-19 20:04:12.986440",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 11406044: runtime: use funcdata to supply garbage collection info...",
	"created": "2013-07-18 19:19:58.782290",
	"patchsets": [
		1,
		3001,
		6001,
		9001,
		7026,
		14001,
		27001
	],
	"modified": "2013-07-19 20:04:15.043350",
	"closed": true,
	"issue": 11406044
}