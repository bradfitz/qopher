{
	"description": "go.talks/pkg/present: Adding inline links with style.\n\nRead doc.go for more details.",
	"cc": [
		"golang-dev@googlegroups.com",
		"adg@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"campoy@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6847128/diff/5002/pkg/present/link.go\nFile pkg/present/link.go (right):\n\nhttps://codereview.appspot.com/6847128/diff/5002/pkg/present/link.go#newcode50\npkg/present/link.go:50: return template.HTML(fmt.Sprintf(`<a href=%q>%s</a>`, url.String(), label)), nil\nchange this to\n  return template.HTML(renderLink(url.String(), label)), nil\n\nand add this function:\n\nfunc renderLink(url, text string) string {\n    if text == \"\" {\n        text = url\n    }\n    return fmt.Sprintf(`<a href=\"%s\" target=\"_blank\">%s</a>`, url, text)\n}\n\nhttps://codereview.appspot.com/6847128/diff/5002/pkg/present/link.go#newcode53\npkg/present/link.go:53: var inlineExp = regexp.MustCompile(`^\\[\\[([^\\[\\]]+)\\](\\[([^\\[\\]]*)\\])?\\]`)\nGross regexp. Please read:\n  http://commandcenter.blogspot.sg/2011/08/regular-expressions-in-lexing-and.html\n\nI think this would be much nicer as a simple function that does everything the obvious way:\n\n// parseInlineLink parses an inline link at the start of s, and returns\n// a rendered HTML link and the total length of the raw inline link.\n// If no inline link is present, it returns all zeroes.\nfunc parseInlineLink(s string) (link string, length int) {\n\tif len(s) < 2 || s[0] != '[' || s[1] != '[' {\n\t\treturn\n\t}\n\tend := strings.Index(s, \"]]\")\n\tif end == -1 {\n\t\treturn\n\t}\n\turlEnd := strings.Index(s, \"]\")\n\tif urlEnd == -1 {\n\t\treturn\n\t}\n\turl := s[2:urlEnd]\n\tconst badURLChars = `<>\"{}|\\^~[]` + \"`\"\t// per RFC1738 section 2.2\n\tif strings.ContainsAny(url, badURLChars) {\n\t\treturn\n\t}\n\tif urlEnd == end {\n\t\treturn renderLink(url, \"\"), end + 2\n\t}\n\tif s[urlEnd:urlEnd+2] != \"][\" {\n\t\treturn\n\t}\n\ttext := s[urlEnd+2 : end]\n\treturn renderLink(url, text), end + 2\n}\n\nnow the other functions are unnecessary.\n\nhttps://codereview.appspot.com/6847128/diff/5002/pkg/present/style.go\nFile pkg/present/style.go (right):\n\nhttps://codereview.appspot.com/6847128/diff/5002/pkg/present/style.go#newcode49\npkg/present/style.go:49: if isInlineLink(word) {\nif link, _ := parseInlineLink(word); link != \"\" {\n    words[w] = link\n    continue Word\n}\n\nhttps://codereview.appspot.com/6847128/diff/5002/pkg/present/style.go#newcode132\npkg/present/style.go:132: if start, end, found := findInlineLink(s, i); found {\nif _, length := parseInlineLink(s[i:]) length > 0 {\n  words = append(s[i:i+length])\n  mark = i+length\n}\n\nhttps://codereview.appspot.com/6847128/diff/5002/pkg/present/style_test.go\nFile pkg/present/style_test.go (right):\n\nhttps://codereview.appspot.com/6847128/diff/5002/pkg/present/style_test.go#newcode22\npkg/present/style_test.go:22: {\"hey [[http://go/go][Gophers]] around\",\nuse a real url in these examples, like http://golang.org/doc/ or something.\n\nhttps://codereview.appspot.com/6847128/diff/5002/pkg/present/style_test.go#newcode60\npkg/present/style_test.go:60: {\"_hey_ [[http://go/go][*Gophers*]] *around*\",\nplease add a test case for a link text with multiple words\n\nhttps://codereview.appspot.com/6847128/diff/5002/pkg/present/style_test.go#newcode61\npkg/present/style_test.go:61: \"<i>hey</i> <a href=\\\"http://go/go\\\"><b>Gophers</b></a> <b>around</b>\"},\nuse `backquotes` to avoid the escaping\n\nhttps://codereview.appspot.com/6847128/diff/5002/pkg/present/style_test.go#newcode62\npkg/present/style_test.go:62: {\"Visit [[http://go/go]] now\", \"Visit <a href=\\\"http://go/go\\\">http://go/go</a> now\"},\nditto",
			"disapproval": false,
			"date": "2012-12-01 11:41:20.260480",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.talks",
			"disapproval": false,
			"date": "2012-12-01 00:32:46.674320",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"campoy@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-12-03 05:32:27.301290",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"campoy@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM modulo these documentation changes.\n\nhttps://codereview.appspot.com/6847128/diff/20003/pkg/present/doc.go\nFile pkg/present/doc.go (right):\n\nhttps://codereview.appspot.com/6847128/diff/20003/pkg/present/doc.go#newcode78\npkg/present/doc.go:78: Links can be inlined in the text using the syntax [[url][text]], or\nLinks can be included in any text with the form [[url][label]], or [[url]] to use the URL itself as the label.\n\n(drop the part about font modifiers. That should be a given.\n\nhttps://codereview.appspot.com/6847128/diff/20003/pkg/present/doc.go#newcode82\npkg/present/doc.go:82: Note that characters `[` and `]` are not allowed in neither url nor text.\nactually [] can be used inside the text provided it's not ]]. I think you can remove this line too.",
			"disapproval": false,
			"date": "2012-12-03 05:20:07.590830",
			"approval": true
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=c0f111ea557b&repo=talks ***\n\ngo.talks/pkg/present: Adding inline links with style.\n\nRead doc.go for more details.\n\nR=golang-dev, adg\nCC=golang-dev\nhttps://codereview.appspot.com/6847128",
			"disapproval": false,
			"date": "2012-12-03 05:33:44.810710",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL, I added more tests too\n\nhttps://codereview.appspot.com/6847128/diff/5002/pkg/present/link.go\nFile pkg/present/link.go (right):\n\nhttps://codereview.appspot.com/6847128/diff/5002/pkg/present/link.go#newcode50\npkg/present/link.go:50: return template.HTML(fmt.Sprintf(`<a href=%q>%s</a>`, url.String(), label)), nil\nOn 2012/12/01 11:41:20, adg wrote:\n> change this to\n>   return template.HTML(renderLink(url.String(), label)), nil\n> \n> and add this function:\n> \n> func renderLink(url, text string) string {\n>     if text == \"\" {\n>         text = url\n>     }\n>     return fmt.Sprintf(`<a href=\"%s\" target=\"_blank\">%s</a>`, url, text)\n> }\n\nDone.\n\nhttps://codereview.appspot.com/6847128/diff/5002/pkg/present/link.go#newcode53\npkg/present/link.go:53: var inlineExp = regexp.MustCompile(`^\\[\\[([^\\[\\]]+)\\](\\[([^\\[\\]]*)\\])?\\]`)\nOn 2012/12/01 11:41:20, adg wrote:\n> Gross regexp. Please read:\n>  \n> http://commandcenter.blogspot.sg/2011/08/regular-expressions-in-lexing-and.html\n> \n> I think this would be much nicer as a simple function that does everything the\n> obvious way:\n> \n> // parseInlineLink parses an inline link at the start of s, and returns\n> // a rendered HTML link and the total length of the raw inline link.\n> // If no inline link is present, it returns all zeroes.\n> func parseInlineLink(s string) (link string, length int) {\n> \tif len(s) < 2 || s[0] != '[' || s[1] != '[' {\n> \t\treturn\n> \t}\n> \tend := strings.Index(s, \"]]\")\n> \tif end == -1 {\n> \t\treturn\n> \t}\n> \turlEnd := strings.Index(s, \"]\")\n> \tif urlEnd == -1 {\n> \t\treturn\n> \t}\n> \turl := s[2:urlEnd]\n> \tconst badURLChars = `<>\"{}|\\^~[]` + \"`\"\t// per RFC1738 section 2.2\n> \tif strings.ContainsAny(url, badURLChars) {\n> \t\treturn\n> \t}\n> \tif urlEnd == end {\n> \t\treturn renderLink(url, \"\"), end + 2\n> \t}\n> \tif s[urlEnd:urlEnd+2] != \"][\" {\n> \t\treturn\n> \t}\n> \ttext := s[urlEnd+2 : end]\n> \treturn renderLink(url, text), end + 2\n> }\n> \n> now the other functions are unnecessary.\n\nDone, but removed the check after finding urlEnd, since it's logically impossible\n\nhttps://codereview.appspot.com/6847128/diff/5002/pkg/present/style.go\nFile pkg/present/style.go (right):\n\nhttps://codereview.appspot.com/6847128/diff/5002/pkg/present/style.go#newcode49\npkg/present/style.go:49: if isInlineLink(word) {\nOn 2012/12/01 11:41:20, adg wrote:\n> if link, _ := parseInlineLink(word); link != \"\" {\n>     words[w] = link\n>     continue Word\n> }\n\nDone.\n\nhttps://codereview.appspot.com/6847128/diff/5002/pkg/present/style.go#newcode132\npkg/present/style.go:132: if start, end, found := findInlineLink(s, i); found {\nOn 2012/12/01 11:41:20, adg wrote:\n> if _, length := parseInlineLink(s[i:]) length > 0 {\n>   words = append(s[i:i+length])\n>   mark = i+length\n> }\n\nDone.\n\nhttps://codereview.appspot.com/6847128/diff/5002/pkg/present/style_test.go\nFile pkg/present/style_test.go (right):\n\nhttps://codereview.appspot.com/6847128/diff/5002/pkg/present/style_test.go#newcode22\npkg/present/style_test.go:22: {\"hey [[http://go/go][Gophers]] around\",\nOn 2012/12/01 11:41:20, adg wrote:\n> use a real url in these examples, like http://golang.org/doc/ or something.\n\nDone.\n\nhttps://codereview.appspot.com/6847128/diff/5002/pkg/present/style_test.go#newcode60\npkg/present/style_test.go:60: {\"_hey_ [[http://go/go][*Gophers*]] *around*\",\nOn 2012/12/01 11:41:20, adg wrote:\n> please add a test case for a link text with multiple words\n\nDone.\n\nhttps://codereview.appspot.com/6847128/diff/5002/pkg/present/style_test.go#newcode61\npkg/present/style_test.go:61: \"<i>hey</i> <a href=\\\"http://go/go\\\"><b>Gophers</b></a> <b>around</b>\"},\nOn 2012/12/01 11:41:20, adg wrote:\n> use `backquotes` to avoid the escaping\n\nDone.\n\nhttps://codereview.appspot.com/6847128/diff/5002/pkg/present/style_test.go#newcode62\npkg/present/style_test.go:62: {\"Visit [[http://go/go]] now\", \"Visit <a href=\\\"http://go/go\\\">http://go/go</a> now\"},\nOn 2012/12/01 11:41:20, adg wrote:\n> ditto\n\nDone.",
			"disapproval": false,
			"date": "2012-12-01 20:53:57.910400",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6847128/diff/19001/pkg/present/link_test.go\nFile pkg/present/link_test.go (right):\n\nhttps://codereview.appspot.com/6847128/diff/19001/pkg/present/link_test.go#newcode20\npkg/present/link_test.go:20: {\"[[http://golang.org]]\", \"http://golang.org\", \"http://golang.org\", 21},\nOn 2012/12/02 06:06:53, adg wrote:\n> add at least one test where the string doesn't begin with \"[[\"\n\nDone.\n\nhttps://codereview.appspot.com/6847128/diff/19001/pkg/present/link_test.go#newcode28\npkg/present/link_test.go:28: {\"[[http:// *spaces* .com]]\", \"http:// *spaces* .com\", \"http:// *spaces* .com\", 25},\nOn 2012/12/02 06:06:53, adg wrote:\n> I think we should disallow spaces in the URL, too. The RFC calls them out\n> specifically.\n\nDone.\n\nhttps://codereview.appspot.com/6847128/diff/19001/pkg/present/link_test.go#newcode36\npkg/present/link_test.go:36: if a := fmt.Sprintf(tmpl, test.link, test.text); length != test.length || link != a {\nOn 2012/12/02 06:06:53, adg wrote:\n> might as well use renderLink here.\n\nDone.",
			"disapproval": false,
			"date": "2012-12-03 05:13:36.185930",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"campoy@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6847128/diff/19001/pkg/present/link_test.go\nFile pkg/present/link_test.go (right):\n\nhttps://codereview.appspot.com/6847128/diff/19001/pkg/present/link_test.go#newcode20\npkg/present/link_test.go:20: {\"[[http://golang.org]]\", \"http://golang.org\", \"http://golang.org\", 21},\nadd at least one test where the string doesn't begin with \"[[\"\n\nhttps://codereview.appspot.com/6847128/diff/19001/pkg/present/link_test.go#newcode28\npkg/present/link_test.go:28: {\"[[http:// *spaces* .com]]\", \"http:// *spaces* .com\", \"http:// *spaces* .com\", 25},\nI think we should disallow spaces in the URL, too. The RFC calls them out specifically.\n\nhttps://codereview.appspot.com/6847128/diff/19001/pkg/present/link_test.go#newcode36\npkg/present/link_test.go:36: if a := fmt.Sprintf(tmpl, test.link, test.text); length != test.length || link != a {\nmight as well use renderLink here.",
			"disapproval": false,
			"date": "2012-12-02 06:06:53.108760",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6847128/diff/20003/pkg/present/doc.go\nFile pkg/present/doc.go (right):\n\nhttps://codereview.appspot.com/6847128/diff/20003/pkg/present/doc.go#newcode78\npkg/present/doc.go:78: Links can be inlined in the text using the syntax [[url][text]], or\nOn 2012/12/03 05:20:07, adg wrote:\n> Links can be included in any text with the form [[url][label]], or [[url]] to\n> use the URL itself as the label.\n> \n> (drop the part about font modifiers. That should be a given.\n\nDone.\n\nhttps://codereview.appspot.com/6847128/diff/20003/pkg/present/doc.go#newcode82\npkg/present/doc.go:82: Note that characters `[` and `]` are not allowed in neither url nor text.\nOn 2012/12/03 05:20:07, adg wrote:\n> actually [] can be used inside the text provided it's not ]]. I think you can\n> remove this line too.\n\nDone.",
			"disapproval": false,
			"date": "2012-12-03 05:25:38.300270",
			"approval": false
		}
	],
	"owner_email": "campoy@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gocampoy",
	"subject": "code review 6847128: go.talks/pkg/present: Adding inline links with style.",
	"created": "2012-11-30 23:50:35.903530",
	"patchsets": [
		1,
		2001,
		5001,
		7001,
		3004,
		4004,
		10005,
		8009,
		5002,
		13001,
		19001,
		20003,
		24001,
		24003
	],
	"modified": "2012-12-03 05:33:46.501220",
	"closed": true,
	"issue": 6847128
}