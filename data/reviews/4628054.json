{
	"description": "doc: test compile code snippets in docs\n\nFor discussion.  Works, but not complete.\n\nThis has come up a few times. What should this\nlook like?  Something simple like this? Or\ndo people have more grandiose plans?",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"gri@golang.org",
		"r@golang.org",
		"rsc@golang.org",
		"r@google.com"
	],
	"messages": [
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Jun 22, 2011, at 10:48 AM, Brad Fitzpatrick wrote:\n\n> On Tue, Jun 21, 2011 at 5:29 PM, <r@golang.org> wrote:\n> perhaps. it works. it's not easy to read but HTML is like that.\n> \n> for the record, the tutorial works the other way. the programs are real\n> and the documentation extracts the code from the programs.\n> \n> I saw that.  A lot of effective Go highlights different snippets of the same theoretical program.\n> \n> Perhaps the tutorial has it right.\n> \n> Maybe instead we do something like:\n> \n> * effective_go.html could be auto-generated from effective_go.tmpl.html\n> * *.tmpl.html files are html, but with named snippets, like:\n> \n>        Initialize your channel like:\n>        <pre><!--snippet channelsends.go init --></pre>\n>        Send like:\n>        <pre><!--snippet channelsends.go send --></pre>\n> \n> And then channelsends.go (which might be used for a dozen snippets), has annotations like:\n> \n> package main\n> func main() {\n>      /*<snip init>*/\n>      ch := make(chan int)\n>      /*</snip init>*/\n> \n>      /*<snip send>*/\n>      ch <- 42\n>      /*</snip send>*/\n> }\n> \n> \n> I think I prefer that over my CL, now that I've annotated a few things.\n\nI prefer this approach too. I think the \"snips\" could have less punctuation. i see six and seven characters of noise, plus the \"snip \", for each begin and end.\n\npackage main\nfunc main() {\n     //start init\n     ch := make(chan int)\n     //end init\n\n     //start send\n     ch <- 42\n     //end send\n}\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-06-22 00:53:15.671543",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "perhaps. it works. it's not easy to read but HTML is like that.\n\nfor the record, the tutorial works the other way. the programs are real and the documentation extracts the code from the programs.",
			"disapproval": false,
			"date": "2011-06-22 00:29:31.914711",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-06-21 22:59:08.910635",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "is it possible to do this not in perl?",
			"disapproval": false,
			"date": "2011-06-22 00:21:32.146217",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I can't comment on the Perl script, but the augmentation of the Go\ncode snippets (to make them complete stand-alone programs) seems\nminimal enough (perhaps the class name could just be \"code\"?).\n\nI am doing already something similar with the go spec (all the ebnf is\nextracted and checked for basic syntactic and some minimal semantic\nconsistency). I should do the same for the example code.\n\n- gri\n\nOn Tue, Jun 21, 2011 at 3:59 PM,  <bradfitz@golang.org> wrote:\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> doc: test compile code snippets in docs\n>\n> For discussion. \u00a0Works, but not complete.\n>\n> This has come up a few times. What should this\n> look like? \u00a0Something simple like this? Or\n> do people have more grandiose plans?\n>\n> Please review this at http://codereview.appspot.com/4628054/\n>\n> Affected files:\n> \u00a0A doc/buildsnippets.pl\n> \u00a0M doc/effective_go.html\n> \u00a0M doc/install.html\n>\n>\n> Index: doc/buildsnippets.pl\n> ===================================================================\n> new file mode 100755\n> --- /dev/null\n> +++ b/doc/buildsnippets.pl\n> @@ -0,0 +1,46 @@\n> +#!/usr/bin/perl\n> +\n> +use strict;\n> +use FindBin;\n> +use File::Temp ('tempdir');\n> +\n> +chdir \"$FindBin::Bin\" or die;\n> +\n> +my @files = `grep -l -r -E '\\\\bcompiletest\\\\b' .`;\n> +chomp @files;\n> +\n> +foreach my $f (@files) {\n> + \u00a0 \u00a0test_file($f);\n> +}\n> +\n> +sub test_file {\n> + \u00a0 \u00a0my $f = shift;\n> + \u00a0 \u00a0open(my $fh, $f) or die \"open $f: $!\";\n> + \u00a0 \u00a0my $body = do { local $/; <$fh> };\n> + \u00a0 \u00a0while ($body =~ s!<(span|pre) class=(['\"]?)compiletest\\2>(.+?)</\\1>!!s)\n> {\n> + \u00a0 \u00a0 \u00a0 \u00a0my $snippet = $3;\n> + \u00a0 \u00a0 \u00a0 \u00a0my $snippet_visible = $snippet;\n> + \u00a0 \u00a0 \u00a0 \u00a0$snippet_visible =~ s/<!--.*?-->//s;\n> + \u00a0 \u00a0 \u00a0 \u00a0$snippet =~ s/<!--//g;\n> + \u00a0 \u00a0 \u00a0 \u00a0$snippet =~ s/-->//g;\n> +\n> + \u00a0 \u00a0 \u00a0 \u00a0$snippet = \"package main\\n$snippet\" unless $snippet =~ /\\bpackage\n> \\w+/;\n> +\n> + \u00a0 \u00a0 \u00a0 \u00a0my $dir = tempdir(CLEANUP => 1);\n> + \u00a0 \u00a0 \u00a0 \u00a0$ENV{\"GOPATH\"} = $dir;\n> + \u00a0 \u00a0 \u00a0 \u00a0mkdir \"$dir/src\", 0700;\n> + \u00a0 \u00a0 \u00a0 \u00a0mkdir \"$dir/src/testsnippet\", 0700;\n> + \u00a0 \u00a0 \u00a0 \u00a0chdir(\"$dir/src/testsnippet\") or die;\n> + \u00a0 \u00a0 \u00a0 \u00a0open(my $gf, \">main.go\") or die \"main.go: $!\\n\";\n> + \u00a0 \u00a0 \u00a0 \u00a0print $gf $snippet;\n> + \u00a0 \u00a0 \u00a0 \u00a0close($gf);\n> + \u00a0 \u00a0 \u00a0 \u00a0system(\"goinstall\", \".\") and die \"Failed to build snippet from\n> $f:\\n$snippet\\n\";\n> + \u00a0 \u00a0 \u00a0 \u00a0chdir \"$FindBin::Bin\" or die;\n> +\n> + \u00a0 \u00a0 \u00a0 \u00a0my $snippet_line = $snippet_visible;\n> + \u00a0 \u00a0 \u00a0 \u00a0$snippet_line =~ s/[\\r\\n]/ /g;\n> + \u00a0 \u00a0 \u00a0 \u00a0$snippet_line =~ s/^(.{30}).+/$1/;\n> + \u00a0 \u00a0 \u00a0 \u00a0print \"Tested: $f, $snippet_line\\n\";\n> + \u00a0 \u00a0}\n> +}\n> +\n> Index: doc/effective_go.html\n> ===================================================================\n> --- a/doc/effective_go.html\n> +++ b/doc/effective_go.html\n> @@ -488,12 +488,16 @@\n> \u00a0statement, it's common to see one used to set up a local variable.\n> \u00a0</p>\n>\n> -<pre>\n> -if err := file.Chmod(0664); err != nil {\n> +<pre class=\"compiletest\"><!--\n> +import (\"os\"; \"log\")\n> +func main() {}\n> +func foo() os.Error {\n> + \u00a0 file, _ := os.Open(\"/tmp/foo\")\n> +-->if err := file.Chmod(0664); err != nil {\n> \u00a0 \u00a0 log.Print(err)\n> \u00a0 \u00a0 return err\n> -}\n> -</pre>\n> +}<!--\n> +return nil } --></pre>\n>\n> \u00a0<p id=\"else\">\n> \u00a0In the Go libraries, you'll find that\n> @@ -2828,8 +2832,12 @@\n> \u00a0an <code>error</code> method, and the <code>Compile</code> function.\n> \u00a0</p>\n>\n> -<pre>\n> -// Error is the type of a parse error; it satisfies os.Error.\n> +<pre class=\"compiletest\"><!--\n> +package foo\n> +import (\"os\")\n> +type Regexp struct{}\n> +func (re *Regexp) doParse(s string) *Regexp { return re }\n> +-->// Error is the type of a parse error; it satisfies os.Error.\n> \u00a0type Error string\n> \u00a0func (e Error) String() string {\n> \u00a0 \u00a0 return string(e)\n> Index: doc/install.html\n> ===================================================================\n> --- a/doc/install.html\n> +++ b/doc/install.html\n> @@ -216,14 +216,14 @@\n>\n> \u00a0<pre>\n> \u00a0$ cat &gt;hello.go &lt;&lt;EOF\n> -package main\n> +<span class=\"compiletest\">package main\n>\n> \u00a0import \"fmt\"\n>\n> \u00a0func main() {\n> \u00a0 \u00a0 \u00a0 \u00a0fmt.Printf(\"hello, world\\n\")\n> \u00a0}\n> -EOF\n> +</span>EOF\n> \u00a0$ 6g hello.go\n> \u00a0$ 6l hello.6\n> \u00a0$ ./6.out\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-06-21 23:55:28.272084",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Anything's possible.\n\nIs this the right annotation style, though?\n\nOn Tue, Jun 21, 2011 at 5:21 PM, <r@golang.org> wrote:\n\n> is it possible to do this not in perl?\n>\n>\n>\n> http://codereview.appspot.com/**4628054/<http://codereview.appspot.com/4628054/>\n>\n",
			"disapproval": false,
			"date": "2011-06-22 00:24:56.829294",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "by the way, the tutorial does one more thing, but it's perhaps a bridge too far: it generates the HTML too. i think your approach is better, but if we go that way we should bring the tutorial into the modern (1990s) era.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-06-22 00:55:01.734279",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Sure but please write it in Go.  You can use the xml parser to\ngrab individual tokens if the html parser cannot handle the docs.\n\nThis handles HTML documentation and seems fine for that.\nI would also like to have a story for showing collapsable\nexamples in godoc's package documentation and to\nrun those during gotest.\n\nThat might be a separate problem or it might be relevant.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-06-22 00:36:24.650661",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Tue, Jun 21, 2011 at 5:29 PM, <r@golang.org> wrote:\n\n> perhaps. it works. it's not easy to read but HTML is like that.\n>\n> for the record, the tutorial works the other way. the programs are real\n> and the documentation extracts the code from the programs.\n\n\nI saw that.  A lot of effective Go highlights different snippets of the same\ntheoretical program.\n\nPerhaps the tutorial has it right.\n\nMaybe instead we do something like:\n\n* effective_go.html could be auto-generated from effective_go.tmpl.html\n* *.tmpl.html files are html, but with named snippets, like:\n\n       Initialize your channel like:\n       <pre><!--snippet channelsends.go init --></pre>\n       Send like:\n       <pre><!--snippet channelsends.go send --></pre>\n\nAnd then channelsends.go (which might be used for a dozen snippets), has\nannotations like:\n\npackage main\nfunc main() {\n     /*<snip init>*/\n     ch := make(chan int)\n     /*</snip init>*/\n\n     /*<snip send>*/\n     ch <- 42\n     /*</snip send>*/\n}\n\n\nI think I prefer that over my CL, now that I've annotated a few things.\n",
			"disapproval": false,
			"date": "2011-06-22 00:48:07.417058",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 4628054: doc: test compile code snippets in docs",
	"created": "2011-06-21 22:58:23.813634",
	"patchsets": [
		1,
		1001,
		1002
	],
	"modified": "2011-10-06 18:22:02.766888",
	"closed": true,
	"issue": 4628054
}