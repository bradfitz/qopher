{
	"description": "go/parser: cleanups following CL 7307085\n\n- use the new AllErrors flag where appropriate\n- unless AllErrors is set, eliminate spurious\n  errors before they are added to the errors list\n  (it turns out that reporting spurious errors always\n  leads to too many uninformative errors after all)",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-02-14 20:46:49.782510",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Thu, Feb 14, 2013 at 12:46 PM, <gri@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> go/parser: cleanups following CL 7307085\r\n>\r\n> - use the new AllErrors flag where appropriate\r\n> - unless AllErrors is set, eliminate spurious\r\n>   errors before they are added to the errors list\r\n>   (it turns out that reporting spurious errors always\r\n>   leads to too many uninformative errors after all)\r\n>\r\n> Please review this at https://codereview.appspot.**com/7323065/<https://codereview.appspot.com/7323065/>\r\n>\r\n> Affected files:\r\n>   M src/cmd/gofmt/gofmt.go\r\n>   M src/pkg/exp/gotype/gotype.go\r\n>   M src/pkg/go/parser/error_test.**go\r\n>   M src/pkg/go/parser/interface.go\r\n>   M src/pkg/go/parser/parser.go\r\n>   M src/pkg/go/types/check_test.go\r\n>\r\n>\r\n> Index: src/cmd/gofmt/gofmt.go\r\n> ==============================**==============================**=======\r\n> --- a/src/cmd/gofmt/gofmt.go\r\n> +++ b/src/cmd/gofmt/gofmt.go\r\n> @@ -29,7 +29,7 @@\r\n>         rewriteRule = flag.String(\"r\", \"\", \"rewrite rule (e.g.,\r\n> 'a[b:len(a)] -> a[b:]')\")\r\n>         simplifyAST = flag.Bool(\"s\", false, \"simplify code\")\r\n>         doDiff      = flag.Bool(\"d\", false, \"display diffs instead of\r\n> rewriting files\")\r\n> -       allErrors   = flag.Bool(\"e\", false, \"print all (including\r\n> spurious) errors\")\r\n> +       allErrors   = flag.Bool(\"e\", false, \"report all errors (not just\r\n> the first 10 on different lines)\")\r\n>\r\n>         // layout control\r\n>         comments  = flag.Bool(\"comments\", true, \"print comments\")\r\n> @@ -65,7 +65,7 @@\r\n>                 parserMode |= parser.ParseComments\r\n>         }\r\n>         if *allErrors {\r\n> -               parserMode |= parser.SpuriousErrors\r\n> +               parserMode |= parser.AllErrors\r\n>         }\r\n>  }\r\n>\r\n> Index: src/pkg/exp/gotype/gotype.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/exp/gotype/gotype.go\r\n> +++ b/src/pkg/exp/gotype/gotype.go\r\n> @@ -23,7 +23,7 @@\r\n>         pkgName   = flag.String(\"p\", \"\", \"process only those files in\r\n> package pkgName\")\r\n>         recursive = flag.Bool(\"r\", false, \"recursively process\r\n> subdirectories\")\r\n>         verbose   = flag.Bool(\"v\", false, \"verbose mode\")\r\n> -       allErrors = flag.Bool(\"e\", false, \"print all (including spurious)\r\n> errors\")\r\n> +       allErrors = flag.Bool(\"e\", false, \"report all errors (not just the\r\n> first 10 on different lines)\")\r\n>\r\n>         // debugging support\r\n>         parseComments = flag.Bool(\"comments\", false, \"parse comments\r\n> (ignored if -ast not set)\")\r\n> @@ -71,7 +71,7 @@\r\n>         // parse entire file\r\n>         mode := parser.DeclarationErrors\r\n>         if *allErrors {\r\n> -               mode |= parser.SpuriousErrors\r\n> +               mode |= parser.AllErrors\r\n>         }\r\n>         if *parseComments && *printAST {\r\n>                 mode |= parser.ParseComments\r\n> Index: src/pkg/go/parser/error_test.**go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/go/parser/error_**test.go\r\n> +++ b/src/pkg/go/parser/error_**test.go\r\n> @@ -139,7 +139,7 @@\r\n>                 return\r\n>         }\r\n>\r\n> -       _, err = ParseFile(fsetErrs, filename, src, DeclarationErrors)\r\n> +       _, err = ParseFile(fsetErrs, filename, src,\r\n> DeclarationErrors|AllErrors)\r\n>         found, ok := err.(scanner.ErrorList)\r\n>         if err != nil && !ok {\r\n>                 t.Error(err)\r\n> Index: src/pkg/go/parser/interface.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/go/parser/interface.**go\r\n> +++ b/src/pkg/go/parser/interface.**go\r\n> @@ -52,13 +52,13 @@\r\n>  type Mode uint\r\n>\r\n>  const (\r\n> -       PackageClauseOnly Mode             = 1 << iota // parsing stops\r\n> after package clause\r\n> -       ImportsOnly                                    // parsing stops\r\n> after import declarations\r\n> +       PackageClauseOnly Mode             = 1 << iota // stop parsing\r\n> after package clause\r\n> +       ImportsOnly                                    // stop parsing\r\n> after import declarations\r\n>         ParseComments                                  // parse comments\r\n> and add them to AST\r\n>         Trace                                          // print a trace of\r\n> parsed productions\r\n>         DeclarationErrors                              // report\r\n> declaration errors\r\n>         SpuriousErrors                                 // same as\r\n> AllErrors, for backward-compatibility\r\n> -       AllErrors         = SpuriousErrors             // report all (not\r\n> just the first 10) errors per file\r\n> +       AllErrors         = SpuriousErrors             // report all\r\n> errors (not just the first 10 on different lines)\r\n>  )\r\n>\r\n>  // ParseFile parses the source code of a single Go source file and returns\r\n> Index: src/pkg/go/parser/parser.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/go/parser/parser.go\r\n> +++ b/src/pkg/go/parser/parser.go\r\n> @@ -344,10 +344,22 @@\r\n>  type bailout struct{}\r\n>\r\n>  func (p *parser) error(pos token.Pos, msg string) {\r\n> -       if p.mode&SpuriousErrors == 0 && p.errors.Len() >= 10 {\r\n> -               panic(bailout{})\r\n> +       epos := p.file.Position(pos)\r\n> +\r\n> +       // If AllErrors is not set, discard errors reported on the same\r\n> line\r\n> +       // as the last recorded error and stop parsing if there are more\r\n> than\r\n> +       // 10 errors.\r\n> +       if p.mode&AllErrors == 0 {\r\n> +               n := len(p.errors)\r\n> +               if n > 0 && p.errors[n-1].Pos.Line == epos.Line {\r\n> +                       return // discard - likely a spurious error\r\n> +               }\r\n> +               if n > 10 {\r\n> +                       panic(bailout{})\r\n> +               }\r\n>         }\r\n> -       p.errors.Add(p.file.Position(**pos), msg)\r\n> +\r\n> +       p.errors.Add(epos, msg)\r\n>  }\r\n>\r\n>  func (p *parser) errorExpected(pos token.Pos, msg string) {\r\n> Index: src/pkg/go/types/check_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/go/types/check_test.**go\r\n> +++ b/src/pkg/go/types/check_test.**go\r\n> @@ -92,7 +92,7 @@\r\n>         var files []*ast.File\r\n>         var errlist []error\r\n>         for _, filename := range filenames {\r\n> -               file, err := parser.ParseFile(fset, filename, nil,\r\n> parser.DeclarationErrors)\r\n> +               file, err := parser.ParseFile(fset, filename, nil,\r\n> parser.DeclarationErrors|**parser.AllErrors)\r\n>                 if file == nil {\r\n>                         t.Fatalf(\"%s: could not parse file %s\", testname,\r\n> filename)\r\n>                 }\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-14 21:24:53.439750",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=4dea2458c841 ***\n\ngo/parser: cleanups following CL 7307085\n\n- use the new AllErrors flag where appropriate\n- unless AllErrors is set, eliminate spurious\n  errors before they are added to the errors list\n  (it turns out that reporting spurious errors always\n  leads to too many uninformative errors after all)\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/7323065",
			"disapproval": false,
			"date": "2013-02-14 21:36:54.704110",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 7323065: go/parser: cleanups following CL 7307085",
	"created": "2013-02-14 20:44:37.480470",
	"patchsets": [
		1,
		3,
		4001,
		8001
	],
	"modified": "2013-02-14 21:36:57.012850",
	"closed": true,
	"issue": 7323065
}