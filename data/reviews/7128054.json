{
	"description": "text/template/parse: don't show itemType in error messages\nso that the user don't need to decipher something like this:\ntemplate: main:1: expected %!s(parse.itemType=14) in end; got \"|\"\nnow they get this:\ntemplate: main:1: unexpected \"|\" in end",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Jan 19, 2013 at 2:34 AM,  <r@golang.org> wrote:\r\n> a (much shorter) method for this is in lex_test.go. i'm surprised this\r\n> even compiles when you run the test - don't you get a conflict?\r\nobviously i incorrectly assumed that such an addition doesn't need to test.\r\napologies, this won't happen again.\r\n> if i remember correctly (which i probably don't) a while back i moved\r\n> the method into the test because i didn't think anything needed it\r\n> outside of tests. i guess i was wrong, one way or the other.\r\nare you fine with exposing the String() method? if not, i can change\r\nthe error reporting routines instead.\r\n> suggestion: move the method out of the test. i think it's fine to expose\r\n> the internal names, but if you disagree, update the tests to use your\r\n> friendlier notation\r\nok, i will update the test. nothing need to be updated.\r\n\r\nalso, do you want me to use an array mapping itemType to string?\r\nI don't like a map, because that will slow every program that uses the\r\npackage down unnecessarily.\r\n",
			"disapproval": false,
			"date": "2013-01-18 19:01:24.837110",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "most of these edits are because you've copied comments intended for readers of the code. consider the messages in the context you noticed them: user-visible error messages.\n\ni'd use an array or map, myself. this sort of switch bloats the code.\n\nhttps://codereview.appspot.com/7128054/diff/8002/src/pkg/text/template/parse/lex.go\nFile src/pkg/text/template/parse/lex.go (right):\n\nhttps://codereview.appspot.com/7128054/diff/8002/src/pkg/text/template/parse/lex.go#newcode79\nsrc/pkg/text/template/parse/lex.go:79: return \"printable ASCII character\"\nmaybe s/printable ASCII/punctuation/ it's for commas etc. at least drop the ASCII; that's an implementation detail.\n\nhttps://codereview.appspot.com/7128054/diff/8002/src/pkg/text/template/parse/lex.go#newcode91\nsrc/pkg/text/template/parse/lex.go:91: return \"identifier (alphanumeric identifier not starting with '.')\"\nhere and above drop the parenthetical remarks. maybe\n\nreturn \"dotted field\" or just \".field\"\nand\nreturn \"identifier\"\n\nhttps://codereview.appspot.com/7128054/diff/8002/src/pkg/text/template/parse/lex.go#newcode97\nsrc/pkg/text/template/parse/lex.go:97: return \"number (including imaginary)\"\ndrop parenthetical\n\nhttps://codereview.appspot.com/7128054/diff/8002/src/pkg/text/template/parse/lex.go#newcode101\nsrc/pkg/text/template/parse/lex.go:101: return \"raw quoted string (includes quotes)\"\ndrop parenthetical\n\nhttps://codereview.appspot.com/7128054/diff/8002/src/pkg/text/template/parse/lex.go#newcode109\nsrc/pkg/text/template/parse/lex.go:109: return \"quoted string (includes quotes)\"\ndrop parenthetical\n\nhttps://codereview.appspot.com/7128054/diff/8002/src/pkg/text/template/parse/lex.go#newcode114\nsrc/pkg/text/template/parse/lex.go:114: case itemKeyword: // used only to delimit the keywords\ndelete comment.",
			"disapproval": false,
			"date": "2013-01-18 20:16:47.523050",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\r\n\r\nI addressed all your comments, changed the big switch to an array,\r\nmoved String() method back to lex_test.go;\r\nand fixed the error reporting code to output correct names.\r\n\r\nOn Sat, Jan 19, 2013 at 4:18 AM,  <r@golang.org> wrote:\r\n> p.s. arrays are fine, but your specific argument against maps (run-time\r\n> performance) is not compelling; this is for error reporting only and not\r\n> even on the critical path.\r\nI'm talking about init() initializing the map, and this will slow every client\r\nprogram down (for example, the old map in lex_test.go is initialized on\r\nevery program start, however, most well-written Go program won't actually\r\nuse the map).\r\n> actually, the more i think about this the more i'd like to put the\r\n> String method  back into the tests and find the place that the itemType\r\n> is being formatted and fix those. they shouldn't be exposed at all.\r\nsure.\r\n",
			"disapproval": false,
			"date": "2013-01-18 20:52:58.559640",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-01-18 18:17:26.336020",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-18 19:01:34.693860",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "a (much shorter) method for this is in lex_test.go. i'm surprised this even compiles when you run the test - don't you get a conflict?\n\nif i remember correctly (which i probably don't) a while back i moved the method into the test because i didn't think anything needed it outside of tests. i guess i was wrong, one way or the other.\n\nsuggestion: move the method out of the test. i think it's fine to expose the internal names, but if you disagree, update the tests to use your friendlier notation",
			"disapproval": false,
			"date": "2013-01-18 18:34:30.169110",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "p.s. arrays are fine, but your specific argument against maps (run-time performance) is not compelling; this is for error reporting only and not even on the critical path.\n\nactually, the more i think about this the more i'd like to put the String method  back into the tests and find the place that the itemType is being formatted and fix those. they shouldn't be exposed at all.",
			"disapproval": false,
			"date": "2013-01-18 20:18:20.597460",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "it's not worth having this code in lex.go for two error messages\n\nhttps://codereview.appspot.com/7128054/diff/7004/src/pkg/text/template/parse/lex.go\nFile src/pkg/text/template/parse/lex.go (right):\n\nhttps://codereview.appspot.com/7128054/diff/7004/src/pkg/text/template/parse/lex.go#newcode105\nsrc/pkg/text/template/parse/lex.go:105: func (t itemType) name() string {\ns/name/string/\n\nhttps://codereview.appspot.com/7128054/diff/7004/src/pkg/text/template/parse/parse.go\nFile src/pkg/text/template/parse/parse.go (right):\n\nhttps://codereview.appspot.com/7128054/diff/7004/src/pkg/text/template/parse/parse.go#newcode154\nsrc/pkg/text/template/parse/parse.go:154: t.errorf(\"expected %s in %s; got %s\", expected.name(), context, token)\nif you rewrite this to:\n\n\"unexpected token %s in %s\", token, context\n\nand similarly down below, you can put things back as they were.",
			"disapproval": false,
			"date": "2013-01-18 21:30:52.181530",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Jan 19, 2013 at 5:30 AM, <r@golang.org> wrote:\r\n\r\n> it's not worth having this code in lex.go for two error messages\r\n>\r\nafter grepping the parse.go for the invocation of those two error functions,\r\ni have to agree that i did over-engineer this fix. thank you.\r\n\r\nok, now only a two lines fix remains.\r\n",
			"disapproval": false,
			"date": "2013-01-18 23:09:27.505440",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nthanks",
			"disapproval": false,
			"date": "2013-01-19 01:25:49.186460",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=4910d5f9c4d1 ***\n\ntext/template/parse: don't show itemType in error messages\nso that the user don't need to decipher something like this:\ntemplate: main:1: expected %!s(parse.itemType=14) in end; got \"|\"\nnow they get this:\ntemplate: main:1: unexpected \"|\" in end\n\nR=golang-dev, r\nCC=golang-dev\nhttps://codereview.appspot.com/7128054",
			"disapproval": false,
			"date": "2013-01-21 18:48:57.338080",
			"approval": false
		}
	],
	"owner_email": "minux.ma@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "minux",
	"subject": "code review 7128054: text/template/parse: implement String() for itemType",
	"created": "2013-01-18 11:48:34.379480",
	"patchsets": [
		1,
		2001,
		5001,
		12002,
		8002,
		9003,
		7004,
		1003,
		1004,
		19001
	],
	"modified": "2013-01-21 18:49:05.462160",
	"closed": true,
	"issue": 7128054
}