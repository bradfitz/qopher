{
	"description": "go/build: change //build to // +build\n\nNew rules as discussed on CL 5011046.\nAlso apply to C and assembly files, not just Go files.",
	"cc": [
		"r@golang.org",
		"rogpeppe@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5015051/diff/2001/src/pkg/go/build/dir.go\nFile src/pkg/go/build/dir.go (right):\n\nhttp://codereview.appspot.com/5015051/diff/2001/src/pkg/go/build/dir.go#newcode339\nsrc/pkg/go/build/dir.go:339: f := strings.Fields(string(bytes.TrimSpace(line[len(slashslash):])))\nOn 2011/09/15 19:27:37, r wrote:\n> why not use bytes.Fields?\n\none allocation vs len(f) allocations?",
			"disapproval": false,
			"date": "2011-09-15 19:39:52.097982",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello r (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2011-09-15 18:56:43.097143",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "i suppose\n\nanyway i did LGTM it",
			"disapproval": false,
			"date": "2011-09-15 19:46:34.779013",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5015051/diff/2001/src/pkg/go/build/dir.go\nFile src/pkg/go/build/dir.go (right):\n\nhttp://codereview.appspot.com/5015051/diff/2001/src/pkg/go/build/dir.go#newcode339\nsrc/pkg/go/build/dir.go:339: f := strings.Fields(string(bytes.TrimSpace(line[len(slashslash):])))\nwhy not use bytes.Fields?",
			"disapproval": false,
			"date": "2011-09-15 19:27:36.958193",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/15 19:39:52, rog wrote:\n> http://codereview.appspot.com/5015051/diff/2001/src/pkg/go/build/dir.go\n> File src/pkg/go/build/dir.go (right):\n> \n> http://codereview.appspot.com/5015051/diff/2001/src/pkg/go/build/dir.go#newcode339\n> src/pkg/go/build/dir.go:339: f :=\n> strings.Fields(string(bytes.TrimSpace(line[len(slashslash):])))\n> On 2011/09/15 19:27:37, r wrote:\n> > why not use bytes.Fields?\n> \n> one allocation vs len(f) allocations?\n\ni believe they both do one allocation.",
			"disapproval": false,
			"date": "2011-09-15 19:41:44.752622",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/15 19:41:44, r wrote:\n> On 2011/09/15 19:39:52, rog wrote:\n> > http://codereview.appspot.com/5015051/diff/2001/src/pkg/go/build/dir.go\n> > File src/pkg/go/build/dir.go (right):\n> > \n> >\n> http://codereview.appspot.com/5015051/diff/2001/src/pkg/go/build/dir.go#newcode339\n> > src/pkg/go/build/dir.go:339: f :=\n> > strings.Fields(string(bytes.TrimSpace(line[len(slashslash):])))\n> > On 2011/09/15 19:27:37, r wrote:\n> > > why not use bytes.Fields?\n> > \n> > one allocation vs len(f) allocations?\n> \n> i believe they both do one allocation.\n\nbut you'd have to convert the byte slice for each field to string in order to pass it to matchOSArch. unless i'm missing something.",
			"disapproval": false,
			"date": "2011-09-15 19:44:17.195805",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Sep 15, 2011 at 15:27,  <r@golang.org> wrote:\n> why not use bytes.Fields?\n\neventually i needed strings to call some other\nfunctions (like ctxt.matchOSArch).  i just delayed\nthe conversion until i was sure i would need it.\ni delayed it a little more and now it looks almost normal.\n\n\t\tif bytes.HasPrefix(line, slashslash) {\n\t\t\tline = bytes.TrimSpace(line[len(slashslash):])\n\t\t\tif len(line) > 0 && line[0] == '+' {\n\t\t\t\t// Looks like a comment +line.\n\t\t\t\tf := strings.Fields(string(line))\n",
			"disapproval": false,
			"date": "2011-09-15 20:32:05.114146",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "definitely nicer. do i sense an idiom emerging? the dual between\nbytes and strings is quite nice for this kind of transformation.\n\nOn 15 September 2011 21:32, Russ Cox <rsc@golang.org> wrote:\n> On Thu, Sep 15, 2011 at 15:27, \u00a0<r@golang.org> wrote:\n>> why not use bytes.Fields?\n>\n> eventually i needed strings to call some other\n> functions (like ctxt.matchOSArch). \u00a0i just delayed\n> the conversion until i was sure i would need it.\n> i delayed it a little more and now it looks almost normal.\n>\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if bytes.HasPrefix(line, slashslash) {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0line = bytes.TrimSpace(line[len(slashslash):])\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if len(line) > 0 && line[0] == '+' {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// Looks like a comment +line.\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0f := strings.Fields(string(line))\n>\n",
			"disapproval": false,
			"date": "2011-09-15 20:56:47.983208",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=a12d99eb48bb ***\n\ngo/build: change //build to // +build\n\nNew rules as discussed on CL 5011046.\nAlso apply to C and assembly files, not just Go files.\n\nR=r, rogpeppe\nCC=golang-dev\nhttp://codereview.appspot.com/5015051",
			"disapproval": false,
			"date": "2011-09-15 20:48:26.247996",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5015051: go/build: change //build to // +build",
	"created": "2011-09-15 18:55:53.596483",
	"patchsets": [
		1,
		2001,
		11001
	],
	"modified": "2011-09-15 20:48:27.752519",
	"closed": true,
	"issue": 5015051
}