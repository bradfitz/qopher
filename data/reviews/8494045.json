{
	"description": "reflect: document the unreliability of StringHeader and SliceHeader",
	"cc": [
		"golang-dev@googlegroups.com",
		"adg@golang.org",
		"dvyukov@google.com"
	],
	"reviewers": [
		"bradfitz@golang.org"
	],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-04-08 01:37:20.711440",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-04-08 01:39:08.039230",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-04-08 01:41:35.639290",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Anyone else?\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-04-08 01:42:00.842360",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=1f43d831c825 ***\n\nreflect: document the unreliability of StringHeader and SliceHeader\n\nR=golang-dev, adg, dvyukov\nCC=golang-dev\nhttps://codereview.appspot.com/8494045",
			"disapproval": false,
			"date": "2013-04-08 01:42:36.990720",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"r@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8494045/diff/4002/src/pkg/reflect/value.go\nFile src/pkg/reflect/value.go (right):\n\nhttps://codereview.appspot.com/8494045/diff/4002/src/pkg/reflect/value.go#newcode1706\nsrc/pkg/reflect/value.go:1706: // a separate, correctly typed pointer to the underlying data.\ns/correctly typed/correctly-typed/ ?\n\n\"so programs must keep a separate string or correctly-typed pointer to...\"\n\nAlso, I know we don't use the word \"reference\", but \"pointer\" feels weird here, considering we're talking about a string, where the pointer isn't typically visible.  On one hand, I'm sure anybody using reflect+unsafe knows what they're doing (eventually), but it also invites questions about why this is uintptr instead of *byte or, and whether *string is needed to keep it alive.\n\nCalling out \"string\" somehow like above might clarify both.  Or noting that that uintptr is for historical compatibility reasons.\n\nMaybe this is bike shedding, though.",
			"disapproval": false,
			"date": "2013-04-08 02:56:58.496970",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8494045/diff/4002/src/pkg/reflect/value.go\nFile src/pkg/reflect/value.go (right):\n\nhttps://codereview.appspot.com/8494045/diff/4002/src/pkg/reflect/value.go#newcode1706\nsrc/pkg/reflect/value.go:1706: // a separate, correctly typed pointer to the underlying data.\nOn 2013/04/08 02:56:58, bradfitz wrote:\n> s/correctly typed/correctly-typed/ ?\n\nit's correct as is. we're not making an adjective.\n\n> \"so programs must keep a separate string or correctly-typed pointer to...\"\n\nit's a pointer to the data. if you (not you, but some other you) need that explained to you, and you don't understand that a string includes a pointer, you shouldn't be within a hundred yards of this type.",
			"disapproval": false,
			"date": "2013-04-08 04:06:41.563430",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 8494045: reflect: document the unreliability of StringHeader and...",
	"created": "2013-04-08 01:37:15.463810",
	"patchsets": [
		1,
		4002
	],
	"modified": "2013-04-08 04:06:41.818320",
	"closed": true,
	"issue": 8494045
}