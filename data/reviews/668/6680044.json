{
	"description": "cmd/go: add join template function.\n\nIt's common to use the go list command in shell scripts, but\ncurrently it's awkward to print a string slice from the Package\ntype in a way that's easily parseable by the shell.  For example:\n\n        go list -f '{{range .Deps}}{{.}}\n        {{end}}'\n\n(and even that prints an unwanted new line at the end|).\n\nTo make this easier, this CL adds a \"join\" function to the\nformat template.\n\n        go list -f '{{join .Deps \"\\n\"}}'",
	"cc": [
		"rsc@golang.org",
		"dsymonds@golang.org",
		"minux.ma@gmail.com",
		"remyoudompheng@gmail.com",
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I also prefer join. Especially if I can write {{ .Deps | join \", \" }}\r\n\r\n2012/10/13, David Symonds <dsymonds@golang.org>:\r\n> A join function would be better.\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-13 12:34:31.715790",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"rogpeppe@gmail.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, dsymonds@golang.org, minux.ma@gmail.com, remyoudompheng@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-15 09:48:57.602560",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"rogpeppe@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-10-13 12:11:50.751000",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Oct 13, 2012 at 8:34 PM, R\u00e9my Oudompheng\r\n<remyoudompheng@gmail.com>wrote:\r\n\r\n> I also prefer join. Especially if I can write {{ .Deps | join \", \" }}\r\n>\r\n+1. join without hardcoding join character to \\n is more useful.\r\n",
			"disapproval": false,
			"date": "2012-10-13 12:38:48.305720",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "A join function would be better.\r\n",
			"disapproval": false,
			"date": "2012-10-13 12:23:38.661860",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"rogpeppe@gmail.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6680044/diff/5001/src/cmd/go/list.go\nFile src/cmd/go/list.go (right):\n\nhttps://codereview.appspot.com/6680044/diff/5001/src/cmd/go/list.go#newcode130\nsrc/cmd/go/list.go:130: if out.Count() > 0 {\ni still prefer to fix the extra \\n problem at least.\n(I don't oppose to the added list function)\n\ni think the reason why cmd/go will add a \\n unconditionally\nis to avoid miss one at the end,\nbut the logic here can be changed to provide extra \\n\nonly when really necessary.\n\nhttps://codereview.appspot.com/6680044/diff/5001/src/cmd/go/list.go#newcode159\nsrc/cmd/go/list.go:159: func (cw *CountingWriter) Write(p []byte) (n int, err error) {\nfor example, we only need to look at p[len(p)-1],\nand if it is '\\n' set count = 0; otherwise set count=1;\nno other code need to be changed to remove the\nextra \\n.\n\n(if we choose to go this route, CountingWriter should be\nrenamed)",
			"disapproval": false,
			"date": "2012-10-13 12:27:00.424940",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rogpeppe@gmail.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I like the idea. Not sure it makes sense to swap the arguments. Now you can do\n\n{{join .Deps \",\"}}\n\nand even\n\n{{join (complex|pipeline) \",\"}\n\nI understand the rationale for putting it first, but it makes it different from strings.Join, which I think will confuse Go programmers.",
			"disapproval": false,
			"date": "2012-10-16 17:36:14.845000",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"rogpeppe@gmail.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, dsymonds@golang.org, minux.ma@gmail.com, remyoudompheng@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-17 15:05:00.687100",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"rogpeppe@gmail.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6680044/diff/20002/src/cmd/go/list.go\nFile src/cmd/go/list.go (right):\n\nhttp://codereview.appspot.com/6680044/diff/20002/src/cmd/go/list.go#newcode31\nsrc/cmd/go/list.go:31: which takes a slice of strings and a separator string and returns\nmaybe it'd be simpler to reference strings.Join here, and then the user has a place to go to read about edge cases.",
			"disapproval": false,
			"date": "2012-10-17 22:41:29.572820",
			"approval": true
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"rogpeppe@gmail.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6680044/diff/20002/src/cmd/go/list.go\nFile src/cmd/go/list.go (right):\n\nhttp://codereview.appspot.com/6680044/diff/20002/src/cmd/go/list.go#newcode31\nsrc/cmd/go/list.go:31: which takes a slice of strings and a separator string and returns\nOn 2012/10/17 22:41:29, dsymonds wrote:\n> maybe it'd be simpler to reference strings.Join here, and then the user has a\n> place to go to read about edge cases.\n\nI considered this, but there really aren't any edge cases, and in general I think it's nicer if docs for a command don't require looking in the package docs too.\n\nHowever, maybe:\n\n// One extra template function is available, \"join\"\n// which calls strings.Join.\n\nis less awkward, and everyone should know about strings.Join already, right?\n\nI'll go with that unless you or others have a better suggestion.",
			"disapproval": false,
			"date": "2012-10-18 10:01:51.094700",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This all feels too ad hoc to me.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-10-18 10:55:41.017410",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yes, it is ad hoc. I'd really like to be able to conveniently use go list\r\nin shell scripts though. If you wanted to suggest adding\r\nsomething that granted similar convenience to all templates,\r\nI'd be very happy.\r\n\r\nOn 18 October 2012 11:55, Rob Pike <r@golang.org> wrote:\r\n> This all feels too ad hoc to me.\r\n>\r\n> -rob\r\n",
			"disapproval": false,
			"date": "2012-10-18 12:05:34.037130",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rogpeppe@gmail.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "After cogitation and discussion I'm OK with this.\n\nhttp://codereview.appspot.com/6680044/diff/20002/src/cmd/go/list.go\nFile src/cmd/go/list.go (right):\n\nhttp://codereview.appspot.com/6680044/diff/20002/src/cmd/go/list.go#newcode31\nsrc/cmd/go/list.go:31: which takes a slice of strings and a separator string and returns\nFor people using this feature of cmd/go, some programming ability is expected. I think your rewrite is good, except for the missing comma after \"join\".",
			"disapproval": false,
			"date": "2012-10-19 21:24:18.610540",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"rogpeppe@gmail.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"minux.ma@gmail.com",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=117f773ed6b0 ***\n\ncmd/go: add join template function.\n\nIt's common to use the go list command in shell scripts, but\ncurrently it's awkward to print a string slice from the Package\ntype in a way that's easily parseable by the shell.  For example:\n\n        go list -f '{{range .Deps}}{{.}}\n        {{end}}'\n\n(and even that prints an unwanted new line at the end|).\n\nTo make this easier, this CL adds a \"join\" function to the\nformat template.\n\n        go list -f '{{join .Deps \"\\n\"}}'\n\nR=rsc, dsymonds, minux.ma, remyoudompheng, r\nCC=golang-dev\nhttp://codereview.appspot.com/6680044",
			"disapproval": false,
			"date": "2012-10-22 07:59:07.067140",
			"approval": false
		}
	],
	"owner_email": "rogpeppe@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "rog",
	"subject": "code review 6680044: cmd/go: add join template function.",
	"created": "2012-10-13 12:10:15.453020",
	"patchsets": [
		1,
		2001,
		5001,
		11001,
		14001,
		17001,
		19001,
		20002,
		23003,
		28001
	],
	"modified": "2012-10-22 07:59:09.028100",
	"closed": true,
	"issue": 6680044
}