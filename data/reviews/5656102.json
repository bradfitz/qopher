{
	"description": "encoding/json: disable anonymous fields\n\nWe should, after Go 1, make them work the same as\npackage xml, that is, make them appear in the outer\nstruct.  For now turn them off so that people do not\ndepend on the old behavior.\n\nFixing them is issue 3069.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as af5a7f6d962d ***\n\nencoding/json: disable anonymous fields\n\nWe should, after Go 1, make them work the same as\npackage xml, that is, make them appear in the outer\nstruct.  For now turn them off so that people do not\ndepend on the old behavior.\n\nFixing them is issue 3069.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5656102",
			"disapproval": false,
			"date": "2012-02-19 05:27:09.298106",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-02-19 05:15:05.283767",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn Sat, Feb 18, 2012 at 9:15 PM, <rsc@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://code.google.com/p/go/\n>\n>\n> Description:\n> encoding/json: disable anonymous fields\n>\n> We should, after Go 1, make them work the same as\n> package xml, that is, make them appear in the outer\n> struct.  For now turn them off so that people do not\n> depend on the old behavior.\n>\n> Fixing them is issue 3069.\n>\n> Please review this at http://codereview.appspot.com/**5656102/<http://codereview.appspot.com/5656102/>\n>\n> Affected files:\n>  M src/pkg/encoding/json/decode.**go\n>  M src/pkg/encoding/json/decode_**test.go\n>  M src/pkg/encoding/json/encode.**go\n>\n>\n> Index: src/pkg/encoding/json/decode.**go\n> ==============================**==============================**=======\n> --- a/src/pkg/encoding/json/**decode.go\n> +++ b/src/pkg/encoding/json/**decode.go\n> @@ -496,6 +496,12 @@\n>                                        // Pretend this field doesn't exist.\n>                                        continue\n>                                }\n> +                               if sf.Anonymous {\n> +                                       // Pretend this field doesn't\n> exist,\n> +                                       // so that we can do a good job\n> with\n> +                                       // these in a later version.\n> +                                       continue\n> +                               }\n>                                // First, tag match\n>                                tagName, _ := parseTag(tag)\n>                                if tagName == key {\n> @@ -963,3 +969,11 @@\n>        }\n>        return b[0:w], true\n>  }\n> +\n> +// The following is issue 3069.\n> +\n> +// BUG(rsc): This package ignores anonymous (embedded) struct fields\n> +// during encoding and decoding.  A future version may assign meaning\n> +// to them.  To force an anonymous field to be ignored in all future\n> +// versions of this package, use an explicit `json:\"-\"` tag in the struct\n> +// definition.\n> Index: src/pkg/encoding/json/decode_**test.go\n> ==============================**==============================**=======\n> --- a/src/pkg/encoding/json/**decode_test.go\n> +++ b/src/pkg/encoding/json/**decode_test.go\n> @@ -619,3 +619,32 @@\n>                t.Errorf(\"got %+v, want %+v\", got, want)\n>        }\n>  }\n> +\n> +// Test that anonymous fields are ignored.\n> +// We may assign meaning to them later.\n> +func TestAnonymous(t *testing.T) {\n> +       type S struct {\n> +               T\n> +               N int\n> +       }\n> +\n> +       data, err := Marshal(new(S))\n> +       if err != nil {\n> +               t.Fatalf(\"Marshal: %v\", err)\n> +       }\n> +       want := `{\"N\":0}`\n> +       if string(data) != want {\n> +               t.Fatalf(\"Marshal = %#q, want %#q\", string(data), want)\n> +       }\n> +\n> +       var s S\n> +       if err := Unmarshal([]byte(`{\"T\": 1, \"T\": {\"Y\": 1}, \"N\": 2}`),\n> &s); err != nil {\n> +               t.Fatalf(\"Unmarshal: %v\", err)\n> +       }\n> +       if s.N != 2 {\n> +               t.Fatal(\"Unmarshal: did not set N\")\n> +       }\n> +       if s.T.Y != 0 {\n> +               t.Fatal(\"Unmarshal: did set T.Y\")\n> +       }\n> +}\n> Index: src/pkg/encoding/json/encode.**go\n> ==============================**==============================**=======\n> --- a/src/pkg/encoding/json/**encode.go\n> +++ b/src/pkg/encoding/json/**encode.go\n> @@ -538,6 +538,11 @@\n>                if f.PkgPath != \"\" {\n>                        continue\n>                }\n> +               if f.Anonymous {\n> +                       // We want to do a better job with these later,\n> +                       // so for now pretend they don't exist.\n> +                       continue\n> +               }\n>                var ef encodeField\n>                ef.i = i\n>                ef.tag = f.Name\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-02-19 05:17:30.136813",
			"approval": true
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5656102: encoding/json: disable anonymous fields",
	"created": "2012-02-19 00:26:50.789866",
	"patchsets": [
		1,
		2001,
		2005
	],
	"modified": "2012-02-19 05:27:10.373613",
	"closed": true,
	"issue": 5656102
}