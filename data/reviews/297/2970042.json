{
	"description": "doc: fix go_spec spelling errors",
	"cc": [
		"gri@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello gri (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change.",
			"disapproval": false,
			"date": "2010-11-09 18:04:04.191704",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n- gri\n\nOn Tue, Nov 9, 2010 at 10:04 AM, <go.peter.90@gmail.com> wrote:\n\n> Reviewers: gri,\n>\n> Message:\n> Hello gri (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change.\n>\n>\n> Description:\n> doc: fix go_spec spelling errors\n>\n> Please review this at http://codereview.appspot.com/2970042/\n>\n> Affected files:\n>  M doc/go_spec.html\n>\n>\n> Index: doc/go_spec.html\n> ===================================================================\n> --- a/doc/go_spec.html\n> +++ b/doc/go_spec.html\n> @@ -956,7 +956,7 @@\n>  <p>\n>  A pointer type denotes the set of all pointers to variables of a given\n>  type, called the <i>base type</i> of the pointer.\n> -The value of an unitialized pointer is <code>nil</code>.\n> +The value of an uninitialized pointer is <code>nil</code>.\n>  </p>\n>\n>  <pre class=\"ebnf\">\n> @@ -973,7 +973,7 @@\n>\n>  <p>\n>  A function type denotes the set of all functions with the same parameter\n> -and result types. The value of an unitialized variable of function type\n> +and result types. The value of an uninitialized variable of function type\n>  is <code>nil</code>.\n>  </p>\n>\n> @@ -1022,7 +1022,7 @@\n>  A variable of interface type can store a value of any type with a method\n> set\n>  that is any superset of the interface. Such a type is said to\n>  <i>implement the interface</i>.\n> -The value of an unitialized variable of interface type is\n> <code>nil</code>.\n> +The value of an uninitialized variable of interface type is\n> <code>nil</code>.\n>  </p>\n>\n>  <pre class=\"ebnf\">\n> @@ -2929,7 +2929,7 @@\n>        String values are compared byte-wise (lexically).\n>        </li>\n>        <li>\n> -       Boolean values are are equal if they are either both\n> +       Boolean values are equal if they are either both\n>        <code>true</code> or both <code>false</code>.\n>        </li>\n>        <li>\n> @@ -4206,7 +4206,7 @@\n>  }\n>  </pre>\n>        </li>\n> -       <li>The expression list may be empty if the functions's result\n> +       <li>The expression list may be empty if the function's result\n>                type specifies names for its result parameters (\u00a7<a\n> href=\"#Function_Types\">Function Types</a>).\n>                The result parameters act as ordinary local variables\n>                and the function may assign values to them as necessary.\n>\n>\n>\n",
			"disapproval": false,
			"date": "2010-11-09 18:09:51.486904",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"go.peter.90@gmail.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=467d5457feca ***\n\ndoc: fix go_spec spelling errors\n\nR=gri\nCC=golang-dev\nhttp://codereview.appspot.com/2970042\n\nCommitter: Robert Griesemer <gri@golang.org>",
			"disapproval": false,
			"date": "2010-11-09 18:11:28.099709",
			"approval": false
		}
	],
	"owner_email": "go.peter.90@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "peterGo",
	"subject": "code review 2970042: doc: fix go_spec spelling errors",
	"created": "2010-11-09 18:00:07.210884",
	"patchsets": [
		1,
		2001
	],
	"modified": "2010-11-09 18:11:28.099709",
	"closed": false,
	"issue": 2970042
}