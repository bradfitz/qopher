{
	"description": "go.crypto/ssh: improve channel max packet handling\n\nThis proposal moves the check for max packet into\nchannel.writePacket. Callers should be aware they cannot\npass a buffer larger than max packet. This is only a\nconcern to chanWriter.Write and appropriate guards are\nalready in place.\n\nThere was some max packet handling in transport.go but it was\nincorrect. This has been removed.\n\nThis proposal also cleans up session_test.go.",
	"cc": [
		"gustav.paul@gmail.com",
		"agl@golang.org",
		"fullung@gmail.com",
		"huin@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"agl@golang.org",
				"fullung@gmail.com",
				"huin@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello\n\nOn 2012/08/11 07:18:33, dfc wrote:\n> Hello mailto:gustav.paul@gmail.com, mailto:agl@golang.org, mailto:fullung@gmail.com, mailto:huin@google.com\n> (cc: mailto:golang-dev@googlegroups.com),\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go.crypto\n\nI'm quite new to the SSH code, so maybe I'm on the wrong track here.\n\nThis makes me a bit nervous:\n\n\"Methods like channel.stdin.Write still need to check that they are not passing more than maxpacket - header worth of data.\"\n\nAs soon as you do anything vaguely interesting like using Stdin as an io.Writer to which you write protocol buffers, gob, or large strings, you don't really have control over how large your writes are. \n\nI guess you could always use io.CopyN, but I can see lots of people not knowing to do that and having their programs blow up when handling longer data.\n\nRegards\n\nAlbert",
			"disapproval": false,
			"date": "2012-08-11 08:02:27.810470",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"agl@golang.org",
				"fullung@gmail.com",
				"huin@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gustav.paul@gmail.com, agl@golang.org, fullung@gmail.com, huin@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-11 23:57:44.656510",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"agl@golang.org",
				"fullung@gmail.com",
				"huin@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=78aaaa8a7361&repo=crypto ***\n\ngo.crypto/ssh: improve channel max packet handling\n\nThis proposal moves the check for max packet into\nchannel.writePacket. Callers should be aware they cannot\npass a buffer larger than max packet. This is only a\nconcern to chanWriter.Write and appropriate guards are\nalready in place.\n\nThere was some max packet handling in transport.go but it was\nincorrect. This has been removed.\n\nThis proposal also cleans up session_test.go.\n\nR=gustav.paul, agl, fullung, huin\nCC=golang-dev\nhttp://codereview.appspot.com/6460075",
			"disapproval": false,
			"date": "2012-08-12 22:22:59.017430",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"agl@golang.org",
				"fullung@gmail.com",
				"huin@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for your comments agl. I'll leave this review open for a while longer to catch any additional comments.\n\nhttp://codereview.appspot.com/6460075/diff/10001/ssh/channel.go\nFile ssh/channel.go (right):\n\nhttp://codereview.appspot.com/6460075/diff/10001/ssh/channel.go#newcode120\nssh/channel.go:120: return fmt.Errorf(\"ssh: cannot write %d, maxPacket is %d\", len(b), c.maxPacket)\nOn 2012/08/11 16:37:37, agl1 wrote:\n> (nit) \"ssh: cannot write %d bytes, maxPacket is %d bytes\"\n\nDone.\n\nhttp://codereview.appspot.com/6460075/diff/10001/ssh/channel.go#newcode464\nssh/channel.go:464: c.maxPacket = msg.MaxPacketSize\nOn 2012/08/11 16:37:37, agl1 wrote:\n> (top-level): const headerLength = 9 (if it's not already defined somewhere)\n> \n> if msg.MaxPacketSize < headerLength {\n>   return errors.New(\"ssh: invalid MaxPacketSize from peer\")\n> }\n\nDone.\n\nhttp://codereview.appspot.com/6460075/diff/10001/ssh/channel.go#newcode492\nssh/channel.go:492: n := min(int(w.maxPacket-9), len(data))\nOn 2012/08/11 16:37:37, agl1 wrote:\n> s/9/headerLength\n\nDone.\n\nhttp://codereview.appspot.com/6460075/diff/10001/ssh/server.go\nFile ssh/server.go (right):\n\nhttp://codereview.appspot.com/6460075/diff/10001/ssh/server.go#newcode567\nssh/server.go:567: c := &serverChan{\nOn 2012/08/11 16:37:37, agl1 wrote:\n> if msg.MaxPacketSize < headerLength {\n>   ...\n> }\n\nDone.",
			"disapproval": false,
			"date": "2012-08-11 23:57:26.980410",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"agl@golang.org",
				"fullung@gmail.com",
				"huin@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6460075/diff/10001/ssh/channel.go\nFile ssh/channel.go (right):\n\nhttp://codereview.appspot.com/6460075/diff/10001/ssh/channel.go#newcode120\nssh/channel.go:120: return fmt.Errorf(\"ssh: cannot write %d, maxPacket is %d\", len(b), c.maxPacket)\n(nit) \"ssh: cannot write %d bytes, maxPacket is %d bytes\"\n\nhttp://codereview.appspot.com/6460075/diff/10001/ssh/channel.go#newcode464\nssh/channel.go:464: c.maxPacket = msg.MaxPacketSize\n(top-level): const headerLength = 9 (if it's not already defined somewhere)\n\nif msg.MaxPacketSize < headerLength {\n  return errors.New(\"ssh: invalid MaxPacketSize from peer\")\n}\n\nhttp://codereview.appspot.com/6460075/diff/10001/ssh/channel.go#newcode492\nssh/channel.go:492: n := min(int(w.maxPacket-9), len(data))\ns/9/headerLength\n\nhttp://codereview.appspot.com/6460075/diff/10001/ssh/server.go\nFile ssh/server.go (right):\n\nhttp://codereview.appspot.com/6460075/diff/10001/ssh/server.go#newcode567\nssh/server.go:567: c := &serverChan{\nif msg.MaxPacketSize < headerLength {\n  ...\n}",
			"disapproval": false,
			"date": "2012-08-11 16:37:37.532190",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"agl@golang.org",
				"fullung@gmail.com",
				"huin@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gustav.paul@gmail.com, agl@golang.org, fullung@gmail.com, huin@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.crypto",
			"disapproval": false,
			"date": "2012-08-11 07:18:33.974460",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"agl@golang.org",
				"fullung@gmail.com",
				"huin@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I have updated the description to clarify the restrictions on calling writePacket.",
			"disapproval": false,
			"date": "2012-08-11 08:55:55.559120",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> \"Methods like channel.stdin.Write still need to check that they are not\r\n> passing more than maxpacket - header worth of data.\"\r\n>\r\n> As soon as you do anything vaguely interesting like using Stdin as an\r\n> io.Writer to which you write protocol buffers, gob, or large strings,\r\n> you don't really have control over how large your writes are.\r\n\r\nAhh, yes, that does need some explaining. TL;DR the contract for\r\nstdin.Write is not changing.\r\n\r\nWhat is changing is callers to channel.writePacket() need to be aware\r\nthere is a limit, and that limit is channel.maxPacket. In the case of\r\ncallers like stdin.Write, they also need to consider the 9 byte header\r\nthat precedes the data. That is also taken care of by\r\nchanWriter.Write.\r\n\r\nHopefully this clarifies things.\r\n",
			"disapproval": false,
			"date": "2012-08-11 08:06:36.983840",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"gustav.paul@gmail.com",
				"agl@golang.org",
				"fullung@gmail.com",
				"huin@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gustav.paul@gmail.com, agl@golang.org, fullung@gmail.com, huin@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-11 08:55:25.950680",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 6460075: go.crypto/ssh: improve channel max packet handling",
	"created": "2012-08-11 03:22:09.765200",
	"patchsets": [
		1,
		2001,
		3,
		1008,
		7001,
		10001,
		4010,
		6010
	],
	"modified": "2012-08-12 22:23:01.998410",
	"closed": true,
	"issue": 6460075
}