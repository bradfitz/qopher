{
	"description": "strconv: faster FormatFloat for fixed number of digits.\n\nThe performance improvement applies to the case where\nprec >= 0 and fmt is 'e' or 'g'.\n\nAdditional minor optimisations are included. A small\nperformance impact happens in some cases due to code\nrefactoring.\n\nbenchmark                              old ns/op    new ns/op    delta\nBenchmarkAppendFloat64Fixed1                 623          235  -62.28%\nBenchmarkAppendFloat64Fixed2                1050          272  -74.10%\nBenchmarkAppendFloat64Fixed3                3723          243  -93.47%\nBenchmarkAppendFloat64Fixed4               10285          274  -97.34%\n\nBenchmarkAppendFloatDecimal                  190          206   +8.42%\nBenchmarkAppendFloat                         387          377   -2.58%\nBenchmarkAppendFloatExp                      397          339  -14.61%\nBenchmarkAppendFloatNegExp                   377          336  -10.88%\nBenchmarkAppendFloatBig                      546          482  -11.72%\n\nBenchmarkAppendFloat32Integer                188          204   +8.51%\nBenchmarkAppendFloat32ExactFraction          329          298   -9.42%\nBenchmarkAppendFloat32Point                  400          372   -7.00%\nBenchmarkAppendFloat32Exp                    369          306  -17.07%\nBenchmarkAppendFloat32NegExp                 372          305  -18.01%",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org",
		"remy@archlinux.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-08-12 16:22:27.993260",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "A benchmark similar to AppendFloat64Fixed* using the following C function:\n\nvoid BenchmarkFtoa(int N, float64 x) {\n  static char buffer[64];\n  int l;\n  printf(\"test %g, \", x);\n  for(int i = 0; i < N; i++)\n    l = snprintf(buffer, 64, \"%.3e\", x);\n  buffer[l] = 0;\n  printf(\"result %s\\n\", buffer);\n}\n\nfor large N says the following times (on my machine using glibc)\n\nCase 1 (123456):      572.6 ns/op\nCase 2 (123.456):     573.9 ns/op\nCase 3 (1.23456e+78): 845.3 ns/op\nCase 4 (1.23456e-78): 524.0 ns/op",
			"disapproval": false,
			"date": "2012-08-12 16:25:01.959390",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6462049/diff/3004/src/pkg/strconv/extfloat.go\nFile src/pkg/strconv/extfloat.go (right):\n\nhttp://codereview.appspot.com/6462049/diff/3004/src/pkg/strconv/extfloat.go#newcode382\nsrc/pkg/strconv/extfloat.go:382: // FixedDecimal stored in d the first n significant digits\ns/stored/stores/\n\nhttp://codereview.appspot.com/6462049/diff/3004/src/pkg/strconv/extfloat.go#newcode384\nsrc/pkg/strconv/extfloat.go:384: // whenever the precision was too low to return a correct answer.\n// if it cannot be sure of the answer.\n\nhttp://codereview.appspot.com/6462049/diff/3004/src/pkg/strconv/extfloat.go#newcode387\nsrc/pkg/strconv/extfloat.go:387: d.d[0] = '0'\nWhy set d.d[0] when d.nd == 0?\n\nhttp://codereview.appspot.com/6462049/diff/3004/src/pkg/strconv/extfloat.go#newcode396\nsrc/pkg/strconv/extfloat.go:396: const minExp = -60\nPlease add a comment explaining where these came from.\nWhy are both negative, for example?",
			"disapproval": false,
			"date": "2012-08-31 11:27:33.484720",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-01 10:08:47.575200",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6462049/diff/3004/src/pkg/strconv/extfloat.go\nFile src/pkg/strconv/extfloat.go (right):\n\nhttp://codereview.appspot.com/6462049/diff/3004/src/pkg/strconv/extfloat.go#newcode382\nsrc/pkg/strconv/extfloat.go:382: // FixedDecimal stored in d the first n significant digits\nOn 2012/08/31 11:27:33, rsc wrote:\n> s/stored/stores/\n\nDone.\n\nhttp://codereview.appspot.com/6462049/diff/3004/src/pkg/strconv/extfloat.go#newcode384\nsrc/pkg/strconv/extfloat.go:384: // whenever the precision was too low to return a correct answer.\nOn 2012/08/31 11:27:33, rsc wrote:\n> // if it cannot be sure of the answer.\n\nDone.\n\nhttp://codereview.appspot.com/6462049/diff/3004/src/pkg/strconv/extfloat.go#newcode387\nsrc/pkg/strconv/extfloat.go:387: d.d[0] = '0'\nOn 2012/08/31 11:27:33, rsc wrote:\n> Why set d.d[0] when d.nd == 0?\n\nDone.\n\nhttp://codereview.appspot.com/6462049/diff/3004/src/pkg/strconv/extfloat.go#newcode396\nsrc/pkg/strconv/extfloat.go:396: const minExp = -60\nOn 2012/08/31 11:27:33, rsc wrote:\n> Please add a comment explaining where these came from.\n> Why are both negative, for example?\n\nThe extFloat structure represents numbers as mantissa*2^exp where mantissa is an integer. The goal of frexp10 is to multiply by some power of ten to get a number approx. equal to 1, so the exponent is negative.\n\nAnyway, frexp10 is always called with the same arguments, so I moved the constants there.",
			"disapproval": false,
			"date": "2012-09-01 10:08:38.895270",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=70d1223bcd34 ***\n\nstrconv: faster FormatFloat for fixed number of digits.\n\nThe performance improvement applies to the case where\nprec >= 0 and fmt is 'e' or 'g'.\n\nAdditional minor optimisations are included. A small\nperformance impact happens in some cases due to code\nrefactoring.\n\nbenchmark                              old ns/op    new ns/op    delta\nBenchmarkAppendFloat64Fixed1                 623          235  -62.28%\nBenchmarkAppendFloat64Fixed2                1050          272  -74.10%\nBenchmarkAppendFloat64Fixed3                3723          243  -93.47%\nBenchmarkAppendFloat64Fixed4               10285          274  -97.34%\n\nBenchmarkAppendFloatDecimal                  190          206   +8.42%\nBenchmarkAppendFloat                         387          377   -2.58%\nBenchmarkAppendFloatExp                      397          339  -14.61%\nBenchmarkAppendFloatNegExp                   377          336  -10.88%\nBenchmarkAppendFloatBig                      546          482  -11.72%\n\nBenchmarkAppendFloat32Integer                188          204   +8.51%\nBenchmarkAppendFloat32ExactFraction          329          298   -9.42%\nBenchmarkAppendFloat32Point                  400          372   -7.00%\nBenchmarkAppendFloat32Exp                    369          306  -17.07%\nBenchmarkAppendFloat32NegExp                 372          305  -18.01%\n\nR=golang-dev, rsc\nCC=golang-dev, remy\nhttp://codereview.appspot.com/6462049",
			"disapproval": false,
			"date": "2012-09-01 14:31:50.946820",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-09-01 14:03:36.854270",
			"approval": true
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 6462049: strconv: faster FormatFloat for fixed number of digits.",
	"created": "2012-08-12 16:19:16.528320",
	"patchsets": [
		1,
		2001,
		3004,
		9001,
		7003
	],
	"modified": "2012-09-01 14:37:34.940220",
	"closed": true,
	"issue": 6462049
}