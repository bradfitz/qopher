{
	"description": "net: provide public access to file descriptors\n\nFixes issue 918.",
	"cc": [
		"rsc@golang.org",
		"rogpeppe@gmail.com",
		"alex.brainman@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "kr@xph.us",
			"recipients": [
				"kr@xph.us",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change.",
			"disapproval": false,
			"date": "2010-11-04 19:32:37.836574",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"kr@xph.us",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "looks great.  please make the comment change below\nalso please change the CL text to say\n\nFixes issue 918.\n\nhttp://codereview.appspot.com/2904041/diff/2001/src/pkg/net/tcpsock.go\nFile src/pkg/net/tcpsock.go (right):\n\nhttp://codereview.appspot.com/2904041/diff/2001/src/pkg/net/tcpsock.go#newcode211\nsrc/pkg/net/tcpsock.go:211: // File returns a copy of the underlying os.File, set to blocking mode.\nplease add (to all the comments, unfortunately)\n\n// It is the caller's responsibility to close f when finished.\n// Closing c does not affect f, and closing f does not affect c.",
			"disapproval": false,
			"date": "2010-11-04 19:56:11.609616",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "i haven't checked, but i'm not sure this will work correctly\nas the call to make the fd blocking will affect the original\nfd too; hence calling Conn.File() will poison the original connection.\n\ni'm probably missing something.\n\nOn 4 November 2010 19:56,  <rsc@google.com> wrote:\n> looks great. \u00a0please make the comment change below\n> also please change the CL text to say\n>\n> Fixes issue 918.\n>\n>\n>\n> http://codereview.appspot.com/2904041/diff/2001/src/pkg/net/tcpsock.go\n> File src/pkg/net/tcpsock.go (right):\n>\n> http://codereview.appspot.com/2904041/diff/2001/src/pkg/net/tcpsock.go#newcode211\n> src/pkg/net/tcpsock.go:211: // File returns a copy of the underlying\n> os.File, set to blocking mode.\n> please add (to all the comments, unfortunately)\n>\n> // It is the caller's responsibility to close f when finished.\n> // Closing c does not affect f, and closing f does not affect c.\n>\n> http://codereview.appspot.com/2904041/\n>\n",
			"disapproval": false,
			"date": "2010-11-04 20:26:07.411115",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "oh i see, i'm missing the fact that it doesn't really\nmatter if net fds block - it'll just mean that the polling\ncode won't be used if Conn.File() has been called,\nwhich could use a few more OS threads, but that's\nprobably inevitable.\n\nsorry for the noise.\n\nOn 4 November 2010 20:26, roger peppe <rogpeppe@gmail.com> wrote:\n> i haven't checked, but i'm not sure this will work correctly\n> as the call to make the fd blocking will affect the original\n> fd too; hence calling Conn.File() will poison the original connection.\n>\n> i'm probably missing something.\n>\n> On 4 November 2010 19:56, \u00a0<rsc@google.com> wrote:\n>> looks great. \u00a0please make the comment change below\n>> also please change the CL text to say\n>>\n>> Fixes issue 918.\n>>\n>>\n>>\n>> http://codereview.appspot.com/2904041/diff/2001/src/pkg/net/tcpsock.go\n>> File src/pkg/net/tcpsock.go (right):\n>>\n>> http://codereview.appspot.com/2904041/diff/2001/src/pkg/net/tcpsock.go#newcode211\n>> src/pkg/net/tcpsock.go:211: // File returns a copy of the underlying\n>> os.File, set to blocking mode.\n>> please add (to all the comments, unfortunately)\n>>\n>> // It is the caller's responsibility to close f when finished.\n>> // Closing c does not affect f, and closing f does not affect c.\n>>\n>> http://codereview.appspot.com/2904041/\n>>\n>\n",
			"disapproval": false,
			"date": "2010-11-04 23:22:06.628428",
			"approval": false
		},
		{
			"sender": "kr@xph.us",
			"recipients": [
				"kr@xph.us",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc, rog (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-11-05 00:41:54.140115",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"kr@xph.us",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Please, implement windows version of dup() too (in fd_windows.go). It doesn't have to do anything exciting (return \"Not implemented\" should do for now), and put comment with TODO so we remember about it for later. Thank you.\n\nAlex",
			"disapproval": false,
			"date": "2010-11-05 01:32:53.469719",
			"approval": false
		},
		{
			"sender": "kr@xph.us",
			"recipients": [
				"kr@xph.us",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc, rog, brainman (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-11-05 02:05:18.158401",
			"approval": false
		},
		{
			"sender": "kr@xph.us",
			"recipients": [
				"kr@xph.us",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc, rog, brainman (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-11-05 02:02:08.149291",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Nov 4, 2010 at 19:22, roger peppe <rogpeppe@gmail.com> wrote:\n> oh i see, i'm missing the fact that it doesn't really\n> matter if net fds block - it'll just mean that the polling\n> code won't be used if Conn.File() has been called,\n> which could use a few more OS threads, but that's\n> probably inevitable.\n>\n> sorry for the noise.\n\nthe noise was very interesting.  i read the\nman page and it sounded like F_SETFL is\nsetting fd flags, not inode/socket flags.\nof course that is probably a lie, but it\nsounded like the existing code was fine.\n\ni agree that if the non-blocking is a socket\nproperty rather than an fd property, then\nthe fallback that the net.Conn just stops\nusing epoll is probably the best we're going to do.\n\nruss\n",
			"disapproval": false,
			"date": "2010-11-05 02:05:01.801651",
			"approval": false
		},
		{
			"sender": "kr@xph.us",
			"recipients": [
				"kr@xph.us",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Oops, I didn't know I had to tell hg change about the new file explicitly. Let me try again.",
			"disapproval": false,
			"date": "2010-11-05 02:05:07.647400",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"kr@xph.us",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2010-11-05 18:00:17.994183",
			"approval": true
		},
		{
			"sender": "kr@xph.us",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Nov 4, 2010 at 7:04 PM, Russ Cox <rsc@golang.org> wrote:\n> i agree that if the non-blocking is a socket\n> property rather than an fd property, then\n> the fallback that the net.Conn just stops\n> using epoll is probably the best we're going to do.\n\nOn my laptop (Ubuntu), man fcntl seems to confirm\nthat this is a socket property. It distinguishes \"file\nstatus flags\" (including O_NONBLOCK) from \"file\ndescriptor flags\":\n\n> Duplicated file descriptors (made with dup(2),\n> fcntl(F_DUPFD), fork(2), etc.) refer to the same\n> open file description, and thus share the same\n> file status flags.\n\nIn this case, is it reasonable to return the original fd\nrather than using dup?\n\nkr\n",
			"disapproval": false,
			"date": "2010-11-05 02:11:58.634871",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> On my laptop (Ubuntu), man fcntl seems to confirm\n> that this is a socket property. It distinguishes \"file\n> status flags\" (including O_NONBLOCK) from \"file\n> descriptor flags\":\n>\n>> Duplicated file descriptors (made with dup(2),\n>> fcntl(F_DUPFD), fork(2), etc.) refer to the same\n>> open file description, and thus share the same\n>> file status flags.\n>\n> In this case, is it reasonable to return the original fd\n> rather than using dup?\n\ni'd rather still use dup, so that Close on the two\ndifferent objects doesn't have to be coordinated.\n\nif you share the fd, then you have to worry about\nsomeone doing Close on one (say the net.Conn)\nand then getting a new fd via Open that happens\nto reuse the same fd, and then doing Close on the\nother (say the *os.File) and accidentally closing\nthe new fd.\n\nruss\n",
			"disapproval": false,
			"date": "2010-11-05 02:17:35.643905",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"kr@xph.us",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2010-11-05 02:21:48.445262",
			"approval": true
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 5 November 2010 02:04, Russ Cox <rsc@golang.org> wrote:\n> On Thu, Nov 4, 2010 at 19:22, roger peppe <rogpeppe@gmail.com> wrote:\n>> oh i see, i'm missing the fact that it doesn't really\n>> matter if net fds block - it'll just mean that the polling\n>> code won't be used if Conn.File() has been called,\n>> which could use a few more OS threads, but that's\n>> probably inevitable.\n>>\n>> sorry for the noise.\n>\n> the noise was very interesting. \u00a0i read the\n> man page and it sounded like F_SETFL is\n> setting fd flags, not inode/socket flags.\n> of course that is probably a lie, but it\n> sounded like the existing code was fine.\n\nas is traditional in all unix-like systems that i know of, dup just\nmakes a new reference to the underlying kernel file structure - a\nprocess's file table is just a collection of pointers, so there is no\nplace to put per-fd flags - the flags must live in the underlying\nstructure, which is shared after dup.\n\ndup(2) says \"The object referenced by the descriptor does not\ndistinguish between fildes and fildes2 in any way.  Thus if fildes2\nand fildes are duplicate references to an open file, read(2), write(2)\nand lseek(2) calls all move a single pointer into the file, and append\nmode, non-blocking I/O and asynchronous I/O options are shared between\nthe references.\"\n\nyou knew this really :-)\n\none interesting thing is that calling Conn.File() on\na network connection might have the side effect of speeding up\nIO, as the code path won't go through the somewhat intricate\npolling code. performance critical programs which use relatively\nfew connections may wish to try it.\n",
			"disapproval": false,
			"date": "2010-11-05 09:27:16.190681",
			"approval": false
		},
		{
			"sender": "kr@xph.us",
			"recipients": [
				"kr@xph.us",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2010/11/05 02:17:35, rsc wrote:\n> i'd rather still use dup, so that Close on the two\n> different objects doesn't have to be coordinated.\n\nThat makes sense. Then I think Patch Set 5 is\nready for another look.\n\nkr",
			"disapproval": false,
			"date": "2010-11-05 17:50:16.947344",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"kr@xph.us",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as a8ffe111d8d3 ***\n\nnet: provide public access to file descriptors\n\nFixes issue 918.\n\nR=rsc, rog, brainman\nCC=golang-dev\nhttp://codereview.appspot.com/2904041\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2010-11-05 18:02:05.212337",
			"approval": false
		}
	],
	"owner_email": "kr@xph.us",
	"private": false,
	"base_url": "",
	"owner": "kr",
	"subject": "code review 2904041: net: provide public access to file descriptors",
	"created": "2010-11-04 19:12:20.017995",
	"patchsets": [
		1,
		2001,
		9001,
		14001,
		20001
	],
	"modified": "2013-05-30 00:17:47.843330",
	"closed": true,
	"issue": 2904041
}