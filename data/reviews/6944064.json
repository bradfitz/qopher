{
	"description": "flag: add implicit boolFlag interface\n\nAny flag.Value that has an IsBoolFlag method that returns true\nwill be treated as a bool flag type during parsing.\n\nFixes issue 4262.",
	"cc": [
		"bradfitz@golang.org",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-12-18 01:11:26.407870",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/6944064/diff/5001/src/pkg/flag/flag_test.go\nFile src/pkg/flag/flag_test.go (right):\n\nhttps://codereview.appspot.com/6944064/diff/5001/src/pkg/flag/flag_test.go#newcode221\nsrc/pkg/flag/flag_test.go:221: if err := flags.Parse([]string{\"-v\", \"1\", \"-b\", \"-v\", \"2\", \"-v=3\", \"-b\", \"-b\", \"-b=true\", \"-b=false\", \"-b\", \"-b\"}); err != nil && b.count < 4 {\nOn 2012/12/20 20:11:00, bradfitz wrote:\n> I would just split this into two if statements.  keep the existing line\n> unchanged and add a new one for b.count.  otherwise the error message will be\n> hard to debug.\n\nDone. Also changed to not ignore some possible errors.",
			"disapproval": false,
			"date": "2012-12-20 21:51:26.639240",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6944064/diff/5001/src/pkg/flag/flag_test.go\nFile src/pkg/flag/flag_test.go (right):\n\nhttps://codereview.appspot.com/6944064/diff/5001/src/pkg/flag/flag_test.go#newcode221\nsrc/pkg/flag/flag_test.go:221: if err := flags.Parse([]string{\"-v\", \"1\", \"-b\", \"-v\", \"2\", \"-v=3\", \"-b\", \"-b\", \"-b=true\", \"-b=false\", \"-b\", \"-b\"}); err != nil && b.count < 4 {\nI would just split this into two if statements.  keep the existing line unchanged and add a new one for b.count.  otherwise the error message will be hard to debug.",
			"disapproval": false,
			"date": "2012-12-20 20:11:00.172970",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/6944064/diff/9001/src/pkg/flag/flag_test.go\nFile src/pkg/flag/flag_test.go (right):\n\nhttps://codereview.appspot.com/6944064/diff/9001/src/pkg/flag/flag_test.go#newcode221\nsrc/pkg/flag/flag_test.go:221: if err := flags.Parse([]string{\"-v\", \"1\", \"-b\", \"-v\", \"2\", \"-v=3\", \"-b\", \"-b\", \"-b=true\", \"-b=false\", \"-b\", \"barg\", \"-b\"}); err != nil {\nDone. Sorry, I didn't understand what you meant the first time.\n\nOn 2012/12/20 22:08:34, bradfitz wrote:\n> this just got more complicated.\n> \n> keep the old test unchanged.\n> \n> add a new one about the boolFlagVar.\n\nhttps://codereview.appspot.com/6944064/diff/9001/src/pkg/flag/flag_test.go#newcode224\nsrc/pkg/flag/flag_test.go:224: } else if b.count >= 4 && err.Error() != \"flag needs an argument: -b\" {\nDone.\n\nOn 2012/12/20 22:08:34, bradfitz wrote:\n> can you avoid doing string comparisons on errors?  Not critical, but not pretty.",
			"disapproval": false,
			"date": "2012-12-20 22:35:54.688890",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6944064/diff/9001/src/pkg/flag/flag_test.go\nFile src/pkg/flag/flag_test.go (right):\n\nhttps://codereview.appspot.com/6944064/diff/9001/src/pkg/flag/flag_test.go#newcode221\nsrc/pkg/flag/flag_test.go:221: if err := flags.Parse([]string{\"-v\", \"1\", \"-b\", \"-v\", \"2\", \"-v=3\", \"-b\", \"-b\", \"-b=true\", \"-b=false\", \"-b\", \"barg\", \"-b\"}); err != nil {\nthis just got more complicated.\n\nkeep the old test unchanged.\n\nadd a new one about the boolFlagVar.\n\nhttps://codereview.appspot.com/6944064/diff/9001/src/pkg/flag/flag_test.go#newcode224\nsrc/pkg/flag/flag_test.go:224: } else if b.count >= 4 && err.Error() != \"flag needs an argument: -b\" {\ncan you avoid doing string comparisons on errors?  Not critical, but not pretty.",
			"disapproval": false,
			"date": "2012-12-20 22:08:34.284850",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6944064/diff/13001/src/pkg/flag/flag.go\nFile src/pkg/flag/flag.go (right):\n\nhttps://codereview.appspot.com/6944064/diff/13001/src/pkg/flag/flag.go#newcode720\nsrc/pkg/flag/flag.go:720: if fv, ok := flag.Value.(boolFlag); ok && flag.Value.(boolFlag).IsBoolFlag() { // special case: doesn't need an arg\nok && fv.IsBoolFlag() {",
			"disapproval": false,
			"date": "2012-12-22 16:38:31.007410",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=7bc3fb12f064 ***\n\nflag: add implicit boolFlag interface\n\nAny flag.Value that has an IsBoolFlag method that returns true\nwill be treated as a bool flag type during parsing.\n\nFixes issue 4262.\n\nR=bradfitz, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/6944064\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2012-12-22 18:34:51.310890",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL",
			"disapproval": false,
			"date": "2012-12-22 16:45:24.548830",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-12-22 18:33:20.489280",
			"approval": true
		}
	],
	"owner_email": "rickarnoldjr@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "rick",
	"subject": "code review 6944064: flag: add implicit boolFlag interface",
	"created": "2012-12-18 01:10:36.333030",
	"patchsets": [
		1,
		2001,
		5001,
		9001,
		13001,
		17001
	],
	"modified": "2012-12-22 21:12:11.044100",
	"closed": true,
	"issue": 6944064
}