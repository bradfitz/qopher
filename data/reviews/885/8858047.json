{
	"description": "cmd/ld: emit relocs for DWARF info when doing an external link\n\nI would like opinions on whether this is a good idea for 1.1.\nOn the one hand it's a moderately important issue.  On the\nother hand this introduces at least the possibility of\nexternal linker errors due to the additional relocations and\nit may be better to wait.\n\nI'm fairly confident that the behaviour is unchanged when not\nusing an external linker.\n\nUpdate issue 5221\n\nThis CL is tested lightly on 386 and amd64 and fixes the cases\nI tested.  I have not tested it on Darwin or Windows.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"daniel.morsing@gmail.com",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-04-29 02:56:52.317470",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi Ian,\n\nThis CL appears to crash reliably on 10.7.5\n\ndarwin/amd64:\n\n--- FAIL: TestCgoCrashHandler (1.19 seconds)\n\tcrash_test.go:78: expected \"main: recovered done\\nnew-thread: recovered done\\nsecond-new-thread: recovered done\\nmain-again: recovered done\\n\", but got \"go build command-line-arguments: signal: segmentation fault\\n\"\n--- FAIL: TestCgoSignalDeadlock (1.39 seconds)\n\tcrash_cgo_test.go:21: expected \"OK\\n\", but got \"go build command-line-arguments: signal: segmentation fault\\n\"\nFAIL\nFAIL\truntime\t5.426s\n\ndarwin/386:\n\n--- FAIL: TestCgoCrashHandler (1.14 seconds)\n\tcrash_test.go:78: expected \"main: recovered done\\nnew-thread: recovered done\\nsecond-new-thread: recovered done\\nmain-again: recovered done\\n\", but got \"go build command-line-arguments: signal: bus error\\n\"\n--- FAIL: TestCgoSignalDeadlock (0.80 seconds)\n\tcrash_cgo_test.go:21: expected \"OK\\n\", but got \"go build command-line-arguments: signal: bus error\\n\"\nFAIL\nFAIL\truntime\t4.525s",
			"disapproval": false,
			"date": "2013-04-29 08:12:45.385280",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/29 08:12:45, dfc wrote:\n> \n> This CL appears to crash reliably on 10.7.5\n> \n> darwin/amd64:\n> \n> --- FAIL: TestCgoCrashHandler (1.19 seconds)\n> \tcrash_test.go:78: expected \"main: recovered done\\nnew-thread: recovered\n> done\\nsecond-new-thread: recovered done\\nmain-again: recovered done\\n\", but got\n> \"go build command-line-arguments: signal: segmentation fault\\n\"\n> --- FAIL: TestCgoSignalDeadlock (1.39 seconds)\n> \tcrash_cgo_test.go:21: expected \"OK\\n\", but got \"go build\n> command-line-arguments: signal: segmentation fault\\n\"\n\nThanks for trying it out.  Can you run 6l under gdb (6l is compiled with gcc, so gdb should work fine) and tell me where the segmentation fault is occurring?  It's probably something simple.",
			"disapproval": false,
			"date": "2013-04-29 12:44:19.058990",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Here you go, I hope this is useful\r\n\r\nStarting program: /Users/dfc/go/pkg/tool/darwin_amd64/6l -o cgo -L\r\n/var/folders/7q/5n_khbqj5z716gk0zvtywgv80000gn/T/go-build731692523\r\n/var/folders/7q/5n_khbqj5z716gk0zvtywgv80000gn/T/go-build731692523/command-line-arguments.a\r\nReading symbols for shared libraries +........................ done\r\n\r\nProgram received signal EXC_BAD_ACCESS, Could not access memory.\r\nReason: KERN_INVALID_ADDRESS at address: 0x0000000000000010\r\nmachoreloc1 (r=0x102d00000, sectoff=6) at asm.c:336\r\n336                             diag(\"reloc %d to non-macho symbol %s\r\ntype=%d\", r->type, rs->name, rs->type);\r\n\r\nOn Mon, Apr 29, 2013 at 10:44 PM,  <iant@golang.org> wrote:\r\n> On 2013/04/29 08:12:45, dfc wrote:\r\n>\r\n>> This CL appears to crash reliably on 10.7.5\r\n>\r\n>\r\n>> darwin/amd64:\r\n>\r\n>\r\n>> --- FAIL: TestCgoCrashHandler (1.19 seconds)\r\n>>         crash_test.go:78: expected \"main: recovered done\\nnew-thread:\r\n>\r\n> recovered\r\n>>\r\n>> done\\nsecond-new-thread: recovered done\\nmain-again: recovered\r\n>\r\n> done\\n\", but got\r\n>>\r\n>> \"go build command-line-arguments: signal: segmentation fault\\n\"\r\n>> --- FAIL: TestCgoSignalDeadlock (1.39 seconds)\r\n>>         crash_cgo_test.go:21: expected \"OK\\n\", but got \"go build\r\n>> command-line-arguments: signal: segmentation fault\\n\"\r\n>\r\n>\r\n> Thanks for trying it out.  Can you run 6l under gdb (6l is compiled with\r\n> gcc, so gdb should work fine) and tell me where the segmentation fault\r\n> is occurring?  It's probably something simple.\r\n>\r\n> https://codereview.appspot.com/8858047/\r\n",
			"disapproval": false,
			"date": "2013-04-29 13:03:20.381020",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/29 13:03:20, dfc wrote:\n> Here you go, I hope this is useful\n\nThanks, evidently we need some magic to define the section symbols for Mach-O as I've done for ELF.  For now I've just disabled the relocations for Mach-O, so with this CL it should be no worse than today.",
			"disapproval": false,
			"date": "2013-04-29 16:32:20.222720",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"daniel.morsing@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Tried this out with \"GNU ld version 2.23.51.0.1-6.fc18\". Worked as expected.\n\nI am in favor of pulling this in for go1.1, after some more testing. There are a lot of programs that use cgo and not having debug symbols is a real bummer. It was very annoying to not have gdb support when trying to debug the GC problems that Dmitry fixed a while back.\n\nDebugging is probably more important for cgo programs, since they can more easily cause memory corruption.",
			"disapproval": false,
			"date": "2013-04-29 20:37:29.372410",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nI think this should go into Go 1.1. Having broken debug info is worse than possibly not being able to link the occasional corner case program. For those corner cases, 6l can be invoked with -w to disable DWARF entirely.\n\nFor what it's worth, when I was working on this I used http://play.golang.org/p/fhjICsejdV to dump the dwarf information, although you probably have your own better tool.",
			"disapproval": false,
			"date": "2013-04-30 18:30:03.467800",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=cdedb129e020 ***\n\ncmd/ld: emit relocs for DWARF info when doing an external link\n\nI would like opinions on whether this is a good idea for 1.1.\nOn the one hand it's a moderately important issue.  On the\nother hand this introduces at least the possibility of\nexternal linker errors due to the additional relocations and\nit may be better to wait.\n\nI'm fairly confident that the behaviour is unchanged when not\nusing an external linker.\n\nUpdate issue 5221\n\nThis CL is tested lightly on 386 and amd64 and fixes the cases\nI tested.  I have not tested it on Darwin or Windows.\n\nR=golang-dev, dave, daniel.morsing, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/8858047",
			"disapproval": false,
			"date": "2013-04-30 21:01:07.726090",
			"approval": false
		}
	],
	"owner_email": "iant@golang.org",
	"private": false,
	"base_url": "",
	"owner": "iant",
	"subject": "code review 8858047: cmd/ld: emit relocs for DWARF info when doing an extern...",
	"created": "2013-04-29 02:56:42.042890",
	"patchsets": [
		1,
		6001,
		12001
	],
	"modified": "2013-04-30 21:01:10.183120",
	"closed": true,
	"issue": 8858047
}