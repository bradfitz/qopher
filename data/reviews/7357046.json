{
	"description": "go/types: support for customizable Alignof, Sizeof\n\n(Offsetof is a function of Alignof and Sizeof.)\n\n- removed IntSize, PtrSize from Context (set Sizeof instead)\n- GcImporter needs a Context now (it needs to have\n  access to Sizeof/Alignof)\n- removed exported Size field from Basic (use Sizeof)\n- added Offset to Field\n- added Alignment, Size to Struct",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"adonovan@google.com"
	],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-02-20 07:32:58.693260",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=abd0feffdac3 ***\n\ngo/types: support for customizable Alignof, Sizeof\n\n(Offsetof is a function of Alignof and Sizeof.)\n\n- removed IntSize, PtrSize from Context (set Sizeof instead)\n- GcImporter needs a Context now (it needs to have\n  access to Sizeof/Alignof)\n- removed exported Size field from Basic (use Sizeof)\n- added Offset to Field\n- added Alignment, Size to Struct\n\nR=adonovan\nCC=golang-dev\nhttps://codereview.appspot.com/7357046",
			"disapproval": false,
			"date": "2013-02-20 19:10:22.705110",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7357046/diff/6002/src/pkg/exp/ssa/builder.go\nFile src/pkg/exp/ssa/builder.go (right):\n\nhttps://codereview.appspot.com/7357046/diff/6002/src/pkg/exp/ssa/builder.go#newcode165\nsrc/pkg/exp/ssa/builder.go:165: // TODO(adonovan): permit the client to specify these\nThis comment is now orphaned; please delete.\n\nhttps://codereview.appspot.com/7357046/diff/6002/src/pkg/go/types/api.go\nFile src/pkg/go/types/api.go (right):\n\nhttps://codereview.appspot.com/7357046/diff/6002/src/pkg/go/types/api.go#newcode83\nsrc/pkg/go/types/api.go:83: // ast.Objects. If there are no errors, Check returns the package, otherwise\nSince you're here:\n\"assigning types to ast.Objects\": is this still true?\n\nhttps://codereview.appspot.com/7357046/diff/6002/src/pkg/go/types/builtins.go\nFile src/pkg/go/types/builtins.go (right):\n\nhttps://codereview.appspot.com/7357046/diff/6002/src/pkg/go/types/builtins.go#newcode325\nsrc/pkg/go/types/builtins.go:325: case _Offsetof:\nCurious: when this is so clearly a special form, why do we try to make it look it library function?  Also, I can see that using it is potentially nonportable, but is it really unsafe?\n\nhttps://codereview.appspot.com/7357046/diff/6002/src/pkg/go/types/builtins.go#newcode524\nsrc/pkg/go/types/builtins.go:524: return DefaultPtrSize * 2\nThese constants seem reasonable but what's the rationale for their specific values?  Are they identical to gc?  (If so, document.)\n\nIs it now the case that these three functions are now identical to those of gc for some values of {Int,Ptr}Size?\n\nhttps://codereview.appspot.com/7357046/diff/6002/src/pkg/go/types/expr.go\nFile src/pkg/go/types/expr.go (right):\n\nhttps://codereview.appspot.com/7357046/diff/6002/src/pkg/go/types/expr.go#newcode169\nsrc/pkg/go/types/expr.go:169: if r := x % a; r > 0 {\nOr branch-free like so:\n        y := x + a - 1\n\treturn y - y % a\n\nhttps://codereview.appspot.com/7357046/diff/6002/src/pkg/go/types/gcimporter.go\nFile src/pkg/go/types/gcimporter.go (right):\n\nhttps://codereview.appspot.com/7357046/diff/6002/src/pkg/go/types/gcimporter.go#newcode156\nsrc/pkg/go/types/gcimporter.go:156: // gcParser parses the exports inside a gc compiler-produced\nDoes a gc object file encode its sizeof/alignof parameters in any form?\n\nIf ABI compatibility ever becomes an issue (perhaps that's a stretch), you'd want to be able to check this.",
			"disapproval": false,
			"date": "2013-02-20 15:41:22.505510",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7357046/diff/6002/src/pkg/exp/ssa/builder.go\nFile src/pkg/exp/ssa/builder.go (right):\n\nhttps://codereview.appspot.com/7357046/diff/6002/src/pkg/exp/ssa/builder.go#newcode165\nsrc/pkg/exp/ssa/builder.go:165: // TODO(adonovan): permit the client to specify these\nOn 2013/02/20 15:41:22, adonovan wrote:\n> This comment is now orphaned; please delete.\n\nDone.\n\nhttps://codereview.appspot.com/7357046/diff/6002/src/pkg/go/types/api.go\nFile src/pkg/go/types/api.go (right):\n\nhttps://codereview.appspot.com/7357046/diff/6002/src/pkg/go/types/api.go#newcode83\nsrc/pkg/go/types/api.go:83: // ast.Objects. If there are no errors, Check returns the package, otherwise\nOn 2013/02/20 15:41:22, adonovan wrote:\n> Since you're here:\n> \"assigning types to ast.Objects\": is this still true?\nno. fixed.\n\nhttps://codereview.appspot.com/7357046/diff/6002/src/pkg/go/types/builtins.go\nFile src/pkg/go/types/builtins.go (right):\n\nhttps://codereview.appspot.com/7357046/diff/6002/src/pkg/go/types/builtins.go#newcode325\nsrc/pkg/go/types/builtins.go:325: case _Offsetof:\nOn 2013/02/20 15:41:22, adonovan wrote:\n> Curious: when this is so clearly a special form, why do we try to make it look\n> it library function?  Also, I can see that using it is potentially nonportable,\n> but is it really unsafe?\n\nBuilt-in functions are the mechanism we have in Go for special situations. It's non-portable, and perhaps not unsafe, but still, the very same program using unsafe.Offsetof may compile on one platform, and not on the other (say, the result constant could be used in a expression that results in a div-zero compile time error dep. on offset value). Package unsafe seems as good as any other special case, and unsafe we have.\n\nhttps://codereview.appspot.com/7357046/diff/6002/src/pkg/go/types/builtins.go#newcode524\nsrc/pkg/go/types/builtins.go:524: return DefaultPtrSize * 2\nOn 2013/02/20 15:41:22, adonovan wrote:\n> These constants seem reasonable but what's the rationale for their specific\n> values?  Are they identical to gc?  (If so, document.)\n> \n> Is it now the case that these three functions are now identical to those of gc\n> for some values of {Int,Ptr}Size?\n\nThey are just reasonable. I am not claiming anything else. Having reasonable values permits reasonable programs to typecheck reasonably, with default context.\n\nhttps://codereview.appspot.com/7357046/diff/6002/src/pkg/go/types/expr.go\nFile src/pkg/go/types/expr.go (right):\n\nhttps://codereview.appspot.com/7357046/diff/6002/src/pkg/go/types/expr.go#newcode169\nsrc/pkg/go/types/expr.go:169: if r := x % a; r > 0 {\nOn 2013/02/20 15:41:22, adonovan wrote:\n> Or branch-free like so:\n>         y := x + a - 1\n> \treturn y - y % a\n\nyes, thanks.\n\nhttps://codereview.appspot.com/7357046/diff/6002/src/pkg/go/types/gcimporter.go\nFile src/pkg/go/types/gcimporter.go (right):\n\nhttps://codereview.appspot.com/7357046/diff/6002/src/pkg/go/types/gcimporter.go#newcode156\nsrc/pkg/go/types/gcimporter.go:156: // gcParser parses the exports inside a gc compiler-produced\nOn 2013/02/20 15:41:22, adonovan wrote:\n> Does a gc object file encode its sizeof/alignof parameters in any form?\n> \n> If ABI compatibility ever becomes an issue (perhaps that's a stretch), you'd\n> want to be able to check this.\n\nNot that I know of. The offsets may be encoded elsewhere, but not in the export data.",
			"disapproval": false,
			"date": "2013-02-20 18:16:13.303520",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\n(pair-reviewed)\n\nhttps://codereview.appspot.com/7357046/diff/6002/src/pkg/go/types/builtins.go\nFile src/pkg/go/types/builtins.go (right):\n\nhttps://codereview.appspot.com/7357046/diff/6002/src/pkg/go/types/builtins.go#newcode325\nsrc/pkg/go/types/builtins.go:325: case _Offsetof:\nOn 2013/02/20 18:16:13, gri wrote:\n> On 2013/02/20 15:41:22, adonovan wrote:\n> > Curious: when this is so clearly a special form, why do we try to make it look\n> > it library function?  Also, I can see that using it is potentially\n> nonportable,\n> > but is it really unsafe?\n> \n> Built-in functions are the mechanism we have in Go for special situations. It's\n> non-portable, and perhaps not unsafe, but still, the very same program using\n> unsafe.Offsetof may compile on one platform, and not on the other (say, the\n> result constant could be used in a expression that results in a div-zero compile\n> time error dep. on offset value). Package unsafe seems as good as any other\n> special case, and unsafe we have.\n\nWell, I can determine sizeof(x) even in the supposedly portable (safe) parts of the language. :)  \n\nMy point was that the operands to sizeof, offsetof and alignof are not values but types (or struct/fieldname pairs) so they are even more special than append, which could in principle have a (polymorphic) type in some hypothetical future release.  So these things need compiler support, yet are not in the global namespace.   \n\nIs putting them in \"unsafe\" a namespace pollution issue?",
			"disapproval": false,
			"date": "2013-05-09 21:53:58.770020",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7357046/diff/6002/src/pkg/go/types/builtins.go\nFile src/pkg/go/types/builtins.go (right):\n\nhttps://codereview.appspot.com/7357046/diff/6002/src/pkg/go/types/builtins.go#newcode325\nsrc/pkg/go/types/builtins.go:325: case _Offsetof:\nOn 2013/05/09 21:53:58, adonovan wrote:\n> On 2013/02/20 18:16:13, gri wrote:\n> > On 2013/02/20 15:41:22, adonovan wrote:\n> > > Curious: when this is so clearly a special form, why do we try to make it\n> look\n> > > it library function?  Also, I can see that using it is potentially\n> > nonportable,\n> > > but is it really unsafe?\n> > \n> > Built-in functions are the mechanism we have in Go for special situations.\n> It's\n> > non-portable, and perhaps not unsafe, but still, the very same program using\n> > unsafe.Offsetof may compile on one platform, and not on the other (say, the\n> > result constant could be used in a expression that results in a div-zero\n> compile\n> > time error dep. on offset value). Package unsafe seems as good as any other\n> > special case, and unsafe we have.\n> \n> Well, I can determine sizeof(x) even in the supposedly portable (safe) parts of\n> the language. :)  \n> \n> My point was that the operands to sizeof, offsetof and alignof are not values\n> but types (or struct/fieldname pairs) so they are even more special than append,\n> which could in principle have a (polymorphic) type in some hypothetical future\n> release.  So these things need compiler support, yet are not in the global\n> namespace.   \n> \n> Is putting them in \"unsafe\" a namespace pollution issue?\n\nNot really. It's just a design decision. In some sense, all the size operations are \"safe\" but at the same time they are (likely) not often used unless in conjunction with unsafe pointer operations. Arguably, it would be nice to have sizeof w/o the need to import unsafe. One argument one might make that it exposes implementation details and thus makes code non-portable (I am aware that this is not a very sharp argument).",
			"disapproval": false,
			"date": "2013-05-09 22:05:21.767010",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 7357046: go/types: support for customizable Alignof, Sizeof",
	"created": "2013-02-20 00:34:16.301950",
	"patchsets": [
		1,
		3,
		3001,
		6001,
		9001,
		12001,
		14001,
		6002,
		12002,
		26001,
		22002
	],
	"modified": "2013-05-09 22:05:21.939970",
	"closed": true,
	"issue": 7357046
}