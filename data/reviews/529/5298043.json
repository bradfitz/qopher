{
	"description": "godoc: highlight meaningful names in toc listings\ngo/printer: print *ast.FieldList values with Fprint",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"r@google.com",
		"gri@golang.org",
		"bradfitz@golang.org",
		"dsymonds@golang.org",
		"rsc@golang.org",
		"cw@f00f.org"
	],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-18 22:36:55.346433",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "show me a mockup.\n\nOn Oct 18, 2011, at 3:36 PM, adg@golang.org wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n> \n> Message:\n> Hello golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n> \n> \n> Description:\n> godoc: highlight meaningful names in toc listings\n> go/printer: print *ast.FieldList values with Fprint\n> \n> Please review this at http://codereview.appspot.com/5298043/\n> \n> Affected files:\n>  M doc/all.css\n>  M lib/godoc/package.html\n>  M src/cmd/godoc/godoc.go\n>  M src/pkg/go/printer/printer.go\n> \n> \n> Index: doc/all.css\n> ===================================================================\n> --- a/doc/all.css\n> +++ b/doc/all.css\n> @@ -22,6 +22,15 @@\n> a:active {\n>   color: #c00;\n> }\n> +#manual-nav a .name {\n> +\tcolor: #026;\n> +}\n> +#manual-nav a .name:hover {\n> +\tcolor: #a40;\n> +}\n> +#manual-nav a .name:active {\n> +\tcolor: #c00;\n> +}\n> code, pre {\n>   font-size: 1.2em;\n> }\n> @@ -190,9 +199,6 @@\n> span.alert {\n>   color: #D00000;\n> }\n> -#nav table {\n> -  width: 100%;\n> -}\n> .detail {\n>   padding: 0.25em 1em;\n>   background: #F4F4F4;\n> Index: lib/godoc/package.html\n> ===================================================================\n> --- a/lib/godoc/package.html\n> +++ b/lib/godoc/package.html\n> @@ -7,12 +7,12 @@\n> <div id=\"manual-nav\">\n> {{with .PDoc}}\n> \t<dl>\n> -\t<dd><a href=\"#Overview\">Overview</a></dd>\n> +\t<dd><a href=\"#Overview\"><span class=\"name\">Overview</span></a></dd>\n> \t{{if .Consts}}\n> -\t\t<dd><a href=\"#Constants\">Constants</a></dd>\n> +\t\t<dd><a href=\"#Constants\"><span class=\"name\">Constants</span></a></dd>\n> \t{{end}}\n> \t{{if .Vars}}\n> -\t\t<dd><a href=\"#Variables\">Variables</a></dd>\n> +\t\t<dd><a href=\"#Variables\"><span class=\"name\">Variables</span></a></dd>\n> \t{{end}}\n> \t{{range .Funcs}}\n> \t\t{{$name_html := html .Name}}\n> @@ -21,7 +21,7 @@\n> \t{{range .Types}}\n> \t\t{{$tname := printf \"%s\" .Type.Name}}\n> \t\t{{$tname_html := node_html .Type.Name $.FSet}}\n> -\t\t<dd><a href=\"#{{$tname_html}}\">type {{$tname_html}}</a></dd>\n> +\t\t<dd><a href=\"#{{$tname_html}}\">type <span class=\"name\">{{$tname_html}}</span></a></dd>\n> \t\t{{range .Factories}}\n> \t\t\t{{$name_html := html .Name}}\n> \t\t\t<dd>&nbsp; &nbsp; <a href=\"#{{$name_html}}\">{{node_html .Decl $.FSet}}</a></dd>\n> Index: src/cmd/godoc/godoc.go\n> ===================================================================\n> --- a/src/cmd/godoc/godoc.go\n> +++ b/src/cmd/godoc/godoc.go\n> @@ -443,11 +443,45 @@\n> }\n> \n> func node_htmlFunc(node interface{}, fset *token.FileSet) string {\n> -\tvar buf1 bytes.Buffer\n> -\twriteNode(&buf1, fset, node)\n> -\tvar buf2 bytes.Buffer\n> -\tFormatText(&buf2, buf1.Bytes(), -1, true, \"\", nil)\n> -\treturn buf2.String()\n> +\tvar b bytes.Buffer\n> +\tswitch n := node.(type) {\n> +\tcase *ast.FuncDecl:\n> +\t\tfmt.Fprint(&b, \"func \")\n> +\t\tif n.Recv != nil {\n> +\t\t\tprintFormatted(&b, fset, n.Recv)\n> +\t\t\tfmt.Fprint(&b, \" \")\n> +\t\t}\n> +\t\tfmt.Fprintf(&b, `<span class=\"name\">%v</span>`, n.Name)\n> +\t\tif n.Type.Params != nil {\n> +\t\t\tprintFormatted(&b, fset, n.Type.Params)\n> +\t\t} else {\n> +\t\t\tfmt.Fprint(&b, \"()\")\n> +\t\t}\n> +\t\tif r := n.Type.Results; r != nil {\n> +\t\t\tfmt.Fprint(&b, \" \")\n> +\t\t\tif len(r.List) == 1 {\n> +\t\t\t\t// strip surrounding brackets for\n> +\t\t\t\t// single return value\n> +\t\t\t\tvar b2 bytes.Buffer\n> +\t\t\t\tprintFormatted(&b2, fset, r)\n> +\t\t\t\tbuf := b2.Bytes()\n> +\t\t\t\tfmt.Fprintf(&b, \"%s\", buf[1:len(buf)-1])\n> +\t\t\t} else {\n> +\t\t\t\tprintFormatted(&b, fset, r)\n> +\t\t\t}\n> +\t\t}\n> +\tdefault:\n> +\t\tvar b2 bytes.Buffer\n> +\t\twriteNode(&b2, fset, node)\n> +\t\tFormatText(&b, b2.Bytes(), -1, true, \"\", nil)\n> +\t}\n> +\treturn b.String()\n> +}\n> +\n> +func printFormatted(w io.Writer, fset *token.FileSet, node interface{}) {\n> +\tvar b bytes.Buffer // working buffer\n> +\tprinter.Fprint(&b, fset, node)\n> +\tFormatText(w, b.Bytes(), -1, true, \"\", nil)\n> }\n> \n> func comment_htmlFunc(comment string) string {\n> Index: src/pkg/go/printer/printer.go\n> ===================================================================\n> --- a/src/pkg/go/printer/printer.go\n> +++ b/src/pkg/go/printer/printer.go\n> @@ -985,6 +985,8 @@\n> \t\tp.comments = n.Comments\n> \t\tp.useNodeComments = n.Comments == nil\n> \t\tp.file(n)\n> +\tcase *ast.FieldList:\n> +\t\tp.parameters(n, new(bool))\n> \tdefault:\n> \t\tpanic(osError{fmt.Errorf(\"printer.Fprint: unsupported node type %T\", n)})\n> \t}\n> \n> \n\n",
			"disapproval": false,
			"date": "2011-10-18 22:38:58.265035",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "i know we have significantly more important work to be\ndoing than bikeshedding over how text should look.\n",
			"disapproval": false,
			"date": "2011-10-19 12:28:19.828891",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 19 October 2011 09:38, Rob 'Commander' Pike <r@google.com> wrote:\n> show me a mockup.\n\nCompare:\n\nhttp://wh3rd.net:6060/pkg/io/\nhttp://swtch.com:6060/pkg/io/\n",
			"disapproval": false,
			"date": "2011-10-18 22:43:07.319199",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "The very definition of a bike shed. The shed is anodized. It doesn't need paint.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-10-18 23:42:42.199292",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 19 October 2011 09:48, Rob 'Commander' Pike <r@google.com> wrote:\n> no, thanks.\n\nRuss' recent change makes the table of contents harder to read for me\nand for others.\n\nPlease look again - I have tried bold instead.\n\nhttp://wh3rd.net:6060/pkg/io/\n",
			"disapproval": false,
			"date": "2011-10-18 22:56:34.371761",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Giving up so soon?  Maybe Rob was only unhappy in that you weren't being\nambitious enough.  You just need to go all the way.\n\nWe're not done until it looks like Eclipse Studio Beans!\n\n\nOn Tue, Oct 18, 2011 at 4:11 PM, <adg@golang.org> wrote:\n\n> *** Abandoned ***\n>\n> http://codereview.appspot.com/**5298043/<http://codereview.appspot.com/5298043/>\n>\n",
			"disapproval": false,
			"date": "2011-10-18 23:32:15.849824",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "#!/bin/sh\nyes No!\n",
			"disapproval": false,
			"date": "2011-10-19 04:19:09.450133",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "no, thanks.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-10-18 22:48:09.398127",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "that's even worse.\n\ni know i'm a lone voice here but text is text and should look like text, not an experiment in typography.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-10-18 22:59:39.932985",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"gri@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "I don't like this change. I am not saying that it is not useful, but there's an awful amount of formatting decisions now \"duplicated\" from in godoc that are usually made by the printer.\n\nI think if this is just about highlighting the function/method name, it can be done easier by letting the printer do it's work and have a little scanner job run on the output looking for the function/method name. That way, printer formatting decisions remain in the printer and don't need to be replicated.\n\nhttp://codereview.appspot.com/5298043/diff/8001/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttp://codereview.appspot.com/5298043/diff/8001/src/cmd/godoc/godoc.go#newcode445\nsrc/cmd/godoc/godoc.go:445: func toc_node_htmlFunc(node interface{}, fset *token.FileSet) string {\nThis is an awful lot of logic that duplicates formatting decisions usually made in the printer.\n\nhttp://codereview.appspot.com/5298043/diff/8001/src/cmd/godoc/godoc.go#newcode591\nsrc/cmd/godoc/godoc.go:591: \"toc_node_html\": toc_node_htmlFunc,\nthe name should probably be tocNode_htmlFunc\n\n(admittedly, some of the other names seems inconsistent as well)\n\nhttp://codereview.appspot.com/5298043/diff/8001/src/pkg/go/printer/printer.go\nFile src/pkg/go/printer/printer.go (right):\n\nhttp://codereview.appspot.com/5298043/diff/8001/src/pkg/go/printer/printer.go#newcode989\nsrc/pkg/go/printer/printer.go:989: p.parameters(n, new(bool))\np.comments = n.Comments\np.parameters(n, ignoreMultiLine)\n\nThat said, I don't like this change. What if somebody wants to print a FieldList that is part of a struct? Doing this right requires context information. There's no concept for that at the moment. I don't want to add semantics that we cannot change later.",
			"disapproval": false,
			"date": "2011-10-18 23:07:43.272193",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"gri@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2011-10-18 23:11:31.350023",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "This would be a good option when godoc supports per-user options. I\nknow that I strongly prefer the version with the bolded text; I\nstruggle to quickly scan the list without it.\n",
			"disapproval": false,
			"date": "2011-10-18 23:35:14.646903",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "People fall into two groups: *some like highlighting*, and some don't. I\nthink for the ones that like it, not having it is a significant drawback.\nHaving it might attract them more easily.\n\nI am not against it but it needs to be settable by user and it needs to be\nsticky.\n- gri\n\nOn Tue, Oct 18, 2011 at 4:35 PM, David Symonds <dsymonds@golang.org> wrote:\n> This would be a good option when godoc supports per-user options. I\n> know that I strongly prefer the version with the bolded text; I\n> struggle to quickly scan the list without it.\n>\n",
			"disapproval": false,
			"date": "2011-10-18 23:41:09.235839",
			"approval": false
		},
		{
			"sender": "cw@f00f.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> i know i'm a lone voice here but text is text and should look like\n> text, not an experiment in typography.\n\nwould acceptable as an option that defaults to off/false?\n\n",
			"disapproval": false,
			"date": "2011-10-19 06:02:36.509185",
			"approval": false
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 5298043: godoc: highlight meaningful names in toc listings",
	"created": "2011-10-18 22:30:36.761924",
	"patchsets": [
		1,
		4001,
		8001
	],
	"modified": "2011-10-19 06:02:36.623532",
	"closed": true,
	"issue": 5298043
}