{
	"description": "exp/template/html: type fixed point computation in template\n\nI found a simple test case that does require doing the fixed point TODO\nin computeOutCtx.\n\nI found a way though to do this and simplify away the escapeRange\nhackiness that was added in http://codereview.appspot.com/5012044/",
	"cc": [
		"nigeltao@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5015052/diff/11001/src/pkg/exp/template/html/escape.go\nFile src/pkg/exp/template/html/escape.go (right):\n\nhttp://codereview.appspot.com/5015052/diff/11001/src/pkg/exp/template/html/escape.go#newcode364\nsrc/pkg/exp/template/html/escape.go:364: // inferences in e if the inferences and output context satisfy filter.\nThe boolean return value deserves a comment.\n\nhttp://codereview.appspot.com/5015052/diff/11001/src/pkg/exp/template/html/escape.go#newcode440\nsrc/pkg/exp/template/html/escape.go:440: a, ok := e.escapeTemplateBody(c, t)\nI would prefer variables named \"c1\" and \"c2\" instead of \"a\" and \"b\".\n\nhttp://codereview.appspot.com/5015052/diff/11001/src/pkg/exp/template/html/escape.go#newcode461\nsrc/pkg/exp/template/html/escape.go:461: // is accurate.\nWould s/it is accurate/that assumption was correct/ be better? What are the consequences if \"the best guess\" is wrong?\n\nhttp://codereview.appspot.com/5015052/diff/11001/src/pkg/exp/template/html/escape.go#newcode477\nsrc/pkg/exp/template/html/escape.go:477: // take the fast path out of escapeTree instead of inf. recursing.\nI wouldn't abbreviate \"infinitely\".",
			"disapproval": false,
			"date": "2011-09-16 02:58:49.360261",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM.\n\nI still find it a little confusing, and I'm not sure if \"accurate\" is the best description of the resultant context, but after staring at it for a while, I think it's OK.\n\nhttp://codereview.appspot.com/5015052/diff/13002/src/pkg/exp/template/html/escape.go\nFile src/pkg/exp/template/html/escape.go (right):\n\nhttp://codereview.appspot.com/5015052/diff/13002/src/pkg/exp/template/html/escape.go#newcode365\nsrc/pkg/exp/template/html/escape.go:365: f := newEscaper(e.set)\nI'd name the variable \"e1\". For me, \"f\" would mean a func-typed variable.\n\nhttp://codereview.appspot.com/5015052/diff/13002/src/pkg/exp/template/html/escape.go#newcode371\nsrc/pkg/exp/template/html/escape.go:371: ok := filter(f, c)\nYou could make this\nok := filter != nil && filter(f, c)\nso that a nil func would mean \"return false\", and you wouldn't need an explicit \"no\" func.\n\nhttp://codereview.appspot.com/5015052/diff/13002/src/pkg/exp/template/html/escape.go#newcode440\nsrc/pkg/exp/template/html/escape.go:440: // Look for a fixed point by assuming a as the output context.\ns/assuming a/assuming c1/.\n\nSimilarly a few lines below.\n\nhttp://codereview.appspot.com/5015052/diff/13002/src/pkg/exp/template/html/escape.go#newcode460\nsrc/pkg/exp/template/html/escape.go:460: filter := func(f *escaper, o context) bool {\nAgain, I would prefer e1 and c1.",
			"disapproval": false,
			"date": "2011-09-16 06:18:37.101012",
			"approval": true
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-09-15 21:46:21.075933",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=a33d941e6c51 ***\n\nexp/template/html: type fixed point computation in template\n\nI found a simple test case that does require doing the fixed point TODO\nin computeOutCtx.\n\nI found a way though to do this and simplify away the escapeRange\nhackiness that was added in http://codereview.appspot.com/5012044/\n\nR=nigeltao\nCC=golang-dev\nhttp://codereview.appspot.com/5015052\n\nhttp://codereview.appspot.com/5015052/diff/13002/src/pkg/exp/template/html/escape.go\nFile src/pkg/exp/template/html/escape.go (right):\n\nhttp://codereview.appspot.com/5015052/diff/13002/src/pkg/exp/template/html/escape.go#newcode365\nsrc/pkg/exp/template/html/escape.go:365: f := newEscaper(e.set)\nOn 2011/09/16 06:18:37, nigeltao wrote:\n> I'd name the variable \"e1\". For me, \"f\" would mean a func-typed variable.\n\nDone.\n\nhttp://codereview.appspot.com/5015052/diff/13002/src/pkg/exp/template/html/escape.go#newcode371\nsrc/pkg/exp/template/html/escape.go:371: ok := filter(f, c)\nOn 2011/09/16 06:18:37, nigeltao wrote:\n> You could make this\n> ok := filter != nil && filter(f, c)\n> so that a nil func would mean \"return false\", and you wouldn't need an explicit\n> \"no\" func.\n\nDone.\n\nhttp://codereview.appspot.com/5015052/diff/13002/src/pkg/exp/template/html/escape.go#newcode440\nsrc/pkg/exp/template/html/escape.go:440: // Look for a fixed point by assuming a as the output context.\nOn 2011/09/16 06:18:37, nigeltao wrote:\n> s/assuming a/assuming c1/.\n> \n> Similarly a few lines below.\n\nDone.\n\nhttp://codereview.appspot.com/5015052/diff/13002/src/pkg/exp/template/html/escape.go#newcode460\nsrc/pkg/exp/template/html/escape.go:460: filter := func(f *escaper, o context) bool {\nOn 2011/09/16 06:18:37, nigeltao wrote:\n> Again, I would prefer e1 and c1.\n\nDone.",
			"disapproval": false,
			"date": "2011-09-16 07:34:29.175452",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"mikesamuel@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Incremental diffs at http://codereview.appspot.com/5015052/diff2/12001:13002/src/pkg/exp/template/html/escape.go\n\nhttp://codereview.appspot.com/5015052/diff/11001/src/pkg/exp/template/html/escape.go\nFile src/pkg/exp/template/html/escape.go (right):\n\nhttp://codereview.appspot.com/5015052/diff/11001/src/pkg/exp/template/html/escape.go#newcode364\nsrc/pkg/exp/template/html/escape.go:364: // inferences in e if the inferences and output context satisfy filter.\nOn 2011/09/16 02:58:49, nigeltao wrote:\n> The boolean return value deserves a comment.\n\n// It returns the best guess at an output context, and the result of the filter\n// which is the same as whether e was updated.\n\nhttp://codereview.appspot.com/5015052/diff/11001/src/pkg/exp/template/html/escape.go#newcode440\nsrc/pkg/exp/template/html/escape.go:440: a, ok := e.escapeTemplateBody(c, t)\nOn 2011/09/16 02:58:49, nigeltao wrote:\n> I would prefer variables named \"c1\" and \"c2\" instead of \"a\" and \"b\".\n\nDone.\n\nhttp://codereview.appspot.com/5015052/diff/11001/src/pkg/exp/template/html/escape.go#newcode461\nsrc/pkg/exp/template/html/escape.go:461: // is accurate.\nOn 2011/09/16 02:58:49, nigeltao wrote:\n> Would s/it is accurate/that assumption was correct/ be better?\n\nDone.\n\n> What are the consequences if \"the best guess\" is wrong?\n\nIf the best guess is wrong, we error out.\nIf we used the guess instead of erroring out, then our type inference would be unsound and it's hard to predict how that would affect the security of the system -- reentrant templates are not common in small project so it would probably have little effect there, but large projects have dark corners.\n\nhttp://codereview.appspot.com/5015052/diff/11001/src/pkg/exp/template/html/escape.go#newcode477\nsrc/pkg/exp/template/html/escape.go:477: // take the fast path out of escapeTree instead of inf. recursing.\nOn 2011/09/16 02:58:49, nigeltao wrote:\n> I wouldn't abbreviate \"infinitely\".\n\nDone.",
			"disapproval": false,
			"date": "2011-09-16 03:12:54.845619",
			"approval": false
		}
	],
	"owner_email": "mikesamuel@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "MikeSamuel",
	"subject": "code review 5015052: exp/template/html: type fixed point computation in template",
	"created": "2011-09-15 21:20:31.130119",
	"patchsets": [
		1,
		2001,
		4001,
		1002,
		2004,
		9001,
		10005,
		10008,
		11001,
		12001,
		13002,
		18001
	],
	"modified": "2011-09-16 07:34:30.223314",
	"closed": true,
	"issue": 5015052
}