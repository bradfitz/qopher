{
	"description": "exp/ssa: clarify spec and impl on ChangeInterface vs TypeAssert:\nChangeInterface is only for infallible interface conversions.\n\nAdded utilities:\n- emitTypeTest (performs simplifications of infallible assertions)\n- emitTypeAssert\n- isSuperinterface",
	"cc": [
		"gri@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.exp",
			"disapproval": false,
			"date": "2013-05-03 17:01:59.162620",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/9181043/diff/5001/ssa/emit.go\nFile ssa/emit.go (right):\n\nhttps://codereview.appspot.com/9181043/diff/5001/ssa/emit.go#newcode227\nssa/emit.go:227: func emitTypeAssert(f *Function, x Value, t types.Type) Value {\nquestion unrelated to this CL:\n\nwouldn't it make sense to have all the emit functions be methods of a *Function?\n\nhttps://codereview.appspot.com/9181043/diff/5001/ssa/util.go\nFile ssa/util.go (right):\n\nhttps://codereview.appspot.com/9181043/diff/5001/ssa/util.go#newcode114\nssa/util.go:114: for _, ym := range y.Methods {\nPlease add a comment that this is (theoretically) a quadratic algorithm. go/types should probably provide this functionality.",
			"disapproval": false,
			"date": "2013-05-03 22:04:41.889720",
			"approval": true
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9181043/diff/5001/ssa/emit.go\nFile ssa/emit.go (right):\n\nhttps://codereview.appspot.com/9181043/diff/5001/ssa/emit.go#newcode227\nssa/emit.go:227: func emitTypeAssert(f *Function, x Value, t types.Type) Value {\nOn 2013/05/03 22:04:42, gri wrote:\n> question unrelated to this CL:\n> \n> wouldn't it make sense to have all the emit functions be methods of a *Function?\n\nI've thought about it, but it doesn't seem compelling.  Syntactically, it makes almost no difference.  Methods do have the benefit that they don't pollute the package namespace, though these emitX functions are unlikely to collide with anything else.  Methods have the downside of bloating the methodset of the type (not sure how important that is, but I've been dinged for it in other reviews).  These functions aren't required to be methods by any interface.\n\nAesthetically I quite like standalone functions because they don't bias towards any one of their arguments, and they convey the intent that they aren't closely coupled to the internals of Function.\n\nThere's probably a Go FAQ article written (or to be written) about this dilemma.\n\nhttps://codereview.appspot.com/9181043/diff/5001/ssa/util.go\nFile ssa/util.go (right):\n\nhttps://codereview.appspot.com/9181043/diff/5001/ssa/util.go#newcode114\nssa/util.go:114: for _, ym := range y.Methods {\nOn 2013/05/03 22:04:42, gri wrote:\n> Please add a comment that this is (theoretically) a quadratic algorithm.\n> go/types should probably provide this functionality.\n\nYep, added.\n\nYou'll note the comment above which says many of these functions belong in go/types. :)",
			"disapproval": false,
			"date": "2013-05-03 22:21:26.463850",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=4e9b2b039d61&repo=exp ***\n\nexp/ssa: clarify spec and impl on ChangeInterface vs TypeAssert:\nChangeInterface is only for infallible interface conversions.\n\nAdded utilities:\n- emitTypeTest (performs simplifications of infallible assertions)\n- emitTypeAssert\n- isSuperinterface\n\nR=gri\nCC=golang-dev\nhttps://codereview.appspot.com/9181043",
			"disapproval": false,
			"date": "2013-05-03 22:24:10.616640",
			"approval": false
		}
	],
	"owner_email": "adonovan@google.com",
	"private": false,
	"base_url": "",
	"owner": "adonovan",
	"subject": "code review 9181043: exp/ssa: clarify spec and impl on ChangeInterface vs Ty...",
	"created": "2013-05-03 16:55:08.984570",
	"patchsets": [
		1,
		2001,
		5001,
		15001
	],
	"modified": "2013-05-03 22:24:11.359430",
	"closed": true,
	"issue": 9181043
}