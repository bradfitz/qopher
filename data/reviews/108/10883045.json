{
	"description": "encoding/json: escape U+2028 and U+2029.\n\nFixes issue 5836.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"r@golang.org",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "NOT LGTM\r\n\r\nSame comment I made on Brad's CL: it seems like this belongs in HTMLEscape,\r\nor else HTMLEscape should not exist.\r\n",
			"disapproval": true,
			"date": "2013-07-08 19:27:30.512810",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The input to this is not HTML, nor is the output, nor is the output\r\nnecessarily inserted into HTML (e.g. this is a security hole if you\r\nare passing it straight to a JS interpreter). It does not make sense\r\nto put it in HTMLEscape because people won't know or remember to use\r\nthat and they won't even realise they have a problem until someone\r\nexploits this hole to do an XSS attack. This is the same reason that\r\nthis function escapes < and >; not because they are strictly\r\nnecessary, but because it makes it safer.\r\n\r\nArguably, yes, HTMLEscape should not exist. Unfortunately that ship\r\nhas sailed. We can still make this code safer and with almost no\r\noverhead.\r\n",
			"disapproval": false,
			"date": "2013-07-09 00:08:33.403450",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping\r\n",
			"disapproval": false,
			"date": "2013-07-11 03:22:47.509350",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "OK but this CL is incomplete.\n\nHTMLEscape and func compact should both do the conversion too.\n\nHTMLEscape should do the conversion too. HTMLEscape is explicitly for converting JSON to be safe to use in <script> tags, so JavaScript.\n\nfunc compact should do this too. compact is called on the result of a MarshalJSON method to check for validity and compact the JSON. It also rewrites < > &, so it should rewrite U+2028, U+2029 too.\n\nhttps://codereview.appspot.com/10883045/diff/14001/src/pkg/encoding/json/encode.go\nFile src/pkg/encoding/json/encode.go (right):\n\nhttps://codereview.appspot.com/10883045/diff/14001/src/pkg/encoding/json/encode.go#newcode564\nsrc/pkg/encoding/json/encode.go:564: start = i + size\nPlease make this\n\ni += size\nstart = i\ncontinue\n\nto match the other \"handled\" code above.",
			"disapproval": false,
			"date": "2013-07-12 02:11:18.362890",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 12 July 2013 12:11,  <rsc@golang.org> wrote:\r\n\r\n> func compact should do this too. compact is called on the result of a\r\n> MarshalJSON method to check for validity and compact the JSON. It also\r\n> rewrites < > &, so it should rewrite U+2028, U+2029 too.\r\n\r\nActually this was simpler. U+2028 and U+2029 are effectively space\r\n(they are overly fancy \\n), so I can just add them to func isSpace and\r\ncompact will strip them out entirely.\r\n",
			"disapproval": false,
			"date": "2013-07-12 04:03:26.911290",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "All done. PTAL.\r\n",
			"disapproval": false,
			"date": "2013-07-12 03:57:33.427730",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't see any change to isSpace, which is good.\nU+2028 or U+2029 outside quoted strings (where isSpace is used) is invalid and should be rejected. It's the ones inside quoted strings we want to convert, and those don't use isSpace.\n\nhttps://codereview.appspot.com/10883045/diff/24001/src/pkg/encoding/json/encode.go\nFile src/pkg/encoding/json/encode.go (right):\n\nhttps://codereview.appspot.com/10883045/diff/24001/src/pkg/encoding/json/encode.go#newcode176\nsrc/pkg/encoding/json/encode.go:176: c, size := utf8.DecodeRune(src[i:])\nCan we keep this routine operating byte at a time? I've tried to keep these as tight as possible.\n\n// Convert U+2028 and U+2029 (E2 80 A8 and E2 80 A9).\nif c == 0xE2 && i+2 < len(src) && src[i+1] == 0x80 && src[i+2]&^1 == 0xA8 {\n    ...\n}\ni++\n\nhttps://codereview.appspot.com/10883045/diff/24001/src/pkg/encoding/json/indent.go\nFile src/pkg/encoding/json/indent.go (right):\n\nhttps://codereview.appspot.com/10883045/diff/24001/src/pkg/encoding/json/indent.go#newcode22\nsrc/pkg/encoding/json/indent.go:22: c, size := utf8.DecodeRune(src[i:])\nSame.",
			"disapproval": false,
			"date": "2013-07-12 04:09:19.112860",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=7e8952db0133 ***\n\nencoding/json: escape U+2028 and U+2029.\n\nFixes issue 5836.\n\nR=golang-dev, bradfitz, r, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/10883045\n\nhttps://codereview.appspot.com/10883045/diff/32001/src/pkg/encoding/json/encode.go\nFile src/pkg/encoding/json/encode.go (right):\n\nhttps://codereview.appspot.com/10883045/diff/32001/src/pkg/encoding/json/encode.go#newcode160\nsrc/pkg/encoding/json/encode.go:160: // so just scan the string one rune at a time.\nOn 2013/07/12 04:31:35, rsc wrote:\n> s/rune/byte/\n\nDone.\n\nhttps://codereview.appspot.com/10883045/diff/32001/src/pkg/encoding/json/encode.go#newcode177\nsrc/pkg/encoding/json/encode.go:177: dst.WriteString(`\\u20`)\nOn 2013/07/12 04:31:35, rsc wrote:\n> dst.WriteString(`\\u202`)\n> dst.WriteByte(hex[src[i+2]&0xF])\n> start = i + 3\n\nDone.\n\nhttps://codereview.appspot.com/10883045/diff/32001/src/pkg/encoding/json/indent.go\nFile src/pkg/encoding/json/indent.go (right):\n\nhttps://codereview.appspot.com/10883045/diff/32001/src/pkg/encoding/json/indent.go#newcode35\nsrc/pkg/encoding/json/indent.go:35: dst.WriteString(`\\u20`)\nOn 2013/07/12 04:31:35, rsc wrote:\n> dst.WriteString(`\\u202`)\n> dst.WriteByte(hex[src[i+2]&0xF])\n> start = i + 3\n\nDone.",
			"disapproval": false,
			"date": "2013-07-12 04:36:05.411480",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 12 July 2013 14:09,  <rsc@golang.org> wrote:\r\n\r\n> I don't see any change to isSpace, which is good.\r\n> U+2028 or U+2029 outside quoted strings (where isSpace is used) is\r\n> invalid and should be rejected. It's the ones inside quoted strings we\r\n> want to convert, and those don't use isSpace.\r\n\r\nYeah, just realised my mistake and thought I'd be able to upload a fix\r\nbefore you looked at this again.  ;-)\r\n\r\nStand by...\r\n",
			"disapproval": false,
			"date": "2013-07-12 04:10:02.892910",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\r\n",
			"disapproval": false,
			"date": "2013-07-12 04:23:17.700360",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/10883045/diff/32001/src/pkg/encoding/json/encode.go\nFile src/pkg/encoding/json/encode.go (right):\n\nhttps://codereview.appspot.com/10883045/diff/32001/src/pkg/encoding/json/encode.go#newcode160\nsrc/pkg/encoding/json/encode.go:160: // so just scan the string one rune at a time.\ns/rune/byte/\n\nhttps://codereview.appspot.com/10883045/diff/32001/src/pkg/encoding/json/encode.go#newcode177\nsrc/pkg/encoding/json/encode.go:177: dst.WriteString(`\\u20`)\ndst.WriteString(`\\u202`)\ndst.WriteByte(hex[src[i+2]&0xF])\nstart = i + 3\n\nhttps://codereview.appspot.com/10883045/diff/32001/src/pkg/encoding/json/indent.go\nFile src/pkg/encoding/json/indent.go (right):\n\nhttps://codereview.appspot.com/10883045/diff/32001/src/pkg/encoding/json/indent.go#newcode35\nsrc/pkg/encoding/json/indent.go:35: dst.WriteString(`\\u20`)\ndst.WriteString(`\\u202`)\ndst.WriteByte(hex[src[i+2]&0xF])\nstart = i + 3",
			"disapproval": false,
			"date": "2013-07-12 04:31:35.179350",
			"approval": true
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 5 July 2013 05:56, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n\r\n> Last time I sent a patch for this, rsc rejected it.\r\n\r\nI assume https://codereview.appspot.com/4519063/ is what you mean.\r\n\r\nI've read through it, and disagree with Russ. Also, notice at that\r\ntime (over two years ago) this code did not escape \\r, \\n, < or >, and\r\nthose have been subsequently added for security reasons; the same\r\nreasoning applies to U+2028 and U+2029.\r\n\r\nI don't buy the argument about sticking strictly to the JSON spec for\r\ntwo main reasons: (1) security (we escape < and > even though the spec\r\ndoesn't require it), (2) precedence (we have gone beyond specs in a\r\nnumber of places for lesser reasons, e.g. Content-Type sniffing in\r\nnet/http). Note in particular that the spec does not *forbid*\r\nescaping; we are still producing valid JSON.\r\n\r\nI will also note that Google's internal JSON encoders also escape\r\nU+2028 and U+2029.\r\n",
			"disapproval": false,
			"date": "2013-07-04 23:47:28.784690",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but wait for rsc",
			"disapproval": false,
			"date": "2013-07-05 01:24:01.406330",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I agree with you.\r\n On Jul 4, 2013 4:47 PM, \"David Symonds\" <dsymonds@golang.org> wrote:\r\n\r\n> On 5 July 2013 05:56, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n>\r\n> > Last time I sent a patch for this, rsc rejected it.\r\n>\r\n> I assume https://codereview.appspot.com/4519063/ is what you mean.\r\n>\r\n> I've read through it, and disagree with Russ. Also, notice at that\r\n> time (over two years ago) this code did not escape \\r, \\n, < or >, and\r\n> those have been subsequently added for security reasons; the same\r\n> reasoning applies to U+2028 and U+2029.\r\n>\r\n> I don't buy the argument about sticking strictly to the JSON spec for\r\n> two main reasons: (1) security (we escape < and > even though the spec\r\n> doesn't require it), (2) precedence (we have gone beyond specs in a\r\n> number of places for lesser reasons, e.g. Content-Type sniffing in\r\n> net/http). Note in particular that the spec does not *forbid*\r\n> escaping; we are still producing valid JSON.\r\n>\r\n> I will also note that Google's internal JSON encoders also escape\r\n> U+2028 and U+2029.\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-04 23:50:10.061180",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10883045/diff/6001/src/pkg/encoding/json/encode.go\nFile src/pkg/encoding/json/encode.go (right):\n\nhttps://codereview.appspot.com/10883045/diff/6001/src/pkg/encoding/json/encode.go#newcode551\nsrc/pkg/encoding/json/encode.go:551: if c == '\\u2028' || c == '\\u2029' {\nOn 2013/07/05 00:04:17, r wrote:\n> explain what these are and cite a reference\n\nDone.",
			"disapproval": false,
			"date": "2013-07-05 00:28:51.374780",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10883045/diff/6001/src/pkg/encoding/json/encode.go\nFile src/pkg/encoding/json/encode.go (right):\n\nhttps://codereview.appspot.com/10883045/diff/6001/src/pkg/encoding/json/encode.go#newcode551\nsrc/pkg/encoding/json/encode.go:551: if c == '\\u2028' || c == '\\u2029' {\nexplain what these are and cite a reference",
			"disapproval": false,
			"date": "2013-07-05 00:04:17.539740",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Last time I sent a patch for this, rsc rejected it.\r\n\r\n\r\n\r\nOn Wed, Jul 3, 2013 at 11:17 PM, <dsymonds@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> encoding/json: escape U+2028 and U+2029.\r\n>\r\n> Fixes issue 5836.\r\n>\r\n> Please review this at https://codereview.appspot.**com/10883045/<https://codereview.appspot.com/10883045/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/encoding/json/decode_**test.go\r\n>   M src/pkg/encoding/json/encode.**go\r\n>\r\n>\r\n> Index: src/pkg/encoding/json/decode_**test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/encoding/json/**decode_test.go\r\n> +++ b/src/pkg/encoding/json/**decode_test.go\r\n> @@ -568,14 +568,14 @@\r\n>  }\r\n>\r\n>  func TestEscape(t *testing.T) {\r\n> -       const input = `\"foobar\"<html>`\r\n> -       const expected = `\"\\\"foobar\\\"\\u003chtml\\u003e\"`\r\n> +       const input = `\"foobar\"<html>` + \" [\\u2028 \\u2029]\"\r\n> +       const expected = `\"\\\"foobar\\\"\\u003chtml\\u003e [\\u2028 \\u2029]\"`\r\n>         b, err := Marshal(input)\r\n>         if err != nil {\r\n>                 t.Fatalf(\"Marshal error: %v\", err)\r\n>         }\r\n>         if s := string(b); s != expected {\r\n> -               t.Errorf(\"Encoding of [%s] was [%s], want [%s]\", input, s,\r\n> expected)\r\n> +               t.Errorf(\"Encoding of [%s]:\\n got [%s]\\nwant [%s]\", input,\r\n> s, expected)\r\n>         }\r\n>  }\r\n>\r\n> Index: src/pkg/encoding/json/encode.**go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/encoding/json/**encode.go\r\n> +++ b/src/pkg/encoding/json/**encode.go\r\n> @@ -548,6 +548,14 @@\r\n>                 if c == utf8.RuneError && size == 1 {\r\n>                         e.error(&InvalidUTF8Error{s})\r\n>                 }\r\n> +               if c == '\\u2028' || c == '\\u2029' {\r\n> +                       if start < i {\r\n> +                               e.WriteString(s[start:i])\r\n> +                       }\r\n> +                       e.WriteString(`\\u202`)\r\n> +                       e.WriteByte(hex[c&0xF])\r\n> +                       start = i + size\r\n> +               }\r\n>                 i += size\r\n>         }\r\n>         if start < len(s) {\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-04 19:57:00.184710",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-07-04 06:17:16.086800",
			"approval": false
		}
	],
	"owner_email": "dsymonds@golang.org",
	"private": false,
	"base_url": "",
	"owner": "dsymonds",
	"subject": "code review 10883045: encoding/json: escape U+2028 and U+2029.",
	"created": "2013-07-04 06:16:46.250000",
	"patchsets": [
		1,
		3001,
		6001,
		14001,
		24001,
		32001,
		33005
	],
	"modified": "2013-07-12 04:36:08.915840",
	"closed": true,
	"issue": 10883045
}