{
	"description": "doc: remove overuse of simply\n\nSpecifically, remove simply where it is claiming that the\ncode or the action to be carried out is simple, since the\nreader might disagree.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"gri@golang.org"
	],
	"reviewers": [
		"r@golang.org",
		"adg@google.com"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=4609ed199ec5 ***\n\ndoc: remove overuse of simply\n\nSpecifically, remove simply where it is claiming that the\ncode or the action to be carried out is simple, since the\nreader might disagree.\n\nR=golang-dev, bradfitz, gri\nCC=golang-dev\nhttp://codereview.appspot.com/5637048",
			"disapproval": false,
			"date": "2012-02-06 18:34:38.750990",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-06 17:33:51.452535",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn Mon, Feb 6, 2012 at 9:33 AM, <rsc@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> doc: remove overuse of simply\n>\n> Specifically, remove simply where it is claiming that the\n> code or the action to be carried out is simple, since the\n> reader might disagree.\n>\n> Please review this at http://codereview.appspot.com/**5637048/<http://codereview.appspot.com/5637048/>\n>\n> Affected files:\n>  M doc/articles/error_handling.**html\n>  M doc/articles/error_handling.**tmpl\n>  M doc/devel/weekly.html\n>  M doc/gccgo_install.html\n>  M src/pkg/crypto/cipher/io.go\n>  M src/pkg/database/sql/driver/**driver.go\n>  M src/pkg/encoding/gob/decoder.**go\n>  M src/pkg/expvar/expvar.go\n>  M src/pkg/text/tabwriter/**tabwriter.go\n>\n>\n> Index: doc/articles/error_handling.**html\n> ==============================**==============================**=======\n> --- a/doc/articles/error_handling.**html\n> +++ b/doc/articles/error_handling.**html\n> @@ -415,7 +415,7 @@\n>  <li>write a constructor function for <code>appError</code> that stores the\n>  stack trace for easier debugging,\n>  <li>recover from panics inside the <code>appHandler</code>, logging the\n> error\n> -to the console as \"Critical,\" while simply telling the user \"a serious\n> error\n> +to the console as \"Critical,\" while telling the user \"a serious error\n>  has occurred.\" This is a nice touch to avoid exposing the user to\n> inscrutable\n>  error messages caused by programming errors.\n>  See the <a href=\"defer_panic_recover.**html\">Defer, Panic, and\n> Recover</a>\n> Index: doc/articles/error_handling.**tmpl\n> ==============================**==============================**=======\n> --- a/doc/articles/error_handling.**tmpl\n> +++ b/doc/articles/error_handling.**tmpl\n> @@ -296,7 +296,7 @@\n>  <li>write a constructor function for <code>appError</code> that stores the\n>  stack trace for easier debugging,\n>  <li>recover from panics inside the <code>appHandler</code>, logging the\n> error\n> -to the console as \"Critical,\" while simply telling the user \"a serious\n> error\n> +to the console as \"Critical,\" while telling the user \"a serious error\n>  has occurred.\" This is a nice touch to avoid exposing the user to\n> inscrutable\n>  error messages caused by programming errors.\n>  See the <a href=\"defer_panic_recover.**html\">Defer, Panic, and\n> Recover</a>\n> Index: doc/devel/weekly.html\n> ==============================**==============================**=======\n> --- a/doc/devel/weekly.html\n> +++ b/doc/devel/weekly.html\n> @@ -916,7 +916,7 @@\n>  ReverseProxy types have been moved from http to httputil.\n>\n>  The API for html/template is now a direct copy of the template API,\n> instead of\n> -exposing a single Escape function. For HTML templates, simply use the\n> +exposing a single Escape function. For HTML templates, use the\n>  html/template package as you would the template package.\n>\n>  Other changes:\n> Index: doc/gccgo_install.html\n> ==============================**==============================**=======\n> --- a/doc/gccgo_install.html\n> +++ b/doc/gccgo_install.html\n> @@ -360,7 +360,7 @@\n>  the name of a Go function that does not have a receiver is\n>  <code>prefix.package.**Functionname</code>. The prefix is set by\n>  the <code>-fgo-prefix</code> option used when the package is compiled;\n> -if the option is not used, the default is simply <code>go</code>.\n> +if the option is not used, the default is <code>go</code>.\n>  To call the function from C you must set the name using\n>  a <code>gcc</code> extension similar to the <code>gccgo</code>\n>  extension.\n> Index: src/pkg/crypto/cipher/io.go\n> ==============================**==============================**=======\n> --- a/src/pkg/crypto/cipher/io.go\n> +++ b/src/pkg/crypto/cipher/io.go\n> @@ -9,7 +9,7 @@\n>  // The Stream* objects are so simple that all their members are public.\n> Users\n>  // can create them themselves.\n>\n> -// StreamReader wraps a Stream into an io.Reader. It simply calls\n> XORKeyStream\n> +// StreamReader wraps a Stream into an io.Reader. It calls XORKeyStream\n>  // to process each slice of data which passes through.\n>  type StreamReader struct {\n>        S Stream\n> @@ -22,7 +22,7 @@\n>        return\n>  }\n>\n> -// StreamWriter wraps a Stream into an io.Writer. It simply calls\n> XORKeyStream\n> +// StreamWriter wraps a Stream into an io.Writer. It calls XORKeyStream\n>  // to process each slice of data which passes through. If any Write call\n>  // returns short then the StreamWriter is out of sync and must be\n> discarded.\n>  type StreamWriter struct {\n> Index: src/pkg/database/sql/driver/**driver.go\n> ==============================**==============================**=======\n> --- a/src/pkg/database/sql/driver/**driver.go\n> +++ b/src/pkg/database/sql/driver/**driver.go\n> @@ -5,7 +5,7 @@\n>  // Package driver defines interfaces to be implemented by database\n>  // drivers as used by package sql.\n>  //\n> -// Code simply using databases should use package sql.\n> +// Code using databases should use package sql.\n>  //\n>  // Drivers only need to be aware of a subset of Go's types.  The sql\n> package\n>  // will convert all types into one of the following:\n> Index: src/pkg/encoding/gob/decoder.**go\n> ==============================**==============================**=======\n> --- a/src/pkg/encoding/gob/**decoder.go\n> +++ b/src/pkg/encoding/gob/**decoder.go\n> @@ -135,7 +135,7 @@\n>  // and returns the type id of the next value.  It returns -1 at\n>  // EOF.  Upon return, the remainder of dec.buf is the value to be\n>  // decoded.  If this is an interface value, it can be ignored by\n> -// simply resetting that buffer.\n> +// resetting that buffer.\n>  func (dec *Decoder) decodeTypeSequence(isInterface bool) typeId {\n>        for dec.err == nil {\n>                if dec.buf.Len() == 0 {\n> Index: src/pkg/expvar/expvar.go\n> ==============================**==============================**=======\n> --- a/src/pkg/expvar/expvar.go\n> +++ b/src/pkg/expvar/expvar.go\n> @@ -16,7 +16,7 @@\n>  //\n>  // The package is sometimes only imported for the side effect of\n>  // registering its HTTP handler and the above variables.  To use it\n> -// this way, simply link this package into your program:\n> +// this way, link this package into your program:\n>  //     import _ \"expvar\"\n>  //\n>  package expvar\n> Index: src/pkg/text/tabwriter/**tabwriter.go\n> ==============================**==============================**=======\n> --- a/src/pkg/text/tabwriter/**tabwriter.go\n> +++ b/src/pkg/text/tabwriter/**tabwriter.go\n> @@ -52,7 +52,7 @@\n>  // this flag.\n>  //\n>  // If a Writer is configured to filter HTML, HTML tags and entities\n> -// are simply passed through. The widths of tags and entities are\n> +// are passed through. The widths of tags and entities are\n>  // assumed to be zero (tags) and one (entities) for formatting purposes.\n>  //\n>  // A segment of text may be escaped by bracketing it with Escape\n> @@ -448,7 +448,7 @@\n>\n>  // Flush should be called after the last call to Write to ensure\n>  // that any data buffered in the Writer is written to output. Any\n> -// incomplete escape sequence at the end is simply considered\n> +// incomplete escape sequence at the end is considered\n>  // complete for formatting purposes.\n>  //\n>  func (b *Writer) Flush() (err error) {\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-02-06 17:37:39.658226",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5637048/diff/1002/src/pkg/database/sql/driver/driver.go\nFile src/pkg/database/sql/driver/driver.go (right):\n\nhttp://codereview.appspot.com/5637048/diff/1002/src/pkg/database/sql/driver/driver.go#newcode8\nsrc/pkg/database/sql/driver/driver.go:8: // Code using databases should use package sql.\ns/Code/Code only/ ?",
			"disapproval": false,
			"date": "2012-02-06 17:38:35.298790",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Feb 6, 2012 at 12:38,  <gri@golang.org> wrote:\n> s/Code/Code only/ ?\n\nChanged to\n\nMost code should use package sql.\n",
			"disapproval": false,
			"date": "2012-02-06 18:23:22.876042",
			"approval": false
		},
		{
			"sender": "adg@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Feb 7, 2012 7:13 AM, <r@golang.org> wrote:\n>\n> That's simply great.\n>\n> Actually, I believe we frequently overuse other adverbs generally.\n\nTotally.\n\n> -rob\n>\n>\n> http://codereview.appspot.com/5637048/\n",
			"disapproval": false,
			"date": "2012-02-06 21:56:26.852098",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "That's simply great.\n\nActually, I believe we frequently overuse other adverbs generally.\n\n-rob",
			"disapproval": false,
			"date": "2012-02-06 20:13:04.223797",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5637048: doc: remove overuse of simply",
	"created": "2012-02-06 17:33:26.490589",
	"patchsets": [
		1,
		2001,
		1002,
		6003
	],
	"modified": "2012-02-06 21:56:26.928140",
	"closed": true,
	"issue": 5637048
}