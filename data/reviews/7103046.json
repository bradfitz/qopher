{
	"description": "time: fix race\n\nFixes issue 4622",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"dvyukov@google.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "whoops, fixing the transpose.\r\n\r\nTested by hand.  Will try to write a reliable test.\r\n\r\nOn Fri, Jan 11, 2013 at 2:21 PM, <bradfitz@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> time: fix race\r\n>\r\n> Fixes issue 4622\r\n>\r\n> Please review this at https://codereview.appspot.**com/7103046/<https://codereview.appspot.com/7103046/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/time/time.go\r\n>\r\n>\r\n> Index: src/pkg/time/time.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/time/time.go\r\n> +++ b/src/pkg/time/time.go\r\n> @@ -257,12 +257,12 @@\r\n>         return uint64(sec + (unixToInternal + internalToAbsolute))\r\n>  }\r\n>\r\n> -// locabs is a combination of the Zone and abs methods,\r\n> +// locbas is a combination of the Zone and abs methods,\r\n>  // extracting both return values from a single zone lookup.\r\n>  func (t Time) locabs() (name string, offset int, abs uint64) {\r\n>         l := t.loc\r\n> -       if l == nil {\r\n> -               l = &utcLoc\r\n> +       if l == nil || l == &localLoc {\r\n> +               l = l.get()\r\n>         }\r\n>         // Avoid function call if we hit the local time cache.\r\n>         sec := t.sec + internalToUnix\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-11 22:23:10.417250",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi Brad,\n\nSorry this is still failing for me so I don't think I can test it reliably. Maybe we need to ask Dmitry for some of his time.\n\nCheers\n\nDave",
			"disapproval": false,
			"date": "2013-01-14 00:18:03.534860",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi Brad, this didn't pass the test included with the error report on my machine. I don't think it is possible to write a test case inside the time package itself, as internal_test.go contains an init routine which will setup all the location stuff before any test code can run. Maybe a sub package ?\n\nhttps://codereview.appspot.com/7103046/diff/2002/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttps://codereview.appspot.com/7103046/diff/2002/src/pkg/time/time.go#newcode260\nsrc/pkg/time/time.go:260: // locbas is a combination of the Zone and abs methods,\ntypo ?",
			"disapproval": false,
			"date": "2013-01-11 22:30:40.802190",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jan 11, 2013 at 2:53 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n\r\n>\r\n>\r\n> On Fri, Jan 11, 2013 at 2:43 PM, <dave@cheney.net> wrote:\r\n>\r\n>> Thanks Brad, but now another test fails to pass under the race detector\r\n>\r\n>\r\n> I can't reproduce that one.\r\n>\r\n\r\nI can't reproduce this with or without my patch, on Linux or OS X.\r\n\r\nHow are you triggering it?\r\n",
			"disapproval": false,
			"date": "2013-01-11 23:00:03.665950",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-14 00:18:49.793410",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-11 22:40:43.078650",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-01-11 22:21:21.453330",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "If the issue was that the code path skip \"localOnce.Do(initLocal)\", then LGTM.",
			"disapproval": false,
			"date": "2013-01-14 17:22:01.153520",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It called it, but too late. It first accessed some cache fields from\r\nlocalLoc and then found it was invalid and then called the Once. But if two\r\ngoroutines did that, one would see a racy cache while the other Once was\r\nrunning.\r\n\r\nThis moves the init to the top.\r\nOn Jan 14, 2013 9:22 AM, <dvyukov@google.com> wrote:\r\n\r\n> If the issue was that the code path skip \"localOnce.Do(initLocal)\", then\r\n> LGTM.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7103046/<https://codereview.appspot.com/7103046/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-14 17:55:51.066990",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jan 11, 2013 at 2:30 PM, <dave@cheney.net> wrote:\r\n\r\n> Hi Brad, this didn't pass the test included with the error report on my\r\n> machine.\r\n\r\n\r\nFixes it reliably here, and reading the code, it seems correct.  The old\r\ncode was trying to access the local cache (l.cacheZone != nil &&\r\nl.cacheStart <= sec && sec < l.cacheEnd) before it was initialized by\r\nl.get(),\r\n\r\nfunc (l *Location) get() *Location {\r\n        if l == nil {\r\n                return &utcLoc\r\n        }\r\nif l == &localLoc {\r\n                localOnce.Do(initLocal)\r\n        }\r\n        return l\r\n}\r\n\r\nAll the other code use the same l.get() pattern too.\r\n\r\n\r\nI don't think it is possible to write a test case inside the\r\n> time package itself, as internal_test.go contains an init routine which\r\n> will setup all the location stuff before any test code can run. Maybe a\r\n> sub package ?\r\n>\r\n\r\nI tried clearing the Onces too in my test.\r\n\r\n\r\n>\r\n>\r\n> https://codereview.appspot.**com/7103046/diff/2002/src/pkg/**time/time.go<https://codereview.appspot.com/7103046/diff/2002/src/pkg/time/time.go>\r\n> File src/pkg/time/time.go (right):\r\n>\r\n> https://codereview.appspot.**com/7103046/diff/2002/src/pkg/**\r\n> time/time.go#newcode260<https://codereview.appspot.com/7103046/diff/2002/src/pkg/time/time.go#newcode260>\r\n> src/pkg/time/time.go:260: // locbas is a combination of the Zone and abs\r\n> methods,\r\n> typo ?\r\n>\r\n\r\nyes, noted above.\r\n",
			"disapproval": false,
			"date": "2013-01-11 22:34:59.459750",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\r\n\r\nThis now has a test which fails under test -race without the fix and passes\r\nwith it.\r\n\r\n\r\nOn Fri, Jan 11, 2013 at 2:40 PM, <bradfitz@golang.org> wrote:\r\n\r\n> Hello golang-dev@googlegroups.com, dave@cheney.net (cc:\r\n> golang-dev@googlegroups.com),\r\n>\r\n> Please take another look.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7103046/<https://codereview.appspot.com/7103046/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-11 22:42:26.547830",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think the problem is your machine may be native to PST, so resetting\r\nthe timezone for the test does not cause the test to fail.\r\n\r\nOn Sat, Jan 12, 2013 at 9:43 AM,  <dave@cheney.net> wrote:\r\n> Thanks Brad, but now another test fails to pass under the race detector\r\n>\r\n> lucky(~/go/src/pkg/time) % go test -race\r\n> warning: building out-of-date packages:\r\n>         bytes\r\n>         bufio\r\n>         os\r\n>         fmt\r\n>         encoding/gob\r\n>         encoding/base64\r\n>         unicode/utf16\r\n>         encoding/json\r\n>         encoding/binary\r\n>         math/rand\r\n>         math/big\r\n>         flag\r\n>         text/tabwriter\r\n>         runtime/pprof\r\n>         testing\r\n>         testing/quick\r\n>         regexp/syntax\r\n>         regexp\r\n> installing these packages with 'go test -race -i' will speed future\r\n> tests.\r\n>\r\n> --- FAIL: ExampleDate (0.00 seconds)\r\n> got:\r\n> Go launched at 2009-11-11 10:00:00 +1100 EST\r\n> want:\r\n> Go launched at 2009-11-10 15:00:00 -0800 PST\r\n> FAIL\r\n> exit status 1\r\n> FAIL    time    13.854s\r\n>\r\n>\r\n> https://codereview.appspot.com/7103046/diff/1003/src/pkg/time/time_test.go\r\n> File src/pkg/time/time_test.go (right):\r\n>\r\n> https://codereview.appspot.com/7103046/diff/1003/src/pkg/time/time_test.go#newcode1230\r\n> src/pkg/time/time_test.go:1230: // golang.org/issue/4622\r\n> nice touch.\r\n>\r\n> https://codereview.appspot.com/7103046/\r\n",
			"disapproval": false,
			"date": "2013-01-13 04:51:51.279920",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=39a404853d24 ***\n\ntime: fix race\n\nFixes issue 4622\n\nR=golang-dev, dave, dvyukov\nCC=golang-dev\nhttps://codereview.appspot.com/7103046",
			"disapproval": false,
			"date": "2013-01-14 22:09:47.714020",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks Brad, but now another test fails to pass under the race detector\n\nlucky(~/go/src/pkg/time) % go test -race\nwarning: building out-of-date packages:\n        bytes\n        bufio\n        os\n        fmt\n        encoding/gob\n        encoding/base64\n        unicode/utf16\n        encoding/json\n        encoding/binary\n        math/rand\n        math/big\n        flag\n        text/tabwriter\n        runtime/pprof\n        testing\n        testing/quick\n        regexp/syntax\n        regexp\ninstalling these packages with 'go test -race -i' will speed future tests.\n\n--- FAIL: ExampleDate (0.00 seconds)\ngot:\nGo launched at 2009-11-11 10:00:00 +1100 EST\nwant:\nGo launched at 2009-11-10 15:00:00 -0800 PST\nFAIL\nexit status 1\nFAIL    time    13.854s\n\nhttps://codereview.appspot.com/7103046/diff/1003/src/pkg/time/time_test.go\nFile src/pkg/time/time_test.go (right):\n\nhttps://codereview.appspot.com/7103046/diff/1003/src/pkg/time/time_test.go#newcode1230\nsrc/pkg/time/time_test.go:1230: // golang.org/issue/4622\nnice touch.",
			"disapproval": false,
			"date": "2013-01-11 22:43:49.293710",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jan 11, 2013 at 2:43 PM, <dave@cheney.net> wrote:\r\n\r\n> Thanks Brad, but now another test fails to pass under the race detector\r\n\r\n\r\nI can't reproduce that one.\r\n\r\nCan we leave that one to somebody who can?\r\n",
			"disapproval": false,
			"date": "2013-01-11 22:53:56.055390",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jan 14, 2013 at 2:12 AM, <dave@cheney.net> wrote:\r\n\r\n> LGTM, but please wait for Dmitry\r\n>\r\n> Thank you for fixing the race. I have a concern that there are other\r\n> races in this package.\r\n>\r\n> l.get() does not do any sort of memory barrier that would let other\r\n> threads see the value of localLoc that was initialised inside initLocal.\r\n> It may be that the repeated tests of l == localLoc are all failing, then\r\n> falling through to the do.Once which is acting as a memory barrier.\r\n>\r\n\r\nUm, &localLoc can't change.  localLoc is:\r\n\r\nvar localLoc Location\r\n\r\nso checks that l == &localLoc are fine.\r\n\r\n\r\n> https://codereview.appspot.**com/7103046/diff/3003/src/pkg/**time/time.go<https://codereview.appspot.com/7103046/diff/3003/src/pkg/time/time.go>\r\n> File src/pkg/time/time.go (right):\r\n>\r\n> https://codereview.appspot.**com/7103046/diff/3003/src/pkg/**\r\n> time/time.go#newcode264<https://codereview.appspot.com/7103046/diff/3003/src/pkg/time/time.go#newcode264>\r\n> src/pkg/time/time.go:264: if l == nil || l == &localLoc {\r\n> l.get() already does both of these tests, maybe line 265 should just be\r\n> l = l.get() without the test for l == &localLoc\r\n>\r\n\r\nThe existing comment in abs says:\r\n\r\n        // Avoid function calls when possible.\r\n\r\n\r\n\r\nSo I'm not calling get if it's unnecessary, copying the pattern from\r\nelsewhere.\r\n",
			"disapproval": false,
			"date": "2013-01-14 17:09:37.702170",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Maybe my machine is screwed. The -race builder is the ultimate arbiter,\r\nthanks for adding the test.\r\nOn 12 Jan 2013 10:00, \"Brad Fitzpatrick\" <bradfitz@golang.org> wrote:\r\n\r\n>\r\n>\r\n> On Fri, Jan 11, 2013 at 2:53 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n>\r\n>>\r\n>>\r\n>> On Fri, Jan 11, 2013 at 2:43 PM, <dave@cheney.net> wrote:\r\n>>\r\n>>> Thanks Brad, but now another test fails to pass under the race detector\r\n>>\r\n>>\r\n>> I can't reproduce that one.\r\n>>\r\n>\r\n> I can't reproduce this with or without my patch, on Linux or OS X.\r\n>\r\n> How are you triggering it?\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-11 23:05:29.772310",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Jan 12, 2013 at 8:51 PM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> I think the problem is your machine may be native to PST, so resetting\r\n> the timezone for the test does not cause the test to fail.\r\n\r\n\r\nOh, indeed.  Thanks!  The tests were already forcing US/Pacific, but my\r\ntest broke that for subsequent tests.  I just got lucky.  The race builder\r\n(in Moscow) would've failed.\r\n\r\nFixed.  PTAL.\r\n",
			"disapproval": false,
			"date": "2013-01-14 00:18:34.986060",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM, but please wait for Dmitry\n\nThank you for fixing the race. I have a concern that there are other races in this package. \n\nl.get() does not do any sort of memory barrier that would let other threads see the value of localLoc that was initialised inside initLocal. It may be that the repeated tests of l == localLoc are all failing, then falling through to the do.Once which is acting as a memory barrier.\n\nhttps://codereview.appspot.com/7103046/diff/3003/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttps://codereview.appspot.com/7103046/diff/3003/src/pkg/time/time.go#newcode264\nsrc/pkg/time/time.go:264: if l == nil || l == &localLoc {\nl.get() already does both of these tests, maybe line 265 should just be l = l.get() without the test for l == &localLoc",
			"disapproval": false,
			"date": "2013-01-14 10:12:10.192250",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Is your machine still having an error on the tests?  Does it without my\r\npatch?  I don't see how it could be related.  Did you \"go install -race\r\nstd\" first?\r\n\r\nThoughts on the CL otherwise?\r\n\r\n\r\nOn Fri, Jan 11, 2013 at 3:05 PM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> Maybe my machine is screwed. The -race builder is the ultimate arbiter,\r\n> thanks for adding the test.\r\n> On 12 Jan 2013 10:00, \"Brad Fitzpatrick\" <bradfitz@golang.org> wrote:\r\n>\r\n>>\r\n>>\r\n>> On Fri, Jan 11, 2013 at 2:53 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n>>\r\n>>>\r\n>>>\r\n>>> On Fri, Jan 11, 2013 at 2:43 PM, <dave@cheney.net> wrote:\r\n>>>\r\n>>>> Thanks Brad, but now another test fails to pass under the race detector\r\n>>>\r\n>>>\r\n>>> I can't reproduce that one.\r\n>>>\r\n>>\r\n>> I can't reproduce this with or without my patch, on Linux or OS X.\r\n>>\r\n>> How are you triggering it?\r\n>>\r\n>>\r\n",
			"disapproval": false,
			"date": "2013-01-12 17:18:53.643940",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 7103046: time: fix race",
	"created": "2013-01-11 22:20:25.237270",
	"patchsets": [
		1,
		2001,
		2002,
		1003,
		3003,
		8003
	],
	"modified": "2013-01-19 16:43:00.598350",
	"closed": true,
	"issue": 7103046
}