{
	"description": "net/http: Set TLSClientConfig.ServerName on every HTTP request.\n\nThis makes SNI \"just work\" for callers using the standard http.Client.\n\nSince we now have a test that depends on the httptest.Server cert, change\nthe cert to be a CA (keeping all other fields the same).",
	"cc": [
		"bradfitz@golang.org",
		"agl@golang.org",
		"dsymonds@golang.org",
		"gobot@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "agl@golang.org",
			"recipients": [
				"dborowitz@google.com",
				"dsymonds@golang.org",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Assuming that the test passes, the certificate changes LGTM.",
			"disapproval": false,
			"date": "2012-08-15 22:16:33.228220",
			"approval": true
		},
		{
			"sender": "gobot@golang.org",
			"recipients": [
				"dborowitz@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"agl@golang.org",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=bradfitz (assigned by dsymonds)",
			"disapproval": false,
			"date": "2012-08-17 04:29:02.158160",
			"approval": false
		},
		{
			"sender": "dborowitz@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Aug 15, 2012 at 12:34 PM, Adam Langley <agl@golang.org> wrote:\r\n\r\n> On Wed, Aug 15, 2012 at 12:19 PM,  <dborowitz@google.com> wrote:\r\n> > Note that I do parse the cert out of the server and add it to the\r\n> > RootCAs pool, but this apparently doesn't work. A cursory inspection of\r\n> > x509.Certificate.Verify suggests that there needs to be another cert in\r\n> > the chain for it to work, but I'm wading in a bit deep here.\r\n>\r\n> I can't think of a reason why a single, self-signed certificate\r\n> wouldn't work but it looks like the test is using the cert from\r\n> httptest/server.go. That certificate isn't marked as a CA so would be\r\n> rejected for that reason if nothing else.\r\n>\r\n\r\nGood call, I should have actually inspected the cert a little more closely\r\n(i.e. at all :).\r\n\r\n\r\n> I can mint a new, self-signed, CA cert for the test if you like, but\r\n> it would have to be later tonight.\r\n>\r\n\r\nI don't mind minting the cert myself and including it in this change, if\r\nyou think that's the right way to go.\r\n\r\n\r\n>\r\n> Cheers\r\n>\r\n> AGL\r\n>\r\n",
			"disapproval": false,
			"date": "2012-08-15 19:38:52.727570",
			"approval": false
		},
		{
			"sender": "dborowitz@google.com",
			"recipients": [
				"dborowitz@google.com",
				"dsymonds@golang.org",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dsymonds@golang.org (cc: agl@golang.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-15 21:23:49.312050",
			"approval": false
		},
		{
			"sender": "dborowitz@google.com",
			"recipients": [
				"dborowitz@google.com",
				"dsymonds@golang.org",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dsymonds@golang.org (cc: agl1, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-15 19:19:34.378200",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Aug 15, 2012 at 12:19 PM,  <dborowitz@google.com> wrote:\r\n> Note that I do parse the cert out of the server and add it to the\r\n> RootCAs pool, but this apparently doesn't work. A cursory inspection of\r\n> x509.Certificate.Verify suggests that there needs to be another cert in\r\n> the chain for it to work, but I'm wading in a bit deep here.\r\n\r\nI can't think of a reason why a single, self-signed certificate\r\nwouldn't work but it looks like the test is using the cert from\r\nhttptest/server.go. That certificate isn't marked as a CA so would be\r\nrejected for that reason if nothing else.\r\n\r\nI can mint a new, self-signed, CA cert for the test if you like, but\r\nit would have to be later tonight.\r\n\r\n\r\nCheers\r\n\r\nAGL\r\n",
			"disapproval": false,
			"date": "2012-08-15 19:34:13.476450",
			"approval": false
		},
		{
			"sender": "dborowitz@google.com",
			"recipients": [
				"dborowitz@google.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dsymonds (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-08-15 19:15:39.934250",
			"approval": false
		},
		{
			"sender": "dborowitz@google.com",
			"recipients": [
				"dborowitz@google.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This includes my attempt at a test. However, I'm unable to get the client's TLS config to accept the test server's self-signed cert; the test fails with the error:\nexpected successful TLS connection, got error: Get https://127.0.0.1:60955: x509: certificate signed by unknown authority\n\nNote that I do parse the cert out of the server and add it to the RootCAs pool, but this apparently doesn't work. A cursory inspection of x509.Certificate.Verify suggests that there needs to be another cert in the chain for it to work, but I'm wading in a bit deep here.\n\nOn 2012/08/15 19:15:39, dborowitz wrote:\n> Hello dsymonds (cc: mailto:golang-dev@googlegroups.com),\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-08-15 19:19:01.538470",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Aug 15, 2012 at 12:38 PM, Dave Borowitz <dborowitz@google.com> wrote:\r\n> I don't mind minting the cert myself and including it in this change, if you\r\n> think that's the right way to go.\r\n\r\nI think it'll fix the problem. (Although you need to be careful to\r\nmatch the existing cert as much as possible, save for the additional\r\nbasicConstraints.)\r\n\r\n\r\ncheers\r\n\r\nAGL\r\n",
			"disapproval": false,
			"date": "2012-08-15 19:45:48.096120",
			"approval": false
		},
		{
			"sender": "dborowitz@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Aug 15, 2012 at 12:45 PM, Adam Langley <agl@golang.org> wrote:\r\n\r\n> On Wed, Aug 15, 2012 at 12:38 PM, Dave Borowitz <dborowitz@google.com>\r\n> wrote:\r\n> > I don't mind minting the cert myself and including it in this change, if\r\n> you\r\n> > think that's the right way to go.\r\n>\r\n> I think it'll fix the problem. (Although you need to be careful to\r\n> match the existing cert as much as possible, save for the additional\r\n> basicConstraints.)\r\n>\r\n\r\nWill do, thanks for the suggestions. While we're at it, is there any reason\r\nwe can't just generate the cert on the fly in httptest? That would make\r\nfuture small changes easier.\r\n\r\n\r\n>\r\n> cheers\r\n>\r\n> AGL\r\n>\r\n",
			"disapproval": false,
			"date": "2012-08-15 19:53:35.871040",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Aug 15, 2012 at 12:53 PM, Dave Borowitz <dborowitz@google.com> wrote:\r\n> Will do, thanks for the suggestions. While we're at it, is there any reason\r\n> we can't just generate the cert on the fly in httptest? That would make\r\n> future small changes easier.\r\n\r\nRSA keygen and signing is rather slow: esp on things like the ARM builder.\r\n\r\n\r\nCheers\r\n\r\nAGL\r\n",
			"disapproval": false,
			"date": "2012-08-15 19:56:57.723440",
			"approval": false
		},
		{
			"sender": "dborowitz@google.com",
			"recipients": [
				"dborowitz@google.com",
				"dsymonds@golang.org",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ok, I give up. How do I get hg+codereview to upload my changes? (Git is my day job, so my brain may just be permanently warped :). The contribution guide just says to run \"hg mail\" when I have new changes.\n\n$ hg status\nM src/pkg/net/http/client_test.go\nM src/pkg/net/http/httptest/server.go\nM src/pkg/net/http/transport.go\n$ hg diff **/server.go\ndiff -r 9bc8fafec2f5 src/pkg/net/http/httptest/server.go\n--- a/src/pkg/net/http/httptest/server.go       Wed Aug 15 11:09:34 2012 -0700\n+++ b/src/pkg/net/http/httptest/server.go       Wed Aug 15 14:28:30 2012 -0700\n@@ -184,15 +184,15 @@\n // \"127.0.0.1\" and \"[::1]\", expiring at the last second of 2049 (the end\n // of ASN.1 time).\n var localhostCert = []byte(`-----BEGIN CERTIFICATE-----\n-MIIBOTCB5qADAgECAgEAMAsGCSqGSIb3DQEBBTAAMB4XDTcwMDEwMTAwMDAwMFoX\n+MIIBTTCB+qADAgECAgEAMAsGCSqGSIb3DQEBBTAAMB4XDTcwMDEwMTAwMDAwMFoX\n DTQ5MTIzMTIzNTk1OVowADBaMAsGCSqGSIb3DQEBAQNLADBIAkEAsuA5mAFMj6Q7\n qoBzcvKzIq4kzuT5epSp2AkcQfyBHm7K13Ws7u+0b5Vb9gqTf5cAiIKcrtrXVqkL\n-8i1UQF6AzwIDAQABo08wTTAOBgNVHQ8BAf8EBAMCACQwDQYDVR0OBAYEBAECAwQw\n-DwYDVR0jBAgwBoAEAQIDBDAbBgNVHREEFDASggkxMjcuMC4wLjGCBVs6OjFdMAsG\n-CSqGSIb3DQEBBQNBAJH30zjLWRztrWpOCgJL8RQWLaKzhK79pVhAx6q/3NrF16C7\n-+l1BRZstTwIGdoGId8BRpErK1TXkniFb95ZMynM=\n------END CERTIFICATE-----\n-`)\n+8i1UQF6AzwIDAQABo2MwYTAOBgNVHQ8BAf8EBAMCACQwEgYDVR0TAQH/BAgwBgEB\n+/wIBATANBgNVHQ4EBgQEAQIDBDAPBgNVHSMECDAGgAQBAgMEMBsGA1UdEQQUMBKC\n+CTEyNy4wLjAuMYIFWzo6MV0wCwYJKoZIhvcNAQEFA0EAj1Jsn/h2KHy7dgqutZNB\n+nCGlNN+8vw263Bax9MklR85Ti6a0VWSvp/fDQZUADvmFTDkcXeA24pqmdUxeQDWw\n+Pg==\n+-----END CERTIFICATE-----`)\n \n // localhostKey is the private key for localhostCert.\n var localhostKey = []byte(`-----BEGIN RSA PRIVATE KEY-----\n$ hg mail 6448154\nIssue updated. URL: http://codereview.appspot.com/6448154\n\n\n\n\n\n\nHere are the changes I made to the cert, this should be the minimal set necessary:\n\n$ diff -c1 <(openssl x509 -in ~/w/httptest_cert.txt -noout -text) <(openssl x509 -in ~/w/httptest_cert_new.txt -noout -text)\n*** /proc/self/fd/11    2012-08-15 14:29:56.366319610 -0700\n--- /proc/self/fd/12    2012-08-15 14:29:56.366319610 -0700\n***************\n*** 23,24 ****\n--- 23,26 ----\n                  Key Encipherment, Certificate Sign\n+             X509v3 Basic Constraints: critical\n+                 CA:TRUE, pathlen:1\n              X509v3 Subject Key Identifier: \n***************\n*** 31,35 ****\n      Signature Algorithm: sha1WithRSAEncryption\n!          91:f7:d3:38:cb:59:1c:ed:ad:6a:4e:0a:02:4b:f1:14:16:2d:\n!          a2:b3:84:ae:fd:a5:58:40:c7:aa:bf:dc:da:c5:d7:a0:bb:fa:\n!          5d:41:45:9b:2d:4f:02:06:76:81:88:77:c0:51:a4:4a:ca:d5:\n!          35:e4:9e:21:5b:f7:96:4c:ca:73\n--- 33,37 ----\n      Signature Algorithm: sha1WithRSAEncryption\n!          8f:52:6c:9f:f8:76:28:7c:bb:76:0a:ae:b5:93:41:9c:21:a5:\n!          34:df:bc:bf:0d:ba:dc:16:b1:f4:c9:25:47:ce:53:8b:a6:b4:\n!          55:64:af:a7:f7:c3:41:95:00:0e:f9:85:4c:39:1c:5d:e0:36:\n!          e2:9a:a6:75:4c:5e:40:35:b0:3e",
			"disapproval": false,
			"date": "2012-08-15 21:31:25.545920",
			"approval": false
		},
		{
			"sender": "dborowitz@google.com",
			"recipients": [
				"dborowitz@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"agl@golang.org",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6448154/diff/1002/src/pkg/net/http/client_test.go\nFile src/pkg/net/http/client_test.go (right):\n\nhttps://codereview.appspot.com/6448154/diff/1002/src/pkg/net/http/client_test.go#newcode494\nsrc/pkg/net/http/client_test.go:494: t.Fatalf(\"expected client to set ServerName 127.0.0.1, got: %q\", r.TLS.ServerName)\nOn 2012/08/20 04:58:25, bradfitz wrote:\n> HTTP handlers run in their own goroutine, and Fatalf shouldn't be used from a\n> different goroutine.  Just do Errorf here instead of Fatalf.\n\nDone.\n\nhttps://codereview.appspot.com/6448154/diff/1002/src/pkg/net/http/client_test.go#newcode496\nsrc/pkg/net/http/client_test.go:496: w.Write([]byte(\"Hello\"))\nOn 2012/08/20 04:58:25, bradfitz wrote:\n> could probably remove these lines if you're never checking the body. writing\n> nothing is still a 200 OK and not an error for the HTTP client.\n\nDone.\n\nhttps://codereview.appspot.com/6448154/diff/1002/src/pkg/net/http/transport.go\nFile src/pkg/net/http/transport.go (right):\n\nhttps://codereview.appspot.com/6448154/diff/1002/src/pkg/net/http/transport.go#newcode379\nsrc/pkg/net/http/transport.go:379: if err != nil {\nOn 2012/08/20 04:58:25, bradfitz wrote:\n> I'm not sure these 3 error checking lines are worth anything.  cm.addr() will be\n> valid, and even if it's not, host will just be \"\", which is what ServerName\n> already is.  If the concern is that cm.addr() might be bogus, that should be\n> fixed and/or checked elsewhere.\n> \n> host, _, _ := net.SplitHostPort(cm.addr())\n\nNo specific concerns here, I just hadn't inspected SplitHostPort to see what might cause an error, so I did the safe thing and checked it. Done.\n\nhttps://codereview.appspot.com/6448154/diff/1002/src/pkg/net/http/transport.go#newcode385\nsrc/pkg/net/http/transport.go:385: cfgcopy := *cfg\nOn 2012/08/20 04:58:25, bradfitz wrote:\n> cfgcopy isn't Go's normalCaseStyle.\n> \n> I'd say cfgCopy or cfg2 or clone.  Your preference.\n> \n> Noting that it's a shallow clone but that's acceptable might be nice too.\n> \n> clone := *cfg // shallow clone\n> clone.ServerName = host\n> cfg = &clone\n\nDone.",
			"disapproval": false,
			"date": "2012-08-20 15:05:14.408610",
			"approval": false
		},
		{
			"sender": "dborowitz@google.com",
			"recipients": [
				"dborowitz@google.com",
				"dsymonds@golang.org",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Friendly ping.",
			"disapproval": false,
			"date": "2012-08-17 01:35:41.796770",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dborowitz@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"agl@golang.org",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for doing this.  Few little things, then good.\n\nhttp://codereview.appspot.com/6448154/diff/1002/src/pkg/net/http/client_test.go\nFile src/pkg/net/http/client_test.go (right):\n\nhttp://codereview.appspot.com/6448154/diff/1002/src/pkg/net/http/client_test.go#newcode494\nsrc/pkg/net/http/client_test.go:494: t.Fatalf(\"expected client to set ServerName 127.0.0.1, got: %q\", r.TLS.ServerName)\nHTTP handlers run in their own goroutine, and Fatalf shouldn't be used from a different goroutine.  Just do Errorf here instead of Fatalf.\n\nhttp://codereview.appspot.com/6448154/diff/1002/src/pkg/net/http/client_test.go#newcode496\nsrc/pkg/net/http/client_test.go:496: w.Write([]byte(\"Hello\"))\ncould probably remove these lines if you're never checking the body. writing nothing is still a 200 OK and not an error for the HTTP client.\n\nhttp://codereview.appspot.com/6448154/diff/1002/src/pkg/net/http/transport.go\nFile src/pkg/net/http/transport.go (right):\n\nhttp://codereview.appspot.com/6448154/diff/1002/src/pkg/net/http/transport.go#newcode379\nsrc/pkg/net/http/transport.go:379: if err != nil {\nI'm not sure these 3 error checking lines are worth anything.  cm.addr() will be valid, and even if it's not, host will just be \"\", which is what ServerName already is.  If the concern is that cm.addr() might be bogus, that should be fixed and/or checked elsewhere.\n\nhost, _, _ := net.SplitHostPort(cm.addr())\n\nhttp://codereview.appspot.com/6448154/diff/1002/src/pkg/net/http/transport.go#newcode385\nsrc/pkg/net/http/transport.go:385: cfgcopy := *cfg\ncfgcopy isn't Go's normalCaseStyle.\n\nI'd say cfgCopy or cfg2 or clone.  Your preference.\n\nNoting that it's a shallow clone but that's acceptable might be nice too.\n\nclone := *cfg // shallow clone\nclone.ServerName = host\ncfg = &clone",
			"disapproval": false,
			"date": "2012-08-20 04:58:25.235560",
			"approval": false
		},
		{
			"sender": "dborowitz@google.com",
			"recipients": [
				"dborowitz@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"agl@golang.org",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ping.\n\nOn 2012/08/20 15:05:14, dborowitz wrote:\n> https://codereview.appspot.com/6448154/diff/1002/src/pkg/net/http/client_test.go\n> File src/pkg/net/http/client_test.go (right):\n> \n> https://codereview.appspot.com/6448154/diff/1002/src/pkg/net/http/client_test.go#newcode494\n> src/pkg/net/http/client_test.go:494: t.Fatalf(\"expected client to set ServerName\n> 127.0.0.1, got: %q\", r.TLS.ServerName)\n> On 2012/08/20 04:58:25, bradfitz wrote:\n> > HTTP handlers run in their own goroutine, and Fatalf shouldn't be used from a\n> > different goroutine.  Just do Errorf here instead of Fatalf.\n> \n> Done.\n> \n> https://codereview.appspot.com/6448154/diff/1002/src/pkg/net/http/client_test.go#newcode496\n> src/pkg/net/http/client_test.go:496: w.Write([]byte(\"Hello\"))\n> On 2012/08/20 04:58:25, bradfitz wrote:\n> > could probably remove these lines if you're never checking the body. writing\n> > nothing is still a 200 OK and not an error for the HTTP client.\n> \n> Done.\n> \n> https://codereview.appspot.com/6448154/diff/1002/src/pkg/net/http/transport.go\n> File src/pkg/net/http/transport.go (right):\n> \n> https://codereview.appspot.com/6448154/diff/1002/src/pkg/net/http/transport.go#newcode379\n> src/pkg/net/http/transport.go:379: if err != nil {\n> On 2012/08/20 04:58:25, bradfitz wrote:\n> > I'm not sure these 3 error checking lines are worth anything.  cm.addr() will\n> be\n> > valid, and even if it's not, host will just be \"\", which is what ServerName\n> > already is.  If the concern is that cm.addr() might be bogus, that should be\n> > fixed and/or checked elsewhere.\n> > \n> > host, _, _ := net.SplitHostPort(cm.addr())\n> \n> No specific concerns here, I just hadn't inspected SplitHostPort to see what\n> might cause an error, so I did the safe thing and checked it. Done.\n> \n> https://codereview.appspot.com/6448154/diff/1002/src/pkg/net/http/transport.go#newcode385\n> src/pkg/net/http/transport.go:385: cfgcopy := *cfg\n> On 2012/08/20 04:58:25, bradfitz wrote:\n> > cfgcopy isn't Go's normalCaseStyle.\n> > \n> > I'd say cfgCopy or cfg2 or clone.  Your preference.\n> > \n> > Noting that it's a shallow clone but that's acceptable might be nice too.\n> > \n> > clone := *cfg // shallow clone\n> > clone.ServerName = host\n> > cfg = &clone\n> \n> Done.",
			"disapproval": false,
			"date": "2012-08-22 15:45:35.969400",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nI'm back.\r\n\r\nOn Thu, Aug 23, 2012 at 1:45 AM, <dborowitz@google.com> wrote:\r\n\r\n> Ping.\r\n>\r\n>\r\n> On 2012/08/20 15:05:14, dborowitz wrote:\r\n>\r\n> https://codereview.appspot.**com/6448154/diff/1002/src/pkg/**\r\n> net/http/client_test.go<https://codereview.appspot.com/6448154/diff/1002/src/pkg/net/http/client_test.go>\r\n>\r\n>> File src/pkg/net/http/client_test.**go (right):\r\n>>\r\n>\r\n>\r\n> https://codereview.appspot.**com/6448154/diff/1002/src/pkg/**\r\n> net/http/client_test.go#**newcode494<https://codereview.appspot.com/6448154/diff/1002/src/pkg/net/http/client_test.go#newcode494>\r\n>\r\n>> src/pkg/net/http/client_test.**go:494: t.Fatalf(\"expected client to set\r\n>>\r\n> ServerName\r\n>\r\n>> 127.0.0.1, got: %q\", r.TLS.ServerName)\r\n>> On 2012/08/20 04:58:25, bradfitz wrote:\r\n>> > HTTP handlers run in their own goroutine, and Fatalf shouldn't be\r\n>>\r\n> used from a\r\n>\r\n>> > different goroutine.  Just do Errorf here instead of Fatalf.\r\n>>\r\n>\r\n>  Done.\r\n>>\r\n>\r\n>\r\n> https://codereview.appspot.**com/6448154/diff/1002/src/pkg/**\r\n> net/http/client_test.go#**newcode496<https://codereview.appspot.com/6448154/diff/1002/src/pkg/net/http/client_test.go#newcode496>\r\n>\r\n>> src/pkg/net/http/client_test.**go:496: w.Write([]byte(\"Hello\"))\r\n>> On 2012/08/20 04:58:25, bradfitz wrote:\r\n>> > could probably remove these lines if you're never checking the body.\r\n>>\r\n> writing\r\n>\r\n>> > nothing is still a 200 OK and not an error for the HTTP client.\r\n>>\r\n>\r\n>  Done.\r\n>>\r\n>\r\n>\r\n> https://codereview.appspot.**com/6448154/diff/1002/src/pkg/**\r\n> net/http/transport.go<https://codereview.appspot.com/6448154/diff/1002/src/pkg/net/http/transport.go>\r\n>\r\n>> File src/pkg/net/http/transport.go (right):\r\n>>\r\n>\r\n>\r\n> https://codereview.appspot.**com/6448154/diff/1002/src/pkg/**\r\n> net/http/transport.go#**newcode379<https://codereview.appspot.com/6448154/diff/1002/src/pkg/net/http/transport.go#newcode379>\r\n>\r\n>> src/pkg/net/http/transport.go:**379: if err != nil {\r\n>> On 2012/08/20 04:58:25, bradfitz wrote:\r\n>> > I'm not sure these 3 error checking lines are worth anything.\r\n>>\r\n> cm.addr() will\r\n>\r\n>> be\r\n>> > valid, and even if it's not, host will just be \"\", which is what\r\n>>\r\n> ServerName\r\n>\r\n>> > already is.  If the concern is that cm.addr() might be bogus, that\r\n>>\r\n> should be\r\n>\r\n>> > fixed and/or checked elsewhere.\r\n>> >\r\n>> > host, _, _ := net.SplitHostPort(cm.addr())\r\n>>\r\n>\r\n>  No specific concerns here, I just hadn't inspected SplitHostPort to\r\n>>\r\n> see what\r\n>\r\n>> might cause an error, so I did the safe thing and checked it. Done.\r\n>>\r\n>\r\n>\r\n> https://codereview.appspot.**com/6448154/diff/1002/src/pkg/**\r\n> net/http/transport.go#**newcode385<https://codereview.appspot.com/6448154/diff/1002/src/pkg/net/http/transport.go#newcode385>\r\n>\r\n>> src/pkg/net/http/transport.go:**385: cfgcopy := *cfg\r\n>> On 2012/08/20 04:58:25, bradfitz wrote:\r\n>> > cfgcopy isn't Go's normalCaseStyle.\r\n>> >\r\n>> > I'd say cfgCopy or cfg2 or clone.  Your preference.\r\n>> >\r\n>> > Noting that it's a shallow clone but that's acceptable might be nice\r\n>>\r\n> too.\r\n>\r\n>> >\r\n>> > clone := *cfg // shallow clone\r\n>> > clone.ServerName = host\r\n>> > cfg = &clone\r\n>>\r\n>\r\n>  Done.\r\n>>\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.**com/6448154/<https://codereview.appspot.com/6448154/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-08-22 16:13:45.629130",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dborowitz@google.com",
				"bradfitz@golang.org",
				"agl@golang.org",
				"dsymonds@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=8d39afcd18b1 ***\n\nnet/http: Set TLSClientConfig.ServerName on every HTTP request.\n\nThis makes SNI \"just work\" for callers using the standard http.Client.\n\nSince we now have a test that depends on the httptest.Server cert, change\nthe cert to be a CA (keeping all other fields the same).\n\nR=bradfitz\nCC=agl, dsymonds, gobot, golang-dev\nhttp://codereview.appspot.com/6448154\n\nCommitter: Brad Fitzpatrick <bradfitz@golang.org>",
			"disapproval": false,
			"date": "2012-08-22 16:15:49.924290",
			"approval": false
		}
	],
	"owner_email": "dborowitz@google.com",
	"private": false,
	"base_url": "",
	"owner": "dborowitz",
	"subject": "code review 6448154: net/http: Set TLSClientConfig.ServerName on every HTTP ...",
	"created": "2012-08-15 19:14:07.111220",
	"patchsets": [
		1,
		2001,
		3001,
		7001,
		10001,
		3008,
		11001,
		1002,
		14001
	],
	"modified": "2012-08-22 16:36:32.263780",
	"closed": true,
	"issue": 6448154
}