{
	"description": "os/user: Windows support\n\nFixes issue 1789.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"bradfitz@golang.org",
		"alex.brainman@gmail.com",
		"mattn.jp@gmail.com",
		"bradfitz@google.com"
	],
	"messages": [
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hi,\n\nhere are my comments. Please let me know your view on them, so that I can republish my changes.\n\nOn a side note I find Go's code has many single letter variables and magic numbers, but I try to follow the conventions in place. Please let me know if there is also something there to change.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/os/user/lookup_unix.go\nFile src/pkg/os/user/lookup_unix.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/os/user/lookup_unix.go#newcode17\nsrc/pkg/os/user/lookup_unix.go:17: type UserId int\nOn 2011/05/10 13:15:45, brainman wrote:\n> I suggest you name it Uid, then users will refer to it as user.Uid, not\n> user.UserId from outside of package. Also, your your User struct will look like\n> this:\n> \n> type User struct {\n>     Uid               // user id\n>     Gid               // primary group id\n>     Username string\n>     Name     string\n>     HomeDir  string\n> }\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/os/user/lookup_unix.go#newcode20\nsrc/pkg/os/user/lookup_unix.go:20: type GroupId int\nOn 2011/05/10 13:15:45, brainman wrote:\n> Same, name it Gid.\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/os/user/lookup_unix.go#newcode23\nsrc/pkg/os/user/lookup_unix.go:23: // User represents a user account in Unix systems.\nOn 2011/05/10 13:15:45, brainman wrote:\n> This can stay in user.go.\n\nI cannot, because Uid and Gid fields are os specific, as such user.go won't compile.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/mkerrors_windows.sh\nFile src/pkg/syscall/mkerrors_windows.sh (right):\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/mkerrors_windows.sh#newcode181\nsrc/pkg/syscall/mkerrors_windows.sh:181: printf(\"\\tEWOULDBLOCK\\n\");\nOn 2011/05/10 13:15:45, brainman wrote:\n> I have no idea why you've change this file. I don't think you need to change\n> even one line in this file.\n\nThese hacks are required when compiling on Windows. Somehow the errno.h file provided by mingw does not provide the same set of error values as in Linux. Leading to a compile failure of the syscall package after calling mkall.sh.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go\nFile src/pkg/syscall/syscall_windows.go (left):\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#oldcode130\nsrc/pkg/syscall/syscall_windows.go:130: //sys\tGetComputerName(buf *uint16, n *uint32) (errno int) = GetComputerNameW\nOn 2011/05/10 13:15:45, brainman wrote:\n> Please use \\t between sys and function names. You, probably, can't see\n> misalignment in your editor, but surely, you can see it here in codereview.\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go\nFile src/pkg/syscall/syscall_windows.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode134\nsrc/pkg/syscall/syscall_windows.go:134: //sys   LookupAccountName(systemName *uint16, accountName *uint16, sid *uint8, sidSize *uint32, domainName *uint16, domainNameSize *uint32, nameUse *int32) (errno int) = advapi32.LookupAccountNameW\nOn 2011/05/10 13:15:45, brainman wrote:\n> s/uint8/byte/\n> just to be like everything else.\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode135\nsrc/pkg/syscall/syscall_windows.go:135: //sys   LookupAccountSid(systemName *uint16, sid *uint8, username *uint16, usernameSize *uint32, domainName *uint16, domainNameSize *uint32, nameUse *int32) (errno int) = advapi32.LookupAccountSidW\nOn 2011/05/10 13:15:45, brainman wrote:\n> s/uint8/byte/\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode135\nsrc/pkg/syscall/syscall_windows.go:135: //sys   LookupAccountSid(systemName *uint16, sid *uint8, username *uint16, usernameSize *uint32, domainName *uint16, domainNameSize *uint32, nameUse *int32) (errno int) = advapi32.LookupAccountSidW\nOn 2011/05/10 13:15:45, brainman wrote:\n> s/uint8/byte/\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode135\nsrc/pkg/syscall/syscall_windows.go:135: //sys   LookupAccountSid(systemName *uint16, sid *uint8, username *uint16, usernameSize *uint32, domainName *uint16, domainNameSize *uint32, nameUse *int32) (errno int) = advapi32.LookupAccountSidW\nOn 2011/05/10 13:15:45, brainman wrote:\n> s/uint8/byte/\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode136\nsrc/pkg/syscall/syscall_windows.go:136: //sys   ConvertSidToStringSid(sid *uint8, stringSid *uint32) (errno int) =  advapi32.ConvertSidToStringSidW\nOn 2011/05/10 13:15:45, brainman wrote:\n> s/uint8/byte/\n> s/stringSid *uint32/stringSid **uint16/\n> \n> from the manual:\n> StringSid\n> A pointer to a variable that receives a pointer to a null-terminated SID string.\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode136\nsrc/pkg/syscall/syscall_windows.go:136: //sys   ConvertSidToStringSid(sid *uint8, stringSid *uint32) (errno int) =  advapi32.ConvertSidToStringSidW\nOn 2011/05/10 13:15:45, brainman wrote:\n> s/uint8/byte/\n> s/stringSid *uint32/stringSid **uint16/\n> \n> from the manual:\n> StringSid\n> A pointer to a variable that receives a pointer to a null-terminated SID string.\n\nstringSid kept as *uint32. I was following LocalFree declaration. As this string needs to be freed by it.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode149\nsrc/pkg/syscall/syscall_windows.go:149: //sys   OpenProcessToken(pseudoHandle int32, access uint32, token *int32) (errno int) = advapi32.OpenProcessToken\nOn 2011/05/10 13:15:45, brainman wrote:\n> s/pseudoHandle int32/processHandle int32/\n> why pseudoHandle?\n\nTemporary name I forget to properly fix afterwards.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode384\nsrc/pkg/syscall/syscall_windows.go:384: func UserName() (name string, errno int) {\nOn 2011/05/10 13:15:45, brainman wrote:\n> Please move this function to user package.\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode385\nsrc/pkg/syscall/syscall_windows.go:385: // from Lmcons.h\nOn 2011/05/10 13:15:45, brainman wrote:\n> func UserName() (name string, errno int) {\n> \tb := make([]uint16, 40)\n> \tn := uint32(len(b))\n> \te := GetUserName(&b[0], &n)\n> \tif e == ERROR_INSUFFICIENT_BUFFER {\n> \t\tb := make([]uint16, n)\n> \t\te = GetUserName(&b[0], &n)\n> \t}\n> \tif e != 0 {\n> \t\treturn \"\", e\n> \t}\n> \treturn string(utf16.Decode(b[:n])), 0\n> }\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode397\nsrc/pkg/syscall/syscall_windows.go:397: type ExtendedNameFormat int32\nOn 2011/05/10 13:15:45, brainman wrote:\n> Do not need this type at all, just use int or int32, whatever appropriate.\n\nJust wanted to simulate type safe enums.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode399\nsrc/pkg/syscall/syscall_windows.go:399: const (\nOn 2011/05/10 13:15:45, brainman wrote:\n> Move these consts to ztypes_windows.go\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode412\nsrc/pkg/syscall/syscall_windows.go:412: func UserNameEx(format ExtendedNameFormat) (name string, errno int) {\nOn 2011/05/10 13:15:45, brainman wrote:\n> Please move this function to user package.\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode425\nsrc/pkg/syscall/syscall_windows.go:425: func UserProfileDirectory() (name string, errno int) {\nOn 2011/05/10 13:15:45, brainman wrote:\n> Please move this function to user package.\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode455\nsrc/pkg/syscall/syscall_windows.go:455: type SID []uint8\nOn 2011/05/10 13:15:45, brainman wrote:\n> s/uint8/byte/\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode459\nsrc/pkg/syscall/syscall_windows.go:459: type SID_NAME_USE int32\nOn 2011/05/10 13:15:45, brainman wrote:\n> Do not need this type at all, just use int or int32, whatever appropriate.\n\nJust wanted to simulate type safe enums.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode461\nsrc/pkg/syscall/syscall_windows.go:461: const (\nOn 2011/05/10 13:15:45, brainman wrote:\n> Move these consts to ztypes_windows.go\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode476\nsrc/pkg/syscall/syscall_windows.go:476: func SidToStringSid(sid SID) (string, int) {\nOn 2011/05/10 13:15:45, brainman wrote:\n> Please move this function to user package.\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode489\nsrc/pkg/syscall/syscall_windows.go:489: // The Window specific account information\nOn 2011/05/10 13:15:45, brainman wrote:\n> I'm not sure you need this struct, if you move all these functions into user\n> package, I suspect many things will get less verbose.\n\nOriginally I thought about using multiple return values, but then the return values list was just too big.\n\nBut you're right, in package user it is not be required, I rewrote the code.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode499\nsrc/pkg/syscall/syscall_windows.go:499: func AccountName(name string) (*Account, int) {\nOn 2011/05/10 13:15:45, brainman wrote:\n> Please move this function to user package.\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode512\nsrc/pkg/syscall/syscall_windows.go:512: e := LookupAccountName(nil, &accountName[0], &sid[0], &sidSize, &domainName[0], &domainNameSize, &nameUse)\nOn 2011/05/10 13:15:45, brainman wrote:\n> You shouldn't allocate huge buffers of 8192 for output parameters, but be\n> reasonable - 100. You should make buffer bigger and call second time if first\n> buffer is not big enough.\n> \n> From the manual:\n> If the function fails because the buffer is too small, this variable receives\n> the required buffer size, including the terminating null character.\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode512\nsrc/pkg/syscall/syscall_windows.go:512: e := LookupAccountName(nil, &accountName[0], &sid[0], &sidSize, &domainName[0], &domainNameSize, &nameUse)\nOn 2011/05/10 13:15:45, brainman wrote:\n> You shouldn't allocate huge buffers of 8192 for output parameters, but be\n> reasonable - 100. You should make buffer bigger and call second time if first\n> buffer is not big enough.\n> \n> From the manual:\n> If the function fails because the buffer is too small, this variable receives\n> the required buffer size, including the terminating null character.\n\nChanged all the function calls to first query for buffer sizes, and only afterwards fetch the data.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode527\nsrc/pkg/syscall/syscall_windows.go:527: func AccountSid(sid SID) (*Account, int) {\nOn 2011/05/10 13:15:45, brainman wrote:\n> Please move this function to user package.\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/zerrors_windows_386.go\nFile src/pkg/syscall/zerrors_windows_386.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/zerrors_windows_386.go#newcode6\nsrc/pkg/syscall/zerrors_windows_386.go:6: // Go names for Windows errors.\nOn 2011/05/10 13:15:45, brainman wrote:\n> I don't know why this file is changed. This file is generated automatically by\n> running ./mkall.sh with GOOS=windows and GOARCH=386. Even assuming all your\n> changes in mkerrors_windows.sh are needed, this file would look very\n> differently. I don't think you need to change one line in this file.\n\nThis is the result of calling mingw.sh with no arguments in mingw. Should I do it with the arguments you use on your comment?",
			"disapproval": false,
			"date": "2011-05-11 09:30:26.350422",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/05/16 23:42:31, bradfitz wrote:\n> Please do all the syscall changes in a separate CL.\n> \n> Also, don't change the line endings to Windows-style (on e.g.\n> http://codereview.appspot.com/4521053/patch/8003/10002)\n\nsyscall changes are now on\nhttp://codereview.appspot.com/4528073",
			"disapproval": false,
			"date": "2011-05-17 07:59:01.884901",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "It's a start. Lets try to make it as simple as possible.\n\nAlex\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/os/user/lookup_unix.go\nFile src/pkg/os/user/lookup_unix.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/os/user/lookup_unix.go#newcode17\nsrc/pkg/os/user/lookup_unix.go:17: type UserId int\nI suggest you name it Uid, then users will refer to it as user.Uid, not user.UserId from outside of package. Also, your your User struct will look like this:\n\ntype User struct {\n    Uid               // user id\n    Gid               // primary group id\n    Username string\n    Name     string\n    HomeDir  string\n}\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/os/user/lookup_unix.go#newcode20\nsrc/pkg/os/user/lookup_unix.go:20: type GroupId int\nSame, name it Gid.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/os/user/lookup_unix.go#newcode23\nsrc/pkg/os/user/lookup_unix.go:23: // User represents a user account in Unix systems.\nThis can stay in user.go.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/mkerrors_windows.sh\nFile src/pkg/syscall/mkerrors_windows.sh (right):\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/mkerrors_windows.sh#newcode181\nsrc/pkg/syscall/mkerrors_windows.sh:181: printf(\"\\tEWOULDBLOCK\\n\");\nI have no idea why you've change this file. I don't think you need to change even one line in this file.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go\nFile src/pkg/syscall/syscall_windows.go (left):\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#oldcode130\nsrc/pkg/syscall/syscall_windows.go:130: //sys\tGetComputerName(buf *uint16, n *uint32) (errno int) = GetComputerNameW\nPlease use \\t between sys and function names. You, probably, can't see misalignment in your editor, but surely, you can see it here in codereview.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go\nFile src/pkg/syscall/syscall_windows.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode134\nsrc/pkg/syscall/syscall_windows.go:134: //sys   LookupAccountName(systemName *uint16, accountName *uint16, sid *uint8, sidSize *uint32, domainName *uint16, domainNameSize *uint32, nameUse *int32) (errno int) = advapi32.LookupAccountNameW\ns/uint8/byte/\njust to be like everything else.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode135\nsrc/pkg/syscall/syscall_windows.go:135: //sys   LookupAccountSid(systemName *uint16, sid *uint8, username *uint16, usernameSize *uint32, domainName *uint16, domainNameSize *uint32, nameUse *int32) (errno int) = advapi32.LookupAccountSidW\ns/uint8/byte/\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode136\nsrc/pkg/syscall/syscall_windows.go:136: //sys   ConvertSidToStringSid(sid *uint8, stringSid *uint32) (errno int) =  advapi32.ConvertSidToStringSidW\ns/uint8/byte/\ns/stringSid *uint32/stringSid **uint16/\n\nfrom the manual:\nStringSid\nA pointer to a variable that receives a pointer to a null-terminated SID string.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode149\nsrc/pkg/syscall/syscall_windows.go:149: //sys   OpenProcessToken(pseudoHandle int32, access uint32, token *int32) (errno int) = advapi32.OpenProcessToken\ns/pseudoHandle int32/processHandle int32/\nwhy pseudoHandle?\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode384\nsrc/pkg/syscall/syscall_windows.go:384: func UserName() (name string, errno int) {\nPlease move this function to user package.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode385\nsrc/pkg/syscall/syscall_windows.go:385: // from Lmcons.h\nfunc UserName() (name string, errno int) {\n\tb := make([]uint16, 40)\n\tn := uint32(len(b))\n\te := GetUserName(&b[0], &n)\n\tif e == ERROR_INSUFFICIENT_BUFFER {\n\t\tb := make([]uint16, n)\n\t\te = GetUserName(&b[0], &n)\n\t}\n\tif e != 0 {\n\t\treturn \"\", e\n\t}\n\treturn string(utf16.Decode(b[:n])), 0\n}\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode397\nsrc/pkg/syscall/syscall_windows.go:397: type ExtendedNameFormat int32\nDo not need this type at all, just use int or int32, whatever appropriate.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode399\nsrc/pkg/syscall/syscall_windows.go:399: const (\nMove these consts to ztypes_windows.go\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode412\nsrc/pkg/syscall/syscall_windows.go:412: func UserNameEx(format ExtendedNameFormat) (name string, errno int) {\nPlease move this function to user package.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode425\nsrc/pkg/syscall/syscall_windows.go:425: func UserProfileDirectory() (name string, errno int) {\nPlease move this function to user package.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode455\nsrc/pkg/syscall/syscall_windows.go:455: type SID []uint8\ns/uint8/byte/\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode459\nsrc/pkg/syscall/syscall_windows.go:459: type SID_NAME_USE int32\nDo not need this type at all, just use int or int32, whatever appropriate.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode461\nsrc/pkg/syscall/syscall_windows.go:461: const (\nMove these consts to ztypes_windows.go\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode476\nsrc/pkg/syscall/syscall_windows.go:476: func SidToStringSid(sid SID) (string, int) {\nPlease move this function to user package.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode489\nsrc/pkg/syscall/syscall_windows.go:489: // The Window specific account information\nI'm not sure you need this struct, if you move all these functions into user package, I suspect many things will get less verbose.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode499\nsrc/pkg/syscall/syscall_windows.go:499: func AccountName(name string) (*Account, int) {\nPlease move this function to user package.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode512\nsrc/pkg/syscall/syscall_windows.go:512: e := LookupAccountName(nil, &accountName[0], &sid[0], &sidSize, &domainName[0], &domainNameSize, &nameUse)\nYou shouldn't allocate huge buffers of 8192 for output parameters, but be reasonable - 100. You should make buffer bigger and call second time if first buffer is not big enough.\n\nFrom the manual:\nIf the function fails because the buffer is too small, this variable receives the required buffer size, including the terminating null character.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode527\nsrc/pkg/syscall/syscall_windows.go:527: func AccountSid(sid SID) (*Account, int) {\nPlease move this function to user package.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/zerrors_windows_386.go\nFile src/pkg/syscall/zerrors_windows_386.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/zerrors_windows_386.go#newcode6\nsrc/pkg/syscall/zerrors_windows_386.go:6: // Go names for Windows errors.\nI don't know why this file is changed. This file is generated automatically by running ./mkall.sh with GOOS=windows and GOARCH=386. Even assuming all your changes in mkerrors_windows.sh are needed, this file would look very differently. I don't think you need to change one line in this file.",
			"disapproval": false,
			"date": "2011-05-10 13:15:45.264174",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello bradfitz, brainman (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-05-17 08:03:29.625052",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello bradfitz, brainman (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-05-16 12:53:32.876492",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/05/11 09:30:26, pjmlp wrote:\n> \n> here are my comments. Please let me know your view on them, so that I can\n> republish my changes.\n\nCool. Please, use \"hg main 4521053\" to publish your changes once you're ready. This will also send email to golang-dev list, so other people will see your changes and can comment, if they care.\n\n> On 2011/05/10 13:15:45, brainman wrote:\n> > This can stay in user.go.\n> \n> I cannot, because Uid and Gid fields are os specific, as such user.go won't\n> compile.\n\nYou can put this into user.go\n\ntype User struct {\n    Uid              // user id\n    Gid              // primary group id\n    Username string\n    Name     string\n    HomeDir  string\n}\n\nYou can put this into lookup_unix.go\n\ntype Uid int\ntype Gid int\n\nYou can put this into lookup_windows.go\n\ntype Uid syscall.SID\ntype Gid syscall.SID\n\nor whatever.\n\n> On 2011/05/10 13:15:45, brainman wrote:\n> > I have no idea why you've change this file. I don't think you need to change\n> > even one line in this file.\n> \n> These hacks are required when compiling on Windows. ...\n\nI realised that, but only after I hit \"send\" button. Please, just revert changes to zerrors_windows.go file for now. We could deal with that problem in a separate CL http://code.google.com/p/go/issues/detail?id=1799.\n\n> http://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode136\n> src/pkg/syscall/syscall_windows.go:136: //sys   ConvertSidToStringSid(sid\n> *uint8, stringSid *uint32) (errno int) =  advapi32.ConvertSidToStringSidW\n> On 2011/05/10 13:15:45, brainman wrote:\n> > s/uint8/byte/\n> > s/stringSid *uint32/stringSid **uint16/\n> > \n> > from the manual:\n> > StringSid\n> > A pointer to a variable that receives a pointer to a null-terminated SID\n> string.\n> \n> stringSid kept as *uint32. I was following LocalFree declaration. As this string\n> needs to be freed by it.\n> \n\nI understand. But this\n\npstr := (*[8192]uint16)(unsafe.Pointer(uintptr(str)))\n\nis not pretty. I just hope my suggestion will simplify this code. Line with LocalFree will have single type conversion - no big deal.\n\n> On 2011/05/10 13:15:45, brainman wrote:\n> > Do not need this type at all, just use int or int32, whatever appropriate.\n> \n> Just wanted to simulate type safe enums.\n> \n\nIt's simple enough here. You won't make mistake <g>.\n\n> \n> Changed all the function calls to first query for buffer sizes, and only\n> afterwards fetch the data.\n> \n\nPlease, don't do that. Here are some issues you're fighting against:\n\n1) syscalls into Windows are expensive - you have to do first call, it is OK to have second call, but only in \"extreme\" cases; two syscalls every time is wasteful;\n\n2) allocating big blocks of memory could be expensive - even if you're allocating on the stack, since go use segmented stacks, big allocations on stack will trigger stack split - memory allocation and some stack management;\n\n3) you don't want to end up with code that doesn't return complete data or doesn't work in \"extreme\" cases (like username is way too long or something).\n\nSo the approach is, use reasonably small buffer, that will cover *most* of scenarios. If that fails, make second call, but now you should know how big your buffer should be. So now you never use more buffer space than you need to, and also make second syscall only on rare occasions.\n\nAlex",
			"disapproval": false,
			"date": "2011-05-11 12:46:47.515923",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"mattn.jp@gmail.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4521053/diff/4005/src/pkg/os/user/lookup_windows.go\nFile src/pkg/os/user/lookup_windows.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/4005/src/pkg/os/user/lookup_windows.go#newcode35\nsrc/pkg/os/user/lookup_windows.go:35: // Returns the information about the process owner\nIn Windows process, different threads could be executed as different users. It happens inside servers a lot, when server thread changes its \"current user\" to impersonates someone else on behalf of a client connected to the thread.\n\nI'm not sure how/if we can support this behavior.\n\nhttp://codereview.appspot.com/4521053/diff/4005/src/pkg/os/user/lookup_windows.go#newcode36\nsrc/pkg/os/user/lookup_windows.go:36: func Current() (*User, os.Error) {\nI would use OpenProcessToken/OpenThreadToken + GetTokenInformation to retrieve current user details instead, it gives you more information, and, probably, faster to boot.\n\nThen I would write a single function that\n\nfunc getUserBySID(sid syscall.SID) (*User, os.Error)\n\nwhich I would use here and in both Lookup and LookupSID. I think, it will make your code clear, shorter and less repetitive.",
			"disapproval": false,
			"date": "2011-05-23 06:23:23.963712",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "A few comments.\n\nI'm mostly relying on brainman to handle this review.\n\nWe could also split it into two CLs, one for the syscalls/etc and one for the user package, if that's easier.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/os/user/Makefile\nFile src/pkg/os/user/Makefile (right):\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/os/user/Makefile#newcode23\nsrc/pkg/os/user/Makefile:23: #GOFILES+=lookup_stubs.go\nwe'll still need lookup_stubs for e.g. plan9 ... can't just comment this all out. :)\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/os/user/lookup_unix.go\nFile src/pkg/os/user/lookup_unix.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/os/user/lookup_unix.go#newcode23\nsrc/pkg/os/user/lookup_unix.go:23: // User represents a user account in Unix systems.\nOn 2011/05/11 09:30:26, pjmlp wrote:\n> On 2011/05/10 13:15:45, brainman wrote:\n> > This can stay in user.go.\n> \n> I cannot, because Uid and Gid fields are os specific, as such user.go won't\n> compile.\n\nHm, it should? Sure the Makefile is correct?\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/os/user/lookup_windows.go\nFile src/pkg/os/user/lookup_windows.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/os/user/lookup_windows.go#newcode34\nsrc/pkg/os/user/lookup_windows.go:34: return nil, UnknownUserError(username)\nAre you sure this is the only care case?  What if I'm user \"A\" (not an Administrator) and I'm trying to lookup details of user \"B\"?  Isn't that a permission problem of some sort, at least in some cases?   UnknownUserError is probably the wrong error type in that case.\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/os/user/lookup_windows.go#newcode40\nsrc/pkg/os/user/lookup_windows.go:40: fmt.Printf(\"Could not access the username data, assuming an empty value.\")\nis this debug stuff?  log.Printf is more suitable, but even then the log message should start with \"os/user: could not access..\"\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/os/user/lookup_windows.go#newcode47\nsrc/pkg/os/user/lookup_windows.go:47: return nil, fmt.Errorf(\"Could not access username directory\")\n\"os/user: could not acccess ....\"\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/os/user/lookup_windows.go#newcode71\nsrc/pkg/os/user/lookup_windows.go:71: fmt.Printf(\"Could not access the username data, assuming an empty value.\")\nas above\n\nhttp://codereview.appspot.com/4521053/diff/2001/src/pkg/os/user/lookup_windows.go#newcode78\nsrc/pkg/os/user/lookup_windows.go:78: return nil, fmt.Errorf(\"Could not access username directory\")\nalso",
			"disapproval": false,
			"date": "2011-05-13 01:21:48.789401",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Please do all the syscall changes in a separate CL.\n\nAlso, don't change the line endings to Windows-style (on e.g. http://codereview.appspot.com/4521053/patch/8003/10002)",
			"disapproval": false,
			"date": "2011-05-16 23:42:31.234801",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"mattn.jp@gmail.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Currently I am not able to upload my changes, because I am on another PC, but I can already give my feedback to your comments.\n\nhttp://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/lookup_unix.go\nFile src/pkg/os/user/lookup_unix.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/lookup_unix.go#newcode16\nsrc/pkg/os/user/lookup_unix.go:16: // Represents an OS independent user identifier\nOn 2011/05/20 15:52:33, bradfitz wrote:\n> I think this comment is old.  It's no longer used for POSIX.  Also:\n\nYou're right, sorry about that.\n\nhttp://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/lookup_unix.go#newcode17\nsrc/pkg/os/user/lookup_unix.go:17: type Id int\nOn 2011/05/20 15:52:33, bradfitz wrote:\n> here Id is an int value, but...\n\nSorry about that. Not being able to compile on Linux for the time being, opens the door for such issues.\n\nhttp://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/lookup_unix.go#newcode44\nsrc/pkg/os/user/lookup_unix.go:44: // LookupSID looks up a user by Id. If the user cannot be found,\nOn 2011/05/20 15:52:33, bradfitz wrote:\n> these docs assume the user knows what a SID is, which zero Unix people know and\n> very few Windows people even know.\n> \n> Be sure to mention Windows in here.\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/lookup_unix.go#newcode46\nsrc/pkg/os/user/lookup_unix.go:46: // This function panics if called on Unix systems\nOn 2011/05/20 15:52:33, bradfitz wrote:\n> doesn't panic.  just returns an error.\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/lookup_windows.go\nFile src/pkg/os/user/lookup_windows.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/lookup_windows.go#newcode68\nsrc/pkg/os/user/lookup_windows.go:68: func UserName() (name string, err os.Error) {\nOn 2011/05/20 15:52:33, bradfitz wrote:\n> this function isn't exported on the unix side.  Did you mean to make this\n> lowercase?\n\nNo, it needs to be public. Otherwise there is no way to implement similar test case for Windows. Or should the function be private to the tests file?\n\nsyscall.getuid() won't work on Windows, the companion function would be either a getsid() or the UserName() function.\n\nhttp://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/user.go\nFile src/pkg/os/user/user.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/user.go#newcode15\nsrc/pkg/os/user/user.go:15: Uid      int // user id, only valid in POSIX systems, 0 otherwise\nOn 2011/05/20 15:52:33, bradfitz wrote:\n> no need to say \"0 otherwise\".\n> \n> You could also group these with a shared comment:\n> \n>      // For POSIX systems:\n>      Uid   int  // user id\n>      Gid   int  // primary group id\n> \n>      // For Windows:\n>      SID   Id   // What is this? What is its type?\n\nI'll do it.\n\nRegarding the Id, maybe I am spoiled with years of software engineering, but I thought it should be enough for the users to know that user.Id is an black box ADT.\n\nhttp://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/user.go#newcode19\nsrc/pkg/os/user/user.go:19: Name     string // An empty string on Windows platforms for the time being\nOn 2011/05/20 15:52:33, bradfitz wrote:\n> Name  string // User's name, if available.\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/user_test.go\nFile src/pkg/os/user/user_test.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/user_test.go#newcode74\nsrc/pkg/os/user/user_test.go:74: if err != nil && err.String() != \"user: Windows does not support lookup by userid\" {\nOn 2011/05/20 15:52:33, bradfitz wrote:\n> error checking by string comparison is a bit gross, but in a test I suppose it's\n> not the end of the world.\n> \n> I wonder if you should just return syscall.EWINDOWS here instead, and check for\n> that exact value?\n\nAh ok. I'm only doing this at the unit test level, but I also don't like it as it is now.\n\nhttp://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/user_test.go#newcode79\nsrc/pkg/os/user/user_test.go:79: username, err := UserName()\nOn 2011/05/20 15:52:33, bradfitz wrote:\n> UserName shouldn't be part of the public API.  At least, it isn't now.\n> \n> make this userName for now?  maybe we can unhide it later.\n\nAs I said in another comment I need it to retrieve the username, and Go developers on Windows will need it too.\n\nThey won't be able to call syscall.getuid() to get the process owner. Are they forced to wrap the Win32 function?\n\nhttp://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/user_test.go#newcode89\nsrc/pkg/os/user/user_test.go:89: t.Errorf(\"expected Uid of 0 got %d\", u.Uid)\nOn 2011/05/20 15:52:33, bradfitz wrote:\n> As a unix person, Uid/Gid of 0 have a very distinct meaning.  I wonder if -1\n> might be a better \"not implemented\" value over 0?  Anybody have preferences?\n\nYou are right, I forgot about it.",
			"disapproval": false,
			"date": "2011-05-20 16:41:52.686987",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"mattn.jp@gmail.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4521053/diff/4005/src/pkg/os/user/lookup_windows.go\nFile src/pkg/os/user/lookup_windows.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/4005/src/pkg/os/user/lookup_windows.go#newcode36\nsrc/pkg/os/user/lookup_windows.go:36: func Current() (*User, os.Error) {\nOn 2011/05/23 07:56:31, brainman wrote:\n> On 2011/05/23 07:21:11, pjmlp wrote:\n> > \n> > ..., in Lookup you need to map an username to a SID, how\n> > would getUserBySID() help?\n> \n> You would still use syscall.LookupAccountName for that, but at least everything\n> else will be done in one getUserBySID() function.\n> \n> But I'm not fussed about that. It just looks convoluted to me, perhaps, your\n> function names are not expressive enough.\n\nI wonder how many ms we would gain by that. I mean by doing a OpenProcessToken + GetTokenInformation + getUserBySID, instead of the current scenario.\n\nStill, I would follow your decision.",
			"disapproval": false,
			"date": "2011-05-23 08:54:39.843315",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"mattn.jp@gmail.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4521053/diff/12002/src/pkg/os/user/user.go\nFile src/pkg/os/user/user.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/12002/src/pkg/os/user/user.go#newcode15\nsrc/pkg/os/user/user.go:15: Uid      Id // user id\nOn 2011/05/18 14:11:02, bradfitzgoog wrote:\n> \n> ...\n> \n\nI have no idea what we're trying to do here then. I'll just step back and help when asked. You drive it.\n\nAlex",
			"disapproval": false,
			"date": "2011-05-19 02:54:04.400027",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I took care of most of the comments. Will upload a new change set. Please note that I cannot test Unix builds.\n\nRegarding the unit tests, as I understand user_test.go is used for all OS, right?\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/lookup_windows.go\nFile src/pkg/os/user/lookup_windows.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/lookup_windows.go#newcode28\nsrc/pkg/os/user/lookup_windows.go:28: \nOn 2011/05/18 05:57:22, brainman wrote:\n> Remove all blank lines from short functions.\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/lookup_windows.go#newcode31\nsrc/pkg/os/user/lookup_windows.go:31: name, err = UserNameEx(syscall.NameDisplay)\nOn 2011/05/18 05:57:22, brainman wrote:\n> Do not need vars, just do\n> name, err := UserNameEx(syscall.NameDisplay)\n> \n> Same everywhere else.\n\nI fixed this partially, the main problem being that variables cannot be reused in := assignments, hence the few vars you see.\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/lookup_windows.go#newcode85\nsrc/pkg/os/user/lookup_windows.go:85: func UserName() (name string, err os.Error) {\nOn 2011/05/18 05:57:22, brainman wrote:\n> I don't think you want this function. There is no equivalent unix version. It is\n> also not used by anything inside here.\n> \n> Perhaps in the future we should have something like that, but this should be\n> coordinated with other platforms. Let's delay this for later CL.\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/lookup_windows.go#newcode101\nsrc/pkg/os/user/lookup_windows.go:101: func UserNameEx(format int32) (name string, err os.Error) {\nOn 2011/05/18 05:57:22, brainman wrote:\n> This function will be visibly from outside of user package. I think you want it\n> lower case.\n\nWhy not? should user package only offer the same set of public functions across OS?\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/lookup_windows.go#newcode102\nsrc/pkg/os/user/lookup_windows.go:102: //var n uint32 = syscall.UNLEN + 1\nOn 2011/05/18 05:57:22, brainman wrote:\n> Remove this comment.\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/lookup_windows.go#newcode114\nsrc/pkg/os/user/lookup_windows.go:114: return string(utf16.Decode(b[0:n])), nil\nOn 2011/05/18 05:57:22, brainman wrote:\n> s/0:n/:n/\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/lookup_windows.go#newcode118\nsrc/pkg/os/user/lookup_windows.go:118: func UserProfileDirectory() (name string, err os.Error) {\nOn 2011/05/18 05:57:22, brainman wrote:\n> This function will be visibly from outside of user package. I think you want it\n> lower case.\n\nI might even remove it. Still not clear how to get this information for any user, besides the current process owner.\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/lookup_windows.go#newcode136\nsrc/pkg/os/user/lookup_windows.go:136: // not enough space, get the buffer size\nOn 2011/05/18 05:57:22, brainman wrote:\n> From GetUserProfileDirectory manual:\n> \n> If the buffer specified by lpProfileDir is not large enough or lpProfileDir is\n> NULL, the function fails and this parameter receives the necessary buffer size,\n> including the terminating null character.\n> \n> Do not call GetUserProfileDirectory(token, nil, &n), after first call to\n> GetUserProfileDirectory, n should have size you want. Do similar to UserNameEx.\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/lookup_windows.go#newcode151\nsrc/pkg/os/user/lookup_windows.go:151: return string(utf16.Decode(b[0:n])), nil\nOn 2011/05/18 05:57:22, brainman wrote:\n> s/0:n/:n/\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/lookup_windows.go#newcode155\nsrc/pkg/os/user/lookup_windows.go:155: func SidToStringSid(sid syscall.SID) (string, os.Error) {\nOn 2011/05/18 05:57:22, brainman wrote:\n> Maybe this should be called:\n> \n> func (uid UID) String() string\n> \n> This way your UID would look good in fmt.Printf and others.\n> \n> Not sure about this one, just thinking aloud.\n\nFor it, maybe we need to cache the string representation, to avoid going down to OS level, every time String() gets called.\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/lookup_windows.go#newcode177\nsrc/pkg/os/user/lookup_windows.go:177: domainName := make([]uint16, domainNameSize)\nOn 2011/05/18 05:57:22, brainman wrote:\n> Why are you fetching domain name if you're not using it for anything.\n\nThe function fails otherwise, even if it is documented that it should work without asking for the domain.\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/lookup_windows.go#newcode179\nsrc/pkg/os/user/lookup_windows.go:179: if e == syscall.ERROR_INSUFFICIENT_BUFFER {\nOn 2011/05/18 05:57:22, brainman wrote:\n> Similar to UserProfileDirectory, sidSize and domainNameSize contain correct\n> sizes. It's not clear from the manual, but you could see it is set, if you start\n> with really small buffers (3-5 bytes).\n\nReduced down to 10.\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/lookup_windows.go#newcode207\nsrc/pkg/os/user/lookup_windows.go:207: domainName := make([]uint16, domainNameSize)\nOn 2011/05/18 05:57:22, brainman wrote:\n> Why are you fetching domain name if you're not using it for anything. Maybe you\n> should return domain name as part of username or something.\n\nAs replied above, function seems to fail if no domain is given.\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/lookup_windows.go#newcode210\nsrc/pkg/os/user/lookup_windows.go:210: if e == syscall.ERROR_INSUFFICIENT_BUFFER {\nOn 2011/05/18 05:57:22, brainman wrote:\n> Similar to UserProfileDirectory, usernameSize and domainNameSize contain correct\n> sizes. It's not clear from the manual, but you could see it is set, if you start\n> with really small buffers (3-5 bytes).\n\nReduced down to 10.\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/user.go\nFile src/pkg/os/user/user.go (left):\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/user.go#oldcode15\nsrc/pkg/os/user/user.go:15: Gid      int // primary group id\nOn 2011/05/18 05:57:22, brainman wrote:\n> I take my suggestion back. Let's not complicate things. Let's:\n> \n> type User struct {\n>   Uid Id // user id\n>   Gid Id // primary group id\n>   Username string\n>   Name string\n>   HomeDir string\n> }\n\nDone.",
			"disapproval": false,
			"date": "2011-05-18 08:30:31.623263",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hi,\n\ntried to follow most of the last recomendations. Commenting here, because I forgot to add the comment on the changes submission email.\n\nI noticed that some bindings in the syscall package actually require two return values, fixed that.\n\nMost of the code is now in os.user package.\n\nNow some initial values for the buffers is used.\n\nThe full username is being correctly retrieved now.\n\nA new issue surfaced, how to get the SID for the Gid. For the time being I made Uid == Gid.\n\nOn 2011/05/11 12:46:47, brainman wrote:\n> On 2011/05/11 09:30:26, pjmlp wrote:\n> > \n> > here are my comments. Please let me know your view on them, so that I can\n> > republish my changes.\n> \n> Cool. Please, use \"hg main 4521053\" to publish your changes once you're ready.\n> This will also send email to golang-dev list, so other people will see your\n> changes and can comment, if they care.\n> \n> > On 2011/05/10 13:15:45, brainman wrote:\n> > > This can stay in user.go.\n> > \n> > I cannot, because Uid and Gid fields are os specific, as such user.go won't\n> > compile.\n> \n> You can put this into user.go\n> \n> type User struct {\n>     Uid              // user id\n>     Gid              // primary group id\n>     Username string\n>     Name     string\n>     HomeDir  string\n> }\n> \n> You can put this into lookup_unix.go\n> \n> type Uid int\n> type Gid int\n> \n> You can put this into lookup_windows.go\n> \n> type Uid syscall.SID\n> type Gid syscall.SID\n> \n> or whatever.\n> \n> > On 2011/05/10 13:15:45, brainman wrote:\n> > > I have no idea why you've change this file. I don't think you need to change\n> > > even one line in this file.\n> > \n> > These hacks are required when compiling on Windows. ...\n> \n> I realised that, but only after I hit \"send\" button. Please, just revert changes\n> to zerrors_windows.go file for now. We could deal with that problem in a\n> separate CL http://code.google.com/p/go/issues/detail?id=1799.\n> \n> >\n> http://codereview.appspot.com/4521053/diff/2001/src/pkg/syscall/syscall_windows.go#newcode136\n> > src/pkg/syscall/syscall_windows.go:136: //sys   ConvertSidToStringSid(sid\n> > *uint8, stringSid *uint32) (errno int) =  advapi32.ConvertSidToStringSidW\n> > On 2011/05/10 13:15:45, brainman wrote:\n> > > s/uint8/byte/\n> > > s/stringSid *uint32/stringSid **uint16/\n> > > \n> > > from the manual:\n> > > StringSid\n> > > A pointer to a variable that receives a pointer to a null-terminated SID\n> > string.\n> > \n> > stringSid kept as *uint32. I was following LocalFree declaration. As this\n> string\n> > needs to be freed by it.\n> > \n> \n> I understand. But this\n> \n> pstr := (*[8192]uint16)(unsafe.Pointer(uintptr(str)))\n> \n> is not pretty. I just hope my suggestion will simplify this code. Line with\n> LocalFree will have single type conversion - no big deal.\n> \n> > On 2011/05/10 13:15:45, brainman wrote:\n> > > Do not need this type at all, just use int or int32, whatever appropriate.\n> > \n> > Just wanted to simulate type safe enums.\n> > \n> \n> It's simple enough here. You won't make mistake <g>.\n> \n> > \n> > Changed all the function calls to first query for buffer sizes, and only\n> > afterwards fetch the data.\n> > \n> \n> Please, don't do that. Here are some issues you're fighting against:\n> \n> 1) syscalls into Windows are expensive - you have to do first call, it is OK to\n> have second call, but only in \"extreme\" cases; two syscalls every time is\n> wasteful;\n> \n> 2) allocating big blocks of memory could be expensive - even if you're\n> allocating on the stack, since go use segmented stacks, big allocations on stack\n> will trigger stack split - memory allocation and some stack management;\n> \n> 3) you don't want to end up with code that doesn't return complete data or\n> doesn't work in \"extreme\" cases (like username is way too long or something).\n> \n> So the approach is, use reasonably small buffer, that will cover *most* of\n> scenarios. If that fails, make second call, but now you should know how big your\n> buffer should be. So now you never use more buffer space than you need to, and\n> also make second syscall only on rare occasions.\n> \n> Alex",
			"disapproval": false,
			"date": "2011-05-16 12:57:37.253977",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"mattn.jp@gmail.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "This is getting close.\n\nhttp://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/lookup_unix.go\nFile src/pkg/os/user/lookup_unix.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/lookup_unix.go#newcode16\nsrc/pkg/os/user/lookup_unix.go:16: // Represents an OS independent user identifier\nI think this comment is old.  It's no longer used for POSIX.  Also:\n\nhttp://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/lookup_unix.go#newcode17\nsrc/pkg/os/user/lookup_unix.go:17: type Id int\nhere Id is an int value, but...\n\nhttp://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/lookup_unix.go#newcode44\nsrc/pkg/os/user/lookup_unix.go:44: // LookupSID looks up a user by Id. If the user cannot be found,\nthese docs assume the user knows what a SID is, which zero Unix people know and very few Windows people even know.\n\nBe sure to mention Windows in here.\n\nhttp://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/lookup_unix.go#newcode46\nsrc/pkg/os/user/lookup_unix.go:46: // This function panics if called on Unix systems\ndoesn't panic.  just returns an error.\n\nhttp://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/lookup_unix.go#newcode104\nsrc/pkg/os/user/lookup_unix.go:104: SID:      nil,\n... here SID is a pointer.\n\nMaybe the \"Id\" type should just be:\n\ntype WindowsSID string\n\n... on both posix and windows.\n\nhttp://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/lookup_windows.go\nFile src/pkg/os/user/lookup_windows.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/lookup_windows.go#newcode68\nsrc/pkg/os/user/lookup_windows.go:68: func UserName() (name string, err os.Error) {\nthis function isn't exported on the unix side.  Did you mean to make this lowercase?\n\nhttp://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/user.go\nFile src/pkg/os/user/user.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/user.go#newcode15\nsrc/pkg/os/user/user.go:15: Uid      int // user id, only valid in POSIX systems, 0 otherwise\nno need to say \"0 otherwise\".\n\nYou could also group these with a shared comment:\n\n     // For POSIX systems:\n     Uid   int  // user id\n     Gid   int  // primary group id\n\n     // For Windows:\n     SID   Id   // What is this? What is its type?\n\nhttp://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/user.go#newcode19\nsrc/pkg/os/user/user.go:19: Name     string // An empty string on Windows platforms for the time being\nName  string // User's name, if available.\n\nhttp://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/user_test.go\nFile src/pkg/os/user/user_test.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/user_test.go#newcode74\nsrc/pkg/os/user/user_test.go:74: if err != nil && err.String() != \"user: Windows does not support lookup by userid\" {\nerror checking by string comparison is a bit gross, but in a test I suppose it's not the end of the world.\n\nI wonder if you should just return syscall.EWINDOWS here instead, and check for that exact value?\n\nhttp://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/user_test.go#newcode79\nsrc/pkg/os/user/user_test.go:79: username, err := UserName()\nUserName shouldn't be part of the public API.  At least, it isn't now.\n\nmake this userName for now?  maybe we can unhide it later.\n\nhttp://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/user_test.go#newcode89\nsrc/pkg/os/user/user_test.go:89: t.Errorf(\"expected Uid of 0 got %d\", u.Uid)\nAs a unix person, Uid/Gid of 0 have a very distinct meaning.  I wonder if -1 might be a better \"not implemented\" value over 0?  Anybody have preferences?",
			"disapproval": false,
			"date": "2011-05-20 15:52:33.592718",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"mattn.jp@gmail.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, alex.brainman@gmail.com, mattn.jp@gmail.com, bradfitz@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-05-24 07:34:26.983145",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"mattn.jp@gmail.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/05/19 20:21:41, bradfitz wrote:\n> http://codereview.appspot.com/4521053/diff/12002/src/pkg/os/user/user.go\n> File src/pkg/os/user/user.go (right):\n> \n> http://codereview.appspot.com/4521053/diff/12002/src/pkg/os/user/user.go#newcode15\n> src/pkg/os/user/user.go:15: Uid      Id // user id\n> On 2011/05/19 02:54:04, brainman wrote:\n> > On 2011/05/18 14:11:02, bradfitzgoog wrote:\n> > > \n> > > ...\n> > > \n> > \n> > I have no idea what we're trying to do here then. I'll just step back and help\n> > when asked. You drive it.\n> \n> Sorry, what I meant is that it should be possible to write code which compiles\n> unchanged for different GOOS={windows,posix,darwin}, without doing tricks like\n> having different Go files in your makefiles for different OSes.  That's\n> generally only done when it's very necessary.\n> \n> What I was thinking we'd do for os/user was something like:\n> \n> type User struct {\n>     // Where applicable: (e.g. POSIX systems)\n>     Uid int  // userid\n>     Gid int  // primary group id, \n> \n>     // Where applicable: (e.g. Windows)\n>     SID string // the Windows xxxxx\n> \n>     Username string\n>     Name     string\n>     HomeDir  string\n> }\n> \n> Then for Windows:\n> \n> func LookupId(uid int) (*User, os.Error) {\n>    return nil, os.NewError(\"user: Windows does not support lookup by userid\")\n> }\n> \n> For Posix:\n> \n> func LookupSID(sid string) (*User, os.Error) {\n>    return nil, os.NewError(\"user: username look by SID not supported\")\n> }\n> \n> etc\n> \n> Make sense?\n> \n> I'm only commenting on the top-level API design.  I'd still like you to continue\n> to review the Windows-specific parts if you could (syscall and implementation\n> here, as I don't know anything about Windows).\n\nI actually already did that. Only used panic instead of os.NewError.\nI will replace it.\n\nSo far I have not uploaded the latest changes, because I am still looking for a way to map a SID to the user fullname.\n\nThe GetUsernameEx() function cannot be used, since it only works for the process owner. So I have come to the conclusion that it does not make sense to call it.\n\nWindows makes it very hard to fetch this information, since the APIs change depending on where the information is stored (local, domain controler, ActiveDirectory, LDAP).\n\nAnother question, is there a way to make the tests filename OS dependent, like with the normal code?",
			"disapproval": false,
			"date": "2011-05-19 20:41:26.330097",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/05/17 08:07:42, pjmlp wrote:\n> Hello bradfitz, brainman (cc: mailto:golang-dev@googlegroups.com),\n> \n> Please take another look.\n\nDo you forget to upload file in syscall ?\n\n------------------\n8g  -o _go_.8 user.go  lookup_windows.go\nuser.go:14: invalid recursive type Uid\nuser.go:15: invalid recursive type Gid\nlookup_windows.go:15: undefined: syscall.SID\nlookup_windows.go:18: undefined: syscall.SID\nlookup_windows.go:24: assignment count mismatch: 2 = 0\nlookup_windows.go:31: undefined: syscall.NameDisplay\nlookup_windows.go:55: undefined: syscall.SID\nlookup_windows.go:155: undefined: syscall.SID\nlookup_windows.go:168: undefined: syscall.SID\nlookup_windows.go:200: undefined: syscall.SID\nlookup_windows.go:55: too many errors\n\n------------------",
			"disapproval": false,
			"date": "2011-05-18 00:52:26.669346",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"mattn.jp@gmail.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/05/20 16:58:42, bradfitz wrote:\n> On Fri, May 20, 2011 at 9:41 AM, <mailto:paulo.jpinto@gmail.com> wrote:\n> \n> > Currently I am not able to upload my changes, because I am on another\n> > PC, but I can already give my feedback to your comments.\n> >\n> >\n> >\n> >\n> >\n> http://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/lookup_unix.go\n> > File src/pkg/os/user/lookup_unix.go (right):\n> >\n> >\n> >\n> http://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/lookup_unix.go#newcode16\n> > src/pkg/os/user/lookup_unix.go:16: // Represents an OS independent user\n> > identifier\n> > On 2011/05/20 15:52:33, bradfitz wrote:\n> >\n> >> I think this comment is old.  It's no longer used for POSIX.  Also:\n> >>\n> >\n> > You're right, sorry about that.\n> >\n> >\n> >\n> >\n> http://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/lookup_unix.go#newcode17\n> > src/pkg/os/user/lookup_unix.go:17: type Id int\n> > On 2011/05/20 15:52:33, bradfitz wrote:\n> >\n> >> here Id is an int value, but...\n> >>\n> >\n> > Sorry about that. Not being able to compile on Linux for the time being,\n> > opens the door for such issues.\n> >\n> >\n> >\n> >\n> http://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/lookup_unix.go#newcode44\n> > src/pkg/os/user/lookup_unix.go:44: // LookupSID looks up a user by Id.\n> > If the user cannot be found,\n> > On 2011/05/20 15:52:33, bradfitz wrote:\n> >\n> >> these docs assume the user knows what a SID is, which zero Unix people\n> >>\n> > know and\n> >\n> >> very few Windows people even know.\n> >>\n> >\n> >  Be sure to mention Windows in here.\n> >>\n> >\n> > Done.\n> >\n> >\n> >\n> >\n> http://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/lookup_unix.go#newcode46\n> > src/pkg/os/user/lookup_unix.go:46: // This function panics if called on\n> > Unix systems\n> > On 2011/05/20 15:52:33, bradfitz wrote:\n> >\n> >> doesn't panic.  just returns an error.\n> >>\n> >\n> > Done.\n> >\n> >\n> >\n> >\n> http://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/lookup_windows.go\n> > File src/pkg/os/user/lookup_windows.go (right):\n> >\n> >\n> >\n> http://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/lookup_windows.go#newcode68\n> > src/pkg/os/user/lookup_windows.go:68: func UserName() (name string, err\n> > os.Error) {\n> > On 2011/05/20 15:52:33, bradfitz wrote:\n> >\n> >> this function isn't exported on the unix side.  Did you mean to make\n> >>\n> > this\n> >\n> >> lowercase?\n> >>\n> >\n> > No, it needs to be public. Otherwise there is no way to implement\n> > similar test case for Windows. Or should the function be private to the\n> > tests file?\n> >\n> \n> You can call lowercase stuff from tests in the same package.\n> \n> \n> > syscall.getuid() won't work on Windows, the companion function would be\n> > either a getsid() or the UserName() function.\n> \n> \n> If you really need a new public function in the user package, it has to go\n> in both posix & windows, not just one.\n> \n> Maybe we can add:\n> \n>     func Current() (*User, os.Error)\n> \n> ... to both.\n> \n> Would that work?\n> \n> \n> >\n> >\n> > http://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/user.go\n> > File src/pkg/os/user/user.go (right):\n> >\n> >\n> >\n> http://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/user.go#newcode15\n> > src/pkg/os/user/user.go:15: Uid      int // user id, only valid in POSIX\n> > systems, 0 otherwise\n> > On 2011/05/20 15:52:33, bradfitz wrote:\n> >\n> >> no need to say \"0 otherwise\".\n> >>\n> >\n> >  You could also group these with a shared comment:\n> >>\n> >\n> >       // For POSIX systems:\n> >>      Uid   int  // user id\n> >>      Gid   int  // primary group id\n> >>\n> >\n> >       // For Windows:\n> >>      SID   Id   // What is this? What is its type?\n> >>\n> >\n> > I'll do it.\n> >\n> > Regarding the Id, maybe I am spoiled with years of software engineering,\n> > but I thought it should be enough for the users to know that user.Id is\n> > an black box ADT.\n> >\n> >\n> >\n> >\n> http://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/user.go#newcode19\n> > src/pkg/os/user/user.go:19: Name     string // An empty string on\n> > Windows platforms for the time being\n> > On 2011/05/20 15:52:33, bradfitz wrote:\n> >\n> >> Name  string // User's name, if available.\n> >>\n> >\n> > Done.\n> >\n> >\n> >\n> > http://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/user_test.go\n> > File src/pkg/os/user/user_test.go (right):\n> >\n> >\n> >\n> http://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/user_test.go#newcode74\n> > src/pkg/os/user/user_test.go:74: if err != nil && err.String() != \"user:\n> > Windows does not support lookup by userid\" {\n> > On 2011/05/20 15:52:33, bradfitz wrote:\n> >\n> >> error checking by string comparison is a bit gross, but in a test I\n> >>\n> > suppose it's\n> >\n> >> not the end of the world.\n> >>\n> >\n> >  I wonder if you should just return syscall.EWINDOWS here instead, and\n> >>\n> > check for\n> >\n> >> that exact value?\n> >>\n> >\n> > Ah ok. I'm only doing this at the unit test level, but I also don't like\n> > it as it is now.\n> >\n> >\n> >\n> >\n> http://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/user_test.go#newcode79\n> > src/pkg/os/user/user_test.go:79: username, err := UserName()\n> > On 2011/05/20 15:52:33, bradfitz wrote:\n> >\n> >> UserName shouldn't be part of the public API.  At least, it isn't now.\n> >>\n> >\n> >  make this userName for now?  maybe we can unhide it later.\n> >>\n> >\n> > As I said in another comment I need it to retrieve the username, and Go\n> > developers on Windows will need it too.\n> >\n> > They won't be able to call syscall.getuid() to get the process owner.\n> > Are they forced to wrap the Win32 function?\n> >\n> >\n> >\n> >\n> http://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/user_test.go#newcode89\n> > src/pkg/os/user/user_test.go:89: t.Errorf(\"expected Uid of 0 got %d\",\n> > u.Uid)\n> > On 2011/05/20 15:52:33, bradfitz wrote:\n> >\n> >> As a unix person, Uid/Gid of 0 have a very distinct meaning.  I wonder\n> >>\n> > if -1\n> >\n> >> might be a better \"not implemented\" value over 0?  Anybody have\n> >>\n> > preferences?\n> >\n> > You are right, I forgot about it.\n> >\n> >\n> > http://codereview.appspot.com/4521053/\n> >\n\nThe Current idea seems nice, I'll do as suggested.",
			"disapproval": false,
			"date": "2011-05-20 17:00:40.422682",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello bradfitz, brainman (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-05-17 08:07:42.681554",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Shouldn't we have tests going for Windows too?\n\nI don't think it was good idea to have syscall changes in a separate CL.\n\nAlex\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/lookup_windows.go\nFile src/pkg/os/user/lookup_windows.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/lookup_windows.go#newcode28\nsrc/pkg/os/user/lookup_windows.go:28: \nRemove all blank lines from short functions.\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/lookup_windows.go#newcode31\nsrc/pkg/os/user/lookup_windows.go:31: name, err = UserNameEx(syscall.NameDisplay)\nDo not need vars, just do\nname, err := UserNameEx(syscall.NameDisplay)\n\nSame everywhere else.\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/lookup_windows.go#newcode85\nsrc/pkg/os/user/lookup_windows.go:85: func UserName() (name string, err os.Error) {\nI don't think you want this function. There is no equivalent unix version. It is also not used by anything inside here.\n\nPerhaps in the future we should have something like that, but this should be coordinated with other platforms. Let's delay this for later CL.\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/lookup_windows.go#newcode101\nsrc/pkg/os/user/lookup_windows.go:101: func UserNameEx(format int32) (name string, err os.Error) {\nThis function will be visibly from outside of user package. I think you want it lower case.\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/lookup_windows.go#newcode102\nsrc/pkg/os/user/lookup_windows.go:102: //var n uint32 = syscall.UNLEN + 1\nRemove this comment.\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/lookup_windows.go#newcode114\nsrc/pkg/os/user/lookup_windows.go:114: return string(utf16.Decode(b[0:n])), nil\ns/0:n/:n/\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/lookup_windows.go#newcode118\nsrc/pkg/os/user/lookup_windows.go:118: func UserProfileDirectory() (name string, err os.Error) {\nThis function will be visibly from outside of user package. I think you want it lower case.\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/lookup_windows.go#newcode136\nsrc/pkg/os/user/lookup_windows.go:136: // not enough space, get the buffer size\nFrom GetUserProfileDirectory manual:\n\nIf the buffer specified by lpProfileDir is not large enough or lpProfileDir is NULL, the function fails and this parameter receives the necessary buffer size, including the terminating null character.\n\nDo not call GetUserProfileDirectory(token, nil, &n), after first call to GetUserProfileDirectory, n should have size you want. Do similar to UserNameEx.\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/lookup_windows.go#newcode151\nsrc/pkg/os/user/lookup_windows.go:151: return string(utf16.Decode(b[0:n])), nil\ns/0:n/:n/\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/lookup_windows.go#newcode155\nsrc/pkg/os/user/lookup_windows.go:155: func SidToStringSid(sid syscall.SID) (string, os.Error) {\nMaybe this should be called:\n\nfunc (uid UID) String() string\n\nThis way your UID would look good in fmt.Printf and others.\n\nNot sure about this one, just thinking aloud.\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/lookup_windows.go#newcode177\nsrc/pkg/os/user/lookup_windows.go:177: domainName := make([]uint16, domainNameSize)\nWhy are you fetching domain name if you're not using it for anything.\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/lookup_windows.go#newcode179\nsrc/pkg/os/user/lookup_windows.go:179: if e == syscall.ERROR_INSUFFICIENT_BUFFER {\nSimilar to UserProfileDirectory, sidSize and domainNameSize contain correct sizes. It's not clear from the manual, but you could see it is set, if you start with really small buffers (3-5 bytes).\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/lookup_windows.go#newcode207\nsrc/pkg/os/user/lookup_windows.go:207: domainName := make([]uint16, domainNameSize)\nWhy are you fetching domain name if you're not using it for anything. Maybe you should return domain name as part of username or something.\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/lookup_windows.go#newcode210\nsrc/pkg/os/user/lookup_windows.go:210: if e == syscall.ERROR_INSUFFICIENT_BUFFER {\nSimilar to UserProfileDirectory, usernameSize and domainNameSize contain correct sizes. It's not clear from the manual, but you could see it is set, if you start with really small buffers (3-5 bytes).\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/user.go\nFile src/pkg/os/user/user.go (left):\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/user.go#oldcode15\nsrc/pkg/os/user/user.go:15: Gid      int // primary group id\nI take my suggestion back. Let's not complicate things. Let's:\n\ntype User struct {\n  Uid Id // user id\n  Gid Id // primary group id\n  Username string\n  Name string\n  HomeDir string\n}",
			"disapproval": false,
			"date": "2011-05-18 05:57:22.901078",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello bradfitz, brainman, mattn (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-05-18 08:36:23.916184",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"mattn.jp@gmail.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/user_test.go\nFile src/pkg/os/user/user_test.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/user_test.go#newcode74\nsrc/pkg/os/user/user_test.go:74: if err != nil && err.String() != \"user: Windows does not support lookup by userid\" {\nOn 2011/05/20 16:41:52, pjmlp wrote:\n> On 2011/05/20 15:52:33, bradfitz wrote:\n> > error checking by string comparison is a bit gross, but in a test I suppose\n> it's\n> > not the end of the world.\n> > \n> > I wonder if you should just return syscall.EWINDOWS here instead, and check\n> for\n> > that exact value?\n> \n> Ah ok. I'm only doing this at the unit test level, but I also don't like it as\n> it is now.\n\nI just submitted a new changeset, but left this test as it is, because I can only refer to syscall.EWINDOWS on Windows builds.",
			"disapproval": false,
			"date": "2011-05-22 19:03:30.584915",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/05/18 00:52:26, mattn wrote:\n> \n> Do you forget to upload file in syscall ?\n> \n\nBrad asked to put it in a separate CL (http://codereview.appspot.com/4528073/).\n\nAlex",
			"disapproval": false,
			"date": "2011-05-18 05:58:59.710631",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Fri, May 20, 2011 at 9:41 AM, <paulo.jpinto@gmail.com> wrote:\n\n> Currently I am not able to upload my changes, because I am on another\n> PC, but I can already give my feedback to your comments.\n>\n>\n>\n>\n> http://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/lookup_unix.go\n> File src/pkg/os/user/lookup_unix.go (right):\n>\n>\n> http://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/lookup_unix.go#newcode16\n> src/pkg/os/user/lookup_unix.go:16: // Represents an OS independent user\n> identifier\n> On 2011/05/20 15:52:33, bradfitz wrote:\n>\n>> I think this comment is old.  It's no longer used for POSIX.  Also:\n>>\n>\n> You're right, sorry about that.\n>\n>\n>\n> http://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/lookup_unix.go#newcode17\n> src/pkg/os/user/lookup_unix.go:17: type Id int\n> On 2011/05/20 15:52:33, bradfitz wrote:\n>\n>> here Id is an int value, but...\n>>\n>\n> Sorry about that. Not being able to compile on Linux for the time being,\n> opens the door for such issues.\n>\n>\n>\n> http://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/lookup_unix.go#newcode44\n> src/pkg/os/user/lookup_unix.go:44: // LookupSID looks up a user by Id.\n> If the user cannot be found,\n> On 2011/05/20 15:52:33, bradfitz wrote:\n>\n>> these docs assume the user knows what a SID is, which zero Unix people\n>>\n> know and\n>\n>> very few Windows people even know.\n>>\n>\n>  Be sure to mention Windows in here.\n>>\n>\n> Done.\n>\n>\n>\n> http://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/lookup_unix.go#newcode46\n> src/pkg/os/user/lookup_unix.go:46: // This function panics if called on\n> Unix systems\n> On 2011/05/20 15:52:33, bradfitz wrote:\n>\n>> doesn't panic.  just returns an error.\n>>\n>\n> Done.\n>\n>\n>\n> http://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/lookup_windows.go\n> File src/pkg/os/user/lookup_windows.go (right):\n>\n>\n> http://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/lookup_windows.go#newcode68\n> src/pkg/os/user/lookup_windows.go:68: func UserName() (name string, err\n> os.Error) {\n> On 2011/05/20 15:52:33, bradfitz wrote:\n>\n>> this function isn't exported on the unix side.  Did you mean to make\n>>\n> this\n>\n>> lowercase?\n>>\n>\n> No, it needs to be public. Otherwise there is no way to implement\n> similar test case for Windows. Or should the function be private to the\n> tests file?\n>\n\nYou can call lowercase stuff from tests in the same package.\n\n\n> syscall.getuid() won't work on Windows, the companion function would be\n> either a getsid() or the UserName() function.\n\n\nIf you really need a new public function in the user package, it has to go\nin both posix & windows, not just one.\n\nMaybe we can add:\n\n    func Current() (*User, os.Error)\n\n... to both.\n\nWould that work?\n\n\n>\n>\n> http://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/user.go\n> File src/pkg/os/user/user.go (right):\n>\n>\n> http://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/user.go#newcode15\n> src/pkg/os/user/user.go:15: Uid      int // user id, only valid in POSIX\n> systems, 0 otherwise\n> On 2011/05/20 15:52:33, bradfitz wrote:\n>\n>> no need to say \"0 otherwise\".\n>>\n>\n>  You could also group these with a shared comment:\n>>\n>\n>       // For POSIX systems:\n>>      Uid   int  // user id\n>>      Gid   int  // primary group id\n>>\n>\n>       // For Windows:\n>>      SID   Id   // What is this? What is its type?\n>>\n>\n> I'll do it.\n>\n> Regarding the Id, maybe I am spoiled with years of software engineering,\n> but I thought it should be enough for the users to know that user.Id is\n> an black box ADT.\n>\n>\n>\n> http://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/user.go#newcode19\n> src/pkg/os/user/user.go:19: Name     string // An empty string on\n> Windows platforms for the time being\n> On 2011/05/20 15:52:33, bradfitz wrote:\n>\n>> Name  string // User's name, if available.\n>>\n>\n> Done.\n>\n>\n>\n> http://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/user_test.go\n> File src/pkg/os/user/user_test.go (right):\n>\n>\n> http://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/user_test.go#newcode74\n> src/pkg/os/user/user_test.go:74: if err != nil && err.String() != \"user:\n> Windows does not support lookup by userid\" {\n> On 2011/05/20 15:52:33, bradfitz wrote:\n>\n>> error checking by string comparison is a bit gross, but in a test I\n>>\n> suppose it's\n>\n>> not the end of the world.\n>>\n>\n>  I wonder if you should just return syscall.EWINDOWS here instead, and\n>>\n> check for\n>\n>> that exact value?\n>>\n>\n> Ah ok. I'm only doing this at the unit test level, but I also don't like\n> it as it is now.\n>\n>\n>\n> http://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/user_test.go#newcode79\n> src/pkg/os/user/user_test.go:79: username, err := UserName()\n> On 2011/05/20 15:52:33, bradfitz wrote:\n>\n>> UserName shouldn't be part of the public API.  At least, it isn't now.\n>>\n>\n>  make this userName for now?  maybe we can unhide it later.\n>>\n>\n> As I said in another comment I need it to retrieve the username, and Go\n> developers on Windows will need it too.\n>\n> They won't be able to call syscall.getuid() to get the process owner.\n> Are they forced to wrap the Win32 function?\n>\n>\n>\n> http://codereview.appspot.com/4521053/diff/17004/src/pkg/os/user/user_test.go#newcode89\n> src/pkg/os/user/user_test.go:89: t.Errorf(\"expected Uid of 0 got %d\",\n> u.Uid)\n> On 2011/05/20 15:52:33, bradfitz wrote:\n>\n>> As a unix person, Uid/Gid of 0 have a very distinct meaning.  I wonder\n>>\n> if -1\n>\n>> might be a better \"not implemented\" value over 0?  Anybody have\n>>\n> preferences?\n>\n> You are right, I forgot about it.\n>\n>\n> http://codereview.appspot.com/4521053/\n>\n",
			"disapproval": false,
			"date": "2011-05-20 16:58:42.722664",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"mattn.jp@gmail.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, alex.brainman@gmail.com, mattn.jp@gmail.com, bradfitz@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-05-22 19:01:28.066883",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"mattn.jp@gmail.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/05/23 11:16:51, brainman wrote:\n> On 2011/05/23 08:54:39, pjmlp wrote:\n> > ...\n> > I wonder how many ms we would gain by that. ...\n> > \n> \n> I'm just guessing here, but I would think that \"user database\" is kept somewhere\n> on the network. So, I suspect, Windows would have to make a network round trip\n> or two (dns, domain controlers, ...) to answer some of your questions.\n> \n> Alex\n\nI am yet to make this modification. Should I redo the way Current() is working?\n\n--\nPaulo",
			"disapproval": false,
			"date": "2011-05-24 07:36:32.361064",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/lookup_windows.go\nFile src/pkg/os/user/lookup_windows.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/lookup_windows.go#newcode101\nsrc/pkg/os/user/lookup_windows.go:101: func UserNameEx(format int32) (name string, err os.Error) {\nOn 2011/05/18 08:30:31, pjmlp wrote:\n> ... should user package only offer the same set of public functions across\n> OS?\n\nYes. Maybe later, but this time round, we'll implement equivalent of \"unix\" version. Just to keep things simple.\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/lookup_windows.go#newcode118\nsrc/pkg/os/user/lookup_windows.go:118: func UserProfileDirectory() (name string, err os.Error) {\nOn 2011/05/18 08:30:31, pjmlp wrote:\n> I might even remove it. ...\n\nThat is OK, but you don't want it to be visible from outside. Please, make it lower case.\n\nhttp://codereview.appspot.com/4521053/diff/14001/src/pkg/os/user/lookup_windows.go#newcode155\nsrc/pkg/os/user/lookup_windows.go:155: func SidToStringSid(sid syscall.SID) (string, os.Error) {\nOn 2011/05/18 08:30:31, pjmlp wrote:\n> On 2011/05/18 05:57:22, brainman wrote:\n> > Maybe this should be called:\n> > \n> > func (uid UID) String() string\n> > \n> > This way your UID would look good in fmt.Printf and others.\n> > \n> > Not sure about this one, just thinking aloud.\n> \n\n> For it, maybe we need to cache the string representation, ...\n\nCaching is, probably, OK, but not now. Let's keep it simple.\n\nBut, please, rename it to lower case, or have it named as I suggested.\n\nhttp://codereview.appspot.com/4521053/diff/12002/src/pkg/os/user/lookup_windows.go#newcode25\nsrc/pkg/os/user/lookup_windows.go:25: if er != 0 {\nReplace these 2 lines with\nname, err := UserNameEx(syscall.NameDisplay)\n\nhttp://codereview.appspot.com/4521053/diff/12002/src/pkg/os/user/lookup_windows.go#newcode30\nsrc/pkg/os/user/lookup_windows.go:30: var err os.Error\nReplace these 2 lines with\ndir, err := UserProfileDirectory()\n\n... same everywhere else.\n\nhttp://codereview.appspot.com/4521053/diff/12002/src/pkg/os/user/lookup_windows.go#newcode69\nsrc/pkg/os/user/lookup_windows.go:69: if err != nil {\nRemove blank line.\n\nhttp://codereview.appspot.com/4521053/diff/12002/src/pkg/os/user/lookup_windows.go#newcode161\nsrc/pkg/os/user/lookup_windows.go:161: defer syscall.LocalFree(uint32(uintptr(unsafe.Pointer(str))))\nPlease, make these both to be 100, like the function before.",
			"disapproval": false,
			"date": "2011-05-18 12:29:25.228498",
			"approval": false
		},
		{
			"sender": "bradfitz@google.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"mattn.jp@gmail.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4521053/diff/12002/src/pkg/os/user/user.go\nFile src/pkg/os/user/user.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/12002/src/pkg/os/user/user.go#newcode15\nsrc/pkg/os/user/user.go:15: Uid      Id // user id\nWe're not going to go down this painful road where basic types are different depending on the OS.\n\nStructs and code should compile on different systems, even if it doesn't run.\n\nKeep these as ints but feel free to add a new field:\n\nSID  <whatevertype>  // The Windows SID, generally blank on POSIX systems.\n\nGenerally?  Perhaps somebody wants to use it to interop with a Windows system, or Samba, etc.\n\nThen just add a new LookupSID function for Windows that returns an error on Posix.\n\nAnd have LookupId return an error on Windows.\n\nPortable code can switch on runtime.GOOS and support multiple OSes without Makefile shenanigans.",
			"disapproval": false,
			"date": "2011-05-18 14:11:02.108913",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"mattn.jp@gmail.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4521053/diff/12002/src/pkg/os/user/user.go\nFile src/pkg/os/user/user.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/12002/src/pkg/os/user/user.go#newcode15\nsrc/pkg/os/user/user.go:15: Uid      Id // user id\nOn 2011/05/19 02:54:04, brainman wrote:\n> On 2011/05/18 14:11:02, bradfitzgoog wrote:\n> > \n> > ...\n> > \n> \n> I have no idea what we're trying to do here then. I'll just step back and help\n> when asked. You drive it.\n\nSorry, what I meant is that it should be possible to write code which compiles unchanged for different GOOS={windows,posix,darwin}, without doing tricks like having different Go files in your makefiles for different OSes.  That's generally only done when it's very necessary.\n\nWhat I was thinking we'd do for os/user was something like:\n\ntype User struct {\n    // Where applicable: (e.g. POSIX systems)\n    Uid int  // userid\n    Gid int  // primary group id, \n\n    // Where applicable: (e.g. Windows)\n    SID string // the Windows xxxxx\n\n    Username string\n    Name     string\n    HomeDir  string\n}\n\nThen for Windows:\n\nfunc LookupId(uid int) (*User, os.Error) {\n   return nil, os.NewError(\"user: Windows does not support lookup by userid\")\n}\n\nFor Posix:\n\nfunc LookupSID(sid string) (*User, os.Error) {\n   return nil, os.NewError(\"user: username look by SID not supported\")\n}\n\netc\n\nMake sense?\n\nI'm only commenting on the top-level API design.  I'd still like you to continue to review the Windows-specific parts if you could (syscall and implementation here, as I don't know anything about Windows).",
			"disapproval": false,
			"date": "2011-05-19 20:21:41.462688",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"mattn.jp@gmail.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/05/23 08:54:39, pjmlp wrote:\n> ...\n> I wonder how many ms we would gain by that. ...\n> \n\nI'm just guessing here, but I would think that \"user database\" is kept somewhere on the network. So, I suspect, Windows would have to make a network round trip or two (dns, domain controlers, ...) to answer some of your questions.\n\nAlex",
			"disapproval": false,
			"date": "2011-05-23 11:16:51.059902",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, May 19, 2011 at 1:41 PM, <paulo.jpinto@gmail.com> wrote:\n\n> On 2011/05/19 20:21:41, bradfitz wrote:\n>\n> http://codereview.appspot.com/4521053/diff/12002/src/pkg/os/user/user.go\n>\n>> File src/pkg/os/user/user.go (right):\n>>\n>\n>\n>\n> http://codereview.appspot.com/4521053/diff/12002/src/pkg/os/user/user.go#newcode15\n>\n>> src/pkg/os/user/user.go:15: Uid      Id // user id\n>> On 2011/05/19 02:54:04, brainman wrote:\n>> > On 2011/05/18 14:11:02, bradfitzgoog wrote:\n>> > >\n>> > > ...\n>> > >\n>> >\n>> > I have no idea what we're trying to do here then. I'll just step\n>>\n> back and help\n>\n>> > when asked. You drive it.\n>>\n>\n>  Sorry, what I meant is that it should be possible to write code which\n>>\n> compiles\n>\n>> unchanged for different GOOS={windows,posix,darwin}, without doing\n>>\n> tricks like\n>\n>> having different Go files in your makefiles for different OSes.\n>>\n> That's\n>\n>> generally only done when it's very necessary.\n>>\n>\n>  What I was thinking we'd do for os/user was something like:\n>>\n>\n>  type User struct {\n>>     // Where applicable: (e.g. POSIX systems)\n>>     Uid int  // userid\n>>     Gid int  // primary group id,\n>>\n>\n>      // Where applicable: (e.g. Windows)\n>>     SID string // the Windows xxxxx\n>>\n>\n>      Username string\n>>     Name     string\n>>     HomeDir  string\n>> }\n>>\n>\n>  Then for Windows:\n>>\n>\n>  func LookupId(uid int) (*User, os.Error) {\n>>    return nil, os.NewError(\"user: Windows does not support lookup by\n>>\n> userid\")\n>\n>> }\n>>\n>\n>  For Posix:\n>>\n>\n>  func LookupSID(sid string) (*User, os.Error) {\n>>    return nil, os.NewError(\"user: username look by SID not supported\")\n>> }\n>>\n>\n>  etc\n>>\n>\n>  Make sense?\n>>\n>\n>  I'm only commenting on the top-level API design.  I'd still like you\n>>\n> to continue\n>\n>> to review the Windows-specific parts if you could (syscall and\n>>\n> implementation\n>\n>> here, as I don't know anything about Windows).\n>>\n>\n> I actually already did that. Only used panic instead of os.NewError.\n> I will replace it.\n>\n> So far I have not uploaded the latest changes, because I am still\n> looking for a way to map a SID to the user fullname.\n>\n> The GetUsernameEx() function cannot be used, since it only works for the\n> process owner. So I have come to the conclusion that it does not make\n> sense to call it.\n>\n\nI wouldn't worry about it.  Just document somewhere that some fields (and\nperhaps which) may be missing if you're not the same owner or\nroot/Administrator.\n\n\n> Another question, is there a way to make the tests filename OS\n> dependent, like with the normal code?\n\n\nJust do:\n\nfunc TestWindowsStuff(t *testing.T) {\n  if runtime.GOOS != \"windows\" {\n      t.Logf(\"skip; not on Windows\")\n      return\n   }\n   ....\n}\n\nNo Makefile stuff.\n",
			"disapproval": false,
			"date": "2011-05-19 20:49:46.416692",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"mattn.jp@gmail.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4521053/diff/4005/src/pkg/os/user/lookup_windows.go\nFile src/pkg/os/user/lookup_windows.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/4005/src/pkg/os/user/lookup_windows.go#newcode35\nsrc/pkg/os/user/lookup_windows.go:35: // Returns the information about the process owner\nOn 2011/05/23 07:21:11, pjmlp wrote:\n> \n> ... But how would this play with goroutines as well?\n> \n\nI don't know. There is runtime.LockOSThread(), but, it is too hacky ...\n\n> Anyway the Current() was introduced, because I needed something similar like\n\nI understand. I just want to add that there are 2 distinct Current(): one for process, another for thread.\n\nhttp://codereview.appspot.com/4521053/diff/4005/src/pkg/os/user/lookup_windows.go#newcode36\nsrc/pkg/os/user/lookup_windows.go:36: func Current() (*User, os.Error) {\nOn 2011/05/23 07:21:11, pjmlp wrote:\n> \n> ..., in Lookup you need to map an username to a SID, how\n> would getUserBySID() help?\n\nYou would still use syscall.LookupAccountName for that, but at least everything else will be done in one getUserBySID() function.\n\nBut I'm not fussed about that. It just looks convoluted to me, perhaps, your function names are not expressive enough.",
			"disapproval": false,
			"date": "2011-05-23 07:56:30.457065",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"mattn.jp@gmail.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/05/19 20:21:41, bradfitz wrote:\n> \n> Sorry, what I meant is that it should be possible to write code which compiles\n> unchanged for different GOOS={windows,posix,darwin}, without doing tricks like\n> having different Go files in your makefiles for different OSes.  That's\n> generally only done when it's very necessary.\n> \n> What I was thinking we'd do for os/user was something like:\n> \n> type User struct {\n>     // Where applicable: (e.g. POSIX systems)\n>     Uid int  // userid\n>     Gid int  // primary group id, \n> \n>     // Where applicable: (e.g. Windows)\n>     SID string // the Windows xxxxx\n> \n>     Username string\n>     Name     string\n>     HomeDir  string\n> }\n> \n> Then for Windows:\n> \n> func LookupId(uid int) (*User, os.Error) {\n>    return nil, os.NewError(\"user: Windows does not support lookup by userid\")\n> }\n> \n> For Posix:\n> \n> func LookupSID(sid string) (*User, os.Error) {\n>    return nil, os.NewError(\"user: username look by SID not supported\")\n> }\n> \n> etc\n> \n> Make sense?\n> \n\nI'm looking at it from our user's point of view: \"What can I do with this package?\"\n\nMy answer would be:\n\n1) I could find, who is running current process:\n\nu := user.GetCurrentUser()\n\n2) I could find \"things\" about that user:\n\nfmt.Printf(\"%v\\n\", u)\nfmt.Printf(\"My username is %s, and my userid is %s.\\n\", u.Username, u.Uid)\nfmt.Printf(\"My name is %s, and I live at %s.\\n\", u.Name, u.HomeDir)\n\nAll that code should be os-independent. I don't think we want our users to write code that is os-dependent, unless they chose to themselves. I don't think we want our users to write:\n\nif runtime.GOOS == \"windows\" {\n  fmt.Printf(\"My user id is %s.\\n\", u.SID)\n} else {\n  fmt.Printf(\"My user id is %d.\\n\", u.Uid)\n}\n\nI'm not sure what other functionality you want from this package, so it is hard for me to comment. Perhaps security models for different OSes are too different, so we won't be able to have single API.\n\nAs to implementation side of it, it has to be os-dependent, whether you want it or not. So we have to keep implementations in different source file and select right one with Makefile when building. That is what we've done so far.\n\n> ...  I'd still like you to continue\n> to review the Windows-specific parts if you could (syscall and implementation\n> here, as I don't know anything about Windows).\n\nHappy to do what I can.\n\nAlex",
			"disapproval": false,
			"date": "2011-05-20 02:44:47.177907",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"mattn.jp@gmail.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Please update the CL description too, like:\n\nos/user: Windows support\n\n(text, if necessary)\n\nFixes issue nnnnn\n\nhttp://codereview.appspot.com/4521053/diff/4005/src/pkg/os/user/lookup_unix.go\nFile src/pkg/os/user/lookup_unix.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/4005/src/pkg/os/user/lookup_unix.go#newcode14\nsrc/pkg/os/user/lookup_unix.go:14: \nextra blank line\n\nhttp://codereview.appspot.com/4521053/diff/4005/src/pkg/os/user/lookup_unix.go#newcode41\nsrc/pkg/os/user/lookup_unix.go:41: // LookupSID looks up a user by Id. If the user cannot be found,\ns/by Id/by its Windows SID/.\n\nhttp://codereview.appspot.com/4521053/diff/4005/src/pkg/os/user/lookup_unix.go#newcode43\nsrc/pkg/os/user/lookup_unix.go:43: // This function panics if called on Unix systems\ndoesn't panic\n\nhttp://codereview.appspot.com/4521053/diff/4005/src/pkg/os/user/lookup_unix.go#newcode45\nsrc/pkg/os/user/lookup_unix.go:45: return nil, os.NewError(\"user: LookupSID  not supported on POSIX\")\nextra space\n\nhttp://codereview.appspot.com/4521053/diff/4005/src/pkg/os/user/lookup_unix.go#newcode105\nsrc/pkg/os/user/lookup_unix.go:105: SID:      \"\",\nunnecessary. this is the default value.\n\nhttp://codereview.appspot.com/4521053/diff/4005/src/pkg/os/user/lookup_windows.go\nFile src/pkg/os/user/lookup_windows.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/4005/src/pkg/os/user/lookup_windows.go#newcode35\nsrc/pkg/os/user/lookup_windows.go:35: // Returns the information about the process owner\nOn 2011/05/23 07:56:31, brainman wrote:\n> On 2011/05/23 07:21:11, pjmlp wrote:\n> > \n> > ... But how would this play with goroutines as well?\n> > \n> \n> I don't know. There is runtime.LockOSThread(), but, it is too hacky ...\n> \n> > Anyway the Current() was introduced, because I needed something similar like\n> \n> I understand. I just want to add that there are 2 distinct Current(): one for\n> process, another for thread.\n\nI wouldn't worry about this yet. There will be many other complications to deal with when/if that time comes, with Go running multiple Windows users in the same process.\n\nhttp://codereview.appspot.com/4521053/diff/4005/src/pkg/os/user/user.go\nFile src/pkg/os/user/user.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/4005/src/pkg/os/user/user.go#newcode15\nsrc/pkg/os/user/user.go:15: // For POSIX systems\nis this gofmt'd?\n\nhttp://codereview.appspot.com/4521053/diff/4005/src/pkg/os/user/user.go#newcode33\nsrc/pkg/os/user/user.go:33: return \"user: unknown user SID \" + string(e)\nis this guaranteed to be a readable string?  or will it contain non-ASCII characters?\n\nhttp://codereview.appspot.com/4521053/diff/4005/src/pkg/os/user/user.go#newcode54\nsrc/pkg/os/user/user.go:54: type UserError string\nis this error type worth it?  doesn't seem like it.",
			"disapproval": false,
			"date": "2011-05-23 18:50:45.005333",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"mattn.jp@gmail.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/05/24 07:36:32, pjmlp wrote:\n> \n> ... Should I redo the way Current() is working?\n> \n\nLet's leave it for now if it works. Let's get something / anything done. We can change it later if we like.\n\nAlex",
			"disapproval": false,
			"date": "2011-05-24 07:39:59.125320",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"mattn.jp@gmail.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hi I'll be uploading the new version shortly.\n\n- Changed again the User struct;\n- Brought back the UserName() function to ease the tests implementation;\n- Currently the full username on Windows is an empty string;\n\nI have found this example on MSDN about retrieving the real username, but it fails on my company network. Not sure about other environments.\n\nhttp://msdn.microsoft.com/en-us/library/aa370284%28v=VS.85%29.aspx\n\nhttp://codereview.appspot.com/4521053/diff/12002/src/pkg/os/user/lookup_windows.go\nFile src/pkg/os/user/lookup_windows.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/12002/src/pkg/os/user/lookup_windows.go#newcode25\nsrc/pkg/os/user/lookup_windows.go:25: name, err = UserNameEx(syscall.NameDisplay)\nOn 2011/05/18 12:29:25, brainman wrote:\n> Replace these 2 lines with\n> name, err := UserNameEx(syscall.NameDisplay)\n\nDone. I only had like that because on my actual Go source code, I got a redeclaration error.\n\nSince I synced with tip it works. Have I missed this language change?\n\nhttp://codereview.appspot.com/4521053/diff/12002/src/pkg/os/user/lookup_windows.go#newcode30\nsrc/pkg/os/user/lookup_windows.go:30: dir, err = UserProfileDirectory()\nOn 2011/05/18 12:29:25, brainman wrote:\n> Replace these 2 lines with\n> dir, err := UserProfileDirectory()\n> \n> ... same everywhere else.\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/12002/src/pkg/os/user/lookup_windows.go#newcode69\nsrc/pkg/os/user/lookup_windows.go:69: \nOn 2011/05/18 12:29:25, brainman wrote:\n> Remove blank line.\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/12002/src/pkg/os/user/lookup_windows.go#newcode161\nsrc/pkg/os/user/lookup_windows.go:161: var domainNameSize uint32 = 10\nOn 2011/05/18 12:29:25, brainman wrote:\n> Please, make these both to be 100, like the function before.\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/12002/src/pkg/os/user/user.go\nFile src/pkg/os/user/user.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/12002/src/pkg/os/user/user.go#newcode15\nsrc/pkg/os/user/user.go:15: Uid      Id // user id\nOn 2011/05/18 14:11:02, bradfitzgoog wrote:\n> We're not going to go down this painful road where basic types are different\n> depending on the OS.\n> \n> Structs and code should compile on different systems, even if it doesn't run.\n> \n> Keep these as ints but feel free to add a new field:\n> \n> SID  <whatevertype>  // The Windows SID, generally blank on POSIX systems.\n> \n> Generally?  Perhaps somebody wants to use it to interop with a Windows system,\n> or Samba, etc.\n> \n> Then just add a new LookupSID function for Windows that returns an error on\n> Posix.\n> \n> And have LookupId return an error on Windows.\n> \n> Portable code can switch on runtime.GOOS and support multiple OSes without\n> Makefile shenanigans.\n\nOk, I'll include an attempt to do this on my next patch submission.",
			"disapproval": false,
			"date": "2011-05-20 13:50:53.334894",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"mattn.jp@gmail.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, alex.brainman@gmail.com, mattn.jp@gmail.com, bradfitz@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-05-20 13:51:18.988590",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"mattn.jp@gmail.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/05/23 11:16:51, brainman wrote:\n> On 2011/05/23 08:54:39, pjmlp wrote:\n> > ...\n> > I wonder how many ms we would gain by that. ...\n> > \n> \n> I'm just guessing here, but I would think that \"user database\" is kept somewhere\n> on the network. So, I suspect, Windows would have to make a network round trip\n> or two (dns, domain controlers, ...) to answer some of your questions.\n> \n> Alex\n\nIt depends on the configuration. If you are using domains, then yes. A LDAP, Kerberos or ActiveDirectory server will be required to talk to.\n\nIf using SAM (local authentication) then not.\n\nAnyway Windows also caches the network answers for some time.",
			"disapproval": false,
			"date": "2011-05-23 12:03:42.138944",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"mattn.jp@gmail.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4521053/diff/4005/src/pkg/os/user/lookup_windows.go\nFile src/pkg/os/user/lookup_windows.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/4005/src/pkg/os/user/lookup_windows.go#newcode35\nsrc/pkg/os/user/lookup_windows.go:35: // Returns the information about the process owner\nOn 2011/05/23 06:23:24, brainman wrote:\n> In Windows process, different threads could be executed as different users. It\n> happens inside servers a lot, when server thread changes its \"current user\" to\n> impersonates someone else on behalf of a client connected to the thread.\n> \n> I'm not sure how/if we can support this behavior.\n\nI am aware of this. But how would this play with goroutines as well?\n\nAnyway the Current() was introduced, because I needed something similar like getuid() for the unit tests. Just to follow the UNIX decisions.\n\nhttp://codereview.appspot.com/4521053/diff/4005/src/pkg/os/user/lookup_windows.go#newcode36\nsrc/pkg/os/user/lookup_windows.go:36: func Current() (*User, os.Error) {\nOn 2011/05/23 06:23:24, brainman wrote:\n> I would use OpenProcessToken/OpenThreadToken + GetTokenInformation to retrieve\n> current user details instead, it gives you more information, and, probably,\n> faster to boot.\n> \n> Then I would write a single function that\n> \n> func getUserBySID(sid syscall.SID) (*User, os.Error)\n> \n> which I would use here and in both Lookup and LookupSID. I think, it will make\n> your code clear, shorter and less repetitive.\n\nI don't get your point, in Lookup you need to map an username to a SID, how would getUserBySID() help?",
			"disapproval": false,
			"date": "2011-05-23 07:21:11.341577",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"mattn.jp@gmail.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Thanks for the feedback, providing changes in a second.\n\nhttp://codereview.appspot.com/4521053/diff/4005/src/pkg/os/user/lookup_unix.go\nFile src/pkg/os/user/lookup_unix.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/4005/src/pkg/os/user/lookup_unix.go#newcode14\nsrc/pkg/os/user/lookup_unix.go:14: \nOn 2011/05/23 18:50:45, bradfitz wrote:\n> extra blank line\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/4005/src/pkg/os/user/lookup_unix.go#newcode41\nsrc/pkg/os/user/lookup_unix.go:41: // LookupSID looks up a user by Id. If the user cannot be found,\nOn 2011/05/23 18:50:45, bradfitz wrote:\n> s/by Id/by its Windows SID/.\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/4005/src/pkg/os/user/lookup_unix.go#newcode43\nsrc/pkg/os/user/lookup_unix.go:43: // This function panics if called on Unix systems\nOn 2011/05/23 18:50:45, bradfitz wrote:\n> doesn't panic\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/4005/src/pkg/os/user/lookup_unix.go#newcode45\nsrc/pkg/os/user/lookup_unix.go:45: return nil, os.NewError(\"user: LookupSID  not supported on POSIX\")\nOn 2011/05/23 18:50:45, bradfitz wrote:\n> extra space\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/4005/src/pkg/os/user/lookup_unix.go#newcode105\nsrc/pkg/os/user/lookup_unix.go:105: SID:      \"\",\nOn 2011/05/23 18:50:45, bradfitz wrote:\n> unnecessary. this is the default value.\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/4005/src/pkg/os/user/user.go\nFile src/pkg/os/user/user.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/4005/src/pkg/os/user/user.go#newcode15\nsrc/pkg/os/user/user.go:15: // For POSIX systems\nOn 2011/05/23 18:50:45, bradfitz wrote:\n> is this gofmt'd?\n\nsorry no\n\nhttp://codereview.appspot.com/4521053/diff/4005/src/pkg/os/user/user.go#newcode33\nsrc/pkg/os/user/user.go:33: return \"user: unknown user SID \" + string(e)\nOn 2011/05/23 18:50:45, bradfitz wrote:\n> is this guaranteed to be a readable string?  or will it contain non-ASCII\n> characters?\n\nNot sure. I wanted to parallel UnknownUserIdError\n\nhttp://codereview.appspot.com/4521053/diff/4005/src/pkg/os/user/user.go#newcode54\nsrc/pkg/os/user/user.go:54: type UserError string\nOn 2011/05/23 18:50:45, bradfitz wrote:\n> is this error type worth it?  doesn't seem like it.\n\nHow to map all possible syscall errors? Unknown... does not seem a fit",
			"disapproval": false,
			"date": "2011-05-23 20:45:19.857657",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"mattn.jp@gmail.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/05/24 07:39:59, brainman wrote:\n> On 2011/05/24 07:36:32, pjmlp wrote:\n> > \n> > ... Should I redo the way Current() is working?\n> > \n> \n> Let's leave it for now if it works. Let's get something / anything done. We can\n> change it later if we like.\n> \n> Alex\n\nAny update on this?",
			"disapproval": false,
			"date": "2011-06-07 14:18:13.289468",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"mattn.jp@gmail.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Looks like the Windows SID type is still a []byte too in the other CL.  I thought we were changing that to a string.\n\nhttp://codereview.appspot.com/4521053/diff/12008/src/pkg/os/user/lookup_unix.go\nFile src/pkg/os/user/lookup_unix.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/12008/src/pkg/os/user/lookup_unix.go#newcode42\nsrc/pkg/os/user/lookup_unix.go:42: // This returns an error if called on Unix systems\nmissing period at the end.\n\nhttp://codereview.appspot.com/4521053/diff/12008/src/pkg/os/user/lookup_unix.go#newcode47\nsrc/pkg/os/user/lookup_unix.go:47: // Current returns the user information about the process owner\nmissing period at the end.\n\nhttp://codereview.appspot.com/4521053/diff/12008/src/pkg/os/user/lookup_windows.go\nFile src/pkg/os/user/lookup_windows.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/12008/src/pkg/os/user/lookup_windows.go#newcode35\nsrc/pkg/os/user/lookup_windows.go:35: // Returns the information about the process owner\nperiod\n\nhttp://codereview.appspot.com/4521053/diff/12008/src/pkg/os/user/user.go\nFile src/pkg/os/user/user.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/12008/src/pkg/os/user/user.go#newcode28\nsrc/pkg/os/user/user.go:28: // UnknownUserIdError is returned by LookupSID when\ndoc doesn't match type name.  IdError vs SIDError.\n\nalso, is this even used?\n\nhttp://codereview.appspot.com/4521053/diff/12008/src/pkg/os/user/user.go#newcode54\nsrc/pkg/os/user/user.go:54: type UserError string\nI'd remove this type and just use an os.NewError or fmt.Errorf to make the error you need whenever.",
			"disapproval": false,
			"date": "2011-06-07 15:09:20.383611",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"mattn.jp@gmail.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Will upload new CL.\n\nhttp://codereview.appspot.com/4521053/diff/12008/src/pkg/os/user/lookup_unix.go\nFile src/pkg/os/user/lookup_unix.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/12008/src/pkg/os/user/lookup_unix.go#newcode42\nsrc/pkg/os/user/lookup_unix.go:42: // This returns an error if called on Unix systems\nOn 2011/06/07 15:09:20, bradfitz wrote:\n> missing period at the end.\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/12008/src/pkg/os/user/lookup_unix.go#newcode47\nsrc/pkg/os/user/lookup_unix.go:47: // Current returns the user information about the process owner\nOn 2011/06/07 15:09:20, bradfitz wrote:\n> missing period at the end.\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/12008/src/pkg/os/user/lookup_windows.go\nFile src/pkg/os/user/lookup_windows.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/12008/src/pkg/os/user/lookup_windows.go#newcode35\nsrc/pkg/os/user/lookup_windows.go:35: // Returns the information about the process owner\nOn 2011/06/07 15:09:20, bradfitz wrote:\n> period\n\nDone.\n\nhttp://codereview.appspot.com/4521053/diff/12008/src/pkg/os/user/user.go\nFile src/pkg/os/user/user.go (right):\n\nhttp://codereview.appspot.com/4521053/diff/12008/src/pkg/os/user/user.go#newcode28\nsrc/pkg/os/user/user.go:28: // UnknownUserIdError is returned by LookupSID when\nOn 2011/06/07 15:09:20, bradfitz wrote:\n> doc doesn't match type name.  IdError vs SIDError.\n> \n> also, is this even used?\n\nYes, on Windows. It was a copy paste error, fixed now.\n\nhttp://codereview.appspot.com/4521053/diff/12008/src/pkg/os/user/user.go#newcode54\nsrc/pkg/os/user/user.go:54: type UserError string\nOn 2011/06/07 15:09:20, bradfitz wrote:\n> I'd remove this type and just use an os.NewError or fmt.Errorf to make the error\n> you need whenever.\n\nReplaced by os.NewError. Thanks for the hint, I still don't know much of the standard library.",
			"disapproval": false,
			"date": "2011-06-10 19:52:24.571717",
			"approval": false
		},
		{
			"sender": "paulo.jpinto@gmail.com",
			"recipients": [
				"paulo.jpinto@gmail.com",
				"bradfitz@golang.org",
				"alex.brainman@gmail.com",
				"mattn.jp@gmail.com",
				"bradfitz@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, alex.brainman@gmail.com, mattn.jp@gmail.com, bradfitz@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-06-10 19:57:27.052622",
			"approval": false
		}
	],
	"owner_email": "paulo.jpinto@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "pjmlp",
	"subject": "code review 4521053: os/user: Windows support",
	"created": "2011-05-10 07:31:32.703297",
	"patchsets": [
		1,
		2001,
		8003,
		14001,
		12002,
		17004,
		4005,
		12008,
		28003
	],
	"modified": "2011-06-10 19:57:27.052622",
	"closed": false,
	"issue": 4521053
}