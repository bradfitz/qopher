{
	"description": "crypto/tls: fix data race on conn.err\n\nFixes issue 3862.\n\nThere were many areas where conn.err was being accessed\noutside the mutex. This proposal moves the err value to\nan embedded struct to make it more obvious when the error\nvalue is being accessed.\n\nAs there are no Benchmark tests in this package I cannot\nfeel confident of the impact of this additional locking,\nalthough most will be uncontended.",
	"cc": [
		"dvyukov@google.com",
		"agl@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"dvyukov@google.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for your comments. PTAL.\n\nhttps://codereview.appspot.com/6497070/diff/6001/src/pkg/crypto/tls/conn.go\nFile src/pkg/crypto/tls/conn.go (right):\n\nhttps://codereview.appspot.com/6497070/diff/6001/src/pkg/crypto/tls/conn.go#newcode47\nsrc/pkg/crypto/tls/conn.go:47: err\nOn 2012/09/05 14:31:30, agl1 wrote:\n> err is always a variable name for an error and using it as a struct name tripped\n> me up.\n> \n> connErr?\n\nSTGM. PTAL.\n\nhttps://codereview.appspot.com/6497070/diff/6001/src/pkg/crypto/tls/conn.go#newcode747\nsrc/pkg/crypto/tls/conn.go:747: if err := c.setError(c.Handshake()); err != nil {\nOn 2012/09/05 12:41:39, dvyukov wrote:\n> Somewhat obscure on my taste. I would write something along the lines of:\n> if err := c.Handshake; err != nil {\n>   return 0, c.setError(err)\n> }\n> Your current use also requires err != nil check in setError(), otherwise you\n> will lock/unlock/defer on every Write.\n\nDone.",
			"disapproval": false,
			"date": "2012-09-06 01:05:00.967880",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"dave@cheney.net",
				"dvyukov@google.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM with dvyukov's points addressed.\n\nhttps://codereview.appspot.com/6497070/diff/6001/src/pkg/crypto/tls/conn.go\nFile src/pkg/crypto/tls/conn.go (right):\n\nhttps://codereview.appspot.com/6497070/diff/6001/src/pkg/crypto/tls/conn.go#newcode47\nsrc/pkg/crypto/tls/conn.go:47: err\nerr is always a variable name for an error and using it as a struct name tripped me up.\n\nconnErr?",
			"disapproval": false,
			"date": "2012-09-05 14:31:30.291110",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dave@cheney.net",
				"dvyukov@google.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM on my side\n\nhttps://codereview.appspot.com/6497070/diff/6001/src/pkg/crypto/tls/conn.go\nFile src/pkg/crypto/tls/conn.go (right):\n\nhttps://codereview.appspot.com/6497070/diff/6001/src/pkg/crypto/tls/conn.go#newcode747\nsrc/pkg/crypto/tls/conn.go:747: if err := c.setError(c.Handshake()); err != nil {\nSomewhat obscure on my taste. I would write something along the lines of:\nif err := c.Handshake; err != nil {\n  return 0, c.setError(err)\n}\nYour current use also requires err != nil check in setError(), otherwise you will lock/unlock/defer on every Write.",
			"disapproval": false,
			"date": "2012-09-05 12:41:39.732870",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dave@cheney.net",
				"dvyukov@google.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-09-06 06:36:35.444850",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"dvyukov@google.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dvyukov@google.com, agl@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-06 01:05:11.679970",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"dvyukov@google.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dvyukov@google.com, agl@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-09-05 11:15:37.211100",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"dvyukov@google.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=91c1c2d6e2ff ***\n\ncrypto/tls: fix data race on conn.err\n\nFixes issue 3862.\n\nThere were many areas where conn.err was being accessed\noutside the mutex. This proposal moves the err value to\nan embedded struct to make it more obvious when the error\nvalue is being accessed.\n\nAs there are no Benchmark tests in this package I cannot\nfeel confident of the impact of this additional locking,\nalthough most will be uncontended.\n\nR=dvyukov, agl\nCC=golang-dev\nhttp://codereview.appspot.com/6497070",
			"disapproval": false,
			"date": "2012-09-06 07:50:49.320230",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 6497070: crypto/tls: fix data race on conn.err",
	"created": "2012-09-01 02:32:16.066840",
	"patchsets": [
		1,
		2001,
		5001,
		6001,
		7003,
		7005,
		10001
	],
	"modified": "2012-09-06 10:34:58.135140",
	"closed": true,
	"issue": 6497070
}