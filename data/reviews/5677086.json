{
	"description": "net: make Dial and Listen behavior consistent across over platforms\n\nThis CL changes the behavior of Dial and Listen API family.\n\nPrevious Dial and Listen allow a combo of \"tcp6\" and IPv4 or IPv6\nIPv4-mapped address as its argument, but it also makes slightly\ndifferent behaviors between Linux and other platforms. This CL fixes\nsuch differences across over platforms by tweaking IP-level socket\noption IPV6_V6ONLY. Consequently new Dial and Listen API family will\nreject arguments consists of \"tcp6\" and IPv4 or IPv6 IPv4-mapped\naddress.\n\nThis CL also adds a bit clarified unicast listener tests.\n\nFixes issue 2581.",
	"cc": [
		"rsc@golang.org",
		"minux.ma@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-19 03:09:25.304369",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-18 13:27:44.667528",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'll look more carefully at the tests on Monday.  There's a lot there.\n\nhttp://codereview.appspot.com/5677086/diff/8/src/pkg/net/multicast_test.go\nFile src/pkg/net/multicast_test.go (right):\n\nhttp://codereview.appspot.com/5677086/diff/8/src/pkg/net/multicast_test.go#newcode183\nsrc/pkg/net/multicast_test.go:183: goto done\nreturn true?\n\nhttp://codereview.appspot.com/5677086/diff/8/src/pkg/net/multicast_test.go#newcode188\nsrc/pkg/net/multicast_test.go:188: return found\nreturn false?\n\nhttp://codereview.appspot.com/5677086/diff/8/src/pkg/net/unicast_test.go\nFile src/pkg/net/unicast_test.go (right):\n\nhttp://codereview.appspot.com/5677086/diff/8/src/pkg/net/unicast_test.go#newcode119\nsrc/pkg/net/unicast_test.go:119: // \"tcp\"   \"\"           \"tcp\"   \"\"               ng       ng      ng      ng\ns/ng/- /g",
			"disapproval": false,
			"date": "2012-02-19 05:08:14.828125",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sure, me too, thx.\nHave a nice weekend.\n\n-- Mikio\n\nOn Feb 19, 2012, at 2:08 PM, rsc@google.com wrote:\n\n> I'll look more carefully at the tests on Monday.  There's a lot there.\n> \n> \n> \n> http://codereview.appspot.com/5677086/diff/8/src/pkg/net/multicast_test.go\n> File src/pkg/net/multicast_test.go (right):\n> \n> http://codereview.appspot.com/5677086/diff/8/src/pkg/net/multicast_test.go#newcode183\n> src/pkg/net/multicast_test.go:183: goto done\n> return true?\n> \n> http://codereview.appspot.com/5677086/diff/8/src/pkg/net/multicast_test.go#newcode188\n> src/pkg/net/multicast_test.go:188: return found\n> return false?\n> \n> http://codereview.appspot.com/5677086/diff/8/src/pkg/net/unicast_test.go\n> File src/pkg/net/unicast_test.go (right):\n> \n> http://codereview.appspot.com/5677086/diff/8/src/pkg/net/unicast_test.go#newcode119\n> src/pkg/net/unicast_test.go:119: // \"tcp\"   \"\"           \"tcp\"   \"\"\n>         ng       ng      ng      ng\n> s/ng/- /g\n> \n> http://codereview.appspot.com/5677086/\n",
			"disapproval": false,
			"date": "2012-02-19 05:12:44.876433",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please move unicast_test.go into its own CL.\nThe rest are very close.\nThanks.\n\nhttp://codereview.appspot.com/5677086/diff/10008/src/pkg/net/lookup_test.go\nFile src/pkg/net/lookup_test.go (right):\n\nhttp://codereview.appspot.com/5677086/diff/10008/src/pkg/net/lookup_test.go#newcode15\nsrc/pkg/net/lookup_test.go:15: var testOSX = flag.Bool(\"osx\", false, \"whether to test with OS X firewall\")\nTestOSX is a weird flag name for this\n\nvar testExternal = flag.Bool(\"external\", false, \"allow use of external networks during test\")\n\nhttp://codereview.appspot.com/5677086/diff/10008/src/pkg/net/unicast_test.go\nFile src/pkg/net/unicast_test.go (right):\n\nhttp://codereview.appspot.com/5677086/diff/10008/src/pkg/net/unicast_test.go#newcode78\nsrc/pkg/net/unicast_test.go:78: fd, closer, laddr := listenTransport(t, tt.net, tt.laddr, listenAtFirst)\nCan you write these tests without the listenTransport function?\nIt's using callbacks instead of straight-line code, so it is very hard\nto follow.  I can't see that it is adding very much.\n\nhttp://codereview.appspot.com/5677086/diff/10008/src/pkg/net/unicast_test.go#newcode128\nsrc/pkg/net/unicast_test.go:128: // \"tcp\"   \"0.0.0.0\"    \"tcp\"   \"[::]\"           ok       ok      -       ok\nDidn't I write special-case code so that a listen on 0.0.0.0 becomes a listen on everything?  This case should not be ok on any system.\n\nhttp://codereview.appspot.com/5677086/diff/10008/src/pkg/net/unicast_test.go#newcode129\nsrc/pkg/net/unicast_test.go:129: // \"tcp\"   \"[::]\"       \"tcp\"   \"0.0.0.0\"        ok       ok      -       ok\nSame.\n\nhttp://codereview.appspot.com/5677086/diff/10008/src/pkg/net/unicast_test.go#newcode130\nsrc/pkg/net/unicast_test.go:130: // \"tcp\"   \"0.0.0.0\"    \"tcp\"   \"\"               ok       -       -       -\nSame.\n\nhttp://codereview.appspot.com/5677086/diff/10008/src/pkg/net/unicast_test.go#newcode131\nsrc/pkg/net/unicast_test.go:131: // \"tcp\"   \"\"           \"tcp\"   \"0.0.0.0\"        ok       -       -       -\nSame.\n\nhttp://codereview.appspot.com/5677086/diff/10008/src/pkg/net/unicast_test.go#newcode132\nsrc/pkg/net/unicast_test.go:132: // \"tcp\"   \"[::]\"       \"tcp\"   \"\"               -        ok      -       ok\nSame.\n\nhttp://codereview.appspot.com/5677086/diff/10008/src/pkg/net/unicast_test.go#newcode133\nsrc/pkg/net/unicast_test.go:133: // \"tcp\"   \"\"           \"tcp\"   \"[::]\"           -        ok      -       ok\nSame.\n\nhttp://codereview.appspot.com/5677086/diff/10008/src/pkg/net/unicast_test.go#newcode173\nsrc/pkg/net/unicast_test.go:173: // listener with various address families, differnet but same meaning\ndifferent",
			"disapproval": false,
			"date": "2012-02-22 19:56:33.135124",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5677086/diff/8/src/pkg/net/multicast_test.go\nFile src/pkg/net/multicast_test.go (right):\n\nhttp://codereview.appspot.com/5677086/diff/8/src/pkg/net/multicast_test.go#newcode183\nsrc/pkg/net/multicast_test.go:183: goto done\nOn 2012/02/19 05:08:14, rsc1 wrote:\n> return true?\n\nDone.\n\nhttp://codereview.appspot.com/5677086/diff/8/src/pkg/net/multicast_test.go#newcode188\nsrc/pkg/net/multicast_test.go:188: return found\nOn 2012/02/19 05:08:14, rsc1 wrote:\n> return false?\n\nDone.\n\nhttp://codereview.appspot.com/5677086/diff/8/src/pkg/net/unicast_test.go\nFile src/pkg/net/unicast_test.go (right):\n\nhttp://codereview.appspot.com/5677086/diff/8/src/pkg/net/unicast_test.go#newcode119\nsrc/pkg/net/unicast_test.go:119: // \"tcp\"   \"\"           \"tcp\"   \"\"               ng       ng      ng      ng\nOn 2012/02/19 05:08:14, rsc1 wrote:\n> s/ng/- /g\n\nDone.",
			"disapproval": false,
			"date": "2012-02-21 12:40:43.643290",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-21 12:41:03.721466",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Feb 23, 2012 at 12:50 PM, Russ Cox <rsc@golang.org> wrote:\n\n> See ipsock_posix.go. \u00a0It treats a 0.0.0.0 that makes\n> it to an IPv6 socket as [::]. \u00a0I think that what changed,\n> maybe, is that if we see a \"tcp\" for \"0.0.0.0\" we do not\n> use IPv6 on dual-stack systems, and I think we should.\n> That is, I think we should always use the dual-stack\n> for \"tcp\" regardless of address, if it is available.\n\nThanks. Let me clarify how we should treat a widlcard\naddress listen.\n\n1) A wild-wild listen, \"tcp\" + \"\"\nif the platform supports both IPv6 and IPv6 IPv4-mapping\ncaps, we can assume that a user want to listen on both\nIPv4/v6 wildcard address over AF_INET6 socket.\notherwise we prefer an IPv4 wildcard address listen over\nAF_INET socket.\n\n2) A wild-ipv4wild listen, \"tcp\" + \"0.0.0.0\"\nsame as (1).\n\n3) A wild-ipv6wild listen, \"tcp\", + \"[::]\"\nalmost same as (1) but we prefer an IPv6 wildcard address\nlisten over AF_INET6 socket when the platform supports\nneither IPv6 nor IPv6 IPv4-mapping cap.\n\n4) A ipv4-ipv4wild listen, \"tcp4\" + \"\" or \"0.0.0.0\"\nwe prefer an IPv4 wildcard address listen over AF_INET\nsocket.\n\n5) A ipv6-ipv6wild listen, \"tcp6\", \"\" or \"[::]\"\nwe prefer an IPv6 wildcard address listen over AF_INET6\nsocket.\n\nAre you okay with those?\n",
			"disapproval": false,
			"date": "2012-02-23 04:56:54.010522",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 22, 2012 at 23:56, Mikio Hara <mikioh.mikioh@gmail.com> wrote:\n> 1) A wild-wild listen, \"tcp\" + \"\"\n> if the platform supports both IPv6 and IPv6 IPv4-mapping\n> caps, we can assume that a user want to listen on both\n> IPv4/v6 wildcard address over AF_INET6 socket.\n> otherwise we prefer an IPv4 wildcard address listen over\n> AF_INET socket.\n>\n> 2) A wild-ipv4wild listen, \"tcp\" + \"0.0.0.0\"\n> same as (1).\n>\n> 3) A wild-ipv6wild listen, \"tcp\", + \"[::]\"\n> almost same as (1) but we prefer an IPv6 wildcard address\n> listen over AF_INET6 socket when the platform supports\n> neither IPv6 nor IPv6 IPv4-mapping cap.\n>\n> 4) A ipv4-ipv4wild listen, \"tcp4\" + \"\" or \"0.0.0.0\"\n> we prefer an IPv4 wildcard address listen over AF_INET\n> socket.\n>\n> 5) A ipv6-ipv6wild listen, \"tcp6\", \"\" or \"[::]\"\n> we prefer an IPv6 wildcard address listen over AF_INET6\n> socket.\n>\n> Are you okay with those?\n\nYes, that sounds great.  4 and 5 are always, not prefer\n(there's no reason we wouldn't be able to do what we\nprefer in those cases).\n\nThanks.\nRuss\n",
			"disapproval": false,
			"date": "2012-02-23 05:03:41.207477",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 22, 2012 at 22:44, Mikio Hara <mikioh.mikioh@gmail.com> wrote:\n> Unfortunately no, perhaps.\n\nSee ipsock_posix.go.  It treats a 0.0.0.0 that makes\nit to an IPv6 socket as [::].  I think that what changed,\nmaybe, is that if we see a \"tcp\" for \"0.0.0.0\" we do not\nuse IPv6 on dual-stack systems, and I think we should.\nThat is, I think we should always use the dual-stack\nfor \"tcp\" regardless of address, if it is available.\n",
			"disapproval": false,
			"date": "2012-02-23 03:50:10.423576",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-26 05:57:12.689126",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Feb 23, 2012 at 4:56 AM,  <rsc@golang.org> wrote:\n\n> Please move unicast_test.go into its own CL.\n\nDone.\n\n> http://codereview.appspot.com/5677086/diff/10008/src/pkg/net/unicast_test.go#newcode128\n> src/pkg/net/unicast_test.go:128: // \"tcp\" \u00a0 \"0.0.0.0\" \u00a0 \u00a0\"tcp\" \u00a0 \"[::]\"\n> \u00a0 \u00a0 \u00a0 \u00a0 ok \u00a0 \u00a0 \u00a0 ok \u00a0 \u00a0 \u00a0- \u00a0 \u00a0 \u00a0 ok\n> Didn't I write special-case code so that a listen on 0.0.0.0 becomes a\n> listen on everything?\n\nUnfortunately no, perhaps.\n\n> This case should not be ok on any system.\n\nYup, I am at a loss whether we should do.\n\nBut if you are okay I'll try to make a consistent\nbehavior for unicast listening stuff across over\nplatforms.\n",
			"disapproval": false,
			"date": "2012-02-23 03:44:18.712489",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Would someone mind doing \"go test -v net -external\" w/ this CL on windows?\n\nOn Sun, Feb 26, 2012 at 2:57 PM,  <mikioh.mikioh@gmail.com> wrote:\n> Hello golang-dev@googlegroups.com, rsc@golang.org (cc:\n> golang-dev@googlegroups.com),\n>\n> Please take another look.\n>\n>\n> http://codereview.appspot.com/5677086/\n",
			"disapproval": false,
			"date": "2012-02-27 02:11:27.272397",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping",
			"disapproval": false,
			"date": "2012-02-28 08:57:37.574454",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/02/27 02:11:27, mikioh wrote:\n> Would someone mind doing \"go test -v net -external\" w/ this CL on windows?\nWith this CL, on Windows 2008 R2 amd64, GOARCH=386,\ngo test -v net -external\npassed.\n\nDo you need detailed test log?",
			"disapproval": false,
			"date": "2012-02-28 11:24:45.493898",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for working on this.  I know it's no fun.\n\nhttp://codereview.appspot.com/5677086/diff/16065/src/pkg/net/ipsock_posix.go\nFile src/pkg/net/ipsock_posix.go (right):\n\nhttp://codereview.appspot.com/5677086/diff/16065/src/pkg/net/ipsock_posix.go#newcode166\nsrc/pkg/net/ipsock_posix.go:166: ip = IPv6unspecified\nIt would be nice to keep this as IPv6zero.\nI am sorry we added IPv6unspecified as a separate name.\n\nhttp://codereview.appspot.com/5677086/diff/16065/src/pkg/net/unicast_test.go\nFile src/pkg/net/unicast_test.go (right):\n\nhttp://codereview.appspot.com/5677086/diff/16065/src/pkg/net/unicast_test.go#newcode53\nsrc/pkg/net/unicast_test.go:53: if tt.wildcard && (testing.Short() || runtime.GOOS == \"darwin\" && !*testExternal) {\nTurning all the wildcard tests off for testing.Short seems like it will lead to bugs being missed.  Drop testing.Short here?  Also, what's wrong with Darwin?\n\nhttp://codereview.appspot.com/5677086/diff/16065/src/pkg/net/unicast_test.go#newcode59\nsrc/pkg/net/unicast_test.go:59: if tt.ipv4map && (!supportsIPv6 || !supportsIPv4map) {\nDoesn't !supportsIPv6 imply !supportsIPv4map?\nCan just use tt.ipv4map && !supportsIPv4map\n\nhttp://codereview.appspot.com/5677086/diff/16065/src/pkg/net/unicast_test.go#newcode211\nsrc/pkg/net/unicast_test.go:211: // \"tcp4\" \"\"                 \"tcp6\" \"\"                    ok       ok      -       ok\nWhy is Linux different here?  Can we do something about that?\n\nhttp://codereview.appspot.com/5677086/diff/16065/src/pkg/net/unicast_test.go#newcode420\nsrc/pkg/net/unicast_test.go:420: t.Fatalf(\"Second Listen(%q, %q) should be failed\", net, laddr)\ns/be failed/fail/\n\nhttp://codereview.appspot.com/5677086/diff/16065/src/pkg/net/unicast_test.go#newcode425\nsrc/pkg/net/unicast_test.go:425: t.Fatalf(\"Second ListenPacket(%q, %q) should be failed\", net, laddr)\ns/be failed/fail/",
			"disapproval": false,
			"date": "2012-02-28 17:47:46.856141",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Feb 28, 2012 at 8:24 PM,  <minux.ma@gmail.com> wrote:\n\n>> Would someone mind doing \"go test -v net -external\" w/ this CL on\n>\n> windows?\n> With this CL, on Windows 2008 R2 amd64, GOARCH=386,\n>\n> go test -v net -external\n> passed.\n\nThanks a lot.\n\n> Do you need detailed test log?\n\nThanks again but the shiny mark PASSED is enough for now.\n",
			"disapproval": false,
			"date": "2012-02-28 12:16:45.200638",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 29, 2012 at 2:47 AM,  <rsc@golang.org> wrote:\n\n> http://codereview.appspot.com/5677086/diff/16065/src/pkg/net/unicast_test.go#newcode53\n> src/pkg/net/unicast_test.go:53: if tt.wildcard && (testing.Short() ||\n> runtime.GOOS == \"darwin\" && !*testExternal) {\n> Turning all the wildcard tests off for testing.Short seems like it will\n> lead to bugs being missed. \u00a0Drop testing.Short here? \u00a0Also, what's wrong\n> with Darwin?\n\nI think you are the guy who injected avoidMacFirewall to prevent\nthe busy popups of Mac firewall during tests.\n\n> http://codereview.appspot.com/5677086/diff/16065/src/pkg/net/unicast_test.go#newcode211\n> src/pkg/net/unicast_test.go:211: // \"tcp4\" \"\" \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"tcp6\" \"\"\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0ok \u00a0 \u00a0 \u00a0 ok \u00a0 \u00a0 \u00a0- \u00a0 \u00a0 \u00a0 ok\n> Why is Linux different here? \u00a0Can we do something about that?\n\nI'll look into it more carefully but I guess there's nothing we can do\nexcept enabling \"sysctl -w ...v6bind=1\" or IPV6_V6ONLY=1, I mean\nAPI behavior changes.\n",
			"disapproval": false,
			"date": "2012-02-28 23:00:37.321630",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Oops, correction again.\n\nThere's a side effect that a combo of \"tcp6\" + \"wildcard address\"\nfor \"IPv4 client\" is not valid any more.\ne.g., Listen(\"tcp6\", \":<port>\"), Listen(\"tcp6\", \"::ffff.0.0.0.0:<port>\"),\nListen(\"tcp6\", \"[::]:<port>\") or Listen(\"tcp6\", \"0.0.0.0:<port>\").\n",
			"disapproval": false,
			"date": "2012-02-29 07:55:07.081668",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 29, 2012 at 2:47 AM,  <rsc@golang.org> wrote:\n\n> src/pkg/net/unicast_test.go:211: // \"tcp4\" \"\" \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"tcp6\" \"\"\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0ok \u00a0 \u00a0 \u00a0 ok \u00a0 \u00a0 \u00a0- \u00a0 \u00a0 \u00a0 ok\n> Why is Linux different here?\n\nBecause of Linux, I guess that USAGI based Linux IPv6 stack\nallows both IPv4 and IPv6 sockets to bind a single port at the\nsame time. That behavior is a bit different from KAME based\nBSD variants, interesting.\n\n> Can we do something about that?\n\nHere is an alternative. It just tweaks IPV6_V6ONLY option when\nwe do a listen with wildcard address on AF_INET6 socket.\n<http://codereview.appspot.com/5709052/>\n\nOf course there's a side effect:\na combo of \"tcp\" + \"IPv6 IPv4-mapped address\" is not valid any more.\ne.g., Listen(\"tcp6\", \"[::ffff:127.0.0.1], Listen(\"tcp6\", \"\") or\nListen(\"tcp6\", \"0.0.0.0\")\n\nSo which do you like better, 5677086 or 5709052?\n",
			"disapproval": false,
			"date": "2012-02-29 05:51:53.663603",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Correction.\n\nOn Wed, Feb 29, 2012 at 2:51 PM, Mikio Hara <mikioh.mikioh@gmail.com> wrote:\n\n> Of course there's a side effect:\n> a combo of \"tcp\" + \"IPv6 IPv4-mapped address\" is not valid any more.\n> e.g., Listen(\"tcp6\", \"[::ffff:127.0.0.1], Listen(\"tcp6\", \"\") or\n> Listen(\"tcp6\", \"0.0.0.0\")\n\na combo of \"tcp\" + \"IPv6 IPv4-mapped address\" for \"IPv4 client\" is not\nvalid any more.\n",
			"disapproval": false,
			"date": "2012-02-29 07:21:49.615475",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\nAlso will send new server, file tests after this CL landed.\n\nhttp://codereview.appspot.com/5677086/diff/16065/src/pkg/net/ipsock_posix.go\nFile src/pkg/net/ipsock_posix.go (right):\n\nhttp://codereview.appspot.com/5677086/diff/16065/src/pkg/net/ipsock_posix.go#newcode166\nsrc/pkg/net/ipsock_posix.go:166: ip = IPv6unspecified\nOn 2012/02/28 17:47:47, rsc wrote:\n> It would be nice to keep this as IPv6zero.\n> I am sorry we added IPv6unspecified as a separate name.\n\nDone.\n\nhttp://codereview.appspot.com/5677086/diff/16065/src/pkg/net/unicast_test.go\nFile src/pkg/net/unicast_test.go (right):\n\nhttp://codereview.appspot.com/5677086/diff/16065/src/pkg/net/unicast_test.go#newcode53\nsrc/pkg/net/unicast_test.go:53: if tt.wildcard && (testing.Short() || runtime.GOOS == \"darwin\" && !*testExternal) {\ndrop testing.Short makes sense.\nwill add avoidOSXFirewallPopup function again\nto prevent OS X firewall dialog popup.\n\nhttp://codereview.appspot.com/5677086/diff/16065/src/pkg/net/unicast_test.go#newcode53\nsrc/pkg/net/unicast_test.go:53: if tt.wildcard && (testing.Short() || runtime.GOOS == \"darwin\" && !*testExternal) {\nOn 2012/02/28 17:47:47, rsc wrote:\n> Turning all the wildcard tests off for testing.Short seems like it will lead to\n> bugs being missed.  Drop testing.Short here?  Also, what's wrong with Darwin?\n> \n\nDone.\n\nhttp://codereview.appspot.com/5677086/diff/16065/src/pkg/net/unicast_test.go#newcode59\nsrc/pkg/net/unicast_test.go:59: if tt.ipv4map && (!supportsIPv6 || !supportsIPv4map) {\nYup, thx.\n\nhttp://codereview.appspot.com/5677086/diff/16065/src/pkg/net/unicast_test.go#newcode59\nsrc/pkg/net/unicast_test.go:59: if tt.ipv4map && (!supportsIPv6 || !supportsIPv4map) {\nOn 2012/02/28 17:47:47, rsc wrote:\n> Doesn't !supportsIPv6 imply !supportsIPv4map?\n> Can just use tt.ipv4map && !supportsIPv4map\n\nDone.\n\nhttp://codereview.appspot.com/5677086/diff/16065/src/pkg/net/unicast_test.go#newcode211\nsrc/pkg/net/unicast_test.go:211: // \"tcp4\" \"\"                 \"tcp6\" \"\"                    ok       ok      -       ok\nWill try.\n\nhttp://codereview.appspot.com/5677086/diff/16065/src/pkg/net/unicast_test.go#newcode420\nsrc/pkg/net/unicast_test.go:420: t.Fatalf(\"Second Listen(%q, %q) should be failed\", net, laddr)\nOn 2012/02/28 17:47:47, rsc wrote:\n> s/be failed/fail/\n\nDone.\n\nhttp://codereview.appspot.com/5677086/diff/16065/src/pkg/net/unicast_test.go#newcode425\nsrc/pkg/net/unicast_test.go:425: t.Fatalf(\"Second ListenPacket(%q, %q) should be failed\", net, laddr)\nOn 2012/02/28 17:47:47, rsc wrote:\n> s/be failed/fail/\n\nDone.",
			"disapproval": false,
			"date": "2012-03-01 03:40:06.349202",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-03-02 08:24:29.810014",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5677086/diff/40001/src/pkg/net/ipsock_posix.go\nFile src/pkg/net/ipsock_posix.go (right):\n\nhttp://codereview.appspot.com/5677086/diff/40001/src/pkg/net/ipsock_posix.go#newcode80\nsrc/pkg/net/ipsock_posix.go:80: //\tWe prefer an IPv4 wildcard address listen over an AF_INET\nWhy does this say over?  Isn't an AF_INET socket exactly what we prefer?\nI would write this as\n\nWe use an IPv4 (AF_INET) wildcard address listen.\n\nand then the next one as\n\nWe use an IPv6 (AF_INET6, IPV6_V6ONLY=1) wildcard address listen.",
			"disapproval": false,
			"date": "2012-03-05 14:58:17.580567",
			"approval": true
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=e28f1aac1223 ***\n\nnet: make Dial and Listen behavior consistent across over platforms\n\nThis CL changes the behavior of Dial and Listen API family.\n\nPrevious Dial and Listen allow a combo of \"tcp6\" and IPv4 or IPv6\nIPv4-mapped address as its argument, but it also makes slightly\ndifferent behaviors between Linux and other platforms. This CL fixes\nsuch differences across over platforms by tweaking IP-level socket\noption IPV6_V6ONLY. Consequently new Dial and Listen API family will\nreject arguments consists of \"tcp6\" and IPv4 or IPv6 IPv4-mapped\naddress.\n\nThis CL also adds a bit clarified unicast listener tests.\n\nFixes issue 2581.\n\nR=rsc, minux.ma\nCC=golang-dev\nhttp://codereview.appspot.com/5677086\n\nhttp://codereview.appspot.com/5677086/diff/40001/src/pkg/net/ipsock_posix.go\nFile src/pkg/net/ipsock_posix.go (right):\n\nhttp://codereview.appspot.com/5677086/diff/40001/src/pkg/net/ipsock_posix.go#newcode80\nsrc/pkg/net/ipsock_posix.go:80: //\tWe prefer an IPv4 wildcard address listen over an AF_INET\nOn 2012/03/05 14:58:17, rsc wrote:\n> Why does this say over?  Isn't an AF_INET socket exactly what we prefer?\n> I would write this as\n> \n> We use an IPv4 (AF_INET) wildcard address listen.\n> \n> and then the next one as\n> \n> We use an IPv6 (AF_INET6, IPV6_V6ONLY=1) wildcard address listen.\n> \n\nDone.",
			"disapproval": false,
			"date": "2012-03-05 15:13:15.275726",
			"approval": false
		}
	],
	"owner_email": "mikioh.mikioh@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mikio",
	"subject": "code review 5677086: net: make Dial and Listen behavior consistent across ov...",
	"created": "2012-02-18 13:26:28.530571",
	"patchsets": [
		1005,
		8,
		10008,
		16065,
		40001,
		46001
	],
	"modified": "2012-03-05 15:13:17.078358",
	"closed": true,
	"issue": 5677086
}