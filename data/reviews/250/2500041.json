{
	"description": "    Improved version of package flag, to allow re-parsing of flags/args\n\n    This a patched version of the standard flag package, which I propose\n    for inclusion. The only change is the ability to \"reinit\" the parser\n    to do a new parsing, starting at a different point in the list of\n    arguments.\n\n    The use case is for programs which include some form of plugins, not\n    known at compilation time of the main program. If you want the plugin\n    to accept flags and arguments, you need to provide them after a\n    non-flag argument (so that the parsing would stop before) but then,\n    you cannot use flag.Parse() again on them. My patche solves this\n    issue: the plugin has just to call Reinit(N) (where N is the number of\n    the first flmag/argument of the plugin) and can then use Parse().\n\n    Example of use:\n\n    package main\n\n    import (\n\t    \"flag\"\n\t    \"fmt\"\n    )\n\n    func main() {\n\t    debug := flag.Int(\"debug\", 0, \"Set the debug level, the higher, the more verbose\")\n\t    safe := flag.Bool(\"safe\", false, \"Set the safety level\")\n\t    outputname := flag.String(\"output\", \"\", \"Indicates the output file name\")\n\t    flag.Parse()\n\t    fmt.Printf(\"Debug level is %d\\n\", *debug)\n\t    fmt.Printf(\"Safety is %t\\n\", *safe)\n\t    fmt.Printf(\"Output file name is %s\\n\", *outputname)\n\n\t    name := flag.Arg(0)\n\t    fmt.Printf(\"Name is %s\\n\", name)\n\n\t    flag.Reinit(flag.LastOption()+1) // +1 to skip the name\n\t    dummy := flag.String(\"z\", \"\", \"Just playing\")\n\t    flag.Parse()\n\t    fmt.Printf(\"Dummy is %s\\n\", *dummy)\n    }",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Please discuss changes like this before sending CLs.\nSee http://golang.org/doc/contribute.html#Design .\n\nIn this specific case, I believe you could parse a command line\n\n   hg -v change -m foo\n\n(where change is the non-flag argument), by using\n\n    flag.Parse()\n    switch flag.Args()[0] {\n    case \"change\":\n        ... install new flags ...\n    }\n    os.Args = flag.Args()\n    flag.Parse()\n\nRuss\n",
			"disapproval": false,
			"date": "2010-10-14 17:03:11.798840",
			"approval": false
		},
		{
			"sender": "bortzmeyer@gmail.com",
			"recipients": [
				"bortzmeyer@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change.",
			"disapproval": false,
			"date": "2010-10-13 23:52:24.018640",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"bortzmeyer@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "assuming abandoned",
			"disapproval": false,
			"date": "2010-11-01 18:45:48.351783",
			"approval": false
		}
	],
	"owner_email": "bortzmeyer@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "bortzmeyer",
	"subject": "code review 2500041:     Improved version of package flag, to allow re-parsi...",
	"created": "2010-10-13 23:51:24.490897",
	"patchsets": [
		1,
		2001
	],
	"modified": "2010-11-01 18:45:48.352042",
	"closed": false,
	"issue": 2500041
}