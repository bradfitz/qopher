{
	"description": "test/bench/go: new package\r\n\r\nAs discussed in CL 6813045, this package contains low level micro-benchmarks for gc compiler implementations.\r\n\r\nAlso added additional benchmarks for issues 2230 and 2671.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"minux.ma@gmail.com",
		"r@golang.org",
		"rsc@golang.org",
		"mtj@google.com",
		"bradfitz@golang.org",
		"remyoudompheng@gmail.com"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please make the directory test/bench/go.\nThe package can be 'package bench'.\nThanks.",
			"disapproval": false,
			"date": "2012-11-06 18:42:37.975560",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6819087/diff/5005/test/bench/go/divmul_test.go\nFile test/bench/go/divmul_test.go (right):\n\nhttps://codereview.appspot.com/6819087/diff/5005/test/bench/go/divmul_test.go#newcode158\ntest/bench/go/divmul_test.go:158: func BenchmarkMul4(b *testing.B) {\nlet's be pedantic and name these more accurately\n\nBenchmarkIntMul4 etc.\n\nwe can add Float64Mul4 later if we want.",
			"disapproval": false,
			"date": "2012-11-09 22:41:55.955780",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/08 01:20:33, dfc wrote:\n> Thank you for your comments. I know these benchmarks must appear trivial, but\n> they expose some codegen improvements that 5g can make in the future.\n> \n> https://codereview.appspot.com/6819087/diff/10001/test/bench/go/asop_test.go\n> File test/bench/go/asop_test.go (right):\n> \n> https://codereview.appspot.com/6819087/diff/10001/test/bench/go/asop_test.go#newcode9\n> test/bench/go/asop_test.go:9: func BenchmarkLSL(b *testing.B) {\n> On 2012/11/07 16:12:40, r wrote:\n> > it seems if you have these, you might as well finish the list.\n> \n> Done.\n> \n> https://codereview.appspot.com/6819087/diff/10001/test/bench/go/asop_test.go#newcode12\n> test/bench/go/asop_test.go:12: }\n> On 2012/11/07 14:25:40, rsc wrote:\n> > I would suggest add a global\n> > \n> > var x int\n> > \n> > and then after each of these loops insert a use of the variable, like:\n> > \n> > x += v\n> > \n> > just so that a smarter compiler does not (1) complain that v is never really\n> > used and (2) does not throw the entire loop away.\n> > \n> > Thanks.\n> \n> Done.\n> \n> https://codereview.appspot.com/6819087/diff/10001/test/bench/go/doc.go\n> File test/bench/go/doc.go (right):\n> \n> https://codereview.appspot.com/6819087/diff/10001/test/bench/go/doc.go#newcode5\n> test/bench/go/doc.go:5: // Package bench contains low level code generation\n> micro benchmarks.\n> On 2012/11/07 16:12:40, r wrote:\n> > s/micro /micro-/\n> \n> Done.\n\nAfter consideration I don't think this benchmark needs to live inside the tree. I will abandon this proposal and move these benchmarks to a 3rd party package.",
			"disapproval": false,
			"date": "2012-11-09 22:35:37.287160",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I use Go for things like this.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-11-09 23:19:15.977430",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for your comments. I know these benchmarks must appear trivial, but they expose some codegen improvements that 5g can make in the future.\n\nhttps://codereview.appspot.com/6819087/diff/10001/test/bench/go/asop_test.go\nFile test/bench/go/asop_test.go (right):\n\nhttps://codereview.appspot.com/6819087/diff/10001/test/bench/go/asop_test.go#newcode9\ntest/bench/go/asop_test.go:9: func BenchmarkLSL(b *testing.B) {\nOn 2012/11/07 16:12:40, r wrote:\n> it seems if you have these, you might as well finish the list.\n\nDone.\n\nhttps://codereview.appspot.com/6819087/diff/10001/test/bench/go/asop_test.go#newcode12\ntest/bench/go/asop_test.go:12: }\nOn 2012/11/07 14:25:40, rsc wrote:\n> I would suggest add a global\n> \n> var x int\n> \n> and then after each of these loops insert a use of the variable, like:\n> \n> x += v\n> \n> just so that a smarter compiler does not (1) complain that v is never really\n> used and (2) does not throw the entire loop away.\n> \n> Thanks.\n\nDone.\n\nhttps://codereview.appspot.com/6819087/diff/10001/test/bench/go/doc.go\nFile test/bench/go/doc.go (right):\n\nhttps://codereview.appspot.com/6819087/diff/10001/test/bench/go/doc.go#newcode5\ntest/bench/go/doc.go:5: // Package bench contains low level code generation micro benchmarks.\nOn 2012/11/07 16:12:40, r wrote:\n> s/micro /micro-/\n\nDone.",
			"disapproval": false,
			"date": "2012-11-08 01:20:33.747420",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I thought we decided on test/bench/go\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-11-05 06:59:44.726240",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think they do belong.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-11-09 22:40:37.033960",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I use M4 for things like this...\r\n\r\nOn Fri, Nov 9, 2012 at 2:57 PM, Rob Pike <r@golang.org> wrote:\r\n\r\n> It might make sense to generate the benchmarks rather than type them all\r\n> in.\r\n\r\nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n650-335-5765\r\n",
			"disapproval": false,
			"date": "2012-11-09 23:00:19.986170",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello minux.ma@gmail.com, r@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-07 00:14:16.225980",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6819087/diff/10001/test/bench/go/asop_test.go\nFile test/bench/go/asop_test.go (right):\n\nhttps://codereview.appspot.com/6819087/diff/10001/test/bench/go/asop_test.go#newcode12\ntest/bench/go/asop_test.go:12: }\nI would suggest add a global\n\nvar x int\n\nand then after each of these loops insert a use of the variable, like:\n\nx += v\n\njust so that a smarter compiler does not (1) complain that v is never really used and (2) does not throw the entire loop away.\n\nThanks.",
			"disapproval": false,
			"date": "2012-11-07 14:25:40.290270",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6819087/diff/10001/test/bench/go/asop_test.go\nFile test/bench/go/asop_test.go (right):\n\nhttps://codereview.appspot.com/6819087/diff/10001/test/bench/go/asop_test.go#newcode9\ntest/bench/go/asop_test.go:9: func BenchmarkLSL(b *testing.B) {\nit seems if you have these, you might as well finish the list.\n\nhttps://codereview.appspot.com/6819087/diff/10001/test/bench/go/doc.go\nFile test/bench/go/doc.go (right):\n\nhttps://codereview.appspot.com/6819087/diff/10001/test/bench/go/doc.go#newcode5\ntest/bench/go/doc.go:5: // Package bench contains low level code generation micro benchmarks.\ns/micro /micro-/",
			"disapproval": false,
			"date": "2012-11-07 16:12:40.441180",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello minux.ma@gmail.com, r@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-11-05 01:16:18.348210",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yes, but\r\n\r\npackage go\r\n\r\nis a syntax error.\r\n\r\nThe workaround is to drop doc.go and move the remaining files into\r\n\r\npackage go_test\r\n\r\nOn Mon, Nov 5, 2012 at 5:59 PM, Rob Pike <r@golang.org> wrote:\r\n> I thought we decided on test/bench/go\r\n>\r\n> -rob\r\n",
			"disapproval": false,
			"date": "2012-11-05 07:02:44.394840",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yes, I also realised I need to add benchmarks for int8,uint8,int16,uint16,etc. \r\n\r\nThank you for your encouragement, I'll take another pass when I get home.  \r\n\r\nOn 10/11/2012, at 9:41, r@golang.org wrote:\r\n\r\n> \r\n> https://codereview.appspot.com/6819087/diff/5005/test/bench/go/divmul_test.go\r\n> File test/bench/go/divmul_test.go (right):\r\n> \r\n> https://codereview.appspot.com/6819087/diff/5005/test/bench/go/divmul_test.go#newcode158\r\n> test/bench/go/divmul_test.go:158: func BenchmarkMul4(b *testing.B) {\r\n> let's be pedantic and name these more accurately\r\n> \r\n> BenchmarkIntMul4 etc.\r\n> \r\n> we can add Float64Mul4 later if we want.\r\n> \r\n> https://codereview.appspot.com/6819087/\r\n",
			"disapproval": false,
			"date": "2012-11-09 22:50:22.919930",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It might make sense to generate the benchmarks rather than type them all in.\r\n",
			"disapproval": false,
			"date": "2012-11-09 22:57:39.623020",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"mtj@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6819087/diff/5005/test/bench/go/divmul_test.go\nFile test/bench/go/divmul_test.go (right):\n\nhttps://codereview.appspot.com/6819087/diff/5005/test/bench/go/divmul_test.go#newcode176\ntest/bench/go/divmul_test.go:176: func BenchmarkMagicMul10(b *testing.B) {\nif v == 5, the result of this is 42, not 50.",
			"disapproval": false,
			"date": "2012-11-11 23:48:02.063270",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "no doubt.\r\n\r\nOn Fri, Nov 9, 2012 at 3:19 PM, Rob Pike <r@golang.org> wrote:\r\n\r\n> I use Go for things like this.\r\n>\r\n> -rob\r\n>\r\n\r\n\r\n\r\n-- \r\nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n650-335-5765\r\n",
			"disapproval": false,
			"date": "2012-11-09 23:23:45.527230",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"mtj@google.com",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Dave, are you going to finalize these microbenchmarks? I don't understand why the CL is closed.",
			"disapproval": false,
			"date": "2012-11-14 22:31:12.442890",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "As I've been working on this CL I've learnt that the task is larger then I originally thought so I'm going to try again with a fresh proposal, soon, I promise. \r\n\r\nOn 15/11/2012, at 9:31, remyoudompheng@gmail.com wrote:\r\n\r\n> Dave, are you going to finalize these microbenchmarks? I don't\r\n> understand why the CL is closed.\r\n> \r\n> http://codereview.appspot.com/6819087/\r\n",
			"disapproval": false,
			"date": "2012-11-14 22:34:07.469550",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 6819087: test/bench/go: new package",
	"created": "2012-11-05 01:00:37.566030",
	"patchsets": [
		1,
		1001,
		3001,
		2003,
		2004,
		6004,
		9001,
		10001,
		11001,
		5005
	],
	"modified": "2012-11-14 22:31:12.614500",
	"closed": true,
	"issue": 6819087
}