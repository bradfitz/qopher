{
	"description": "unicode/utf8: add Width() to work as wcwidth(). return 1 for ambiguous width\ncharacter.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"minux.ma@gmail.com",
		"rsc@golang.org",
		"r@golang.org",
		"bradfitz@golang.org"
	],
	"messages": [
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi\n\n> Can you explain the rationale for the change?\n> - is it for use by text/tabwriter?\n\nThere is alredy the text exitor written in go.\n\nhttps://github.com/nsf/godit\n\nThis is working good with ascii characters on terminal.\nCurrently, godit don't work with multi-byte characters.\n\n> - can you give a reference in the Unicode Standard for the cell count\n> of characters and add it as a comment to your function?\n\nNot unicode standard, but is in ieee, i guess.\n\nhttp://pubs.opengroup.org/onlinepubs/009695399/functions/wcwidth.html\n\n> - I expect many characters to have zero-width, where are they?\n\nok, If golang-dev team allow to add this CL into pkg directory, I'll update. Thanks for your point.\n\n> - is there already an external package we can use to try the functionality?\n\nI don't know.\n\nThanks.\n- mattn",
			"disapproval": false,
			"date": "2012-11-26 07:53:42.929630",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "If you want to wrap the long lines by specified column width, this function many be useful.\nFor example, generate static html which is wrapped by 80 characters width on server side.\n\nOn 2012/11/26 07:53:42, mattn wrote:\n> Hi\n> \n> > Can you explain the rationale for the change?\n> > - is it for use by text/tabwriter?\n> \n> There is alredy the text exitor written in go.\n> \n> https://github.com/nsf/godit\n> \n> This is working good with ascii characters on terminal.\n> Currently, godit don't work with multi-byte characters.\n> \n> > - can you give a reference in the Unicode Standard for the cell count\n> > of characters and add it as a comment to your function?\n> \n> Not unicode standard, but is in ieee, i guess.\n> \n> http://pubs.opengroup.org/onlinepubs/009695399/functions/wcwidth.html\n> \n> > - I expect many characters to have zero-width, where are they?\n> \n> ok, If golang-dev team allow to add this CL into pkg directory, I'll update.\n> Thanks for your point.\n> \n> > - is there already an external package we can use to try the functionality?\n> \n> I don't know.\n> \n> Thanks.\n> - mattn",
			"disapproval": false,
			"date": "2012-11-26 08:13:48.070450",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'd like to postpone this CL until after Go 1.1 is out. If this\r\nbelongs anywhere, it belongs in package unicode, but it should be\r\ngenerated from the Unicode tables, and it should probably be part of a\r\nlarger discussion about Unicode property values (East_Asian_Width is\r\njust one such property). I don't believe we're in a position to have\r\nthat discussion just yet. I'd like to see normalization finished and\r\nbaked for a while. I realize we're moving slowly on good Unicode\r\nsupport, but let's take our time and do it right.\r\n\r\nI do see that POSIX defines a wcwidth, but most of POSIX's decisions\r\nabout how to handle \"wide characters\" were not well thought out. The\r\nfact that the name wcwidth refers to two distinct meanings of wide is\r\na case in point.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-11-26 16:13:22.020700",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttp://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-11-26 06:22:17.544720",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm thinking that IsAmbiguous(r rune) is also needed.\n\nOn 2012/11/26 06:22:17, mattn wrote:\n> Hello mailto:golang-dev@googlegroups.com (cc: mailto:golang-dev@googlegroups.com),\n> \n> I'd like you to review this change to\n> http://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-11-26 06:24:19.049760",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm thinking that IsAmbiguous(r rune) is also needed.\r\n\r\n",
			"disapproval": false,
			"date": "2012-11-26 06:26:36.874620",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think this function is better put in package unicode instead\nof unicode/utf8 (it has nothing to do with utf8).\n\nA possible Unicode reference for this:\nhttp://www.unicode.org/reports/tr11/",
			"disapproval": false,
			"date": "2012-11-26 12:40:21.257500",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello,\r\n\r\nCan you explain the rationale for the change?\r\n- is it for use by text/tabwriter?\r\n- can you give a reference in the Unicode Standard for the cell count\r\nof characters and add it as a comment to your function?\r\n- I expect many characters to have zero-width, where are they?\r\n- is there already an external package we can use to try the functionality?\r\n\r\nR\u00e9my.\r\n",
			"disapproval": false,
			"date": "2012-11-26 07:30:36.717840",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, remyoudompheng@gmail.com, minux.ma@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-06-03 09:26:27.784970",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The tables of this should be unicode.RangeTables.",
			"disapproval": false,
			"date": "2013-06-03 09:31:13.568510",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm not exactly sure what this is, but I think it has to do with width of a rune relative to an ASCII letter on a fixed-pitch screen.\n\nSuch display-oriented stuff has nothing to do with UTF-8 and arguably very little to do with Unicode. It doesn't belong in this repository. It might make sense in the go.text repo, but even there I'd need some convincing.\n\nIndependent point: Although I understand (if I'm correct) what the motivation is, fixed-width screens are going the way of dinosaurs and github denizens. I do not want to encourage such a backwards-looking approach to the design of user interfaces.",
			"disapproval": false,
			"date": "2013-06-03 12:26:43.499230",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=close",
			"disapproval": false,
			"date": "2013-06-05 20:59:35.041170",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2013-07-20 21:27:15.942560",
			"approval": false
		}
	],
	"owner_email": "mattn.jp@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mattn",
	"subject": "code review 6782117: unicode/utf8: add Width() to work as wcwidth(). return ...",
	"created": "2012-11-26 06:19:46.420910",
	"patchsets": [
		1,
		2001,
		3001,
		5001,
		12001,
		15001,
		18001,
		22001
	],
	"modified": "2013-07-20 21:27:16.387820",
	"closed": false,
	"issue": 6782117
}