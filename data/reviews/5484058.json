{
	"description": "gc: Nicer errors before miscompiling.\n\nThis fixes issue 2444.\n\nA big cleanup of all 31/32bit size boundaries i'll leave for another cl though.  (see also issue 1700).",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Dec 13, 2011 at 22:16, Russ Cox <rsc@golang.org> wrote:\n> If this is a 32-bit-specific error, use\n>\n> [ $G = 6g ] || errchk $G -e $D/$F.go\n\n> $RUNFILE: line 1: PID[: too many arguments\n\ni'm probably doing something stupid.  bb in a b.\n",
			"disapproval": false,
			"date": "2011-12-14 17:14:52.685613",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-13 10:29:36.022227",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-14 16:10:36.981999",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/12/13 10:29:36, lvd wrote:\n> Hello mailto:rsc@golang.org (cc: mailto:golang-dev@googlegroups.com),\n> \n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n\nhow do i make errchk differentiate between 6g and 8g errors.  6g compiles the copy just fine, but messes up the stackframe.  8g complains about the large copy.",
			"disapproval": false,
			"date": "2011-12-13 11:02:16.033081",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "If this is a 32-bit-specific error, use\n\n[ $G = 6g ] || errchk $G -e $D/$F.go\n",
			"disapproval": false,
			"date": "2011-12-13 21:16:58.275128",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Dec 14, 2011 at 18:14, Luuk van Dijk <lvd@google.com> wrote:\n> On Tue, Dec 13, 2011 at 22:16, Russ Cox <rsc@golang.org> wrote:\n>> If this is a 32-bit-specific error, use\n>>\n>> [ $G = 6g ] || errchk $G -e $D/$F.go\n>\n>> $RUNFILE: line 1: PID[: too many arguments\n>\n> i'm probably doing something stupid. \u00a0bb in a b.\n\nworks now.\n",
			"disapproval": false,
			"date": "2011-12-15 12:45:32.615193",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-03 11:17:01.970348",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The place to pick this off in the front end would be\nin dowidth.  Any type with w != (int32)w on a 32-bit\nplatform should yield\n\nyyerror(\"type %T too large\")\n\nhttp://codereview.appspot.com/5484058/diff/9002/src/cmd/5g/cgen.c\nFile src/cmd/5g/cgen.c (right):\n\nhttp://codereview.appspot.com/5484058/diff/9002/src/cmd/5g/cgen.c#newcode1204\nsrc/cmd/5g/cgen.c:1204: print(\"\\nsgen w=%d\\n\", w);\n%lld\n\nhttp://codereview.appspot.com/5484058/diff/9002/src/cmd/5g/cgen.c#newcode1209\nsrc/cmd/5g/cgen.c:1209: fatal(\"sgen copy %d\", w);\n%lld\n\nhttp://codereview.appspot.com/5484058/diff/9002/src/cmd/5g/cgen.c#newcode1212\nsrc/cmd/5g/cgen.c:1212: yyerror(\"Cannot copy objects larger than 2GB in this implementation, sorry.\");\nHaving to do this in every back end is error-prone.\nLet's pick it off in the front end.  \nThe earlier if statement can be \n\nif(w < 0 || (int32)w != w)\n    fatal(\"sgen copy %lld\", w);\n\nhttp://codereview.appspot.com/5484058/diff/9002/src/cmd/5g/cgen.c#newcode1247\nsrc/cmd/5g/cgen.c:1247: fatal(\"sgen: unaligned size %d (align=%d) for %T\", w, align, n->type);\n%lld (once)\n\nhttp://codereview.appspot.com/5484058/diff/9002/src/cmd/6g/cgen.c\nFile src/cmd/6g/cgen.c (right):\n\nhttp://codereview.appspot.com/5484058/diff/9002/src/cmd/6g/cgen.c#newcode1032\nsrc/cmd/6g/cgen.c:1032: print(\"\\nsgen w=%d\\n\", w);\n%lld etc\n\nhttp://codereview.appspot.com/5484058/diff/9002/src/cmd/8g/cgen.c\nFile src/cmd/8g/cgen.c (right):\n\nhttp://codereview.appspot.com/5484058/diff/9002/src/cmd/8g/cgen.c#newcode1149\nsrc/cmd/8g/cgen.c:1149: if(w > (1ULL<<31))\nSame changes as 5g\n\nhttp://codereview.appspot.com/5484058/diff/9002/src/cmd/gc/pgen.c\nFile src/cmd/gc/pgen.c (right):\n\nhttp://codereview.appspot.com/5484058/diff/9002/src/cmd/gc/pgen.c#newcode124\nsrc/cmd/gc/pgen.c:124: yyerror(\"Cannot compile this function because it requires more than 2GB of local variables, sorry.\");\nyyerror(\"stack frame too large (>2GB)\")",
			"disapproval": false,
			"date": "2011-12-15 15:58:36.014470",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5484058/diff/9002/src/cmd/5g/cgen.c\nFile src/cmd/5g/cgen.c (right):\n\nhttp://codereview.appspot.com/5484058/diff/9002/src/cmd/5g/cgen.c#newcode1204\nsrc/cmd/5g/cgen.c:1204: print(\"\\nsgen w=%d\\n\", w);\nOn 2011/12/15 15:58:36, rsc wrote:\n> %lld\n\nDone.\n\nhttp://codereview.appspot.com/5484058/diff/9002/src/cmd/5g/cgen.c#newcode1209\nsrc/cmd/5g/cgen.c:1209: fatal(\"sgen copy %d\", w);\nOn 2011/12/15 15:58:36, rsc wrote:\n> %lld\n\nDone.\n\nhttp://codereview.appspot.com/5484058/diff/9002/src/cmd/5g/cgen.c#newcode1212\nsrc/cmd/5g/cgen.c:1212: yyerror(\"Cannot copy objects larger than 2GB in this implementation, sorry.\");\nOn 2011/12/15 15:58:36, rsc wrote:\n> Having to do this in every back end is error-prone.\n> Let's pick it off in the front end.  \n> The earlier if statement can be \n> \n> if(w < 0 || (int32)w != w)\n>     fatal(\"sgen copy %lld\", w);\n\nDone.\n\nhttp://codereview.appspot.com/5484058/diff/9002/src/cmd/6g/cgen.c\nFile src/cmd/6g/cgen.c (right):\n\nhttp://codereview.appspot.com/5484058/diff/9002/src/cmd/6g/cgen.c#newcode1032\nsrc/cmd/6g/cgen.c:1032: print(\"\\nsgen w=%d\\n\", w);\nOn 2011/12/15 15:58:36, rsc wrote:\n> %lld etc\n\nDone.\n\nhttp://codereview.appspot.com/5484058/diff/9002/src/cmd/8g/cgen.c\nFile src/cmd/8g/cgen.c (right):\n\nhttp://codereview.appspot.com/5484058/diff/9002/src/cmd/8g/cgen.c#newcode1149\nsrc/cmd/8g/cgen.c:1149: if(w > (1ULL<<31))\nOn 2011/12/15 15:58:36, rsc wrote:\n> Same changes as 5g\n\nDone.\n\nhttp://codereview.appspot.com/5484058/diff/9002/src/cmd/gc/pgen.c\nFile src/cmd/gc/pgen.c (right):\n\nhttp://codereview.appspot.com/5484058/diff/9002/src/cmd/gc/pgen.c#newcode124\nsrc/cmd/gc/pgen.c:124: yyerror(\"Cannot compile this function because it requires more than 2GB of local variables, sorry.\");\nOn 2011/12/15 15:58:36, rsc wrote:\n> yyerror(\"stack frame too large (>2GB)\")\n\nDone.\n\nhttp://codereview.appspot.com/5484058/diff/9002/src/cmd/gc/pgen.c#newcode124\nsrc/cmd/gc/pgen.c:124: yyerror(\"Cannot compile this function because it requires more than 2GB of local variables, sorry.\");\nOn 2011/12/15 15:58:36, rsc wrote:\n> yyerror(\"stack frame too large (>2GB)\")\n\nDone.",
			"disapproval": false,
			"date": "2012-01-03 11:16:54.651526",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-01-10 04:28:41.552026",
			"approval": true
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=798dad44a879 ***\n\ngc: Nicer errors before miscompiling.\n\nThis fixes issue 2444.\n\nA big cleanup of all 31/32bit size boundaries i'll leave for another cl though.  (see also issue 1700).\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5484058",
			"disapproval": false,
			"date": "2012-01-10 10:19:26.131594",
			"approval": false
		}
	],
	"owner_email": "lvd@google.com",
	"private": false,
	"base_url": "",
	"owner": "lvd",
	"subject": "code review 5484058: gc: Nicer errors before miscompiling.",
	"created": "2011-12-13 10:28:00.798976",
	"patchsets": [
		1,
		2001,
		4001,
		3003,
		4002,
		3008,
		11,
		1003,
		9001,
		9002,
		15002,
		18001
	],
	"modified": "2012-01-10 10:19:26.825101",
	"closed": true,
	"issue": 5484058
}