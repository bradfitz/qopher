{
	"description": "os: make FindProcess do some error checking\r\n\r\nMakes FindProcess on UNIX and Plan 9 check that the\r\nprocess with the given pid is running and that we\r\nat least have permissions to send it signals. An\r\nequivalent check is already present in the Windows\r\nimplementation.\r\n",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rsc@golang.org",
		"rminnich@gmail.com",
		"ality@pbrane.org",
		"dave@cheney.net",
		"minux.ma@gmail.com",
		"bradfitz@golang.org",
		"nightlyone@googlemail.com"
	],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I agree. Can we try that first ?\r\n\r\nOn Sat, Feb 23, 2013 at 3:32 PM, Anthony Martin <ality@pbrane.org> wrote:\r\n> I don't agree with this change. The syscall\r\n> API is not required to be uniform across all\r\n> supported systems.\r\n>\r\n> I'd prefer to go the other way. Remove any\r\n> hint of Unix from the Plan 9 syscall API\r\n> and remove these assumptions from higher\r\n> level code.\r\n>\r\n> It will help keep us honest.\r\n>\r\n>   Anthony\r\n>\r\n> --\r\n>\r\n> ---\r\n> You received this message because you are subscribed to the Google Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-23 04:34:32.051530",
			"approval": false
		},
		{
			"sender": "rminnich@gmail.com",
			"recipients": [
				"seed@mail.nanosouffle.net",
				"rsc@golang.org",
				"rminnich@gmail.com",
				"ality@pbrane.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7392048/diff/12001/src/pkg/os/exec_unix.go\nFile src/pkg/os/exec_unix.go (right):\n\nhttps://codereview.appspot.com/7392048/diff/12001/src/pkg/os/exec_unix.go#newcode59\nsrc/pkg/os/exec_unix.go:59: func findProcess(pid int) (p *Process, err error) {\nThat seems to beg the question. Would you not want it to error if it didn't have access? In what way does this test hurt? Does this change break something or are you concerned that it might break something we don't understand?",
			"disapproval": false,
			"date": "2013-02-23 17:26:27.430580",
			"approval": false
		},
		{
			"sender": "seed@mail.nanosouffle.net",
			"recipients": [
				"seed@mail.nanosouffle.net",
				"rsc@golang.org",
				"rminnich@gmail.com",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, rminnich@gmail.com, ality@pbrane.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-02-22 23:21:46.623520",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't agree with this change. The syscall\r\nAPI is not required to be uniform across all\r\nsupported systems.\r\n\r\nI'd prefer to go the other way. Remove any\r\nhint of Unix from the Plan 9 syscall API\r\nand remove these assumptions from higher\r\nlevel code.\r\n\r\nIt will help keep us honest.\r\n\r\n  Anthony\r\n",
			"disapproval": false,
			"date": "2013-02-23 04:32:49.098430",
			"approval": false
		},
		{
			"sender": "rminnich@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 22, 2013 at 8:46 PM, Dave Cheney <dave@cheney.net> wrote:\r\n> I was echoing Anthony, \"I'd prefer to go the other way. Remove any\r\n> hint of Unix from the Plan 9 syscall API\r\n> and remove these assumptions from higher\r\n> level code.\"\r\n\r\nSure, do either of you have a suggestion, on how to do this? Because\r\nwe took a pretty good look and nothing came up that didn't look like\r\nit would impact a lot of existing runtime, which seemed unlikely to be\r\nacceptable.\r\n\r\nIn other words, doing it this way did not happen without some\r\ndiscussion. That's why I'm looking for suggestions. We ran out of\r\nideas.\r\n\r\nron\r\n",
			"disapproval": false,
			"date": "2013-02-23 04:50:06.832490",
			"approval": false
		},
		{
			"sender": "rminnich@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 22, 2013 at 8:34 PM, Dave Cheney <dave@cheney.net> wrote:\r\n> I agree. Can we try that first ?\r\n\r\nSure, what would you suggest?\r\n\r\nron\r\n",
			"disapproval": false,
			"date": "2013-02-23 04:46:08.167900",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I was echoing Anthony, \"I'd prefer to go the other way. Remove any\r\nhint of Unix from the Plan 9 syscall API\r\nand remove these assumptions from higher\r\nlevel code.\"\r\n\r\nOn Sat, Feb 23, 2013 at 3:46 PM, ron minnich <rminnich@gmail.com> wrote:\r\n> On Fri, Feb 22, 2013 at 8:34 PM, Dave Cheney <dave@cheney.net> wrote:\r\n>> I agree. Can we try that first ?\r\n>\r\n> Sure, what would you suggest?\r\n>\r\n> ron\r\n",
			"disapproval": false,
			"date": "2013-02-23 04:46:49.203220",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Well, the net/http/cgi test is calling p.Signal\r\nwith a syscall.Signal(0) which means no signal\r\nwill actually be sent. That portion of the test\r\nis just trying to determine if the child proc is\r\nrunning.\r\n\r\nThere's two options: either make the test stat(2)\r\n/proc/p.Pid on Plan 9 or move the logic into both\r\nthe Unix and Plan 9 versions of os.findProcess.\r\n\r\n  Anthony\r\n",
			"disapproval": false,
			"date": "2013-02-23 05:20:32.644990",
			"approval": false
		},
		{
			"sender": "rminnich@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "OK, we'll see about that, seems like a nice idea.\r\n\r\nOn Fri, Feb 22, 2013 at 9:20 PM, Anthony Martin <ality@pbrane.org> wrote:\r\n> Well, the net/http/cgi test is calling p.Signal\r\n> with a syscall.Signal(0) which means no signal\r\n> will actually be sent. That portion of the test\r\n> is just trying to determine if the child proc is\r\n> running.\r\n>\r\n> There's two options: either make the test stat(2)\r\n> /proc/p.Pid on Plan 9 or move the logic into both\r\n> the Unix and Plan 9 versions of os.findProcess.\r\n>\r\n>   Anthony\r\n",
			"disapproval": false,
			"date": "2013-02-23 07:10:52.052260",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I see both views here:\r\n\r\na) FindProcess on unix never did anything before, and never returned an\r\nerror. Keep doing the same?\r\nb) but Windows did, and our docs make it sound like Unix could. So might as\r\nwell, if it helps?\r\n\r\nAlternatively, we could add a new portable pkg/os Signal variable defined\r\nto the \"zero signal\" or \"check alive signal\", for use with\r\n(*os.Process).Signal.\r\n\r\nBut that's kinda gross.  Better would be just to define a new method on\r\n*os.Process, like:\r\n\r\n    // Exists returns whether the process p still exists\r\n    func (p *Process) Exists() bool\r\n\r\nOr something.\r\n\r\nFor now to get unblocked you can just plan9-vs-everybody-else stuff with\r\n+build files for the cgi test.  Or are there things besides the cgi test\r\nthat need to know whether a process is still running?\r\n\r\n\r\nOn Sat, Feb 23, 2013 at 9:26 AM, <rminnich@gmail.com> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/7392048/diff/12001/src/**\r\n> pkg/os/exec_unix.go<https://codereview.appspot.com/7392048/diff/12001/src/pkg/os/exec_unix.go>\r\n> File src/pkg/os/exec_unix.go (right):\r\n>\r\n> https://codereview.appspot.**com/7392048/diff/12001/src/**\r\n> pkg/os/exec_unix.go#newcode59<https://codereview.appspot.com/7392048/diff/12001/src/pkg/os/exec_unix.go#newcode59>\r\n> src/pkg/os/exec_unix.go:59: func findProcess(pid int) (p *Process, err\r\n> error) {\r\n> That seems to beg the question. Would you not want it to error if it\r\n> didn't have access? In what way does this test hurt? Does this change\r\n> break something or are you concerned that it might break something we\r\n> don't understand?\r\n>\r\n> https://codereview.appspot.**com/7392048/<https://codereview.appspot.com/7392048/>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n>\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-23 19:53:10.892540",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "minux.ma@gmail.com once said:\r\n> https://codereview.appspot.com/7392048/diff/12001/src/pkg/os/exec_unix.go#newcode59\r\n> src/pkg/os/exec_unix.go:59: func findProcess(pid int) (p *Process, err\r\n> error) {\r\n> this is an API change.\r\n> \r\n> the old findProcess doesn't give an error if we don't have access\r\n> to the process.\r\n\r\nIt does on Windows.\r\n\r\n  Anthony\r\n",
			"disapproval": false,
			"date": "2013-02-23 14:21:41.026380",
			"approval": false
		},
		{
			"sender": "seed@mail.nanosouffle.net",
			"recipients": [
				"seed@mail.nanosouffle.net",
				"rsc@golang.org",
				"rminnich@gmail.com",
				"ality@pbrane.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is an update of the \"syscall: Plan9: Define the Signal\ntype\" CL.\n\nPTAL.\n\nAlso updated the description.",
			"disapproval": false,
			"date": "2013-02-23 14:02:52.709180",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"seed@mail.nanosouffle.net",
				"rsc@golang.org",
				"rminnich@gmail.com",
				"ality@pbrane.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7392048/diff/12001/src/pkg/os/exec_unix.go\nFile src/pkg/os/exec_unix.go (right):\n\nhttps://codereview.appspot.com/7392048/diff/12001/src/pkg/os/exec_unix.go#newcode59\nsrc/pkg/os/exec_unix.go:59: func findProcess(pid int) (p *Process, err error) {\nthis is an API change.\n\nthe old findProcess doesn't give an error if we don't have access\nto the process.",
			"disapproval": false,
			"date": "2013-02-23 14:13:14.379880",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 22, 2013 at 9:20 PM, Anthony Martin <ality@pbrane.org> wrote:\r\n\r\n> Well, the net/http/cgi test is calling p.Signal\r\n> with a syscall.Signal(0) which means no signal\r\n> will actually be sent. That portion of the test\r\n> is just trying to determine if the child proc is\r\n> running.\r\n>\r\n> There's two options: either make the test stat(2)\r\n> /proc/p.Pid on Plan 9 or move the logic into both\r\n> the Unix and Plan 9 versions of os.findProcess.\r\n>\r\n\r\nEither sounds acceptable.  We don't have to leave the cgi test as it is.\r\n",
			"disapproval": false,
			"date": "2013-02-23 17:46:29.855310",
			"approval": false
		},
		{
			"sender": "seed@mail.nanosouffle.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This CL is the implementation of the second option.\r\nThe test has been changed.\r\n\r\nOn 23 February 2013 09:46, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n>\r\n>\r\n> On Fri, Feb 22, 2013 at 9:20 PM, Anthony Martin <ality@pbrane.org> wrote:\r\n>>\r\n>> Well, the net/http/cgi test is calling p.Signal\r\n>> with a syscall.Signal(0) which means no signal\r\n>> will actually be sent. That portion of the test\r\n>> is just trying to determine if the child proc is\r\n>> running.\r\n>>\r\n>> There's two options: either make the test stat(2)\r\n>> /proc/p.Pid on Plan 9 or move the logic into both\r\n>> the Unix and Plan 9 versions of os.findProcess.\r\n>\r\n>\r\n> Either sounds acceptable.  We don't have to leave the cgi test as it is.\r\n",
			"disapproval": false,
			"date": "2013-02-23 19:43:50.488990",
			"approval": false
		},
		{
			"sender": "seed@mail.nanosouffle.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry, I sent the message below privately to Brad on\r\naccident - it was meant for general discussion.\r\n\r\n--\r\n\r\nI prefer (a) as is implemented here, since the documentation for\r\nFindProcess says what you would want Exists to do. Moreover,\r\nthe Windows implementation already does all of this. If one\r\nwants to simply create a new Process struct, they can do that\r\nwithout the help of an API. To me, it seems that the current\r\nimplementation is inconsistent with documentation.\r\n\r\nOn 23 February 2013 11:53, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> I see both views here:\r\n>\r\n> a) FindProcess on unix never did anything before, and never returned an\r\n> error. Keep doing the same?\r\n> b) but Windows did, and our docs make it sound like Unix could. So might as\r\n> well, if it helps?\r\n>\r\n> Alternatively, we could add a new portable pkg/os Signal variable defined to\r\n> the \"zero signal\" or \"check alive signal\", for use with\r\n> (*os.Process).Signal.\r\n>\r\n> But that's kinda gross.  Better would be just to define a new method on\r\n> *os.Process, like:\r\n>\r\n>     // Exists returns whether the process p still exists\r\n>     func (p *Process) Exists() bool\r\n>\r\n> Or something.\r\n>\r\n> For now to get unblocked you can just plan9-vs-everybody-else stuff with\r\n> +build files for the cgi test.  Or are there things besides the cgi test\r\n> that need to know whether a process is still running?\r\n>\r\n>\r\n> On Sat, Feb 23, 2013 at 9:26 AM, <rminnich@gmail.com> wrote:\r\n>>\r\n>>\r\n>> https://codereview.appspot.com/7392048/diff/12001/src/pkg/os/exec_unix.go\r\n>> File src/pkg/os/exec_unix.go (right):\r\n>>\r\n>>\r\n>> https://codereview.appspot.com/7392048/diff/12001/src/pkg/os/exec_unix.go#newcode59\r\n>> src/pkg/os/exec_unix.go:59: func findProcess(pid int) (p *Process, err\r\n>> error) {\r\n>> That seems to beg the question. Would you not want it to error if it\r\n>> didn't have access? In what way does this test hurt? Does this change\r\n>> break something or are you concerned that it might break something we\r\n>> don't understand?\r\n>>\r\n>> https://codereview.appspot.com/7392048/\r\n>>\r\n>>\r\n>> --\r\n>>\r\n>> ---You received this message because you are subscribed to the Google\r\n>> Groups \"golang-dev\" group.\r\n>>\r\n>> To unsubscribe from this group and stop receiving emails from it, send an\r\n>> email to golang-dev+unsubscribe@googlegroups.com.\r\n>> For more options, visit https://groups.google.com/groups/opt_out.\r\n>>\r\n>>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-23 20:16:15.924370",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Feb 24, 2013 at 4:15 AM, Akshat Kumar <seed@mail.nanosouffle.net>wrote:\r\n\r\n> I prefer (a) as is implemented here, since the documentation for\r\n> FindProcess says what you would want Exists to do. Moreover,\r\n> the Windows implementation already does all of this. If one\r\n> wants to simply create a new Process struct, they can do that\r\n> without the help of an API. To me, it seems that the current\r\n> implementation is inconsistent with documentation.\r\n\r\nright, the docs says \"running process\", however, that doesn't mean a process\r\nthe caller can send signal to (i.e. with matching effective or real uid or\r\nthe user\r\nhas special privileges): on unix, there is no easy and portable way to\r\ndetect\r\nwhether a pid is really running (when not using /proc), so that's why i\r\nthink the\r\ncurrent code doesn't verify the validity of the pid argument.\r\n",
			"disapproval": false,
			"date": "2013-02-23 21:05:23.527850",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"seed@mail.nanosouffle.net",
				"rsc@golang.org",
				"rminnich@gmail.com",
				"ality@pbrane.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think this solution is racy. wrt. the windows impl, it might racy as well, I don't know enough about windows.\n\nI suggest deferring changing the behavior of os.FindProcess and following Brad's suggestion to make a plan version of this test.\n\nhttps://codereview.appspot.com/7392048/diff/12001/src/pkg/os/exec_unix.go\nFile src/pkg/os/exec_unix.go (right):\n\nhttps://codereview.appspot.com/7392048/diff/12001/src/pkg/os/exec_unix.go#newcode59\nsrc/pkg/os/exec_unix.go:59: func findProcess(pid int) (p *Process, err error) {\nOn 2013/02/23 14:13:14, minux wrote:\n> this is an API change.\n> \n> the old findProcess doesn't give an error if we don't have access\n> to the process.\n\nIs it also racy ? I thought the only pid you could count on not to change in unix was your own.",
			"disapproval": false,
			"date": "2013-02-24 01:34:56.287970",
			"approval": false
		},
		{
			"sender": "seed@mail.nanosouffle.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 24 February 2013 01:34,  <dave@cheney.net> wrote:\r\n> I think this solution is racy. wrt. the windows impl, it might racy as\r\n> well, I don't know enough about windows.\r\n\r\nI think any solution to the problem would be racy, even just by\r\nthe fact that the process may exit at any time (of course, many\r\nother things might happen as well -- we have no control here).\r\n\r\n> I suggest deferring changing the behavior of os.FindProcess and\r\n> following Brad's suggestion to make a plan version of this test.\r\n\r\nDone. See CL 7377053.\r\n\r\n\r\n> on unix, there is no easy and portable way to detect\r\n> whether a pid is really running (when not using /proc), so that's why i\r\n> think the current code doesn't verify the validity of the pid argument.\r\n\r\nWould you be happier if I just checked for existence of\r\nthe pid's corresponding directory in /proc?\r\n",
			"disapproval": false,
			"date": "2013-02-25 21:03:24.580010",
			"approval": false
		},
		{
			"sender": "nightlyone@googlemail.com",
			"recipients": [
				"seed@mail.nanosouffle.net",
				"rsc@golang.org",
				"rminnich@gmail.com",
				"ality@pbrane.org",
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"nightlyone@googlemail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/23 21:05:23, minux wrote:\n> right, the docs says \"running process\", however, that doesn't mean a process\n> the caller can send signal to (i.e. with matching effective or real uid or\n> the user\n> has special privileges): on unix, there is no easy and portable way to\n> detect\n> whether a pid is really running (when not using /proc), so that's why i\n> think the\n> current code doesn't verify the validity of the pid argument.\n\nThere is a easy and portable way for unixes implemented in about every program doing pid file handling:\n\na) Does a process with PID (where pid > 0) exist (or did it die already)?\n- kill(pid, 0) does NOT return -1 and sets errno=ESRCH -> yes\n- every other (return, errno) tuple: -> no\n- documented behavior of (OpenBSD, NetBSD, FreeBSD, Linux)\nb) Can I signal process PID?\n- kill(pid, 0) does return 0 -> yes\n- other return values -> no\n- is racy, if you mean a specific program with this pid and your pid source is old, but that is just a property of pids.\n- documented behavior of (OpenBSD, NetBSD, FreeBSD, Linux)\n\nDo you have any other currently supported Unix in mind?\n\nI would like to have FindProcess return situation a)\nProcess.Signal method could check for situation b)\n\nI would like to write code like:\n\nif _, err := os.FindProcess(pid); err != nil {\n        os.Remove(STALE_PIDFILE)\n}\n\nThis would be working Go code on ALL supported operating systems, if the abstraction in the Unix case wasn't broken.\n\nEven a panic(\"Not implemented\") Unix implementation of os.FindProcess (honestly saying that it actually isn't implemented for Unix)\nwould have saved me a few hours. The current Unix implementation is completely useless.\n\nSiince you have to handle the return code of Process.Signal() and Process.Kill() anyway, \nit can return EPERM (killability) an ESRCH (process gone between find and signal/kill) too.",
			"disapproval": false,
			"date": "2013-04-20 23:23:03.287630",
			"approval": false
		}
	],
	"owner_email": "seed@mail.nanosouffle.net",
	"private": false,
	"base_url": "",
	"owner": "akumar",
	"subject": "code review 7392048: os: make FindProcess do some error checking",
	"created": "2013-02-22 23:20:22.812820",
	"patchsets": [
		1,
		1001,
		1002,
		12001
	],
	"modified": "2013-04-20 23:23:03.287630",
	"closed": false,
	"issue": 7392048
}