{
	"description": "runtime: improve locking on openbsd\n\nImplement a locking model based on the current linux model - a\ntri-state mutex with active spinning, passive spinning and sleeping.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org"
	],
	"reviewers": [
		"dvyukov@google.com"
	],
	"messages": [
		{
			"sender": "jsing@google.com",
			"recipients": [
				"jsing@google.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-07 14:09:25.517989",
			"approval": false
		},
		{
			"sender": "jsing@google.com",
			"recipients": [
				"jsing@google.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/10/07 14:18:57, dvyukov wrote:\n> I think it's a dead end to try to optimize all those implementations separately.\n> I have a patch that unifies all mutex implementations to just 2 (futex and\n> semaphore based):\n> http://codereview.appspot.com/5140043/\n> I think it's better to complete that patch.\n\nI like the idea of moving to a consistent/shared locking model, rather than having one per operating system, however I'm not sure that it should block this change.\n\nI believe that this change will address the time/scheduling issues that are being seen on the openbsd amd64 buildbot. Also, AFAIK OpenBSD does not have lightweight semaphores (unless you link against libpthread) or an exact futex equivalent, so you'll likely need some of the code/behaviour that is in this change anyway.",
			"disapproval": false,
			"date": "2011-10-07 14:51:02.496249",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n",
			"disapproval": false,
			"date": "2011-10-07 15:25:59.894378",
			"approval": true
		},
		{
			"sender": "jsing@google.com",
			"recipients": [
				"jsing@google.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=3894889d5c1c ***\n\nruntime: improve locking on openbsd\n\nImplement a locking model based on the current linux model - a\ntri-state mutex with active spinning, passive spinning and sleeping.\n\nR=golang-dev, dvyukov, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/4974043",
			"disapproval": false,
			"date": "2011-10-08 13:56:21.981901",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"jsing@google.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I think it's a dead end to try to optimize all those implementations separately.\nI have a patch that unifies all mutex implementations to just 2 (futex and semaphore based):\nhttp://codereview.appspot.com/5140043/\nI think it's better to complete that patch.",
			"disapproval": false,
			"date": "2011-10-07 14:18:57.060710",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"jsing@google.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/10/07 14:18:57, dvyukov wrote:\n> I think it's a dead end to try to optimize all those implementations separately.\n> I have a patch that unifies all mutex implementations to just 2 (futex and\n> semaphore based):\n> http://codereview.appspot.com/5140043/\n> I think it's better to complete that patch.\n\nI think I will measure performance difference between futex and semaphore on linux. If it is not that much then we may end up with just 1 mutex implementation.",
			"disapproval": false,
			"date": "2011-10-07 14:38:10.450204",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I agree that it's fine to move forward with this even if\nDmitriy is going to unify the mutex implementations later.\n\nWhere can I find the semantics of thrsleep and thrwakeup?\nThe C prototypes in this CL do not match the comments at\nhttp://fxr.watson.org/fxr/source/sys/syscall.h?v=OPENBSD\nand I have been unable to find out what the arguments mean.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-10-07 15:02:19.206554",
			"approval": false
		},
		{
			"sender": "jsing@google.com",
			"recipients": [
				"jsing@google.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/10/07 15:02:19, rsc wrote:\n> I agree that it's fine to move forward with this even if\n> Dmitriy is going to unify the mutex implementations later.\n> \n> Where can I find the semantics of thrsleep and thrwakeup?\n> The C prototypes in this CL do not match the comments at\n> http://fxr.watson.org/fxr/source/sys/syscall.h?v=OPENBSD\n> and I have been unable to find out what the arguments mean.\n\nThat syscall.h is a bit old... have a look at:\n\nhttp://www.openbsd.org/cgi-bin/cvsweb/src/sys/sys/syscall.h?rev=1.130;content-type=text%2Fplain\n\nOr the kernel implementation:\n\nhttp://www.openbsd.org/cgi-bin/cvsweb/src/sys/kern/kern_synch.c?rev=1.97;content-type=text%2Fplain\n\nExample usage is also provided in librthreads:\n\nhttp://www.openbsd.org/cgi-bin/cvsweb/src/lib/librthread/rthread_sync.c?rev=1.24;content-type=text%2Fplain",
			"disapproval": false,
			"date": "2011-10-07 15:15:12.906209",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"jsing@google.com",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/10/07 14:51:02, jsing wrote:\n> On 2011/10/07 14:18:57, dvyukov wrote:\n> > I think it's a dead end to try to optimize all those implementations\n> separately.\n> > I have a patch that unifies all mutex implementations to just 2 (futex and\n> > semaphore based):\n> > http://codereview.appspot.com/5140043/\n> > I think it's better to complete that patch.\n> \n> I like the idea of moving to a consistent/shared locking model, rather than\n> having one per operating system, however I'm not sure that it should block this\n> change.\n> \n> I believe that this change will address the time/scheduling issues that are\n> being seen on the openbsd amd64 buildbot. Also, AFAIK OpenBSD does not have\n> lightweight semaphores (unless you link against libpthread) or an exact futex\n> equivalent, so you'll likely need some of the code/behaviour that is in this\n> change anyway.\n\nAgree",
			"disapproval": false,
			"date": "2011-10-10 12:54:47.523280",
			"approval": false
		}
	],
	"owner_email": "jsing@google.com",
	"private": false,
	"base_url": "",
	"owner": "jsing",
	"subject": "code review 4974043: runtime: improve locking on openbsd",
	"created": "2011-08-26 18:08:24.700844",
	"patchsets": [
		12001,
		15001,
		21001
	],
	"modified": "2011-10-10 12:54:47.607068",
	"closed": true,
	"issue": 4974043
}