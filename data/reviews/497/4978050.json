{
	"description": "json: don't loop on bad input.\nThe problem is triggered by jsonrpc, which loops forever on malformed input.\nSince the scanner has recorded an error, it returns without consuming any\nmore input; as a result, jsonrpc.ReadRequestHeader consumes no input and\nthe server loops forever.\nThis is one fix. It may not be the best.\nFixes issue 2179.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"adg@golang.org",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I don't know. I'd like rsc's input.\n\n-rob\n",
			"disapproval": false,
			"date": "2011-09-02 04:56:26.098922",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-09-02 02:47:33.808163",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Should this be documented in json.Decoder (or json.Decoder.Read)?\n\n\nOn 2 September 2011 12:47,  <r@golang.org> wrote:\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> json: don't loop on bad input.\n> The problem is triggered by jsonrpc, which loops forever on malformed\n> input.\n> Since the scanner has recorded an error, it returns without consuming\n> any\n> more input; as a result, jsonrpc.ReadRequestHeader consumes no input and\n> the server loops forever.\n> This is one fix. It may not be the best.\n> Fixes issue 2179.\n>\n> Please review this at http://codereview.appspot.com/4978050/\n>\n> Affected files:\n> \u00a0M src/pkg/json/stream.go\n>\n>\n> Index: src/pkg/json/stream.go\n> ===================================================================\n> --- a/src/pkg/json/stream.go\n> +++ b/src/pkg/json/stream.go\n> @@ -30,7 +30,11 @@\n> \u00a0// the conversion of JSON into a Go value.\n> \u00a0func (dec *Decoder) Decode(v interface{}) os.Error {\n> \u00a0 \u00a0 \u00a0 \u00a0if dec.err != nil {\n> - \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return dec.err\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // If we've already reported a scan error, the input is bad\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // and we've told the caller, but we're back here.\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // We signal EOF, in effect shutting down the input stream,\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // so the caller knows we're done.\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return os.EOF\n> \u00a0 \u00a0 \u00a0 \u00a0}\n>\n> \u00a0 \u00a0 \u00a0 \u00a0n, err := dec.readValue()\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-09-02 04:37:47.127053",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I think it's the caller's fault.  An error is an error.\nIt should stop regardless of whether it's os.EOF or\nsomething else.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-09-02 15:30:13.084225",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-02-05 23:35:31.421442",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 4978050: json: don't loop on bad input.",
	"created": "2011-09-02 02:47:25.725598",
	"patchsets": [
		1
	],
	"modified": "2012-02-05 23:35:34.049626",
	"closed": true,
	"issue": 4978050
}