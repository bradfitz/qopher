{
	"description": "ld: Fixes issue 1899 (\"cannot create 8.out.exe\")\n\nhttp://code.google.com/p/go/issues/detail?id=1899",
	"cc": [
		"rsc@golang.org",
		"alex.brainman@gmail.com",
		"bsiegert@gmail.com",
		"hectorchu@gmail.com",
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "jp@webmaster.ms",
			"recipients": [
				"jp@webmaster.ms",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: alex.brainman@gmail.com, golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-08-31 02:57:00.984006",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Sep 7, 2011 at 19:12,  <alex.brainman@gmail.com> wrote:\n> On 2011/09/07 17:52:19, rsc wrote:\n>\n>> #ifndef _WIN32\n>> \u00a0 \u00a0 \u00a0 \u00a0remove(outfile);\n>> #endif\n>\n>\n> I do not know who said what, but this change does not fixes the problem\n> in my environment (Windows 7).\n\nOkay, that's interesting.  In the original CL that was sent out,\nthere was an incorrect (backwards) rename that fixed a problem\n(maybe not yours) by mostly accidentally avoiding the remove.\nSo I thought that just not doing the remove on Windows would\nsolve it.  What is the problem that you are seeing?\n\nIt sounds like we need an #ifdef, despite trying not to.\n\nOn Unix, the correct behavior is remove(outfile).\n\nWhat is the correct behavior on Windows?\nIf someone sends a CL that replaces\n\nremove(outfile)\n\nwith\n\n#ifdef _WIN32\n    ... something\n#else\n    // On Unix, remove target before writing to it,\n    // to avoid problems with caches that think the\n    // target is still running.\n    remove(outfile);\n#endif\n\nthen I will be happy.  I will leave it to the Windows\nexperts to figure out the appropriate \"... something\".\n\nRuss\n",
			"disapproval": false,
			"date": "2011-09-08 00:53:40.557419",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "yay portability\n\nhttp://codereview.appspot.com/4978047/diff/17003/src/cmd/ld/lib.c\nFile src/cmd/ld/lib.c (left):\n\nhttp://codereview.appspot.com/4978047/diff/17003/src/cmd/ld/lib.c#oldcode73\nsrc/cmd/ld/lib.c:73: remove(outfile);\nSkipping the remove is not okay either.\nIt is working around a Unix file system behavior\nwhere a binary that is running is not writable,\nso that if you run 6l x.6, 6.out, and then 6l x.6\nagain, if the 6.out hasn't finished, the second 6l\nwill fail to write a new file.  The remove is supposed\nto take care of that.\n\nMaybe Windows is keeping the outfile around\n(delaying the remove) for the same reason?  \nDo you know of any documentation explaining\nwhy a Windows remove would be delayed?\n\nIt sounds like maybe the right code here is\n\n// Unix doesn't like it when we write to a running\n// (or, sometimes, recently run) binary, so remove\n// the output file before writing it.  Windows postpones\n// a remove of a running (or, sometimes, recently run)\n// binary, so rename it before removing it.\np = smprint(\"%s~\", outfile);\nrename(outfile, p);\nremove(p);\nfree(p);",
			"disapproval": false,
			"date": "2011-09-01 17:55:34.979793",
			"approval": false
		},
		{
			"sender": "jp@webmaster.ms",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Reproduced with an external USB drive.\nIt seems to be a bug of MinGW's bash.exe\nNot reproducible with the tests in test directory.\nPTAL.\n\nOn 2011/09/08 07:44:49, jp wrote:\n> On 2011/09/08 03:05:26, brainman wrote:\n> > -\tremove(outfile);\n> > +//\tremove(outfile);\n> \n> > $ for i in *; do ./run || break; done\n> > cannot create 8.out.exe\n> \n> Works OK for me.\n> Will try on a slower PC.",
			"disapproval": false,
			"date": "2011-09-08 09:50:11.652631",
			"approval": false
		},
		{
			"sender": "jp@webmaster.ms",
			"recipients": [
				"jp@webmaster.ms",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org (cc: alex.brainman@gmail.com, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-08-31 21:40:41.562449",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/05 16:25:04, jp wrote:\n> \n> Third ld's run will fail on rename(), then will not be able to create output\n> file.\n> \n\nI can not reproduce your assumption. Russ patch works for me all the time. Perhaps my PC is not fast enough. Can we remove(8.out.exe~) before renaming part?\n\nI also concerned that we are clobbering 8.out.exe~. It is an unusable name, but still.\n\nAlso, should this only do renaming part for 8.out.exe only, or for any output file?",
			"disapproval": false,
			"date": "2011-09-06 02:30:48.709155",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/06 04:24:55, jp wrote:\n> \n> PTAL, tha last patch is Russ' one (which seems to work for all of us) with your\n> comments (delete the temp file before rename to it and weirder name of the temp\n> file).\n\nI do not like what we are doing here, but I see no alternative at this moment. LGTM.\n\nRuss?",
			"disapproval": false,
			"date": "2011-09-06 07:09:47.771488",
			"approval": true
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Please, change CL description to something like:\n\n\"\nld: rename + remove to work around buggy remove on Windows 7\n\nFixes issue 1899.\n\"\n\nPlease, give me some time to verify your code. I need to find a PC to reproduce this problem.\n\nhttp://codereview.appspot.com/4978047/diff/17001/src/cmd/ld/lib.c\nFile src/cmd/ld/lib.c (right):\n\nhttp://codereview.appspot.com/4978047/diff/17001/src/cmd/ld/lib.c#newcode76\nsrc/cmd/ld/lib.c:76: tempfile = smprint(\"%s~\", outfile);\nAs we have discovered, this situation is tricky. I am concerned that some of your code might fail and we will not know what happened. Please, check results of all of those operations you do and bail out if they fail with some descriptive message.",
			"disapproval": false,
			"date": "2011-08-31 23:45:01.490083",
			"approval": false
		},
		{
			"sender": "jp@webmaster.ms",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4978047/diff/6004/doc/progs/run\nFile doc/progs/run (right):\n\nhttp://codereview.appspot.com/4978047/diff/6004/doc/progs/run#newcode45\ndoc/progs/run:45: # Write to temporary file to avoid mingw bash bug.\nOn 2011/09/12 18:29:48, rsc wrote:\n> I assume you were introducing $TMPFILE because\n> \n> x=$(echo $(./$O.out $2 2>&1))\n> \n> was breaking.  Is that true?\n\nYes.\nSeems that bash does not close stdout of the spawned process on time thus preventing the executable file to be deleted.\n\n\"rm $O.out.exe\" fails just after \"x=$(echo $(./$O.out $2 2>&1))\"\n\nhttp://codereview.appspot.com/4978047/diff/6004/test/run\nFile test/run (right):\n\nhttp://codereview.appspot.com/4978047/diff/6004/test/run#newcode37\ntest/run:37: # Write to temporary file to avoid mingw bash bug.\nOn 2011/09/12 18:29:48, rsc wrote:\n> There's no bash bug here.\n> The temporary file is used because its contents get\n> referred to multiple times.  I think you can just revert\n> the changes to this file.\n\nok",
			"disapproval": false,
			"date": "2011-09-12 19:21:57.128870",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4978047/diff/6004/doc/progs/run\nFile doc/progs/run (right):\n\nhttp://codereview.appspot.com/4978047/diff/6004/doc/progs/run#newcode45\ndoc/progs/run:45: # Write to temporary file to avoid mingw bash bug.\nI assume you were introducing $TMPFILE because\n\nx=$(echo $(./$O.out $2 2>&1))\n\nwas breaking.  Is that true?\n\nhttp://codereview.appspot.com/4978047/diff/6004/test/run\nFile test/run (right):\n\nhttp://codereview.appspot.com/4978047/diff/6004/test/run#newcode37\ntest/run:37: # Write to temporary file to avoid mingw bash bug.\nThere's no bash bug here.\nThe temporary file is used because its contents get\nreferred to multiple times.  I think you can just revert\nthe changes to this file.",
			"disapproval": false,
			"date": "2011-09-12 18:29:47.818935",
			"approval": false
		},
		{
			"sender": "jp@webmaster.ms",
			"recipients": [
				"jp@webmaster.ms",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Three in a row work for me.\n\nOn 2011/08/31 10:52:18, rsc wrote:\n> This fixes two links in a row trying to use the same output file name.\n> \n> What about three in a row?  Will the third link's rename fail because\n> the renamed file from the second link is really not yet gone?\n> \n> Russ",
			"disapproval": false,
			"date": "2011-08-31 21:14:57.872286",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "temp = smprint(\"%s~\", outfile)\n",
			"disapproval": false,
			"date": "2011-08-31 21:16:39.818255",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "With the changes below it would look fine except\nthat the rename has the arguments backward.\nThey were backward in your original CL too.\nThat makes me worry: why was this having any\neffect when you tried it before?\n\nhttp://codereview.appspot.com/4978047/diff/17001/src/cmd/ld/lib.c\nFile src/cmd/ld/lib.c (right):\n\nhttp://codereview.appspot.com/4978047/diff/17001/src/cmd/ld/lib.c#newcode63\nsrc/cmd/ld/lib.c:63: char* tempfile;\ns/* / */\n\nhttp://codereview.appspot.com/4978047/diff/17001/src/cmd/ld/lib.c#newcode75\nsrc/cmd/ld/lib.c:75: // Windows 7 defers the actual remove\n// Rename + remove to work around buggy remove on Windows 7.",
			"disapproval": false,
			"date": "2011-08-31 21:46:58.156792",
			"approval": false
		},
		{
			"sender": "jp@webmaster.ms",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/01 23:59:48, rsc wrote:\n\nDo you mean?\n\n\tcout = create(outfile, 1, 0775);\n\tif(cout < 0) {\n-\t\tremove(outfile);\n+\t\trename(outfile, tmpfile);\n+\t\tremove(tmpfile);\n\t\tcout = create(outfile, 1, 0775);\n\t\tif(cout < 0) {\n\t\t\tdiag(\"cannot create %s\", outfile);\n\t\t\terrorexit();\n\t\t}\n\t}\n\nIt is essential on Windows to try create() prior to any rename/remove.\ncreate() has more chances to success being called on the first place.\n\n> I don't think you have to check the return values.\n> Just do a rename + remove and we're done.\n> If it works, it works.\n> \n> Russ",
			"disapproval": false,
			"date": "2011-09-02 00:15:59.921081",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4978047/diff/11006/src/cmd/ld/lib.c\nFile src/cmd/ld/lib.c (right):\n\nhttp://codereview.appspot.com/4978047/diff/11006/src/cmd/ld/lib.c#newcode75\nsrc/cmd/ld/lib.c:75: // It is essencial to try create() first\nNo, I mean replace lines 75-90 in this version with\n\n\n// Unix doesn't like it when we write to a running\n// (or, sometimes, recently run) binary, so remove\n// the output file before writing it.  Windows postpones\n// a remove of a running (or, sometimes, recently run)\n// binary, so rename it before removing it.\np = smprint(\"%s~\", outfile);\nrename(outfile, p);\nremove(p);\nfree(p);\n\nThat's good enough to handle the back-to-back\ncase, and I don't mind if the OS bugs shine \nthrough in the general case.",
			"disapproval": false,
			"date": "2011-09-02 17:21:22.177558",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "This fixes two links in a row trying to use the same output file name.\n\nWhat about three in a row?  Will the third link's rename fail because\nthe renamed file from the second link is really not yet gone?\n\nRuss\n",
			"disapproval": false,
			"date": "2011-08-31 10:52:18.845706",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Okay, sounds good.  Please remove the ifdef and use just \"~\".\nWe might as well do it everywhere.  It could help other\nbroken systems too.\n",
			"disapproval": false,
			"date": "2011-08-31 21:16:18.901562",
			"approval": false
		},
		{
			"sender": "jp@webmaster.ms",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/4978047/diff/17003/src/cmd/ld/lib.c\nFile src/cmd/ld/lib.c (left):\n\nhttp://codereview.appspot.com/4978047/diff/17003/src/cmd/ld/lib.c#oldcode73\nsrc/cmd/ld/lib.c:73: remove(outfile);\nOn 2011/09/01 17:55:35, rsc wrote:\nHereinafter: 'Windows' refers to common things of all actual Windows (2000 to Windows7), 'Windows_7_' refers to Windows7 specific.\n\n> Skipping the remove is not okay either.\n> It is working around a Unix file system behavior\n> where a binary that is running is not writable,\n> so that if you run 6l x.6, 6.out, and then 6l x.6\n> again, if the 6.out hasn't finished, the second 6l\n> will fail to write a new file.  The remove is supposed\n> to take care of that.\n\nWindows does not allow to write to a running file either.\nWindows also does not allow to remove a running file.\nBut Windows allows to rename a running file (within the same filesystem, at least).\n\nSo, this issue of rewriting a running file is the almost the same on Windows.\n\nSolutions differ.\nAdding remove() before create() does not solve it. \nAdding rename() does.\nAfter rename(), the temporary file will have the executable code mmap'ed to memory.\nThe temporary file becomes the file protected from being removed.\nSo in the chain \"rename(out, tmp), remove(tmp), create(out)\", remove() will fail if the file is running.\nAnd the temporary file will remain.\n\nIt also means that \"%s~\" is not enough.\nImagine 8.out.exe does not terminate long time, we create a new 8.out.exe, run, the new one 8.out.exe, run, etc. \nEach running 8.out.exe with unique content must have its own file on disk with unique name.\nThere will be \"8.out.exe~1\", \"8.out.exe~2\", etc. \nWho will take care of their deletion? (Well, on Windows it is possible to add a filename into a list of files which will be deleted on next reboot when they definetely are not running. But it looks too tricky to do so in a program like the linker.)\n\nDo the linker really must not fail on writing to running file? \nI think linker must fail if the output file is running.\nIf not-failing behavior is really needed, user should use 'rm' before in his shell or makefile scripts (and see 'rm' fails).\n\nFor Unix case you wrote about it could be worth do handle create() failure doing remove() then create() again.\nBut not remove() before create() which may succeed. \nOn Windows_7_ remove() can break the subsequent create() .\n\n> Maybe Windows is keeping the outfile around\n> (delaying the remove) for the same reason?  \n> Do you know of any documentation explaining\n> why a Windows remove would be delayed?\n\nWhat I said above on Windows comes from my pre-Windows_7_ experience.\nThe delayed remove() looks like a novel feature.\nIt looks more not like an API change but another process (microsoft antivirus?) keeping the file's handle open.\n\n\"The DeleteFile function fails if an application attempts to delete a file that is open for normal I/O or as a memory-mapped file.\nThe DeleteFile function marks a file for deletion on close. Therefore, the file deletion does not occur until the last handle to the file is closed. Subsequent calls to CreateFile to open the file fail with ERROR_ACCESS_DENIED.\"\nhttp://msdn.microsoft.com/en-us/library/aa363915(v=vs.85).aspx\n\n> It sounds like maybe the right code here is\n> \n> // Unix doesn't like it when we write to a running\n> // (or, sometimes, recently run) binary, so remove\n> // the output file before writing it.  Windows postpones\n> // a remove of a running (or, sometimes, recently run)\n> // binary, so rename it before removing it.\nNot very correct: Windows does not allow neither to write to nor to remove of a running file.\nThe problem is: on Windows_7_ calling remove(name) triggers the weird machinery which put the filename into a strange state for a while. \ncreate(name) fails during this period and also the second remove(name) would fail with ACCESS_DENIED error instead of expected FILE_NOT_FOUND.\nThe period can be quite long (10s and more).\n\n> p = smprint(\"%s~\", outfile);\n> rename(outfile, p);\n> remove(p);\n> free(p);\n> \n\nMaybe:\n\tcout = create(outfile, 1, 0775);\n\tif(cout < 0) {\n+\t\tremove(outfile);\n+\t\tcout = create(outfile, 1, 0775);\n+\t\tif(cout < 0) {\n\t\t\tdiag(\"cannot create %s\", outfile);\n\t\t\terrorexit();\n+\t\t}\n\t}\n\nHow do you think, does it solve the Unix issue?",
			"disapproval": false,
			"date": "2011-09-01 23:54:47.873930",
			"approval": false
		},
		{
			"sender": "jp@webmaster.ms",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, alex.brainman@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-02 00:33:40.911340",
			"approval": false
		},
		{
			"sender": "jp@webmaster.ms",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/08 03:05:26, brainman wrote:\n> -\tremove(outfile);\n> +//\tremove(outfile);\n\n> $ for i in *; do ./run || break; done\n> cannot create 8.out.exe\n\nWorks OK for me.\nWill try on a slower PC.",
			"disapproval": false,
			"date": "2011-09-08 07:44:49.519470",
			"approval": false
		},
		{
			"sender": "jp@webmaster.ms",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4978047/diff/15003/doc/progs/run\nFile doc/progs/run (right):\n\nhttp://codereview.appspot.com/4978047/diff/15003/doc/progs/run#newcode45\ndoc/progs/run:45: TMPFILE=\"/tmp/gotest3-$$-$USER\"\nOn 2011/09/12 17:00:24, rsc wrote:\n> # Write to temporary file to avoid mingw bash bug.\n> TMPFILE=\"...\"\nok.\nI added this comment into test/run as well.\nIt seems to be done there for the same reason, I just copied the solution from there to doc/progs/run",
			"disapproval": false,
			"date": "2011-09-12 18:10:05.816050",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Sep 1, 2011 at 19:55,  <rsc@golang.org> wrote:\n> Maybe Windows is keeping the outfile around\n> (delaying the remove) for the same reason?\n> Do you know of any documentation explaining\n> why a Windows remove would be delayed?\n\nAre you sure it is being delayed and does not simply fail with \"file\nbusy\" or some such error?\n\n--Benny.\n",
			"disapproval": false,
			"date": "2011-09-02 08:24:06.754490",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I am confused.\n\nI thought we had finished enumerating the\nreasons that rename+remove was not okay,\nso we were just going to replace the existing\n1 line:\n\n       remove(outfile);\n\nwith 3 lines:\n\n#ifndef _WIN32\n       remove(outfile);\n#endif\n\nRuss\n",
			"disapproval": false,
			"date": "2011-09-07 17:52:19.745783",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Okay, then let's just go back to replacing\n\n\tremove(outfile);\n\nwith\n\n#ifndef _WIN32\n\tremove(outfile);\n#endif\n",
			"disapproval": false,
			"date": "2011-09-05 17:07:53.237365",
			"approval": false
		},
		{
			"sender": "jp@webmaster.ms",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/08/31 21:46:58, rsc wrote:\n> They were backward in your original CL too.\n\nOops.\nThat's funny, but it really does effect.\nIt gives a fresh look to the issue :)\n\n> That makes me worry: why was this having any\n> effect when you tried it before?\n\nI have an idea why: the patch disables remove().\ncreate() truncates existing file (if any) and it works.\nPerhaps, a better fix would be just to delete line with remove().\nWhat a buggy system we work around doing remove() before create() ?\n\nPTAL.",
			"disapproval": false,
			"date": "2011-09-01 04:26:40.150886",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4978047/diff/11006/src/cmd/ld/lib.c\nFile src/cmd/ld/lib.c (right):\n\nhttp://codereview.appspot.com/4978047/diff/11006/src/cmd/ld/lib.c#newcode80\nsrc/cmd/ld/lib.c:80: if(0 != remove(outfile)) {\nI still get errors with your patch. I could see first create fails. Then this remove succeeds, therefore, the program does not even attempts to try renaming part. And, finally, second create fails.",
			"disapproval": false,
			"date": "2011-09-06 02:25:05.024170",
			"approval": false
		},
		{
			"sender": "jp@webmaster.ms",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/06 02:30:48, brainman wrote:\n> On 2011/09/05 16:25:04, jp wrote:\n> > \n> > Third ld's run will fail on rename(), then will not be able to create output\n> > file.\n> > \n> \n> I can not reproduce your assumption. Russ patch works for me all the time.\n> Perhaps my PC is not fast enough. Can we remove(8.out.exe~) before renaming\n> part?\n\nOK.\n\n> I also concerned that we are clobbering 8.out.exe~. It is an unusable name, but\n> still.\n\nYes, that' why I used \"%s~~~\" first. Some programs (FTE text editor, for example) use ~ suffix for storing previous versions of files they work with. I have changed to more unusual \"%s~^\".\n\n> Also, should this only do renaming part for 8.out.exe only, or for any output file?\n\nFor any output file. \n8.out.exe and 6.out.exe are default names and thus we see them more often in bug reports.\n\nPTAL, tha last patch is Russ' one (which seems to work for all of us) with your comments (delete the temp file before rename to it and weirder name of the temp file).",
			"disapproval": false,
			"date": "2011-09-06 04:24:55.614694",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I don't think you have to check the return values.\nJust do a rename + remove and we're done.\nIf it works, it works.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-09-01 23:59:48.271295",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/05 17:07:53, rsc wrote:\n> \n> #ifndef _WIN32\n> \tremove(outfile);\n> #endif\n\nThis fails in my tests.\n\nAlex",
			"disapproval": false,
			"date": "2011-09-06 02:31:32.830167",
			"approval": false
		},
		{
			"sender": "jp@webmaster.ms",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/02 17:21:22, rsc wrote:\n> http://codereview.appspot.com/4978047/diff/11006/src/cmd/ld/lib.c\n> File src/cmd/ld/lib.c (right):\n> \n> http://codereview.appspot.com/4978047/diff/11006/src/cmd/ld/lib.c#newcode75\n> src/cmd/ld/lib.c:75: // It is essencial to try create() first\n> No, I mean replace lines 75-90 in this version with\n> \n> \n> // Unix doesn't like it when we write to a running\n> // (or, sometimes, recently run) binary, so remove\n> // the output file before writing it.  Windows postpones\n> // a remove of a running (or, sometimes, recently run)\n> // binary, so rename it before removing it.\n> p = smprint(\"%s~\", outfile);\n> rename(outfile, p);\n> remove(p);\n> free(p);\n> \n> That's good enough to handle the back-to-back\n> case, and I don't mind if the OS bugs shine \n> through in the general case.\n\nIf 8.out.exe still running, second ld's run will rename it 8.out.exe~,\nthen will fail to remove 8.out.exe~, then will create the new 8.out.exe.\nSo, the only problem of ld's run before the previous 8.out.exe is terminated is the 8.out.exe~ file left on the disk.\n\nThird ld's run will fail on rename(), then will not be able to create output file.\n\nI think, such a behavior will be a source of unclear bug reports.",
			"disapproval": false,
			"date": "2011-09-05 16:25:04.454245",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/07 17:52:19, rsc wrote:\n> \n> #ifndef _WIN32\n>        remove(outfile);\n> #endif\n> \n\nI do not know who said what, but this change does not fixes the problem in my environment (Windows 7).\n\nI do not want to introduce complexity for others, but I don't see any better solutions at this stage. Perhaps we could leave exiting code alone for non-windows and change windows version to do what we need to do. Perhaps we will find better solution in the future.\n\nAlex",
			"disapproval": false,
			"date": "2011-09-07 23:12:52.231503",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/08 00:53:40, rsc wrote:\n> ...  What is the problem that you are seeing?\n\n$ pwd\n/C/MinGW/go/doc/progs\n$ hg diff\ndiff -r ef81a396f9ae doc/progs/run\n--- a/doc/progs/run\tTue Sep 06 16:04:55 2011 -0700\n+++ b/doc/progs/run\tThu Sep 08 11:11:07 2011 +1000\n@@ -62,7 +62,7 @@\n \n \n testit helloworld \"\" \"Hello, world; or \u039a\u03b1\u03bb\u03b7\u03bc\u03ad\u03c1\u03b1 \u03ba\u03cc\u03c3\u03bc\u03b5; or \u3053\u3093\u306b\u3061\u306f \u4e16\u754c\"\n-testit helloworld3 \"\" \"hello, world can't open file; err=no such file or directory\"\n+#testit helloworld3 \"\" \"hello, world can't open file; err=no such file or directory\"\n testit echo \"hello, world\" \"hello, world\"\n testit sum \"\" \"6\"\n testit strings \"\" \"\"\ndiff -r ef81a396f9ae src/cmd/ld/lib.c\n--- a/src/cmd/ld/lib.c\tTue Sep 06 16:04:55 2011 -0700\n+++ b/src/cmd/ld/lib.c\tThu Sep 08 11:11:07 2011 +1000\n@@ -70,7 +70,7 @@\n \t// add goroot to the end of the libdir list.\n \tlibdir[nlibdir++] = smprint(\"%s/pkg/%s_%s\", goroot, goos, goarch);\n \n-\tremove(outfile);\n+//\tremove(outfile);\n \tcout = create(outfile, 1, 0775);\n \tif(cout < 0) {\n \t\tdiag(\"cannot create %s\", outfile);\n$ for i in *; do ./run || break; done\ncannot create 8.out.exe\n$ \n\nI ran \"process monitor\" along and this is the error:\n\n12:42:47.5140956 PM\t8l.exe\t308\tCreateFile\tC:\\MinGW\\go\\doc\\progs\\8.out.exe\tSHARING VIOLATION\tDesired Access: Generic Write, Read Attributes, Disposition: OverwriteIf, Options: Synchronous IO Non-Alert, Non-Directory File, Attributes: N, ShareMode: Read, Write, AllocationSize: 0\n\n> \n> It sounds like we need an #ifdef, despite trying not to.\n> \n\nAgreed.\n\nAlex",
			"disapproval": false,
			"date": "2011-09-08 03:05:26.830750",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4978047/diff/15003/doc/progs/run\nFile doc/progs/run (right):\n\nhttp://codereview.appspot.com/4978047/diff/15003/doc/progs/run#newcode45\ndoc/progs/run:45: TMPFILE=\"/tmp/gotest3-$$-$USER\"\n# Write to temporary file to avoid mingw bash bug.\nTMPFILE=\"...\"",
			"disapproval": false,
			"date": "2011-09-12 17:00:24.113398",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nThanks for seeing it through.\n",
			"disapproval": false,
			"date": "2011-09-14 15:19:45.913592",
			"approval": true
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/14 15:19:45, rsc wrote:\n> LGTM\n> \n\nCan I have more time to test this, please?\n\nAlex",
			"disapproval": false,
			"date": "2011-09-15 07:38:12.873829",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Sep 15, 2011 at 03:38,  <alex.brainman@gmail.com> wrote:\n> Can I have more time to test this, please?\n\nSure, it's all yours to submit or not.\n",
			"disapproval": false,
			"date": "2011-09-15 15:21:39.924800",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Thank you for sticking with this.\n\nhttp://codereview.appspot.com/4978047/diff/11011/doc/progs/run\nFile doc/progs/run (right):\n\nhttp://codereview.appspot.com/4978047/diff/11011/doc/progs/run#newcode46\ndoc/progs/run:46: TMPFILE=\"/tmp/gotest3-$$-$USER\"\nI didn't look closely at this. Considering that main problem with 8l is not resolved (see my other comment), I am not sure if this change helps any or not.\n\nThe only thing that I have noticed is that sometimes this script will leave files in /tmp, because of \"set -e\". If you proceed with this change, perhaps it is OK just hard code file name. And it does not need to be in /tmp. Everything in here runs in sequence.\n\nhttp://codereview.appspot.com/4978047/diff/11011/src/cmd/ld/lib.c\nFile src/cmd/ld/lib.c (right):\n\nhttp://codereview.appspot.com/4978047/diff/11011/src/cmd/ld/lib.c#newcode78\nsrc/cmd/ld/lib.c:78: #endif\nI wish it would work, but it doesn't. This program:\n\npackage main\n\nimport (\n\t\"bytes\"\n\t\"exec\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"os\"\n\t\"strconv\"\n)\n\nconst prog = `\npackage main\nfunc main() {\nprintln(\"Hello\")\n}\n`\n\n/*\nfunc runOne(args ...string) {\n\tcmd := args[0]\n\targs = args[1:]\n\tb, err := exec.Command(cmd, args...).CombinedOutput()\n\tif err != nil {\n\t\tlog.Fatalf(\"%s failed: %s: %s\\n\", cmd, err, b)\n\t}\n}\n*/\n\nfunc runOne(args ...string) string {\n\tcmd := args[0]\n\tfullcmd, err := exec.LookPath(cmd)\n\tif err != nil {\n\t\tlog.Fatalf(\"LookPath(%s): %v\", cmd, err)\n\t}\n\n\tr, w, err := os.Pipe()\n\tif err != nil {\n\t\tlog.Fatalf(\"Pipe: %v\", err)\n\t}\n\tattr := &os.ProcAttr{Files: []*os.File{nil, w, w}}\n\tp, err := os.StartProcess(fullcmd, args, attr)\n\tif err != nil {\n\t\tlog.Fatalf(\"StartProcess: %v\", err)\n\t}\n\tdefer p.Release()\n\tw.Close()\n\n\tvar b bytes.Buffer\n\tio.Copy(&b, r)\n\toutput := b.String()\n\tmsg, err := p.Wait(0)\n\tif err != nil {\n\t\tlog.Fatalf(\"Wait: %v\", err)\n\t}\n\tif !msg.Exited() || msg.ExitStatus() != 0 {\n\t\tlog.Fatalf(\"ExitStatus(%d): %v\", msg.ExitStatus(), output)\n\t}\n\treturn output\n}\n\nfunc run() {\n\t// create source file\n\terr := ioutil.WriteFile(\"hello.go\", []byte(prog), 0666)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer os.Remove(\"hello.go\")\n\t// compile source file\n\trunOne(\"8g\", \"-o\", \"hello.8\", \"hello.go\")\n\tdefer os.Remove(\"hello.8\")\n\t// link executable\n\trunOne(\"8l\", \"-o\", \"hello.exe\", \"hello.8\")\n//\tdefer os.Remove(\"hello.exe\")\n\t// run executable\n\trunOne(\"./hello.exe\")\n}\n\nfunc main() {\n\tif len(os.Args) != 2 {\n\t\tlog.Fatal(\"Invalid numberof args\")\n\t}\n\tn, e := strconv.Atoi(os.Args[1])\n\tif e != nil {\n\t\tlog.Fatalf(\"Must be a number (%s): %s\\n\", os.Args[1], e)\n\t}\n\tfor i := 0; i < n; i++ {\n\t\trun()\n\t}\n}\n\nfails if I run it like\n\ntest.exe 10000\n\nI wrote this, so we can't blame mingw or anything.\n\nYour version improves things a bit (it doesn't fail as often as original), but it is not 100%. Your previous attempts (where you were moving file before deletion) do not work 100% either.\n\nI tend to lean towards submitting this change - at least it improves on our current situation. Maybe make a comment to say it is not 100%. What do you think?",
			"disapproval": false,
			"date": "2011-09-16 02:27:50.924315",
			"approval": false
		},
		{
			"sender": "jp@webmaster.ms",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/16 02:27:50, brainman wrote:\n \n> http://codereview.appspot.com/4978047/diff/11011/doc/progs/run\n> File doc/progs/run (right):\n> \n> http://codereview.appspot.com/4978047/diff/11011/doc/progs/run#newcode46\n> doc/progs/run:46: TMPFILE=\"/tmp/gotest3-$$-$USER\"\n> I didn't look closely at this. Considering that main problem with 8l is not\n> resolved (see my other comment), I am not sure if this change helps any or not.\n> \n> The only thing that I have noticed is that sometimes this script will leave\n> files in /tmp, because of \"set -e\". If you proceed with this change, perhaps it\n> is OK just hard code file name. And it does not need to be in /tmp. Everything\n> in here runs in sequence.\n\nI copied the tmp file code from test/run. Well, there was no set -e.\n\n> fails if I run it like\n> \n> test.exe 10000\n> \n> I wrote this, so we can't blame mingw or anything.\n\nTwo questions:\n1. does test/run fail on your machine ?\n2. does this program fail if you do not provide pipe for stdout and stderr (try nil for all 3 or handle of a disk file) ?",
			"disapproval": false,
			"date": "2011-09-16 02:38:29.227261",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/16 02:38:29, jp wrote:\n> 1. does test/run fail on your machine ?\n\nI don't know. I didn't run it. I did see it fail in a similar fashion on a different PC of mine couple month ago.\n\n> 2. does this program fail if you do not provide pipe for stdout and stderr (try\n> nil for all 3 or handle ...) ?\n\nTried that. It still fails. Does my program fails for you?\n\nAlex",
			"disapproval": false,
			"date": "2011-09-16 02:51:56.286334",
			"approval": false
		},
		{
			"sender": "jp@webmaster.ms",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/16 02:51:56, brainman wrote:\n> On 2011/09/16 02:38:29, jp wrote:\n> > 1. does test/run fail on your machine ?\n> \n> I don't know. I didn't run it. I did see it fail in a similar fashion on a\n> different PC of mine couple month ago.\n> \n> > 2. does this program fail if you do not provide pipe for stdout and stderr\n> (try\n> > nil for all 3 or handle ...) ?\n> \n> Tried that. It still fails. Does my program fails for you?\n \nNo, and neither bash.exe.\nI could reproduce the bug with doc/progs/run putting go directory to external usb drive (I do not have it right now to check your new prog with it).\nBut I could not reproduce the bug with test/run tests. \nSo I started comparing doc/progs/run and test/run and after changing the method of capturing output of test program all tests from doc/progs/run passed many times even on that usb drive.",
			"disapproval": false,
			"date": "2011-09-16 03:01:12.559618",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I see no way to improve on your change to ld.\n\nPlease fix problem with run script (where it would leave tmp file behind on error), and I will submit. Perhaps, if you just use a fixed name tmp file in $GOROOT/doc/progs directory, that will do the trick.\n\nThank you.\n\nAlex",
			"disapproval": false,
			"date": "2011-09-19 03:49:15.971201",
			"approval": false
		},
		{
			"sender": "jp@webmaster.ms",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/19 03:49:15, brainman wrote:\nPTAL\n> I see no way to improve on your change to ld.\n> \n> Please fix problem with run script (where it would leave tmp file behind on\n> error), and I will submit. Perhaps, if you just use a fixed name tmp file in\n> $GOROOT/doc/progs directory, that will do the trick.\n> \n> Thank you.\n> \n> Alex",
			"disapproval": false,
			"date": "2011-09-23 23:56:05.765320",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/23 23:56:05, jp wrote:\n> On 2011/09/19 03:49:15, brainman wrote:\n> PTAL\n\nPlease, see this conversation http://goo.gl/RGFp6. Hector suggested to rename file into a *temp* name, and it looks like it works for both him and me. His suggestion is similar to one of your attempts, except the temp file we choose is completely unique every time we use it.\n\nPlease, check if some programs I have posted work for you, then we could implement it. I will be away for a week, so you could have a go, if you like.\n\nAlex",
			"disapproval": false,
			"date": "2011-09-24 00:32:10.016273",
			"approval": false
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"hectorchu@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On Sep 24, 2:18\u00a0am, jp wrote:\n> > > I wonder what happens if TEMP directory and our executable are on\n> > > different drives.\n> \n> > Good point. \u00a0In that case let's not bother renaming it to temp\n> > directory, just rename to temp name in current directory.\n> \n> We had this solution.\n> \n> The problem is:\n> 1. if we rename always to sprintf(\"%s~\", oldname), we just postpone the\n> problem with deletion of 8.out.exe to the same problem with deletion\n> of 8.out.exe~\n> 2. if we rename to a random name, eventually we will have garbage files in a\n> working directory. Well, there is MoveFileEx\n> and MOVEFILE_DELAY_UNTIL_REBOOT, but until reboot there will be files\n> which the linker failed to delete: 8.out.exe~1, 8.out.exe~2, 8.out.exe~3\n\nI think we need to clarify what we want to work and what we shouldn't support.\n\nWe would like the following to work:\n- Overwrite an existing binary that is not running or has just finished running.\n\nWe shouldn't/can't support the following:\n- Overwrite an existing binary that is currently running.\n- Creating a new binary with a name that is pending deletion.\n\nOn that basis I think jp's changes LGTM.\n\nNB. The issue with bash is probably because command substitution doesn't wait for the command to complete, it just waits for the pipe to close.  The former doesn't necessarily happen before the latter.",
			"disapproval": false,
			"date": "2011-09-24 12:18:57.292879",
			"approval": true
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"hectorchu@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/24 12:18:57, hector wrote:\n> \n> I think we need to clarify what we want to work and what we shouldn't support.\n> \n\nWhatever you say, but current change (removeing \"remove\" before \"create\") does not fixes the issue - I have a computer that still fails, if you test it for long enough.\n\nOn the other hand, if we move file before deleting it, I could run test for very long time and it would not fail. I was monitoring all operations and none of them failed. It means we should not have garbage files.\n\nI am OK with whatever you decide to do. But I will keep with this myself when I am back.\n\nAlex",
			"disapproval": false,
			"date": "2011-09-24 13:08:13.712492",
			"approval": false
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"hectorchu@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/09/24 13:08:13, brainman wrote:\n> On 2011/09/24 12:18:57, hector wrote:\n> > \n> > I think we need to clarify what we want to work and what we shouldn't support.\n> > \n> \n> Whatever you say, but current change (removeing \"remove\" before \"create\") does\n> not fixes the issue - I have a computer that still fails, if you test it for\n> long enough.\n> \n> On the other hand, if we move file before deleting it, I could run test for very\n> long time and it would not fail. I was monitoring all operations and none of\n> them failed. It means we should not have garbage files.\n> \n> I am OK with whatever you decide to do. But I will keep with this myself when I\n> am back.\n> \n> Alex\n\nYep, it looks like an impossible problem.\n\nThere are really 2 problems, which combined prevent us from fixing the issue:\n1. It is impossible to overwrite or delete a binary that is running.\n2. It is impossible to know when the binary has been unmapped from memory. Waiting on the process handle doesn't work because the handle gets signalled as soon as ExitProcess() is called, and the binary will still be mapped at that time.\n\nAs jp has said renaming isn't good enough as it's impossible to delete a running binary, whether it has been renamed or not.\n\nI think the only sane thing to do now is to revert the change to ld/lib.c and change doc/progs/run so that the output file has the same base name as the source file.  Except that I see cat_rot13 is run twice, so provisions will have to be made so that it doesn't get built twice.",
			"disapproval": false,
			"date": "2011-09-24 14:26:03.901434",
			"approval": false
		},
		{
			"sender": "jp@webmaster.ms",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"hectorchu@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "> I think the only sane thing to do now is to revert the change to ld/lib.c and change doc/progs/run so that the output file has the same base name as the source file.  Except that I see cat_rot13 is run twice, so provisions will have to be made so that it doesn't get built twice.\n\nThere are also tests in $GOROOT/test directory, not only in $GOROOT/doc/progs/run.\nIf we revert changes in ld/lib.c they will fail.\nThere are a lot of them and some of them made such a way that one Go program emit source for another one. And both of them are compiled to the same binary 8.out.exe with no delay.\nIt would be a nice solution to give unique filename to each test (and unique filename to each binary within the test), but it would be a much bigger change than only can_rot13.",
			"disapproval": false,
			"date": "2011-09-24 19:12:38.536107",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"hectorchu@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "It seems to me, we have wasted enough time with this. As I said earlier, this works most of the time. So, I propose that we submit it as is. I will look into this again when I have more time. I have LGTM from rsc, hector and myself, so I will submit unless I hear otherwise in a day or two.\n\nAlex",
			"disapproval": false,
			"date": "2011-10-03 06:39:48.205500",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n",
			"disapproval": false,
			"date": "2011-10-03 14:24:43.387037",
			"approval": true
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"hectorchu@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Tried to submit it, but build fails now: doc/progs/run fails, because \"testit helloworld3 ...\" fails (it is expected to fail). We used to execute \"testit helloworld3 ...\" in a subshell, so, perhaps, exit code didn't matter before.\n\nAlex",
			"disapproval": false,
			"date": "2011-10-04 05:32:40.022267",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Tue, Oct 4, 2011 at 01:32,  <alex.brainman@gmail.com> wrote:\n> Tried to submit it, but build fails now: doc/progs/run fails, because\n> \"testit helloworld3 ...\" fails (it is expected to fail). We used to\n> execute \"testit helloworld3 ...\" in a subshell, so, perhaps, exit code\n> didn't matter before.\n\nTestit prints an error on mismatch\nbut I don't think it exits the script with\na failed status.\n\nWhat is the error you are seeing?\n\nRuss\n",
			"disapproval": false,
			"date": "2011-10-05 15:33:46.496201",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"hectorchu@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/10/05 15:33:46, rsc wrote:\n> On Tue, Oct 4, 2011 at 01:32,  <mailto:alex.brainman@gmail.com> wrote:\n> > Tried to submit it, but build fails now: doc/progs/run fails, because\n> > \"testit helloworld3 ...\" fails (it is expected to fail). We used to\n> > execute \"testit helloworld3 ...\" in a subshell, so, perhaps, exit code\n> > didn't matter before.\n> \n> Testit prints an error on mismatch\n> but I don't think it exits the script with\n> a failed status.\n> \n> What is the error you are seeing?\n> \n\n$ cd $GOROOT/doc/progs\n$ ./run; echo $?\n1\n$ bash -x ./run\n+ set -e\n++ gomake --no-print-directory -f ../../src/Make.inc go-env\n...\n...\n+ testit helloworld3 '' 'hello, world can'\\''t open file; err=no such file or directory'\n+ 8l helloworld3.8\n+ ./8.out\n$\n\nRunning helloworld3 fails:\n\n$ cat helloworld3.go\n// Copyright 2009 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\npackage main\n\nimport (\n        \"./file\"\n        \"fmt\"\n        \"os\"\n)\n\nfunc main() {\n        hello := []byte(\"hello, world\\n\")\n        file.Stdout.Write(hello)\n        f, err := file.Open(\"/does/not/exist\")\n        if f == nil {\n                fmt.Printf(\"can't open file; err=%s\\n\", err.String())\n                os.Exit(1)\n        }\n}\n\nAlex",
			"disapproval": false,
			"date": "2011-10-06 00:21:54.532277",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Aha!\n\nPut the 8.out command in ( ) I guess.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-10-06 17:38:03.490423",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"hectorchu@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/10/06 17:38:03, rsc wrote:\n> \n> Put the 8.out command in ( ) I guess.\n> \n\nI don't think we want to do that, running our process in a sub-process. I think we were trying to move away from that.\n\nAlex",
			"disapproval": false,
			"date": "2011-10-06 23:10:36.166051",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Oct 6, 2011 at 19:10,  <alex.brainman@gmail.com> wrote:\n> I don't think we want to do that, running our process in a sub-process.\n> I think we were trying to move away from that.\n\nAdd || true to the end of the command instead?\n\n\nRuss\n",
			"disapproval": false,
			"date": "2011-10-06 23:14:37.966479",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"hectorchu@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/10/06 23:14:37, rsc wrote:\n> \n> Add || true to the end of the command instead?\n> \n\nSGTM. I will wait for jp to change.\n\nAlex",
			"disapproval": false,
			"date": "2011-10-06 23:17:05.749640",
			"approval": false
		},
		{
			"sender": "jp@webmaster.ms",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"hectorchu@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I did not understand which change do you want to be done.\n\nOn 2011/10/06 23:17:05, brainman wrote:\n> On 2011/10/06 23:14:37, rsc wrote:\n> > \n> > Add || true to the end of the command instead?\n> > \n> \n> SGTM. I will wait for jp to change.\n> \n> Alex",
			"disapproval": false,
			"date": "2011-10-07 08:56:39.215579",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"hectorchu@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4978047/diff/41001/doc/progs/run\nFile doc/progs/run (right):\n\nhttp://codereview.appspot.com/4978047/diff/41001/doc/progs/run#newcode60\ndoc/progs/run:60: ./$O.out | $2 2>&1 >\"$TMPFILE\"\nI think you could do:\n./$O.out | $2 2>&1 >\"$TMPFILE\" || true\nto ignore non-zero exit code returned by helloworld3.\nUnless you have better idea.",
			"disapproval": false,
			"date": "2011-10-07 11:05:04.487835",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Is this still unresolved?  I'm hitting this problem on windows-386 on\nWindows 7.\n\nWhy are the buildbots cool but my machine isn't?\n\n\nOn Fri, Oct 7, 2011 at 4:05 AM, <alex.brainman@gmail.com> wrote:\n\n>\n> http://codereview.appspot.com/**4978047/diff/41001/doc/progs/**run<http://codereview.appspot.com/4978047/diff/41001/doc/progs/run>\n> File doc/progs/run (right):\n>\n> http://codereview.appspot.com/**4978047/diff/41001/doc/progs/**\n> run#newcode60<http://codereview.appspot.com/4978047/diff/41001/doc/progs/run#newcode60>\n> doc/progs/run:60: ./$O.out | $2 2>&1 >\"$TMPFILE\"\n> I think you could do:\n> ./$O.out | $2 2>&1 >\"$TMPFILE\" || true\n> to ignore non-zero exit code returned by helloworld3.\n> Unless you have better idea.\n>\n> http://codereview.appspot.com/**4978047/<http://codereview.appspot.com/4978047/>\n>\n",
			"disapproval": false,
			"date": "2011-10-14 17:37:17.582574",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\n",
			"disapproval": false,
			"date": "2011-10-14 19:22:17.843441",
			"approval": true
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Since it's close enough, and I've made the necessary change locally,\nI'll go ahead and submit this now.\n\nOn 14 October 2011 20:29,  <hectorchu@gmail.com> wrote:\n>\n> http://codereview.appspot.com/4978047/diff/67001/doc/progs/run\n> File doc/progs/run (right):\n>\n> http://codereview.appspot.com/4978047/diff/67001/doc/progs/run#newcode50\n> doc/progs/run:50: ./$O.out $2 2>&1 >\"$TMPFILE\"\n> You need to add || true to this line as well.\n>\n> http://codereview.appspot.com/4978047/\n>\n",
			"disapproval": false,
			"date": "2011-10-14 19:35:46.584937",
			"approval": false
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "The buildbots are slower than our PCs?\nIf jp would move this forward, we can all benefit.  Unfortunately this\nfix is only a workaround, so there isn't much enthusiasm.\n\nOn 14 October 2011 18:37, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n> Is this still unresolved? \u00a0I'm hitting this problem on windows-386 on\n> Windows 7.\n> Why are the buildbots cool but my machine isn't?\n>\n> On Fri, Oct 7, 2011 at 4:05 AM, <alex.brainman@gmail.com> wrote:\n>>\n>> http://codereview.appspot.com/4978047/diff/41001/doc/progs/run\n>> File doc/progs/run (right):\n>>\n>> http://codereview.appspot.com/4978047/diff/41001/doc/progs/run#newcode60\n>> doc/progs/run:60: ./$O.out | $2 2>&1 >\"$TMPFILE\"\n>> I think you could do:\n>> ./$O.out | $2 2>&1 >\"$TMPFILE\" || true\n>> to ignore non-zero exit code returned by helloworld3.\n>> Unless you have better idea.\n>>\n>> http://codereview.appspot.com/4978047/\n>\n>\n",
			"disapproval": false,
			"date": "2011-10-14 17:40:50.593617",
			"approval": false
		},
		{
			"sender": "jp@webmaster.ms",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"hectorchu@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, alex.brainman@gmail.com, bsiegert@gmail.com, hectorchu@gmail.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-14 19:03:41.068593",
			"approval": false
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Don't submit yet - I'm looking at this CL now and I don't think it\nruns all the tests.\n\nOn 14 October 2011 20:22, Russ Cox <rsc@golang.org> wrote:\n> LGTM\n>\n>\n",
			"disapproval": false,
			"date": "2011-10-14 19:24:19.527491",
			"approval": false
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"hectorchu@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4978047/diff/67001/doc/progs/run\nFile doc/progs/run (right):\n\nhttp://codereview.appspot.com/4978047/diff/67001/doc/progs/run#newcode50\ndoc/progs/run:50: ./$O.out $2 2>&1 >\"$TMPFILE\"\nYou need to add || true to this line as well.",
			"disapproval": false,
			"date": "2011-10-14 19:29:55.700160",
			"approval": false
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"jp@webmaster.ms",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"bsiegert@gmail.com",
				"hectorchu@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=f650efd9ed8d ***\n\nld: Fixes issue 1899 (\"cannot create 8.out.exe\")\n\nhttp://code.google.com/p/go/issues/detail?id=1899\n\nR=rsc, alex.brainman, bsiegert, hectorchu, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/4978047\n\nCommitter: Hector Chu <hectorchu@gmail.com>",
			"disapproval": false,
			"date": "2011-10-14 19:37:32.287666",
			"approval": false
		}
	],
	"owner_email": "jp@webmaster.ms",
	"private": false,
	"base_url": "",
	"owner": "jp",
	"subject": "code review 4978047: ld: Fixes issue 1899 (\"cannot create 8.out.exe\")",
	"created": "2011-08-31 02:54:01.656109",
	"patchsets": [
		1,
		4,
		5003,
		17001,
		17003,
		16002,
		4004,
		11006,
		24001,
		9003,
		15003,
		6004,
		11011,
		41001,
		64001,
		67001
	],
	"modified": "2011-10-19 12:35:59.895911",
	"closed": true,
	"issue": 4978047
}