{
	"description": "gc: treat DOTMETH like DOT in escape analysis.\n\nFixes issue 2225",
	"cc": [
		"rsc@golang.org",
		"nigeltao@golang.org",
		"dave@cheney.net",
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com",
		"mikioh.mikioh@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4972056/diff/4001/src/cmd/gc/esc.c\nFile src/cmd/gc/esc.c (right):\n\nhttp://codereview.appspot.com/4972056/diff/4001/src/cmd/gc/esc.c#newcode401\nsrc/cmd/gc/esc.c:401: case ODOTMETH:\nI think this is confusing, because it makes it look like\nr.Read is an actual value when it isn't.  When I see code\nlike this I think \"how can this happen?\" and then \n\"what? doesn't esccall already take care of this?\"\n\nI would rather see this handled where it happens and\nwhere it isn't being taken care of, in esc's case OPROC.\nThat says\n\n    escassign(&theSink, n->left->left);\n\nand should say\n\n    // receiver or function being called\n    if(n->left->op == OCALLMETH || n->left->op == OCALLINTER)\n        escassign(&theSink, n->left->left->left);\n    else\n        escassign(&theSink, n->left->left);",
			"disapproval": false,
			"date": "2011-09-05 12:08:53.017756",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=48a64ddf38c8 ***\n\ngc: treat DOTMETH like DOT in escape analysis.\n\nFixes issue 2225\n\nR=rsc, nigeltao, dave\nCC=bradfitz, golang-dev, mikioh.mikioh\nhttp://codereview.appspot.com/4972056",
			"disapproval": false,
			"date": "2011-09-07 17:03:18.592425",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Sep 5, 2011 at 14:08, <rsc@golang.org> wrote:\n\n>\n> http://codereview.appspot.com/**4972056/diff/4001/src/cmd/gc/**esc.c<http://codereview.appspot.com/4972056/diff/4001/src/cmd/gc/esc.c>\n> File src/cmd/gc/esc.c (right):\n>\n> http://codereview.appspot.com/**4972056/diff/4001/src/cmd/gc/**\n> esc.c#newcode401<http://codereview.appspot.com/4972056/diff/4001/src/cmd/gc/esc.c#newcode401>\n> src/cmd/gc/esc.c:401: case ODOTMETH:\n> I think this is confusing, because it makes it look like\n> r.Read is an actual value when it isn't.\n\n\nit is an actual value.  instead of a dotmeth it could be a plain function\nthat is the result of a computation.\n\n\n>  When I see code\n> like this I think \"how can this happen?\" and then\n> \"what? doesn't esccall already take care of this?\"\n>\n>\nfunny, b/c i looked at the -mm output and saw that the sink->odotmeth is\nthere, but didnt make the next step, just like we do with struct members.\n\n\n> I would rather see this handled where it happens and\n> where it isn't being taken care of, in esc's case OPROC.\n> That says\n>\n>    escassign(&theSink, n->left->left);\n>\n> and should say\n>\n>    // receiver or function being called\n>    if(n->left->op == OCALLMETH || n->left->op == OCALLINTER)\n>        escassign(&theSink, n->left->left->left);\n>    else\n>        escassign(&theSink, n->left->left);\n\n\n\ni think that is horribly confusing and more bound to be wrong or introduce\nother bugs.\n\n\n>\n>\n> http://codereview.appspot.com/**4972056/<http://codereview.appspot.com/4972056/>\n>\n",
			"disapproval": false,
			"date": "2011-09-05 13:48:52.069092",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "+ all the cc's on the thread.\n\nOn Wed, Sep 7, 2011 at 07:51, Luuk van Dijk <lvd@google.com> wrote:\n\n>\n>\n> On Mon, Sep 5, 2011 at 16:00, Russ Cox <rsc@golang.org> wrote:\n>\n>> On Mon, Sep 5, 2011 at 09:48, Luuk van Dijk <lvd@google.com> wrote:\n>> > it is an actual value.\n>>\n>> It is not.\n>>\n>\n> <...>\n>\n>\n>>\n>>\n> If someday x.m becomes a value - and we've talked about\n>> doing that - then there shouldn't be code that looks like\n>> it handles it when it does not.\n>>\n>>\n> Added a comment to clarify.\n>\n>\n>> Russ\n>>\n>\n>\n",
			"disapproval": false,
			"date": "2011-09-07 05:53:28.675303",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"dave@cheney.net",
				"reply@codereview.appspotmail.com"
			],
			"text": "s/XXX/2225/ in the CL description.",
			"disapproval": false,
			"date": "2011-09-05 00:49:56.829955",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM, sample code passes on 5g, 6g and 8g.",
			"disapproval": false,
			"date": "2011-09-05 09:41:26.083426",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Sep 5, 2011 at 09:48, Luuk van Dijk <lvd@google.com> wrote:\n> it is an actual value.\n\nIt is not.\n\n$ cat x.go\npackage main\n\nimport \"bytes\"\n\nfunc main() {\n   var b bytes.Buffer\n   _ = b.Read\n}\n$ 6g x.go\nx.go:7: method b.(*Buffer).Read is not an expression, must be called\n$\n\n> instead of a dotmeth it could be a plain function\n> that is the result of a computation.\n\nThat case is already handled correctly.\nIt is go x.m() that is the special case.\n\n> i think that is horribly confusing and more bound to be wrong or introduce\n> other bugs.\n\nIt is handling the receiver separately, just as the receiver\nmust be handled in esccall.\n\nThe receiver is always a special kind of function argument.\n\nThe only case that is mishandled here is go/defer x.m().\nThe fix should be in the handling of go/defer, not a\nchange to the general expression handling.\n\nIf someday x.m becomes a value - and we've talked about\ndoing that - then there shouldn't be code that looks like\nit handles it when it does not.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-09-05 14:00:32.766637",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-09-07 13:53:26.469098",
			"approval": true
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, nigeltao@golang.org, dave@cheney.net (cc: bradfitz@golang.org, golang-dev@googlegroups.com, mikioh.mikioh@gmail.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-09-07 13:56:18.840815",
			"approval": false
		}
	],
	"owner_email": "lvd@google.com",
	"private": false,
	"base_url": "",
	"owner": "lvd",
	"subject": "code review 4972056: gc: treat DOTMETH like DOT in escape analysis.",
	"created": "2011-09-04 19:19:56.333107",
	"patchsets": [
		1,
		2001,
		4001,
		9001,
		12001,
		12002,
		3002,
		7002,
		14003
	],
	"modified": "2011-09-07 17:03:21.159681",
	"closed": true,
	"issue": 4972056
}