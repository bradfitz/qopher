{
	"description": "all: excise some warts found by vet -shadow\nThese are not erroneous, just poor or confusing.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-06-20 18:28:13.030930",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10448043/diff/1/src/pkg/io/io.go\nFile src/pkg/io/io.go (right):\n\nhttps://codereview.appspot.com/10448043/diff/1/src/pkg/io/io.go#newcode483\nsrc/pkg/io/io.go:483: n, err = t.w.Write(p[:n])\nBefore, if Write returned (5, io.ErrShortWrite), teeReader.Read would return (5, io.ErrShortWrite).  Now it's likely to return (0, ErrSomeSubsequentProblem).\n\nI don't like the early return.\n\nThe new version could also loop forever, if the Writer always returns non-zero for both.\n\nhttps://codereview.appspot.com/10448043/diff/1/src/pkg/syscall/syscall_bsd.go\nFile src/pkg/syscall/syscall_bsd.go (right):\n\nhttps://codereview.appspot.com/10448043/diff/1/src/pkg/syscall/syscall_bsd.go#newcode537\nsrc/pkg/syscall/syscall_bsd.go:537: return\nI'm okay with removing the unnecessary \"var err error\" line, but I'd still prefer to see an explicit \"return err\" here.  then it's clear that we're returning with whatever error we currently have in scope, even if the code changes later.",
			"disapproval": false,
			"date": "2013-06-20 22:11:20.553110",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jun 20, 2013 at 3:11 PM, <bradfitz@golang.org> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/10448043/diff/1/src/pkg/**io/io.go<https://codereview.appspot.com/10448043/diff/1/src/pkg/io/io.go>\r\n> File src/pkg/io/io.go (right):\r\n>\r\n> https://codereview.appspot.**com/10448043/diff/1/src/pkg/**\r\n> io/io.go#newcode483<https://codereview.appspot.com/10448043/diff/1/src/pkg/io/io.go#newcode483>\r\n> src/pkg/io/io.go:483: n, err = t.w.Write(p[:n])\r\n> Before, if Write returned (5, io.ErrShortWrite), teeReader.Read would\r\n> return (5, io.ErrShortWrite).  Now it's likely to return (0,\r\n> ErrSomeSubsequentProblem).\r\n>\r\n> I don't like the early return.\r\n>\r\n\r\nI don't like _removing_ the early return.\r\n\r\n\r\n>\r\n> The new version could also loop forever, if the Writer always returns\r\n> non-zero for both.\r\n>\r\n> https://codereview.appspot.**com/10448043/diff/1/src/pkg/**\r\n> syscall/syscall_bsd.go<https://codereview.appspot.com/10448043/diff/1/src/pkg/syscall/syscall_bsd.go>\r\n> File src/pkg/syscall/syscall_bsd.go (right):\r\n>\r\n> https://codereview.appspot.**com/10448043/diff/1/src/pkg/**\r\n> syscall/syscall_bsd.go#**newcode537<https://codereview.appspot.com/10448043/diff/1/src/pkg/syscall/syscall_bsd.go#newcode537>\r\n> src/pkg/syscall/syscall_bsd.**go:537: return\r\n> I'm okay with removing the unnecessary \"var err error\" line, but I'd\r\n> still prefer to see an explicit \"return err\" here.  then it's clear that\r\n> we're returning with whatever error we currently have in scope, even if\r\n> the code changes later.\r\n>\r\n> https://codereview.appspot.**com/10448043/<https://codereview.appspot.com/10448043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-06-20 22:12:05.859660",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10448043/diff/1/src/pkg/io/io.go\nFile src/pkg/io/io.go (right):\n\nhttps://codereview.appspot.com/10448043/diff/1/src/pkg/io/io.go#newcode483\nsrc/pkg/io/io.go:483: n, err = t.w.Write(p[:n])\nOn 2013/06/20 22:11:20, bradfitz wrote:\n> Before, if Write returned (5, io.ErrShortWrite), teeReader.Read would return (5,\n> io.ErrShortWrite).  Now it's likely to return (0, ErrSomeSubsequentProblem).\n> \n> I don't like the early return.\n> \n> The new version could also loop forever, if the Writer always returns non-zero\n> for both.\n> \n> \n\nDone.\n\nhttps://codereview.appspot.com/10448043/diff/1/src/pkg/syscall/syscall_bsd.go\nFile src/pkg/syscall/syscall_bsd.go (right):\n\nhttps://codereview.appspot.com/10448043/diff/1/src/pkg/syscall/syscall_bsd.go#newcode537\nsrc/pkg/syscall/syscall_bsd.go:537: return\nOn 2013/06/20 22:11:20, bradfitz wrote:\n> I'm okay with removing the unnecessary \"var err error\" line, but I'd still\n> prefer to see an explicit \"return err\" here.  then it's clear that we're\n> returning with whatever error we currently have in scope, even if the code\n> changes later.\n\ni was aiming for consistency: every other return in this function looks like this and returns the same variable. does that sentence soften your position?",
			"disapproval": false,
			"date": "2013-06-20 22:33:24.605990",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-06-20 22:33:25.425500",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-06-20 22:35:29.288600",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=5c05d2e8829e ***\n\nall: excise some warts found by vet -shadow\nThese are not erroneous, just poor or confusing.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/10448043",
			"disapproval": false,
			"date": "2013-06-20 23:14:46.103590",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 10448043: all: excise some warts found by vet -shadow",
	"created": "2013-06-20 18:28:06.300920",
	"patchsets": [
		1,
		7001,
		7002
	],
	"modified": "2013-06-20 23:14:47.279040",
	"closed": true,
	"issue": 10448043
}