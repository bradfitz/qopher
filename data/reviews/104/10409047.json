{
	"description": "go.tools/cmd/vet: add check for shadowed variables\nExperimental feature. It's too noisy yet to be enabled by default,\nso it must be enabled explicitly by\n        go tool vet -shadow *.go\nor\n        go tool vet -shadow directory\n(The go command does not know about the -shadow flag.)\n\nFixes issue 5634.",
	"cc": [
		"golang-dev@googlegroups.com",
		"gri@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/10409047/diff/5001/cmd/vet/main.go\nFile cmd/vet/main.go (right):\n\nhttps://codereview.appspot.com/10409047/diff/5001/cmd/vet/main.go#newcode29\ncmd/vet/main.go:29: var strictShadowing = flag.Bool(\"shadowstrict\", false /*TODO*/, \"whether to be strict about shadowing; can be noisy\")\nfyi: TODOs have to be of the form: TODO(uid) to be found by godoc.\n\nhttps://codereview.appspot.com/10409047/diff/5001/cmd/vet/shadow.go\nFile cmd/vet/shadow.go (right):\n\nhttps://codereview.appspot.com/10409047/diff/5001/cmd/vet/shadow.go#newcode8\ncmd/vet/shadow.go:8: with the same name and type as a variable in an outer scope.\nexpand to incorporate spans?\n\nhttps://codereview.appspot.com/10409047/diff/5001/cmd/vet/shadow.go#newcode49\ncmd/vet/shadow.go:49: type Span struct {\nneeds to be exported? or don't care?\n\nhttps://codereview.appspot.com/10409047/diff/5001/cmd/vet/shadow.go#newcode56\ncmd/vet/shadow.go:56: return s.min <= pos && pos <= s.max\npos < s.max\n\nif s.max is the End() of the last mention of the identifier, see below. Seems a bit cleaner.\n\nhttps://codereview.appspot.com/10409047/diff/5001/cmd/vet/shadow.go#newcode65\ncmd/vet/shadow.go:65: pos := ident.Pos()\nIt seems a bit cleaner to take the extent of the identifier into account.\n\nend := ident.End()\n\nhttps://codereview.appspot.com/10409047/diff/5001/cmd/vet/shadow.go#newcode68\ncmd/vet/shadow.go:68: if span.min > pos {\nif pos < span.min {\n\nhttps://codereview.appspot.com/10409047/diff/5001/cmd/vet/shadow.go#newcode71\ncmd/vet/shadow.go:71: if span.max < pos {\nif span.max < end {\n   span.max = end\n}\n\nhttps://codereview.appspot.com/10409047/diff/5001/cmd/vet/shadow.go#newcode75\ncmd/vet/shadow.go:75: span = Span{pos, pos}\nSpan{pos, end}\n\nhttps://codereview.appspot.com/10409047/diff/5001/cmd/vet/shadow.go#newcode94\ncmd/vet/shadow.go:94: f.Badf(expr.Pos(), \"internal error: short variable declaration of non-identifier\")\ns/internal error/invalid AST/ (?)\n\nhttps://codereview.appspot.com/10409047/diff/5001/cmd/vet/shadow.go#newcode116\ncmd/vet/shadow.go:116: f.Badf(expr.Pos(), \"internal error: short variable declaration of non-identifier\")\ns/internal error/invalid AST/\n\nhttps://codereview.appspot.com/10409047/diff/5001/cmd/vet/shadow.go#newcode119\ncmd/vet/shadow.go:119: if rhs, ok := a.Rhs[i].(*ast.Ident); ok {\nuse a type switch here?\n\nswitch rhs := a.Rhs[i] {\ncase *ast.Ident:\n ...\ncase *ast.TypeAssertExpr:\n ...\n}\n\nhttps://codereview.appspot.com/10409047/diff/5001/cmd/vet/shadow.go#newcode165\ncmd/vet/shadow.go:165: f.Badf(spec.Pos(), \"internal error: var GenDecl not ValueSpec\")\ns/internal error/invalid AST/\n\nhttps://codereview.appspot.com/10409047/diff/5001/cmd/vet/testdata/shadow.go\nFile cmd/vet/testdata/shadow.go (right):\n\nhttps://codereview.appspot.com/10409047/diff/5001/cmd/vet/testdata/shadow.go#newcode45\ncmd/vet/testdata/shadow.go:45: var x int // ERROR \"declaration of x shadows declaration at testdata/shadow.go:12\"\nthe compiler would complain about this one, no? it's never used",
			"disapproval": false,
			"date": "2013-06-21 17:20:34.910990",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.tools",
			"disapproval": false,
			"date": "2013-06-20 03:54:20.305450",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=6acfcebcb6c6&repo=tools ***\n\ngo.tools/cmd/vet: add check for shadowed variables\nExperimental feature. It's too noisy yet to be enabled by default,\nso it must be enabled explicitly by\n        go tool vet -shadow *.go\nor\n        go tool vet -shadow directory\n(The go command does not know about the -shadow flag.)\n\nFixes issue 5634.\n\nR=golang-dev, gri\nCC=golang-dev\nhttps://codereview.appspot.com/10409047\n\nhttps://codereview.appspot.com/10409047/diff/5001/cmd/vet/main.go\nFile cmd/vet/main.go (right):\n\nhttps://codereview.appspot.com/10409047/diff/5001/cmd/vet/main.go#newcode29\ncmd/vet/main.go:29: var strictShadowing = flag.Bool(\"shadowstrict\", false /*TODO*/, \"whether to be strict about shadowing; can be noisy\")\nOn 2013/06/21 17:20:35, gri wrote:\n> fyi: TODOs have to be of the form: TODO(uid) to be found by godoc.\n\ni just deleted it. it's obviously work in progress\n\nhttps://codereview.appspot.com/10409047/diff/5001/cmd/vet/shadow.go\nFile cmd/vet/shadow.go (right):\n\nhttps://codereview.appspot.com/10409047/diff/5001/cmd/vet/shadow.go#newcode49\ncmd/vet/shadow.go:49: type Span struct {\nOn 2013/06/21 17:20:35, gri wrote:\n> needs to be exported? or don't care?\n\ndon't care. this is main. there are many Capital types.\n\nhttps://codereview.appspot.com/10409047/diff/5001/cmd/vet/shadow.go#newcode65\ncmd/vet/shadow.go:65: pos := ident.Pos()\nOn 2013/06/21 17:20:35, gri wrote:\n> It seems a bit cleaner to take the extent of the identifier into account.\n> \n> end := ident.End()\n\nDone.\n\nhttps://codereview.appspot.com/10409047/diff/5001/cmd/vet/shadow.go#newcode68\ncmd/vet/shadow.go:68: if span.min > pos {\nOn 2013/06/21 17:20:35, gri wrote:\n> if pos < span.min {\n\ni like to keep them the same order: if a OP b { a = b }\n\nhttps://codereview.appspot.com/10409047/diff/5001/cmd/vet/shadow.go#newcode71\ncmd/vet/shadow.go:71: if span.max < pos {\nOn 2013/06/21 17:20:35, gri wrote:\n> if span.max < end {\n>    span.max = end\n> }\n\nDone.\n\nhttps://codereview.appspot.com/10409047/diff/5001/cmd/vet/shadow.go#newcode75\ncmd/vet/shadow.go:75: span = Span{pos, pos}\nOn 2013/06/21 17:20:35, gri wrote:\n> Span{pos, end}\n\nDone.\n\nhttps://codereview.appspot.com/10409047/diff/5001/cmd/vet/shadow.go#newcode116\ncmd/vet/shadow.go:116: f.Badf(expr.Pos(), \"internal error: short variable declaration of non-identifier\")\nOn 2013/06/21 17:20:35, gri wrote:\n> s/internal error/invalid AST/\n\nDone.\n\nhttps://codereview.appspot.com/10409047/diff/5001/cmd/vet/shadow.go#newcode119\ncmd/vet/shadow.go:119: if rhs, ok := a.Rhs[i].(*ast.Ident); ok {\nOn 2013/06/21 17:20:35, gri wrote:\n> use a type switch here?\n> \n> switch rhs := a.Rhs[i] {\n> case *ast.Ident:\n>  ...\n> case *ast.TypeAssertExpr:\n>  ...\n> }\n\nDone.\n\nhttps://codereview.appspot.com/10409047/diff/5001/cmd/vet/shadow.go#newcode165\ncmd/vet/shadow.go:165: f.Badf(spec.Pos(), \"internal error: var GenDecl not ValueSpec\")\nOn 2013/06/21 17:20:35, gri wrote:\n> s/internal error/invalid AST/\n\nDone.\n\nhttps://codereview.appspot.com/10409047/diff/5001/cmd/vet/testdata/shadow.go\nFile cmd/vet/testdata/shadow.go (right):\n\nhttps://codereview.appspot.com/10409047/diff/5001/cmd/vet/testdata/shadow.go#newcode45\ncmd/vet/testdata/shadow.go:45: var x int // ERROR \"declaration of x shadows declaration at testdata/shadow.go:12\"\nOn 2013/06/21 17:20:35, gri wrote:\n> the compiler would complain about this one, no? it's never used\n\nDone.",
			"disapproval": false,
			"date": "2013-06-21 18:27:56.846540",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10409047/diff/5001/cmd/vet/shadow.go\nFile cmd/vet/shadow.go (right):\n\nhttps://codereview.appspot.com/10409047/diff/5001/cmd/vet/shadow.go#newcode8\ncmd/vet/shadow.go:8: with the same name and type as a variable in an outer scope.\nOn 2013/06/21 17:20:35, gri wrote:\n> expand to incorporate spans?\n\nDone.\n\nhttps://codereview.appspot.com/10409047/diff/5001/cmd/vet/shadow.go#newcode49\ncmd/vet/shadow.go:49: type Span struct {\nOn 2013/06/21 17:20:35, gri wrote:\n> needs to be exported? or don't care?\n\nDone.",
			"disapproval": false,
			"date": "2013-06-21 18:28:07.196230",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I had lots more comments that don't appear here. They weren't important, but yuck.",
			"disapproval": false,
			"date": "2013-06-21 18:28:54.593650",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 10409047: go.tools/cmd/vet: add check for shadowed variables",
	"created": "2013-06-20 03:54:14.951280",
	"patchsets": [
		1,
		3001,
		5001,
		11001
	],
	"modified": "2013-06-21 18:28:54.908770",
	"closed": true,
	"issue": 10409047
}