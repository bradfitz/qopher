{
	"description": "runtime: do not count type info in malloc stats\nOtherwise testing.AllocsPerRun is flaky.\nFixes issue 5000.\nUpdate issue 5525.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"minux.ma@gmail.com",
		"rsc@golang.org",
		"dave@cheney.net"
	],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-05-28 16:32:36.722220",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, May 29, 2013 at 12:37 AM, Rob Pike <r@golang.org> wrote:\r\n\r\n> AllocsPerRun is inherently flaky. There could be background stuff\r\n> going on we'll never control. Perhaps we should instead write our\r\n> tests not to be so sensitive (and build-breaking). I suggest all\r\n> AllocsPerRun tests should be skipped if -test.short is true, so they\r\n> are evaluated by the test owners but not in every build configuration\r\n> in the world.\r\n>\r\nit follows that AllocsPerRun is badly designed API.\r\nbut we do need a way to reliably test malloc counts, if AllocPerRun is\r\nflaky, we should still fix it.\r\n\r\ni.e. we shouldn't add an API that's too flaky to be used in -short mode.\r\n",
			"disapproval": false,
			"date": "2013-05-28 18:56:18.980700",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/28 21:25:34, r wrote:\n> I propose to fix AllocsPerRun to quantize the float64 to an integer\n> value before returning it, so if you get 1.01 as a result, it becomes\n> 1 and\n>   if AllocsPerRun() == 1\n> works, not just\n>   if AllocsPerRun() < 2\n> \n> But let me do that in a separate CL.\n\nFWIW, there are amortized algorithms that allocate not on each iteration (e.g. hashmap), so allocation number can be 1/2 or 1/4.",
			"disapproval": false,
			"date": "2013-05-29 07:45:39.966250",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "You can choose between this CL,\nthis CL: https://codereview.appspot.com/7625044/\nand this CL: https://codereview.appspot.com/9837043\n\nIt's all an attempt to \"fix\" https://code.google.com/p/go/issues/detail?id=5000",
			"disapproval": false,
			"date": "2013-05-28 16:33:53.738570",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/28 16:33:53, dvyukov wrote:\n> You can choose between this CL,\n> this CL: https://codereview.appspot.com/7625044/\n> and this CL: https://codereview.appspot.com/9837043\n> \n> It's all an attempt to \"fix\" https://code.google.com/p/go/issues/detail?id=5000\n\n\nI would prefer https://codereview.appspot.com/9837043\nIt effectively undoes my \"persistentmalloc\" CL, which removes ballast from heap, thus making GCs more often (for very small heaps).\nI suspect 9837043 can also significantly speedup very simple programs that constantly compact heap from 100K to 50K.",
			"disapproval": false,
			"date": "2013-05-28 16:35:33.887470",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Memory allocation stats should not report internal bookkeeping, so I agree\r\nwith the spirit of this CL. However, I don't understand the actual changes.\r\nCan you make it just not include the bookkeeping from the start instead of\r\nsubtracting it out later?\r\n\r\nIt might be nice to make AllocsPerRun round the result to an integer (even\r\nthough it must return a float64). I regret not complaining harder about the\r\nfloat64 result before Go 1.1.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-05-28 21:19:44.426850",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "AllocsPerRun is inherently flaky. There could be background stuff\r\ngoing on we'll never control. Perhaps we should instead write our\r\ntests not to be so sensitive (and build-breaking). I suggest all\r\nAllocsPerRun tests should be skipped if -test.short is true, so they\r\nare evaluated by the test owners but not in every build configuration\r\nin the world.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-05-28 16:37:47.180550",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, May 28, 2013 at 10:55 PM, minux <minux.ma@gmail.com> wrote:\r\n\r\n>\r\n> On Wed, May 29, 2013 at 12:37 AM, Rob Pike <r@golang.org> wrote:\r\n>\r\n>> AllocsPerRun is inherently flaky. There could be background stuff\r\n>> going on we'll never control. Perhaps we should instead write our\r\n>> tests not to be so sensitive (and build-breaking). I suggest all\r\n>> AllocsPerRun tests should be skipped if -test.short is true, so they\r\n>> are evaluated by the test owners but not in every build configuration\r\n>> in the world.\r\n>>\r\n> it follows that AllocsPerRun is badly designed API.\r\n> but we do need a way to reliably test malloc counts, if AllocPerRun is\r\n> flaky, we should still fix it.\r\n>\r\n> i.e. we shouldn't add an API that's too flaky to be used in -short mode.\r\n>\r\n\r\n\r\nWe can eliminate the main current source flakyness in long run.\r\n",
			"disapproval": false,
			"date": "2013-05-28 18:57:57.630280",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, May 29, 2013 at 2:57 AM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n\r\n> On Tue, May 28, 2013 at 10:55 PM, minux <minux.ma@gmail.com> wrote:\r\n>\r\n>> On Wed, May 29, 2013 at 12:37 AM, Rob Pike <r@golang.org> wrote:\r\n>>\r\n>>> AllocsPerRun is inherently flaky. There could be background stuff\r\n>>> going on we'll never control. Perhaps we should instead write our\r\n>>> tests not to be so sensitive (and build-breaking). I suggest all\r\n>>> AllocsPerRun tests should be skipped if -test.short is true, so they\r\n>>> are evaluated by the test owners but not in every build configuration\r\n>>> in the world.\r\n>>>\r\n>> it follows that AllocsPerRun is badly designed API.\r\n>> but we do need a way to reliably test malloc counts, if AllocPerRun is\r\n>> flaky, we should still fix it.\r\n>>\r\n>> i.e. we shouldn't add an API that's too flaky to be used in -short mode.\r\n>>\r\n> We can eliminate the main current source flakyness in long run.\r\n>\r\nIf it's the case, i vote for keeping the current AllocsPerRun tests as is\r\nand\r\naim to remove the (current) source of flakyness in the future.\r\n\r\nif AllocsPerRun is flaky in -short mode, why won't it be flaky in non -short\r\nmode? If it's always flaky, the API is broken as it can't be reliably used.\r\n\r\ncould we change AllocsPerRun to remove the flakyness?\r\nfor example, run more than 1 times to warm up?\r\ndisable GC during run?\r\n",
			"disapproval": false,
			"date": "2013-05-28 19:05:42.333720",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I propose to fix AllocsPerRun to quantize the float64 to an integer\r\nvalue before returning it, so if you get 1.01 as a result, it becomes\r\n1 and\r\n  if AllocsPerRun() == 1\r\nworks, not just\r\n  if AllocsPerRun() < 2\r\n\r\nBut let me do that in a separate CL.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-05-28 21:25:34.948500",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/28 21:19:44, rsc wrote:\n> Memory allocation stats should not report internal bookkeeping, so I agree\n> with the spirit of this CL. However, I don't understand the actual changes.\n> Can you make it just not include the bookkeeping from the start instead of\n> subtracting it out later?\n\n\nDo you mean passing FlagNoStats flag to mallocgc/free? 2 reasons:\n1. We don't knon when free happens, it's impossible to call free directly because it will lead to several cases of recursion/deadlock, so it's freed by GC.\n2. There is another pending CL (https://codereview.appspot.com/9776043/) that removes explicit stats collection, instead stats are derived from current heap state. This cuts 6% from malloc as now, when other parts will become faster it will be 12%, which means 2% end-to-end speedup for real apps (vtocc).",
			"disapproval": false,
			"date": "2013-05-29 07:44:02.026170",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9782047/diff/6001/src/pkg/testing/allocs.go\nFile src/pkg/testing/allocs.go (right):\n\nhttps://codereview.appspot.com/9782047/diff/6001/src/pkg/testing/allocs.go#newcode35\nsrc/pkg/testing/allocs.go:35: // This is need to collect type info blocks, see issue 5000.\npossibly reword this as\n\n// This is needed to ensure type info blocks are collected prior to ReadMemStats. See issue 5000.\n\n^ assuming I interpreted the problem, and your solution correctly.",
			"disapproval": false,
			"date": "2013-05-29 09:07:15.772410",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-05-31 06:39:23.461090",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 9782047: runtime: do not count type info in malloc stats",
	"created": "2013-05-28 15:47:01.302640",
	"patchsets": [
		1,
		2001,
		4001,
		6001
	],
	"modified": "2013-05-31 06:39:24.841170",
	"closed": true,
	"issue": 9782047
}