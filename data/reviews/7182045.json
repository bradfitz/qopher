{
	"description": "net/http: fix Content-Length/Transfer-Encoding on HEAD requests\n\nnet/http currently assumes that the response to a HEAD request\n    will always have a Content-Length header. This is incorrect.\n\nRFC2616 says: \"The HEAD method is identical to GET except that\nthe server MUST NOT return a message-body in the response. The\nmetainformation contained in the HTTP headers in response to a\nHEAD request SHOULD be identical to the information sent in\nresponse to a GET request. This method can be used for\nobtaining metainformation about the entity implied by the\nrequest without transferring the entity-body itself. This\nmethod is often used for testing hypertext links for validity,\naccessibility, and recent modification.\"\n\nThis means that three cases are possible: a Content-Length\nheader, a Transfer-Encoding header or neither. In the wild the\nfollowing sites exhibit these behaviours (curl -I):\n\nHEAD on http://www.google.co.uk/ has Transfer-Encoding: chunked\nHEAD on http://www.bbc.co.uk/    has Content-Length: 45247\nHEAD on http://edition.cnn.com/  has neither header\n\nThis patch does not remove the ErrMissingContentLength error\nfor compatibility reasons, but it is no longer used.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "jgrahamc@gmail.com",
			"recipients": [
				"jgrahamc@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-01-22 16:13:43.779540",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"jgrahamc@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7182045/diff/2001/src/pkg/net/http/response_test.go\nFile src/pkg/net/http/response_test.go (right):\n\nhttps://codereview.appspot.com/7182045/diff/2001/src/pkg/net/http/response_test.go#newcode182\nsrc/pkg/net/http/response_test.go:182: \"HTTP/1.0 200 OK\\r\\n\" +\nLittle weird to see \"HTTP/1.0\" (which doesn't support chunking) with a \"Transfer-Encoding: chunked\" header.  That's kinda irrelevant here, but it's distracting and makes it look like that's what's being tested.\n\nIf not, let's change it to HTTP/1.1 here.  I don't think we care about testing the behavior of 1.0 + chunking.\n\nhttps://codereview.appspot.com/7182045/diff/2001/src/pkg/net/http/response_test.go#newcode195\nsrc/pkg/net/http/response_test.go:195: Close:            true,\nwhat makes this Close: true?  Oh, because it's HTTP/1.0?  Then let's have another test for HTTP/1.1 to see that Close can ever be false in response to HEAD.",
			"disapproval": false,
			"date": "2013-01-22 20:43:14.427960",
			"approval": false
		},
		{
			"sender": "jgrahamc@gmail.com",
			"recipients": [
				"jgrahamc@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7182045/diff/2001/src/pkg/net/http/response_test.go\nFile src/pkg/net/http/response_test.go (right):\n\nhttps://codereview.appspot.com/7182045/diff/2001/src/pkg/net/http/response_test.go#newcode182\nsrc/pkg/net/http/response_test.go:182: \"HTTP/1.0 200 OK\\r\\n\" +\nAgreed; will change to HTTP/1.1. Also there are other tests which are using HTTP/1.0 and chunking: I will change those also.\n\nhttps://codereview.appspot.com/7182045/diff/2001/src/pkg/net/http/response_test.go#newcode195\nsrc/pkg/net/http/response_test.go:195: Close:            true,\nOn 2013/01/22 20:43:14, bradfitz wrote:\n> what makes this Close: true?  Oh, because it's HTTP/1.0?  Then let's have\n> another test for HTTP/1.1 to see that Close can ever be false in response to\n> HEAD.\n\nAdded.",
			"disapproval": false,
			"date": "2013-01-23 09:25:35.784610",
			"approval": false
		},
		{
			"sender": "jgrahamc@gmail.com",
			"recipients": [
				"jgrahamc@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7182045/diff/8001/src/pkg/net/http/transfer.go\nFile src/pkg/net/http/transfer.go (left):\n\nhttps://codereview.appspot.com/7182045/diff/8001/src/pkg/net/http/transfer.go#oldcode125\nsrc/pkg/net/http/transfer.go:125: if t.ResponseToHEAD {\nOn 2013/01/24 01:01:06, bradfitz wrote:\n> this CL doesn't contain a test for this change.\n\nThat's implicit in the other tests for HEAD handling. Since HEAD should be handled like a GET so there's no need for a special case in the shouldSendContentLength function. The other ifs within that function handle this case (i.e. it's chunked---first if; there's a content length--second if).",
			"disapproval": false,
			"date": "2013-01-25 17:00:50.684920",
			"approval": false
		},
		{
			"sender": "jgrahamc@gmail.com",
			"recipients": [
				"jgrahamc@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-23 09:35:03.215470",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"jgrahamc@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7182045/diff/8001/src/pkg/net/http/transfer.go\nFile src/pkg/net/http/transfer.go (left):\n\nhttps://codereview.appspot.com/7182045/diff/8001/src/pkg/net/http/transfer.go#oldcode125\nsrc/pkg/net/http/transfer.go:125: if t.ResponseToHEAD {\nthis CL doesn't contain a test for this change.",
			"disapproval": false,
			"date": "2013-01-24 01:01:06.422860",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Fri, Jan 25, 2013 at 9:00 AM, <jgrahamc@gmail.com> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/7182045/diff/8001/src/pkg/**\r\n> net/http/transfer.go<https://codereview.appspot.com/7182045/diff/8001/src/pkg/net/http/transfer.go>\r\n> File src/pkg/net/http/transfer.go (left):\r\n>\r\n> https://codereview.appspot.**com/7182045/diff/8001/src/pkg/**\r\n> net/http/transfer.go#**oldcode125<https://codereview.appspot.com/7182045/diff/8001/src/pkg/net/http/transfer.go#oldcode125>\r\n> src/pkg/net/http/transfer.go:**125: if t.ResponseToHEAD {\r\n> On 2013/01/24 01:01:06, bradfitz wrote:\r\n>\r\n>> this CL doesn't contain a test for this change.\r\n>>\r\n>\r\n> That's implicit in the other tests for HEAD handling. Since HEAD should\r\n> be handled like a GET so there's no need for a special case in the\r\n> shouldSendContentLength function. The other ifs within that function\r\n> handle this case (i.e. it's chunked---first if; there's a content\r\n> length--second if).\r\n>\r\n> https://codereview.appspot.**com/7182045/<https://codereview.appspot.com/7182045/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-25 18:20:04.869560",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"jgrahamc@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=8184de6499b0 ***\n\nnet/http: fix Content-Length/Transfer-Encoding on HEAD requests\n\nnet/http currently assumes that the response to a HEAD request\n    will always have a Content-Length header. This is incorrect.\n\nRFC2616 says: \"The HEAD method is identical to GET except that\nthe server MUST NOT return a message-body in the response. The\nmetainformation contained in the HTTP headers in response to a\nHEAD request SHOULD be identical to the information sent in\nresponse to a GET request. This method can be used for\nobtaining metainformation about the entity implied by the\nrequest without transferring the entity-body itself. This\nmethod is often used for testing hypertext links for validity,\naccessibility, and recent modification.\"\n\nThis means that three cases are possible: a Content-Length\nheader, a Transfer-Encoding header or neither. In the wild the\nfollowing sites exhibit these behaviours (curl -I):\n\nHEAD on http://www.google.co.uk/ has Transfer-Encoding: chunked\nHEAD on http://www.bbc.co.uk/    has Content-Length: 45247\nHEAD on http://edition.cnn.com/  has neither header\n\nThis patch does not remove the ErrMissingContentLength error\nfor compatibility reasons, but it is no longer used.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/7182045\n\nCommitter: Brad Fitzpatrick <bradfitz@golang.org>",
			"disapproval": false,
			"date": "2013-01-25 18:20:23.165930",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"jgrahamc@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=close",
			"disapproval": false,
			"date": "2013-07-20 20:01:31.461530",
			"approval": false
		}
	],
	"owner_email": "jgrahamc@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "jgc",
	"subject": "code review 7182045: net/http: fix Content-Length/Transfer-Encoding on HEAD ...",
	"created": "2013-01-22 16:12:09.764930",
	"patchsets": [
		1,
		2001,
		8001
	],
	"modified": "2013-07-20 20:01:31.804940",
	"closed": false,
	"issue": 7182045
}