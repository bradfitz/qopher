{
	"description": "runtime: fix GC scanning of slices\nIf a slice points to an array embedded in a struct,\nthe whole struct can be incorrectly scanned as the slice buffer.\nFixes issue 5443.",
	"cc": [
		"cshapiro@golang.org",
		"iant@golang.org",
		"r@golang.org",
		"cshapiro@google.com",
		"minux.ma@gmail.com",
		"bradfitz@golang.org",
		"gobot@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-05-15 17:15:59.342850",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Nice test!\r\n\r\n\r\n\r\nOn Wed, May 15, 2013 at 10:15 AM, <dvyukov@google.com> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://dvyukov%40google.com@**code.google.com/p/go/<http://40google.com@code.google.com/p/go/>\r\n>\r\n>\r\n> Description:\r\n> runtime: fix heap corruption\r\n> Fixes issue 5443.\r\n>\r\n> Please review this at https://codereview.appspot.**com/9372044/<https://codereview.appspot.com/9372044/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/runtime/gc_test.go\r\n>   M src/pkg/runtime/mgc0.c\r\n>\r\n>\r\n> Index: src/pkg/runtime/gc_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/runtime/gc_test.go\r\n> +++ b/src/pkg/runtime/gc_test.go\r\n> @@ -97,3 +97,27 @@\r\n>                 m[a] = T{}\r\n>         }\r\n>  }\r\n> +\r\n> +func TestGcArraySlice(t *testing.T) {\r\n> +       type X struct {\r\n> +               buf     [1]byte\r\n> +               nextbuf []byte\r\n> +               next    *X\r\n> +       }\r\n> +       var head *X\r\n> +       for i := 0; i < 10; i++ {\r\n> +               p := &X{}\r\n> +               p.buf[0] = 42\r\n> +               p.next = head\r\n> +               if head != nil {\r\n> +                       p.nextbuf = head.buf[:]\r\n> +               }\r\n> +               head = p\r\n> +               runtime.GC()\r\n> +       }\r\n> +       for p := head; p != nil; p = p.next {\r\n> +               if p.buf[0] != 42 {\r\n> +                       t.Fatal(\"corrupted heap\")\r\n> +               }\r\n> +       }\r\n> +}\r\n> Index: src/pkg/runtime/mgc0.c\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/runtime/mgc0.c\r\n> +++ b/src/pkg/runtime/mgc0.c\r\n> @@ -799,7 +799,10 @@\r\n>                         sliceptr = (Slice*)(stack_top.b + pc[1]);\r\n>                         if(sliceptr->cap != 0) {\r\n>                                 obj = sliceptr->array;\r\n> -                               objti = pc[2] | PRECISE | LOOP;\r\n> +                               // Can't use slice element type for\r\n> scanning,\r\n> +                               // because if it points to an array embed\r\n> in a struct,\r\n> +                               // we will scan the whole struct as the\r\n> slice.\r\n> +                               // So just obtain type info from heap.\r\n>                         }\r\n>                         pc += 3;\r\n>                         break;\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-15 17:25:56.719390",
			"approval": false
		},
		{
			"sender": "gobot@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"cshapiro@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=cshapiro (assigned by r)",
			"disapproval": false,
			"date": "2013-05-15 17:34:14.385870",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"cshapiro@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThanks.",
			"disapproval": false,
			"date": "2013-05-15 18:01:33.008620",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"cshapiro@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9372044/diff/5001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/9372044/diff/5001/src/pkg/runtime/mgc0.c#newcode803\nsrc/pkg/runtime/mgc0.c:803: // because if it points to an array embed in a struct,\ns/embed/embedded/",
			"disapproval": false,
			"date": "2013-05-15 18:16:37.484440",
			"approval": false
		},
		{
			"sender": "cshapiro@google.com",
			"recipients": [
				"dvyukov@google.com",
				"cshapiro@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"cshapiro@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9372044/diff/5001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/9372044/diff/5001/src/pkg/runtime/mgc0.c#newcode802\nsrc/pkg/runtime/mgc0.c:802: // Can't use slice element type for scanning,\nI am a little bit confused by this comment.  Is the value at pc[2] bad?  Where is it being generated?  Why isn't the fix there?",
			"disapproval": false,
			"date": "2013-05-15 18:23:05.566060",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"cshapiro@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"cshapiro@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9372044/diff/5001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/9372044/diff/5001/src/pkg/runtime/mgc0.c#newcode802\nsrc/pkg/runtime/mgc0.c:802: // Can't use slice element type for scanning,\nOn 2013/05/15 18:23:05, cshapiro1 wrote:\n> I am a little bit confused by this comment.  Is the value at pc[2] bad?  Where\n> is it being generated?  Why isn't the fix there?\n\nIt is correct, but it is correct only for the array. But when we scan a slice we don't know it's size, so we scan the whole memory block using that type.\nIf the array sits in the beginning of a struct, we will scan the whole struct as if it an array.\nSo the problem is actually with the LOOP flag.\n\nhttps://codereview.appspot.com/9372044/diff/5001/src/pkg/runtime/mgc0.c#newcode803\nsrc/pkg/runtime/mgc0.c:803: // because if it points to an array embed in a struct,\nOn 2013/05/15 18:16:37, r wrote:\n> s/embed/embedded/\n\nDone.",
			"disapproval": false,
			"date": "2013-05-15 18:30:28.561130",
			"approval": false
		},
		{
			"sender": "cshapiro@google.com",
			"recipients": [
				"dvyukov@google.com",
				"cshapiro@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"cshapiro@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9372044/diff/5001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/9372044/diff/5001/src/pkg/runtime/mgc0.c#newcode802\nsrc/pkg/runtime/mgc0.c:802: // Can't use slice element type for scanning,\nCan we get a better commit log description?\n\nIf I understand you correctly, the type of the slice is assumed to be the type of the entire memory block pointed to by the slice?\n\nIf this is true, then if my slice points to an array that is *anywhere* inside of a struct, the entire struct is assumed to be of the same type as the slice.  Correct?\n\nIt sounds like the logic for LOOP is incorrect.  There should be (at least) a TODO at the site where it is generated referring to this issue.  Do we have a bug for this?",
			"disapproval": false,
			"date": "2013-05-15 18:39:01.177890",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"cshapiro@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"cshapiro@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9372044/diff/5001/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/9372044/diff/5001/src/pkg/runtime/mgc0.c#newcode802\nsrc/pkg/runtime/mgc0.c:802: // Can't use slice element type for scanning,\nOn 2013/05/15 18:39:01, cshapiro1 wrote:\n> If I understand you correctly, the type of the slice is assumed to be the type\n> of the entire memory block pointed to by the slice?\n\nYes.\n\n> If this is true, then if my slice points to an array that is *anywhere* inside\n\nNo, if it is *somewhere* then flushptrbuf() will see that's a pointer into middle of a block and drop type info. So it will magically work.\n\n> of a struct, the entire struct is assumed to be of the same type as the slice. \n> Correct?\n\nCorrect. But it happens iff the slice points at the beginning of the memory block.\n\n\n> It sounds like the logic for LOOP is incorrect.  There should be (at least) a\n> TODO at the site where it is generated referring to this issue.  Do we have a\n> bug for this?\n\nThe LOOP is not generated, it was added right here.",
			"disapproval": false,
			"date": "2013-05-15 19:23:10.760830",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"cshapiro@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"cshapiro@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/15 18:39:01, cshapiro1 wrote:\n> https://codereview.appspot.com/9372044/diff/5001/src/pkg/runtime/mgc0.c\n> File src/pkg/runtime/mgc0.c (right):\n> \n> https://codereview.appspot.com/9372044/diff/5001/src/pkg/runtime/mgc0.c#newcode802\n> src/pkg/runtime/mgc0.c:802: // Can't use slice element type for scanning,\n> Can we get a better commit log description?\n\nDone",
			"disapproval": false,
			"date": "2013-05-15 19:24:34.466890",
			"approval": false
		},
		{
			"sender": "cshapiro@google.com",
			"recipients": [
				"dvyukov@google.com",
				"cshapiro@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"cshapiro@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM, thanks.",
			"disapproval": false,
			"date": "2013-05-15 19:34:27.466180",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"cshapiro@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"cshapiro@google.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think it's worth mentioning that this only happens iff\nthe array is at the beginning of the struct.",
			"disapproval": false,
			"date": "2013-05-15 19:46:54.999290",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"cshapiro@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"cshapiro@google.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=1abed5873071 ***\n\nruntime: fix GC scanning of slices\nIf a slice points to an array embedded in a struct,\nthe whole struct can be incorrectly scanned as the slice buffer.\nFixes issue 5443.\n\nR=cshapiro, iant, r, cshapiro, minux.ma\nCC=bradfitz, gobot, golang-dev\nhttps://codereview.appspot.com/9372044",
			"disapproval": false,
			"date": "2013-05-15 19:50:44.471410",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"cshapiro@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"cshapiro@google.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/15 19:46:54, minux wrote:\n> I think it's worth mentioning that this only happens iff\n> the array is at the beginning of the struct.\n\nDone",
			"disapproval": false,
			"date": "2013-05-15 19:51:06.780490",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 9372044: runtime: fix heap corruption",
	"created": "2013-05-15 17:14:30.486260",
	"patchsets": [
		1,
		2001,
		5001,
		6003,
		4004,
		23001
	],
	"modified": "2013-05-15 19:51:07.110000",
	"closed": true,
	"issue": 9372044
}