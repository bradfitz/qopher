{
	"description": "go.blog: update the profiling Go article\nFixes issue 3893.",
	"cc": [
		"adg@golang.org",
		"r@golang.org",
		"rsc@golang.org",
		"tracey.brendan@gmail.com",
		"remyoudompheng@gmail.com",
		"a2800276@gmail.com",
		"arnehormann@gmail.com",
		"jonathan@titanous.com",
		"dave@cheney.net",
		"go.peter.90@gmail.com",
		"christoph@tux21b.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "tracey.brendan@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Let me ammend my comment to be:\r\n\r\nI think this could be more clear about why pprof is being used rather than \r\ngo test. If there's not a lot of difference, would it be hard to re-write \r\nthis post to use go test all the way? Speaking about go test rather than \r\npprof would go a better job of hilighting the go suite. If there are \r\ndifferences, making a comment here about the relative strengths and \r\nweaknesses would be useful.\r\n",
			"disapproval": false,
			"date": "2013-03-27 23:38:46.504440",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"adg@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"tracey.brendan@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7797046/diff/8001/content/profiling-go-programs.article\nFile content/profiling-go-programs.article (right):\n\nhttps://codereview.appspot.com/7797046/diff/8001/content/profiling-go-programs.article#newcode2\ncontent/profiling-go-programs.article:2: 24 March 2013\nLeave the date alone. This is still a historical document.\n\nYou can add a comment \n# updated 24 March 2013\n\nhttps://codereview.appspot.com/7797046/diff/8001/content/profiling-go-programs.article#newcode13\ncontent/profiling-go-programs.article:13: Hundt's paper does not specify which versions of the C++, Go, Java, and Scala tools he used. In this blog post, we will be using the most recent development snapshot of the Go compiler on amd64 and the most recent version of `g++` -- 4.8.0, which was released 2 days ago. (We will not be using Java or Scala, because we are not skilled at writing efficient programs in either of those languages, so the comparison would be unfair. Since C++ was the fastest language in the paper, the comparisons here with C++ should suffice.)\nI think it's important to keep the historical details of this document intact, but include parenthetical updates where things have been revised.\n\nRemember that this article was originally a rebuttal to Hundt's paper, not just an intro to profiling in Go.",
			"disapproval": false,
			"date": "2013-03-28 00:14:23.672660",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"adg@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@golang.org, r@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.blog",
			"disapproval": false,
			"date": "2013-03-27 21:33:31.857820",
			"approval": false
		},
		{
			"sender": "tracey.brendan@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm not a developer, but I have been trying to read through this post \r\nrecently, so I was happy to see it get an update. As an outsider, here are \r\nsome of my thoughts\r\n\r\n\"In this blog post, we will be using the most recent development sna\r\npshot of the Go compiler on amd64 and the most recent version of `g++`\"\r\n\r\nIs it possible to make this use what will be the official Go 1.1 compiler? \r\nI realize there's a catch-22 about when the go 1.1 version is fixed and \r\nwhen the blog post is updated, but it will be more clear to people that \r\nthey don't need to be using tip to apply the methods in that post. (Maybe \r\nthat's already in the works)\r\n\r\n\"If the code used th\r\ne [[http://golang.org/pkg/testing/][Go testing package]]'s benchmarking \r\nsupport, we could use gotest's standard `-cpuprofile` and `-memprofile` \r\nflags. In a stan dalone program like this one, we have to import \r\n`runtime/pprof` and add a few li \r\nnes of code:\"\r\n\r\nThis line here makes it sound like the \"normal\" way to profile is to use \r\nthe benchmarking support rather than pprof. In any event, I don't think \r\nthis line is particularly clear when to use pprof vs. go test. Perhaps this \r\ncould be changed to something like \"If this code was part of a package, it \r\ncould use go test, but since it's a standalone program we need to use \r\npprof\". \r\n\r\n \"The third column shows the running total during the listi\r\nng: the first three rows account for 32.4% of the samples.\"\r\n\r\nThe third column shows the cumulative percentile of the listing: ...\r\n\r\n\"In fact the total for `main.FindLoops` and `main.main` should have been \r\n100%, bu\r\nt each stack sample only includes the bottom 100 stack frames; during about \r\na qu arter of the samples, the recursive `main.DFS` function was more than \r\n100 frames deeper than `main.main` so the complete trace was truncated.\"\r\n\r\nIt seems to me like this might be a problem if you're trying to get a sense \r\nof scope for your program (maybe you have a lot of programs on the stack, \r\nand so some of the statistics will be messed up). If there is a way to \r\nmodify this behavior, could you add it? If my concern is mistaken (for \r\nexample, it seems like the ordering is basically right in that list, is it \r\njust that we're getting lucky?), could you say why it doesn't really matter \r\nwhy the count is off?\r\n\r\n\"The related command `disasm` shows a disassembly of the function instead of\r\na source listing; when there are enough samples this can help you see which \r\nins tructions are expensive.\"\r\n\r\nCould you provide a short (parenthetical) description of \"disassembly\", or \r\nmake that be a link to a description?\r\n\r\n\"As mentioned above, [[http://golang.org/cmd/go/#Test_packages][`go test`]] \r\ninclu\r\ndes these profiling flags already: define a \r\n[[http://golang.org/pkg/testing/][be nchmark function]] and you're all set.\"\r\n\r\nCould you add a code example for this? For example, creating a benchmark \r\nscript for FindLoops (and giving a hyperlink to the code), and then show a \r\ncall to `go test`?\r\n\r\nThanks\r\n",
			"disapproval": false,
			"date": "2013-03-27 22:53:43.822750",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 27 Mar 2013 23:53, <tracey.brendan@gmail.com> wrote:\r\n> \"If the code used th\r\n> e [[http://golang.org/pkg/testing/][Go testing package]]'s benchmarking\r\nsupport, we could use gotest's standard `-cpuprofile` and `-memprofile`\r\nflags. In a stan dalone program like this one, we have to import\r\n`runtime/pprof` and add a few li\r\n> nes of code:\"\r\n>\r\n> This line here makes it sound like the \"normal\" way to profile is to use\r\nthe benchmarking support rather than pprof. In any event, I don't think\r\nthis line is particularly clear when to use pprof vs. go test. Perhaps this\r\ncould be changed to something like \"If this code was part of a package, it\r\ncould use go test, but since it's a standalone program we need to use\r\npprof\".\r\n>\r\n\r\nIt is possible to use go test even with standalone programs.\r\n\r\nR\u00e9my\r\n",
			"disapproval": false,
			"date": "2013-03-27 23:05:20.209010",
			"approval": false
		},
		{
			"sender": "a2800276@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\r\n>\r\n>\r\n> \"If the code used the [[http://golang.org/pkg/testing/][Go testing \r\n> package]]'s benchmarking support,\r\n> we could use gotest's standard `-cpuprofile` and `-memprofile` flags. In a \r\n> stan dalone program like this one, we have to import `runtime/pprof` and \r\n> add a few li \r\n> nes of code:\"\r\n>\r\n> This line here makes it sound like the \"normal\" way to profile is to use \r\n> the benchmarking support rather than pprof. In any event, I don't think \r\n> this line is particularly clear when to use pprof vs. go test. Perhaps this \r\n> could be changed to something like \"If this code was part of a package, it \r\n> could use go test, but since it's a standalone program we need to use \r\n> pprof\". \r\n>\r\n\r\nGlad this came up. I was recently trying to profile a benchmark in this \r\n\"normal\" way. The whole process isn't really described very well (and \r\nshould be updated in the tools, as well)\r\n\r\nFrom the docs for `testflag` (go help testflag) I expected \r\n `-test.cpuprofile/memprofile prof.out` to produce a human readable output \r\n(something like  top20 in pprof). But it yields a binary file and the docs \r\ngive absolutely no indication of what you're supposed to do with the output.\r\n\r\nYou'll need to query google to find out about `pprof`. There's little \r\ninformation about pprof, part from a linke \r\nto https://code.google.com/p/gperftools/wiki/GooglePerformanceTools which \r\ndoesn't really mention pprof at all. Unfortunately, trying to to just run \r\n`go tool pprof output_from_go_test_with_profile_flags` won't work though, \r\nand without knowing the answer it's hard to guess why not. \r\n\r\nOf course the answer is that `pprof` requires the profile data AS WELL as \r\nthe original binary (for symbol resolution, I expect).\r\n\r\nBut, being a naive user, there was no binary, I just ran `go test` with \r\nprofiling flags. If I know what I'm doing, I'll know to generate the binary \r\nwith the `-c` flags to `go test`, but this isn't explicitly mentioned.\r\n\r\nin short:\r\n\r\n* documentation of -test.cpuprofile, -test.memprofile should provide a hint \r\nthat the generated profile data can be viewed with `tool pprof`\r\n*  (...) should explain how to generate \"binary\" required by `pprof`\r\n* OR use of -test.(...)profile flags when running `go test` should generate \r\n\"binary\" required by `pprof` automatically\r\n",
			"disapproval": false,
			"date": "2013-03-28 09:19:10.476120",
			"approval": false
		},
		{
			"sender": "arnehormann@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"adg@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"tracey.brendan@gmail.com",
				"remyoudompheng@gmail.com",
				"a2800276@gmail.com",
				"arnehormann@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7797046/diff/8001/content/profiling-go-programs.article\nFile content/profiling-go-programs.article (right):\n\nhttps://codereview.appspot.com/7797046/diff/8001/content/profiling-go-programs.article#newcode76\ncontent/profiling-go-programs.article:76: $ $ make havlak1.prof\nremove one \"$ \"",
			"disapproval": false,
			"date": "2013-03-28 09:46:50.680260",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "At tip, \"go help testflag\" now includes this paragraph. This change\r\nwas made a week or so ago.\r\n\r\n\r\nSeveral of the flags control profiling and write an execution profile\r\nsuitable for \"go tool pprof\"; run \"go tool pprof help\" for more\r\ninformation.  The --alloc_space, --alloc_objects, and --show_bytes\r\noptions of pprof control how the information is presented.\r\n",
			"disapproval": false,
			"date": "2013-03-28 17:11:41.449920",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"adg@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"tracey.brendan@gmail.com",
				"remyoudompheng@gmail.com",
				"a2800276@gmail.com",
				"arnehormann@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/28 00:14:23, adg wrote:\n> https://codereview.appspot.com/7797046/diff/8001/content/profiling-go-programs.article#newcode13\n> content/profiling-go-programs.article:13: Hundt's paper does not specify which\n> versions of the C++, Go, Java, and Scala tools he used. In this blog post, we\n> will be using the most recent development snapshot of the Go compiler on amd64\n> and the most recent version of `g++` -- 4.8.0, which was released 2 days ago.\n> (We will not be using Java or Scala, because we are not skilled at writing\n> efficient programs in either of those languages, so the comparison would be\n> unfair. Since C++ was the fastest language in the paper, the comparisons here\n> with C++ should suffice.)\n> I think it's important to keep the historical details of this document intact,\n> but include parenthetical updates where things have been revised.\nOne of the problems is there are vast differences between Go 1.1 and Go back\nin 2011. For example, should I also keep the old xtime data?\nshould I keep the old profiling data and explanations?\n(as you can see, part of the memory problem doesn't exist in Go 1.1, so I\nremoved them, should I keep them?)",
			"disapproval": false,
			"date": "2013-03-30 18:19:33.146090",
			"approval": false
		},
		{
			"sender": "jonathan@titanous.com",
			"recipients": [
				"minux.ma@gmail.com",
				"adg@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"tracey.brendan@gmail.com",
				"remyoudompheng@gmail.com",
				"a2800276@gmail.com",
				"arnehormann@gmail.com",
				"jonathan@titanous.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/30 18:19:33, minux wrote:\n> On 2013/03/28 00:14:23, adg wrote:\n> >\n> https://codereview.appspot.com/7797046/diff/8001/content/profiling-go-programs.article#newcode13\n> > content/profiling-go-programs.article:13: Hundt's paper does not specify which\n> > versions of the C++, Go, Java, and Scala tools he used. In this blog post, we\n> > will be using the most recent development snapshot of the Go compiler on amd64\n> > and the most recent version of `g++` -- 4.8.0, which was released 2 days ago.\n> > (We will not be using Java or Scala, because we are not skilled at writing\n> > efficient programs in either of those languages, so the comparison would be\n> > unfair. Since C++ was the fastest language in the paper, the comparisons here\n> > with C++ should suffice.)\n> > I think it's important to keep the historical details of this document intact,\n> > but include parenthetical updates where things have been revised.\n> One of the problems is there are vast differences between Go 1.1 and Go back\n> in 2011. For example, should I also keep the old xtime data?\n> should I keep the old profiling data and explanations?\n> (as you can see, part of the memory problem doesn't exist in Go 1.1, so I\n> removed them, should I keep them?)\n\nWhy not turn this into a completely new post targeted at Go 1.1, and add a link in the old post to the new one?",
			"disapproval": false,
			"date": "2013-03-30 19:09:51.395440",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think that is a better idea. As the author of the original issue,\r\nall I wanted was to correct the paths and command names in the article\r\nto help people who wandered onto the IRC channel.\r\n\r\nMinux has gone above and beyond, and arguably this should be a new post.\r\n\r\nCheers\r\n\r\nDave\r\n\r\nOn Sun, Mar 31, 2013 at 6:09 AM,  <jonathan@titanous.com> wrote:\r\n> On 2013/03/30 18:19:33, minux wrote:\r\n>>\r\n>> On 2013/03/28 00:14:23, adg wrote:\r\n>> >\r\n>\r\n>\r\n> https://codereview.appspot.com/7797046/diff/8001/content/profiling-go-programs.article#newcode13\r\n>>\r\n>> > content/profiling-go-programs.article:13: Hundt's paper does not\r\n>\r\n> specify which\r\n>>\r\n>> > versions of the C++, Go, Java, and Scala tools he used. In this blog\r\n>\r\n> post, we\r\n>>\r\n>> > will be using the most recent development snapshot of the Go\r\n>\r\n> compiler on amd64\r\n>>\r\n>> > and the most recent version of `g++` -- 4.8.0, which was released 2\r\n>\r\n> days ago.\r\n>>\r\n>> > (We will not be using Java or Scala, because we are not skilled at\r\n>\r\n> writing\r\n>>\r\n>> > efficient programs in either of those languages, so the comparison\r\n>\r\n> would be\r\n>>\r\n>> > unfair. Since C++ was the fastest language in the paper, the\r\n>\r\n> comparisons here\r\n>>\r\n>> > with C++ should suffice.)\r\n>> > I think it's important to keep the historical details of this\r\n>\r\n> document intact,\r\n>>\r\n>> > but include parenthetical updates where things have been revised.\r\n>> One of the problems is there are vast differences between Go 1.1 and\r\n>\r\n> Go back\r\n>>\r\n>> in 2011. For example, should I also keep the old xtime data?\r\n>> should I keep the old profiling data and explanations?\r\n>> (as you can see, part of the memory problem doesn't exist in Go 1.1,\r\n>\r\n> so I\r\n>>\r\n>> removed them, should I keep them?)\r\n>\r\n>\r\n> Why not turn this into a completely new post targeted at Go 1.1, and add\r\n> a link in the old post to the new one?\r\n>\r\n>\r\n> https://codereview.appspot.com/7797046/\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-30 23:55:19.973420",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Mar 31, 2013 at 7:55 AM, Dave Cheney <dave@cheney.net> wrote:\r\n> I think that is a better idea. As the author of the original issue,\r\n> all I wanted was to correct the paths and command names in the article\r\n> to help people who wandered onto the IRC channel.\r\nYeah, this is a good idea!\r\n\r\nHow about a new blog post named \"Profiling Go Programs: Revisited\"\r\nThen I will be able to compare Go 1.1 and Go back in 2011 and\r\nshow that because of recent advances in Go toolchain optimizer,\r\nwe no longer need to do some optimizations.\r\n\r\nCan I also import the code (and binary? like the benchgraffiti project linked\r\nin the original article) into the go.blog repository? or I need to open another\r\nproject to hold the code? We need google code project to display the\r\nmodification\r\nbetween program revisions. I once though that the playground should acquire\r\nsuch a functionality\r\n(https://code.google.com/p/go-playground/issues/detail?id=1),\r\nand then we don't need google code to display differences between revisions,\r\nand can point to play.golang.org/diff/ in the article.\r\n",
			"disapproval": false,
			"date": "2013-03-31 08:17:09.785760",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 31 March 2013 19:16, minux <minux.ma@gmail.com> wrote:\r\n\r\n> On Sun, Mar 31, 2013 at 7:55 AM, Dave Cheney <dave@cheney.net> wrote:\r\n> > I think that is a better idea. As the author of the original issue,\r\n> > all I wanted was to correct the paths and command names in the article\r\n> > to help people who wandered onto the IRC channel.\r\n> Yeah, this is a good idea!\r\n>\r\n> How about a new blog post named \"Profiling Go Programs: Revisited\"\r\n> Then I will be able to compare Go 1.1 and Go back in 2011 and\r\n> show that because of recent advances in Go toolchain optimizer,\r\n> we no longer need to do some optimizations.\r\n>\r\n\r\nThat sounds great to me.\r\n\r\n\r\n> Can I also import the code (and binary? like the benchgraffiti project\r\n> linked\r\n> in the original article) into the go.blog repository? or I need to open\r\n> another\r\n> project to hold the code? We need google code project to display the\r\n> modification\r\n\r\nbetween program revisions. I once though that the playground should acquire\r\n> such a functionality\r\n> (https://code.google.com/p/go-playground/issues/detail?id=1),\r\n> and then we don't need google code to display differences between\r\n> revisions,\r\n> and can point to play.golang.org/diff/ in the article.\r\n>\r\n\r\nYou can certainly put the new code in the go.blog repository. That's what\r\nit's there for.\r\n\r\nPlease let me know if you have any other questions or need help (apart from\r\nreviewing, of course).\r\n\r\nAndrew\r\n",
			"disapproval": false,
			"date": "2013-04-02 11:06:01.225710",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"minux.ma@gmail.com",
				"adg@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"tracey.brendan@gmail.com",
				"remyoudompheng@gmail.com",
				"a2800276@gmail.com",
				"arnehormann@gmail.com",
				"jonathan@titanous.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping.\n\nFolks continue to use the old 2011 post and get tripped up on the missing tool. \n\nIf it is possible could this new post be comitted, and the 2011 post updated to read \"Hey! This post is ancient history, click _here_ to see the updated version\"",
			"disapproval": false,
			"date": "2013-05-18 01:10:25.786000",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"adg@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"tracey.brendan@gmail.com",
				"remyoudompheng@gmail.com",
				"a2800276@gmail.com",
				"arnehormann@gmail.com",
				"jonathan@titanous.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think we can move forward with this CL, if Minux addresses the few comments I made.",
			"disapproval": false,
			"date": "2013-05-24 02:33:55.220890",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"adg@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"tracey.brendan@gmail.com",
				"remyoudompheng@gmail.com",
				"a2800276@gmail.com",
				"arnehormann@gmail.com",
				"jonathan@titanous.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL. Addressed all comments.\n\nsorry for the long delay.",
			"disapproval": false,
			"date": "2013-05-27 13:15:10.924870",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"adg@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"tracey.brendan@gmail.com",
				"remyoudompheng@gmail.com",
				"a2800276@gmail.com",
				"arnehormann@gmail.com",
				"jonathan@titanous.com",
				"dave@cheney.net",
				"go.peter.90@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7797046/diff/2001/content/profiling-go-programs.article\nFile content/profiling-go-programs.article (right):\n\nhttps://codereview.appspot.com/7797046/diff/2001/content/profiling-go-programs.article#newcode13\ncontent/profiling-go-programs.article:13: Hundt's paper does not specify which versions of the C++, Go, Java, and Scala tools he used. In this blog post, we will be using the most recent development snapshot of the Go compiler on amd64 and the most recent version of `g++` -- 4.8.0, which was released 2 days ago. (We will not be using Java or Scala, because we are not skilled at writing efficient programs in either of those languages, so the comparison would be unfair. Since C++ was the fastest language in the paper, the comparisons here with C++ should suffice.)\ns/2 days ago/in March 2013/\n\nRelatives dates are immediately obsolete.\nhttp://gcc.gnu.org/gcc-4.8/",
			"disapproval": false,
			"date": "2013-05-27 19:41:04.796180",
			"approval": false
		},
		{
			"sender": "christoph@tux21b.org",
			"recipients": [
				"minux.ma@gmail.com",
				"adg@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"tracey.brendan@gmail.com",
				"remyoudompheng@gmail.com",
				"a2800276@gmail.com",
				"arnehormann@gmail.com",
				"jonathan@titanous.com",
				"dave@cheney.net",
				"go.peter.90@gmail.com",
				"christoph@tux21b.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7797046/diff/27001/content/profiling-go-programs.article\nFile content/profiling-go-programs.article (right):\n\nhttps://codereview.appspot.com/7797046/diff/27001/content/profiling-go-programs.article#newcode100\ncontent/profiling-go-programs.article:100: When CPU profiling is enabled, the Go program stops about 100 times per second and records a sample consisting of the program counters on the currently executing goroutine's stack. The profile has 2525 samples, so it was running for a bit over 25 seconds. In the `go tool pprof` output, there is a row for each function that appeared in a sample. The first two columns show the number of samples in which the function was running (as opposed to waiting for a called function to return), as a raw count and as a percentage of total samples. The `main.FindLoops` function was running during 298 samples, or 11.8%. The `top10` output is sorted by this sample count. The third column shows the running total during the listing: the first three rows account for 32.4% of the samples. The fourth and fifth columns show the number of samples in which the function appeared (either running or waiting for a called function to return). The `main.FindLoops` function was running in 10.6% of the samples, but it was on the call stack (it or functions it called were running) in 84.1% of the samples.\nThe `runtime.mapaccess1_fast64` function was running during 298 samples, or 11.8%...",
			"disapproval": false,
			"date": "2013-05-27 19:52:20.691600",
			"approval": false
		},
		{
			"sender": "christoph@tux21b.org",
			"recipients": [
				"minux.ma@gmail.com",
				"adg@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"tracey.brendan@gmail.com",
				"remyoudompheng@gmail.com",
				"a2800276@gmail.com",
				"arnehormann@gmail.com",
				"jonathan@titanous.com",
				"dave@cheney.net",
				"go.peter.90@gmail.com",
				"christoph@tux21b.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7797046/diff/27001/content/profiling-go-programs.article\nFile content/profiling-go-programs.article (right):\n\nhttps://codereview.appspot.com/7797046/diff/27001/content/profiling-go-programs.article#newcode461\ncontent/profiling-go-programs.article:461: import _ \"http/pprof\"\n\"net/http/pprof\"",
			"disapproval": false,
			"date": "2013-05-27 20:14:39.758210",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"adg@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"tracey.brendan@gmail.com",
				"remyoudompheng@gmail.com",
				"a2800276@gmail.com",
				"arnehormann@gmail.com",
				"jonathan@titanous.com",
				"dave@cheney.net",
				"go.peter.90@gmail.com",
				"christoph@tux21b.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@golang.org, r@golang.org, rsc@golang.org, tracey.brendan@gmail.com, remyoudompheng@gmail.com, a2800276@gmail.com, arnehormann@gmail.com, jonathan@titanous.com, dave@cheney.net, go.peter.90@gmail.com, christoph@tux21b.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-05-27 20:29:41.449390",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"adg@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"tracey.brendan@gmail.com",
				"remyoudompheng@gmail.com",
				"a2800276@gmail.com",
				"arnehormann@gmail.com",
				"jonathan@titanous.com",
				"dave@cheney.net",
				"go.peter.90@gmail.com",
				"christoph@tux21b.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7797046/diff/2001/content/profiling-go-programs.article\nFile content/profiling-go-programs.article (right):\n\nhttps://codereview.appspot.com/7797046/diff/2001/content/profiling-go-programs.article#newcode13\ncontent/profiling-go-programs.article:13: Hundt's paper does not specify which versions of the C++, Go, Java, and Scala tools he used. In this blog post, we will be using the most recent development snapshot of the Go compiler on amd64 and the most recent version of `g++` -- 4.8.0, which was released 2 days ago. (We will not be using Java or Scala, because we are not skilled at writing efficient programs in either of those languages, so the comparison would be unfair. Since C++ was the fastest language in the paper, the comparisons here with C++ should suffice.)\nOn 2013/05/27 19:41:05, peterGo wrote:\n> s/2 days ago/in March 2013/\n> \n> Relatives dates are immediately obsolete.\n> http://gcc.gnu.org/gcc-4.8/\nThank you. Fixed.\n\nhttps://codereview.appspot.com/7797046/diff/27001/content/profiling-go-programs.article\nFile content/profiling-go-programs.article (right):\n\nhttps://codereview.appspot.com/7797046/diff/27001/content/profiling-go-programs.article#newcode100\ncontent/profiling-go-programs.article:100: When CPU profiling is enabled, the Go program stops about 100 times per second and records a sample consisting of the program counters on the currently executing goroutine's stack. The profile has 2525 samples, so it was running for a bit over 25 seconds. In the `go tool pprof` output, there is a row for each function that appeared in a sample. The first two columns show the number of samples in which the function was running (as opposed to waiting for a called function to return), as a raw count and as a percentage of total samples. The `main.FindLoops` function was running during 298 samples, or 11.8%. The `top10` output is sorted by this sample count. The third column shows the running total during the listing: the first three rows account for 32.4% of the samples. The fourth and fifth columns show the number of samples in which the function appeared (either running or waiting for a called function to return). The `main.FindLoops` function was running in 10.6% of the samples, but it was on the call stack (it or functions it called were running) in 84.1% of the samples.\nOn 2013/05/27 19:52:21, tux21b wrote:\n> The `runtime.mapaccess1_fast64` function was running during 298 samples, or\n> 11.8%...\nThank you. Fixed.\n\nhttps://codereview.appspot.com/7797046/diff/27001/content/profiling-go-programs.article#newcode461\ncontent/profiling-go-programs.article:461: import _ \"http/pprof\"\nOn 2013/05/27 20:14:40, tux21b wrote:\n> \"net/http/pprof\"\nDone. Well spotted. :-)",
			"disapproval": false,
			"date": "2013-05-27 20:31:42.388610",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"adg@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"tracey.brendan@gmail.com",
				"remyoudompheng@gmail.com",
				"a2800276@gmail.com",
				"arnehormann@gmail.com",
				"jonathan@titanous.com",
				"dave@cheney.net",
				"go.peter.90@gmail.com",
				"christoph@tux21b.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nplease check this in, and then we can break the paragraphs so each sentence begins on a new line, to make it easier to edit.\ni'd fold it even more, but at least with this format there is no need to keep a para graph as a single line of text, unlike with blogger.\n\nhttps://codereview.appspot.com/7797046/diff/39001/content/profiling-go-programs.article\nFile content/profiling-go-programs.article (right):\n\nhttps://codereview.appspot.com/7797046/diff/39001/content/profiling-go-programs.article#newcode5\ncontent/profiling-go-programs.article:5: Russ Cox; updated by Shenghou Ma on 24 March, 2013.\nOriginal article by Russ Cox, July 2011.\nUpdated by Shenghou Ma, May 2013.\n\nhttps://codereview.appspot.com/7797046/diff/39001/content/profiling-go-programs.article#newcode12\ncontent/profiling-go-programs.article:12: (Update: due to optimization of libstdc++ in newer `gcc`, now the memory reduction is 3.7x.)\n(Update: Due to recent optimizations of `libstdc++` in `gcc`, the memory reduction is now 3.7x.)\n\nhttps://codereview.appspot.com/7797046/diff/39001/content/profiling-go-programs.article#newcode185\ncontent/profiling-go-programs.article:185: `main.DFS` no longer appears in the profile, and the rest of the program runtime has dropped too. Now the program is spending most of its time allocating memory and garbage collecting (`runtime.mallocgc`, which both allocates and runs periodic garbage collections, accounts for 54.2% of the time).  To find out why the garbage collector is running so much, we have to find out what is allocating memory. One way is to add memory profiling to the program. We'll arrange that if the `-memprofile` flag is supplied, the program stops after one iteration of the loop finding, writes a memory profile, and exits:\nstart sentences with a capital letter.\n\nThe entry `main.DFS` ...\n\nhttps://codereview.appspot.com/7797046/diff/39001/content/profiling-go-programs.article#newcode223\ncontent/profiling-go-programs.article:223: `go tool pprof` reports that `FindLoops` has allocated approximately 56.3 of the 82.4 MB in use; `CreateNode` accounts for another 17.6 MB. To reduce overhead, the memory profiler only records information for approximately one block per half megabyte allocated (the \u201c1-in-524288 sampling rate\u201d), so these are approximations to the actual counts.\nThe command `go tool pprof` ...",
			"disapproval": false,
			"date": "2013-05-30 01:56:11.592640",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"adg@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"tracey.brendan@gmail.com",
				"remyoudompheng@gmail.com",
				"a2800276@gmail.com",
				"arnehormann@gmail.com",
				"jonathan@titanous.com",
				"dave@cheney.net",
				"go.peter.90@gmail.com",
				"christoph@tux21b.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "and doubleplusgood thanks for doing this.",
			"disapproval": false,
			"date": "2013-05-30 01:56:29.063650",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> and doubleplusgood thanks for doing this.\r\n>\r\n> https://codereview.appspot.com/7797046/\r\n\r\nSeconded. It will be great to be able to point people to an up to date\r\nversion of this article.\r\n",
			"disapproval": false,
			"date": "2013-05-30 01:57:16.613040",
			"approval": false
		},
		{
			"sender": "arnehormann@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"adg@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"tracey.brendan@gmail.com",
				"remyoudompheng@gmail.com",
				"a2800276@gmail.com",
				"arnehormann@gmail.com",
				"jonathan@titanous.com",
				"dave@cheney.net",
				"go.peter.90@gmail.com",
				"christoph@tux21b.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I mentioned this already, perhaps it got lost: remove double-prompt\n\nhttps://codereview.appspot.com/7797046/diff/2001/content/profiling-go-programs.article\nFile content/profiling-go-programs.article (right):\n\nhttps://codereview.appspot.com/7797046/diff/2001/content/profiling-go-programs.article#newcode76\ncontent/profiling-go-programs.article:76: $ $ make havlak1.prof\ns/$ $ /$ /",
			"disapproval": false,
			"date": "2013-05-30 06:05:43.493030",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"adg@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"tracey.brendan@gmail.com",
				"remyoudompheng@gmail.com",
				"a2800276@gmail.com",
				"arnehormann@gmail.com",
				"jonathan@titanous.com",
				"dave@cheney.net",
				"go.peter.90@gmail.com",
				"christoph@tux21b.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "all comments addressed, except one.\n\nhttps://codereview.appspot.com/7797046/diff/39001/content/profiling-go-programs.article\nFile content/profiling-go-programs.article (right):\n\nhttps://codereview.appspot.com/7797046/diff/39001/content/profiling-go-programs.article#newcode5\ncontent/profiling-go-programs.article:5: Russ Cox; updated by Shenghou Ma on 24 March, 2013.\nOn 2013/05/30 01:56:12, r wrote:\n> Original article by Russ Cox, July 2011.\n> Updated by Shenghou Ma, May 2013.\nThe blog server will always display \"By \" and the first line of text here.\nso it will display this for the proposed edit:\nBy Original article by Russ Cox, July 2011.",
			"disapproval": false,
			"date": "2013-06-02 14:51:27.988490",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"adg@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"tracey.brendan@gmail.com",
				"remyoudompheng@gmail.com",
				"a2800276@gmail.com",
				"arnehormann@gmail.com",
				"jonathan@titanous.com",
				"dave@cheney.net",
				"go.peter.90@gmail.com",
				"christoph@tux21b.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7797046/diff/52001/content/profiling-go-programs.article\nFile content/profiling-go-programs.article (right):\n\nhttps://codereview.appspot.com/7797046/diff/52001/content/profiling-go-programs.article#newcode5\ncontent/profiling-go-programs.article:5: Russ Cox, in July 2011, updated by Shenghou Ma, in May 2013.\nRuss Cox, July 2011; updated by Shenghou Ma, May 2013",
			"disapproval": false,
			"date": "2013-06-02 15:22:08.973070",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"adg@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"tracey.brendan@gmail.com",
				"remyoudompheng@gmail.com",
				"a2800276@gmail.com",
				"arnehormann@gmail.com",
				"jonathan@titanous.com",
				"dave@cheney.net",
				"go.peter.90@gmail.com",
				"christoph@tux21b.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=5fbc5fc21e6e&repo=blog ***\n\ngo.blog: update the profiling Go article\nFixes issue 3893.\n\nR=adg, r, rsc, tracey.brendan, remyoudompheng, a2800276, arnehormann, jonathan, dave, go.peter.90, christoph\nCC=golang-dev\nhttps://codereview.appspot.com/7797046",
			"disapproval": false,
			"date": "2013-06-02 15:26:38.124350",
			"approval": false
		}
	],
	"owner_email": "minux.ma@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "minux",
	"subject": "code review 7797046: go.blog: update the profiling Go article",
	"created": "2013-03-27 21:27:46.109340",
	"patchsets": [
		1,
		2001,
		8001,
		27001,
		39001,
		52001,
		60001
	],
	"modified": "2013-06-02 15:26:44.273950",
	"closed": true,
	"issue": 7797046
}