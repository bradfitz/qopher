{
	"description": "big/rat: add a few benchmarks for FloatString conversion (it's slow)",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"gri@golang.org",
		"r@google.com"
	],
	"messages": [
		{
			"sender": "dave.andersen@gmail.com",
			"recipients": [
				"dave.andersen@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-13 15:10:50.185414",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dave.andersen@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5372086/diff/3/src/pkg/math/big/rat_test.go\nFile src/pkg/math/big/rat_test.go (right):\n\nhttp://codereview.appspot.com/5372086/diff/3/src/pkg/math/big/rat_test.go#newcode501\nsrc/pkg/math/big/rat_test.go:501: func RatStringHelper(b *testing.B, num, denom string, precision int) {\nthere's no reason for these helpers to be exported.\nthere is reason for them to be commented.\n\nhttp://codereview.appspot.com/5372086/diff/3/src/pkg/math/big/rat_test.go#newcode510\nsrc/pkg/math/big/rat_test.go:510: b.StartTimer()\ni find it odd that the timer management is distributed like this. it's usually better design to manage resources within a single function.\n\nin any case, this loop is so trivial i'd just delete this function and move its contents to its two locations. also change RatStringHelper to benchmarkFloatString",
			"disapproval": false,
			"date": "2011-11-13 16:46:25.416035",
			"approval": false
		},
		{
			"sender": "dave.andersen@gmail.com",
			"recipients": [
				"dave.andersen@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-16 14:37:31.024104",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"dave.andersen@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "This is fine but seems overkill to have 8 benchmarks for FloatString conversion, each of which tests essentially one case. Ideally, there's one, perhaps two benchmarks (one for \"short\" and one for very long results), each of which timing the conversion of a good mix of numbers, so to get a somewhat representative result for average output.\n\nCan you combine them? I am thinking one benchmark for short and one for long numbers, and each one converts a list of (say 10) numbers per iteration. Then, the tests can be table-driven, and the number of functions can be reduced to two.\n\n- gri",
			"disapproval": false,
			"date": "2011-11-16 17:51:42.285965",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Nov 17, 2011 at 9:37 AM, Rob 'Commander' Pike <r@google.com> wrote:\n>\n> On Nov 17, 2011, at 9:31 AM, dave.andersen@gmail.com wrote:\n>\n>> I agree completely for shorts - I'll update that now.\n\nsounds good\n\n>>\n>> For longs, I had left them separate because each seemed likely to have a\n>> different set of optimizations available, and the runtime was so long as\n>> to make it unclear that running them all together would be a good\n>> benchmark. \u00a0Would it be reasonable if I left them separate *for now*,\n>> with the thought that I'll fold them together as a \"medium\" class once\n>> I've also gotten the patches to speed things up submitted, and then\n>> redefine a new set of \"long\" ones that still run for a while?\n>\n> You're arguing about benchmarks for a hypothetical condition. Should someone decide to implement distinct optimizations, that would be a good time to separate the conditions under which the optimizations occur and see their effect.\n\nagreed - the benchmarks make much more sense if they come with\noptimizations the effect of which then can be measured\n\n>\n> Now, since you say you plan to make some optimizations, why not do it then? The CL can include optimizations, new benchmarks, and in the description document the improvement.\n\nThere's a CL of integer printing optimizations (long pending) that I\nam reviewing. It's likely to have an impact on large number (and thus\nfloat/rational) printing. I'd rather not do any tweaks at the moment.\n\n>\n> Although maybe everyone is overthinking here.\n\npossibly. which is why I was concerned about adding 8 benchmarks w/o\nmuch meaning in the first place.\n\n- gri\n\n\n>\n> -rob\n>\n>\n",
			"disapproval": false,
			"date": "2011-11-17 21:52:08.914999",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Nov 17, 2011 at 9:49 AM, David Andersen <dave.andersen@gmail.com> wrote:\n> On Thu, Nov 17, 2011 at 12:44 PM, Robert Griesemer <gri@golang.org> wrote:\n>>>\n>>> Now, since you say you plan to make some optimizations, why not do it then? The CL can include optimizations, new benchmarks, and in the description document the improvement.\n>>\n>> There's a CL of integer printing optimizations (long pending) that I\n>> am reviewing. It's likely to have an impact on large number (and thus\n>> float/rational) printing. I'd rather not do any tweaks at the moment.\n>>\n>>>\n>>> Although maybe everyone is overthinking here.\n>>\n>> possibly. which is why I was concerned about adding 8 benchmarks w/o\n>> much meaning in the first place.\n>\n> Sounds good. \u00a0I'll stuff them all together.\n>\n> What's the CL for the integer printing optimizations? \u00a0Mine's ready to\n> submit - should have looked at the list of CLs first. \u00a0Oops.\n\nhttp://codereview.appspot.com/4573041/\n\n\n>\n> The relevant benchmark changes for mine are that Medium is 2.7x\n> faster, long is 5.5x faster:\n\nthat's good, too. please send me that CL.\n\n>\n> Old:\n> big.BenchmarkStringShort10 \u00a0 \u00a0 \u00a0 \u00a0100000 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 27315 ns/op\n> big.BenchmarkStringMedium10 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0500 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 3237750 ns/op\n> big.BenchmarkStringLong10 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a05 \u00a0 \u00a0 \u00a0 \u00a0 516262600 ns/op\n>\n> With changes:\n> big.BenchmarkStringShort10 \u00a0 \u00a0 \u00a0 \u00a0100000 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 31003 ns/op\n> big.BenchmarkStringMedium10 \u00a0 \u00a0 \u00a0 \u00a0 2000 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1186873 ns/op\n> big.BenchmarkStringLong10 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 20 \u00a0 \u00a0 \u00a0 \u00a0 \u00a094076850 ns/op\n>\n> (The change to short10 is, I hope, in the noise, or I can special case it.)\n\nHave you uploaded those changes?\n- gri\n\n>\n> \u00a0-Dave\n>\n",
			"disapproval": false,
			"date": "2011-11-17 22:07:45.807293",
			"approval": false
		},
		{
			"sender": "dave.andersen@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Nov 17, 2011 at 1:15 PM, Robert Griesemer <gri@golang.org> wrote:\n\n>>\n>> What's the CL for the integer printing optimizations? \u00a0Mine's ready to\n>> submit - should have looked at the list of CLs first. \u00a0Oops.\n>\n> http://codereview.appspot.com/4573041/\n\n>\n>>\n>> The relevant benchmark changes for mine are that Medium is 2.7x\n>> faster, long is 5.5x faster:\n>\n> that's good, too. please send me that CL.\n\n> Have you uploaded those changes?\n\nNope - I'll get them as soon as rietveld is back.  They need a little\ncleaning to be up to snuff but I should upload them within three\nhours.\n\nFrom looking at the other CL, the changes look very compatible.  My\nchanges are algorithmic - it switches to divide-and-conquer for large\nnumbers, with better asymptotic perfornamce.\n\n  -Dave\n",
			"disapproval": false,
			"date": "2011-11-17 22:04:02.833885",
			"approval": false
		},
		{
			"sender": "dave.andersen@gmail.com",
			"recipients": [
				"dave.andersen@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org, gri@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-17 22:20:44.018424",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Nov 17, 2011, at 9:31 AM, dave.andersen@gmail.com wrote:\n\n> I agree completely for shorts - I'll update that now.\n> \n> For longs, I had left them separate because each seemed likely to have a\n> different set of optimizations available, and the runtime was so long as\n> to make it unclear that running them all together would be a good\n> benchmark.  Would it be reasonable if I left them separate *for now*,\n> with the thought that I'll fold them together as a \"medium\" class once\n> I've also gotten the patches to speed things up submitted, and then\n> redefine a new set of \"long\" ones that still run for a while?\n\nYou're arguing about benchmarks for a hypothetical condition. Should someone decide to implement distinct optimizations, that would be a good time to separate the conditions under which the optimizations occur and see their effect.\n\nNow, since you say you plan to make some optimizations, why not do it then? The CL can include optimizations, new benchmarks, and in the description document the improvement.\n\nAlthough maybe everyone is overthinking here.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-11-17 22:25:07.282347",
			"approval": false
		},
		{
			"sender": "dave.andersen@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Nov 17, 2011 at 1:44 PM, David Andersen <dave.andersen@gmail.com> wrote:\n\n>>> The relevant benchmark changes for mine are that Medium is 2.7x\n>>> faster, long is 5.5x faster:\n>>\n>> that's good, too. please send me that CL.\n>\n>> Have you uploaded those changes?\n>\n> Nope - I'll get them as soon as rietveld is back. \u00a0They need a little\n> cleaning to be up to snuff but I should upload them within three\n> hours.\n>\n> From looking at the other CL, the changes look very compatible. \u00a0My\n> changes are algorithmic - it switches to divide-and-conquer for large\n> numbers, with better asymptotic performance.\n\nThe changes to decimal are now uploaded: http://codereview.appspot.com/5413043\n\nThis is my first larger change to anything within the go libraries, so\nI apologize in advance. :-)\n\n  -Dave\n",
			"disapproval": false,
			"date": "2011-11-17 22:40:32.566019",
			"approval": false
		},
		{
			"sender": "dave.andersen@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Nov 17, 2011 at 12:44 PM, Robert Griesemer <gri@golang.org> wrote:\n>>\n>> Now, since you say you plan to make some optimizations, why not do it then? The CL can include optimizations, new benchmarks, and in the description document the improvement.\n>\n> There's a CL of integer printing optimizations (long pending) that I\n> am reviewing. It's likely to have an impact on large number (and thus\n> float/rational) printing. I'd rather not do any tweaks at the moment.\n>\n>>\n>> Although maybe everyone is overthinking here.\n>\n> possibly. which is why I was concerned about adding 8 benchmarks w/o\n> much meaning in the first place.\n\nSounds good.  I'll stuff them all together.\n\nWhat's the CL for the integer printing optimizations?  Mine's ready to\nsubmit - should have looked at the list of CLs first.  Oops.\n\nThe relevant benchmark changes for mine are that Medium is 2.7x\nfaster, long is 5.5x faster:\n\nOld:\nbig.BenchmarkStringShort10\t  100000\t     27315 ns/op\nbig.BenchmarkStringMedium10\t     500\t   3237750 ns/op\nbig.BenchmarkStringLong10\t       5\t 516262600 ns/op\n\nWith changes:\nbig.BenchmarkStringShort10\t  100000\t     31003 ns/op\nbig.BenchmarkStringMedium10\t    2000\t   1186873 ns/op\nbig.BenchmarkStringLong10\t      20\t  94076850 ns/op\n\n(The change to short10 is, I hope, in the noise, or I can special case it.)\n\n  -Dave\n",
			"disapproval": false,
			"date": "2011-11-17 22:35:36.380736",
			"approval": false
		}
	],
	"owner_email": "dave.andersen@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "dga",
	"subject": "code review 5372086: big/rat: add a few benchmarks for FloatString conversio...",
	"created": "2011-11-13 15:08:51.342742",
	"patchsets": [
		1,
		2001,
		3,
		7001,
		11004
	],
	"modified": "2011-11-17 22:35:36.380736",
	"closed": false,
	"issue": 5372086
}