{
	"description": "html: add a Render function.",
	"cc": [
		"mikesamuel@gmail.com",
		"andybalholm@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"mikesamuel@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello mikesamuel@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-06 07:07:53.926660",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"nigeltao@golang.org",
				"mikesamuel@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5218041/diff/4006/src/pkg/html/render.go\nFile src/pkg/html/render.go (right):\n\nhttp://codereview.appspot.com/5218041/diff/4006/src/pkg/html/render.go#newcode82\nsrc/pkg/html/render.go:82: if err := escape(w, n.Data); err != nil {\nOn 2011/10/06 12:23:11, nigeltao wrote:\n> On 2011/10/06 12:16:49, MikeSamuel wrote:\n> > The tag name states don't allow entities.  It may be safest, but there could\n> be\n> > problems if someone decided to use a custom tag name that contained a\n> non-latin\n> > letter and escape were changed to use numeric entities for non-latin\n> codepoints.\n> \n> IIUC, you're saying to use \"w.WriteString(n.Data)\", right? Or is it more subtle\n> than that?\n\nI'd just do w.WriteString(n.Data) here, for attribute names, and closing tag names, but I don't feel very strongly about it if you want to leave it in as a safety measure.\n\nhttp://codereview.appspot.com/5218041/diff/4006/src/pkg/html/render.go#newcode103\nsrc/pkg/html/render.go:103: _, err := w.WriteString(\"/>\")\nOn 2011/10/06 12:23:11, nigeltao wrote:\n> On 2011/10/06 12:16:49, MikeSamuel wrote:\n> > <blockquote />foo\n> > displays foo indented in Chrome.\n> > \n> > <script src=\"bogus.js\"/>Hello, World!\n> > displays a blank page\n> > \n> > x<select />y<select><option>foo</option></select>\n> > displays x and a select with no options because the HTML5 tree building algo\n> > treats the second <select> as a close tag for the first select.\n> \n> Do you know of a blacklist of tags that cannot be self-closing, then? Or perhaps\n> a whitelist of tags that should be (like <hr/>)?\n\nI do not know of a blacklist.  It's possible to derive one from the tokenization algo.\n\nBut 8.1.2.1 ( http://www.w3.org/TR/html5/syntax.html#start-tags ) says \n\n\"\"\"\n6. Then, if the element is one of the void elements, or if the element is a foreign element, then there may be a single U+002F SOLIDUS character (/). This character has no effect on void elements, but on foreign elements it marks the start tag as self-closing.\n\"\"\"\n\nSo I'm not sure the / does anything for non-foreign elements.\n\nFor a whitelist, http://www.w3.org/TR/html5/syntax.html#void-elements\n\narea, base, br, col, command, embed, hr, img, input, keygen, link, meta, param, source, track, wbr\n\nwhich is all the element names from  http://www.w3.org/TR/html5/index.html#elements-1 where the children column is \"empty\".",
			"disapproval": false,
			"date": "2011-10-06 12:51:41.999132",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"nigeltao@golang.org",
				"mikesamuel@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5218041/diff/4006/src/pkg/html/render.go\nFile src/pkg/html/render.go (right):\n\nhttp://codereview.appspot.com/5218041/diff/4006/src/pkg/html/render.go#newcode76\nsrc/pkg/html/render.go:76: // TODO: figure out what to do with <script> elements.\nFor script, style, no... elements I would\n1. render the <xxx> opening tag as normal.\n2. maybe error out if any child is not a text node.\n3. escape the text nodes.\n4. maybe error out if `</xxx` is a case-insensitive substring of the concatenation of the children's data.\n5. maybe error out if the concatenation of the children's data contains unbalanced an escaping text span start (\"<!--\") not followed by an end (\"-->\").\n6. render the closing tag as normal.\n\nhttp://codereview.appspot.com/5218041/diff/4006/src/pkg/html/render.go#newcode82\nsrc/pkg/html/render.go:82: if err := escape(w, n.Data); err != nil {\nThe tag name states don't allow entities.  It may be safest, but there could be problems if someone decided to use a custom tag name that contained a non-latin letter and escape were changed to use numeric entities for non-latin codepoints.\n\nhttp://codereview.appspot.com/5218041/diff/4006/src/pkg/html/render.go#newcode103\nsrc/pkg/html/render.go:103: _, err := w.WriteString(\"/>\")\n<blockquote />foo\ndisplays foo indented in Chrome.\n\n<script src=\"bogus.js\"/>Hello, World!\ndisplays a blank page\n\nx<select />y<select><option>foo</option></select>\ndisplays x and a select with no options because the HTML5 tree building algo treats the second <select> as a close tag for the first select.",
			"disapproval": false,
			"date": "2011-10-06 12:16:49.593044",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"mikesamuel@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5218041/diff/4006/src/pkg/html/render.go\nFile src/pkg/html/render.go (right):\n\nhttp://codereview.appspot.com/5218041/diff/4006/src/pkg/html/render.go#newcode82\nsrc/pkg/html/render.go:82: if err := escape(w, n.Data); err != nil {\nOn 2011/10/06 12:16:49, MikeSamuel wrote:\n> The tag name states don't allow entities.  It may be safest, but there could be\n> problems if someone decided to use a custom tag name that contained a non-latin\n> letter and escape were changed to use numeric entities for non-latin codepoints.\n\nIIUC, you're saying to use \"w.WriteString(n.Data)\", right? Or is it more subtle than that?\n\nhttp://codereview.appspot.com/5218041/diff/4006/src/pkg/html/render.go#newcode103\nsrc/pkg/html/render.go:103: _, err := w.WriteString(\"/>\")\nOn 2011/10/06 12:16:49, MikeSamuel wrote:\n> <blockquote />foo\n> displays foo indented in Chrome.\n> \n> <script src=\"bogus.js\"/>Hello, World!\n> displays a blank page\n> \n> x<select />y<select><option>foo</option></select>\n> displays x and a select with no options because the HTML5 tree building algo\n> treats the second <select> as a close tag for the first select.\n\nDo you know of a blacklist of tags that cannot be self-closing, then? Or perhaps a whitelist of tags that should be (like <hr/>)?",
			"disapproval": false,
			"date": "2011-10-06 12:23:11.359268",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"nigeltao@golang.org",
				"mikesamuel@gmail.com",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "This isn't really about Render, but it's relevant to a comment on this review.\n\nhttp://codereview.appspot.com/5218041/diff/14001/src/pkg/html/render.go\nFile src/pkg/html/render.go (right):\n\nhttp://codereview.appspot.com/5218041/diff/14001/src/pkg/html/render.go#newcode35\nsrc/pkg/html/render.go:35: // any <!--comment--> input.\nOn 2011/10/08 00:44:02, nigeltao wrote:\n> Parse elides comments, and it's simpler if Render does likewise.\nI just discovered that the test data we're using for Parse assumes that comments aren't elided. I've been working on parser improvements, and when I got to test 27, here is what I got:\n\n\n--- FAIL: html.TestParser (0.00 seconds)\n\ttests1.dat test #27 \"<!--><div>--<!-->\", actual vs expected:\n\t----\n\t| <html>\n\t|   <head>\n\t|   <body>\n\t|     <div>\n\t|       \"--\"\n\t----\n\t| <!--  -->\n\t| <html>\n\t|   <head>\n\t|   <body>\n\t|     <div>\n\t|       \"--\"\n\t|       <!--  -->\n\t----",
			"disapproval": false,
			"date": "2011-10-08 20:41:43.682830",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"mikesamuel@gmail.com",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=9be80dbcb0af ***\n\nhtml: add a Render function.\n\nR=mikesamuel, andybalholm\nCC=golang-dev\nhttp://codereview.appspot.com/5218041",
			"disapproval": false,
			"date": "2011-10-10 03:44:44.584314",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"mikesamuel@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "PTAL.\n\nAs for naming, I see three options: Render, WriteTo, and Marshal.\n\nI'm uncomfortable with WriteTo because a Node is not an io.Reader or an io.Writer the way a bytes.Buffer is, and if it was WriteTo, it would be odd to not then rename Parse to ReadFrom, but that just sounds weird.\n\nPackage xml has Marshal and Unmarshal, although Unmarshal takes a destination argument, but html.Parse returns a new value. xml.Marshal is also a function, not a method. Maybe html.Render should be a function.\n\nThis is all just thinking out loud.",
			"disapproval": false,
			"date": "2011-10-07 05:49:11.715528",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"mikesamuel@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Render is now a function, not a method.\n\nhttp://codereview.appspot.com/5218041/diff/8001/src/pkg/html/render.go\nFile src/pkg/html/render.go (right):\n\nhttp://codereview.appspot.com/5218041/diff/8001/src/pkg/html/render.go#newcode54\nsrc/pkg/html/render.go:54: case DocumentNode:\nOn 2011/10/07 06:45:14, MikeSamuel wrote:\n> Should scopeMarkerNode be handled in the same way?\n\nscopeMarkerNode is not exported outside this package. Users shouldn't be seeing one.\n\nhttp://codereview.appspot.com/5218041/diff/8001/src/pkg/html/render.go#newcode112\nsrc/pkg/html/render.go:112: if voidElements[n.Data] {\nOn 2011/10/07 06:45:14, MikeSamuel wrote:\n> Element nodes' data are not lower-cased during parse, right?\n\nThey're lower-cased in tokenization (see func tagName in token.go).",
			"disapproval": false,
			"date": "2011-10-07 08:15:44.570671",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n",
			"disapproval": false,
			"date": "2011-10-07 10:18:58.015991",
			"approval": true
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"nigeltao@golang.org",
				"mikesamuel@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5218041/diff/8001/src/pkg/html/render.go\nFile src/pkg/html/render.go (right):\n\nhttp://codereview.appspot.com/5218041/diff/8001/src/pkg/html/render.go#newcode54\nsrc/pkg/html/render.go:54: case DocumentNode:\nShould scopeMarkerNode be handled in the same way?\n\nhttp://codereview.appspot.com/5218041/diff/8001/src/pkg/html/render.go#newcode112\nsrc/pkg/html/render.go:112: if voidElements[n.Data] {\nElement nodes' data are not lower-cased during parse, right?",
			"disapproval": false,
			"date": "2011-10-07 06:45:14.779749",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"nigeltao@golang.org",
				"mikesamuel@gmail.com",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5218041/diff/14001/src/pkg/html/render.go\nFile src/pkg/html/render.go (right):\n\nhttp://codereview.appspot.com/5218041/diff/14001/src/pkg/html/render.go#newcode35\nsrc/pkg/html/render.go:35: // any <!--comment--> input.\nOn 2011/10/08 00:44:02, nigeltao wrote:\n> Parse elides comments, and it's simpler if Render does likewise.\nOK. Not a big deal.",
			"disapproval": false,
			"date": "2011-10-08 00:50:22.254852",
			"approval": true
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Oct 7, 2011, at 5:44 PM, nigeltao@golang.org wrote:\n\n> I'm thinking about renaming Parse/Render to Unmarshal/Marshal, as part\n> of making the standard package library consistent in the way it uses the\n> terms Write, Marshal, Encode, Put and Render. But a rename would require\n> a gofix, and even if it was just for http, it would still be outside the\n> scope of this CL.\n\nI see a psychological difference between HTML and some of the formats that use Marshal/Unmarshal. Marshal makes sense to me when the in-memory data structure is seen as primary, and the serialization is seen as a way to store or communicate it. But in the case of HTML, the textual form is seen as primary, and the element tree is seen as a way to process it in memory.\n\nThere is no technical difference, but I think there is a difference in how people think about the formats. So using the same terminology might not be appropriate.\n\n(Render does have the problem, though, that people might think about rendering the page to an image file.)\n\nAndy",
			"disapproval": false,
			"date": "2011-10-08 15:02:00.777937",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"nigeltao@golang.org",
				"mikesamuel@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/10/07 05:49:11, nigeltao wrote:\n> PTAL.\n> \n> As for naming, I see three options: Render, WriteTo, and Marshal.\n\nI like render.\n \n> I'm uncomfortable with WriteTo because a Node is not an io.Reader or an\n> io.Writer the way a bytes.Buffer is, and if it was WriteTo, it would be odd to\n> not then rename Parse to ReadFrom, but that just sounds weird.\n> \n> Package xml has Marshal and Unmarshal, although Unmarshal takes a destination\n> argument, but html.Parse returns a new value. xml.Marshal is also a function,\n> not a method. Maybe html.Render should be a function.\n\nI don't think Node can be changed to an interface type without API-breaking changes, so we don't have much greater flexibility because it is a method.\nMaking Render a function sounds fine to me.\n\n> This is all just thinking out loud.",
			"disapproval": false,
			"date": "2011-10-07 08:04:05.406001",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"nigeltao@golang.org",
				"mikesamuel@gmail.com",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5218041/diff/14001/src/pkg/html/render.go\nFile src/pkg/html/render.go (right):\n\nhttp://codereview.appspot.com/5218041/diff/14001/src/pkg/html/render.go#newcode35\nsrc/pkg/html/render.go:35: // any <!--comment--> input.\nI'd like to see comments included in the output if they're in the tree. They could be sanitized by making sure the content begins and ends with spaces and replacing any \"--\" sequences with something else (maybe em dashes?).",
			"disapproval": false,
			"date": "2011-10-07 21:58:39.362278",
			"approval": false
		},
		{
			"sender": "andybalholm@gmail.com",
			"recipients": [
				"nigeltao@golang.org",
				"mikesamuel@gmail.com",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "It looks good to me except for a few places where text shouldn't be escaped.\n\nhttp://codereview.appspot.com/5218041/diff/14001/src/pkg/html/render.go\nFile src/pkg/html/render.go (right):\n\nhttp://codereview.appspot.com/5218041/diff/14001/src/pkg/html/render.go#newcode53\nsrc/pkg/html/render.go:53: return escape(w, n.Data)\nIf the parent node is a <script> or <style> element, the text should not be escaped. Character references are not interpreted inside those elements. (By compliant parsers, that is.)\n\nhttp://codereview.appspot.com/5218041/diff/14001/src/pkg/html/render.go#newcode69\nsrc/pkg/html/render.go:69: if err := escape(w, n.Data); err != nil {\nI don't think entities are interpreted in doctypes either.\n\nhttp://codereview.appspot.com/5218041/diff/14001/src/pkg/html/render.go#newcode99\nsrc/pkg/html/render.go:99: if err := escape(w, a.Key); err != nil {\nanother place where entities won't be interpreted\n\nhttp://codereview.appspot.com/5218041/diff/14001/src/pkg/html/render.go#newcode102\nsrc/pkg/html/render.go:102: if _, err := w.WriteString(`=\"`); err != nil {\nIn my opinion, it would look a little cleaner to leave off the =\"\" for empty attributes. But it's not a big deal.",
			"disapproval": false,
			"date": "2011-10-07 16:22:13.067141",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"mikesamuel@gmail.com",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I'm thinking about renaming Parse/Render to Unmarshal/Marshal, as part of making the standard package library consistent in the way it uses the terms Write, Marshal, Encode, Put and Render. But a rename would require a gofix, and even if it was just for http, it would still be outside the scope of this CL.\n\nhttp://codereview.appspot.com/5218041/diff/14001/src/pkg/html/render.go\nFile src/pkg/html/render.go (right):\n\nhttp://codereview.appspot.com/5218041/diff/14001/src/pkg/html/render.go#newcode35\nsrc/pkg/html/render.go:35: // any <!--comment--> input.\nOn 2011/10/07 21:58:39, andybalholm wrote:\n> I'd like to see comments included in the output if they're in the tree. They\n> could be sanitized by making sure the content begins and ends with spaces and\n> replacing any \"--\" sequences with something else (maybe em dashes?).\n\nParse elides comments, and it's simpler if Render does likewise.\n\nhttp://codereview.appspot.com/5218041/diff/14001/src/pkg/html/render.go#newcode53\nsrc/pkg/html/render.go:53: return escape(w, n.Data)\nOn 2011/10/07 16:22:13, andybalholm wrote:\n> If the parent node is a <script> or <style> element, the text should not be\n> escaped. Character references are not interpreted inside those elements. (By\n> compliant parsers, that is.)\n\nI think that that's covered by the script/style TODO below.\n\nhttp://codereview.appspot.com/5218041/diff/14001/src/pkg/html/render.go#newcode69\nsrc/pkg/html/render.go:69: if err := escape(w, n.Data); err != nil {\nOn 2011/10/07 16:22:13, andybalholm wrote:\n> I don't think entities are interpreted in doctypes either.\n\nDone.\n\nhttp://codereview.appspot.com/5218041/diff/14001/src/pkg/html/render.go#newcode99\nsrc/pkg/html/render.go:99: if err := escape(w, a.Key); err != nil {\nOn 2011/10/07 16:22:13, andybalholm wrote:\n> another place where entities won't be interpreted\n\nDone.\n\nhttp://codereview.appspot.com/5218041/diff/14001/src/pkg/html/render.go#newcode102\nsrc/pkg/html/render.go:102: if _, err := w.WriteString(`=\"`); err != nil {\nOn 2011/10/07 16:22:13, andybalholm wrote:\n> In my opinion, it would look a little cleaner to leave off the =\"\" for empty\n> attributes. But it's not a big deal.\n\nI think it's more regular if every attribute has an '=', even if the attribute value is empty.",
			"disapproval": false,
			"date": "2011-10-08 00:44:02.326330",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"nigeltao@golang.org",
				"mikesamuel@gmail.com",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/10/08 00:44:02, nigeltao wrote:\n> I'm thinking about renaming Parse/Render to Unmarshal/Marshal, as part of making\n> the standard package library consistent in the way it uses the terms Write,\n> Marshal, Encode, Put and Render. But a rename would require a gofix, and even if\n> it was just for http, it would still be outside the scope of this CL.\n\nI think that using common terms makes for a more learnable API and more readable code so should be preferred unless there are good definitions for both terms and the obscure term's definition is a significantly better match.\n\nIf it's any help, searching codesearch for the pair parse and render yields approx. 1M hits..  http://www.google.com/codesearch#search/&q=%5Cbparse.*%5Cbrender%7C%5Cbrender.*%5Cbparse&type=cs\n\nA similar search for marshal and unmarshal yields 150k hits.\n\\bmarshal.*\\bunmarshal|\\bunmarshal.*\\bmarshal\n\nStandard disclaimer: estimated result counts are heuristic.",
			"disapproval": false,
			"date": "2011-10-09 06:57:00.024226",
			"approval": false
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 5218041: html: add a Node.Render method.",
	"created": "2011-10-06 07:04:53.661867",
	"patchsets": [
		1,
		2001,
		8,
		4006,
		8001,
		14001,
		18001,
		26002
	],
	"modified": "2011-10-10 03:44:46.807810",
	"closed": true,
	"issue": 5218041
}