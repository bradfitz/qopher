{
	"description": "net/http: added TemporaryDelay field to the Server.\n\nWhen listener can't accept connection due to fd limit then goes\ninto an infinity loop until any fd will become available.\nIf TemporaryDelay is set then next try will be delayed in a\nspecified amount of time.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"chris@nu7hat.ch",
		"gary.burd@gmail.com"
	],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "You're conflating fixing a CPU spin with adding new knobs. I'm arguing\nagainst more knobs. If there's a real CPU spin, please write a test case to\ndemonstrate it and file a bug.\n\nYou don't need another knob, though, since you can actually control this\nalready.\n\n\nOn Fri, Jan 6, 2012 at 10:07 AM, Krzysztof Kowalik <chris@nu7hat.ch> wrote:\n\n> Brad, it's 2 line fixup which doesn't affect anything but helps a lot in a\n> critical situation. http.Server is awesome and enough to most of the use\n> cases, but when it reaches conns limit it just eats 100cpu which is not\n> natural behavior.\n>\n>\n> 2012/1/6 Brad Fitzpatrick <bradfitz@golang.org>\n>\n>> This feels too specialized.\n>>\n>> If you want this behavior, just implement your own net.Listener to give\n>> to the http.Server with this behavior.\n>>\n>>\n>> On Fri, Jan 6, 2012 at 12:22 AM, <kriss.kowalik@gmail.com> wrote:\n>>\n>>> Reviewers: golang-dev_googlegroups.com,\n>>>\n>>> Message:\n>>> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n>>>\n>>> I'd like you to review this change to\n>>> https://go.googlecode.com/hg/\n>>>\n>>>\n>>> Description:\n>>> net/http: added TemporaryDelay field to the Server.\n>>>\n>>> When listener can't accept connection due to fd limit then goes\n>>> into an infinity loop until any fd will become available.\n>>> If TemporaryDelay is set then next try will be delayed in a\n>>> specified amount of time.\n>>>\n>>> Please review this at http://codereview.appspot.com/**5519053/<http://codereview.appspot.com/5519053/>\n>>>\n>>> Affected files:\n>>>  M src/pkg/net/http/server.go\n>>>\n>>>\n>>> Index: src/pkg/net/http/server.go\n>>> ==============================**==============================**=======\n>>> --- a/src/pkg/net/http/server.go\n>>> +++ b/src/pkg/net/http/server.go\n>>> @@ -957,6 +957,7 @@\n>>>        ReadTimeout    time.Duration // the net.Conn.SetReadTimeout value\n>>> for new connections\n>>>        WriteTimeout   time.Duration // the net.Conn.SetWriteTimeout\n>>> value for new connections\n>>>        MaxHeaderBytes int           // maximum size of request headers,\n>>> DefaultMaxHeaderBytes if 0\n>>> +       TemporaryDelay time.Duration // time delay used when connections\n>>> limit has been reached\n>>>  }\n>>>\n>>>  // ListenAndServe listens on the TCP network address srv.Addr and then\n>>> @@ -984,6 +985,7 @@\n>>>                if e != nil {\n>>>                        if ne, ok := e.(net.Error); ok && ne.Temporary() {\n>>>                                log.Printf(\"http: Accept error: %v\", e)\n>>> +                               <-time.After(srv.**TemporaryDelay)\n>>>                                continue\n>>>                        }\n>>>                        return e\n>>>\n>>>\n>>>\n>>\n>\n",
			"disapproval": false,
			"date": "2012-01-06 18:48:22.632162",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This feels too specialized.\n\nIf you want this behavior, just implement your own net.Listener to give to\nthe http.Server with this behavior.\n\n\nOn Fri, Jan 6, 2012 at 12:22 AM, <kriss.kowalik@gmail.com> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> net/http: added TemporaryDelay field to the Server.\n>\n> When listener can't accept connection due to fd limit then goes\n> into an infinity loop until any fd will become available.\n> If TemporaryDelay is set then next try will be delayed in a\n> specified amount of time.\n>\n> Please review this at http://codereview.appspot.com/**5519053/<http://codereview.appspot.com/5519053/>\n>\n> Affected files:\n>  M src/pkg/net/http/server.go\n>\n>\n> Index: src/pkg/net/http/server.go\n> ==============================**==============================**=======\n> --- a/src/pkg/net/http/server.go\n> +++ b/src/pkg/net/http/server.go\n> @@ -957,6 +957,7 @@\n>        ReadTimeout    time.Duration // the net.Conn.SetReadTimeout value\n> for new connections\n>        WriteTimeout   time.Duration // the net.Conn.SetWriteTimeout value\n> for new connections\n>        MaxHeaderBytes int           // maximum size of request headers,\n> DefaultMaxHeaderBytes if 0\n> +       TemporaryDelay time.Duration // time delay used when connections\n> limit has been reached\n>  }\n>\n>  // ListenAndServe listens on the TCP network address srv.Addr and then\n> @@ -984,6 +985,7 @@\n>                if e != nil {\n>                        if ne, ok := e.(net.Error); ok && ne.Temporary() {\n>                                log.Printf(\"http: Accept error: %v\", e)\n> +                               <-time.After(srv.**TemporaryDelay)\n>                                continue\n>                        }\n>                        return e\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-01-06 17:56:58.408390",
			"approval": false
		},
		{
			"sender": "kriss.kowalik@gmail.com",
			"recipients": [
				"kriss.kowalik@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-06 08:22:44.976998",
			"approval": false
		},
		{
			"sender": "chris@nu7hat.ch",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Brad, it's 2 line fixup which doesn't affect anything but helps a lot in a\ncritical situation. http.Server is awesome and enough to most of the use\ncases, but when it reaches conns limit it just eats 100cpu which is not\nnatural behavior.\n\n2012/1/6 Brad Fitzpatrick <bradfitz@golang.org>\n\n> This feels too specialized.\n>\n> If you want this behavior, just implement your own net.Listener to give to\n> the http.Server with this behavior.\n>\n>\n> On Fri, Jan 6, 2012 at 12:22 AM, <kriss.kowalik@gmail.com> wrote:\n>\n>> Reviewers: golang-dev_googlegroups.com,\n>>\n>> Message:\n>> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n>>\n>> I'd like you to review this change to\n>> https://go.googlecode.com/hg/\n>>\n>>\n>> Description:\n>> net/http: added TemporaryDelay field to the Server.\n>>\n>> When listener can't accept connection due to fd limit then goes\n>> into an infinity loop until any fd will become available.\n>> If TemporaryDelay is set then next try will be delayed in a\n>> specified amount of time.\n>>\n>> Please review this at http://codereview.appspot.com/**5519053/<http://codereview.appspot.com/5519053/>\n>>\n>> Affected files:\n>>  M src/pkg/net/http/server.go\n>>\n>>\n>> Index: src/pkg/net/http/server.go\n>> ==============================**==============================**=======\n>> --- a/src/pkg/net/http/server.go\n>> +++ b/src/pkg/net/http/server.go\n>> @@ -957,6 +957,7 @@\n>>        ReadTimeout    time.Duration // the net.Conn.SetReadTimeout value\n>> for new connections\n>>        WriteTimeout   time.Duration // the net.Conn.SetWriteTimeout value\n>> for new connections\n>>        MaxHeaderBytes int           // maximum size of request headers,\n>> DefaultMaxHeaderBytes if 0\n>> +       TemporaryDelay time.Duration // time delay used when connections\n>> limit has been reached\n>>  }\n>>\n>>  // ListenAndServe listens on the TCP network address srv.Addr and then\n>> @@ -984,6 +985,7 @@\n>>                if e != nil {\n>>                        if ne, ok := e.(net.Error); ok && ne.Temporary() {\n>>                                log.Printf(\"http: Accept error: %v\", e)\n>> +                               <-time.After(srv.**TemporaryDelay)\n>>                                continue\n>>                        }\n>>                        return e\n>>\n>>\n>>\n>\n",
			"disapproval": false,
			"date": "2012-01-06 18:07:47.410733",
			"approval": false
		},
		{
			"sender": "gary.burd@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I agree that this solution to the problem is too specialized.  Other ways \nof handling the problem include:\n\n- Log a fatal error to bring the problem to the attention of the operations \nstaff.\n\n- Limit the number of open HTTP connections to a level below the fd limit.\n\n\n",
			"disapproval": false,
			"date": "2012-01-06 19:37:19.865909",
			"approval": false
		},
		{
			"sender": "kriss.kowalik@gmail.com",
			"recipients": [
				"kriss.kowalik@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"chris@nu7hat.ch",
				"gary.burd@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-01-11 02:28:56.886242",
			"approval": false
		}
	],
	"owner_email": "kriss.kowalik@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "nu7hatch",
	"subject": "code review 5519053: net/http: added TemporaryDelay field to the Server.",
	"created": "2012-01-06 08:17:06.260734",
	"patchsets": [
		1,
		2001,
		4001
	],
	"modified": "2012-01-11 02:28:58.514903",
	"closed": true,
	"issue": 5519053
}