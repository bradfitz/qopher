{
	"description": "net/http: prevent the ServeMux from clobbering user routes when its trying to be helpful",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"rsc@golang.org",
		"kevlar@google.com",
		"dsymonds@golang.org"
	],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Feb 4, 2012 at 11:36 AM, Russ Cox <rsc@golang.org> wrote:\n\n> On Sat, Feb 4, 2012 at 14:33, Brad Fitzpatrick <bradfitz@golang.org>\n> wrote:\n> > why would it panic?\n>\n> registering the same path twice panics.\n>\n\nI don't see that code, and doesn't seem to panic:\n\nhttp://play.golang.org/p/vFUYW9cTuE\n",
			"disapproval": false,
			"date": "2012-02-04 19:54:26.919191",
			"approval": false
		},
		{
			"sender": "balasanjay@gmail.com",
			"recipients": [
				"balasanjay@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: bradfitz@golang.org, golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-02-04 11:45:20.948393",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Feb 4, 2012 at 11:29 AM, Russ Cox <rsc@golang.org> wrote:\n\n> On Sat, Feb 4, 2012 at 14:26, Russ Cox <rsc@golang.org> wrote:\n> > I'm a little confused about why it is a good idea to treat\n> > /foo and /foo/ as separate URLs.  Can you explain the\n> > motivation here?\n>\n> Also, the current registration semantics are order-independent.\n> This CL makes them order-dependent.  If I register /foo and then\n> /foo/, I get a working program, and if I register /foo/ and then /foo\n> I get a panic.  That's a significant regression.\n\n\nwhy would it panic?\n",
			"disapproval": false,
			"date": "2012-02-04 19:34:00.252051",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Feb 4, 2012 at 14:33, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n> why would it panic?\n\nregistering the same path twice panics.\nregistering /foo/ registers /foo too (so it can\nredirect to /foo/).\n\nhandle(\"/foo/\")  registers /foo/ and /foo redirect\n\nthis CL changes that behavior so that registering\n/foo/ registers /foo only if there is not already\na handler for /foo.\n\ncase 1:\n\nhandle(\"/foo\")\nhandle(\"/foo/\")  registers only /foo/\n\ncase 2:\n\nhandle(\"/foo/\")  registers /foo/ and /foo redirect\nhandle(\"/foo\")  panic - /foo already registered\n\nruss\n",
			"disapproval": false,
			"date": "2012-02-04 19:36:49.157723",
			"approval": false
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "for what it's worth, the current behavior causes me headaches with a\nreverse proxy I have that uses prefixes to distribute queries to various\nservice slaves.  My users have to remember to include the trailing /,\nbecause the automatically-generated non-/ redirect clobbers the prefix.  I\nhaven't yet added in the response mutation on the proxy side required to\ntransform redirects so they aren't broken.\n\nbasically:\nI register /slave1/, /slave2/ etc and these proxy to services that define\n/page1/ and /page2/ but if you go to /slave2/page1 it redirects to /page1/\nwhich is unhelpful.  I tried to register my own handler for these, but to\nno avail.\n\nAn alternate solution might be to have a RegisterOnly that doesn't do\nanything special.\n",
			"disapproval": false,
			"date": "2012-02-05 00:04:32.510288",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Okay, then that is definitely a bug.  You shouldn't be able to\njust silently have your registrations deleted.\n",
			"disapproval": false,
			"date": "2012-02-04 21:55:26.769458",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm a little confused about why it is a good idea to treat\n/foo and /foo/ as separate URLs.  Can you explain the\nmotivation here?\n\nRuss\n",
			"disapproval": false,
			"date": "2012-02-04 19:26:16.624712",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Feb 4, 2012 at 14:26, Russ Cox <rsc@golang.org> wrote:\n> I'm a little confused about why it is a good idea to treat\n> /foo and /foo/ as separate URLs. \u00a0Can you explain the\n> motivation here?\n\nAlso, the current registration semantics are order-independent.\nThis CL makes them order-dependent.  If I register /foo and then\n/foo/, I get a working program, and if I register /foo/ and then /foo\nI get a panic.  That's a significant regression.\n\nIf this change has to be done (and I don't think that is sure yet),\nit has to be done differently.  For example, the order-independence\nwould be preserved if registering /foo/ did not create the map entry\nfor /foo ever, but the lookup for /foo would allow /foo/ to match as\na less-specific match than /foo.\n\nThis all seems very complicated.  Unless there's an excellent\nreason to introduce this complication now, I'd like to defer this\nto after Go 1.\n\nThanks.\n",
			"disapproval": false,
			"date": "2012-02-04 19:30:00.152544",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Maybe there needs to be a secondary map that holds the set of\nimplicitly registered paths. Then /foo/ should implicitly add a\nhandler for /foo if one doesn't already exist (and add an entry to\nthat secondary map), but then registering a duplicate path is okay iff\nan entry for it doesn't exist in the secondary map. That makes the\norder of registration have no effect.\n\n\nDave.\n",
			"disapproval": false,
			"date": "2012-02-05 00:14:25.161464",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"balasanjay@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Also, update your commit description to be shorter & more descriptive.  Perhaps:\n\nnet/http: prevent ServeMux implicit redirects from clobbering routes\n\nhttp://codereview.appspot.com/5630053/diff/4001/src/pkg/net/http/serve_test.go\nFile src/pkg/net/http/serve_test.go (right):\n\nhttp://codereview.appspot.com/5630053/diff/4001/src/pkg/net/http/serve_test.go#newcode237\nsrc/pkg/net/http/serve_test.go:237: type tCase struct {\ntype \"case\" works instead of tCase.  or you don't have to give it a name at all:\n\ncases := []struct {\n   ...\n}{\n      {path: ......},\n      {path: ......},\n      {path: ......},\n}\n\nhttp://codereview.appspot.com/5630053/diff/4001/src/pkg/net/http/serve_test.go#newcode240\nsrc/pkg/net/http/serve_test.go:240: redirect       string // set only if shouldRedirect\nmight as well just combine the two fields into one then:\n\nwantRedirect string // or empty string if we don't want a redirect\n\nhttp://codereview.appspot.com/5630053/diff/4001/src/pkg/net/http/serve_test.go#newcode246\nsrc/pkg/net/http/serve_test.go:246: {path: \"/thumbs/\", shouldRedirect: false},\nthe false values are redundant.  everything's zero by default.",
			"disapproval": false,
			"date": "2012-02-04 18:51:25.363096",
			"approval": false
		},
		{
			"sender": "balasanjay@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Also, Brad, funnily enough, case was the name of the tCase struct, I don't \nthink the grammar can handle that however :)\n\nhttp://play.golang.org/p/HkEuWhDxJ0\n\nSanjay\n",
			"disapproval": false,
			"date": "2012-02-05 02:29:31.760160",
			"approval": false
		},
		{
			"sender": "balasanjay@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "As others have said, the mux, as it stands, does not panic when it would \nhave clobbered old routes. In fact, its behaviour is order dependant now \ndue to its redirecting behaviour.\n\nWhile I'm ok with having ServeMux be silent when the user \noverwrites themselves, I'm not ok with having the Mux \nsilently overwrite user-registered routes. This was the purpose of this CL.\n\nIf you do want to make it panic on duplicate registrations, then I like \nDave's suggestion, as it would have fixed the issue I was having.\n\nI will wait till we achieve consensus before I move further.\n\nSanjay\n\n\n",
			"disapproval": false,
			"date": "2012-02-05 02:25:37.600061",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is not a critical bug fix.\nLet's postpone this until after Go 1.\nPlease file an issue or remember to ping this CL\nafter Go 1 is out.\n\nThanks.\nRuss\n",
			"disapproval": false,
			"date": "2012-02-06 17:44:25.247971",
			"approval": false
		},
		{
			"sender": "balasanjay@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sounds good, filed issue: golang.org/issue/2900\n\nSanjay\n",
			"disapproval": false,
			"date": "2012-02-07 08:53:29.825988",
			"approval": false
		},
		{
			"sender": "balasanjay@gmail.com",
			"recipients": [
				"balasanjay@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"kevlar@google.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-02-08 07:27:45.456093",
			"approval": false
		}
	],
	"owner_email": "balasanjay@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "sanjay.m",
	"subject": "code review 5630053: net/http: prevent the ServeMux from clobbering user rou...",
	"created": "2012-02-04 11:44:55.522784",
	"patchsets": [
		1,
		1001,
		4001
	],
	"modified": "2012-02-08 07:27:46.891162",
	"closed": true,
	"issue": 5630053
}