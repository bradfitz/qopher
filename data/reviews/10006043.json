{
	"description": "compress/flate: reduce tiny allocs done by encoder.\n\nbenchmark                          old allocs   new allocs    delta\nBenchmarkEncodeDigitsSpeed1e4             942           91  -90.34%\nBenchmarkEncodeDigitsSpeed1e5            1919          178  -90.72%\nBenchmarkEncodeDigitsSpeed1e6           18539         1517  -91.82%\nBenchmarkEncodeDigitsDefault1e4           734          100  -86.38%\nBenchmarkEncodeDigitsDefault1e5          1958          193  -90.14%\nBenchmarkEncodeDigitsDefault1e6         17338         1426  -91.78%\nBenchmarkEncodeDigitsCompress1e4          734          100  -86.38%\nBenchmarkEncodeDigitsCompress1e5         1958          193  -90.14%\nBenchmarkEncodeDigitsCompress1e6        17338         1426  -91.78%\nBenchmarkEncodeTwainSpeed1e4             1865          109  -94.16%\nBenchmarkEncodeTwainSpeed1e5             3943          211  -94.65%\nBenchmarkEncodeTwainSpeed1e6            31279         1595  -94.90%\nBenchmarkEncodeTwainDefault1e4           1811          103  -94.31%\nBenchmarkEncodeTwainDefault1e5           3708          199  -94.63%\nBenchmarkEncodeTwainDefault1e6          26738         1330  -95.03%\nBenchmarkEncodeTwainCompress1e4          1811          103  -94.31%\nBenchmarkEncodeTwainCompress1e5          3693          190  -94.86%\nBenchmarkEncodeTwainCompress1e6         26902         1333  -95.04%\n\nbenchmark                           old bytes    new bytes    delta\nBenchmarkEncodeDigitsSpeed1e4         1469438      1453920   -1.06%\nBenchmarkEncodeDigitsSpeed1e5         1490898      1458961   -2.14%\nBenchmarkEncodeDigitsSpeed1e6         1858819      1542407  -17.02%\nBenchmarkEncodeDigitsDefault1e4       1465903      1454160   -0.80%\nBenchmarkEncodeDigitsDefault1e5       1491841      1459361   -2.18%\nBenchmarkEncodeDigitsDefault1e6       1825424      1531545  -16.10%\nBenchmarkEncodeDigitsCompress1e4      1465903      1454160   -0.80%\nBenchmarkEncodeDigitsCompress1e5      1491681      1459361   -2.17%\nBenchmarkEncodeDigitsCompress1e6      1825424      1531545  -16.10%\nBenchmarkEncodeTwainSpeed1e4          1485308      1454400   -2.08%\nBenchmarkEncodeTwainSpeed1e5          1526065      1459878   -4.34%\nBenchmarkEncodeTwainSpeed1e6          2066627      1536296  -25.66%\nBenchmarkEncodeTwainDefault1e4        1484380      1454240   -2.03%\nBenchmarkEncodeTwainDefault1e5        1521793      1459558   -4.09%\nBenchmarkEncodeTwainDefault1e6        1977504      1523388  -22.96%\nBenchmarkEncodeTwainCompress1e4       1484380      1454240   -2.03%\nBenchmarkEncodeTwainCompress1e5       1521457      1459318   -4.08%\nBenchmarkEncodeTwainCompress1e6       1980000      1523609  -23.05%\n\nbenchmark                           old ns/op    new ns/op    delta\nBenchmarkEncodeDigitsSpeed1e4         1472128      1384343   -5.96%\nBenchmarkEncodeDigitsSpeed1e5         8283663      8112304   -2.07%\nBenchmarkEncodeDigitsSpeed1e6        77459311     76364216   -1.41%\nBenchmarkEncodeDigitsDefault1e4       1813090      1746552   -3.67%\nBenchmarkEncodeDigitsDefault1e5      26221292     26052516   -0.64%\nBenchmarkEncodeDigitsDefault1e6     286512472    286099039   -0.14%\nBenchmarkEncodeDigitsCompress1e4      1809373      1747230   -3.43%\nBenchmarkEncodeDigitsCompress1e5     26231580     26038456   -0.74%\nBenchmarkEncodeDigitsCompress1e6    286140002    286025372   -0.04%\nBenchmarkEncodeTwainSpeed1e4          1594094      1438600   -9.75%\nBenchmarkEncodeTwainSpeed1e5          7669724      7316288   -4.61%\nBenchmarkEncodeTwainSpeed1e6         68731353     65938994   -4.06%\nBenchmarkEncodeTwainDefault1e4        2063497      1866488   -9.55%\nBenchmarkEncodeTwainDefault1e5       22602689     22221377   -1.69%\nBenchmarkEncodeTwainDefault1e6      233376842    232114297   -0.54%\nBenchmarkEncodeTwainCompress1e4       2062441      1949676   -5.47%\nBenchmarkEncodeTwainCompress1e5      28264344     27930627   -1.18%\nBenchmarkEncodeTwainCompress1e6     304369641    303704330   -0.22%\n\nbenchmark                            old MB/s     new MB/s  speedup\nBenchmarkEncodeDigitsSpeed1e4            6.79         7.22    1.06x\nBenchmarkEncodeDigitsSpeed1e5           12.07        12.33    1.02x\nBenchmarkEncodeDigitsSpeed1e6           12.91        13.10    1.01x\nBenchmarkEncodeDigitsDefault1e4          5.52         5.73    1.04x\nBenchmarkEncodeDigitsDefault1e5          3.81         3.84    1.01x\nBenchmarkEncodeDigitsDefault1e6          3.49         3.50    1.00x\nBenchmarkEncodeDigitsCompress1e4         5.53         5.72    1.03x\nBenchmarkEncodeDigitsCompress1e5         3.81         3.84    1.01x\nBenchmarkEncodeDigitsCompress1e6         3.49         3.50    1.00x\nBenchmarkEncodeTwainSpeed1e4             6.27         6.95    1.11x\nBenchmarkEncodeTwainSpeed1e5            13.04        13.67    1.05x\nBenchmarkEncodeTwainSpeed1e6            14.55        15.17    1.04x\nBenchmarkEncodeTwainDefault1e4           4.85         5.36    1.11x\nBenchmarkEncodeTwainDefault1e5           4.42         4.50    1.02x\nBenchmarkEncodeTwainDefault1e6           4.28         4.31    1.01x\nBenchmarkEncodeTwainCompress1e4          4.85         5.13    1.06x\nBenchmarkEncodeTwainCompress1e5          3.54         3.58    1.01x\nBenchmarkEncodeTwainCompress1e6          3.29         3.29    1.00x",
	"cc": [
		"imkrasin@gmail.com",
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"imkrasin@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello imkrasin@gmail.com, golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-06-04 15:05:21.406090",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"imkrasin@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This CL replaces CL 5573076. It produces even less garbage by totally eliminating the notion of nodes from the algorithm.\n\nUnfortunately, I am unable to recognize a Huffman tree building in this algorithm, I can just say that the patched algorithm is equivalent to the old one.",
			"disapproval": false,
			"date": "2013-06-04 15:08:41.316540",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "You don't need autobench.\r\n\r\nYou just save the output of \"go test -test=none -benchmark=.\r\ncompress/flate\" before & after the patch, and then:\r\n\r\n$GOROOT/misc/benchcmp before after\r\n\r\n\r\n\r\nOn Tue, Jun 4, 2013 at 8:48 AM, <imkrasin@gmail.com> wrote:\r\n\r\n> Hi Remi,\r\n>\r\n> a couple of questions.\r\n>\r\n> 1. How do I reproduce this benchmark results? I assume you're using\r\n> autobench from Dave Cheney, but I am not yet familiar with it. How to to\r\n> produce a diff between tip and tip+patch?\r\n>\r\n> 2. If I recall correctly, this improvement mostly affects compressing\r\n> uncompressible data, like a large video file. I would recommend to\r\n> include such test (may be pseudo-randomly generated) to the bench suite\r\n>\r\n>\r\n> https://codereview.appspot.**com/10006043/<https://codereview.appspot.com/10006043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-06-04 16:14:06.316300",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "How's performance?\r\n\r\nI assume unchanged if you didn't cite that part of benchcmp?\r\n\r\n\r\n\r\nOn Tue, Jun 4, 2013 at 8:05 AM, <remyoudompheng@gmail.com> wrote:\r\n\r\n> Reviewers: imkrasin, golang-dev1,\r\n>\r\n> Message:\r\n> Hello imkrasin@gmail.com, golang-dev@googlegroups.com (cc:\r\n> golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> compress/flate: reduce tiny allocs done by encoder.\r\n>\r\n> benchmark                          old allocs   new allocs    delta\r\n> BenchmarkEncodeDigitsSpeed1e4             942           91  -90.34%\r\n> BenchmarkEncodeDigitsSpeed1e5            1919          178  -90.72%\r\n> BenchmarkEncodeDigitsSpeed1e6           18539         1517  -91.82%\r\n> BenchmarkEncodeDigitsDefault1e**4           734          100  -86.38%\r\n> BenchmarkEncodeDigitsDefault1e**5          1958          193  -90.14%\r\n> BenchmarkEncodeDigitsDefault1e**6         17338         1426  -91.78%\r\n> BenchmarkEncodeDigitsCompress1**e4          734          100  -86.38%\r\n> BenchmarkEncodeDigitsCompress1**e5         1958          193  -90.14%\r\n> BenchmarkEncodeDigitsCompress1**e6        17338         1426  -91.78%\r\n> BenchmarkEncodeTwainSpeed1e4             1865          109  -94.16%\r\n> BenchmarkEncodeTwainSpeed1e5             3943          211  -94.65%\r\n> BenchmarkEncodeTwainSpeed1e6            31279         1595  -94.90%\r\n> BenchmarkEncodeTwainDefault1e4           1811          103  -94.31%\r\n> BenchmarkEncodeTwainDefault1e5           3708          199  -94.63%\r\n> BenchmarkEncodeTwainDefault1e6          26738         1330  -95.03%\r\n> BenchmarkEncodeTwainCompress1e**4          1811          103  -94.31%\r\n> BenchmarkEncodeTwainCompress1e**5          3693          190  -94.86%\r\n> BenchmarkEncodeTwainCompress1e**6         26902         1333  -95.04%\r\n>\r\n> benchmark                           old bytes    new bytes    delta\r\n> BenchmarkEncodeDigitsSpeed1e4         1469438      1453920   -1.06%\r\n> BenchmarkEncodeDigitsSpeed1e5         1490898      1458961   -2.14%\r\n> BenchmarkEncodeDigitsSpeed1e6         1858819      1542407  -17.02%\r\n> BenchmarkEncodeDigitsDefault1e**4       1465903      1454160   -0.80%\r\n> BenchmarkEncodeDigitsDefault1e**5       1491841      1459361   -2.18%\r\n> BenchmarkEncodeDigitsDefault1e**6       1825424      1531545  -16.10%\r\n> BenchmarkEncodeDigitsCompress1**e4      1465903      1454160   -0.80%\r\n> BenchmarkEncodeDigitsCompress1**e5      1491681      1459361   -2.17%\r\n> BenchmarkEncodeDigitsCompress1**e6      1825424      1531545  -16.10%\r\n> BenchmarkEncodeTwainSpeed1e4          1485308      1454400   -2.08%\r\n> BenchmarkEncodeTwainSpeed1e5          1526065      1459878   -4.34%\r\n> BenchmarkEncodeTwainSpeed1e6          2066627      1536296  -25.66%\r\n> BenchmarkEncodeTwainDefault1e4        1484380      1454240   -2.03%\r\n> BenchmarkEncodeTwainDefault1e5        1521793      1459558   -4.09%\r\n> BenchmarkEncodeTwainDefault1e6        1977504      1523388  -22.96%\r\n> BenchmarkEncodeTwainCompress1e**4       1484380      1454240   -2.03%\r\n> BenchmarkEncodeTwainCompress1e**5       1521457      1459318   -4.08%\r\n> BenchmarkEncodeTwainCompress1e**6       1980000      1523609  -23.05%\r\n>\r\n> Please review this at https://codereview.appspot.**com/10006043/<https://codereview.appspot.com/10006043/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/compress/flate/**huffman_code.go\r\n>\r\n>\r\n> Index: src/pkg/compress/flate/**huffman_code.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/compress/flate/**huffman_code.go\r\n> +++ b/src/pkg/compress/flate/**huffman_code.go\r\n> @@ -19,23 +19,13 @@\r\n>         freq    int32\r\n>  }\r\n>\r\n> -type chain struct {\r\n> -       // The sum of the leaves in this tree\r\n> -       freq int32\r\n> -\r\n> -       // The number of literals to the left of this item at this level\r\n> -       leafCount int32\r\n> -\r\n> -       // The right child of this chain in the previous level.\r\n> -       up *chain\r\n> -}\r\n> -\r\n> +// A levelInfo describes the state of the constructed tree for a given\r\n> depth.\r\n>  type levelInfo struct {\r\n>         // Our level.  for better printing\r\n>         level int32\r\n>\r\n> -       // The most recent chain generated for this level\r\n> -       lastChain *chain\r\n> +       // The frequency of the last node at this level\r\n> +       lastFreq int32\r\n>\r\n>         // The frequency of the next character to add to this level\r\n>         nextCharFreq int32\r\n> @@ -47,12 +37,6 @@\r\n>         // The number of chains remaining to generate for this level\r\n> before moving\r\n>         // up to the next level\r\n>         needed int32\r\n> -\r\n> -       // The levelInfo for level+1\r\n> -       up *levelInfo\r\n> -\r\n> -       // The levelInfo for level-1\r\n> -       down *levelInfo\r\n>  }\r\n>\r\n>  func maxNode() literalNode { return literalNode{math.MaxUint16,\r\n> math.MaxInt32} }\r\n> @@ -121,6 +105,8 @@\r\n>         return total\r\n>  }\r\n>\r\n> +const maxBitsLimit = 16\r\n> +\r\n>  // Return the number of literals assigned to each bit size in the Huffman\r\n> encoding\r\n>  //\r\n>  // This method is only called when list.length >= 3\r\n> @@ -131,9 +117,13 @@\r\n>  //             frequency, and has as its last element a special element\r\n> with frequency\r\n>  //             MaxInt32\r\n>  // maxBits     The maximum number of bits that should be used to encode\r\n> any literal.\r\n> +//             Must be less than 16.\r\n>  // return      An integer array in which array[i] indicates the number of\r\n> literals\r\n>  //             that should be encoded in i bits.\r\n>  func (h *huffmanEncoder) bitCounts(list []literalNode, maxBits int32)\r\n> []int32 {\r\n> +       if maxBits >= maxBitsLimit {\r\n> +               panic(\"flate: maxBits too large\")\r\n> +       }\r\n>         n := int32(len(list))\r\n>         list = list[0 : n+1]\r\n>         list[n] = maxNode()\r\n> @@ -148,53 +138,61 @@\r\n>         // A bogus \"Level 0\" whose sole purpose is so that\r\n>         // level1.prev.needed==0.  This makes level1.nextPairFreq\r\n>         // be a legitimate value that never gets chosen.\r\n> -       top := &levelInfo{needed: 0}\r\n> -       chain2 := &chain{list[1].freq, 2, new(chain)}\r\n> +       var levels [maxBitsLimit]levelInfo\r\n> +       // leafCounts[i] counts the number of literals at the left\r\n> +       // of ancestors of the rightmost node at level i.\r\n> +       // leafCounts[i][j] is the number of literals at the left\r\n> +       // of the level j ancestor.\r\n> +       var leafCounts [maxBitsLimit][maxBitsLimit]**int32\r\n> +\r\n>         for level := int32(1); level <= maxBits; level++ {\r\n>                 // For every level, the first two items are the first two\r\n> characters.\r\n>                 // We initialize the levels as if we had already figured\r\n> this out.\r\n> -               top = &levelInfo{\r\n> +               levels[level] = levelInfo{\r\n>                         level:        level,\r\n> -                       lastChain:    chain2,\r\n> +                       lastFreq:     list[1].freq,\r\n>                         nextCharFreq: list[2].freq,\r\n>                         nextPairFreq: list[0].freq + list[1].freq,\r\n> -                       down:         top,\r\n>                 }\r\n> -               top.down.up = top\r\n> +               leafCounts[level][level] = 2\r\n>                 if level == 1 {\r\n> -                       top.nextPairFreq = math.MaxInt32\r\n> +                       levels[level].nextPairFreq = math.MaxInt32\r\n>                 }\r\n>         }\r\n>\r\n>         // We need a total of 2*n - 2 items at top level and have already\r\n> generated 2.\r\n> -       top.needed = 2*n - 4\r\n> +       levels[maxBits].needed = 2*n - 4\r\n>\r\n> -       l := top\r\n> +       level := maxBits\r\n>         for {\r\n> +               l := &levels[level]\r\n>                 if l.nextPairFreq == math.MaxInt32 && l.nextCharFreq ==\r\n> math.MaxInt32 {\r\n>                         // We've run out of both leafs and pairs.\r\n>                         // End all calculations for this level.\r\n> -                       // To m sure we never come back to this level or\r\n> any lower level,\r\n> +                       // To make sure we never come back to this level\r\n> or any lower level,\r\n>                         // set nextPairFreq impossibly large.\r\n> -                       l.lastChain = nil\r\n>                         l.needed = 0\r\n> -                       l = l.up\r\n> -                       l.nextPairFreq = math.MaxInt32\r\n> +                       levels[level+1].nextPairFreq = math.MaxInt32\r\n> +                       level++\r\n>                         continue\r\n>                 }\r\n>\r\n> -               prevFreq := l.lastChain.freq\r\n> +               prevFreq := l.lastFreq\r\n>                 if l.nextCharFreq < l.nextPairFreq {\r\n>                         // The next item on this row is a leaf node.\r\n> -                       n := l.lastChain.leafCount + 1\r\n> -                       l.lastChain = &chain{l.nextCharFreq, n,\r\n> l.lastChain.up}\r\n> +                       n := leafCounts[level][level] + 1\r\n> +                       l.lastFreq = l.nextCharFreq\r\n> +                       // Lower leafCounts are the same of the previous\r\n> node.\r\n> +                       leafCounts[level][level] = n\r\n>                         l.nextCharFreq = list[n].freq\r\n>                 } else {\r\n>                         // The next item on this row is a pair from the\r\n> previous row.\r\n>                         // nextPairFreq isn't valid until we generate two\r\n>                         // more values in the level below\r\n> -                       l.lastChain = &chain{l.nextPairFreq,\r\n> l.lastChain.leafCount, l.down.lastChain}\r\n> -                       l.down.needed = 2\r\n> +                       l.lastFreq = l.nextPairFreq\r\n> +                       // Take leaf counts from the lower level, except\r\n> counts[level] remains the same.\r\n> +                       copy(leafCounts[level][:level]**,\r\n> leafCounts[level-1][:level])\r\n> +                       levels[l.level-1].needed = 2\r\n>                 }\r\n>\r\n>                 if l.needed--; l.needed == 0 {\r\n> @@ -202,33 +200,33 @@\r\n>                         // Continue calculating one level up.  Fill in\r\n> nextPairFreq\r\n>                         // of that level with the sum of the two nodes\r\n> we've just calculated on\r\n>                         // this level.\r\n> -                       up := l.up\r\n> -                       if up == nil {\r\n> +                       if l.level == maxBits {\r\n>                                 // All done!\r\n>                                 break\r\n>                         }\r\n> -                       up.nextPairFreq = prevFreq + l.lastChain.freq\r\n> -                       l = up\r\n> +                       levels[l.level+1].nextPairFreq = prevFreq +\r\n> l.lastFreq\r\n> +                       level++\r\n>                 } else {\r\n>                         // If we stole from below, move down temporarily\r\n> to replenish it.\r\n> -                       for l.down.needed > 0 {\r\n> -                               l = l.down\r\n> +                       for levels[level-1].needed > 0 {\r\n> +                               level--\r\n>                         }\r\n>                 }\r\n>         }\r\n>\r\n>         // Somethings is wrong if at the end, the top level is null or\r\n> hasn't used\r\n>         // all of the leaves.\r\n> -       if top.lastChain.leafCount != n {\r\n> -               panic(\"top.lastChain.leafCount != n\")\r\n> +       if leafCounts[maxBits][maxBits] != n {\r\n> +               panic(\"leafCounts[maxBits][**maxBits] != n\")\r\n>         }\r\n>\r\n>         bitCount := make([]int32, maxBits+1)\r\n>         bits := 1\r\n> -       for chain := top.lastChain; chain.up != nil; chain = chain.up {\r\n> +       counts := &leafCounts[maxBits]\r\n> +       for level := maxBits; level > 0; level-- {\r\n>                 // chain.leafCount gives the number of literals requiring\r\n> at least \"bits\"\r\n>                 // bits to encode.\r\n> -               bitCount[bits] = chain.leafCount - chain.up.leafCount\r\n> +               bitCount[bits] = counts[level] - counts[level-1]\r\n>                 bits++\r\n>         }\r\n>         return bitCount\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-06-04 15:15:36.671020",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"imkrasin@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I obtained the following benchmarks. Pooling compressors would eliminate the remaining allocations.\n\nbenchmark                           old ns/op    new ns/op    delta\nBenchmarkEncodeDigitsSpeed1e4         1473703      1423962   -3.38%\nBenchmarkEncodeDigitsSpeed1e5         7843347      7705308   -1.76%\nBenchmarkEncodeDigitsSpeed1e6        73075512     71755176   -1.81%\nBenchmarkEncodeDigitsDefault1e4       1780609      1801153   +1.15%\nBenchmarkEncodeDigitsDefault1e5      25852398     25793271   -0.23%\nBenchmarkEncodeDigitsDefault1e6     282116932    282168401   +0.02%\nBenchmarkEncodeDigitsCompress1e4      1786506      1736593   -2.79%\nBenchmarkEncodeDigitsCompress1e5     25865529     25807594   -0.22%\nBenchmarkEncodeDigitsCompress1e6    282564483    282679689   +0.04%\nBenchmarkEncodeTwainSpeed1e4          1589482      1488605   -6.35%\nBenchmarkEncodeTwainSpeed1e5          7420991      7113141   -4.15%\nBenchmarkEncodeTwainSpeed1e6         66161232     63871409   -3.46%\nBenchmarkEncodeTwainDefault1e4        1981308      1849068   -6.67%\nBenchmarkEncodeTwainDefault1e5       22192133     21908370   -1.28%\nBenchmarkEncodeTwainDefault1e6      227905084    227933999   +0.01%\nBenchmarkEncodeTwainCompress1e4       1997032      1865280   -6.60%\nBenchmarkEncodeTwainCompress1e5      27813189     27602763   -0.76%\nBenchmarkEncodeTwainCompress1e6     299715714    299078065   -0.21%",
			"disapproval": false,
			"date": "2013-06-04 15:27:21.822030",
			"approval": false
		},
		{
			"sender": "imkrasin@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"imkrasin@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi Remi,\n\na couple of questions.\n\n1. How do I reproduce this benchmark results? I assume you're using autobench from Dave Cheney, but I am not yet familiar with it. How to to produce a diff between tip and tip+patch?\n\n2. If I recall correctly, this improvement mostly affects compressing uncompressible data, like a large video file. I would recommend to include such test (may be pseudo-randomly generated) to the bench suite",
			"disapproval": false,
			"date": "2013-06-04 15:48:41.346870",
			"approval": false
		},
		{
			"sender": "imkrasin@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"imkrasin@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10006043/diff/1002/src/pkg/compress/flate/huffman_code.go\nFile src/pkg/compress/flate/huffman_code.go (right):\n\nhttps://codereview.appspot.com/10006043/diff/1002/src/pkg/compress/flate/huffman_code.go#newcode194\nsrc/pkg/compress/flate/huffman_code.go:194: copy(leafCounts[level][:level], leafCounts[level-1][:level])\nI fail to understand how this copy is related to the code on the left.\n\nCan you please explain a little bit more?\n\nOtherwise, the change seems reasonable.",
			"disapproval": false,
			"date": "2013-06-06 01:35:10.411580",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"imkrasin@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=nigeltao",
			"disapproval": false,
			"date": "2013-06-17 20:06:55.467020",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"imkrasin@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping? is anybody interested?",
			"disapproval": false,
			"date": "2013-07-24 06:53:50.982560",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "seems ok but there is one outstanding comment\r\n",
			"disapproval": false,
			"date": "2013-07-24 08:06:00.883460",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"imkrasin@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10006043/diff/1002/src/pkg/compress/flate/huffman_code.go\nFile src/pkg/compress/flate/huffman_code.go (right):\n\nhttps://codereview.appspot.com/10006043/diff/1002/src/pkg/compress/flate/huffman_code.go#newcode194\nsrc/pkg/compress/flate/huffman_code.go:194: copy(leafCounts[level][:level], leafCounts[level-1][:level])\nOn 2013/06/06 01:35:10, imkrasin wrote:\n> I fail to understand how this copy is related to the code on the left.\n> \n> Can you please explain a little bit more?\n> \n> Otherwise, the change seems reasonable.\n\nleafCounts[level] is the list of leaf counts of ancestors of levels[l].lastChain.\n\nIn the first case of the if, the new lastChain is a sibling of the old lastChain: only the last leafcount must be updated.\n\nIn the else part, the new lastChain is a child of the lastChain of the lower level. So the ancestor line changes completely, which is what the copy does.",
			"disapproval": false,
			"date": "2013-07-27 21:16:31.488220",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"imkrasin@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-07-27 21:22:14.410600",
			"approval": true
		},
		{
			"sender": "imkrasin@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"imkrasin@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10006043/diff/1002/src/pkg/compress/flate/huffman_code.go\nFile src/pkg/compress/flate/huffman_code.go (right):\n\nhttps://codereview.appspot.com/10006043/diff/1002/src/pkg/compress/flate/huffman_code.go#newcode194\nsrc/pkg/compress/flate/huffman_code.go:194: copy(leafCounts[level][:level], leafCounts[level-1][:level])\nThanks for the explanation.\n\nAlso, I like that you have included the memory profiler stats to the CL description. Could you please do the same for CPU profile? \n\nOtherwise, LGTM.",
			"disapproval": false,
			"date": "2013-07-27 21:23:46.845650",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"imkrasin@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=2fe813f4f3c2 ***\n\ncompress/flate: reduce tiny allocs done by encoder.\n\nbenchmark                          old allocs   new allocs    delta\nBenchmarkEncodeDigitsSpeed1e4             942           91  -90.34%\nBenchmarkEncodeDigitsSpeed1e5            1919          178  -90.72%\nBenchmarkEncodeDigitsSpeed1e6           18539         1517  -91.82%\nBenchmarkEncodeDigitsDefault1e4           734          100  -86.38%\nBenchmarkEncodeDigitsDefault1e5          1958          193  -90.14%\nBenchmarkEncodeDigitsDefault1e6         17338         1426  -91.78%\nBenchmarkEncodeDigitsCompress1e4          734          100  -86.38%\nBenchmarkEncodeDigitsCompress1e5         1958          193  -90.14%\nBenchmarkEncodeDigitsCompress1e6        17338         1426  -91.78%\nBenchmarkEncodeTwainSpeed1e4             1865          109  -94.16%\nBenchmarkEncodeTwainSpeed1e5             3943          211  -94.65%\nBenchmarkEncodeTwainSpeed1e6            31279         1595  -94.90%\nBenchmarkEncodeTwainDefault1e4           1811          103  -94.31%\nBenchmarkEncodeTwainDefault1e5           3708          199  -94.63%\nBenchmarkEncodeTwainDefault1e6          26738         1330  -95.03%\nBenchmarkEncodeTwainCompress1e4          1811          103  -94.31%\nBenchmarkEncodeTwainCompress1e5          3693          190  -94.86%\nBenchmarkEncodeTwainCompress1e6         26902         1333  -95.04%\n\nbenchmark                           old bytes    new bytes    delta\nBenchmarkEncodeDigitsSpeed1e4         1469438      1453920   -1.06%\nBenchmarkEncodeDigitsSpeed1e5         1490898      1458961   -2.14%\nBenchmarkEncodeDigitsSpeed1e6         1858819      1542407  -17.02%\nBenchmarkEncodeDigitsDefault1e4       1465903      1454160   -0.80%\nBenchmarkEncodeDigitsDefault1e5       1491841      1459361   -2.18%\nBenchmarkEncodeDigitsDefault1e6       1825424      1531545  -16.10%\nBenchmarkEncodeDigitsCompress1e4      1465903      1454160   -0.80%\nBenchmarkEncodeDigitsCompress1e5      1491681      1459361   -2.17%\nBenchmarkEncodeDigitsCompress1e6      1825424      1531545  -16.10%\nBenchmarkEncodeTwainSpeed1e4          1485308      1454400   -2.08%\nBenchmarkEncodeTwainSpeed1e5          1526065      1459878   -4.34%\nBenchmarkEncodeTwainSpeed1e6          2066627      1536296  -25.66%\nBenchmarkEncodeTwainDefault1e4        1484380      1454240   -2.03%\nBenchmarkEncodeTwainDefault1e5        1521793      1459558   -4.09%\nBenchmarkEncodeTwainDefault1e6        1977504      1523388  -22.96%\nBenchmarkEncodeTwainCompress1e4       1484380      1454240   -2.03%\nBenchmarkEncodeTwainCompress1e5       1521457      1459318   -4.08%\nBenchmarkEncodeTwainCompress1e6       1980000      1523609  -23.05%\n\nbenchmark                           old ns/op    new ns/op    delta\nBenchmarkEncodeDigitsSpeed1e4         1472128      1384343   -5.96%\nBenchmarkEncodeDigitsSpeed1e5         8283663      8112304   -2.07%\nBenchmarkEncodeDigitsSpeed1e6        77459311     76364216   -1.41%\nBenchmarkEncodeDigitsDefault1e4       1813090      1746552   -3.67%\nBenchmarkEncodeDigitsDefault1e5      26221292     26052516   -0.64%\nBenchmarkEncodeDigitsDefault1e6     286512472    286099039   -0.14%\nBenchmarkEncodeDigitsCompress1e4      1809373      1747230   -3.43%\nBenchmarkEncodeDigitsCompress1e5     26231580     26038456   -0.74%\nBenchmarkEncodeDigitsCompress1e6    286140002    286025372   -0.04%\nBenchmarkEncodeTwainSpeed1e4          1594094      1438600   -9.75%\nBenchmarkEncodeTwainSpeed1e5          7669724      7316288   -4.61%\nBenchmarkEncodeTwainSpeed1e6         68731353     65938994   -4.06%\nBenchmarkEncodeTwainDefault1e4        2063497      1866488   -9.55%\nBenchmarkEncodeTwainDefault1e5       22602689     22221377   -1.69%\nBenchmarkEncodeTwainDefault1e6      233376842    232114297   -0.54%\nBenchmarkEncodeTwainCompress1e4       2062441      1949676   -5.47%\nBenchmarkEncodeTwainCompress1e5      28264344     27930627   -1.18%\nBenchmarkEncodeTwainCompress1e6     304369641    303704330   -0.22%\n\nbenchmark                            old MB/s     new MB/s  speedup\nBenchmarkEncodeDigitsSpeed1e4            6.79         7.22    1.06x\nBenchmarkEncodeDigitsSpeed1e5           12.07        12.33    1.02x\nBenchmarkEncodeDigitsSpeed1e6           12.91        13.10    1.01x\nBenchmarkEncodeDigitsDefault1e4          5.52         5.73    1.04x\nBenchmarkEncodeDigitsDefault1e5          3.81         3.84    1.01x\nBenchmarkEncodeDigitsDefault1e6          3.49         3.50    1.00x\nBenchmarkEncodeDigitsCompress1e4         5.53         5.72    1.03x\nBenchmarkEncodeDigitsCompress1e5         3.81         3.84    1.01x\nBenchmarkEncodeDigitsCompress1e6         3.49         3.50    1.00x\nBenchmarkEncodeTwainSpeed1e4             6.27         6.95    1.11x\nBenchmarkEncodeTwainSpeed1e5            13.04        13.67    1.05x\nBenchmarkEncodeTwainSpeed1e6            14.55        15.17    1.04x\nBenchmarkEncodeTwainDefault1e4           4.85         5.36    1.11x\nBenchmarkEncodeTwainDefault1e5           4.42         4.50    1.02x\nBenchmarkEncodeTwainDefault1e6           4.28         4.31    1.01x\nBenchmarkEncodeTwainCompress1e4          4.85         5.13    1.06x\nBenchmarkEncodeTwainCompress1e5          3.54         3.58    1.01x\nBenchmarkEncodeTwainCompress1e6          3.29         3.29    1.00x\n\nR=imkrasin, golang-dev, bradfitz, r\nCC=golang-dev\nhttps://codereview.appspot.com/10006043\n\nhttps://codereview.appspot.com/10006043/diff/1002/src/pkg/compress/flate/huffman_code.go\nFile src/pkg/compress/flate/huffman_code.go (right):\n\nhttps://codereview.appspot.com/10006043/diff/1002/src/pkg/compress/flate/huffman_code.go#newcode194\nsrc/pkg/compress/flate/huffman_code.go:194: copy(leafCounts[level][:level], leafCounts[level-1][:level])\nOn 2013/07/27 21:23:47, imkrasin wrote:\n> Thanks for the explanation.\n> \n> Also, I like that you have included the memory profiler stats to the CL\n> description. Could you please do the same for CPU profile? \n> \n> Otherwise, LGTM.\n\nDone.",
			"disapproval": false,
			"date": "2013-07-28 07:43:16.993850",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 10006043: compress/flate: reduce tiny allocs done by encoder.",
	"created": "2013-06-04 14:26:39.597960",
	"patchsets": [
		1,
		2001,
		1002,
		19001
	],
	"modified": "2013-07-28 07:43:19.006950",
	"closed": true,
	"issue": 10006043
}