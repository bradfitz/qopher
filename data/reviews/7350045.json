{
	"description": "strings: Special casing for Count and Index and less branching\r\n\r\nSlightly better benchmarks for when string and separator are equivalent and also less branching in inner loops.\r\nbenchmark                        old ns/op    new ns/op    delta\r\nBenchmarkGenericNoMatch               3430         3442   +0.35%\r\nBenchmarkGenericMatch1               23590        22855   -3.12%\r\nBenchmarkGenericMatch2              108031       105025   -2.78%\r\nBenchmarkSingleMaxSkipping            2969         2704   -8.93%\r\nBenchmarkSingleLongSuffixFail         2826         2572   -8.99%\r\nBenchmarkSingleMatch                205268       197832   -3.62%\r\nBenchmarkByteByteNoMatch               987          921   -6.69%\r\nBenchmarkByteByteMatch                2014         1749  -13.16%\r\nBenchmarkByteStringMatch              3083         3050   -1.07%\r\nBenchmarkHTMLEscapeNew                 922          915   -0.76%\r\nBenchmarkHTMLEscapeOld                1654         1570   -5.08%\r\nBenchmarkByteByteReplaces            11897        11556   -2.87%\r\nBenchmarkByteByteMap                  4485         4255   -5.13%\r\nBenchmarkIndexRune                     174          121  -30.46%\r\nBenchmarkIndexRuneFastPath              41           41   -0.24%\r\nBenchmarkIndex                          45           44   -0.22%\r\nBenchmarkMapNoChanges                  433          431   -0.46%\r\nBenchmarkIndexHard1                4015336      3316490  -17.40%\r\nBenchmarkIndexHard2                3976254      3395627  -14.60%\r\nBenchmarkIndexHard3                3973158      3378329  -14.97%\r\nBenchmarkCountHard1                4403549      3448512  -21.69%\r\nBenchmarkCountHard2                4387437      3413059  -22.21%\r\nBenchmarkCountHard3                4403891      3382661  -23.19%\r\nBenchmarkIndexTorture                28354        25864   -8.78%\r\nBenchmarkCountTorture                29625        27463   -7.30%\r\nBenchmarkFields                   38752040     39169840   +1.08%\r\nBenchmarkFieldsFunc               38797765     38888060   +0.23%\r\n\r\nbenchmark                         old MB/s     new MB/s  speedup\r\nBenchmarkSingleMaxSkipping         3367.07      3697.62    1.10x\r\nBenchmarkSingleLongSuffixFail       354.51       389.47    1.10x\r\nBenchmarkSingleMatch                 73.07        75.82    1.04x\r\nBenchmarkFields                      27.06        26.77    0.99x\r\nBenchmarkFieldsFunc                  27.03        26.96    1.00x\r\n",
	"cc": [
		"dave@cheney.net",
		"fullung@gmail.com",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "DonovanHide@gmail.com",
			"recipients": [
				"DonovanHide@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2013-02-17 18:56:50.051790",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"DonovanHide@gmail.com",
				"dave@cheney.net",
				"fullung@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "benchmark                old ns/op    new ns/op    delta\nBenchmarkIndexHard1        3970360      3974921   +0.11%\nBenchmarkIndexHard2        3992162      3975602   -0.41%\nBenchmarkIndexHard3        3990323      3968012   -0.56%\nBenchmarkCountHard1        4405371      3376207  -23.36%\nBenchmarkCountHard2        4402716      3430661  -22.08%\nBenchmarkCountHard3        4400850      3376993  -23.26%\nBenchmarkIndexTorture        28453        28373   -0.28%\nBenchmarkCountTorture        29620        26801   -9.52%",
			"disapproval": false,
			"date": "2013-02-17 19:36:41.132630",
			"approval": false
		},
		{
			"sender": "DonovanHide@gmail.com",
			"recipients": [
				"DonovanHide@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: remyoudompheng@gmail.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-02-17 19:21:36.621570",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"DonovanHide@gmail.com",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/02/17 19:21:36, Donovan wrote:\n> Hello mailto:golang-dev@googlegroups.com (cc: mailto:remyoudompheng@gmail.com),\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go\n\nYou can use $GOROOT/misc/benchcmp old.txt new.txt to generate a benchmark delta",
			"disapproval": false,
			"date": "2013-02-17 19:35:04.610710",
			"approval": false
		},
		{
			"sender": "DonovanHide@gmail.com",
			"recipients": [
				"DonovanHide@gmail.com",
				"dave@cheney.net",
				"fullung@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, fullung@gmail.com (cc: golang-dev@googlegroups.com, remyoudompheng@gmail.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-17 20:24:51.273680",
			"approval": false
		},
		{
			"sender": "DonovanHide@gmail.com",
			"recipients": [
				"DonovanHide@gmail.com",
				"dave@cheney.net",
				"fullung@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, fullung@gmail.com, remyoudompheng@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-18 00:03:43.299770",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"DonovanHide@gmail.com",
				"dave@cheney.net",
				"fullung@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7350045/diff/7003/src/pkg/strings/strings.go\nFile src/pkg/strings/strings.go (right):\n\nhttps://codereview.appspot.com/7350045/diff/7003/src/pkg/strings/strings.go#newcode99\nsrc/pkg/strings/strings.go:99: if h == hashsep && s[i-len(sep):i] == sep && lastmatch <= i-len(sep) {\nI'm worried by this wording: it kills speed of the following benchmark (5.5 secs for a single iteration here):\n\nfunc BenchmarkCountTorture2(b *testing.B) {\n      A := Repeat(\"ABC\", 1<<20)\n      B := Repeat(\"ABC\", 1<<10)\n      for i := 0; i < b.N; i++ {\n            Count(A, B)\n      }\n}",
			"disapproval": false,
			"date": "2013-02-17 23:06:05.721970",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"DonovanHide@gmail.com",
				"dave@cheney.net",
				"fullung@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7350045/diff/7003/src/pkg/strings/strings.go\nFile src/pkg/strings/strings.go (right):\n\nhttps://codereview.appspot.com/7350045/diff/7003/src/pkg/strings/strings.go#newcode70\nsrc/pkg/strings/strings.go:70: for i := 0; i < len(s); i++ {\ndoes using for _, c := range s { ... } improve performance at at all ?\n\nhttps://codereview.appspot.com/7350045/diff/7003/src/pkg/strings/strings.go#newcode86\nsrc/pkg/strings/strings.go:86: for i := 0; i < len(sep); i++ {\nsame, range may avoid bounds checking here.",
			"disapproval": false,
			"date": "2013-02-17 23:10:55.499040",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"DonovanHide@gmail.com",
				"dave@cheney.net",
				"fullung@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7350045/diff/7003/src/pkg/strings/strings.go\nFile src/pkg/strings/strings.go (right):\n\nhttps://codereview.appspot.com/7350045/diff/7003/src/pkg/strings/strings.go#newcode86\nsrc/pkg/strings/strings.go:86: for i := 0; i < len(sep); i++ {\nOn 2013/02/17 23:10:55, dfc wrote:\n> same, range may avoid bounds checking here.\n\nrange on strings iterates on runes instead of bytes. If the string is not valid UTF-8 you are running into problems.",
			"disapproval": false,
			"date": "2013-02-17 23:14:05.058060",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Doh! I always forget that point.\r\n\r\nOn Mon, Feb 18, 2013 at 10:14 AM,  <remyoudompheng@gmail.com> wrote:\r\n>\r\n> https://codereview.appspot.com/7350045/diff/7003/src/pkg/strings/strings.go\r\n> File src/pkg/strings/strings.go (right):\r\n>\r\n> https://codereview.appspot.com/7350045/diff/7003/src/pkg/strings/strings.go#newcode86\r\n> src/pkg/strings/strings.go:86: for i := 0; i < len(sep); i++ {\r\n> On 2013/02/17 23:10:55, dfc wrote:\r\n>>\r\n>> same, range may avoid bounds checking here.\r\n>\r\n>\r\n> range on strings iterates on runes instead of bytes. If the string is\r\n> not valid UTF-8 you are running into problems.\r\n>\r\n> https://codereview.appspot.com/7350045/\r\n",
			"disapproval": false,
			"date": "2013-02-17 23:14:35.694510",
			"approval": false
		},
		{
			"sender": "DonovanHide@gmail.com",
			"recipients": [
				"DonovanHide@gmail.com",
				"dave@cheney.net",
				"fullung@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7350045/diff/7003/src/pkg/strings/strings.go\nFile src/pkg/strings/strings.go (right):\n\nhttps://codereview.appspot.com/7350045/diff/7003/src/pkg/strings/strings.go#newcode99\nsrc/pkg/strings/strings.go:99: if h == hashsep && s[i-len(sep):i] == sep && lastmatch <= i-len(sep) {\nYes, guarding against overlapping is lighter than comparing strings. Done.",
			"disapproval": false,
			"date": "2013-02-18 00:05:14.381360",
			"approval": false
		},
		{
			"sender": "donovanhide@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi,\r\n\r\nthanks for the review! I've only really played around with the ordering of\r\nRemy's implementation. Would be interesting to compare against this\r\nalgorithm, which also does require heap allocation:\r\n\r\nhttps://urresearch.rochester.edu/fileDownloadForInstitutionalItem.action?itemId=13457&itemFileId=31164\r\nhttp://www-igm.univ-mlv.fr/~lecroq/string/node25.html\r\n\r\nCheers,\r\nDonovan.\r\n\r\n\r\n\r\nOn 18 February 2013 00:03, <DonovanHide@gmail.com> wrote:\r\n\r\n> Hello dave@cheney.net, fullung@gmail.com, remyoudompheng@gmail.com (cc:\r\n> golang-dev@googlegroups.com),\r\n>\r\n>\r\n> Please take another look.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7350045/<https://codereview.appspot.com/7350045/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-18 00:11:34.997980",
			"approval": false
		},
		{
			"sender": "donovanhide@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "does require => does not require\r\n!\r\n\r\n\r\nOn 18 February 2013 00:11, Donovan Hide <donovanhide@gmail.com> wrote:\r\n\r\n> Hi,\r\n>\r\n> thanks for the review! I've only really played around with the ordering of\r\n> Remy's implementation. Would be interesting to compare against this\r\n> algorithm, which also does require heap allocation:\r\n>\r\n>\r\n> https://urresearch.rochester.edu/fileDownloadForInstitutionalItem.action?itemId=13457&itemFileId=31164\r\n> http://www-igm.univ-mlv.fr/~lecroq/string/node25.html\r\n>\r\n> Cheers,\r\n> Donovan.\r\n>\r\n>\r\n>\r\n> On 18 February 2013 00:03, <DonovanHide@gmail.com> wrote:\r\n>\r\n>> Hello dave@cheney.net, fullung@gmail.com, remyoudompheng@gmail.com (cc:\r\n>> golang-dev@googlegroups.com),\r\n>>\r\n>>\r\n>> Please take another look.\r\n>>\r\n>>\r\n>> https://codereview.appspot.**com/7350045/<https://codereview.appspot.com/7350045/>\r\n>>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-18 00:12:03.967680",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"DonovanHide@gmail.com",
				"dave@cheney.net",
				"fullung@gmail.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nLooks good but let's stop working on this now.",
			"disapproval": false,
			"date": "2013-02-19 15:34:19.836910",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"DonovanHide@gmail.com",
				"dave@cheney.net",
				"fullung@gmail.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=af6f2a37a53b ***\n\nstrings: faster Count, Index\n\nSlightly better benchmarks for when string and separator are equivalent and also less branching in inner loops.\nbenchmark                        old ns/op    new ns/op    delta\nBenchmarkGenericNoMatch               3430         3442   +0.35%\nBenchmarkGenericMatch1               23590        22855   -3.12%\nBenchmarkGenericMatch2              108031       105025   -2.78%\nBenchmarkSingleMaxSkipping            2969         2704   -8.93%\nBenchmarkSingleLongSuffixFail         2826         2572   -8.99%\nBenchmarkSingleMatch                205268       197832   -3.62%\nBenchmarkByteByteNoMatch               987          921   -6.69%\nBenchmarkByteByteMatch                2014         1749  -13.16%\nBenchmarkByteStringMatch              3083         3050   -1.07%\nBenchmarkHTMLEscapeNew                 922          915   -0.76%\nBenchmarkHTMLEscapeOld                1654         1570   -5.08%\nBenchmarkByteByteReplaces            11897        11556   -2.87%\nBenchmarkByteByteMap                  4485         4255   -5.13%\nBenchmarkIndexRune                     174          121  -30.46%\nBenchmarkIndexRuneFastPath              41           41   -0.24%\nBenchmarkIndex                          45           44   -0.22%\nBenchmarkMapNoChanges                  433          431   -0.46%\nBenchmarkIndexHard1                4015336      3316490  -17.40%\nBenchmarkIndexHard2                3976254      3395627  -14.60%\nBenchmarkIndexHard3                3973158      3378329  -14.97%\nBenchmarkCountHard1                4403549      3448512  -21.69%\nBenchmarkCountHard2                4387437      3413059  -22.21%\nBenchmarkCountHard3                4403891      3382661  -23.19%\nBenchmarkIndexTorture                28354        25864   -8.78%\nBenchmarkCountTorture                29625        27463   -7.30%\nBenchmarkFields                   38752040     39169840   +1.08%\nBenchmarkFieldsFunc               38797765     38888060   +0.23%\n\nbenchmark                         old MB/s     new MB/s  speedup\nBenchmarkSingleMaxSkipping         3367.07      3697.62    1.10x\nBenchmarkSingleLongSuffixFail       354.51       389.47    1.10x\nBenchmarkSingleMatch                 73.07        75.82    1.04x\nBenchmarkFields                      27.06        26.77    0.99x\nBenchmarkFieldsFunc                  27.03        26.96    1.00x\n\nR=dave, fullung, remyoudompheng, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/7350045\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2013-02-19 15:36:19.870350",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"DonovanHide@gmail.com",
				"dave@cheney.net",
				"fullung@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=close",
			"disapproval": false,
			"date": "2013-07-20 21:32:57.009590",
			"approval": false
		}
	],
	"owner_email": "DonovanHide@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Donovan",
	"subject": "code review 7350045: strings: Count special casing",
	"created": "2013-02-17 18:46:10.286090",
	"patchsets": [
		1,
		2001,
		6001,
		7003,
		18001
	],
	"modified": "2013-07-20 21:32:57.305590",
	"closed": false,
	"issue": 7350045
}