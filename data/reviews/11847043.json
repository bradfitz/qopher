{
	"description": "    crypto/des: native amd64 assembler version\n\n\nDual-Core AMD Opteron(tm) Processor 2218:\n\nbenchmark           old ns/op    new ns/op    delta\nBenchmarkEncrypt         5862         4234  -27.77%\nBenchmarkDecrypt         5877         4248  -27.72%\n\nbenchmark            old MB/s     new MB/s  speedup\nBenchmarkEncrypt         1.36         1.89    1.39x\nBenchmarkDecrypt         1.36         1.88    1.38x\n\n\nIntel(R) Xeon(R) CPU E5462:\n\nbenchmark           old ns/op    new ns/op    delta\nBenchmarkEncrypt         5161         3662  -29.04%\nBenchmarkDecrypt         5190         3752  -27.71%\n\nbenchmark            old MB/s     new MB/s  speedup\nBenchmarkEncrypt         1.55         2.18    1.41x\nBenchmarkDecrypt         1.54         2.13    1.38x\n\nUpdates issue 4299",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"remyoudompheng@gmail.com",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "First-time posters are moderated to prevent spam.  I've now approved and\r\nwhitelisted you, so future emails will go out without delay.\r\n\r\nThanks for this patch!  I'll let others review it.\r\n\r\n\r\n\r\nOn Thu, Jul 25, 2013 at 10:53 AM, <dtcaciuc@gmail.com> wrote:\r\n\r\n> I realized I was not a part of golang-dev group at the time of the\r\n> upload and review notification didn't show up there. Testing if this\r\n> message fixes it.\r\n>\r\n> https://codereview.appspot.**com/11847043/<https://codereview.appspot.com/11847043/>\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-25 18:00:32.165930",
			"approval": false
		},
		{
			"sender": "dtcaciuc@gmail.com",
			"recipients": [
				"dtcaciuc@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-07-25 17:17:02.746700",
			"approval": false
		},
		{
			"sender": "dtcaciuc@gmail.com",
			"recipients": [
				"dtcaciuc@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I realized I was not a part of golang-dev group at the time of the upload and review notification didn't show up there. Testing if this message fixes it.",
			"disapproval": false,
			"date": "2013-07-25 17:53:23.086350",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"dtcaciuc@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'd like to suggest an optimization that doesn't involve assembly: \nhttps://codereview.appspot.com/11874043\n\nI'm interested in benchmarks of it on 386 and arm.",
			"disapproval": false,
			"date": "2013-07-25 21:51:21.755500",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for working on this, but I think Remy is right that there's no real\r\nneed for assembly here. The DES implementation is slow not because it is\r\nwritten in Go but because it operates one bit at a time. Really the\r\nstructure is what needs changing: permuteBlock should go away entirely. So\r\nI'd rather not do this CL and instead encourage more significant\r\nalgorithmic changes to operate multiple bits at a time, similar to Remy's\r\nCL.\r\n\r\nThat said, if you do want assembly, the below is a bit faster than what you\r\nsent. (But it's still not the right approach.)\r\n\r\nThanks again.\r\nRuss\r\n\r\nTEXT \u00b7permuteBlock(SB), $0\r\nMOVQ src+0(FP), DX\r\nMOVQ perm_base+8(FP), DI\r\nMOVQ perm_len+16(FP), SI\r\nADDQ DI, SI\r\nMOVQ $0, AX\r\nMOVQ $0x003f3e3d3c3b3a39, R8\r\n\r\nloop:\r\nMOVQ 0(DI), CX\r\nADDQ R8, CX\r\n\r\n#define STEP(n) \\\r\nMOVQ DX, BX; \\\r\nRORQ CX, BX; \\\r\nANDQ $(1<<n), BX; \\\r\nORQ BX, AX\r\n\r\nSHLQ $8, AX\r\n\r\nSTEP(7); SHRQ $8, CX\r\nSTEP(6); SHRQ $8, CX\r\nSTEP(5); SHRQ $8, CX\r\nSTEP(4); SHRQ $8, CX\r\nSTEP(3); SHRQ $8, CX\r\nSTEP(2); SHRQ $8, CX\r\nSTEP(1); SHRQ $8, CX\r\nSTEP(0)\r\n\r\nADDQ $8, DI\r\nCMPQ DI, SI\r\nJNE loop\r\n\r\nMOVQ AX, block+32(FP)\r\nRET\r\n",
			"disapproval": false,
			"date": "2013-07-26 02:59:45.097930",
			"approval": false
		},
		{
			"sender": "dtcaciuc@gmail.com",
			"recipients": [
				"dtcaciuc@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/26 02:59:45, rsc wrote:\n> Thanks for working on this, but I think Remy is right that there's no real\n> need for assembly here. The DES implementation is slow not because it is\n> written in Go but because it operates one bit at a time. Really the\n> structure is what needs changing: permuteBlock should go away entirely. So\n> I'd rather not do this CL and instead encourage more significant\n> algorithmic changes to operate multiple bits at a time, similar to Remy's\n> CL.\n> \n> That said, if you do want assembly, the below is a bit faster than what you\n> sent. (But it's still not the right approach.)\n> \n> Thanks again.\n> Russ\n> \n> TEXT \u00b7permuteBlock(SB), $0\n> MOVQ src+0(FP), DX\n> MOVQ perm_base+8(FP), DI\n> MOVQ perm_len+16(FP), SI\n> ADDQ DI, SI\n> MOVQ $0, AX\n> MOVQ $0x003f3e3d3c3b3a39, R8\n> \n> loop:\n> MOVQ 0(DI), CX\n> ADDQ R8, CX\n> \n> #define STEP(n) \\\n> MOVQ DX, BX; \\\n> RORQ CX, BX; \\\n> ANDQ $(1<<n), BX; \\\n> ORQ BX, AX\n> \n> SHLQ $8, AX\n> \n> STEP(7); SHRQ $8, CX\n> STEP(6); SHRQ $8, CX\n> STEP(5); SHRQ $8, CX\n> STEP(4); SHRQ $8, CX\n> STEP(3); SHRQ $8, CX\n> STEP(2); SHRQ $8, CX\n> STEP(1); SHRQ $8, CX\n> STEP(0)\n> \n> ADDQ $8, DI\n> CMPQ DI, SI\n> JNE loop\n> \n> MOVQ AX, block+32(FP)\n> RET\n\nYep, that makes perfect sense. Nevertheless, this was an educational coding exercise; thanks for looking it over and for the suggestions!\n\nDimitri.",
			"disapproval": false,
			"date": "2013-07-26 03:28:13.716020",
			"approval": false
		}
	],
	"owner_email": "dtcaciuc@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "dtcaciuc",
	"subject": "code review 11847043:     crypto/des: native amd64 assembler version",
	"created": "2013-07-25 17:11:53.896170",
	"patchsets": [
		1,
		3001,
		6001
	],
	"modified": "2013-07-26 03:28:13.932080",
	"closed": false,
	"issue": 11847043
}