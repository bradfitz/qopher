{
	"description": "sync/atomic: specify argsize for asm routines\nFixes issue 6098.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-08-12 09:34:00.274100",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-08-12 15:44:08.296800",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=45d38208376a ***\n\nsync/atomic: specify argsize for asm routines\nFixes issue 6098.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/12717043",
			"disapproval": false,
			"date": "2013-08-12 17:46:38.735780",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This broke the ARM builds, because the runtime doesn't know how to unwind the kernel-supplied atomics.\n\nWe could update the traceback.\n\nOr we could access the memory before jumping to the atomic routine, so that the fault happens in code we control.\n\nProbably the traceback is a better (if uglier) approach, because it avoids memory traffic?",
			"disapproval": false,
			"date": "2013-08-13 04:12:22.806420",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Aug 13, 2013 at 8:12 AM, <rsc@golang.org> wrote:\r\n\r\n> This broke the ARM builds, because the runtime doesn't know how to\r\n> unwind the kernel-supplied atomics.\r\n>\r\n> We could update the traceback.\r\n>\r\n> Or we could access the memory before jumping to the atomic routine, so\r\n> that the fault happens in code we control.\r\n>\r\n> Probably the traceback is a better (if uglier) approach, because it\r\n> avoids memory traffic?\r\n>\r\n\r\n\r\nYes, it's better to not touch shared memory once more.\r\n\r\nDo you know how to fix traceback?\r\n",
			"disapproval": false,
			"date": "2013-08-13 09:58:22.311550",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Aug 13, 2013 at 5:58 AM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n\r\n> On Tue, Aug 13, 2013 at 8:12 AM, <rsc@golang.org> wrote:\r\n>\r\n>> This broke the ARM builds, because the runtime doesn't know how to\r\n>> unwind the kernel-supplied atomics.\r\n>>\r\n>> We could update the traceback.\r\n>>\r\n>> Or we could access the memory before jumping to the atomic routine, so\r\n>> that the fault happens in code we control.\r\n>>\r\n>> Probably the traceback is a better (if uglier) approach, because it\r\n>> avoids memory traffic?\r\n>>\r\n>\r\n>\r\n> Yes, it's better to not touch shared memory once more.\r\n>\r\n> Do you know how to fix traceback?\r\n>\r\n\r\nYes, I believe that if the top-most pc is in the magic page (0xffff0000 to\r\n0xffff0fff) we just unwind one step (pc=lr, lr=0) before starting the\r\ntrace. I would prefer someone else try it, though.\r\n",
			"disapproval": false,
			"date": "2013-08-13 18:18:43.665270",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Aug 13, 2013 at 10:18 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> On Tue, Aug 13, 2013 at 5:58 AM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n>\r\n>> On Tue, Aug 13, 2013 at 8:12 AM, <rsc@golang.org> wrote:\r\n>>\r\n>>> This broke the ARM builds, because the runtime doesn't know how to\r\n>>> unwind the kernel-supplied atomics.\r\n>>>\r\n>>> We could update the traceback.\r\n>>>\r\n>>> Or we could access the memory before jumping to the atomic routine, so\r\n>>> that the fault happens in code we control.\r\n>>>\r\n>>> Probably the traceback is a better (if uglier) approach, because it\r\n>>> avoids memory traffic?\r\n>>>\r\n>>\r\n>>\r\n>> Yes, it's better to not touch shared memory once more.\r\n>>\r\n>> Do you know how to fix traceback?\r\n>>\r\n>\r\n> Yes, I believe that if the top-most pc is in the magic page (0xffff0000 to\r\n> 0xffff0fff) we just unwind one step (pc=lr, lr=0) before starting the\r\n> trace. I would prefer someone else try it, though.\r\n>\r\n>\r\nI've landed a workaround to fix builders (do load in our assembly):\r\nhttps://codereview.appspot.com/12869043/\r\nAt least this crash seems to stop happening on the arm builders.\r\nThere are lots of optimization opportunities on ARM (in particular do\r\nLoad/Store w/o LL/SC loop), this will be another one :)\r\n",
			"disapproval": false,
			"date": "2013-08-13 18:33:41.974680",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 12717043: sync/atomic: specify argsize for asm routines",
	"created": "2013-08-10 12:33:38.154590",
	"patchsets": [
		1,
		2,
		5001,
		6004,
		9001,
		11001,
		16001,
		19001,
		21001
	],
	"modified": "2013-08-13 18:33:42.024410",
	"closed": true,
	"issue": 12717043
}