{
	"description": "cmd/ld: Handle line numbers for multiple methods on the same line.\n\nFixes issue 4174.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"minux.ma@gmail.com",
		"iant@golang.org",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "matloob@google.com",
			"recipients": [
				"matloob@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-01-13 10:04:50.203990",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"matloob@google.com",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM, please wait for iant or rsc.",
			"disapproval": false,
			"date": "2013-01-13 21:02:03.151290",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"matloob@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "the linker changes looks good to me and I can\nconfirm that it fixes the problem with my tests.\n\nhttps://codereview.appspot.com/7105051/diff/5001/test/fixedbugs/issue4174.go\nFile test/fixedbugs/issue4174.go (right):\n\nhttps://codereview.appspot.com/7105051/diff/5001/test/fixedbugs/issue4174.go#newcode1\ntest/fixedbugs/issue4174.go:1: // run\nplease add the copyright notice here (and separate it and the first line\nwith a blank line.\n\nhttps://codereview.appspot.com/7105051/diff/5001/test/fixedbugs/issue4174.go#newcode6\ntest/fixedbugs/issue4174.go:6: \"reflect\"\nreflect is not necessary here, and I'm think of something like this:\n\npackage main\n\nimport (\n\t\"runtime\"\n)\n\ntype someType int\nfunc (x someType) Method0() { check(8)\ncheck(9) }\nfunc (x someType) Method1() { check(10) }; func (x someType) Method2() { check(10)\ncheck(11) }\nfunc (x someType) Method3() { check(12) }\n\nfunc main() {\n\tx := someType(0)\n\tx.Method0()\n\tx.Method1()\n\tx.Method2()\n\tx.Method3()\n}\n\nfunc check(expected int) {\n\t_, _, line, ok := runtime.Caller(1)\n\tif !ok {\n\t\tpanic(\"runtime.Caller failed\")\n\t}\n\tif expected != line {\n\t\tprintln(\"BUG at line\", expected)\n\t}\n}\n\nmaybe testing like this is a bit overkill, however my point is\nto reduce the dependencies of tests so that when making some\nsubstantial changes, we can run most (if not all) of tests\nwith only runtime (and unsafe) working.",
			"disapproval": false,
			"date": "2013-01-13 19:13:18.990080",
			"approval": false
		},
		{
			"sender": "matloob@google.com",
			"recipients": [
				"matloob@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, minux.ma@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-13 20:58:26.474080",
			"approval": false
		},
		{
			"sender": "matloob@google.com",
			"recipients": [
				"matloob@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7105051/diff/5001/test/fixedbugs/issue4174.go\nFile test/fixedbugs/issue4174.go (right):\n\nhttps://codereview.appspot.com/7105051/diff/5001/test/fixedbugs/issue4174.go#newcode1\ntest/fixedbugs/issue4174.go:1: // run\nOn 2013/01/13 19:13:19, minux wrote:\n> please add the copyright notice here (and separate it and the first line\n> with a blank line.\n\nDone.\n\nhttps://codereview.appspot.com/7105051/diff/5001/test/fixedbugs/issue4174.go#newcode6\ntest/fixedbugs/issue4174.go:6: \"reflect\"\nOn 2013/01/13 19:13:19, minux wrote:\n> reflect is not necessary here, and I'm think of something like this:\n> \n> package main\n> \n> import (\n> \t\"runtime\"\n> )\n> \n> type someType int\n> func (x someType) Method0() { check(8)\n> check(9) }\n> func (x someType) Method1() { check(10) }; func (x someType) Method2() {\n> check(10)\n> check(11) }\n> func (x someType) Method3() { check(12) }\n> \n> func main() {\n> \tx := someType(0)\n> \tx.Method0()\n> \tx.Method1()\n> \tx.Method2()\n> \tx.Method3()\n> }\n> \n> func check(expected int) {\n> \t_, _, line, ok := runtime.Caller(1)\n> \tif !ok {\n> \t\tpanic(\"runtime.Caller failed\")\n> \t}\n> \tif expected != line {\n> \t\tprintln(\"BUG at line\", expected)\n> \t}\n> }\n> \n> maybe testing like this is a bit overkill, however my point is\n> to reduce the dependencies of tests so that when making some\n> substantial changes, we can run most (if not all) of tests\n> with only runtime (and unsafe) working.\n\nDone.",
			"disapproval": false,
			"date": "2013-01-13 20:59:35.712070",
			"approval": false
		},
		{
			"sender": "matloob@google.com",
			"recipients": [
				"matloob@google.com",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping\n\nOn 2013/01/13 21:02:03, minux wrote:\n> LGTM, please wait for iant or rsc.",
			"disapproval": false,
			"date": "2013-01-26 23:40:58.377440",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"matloob@google.com",
				"minux.ma@gmail.com",
				"iant@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "not lgtm, sorry\n\nhttps://codereview.appspot.com/7105051/diff/3/src/cmd/ld/lib.c\nFile src/cmd/ld/lib.c (right):\n\nhttps://codereview.appspot.com/7105051/diff/3/src/cmd/ld/lib.c#newcode1046\nsrc/cmd/ld/lib.c:1046: if(p->line == oldlc && p->pc == oldpc || p->as == ATEXT || p->as == ANOP) {\nI believe this fixes the problem but it introduces a new problem. The goal of this code is to omit line number adjustments if the line number is not changing, so that a sequence of instructions all corresponding to the same line number cause no extra entries in the line number table at all. The test p->pc == oldpc is basically never true, because for the most part each p has a different pc, so this if is never satisfied anymore, meaning that the 0-size adjustments are never omitted. This makes the line number table significantly larger than it is today. You can see the table by running \n\ngo tool 6g issue4174.go\ngo tool 6l -O issue4174.6 >6l.dump\n\nThe diff for this before and after this CL is at https://codereview.appspot.com/7234052/diff/1/6l.dump. That's not the entire file - it was too big for the code review server - but you get the idea. Not all those 0-size increments are necessary.\n\nIt is possible that the condition should be changed, as you're doing here, just differently. It is also possible that the generator here is fine and the code parsing the table in package runtime should be changed instead. Without digging in I don't actually know.",
			"disapproval": true,
			"date": "2013-01-29 00:45:47.465840",
			"approval": false
		}
	],
	"owner_email": "matloob@google.com",
	"private": false,
	"base_url": "",
	"owner": "matloob",
	"subject": "code review 7105051: cmd/ld: Handle line numbers for multiple methods on the...",
	"created": "2013-01-13 09:56:30.834790",
	"patchsets": [
		1,
		2001,
		5001,
		3
	],
	"modified": "2013-01-29 00:45:47.465840",
	"closed": false,
	"issue": 7105051
}