{
	"description": "encoding/json: fix omitempty for time.Time fields.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> See the thread on golang-nuts for the motivation: struct field of type\r\n> time.Time always gets printed, even though it has a well-defined zero\r\n> (via IsZero).\r\n>\r\n> Someone suggested doing an interface check for that method, and using\r\n> that instead. That seems like a better approach to me, and is probably\r\n> useful for other defined types. How does that sit with you?\r\n\r\nI am still not really convinced this is something we need to solve\r\ntoday. I don't believe we should solve it only for json. Can you file\r\nan issue to remind us to come back to this?\r\n\r\nThanks.\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-11-06 19:11:06.446000",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I agree with your reservations: this is too special purpose. Why should we do this?",
			"disapproval": false,
			"date": "2012-11-01 17:31:51.593830",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-11-01 07:16:59.128930",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It's debatable whether this is the right thing to do. No other type is\r\ngiven this special treatment in encoding/json, but then again\r\ntime.Time is reasonably common, and time.Time *is* treated specially\r\nby encoding/xml.\r\n",
			"disapproval": false,
			"date": "2012-11-01 07:19:29.541280",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-01 07:17:22.007870",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Nov 7, 2012 at 6:11 AM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> I am still not really convinced this is something we need to solve\r\n> today. I don't believe we should solve it only for json. Can you file\r\n> an issue to remind us to come back to this?\r\n\r\nhttp://code.google.com/p/go/issues/detail?id=4357\r\n",
			"disapproval": false,
			"date": "2012-11-07 00:33:39.491650",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Nov 2, 2012 at 4:31 AM,  <rsc@golang.org> wrote:\r\n\r\n> I agree with your reservations: this is too special purpose. Why should we do this?\r\n\r\nSee the thread on golang-nuts for the motivation: struct field of type\r\ntime.Time always gets printed, even though it has a well-defined zero\r\n(via IsZero).\r\n\r\nSomeone suggested doing an interface check for that method, and using\r\nthat instead. That seems like a better approach to me, and is probably\r\nuseful for other defined types. How does that sit with you?\r\n",
			"disapproval": false,
			"date": "2012-11-01 22:14:40.035910",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-11-07 00:37:55.266830",
			"approval": false
		}
	],
	"owner_email": "dsymonds@golang.org",
	"private": false,
	"base_url": "",
	"owner": "dsymonds",
	"subject": "code review 6815065: encoding/json: fix omitempty for time.Time fields.",
	"created": "2012-11-01 07:15:23.453000",
	"patchsets": [
		1,
		2001,
		6001
	],
	"modified": "2012-11-07 00:37:58.054810",
	"closed": true,
	"issue": 6815065
}