{
	"description": "runtime: clear locked bit when goroutine exits\n\nOtherwise the next goroutine run on the m\ncan get inadvertently locked if it executes a cgo call\nthat turns on the internal lock.\n\nWhile we're here, fix the cgo panic unwind to\ndecrement m->ncgo like the non-panic unwind does.\n\nFixes issue 4971.",
	"cc": [
		"golang-dev@googlegroups.com",
		"iant@golang.org",
		"dvyukov@google.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-03-08 05:18:26.883110",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-03-08 05:56:24.139650",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nIs my understanding correct?\nm was left with m->locked=LockInternal when a locked goroutine exits.\nthen another goroutine scheduled on the m, the goroutine calls LockOSThread() and UnlockOSThread(), but the locking is not reset because m->locked!=0.",
			"disapproval": false,
			"date": "2013-03-08 09:25:09.512480",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7627043/diff/3004/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttps://codereview.appspot.com/7627043/diff/3004/src/pkg/runtime/proc.c#newcode1180\nsrc/pkg/runtime/proc.c:1180: m->locked = 0;\nShould we call runtime\u00b7UnlockOSThread() here? It's especially idempotent.",
			"disapproval": false,
			"date": "2013-03-08 09:27:06.435770",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=70d1d0a4bcab ***\n\nruntime: clear locked bit when goroutine exits\n\nOtherwise the next goroutine run on the m\ncan get inadvertently locked if it executes a cgo call\nthat turns on the internal lock.\n\nWhile we're here, fix the cgo panic unwind to\ndecrement m->ncgo like the non-panic unwind does.\n\nFixes issue 4971.\n\nR=golang-dev, iant, dvyukov\nCC=golang-dev\nhttps://codereview.appspot.com/7627043",
			"disapproval": false,
			"date": "2013-03-08 16:26:04.941390",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Mar 8, 2013 at 4:25 AM, <dvyukov@google.com> wrote:\r\n\r\n> LGTM\r\n>\r\n> Is my understanding correct?\r\n> m was left with m->locked=LockInternal when a locked goroutine exits.\r\n> then another goroutine scheduled on the m, the goroutine calls\r\n> LockOSThread() and UnlockOSThread(), but the locking is not reset\r\n> because m->locked!=0.\r\n>\r\n\r\nThat's half of it, yes. A new goroutine calling LockOSThread/UnlockOSThread\r\nis not a problem. The problem is that the locked bit was keeping the\r\ncounted internal variant lockOSThread/unlockOSThread from releasing the\r\nlock. It was as if the next goroutine had called LockOSThread but only\r\ngotten the metadata updated, not the actual lock. But the metadata was\r\nenough to preserve a future lockOSThread (as used by cgo calls) beyond its\r\nexpected lifetime.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-03-11 17:13:45.726470",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 7627043: runtime: clear locked bit when goroutine exits",
	"created": "2013-03-08 05:18:14.049540",
	"patchsets": [
		1,
		2001,
		3004,
		12001
	],
	"modified": "2013-03-08 16:26:06.480240",
	"closed": true,
	"issue": 7627043
}