{
	"description": "net/textproto: reduce allocations in ReadMIMEHeader\n\nReadMIMEHeader is used by net/http, net/mail, and\nmime/multipart.\n\nDon't do so many small allocations. Calculate up front\nhow much we'll probably need.\n\nbenchmark                  old ns/op    new ns/op    delta\nBenchmarkReadMIMEHeader         8433         7467  -11.45%\n\nbenchmark                 old allocs   new allocs    delta\nBenchmarkReadMIMEHeader           23           14  -39.13%\n\nbenchmark                  old bytes    new bytes    delta\nBenchmarkReadMIMEHeader         1705         1343  -21.23%",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"iant@golang.org",
		"adg@golang.org"
	],
	"reviewers": [
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-03-29 21:58:38.276670",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "this sets a precedent i'd rather leave unset.\n\nhttps://codereview.appspot.com/8179043/diff/4001/src/pkg/net/textproto/reader.go\nFile src/pkg/net/textproto/reader.go (right):\n\nhttps://codereview.appspot.com/8179043/diff/4001/src/pkg/net/textproto/reader.go#newcode14\nsrc/pkg/net/textproto/reader.go:14: \"unsafe\"\nif you do this it's a problem on app engine, isn't it? i'd much prefer not to use unsafe for speed like this.  if you absolutely insist, put the unsafe piece in a separate build-tagged file.",
			"disapproval": false,
			"date": "2013-03-29 22:18:04.941720",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "App Engine trusts the standard library.\r\n\r\nDo you still want it in a separate file?\r\n\r\nI'm of the mindset that,\r\n-- Go is a language about giving you control over memory.\r\n-- The standard library is allowed to be fast, so others can use it and\r\nassume it's fast and not have to play their own games.\r\n-- I'd rather we play games than everybody else play games (or, say, have\r\nthe net/http package provide a hook for users to supply their own alternate\r\nreader functions. See also: the rejected CL for crypto sha1/rc4 alternate\r\nimplementation hooks)\r\n-- If we don't do stuff like this, we don't see the pain points of the\r\nlanguage (e.g. Issue 1642) and we'll forget to fix it later.\r\n\r\nThis wouldn't even be objectionable if the language let you control the\r\ncapacity of a slice (Issue 1642), of which only the syntax is really\r\ncontentious.\r\n\r\nI can\r\n\r\na) abandon this\r\nb) move unsafe bits to a separate file (tagged what? appengine? unnecessary)\r\nc) submit as-is.\r\n\r\n?\r\n\r\nOn Fri, Mar 29, 2013 at 3:18 PM, <r@golang.org> wrote:\r\n\r\n> this sets a precedent i'd rather leave unset.\r\n>\r\n>\r\n> https://codereview.appspot.**com/8179043/diff/4001/src/pkg/**\r\n> net/textproto/reader.go<https://codereview.appspot.com/8179043/diff/4001/src/pkg/net/textproto/reader.go>\r\n> File src/pkg/net/textproto/reader.**go (right):\r\n>\r\n> https://codereview.appspot.**com/8179043/diff/4001/src/pkg/**\r\n> net/textproto/reader.go#**newcode14<https://codereview.appspot.com/8179043/diff/4001/src/pkg/net/textproto/reader.go#newcode14>\r\n> src/pkg/net/textproto/reader.**go:14: \"unsafe\"\r\n> if you do this it's a problem on app engine, isn't it? i'd much prefer\r\n> not to use unsafe for speed like this.  if you absolutely insist, put\r\n> the unsafe piece in a separate build-tagged file.\r\n>\r\n> https://codereview.appspot.**com/8179043/<https://codereview.appspot.com/8179043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-29 22:25:19.402210",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Stand by.\r\n\r\nMoving it to a separate file.\r\n\r\n\r\nOn Fri, Mar 29, 2013 at 3:25 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n\r\n> App Engine trusts the standard library.\r\n>\r\n> Do you still want it in a separate file?\r\n>\r\n> I'm of the mindset that,\r\n> -- Go is a language about giving you control over memory.\r\n> -- The standard library is allowed to be fast, so others can use it and\r\n> assume it's fast and not have to play their own games.\r\n> -- I'd rather we play games than everybody else play games (or, say, have\r\n> the net/http package provide a hook for users to supply their own alternate\r\n> reader functions. See also: the rejected CL for crypto sha1/rc4 alternate\r\n> implementation hooks)\r\n> -- If we don't do stuff like this, we don't see the pain points of the\r\n> language (e.g. Issue 1642) and we'll forget to fix it later.\r\n>\r\n> This wouldn't even be objectionable if the language let you control the\r\n> capacity of a slice (Issue 1642), of which only the syntax is really\r\n> contentious.\r\n>\r\n> I can\r\n>\r\n> a) abandon this\r\n> b) move unsafe bits to a separate file (tagged what? appengine?\r\n> unnecessary)\r\n> c) submit as-is.\r\n>\r\n> ?\r\n>\r\n> On Fri, Mar 29, 2013 at 3:18 PM, <r@golang.org> wrote:\r\n>\r\n>> this sets a precedent i'd rather leave unset.\r\n>>\r\n>>\r\n>> https://codereview.appspot.**com/8179043/diff/4001/src/pkg/**\r\n>> net/textproto/reader.go<https://codereview.appspot.com/8179043/diff/4001/src/pkg/net/textproto/reader.go>\r\n>> File src/pkg/net/textproto/reader.**go (right):\r\n>>\r\n>> https://codereview.appspot.**com/8179043/diff/4001/src/pkg/**\r\n>> net/textproto/reader.go#**newcode14<https://codereview.appspot.com/8179043/diff/4001/src/pkg/net/textproto/reader.go#newcode14>\r\n>> src/pkg/net/textproto/reader.**go:14: \"unsafe\"\r\n>> if you do this it's a problem on app engine, isn't it? i'd much prefer\r\n>> not to use unsafe for speed like this.  if you absolutely insist, put\r\n>> the unsafe piece in a separate build-tagged file.\r\n>>\r\n>> https://codereview.appspot.**com/8179043/<https://codereview.appspot.com/8179043/>\r\n>>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-29 22:42:47.346340",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-29 22:54:28.192190",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Maybe I can use gob instead.\r\n\r\nOn Fri, Mar 29, 2013 at 4:07 PM, <r@golang.org> wrote:\r\n\r\n> I believe encoding/gob is the only standard package that uses unsafe to\r\n> speed up allocations, and I wish I hadn't stepped into that water. I do\r\n> not sanction doing this in the standard library.\r\n>\r\n> Please abandon this CL or find a way to improve the allocation strategy\r\n> without putting details about the runtime's internal data structures\r\n> into a MIME parser (!).\r\n>\r\n> https://codereview.appspot.**com/8179043/<https://codereview.appspot.com/8179043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-29 23:12:57.917610",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\r\n\r\nNow it'll involve less paperwork.\r\n\r\nOn Fri, Mar 29, 2013 at 3:54 PM, <bradfitz@golang.org> wrote:\r\n\r\n> Hello golang-dev@googlegroups.com, r@golang.org (cc:\r\n> golang-dev@googlegroups.com),\r\n>\r\n> Please take another look.\r\n>\r\n>\r\n> https://codereview.appspot.**com/8179043/<https://codereview.appspot.com/8179043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-29 22:55:35.687740",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I believe encoding/gob is the only standard package that uses unsafe to speed up allocations, and I wish I hadn't stepped into that water. I do not sanction doing this in the standard library.\n\nPlease abandon this CL or find a way to improve the allocation strategy without putting details about the runtime's internal data structures into a MIME parser (!).",
			"disapproval": false,
			"date": "2013-03-29 23:07:24.288020",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-03-29 23:16:13.551420",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Let's not work around a language/runtime problem by importing unsafe (unless we're desperate).",
			"disapproval": false,
			"date": "2013-03-29 23:21:27.059420",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I moved my whining to Issue 1642.\r\n\r\nI was hoping this CL would be more acceptable than my previous one in that\r\nit added no new public API and we could just change the one unsafe function\r\nto use slice = slice[off:len:cap] or something later, if that ever happens.\r\n\r\nOn Fri, Mar 29, 2013 at 4:21 PM, <iant@golang.org> wrote:\r\n\r\n> Let's not work around a language/runtime problem by importing unsafe\r\n> (unless we're desperate).\r\n>\r\n>\r\n> https://codereview.appspot.**com/8179043/<https://codereview.appspot.com/8179043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-29 23:31:32.825170",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n",
			"disapproval": false,
			"date": "2013-07-08 19:09:54.801690",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"iant@golang.org",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=bb98e4c9b6b3 ***\n\nnet/textproto: reduce allocations in ReadMIMEHeader\n\nReadMIMEHeader is used by net/http, net/mail, and\nmime/multipart.\n\nDon't do so many small allocations. Calculate up front\nhow much we'll probably need.\n\nbenchmark                  old ns/op    new ns/op    delta\nBenchmarkReadMIMEHeader         8433         7467  -11.45%\n\nbenchmark                 old allocs   new allocs    delta\nBenchmarkReadMIMEHeader           23           14  -39.13%\n\nbenchmark                  old bytes    new bytes    delta\nBenchmarkReadMIMEHeader         1705         1343  -21.23%\n\nR=golang-dev, r, iant, adg\nCC=golang-dev\nhttps://codereview.appspot.com/8179043",
			"disapproval": false,
			"date": "2013-07-03 05:37:30.109850",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL, 3 months later.\r\n\r\nNow a small patch, using s[i:j:k] instead of unsafe.\r\n\r\n\r\n\r\n\r\nOn Tue, Jul 2, 2013 at 6:21 AM, <bradfitz@golang.org> wrote:\r\n\r\n> Hello golang-dev@googlegroups.com, r@golang.org, iant@golang.org (cc:\r\n> golang-dev@googlegroups.com),\r\n>\r\n> Please take another look.\r\n>\r\n>\r\n> https://codereview.appspot.**com/8179043/<https://codereview.appspot.com/8179043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-02 13:24:23.058850",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"iant@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-07-03 04:15:12.053800",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org, iant@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-07-02 13:21:19.571400",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 8179043: net/textproto: reduce allocations in ReadMIMEHeader",
	"created": "2013-03-29 21:58:24.685500",
	"patchsets": [
		1,
		2001,
		4001,
		11001,
		21001,
		23001
	],
	"modified": "2013-07-08 19:09:55.076460",
	"closed": true,
	"issue": 8179043
}