{
	"description": "syscall: revert API changes in Windows Win32finddata fix.\n\nPreserve old API by using correct struct in system call\nand then copying the results, as we did for SetsockoptLinger.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [
		"alex.brainman@gmail.com"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Jun 9, 2012 at 8:15 AM,  <alex.brainman@gmail.com> wrote:\r\n> Sorry, I am late to the party.\r\n\r\nNot at all; thank you for pointing these out. I will send out a CL,\r\nand it will be included in the release. I might even resurrect my\r\nWindows VM and try to test them.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-13 19:22:05.974217",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry, I am late to the party.\n\nAlex\n\nhttp://codereview.appspot.com/6307065/diff/7001/src/pkg/syscall/ztypes_windows.go\nFile src/pkg/syscall/ztypes_windows.go (right):\n\nhttp://codereview.appspot.com/6307065/diff/7001/src/pkg/syscall/ztypes_windows.go#newcode381\nsrc/pkg/syscall/ztypes_windows.go:381: dst.FileName[len(dst.FileName)-1] = 0\nYou should not override last char of FileName with 0. There could be real char of the name there. As per your own comment:\n\n// There is no loss of expressivity here, because the final\n// uint16, if it is used, is supposed to be a NUL, and Go doesn't need that.\n\nSo, you should leave FileName as is without terminating 0. We use syscall.UTF16ToString to convert it into string, it does not care if there is no terminating 0.\n\nhttp://codereview.appspot.com/6307065/diff/7001/src/pkg/syscall/ztypes_windows.go#newcode383\nsrc/pkg/syscall/ztypes_windows.go:383: src.AlternateFileName[len(dst.AlternateFileName)-1] = 0\nThis line must be wrong. Why are you changing src? I think you should remove that line as well.",
			"disapproval": false,
			"date": "2012-06-09 12:15:31.007281",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-06-08 17:44:04.309967",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=7a7a91c3da32 ***\n\nsyscall: revert API changes in Windows Win32finddata fix.\n\nPreserve old API by using correct struct in system call\nand then copying the results, as we did for SetsockoptLinger.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/6307065",
			"disapproval": false,
			"date": "2012-06-08 17:54:56.051011",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Fri, Jun 8, 2012 at 10:44 AM, <rsc@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> syscall: revert API changes in Windows Win32finddata fix.\r\n>\r\n> Preserve old API by using correct struct in system call\r\n> and then copying the results, as we did for SetsockoptLinger.\r\n>\r\n> Please review this at http://codereview.appspot.com/**6307065/<http://codereview.appspot.com/6307065/>\r\n>\r\n> Affected files:\r\n>  M api/next.txt\r\n>  M src/pkg/syscall/syscall_**windows.go\r\n>  M src/pkg/syscall/zsyscall_**windows_386.go\r\n>  M src/pkg/syscall/zsyscall_**windows_amd64.go\r\n>  M src/pkg/syscall/ztypes_**windows.go\r\n>\r\n>\r\n> Index: api/next.txt\r\n> ==============================**==============================**=======\r\n> --- a/api/next.txt\r\n> +++ b/api/next.txt\r\n> @@ -422,38 +422,12 @@\r\n>  pkg syscall (windows-386), const CREATE_NEW_PROCESS_GROUP ideal-int\r\n>  pkg syscall (windows-386), const CTRL_BREAK_EVENT ideal-int\r\n>  pkg syscall (windows-386), const CTRL_C_EVENT ideal-int\r\n> -pkg syscall (windows-386), func FindFirstFile1(*uint16, *Win32finddata1)\r\n> (Handle, error)\r\n> -pkg syscall (windows-386), func FindNextFile1(Handle, *Win32finddata1)\r\n> error\r\n>  pkg syscall (windows-386), func GetCurrentProcessId() uint32\r\n>  pkg syscall (windows-386), func Getsockopt(Handle, int32, int32, *byte,\r\n> *int32) error\r\n>  pkg syscall (windows-386), type SysProcAttr struct, CreationFlags uint32\r\n> -pkg syscall (windows-386), type Win32finddata1 struct\r\n> -pkg syscall (windows-386), type Win32finddata1 struct, AlternateFileName\r\n> [14]uint16\r\n> -pkg syscall (windows-386), type Win32finddata1 struct, CreationTime\r\n> Filetime\r\n> -pkg syscall (windows-386), type Win32finddata1 struct, FileAttributes\r\n> uint32\r\n> -pkg syscall (windows-386), type Win32finddata1 struct, FileName\r\n> [MAX_PATH]uint16\r\n> -pkg syscall (windows-386), type Win32finddata1 struct, FileSizeHigh uint32\r\n> -pkg syscall (windows-386), type Win32finddata1 struct, FileSizeLow uint32\r\n> -pkg syscall (windows-386), type Win32finddata1 struct, LastAccessTime\r\n> Filetime\r\n> -pkg syscall (windows-386), type Win32finddata1 struct, LastWriteTime\r\n> Filetime\r\n> -pkg syscall (windows-386), type Win32finddata1 struct, Reserved0 uint32\r\n> -pkg syscall (windows-386), type Win32finddata1 struct, Reserved1 uint32\r\n>  pkg syscall (windows-amd64), const CREATE_NEW_PROCESS_GROUP ideal-int\r\n>  pkg syscall (windows-amd64), const CTRL_BREAK_EVENT ideal-int\r\n>  pkg syscall (windows-amd64), const CTRL_C_EVENT ideal-int\r\n> -pkg syscall (windows-amd64), func FindFirstFile1(*uint16,\r\n> *Win32finddata1) (Handle, error)\r\n> -pkg syscall (windows-amd64), func FindNextFile1(Handle, *Win32finddata1)\r\n> error\r\n>  pkg syscall (windows-amd64), func GetCurrentProcessId() uint32\r\n>  pkg syscall (windows-amd64), func Getsockopt(Handle, int32, int32, *byte,\r\n> *int32) error\r\n>  pkg syscall (windows-amd64), type SysProcAttr struct, CreationFlags uint32\r\n> -pkg syscall (windows-amd64), type Win32finddata1 struct\r\n> -pkg syscall (windows-amd64), type Win32finddata1 struct,\r\n> AlternateFileName [14]uint16\r\n> -pkg syscall (windows-amd64), type Win32finddata1 struct, CreationTime\r\n> Filetime\r\n> -pkg syscall (windows-amd64), type Win32finddata1 struct, FileAttributes\r\n> uint32\r\n> -pkg syscall (windows-amd64), type Win32finddata1 struct, FileName\r\n> [MAX_PATH]uint16\r\n> -pkg syscall (windows-amd64), type Win32finddata1 struct, FileSizeHigh\r\n> uint32\r\n> -pkg syscall (windows-amd64), type Win32finddata1 struct, FileSizeLow\r\n> uint32\r\n> -pkg syscall (windows-amd64), type Win32finddata1 struct, LastAccessTime\r\n> Filetime\r\n> -pkg syscall (windows-amd64), type Win32finddata1 struct, LastWriteTime\r\n> Filetime\r\n> -pkg syscall (windows-amd64), type Win32finddata1 struct, Reserved0 uint32\r\n> -pkg syscall (windows-amd64), type Win32finddata1 struct, Reserved1 uint32\r\n> Index: src/pkg/syscall/syscall_**windows.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/syscall/syscall_**windows.go\r\n> +++ b/src/pkg/syscall/syscall_**windows.go\r\n> @@ -130,8 +130,8 @@\r\n>  //sys  SetFilePointer(handle Handle, lowoffset int32, highoffsetptr\r\n> *int32, whence uint32) (newlowoffset uint32, err error)\r\n> [failretval==0xffffffff]\r\n>  //sys  CloseHandle(handle Handle) (err error)\r\n>  //sys  GetStdHandle(stdhandle int) (handle Handle, err error)\r\n> [failretval==InvalidHandle]\r\n> -//sys  FindFirstFile1(name *uint16, data *Win32finddata1) (handle Handle,\r\n> err error) [failretval==InvalidHandle] = FindFirstFileW\r\n> -//sys  FindNextFile1(handle Handle, data *Win32finddata1) (err error) =\r\n> FindNextFileW\r\n> +//sys  findFirstFile1(name *uint16, data *Win32finddata1) (handle Handle,\r\n> err error) [failretval==InvalidHandle] = FindFirstFileW\r\n> +//sys  findNextFile1(handle Handle, data *Win32finddata1) (err error) =\r\n> FindNextFileW\r\n>  //sys  FindClose(handle Handle) (err error)\r\n>  //sys  GetFileInformationByHandle(**handle Handle, data\r\n> *ByHandleFileInformation) (err error)\r\n>  //sys  GetCurrentDirectory(buflen uint32, buf *uint16) (n uint32, err\r\n> error) = GetCurrentDirectoryW\r\n> @@ -706,11 +706,29 @@\r\n>  func Getpid() (pid int) { return int(GetCurrentProcessId()) }\r\n>\r\n>  func FindFirstFile(name *uint16, data *Win32finddata) (handle Handle, err\r\n> error) {\r\n> -       return InvalidHandle, errorspkg.New(\"FindFirstFile is broken, use\r\n> FindFirstFile1 instead\")\r\n> +       // NOTE(rsc): The Win32finddata struct is wrong for the system\r\n> call:\r\n> +       // the two paths are each one uint16 short. Use the correct struct,\r\n> +       // a win32finddata1, and then copy the results out.\r\n> +       // There is no loss of expressivity here, because the final\r\n> +       // uint16, if it is used, is supposed to be a NUL, and Go doesn't\r\n> need that.\r\n> +       // For Go 1.1, we might avoid the allocation of win32finddata1 here\r\n> +       // by adding a final Bug [2]uint16 field to the struct and then\r\n> +       // adjusting the fields in the result directly.\r\n> +       var data1 win32finddata1\r\n> +       handle, err = findFirstFile1(name, &data1)\r\n> +       if err == nil {\r\n> +               copyFindData(data, &data1)\r\n> +       }\r\n> +       return\r\n>  }\r\n>\r\n>  func FindNextFile(handle Handle, data *Win32finddata) (err error) {\r\n> -       return errorspkg.New(\"FindNextFile is broken, use FindNextFile1\r\n> instead\")\r\n> +       var data1 win32finddata1\r\n> +       err = findFirstFile1(name, &data1)\r\n> +       if err == nil {\r\n> +               copyFindData(data, &data1)\r\n> +       }\r\n> +       return\r\n>  }\r\n>\r\n>  // TODO(brainman): fix all needed for os\r\n> Index: src/pkg/syscall/zsyscall_**windows_386.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/syscall/zsyscall_**windows_386.go\r\n> +++ b/src/pkg/syscall/zsyscall_**windows_386.go\r\n> @@ -310,7 +310,7 @@\r\n>        return\r\n>  }\r\n>\r\n> -func FindFirstFile1(name *uint16, data *Win32finddata1) (handle Handle,\r\n> err error) {\r\n> +func findFirstFile1(name *uint16, data *Win32finddata1) (handle Handle,\r\n> err error) {\r\n>        r0, _, e1 := Syscall(procFindFirstFileW.**Addr(), 2,\r\n> uintptr(unsafe.Pointer(name)), uintptr(unsafe.Pointer(data)), 0)\r\n>        handle = Handle(r0)\r\n>        if handle == InvalidHandle {\r\n> @@ -323,7 +323,7 @@\r\n>        return\r\n>  }\r\n>\r\n> -func FindNextFile1(handle Handle, data *Win32finddata1) (err error) {\r\n> +func findNextFile1(handle Handle, data *Win32finddata1) (err error) {\r\n>        r1, _, e1 := Syscall(procFindNextFileW.**Addr(), 2,\r\n> uintptr(handle), uintptr(unsafe.Pointer(data)), 0)\r\n>        if int(r1) == 0 {\r\n>                if e1 != 0 {\r\n> Index: src/pkg/syscall/zsyscall_**windows_amd64.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/syscall/zsyscall_**windows_amd64.go\r\n> +++ b/src/pkg/syscall/zsyscall_**windows_amd64.go\r\n> @@ -310,7 +310,7 @@\r\n>        return\r\n>  }\r\n>\r\n> -func FindFirstFile1(name *uint16, data *Win32finddata1) (handle Handle,\r\n> err error) {\r\n> +func findFirstFile1(name *uint16, data *Win32finddata1) (handle Handle,\r\n> err error) {\r\n>        r0, _, e1 := Syscall(procFindFirstFileW.**Addr(), 2,\r\n> uintptr(unsafe.Pointer(name)), uintptr(unsafe.Pointer(data)), 0)\r\n>        handle = Handle(r0)\r\n>        if handle == InvalidHandle {\r\n> @@ -323,7 +323,7 @@\r\n>        return\r\n>  }\r\n>\r\n> -func FindNextFile1(handle Handle, data *Win32finddata1) (err error) {\r\n> +func findNextFile1(handle Handle, data *Win32finddata1) (err error) {\r\n>        r1, _, e1 := Syscall(procFindNextFileW.**Addr(), 2,\r\n> uintptr(handle), uintptr(unsafe.Pointer(data)), 0)\r\n>        if int(r1) == 0 {\r\n>                if e1 != 0 {\r\n> Index: src/pkg/syscall/ztypes_**windows.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/syscall/ztypes_**windows.go\r\n> +++ b/src/pkg/syscall/ztypes_**windows.go\r\n> @@ -338,9 +338,6 @@\r\n>        return ft\r\n>  }\r\n>\r\n> -// Win32finddata is an incorrect struct definition, preserved for\r\n> -// backwards compatibility. Use Win32finddata1 and the\r\n> -// FindFirstFile1 and FindNextFile1 functions instead.\r\n>  type Win32finddata struct {\r\n>        FileAttributes    uint32\r\n>        CreationTime      Filetime\r\n> @@ -354,7 +351,9 @@\r\n>        AlternateFileName [13]uint16\r\n>  }\r\n>\r\n> -type Win32finddata1 struct {\r\n> +// This is the actual system call structure.\r\n> +// Win32finddata is what we committed to in Go 1.\r\n> +type win32finddata1 struct {\r\n>        FileAttributes    uint32\r\n>        CreationTime      Filetime\r\n>        LastAccessTime    Filetime\r\n> @@ -367,6 +366,23 @@\r\n>        AlternateFileName [14]uint16\r\n>  }\r\n>\r\n> +func copyFindData(dst *Win32finddata, src *Win32finddata1) {\r\n> +       dst.FileAttributes = src.FileAttributes\r\n> +       dst.CreationTime = src.CreationTime\r\n> +       dst.LastAccessTime = src.LastAccessTime\r\n> +       dst.LastWriteTime = src.LastWriteTime\r\n> +       dst.FileSizeHigh = src.FileSizeHigh\r\n> +       dst.FileSizeLow = src.FileSizeLow\r\n> +       dst.Reserved0 = src.Reserved0\r\n> +       dst.Reserved1 = src.Reserved1\r\n> +\r\n> +       // The src is 1 element shorter than dst. Zero that last one.\r\n> +       copy(dst.FileName[:], src.FileName[:])\r\n> +       dst.FileName[len(dst.FileName)**-1] = 0\r\n> +       copy(dst.AlternateFileName[:], src.AlternateFileName[:])\r\n> +       src.AlternateFileName[len(src.**AlternateFileName)-1] = 0\r\n> +}\r\n> +\r\n>  type ByHandleFileInformation struct {\r\n>        FileAttributes     uint32\r\n>        CreationTime       Filetime\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-06-08 17:46:22.575825",
			"approval": true
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 6307065: syscall: revert API changes in Windows Win32finddata fix.",
	"created": "2012-06-08 17:43:53.108446",
	"patchsets": [
		1,
		2001,
		7001
	],
	"modified": "2012-06-09 12:15:31.147233",
	"closed": true,
	"issue": 6307065
}