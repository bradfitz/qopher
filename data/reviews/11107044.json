{
	"description": "cmd/gc: avoid passing unevaluated constant expressions to backends.\n\nBackends do not exactly expect receiving binary operators with\nconstant operands or use workarounds to move them to\nregister/stack in order to handle them.\n\nFixes issue 5841.",
	"cc": [
		"golang-dev@googlegroups.com",
		"daniel.morsing@gmail.com",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-07-11 07:18:19.258820",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This change is weird. I think you're papering over some deeper issue in the compilers.\n\nhttps://codereview.appspot.com/11107044/diff/5005/src/cmd/6g/cgen.c\nFile src/cmd/6g/cgen.c (right):\n\nhttps://codereview.appspot.com/11107044/diff/5005/src/cmd/6g/cgen.c#newcode1240\nsrc/cmd/6g/cgen.c:1240: if(!nl->addable) {\nI'm not sure about this. It shouldn't matter for evaluating nl whether it is addable or not.\n\nhttps://codereview.appspot.com/11107044/diff/5005/src/cmd/gc/walk.c\nFile src/cmd/gc/walk.c (right):\n\nhttps://codereview.appspot.com/11107044/diff/5005/src/cmd/gc/walk.c#newcode1382\nsrc/cmd/gc/walk.c:1382: evconst(n);\nAll constants should be fully evaluated in typecheck.",
			"disapproval": false,
			"date": "2013-07-11 08:20:50.983990",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ok, I think the compiler is trying to optimize y%1 too eagerly. For example, this doesn't panic:\n\nvar y *int\nif *y%1 == 0 {\n}",
			"disapproval": false,
			"date": "2013-07-11 08:45:04.109160",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I agree with Daniel. The fix should probably be in the front end.\r\n",
			"disapproval": false,
			"date": "2013-07-11 18:00:32.405030",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11107044/diff/5005/src/cmd/6g/cgen.c\nFile src/cmd/6g/cgen.c (right):\n\nhttps://codereview.appspot.com/11107044/diff/5005/src/cmd/6g/cgen.c#newcode1240\nsrc/cmd/6g/cgen.c:1240: if(!nl->addable) {\nOn 2013/07/11 08:20:51, DMorsing wrote:\n> I'm not sure about this. It shouldn't matter for evaluating nl whether it is\n> addable or not.\n\nThis change is not mandatory and only aims at bringing 6g closer to 8g (don't generate unnecessary moving).\n\nhttps://codereview.appspot.com/11107044/diff/5005/src/cmd/gc/walk.c\nFile src/cmd/gc/walk.c (right):\n\nhttps://codereview.appspot.com/11107044/diff/5005/src/cmd/gc/walk.c#newcode1382\nsrc/cmd/gc/walk.c:1382: evconst(n);\nOn 2013/07/11 08:20:51, DMorsing wrote:\n> All constants should be fully evaluated in typecheck.\n\nwalk transforms y%1 in a constant 0. As you point out it seems to miss some side effects of y, but that explains why unevaluated constants can appear here.\n\nDo you suggest an alternative solution?",
			"disapproval": false,
			"date": "2013-07-11 21:27:27.954630",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/11 08:45:04, DMorsing wrote:\n> Ok, I think the compiler is trying to optimize y%1 too eagerly. For example,\n> this doesn't panic:\n> \n> var y *int\n> if *y%1 == 0 {\n> }\n\nI cannot reproduce this issue. Can you post a full program?\n\nR\u00e9my.",
			"disapproval": false,
			"date": "2013-07-20 10:19:47.437670",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/20 10:19:47, remyoudompheng wrote:\n> On 2013/07/11 08:45:04, DMorsing wrote:\n> > Ok, I think the compiler is trying to optimize y%1 too eagerly. For example,\n> > this doesn't panic:\n> > \n> > var y *int\n> > if *y%1 == 0 {\n> > }\n> \n> I cannot reproduce this issue. Can you post a full program?\n> \n> R\u00e9my.\n\nWeird, I can't reproduce as well.\n\nMaybe I was wrong. Reading the -W output suggests that we put in a noop read before inserting the 0 constant.",
			"disapproval": false,
			"date": "2013-07-20 12:42:46.038240",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Can you please make this CL only include the change in cmd/gc?\nThat's the part I'm comfortable putting into Go 1.1.2. We can do the other changes separately.",
			"disapproval": false,
			"date": "2013-07-22 23:58:42.976090",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11107044/diff/5005/src/cmd/gc/walk.c\nFile src/cmd/gc/walk.c (right):\n\nhttps://codereview.appspot.com/11107044/diff/5005/src/cmd/gc/walk.c#newcode1382\nsrc/cmd/gc/walk.c:1382: evconst(n);\n// Expressions that are constant at run time but not\n// considered const by the language spec are not turned into\n// constants until walk. For example, if n is y%1 == 0, the\n// walk of y%1 may have replaced it by 0.\n// Check whether n with its updated args is itself now a constant.\nevconst(n);\n<blank line>\nullmancalc(n);",
			"disapproval": false,
			"date": "2013-07-23 00:01:23.193940",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, daniel.morsing@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-07-24 06:46:52.643740",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-07-25 13:41:26.562500",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=5baf6060648e ***\n\ncmd/gc: avoid passing unevaluated constant expressions to backends.\n\nBackends do not exactly expect receiving binary operators with\nconstant operands or use workarounds to move them to\nregister/stack in order to handle them.\n\nFixes issue 5841.\n\nR=golang-dev, daniel.morsing, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/11107044\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2013-07-25 13:42:06.668440",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 11107044: cmd/gc: avoid passing unevaluated constant expressions ...",
	"created": "2013-07-11 07:17:25.752120",
	"patchsets": [
		1,
		3001,
		5005,
		19001
	],
	"modified": "2013-07-25 21:11:07.524330",
	"closed": true,
	"issue": 11107044
}