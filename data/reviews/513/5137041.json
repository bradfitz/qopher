{
	"description": "go/doc, godoc, gotest: support for reading example documentation\n\nThis CL introduces the go.Example type and go.Examples functions that\nare used to represent and extract code samples from Go source.\n\nThey should be of the form:\n\n// Output of this function.\nfunc ExampleFoo() {\n        fmt.Println(\"Output of this function.\")\n}\n\nIt also modifies godoc to read example code from _test.go files,\nand include them in the HTML output with JavaScript-driven toggles.\n\nIt also implements testing of example functions with gotest.\nThe stdout/stderr is compared against the output comment on the\nfunction.\n\nThis CL includes examples for the sort.Ints function and the\nsort.SortInts type. After patching this CL in and re-building go/doc\nand godoc, try\n        godoc -http=localhost:6060\nand visit http://localhost:6060/pkg/sort/",
	"cc": [
		"gri@golang.org",
		"r@golang.org",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rogpeppe@gmail.com"
	],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello gri (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-09-25 08:13:44.975499",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I've updated the CL with modifications to gotest, also, and now show the\nexamples in the HTML view instead. Haven't done the collapsing toggle yet,\nbut that's easily done.\n\n[+r for gotest changes]\n\nOn 27 September 2011 08:22, <gri@golang.org> wrote:\n\n> This looks reasonable to me as well.\n>\n> I think a toggle (per rsc's suggestion) makes sense. We should probably\n> come up with a bit of a standard approach for the various display modes\n> supported by godoc.\n>\n>\n> http://codereview.appspot.com/**5137041/<http://codereview.appspot.com/5137041/>\n>\n",
			"disapproval": false,
			"date": "2011-09-27 04:22:09.165428",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adg@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "This looks reasonable to me as well.\n\nI think a toggle (per rsc's suggestion) makes sense. We should probably come up with a bit of a standard approach for the various display modes supported by godoc.",
			"disapproval": false,
			"date": "2011-09-26 22:22:06.100603",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello gri@golang.org, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-28 00:02:52.141763",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Seems reasonable.  Examples should be a slice, not a map.\nThe order is important: they should run in the order they are\nin the file.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-10-05 15:29:00.380831",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5137041/diff/14002/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttp://codereview.appspot.com/5137041/diff/14002/src/cmd/godoc/godoc.go#newcode995\nsrc/cmd/godoc/godoc.go:995: return PageInfo{Dirname: abspath, Err: err}\nOn 2011/10/06 00:03:05, gri wrote:\n> This seems too harsh. If we hadn't looked at the test files, we might be ok and\n> could still serve documentation.\n> \n> I would simple ignore the examples in this case but continue; and perhaps log\n> this situation. Generally godoc logs only if -v is set, need to verify if this\n> is also the case for erroneous situations like here (or if logging always\n> happens in this case).\n\nThis will throw an error if *_test.go can't be parsed. IMO we should log such errors regardless of *verbose.",
			"disapproval": false,
			"date": "2011-10-06 00:39:14.679757",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello gri@golang.org, r@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-05 23:07:15.684393",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n",
			"disapproval": false,
			"date": "2011-10-06 17:40:52.551831",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adg@golang.org",
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5137041/diff/7001/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttp://codereview.appspot.com/5137041/diff/7001/src/cmd/godoc/godoc.go#newcode470\nsrc/cmd/godoc/godoc.go:470: // unindent and remove surrounding braces\nThis is very specific to the current formatting. Wouldn't it be better to have a node_htmlFunc that takes a statement list instead?\n\nhttp://codereview.appspot.com/5137041/diff/7001/src/cmd/godoc/godoc.go#newcode598\nsrc/cmd/godoc/godoc.go:598: exampleHTML *template.Template\nthis list is ordered\n\nhttp://codereview.appspot.com/5137041/diff/7001/src/cmd/godoc/godoc.go#newcode612\nsrc/cmd/godoc/godoc.go:612: exampleHTML = readTemplate(\"example.html\")\nsame here - please reorder\n\nhttp://codereview.appspot.com/5137041/diff/7001/src/pkg/go/doc/example.go\nFile src/pkg/go/doc/example.go (right):\n\nhttp://codereview.appspot.com/5137041/diff/7001/src/pkg/go/doc/example.go#newcode17\nsrc/pkg/go/doc/example.go:17: Name   string         // package identifier\ns/identifier/name/\n\nhttp://codereview.appspot.com/5137041/diff/7001/src/pkg/go/doc/example.go#newcode47\nsrc/pkg/go/doc/example.go:47: // We don't want TesticularCancer.\nhow about \"We don't want \"Testing\". instead...\n\nhttp://codereview.appspot.com/5137041/diff/7001/src/pkg/testing/example.go\nFile src/pkg/testing/example.go (right):\n\nhttp://codereview.appspot.com/5137041/diff/7001/src/pkg/testing/example.go#newcode25\nsrc/pkg/testing/example.go:25: if err, ok := e.(os.Error); ok {\ncan't you just do:\n\nlog.Fatal(e.(os.Error))\n\nIf it's not an os.Error, the type assertion will fail and re-panic.",
			"disapproval": false,
			"date": "2011-10-05 23:16:40.953849",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5137041/diff/7001/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttp://codereview.appspot.com/5137041/diff/7001/src/cmd/godoc/godoc.go#newcode470\nsrc/cmd/godoc/godoc.go:470: // unindent and remove surrounding braces\nOn 2011/10/05 23:16:41, gri wrote:\n> This is very specific to the current formatting. Wouldn't it be better to have a\n> node_htmlFunc that takes a statement list instead?\n\nCan I get your guidance as to how to write such a function? I tried printing a statement list and had trouble.\n\nhttp://codereview.appspot.com/5137041/diff/7001/src/cmd/godoc/godoc.go#newcode598\nsrc/cmd/godoc/godoc.go:598: exampleHTML *template.Template\nOn 2011/10/05 23:16:41, gri wrote:\n> this list is ordered\n\nDone.\n\nhttp://codereview.appspot.com/5137041/diff/7001/src/cmd/godoc/godoc.go#newcode612\nsrc/cmd/godoc/godoc.go:612: exampleHTML = readTemplate(\"example.html\")\nOn 2011/10/05 23:16:41, gri wrote:\n> same here - please reorder\n\nDone.\n\nhttp://codereview.appspot.com/5137041/diff/7001/src/pkg/go/doc/example.go\nFile src/pkg/go/doc/example.go (right):\n\nhttp://codereview.appspot.com/5137041/diff/7001/src/pkg/go/doc/example.go#newcode17\nsrc/pkg/go/doc/example.go:17: Name   string         // package identifier\nOn 2011/10/05 23:16:41, gri wrote:\n> s/identifier/name/\n\nChanged it to the more accurate \"name of the item being demonstrated\"\n\nhttp://codereview.appspot.com/5137041/diff/7001/src/pkg/go/doc/example.go#newcode47\nsrc/pkg/go/doc/example.go:47: // We don't want TesticularCancer.\nOn 2011/10/05 23:16:41, gri wrote:\n> how about \"We don't want \"Testing\". instead... \n\nThis was Rob's original comment from gotest. I have updated it.\n\nhttp://codereview.appspot.com/5137041/diff/7001/src/pkg/testing/example.go\nFile src/pkg/testing/example.go (right):\n\nhttp://codereview.appspot.com/5137041/diff/7001/src/pkg/testing/example.go#newcode25\nsrc/pkg/testing/example.go:25: if err, ok := e.(os.Error); ok {\nOn 2011/10/05 23:16:41, gri wrote:\n> can't you just do:\n> \n> log.Fatal(e.(os.Error))\n> \n> If it's not an os.Error, the type assertion will fail and re-panic.\n\nIt'll re-panic with a\u00a0type assertion failure, not the original panic. This will re-panic with any value.",
			"disapproval": false,
			"date": "2011-10-05 23:29:55.911691",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"adg@golang.org",
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "testing stuff LGTM but can maybe be refactored.\n\nhttp://codereview.appspot.com/5137041/diff/11001/src/pkg/testing/example.go\nFile src/pkg/testing/example.go (right):\n\nhttp://codereview.appspot.com/5137041/diff/11001/src/pkg/testing/example.go#newcode22\nsrc/pkg/testing/example.go:22: func RunExamples(examples []InternalExample) (ok bool) {\nthis is so much like the regular tester. can it be refactored? Fine to do that in another CL.",
			"disapproval": false,
			"date": "2011-10-05 23:30:59.765321",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"adg@golang.org",
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nrsc may want to comment on the testing changes.\n\nhttp://codereview.appspot.com/5137041/diff/7001/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttp://codereview.appspot.com/5137041/diff/7001/src/cmd/godoc/godoc.go#newcode470\nsrc/cmd/godoc/godoc.go:470: // unindent and remove surrounding braces\nOn 2011/10/05 23:29:56, adg wrote:\n> On 2011/10/05 23:16:41, gri wrote:\n> > This is very specific to the current formatting. Wouldn't it be better to have\n> a\n> > node_htmlFunc that takes a statement list instead?\n> \n> Can I get your guidance as to how to write such a function? I tried printing a\n> statement list and had trouble.\n\nAfter further consideration, this is probably ok for now, especially if the output is tested. Doing it differently would require the go/printer to accept a statement list, and I am reluctant to make that change for now.\n\nhttp://codereview.appspot.com/5137041/diff/14002/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttp://codereview.appspot.com/5137041/diff/14002/src/cmd/godoc/godoc.go#newcode995\nsrc/cmd/godoc/godoc.go:995: return PageInfo{Dirname: abspath, Err: err}\nThis seems too harsh. If we hadn't looked at the test files, we might be ok and could still serve documentation.\n\nI would simple ignore the examples in this case but continue; and perhaps log this situation. Generally godoc logs only if -v is set, need to verify if this is also the case for erroneous situations like here (or if logging always happens in this case).",
			"disapproval": false,
			"date": "2011-10-06 00:03:05.231244",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=e23057584c65 ***\n\ngo/doc, godoc, gotest: support for reading example documentation\n\nThis CL introduces the go.Example type and go.Examples functions that\nare used to represent and extract code samples from Go source.\n\nThey should be of the form:\n\n// Output of this function.\nfunc ExampleFoo() {\n        fmt.Println(\"Output of this function.\")\n}\n\nIt also modifies godoc to read example code from _test.go files,\nand include them in the HTML output with JavaScript-driven toggles.\n\nIt also implements testing of example functions with gotest.\nThe stdout/stderr is compared against the output comment on the\nfunction.\n\nThis CL includes examples for the sort.Ints function and the\nsort.SortInts type. After patching this CL in and re-building go/doc\nand godoc, try\n        godoc -http=localhost:6060\nand visit http://localhost:6060/pkg/sort/\n\nR=gri, r, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5137041",
			"disapproval": false,
			"date": "2011-10-06 18:56:22.573028",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "sorry for this late comment, but i've only just got\naround to looking at this. looks really good, but a few\nsmall remarks:\n\n- ironically, this feature doesn't seem to be mentioned anywhere\nin the documentation (although i've quite possibly missed something),\nso if you haven't seen this CL go by, you might not know how to do examples.\n\n- if there was such documentation, it should probably mention\nthat the name of the example is used to decide what type\nor function to attach it to (perhaps i should have found that\nobvious, but i didn't)\n\n- for examples that use several features from a package,\nit would be nice if there was some way of attaching examples\nto the top of a godoc page rather than to a specific function\nor type. Perhaps if the example name was not recognised,\nthe example could go at the top, preceded by the doc comments\nfor that example function. that would also make it obvious when\nyou have misspelled an example and so left it out accidentally.\n\n- even though the source is shown directly, it might be nice\nto link to the source code in context anyway.\n\nOn 6 October 2011 19:56,  <adg@golang.org> wrote:\n> *** Submitted as\n> http://code.google.com/p/go/source/detail?r=e23057584c65 ***\n>\n> go/doc, godoc, gotest: support for reading example documentation\n>\n> This CL introduces the go.Example type and go.Examples functions that\n> are used to represent and extract code samples from Go source.\n>\n> They should be of the form:\n>\n> // Output of this function.\n> func ExampleFoo() {\n> \u00a0 \u00a0 \u00a0 \u00a0fmt.Println(\"Output of this function.\")\n> }\n>\n> It also modifies godoc to read example code from _test.go files,\n> and include them in the HTML output with JavaScript-driven toggles.\n>\n> It also implements testing of example functions with gotest.\n> The stdout/stderr is compared against the output comment on the\n> function.\n>\n> This CL includes examples for the sort.Ints function and the\n> sort.SortInts type. After patching this CL in and re-building go/doc\n> and godoc, try\n> \u00a0 \u00a0 \u00a0 \u00a0godoc -http=localhost:6060\n> and visit http://localhost:6060/pkg/sort/\n>\n> R=gri, r, rsc\n> CC=golang-dev\n> http://codereview.appspot.com/5137041\n>\n>\n> http://codereview.appspot.com/5137041/\n>\n",
			"disapproval": false,
			"date": "2011-10-07 08:40:28.615039",
			"approval": false
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 5137041: go/doc, godoc, gotest: support for reading example docu...",
	"created": "2011-09-25 08:13:33.425458",
	"patchsets": [
		1,
		3001,
		6001,
		7001,
		11001,
		14002,
		28001,
		30001,
		16004
	],
	"modified": "2011-10-07 08:40:28.911952",
	"closed": true,
	"issue": 5137041
}