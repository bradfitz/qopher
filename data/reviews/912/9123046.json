{
	"description": "runtime: Optimize aeshash a bit.  Use a better predicted branch\nfor checking for page boundary.  Also avoid boundary check\nwhen >=16 bytes are hashed.\n\nbenchmark                        old ns/op    new ns/op    delta\nBenchmarkHashStringSpeed                23           22   -0.43%\nBenchmarkHashBytesSpeed                 44           42   -3.61%\nBenchmarkHashStringArraySpeed           71           68   -4.05%",
	"cc": [
		"iant@golang.org",
		"khr@google.com",
		"gobot@golang.org",
		"golang-dev@googlegroups.com",
		"google@julienschmidt.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "khr@golang.org",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-05-14 18:20:58.817760",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"khr@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"google@julienschmidt.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9123046/diff/11001/src/pkg/runtime/asm_386.s\nFile src/pkg/runtime/asm_386.s (right):\n\nhttps://codereview.appspot.com/9123046/diff/11001/src/pkg/runtime/asm_386.s#newcode771\nsrc/pkg/runtime/asm_386.s:771: MOVOU\t-16(AX)(CX*1), X1\nI don't understand why you don't have to use PSHUFB in this case to zero out the bytes you don't want.\n\nhttps://codereview.appspot.com/9123046/diff/11001/src/pkg/runtime/asm_amd64.s\nFile src/pkg/runtime/asm_amd64.s (right):\n\nhttps://codereview.appspot.com/9123046/diff/11001/src/pkg/runtime/asm_amd64.s#newcode788\nsrc/pkg/runtime/asm_amd64.s:788: MOVOU\t-16(AX)(CX*1), X1\nWhy can you skip the PSHUFB?",
			"disapproval": false,
			"date": "2013-05-15 00:03:04.128600",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"khr@golang.org",
				"iant@golang.org",
				"khr@google.com",
				"golang-dev@googlegroups.com",
				"google@julienschmidt.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nI think the double inclusion of some bytes could use a comment.",
			"disapproval": false,
			"date": "2013-05-15 00:31:30.248490",
			"approval": true
		},
		{
			"sender": "google@julienschmidt.com",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"google@julienschmidt.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn 2013/05/14 18:20:58, khr wrote:\n> Hello mailto:golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-05-14 20:08:48.255370",
			"approval": true
		},
		{
			"sender": "google@julienschmidt.com",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"google@julienschmidt.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Oh, fix the first line of the description before committing.\n\"runtime: Optimize aeshash a bit. Use a better\" is an odd commit title.\n\nOn 2013/05/14 20:08:48, julienschmidt wrote:\n> LGTM\n> \n> On 2013/05/14 18:20:58, khr wrote:\n> > Hello mailto:golang-dev@googlegroups.com,\n> > \n> > I'd like you to review this change to\n> > https://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-05-14 20:12:16.424830",
			"approval": false
		},
		{
			"sender": "gobot@golang.org",
			"recipients": [
				"khr@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"google@julienschmidt.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=iant (assigned by bradfitz)",
			"disapproval": false,
			"date": "2013-05-14 22:19:06.351440",
			"approval": false
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm double-including the overlapping bytes from the last two loads.  So if\r\nthe block size was 4, hashing \"1 2 3 4 5\" would use a block of \"1 2 3 4\"\r\nand a block of \"2 3 4 5\".  As long as there is at least one block of input,\r\nI arrange to never read outside the input.  The last block and the\r\nsecond-to-last block may overlap, which is ok.\r\n\r\nThe pshufb and pand are now only used for input smaller than a block, as\r\nthat's the only case where I really have to squash the unused bytes.\r\n\r\n\r\nOn Tue, May 14, 2013 at 5:03 PM, <iant@golang.org> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/9123046/diff/11001/src/**\r\n> pkg/runtime/asm_386.s<https://codereview.appspot.com/9123046/diff/11001/src/pkg/runtime/asm_386.s>\r\n> File src/pkg/runtime/asm_386.s (right):\r\n>\r\n> https://codereview.appspot.**com/9123046/diff/11001/src/**\r\n> pkg/runtime/asm_386.s#**newcode771<https://codereview.appspot.com/9123046/diff/11001/src/pkg/runtime/asm_386.s#newcode771>\r\n> src/pkg/runtime/asm_386.s:771: MOVOU    -16(AX)(CX*1), X1\r\n> I don't understand why you don't have to use PSHUFB in this case to zero\r\n> out the bytes you don't want.\r\n>\r\n> https://codereview.appspot.**com/9123046/diff/11001/src/**\r\n> pkg/runtime/asm_amd64.s<https://codereview.appspot.com/9123046/diff/11001/src/pkg/runtime/asm_amd64.s>\r\n> File src/pkg/runtime/asm_amd64.s (right):\r\n>\r\n> https://codereview.appspot.**com/9123046/diff/11001/src/**\r\n> pkg/runtime/asm_amd64.s#**newcode788<https://codereview.appspot.com/9123046/diff/11001/src/pkg/runtime/asm_amd64.s#newcode788>\r\n> src/pkg/runtime/asm_amd64.s:**788: MOVOU  -16(AX)(CX*1), X1\r\n> Why can you skip the PSHUFB?\r\n>\r\n> https://codereview.appspot.**com/9123046/<https://codereview.appspot.com/9123046/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-15 00:10:49.942610",
			"approval": false
		},
		{
			"sender": "khr@golang.org",
			"recipients": [
				"khr@golang.org",
				"iant@golang.org",
				"khr@google.com",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"google@julienschmidt.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=80c8a9f81e48 ***\n\nruntime: Optimize aeshash a bit.  Use a better predicted branch\nfor checking for page boundary.  Also avoid boundary check\nwhen >=16 bytes are hashed.\n\nbenchmark                        old ns/op    new ns/op    delta\nBenchmarkHashStringSpeed                23           22   -0.43%\nBenchmarkHashBytesSpeed                 44           42   -3.61%\nBenchmarkHashStringArraySpeed           71           68   -4.05%\n\nR=iant, khr\nCC=gobot, golang-dev, google\nhttps://codereview.appspot.com/9123046",
			"disapproval": false,
			"date": "2013-05-15 16:40:27.026530",
			"approval": false
		}
	],
	"owner_email": "khr@golang.org",
	"private": false,
	"base_url": "",
	"owner": "khr",
	"subject": "code review 9123046: runtime: Optimize aeshash a bit.  Use a better",
	"created": "2013-05-08 20:12:15.350900",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		11001,
		7003
	],
	"modified": "2013-05-15 16:40:28.603300",
	"closed": true,
	"issue": 9123046
}