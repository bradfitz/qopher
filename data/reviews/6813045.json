{
	"description": "cmd/5g: improve shift code generation\n\nThis CL is a backport of 6012049 which improves code\ngeneration for shift operations.\n\nbenchmark       old ns/op    new ns/op    delta\nBenchmarkLSL            9            5  -49.67%\nBenchmarkLSR            9            4  -50.00%",
	"cc": [
		"golang-dev@googlegroups.com",
		"minux.ma@gmail.com",
		"r@golang.org",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "For the avoidance of bikeshedding, my final suggestion is go/test/bench/codegen\r\n\r\nOn Mon, Oct 29, 2012 at 3:00 AM, minux <minux.ma@gmail.com> wrote:\r\n>\r\n> On Sun, Oct 28, 2012 at 11:51 PM, Rob Pike <r@golang.org> wrote:\r\n>>\r\n>> other than my feeling that the word 'micro' will come to haunt us,\r\n>> that's better. maybe go/test/bench/compiler/. i could imagine adding\r\n>> benchmarks such as for slice copying that would be not micro at all.\r\n>\r\n> slice copying benchmark seems to belong to runtime?\r\n> or we can move some of runtime's benchmark here? for example,\r\n> closure creation and calling.\r\n",
			"disapproval": false,
			"date": "2012-10-28 16:02:18.363100",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "works for me\r\n\r\n---------- Forwarded message ----------\r\nFrom: Rob Pike <r@golang.org>\r\nDate: Thu, Nov 1, 2012 at 2:44 PM\r\nSubject: Re: [golang-dev] Re: code review 6813045: cmd/5g: improve\r\nshift code generation (issue 6813045)\r\nTo: Russ Cox <rsc@golang.org>\r\n\r\ntest/bench/go\r\n\r\nOn Thu, Nov 1, 2012 at 1:59 PM, Russ Cox <rsc@golang.org> wrote:\r\n> what about test/bench/lang or test/bench/go?\r\n",
			"disapproval": false,
			"date": "2012-11-01 18:46:51.039210",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "other than my feeling that the word 'micro' will come to haunt us,\r\nthat's better. maybe go/test/bench/compiler/. i could imagine adding\r\nbenchmarks such as for slice copying that would be not micro at all.\r\n\r\nbut i'd like to hear from others.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-10-28 15:51:18.362510",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "it should - i was quoting you.\r\n\r\n+1 i guess i should have said.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-11-01 19:17:57.788020",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/10/28 15:40:48, dfc wrote:\n> PTAL. I have uploaded the u-benchmarks to runtime/runtime_test.go\nI propose we add these u-benchmarks to test/bench/micro\n\nwe can probably also generate u-benchmarks for all (integer) operations\ngiven the comment about OXXX in cmd/gc/go.h",
			"disapproval": false,
			"date": "2012-10-28 15:49:45.070630",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Oct 28, 2012 at 11:51 PM, Rob Pike <r@golang.org> wrote:\r\n\r\n> other than my feeling that the word 'micro' will come to haunt us,\r\n> that's better. maybe go/test/bench/compiler/. i could imagine adding\r\n> benchmarks such as for slice copying that would be not micro at all.\r\n>\r\nslice copying benchmark seems to belong to runtime?\r\nor we can move some of runtime's benchmark here? for example,\r\nclosure creation and calling.\r\n",
			"disapproval": false,
			"date": "2012-10-28 16:00:25.498730",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-10-28 15:27:36.817670",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL. I have uploaded the u-benchmarks to runtime/runtime_test.go\r\n\r\nOn Mon, Oct 29, 2012 at 2:32 AM,  <minux.ma@gmail.com> wrote:\r\n> Where are the benchmarks?\r\n>\r\n> i wonder if we need a directory for these tiny-microbenchmarks.\r\n>\r\n> anyway, code LGTM.\r\n>\r\n> https://codereview.appspot.com/6813045/\r\n",
			"disapproval": false,
			"date": "2012-10-28 15:40:48.808300",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "what about test/bench/lang or test/bench/go?\r\n",
			"disapproval": false,
			"date": "2012-11-01 17:59:04.107920",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sadly this has no effect for %= or /= 2, but has a measurable improvement in compress/flate.\n\nbenchmark                           old ns/op    new ns/op    delta\nBenchmarkDecodeDigitsSpeed1e4         2861756      2840820   -0.73%\nBenchmarkDecodeDigitsSpeed1e5        26292730     26197200   -0.36%\nBenchmarkDecodeDigitsSpeed1e6       259539800    259570400   +0.01%\nBenchmarkDecodeDigitsDefault1e4       2728729      2710724   -0.66%\nBenchmarkDecodeDigitsDefault1e5      24051510     24052730   +0.01%\nBenchmarkDecodeDigitsDefault1e6     227258300    227645900   +0.17%\nBenchmarkDecodeDigitsCompress1e4      2728424      2712616   -0.58%\nBenchmarkDecodeDigitsCompress1e5     24063720     24092710   +0.12%\nBenchmarkDecodeDigitsCompress1e6    227371200    227502500   +0.06%\nBenchmarkDecodeTwainSpeed1e4          2878417      2947601   +2.40%\nBenchmarkDecodeTwainSpeed1e5         24406740     24468990   +0.26%\nBenchmarkDecodeTwainSpeed1e6        235943600    237316900   +0.58%\nBenchmarkDecodeTwainDefault1e4        2611877      2620423   +0.33%\nBenchmarkDecodeTwainDefault1e5       20188300     20327760   +0.69%\nBenchmarkDecodeTwainDefault1e6      190713500    192037900   +0.69%\nBenchmarkDecodeTwainCompress1e4       2617462      2621399   +0.15%\nBenchmarkDecodeTwainCompress1e5      20256040     20244140   -0.06%\nBenchmarkDecodeTwainCompress1e6     190042100    191656500   +0.85%\nBenchmarkEncodeDigitsSpeed1e4         7516480      7374328   -1.89%\nBenchmarkEncodeDigitsSpeed1e5        55678720     55574340   -0.19%\nBenchmarkEncodeDigitsSpeed1e6       544043000    544421400   +0.07%\nBenchmarkEncodeDigitsDefault1e4       9693300      9521180   -1.78%\nBenchmarkEncodeDigitsDefault1e5     194082600    193493700   -0.30%\nBenchmarkEncodeDigitsDefault1e6    2194061000   2174805000   -0.88%\nBenchmarkEncodeDigitsCompress1e4      9704435      9515840   -1.94%\nBenchmarkEncodeDigitsCompress1e5    193505900    193127400   -0.20%\nBenchmarkEncodeDigitsCompress1e6   2177703000   2165863000   -0.54%\nBenchmarkEncodeTwainSpeed1e4          7962345      7792355   -2.13%\nBenchmarkEncodeTwainSpeed1e5         47673340     47470700   -0.43%\nBenchmarkEncodeTwainSpeed1e6        448052800    447070200   -0.22%\nBenchmarkEncodeTwainDefault1e4       10758980     10570070   -1.76%\nBenchmarkEncodeTwainDefault1e5      161505200    159957900   -0.96%\nBenchmarkEncodeTwainDefault1e6     1707794000   1753449000   +2.67%\nBenchmarkEncodeTwainCompress1e4      10894470     10625310   -2.47%\nBenchmarkEncodeTwainCompress1e5     203689600    201068100   -1.29%\nBenchmarkEncodeTwainCompress1e6    2253602000   2227417000   -1.16%\n\nbenchmark                            old MB/s     new MB/s  speedup\nBenchmarkDecodeDigitsSpeed1e4            3.49         3.52    1.01x\nBenchmarkDecodeDigitsSpeed1e5            3.80         3.82    1.01x\nBenchmarkDecodeDigitsSpeed1e6            3.85         3.85    1.00x\nBenchmarkDecodeDigitsDefault1e4          3.66         3.69    1.01x\nBenchmarkDecodeDigitsDefault1e5          4.16         4.16    1.00x\nBenchmarkDecodeDigitsDefault1e6          4.40         4.39    1.00x\nBenchmarkDecodeDigitsCompress1e4         3.67         3.69    1.01x\nBenchmarkDecodeDigitsCompress1e5         4.16         4.15    1.00x\nBenchmarkDecodeDigitsCompress1e6         4.40         4.40    1.00x\nBenchmarkDecodeTwainSpeed1e4             3.47         3.39    0.98x\nBenchmarkDecodeTwainSpeed1e5             4.10         4.09    1.00x\nBenchmarkDecodeTwainSpeed1e6             4.24         4.21    0.99x\nBenchmarkDecodeTwainDefault1e4           3.83         3.82    1.00x\nBenchmarkDecodeTwainDefault1e5           4.95         4.92    0.99x\nBenchmarkDecodeTwainDefault1e6           5.24         5.21    0.99x\nBenchmarkDecodeTwainCompress1e4          3.82         3.81    1.00x\nBenchmarkDecodeTwainCompress1e5          4.94         4.94    1.00x\nBenchmarkDecodeTwainCompress1e6          5.26         5.22    0.99x\nBenchmarkEncodeDigitsSpeed1e4            1.33         1.36    1.02x\nBenchmarkEncodeDigitsSpeed1e5            1.80         1.80    1.00x\nBenchmarkEncodeDigitsSpeed1e6            1.84         1.84    1.00x\nBenchmarkEncodeDigitsDefault1e4          1.03         1.05    1.02x\nBenchmarkEncodeDigitsDefault1e5          0.52         0.52    1.00x\nBenchmarkEncodeDigitsDefault1e6          0.46         0.46    1.00x\nBenchmarkEncodeDigitsCompress1e4         1.03         1.05    1.02x\nBenchmarkEncodeDigitsCompress1e5         0.52         0.52    1.00x\nBenchmarkEncodeDigitsCompress1e6         0.46         0.46    1.00x\nBenchmarkEncodeTwainSpeed1e4             1.26         1.28    1.02x\nBenchmarkEncodeTwainSpeed1e5             2.10         2.11    1.00x\nBenchmarkEncodeTwainSpeed1e6             2.23         2.24    1.00x\nBenchmarkEncodeTwainDefault1e4           0.93         0.95    1.02x\nBenchmarkEncodeTwainDefault1e5           0.62         0.63    1.02x\nBenchmarkEncodeTwainDefault1e6           0.59         0.57    0.97x\nBenchmarkEncodeTwainCompress1e4          0.92         0.94    1.02x\nBenchmarkEncodeTwainCompress1e5          0.49         0.50    1.02x\nBenchmarkEncodeTwainCompress1e6          0.44         0.45    1.02x",
			"disapproval": false,
			"date": "2012-10-28 15:29:44.508350",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Where are the benchmarks?\n\ni wonder if we need a directory for these tiny-microbenchmarks.\n\nanyway, code LGTM.",
			"disapproval": false,
			"date": "2012-10-28 15:32:49.890740",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "r/minux/rsc: thank you for your suggestions on a benchmarking package, I will work on that in a separate CL.\n\nAre there any further comments on this CL ?",
			"disapproval": false,
			"date": "2012-11-02 12:29:54.668300",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=4b42ae32fac5 ***\n\ncmd/5g: improve shift code generation\n\nThis CL is a backport of 6012049 which improves code\ngeneration for shift operations.\n\nbenchmark       old ns/op    new ns/op    delta\nBenchmarkLSL            9            5  -49.67%\nBenchmarkLSR            9            4  -50.00%\n\nR=golang-dev, minux.ma, r, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6813045",
			"disapproval": false,
			"date": "2012-11-04 09:06:53.303270",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6813045/diff/1002/src/pkg/runtime/runtime_test.go\nFile src/pkg/runtime/runtime_test.go (right):\n\nhttp://codereview.appspot.com/6813045/diff/1002/src/pkg/runtime/runtime_test.go#newcode67\nsrc/pkg/runtime/runtime_test.go:67: func BenchmarkDiv2(b *testing.B) {\nthese do not belong here. they have nothing to do with the run time support.\nunder go/test/bench, or maybe somewhere near the compiler",
			"disapproval": false,
			"date": "2012-10-28 15:42:16.254760",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n",
			"disapproval": false,
			"date": "2012-11-02 20:21:05.554910",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> these do not belong here. they have nothing to do with the run time support.\n> under go/test/bench, or maybe somewhere near the compiler\n\nI agree, which was why I was hesitant to include them in the CL. Would go/test/bench/micro/*.go be an acceptable home for tests like these ?",
			"disapproval": false,
			"date": "2012-10-28 15:48:13.888620",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 6813045: cmd/5g: improve shift code generation",
	"created": "2012-10-28 15:23:32.202840",
	"patchsets": [
		1,
		4,
		2001,
		4001,
		1002,
		4006,
		5003,
		7002,
		1007,
		1009,
		5006
	],
	"modified": "2012-11-04 11:29:37.160140",
	"closed": true,
	"issue": 6813045
}