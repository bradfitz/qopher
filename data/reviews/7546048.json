{
	"description": "os/signal: add Stop, be careful about SIGHUP\n\nFixes issue 4268.\nFixes issue 4491.",
	"cc": [
		"golang-dev@googlegroups.com",
		"nightlyone@googlemail.com",
		"r@golang.org"
	],
	"reviewers": [
		"fullung@gmail.com",
		"dave@cheney.net"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "+guelfey, who had send the previous CL attacking this issue.\r\n\r\nNew API in this CL is os/signal's func Stop, used like so:\r\n\r\nc := make(chan os.Signal, 100)\r\n\r\nsignal.Notify(c, SIGHUP)\r\nsignal.Notify(c, SIGWINCH)\r\n... can read from c getting those signals as they arrive\r\n\r\nsignal.Stop(c)\r\n... no more signals will be sent on c\r\n",
			"disapproval": false,
			"date": "2013-03-14 21:21:26.376630",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2013-03-14 21:20:02.514860",
			"approval": false
		},
		{
			"sender": "nightlyone@googlemail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"nightlyone@googlemail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nJust some small nits. And a documentation request.\n\nhttps://codereview.appspot.com/7546048/diff/4013/src/pkg/os/signal/signal.go\nFile src/pkg/os/signal/signal.go (right):\n\nhttps://codereview.appspot.com/7546048/diff/4013/src/pkg/os/signal/signal.go#newcode84\nsrc/pkg/os/signal/signal.go:84: // When Stop returns, it is guaranteed that c will receive no more signals.\nPlease add:\n\"// If you need to stop only one signal, just use different signal channels for each.\"\n\nThis will make it easier for Unix users who like to mask signal sets. I only got that details by reading this change set :-)\n\nhttps://codereview.appspot.com/7546048/diff/4013/src/pkg/os/signal/signal_test.go\nFile src/pkg/os/signal/signal_test.go (right):\n\nhttps://codereview.appspot.com/7546048/diff/4013/src/pkg/os/signal/signal_test.go#newcode164\nsrc/pkg/os/signal/signal_test.go:164: // but a\nPlease finish this sentence.",
			"disapproval": false,
			"date": "2013-03-14 22:06:55.152480",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Mar 14, 2013 at 6:06 PM, <nightlyone@googlemail.com> wrote:\r\n\r\n> LGTM\r\n>\r\n> Just some small nits. And a documentation request.\r\n>\r\n> https://codereview.appspot.**com/7546048/diff/4013/src/pkg/**\r\n> os/signal/signal.go<https://codereview.appspot.com/7546048/diff/4013/src/pkg/os/signal/signal.go>\r\n> File src/pkg/os/signal/signal.go (right):\r\n>\r\n> https://codereview.appspot.**com/7546048/diff/4013/src/pkg/**\r\n> os/signal/signal.go#newcode84<https://codereview.appspot.com/7546048/diff/4013/src/pkg/os/signal/signal.go#newcode84>\r\n> src/pkg/os/signal/signal.go:**84: // When Stop returns, it is guaranteed\r\n> that c will receive no more signals.\r\n> Please add:\r\n> \"// If you need to stop only one signal, just use different signal\r\n> channels for each.\"\r\n>\r\n> This will make it easier for Unix users who like to mask signal sets. I\r\n> only got that details by reading this change set :-)\r\n>\r\n\r\nNothing here edits signal masks. Stop means only what the docs say. It is\r\nthe inverse of the Notify call.\r\n",
			"disapproval": false,
			"date": "2013-03-14 22:08:02.227880",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"nightlyone@googlemail.com",
				"fullung@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7546048/diff/4013/src/pkg/runtime/signal_unix.c\nFile src/pkg/runtime/signal_unix.c (right):\n\nhttps://codereview.appspot.com/7546048/diff/4013/src/pkg/runtime/signal_unix.c#newcode52\nsrc/pkg/runtime/signal_unix.c:52: if((t->flags & SigNotify) && !(t->flags & SigHandling)) {\ndon't know if this is the right time and place, but valgrind wants something special wrt SIGRT32\n\nhttps://code.google.com/p/go/issues/detail?id=782#c14",
			"disapproval": false,
			"date": "2013-03-14 23:10:10.665070",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"nightlyone@googlemail.com",
				"fullung@gmail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-03-14 23:16:41.950850",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Albert, can you elaborate about SIGRT32? I'll defer any changes to a future\r\nCL but I want to understand what you mean.\r\n\r\nThanks.\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-03-15 03:47:53.301310",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"nightlyone@googlemail.com",
				"fullung@gmail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=61448c93c40d ***\n\nos/signal: add Stop, be careful about SIGHUP\n\nFixes issue 4268.\nFixes issue 4491.\n\nR=golang-dev, nightlyone, fullung, r\nCC=golang-dev\nhttps://codereview.appspot.com/7546048",
			"disapproval": false,
			"date": "2013-03-15 04:00:08.334940",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"nightlyone@googlemail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/15 03:47:53, rsc wrote:\n> Albert, can you elaborate about SIGRT32? I'll defer any changes to a future\n> CL but I want to understand what you mean.\n\nAs I understand it:\n\nValgrind uses the SIGRT32 for internally for something.\n\nA program running under Valgrind that calls sigaction for SIGRT32 causes Valgrind to print:\n\n==6081== Warning: ignored attempt to set SIGRT32 handler in sigaction();\n==6081==          the SIGRT32 signal is used internally by Valgrind\n\nAs part of this, Valgrind intercepts the call to sigaction for SIGRT32 and causes the call to return an error.\n\nIn runtime\u00b7setsig on Linux, the code is:\n\nif(runtime\u00b7rt_sigaction(i, &sa, nil, sizeof(sa.sa_mask)) != 0)\n    runtime\u00b7throw(\"rt_sigaction failure\");\n\nThus, running a Go binary under Valgrind causes it to panic with:\n\nrt_sigaction failure\n\nNot quite sure what the best fix is.\n\nMaybe there is a way to detect that you are running under Valgrind and allow sigaction to fail for SIGRT32 in that case.\n\nMaybe you should always ignore errors from sigaction for SIGRT32.\n\nMaybe Go should leave SIGRT32 alone completely. Not quite sure what it's supposed to be used for when Valgrind is not in the picture.",
			"disapproval": false,
			"date": "2013-03-15 05:40:17.203610",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Maybe Go should leave SIGRT32 alone completely. Not quite sure what it's\r\n> supposed to be used for when Valgrind is not in the picture.\r\n\r\nCan we try this first as a compromise ?\r\n",
			"disapproval": false,
			"date": "2013-03-15 05:44:47.907310",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"fullung@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"nightlyone@googlemail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/15 04:00:08, rsc wrote:\n> *** Submitted as https://code.google.com/p/go/source/detail?r=61448c93c40d ***\n> os/signal: add Stop, be careful about SIGHUP\n> Fixes issue 4268.\n> Fixes issue 4491.\n\ngo version devel +5957d9d08900 Fri Mar 15 09:03:45 2013 +0100 linux/amd64\n\n--- FAIL: TestNohup-24 (0.11 seconds)\nsignal_test.go:186: ran test with -send_uncaught_sighup=1 and it succeeded: expected failure.\n\nOutput:\nPASS\n\nFAIL\nFAIL\tos/signal\t0.350s",
			"disapproval": false,
			"date": "2013-03-15 09:45:55.467330",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"fullung@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"nightlyone@googlemail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/15 09:45:55, albert.strasheim wrote:\n> On 2013/03/15 04:00:08, rsc wrote:\n> > *** Submitted as https://code.google.com/p/go/source/detail?r=61448c93c40d ***\n> > os/signal: add Stop, be careful about SIGHUP\n> > Fixes issue 4268.\n> > Fixes issue 4491.\n> go version devel +5957d9d08900 Fri Mar 15 09:03:45 2013 +0100 linux/amd64\n> --- FAIL: TestNohup-24 (0.11 seconds)\n> signal_test.go:186: ran test with -send_uncaught_sighup=1 and it succeeded:\n> expected failure.\n> Output:\n> PASS\n> FAIL\n> FAIL\tos/signal\t0.350s\n\nAlso saw this:\n\n10 milliseconds didn't quite do it...\n\n--- FAIL: TestSignal-4 (0.00 seconds)\nsignal_test.go:39: sighup...\nsignal_test.go:48: sigwinch...\nsignal_test.go:25: signal was child exited, want window changed\n\nI'm not sure if this is issue 4987 again or something new.",
			"disapproval": false,
			"date": "2013-03-15 11:24:58.556430",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"fullung@gmail.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"nightlyone@googlemail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/15 09:45:55, albert.strasheim wrote:\n> On 2013/03/15 04:00:08, rsc wrote:\n> > *** Submitted as https://code.google.com/p/go/source/detail?r=61448c93c40d ***\n> > os/signal: add Stop, be careful about SIGHUP\n> > Fixes issue 4268.\n> > Fixes issue 4491.\n> go version devel +5957d9d08900 Fri Mar 15 09:03:45 2013 +0100 linux/amd64\n> --- FAIL: TestNohup-24 (0.11 seconds)\n> signal_test.go:186: ran test with -send_uncaught_sighup=1 and it succeeded:\n> expected failure.\n> Output:\n> PASS\n> FAIL\n> FAIL\tos/signal\t0.350s\n\nAlso saw this:\n\n10 milliseconds didn't quite do it...\n\n--- FAIL: TestSignal-4 (0.00 seconds)\nsignal_test.go:39: sighup...\nsignal_test.go:48: sigwinch...\nsignal_test.go:25: signal was child exited, want window changed\n\nI'm not sure if this is issue 4987 again or something new.",
			"disapproval": false,
			"date": "2013-03-15 11:24:58.883390",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Mar 15, 2013 at 5:45 AM, <fullung@gmail.com> wrote:\r\n\r\n> --- FAIL: TestNohup-24 (0.11 seconds)\r\n> signal_test.go:186: ran test with -send_uncaught_sighup=1 and it\r\n> succeeded: expected failure.\r\n>\r\n\r\nThis is just the test being racy. So is TestSignal's flakiness. I am\r\ninclined to disable them when the number of procs is >1.\r\nThere's no point in trying to fix the races. The single-threaded case shows\r\nthat the logic is all correct. The flakiness comes from other cpus delaying\r\nsignal delivery. And I don't want to just put a bunch of long sleeps in.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-03-15 15:34:32.660340",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 7546048: os/signal: add Stop, be careful about SIGHUP",
	"created": "2013-03-14 21:10:42.132050",
	"patchsets": [
		1,
		2001,
		4013,
		16001
	],
	"modified": "2013-03-15 11:24:58.939470",
	"closed": true,
	"issue": 7546048
}