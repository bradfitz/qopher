{
	"description": "Add support for reading in the ELF program headers\nThis fairly simple change adds in support for reading\nELF program headers. I tried to follow the rules of the\nsection headers, e.g. promoting 32 to 64 int in the\nstruct, and so on. I've tested this against ELF files\nand it seems to be right.\n\nI ran gofmt on both files.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rminnich@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rminnich@gmail.com",
			"recipients": [
				"rminnich@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, rminnich),\n\nI'd like you to review this change.",
			"disapproval": false,
			"date": "2010-06-28 00:49:35.345795",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rminnich@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"rminnich@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "TestOpen in file_test.go should be expanded to test that program headers are read correctly.\n\nhttp://codereview.appspot.com/1676048/diff/2001/3001\nFile src/pkg/debug/elf/file.go (right):\n\nhttp://codereview.appspot.com/1676048/diff/2001/3001#newcode90\nsrc/pkg/debug/elf/file.go:90: Off    uint64\nI think this should move up to after Flags to correspond to the ordering of the ELF struct.\n\nhttp://codereview.appspot.com/1676048/diff/2001/3001#newcode254\nsrc/pkg/debug/elf/file.go:254: fmt.Printf(\"phentsize %d phnum %d phoff %d\\n\", phentsize, phnum, phoff)\nRemove Printf.",
			"disapproval": false,
			"date": "2010-06-28 18:43:15.621489",
			"approval": false
		},
		{
			"sender": "rminnich@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Jun 28, 2010 at 11:43 AM,  <iant@golang.org> wrote:\n> TestOpen in file_test.go should be expanded to test that program headers\n> are read correctly.\n\nQuestion: I can fix this test for linux, but don't have access to the\nother systems that it can test on.\n\nWill it be impossible to take my patch until the test is expanded?\n\nThanks for the review.\n\nRon\n",
			"disapproval": false,
			"date": "2010-06-28 21:40:25.135633",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> Question: I can fix this test for linux, but don't have access to the\n> other systems that it can test on.\n>\n> Will it be impossible to take my patch until the test is expanded?\n\nNo, because there's nothing operating system-specific\nin this package.\n\nRuss\n",
			"disapproval": false,
			"date": "2010-06-28 22:56:36.089459",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rminnich@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"rminnich@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "> Question: I can fix this test for linux, but don't have access to the\n> other systems that it can test on.\n\nLook at the test code.  It runs on files which are provided in the testdata directory.\n\nIan",
			"disapproval": false,
			"date": "2010-06-28 23:16:58.839089",
			"approval": false
		},
		{
			"sender": "rminnich@gmail.com",
			"recipients": [
				"rminnich@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, iant (cc: golang-dev@googlegroups.com, rminnich),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-06-30 23:57:51.196359",
			"approval": false
		},
		{
			"sender": "rminnich@gmail.com",
			"recipients": [
				"rminnich@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, iant (cc: golang-dev@googlegroups.com, rminnich),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-07-06 00:16:03.699998",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rminnich@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"rminnich@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/1676048/diff/12002/1002\nFile src/pkg/debug/elf/file.go (right):\n\nhttp://codereview.appspot.com/1676048/diff/12002/1002#newcode305\nsrc/pkg/debug/elf/file.go:305: f.Libs[0] = string(name)\nThis is the interpreter, not a dynamic library.  I'm not sure we need to gather this information, but if we do it should go in a field by itself, not in the f.Libs slice.\n\nhttp://codereview.appspot.com/1676048/diff/12002/1002#newcode372\nsrc/pkg/debug/elf/file.go:372: dynstrndx = i\nI'm not sure we should be gathering the library information at all here.  But if we do, this is the wrong approach.  Instead, this code should use the PT_DYNAMIC program header to find the dynamic tags, and it should use DT_STRTAB dynamic tag to find the string table.\n\nIt may be simplest to drop this part from the change and get this change in.  Then we can discuss whether to pick up the library information here or whether to provide a different call for it.\n\nhttp://codereview.appspot.com/1676048/diff/12002/1003\nFile src/pkg/debug/elf/file_test.go (right):\n\nhttp://codereview.appspot.com/1676048/diff/12002/1003#newcode119\nsrc/pkg/debug/elf/file_test.go:119: ProgHeader{PT_LOOS + 74769744 /*PT_GNU_EH_FRAME*/ , PF_R, 0x5b8, 0x4005b8, 0x4005b8, 0x24, 0x24, 4},\nWrite PT_LOOS + 0x474e550 and PT_LOOS + 0x474e551.  These magic numbers are 'GNU' << 4 + {0,1}.",
			"disapproval": false,
			"date": "2010-07-10 21:03:12.110820",
			"approval": false
		},
		{
			"sender": "rminnich@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Sat, Jul 10, 2010 at 2:03 PM,  <iant@golang.org> wrote:\n>\n> http://codereview.appspot.com/1676048/diff/12002/1002\n> File src/pkg/debug/elf/file.go (right):\n>\n> http://codereview.appspot.com/1676048/diff/12002/1002#newcode305\n> src/pkg/debug/elf/file.go:305: f.Libs[0] = string(name)\n> This is the interpreter, not a dynamic library. \u00a0I'm not sure we need to\n> gather this information, but if we do it should go in a field by itself,\n> not in the f.Libs slice.\n>\n> http://codereview.appspot.com/1676048/diff/12002/1002#newcode372\n> src/pkg/debug/elf/file.go:372: dynstrndx = i\n> I'm not sure we should be gathering the library information at all here.\n> \u00a0But if we do, this is the wrong approach. \u00a0Instead, this code should\n> use the PT_DYNAMIC program header to find the dynamic tags, and it\n> should use DT_STRTAB dynamic tag to find the string table.\n>\n> It may be simplest to drop this part from the change and get this change\n> in. \u00a0Then we can discuss whether to pick up the library information here\n> or whether to provide a different call for it.\n\n\n\nunderstand. I'll yank the libs stuff out. I'm using it currently but\nI'll find a different way to get it -- I may temporarily fork off this\nelf code.\n\nTo put it in context, I need an 'ldd function' and the way this code\nworks is borrowed from Lucho's xcpu implementation.\n\nron\n",
			"disapproval": false,
			"date": "2010-07-10 23:30:44.204713",
			"approval": false
		},
		{
			"sender": "rminnich@gmail.com",
			"recipients": [
				"rminnich@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, iant (cc: golang-dev@googlegroups.com, rminnich),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-07-12 17:28:56.116391",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rminnich@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"rminnich@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nHave you signed the copyright CLA?",
			"disapproval": false,
			"date": "2010-07-12 20:39:46.661306",
			"approval": true
		},
		{
			"sender": "rminnich@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Jul 12, 2010 at 1:39 PM,  <iant@golang.org> wrote:\n> LGTM\n>\n> Have you signed the copyright CLA?\n\nIt's in the hands of our corporate legal guys, I am going to push again.\n\nron\n",
			"disapproval": false,
			"date": "2010-07-12 21:20:54.511340",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"rminnich@gmail.com",
				"golang-dev@googlegroups.com",
				"rminnich@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "timed out",
			"disapproval": false,
			"date": "2010-11-01 18:45:00.496011",
			"approval": false
		}
	],
	"owner_email": "rminnich@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "rminnich",
	"subject": "code review 1676048: Add support for reading in the ELF program headers",
	"created": "2010-06-28 00:48:53.553246",
	"patchsets": [
		1,
		2001,
		11001,
		12002,
		22001
	],
	"modified": "2010-11-01 18:45:00.496011",
	"closed": false,
	"issue": 1676048
}