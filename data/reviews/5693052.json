{
	"description": "cmd/cc: grow some global arrays\n\nAvoids global array buffer overflows if they are\nindexed using some of the values between NTYPE\nand NALLTYPE.  It is entirely likely that not all of these\nare necessary, but this is the C compiler and not worth\nworrying much about.  This change takes up only a\nfew more bytes of memory and makes the behavior\ndeterministic.\n\nFixes issue 3078.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-24 00:45:48.551490",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn Fri, Feb 24, 2012 at 11:45 AM, <rsc@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> cmd/cc: grow some global arrays\n>\n> Avoids global array buffer overflows if they are\n> indexed using some of the values between NTYPE\n> and NALLTYPE.  It is entirely likely that not all of these\n> are necessary, but this is the C compiler and not worth\n> worrying much about.  This change takes up only a\n> few more bytes of memory and makes the behavior\n> deterministic.\n>\n> Fixes issue 3078.\n>\n> Please review this at http://codereview.appspot.com/**5693052/<http://codereview.appspot.com/5693052/>\n>\n> Affected files:\n>  M src/cmd/cc/cc.h\n>  M src/cmd/cc/com64.c\n>  M src/cmd/cc/funct.c\n>  M src/cmd/cc/sub.c\n>\n>\n> Index: src/cmd/cc/cc.h\n> ==============================**==============================**=======\n> --- a/src/cmd/cc/cc.h\n> +++ b/src/cmd/cc/cc.h\n> @@ -517,8 +517,8 @@\n>  EXTERN char*   thestring;\n>  EXTERN Type*   thisfn;\n>  EXTERN int32   thunk;\n> -EXTERN Type*   types[NTYPE];\n> -EXTERN Type*   fntypes[NTYPE];\n> +EXTERN Type*   types[NALLTYPE];\n> +EXTERN Type*   fntypes[NALLTYPE];\n>  EXTERN Node*   initlist;\n>  EXTERN Term    term[NTERM];\n>  EXTERN int     nterm;\n> Index: src/cmd/cc/com64.c\n> ==============================**==============================**=======\n> --- a/src/cmd/cc/com64.c\n> +++ b/src/cmd/cc/com64.c\n> @@ -96,7 +96,7 @@\n>\n>  Node*  nodvasop;\n>\n> -char   etconv[NTYPE];  /* for _vasop */\n> +char   etconv[NALLTYPE];       /* for _vasop */\n>  Init   initetconv[] =\n>  {\n>        TCHAR,          1,      0,\n> Index: src/cmd/cc/funct.c\n> ==============================**==============================**=======\n> --- a/src/cmd/cc/funct.c\n> +++ b/src/cmd/cc/funct.c\n> @@ -46,7 +46,7 @@\n>  };\n>\n>  Ftab   ftabinit[OEND];\n> -Gtab   gtabinit[NTYPE];\n> +Gtab   gtabinit[NALLTYPE];\n>\n>  int\n>  isfunct(Node *n)\n> @@ -350,7 +350,7 @@\n>        diag(Z, \"dclfunct bad %T %s\\n\", t, s->name);\n>  }\n>\n> -Gtab   gtabinit[NTYPE] =\n> +Gtab   gtabinit[NALLTYPE] =\n>  {\n>        TCHAR,          \"c\",\n>        TUCHAR,         \"uc\",\n> Index: src/cmd/cc/sub.c\n> ==============================**==============================**=======\n> --- a/src/cmd/cc/sub.c\n> +++ b/src/cmd/cc/sub.c\n> @@ -1538,92 +1538,92 @@\n>        OEQ, ONE, OLS, OLS, OLO, OLO, OHS, OHS, OHI, OHI,\n>  };\n>\n> -uchar  typei[NTYPE];\n> +uchar  typei[NALLTYPE];\n>  int    typeiinit[] =\n>  {\n>        TCHAR, TUCHAR, TSHORT, TUSHORT, TINT, TUINT, TLONG, TULONG, TVLONG,\n> TUVLONG, -1,\n>  };\n> -uchar  typeu[NTYPE];\n> +uchar  typeu[NALLTYPE];\n>  int    typeuinit[] =\n>  {\n>        TUCHAR, TUSHORT, TUINT, TULONG, TUVLONG, TIND, -1,\n>  };\n>\n> -uchar  typesuv[NTYPE];\n> +uchar  typesuv[NALLTYPE];\n>  int    typesuvinit[] =\n>  {\n>        TVLONG, TUVLONG, TSTRUCT, TUNION, -1,\n>  };\n>\n> -uchar  typeilp[NTYPE];\n> +uchar  typeilp[NALLTYPE];\n>  int    typeilpinit[] =\n>  {\n>        TINT, TUINT, TLONG, TULONG, TIND, -1\n>  };\n>\n> -uchar  typechl[NTYPE];\n> -uchar  typechlv[NTYPE];\n> -uchar  typechlvp[NTYPE];\n> +uchar  typechl[NALLTYPE];\n> +uchar  typechlv[NALLTYPE];\n> +uchar  typechlvp[NALLTYPE];\n>  int    typechlinit[] =\n>  {\n>        TCHAR, TUCHAR, TSHORT, TUSHORT, TINT, TUINT, TLONG, TULONG, -1,\n>  };\n>\n> -uchar  typechlp[NTYPE];\n> +uchar  typechlp[NALLTYPE];\n>  int    typechlpinit[] =\n>  {\n>        TCHAR, TUCHAR, TSHORT, TUSHORT, TINT, TUINT, TLONG, TULONG, TIND,\n> -1,\n>  };\n>\n> -uchar  typechlpfd[NTYPE];\n> +uchar  typechlpfd[NALLTYPE];\n>  int    typechlpfdinit[] =\n>  {\n>        TCHAR, TUCHAR, TSHORT, TUSHORT, TINT, TUINT, TLONG, TULONG, TFLOAT,\n> TDOUBLE, TIND, -1,\n>  };\n>\n> -uchar  typec[NTYPE];\n> +uchar  typec[NALLTYPE];\n>  int    typecinit[] =\n>  {\n>        TCHAR, TUCHAR, -1\n>  };\n>\n> -uchar  typeh[NTYPE];\n> +uchar  typeh[NALLTYPE];\n>  int    typehinit[] =\n>  {\n>        TSHORT, TUSHORT, -1,\n>  };\n>\n> -uchar  typeil[NTYPE];\n> +uchar  typeil[NALLTYPE];\n>  int    typeilinit[] =\n>  {\n>        TINT, TUINT, TLONG, TULONG, -1,\n>  };\n>\n> -uchar  typev[NTYPE];\n> +uchar  typev[NALLTYPE];\n>  int    typevinit[] =\n>  {\n>        TVLONG, TUVLONG, -1,\n>  };\n>\n> -uchar  typefd[NTYPE];\n> +uchar  typefd[NALLTYPE];\n>  int    typefdinit[] =\n>  {\n>        TFLOAT, TDOUBLE, -1,\n>  };\n>\n> -uchar  typeaf[NTYPE];\n> +uchar  typeaf[NALLTYPE];\n>  int    typeafinit[] =\n>  {\n>        TFUNC, TARRAY, -1,\n>  };\n>\n> -uchar  typesu[NTYPE];\n> +uchar  typesu[NALLTYPE];\n>  int    typesuinit[] =\n>  {\n>        TSTRUCT, TUNION, -1,\n>  };\n>\n> -int32  tasign[NTYPE];\n> +int32  tasign[NALLTYPE];\n>  Init   tasigninit[] =\n>  {\n>        TCHAR,          BNUMBER,        0,\n> @@ -1644,7 +1644,7 @@\n>        -1,             0,              0,\n>  };\n>\n> -int32  tasadd[NTYPE];\n> +int32  tasadd[NALLTYPE];\n>  Init   tasaddinit[] =\n>  {\n>        TCHAR,          BNUMBER,        0,\n> @@ -1663,7 +1663,7 @@\n>        -1,             0,              0,\n>  };\n>\n> -int32  tcast[NTYPE];\n> +int32  tcast[NALLTYPE];\n>  Init   tcastinit[] =\n>  {\n>        TCHAR,          BNUMBER|BIND|BVOID,     0,\n> @@ -1685,7 +1685,7 @@\n>        -1,             0,                      0,\n>  };\n>\n> -int32  tadd[NTYPE];\n> +int32  tadd[NALLTYPE];\n>  Init   taddinit[] =\n>  {\n>        TCHAR,          BNUMBER|BIND,   0,\n> @@ -1704,7 +1704,7 @@\n>        -1,             0,              0,\n>  };\n>\n> -int32  tsub[NTYPE];\n> +int32  tsub[NALLTYPE];\n>  Init   tsubinit[] =\n>  {\n>        TCHAR,          BNUMBER,        0,\n> @@ -1723,7 +1723,7 @@\n>        -1,             0,              0,\n>  };\n>\n> -int32  tmul[NTYPE];\n> +int32  tmul[NALLTYPE];\n>  Init   tmulinit[] =\n>  {\n>        TCHAR,          BNUMBER,        0,\n> @@ -1741,7 +1741,7 @@\n>        -1,             0,              0,\n>  };\n>\n> -int32  tand[NTYPE];\n> +int32  tand[NALLTYPE];\n>  Init   tandinit[] =\n>  {\n>        TCHAR,          BINTEGER,       0,\n> @@ -1757,7 +1757,7 @@\n>        -1,             0,              0,\n>  };\n>\n> -int32  trel[NTYPE];\n> +int32  trel[NALLTYPE];\n>  Init   trelinit[] =\n>  {\n>        TCHAR,          BNUMBER,        0,\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-02-24 00:47:11.772884",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=7263bfdac502 ***\n\ncmd/cc: grow some global arrays\n\nAvoids global array buffer overflows if they are\nindexed using some of the values between NTYPE\nand NALLTYPE.  It is entirely likely that not all of these\nare necessary, but this is the C compiler and not worth\nworrying much about.  This change takes up only a\nfew more bytes of memory and makes the behavior\ndeterministic.\n\nFixes issue 3078.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5693052",
			"disapproval": false,
			"date": "2012-02-24 03:45:59.220416",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5693052: cmd/cc: grow some global arrays",
	"created": "2012-02-24 00:45:33.417599",
	"patchsets": [
		1,
		3,
		3001,
		5001
	],
	"modified": "2012-02-24 03:46:00.071302",
	"closed": true,
	"issue": 5693052
}