{
	"description": "json: use strconv.Append variants to avoid allocations in encoding\n\nBefore/after, best of 3:\njson.BenchmarkCodeEncoder  10  183495300 ns/op  10.58 MB/s\n->\njson.BenchmarkCodeEncoder  10  133025100 ns/op  14.59 MB/s\n\nBut don't get too excited about this.  These benchmarks, while\nstable at any point of time, fluctuate wildly with any line of\ncode added or removed anywhere in the path due to stack splitting\nissues.\n\nIt's currently much faster, though, and this is the API that\ndoesn't allocate so should always be faster in theory.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dsymonds@golang.org",
		"rsc@golang.org",
		"r@golang.org",
		"gri@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-18 12:27:20.218383",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Consider this a feeler CL.\n\nI didn't write docs but you can imagine what they'd look like.\n\nIt seems faster:\n\nBefore:\njson.BenchmarkCodeEncoder      10 180316800 ns/op  10.76 MB/s\njson.BenchmarkCodeMarshal      10 179345300 ns/op  10.82 MB/s\njson.BenchmarkCodeDecoder       5 407458600 ns/op   4.76 MB/s\njson.BenchmarkCodeUnmarshal       5 416217800 ns/op   4.66 MB/s\njson.BenchmarkCodeUnmarshalReuse       5 398989600 ns/op   4.86 MB/s\njson.BenchmarkSkipValue      50  26343100 ns/op  74.54 MB/s\n\nAfter:\njson.BenchmarkCodeEncoder      10 162934200 ns/op  11.91 MB/s\njson.BenchmarkCodeMarshal      10 174220200 ns/op  11.14 MB/s\njson.BenchmarkCodeDecoder       5 400059600 ns/op   4.85 MB/s\njson.BenchmarkCodeUnmarshal       5 408517800 ns/op   4.75 MB/s\njson.BenchmarkCodeUnmarshalReuse       5 396427400 ns/op   4.89 MB/s\njson.BenchmarkSkipValue      50  27184340 ns/op  72.23 MB/s\n\n\n\nOn Fri, Nov 18, 2011 at 4:27 AM, <bradfitz@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> strconv: add Ftoa appending variants, to minimize allocations\n>\n> Update json to use it.\n>\n> Please review this at http://codereview.appspot.com/**5411052/<http://codereview.appspot.com/5411052/>\n>\n> Affected files:\n>  M src/pkg/encoding/json/encode.**go\n>  M src/pkg/strconv/ftoa.go\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-11-18 12:29:35.475137",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "You say there are fewer allocations. Is there a benchmark to demonstrate that?\n",
			"disapproval": false,
			"date": "2011-11-18 12:51:55.696282",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for trying this.  It is not as much faster\nas I had expected.  Can you try running\n\ngotest -bench=CodeEncoder -cpuprofile x.prof\ngopprof 6.out x.prof\ntop10\nweb\nwhatever\n\nand see where the time is going?  This will only\nwork on Linux, not on a Mac.\n\nThanks.\nRuss\n",
			"disapproval": false,
			"date": "2011-11-18 13:36:38.930767",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "There is not.  But I just added some printlns to BenchmarkEncoder before &\nafter the loop, and it looks like 15% fewer allocations now.\n\nOn Fri, Nov 18, 2011 at 4:51 AM, David Symonds <dsymonds@golang.org> wrote:\n\n> You say there are fewer allocations. Is there a benchmark to demonstrate\n> that?\n>\n",
			"disapproval": false,
			"date": "2011-11-18 13:08:13.513517",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-21 16:10:33.730420",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Nov 18, 2011 at 5:36 AM, Russ Cox <rsc@golang.org> wrote:\n\n> Thanks for trying this.  It is not as much faster\n> as I had expected.  Can you try running\n>\n> gotest -bench=CodeEncoder -cpuprofile x.prof\n> gopprof 6.out x.prof\n>\n\n$ gotest -benchtime=5 -test.run=XXX -test.bench=CodeEncoder -cpuprofile\nbefore.prof\nrm -f _test/encoding/json.a\n6g   -p encoding/json -o _gotest_.6 decode.go encode.go indent.go\nscanner.go stream.go tags.go  bench_test.go decode_test.go encode_test.go\nscanner_test.go stream_test.go tagkey_test.go tags_test.go\nrm -f _test/encoding/json.a\ngopack grc _test/encoding/json.a _gotest_.6\nPASS\njson.BenchmarkCodeEncoder mallocs: 241281\nmallocs: 12062825\n      50 183478840 ns/op  10.58 MB/s\n\n(pprof) top20\nTotal: 1000 samples\n     128  12.8%  12.8%      129  12.9% strconv.rightShift\n      59   5.9%  18.7%       97   9.7% strconv.Uitob64\n      57   5.7%  24.4%       57   5.7% runtime.memmove\n      52   5.2%  29.6%      860  86.0%\nencoding/json.(*encodeState).reflectValueQuoted\n      45   4.5%  34.1%      106  10.6% reflect.StructTag.Get\n      37   3.7%  37.8%       37   3.7% strings.Index\n      29   2.9%  40.7%       37   3.7% itab\n      29   2.9%  43.6%       32   3.2% strconv.(*decimal).Assign\n      26   2.6%  46.2%      141  14.1% strconv.roundShortest\n      20   2.0%  48.2%       20   2.0% bytes.(*Buffer).Len\n      20   2.0%  50.2%      118  11.8% runtime.mallocgc\n      19   1.9%  52.1%       40   4.0% bytes.(*Buffer).WriteByte\n      18   1.8%  53.9%       35   3.5% bytes.(*Buffer).grow\n      18   1.8%  55.7%       72   7.2% encoding/json.(*encodeState).string\n      16   1.6%  57.3%       18   1.8% MCentral_Alloc\n      15   1.5%  58.8%       40   4.0% runtime.MCache_Alloc\n      14   1.4%  60.2%       51   5.1% bytes.(*Buffer).WriteString\n      14   1.4%  61.6%       72   7.2% strconv.fmtF\n      13   1.3%  62.9%       73   7.3% reflect.(*structType).Field\n      13   1.3%  64.2%       58   5.8% runtime.growslice\n\n\n\n$ gotest -benchtime=5 -test.run=XXX -test.bench=CodeEncoder -cpuprofile\nafter.prof\nrm -f _test/encoding/json.a\nrm -f _test/encoding/json.a\ngopack grc _test/encoding/json.a _gotest_.6\nPASS\njson.BenchmarkCodeEncoder mallocs: 153679\nmallocs: 7682969\n      50 173888940 ns/op  11.16 MB/s\n\n(pprof) top20\nTotal: 950 samples\n     156  16.4%  16.4%      159  16.7% strconv.rightShift\n      47   4.9%  21.4%       48   5.1% strconv.(*decimal).Assign\n      42   4.4%  25.8%      808  85.1%\nencoding/json.(*encodeState).reflectValueQuoted\n      41   4.3%  30.1%       92   9.7% strconv.Uitob64\n      39   4.1%  34.2%       39   4.1% runtime.memmove\n      38   4.0%  38.2%      108  11.4% reflect.StructTag.Get\n      37   3.9%  42.1%       37   3.9% strings.Index\n      30   3.2%  45.3%       37   3.9% itab\n      28   2.9%  48.2%      168  17.7% strconv.roundShortest\n      27   2.8%  51.1%       77   8.1% encoding/json.(*encodeState).string\n      21   2.2%  53.3%       78   8.2% runtime.mallocgc\n      17   1.8%  55.1%       29   3.1% bytes.(*Buffer).grow\n      17   1.8%  56.8%       37   3.9% runtime.newstack\n      15   1.6%  58.4%       28   2.9% reflect.valueInterface\n      13   1.4%  59.8%       36   3.8% bytes.(*Buffer).WriteByte\n      13   1.4%  61.2%       13   1.4% runtime.stringiter2\n      13   1.4%  62.5%       48   5.1% strconv.Unquote\n      12   1.3%  63.8%       30   3.2% runtime.oldstack\n      12   1.3%  65.1%       12   1.3% runtime.slicestring\n      12   1.3%  66.3%       12   1.3% unicode.IsLetter\n\n\n\njust caching the StructTag value in the encoder state,without ftoa,\n\n      50 173594020 ns/op  11.18 MB/s\n\nTotal: 950 samples\n     162  17.1%  17.1%      167  17.6% strconv.rightShift\n      52   5.5%  22.5%       52   5.5% runtime.memmove\n      49   5.2%  27.7%      819  86.2%\nencoding/json.(*encodeState).reflectValueQuoted\n      34   3.6%  31.3%       61   6.4% strconv.Uitob64\n      32   3.4%  34.6%       33   3.5% strconv.(*decimal).Assign\n      29   3.1%  37.7%       76   8.0% encoding/json.(*encodeState).string\n      29   3.1%  40.7%      137  14.4% runtime.mallocgc\n      26   2.7%  43.5%       52   5.5% runtime.MCache_Alloc\n      25   2.6%  46.1%      158  16.6% strconv.roundShortest\n      22   2.3%  48.4%       24   2.5% itab\n      21   2.2%  50.6%       34   3.6% bytes.(*Buffer).WriteByte\n      21   2.2%  52.8%       21   2.2% memhash\n      17   1.8%  54.6%       26   2.7% runtime.newstack\n      16   1.7%  56.3%       75   7.9% strconv.fmtF\n      15   1.6%  57.9%      319  33.6% strconv.genericFtoa\n      14   1.5%  59.4%       38   4.0% hash_lookup\n      14   1.5%  60.8%       14   1.5% runtime.stringiter2\n      13   1.4%  62.2%       16   1.7% MCentral_Alloc\n      13   1.4%  63.6%       30   3.2% encoding/json.isValidTag\n      12   1.3%  64.8%       12   1.3% strings.Index\n\n\nI could do Itoa / Uitob64 also, and fix up a few other thing in the\nencoder.  The web svg mode is very helpful.  Unfortunately I kept them all\nup in my browser but gopprof deleted them from /tmp and Chrome won't let me\nsave them back to disk, so I can't attach.\n",
			"disapproval": false,
			"date": "2011-11-18 14:34:36.661064",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Try with -run=xxx to avoid running the tests?\nThe profile says that reflect.Value.MapKeys is getting\ncalled, but I don't see why it would be, except\nif the tests were taking a significant part of the\nruntime.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-21 16:48:29.565287",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I thought I already ran with -run=xxx (I normally do), but I guess not.\n\nAttached.\n\n\nOn Mon, Nov 21, 2011 at 11:48 AM, Russ Cox <rsc@golang.org> wrote:\n\n> Try with -run=xxx to avoid running the tests?\n> The profile says that reflect.Value.MapKeys is getting\n> called, but I don't see why it would be, except\n> if the tests were taking a significant part of the\n> runtime.\n>\n> Russ\n>\n",
			"disapproval": false,
			"date": "2011-11-21 18:04:43.310005",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-21 18:17:56.351810",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Russ,\n\nThoughts on this one?\n\nI'm not sure how big of a speed-up you were hoping for, but:\n\nBefore/after:\njson.BenchmarkCodeEncoder  100  127088880 ns/op  15.27 MB/s\njson.BenchmarkCodeEncoder  100  114246610 ns/op  16.98 MB/s\n\nNot bad.\n\nbefore/after svg attached, with 5 second benchtime.  I have the before &\nafter 6.out & .prof files too, if you want them.\n\n\nOn Mon, Nov 21, 2011 at 11:10 AM, <bradfitz@golang.org> wrote:\n\n> Hello golang-dev@googlegroups.com, dsymonds@golang.org, rsc@golang.org\n> (cc: golang-dev@googlegroups.com),\n>\n> Please take another look.\n>\n>\n> http://codereview.appspot.com/**5411052/<http://codereview.appspot.com/5411052/>\n>\n",
			"disapproval": false,
			"date": "2011-11-21 16:14:17.762421",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Faster with special-casing division by 10:\n\nbefore:\njson.BenchmarkCodeEncoder  100  127088880 ns/op  15.27 MB/s\nthen:\njson.BenchmarkCodeEncoder  100  114246610 ns/op  16.98 MB/s\ndivide by 10 case:\njson.BenchmarkCodeEncoder     100 108893550 ns/op  17.82 MB/s\n\n\n\nOn Mon, Nov 21, 2011 at 1:04 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\n\n> I thought I already ran with -run=xxx (I normally do), but I guess not.\n>\n> Attached.\n>\n>\n> On Mon, Nov 21, 2011 at 11:48 AM, Russ Cox <rsc@golang.org> wrote:\n>\n>> Try with -run=xxx to avoid running the tests?\n>> The profile says that reflect.Value.MapKeys is getting\n>> called, but I don't see why it would be, except\n>> if the tests were taking a significant part of the\n>> runtime.\n>>\n>> Russ\n>>\n>\n>\n",
			"disapproval": false,
			"date": "2011-11-21 18:16:41.748997",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5411052/diff/1002/src/pkg/strconv/itoa.go\nFile src/pkg/strconv/itoa.go (right):\n\nhttp://codereview.appspot.com/5411052/diff/1002/src/pkg/strconv/itoa.go#newcode9\nsrc/pkg/strconv/itoa.go:9: if base < 2 || 36 < base {\nOn 2011/11/22 22:48:14, r wrote:\n> this check is everywhere. we can refactor\n\nI could make a checkbase function.  Inlining will remove any overhead soon enough, I guess.\n\nOr were you thinking of something else?\n\nhttp://codereview.appspot.com/5411052/diff/1002/src/pkg/strconv/itoa.go#newcode54\nsrc/pkg/strconv/itoa.go:54: func appendUitob10(dst []byte, u uint64) []byte {\nOn 2011/11/22 22:48:14, r wrote:\n> why this special case? for constant division?\n\nyeah. this bit helped quite a bit:\n\nfrom/to:\njson.BenchmarkCodeEncoder  100  114246610 ns/op  16.98 MB/s\njson.BenchmarkCodeEncoder\t     100\t 108893550 ns/op\t  17.82 MB/s\n\nhttp://codereview.appspot.com/5411052/diff/1002/src/pkg/strconv/itoa.go#newcode67\nsrc/pkg/strconv/itoa.go:67: buf[j] = \"0123456789abcdefghijklmnopqrstuvwxyz\"[mod]\nOn 2011/11/22 22:48:14, r wrote:\n> i thought it was base 10, but in any case why not make it a shared constant?\n\nwill do.\n\nhttp://codereview.appspot.com/5411052/diff/1002/src/pkg/strconv/itoa.go#newcode84\nsrc/pkg/strconv/itoa.go:84: // AppendUitob64 works like Itob64 but appends onto dst instead of\nOn 2011/11/22 22:48:14, r wrote:\n> AppendItob64\n\nwhoops.",
			"disapproval": false,
			"date": "2011-11-23 03:29:52.045384",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5411052/diff/1002/src/pkg/strconv/itoa.go\nFile src/pkg/strconv/itoa.go (right):\n\nhttp://codereview.appspot.com/5411052/diff/1002/src/pkg/strconv/itoa.go#newcode9\nsrc/pkg/strconv/itoa.go:9: if base < 2 || 36 < base {\nthis check is everywhere. we can refactor\n\nhttp://codereview.appspot.com/5411052/diff/1002/src/pkg/strconv/itoa.go#newcode54\nsrc/pkg/strconv/itoa.go:54: func appendUitob10(dst []byte, u uint64) []byte {\nwhy this special case? for constant division?\n\nhttp://codereview.appspot.com/5411052/diff/1002/src/pkg/strconv/itoa.go#newcode67\nsrc/pkg/strconv/itoa.go:67: buf[j] = \"0123456789abcdefghijklmnopqrstuvwxyz\"[mod]\ni thought it was base 10, but in any case why not make it a shared constant?\n\nhttp://codereview.appspot.com/5411052/diff/1002/src/pkg/strconv/itoa.go#newcode84\nsrc/pkg/strconv/itoa.go:84: // AppendUitob64 works like Itob64 but appends onto dst instead of\nAppendItob64",
			"disapproval": false,
			"date": "2011-11-22 22:48:13.925814",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5411052/diff/1002/src/pkg/strconv/itoa.go\nFile src/pkg/strconv/itoa.go (right):\n\nhttp://codereview.appspot.com/5411052/diff/1002/src/pkg/strconv/itoa.go#newcode9\nsrc/pkg/strconv/itoa.go:9: if base < 2 || 36 < base {\nOn 2011/11/22 22:48:14, r wrote:\n> this check is everywhere.\n\nwait, it occurs twice.",
			"disapproval": false,
			"date": "2011-11-23 03:30:56.817364",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org, rsc@golang.org, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-23 03:33:20.924717",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5411052/diff/13002/src/pkg/strconv/itoa.go\nFile src/pkg/strconv/itoa.go (right):\n\nhttp://codereview.appspot.com/5411052/diff/13002/src/pkg/strconv/itoa.go#newcode87\nsrc/pkg/strconv/itoa.go:87: // returning a string.\n and returns the resulting slice.",
			"disapproval": false,
			"date": "2011-11-23 17:38:48.939247",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think this can be streamlined quite a bit. Come to think of it, I would probably write one helper function\n\nfunc utoa(a [64]byte, x uint64, base int) int {\n   ...\n}\n\nthat converts the x into a to base 10 and returns the length. This one bottle-neck function can be optimized like hell (and maybe even written in assembly if necessary).\n\nThen I would just call it from everywhere. The append to byte and the convert to string functions all can use this same bottleneck function.\n\nhttp://codereview.appspot.com/5411052/diff/13002/src/pkg/strconv/itoa.go\nFile src/pkg/strconv/itoa.go (right):\n\nhttp://codereview.appspot.com/5411052/diff/13002/src/pkg/strconv/itoa.go#newcode35\nsrc/pkg/strconv/itoa.go:35: return appendUitob10(dst, u)\nThis is likely the common case. I would not add an extra function call.\n\nhttp://codereview.appspot.com/5411052/diff/13002/src/pkg/strconv/itoa.go#newcode40\nsrc/pkg/strconv/itoa.go:40: if u == 0 {\nI would put this test first (and not care that base is not checked - that's what the existing code (line 89) does, too. Also, then you don't need to check in appendUitob10.\n\nhttp://codereview.appspot.com/5411052/diff/13002/src/pkg/strconv/itoa.go#newcode42\nsrc/pkg/strconv/itoa.go:42: }\nI would write the start of this function as:\n\nif u == 0 {\n   return ...\n}\nif base == 10 {\n  // optimization for common base 10 (same as general case but with constant base)\n  ...\n}\nif base < 2 || .. {\n   panic ...\n}\n// general case\n\nand get rid of appendUitob10\n\nhttp://codereview.appspot.com/5411052/diff/13002/src/pkg/strconv/itoa.go#newcode65\nsrc/pkg/strconv/itoa.go:65: u1 := u / 10\ns/u1/q/\ns/mod/r/\n\nfor quotient and remainder (easier mnemonics)?\n\nhttp://codereview.appspot.com/5411052/diff/13002/src/pkg/strconv/itoa.go#newcode66\nsrc/pkg/strconv/itoa.go:66: mod := u - u1*10\nShould have a comment why you do this instead of u%10 (presumably because it's faster - have you measured?). Also, note that the CPU provides both x/10 and x%10 with one instruction and thus gccgo may be able to produce better code if it recognizes the / and % pattern.\n\nhttp://codereview.appspot.com/5411052/diff/13002/src/pkg/strconv/itoa.go#newcode76\nsrc/pkg/strconv/itoa.go:76: if i == 0 {\nWhy is this test needed? Is 0 an overwhelmingly common case? Doesn't the rest of\nthe code take care of it?\n\nhttp://codereview.appspot.com/5411052/diff/13002/src/pkg/strconv/itoa.go#newcode89\nsrc/pkg/strconv/itoa.go:89: if i == 0 {\nWhy is this test needed? Is 0 an overwhelmingly common case? Doesn't the rest of the code take care of it?\n\nhttp://codereview.appspot.com/5411052/diff/13002/src/pkg/strconv/itoa.go#newcode94\nsrc/pkg/strconv/itoa.go:94: return AppendUitob64(dst, -uint64(i), base)\njust i = -i and get rid of the call and return (fall through)",
			"disapproval": false,
			"date": "2011-11-23 18:17:36.511456",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but wait for rsc\n\nhttp://codereview.appspot.com/5411052/diff/13002/src/pkg/strconv/itoa.go\nFile src/pkg/strconv/itoa.go (right):\n\nhttp://codereview.appspot.com/5411052/diff/13002/src/pkg/strconv/itoa.go#newcode32\nsrc/pkg/strconv/itoa.go:32: // returning a string.\nand returns the resulting slice.",
			"disapproval": false,
			"date": "2011-11-23 17:38:08.091902",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I've now dropped all my AppendFloat, etc changes from this CL.\n\nI won't submit until this is faster.  I'll wait for gri to do\nstrconv.AppendFloat.  (feel free to steal the implementations from this\nCL's earlier versions... :))\n\nOn Tue, Dec 6, 2011 at 1:56 PM, <bradfitz@golang.org> wrote:\n\n> Hello golang-dev@googlegroups.com, dsymonds@golang.org, rsc@golang.org,\n> r@golang.org, gri@golang.org (cc: golang-dev@googlegroups.com),\n>\n> Please take another look.\n>\n>\n> http://codereview.appspot.com/**5411052/<http://codereview.appspot.com/5411052/>\n>\n",
			"disapproval": false,
			"date": "2011-12-06 21:57:59.496029",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org, rsc@golang.org, r@golang.org, gri@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-06 21:56:33.810610",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks. My code changes are very similar, but with some additional\nsimplifications thrown in.\n- gri\n\nOn Tue, Dec 6, 2011 at 1:57 PM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n> I've now dropped all my AppendFloat, etc changes from this CL.\n>\n> I won't submit until this is faster. \u00a0I'll wait for gri to do\n> strconv.AppendFloat. \u00a0(feel free to steal the implementations from this CL's\n> earlier versions... :))\n>\n>\n> On Tue, Dec 6, 2011 at 1:56 PM, <bradfitz@golang.org> wrote:\n>>\n>> Hello golang-dev@googlegroups.com, dsymonds@golang.org, rsc@golang.org,\n>> r@golang.org, gri@golang.org (cc: golang-dev@googlegroups.com),\n>>\n>> Please take another look.\n>>\n>>\n>> http://codereview.appspot.com/5411052/\n>\n>\n",
			"disapproval": false,
			"date": "2011-12-07 00:08:21.668282",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5411052/diff/21001/src/pkg/encoding/json/encode.go\nFile src/pkg/encoding/json/encode.go (right):\n\nhttp://codereview.appspot.com/5411052/diff/21001/src/pkg/encoding/json/encode.go#newcode281\nsrc/pkg/encoding/json/encode.go:281: writeString(e, string(b))\nI think it should be faster to use\n\nwriteString(w, strconv.FormatInt(...))\n\nin this case",
			"disapproval": false,
			"date": "2011-12-15 19:20:54.131815",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org, rsc@golang.org, r@golang.org, gri@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-15 19:16:44.580951",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-12-15 19:20:27.400964",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=0e5409a34221 ***\n\njson: use strconv.Append variants to avoid allocations in encoding\n\nBefore/after, best of 3:\njson.BenchmarkCodeEncoder  10  183495300 ns/op  10.58 MB/s\n->\njson.BenchmarkCodeEncoder  10  133025100 ns/op  14.59 MB/s\n\nBut don't get too excited about this.  These benchmarks, while\nstable at any point of time, fluctuate wildly with any line of\ncode added or removed anywhere in the path due to stack splitting\nissues.\n\nIt's currently much faster, though, and this is the API that\ndoesn't allocate so should always be faster in theory.\n\nR=golang-dev, dsymonds, rsc, r, gri\nCC=golang-dev\nhttp://codereview.appspot.com/5411052",
			"disapproval": false,
			"date": "2011-12-15 19:21:26.673212",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Dec 15, 2011 at 11:20 AM, <gri@golang.org> wrote:\n\n>\n> http://codereview.appspot.com/**5411052/diff/21001/src/pkg/**\n> encoding/json/encode.go<http://codereview.appspot.com/5411052/diff/21001/src/pkg/encoding/json/encode.go>\n> File src/pkg/encoding/json/encode.**go (right):\n>\n> http://codereview.appspot.com/**5411052/diff/21001/src/pkg/**\n> encoding/json/encode.go#**newcode281<http://codereview.appspot.com/5411052/diff/21001/src/pkg/encoding/json/encode.go#newcode281>\n> src/pkg/encoding/json/encode.**go:281: writeString(e, string(b))\n> I think it should be faster to use\n>\n> writeString(w, strconv.FormatInt(...))\n>\n\nWhoops, already submitted.  In any case, that quoted path is almost never\nhit.  Only when sending int64s to JSON APIs like Google's, where int64s\naren't safe by themselves.  I'd prefer less code to more performance in a\nfringe case.\n",
			"disapproval": false,
			"date": "2011-12-15 19:23:23.399959",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 5411052: json: use strconv.Append variants to avoid allocations ...",
	"created": "2011-11-18 12:26:59.534207",
	"patchsets": [
		1,
		2001,
		4001,
		8001,
		1002,
		13002,
		17001,
		21001,
		26001
	],
	"modified": "2011-12-15 19:21:28.369375",
	"closed": true,
	"issue": 5411052
}