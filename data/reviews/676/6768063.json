{
	"description": "exp/types/staging: filling in more blanks\n\n- simplified assignment checking by removing duplicate code\n- implemented field lookup (methods, structs, embedded fields)\n- importing methods (not just parsing them)\n- type-checking functions and methods\n- typechecking more statements (inc/dec, select, return)\n- tracing support for easier debugging\n- handling nil more correctly (comparisons)\n- initial support for [...]T{} arrays\n- initial support for method expressions\n- lots of bug fixes\n\nAll packages under pkg/go as well as pkg/exp/types typecheck\nnow with pkg/exp/gotype applied to them; i.e., a significant\namount of typechecking works now (several statements are not\nimplemented yet, but handling statements is almost trivial in\ncomparison with typechecking expressions).",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-10-26 02:18:31.597730",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-27 00:45:29.693110",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nIf you want to submit this now and then clean up the field search in the next round that's fine.\n\nhttps://codereview.appspot.com/6768063/diff/24019/src/pkg/exp/types/staging/operand.go\nFile src/pkg/exp/types/staging/operand.go (right):\n\nhttps://codereview.appspot.com/6768063/diff/24019/src/pkg/exp/types/staging/operand.go#newcode203\nsrc/pkg/exp/types/staging/operand.go:203: // TODO(gri): FieldByNameFunc seems more complex - what are we missing?\nThis code is missing the logic about the counts of embedded fields. If you have\n\ntype T1 struct { X int }\ntype T2 struct { T1 }\ntype T3 struct { T1 }\ntype T4 struct { T2; T3 }\n\nvar t T4\nvar _ = t.X\n\nthen I believe the current lookupFieldRecursive will find X. It should not, because there are two paths to X that annihilate each other, but the visited map will mean that the code will only process T1 once, so it will only find X once.\n\nI think the count map is the only thing missing, FWIW.",
			"disapproval": false,
			"date": "2012-11-01 17:46:22.581330",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/01 17:46:22, rsc wrote:\n> LGTM\n> \n> If you want to submit this now and then clean up the field search in the next\n> round that's fine.\n> \n> https://codereview.appspot.com/6768063/diff/24019/src/pkg/exp/types/staging/operand.go\n> File src/pkg/exp/types/staging/operand.go (right):\n> \n> https://codereview.appspot.com/6768063/diff/24019/src/pkg/exp/types/staging/operand.go#newcode203\n> src/pkg/exp/types/staging/operand.go:203: // TODO(gri): FieldByNameFunc seems\n> more complex - what are we missing?\n> This code is missing the logic about the counts of embedded fields. If you have\n> \n> type T1 struct { X int }\n> type T2 struct { T1 }\n> type T3 struct { T1 }\n> type T4 struct { T2; T3 }\n> \n> var t T4\n> var _ = t.X\n> \n> then I believe the current lookupFieldRecursive will find X. It should not,\n> because there are two paths to X that annihilate each other, but the visited map\n> will mean that the code will only process T1 once, so it will only find X once.\n> \n> I think the count map is the only thing missing, FWIW.\n\nAh! The visited map (which is an optimization) requires the need for the count map...",
			"disapproval": false,
			"date": "2012-11-01 18:27:15.284860",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-30 00:44:40.167900",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-31 01:37:13.888870",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=956500178964 ***\n\nexp/types/staging: filling in more blanks\n\n- simplified assignment checking by removing duplicate code\n- implemented field lookup (methods, structs, embedded fields)\n- importing methods (not just parsing them)\n- type-checking functions and methods\n- typechecking more statements (inc/dec, select, return)\n- tracing support for easier debugging\n- handling nil more correctly (comparisons)\n- initial support for [...]T{} arrays\n- initial support for method expressions\n- lots of bug fixes\n\nAll packages under pkg/go as well as pkg/exp/types typecheck\nnow with pkg/exp/gotype applied to them; i.e., a significant\namount of typechecking works now (several statements are not\nimplemented yet, but handling statements is almost trivial in\ncomparison with typechecking expressions).\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6768063",
			"disapproval": false,
			"date": "2012-11-01 18:23:30.948480",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6768063: exp/types/staging: filling in more blanks",
	"created": "2012-10-26 02:10:53.793930",
	"patchsets": [
		1,
		2001,
		3,
		7001,
		8015,
		11001,
		9015,
		15001,
		18001,
		18002,
		18003,
		18004,
		19019,
		25001,
		24019,
		25002
	],
	"modified": "2012-11-01 18:27:16.025490",
	"closed": true,
	"issue": 6768063
}