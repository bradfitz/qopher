{
	"description": "path/filepath: Use a channel to return matches from Glob() instead of a slice.\n\nFor when a glob can match millions of files.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Mar 25, 2011, at 10:52 AM, david.crawshaw@zentus.com wrote:\n\n> P.s. with generics I could write (predicating over T):\n> \n> func collect(ch chan <-T) []T {\n>  sl := make([]T)\n>  for elem := range(ch) {\n>    sl = append(sl, elem)\n>  }\n>  return sl\n> }\n> \n> And then you could recover the old API via:\n> \n> matches := collect(filepath.Glob(\"*/*/*\"))\n> \n> http://codereview.appspot.com/4276078/\n\nTrue, but if f() returns a slice and then is changed to return a channel, the only change to the clients is that the the for statement's range clause goes from\n  for _, x := range\nto\n   for x := range\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-03-25 17:55:13.061802",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"david.crawshaw@zentus.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"r@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4276078/diff/10002/src/pkg/path/filepath/match_test.go\nFile src/pkg/path/filepath/match_test.go (right):\n\nhttp://codereview.appspot.com/4276078/diff/10002/src/pkg/path/filepath/match_test.go#newcode98\nsrc/pkg/path/filepath/match_test.go:98: func collect(ch <-chan string) []string {\ni thought you were just going to rename containsChan to contains. that's a preferable design - no need to copy all the values just to search for them",
			"disapproval": false,
			"date": "2011-03-25 19:55:21.305440",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"david.crawshaw@zentus.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"r@google.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4276078/diff/10002/src/pkg/path/filepath/match.go\nFile src/pkg/path/filepath/match.go (right):\n\nhttp://codereview.appspot.com/4276078/diff/10002/src/pkg/path/filepath/match.go#newcode216\nsrc/pkg/path/filepath/match.go:216: matches := make(chan string)\nShould this be a buffered channel?\n\nI often use unbuffered channels and channels of size 1, but unless I'm using a channel for rate control (\"n tasks running at a time\"), I'm never sure how large to make my \"optimized-for-throughput\" buffered channels.\n\nI end up picking some arbitrary number like 64.\n\nI'm curious what others do in cases like this.",
			"disapproval": false,
			"date": "2011-03-25 19:59:42.742949",
			"approval": false
		},
		{
			"sender": "david.crawshaw@zentus.com",
			"recipients": [
				"david.crawshaw@zentus.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/03/25 17:08:36, david.crawshaw wrote:\n> Hello mailto:golang-dev@googlegroups.com (cc: mailto:golang-dev@googlegroups.com),\n> \n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n\nThis is almost a question phrased as a CL. Does this make sense?\n\nIf so, another question: does a chan string copy the contents of the string? It's not clear to me. If so, I should probably be using chan *string.\n\nP.s. I was unable to sign in with crawshaw@google.com, so you get my personal email address.",
			"disapproval": false,
			"date": "2011-03-25 17:11:24.765317",
			"approval": false
		},
		{
			"sender": "david.crawshaw@zentus.com",
			"recipients": [
				"david.crawshaw@zentus.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"r@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc, r2, r (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-03-25 19:39:25.102443",
			"approval": false
		},
		{
			"sender": "david.crawshaw@zentus.com",
			"recipients": [
				"david.crawshaw@zentus.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-03-25 17:08:36.701189",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I'm not sure whether this should be the default.\nOn the one hand most of the time it is overkill.\nOn the other hand, when it's not, it's in code that\nyou didn't write, so this would help make that\ncode just work.\n\nIn this form, Glob should return a <-chan string\nand do the closing itself.  That will make the\nusage a little less awkward.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-03-25 17:31:14.822067",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"david.crawshaw@zentus.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"r@google.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4276078/diff/10002/src/pkg/path/filepath/match.go\nFile src/pkg/path/filepath/match.go (right):\n\nhttp://codereview.appspot.com/4276078/diff/10002/src/pkg/path/filepath/match.go#newcode216\nsrc/pkg/path/filepath/match.go:216: matches := make(chan string)\nSome buffering would be fine, since it allows the two halves to run more in parallel.  There's no need for fine synchronization.\n\nAn arbitrary number is probably fine.  Any smallish value will get whatever benefit there is.",
			"disapproval": false,
			"date": "2011-03-25 20:17:14.612617",
			"approval": false
		},
		{
			"sender": "david.crawshaw@zentus.com",
			"recipients": [
				"david.crawshaw@zentus.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-03-25 17:48:35.786664",
			"approval": false
		},
		{
			"sender": "david.crawshaw@zentus.com",
			"recipients": [
				"david.crawshaw@zentus.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "P.s. with generics I could write (predicating over T):\n\nfunc collect(ch chan <-T) []T {\n  sl := make([]T)\n  for elem := range(ch) {\n    sl = append(sl, elem)\n  }\n  return sl\n}\n\nAnd then you could recover the old API via:\n\nmatches := collect(filepath.Glob(\"*/*/*\"))",
			"disapproval": false,
			"date": "2011-03-25 17:52:08.220000",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"david.crawshaw@zentus.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"r@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4276078/diff/6001/src/pkg/path/filepath/match.go\nFile src/pkg/path/filepath/match.go (right):\n\nhttp://codereview.appspot.com/4276078/diff/6001/src/pkg/path/filepath/match.go#newcode210\nsrc/pkg/path/filepath/match.go:210: // Glob returns the names of all files matching pattern or nil\nupdate comment\n\nhttp://codereview.appspot.com/4276078/diff/6001/src/pkg/path/filepath/match_test.go\nFile src/pkg/path/filepath/match_test.go (right):\n\nhttp://codereview.appspot.com/4276078/diff/6001/src/pkg/path/filepath/match_test.go#newcode86\nsrc/pkg/path/filepath/match_test.go:86: func contains(vector []string, s string) bool {\nthis function is no longer used...\n\nhttp://codereview.appspot.com/4276078/diff/6001/src/pkg/path/filepath/match_test.go#newcode97\nsrc/pkg/path/filepath/match_test.go:97: func containsChan(ch <-chan string, s string) bool {\n...so this could just be \"contains\"....\n\nhttp://codereview.appspot.com/4276078/diff/6001/src/pkg/path/filepath/match_test.go#newcode122\nsrc/pkg/path/filepath/match_test.go:122: if !containsChan(matches, tt.result) {\n... but then it's hardly worth it.  you could put the range here, but it's fine if you want a separate function",
			"disapproval": false,
			"date": "2011-03-25 17:57:39.734131",
			"approval": false
		},
		{
			"sender": "david.crawshaw@zentus.com",
			"recipients": [
				"david.crawshaw@zentus.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"r@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/03/25 17:55:13, r2 wrote:\n> True, but if f() returns a slice and then is changed to return a channel, the\n> only change to the clients is that the the for statement's range clause goes\n> from\n>   for _, x := range\n> to\n>    for x := range\n> \n> -rob\n> \n\nI'm sure this must have been answered elsewhere, but again my search has failed: Why not have range be consistent over slices and channels, and not return an index? Then there could be an rangeIndex (or maybe, 'ranged') that gives you an index on both slices and channels.",
			"disapproval": false,
			"date": "2011-03-25 19:44:23.249371",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "channels are the inconsistency, not slices\n",
			"disapproval": false,
			"date": "2011-03-25 19:51:57.740776",
			"approval": false
		},
		{
			"sender": "david.crawshaw@zentus.com",
			"recipients": [
				"david.crawshaw@zentus.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"r@google.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Cheers. (I just found hg upload.)\n\nhttp://codereview.appspot.com/4276078/diff/10002/src/pkg/path/filepath/match.go\nFile src/pkg/path/filepath/match.go (right):\n\nhttp://codereview.appspot.com/4276078/diff/10002/src/pkg/path/filepath/match.go#newcode216\nsrc/pkg/path/filepath/match.go:216: matches := make(chan string)\nOn 2011/03/25 20:17:14, r wrote:\n> Some buffering would be fine, since it allows the two halves to run more in\n> parallel.  There's no need for fine synchronization.\n> \n> An arbitrary number is probably fine.  Any smallish value will get whatever\n> benefit there is.\n\nDone. Though it would be nice if I could pull the arbitrary number from a constant in some package like os or sync.\n\nhttp://codereview.appspot.com/4276078/diff/10002/src/pkg/path/filepath/match_test.go\nFile src/pkg/path/filepath/match_test.go (right):\n\nhttp://codereview.appspot.com/4276078/diff/10002/src/pkg/path/filepath/match_test.go#newcode98\nsrc/pkg/path/filepath/match_test.go:98: func collect(ch <-chan string) []string {\nOn 2011/03/25 19:55:21, r wrote:\n> i thought you were just going to rename containsChan to contains. that's a\n> preferable design - no need to copy all the values just to search for them\n\nThen I can't use the output of the channel in the error message. I could call Glob() again for the error message, but that could hide an indeterminism bug.",
			"disapproval": false,
			"date": "2011-03-25 20:27:32.734178",
			"approval": false
		},
		{
			"sender": "david.crawshaw@zentus.com",
			"recipients": [
				"david.crawshaw@zentus.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"r@google.com",
				"r@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Ping. Any interest in this?\n\nOn 2011/03/25 20:27:32, david.crawshaw wrote:\n> Cheers. (I just found hg upload.)\n> \n> http://codereview.appspot.com/4276078/diff/10002/src/pkg/path/filepath/match.go\n> File src/pkg/path/filepath/match.go (right):\n> \n> http://codereview.appspot.com/4276078/diff/10002/src/pkg/path/filepath/match.go#newcode216\n> src/pkg/path/filepath/match.go:216: matches := make(chan string)\n> On 2011/03/25 20:17:14, r wrote:\n> > Some buffering would be fine, since it allows the two halves to run more in\n> > parallel.  There's no need for fine synchronization.\n> > \n> > An arbitrary number is probably fine.  Any smallish value will get whatever\n> > benefit there is.\n> \n> Done. Though it would be nice if I could pull the arbitrary number from a\n> constant in some package like os or sync.\n> \n> http://codereview.appspot.com/4276078/diff/10002/src/pkg/path/filepath/match_test.go\n> File src/pkg/path/filepath/match_test.go (right):\n> \n> http://codereview.appspot.com/4276078/diff/10002/src/pkg/path/filepath/match_test.go#newcode98\n> src/pkg/path/filepath/match_test.go:98: func collect(ch <-chan string) []string\n> {\n> On 2011/03/25 19:55:21, r wrote:\n> > i thought you were just going to rename containsChan to contains. that's a\n> > preferable design - no need to copy all the values just to search for them\n> \n> Then I can't use the output of the channel in the error message. I could call\n> Glob() again for the error message, but that could hide an indeterminism bug.",
			"disapproval": false,
			"date": "2011-04-02 19:56:59.483005",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"david.crawshaw@zentus.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "apparently not",
			"disapproval": false,
			"date": "2012-06-03 04:50:19.245775",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"david.crawshaw@zentus.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=close",
			"disapproval": false,
			"date": "2013-07-20 07:13:49.817680",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"david.crawshaw@zentus.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2013-07-20 21:28:03.622630",
			"approval": false
		}
	],
	"owner_email": "david.crawshaw@zentus.com",
	"private": false,
	"base_url": "",
	"owner": "crawshaw",
	"subject": "code review 4276078: path/filepath: Use a channel to return matches from Glo...",
	"created": "2011-03-25 17:03:45.353317",
	"patchsets": [
		1,
		2001,
		6001,
		10002,
		16001,
		20001
	],
	"modified": "2013-07-20 21:28:03.717880",
	"closed": false,
	"issue": 4276078
}