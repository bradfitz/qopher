{
	"description": "leveldb: add a version type.",
	"cc": [
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6051049/diff/5001/leveldb/version.go\nFile leveldb/version.go (right):\n\nhttp://codereview.appspot.com/6051049/diff/5001/leveldb/version.go#newcode55\nleveldb/version.go:55: func (v *version) checkOrdering(ucmp db.Comparer) error {\nOn 2012/04/18 13:31:54, bradfitz wrote:\n> both these methods take a db.Comparer. that can't change once the table's made,\n> right? would it make sense to promote that to a field of the version struct?\n\nPossibly, although it will be a field of the versionSet type (that's defined in a future CL), and all versions will belong to a versionSet. I'll keep your point in mind.\n\nhttp://codereview.appspot.com/6051049/diff/5001/leveldb/version.go#newcode70\nleveldb/version.go:70: return fmt.Errorf(\"level non-0 files are not in increasing ikey order: %q, %q\", prevLargest, f.smallest)\nOn 2012/04/18 13:31:54, bradfitz wrote:\n> you want \"leveldb: \" prefixes on these three? (if they'll ever show up to end\n> users, even on corruption)\n\nI'll leave it as is. On corruption, I'd think that I'd want to prefix the error message with some more context.",
			"disapproval": false,
			"date": "2012-04-19 00:13:39.434787",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "SGTM\n On Apr 18, 2012 5:13 PM, <nigeltao@golang.org> wrote:\n\n>\n> http://codereview.appspot.com/**6051049/diff/5001/leveldb/**version.go<http://codereview.appspot.com/6051049/diff/5001/leveldb/version.go>\n> File leveldb/version.go (right):\n>\n> http://codereview.appspot.com/**6051049/diff/5001/leveldb/**\n> version.go#newcode55<http://codereview.appspot.com/6051049/diff/5001/leveldb/version.go#newcode55>\n> leveldb/version.go:55: func (v *version) checkOrdering(ucmp db.Comparer)\n> error {\n> On 2012/04/18 13:31:54, bradfitz wrote:\n>\n>> both these methods take a db.Comparer. that can't change once the\n>>\n> table's made,\n>\n>> right? would it make sense to promote that to a field of the version\n>>\n> struct?\n>\n> Possibly, although it will be a field of the versionSet type (that's\n> defined in a future CL), and all versions will belong to a versionSet.\n> I'll keep your point in mind.\n>\n> http://codereview.appspot.com/**6051049/diff/5001/leveldb/**\n> version.go#newcode70<http://codereview.appspot.com/6051049/diff/5001/leveldb/version.go#newcode70>\n> leveldb/version.go:70: return fmt.Errorf(\"level non-0 files are not in\n> increasing ikey order: %q, %q\", prevLargest, f.smallest)\n> On 2012/04/18 13:31:54, bradfitz wrote:\n>\n>> you want \"leveldb: \" prefixes on these three? (if they'll ever show up\n>>\n> to end\n>\n>> users, even on corruption)\n>>\n>\n> I'll leave it as is. On corruption, I'd think that I'd want to prefix\n> the error message with some more context.\n>\n> http://codereview.appspot.com/**6051049/<http://codereview.appspot.com/6051049/>\n>\n",
			"disapproval": false,
			"date": "2012-04-19 00:14:36.276552",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/leveldb-go",
			"disapproval": false,
			"date": "2012-04-18 12:40:50.967028",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nNice tests.\n\nhttp://codereview.appspot.com/6051049/diff/5001/leveldb/version.go\nFile leveldb/version.go (right):\n\nhttp://codereview.appspot.com/6051049/diff/5001/leveldb/version.go#newcode55\nleveldb/version.go:55: func (v *version) checkOrdering(ucmp db.Comparer) error {\nboth these methods take a db.Comparer. that can't change once the table's made, right? would it make sense to promote that to a field of the version struct?\n\nhttp://codereview.appspot.com/6051049/diff/5001/leveldb/version.go#newcode70\nleveldb/version.go:70: return fmt.Errorf(\"level non-0 files are not in increasing ikey order: %q, %q\", prevLargest, f.smallest)\nyou want \"leveldb: \" prefixes on these three? (if they'll ever show up to end users, even on corruption)",
			"disapproval": false,
			"date": "2012-04-18 13:31:54.249228",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/leveldb-go/source/detail?r=9d07c8b7da76 ***\n\nleveldb: add a version type.\n\nR=bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/6051049",
			"disapproval": false,
			"date": "2012-04-19 00:52:28.350959",
			"approval": false
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 6051049: leveldb: add a version type.",
	"created": "2012-04-18 12:40:17.580492",
	"patchsets": [
		1,
		2001,
		5001,
		9001,
		11001
	],
	"modified": "2012-04-19 00:52:31.920282",
	"closed": true,
	"issue": 6051049
}