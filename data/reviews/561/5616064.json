{
	"description": "cmd/gc: safemode only in effect during typecheck and parsing of local package.\n\nFixes issue 2795.\n\nimportpkg is only reliable during parsing, so no good for\ndisabling the safemode check during typecheck.  Also, an unsafe.Pointer\ntype may leak out of the public interface of a package explicitly marked safe.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rsc@golang.org",
		"dsymonds@golang.org"
	],
	"messages": [
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-03 13:16:30.713988",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "done\n\nOn Fri, Feb 3, 2012 at 15:17, David Symonds <dsymonds@golang.org> wrote:\n> Remove that TODO.\n",
			"disapproval": false,
			"date": "2012-02-03 14:25:17.981683",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Feb 3, 2012 at 15:38,  <rsc@golang.org> wrote:\n> Thanks for finding this.\n>\n>\n>\n> http://codereview.appspot.com/5616064/diff/1003/src/cmd/gc/inl.c\n> File src/cmd/gc/inl.c (right):\n>\n> http://codereview.appspot.com/5616064/diff/1003/src/cmd/gc/inl.c#newcode72\n> src/cmd/gc/inl.c:72: if (fn->sym->pkg == localpkg)\n> How can this happen? \u00a0You've just checked that fn->typecheck == 0 above,\n> and lex.c's \"Phase 3\" should have type-checked all the function bodies\n> in this package already.\n\nthat normal phase 3 typecheck of the function bodies doesnt set\n->typecheck on the function. of course i could make it so and fatal()\nhere.\n\n\n>\n> Maybe make this a fatal condition?\n>\n> http://codereview.appspot.com/5616064/\n",
			"disapproval": false,
			"date": "2012-02-03 14:41:54.453304",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Remove that TODO.\n",
			"disapproval": false,
			"date": "2012-02-03 14:17:38.120233",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sounds like a good thing to try at least.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-02-03 14:43:41.588489",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for finding this.\n\nhttp://codereview.appspot.com/5616064/diff/1003/src/cmd/gc/inl.c\nFile src/cmd/gc/inl.c (right):\n\nhttp://codereview.appspot.com/5616064/diff/1003/src/cmd/gc/inl.c#newcode72\nsrc/cmd/gc/inl.c:72: if (fn->sym->pkg == localpkg)\nHow can this happen?  You've just checked that fn->typecheck == 0 above,\nand lex.c's \"Phase 3\" should have type-checked all the function bodies\nin this package already.\n\nMaybe make this a fatal condition?",
			"disapproval": false,
			"date": "2012-02-03 14:38:45.805548",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/02/03 14:43:41, rsc wrote:\n> Sounds like a good thing to try at least.\n> \n> Russ\n\nand it breaks revealing an underlying bug.  An imported method like bytes.String gets a symbol String, which in the importing package may be bound to some other function by the time the imported method of bytes is used and typechecked.\n\nI'll revert the lazy typechecking and just typecheck everything on import.",
			"disapproval": false,
			"date": "2012-02-06 13:21:56.989924",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/02/06 13:21:56, lvd wrote:\n> On 2012/02/03 14:43:41, rsc wrote:\n> > Sounds like a good thing to try at least.\n> > \n> > Russ\n> \n> and it breaks revealing an underlying bug.  An imported method like bytes.String\n> gets a symbol String, which in the importing package may be bound to some other\n> function by the time the imported method of bytes is used and typechecked.\n> \n> I'll revert the lazy typechecking and just typecheck everything on import.\n\nthat doesnt solve anything.  basically, importpkg is only reliable during parsing.  its only use after parsing is in typecheck, to trigger \"cannot use unsafe.Pointer\", and now also in assignop (which is only called during typecheck).  i'll see if i can just come up with a better way, like temporarily clearing safemode.",
			"disapproval": false,
			"date": "2012-02-06 13:39:20.926233",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "what is a scenario that uses the safe flag? is there some build script\nthat uses it that i can use to test?  the standard tree doesn't\nactually seem to.\n\nOn Mon, Feb 6, 2012 at 14:39,  <lvd@google.com> wrote:\n> On 2012/02/06 13:21:56, lvd wrote:\n>>\n>> On 2012/02/03 14:43:41, rsc wrote:\n>> > Sounds like a good thing to try at least.\n>> >\n>> > Russ\n>\n>\n>> and it breaks revealing an underlying bug. \u00a0An imported method like\n>\n> bytes.String\n>>\n>> gets a symbol String, which in the importing package may be bound to\n>\n> some other\n>>\n>> function by the time the imported method of bytes is used and\n>\n> typechecked.\n>\n>> I'll revert the lazy typechecking and just typecheck everything on\n>\n> import.\n>\n> that doesnt solve anything. \u00a0basically, importpkg is only reliable\n> during parsing. \u00a0its only use after parsing is in typecheck, to trigger\n> \"cannot use unsafe.Pointer\", and now also in assignop (which is only\n> called during typecheck). \u00a0i'll see if i can just come up with a better\n> way, like temporarily clearing safemode.\n>\n>\n> http://codereview.appspot.com/5616064/\n",
			"disapproval": false,
			"date": "2012-02-06 14:00:14.174693",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Feb 6, 2012 at 09:00, Luuk van Dijk <lvd@google.com> wrote:\n> what is a scenario that uses the safe flag? is there some build script\n> that uses it that i can use to test? \u00a0the standard tree doesn't\n> actually seem to.\n\nThe easiest thing to do is to run a normal build,\nthen\n\nfor i in $(find $GOROOT/pkg/${GOOS}_$GOARCH -name '*.a')\ndo\n   go tool pack gS $i\ndone\n\nThat will mark all the built archives as safe.  Then if you\nbuild a new program x.go using\n\n6g -u x.go\n\nyou should be able to reproduce the failures we've seen,\nassuming x.go contains appropriate imports and code to\ntrigger the relevant paths.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-02-06 14:26:57.518970",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/02/06 14:26:57, rsc wrote:\n> On Mon, Feb 6, 2012 at 09:00, Luuk van Dijk <mailto:lvd@google.com> wrote:\n> > what is a scenario that uses the safe flag? is there some build script\n> > that uses it that i can use to test? &nbsp;the standard tree doesn't\n> > actually seem to.\n> \n> The easiest thing to do is to run a normal build,\n> then\n> \n> for i in $(find $GOROOT/pkg/${GOOS}_$GOARCH -name '*.a')\n> do\n>    go tool pack gS $i\n\nfor the record:\n\ngo tool pack rgS $i\n\n> done\n> \n> That will mark all the built archives as safe.  Then if you\n> build a new program x.go using\n> \n> 6g -u x.go\n> \n> you should be able to reproduce the failures we've seen,\n> assuming x.go contains appropriate imports and code to\n> trigger the relevant paths.\n> \n> Russ",
			"disapproval": false,
			"date": "2012-02-07 12:50:59.204283",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, dsymonds@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-09 15:32:01.438993",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "maybe -u deserves its own testsuite under test/...\n\nOn Thu, Feb 9, 2012 at 16:32,  <lvd@google.com> wrote:\n> Hello rsc@golang.org, dsymonds@golang.org (cc:\n> golang-dev@googlegroups.com),\n>\n> Please take another look.\n>\n>\n> http://codereview.appspot.com/5616064/\n",
			"disapproval": false,
			"date": "2012-02-09 15:32:50.414385",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "doh ... if the intent is that -u also prohibits inferred unsafe.Pointers i\ncan just put back that check in typecheck and modify my test to only use\nunsafe internally.\n\ni confused myself constructing the testcase i think.\nOn Feb 9, 2012 4:32 PM, \"Luuk van Dijk\" <lvd@google.com> wrote:\n\n> maybe -u deserves its own testsuite under test/...\n>\n> On Thu, Feb 9, 2012 at 16:32,  <lvd@google.com> wrote:\n> > Hello rsc@golang.org, dsymonds@golang.org (cc:\n> > golang-dev@googlegroups.com),\n> >\n> > Please take another look.\n> >\n> >\n> > http://codereview.appspot.com/5616064/\n>\n",
			"disapproval": false,
			"date": "2012-02-09 15:48:58.625953",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "well, the original was obviously wrong, so i'd argue that this is better.\n\nbut let me reinstate that check in typecheck and fix the test first,\nand then i'll work on making this all more obvious and ping you later\n\n/L\n\nOn Thu, Feb 9, 2012 at 19:26,  <rsc@golang.org> wrote:\n> This is not okay. \u00a0There is far too much changing here,\n> with safemode being checked sometimes and debug['u']\n> being checked other times. \u00a0It is not obviously incorrect,\n> but neither is it obviously correct, and it must be.\n>\n>\n> http://codereview.appspot.com/5616064/\n",
			"disapproval": false,
			"date": "2012-02-09 18:46:06.133654",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Feb 9, 2012 at 13:45, Luuk van Dijk <lvd@google.com> wrote:\n> well, the original was obviously wrong, so i'd argue that this is better.\n\nThe original was obviously safe.\nIt happened to reject a valid program or two.\nThat's better than the reverse.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-02-09 19:15:02.091230",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is not okay.  There is far too much changing here,\nwith safemode being checked sometimes and debug['u']\nbeing checked other times.  It is not obviously incorrect,\nbut neither is it obviously correct, and it must be.",
			"disapproval": false,
			"date": "2012-02-09 18:26:32.040579",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-02-10 09:45:24.769323",
			"approval": false
		}
	],
	"owner_email": "lvd@google.com",
	"private": false,
	"base_url": "",
	"owner": "lvd",
	"subject": "code review 5616064: cmd/gc: safemode only in effect during typecheck and pa...",
	"created": "2012-02-03 13:16:08.436135",
	"patchsets": [
		1,
		2001,
		5001,
		1002,
		1003,
		7002,
		13001,
		16001,
		18001
	],
	"modified": "2012-02-10 09:45:26.649829",
	"closed": true,
	"issue": 5616064
}