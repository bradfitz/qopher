{
	"description": "exp/norm: merged charinfo and decomposition tables. As a result only\none trie lookup per rune is needed. See forminfo.go for a description\nof the new format.  Also included leading and trailing canonical\ncombining class in decomposition information.  This will often avoid\nadditional trie lookups.",
	"cc": [
		"r@golang.go",
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.go",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.go (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2012-02-06 09:06:52.508399",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.go",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Also added sorting of decomposition values.  Not strictly necessary, but will cause identical tables.go to be generated for identical input, simplifying verification of changes, among other benefits.\n\nhttp://codereview.appspot.com/5616071/diff/2001/src/pkg/exp/norm/forminfo.go\nFile src/pkg/exp/norm/forminfo.go (right):\n\nhttp://codereview.appspot.com/5616071/diff/2001/src/pkg/exp/norm/forminfo.go#newcode142\nsrc/pkg/exp/norm/forminfo.go:142: func compInfo(v uint16, sz int) runeInfo {\nOn 2012/02/08 02:55:15, r wrote:\n> this new function is complex enough to deserve a comment\n\nPut a reference to the documentation at the top of the file.\n\nhttp://codereview.appspot.com/5616071/diff/2001/src/pkg/exp/norm/forminfo.go#newcode150\nsrc/pkg/exp/norm/forminfo.go:150: flags: qcInfo(v>>8) & 0xF,\nOn 2012/02/08 02:55:15, r wrote:\n> 0xF and 0x3F below are magic numbers.\n\nDone.\n\nhttp://codereview.appspot.com/5616071/diff/2001/src/pkg/exp/norm/maketables.go\nFile src/pkg/exp/norm/maketables.go (right):\n\nhttp://codereview.appspot.com/5616071/diff/2001/src/pkg/exp/norm/maketables.go#newcode7\nsrc/pkg/exp/norm/maketables.go:7: // See forminfo.go a description of the trie values associated with each rune.\nOn 2012/02/08 02:55:15, r wrote:\n> s/a/for a/\n\nDone.\n\nhttp://codereview.appspot.com/5616071/diff/2001/src/pkg/exp/norm/maketables.go#newcode571\nsrc/pkg/exp/norm/maketables.go:571: type indexMap struct {\nGood point. Unwrapped.  Originally, this struct contained more data.\n\nOn 2012/02/08 02:55:15, r wrote:\n> indexMap is a very generic name, if accurate. it needs a comment.\n> but: why is this a struct? the methods could be on the array, losing\n> a wrapping layer, and then the names could work out nicer\n\nhttp://codereview.appspot.com/5616071/diff/2001/src/pkg/exp/norm/maketables.go#newcode592\nsrc/pkg/exp/norm/maketables.go:592: logger.Fatalf(msg, r, len(s), max)\nOn 2012/02/08 02:55:15, r wrote:\n> don't be afraid of long lines, but if you want to keep it like this, msg should\n> be const.\n\nDone.\n\nhttp://codereview.appspot.com/5616071/diff/2001/src/pkg/exp/norm/maketables.go#newcode606\nsrc/pkg/exp/norm/maketables.go:606: msg := \"%U: lccc (%d) must be <= tcc (%d)\\n\"\nOn 2012/02/08 02:55:15, r wrote:\n> ditto. also drop the \\n\n\nDone.\n\nhttp://codereview.appspot.com/5616071/diff/2001/src/pkg/exp/norm/maketables.go#newcode672\nsrc/pkg/exp/norm/maketables.go:672: logger.Fatal(\"Expected differing CCC to be non-zero.\")\nOn 2012/02/08 02:55:15, r wrote:\n> include the value that went wrong?\nThe value that is incorrect is always 0, but it will be useful to include the ccc of the original character, which is now done.",
			"disapproval": false,
			"date": "2012-02-08 10:54:34.098546",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.go",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.go, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-08 10:55:11.796069",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.go",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-02-08 11:36:05.536150",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.go",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5616071/diff/2001/src/pkg/exp/norm/forminfo.go\nFile src/pkg/exp/norm/forminfo.go (right):\n\nhttp://codereview.appspot.com/5616071/diff/2001/src/pkg/exp/norm/forminfo.go#newcode142\nsrc/pkg/exp/norm/forminfo.go:142: func compInfo(v uint16, sz int) runeInfo {\nthis new function is complex enough to deserve a comment\n\nhttp://codereview.appspot.com/5616071/diff/2001/src/pkg/exp/norm/forminfo.go#newcode150\nsrc/pkg/exp/norm/forminfo.go:150: flags: qcInfo(v>>8) & 0xF,\n0xF and 0x3F below are magic numbers.\n\nhttp://codereview.appspot.com/5616071/diff/2001/src/pkg/exp/norm/maketables.go\nFile src/pkg/exp/norm/maketables.go (right):\n\nhttp://codereview.appspot.com/5616071/diff/2001/src/pkg/exp/norm/maketables.go#newcode7\nsrc/pkg/exp/norm/maketables.go:7: // See forminfo.go a description of the trie values associated with each rune.\ns/a/for a/\n\nhttp://codereview.appspot.com/5616071/diff/2001/src/pkg/exp/norm/maketables.go#newcode571\nsrc/pkg/exp/norm/maketables.go:571: type indexMap struct {\nindexMap is a very generic name, if accurate. it needs a comment.\nbut: why is this a struct? the methods could be on the array, losing\na wrapping layer, and then the names could work out nicer\n\nhttp://codereview.appspot.com/5616071/diff/2001/src/pkg/exp/norm/maketables.go#newcode592\nsrc/pkg/exp/norm/maketables.go:592: logger.Fatalf(msg, r, len(s), max)\ndon't be afraid of long lines, but if you want to keep it like this, msg should be const.\n\nhttp://codereview.appspot.com/5616071/diff/2001/src/pkg/exp/norm/maketables.go#newcode606\nsrc/pkg/exp/norm/maketables.go:606: msg := \"%U: lccc (%d) must be <= tcc (%d)\\n\"\nditto. also drop the \\n\n\nhttp://codereview.appspot.com/5616071/diff/2001/src/pkg/exp/norm/maketables.go#newcode672\nsrc/pkg/exp/norm/maketables.go:672: logger.Fatal(\"Expected differing CCC to be non-zero.\")\ninclude the value that went wrong?",
			"disapproval": false,
			"date": "2012-02-08 02:55:15.396992",
			"approval": true
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.go",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=ab8a2146f8f1 ***\n\nexp/norm: merged charinfo and decomposition tables. As a result only\none trie lookup per rune is needed. See forminfo.go for a description\nof the new format.  Also included leading and trailing canonical\ncombining class in decomposition information.  This will often avoid\nadditional trie lookups.\n\nR=r, r\nCC=golang-dev\nhttp://codereview.appspot.com/5616071",
			"disapproval": false,
			"date": "2012-02-13 13:54:53.274377",
			"approval": false
		}
	],
	"owner_email": "mpvl@golang.org",
	"private": false,
	"base_url": "",
	"owner": "mpvl",
	"subject": "code review 5616071: exp/norm: merged charinfo and decomposition tables. As ...",
	"created": "2012-02-06 09:06:15.291933",
	"patchsets": [
		1,
		2001,
		9003,
		10001,
		11001
	],
	"modified": "2012-02-13 13:54:54.376605",
	"closed": true,
	"issue": 5616071
}