{
	"description": "runtime: Implement faster equals for strings and bytes.\n\n(amd64)\nbenchmark           old ns/op    new ns/op    delta\nBenchmarkEqual0            16            6  -63.15%\nBenchmarkEqual9            22            7  -65.37%\nBenchmarkEqual32           36            9  -74.91%\nBenchmarkEqual4K         2187          120  -94.51%\n\nbenchmark            old MB/s     new MB/s  speedup\nBenchmarkEqual9        392.22      1134.38    2.89x\nBenchmarkEqual32       866.72      3457.39    3.99x\nBenchmarkEqual4K      1872.73     33998.87   18.15x\n\n(386)\nbenchmark           old ns/op    new ns/op    delta\nBenchmarkEqual0            16            5  -63.85%\nBenchmarkEqual9            22            7  -67.84%\nBenchmarkEqual32           34           12  -64.94%\nBenchmarkEqual4K         2196          113  -94.85%\n\nbenchmark            old MB/s     new MB/s  speedup\nBenchmarkEqual9        405.81      1260.18    3.11x\nBenchmarkEqual32       919.55      2631.21    2.86x\nBenchmarkEqual4K      1864.85     36072.54   19.34x\n\nUpdate issue 3751",
	"cc": [
		"bradfitz@golang.org",
		"r@golang.org",
		"khr@google.com",
		"remyoudompheng@gmail.com",
		"minux.ma@gmail.com",
		"ality@pbrane.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"dave@cheney.net",
		"fullung@gmail.com"
	],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"khr@golang.org",
				"bradfitz@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8056043/diff/11001/src/pkg/bytes/bytes_test.go\nFile src/pkg/bytes/bytes_test.go (right):\n\nhttps://codereview.appspot.com/8056043/diff/11001/src/pkg/bytes/bytes_test.go#newcode64\nsrc/pkg/bytes/bytes_test.go:64: {[]byte(\"abcdefgh\"), []byte(\"abcdefgh\"), 0},\ncomment above this line about what these are testing? (alignment)\n\nhttps://codereview.appspot.com/8056043/diff/11001/src/pkg/runtime/mapspeed_test.go\nFile src/pkg/runtime/mapspeed_test.go (right):\n\nhttps://codereview.appspot.com/8056043/diff/11001/src/pkg/runtime/mapspeed_test.go#newcode121\nsrc/pkg/runtime/mapspeed_test.go:121: func BenchmarkMegEqMap(b *testing.B) {\nit's not clear what \"Eq\" in the benchmark names here.\n\n\"Mostly equal\"?  (it ends in a Y)\n\nI'd just make the lookup key be all \"X\" too.",
			"disapproval": false,
			"date": "2013-03-27 23:35:20.534790",
			"approval": false
		},
		{
			"sender": "khr@golang.org",
			"recipients": [
				"khr@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://khr%40golang.org@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-03-27 22:14:12.918470",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"khr@golang.org",
				"bradfitz@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "run go vet. i think it will ask for a few tweaks to the assembly",
			"disapproval": false,
			"date": "2013-03-27 22:34:05.627330",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but I'm not qualified to review runtime/asm_arm.s\r\n\r\nOn Wed, Mar 27, 2013 at 3:14 PM, <khr@golang.org> wrote:\r\n\r\n> Reviewers: bradfitz,\r\n>\r\n> Message:\r\n> Hello bradfitz@golang.org (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://khr%40golang.org@code.**google.com/p/go/<http://40golang.org@code.google.com/p/go/>\r\n>\r\n>\r\n> Description:\r\n> runtime: Implement faster equals for strings and bytes.\r\n>\r\n> (amd64)\r\n> benchmark            old ns/op    new ns/op    delta\r\n> BenchmarkMegEqMap      1164712       103451  -91.12%\r\n>\r\n> (386)\r\n> benchmark            old ns/op    new ns/op    delta\r\n> BenchmarkMegEqMap      4935048       171105  -96.53%\r\n>\r\n> (arm)\r\n> benchmark            old ns/op    new ns/op    delta\r\n> BenchmarkMegEqMap     12018127      8923492  -25.75%\r\n>\r\n> Update issue 3751\r\n>\r\n> Please review this at https://codereview.appspot.**com/8056043/<https://codereview.appspot.com/8056043/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/bytes/asm_386.s\r\n>   M src/pkg/bytes/asm_amd64.s\r\n>   M src/pkg/bytes/asm_arm.s\r\n>   M src/pkg/bytes/bytes_test.go\r\n>   M src/pkg/runtime/alg.c\r\n>   M src/pkg/runtime/asm_386.s\r\n>   M src/pkg/runtime/asm_amd64.s\r\n>   M src/pkg/runtime/asm_arm.s\r\n>   M src/pkg/runtime/hashmap.c\r\n>   M src/pkg/runtime/mapspeed_test.**go\r\n>   M src/pkg/runtime/runtime.h\r\n>   M src/pkg/runtime/string.goc\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-27 22:51:25.992660",
			"approval": true
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Mar 27, 2013 at 4:35 PM, <bradfitz@golang.org> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/8056043/diff/11001/src/**\r\n> pkg/bytes/bytes_test.go<https://codereview.appspot.com/8056043/diff/11001/src/pkg/bytes/bytes_test.go>\r\n> File src/pkg/bytes/bytes_test.go (right):\r\n>\r\n> https://codereview.appspot.**com/8056043/diff/11001/src/**\r\n> pkg/bytes/bytes_test.go#**newcode64<https://codereview.appspot.com/8056043/diff/11001/src/pkg/bytes/bytes_test.go#newcode64>\r\n> src/pkg/bytes/bytes_test.go:**64: {[]byte(\"abcdefgh\"), []byte(\"abcdefgh\"),\r\n> 0},\r\n> comment above this line about what these are testing? (alignment)\r\n>\r\n\r\nDone.  Not so much testing alignment as testing around the boundary of the\r\nchunk size of memeq.\r\n\r\n\r\n>\r\n> https://codereview.appspot.**com/8056043/diff/11001/src/**\r\n> pkg/runtime/mapspeed_test.go<https://codereview.appspot.com/8056043/diff/11001/src/pkg/runtime/mapspeed_test.go>\r\n> File src/pkg/runtime/mapspeed_test.**go (right):\r\n>\r\n> https://codereview.appspot.**com/8056043/diff/11001/src/**\r\n> pkg/runtime/mapspeed_test.go#**newcode121<https://codereview.appspot.com/8056043/diff/11001/src/pkg/runtime/mapspeed_test.go#newcode121>\r\n> src/pkg/runtime/mapspeed_test.**go:121: func BenchmarkMegEqMap(b\r\n> *testing.B) {\r\n> it's not clear what \"Eq\" in the benchmark names here.\r\n>\r\n> \"Mostly equal\"?  (it ends in a Y)\r\n>\r\n> I'd just make the lookup key be all \"X\" too.\r\n>\r\n\r\nDone.\r\n\r\n\r\n>\r\n> https://codereview.appspot.**com/8056043/<https://codereview.appspot.com/8056043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-28 02:34:48.065780",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"khr@golang.org",
				"bradfitz@golang.org",
				"r@golang.org",
				"khr@google.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks. I'll try this on some arm systems soon and get some benchmarks. I'd like to see data from the bytes package.",
			"disapproval": false,
			"date": "2013-03-28 03:17:31.882760",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"khr@golang.org",
				"bradfitz@golang.org",
				"r@golang.org",
				"khr@google.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8056043/diff/18001/src/pkg/bytes/asm_386.s\nFile src/pkg/bytes/asm_386.s (right):\n\nhttps://codereview.appspot.com/8056043/diff/18001/src/pkg/bytes/asm_386.s#newcode19\nsrc/pkg/bytes/asm_386.s:19: TEXT \u00b7Equal(SB),7,$12\nI would like to suggest that this function moves into the runtime package (see the way we do time.now() as an example) so that we have all the moving parts closer together.",
			"disapproval": false,
			"date": "2013-03-28 03:26:05.895740",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Some excellent speedups on arm (chromebook) for Equals, but a\r\nregression on some other benchmarks. A very brief look at the profile\r\nmakes me want to blame the additional branch in Index although there\r\ndoesn't appear to be any stack splitting.\r\n\r\nbenchmark                        old ns/op    new ns/op    delta\r\nBenchmarkReadString                 125100       127392   +1.83%\r\nBenchmarkIndexByte32                    76           90  +18.74%\r\nBenchmarkIndexByte4K                  7605         7298   -4.04%\r\nBenchmarkIndexByte4M               7574065      7567863   -0.08%\r\nBenchmarkIndexByte64M            120986945    120754408   -0.19%\r\nBenchmarkIndexBytePortable32           175          175   +0.00%\r\nBenchmarkIndexBytePortable4K         17347        17338   -0.05%\r\nBenchmarkIndexBytePortable4M      18353531     18341798   -0.06%\r\nBenchmarkIndexBytePortable64M    293546342    293211533   -0.11%\r\nBenchmarkEqual32                        77           63  -17.81%\r\nBenchmarkEqual4K                      7289         1855  -74.55%\r\nBenchmarkEqual4M                   8367520      3209180  -61.65%\r\nBenchmarkEqual64M                142515029     61400849  -56.92%\r\nBenchmarkEqualPort32                   224          224   +0.00%\r\nBenchmarkEqualPort4K                 24263        24250   -0.05%\r\nBenchmarkEqualPortable4M          25179603     25247419   +0.27%\r\nBenchmarkEqualPortable64M        403745450    403779625   +0.01%\r\nBenchmarkIndex32                       816         1302  +59.56%\r\nBenchmarkIndex4K                    120982       192998  +59.53%\r\nBenchmarkIndex4M                 124260183    193296808  +55.56%\r\nBenchmarkIndex64M               1988046002   3095359752  +55.70%\r\nBenchmarkIndexEasy32                   144          161  +11.81%\r\nBenchmarkIndexEasy4K                  7352         7369   +0.23%\r\nBenchmarkIndexEasy4M               7578549      7575628   -0.04%\r\nBenchmarkIndexEasy64M            120737458    120832933   +0.08%\r\nBenchmarkCount32                       818         1241  +51.71%\r\nBenchmarkCount4K                    120977       188073  +55.46%\r\nBenchmarkCount4M                 124265360    192719445  +55.09%\r\nBenchmarkCount64M               1988792002   3085427626  +55.14%\r\nBenchmarkCountEasy32                   142          162  +14.08%\r\nBenchmarkCountEasy4K                  7349         7361   +0.16%\r\nBenchmarkCountEasy4M               7574511      7574003   -0.01%\r\nBenchmarkCountEasy64M            120729902    120718660   -0.01%\r\nBenchmarkFields                  114759929    115037127   +0.24%\r\nBenchmarkFieldsFunc              113932977    113976645   +0.04%\r\nBenchmarkTrimSpace                     345          339   -1.74%\r\n\r\nbenchmark                         old MB/s     new MB/s  speedup\r\nBenchmarkReadString                 261.93       257.22    0.98x\r\nBenchmarkIndexByte32                419.35       353.35    0.84x\r\nBenchmarkIndexByte4K                538.54       561.22    1.04x\r\nBenchmarkIndexByte4M                553.77       554.23    1.00x\r\nBenchmarkIndexByte64M               554.68       555.75    1.00x\r\nBenchmarkIndexBytePortable32        182.72       182.41    1.00x\r\nBenchmarkIndexBytePortable4K        236.11       236.24    1.00x\r\nBenchmarkIndexBytePortable4M        228.53       228.67    1.00x\r\nBenchmarkIndexBytePortable64M       228.61       228.88    1.00x\r\nBenchmarkEqual32                    412.82       502.15    1.22x\r\nBenchmarkEqual4K                    561.90      2207.99    3.93x\r\nBenchmarkEqual4M                    501.26      1306.97    2.61x\r\nBenchmarkEqual64M                   470.89      1092.96    2.32x\r\nBenchmarkEqualPort32                142.66       142.81    1.00x\r\nBenchmarkEqualPort4K                168.82       168.91    1.00x\r\nBenchmarkEqualPortable4M            166.58       166.13    1.00x\r\nBenchmarkEqualPortable64M           166.22       166.20    1.00x\r\nBenchmarkIndex32                     39.19        24.56    0.63x\r\nBenchmarkIndex4K                     33.86        21.22    0.63x\r\nBenchmarkIndex4M                     33.75        21.70    0.64x\r\nBenchmarkIndex64M                    33.76        21.68    0.64x\r\nBenchmarkIndexEasy32                221.74       198.25    0.89x\r\nBenchmarkIndexEasy4K                557.11       555.79    1.00x\r\nBenchmarkIndexEasy4M                553.44       553.66    1.00x\r\nBenchmarkIndexEasy64M               555.82       555.39    1.00x\r\nBenchmarkCount32                     39.08        25.78    0.66x\r\nBenchmarkCount4K                     33.86        21.78    0.64x\r\nBenchmarkCount4M                     33.75        21.76    0.64x\r\nBenchmarkCount64M                    33.74        21.75    0.64x\r\nBenchmarkCountEasy32                225.27       196.43    0.87x\r\nBenchmarkCountEasy4K                557.32       556.37    1.00x\r\nBenchmarkCountEasy4M                553.74       553.78    1.00x\r\nBenchmarkCountEasy64M               555.86       555.91    1.00x\r\nBenchmarkFields                       9.14         9.12    1.00x\r\nBenchmarkFieldsFunc                   9.20         9.20    1.00x\r\n",
			"disapproval": false,
			"date": "2013-03-28 03:55:42.538590",
			"approval": false
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It looks like both the slow Index and Count ones are calling eq with 7-byte\r\nslices.  For some reason that parameter makes it slow.  I'll see what I can\r\ndo to fix that, 7-byte eq is probably pretty common.\r\n\r\n\r\nOn Wed, Mar 27, 2013 at 8:55 PM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> Some excellent speedups on arm (chromebook) for Equals, but a\r\n> regression on some other benchmarks. A very brief look at the profile\r\n> makes me want to blame the additional branch in Index although there\r\n> doesn't appear to be any stack splitting.\r\n>\r\n> benchmark                        old ns/op    new ns/op    delta\r\n> BenchmarkReadString                 125100       127392   +1.83%\r\n> BenchmarkIndexByte32                    76           90  +18.74%\r\n> BenchmarkIndexByte4K                  7605         7298   -4.04%\r\n> BenchmarkIndexByte4M               7574065      7567863   -0.08%\r\n> BenchmarkIndexByte64M            120986945    120754408   -0.19%\r\n> BenchmarkIndexBytePortable32           175          175   +0.00%\r\n> BenchmarkIndexBytePortable4K         17347        17338   -0.05%\r\n> BenchmarkIndexBytePortable4M      18353531     18341798   -0.06%\r\n> BenchmarkIndexBytePortable64M    293546342    293211533   -0.11%\r\n> BenchmarkEqual32                        77           63  -17.81%\r\n> BenchmarkEqual4K                      7289         1855  -74.55%\r\n> BenchmarkEqual4M                   8367520      3209180  -61.65%\r\n> BenchmarkEqual64M                142515029     61400849  -56.92%\r\n> BenchmarkEqualPort32                   224          224   +0.00%\r\n> BenchmarkEqualPort4K                 24263        24250   -0.05%\r\n> BenchmarkEqualPortable4M          25179603     25247419   +0.27%\r\n> BenchmarkEqualPortable64M        403745450    403779625   +0.01%\r\n> BenchmarkIndex32                       816         1302  +59.56%\r\n> BenchmarkIndex4K                    120982       192998  +59.53%\r\n> BenchmarkIndex4M                 124260183    193296808  +55.56%\r\n> BenchmarkIndex64M               1988046002   3095359752  +55.70%\r\n> BenchmarkIndexEasy32                   144          161  +11.81%\r\n> BenchmarkIndexEasy4K                  7352         7369   +0.23%\r\n> BenchmarkIndexEasy4M               7578549      7575628   -0.04%\r\n> BenchmarkIndexEasy64M            120737458    120832933   +0.08%\r\n> BenchmarkCount32                       818         1241  +51.71%\r\n> BenchmarkCount4K                    120977       188073  +55.46%\r\n> BenchmarkCount4M                 124265360    192719445  +55.09%\r\n> BenchmarkCount64M               1988792002   3085427626  +55.14%\r\n> BenchmarkCountEasy32                   142          162  +14.08%\r\n> BenchmarkCountEasy4K                  7349         7361   +0.16%\r\n> BenchmarkCountEasy4M               7574511      7574003   -0.01%\r\n> BenchmarkCountEasy64M            120729902    120718660   -0.01%\r\n> BenchmarkFields                  114759929    115037127   +0.24%\r\n> BenchmarkFieldsFunc              113932977    113976645   +0.04%\r\n> BenchmarkTrimSpace                     345          339   -1.74%\r\n>\r\n> benchmark                         old MB/s     new MB/s  speedup\r\n> BenchmarkReadString                 261.93       257.22    0.98x\r\n> BenchmarkIndexByte32                419.35       353.35    0.84x\r\n> BenchmarkIndexByte4K                538.54       561.22    1.04x\r\n> BenchmarkIndexByte4M                553.77       554.23    1.00x\r\n> BenchmarkIndexByte64M               554.68       555.75    1.00x\r\n> BenchmarkIndexBytePortable32        182.72       182.41    1.00x\r\n> BenchmarkIndexBytePortable4K        236.11       236.24    1.00x\r\n> BenchmarkIndexBytePortable4M        228.53       228.67    1.00x\r\n> BenchmarkIndexBytePortable64M       228.61       228.88    1.00x\r\n> BenchmarkEqual32                    412.82       502.15    1.22x\r\n> BenchmarkEqual4K                    561.90      2207.99    3.93x\r\n> BenchmarkEqual4M                    501.26      1306.97    2.61x\r\n> BenchmarkEqual64M                   470.89      1092.96    2.32x\r\n> BenchmarkEqualPort32                142.66       142.81    1.00x\r\n> BenchmarkEqualPort4K                168.82       168.91    1.00x\r\n> BenchmarkEqualPortable4M            166.58       166.13    1.00x\r\n> BenchmarkEqualPortable64M           166.22       166.20    1.00x\r\n> BenchmarkIndex32                     39.19        24.56    0.63x\r\n> BenchmarkIndex4K                     33.86        21.22    0.63x\r\n> BenchmarkIndex4M                     33.75        21.70    0.64x\r\n> BenchmarkIndex64M                    33.76        21.68    0.64x\r\n> BenchmarkIndexEasy32                221.74       198.25    0.89x\r\n> BenchmarkIndexEasy4K                557.11       555.79    1.00x\r\n> BenchmarkIndexEasy4M                553.44       553.66    1.00x\r\n> BenchmarkIndexEasy64M               555.82       555.39    1.00x\r\n> BenchmarkCount32                     39.08        25.78    0.66x\r\n> BenchmarkCount4K                     33.86        21.78    0.64x\r\n> BenchmarkCount4M                     33.75        21.76    0.64x\r\n> BenchmarkCount64M                    33.74        21.75    0.64x\r\n> BenchmarkCountEasy32                225.27       196.43    0.87x\r\n> BenchmarkCountEasy4K                557.32       556.37    1.00x\r\n> BenchmarkCountEasy4M                553.74       553.78    1.00x\r\n> BenchmarkCountEasy64M               555.86       555.91    1.00x\r\n> BenchmarkFields                       9.14         9.12    1.00x\r\n> BenchmarkFieldsFunc                   9.20         9.20    1.00x\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-28 04:25:42.676810",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"khr@golang.org",
				"bradfitz@golang.org",
				"r@golang.org",
				"khr@google.com",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I have added the following benchmarks to runtime/string_test.go:\n\nfunc BenchmarkCompareStringBigUnaligned(b *testing.B) {\n\tbytes := make([]byte, 0, 1<<20)\n\tfor len(bytes) < 1<<20 {\n\t\tbytes = append(bytes, \"Hello Gophers!\"...)\n\t}\n\ts1, s2 := string(bytes), \"hello\"+string(bytes)\n\tfor i := 0; i < b.N; i++ {\n\t\tif s1 != s2[len(\"hello\"):] {\n\t\t\tb.Fatal(\"s1 != s2\")\n\t\t}\n\t}\n      b.SetBytes(int64(len(s1)))\n}\n\nfunc BenchmarkCompareStringBig(b *testing.B) {\n\tbytes := make([]byte, 0, 1<<20)\n\tfor len(bytes) < 1<<20 {\n\t\tbytes = append(bytes, \"Hello Gophers!\"...)\n\t}\n\ts1, s2 := string(bytes), string(bytes)\n\tfor i := 0; i < b.N; i++ {\n\t\tif s1 != s2 {\n\t\t\tb.Fatal(\"s1 != s2\")\n\t\t}\n\t}\n      b.SetBytes(int64(len(s1)))\n}\n\nAnd obtained the following results on ARM (ODROID-X)\n\nbenchmark                             old ns/op    new ns/op    delta\nBenchmarkCompareStringBigUnaligned     11285388      2904806  -74.26%\nBenchmarkCompareStringBig              10686704      1807713  -83.08%\n\nbenchmark                              old MB/s     new MB/s  speedup\nBenchmarkCompareStringBigUnaligned        92.92       360.98    3.88x\nBenchmarkCompareStringBig                 98.12       580.06    5.91x\n\nI could squeeze a bit more (20%) on ARM by using the following form for the unaligned case (Dave, do you want to run your benchmarks on this?):\n\n\t// B is not aligned.  Compare the word at A\n\t// with the value constructed from the\n\t// two words near B.\n\t// Note: this code is little-endian specific.\n        // Beware that R9, R10 are reserved for m, g.\n        // R11 can be used by linker.\n\tMOVW\t(R4), R7\none_aligned:\n\tCMP\t$4, R3\n\tBLO\ttail\n\tMOVW\tR7>>R5, R12\n\tMOVW.W\t4(R4), R7\n\tORR\tR7<<R6, R12\n\tMOVW.P\t4(R1), R8\n\tADD\t$4, R2\n\tSUB\t$4, R3\n\tCMP\tR8, R12\n\tBEQ\tone_aligned\n\tMOVW\t$0, R0\n\tRET",
			"disapproval": false,
			"date": "2013-03-28 07:31:24.523490",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"khr@golang.org",
				"bradfitz@golang.org",
				"r@golang.org",
				"khr@google.com",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8056043/diff/18001/src/pkg/bytes/bytes_test.go\nFile src/pkg/bytes/bytes_test.go (right):\n\nhttps://codereview.appspot.com/8056043/diff/18001/src/pkg/bytes/bytes_test.go#newcode92\nsrc/pkg/bytes/bytes_test.go:92: \nI would have added a test like this:\n\nfunc TestEqual(t *testing.T) {\n      b1 := make([]byte, 64)\n      b2 := make([]byte, 64)\n      for l := 0; l <= 56; l++ {\n            for off1 := 0; off1 < 8; off1++ {\n                  for off2 := 0; off2 < 8; off2++ {\n                        for diffoff := 0; diffoff <= l; diffoff++ {\n                              for i := range b1 {\n                                    b1[i], b2[i] = 0, 0\n                              }\n                              for i := 0; i < l; i++ {\n                                    b1[off1+i], b2[off2+i] = byte(i), byte(i)\n                              }\n                              b1[off1+diffoff], b2[off2+diffoff] = 'x', 'y'\n                              cmp := Equal(b1[off1:off1+l], b2[off2:off2+l])\n                              if cmp != (diffoff == l) {\n                                    t.Errorf(\"Equal(%q, %q) = %v\", b1[off1:off1+l], b2[off2:off2+l], cmp)\n                              }\n                        }\n                  }\n            }\n      }\n}",
			"disapproval": false,
			"date": "2013-03-28 07:43:58.124110",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"khr@golang.org",
				"bradfitz@golang.org",
				"r@golang.org",
				"khr@google.com",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/28 07:31:24, remyoudompheng wrote:\n> I could squeeze a bit more (20%) on ARM by using the following form for the\n> unaligned case (Dave, do you want to run your benchmarks on this?):\n> \n> \t// B is not aligned.  Compare the word at A\n> \t// with the value constructed from the\n> \t// two words near B.\n> \t// Note: this code is little-endian specific.\n>         // Beware that R9, R10 are reserved for m, g.\n>         // R11 can be used by linker.\n> \tMOVW\t(R4), R7\n> one_aligned:\n> \tCMP\t$4, R3\n> \tBLO\ttail\n> \tMOVW\tR7>>R5, R12\n> \tMOVW.W\t4(R4), R7\n> \tORR\tR7<<R6, R12\n> \tMOVW.P\t4(R1), R8\n> \tADD\t$4, R2\n> \tSUB\t$4, R3\n> \tCMP\tR8, R12\n> \tBEQ\tone_aligned\n> \tMOVW\t$0, R0\n> \tRET\n\nMore precisely, I obtained this result compared to the original proposal:\n\nbenchmark                             old ns/op    new ns/op    delta\nBenchmarkCompareStringBigUnaligned      2894508      2447519  -15.44%\nBenchmarkCompareStringBig               1802048      1811376   +0.52%\n\nbenchmark                              old MB/s     new MB/s  speedup\nBenchmarkCompareStringBigUnaligned       362.27       428.43    1.18x\nBenchmarkCompareStringBig                581.89       578.89    0.99x",
			"disapproval": false,
			"date": "2013-03-28 07:51:10.790730",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Mar 31, 2013 at 12:51 AM, Anthony Martin <ality@pbrane.org> wrote:\r\n> minux <minux.ma@gmail.com> once said:\r\n> We should mention somewhere that the minimum requirement is\r\n> a P6 family processor (i686) with MMX extensions, i.e., the\r\n> Pentium II.\r\nAgreed.\r\n\r\nFor the record,\r\nwe require MMX because sync/atomic uses MMX instructions for 64-bit atomic.\r\nwe require Pentium-Pro (P6 class) because we use FUCOMI for FP comparison\r\nin 8g.\r\nbecause Pentium Pro is the only P6 class processor that doesn't support MMX,\r\nwe need Pentium II or higher.\r\n\r\nI'm not familiar with AMD produce line, so could someone familiar with it supply\r\nthe info for AMD CPU and update doc/install.html?\r\n",
			"disapproval": false,
			"date": "2013-03-30 17:08:48.265160",
			"approval": false
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Dave:\r\nI've moved bytes.Equal to the runtime files.  Good idea, that puts all that\r\ncode in one place.\r\nTry your benchmarks again, I've special-cased <8 byte comparisons, they\r\nshould be only slightly slower than before.\r\n\r\nRemy:\r\nI've included your test and your optimization, thanks.\r\nDid you check in your benchmarks, or should I include them in my patch?\r\n\r\nBrad:\r\nI've changed the amd64/386 code quite a bit, seems that REP;CMPSx has a\r\nsignificant startup cost and we're better off just explicitly looping.\r\n\r\n\r\nOn Thu, Mar 28, 2013 at 12:51 AM, <remyoudompheng@gmail.com> wrote:\r\n\r\n> On 2013/03/28 07:31:24, remyoudompheng wrote:\r\n>\r\n>> I could squeeze a bit more (20%) on ARM by using the following form\r\n>>\r\n> for the\r\n>\r\n>> unaligned case (Dave, do you want to run your benchmarks on this?):\r\n>>\r\n>\r\n>          // B is not aligned.  Compare the word at A\r\n>>         // with the value constructed from the\r\n>>         // two words near B.\r\n>>         // Note: this code is little-endian specific.\r\n>>          // Beware that R9, R10 are reserved for m, g.\r\n>>          // R11 can be used by linker.\r\n>>         MOVW    (R4), R7\r\n>> one_aligned:\r\n>>         CMP     $4, R3\r\n>>         BLO     tail\r\n>>         MOVW    R7>>R5, R12\r\n>>         MOVW.W  4(R4), R7\r\n>>         ORR     R7<<R6, R12\r\n>>         MOVW.P  4(R1), R8\r\n>>         ADD     $4, R2\r\n>>         SUB     $4, R3\r\n>>         CMP     R8, R12\r\n>>         BEQ     one_aligned\r\n>>         MOVW    $0, R0\r\n>>         RET\r\n>>\r\n>\r\n> More precisely, I obtained this result compared to the original\r\n> proposal:\r\n>\r\n>\r\n> benchmark                             old ns/op    new ns/op    delta\r\n> BenchmarkCompareStringBigUnali**gned      2894508      2447519  -15.44%\r\n> BenchmarkCompareStringBig               1802048      1811376   +0.52%\r\n>\r\n>\r\n> benchmark                              old MB/s     new MB/s  speedup\r\n> BenchmarkCompareStringBigUnali**gned       362.27       428.43    1.18x\r\n> BenchmarkCompareStringBig                581.89       578.89    0.99x\r\n>\r\n>\r\n> https://codereview.appspot.**com/8056043/<https://codereview.appspot.com/8056043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-29 07:06:48.087840",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"khr@golang.org",
				"bradfitz@golang.org",
				"r@golang.org",
				"khr@google.com",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"fullung@gmail.com",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8056043/diff/39001/src/pkg/runtime/mapspeed_test.go\nFile src/pkg/runtime/mapspeed_test.go (right):\n\nhttps://codereview.appspot.com/8056043/diff/39001/src/pkg/runtime/mapspeed_test.go#newcode124\nsrc/pkg/runtime/mapspeed_test.go:124: key := strings.Repeat(\"X\", 1<<20)\nOn 2013/03/29 07:26:09, bradfitz wrote:\n> move this up a line and just say m[key] = true\n\nOh, you probably did it this way so their .str fields were different, to avoid that fastpath.  Leave a comment?\n\nkey1 := strings.Repeat(\"X\", 1<<20)\nkey2 := strings.Repeat(\"X\", 1<<20) // equal but different instance",
			"disapproval": false,
			"date": "2013-03-29 15:44:03.208550",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"khr@golang.org",
				"bradfitz@golang.org",
				"r@golang.org",
				"khr@google.com",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nAssembly people should chime in, though.\n\nhttps://codereview.appspot.com/8056043/diff/39001/src/pkg/bytes/bytes_test.go\nFile src/pkg/bytes/bytes_test.go (right):\n\nhttps://codereview.appspot.com/8056043/diff/39001/src/pkg/bytes/bytes_test.go#newcode335\nsrc/pkg/bytes/bytes_test.go:335: buf := make([]byte, 4)\nor:\nvar buf [4]byte\n\nhttps://codereview.appspot.com/8056043/diff/39001/src/pkg/runtime/asm_386.s\nFile src/pkg/runtime/asm_386.s (right):\n\nhttps://codereview.appspot.com/8056043/diff/39001/src/pkg/runtime/asm_386.s#newcode996\nsrc/pkg/runtime/asm_386.s:996: TEXT bytes\u00b7Equal(SB),7,$0\nThis seems like new precedent. At least leave a comment above \"func equalPortable\" in pkg/bytes/bytes.go directing people where to find Equal.\n\nLike:\n\n// func Equal is implemented in assembly in pkg/runtime for\n// amd64, 386, and arm.\n\nThen grepping for \"func Equal\" finds it.\n\nhttps://codereview.appspot.com/8056043/diff/39001/src/pkg/runtime/mapspeed_test.go\nFile src/pkg/runtime/mapspeed_test.go (right):\n\nhttps://codereview.appspot.com/8056043/diff/39001/src/pkg/runtime/mapspeed_test.go#newcode124\nsrc/pkg/runtime/mapspeed_test.go:124: key := strings.Repeat(\"X\", 1<<20)\nmove this up a line and just say m[key] = true",
			"disapproval": false,
			"date": "2013-03-29 07:26:09.762460",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"khr@golang.org",
				"bradfitz@golang.org",
				"r@golang.org",
				"khr@google.com",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/29 07:06:48, khr1 wrote:\n> Dave:\n> I've moved bytes.Equal to the runtime files.  Good idea, that puts all that\n> code in one place.\n> Try your benchmarks again, I've special-cased <8 byte comparisons, they\n> should be only slightly slower than before.\n> \n> Remy:\n> I've included your test and your optimization, thanks.\n> Did you check in your benchmarks, or should I include them in my patch?\n\nYes, please include my string_test.go proposals if you wish.\nDid you update the benchmarks in issue description?\n\nWhat is the speed difference between REP MOVSQ and the SSE2 way on amd64?",
			"disapproval": false,
			"date": "2013-03-29 07:34:57.069780",
			"approval": false
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Mar 29, 2013 at 12:26 AM, <bradfitz@golang.org> wrote:\r\n\r\n> LGTM\r\n>\r\n> Assembly people should chime in, though.\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.**com/8056043/diff/39001/src/**\r\n> pkg/bytes/bytes_test.go<https://codereview.appspot.com/8056043/diff/39001/src/pkg/bytes/bytes_test.go>\r\n> File src/pkg/bytes/bytes_test.go (right):\r\n>\r\n> https://codereview.appspot.**com/8056043/diff/39001/src/**\r\n> pkg/bytes/bytes_test.go#**newcode335<https://codereview.appspot.com/8056043/diff/39001/src/pkg/bytes/bytes_test.go#newcode335>\r\n> src/pkg/bytes/bytes_test.go:**335: buf := make([]byte, 4)\r\n> or:\r\n> var buf [4]byte\r\n>\r\n> https://codereview.appspot.**com/8056043/diff/39001/src/**\r\n> pkg/runtime/asm_386.s<https://codereview.appspot.com/8056043/diff/39001/src/pkg/runtime/asm_386.s>\r\n> File src/pkg/runtime/asm_386.s (right):\r\n>\r\n> https://codereview.appspot.**com/8056043/diff/39001/src/**\r\n> pkg/runtime/asm_386.s#**newcode996<https://codereview.appspot.com/8056043/diff/39001/src/pkg/runtime/asm_386.s#newcode996>\r\n> src/pkg/runtime/asm_386.s:996: TEXT bytes\u00b7Equal(SB),7,$0\r\n> This seems like new precedent. At least leave a comment above \"func\r\n> equalPortable\" in pkg/bytes/bytes.go directing people where to find\r\n> Equal.\r\n>\r\n> Like:\r\n>\r\n> // func Equal is implemented in assembly in pkg/runtime for\r\n> // amd64, 386, and arm.\r\n>\r\n> Then grepping for \"func Equal\" finds it.\r\n>\r\n> https://codereview.appspot.**com/8056043/diff/39001/src/**\r\n> pkg/runtime/mapspeed_test.go<https://codereview.appspot.com/8056043/diff/39001/src/pkg/runtime/mapspeed_test.go>\r\n> File src/pkg/runtime/mapspeed_test.**go (right):\r\n>\r\n> https://codereview.appspot.**com/8056043/diff/39001/src/**\r\n> pkg/runtime/mapspeed_test.go#**newcode124<https://codereview.appspot.com/8056043/diff/39001/src/pkg/runtime/mapspeed_test.go#newcode124>\r\n> src/pkg/runtime/mapspeed_test.**go:124: key := strings.Repeat(\"X\", 1<<20)\r\n> move this up a line and just say m[key] = true\r\n>\r\n\r\nI want two different strings so the memory comparison has to happen.  With\r\nyour change, it could (and does) detect equality by just comparing pointers.\r\n\r\n\r\n>\r\n> https://codereview.appspot.**com/8056043/<https://codereview.appspot.com/8056043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-29 07:38:26.616090",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"khr@golang.org",
				"bradfitz@golang.org",
				"r@golang.org",
				"khr@google.com",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8056043/diff/39001/src/pkg/runtime/asm_386.s\nFile src/pkg/runtime/asm_386.s (right):\n\nhttps://codereview.appspot.com/8056043/diff/39001/src/pkg/runtime/asm_386.s#newcode1027\nsrc/pkg/runtime/asm_386.s:1027: PCMPEQB\tX1, X0\nDo we explicitly require SSE2 on 386 now?\nMaybe we should document what is required by the runtime code (this instruction for atomics, that one for blah...).\n\nI don't think SSE2 is a requirement for Go 1.1, but I don't remember exactly. I would adda CPUID check and switch to the REP MOVSL way if no SSE2 is avaiable.",
			"disapproval": false,
			"date": "2013-03-29 07:38:39.037690",
			"approval": false
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The SSE way is about 2x as fast, at least when the strings are intermediate\r\nlength.  For really long strings there isn't much difference because it's\r\nlimited by memory bandwidth.\r\n\r\nThose SSE2 instructions are already being used in\r\nbytes/asm_amd64.s:IndexByte, so they are OK for amd64 at least.  I'll ask\r\naround about 386.\r\n\r\nI'll update the benchmark numbers tomorrow.\r\n\r\n\r\nOn Fri, Mar 29, 2013 at 12:34 AM, <remyoudompheng@gmail.com> wrote:\r\n\r\n> On 2013/03/29 07:06:48, khr1 wrote:\r\n>\r\n>> Dave:\r\n>> I've moved bytes.Equal to the runtime files.  Good idea, that puts all\r\n>>\r\n> that\r\n>\r\n>> code in one place.\r\n>> Try your benchmarks again, I've special-cased <8 byte comparisons,\r\n>>\r\n> they\r\n>\r\n>> should be only slightly slower than before.\r\n>>\r\n>\r\n>  Remy:\r\n>> I've included your test and your optimization, thanks.\r\n>> Did you check in your benchmarks, or should I include them in my\r\n>>\r\n> patch?\r\n>\r\n> Yes, please include my string_test.go proposals if you wish.\r\n> Did you update the benchmarks in issue description?\r\n>\r\n> What is the speed difference between REP MOVSQ and the SSE2 way on\r\n> amd64?\r\n>\r\n> https://codereview.appspot.**com/8056043/<https://codereview.appspot.com/8056043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-29 07:53:58.823600",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"khr@golang.org",
				"bradfitz@golang.org",
				"r@golang.org",
				"khr@google.com",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks Keith, I'll get to benchmarking.\n\nhttps://codereview.appspot.com/8056043/diff/39001/src/pkg/runtime/asm_386.s\nFile src/pkg/runtime/asm_386.s (right):\n\nhttps://codereview.appspot.com/8056043/diff/39001/src/pkg/runtime/asm_386.s#newcode996\nsrc/pkg/runtime/asm_386.s:996: TEXT bytes\u00b7Equal(SB),7,$0\nOn 2013/03/29 07:26:09, bradfitz wrote:\n> This seems like new precedent. At least leave a comment above \"func\n> equalPortable\" in pkg/bytes/bytes.go directing people where to find Equal.\n> \n> Like:\n> \n> // func Equal is implemented in assembly in pkg/runtime for\n> // amd64, 386, and arm.\n> \n> Then grepping for \"func Equal\" finds it.\n\nThis was my suggestion. I believe the are precedents from the time package. It does deserve a comment.",
			"disapproval": false,
			"date": "2013-03-29 09:03:03.523190",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"khr@golang.org",
				"bradfitz@golang.org",
				"r@golang.org",
				"khr@google.com",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"fullung@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks very good compared to glibc 4.7.2 on a Core i7-3720QM:\n\nBenchmarkRuntimeMemequal1K 25993.11 MB/s\nBenchmarkRuntimeMemequal1M 15857.93 MB/s [2]\nBenchmarkRuntimeMemequal1G 9783.48 MB/s\nBenchmarkStringEqual1M     16991.31 MB/s\n\nvs\n\nBenchmarkMemcmp1K  12672.80 MB/s [1]\nBenchmarkMemcmp1M  20434.50 MB/s [2]\nBenchmarkMemcmp1G  9518.44 MB/s\nBenchmarkStrncmp1M 15551.37 MB/s\n\n[1] BenchmarkMemcmp1K has some cgo overhead.\n\n[2] This difference might be worth a look:\n\nlooking at bytes.Equal vs memcmp:\n\nBenchmarkBytesEqual1K   29738.67 MB/s\nBenchmarkBytesEqual32K  22170.51 MB/s\nBenchmarkBytesEqual64K  22458.35 MB/s\nBenchmarkBytesEqual128K 21313.28 MB/s\nBenchmarkBytesEqual256K\t16965.64 MB/s\nBenchmarkBytesEqual512K\t16581.24 MB/s\nBenchmarkBytesEqual1M\t16706.55 MB/s\n\nBenchmarkMemcmp32Kb     23958.85 MB/s\nBenchmarkMemcmp64K      26175.43 MB/s\nBenchmarkMemcmp128K     27440.97 MB/s\nBenchmarkMemcmp256K     25026.15 MB/s\nBenchmarkMemcmp512K     22581.35 MB/s\nBenchmarkMemcmp1M       19161.69 MB/s\nBenchmarkMemcmp2M       16326.83 MB/s\n\nThe Go functions have some kind of crossover point at around 256K which only kicks in at around 2M in glibc.\n\ncode here: github.com/alberts/gofrags",
			"disapproval": false,
			"date": "2013-03-29 14:25:00.180300",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Mar 29, 2013 at 3:53 PM, Keith Randall <khr@google.com> wrote:\r\n> The SSE way is about 2x as fast, at least when the strings are intermediate length.  For really long strings there isn't much difference because it's limited by memory bandwidth.\r\n> Those SSE2 instructions are already being used in bytes/asm_amd64.s:IndexByte, so they are OK for amd64 at least.  I'll ask around about 386.\r\nplease use cpuid to detect sse2 on 386 as we still support as old as\r\npentium mmx chips.\r\nsse2 is required feature for amd64 so using it is ok.\r\n",
			"disapproval": false,
			"date": "2013-03-29 14:44:25.159980",
			"approval": false
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> This was my suggestion. I believe the are precedents from the time\r\n> package. It does deserve a comment.\r\n\r\nThere is already a declaration + comment for Equal in bytes_decl.go.\r\nI've updated the comment to point to runtime.\r\n\r\n> please use cpuid to detect sse2 on 386 as we still support as old as\r\n> pentium mmx chips.\r\n\r\nDone.\r\n\r\n> key1 := strings.Repeat(\"X\", 1<<20)\r\n> key2 := strings.Repeat(\"X\", 1<<20) // equal but different instance\r\n\r\nDone.\r\n\r\n> The Go functions have some kind of crossover point at around 256K which\r\n> only kicks in at around 2M in glibc.\r\n\r\n> [2] This difference might be worth a look:\r\n\r\nThere are a lot of things that could be making a difference here.  Maybe\r\nthey do prefetching, maybe they do the extra work to use aligned loads, ...\r\n I'll take a look at the glibc code, it might have some useful ideas in it.\r\n\r\nOn Fri, Mar 29, 2013 at 8:44 AM, <bradfitz@golang.org> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/8056043/diff/39001/src/**\r\n> pkg/runtime/mapspeed_test.go<https://codereview.appspot.com/8056043/diff/39001/src/pkg/runtime/mapspeed_test.go>\r\n> File src/pkg/runtime/mapspeed_test.**go (right):\r\n>\r\n> https://codereview.appspot.**com/8056043/diff/39001/src/**\r\n> pkg/runtime/mapspeed_test.go#**newcode124<https://codereview.appspot.com/8056043/diff/39001/src/pkg/runtime/mapspeed_test.go#newcode124>\r\n> src/pkg/runtime/mapspeed_test.**go:124: key := strings.Repeat(\"X\", 1<<20)\r\n> On 2013/03/29 07:26:09, bradfitz wrote:\r\n>\r\n>> move this up a line and just say m[key] = true\r\n>>\r\n>\r\n> Oh, you probably did it this way so their .str fields were different, to\r\n> avoid that fastpath.  Leave a comment?\r\n>\r\n> key1 := strings.Repeat(\"X\", 1<<20)\r\n> key2 := strings.Repeat(\"X\", 1<<20) // equal but different instance\r\n>\r\n> https://codereview.appspot.**com/8056043/<https://codereview.appspot.com/8056043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-29 17:16:39.995660",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "minux <minux.ma@gmail.com> once said:\r\n> On Fri, Mar 29, 2013 at 3:53 PM, Keith Randall <khr@google.com> wrote:\r\n> > I'll ask around about 386.\r\n> please use cpuid to detect sse2 on 386 as we still support as old as\r\n> pentium mmx chips.\r\n> sse2 is required feature for amd64 so using it is ok.\r\n\r\nAccording to my notes\u00b9:\r\n\r\nWe haven't supported the Pentium MMX since January of 2010.\r\nAround that time, the compiler started emitting FUCOMIP\r\nduring floating point codegen so the bare minimum was a\r\nPentium Pro.\r\n\r\nThe math package started using FUCOMI at the same time.\r\n\r\nIn May of 2012, Russ added the PREFETCH builtin for the\r\ngarbage collector which causes 8c to generate PREFETCHNTA.\r\nThis bumped the lower limit up to the Pentium III.\r\n\r\nI don't know how the PREFETCH instructions are decoded\r\non processors older than the Pentium III. I was 11 when\r\nit came out. :)\r\n\r\nDoes it end up as a NOP like PAUSE?\r\nIf so, the oldest we support is a Pentium Pro.\r\nIf not, the oldest is a Pentium III.\r\n\r\n  Anthony\r\n\r\n1. I keep a file of notes about how the toolchain differs\r\n   from the original Plan 9 code.\r\n",
			"disapproval": false,
			"date": "2013-03-29 17:58:09.480350",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"khr@golang.org",
				"bradfitz@golang.org",
				"r@golang.org",
				"khr@google.com",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"fullung@gmail.com",
				"minux.ma@gmail.com",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8056043/diff/35002/src/pkg/bytes/bytes_test.go\nFile src/pkg/bytes/bytes_test.go (right):\n\nhttps://codereview.appspot.com/8056043/diff/35002/src/pkg/bytes/bytes_test.go#newcode94\nsrc/pkg/bytes/bytes_test.go:94: b1 := make([]byte, 64)\nconst size = 64\n\nhttps://codereview.appspot.com/8056043/diff/35002/src/pkg/bytes/bytes_test.go#newcode102\nsrc/pkg/bytes/bytes_test.go:102: }\noutside the loop create\nzeros := make([]byte, size)\nthen\ncopy(b1, zeros)\ncopy(b2, zeros)\nmakes it very clear",
			"disapproval": false,
			"date": "2013-03-29 18:39:46.354360",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Anthony Martin <ality@pbrane.org> once said:\r\n> minux <minux.ma@gmail.com> once said:\r\n> > On Fri, Mar 29, 2013 at 3:53 PM, Keith Randall <khr@google.com> wrote:\r\n> > > I'll ask around about 386.\r\n> > please use cpuid to detect sse2 on 386 as we still support as old as\r\n> > pentium mmx chips.\r\n> > sse2 is required feature for amd64 so using it is ok.\r\n> \r\n> According to my notes\u00b9:\r\n> \r\n> We haven't supported the Pentium MMX since January of 2010.\r\n> Around that time, the compiler started emitting FUCOMIP\r\n> during floating point codegen so the bare minimum was a\r\n> Pentium Pro.\r\n> \r\n> The math package started using FUCOMI at the same time.\r\n> \r\n> In May of 2012, Russ added the PREFETCH builtin for the\r\n> garbage collector which causes 8c to generate PREFETCHNTA.\r\n> This bumped the lower limit up to the Pentium III.\r\n> \r\n> I don't know how the PREFETCH instructions are decoded\r\n> on processors older than the Pentium III. I was 11 when\r\n> it came out. :)\r\n> \r\n> Does it end up as a NOP like PAUSE?\r\n> If so, the oldest we support is a Pentium Pro.\r\n> If not, the oldest is a Pentium III.\r\n> \r\n>   Anthony\r\n> \r\n> 1. I keep a file of notes about how the toolchain differs\r\n>    from the original Plan 9 code.\r\n> \r\n\r\nPlease s/Pentium Pro/Pentium II/ before reading.\r\nI forgot that the Pro didn't have MMX.\r\n\r\n  Anthony\r\n",
			"disapproval": false,
			"date": "2013-03-29 19:07:09.844260",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Mar 30, 2013 at 1:58 AM, Anthony Martin <ality@pbrane.org> wrote:\r\n> According to my notes\u00b9:\r\n>\r\n> We haven't supported the Pentium MMX since January of 2010.\r\n> Around that time, the compiler started emitting FUCOMIP\r\n> during floating point codegen so the bare minimum was a\r\n> Pentium Pro.\r\noh, seems this one is correct, we require pentium pro.\r\nthank you for the correction.\r\n\r\n> In May of 2012, Russ added the PREFETCH builtin for the\r\n> garbage collector which causes 8c to generate PREFETCHNTA.\r\n> This bumped the lower limit up to the Pentium III.\r\nin CL 7323061, Russ disabled the generation of PREFETCH instructions\r\nwhen GO386=387 (i.e. sse2 is either not detected or explicitly disabled\r\nby the user), so this is a non-issue now and the minimum supported\r\n386 hardware is still pentium pro.\r\n",
			"disapproval": false,
			"date": "2013-03-30 16:15:25.885420",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "minux <minux.ma@gmail.com> once said:\r\n> On Sat, Mar 30, 2013 at 1:58 AM, Anthony Martin <ality@pbrane.org> wrote:\r\n> > According to my notes\u00b9:\r\n> >\r\n> > We haven't supported the Pentium MMX since January of 2010.\r\n> > Around that time, the compiler started emitting FUCOMIP\r\n> > during floating point codegen so the bare minimum was a\r\n> > Pentium Pro.\r\n> oh, seems this one is correct, we require pentium pro.\r\n> thank you for the correction.\r\n> \r\n> > In May of 2012, Russ added the PREFETCH builtin for the\r\n> > garbage collector which causes 8c to generate PREFETCHNTA.\r\n> > This bumped the lower limit up to the Pentium III.\r\n> in CL 7323061, Russ disabled the generation of PREFETCH instructions\r\n> when GO386=387 (i.e. sse2 is either not detected or explicitly disabled\r\n> by the user), so this is a non-issue now and the minimum supported\r\n> 386 hardware is still pentium pro.\r\n\r\nI see. I overlooked that CL. Thanks.\r\n\r\nWe should mention somewhere that the minimum requirement is\r\na P6 family processor (i686) with MMX extensions, i.e., the\r\nPentium II.\r\n\r\n  Anthony\r\n",
			"disapproval": false,
			"date": "2013-03-30 16:51:48.672220",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"khr@golang.org",
				"bradfitz@golang.org",
				"r@golang.org",
				"khr@google.com",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"fullung@gmail.com",
				"minux.ma@gmail.com",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I benchmarked patchset 10 on my chromebook, the results are mixed. The regressions in the bytes benchmarks appear to flow through in to strings and fmt.\n\nlucky(~) % cat bytes.txt \nbenchmark                           old ns/op    new ns/op    delta\nBenchmarkReadString                    112131       127869  +14.04%\nBenchmarkBufferNotEmptyWriteRead      3634051      3681321   +1.30%\nBenchmarkBufferFullSmallReads          440993       441639   +0.15%\nBenchmarkIndexByte32                       76           76   +0.00%\nBenchmarkIndexByte4K                     7279         7286   +0.10%\nBenchmarkIndexByte4M                  7533005      7564464   +0.42%\nBenchmarkIndexByte64M               120355191    120813462   +0.38%\nBenchmarkIndexBytePortable32              174          175   +0.57%\nBenchmarkIndexBytePortable4K            17302        17342   +0.23%\nBenchmarkIndexBytePortable4M         18276630     18349412   +0.40%\nBenchmarkIndexBytePortable64M       292254766    293383533   +0.39%\nBenchmarkEqual32                           90           60  -33.22%   \nBenchmarkEqual4K                         7285         1853  -74.56%\nBenchmarkEqual4M                      8829644      3517534  -60.16%\nBenchmarkEqual64M                   138950637     59169793  -57.42%\nBenchmarkEqualPort32                      223          224   +0.45%\nBenchmarkEqualPort4K                    24201        24255   +0.22%\nBenchmarkEqualPortable4M             25031372     25131132   +0.40%\nBenchmarkEqualPortable64M           402236591    403740442   +0.37%\nBenchmarkIndex32                          800         1182  +47.75%\nBenchmarkIndex4K                       118306       178704  +51.05%\nBenchmarkIndex4M                    121457245    183889629  +51.40%\nBenchmarkIndex64M                  1943517375   2939630294  +51.25%\nBenchmarkIndexEasy32                      142          142   +0.00%\nBenchmarkIndexEasy4K                     7331         7336   +0.07%\nBenchmarkIndexEasy4M                  7548436      7543304   -0.07%\nBenchmarkIndexEasy64M               120458129    120302727   -0.13%\nBenchmarkCount32                          806         1182  +46.65%\nBenchmarkCount4K                       118344       178649  +50.96%\nBenchmarkCount4M                    121673656    183400741  +50.73%\nBenchmarkCount64M                  1944794002   2934607085  +50.90%\nBenchmarkCountEasy32                      144          141   -2.08%\nBenchmarkCountEasy4K                     7360         7335   -0.34%\nBenchmarkCountEasy4M                  7554226      7564146   +0.13%\nBenchmarkCountEasy64M               120317272    120715047   +0.33%\nBenchmarkFields                     116213231    114222702   -1.71%\nBenchmarkFieldsFunc                 114475948    113263035   -1.06%\nBenchmarkTrimSpace                        342          336   -1.75%\n\nbenchmark                            old MB/s     new MB/s  speedup\nBenchmarkReadString                    292.23       256.26    0.88x\nBenchmarkIndexByte32                   419.49       419.49    1.00x\nBenchmarkIndexByte4K                   562.70       562.14    1.00x\nBenchmarkIndexByte4M                   556.79       554.47    1.00x\nBenchmarkIndexByte64M                  557.59       555.48    1.00x\nBenchmarkIndexBytePortable32           183.22       182.84    1.00x\nBenchmarkIndexBytePortable4K           236.72       236.18    1.00x\nBenchmarkIndexBytePortable4M           229.49       228.58    1.00x\nBenchmarkIndexBytePortable64M          229.62       228.74    1.00x\nBenchmarkEqual32                       354.47       530.72    1.50x\nBenchmarkEqual4K                       562.22      2210.19    3.93x\nBenchmarkEqual4M                       475.03      1192.40    2.51x\nBenchmarkEqual64M                      482.97      1134.17    2.35x\nBenchmarkEqualPort32                   143.47       142.77    1.00x\nBenchmarkEqualPort4K                   169.24       168.87    1.00x\nBenchmarkEqualPortable4M               167.56       166.90    1.00x\nBenchmarkEqualPortable64M              166.84       166.22    1.00x\nBenchmarkIndex32                        39.97        27.07    0.68x\nBenchmarkIndex4K                        34.62        22.92    0.66x\nBenchmarkIndex4M                        34.53        22.81    0.66x\nBenchmarkIndex64M                       34.53        22.83    0.66x\nBenchmarkIndexEasy32                   224.99       224.98    1.00x\nBenchmarkIndexEasy4K                   558.69       558.33    1.00x\nBenchmarkIndexEasy4M                   555.65       556.03    1.00x\nBenchmarkIndexEasy64M                  557.11       557.83    1.00x\nBenchmarkCount32                        39.69        27.06    0.68x\nBenchmarkCount4K                        34.61        22.93    0.66x\nBenchmarkCount4M                        34.47        22.87    0.66x\nBenchmarkCount64M                       34.51        22.87    0.66x\nBenchmarkCountEasy32                   221.56       225.87    1.02x\nBenchmarkCountEasy4K                   556.51       558.36    1.00x\nBenchmarkCountEasy4M                   555.23       554.50    1.00x\nBenchmarkCountEasy64M                  557.77       555.93    1.00x\nBenchmarkFields                          9.02         9.18    1.02x\nBenchmarkFieldsFunc                      9.16         9.26    1.01x\nlucky(~) % cat strings.txt \nbenchmark                           old ns/op    new ns/op    delta\nBenchmarkGenericNoMatch                  7555         7427   -1.69%\nBenchmarkGenericMatch1                  29053        29279   +0.78%\nBenchmarkGenericMatch2                 175206       188767   +7.74%\nBenchmarkSingleMaxSkipping               5981         5976   -0.08%\nBenchmarkSingleLongSuffixFail            6083         6043   -0.66%\nBenchmarkSingleMatch                   376140       385756   +2.56%\nBenchmarkByteByteNoMatch                 2301         2301   +0.00%\nBenchmarkByteByteMatch                   4902         4913   +0.22%\nBenchmarkByteStringMatch                 7346         7210   -1.85%\nBenchmarkHTMLEscapeNew                   2305         2339   +1.48%\nBenchmarkHTMLEscapeOld                   3783         3812   +0.77%\nBenchmarkByteByteReplaces               18253        18348   +0.52%\nBenchmarkByteByteMap                     9875         9685   -1.92%\nBenchmarkIndexRune                        246          254   +3.25%\nBenchmarkIndexRuneFastPath                130          116  -10.77%\nBenchmarkIndex                            129          129   +0.00%\nBenchmarkMapNoChanges                     799          843   +5.51%\nBenchmarkIndexHard1                   7637311      7636978   -0.00%\nBenchmarkIndexHard2                   7647121      7647579   +0.01%\nBenchmarkIndexHard3                   7628415      7637353   +0.12%\nBenchmarkCountHard1                   8250395      8260440   +0.12%\nBenchmarkCountHard2                   8253451      8260638   +0.09%\nBenchmarkCountHard3                   8250371      8263897   +0.16%\nBenchmarkIndexTorture                   47275        47389   +0.24%\nBenchmarkCountTorture                   49252        49139   -0.23%\nBenchmarkCountTortureOverlapping     52097076     29447134  -43.48%\nBenchmarkFields                      90120216     89680439   -0.49%\nBenchmarkFieldsFunc                  90004377     89325775   -0.75%\nBenchmarkSplit1                      76455569     76104520   -0.46%\nBenchmarkSplit2                      20392480     19932127   -2.26%\nBenchmarkSplit3                      18983460     18571189   -2.17%\n\nbenchmark                            old MB/s     new MB/s  speedup\nBenchmarkSingleMaxSkipping            1671.80      1673.30    1.00x\nBenchmarkSingleLongSuffixFail          164.71       165.78    1.01x\nBenchmarkSingleMatch                    39.88        38.88    0.97x\nBenchmarkFields                         11.64        11.69    1.00x\nBenchmarkFieldsFunc                     11.65        11.74    1.01x\nlucky(~) % cat fmt.txt \nbenchmark                      old ns/op    new ns/op    delta\nBenchmarkSprintfEmpty                424          424   +0.00%\nBenchmarkSprintfString              1499         1451   -3.20%\nBenchmarkSprintfInt                 1261         1438  +14.04%\nBenchmarkSprintfIntInt              2042         2031   -0.54%\nBenchmarkSprintfPrefixedInt         2028         2165   +6.76%\nBenchmarkSprintfFloat               3579         3686   +2.99%\nBenchmarkManyArgs                   5573         6130   +9.99%\nBenchmarkScanInts                5413886      5166830   -4.56%\nBenchmarkScanRecursiveInt        6447875      6478815   +0.48%",
			"disapproval": false,
			"date": "2013-03-31 00:04:11.123110",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Mar 30, 2013 at 9:14 PM, Keith Randall <khr@google.com> wrote:\r\n\r\n> I don't understand why it is so slow.  A bit slower, maybe, but not that\r\n> much.  The main loop in both the old and new implementations for n<8 are\r\n> now identical.  (The CountX benchmarks are doing n==7.)  The new\r\n> implementation differs just by a few constant moves, a compare and branch,\r\n> and a BL (together with its stack pointer bump).\r\n>\r\n> I'm happy to revert to the old code if we can't fix this.  I did the arm\r\n> just for completeness, the big wins are in the x86 world.\r\n>\r\n\r\nYeah.  I'm in favor of leaving memeq and memeqbody in runtime/asm_arm.s but\r\ndeleting or renaming bytes\u00b7Equal on arm to bytes\u00b7equalTODOIssueNNNNN where\r\nIssue NNNN is a new bug about investigating this issue specifically on ARM.\r\n",
			"disapproval": false,
			"date": "2013-03-31 22:54:49.705240",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Which arch is your chromebook?\r\n\r\nOn Sat, Mar 30, 2013 at 5:04 PM, <dave@cheney.net> wrote:\r\n\r\n> I benchmarked patchset 10 on my chromebook, the results are mixed. The\r\n> regressions in the bytes benchmarks appear to flow through in to strings\r\n> and fmt.\r\n>\r\n> lucky(~) % cat bytes.txt\r\n>\r\n> benchmark                           old ns/op    new ns/op    delta\r\n> BenchmarkReadString                    112131       127869  +14.04%\r\n> BenchmarkBufferNotEmptyWriteRe**ad      3634051      3681321   +1.30%\r\n> BenchmarkBufferFullSmallReads          440993       441639   +0.15%\r\n> BenchmarkIndexByte32                       76           76   +0.00%\r\n> BenchmarkIndexByte4K                     7279         7286   +0.10%\r\n> BenchmarkIndexByte4M                  7533005      7564464   +0.42%\r\n> BenchmarkIndexByte64M               120355191    120813462   +0.38%\r\n> BenchmarkIndexBytePortable32              174          175   +0.57%\r\n> BenchmarkIndexBytePortable4K            17302        17342   +0.23%\r\n> BenchmarkIndexBytePortable4M         18276630     18349412   +0.40%\r\n> BenchmarkIndexBytePortable64M       292254766    293383533   +0.39%\r\n> BenchmarkEqual32                           90           60  -33.22%\r\n> BenchmarkEqual4K                         7285         1853  -74.56%\r\n> BenchmarkEqual4M                      8829644      3517534  -60.16%\r\n> BenchmarkEqual64M                   138950637     59169793  -57.42%\r\n> BenchmarkEqualPort32                      223          224   +0.45%\r\n> BenchmarkEqualPort4K                    24201        24255   +0.22%\r\n> BenchmarkEqualPortable4M             25031372     25131132   +0.40%\r\n> BenchmarkEqualPortable64M           402236591    403740442   +0.37%\r\n> BenchmarkIndex32                          800         1182  +47.75%\r\n> BenchmarkIndex4K                       118306       178704  +51.05%\r\n> BenchmarkIndex4M                    121457245    183889629  +51.40%\r\n> BenchmarkIndex64M                  1943517375   2939630294  +51.25%\r\n> BenchmarkIndexEasy32                      142          142   +0.00%\r\n> BenchmarkIndexEasy4K                     7331         7336   +0.07%\r\n> BenchmarkIndexEasy4M                  7548436      7543304   -0.07%\r\n> BenchmarkIndexEasy64M               120458129    120302727   -0.13%\r\n> BenchmarkCount32                          806         1182  +46.65%\r\n> BenchmarkCount4K                       118344       178649  +50.96%\r\n> BenchmarkCount4M                    121673656    183400741  +50.73%\r\n> BenchmarkCount64M                  1944794002   2934607085  +50.90%\r\n> BenchmarkCountEasy32                      144          141   -2.08%\r\n> BenchmarkCountEasy4K                     7360         7335   -0.34%\r\n> BenchmarkCountEasy4M                  7554226      7564146   +0.13%\r\n> BenchmarkCountEasy64M               120317272    120715047   +0.33%\r\n> BenchmarkFields                     116213231    114222702   -1.71%\r\n> BenchmarkFieldsFunc                 114475948    113263035   -1.06%\r\n> BenchmarkTrimSpace                        342          336   -1.75%\r\n>\r\n>\r\n> benchmark                            old MB/s     new MB/s  speedup\r\n> BenchmarkReadString                    292.23       256.26    0.88x\r\n> BenchmarkIndexByte32                   419.49       419.49    1.00x\r\n> BenchmarkIndexByte4K                   562.70       562.14    1.00x\r\n> BenchmarkIndexByte4M                   556.79       554.47    1.00x\r\n> BenchmarkIndexByte64M                  557.59       555.48    1.00x\r\n> BenchmarkIndexBytePortable32           183.22       182.84    1.00x\r\n> BenchmarkIndexBytePortable4K           236.72       236.18    1.00x\r\n> BenchmarkIndexBytePortable4M           229.49       228.58    1.00x\r\n> BenchmarkIndexBytePortable64M          229.62       228.74    1.00x\r\n> BenchmarkEqual32                       354.47       530.72    1.50x\r\n> BenchmarkEqual4K                       562.22      2210.19    3.93x\r\n> BenchmarkEqual4M                       475.03      1192.40    2.51x\r\n> BenchmarkEqual64M                      482.97      1134.17    2.35x\r\n> BenchmarkEqualPort32                   143.47       142.77    1.00x\r\n> BenchmarkEqualPort4K                   169.24       168.87    1.00x\r\n> BenchmarkEqualPortable4M               167.56       166.90    1.00x\r\n> BenchmarkEqualPortable64M              166.84       166.22    1.00x\r\n> BenchmarkIndex32                        39.97        27.07    0.68x\r\n> BenchmarkIndex4K                        34.62        22.92    0.66x\r\n> BenchmarkIndex4M                        34.53        22.81    0.66x\r\n> BenchmarkIndex64M                       34.53        22.83    0.66x\r\n> BenchmarkIndexEasy32                   224.99       224.98    1.00x\r\n> BenchmarkIndexEasy4K                   558.69       558.33    1.00x\r\n> BenchmarkIndexEasy4M                   555.65       556.03    1.00x\r\n> BenchmarkIndexEasy64M                  557.11       557.83    1.00x\r\n> BenchmarkCount32                        39.69        27.06    0.68x\r\n> BenchmarkCount4K                        34.61        22.93    0.66x\r\n> BenchmarkCount4M                        34.47        22.87    0.66x\r\n> BenchmarkCount64M                       34.51        22.87    0.66x\r\n> BenchmarkCountEasy32                   221.56       225.87    1.02x\r\n> BenchmarkCountEasy4K                   556.51       558.36    1.00x\r\n> BenchmarkCountEasy4M                   555.23       554.50    1.00x\r\n> BenchmarkCountEasy64M                  557.77       555.93    1.00x\r\n> BenchmarkFields                          9.02         9.18    1.02x\r\n> BenchmarkFieldsFunc                      9.16         9.26    1.01x\r\n> lucky(~) % cat strings.txt\r\n>\r\n> benchmark                           old ns/op    new ns/op    delta\r\n> BenchmarkGenericNoMatch                  7555         7427   -1.69%\r\n> BenchmarkGenericMatch1                  29053        29279   +0.78%\r\n> BenchmarkGenericMatch2                 175206       188767   +7.74%\r\n> BenchmarkSingleMaxSkipping               5981         5976   -0.08%\r\n> BenchmarkSingleLongSuffixFail            6083         6043   -0.66%\r\n> BenchmarkSingleMatch                   376140       385756   +2.56%\r\n> BenchmarkByteByteNoMatch                 2301         2301   +0.00%\r\n> BenchmarkByteByteMatch                   4902         4913   +0.22%\r\n> BenchmarkByteStringMatch                 7346         7210   -1.85%\r\n> BenchmarkHTMLEscapeNew                   2305         2339   +1.48%\r\n> BenchmarkHTMLEscapeOld                   3783         3812   +0.77%\r\n> BenchmarkByteByteReplaces               18253        18348   +0.52%\r\n> BenchmarkByteByteMap                     9875         9685   -1.92%\r\n> BenchmarkIndexRune                        246          254   +3.25%\r\n> BenchmarkIndexRuneFastPath                130          116  -10.77%\r\n> BenchmarkIndex                            129          129   +0.00%\r\n> BenchmarkMapNoChanges                     799          843   +5.51%\r\n> BenchmarkIndexHard1                   7637311      7636978   -0.00%\r\n> BenchmarkIndexHard2                   7647121      7647579   +0.01%\r\n> BenchmarkIndexHard3                   7628415      7637353   +0.12%\r\n> BenchmarkCountHard1                   8250395      8260440   +0.12%\r\n> BenchmarkCountHard2                   8253451      8260638   +0.09%\r\n> BenchmarkCountHard3                   8250371      8263897   +0.16%\r\n> BenchmarkIndexTorture                   47275        47389   +0.24%\r\n> BenchmarkCountTorture                   49252        49139   -0.23%\r\n> BenchmarkCountTortureOverlappi**ng     52097076     29447134  -43.48%\r\n> BenchmarkFields                      90120216     89680439   -0.49%\r\n> BenchmarkFieldsFunc                  90004377     89325775   -0.75%\r\n> BenchmarkSplit1                      76455569     76104520   -0.46%\r\n> BenchmarkSplit2                      20392480     19932127   -2.26%\r\n> BenchmarkSplit3                      18983460     18571189   -2.17%\r\n>\r\n>\r\n> benchmark                            old MB/s     new MB/s  speedup\r\n> BenchmarkSingleMaxSkipping            1671.80      1673.30    1.00x\r\n> BenchmarkSingleLongSuffixFail          164.71       165.78    1.01x\r\n> BenchmarkSingleMatch                    39.88        38.88    0.97x\r\n> BenchmarkFields                         11.64        11.69    1.00x\r\n> BenchmarkFieldsFunc                     11.65        11.74    1.01x\r\n> lucky(~) % cat fmt.txt\r\n>\r\n> benchmark                      old ns/op    new ns/op    delta\r\n> BenchmarkSprintfEmpty                424          424   +0.00%\r\n> BenchmarkSprintfString              1499         1451   -3.20%\r\n> BenchmarkSprintfInt                 1261         1438  +14.04%\r\n> BenchmarkSprintfIntInt              2042         2031   -0.54%\r\n> BenchmarkSprintfPrefixedInt         2028         2165   +6.76%\r\n> BenchmarkSprintfFloat               3579         3686   +2.99%\r\n> BenchmarkManyArgs                   5573         6130   +9.99%\r\n> BenchmarkScanInts                5413886      5166830   -4.56%\r\n> BenchmarkScanRecursiveInt        6447875      6478815   +0.48%\r\n>\r\n>\r\n> https://codereview.appspot.**com/8056043/<https://codereview.appspot.com/8056043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-31 00:54:53.688070",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is the dual A15 Exynos 5 version. I can do some benchmarks on a\r\npandaboard or a RPi but I don't expect much change.\r\n\r\nOn Sun, Mar 31, 2013 at 11:54 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> Which arch is your chromebook?\r\n>\r\n>\r\n> On Sat, Mar 30, 2013 at 5:04 PM, <dave@cheney.net> wrote:\r\n>>\r\n>> I benchmarked patchset 10 on my chromebook, the results are mixed. The\r\n>> regressions in the bytes benchmarks appear to flow through in to strings\r\n>> and fmt.\r\n>>\r\n>> lucky(~) % cat bytes.txt\r\n>>\r\n>> benchmark                           old ns/op    new ns/op    delta\r\n>> BenchmarkReadString                    112131       127869  +14.04%\r\n>> BenchmarkBufferNotEmptyWriteRead      3634051      3681321   +1.30%\r\n>> BenchmarkBufferFullSmallReads          440993       441639   +0.15%\r\n>> BenchmarkIndexByte32                       76           76   +0.00%\r\n>> BenchmarkIndexByte4K                     7279         7286   +0.10%\r\n>> BenchmarkIndexByte4M                  7533005      7564464   +0.42%\r\n>> BenchmarkIndexByte64M               120355191    120813462   +0.38%\r\n>> BenchmarkIndexBytePortable32              174          175   +0.57%\r\n>> BenchmarkIndexBytePortable4K            17302        17342   +0.23%\r\n>> BenchmarkIndexBytePortable4M         18276630     18349412   +0.40%\r\n>> BenchmarkIndexBytePortable64M       292254766    293383533   +0.39%\r\n>> BenchmarkEqual32                           90           60  -33.22%\r\n>> BenchmarkEqual4K                         7285         1853  -74.56%\r\n>> BenchmarkEqual4M                      8829644      3517534  -60.16%\r\n>> BenchmarkEqual64M                   138950637     59169793  -57.42%\r\n>> BenchmarkEqualPort32                      223          224   +0.45%\r\n>> BenchmarkEqualPort4K                    24201        24255   +0.22%\r\n>> BenchmarkEqualPortable4M             25031372     25131132   +0.40%\r\n>> BenchmarkEqualPortable64M           402236591    403740442   +0.37%\r\n>> BenchmarkIndex32                          800         1182  +47.75%\r\n>> BenchmarkIndex4K                       118306       178704  +51.05%\r\n>> BenchmarkIndex4M                    121457245    183889629  +51.40%\r\n>> BenchmarkIndex64M                  1943517375   2939630294  +51.25%\r\n>> BenchmarkIndexEasy32                      142          142   +0.00%\r\n>> BenchmarkIndexEasy4K                     7331         7336   +0.07%\r\n>> BenchmarkIndexEasy4M                  7548436      7543304   -0.07%\r\n>> BenchmarkIndexEasy64M               120458129    120302727   -0.13%\r\n>> BenchmarkCount32                          806         1182  +46.65%\r\n>> BenchmarkCount4K                       118344       178649  +50.96%\r\n>> BenchmarkCount4M                    121673656    183400741  +50.73%\r\n>> BenchmarkCount64M                  1944794002   2934607085  +50.90%\r\n>> BenchmarkCountEasy32                      144          141   -2.08%\r\n>> BenchmarkCountEasy4K                     7360         7335   -0.34%\r\n>> BenchmarkCountEasy4M                  7554226      7564146   +0.13%\r\n>> BenchmarkCountEasy64M               120317272    120715047   +0.33%\r\n>> BenchmarkFields                     116213231    114222702   -1.71%\r\n>> BenchmarkFieldsFunc                 114475948    113263035   -1.06%\r\n>> BenchmarkTrimSpace                        342          336   -1.75%\r\n>>\r\n>>\r\n>> benchmark                            old MB/s     new MB/s  speedup\r\n>> BenchmarkReadString                    292.23       256.26    0.88x\r\n>> BenchmarkIndexByte32                   419.49       419.49    1.00x\r\n>> BenchmarkIndexByte4K                   562.70       562.14    1.00x\r\n>> BenchmarkIndexByte4M                   556.79       554.47    1.00x\r\n>> BenchmarkIndexByte64M                  557.59       555.48    1.00x\r\n>> BenchmarkIndexBytePortable32           183.22       182.84    1.00x\r\n>> BenchmarkIndexBytePortable4K           236.72       236.18    1.00x\r\n>> BenchmarkIndexBytePortable4M           229.49       228.58    1.00x\r\n>> BenchmarkIndexBytePortable64M          229.62       228.74    1.00x\r\n>> BenchmarkEqual32                       354.47       530.72    1.50x\r\n>> BenchmarkEqual4K                       562.22      2210.19    3.93x\r\n>> BenchmarkEqual4M                       475.03      1192.40    2.51x\r\n>> BenchmarkEqual64M                      482.97      1134.17    2.35x\r\n>> BenchmarkEqualPort32                   143.47       142.77    1.00x\r\n>> BenchmarkEqualPort4K                   169.24       168.87    1.00x\r\n>> BenchmarkEqualPortable4M               167.56       166.90    1.00x\r\n>> BenchmarkEqualPortable64M              166.84       166.22    1.00x\r\n>> BenchmarkIndex32                        39.97        27.07    0.68x\r\n>> BenchmarkIndex4K                        34.62        22.92    0.66x\r\n>> BenchmarkIndex4M                        34.53        22.81    0.66x\r\n>> BenchmarkIndex64M                       34.53        22.83    0.66x\r\n>> BenchmarkIndexEasy32                   224.99       224.98    1.00x\r\n>> BenchmarkIndexEasy4K                   558.69       558.33    1.00x\r\n>> BenchmarkIndexEasy4M                   555.65       556.03    1.00x\r\n>> BenchmarkIndexEasy64M                  557.11       557.83    1.00x\r\n>> BenchmarkCount32                        39.69        27.06    0.68x\r\n>> BenchmarkCount4K                        34.61        22.93    0.66x\r\n>> BenchmarkCount4M                        34.47        22.87    0.66x\r\n>> BenchmarkCount64M                       34.51        22.87    0.66x\r\n>> BenchmarkCountEasy32                   221.56       225.87    1.02x\r\n>> BenchmarkCountEasy4K                   556.51       558.36    1.00x\r\n>> BenchmarkCountEasy4M                   555.23       554.50    1.00x\r\n>> BenchmarkCountEasy64M                  557.77       555.93    1.00x\r\n>> BenchmarkFields                          9.02         9.18    1.02x\r\n>> BenchmarkFieldsFunc                      9.16         9.26    1.01x\r\n>> lucky(~) % cat strings.txt\r\n>>\r\n>> benchmark                           old ns/op    new ns/op    delta\r\n>> BenchmarkGenericNoMatch                  7555         7427   -1.69%\r\n>> BenchmarkGenericMatch1                  29053        29279   +0.78%\r\n>> BenchmarkGenericMatch2                 175206       188767   +7.74%\r\n>> BenchmarkSingleMaxSkipping               5981         5976   -0.08%\r\n>> BenchmarkSingleLongSuffixFail            6083         6043   -0.66%\r\n>> BenchmarkSingleMatch                   376140       385756   +2.56%\r\n>> BenchmarkByteByteNoMatch                 2301         2301   +0.00%\r\n>> BenchmarkByteByteMatch                   4902         4913   +0.22%\r\n>> BenchmarkByteStringMatch                 7346         7210   -1.85%\r\n>> BenchmarkHTMLEscapeNew                   2305         2339   +1.48%\r\n>> BenchmarkHTMLEscapeOld                   3783         3812   +0.77%\r\n>> BenchmarkByteByteReplaces               18253        18348   +0.52%\r\n>> BenchmarkByteByteMap                     9875         9685   -1.92%\r\n>> BenchmarkIndexRune                        246          254   +3.25%\r\n>> BenchmarkIndexRuneFastPath                130          116  -10.77%\r\n>> BenchmarkIndex                            129          129   +0.00%\r\n>> BenchmarkMapNoChanges                     799          843   +5.51%\r\n>> BenchmarkIndexHard1                   7637311      7636978   -0.00%\r\n>> BenchmarkIndexHard2                   7647121      7647579   +0.01%\r\n>> BenchmarkIndexHard3                   7628415      7637353   +0.12%\r\n>> BenchmarkCountHard1                   8250395      8260440   +0.12%\r\n>> BenchmarkCountHard2                   8253451      8260638   +0.09%\r\n>> BenchmarkCountHard3                   8250371      8263897   +0.16%\r\n>> BenchmarkIndexTorture                   47275        47389   +0.24%\r\n>> BenchmarkCountTorture                   49252        49139   -0.23%\r\n>> BenchmarkCountTortureOverlapping     52097076     29447134  -43.48%\r\n>> BenchmarkFields                      90120216     89680439   -0.49%\r\n>> BenchmarkFieldsFunc                  90004377     89325775   -0.75%\r\n>> BenchmarkSplit1                      76455569     76104520   -0.46%\r\n>> BenchmarkSplit2                      20392480     19932127   -2.26%\r\n>> BenchmarkSplit3                      18983460     18571189   -2.17%\r\n>>\r\n>>\r\n>> benchmark                            old MB/s     new MB/s  speedup\r\n>> BenchmarkSingleMaxSkipping            1671.80      1673.30    1.00x\r\n>> BenchmarkSingleLongSuffixFail          164.71       165.78    1.01x\r\n>> BenchmarkSingleMatch                    39.88        38.88    0.97x\r\n>> BenchmarkFields                         11.64        11.69    1.00x\r\n>> BenchmarkFieldsFunc                     11.65        11.74    1.01x\r\n>> lucky(~) % cat fmt.txt\r\n>>\r\n>> benchmark                      old ns/op    new ns/op    delta\r\n>> BenchmarkSprintfEmpty                424          424   +0.00%\r\n>> BenchmarkSprintfString              1499         1451   -3.20%\r\n>> BenchmarkSprintfInt                 1261         1438  +14.04%\r\n>> BenchmarkSprintfIntInt              2042         2031   -0.54%\r\n>> BenchmarkSprintfPrefixedInt         2028         2165   +6.76%\r\n>> BenchmarkSprintfFloat               3579         3686   +2.99%\r\n>> BenchmarkManyArgs                   5573         6130   +9.99%\r\n>> BenchmarkScanInts                5413886      5166830   -4.56%\r\n>> BenchmarkScanRecursiveInt        6447875      6478815   +0.48%\r\n>>\r\n>>\r\n>> https://codereview.appspot.com/8056043/\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-31 00:57:13.799400",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"khr@golang.org",
				"bradfitz@golang.org",
				"r@golang.org",
				"khr@google.com",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"fullung@gmail.com",
				"minux.ma@gmail.com",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Here are some linux/386 from a 4 core atom 330.\n\n220887(~) % cat bytes.txt \nbenchmark                           old ns/op    new ns/op    delta\nBenchmarkReadString                    121057       126571   +4.55%\nBenchmarkBufferNotEmptyWriteRead      5503485      5454785   -0.88%\nBenchmarkBufferFullSmallReads          891073       889944   -0.13%\nBenchmarkIndexByte32                       94           94   -0.11%\nBenchmarkIndexByte4K                     7781         7813   +0.41%\nBenchmarkIndexByte4M                  8619393      8483188   -1.58%\nBenchmarkIndexByte64M               136653719    135896031   -0.55%\nBenchmarkIndexBytePortable32              466          465   -0.21%\nBenchmarkIndexBytePortable4K            56721        56661   -0.11%\nBenchmarkIndexBytePortable4M         58213450     58148782   -0.11%\nBenchmarkIndexBytePortable64M       931072226    930535077   -0.06%\nBenchmarkEqual32                          119           63  -46.64%\nBenchmarkEqual4K                        10348         2443  -76.39%\nBenchmarkEqual4M                     11544390      3224185  -72.07%\nBenchmarkEqual64M                   185016250     56713834  -69.35%\nBenchmarkEqualPort32                      782          785   +0.38%\nBenchmarkEqualPort4K                    95370        96032   +0.69%\nBenchmarkEqualPortable4M             98030915     98312648   +0.29%\nBenchmarkEqualPortable64M          1568407685   1573236860   +0.31%\nBenchmarkIndex32                         2319         1923  -17.08%\nBenchmarkIndex4K                       354957       295392  -16.78%\nBenchmarkIndex4M                    364731912    303230991  -16.86%\nBenchmarkIndex64M                  2147483647   2147483647  -16.86%\nBenchmarkIndexEasy32                      227          210   -7.49%\nBenchmarkIndexEasy4K                     7899         7901   +0.03%\nBenchmarkIndexEasy4M                  8486584      8516794   +0.36%\nBenchmarkIndexEasy64M               135771448    136296410   +0.39%\nBenchmarkCount32                         1838         1460  -20.57%\nBenchmarkCount4K                       288436       220826  -23.44%\nBenchmarkCount4M                    286733235    227035260  -20.82%\nBenchmarkCount64M                  2147483647   2147483647  -21.37%\nBenchmarkCountEasy32                      210          193   -8.10%\nBenchmarkCountEasy4K                     7888         7875   -0.16%\nBenchmarkCountEasy4M                  8483266      8527767   +0.52%\nBenchmarkCountEasy64M               135677742    136246780   +0.42%\nBenchmarkFields                     226913045    222574539   -1.91%\nBenchmarkFieldsFunc                 226840521    222770626   -1.79%\nBenchmarkTrimSpace                        477          503   +5.45%\n\nbenchmark                            old MB/s     new MB/s  speedup\nBenchmarkReadString                    270.68       258.89    0.96x\nBenchmarkIndexByte32                   338.57       339.07    1.00x\nBenchmarkIndexByte4K                   526.40       524.23    1.00x\nBenchmarkIndexByte4M                   486.61       494.43    1.02x\nBenchmarkIndexByte64M                  491.09       493.83    1.01x\nBenchmarkIndexBytePortable32            68.55        68.69    1.00x\nBenchmarkIndexBytePortable4K            72.21        72.29    1.00x\nBenchmarkIndexBytePortable4M            72.05        72.13    1.00x\nBenchmarkIndexBytePortable64M           72.08        72.12    1.00x\nBenchmarkEqual32                       267.72       503.99    1.88x\nBenchmarkEqual4K                       395.79      1676.25    4.24x\nBenchmarkEqual4M                       363.32      1300.89    3.58x\nBenchmarkEqual64M                      362.72      1183.29    3.26x\nBenchmarkEqualPort32                    40.88        40.74    1.00x\nBenchmarkEqualPort4K                    42.95        42.65    0.99x\nBenchmarkEqualPortable4M                42.79        42.66    1.00x\nBenchmarkEqualPortable64M               42.79        42.66    1.00x\nBenchmarkIndex32                        13.80        16.64    1.21x\nBenchmarkIndex4K                        11.54        13.87    1.20x\nBenchmarkIndex4M                        11.50        13.83    1.20x\nBenchmarkIndex64M                       11.50        13.83    1.20x\nBenchmarkIndexEasy32                   140.52       152.16    1.08x\nBenchmarkIndexEasy4K                   518.55       518.40    1.00x\nBenchmarkIndexEasy4M                   494.23       492.47    1.00x\nBenchmarkIndexEasy64M                  494.28       492.37    1.00x\nBenchmarkCount32                        17.40        21.91    1.26x\nBenchmarkCount4K                        14.20        18.55    1.31x\nBenchmarkCount4M                        14.63        18.47    1.26x\nBenchmarkCount64M                       14.53        18.48    1.27x\nBenchmarkCountEasy32                   152.37       165.42    1.09x\nBenchmarkCountEasy4K                   519.27       520.10    1.00x\nBenchmarkCountEasy4M                   494.42       491.84    0.99x\nBenchmarkCountEasy64M                  494.62       492.55    1.00x\nBenchmarkFields                          4.62         4.71    1.02x\nBenchmarkFieldsFunc                      4.62         4.71    1.02x\n220887(~) % cat strings.txt \nbenchmark                           old ns/op    new ns/op    delta\nBenchmarkGenericNoMatch                 19988        18825   -5.82%\nBenchmarkGenericMatch1                  68559        68689   +0.19%\nBenchmarkGenericMatch2                 364551       364833   +0.08%\nBenchmarkSingleMaxSkipping              16873        15462   -8.36%\nBenchmarkSingleLongSuffixFail           29288        28511   -2.65%\nBenchmarkSingleMatch                   826237       743121  -10.06%\nBenchmarkByteByteNoMatch                 3571         3340   -6.47%\nBenchmarkByteByteMatch                   9512         7961  -16.31%\nBenchmarkByteStringMatch                10368        10101   -2.58%\nBenchmarkHTMLEscapeNew                   3159         3015   -4.56%\nBenchmarkHTMLEscapeOld                   9431         9076   -3.76%\nBenchmarkByteByteReplaces               44356        44370   +0.03%\nBenchmarkByteByteMap                    22273        21531   -3.33%\nBenchmarkIndexRune                        606          603   -0.50%\nBenchmarkIndexRuneFastPath                451          454   +0.67%\nBenchmarkIndex                            499          480   -3.81%\nBenchmarkMapNoChanges                    2166         2145   -0.97%\nBenchmarkIndexHard1                  20219289     18614626   -7.94%\nBenchmarkIndexHard2                  18818291     18609084   -1.11%\nBenchmarkIndexHard3                  18784650     18606772   -0.95%\nBenchmarkCountHard1                  18776488     18589004   -1.00%\nBenchmarkCountHard2                  18633691     18589560   -0.24%\nBenchmarkCountHard3                  19331696     18586440   -3.86%\nBenchmarkIndexTorture                  104744       104592   -0.15%\nBenchmarkCountTorture                  104791       104574   -0.21%\nBenchmarkCountTortureOverlapping     80928224     61623014  -23.85%\nBenchmarkFields                     171732962    165121290   -3.85%\nBenchmarkFieldsFunc                 165616856    165492483   -0.08%\nBenchmarkSplit1                     187759567    168792316  -10.10%\nBenchmarkSplit2                      48277196     48175434   -0.21%\nBenchmarkSplit3                      40313030     39335365   -2.43%\n\nbenchmark                            old MB/s     new MB/s  speedup\nBenchmarkSingleMaxSkipping             592.64       646.75    1.09x\nBenchmarkSingleLongSuffixFail           34.21        35.14    1.03x\nBenchmarkSingleMatch                    18.15        20.19    1.11x\nBenchmarkFields                          6.11         6.35    1.04x\nBenchmarkFieldsFunc                      6.33         6.34    1.00x\n220887(~) % cat fmt.txt \nbenchmark                      old ns/op    new ns/op    delta\nBenchmarkSprintfEmpty                681          646   -5.14%\nBenchmarkSprintfString              2417         2438   +0.87%\nBenchmarkSprintfInt                 1904         1947   +2.26%\nBenchmarkSprintfIntInt              2835         2810   -0.88%\nBenchmarkSprintfPrefixedInt         3444         3487   +1.25%\nBenchmarkSprintfFloat               4997         4978   -0.38%\nBenchmarkManyArgs                  10427        10465   +0.36%\nBenchmarkScanInts                7494022      7444609   -0.66%\nBenchmarkScanRecursiveInt        8661682      8842178   +2.08%",
			"disapproval": false,
			"date": "2013-03-31 01:25:18.725720",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"khr@golang.org",
				"bradfitz@golang.org",
				"r@golang.org",
				"khr@google.com",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"fullung@gmail.com",
				"minux.ma@gmail.com",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Here is a bit more data from the linxu/arm regression for Count4K\n\nbefore:\n\nTotal: 118 samples\n      64  54.2%  54.2%      118 100.0% bytes.Count\n      54  45.8% 100.0%       54  45.8% bytes.Equal\n       0   0.0% 100.0%       64  54.2% bytes_test.BenchmarkCount4K\n\nhttp://dave.cheney.net/paste/bytes-before.svg\n\nafter:\n\nTotal: 180 samples\n     133  73.9%  73.9%      139  77.2% bytes.Count\n      38  21.1%  95.0%       38  21.1% runtime.memeqbody\n       9   5.0% 100.0%      180 100.0% bytes.Equal\n       0   0.0% 100.0%      137  76.1% bytes_test.BenchmarkCount4K\n       0   0.0% 100.0%       45  25.0% bytes_test.bmCount\n       0   0.0% 100.0%        4   2.2% gosched0\n       0   0.0% 100.0%        4   2.2% testing.(*B).launch\n       0   0.0% 100.0%        4   2.2% testing.(*B).runN\n\nhttp://dave.cheney.net/paste/bytes-after.svg",
			"disapproval": false,
			"date": "2013-03-31 03:01:21.236350",
			"approval": false
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't understand why it is so slow.  A bit slower, maybe, but not that\r\nmuch.  The main loop in both the old and new implementations for n<8 are\r\nnow identical.  (The CountX benchmarks are doing n==7.)  The new\r\nimplementation differs just by a few constant moves, a compare and branch,\r\nand a BL (together with its stack pointer bump).\r\n\r\nI'm happy to revert to the old code if we can't fix this.  I did the arm\r\njust for completeness, the big wins are in the x86 world.\r\n\r\n\r\nOn Sat, Mar 30, 2013 at 8:01 PM, <dave@cheney.net> wrote:\r\n\r\n> Here is a bit more data from the linxu/arm regression for Count4K\r\n>\r\n> before:\r\n>\r\n> Total: 118 samples\r\n>       64  54.2%  54.2%      118 100.0% bytes.Count\r\n>       54  45.8% 100.0%       54  45.8% bytes.Equal\r\n>        0   0.0% 100.0%       64  54.2% bytes_test.BenchmarkCount4K\r\n>\r\n> http://dave.cheney.net/paste/**bytes-before.svg<http://dave.cheney.net/paste/bytes-before.svg>\r\n>\r\n> after:\r\n>\r\n> Total: 180 samples\r\n>      133  73.9%  73.9%      139  77.2% bytes.Count\r\n>       38  21.1%  95.0%       38  21.1% runtime.memeqbody\r\n>        9   5.0% 100.0%      180 100.0% bytes.Equal\r\n>        0   0.0% 100.0%      137  76.1% bytes_test.BenchmarkCount4K\r\n>        0   0.0% 100.0%       45  25.0% bytes_test.bmCount\r\n>        0   0.0% 100.0%        4   2.2% gosched0\r\n>        0   0.0% 100.0%        4   2.2% testing.(*B).launch\r\n>        0   0.0% 100.0%        4   2.2% testing.(*B).runN\r\n>\r\n> http://dave.cheney.net/paste/**bytes-after.svg<http://dave.cheney.net/paste/bytes-after.svg>\r\n>\r\n> https://codereview.appspot.**com/8056043/<https://codereview.appspot.com/8056043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-31 04:14:03.865490",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Your new runtime.memeqbody is much faster than my old byte by byte attempt,\r\ni'm experimenting with copying it directly into bytes.Equals to see if that\r\ncauses a regression in bytes.Count.\r\n\r\n\r\nOn Sun, Mar 31, 2013 at 3:14 PM, Keith Randall <khr@google.com> wrote:\r\n\r\n> I don't understand why it is so slow.  A bit slower, maybe, but not that\r\n> much.  The main loop in both the old and new implementations for n<8 are\r\n> now identical.  (The CountX benchmarks are doing n==7.)  The new\r\n> implementation differs just by a few constant moves, a compare and branch,\r\n> and a BL (together with its stack pointer bump).\r\n>\r\n> I'm happy to revert to the old code if we can't fix this.  I did the arm\r\n> just for completeness, the big wins are in the x86 world.\r\n>\r\n>\r\n> On Sat, Mar 30, 2013 at 8:01 PM, <dave@cheney.net> wrote:\r\n>\r\n>> Here is a bit more data from the linxu/arm regression for Count4K\r\n>>\r\n>> before:\r\n>>\r\n>> Total: 118 samples\r\n>>       64  54.2%  54.2%      118 100.0% bytes.Count\r\n>>       54  45.8% 100.0%       54  45.8% bytes.Equal\r\n>>        0   0.0% 100.0%       64  54.2% bytes_test.BenchmarkCount4K\r\n>>\r\n>> http://dave.cheney.net/paste/**bytes-before.svg<http://dave.cheney.net/paste/bytes-before.svg>\r\n>>\r\n>> after:\r\n>>\r\n>> Total: 180 samples\r\n>>      133  73.9%  73.9%      139  77.2% bytes.Count\r\n>>       38  21.1%  95.0%       38  21.1% runtime.memeqbody\r\n>>        9   5.0% 100.0%      180 100.0% bytes.Equal\r\n>>        0   0.0% 100.0%      137  76.1% bytes_test.BenchmarkCount4K\r\n>>        0   0.0% 100.0%       45  25.0% bytes_test.bmCount\r\n>>        0   0.0% 100.0%        4   2.2% gosched0\r\n>>        0   0.0% 100.0%        4   2.2% testing.(*B).launch\r\n>>        0   0.0% 100.0%        4   2.2% testing.(*B).runN\r\n>>\r\n>> http://dave.cheney.net/paste/**bytes-after.svg<http://dave.cheney.net/paste/bytes-after.svg>\r\n>>\r\n>> https://codereview.appspot.**com/8056043/<https://codereview.appspot.com/8056043/>\r\n>>\r\n>\r\n>  --\r\n>\r\n> ---\r\n> You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-31 11:15:18.119140",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"khr@golang.org",
				"bradfitz@golang.org",
				"r@golang.org",
				"khr@google.com",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"fullung@gmail.com",
				"minux.ma@gmail.com",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Here is another arm datapoint, from a pandaboard, Cortex-A9. \n\nalarm(~/go/src/pkg/bytes) % ~/go/misc/benchcmp {old,new}.txt\nbenchmark                           old ns/op    new ns/op    delta\nBenchmarkReadString                    207691       212456   +2.29%\nBenchmarkBufferNotEmptyWriteRead     10302655     10189737   -1.10%\nBenchmarkBufferFullSmallReads         1472871      1447450   -1.73%\nBenchmarkIndexByte32                      164          165   +0.61%\nBenchmarkIndexByte4K                    13756        13779   +0.17%\nBenchmarkIndexByte4M                 27057480     26680883   -1.39%\nBenchmarkIndexByte64M               438272584    428702042   -2.18%\nBenchmarkIndexBytePortable32              515          515   +0.00%\nBenchmarkIndexBytePortable4K            56701        56541   -0.28%\nBenchmarkIndexBytePortable4M         64782309     64326364   -0.70%\nBenchmarkIndexBytePortable64M      1031455804   1030296066   -0.11%\nBenchmarkEqual32                          188          106  -43.62%\nBenchmarkEqual4K                        15506         4636  -70.10%\nBenchmarkEqual4M                     45102310     46034946   +2.07%\nBenchmarkEqual64M                   743546635   1001547877  +34.70%\nBenchmarkEqualPort32                      807          796   -1.36%\nBenchmarkEqualPort4K                    92419        90848   -1.70%\nBenchmarkEqualPortable4M            106740630    108727363   +1.86%\nBenchmarkEqualPortable64M          1774788812   1798989707   +1.36%\nBenchmarkIndex32                         2503         2939  +17.42%\nBenchmarkIndex4K                       374861       442905  +18.15%\nBenchmarkIndex4M                    391445561    458860175  +17.22%\nBenchmarkIndex64M                  6260006548   7347176750  +17.37%\nBenchmarkIndexEasy32                      330          348   +5.45%\nBenchmarkIndexEasy4K                    14001        13923   -0.56%\nBenchmarkIndexEasy4M                 26652902     26637547   -0.06%\nBenchmarkIndexEasy64M               428365684    428122196   -0.06%\nBenchmarkCount32                         2622         2956  +12.74%\nBenchmarkCount4K                       384545       444107  +15.49%\nBenchmarkCount4M                    398216529    459708583  +15.44%\nBenchmarkCount64M                  6369725802   7357919173  +15.51%\nBenchmarkCountEasy32                      353          373   +5.67%\nBenchmarkCountEasy4K                    13907        13935   +0.20%\nBenchmarkCountEasy4M                 26631245     26946392   +1.18%\nBenchmarkCountEasy64M               428438891    433169914   +1.10%\nBenchmarkFields                     306475738    306250622   -0.07%\nBenchmarkFieldsFunc                 305981589    306415421   +0.14%\nBenchmarkTrimSpace                        753          733   -2.66%\n\nbenchmark                            old MB/s     new MB/s  speedup\nBenchmarkReadString                    157.77       154.23    0.98x\nBenchmarkIndexByte32                   194.79       193.42    0.99x\nBenchmarkIndexByte4K                   297.75       297.24    1.00x\nBenchmarkIndexByte4M                   155.01       157.20    1.01x\nBenchmarkIndexByte64M                  153.12       156.54    1.02x\nBenchmarkIndexBytePortable32            62.12        62.14    1.00x\nBenchmarkIndexBytePortable4K            72.24        72.44    1.00x\nBenchmarkIndexBytePortable4M            64.74        65.20    1.01x\nBenchmarkIndexBytePortable64M           65.06        65.14    1.00x\nBenchmarkEqual32                       169.90       300.05    1.77x\nBenchmarkEqual4K                       264.16       883.50    3.34x\nBenchmarkEqual4M                        93.00        91.11    0.98x\nBenchmarkEqual64M                       90.26        67.01    0.74x\nBenchmarkEqualPort32                    39.61        40.15    1.01x\nBenchmarkEqualPort4K                    44.32        45.09    1.02x\nBenchmarkEqualPortable4M                39.29        38.58    0.98x\nBenchmarkEqualPortable64M               37.81        37.30    0.99x\nBenchmarkIndex32                        12.78        10.89    0.85x\nBenchmarkIndex4K                        10.93         9.25    0.85x\nBenchmarkIndex4M                        10.71         9.14    0.85x\nBenchmarkIndex64M                       10.72         9.13    0.85x\nBenchmarkIndexEasy32                    96.80        91.88    0.95x\nBenchmarkIndexEasy4K                   292.54       294.18    1.01x\nBenchmarkIndexEasy4M                   157.37       157.46    1.00x\nBenchmarkIndexEasy64M                  156.66       156.75    1.00x\nBenchmarkCount32                        12.20        10.83    0.89x\nBenchmarkCount4K                        10.65         9.22    0.87x\nBenchmarkCount4M                        10.53         9.12    0.87x\nBenchmarkCount64M                       10.54         9.12    0.87x\nBenchmarkCountEasy32                    90.47        85.58    0.95x\nBenchmarkCountEasy4K                   294.52       293.93    1.00x\nBenchmarkCountEasy4M                   157.50       155.65    0.99x\nBenchmarkCountEasy64M                  156.64       154.93    0.99x\nBenchmarkFields                          3.42         3.42    1.00x\nBenchmarkFieldsFunc                      3.43         3.42    1.00x\n\nFrom my amateur eye, the A9 has a shorter pipeline and is probably taking a smaller hit from the branch than the A15 in the chromebook.",
			"disapproval": false,
			"date": "2013-03-31 11:33:58.155670",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Last night I copied khr's new code back into bytes.Equals, removing all the indirection and still saw a slowdown in Count. I suggest, for this round revert bytes.Equals to my crummy version for arm, but keep runtime.memeqbody as it is an improvement over the old version in alg.c (minux do you agree?) and get this change in. We can figure out what is going on with arm without blocking the rest of this change. \r\n\r\nCheers\r\n\r\nDave\r\n\r\n\r\n\r\nOn 01/04/2013, at 9:54 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n\r\n> \r\n> \r\n> \r\n> On Sat, Mar 30, 2013 at 9:14 PM, Keith Randall <khr@google.com> wrote:\r\n>> I don't understand why it is so slow.  A bit slower, maybe, but not that much.  The main loop in both the old and new implementations for n<8 are now identical.  (The CountX benchmarks are doing n==7.)  The new implementation differs just by a few constant moves, a compare and branch, and a BL (together with its stack pointer bump).\r\n>> \r\n>> I'm happy to revert to the old code if we can't fix this.  I did the arm just for completeness, the big wins are in the x86 world.\r\n> \r\n> Yeah.  I'm in favor of leaving memeq and memeqbody in runtime/asm_arm.s but deleting or renaming bytes\u00b7Equal on arm to bytes\u00b7equalTODOIssueNNNNN where Issue NNNN is a new bug about investigating this issue specifically on ARM.\r\n> \r\n> \r\n",
			"disapproval": false,
			"date": "2013-03-31 23:40:15.476230",
			"approval": false
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "If the simple implemention really is much faster for short strings, I'm in\r\nfavor of both reverting bytes.Equals and using the same simple\r\nimplementation in runtime.  Faster equality for long strings is just not\r\nthat important.  We can always revisit if we figure out what is going on.\r\n\r\n\r\n\r\nOn Sun, Mar 31, 2013 at 4:39 PM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> Last night I copied khr's new code back into bytes.Equals, removing all\r\n> the indirection and still saw a slowdown in Count. I suggest, for this\r\n> round revert bytes.Equals to my crummy version for arm, but keep\r\n> runtime.memeqbody as it is an improvement over the old version in alg.c\r\n> (minux do you agree?) and get this change in. We can figure out what is\r\n> going on with arm without blocking the rest of this change.\r\n>\r\n> Cheers\r\n>\r\n> Dave\r\n>\r\n>\r\n>\r\n> On 01/04/2013, at 9:54 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n>\r\n>\r\n>\r\n>\r\n> On Sat, Mar 30, 2013 at 9:14 PM, Keith Randall <khr@google.com> wrote:\r\n>\r\n>> I don't understand why it is so slow.  A bit slower, maybe, but not that\r\n>> much.  The main loop in both the old and new implementations for n<8 are\r\n>> now identical.  (The CountX benchmarks are doing n==7.)  The new\r\n>> implementation differs just by a few constant moves, a compare and branch,\r\n>> and a BL (together with its stack pointer bump).\r\n>>\r\n>> I'm happy to revert to the old code if we can't fix this.  I did the arm\r\n>> just for completeness, the big wins are in the x86 world.\r\n>>\r\n>\r\n> Yeah.  I'm in favor of leaving memeq and memeqbody in runtime/asm_arm.s\r\n> but deleting or renaming bytes\u00b7Equal on arm to bytes\u00b7equalTODOIssueNNNNN\r\n> where Issue NNNN is a new bug about investigating this issue specifically\r\n> on ARM.\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-01 00:17:50.507600",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "SGTM. Lets try that. \r\n\r\nOn 01/04/2013, at 11:17, Keith Randall <khr@google.com> wrote:\r\n\r\n> If the simple implemention really is much faster for short strings, I'm in favor of both reverting bytes.Equals and using the same simple implementation in runtime.  Faster equality for long strings is just not that important.  We can always revisit if we figure out what is going on.\r\n> \r\n> \r\n> \r\n> On Sun, Mar 31, 2013 at 4:39 PM, Dave Cheney <dave@cheney.net> wrote:\r\n>> Last night I copied khr's new code back into bytes.Equals, removing all the indirection and still saw a slowdown in Count. I suggest, for this round revert bytes.Equals to my crummy version for arm, but keep runtime.memeqbody as it is an improvement over the old version in alg.c (minux do you agree?) and get this change in. We can figure out what is going on with arm without blocking the rest of this change. \r\n>> \r\n>> Cheers\r\n>> \r\n>> Dave\r\n>> \r\n>> \r\n>> \r\n>> On 01/04/2013, at 9:54 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n>> \r\n>>> \r\n>>> \r\n>>> \r\n>>> On Sat, Mar 30, 2013 at 9:14 PM, Keith Randall <khr@google.com> wrote:\r\n>>>> I don't understand why it is so slow.  A bit slower, maybe, but not that much.  The main loop in both the old and new implementations for n<8 are now identical.  (The CountX benchmarks are doing n==7.)  The new implementation differs just by a few constant moves, a compare and branch, and a BL (together with its stack pointer bump).\r\n>>>> \r\n>>>> I'm happy to revert to the old code if we can't fix this.  I did the arm just for completeness, the big wins are in the x86 world.\r\n>>> \r\n>>> Yeah.  I'm in favor of leaving memeq and memeqbody in runtime/asm_arm.s but deleting or renaming bytes\u00b7Equal on arm to bytes\u00b7equalTODOIssueNNNNN where Issue NNNN is a new bug about investigating this issue specifically on ARM.\r\n> \r\n",
			"disapproval": false,
			"date": "2013-04-01 00:21:03.401950",
			"approval": false
		},
		{
			"sender": "khr@golang.org",
			"recipients": [
				"khr@golang.org",
				"bradfitz@golang.org",
				"r@golang.org",
				"khr@google.com",
				"dave@cheney.net",
				"remyoudompheng@gmail.com",
				"fullung@gmail.com",
				"minux.ma@gmail.com",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=7f91fab04475 ***\n\nruntime: Implement faster equals for strings and bytes.\n\n(amd64)\nbenchmark           old ns/op    new ns/op    delta\nBenchmarkEqual0            16            6  -63.15%\nBenchmarkEqual9            22            7  -65.37%\nBenchmarkEqual32           36            9  -74.91%\nBenchmarkEqual4K         2187          120  -94.51%\n\nbenchmark            old MB/s     new MB/s  speedup\nBenchmarkEqual9        392.22      1134.38    2.89x\nBenchmarkEqual32       866.72      3457.39    3.99x\nBenchmarkEqual4K      1872.73     33998.87   18.15x\n\n(386)\nbenchmark           old ns/op    new ns/op    delta\nBenchmarkEqual0            16            5  -63.85%\nBenchmarkEqual9            22            7  -67.84%\nBenchmarkEqual32           34           12  -64.94%\nBenchmarkEqual4K         2196          113  -94.85%\n\nbenchmark            old MB/s     new MB/s  speedup\nBenchmarkEqual9        405.81      1260.18    3.11x\nBenchmarkEqual32       919.55      2631.21    2.86x\nBenchmarkEqual4K      1864.85     36072.54   19.34x\n\nUpdate issue 3751\n\nR=bradfitz, r, khr, dave, remyoudompheng, fullung, minux.ma, ality\nCC=golang-dev\nhttps://codereview.appspot.com/8056043",
			"disapproval": false,
			"date": "2013-04-02 23:26:20.310050",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"khr@golang.org",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"r@golang.org",
				"khr@google.com",
				"remyoudompheng@gmail.com",
				"fullung@gmail.com",
				"minux.ma@gmail.com",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks khr, i'll try to integrate your faster word-at-a-time version into the asm_arm.s\n\nCheers\n\nDave",
			"disapproval": false,
			"date": "2013-04-03 01:56:26.959270",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Go 1.1 will be fast enough[1] without this change. If it's unstable\r\nthen my vote would be to revert this change so we have a chance of\r\npublishing a release candidate. Thoughts ?\r\n\r\n\r\n[1]. https://github.com/davecheney/autobench\r\n\r\nOn Wed, Apr 3, 2013 at 4:43 PM,  <fullung@gmail.com> wrote:\r\n> Since this change has gone in, I'm seeing the following crash on\r\n> linux/amd64:\r\n>\r\n> go test -v -short -cpu 1,2,4,8,16,256 std\r\n>\r\n> === RUN TestLargeStringWrites-2\r\n> unexpected fault address 0xc2003da008\r\n> fatal error: fault\r\n> [signal 0xb code=0x2 addr=0xc2003da008 pc=0x40e6fb]\r\n>\r\n> goroutine 57 [running]:\r\n> [fp=0xc20042a140] runtime.throw(0x605737)\r\n>         /build/go.tip/go/src/pkg/runtime/panic.c:473 +0x67\r\n> [fp=0xc20042a158] runtime.sigpanic()\r\n>         /build/go.tip/go/src/pkg/runtime/os_linux.c:239 +0xe7\r\n> [fp=0xc20042a210] sweepspan(0xc20008e480, 0xf8)\r\n>         /build/go.tip/go/src/pkg/runtime/mgc0.c:1625 +0x33b\r\n> [fp=0xc20042a288] runtime.parfordo(0xc20008e480)\r\n>         /build/go.tip/go/src/pkg/runtime/parfor.c:120 +0x125\r\n> [fp=0xc20042a3b8] gc(0x7f52d1892c1c)\r\n>         /build/go.tip/go/src/pkg/runtime/mgc0.c:1940 +0x2e3\r\n> ----- stack segment boundary -----\r\n> [fp=0x7f52d1892c30] runtime.gc(0xc200000000)\r\n>         /build/go.tip/go/src/pkg/runtime/mgc0.c:1857 +0x11b\r\n> [fp=0x7f52d1892c88] runtime.mallocgc(0x12000, 0x100000001,\r\n> 0x7f5200000001)\r\n>         /build/go.tip/go/src/pkg/runtime/zmalloc_linux_amd64.c:101 +0x1e4\r\n> [fp=0x7f52d1892cc0] makeslice1(0x4e76e0, 0x11170, 0x11170,\r\n> 0x7f52d1892d08)\r\n>         /build/go.tip/go/src/pkg/runtime/slice.c:61 +0x89\r\n> [fp=0x7f52d1892cf0] runtime.makeslice(0x4e76e0, 0x11170, 0x11170, 0xc,\r\n> 0x11170, ...)\r\n>         /build/go.tip/go/src/pkg/runtime/slice.c:34 +0x9a\r\n> [fp=0x7f52d1892d28] bytes.makeSlice(0x11170, 0x0, 0x0, 0x0)\r\n>         /build/go.tip/go/src/pkg/bytes/buffer.go:191 +0x61\r\n> [fp=0x7f52d1892de0] bytes.(*Buffer).grow(0xc20045a310, 0x2710, 0x2)\r\n>         /build/go.tip/go/src/pkg/bytes/buffer.go:99 +0x20b\r\n> [fp=0x7f52d1892e30] bytes.(*Buffer).WriteString(0xc20045a310,\r\n> 0xc2001c4000, 0x2710, 0xc20045a310, 0x0, ...)\r\n>         /build/go.tip/go/src/pkg/bytes/buffer.go:136 +0x49\r\n> [fp=0x7f52d1892ef0] bytes_test.fillString(0xc200481120, 0x54e990, 0x13,\r\n> 0xc20045a310, 0xc2004cf000, ...)\r\n>         /build/go.tip/go/src/pkg/bytes/buffer_test.go:55 +0xe8\r\n> [fp=0x7f52d1892f78] bytes_test.TestLargeStringWrites(0xc200481120)\r\n>         /build/go.tip/go/src/pkg/bytes/buffer_test.go:178 +0xd5\r\n> [fp=0x7f52d1892fa8] testing.tRunner(0xc200481120, 0x608bc8)\r\n>         /build/go.tip/go/src/pkg/testing/testing.go:349 +0x8a\r\n> [fp=0x7f52d1892fb0] runtime.goexit()\r\n>         /build/go.tip/go/src/pkg/runtime/proc.c:1214\r\n> created by testing.RunTests\r\n>         /build/go.tip/go/src/pkg/testing/testing.go:429 +0x86b\r\n>\r\n> goroutine 1 [chan receive]:\r\n> runtime.park(0x409e70, 0xc200339d10, 0x60682a)\r\n>         /build/go.tip/go/src/pkg/runtime/proc.c:1167 +0x64\r\n> runtime.chanrecv(0x4e8260, 0xc200339cc0, 0x7f52d1884ce0, 0x0, 0x0, ...)\r\n>         /build/go.tip/go/src/pkg/runtime/chan.c:366 +0x566\r\n> runtime.chanrecv1()\r\n>         /build/go.tip/go/src/pkg/runtime/chan.c:458 +0x38\r\n> testing.RunTests(0x56e1e8, 0x608b80, 0x33, 0x33, 0x1, ...)\r\n>         /build/go.tip/go/src/pkg/testing/testing.go:430 +0x88e\r\n> testing.Main(0x56e1e8, 0x608b80, 0x33, 0x33, 0x608700, ...)\r\n>         /build/go.tip/go/src/pkg/testing/testing.go:361 +0x8a\r\n> main.main()\r\n>         bytes/_test/_testmain.go:245 +0x9a\r\n> runtime.main()\r\n>         /build/go.tip/go/src/pkg/runtime/proc.c:182 +0x92\r\n> runtime.goexit()\r\n>         /build/go.tip/go/src/pkg/runtime/proc.c:1214\r\n>\r\n> goroutine 2 [syscall]:\r\n> runtime.entersyscallblock()\r\n>         /build/go.tip/go/src/pkg/runtime/proc.c:1324 +0x16e\r\n> runtime.MHeap_Scavenger()\r\n>         /build/go.tip/go/src/pkg/runtime/mheap.c:435 +0xee\r\n> runtime.goexit()\r\n>         /build/go.tip/go/src/pkg/runtime/proc.c:1214\r\n> created by runtime.main\r\n>         /build/go.tip/go/src/pkg/runtime/proc.c:165\r\n> FAIL    bytes   0.158s\r\n>\r\n> https://codereview.appspot.com/8056043/\r\n",
			"disapproval": false,
			"date": "2013-04-03 05:47:04.256410",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"khr@golang.org",
				"dave@cheney.net",
				"fullung@gmail.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"khr@google.com",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Since this change has gone in, I'm seeing the following crash on linux/amd64:\n\ngo test -v -short -cpu 1,2,4,8,16,256 std\n\n=== RUN TestLargeStringWrites-2\nunexpected fault address 0xc2003da008\nfatal error: fault\n[signal 0xb code=0x2 addr=0xc2003da008 pc=0x40e6fb]\n\ngoroutine 57 [running]:\n[fp=0xc20042a140] runtime.throw(0x605737)\n\t/build/go.tip/go/src/pkg/runtime/panic.c:473 +0x67\n[fp=0xc20042a158] runtime.sigpanic()\n\t/build/go.tip/go/src/pkg/runtime/os_linux.c:239 +0xe7\n[fp=0xc20042a210] sweepspan(0xc20008e480, 0xf8)\n\t/build/go.tip/go/src/pkg/runtime/mgc0.c:1625 +0x33b\n[fp=0xc20042a288] runtime.parfordo(0xc20008e480)\n\t/build/go.tip/go/src/pkg/runtime/parfor.c:120 +0x125\n[fp=0xc20042a3b8] gc(0x7f52d1892c1c)\n\t/build/go.tip/go/src/pkg/runtime/mgc0.c:1940 +0x2e3\n----- stack segment boundary -----\n[fp=0x7f52d1892c30] runtime.gc(0xc200000000)\n\t/build/go.tip/go/src/pkg/runtime/mgc0.c:1857 +0x11b\n[fp=0x7f52d1892c88] runtime.mallocgc(0x12000, 0x100000001, 0x7f5200000001)\n\t/build/go.tip/go/src/pkg/runtime/zmalloc_linux_amd64.c:101 +0x1e4\n[fp=0x7f52d1892cc0] makeslice1(0x4e76e0, 0x11170, 0x11170, 0x7f52d1892d08)\n\t/build/go.tip/go/src/pkg/runtime/slice.c:61 +0x89\n[fp=0x7f52d1892cf0] runtime.makeslice(0x4e76e0, 0x11170, 0x11170, 0xc, 0x11170, ...)\n\t/build/go.tip/go/src/pkg/runtime/slice.c:34 +0x9a\n[fp=0x7f52d1892d28] bytes.makeSlice(0x11170, 0x0, 0x0, 0x0)\n\t/build/go.tip/go/src/pkg/bytes/buffer.go:191 +0x61\n[fp=0x7f52d1892de0] bytes.(*Buffer).grow(0xc20045a310, 0x2710, 0x2)\n\t/build/go.tip/go/src/pkg/bytes/buffer.go:99 +0x20b\n[fp=0x7f52d1892e30] bytes.(*Buffer).WriteString(0xc20045a310, 0xc2001c4000, 0x2710, 0xc20045a310, 0x0, ...)\n\t/build/go.tip/go/src/pkg/bytes/buffer.go:136 +0x49\n[fp=0x7f52d1892ef0] bytes_test.fillString(0xc200481120, 0x54e990, 0x13, 0xc20045a310, 0xc2004cf000, ...)\n\t/build/go.tip/go/src/pkg/bytes/buffer_test.go:55 +0xe8\n[fp=0x7f52d1892f78] bytes_test.TestLargeStringWrites(0xc200481120)\n\t/build/go.tip/go/src/pkg/bytes/buffer_test.go:178 +0xd5\n[fp=0x7f52d1892fa8] testing.tRunner(0xc200481120, 0x608bc8)\n\t/build/go.tip/go/src/pkg/testing/testing.go:349 +0x8a\n[fp=0x7f52d1892fb0] runtime.goexit()\n\t/build/go.tip/go/src/pkg/runtime/proc.c:1214\ncreated by testing.RunTests\n\t/build/go.tip/go/src/pkg/testing/testing.go:429 +0x86b\n\ngoroutine 1 [chan receive]:\nruntime.park(0x409e70, 0xc200339d10, 0x60682a)\n\t/build/go.tip/go/src/pkg/runtime/proc.c:1167 +0x64\nruntime.chanrecv(0x4e8260, 0xc200339cc0, 0x7f52d1884ce0, 0x0, 0x0, ...)\n\t/build/go.tip/go/src/pkg/runtime/chan.c:366 +0x566\nruntime.chanrecv1()\n\t/build/go.tip/go/src/pkg/runtime/chan.c:458 +0x38\ntesting.RunTests(0x56e1e8, 0x608b80, 0x33, 0x33, 0x1, ...)\n\t/build/go.tip/go/src/pkg/testing/testing.go:430 +0x88e\ntesting.Main(0x56e1e8, 0x608b80, 0x33, 0x33, 0x608700, ...)\n\t/build/go.tip/go/src/pkg/testing/testing.go:361 +0x8a\nmain.main()\n\tbytes/_test/_testmain.go:245 +0x9a\nruntime.main()\n\t/build/go.tip/go/src/pkg/runtime/proc.c:182 +0x92\nruntime.goexit()\n\t/build/go.tip/go/src/pkg/runtime/proc.c:1214\n\ngoroutine 2 [syscall]:\nruntime.entersyscallblock()\n\t/build/go.tip/go/src/pkg/runtime/proc.c:1324 +0x16e\nruntime.MHeap_Scavenger()\n\t/build/go.tip/go/src/pkg/runtime/mheap.c:435 +0xee\nruntime.goexit()\n\t/build/go.tip/go/src/pkg/runtime/proc.c:1214\ncreated by runtime.main\n\t/build/go.tip/go/src/pkg/runtime/proc.c:165\nFAIL\tbytes\t0.158s",
			"disapproval": false,
			"date": "2013-04-03 05:43:38.137510",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"khr@golang.org",
				"dave@cheney.net",
				"fullung@gmail.com",
				"bradfitz@golang.org",
				"r@golang.org",
				"khr@google.com",
				"remyoudompheng@gmail.com",
				"minux.ma@gmail.com",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/04/03 05:47:04, dfc wrote:\n> Go 1.1 will be fast enough[1] without this change. If it's unstable\n> then my vote would be to revert this change so we have a chance of\n> publishing a release candidate. Thoughts ?\n\nWithout looking past the stack trace, it seems like it might be a GC issue though, in which case reverting this isn't going to fix the underlying problem...\n\nAlways forward, never back! :-)\n\nCheers\n\nAlbert",
			"disapproval": false,
			"date": "2013-04-03 05:51:22.476300",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 3 Apr 2013 07:47, \"Dave Cheney\" <dave@cheney.net> wrote:\r\n>\r\n> Go 1.1 will be fast enough[1] without this change. If it's unstable\r\n> then my vote would be to revert this change so we have a chance of\r\n> publishing a release candidate. Thoughts ?\r\n>\r\n>\r\n\r\nIt could be wise but since it's absolutely unclear why the GC is affected a\r\nproper investigation is needed.\r\n\r\nIf in the end the change is reverted I would like to keep the new test code.\r\n\r\nR\u00e9my\r\n",
			"disapproval": false,
			"date": "2013-04-03 05:53:53.132390",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/4/3  <fullung@gmail.com> wrote:\r\n> On 2013/04/03 05:47:04, dfc wrote:\r\n>>\r\n>> Go 1.1 will be fast enough[1] without this change. If it's unstable\r\n>> then my vote would be to revert this change so we have a chance of\r\n>> publishing a release candidate. Thoughts ?\r\n>\r\n>\r\n> Without looking past the stack trace, it seems like it might be a GC\r\n> issue though, in which case reverting this isn't going to fix the\r\n> underlying problem...\r\n\r\nPlease try https://codereview.appspot.com/8300044\r\nI'm surprised the test could possibly work for anyone.\r\n[maybe the better fix is to check the error returned by syscall.Mprotect]\r\n\r\nR\u00e9my.\r\n",
			"disapproval": false,
			"date": "2013-04-03 06:33:05.405820",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Wow, great catch!\r\n\r\nOn Wed, Apr 3, 2013 at 5:33 PM, R\u00e9my Oudompheng\r\n<remyoudompheng@gmail.com> wrote:\r\n> On 2013/4/3  <fullung@gmail.com> wrote:\r\n>> On 2013/04/03 05:47:04, dfc wrote:\r\n>>>\r\n>>> Go 1.1 will be fast enough[1] without this change. If it's unstable\r\n>>> then my vote would be to revert this change so we have a chance of\r\n>>> publishing a release candidate. Thoughts ?\r\n>>\r\n>>\r\n>> Without looking past the stack trace, it seems like it might be a GC\r\n>> issue though, in which case reverting this isn't going to fix the\r\n>> underlying problem...\r\n>\r\n> Please try https://codereview.appspot.com/8300044\r\n> I'm surprised the test could possibly work for anyone.\r\n> [maybe the better fix is to check the error returned by syscall.Mprotect]\r\n>\r\n> R\u00e9my.\r\n",
			"disapproval": false,
			"date": "2013-04-03 07:35:51.552370",
			"approval": false
		}
	],
	"owner_email": "khr@golang.org",
	"private": false,
	"base_url": "",
	"owner": "khr",
	"subject": "code review 8056043: runtime: Implement faster equals for strings and bytes.",
	"created": "2013-03-27 16:23:17.262210",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		8014,
		11001,
		18001,
		39001,
		49001,
		35002,
		81001,
		83014,
		86001,
		89001
	],
	"modified": "2013-04-03 05:51:22.727650",
	"closed": true,
	"issue": 8056043
}