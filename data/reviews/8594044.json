{
	"description": "go.exp/locale: further implementation of locale API:\n- Added parser for IANA Language Subtag Registry.  Some of the code is replaced\n  to use this data source where it is more complete than the CLDR data.\n- Parser now supports identifying about 8000 languages (instead of 600+ before).\n- Language, Script, and Region type are implemented.\n- Canonicalization implemented for:\n        - script suppression, as defined by BCP 47/ IANA registry.\n        - mapping of deprecated languages, including 3-letter deprecated codes.\n        - mapping of dominant languages to their macro language, as defined by CLDR.\n- Fixed bug where the 3-letter ISO code for sh was scr, instead of hbs.\n\nLangIDs are now split into IDs for which we look up data in a lookup table\n(includes all 2-letter codes) and others.  Only the former are mapped to a\nconsecutive ranges of ids.  The other langIDs to be generated from\nthe 3-letter languages code and their existence is represented by a bit vector.\n\nThe API now supports representing of deprecated language tags. They will be mapped\nfor all typical use cases, but if the user really wants he can investigate\nthe language that was originally specified.",
	"cc": [
		"r@golang.org",
		"mpvl@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8594044/diff/5001/locale/locale.go\nFile locale/locale.go (right):\n\nhttps://codereview.appspot.com/8594044/diff/5001/locale/locale.go#newcode103\nlocale/locale.go:103: changed = changed || l != loc.lang\ntoo fancy\nif l != loc.lang {\n  changed = true\n}\n\nhttps://codereview.appspot.com/8594044/diff/5001/locale/lookup.go\nFile locale/lookup.go (right):\n\nhttps://codereview.appspot.com/8594044/diff/5001/locale/lookup.go#newcode138\nlocale/lookup.go:138: // len(s) must match the numer of characters obtained.\ns/numer/number/\n\nhttps://codereview.appspot.com/8594044/diff/5001/locale/maketables.go\nFile locale/maketables.go (right):\n\nhttps://codereview.appspot.com/8594044/diff/5001/locale/maketables.go#newcode55\nlocale/maketables.go:55: in lookup tables. The language ids for these langauge codes are derived directly\ns/langauge/language/\n\nhttps://codereview.appspot.com/8594044/diff/5001/locale/maketables.go#newcode96\nlocale/maketables.go:96: if exists.  If a script is given, it should be surpressed from the language tag.`,\ns/if/if it/\n\nhttps://codereview.appspot.com/8594044/diff/5001/locale/maketables.go#newcode96\nlocale/maketables.go:96: if exists.  If a script is given, it should be surpressed from the language tag.`,\ns/surpressed/suppressed/\n\nhttps://codereview.appspot.com/8594044/diff/5001/locale/maketables.go#newcode253\nlocale/maketables.go:253: // ianaEntry holds information of an entry in the the IANA Language Subtag Repository.\n\"of\" is the wrong preposition. maybe \"for\".\n\nhttps://codereview.appspot.com/8594044/diff/5001/locale/maketables.go#newcode253\nlocale/maketables.go:253: // ianaEntry holds information of an entry in the the IANA Language Subtag Repository.\ns/the the/the/\n\nhttps://codereview.appspot.com/8594044/diff/5001/locale/maketables.go#newcode263\nlocale/maketables.go:263: suppressScript string // suppress this script, if defined.\nodd to comment just this one. why not all? it may be fine just to refer to the on-line docs on line 254 and be done.\n\nhttps://codereview.appspot.com/8594044/diff/5001/locale/maketables.go#newcode377\nlocale/maketables.go:377: }\ncheck scan.Err()\n\nhttps://codereview.appspot.com/8594044/diff/5001/locale/maketables.go#newcode544\nlocale/maketables.go:544: // inc icrements the string to its lexicographical successor.\ns/icrements/increments/\nbut maybe s/icrements/advances/ would be better anyway\n\nhttps://codereview.appspot.com/8594044/diff/5001/locale/maketables.go#newcode697\nlocale/maketables.go:697: m = append(m, struct{ from, to uint16 }{\ntrivial but why not define a local type?",
			"disapproval": false,
			"date": "2013-04-18 20:49:35.511310",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.exp/",
			"disapproval": false,
			"date": "2013-04-17 17:59:30.815720",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "sorry for all the typos.\n\nhttps://codereview.appspot.com/8594044/diff/5001/locale/locale.go\nFile locale/locale.go (right):\n\nhttps://codereview.appspot.com/8594044/diff/5001/locale/locale.go#newcode103\nlocale/locale.go:103: changed = changed || l != loc.lang\nOn 2013/04/18 20:49:35, r wrote:\n> too fancy\n> if l != loc.lang {\n>   changed = true\n> }\n\nDone.\n\nhttps://codereview.appspot.com/8594044/diff/5001/locale/lookup.go\nFile locale/lookup.go (right):\n\nhttps://codereview.appspot.com/8594044/diff/5001/locale/lookup.go#newcode138\nlocale/lookup.go:138: // len(s) must match the numer of characters obtained.\nOn 2013/04/18 20:49:35, r wrote:\n> s/numer/number/\n\nDone.\n\nhttps://codereview.appspot.com/8594044/diff/5001/locale/maketables.go\nFile locale/maketables.go (right):\n\nhttps://codereview.appspot.com/8594044/diff/5001/locale/maketables.go#newcode55\nlocale/maketables.go:55: in lookup tables. The language ids for these langauge codes are derived directly\nOn 2013/04/18 20:49:35, r wrote:\n> s/langauge/language/\n\nDone.\n\nhttps://codereview.appspot.com/8594044/diff/5001/locale/maketables.go#newcode96\nlocale/maketables.go:96: if exists.  If a script is given, it should be surpressed from the language tag.`,\nOn 2013/04/18 20:49:35, r wrote:\n> s/if/if it/\n\nDone.\n\nhttps://codereview.appspot.com/8594044/diff/5001/locale/maketables.go#newcode96\nlocale/maketables.go:96: if exists.  If a script is given, it should be surpressed from the language tag.`,\nOn 2013/04/18 20:49:35, r wrote:\n> s/surpressed/suppressed/\n\nDone.\n\nhttps://codereview.appspot.com/8594044/diff/5001/locale/maketables.go#newcode253\nlocale/maketables.go:253: // ianaEntry holds information of an entry in the the IANA Language Subtag Repository.\nOn 2013/04/18 20:49:35, r wrote:\n> \"of\" is the wrong preposition. maybe \"for\".\n\nDone.\n\nhttps://codereview.appspot.com/8594044/diff/5001/locale/maketables.go#newcode253\nlocale/maketables.go:253: // ianaEntry holds information of an entry in the the IANA Language Subtag Repository.\nOn 2013/04/18 20:49:35, r wrote:\n> s/the the/the/\n\nDone.\n\nhttps://codereview.appspot.com/8594044/diff/5001/locale/maketables.go#newcode263\nlocale/maketables.go:263: suppressScript string // suppress this script, if defined.\nReferring to the online docs now.\n\nOn 2013/04/18 20:49:35, r wrote:\n> odd to comment just this one. why not all? it may be fine just to refer to the\n> on-line docs on line 254 and be done.\n\nhttps://codereview.appspot.com/8594044/diff/5001/locale/maketables.go#newcode377\nlocale/maketables.go:377: }\nOn 2013/04/18 20:49:35, r wrote:\n> check scan.Err()\n\nDone.\n\nhttps://codereview.appspot.com/8594044/diff/5001/locale/maketables.go#newcode544\nlocale/maketables.go:544: // inc icrements the string to its lexicographical successor.\nOn 2013/04/18 20:49:35, r wrote:\n> s/icrements/increments/\n> but maybe s/icrements/advances/ would be better anyway\n\nDone.\n\nhttps://codereview.appspot.com/8594044/diff/5001/locale/maketables.go#newcode697\nlocale/maketables.go:697: m = append(m, struct{ from, to uint16 }{\nCool, didn't realize one could define a local type.\nDone.\nOn 2013/04/18 20:49:35, r wrote:\n> trivial but why not define a local type?",
			"disapproval": false,
			"date": "2013-04-20 18:12:24.317400",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/8594044/diff/12001/locale/lookup.go\nFile locale/lookup.go (right):\n\nhttps://codereview.appspot.com/8594044/diff/12001/locale/lookup.go#newcode337\nlocale/lookup.go:337: // String returns the uppercase representation of the currency.\ns/uppercase/upper case/",
			"disapproval": false,
			"date": "2013-04-21 16:24:12.587550",
			"approval": true
		},
		{
			"sender": "mpvl@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Great. Unfortunately, declaring the local type doesn't work.  The\r\nslice-writing code uses reflection to determine the type, which then\r\nbecomes main.mapping instead of the literal type.  It should be the literal\r\ntype instead.\r\n\r\n\r\nOn Sun, Apr 21, 2013 at 6:24 PM, <r@golang.org> wrote:\r\n\r\n> LGTM\r\n>\r\n>\r\n> https://codereview.appspot.**com/8594044/diff/12001/locale/**lookup.go<https://codereview.appspot.com/8594044/diff/12001/locale/lookup.go>\r\n> File locale/lookup.go (right):\r\n>\r\n> https://codereview.appspot.**com/8594044/diff/12001/locale/**\r\n> lookup.go#newcode337<https://codereview.appspot.com/8594044/diff/12001/locale/lookup.go#newcode337>\r\n> locale/lookup.go:337: // String returns the uppercase representation of\r\n> the currency.\r\n> s/uppercase/upper case/\r\n>\r\n> https://codereview.appspot.**com/8594044/<https://codereview.appspot.com/8594044/>\r\n>\r\n\r\n\r\n\r\n-- \r\nTrying this for a while: http://go/OnlyCheckEmailTwiceADay.\r\nMarcel van Lohuizen -- Google Switzerland GmbH -- Identifikationsnummer:\r\nCH-020.4.028.116-1\r\n",
			"disapproval": false,
			"date": "2013-04-22 09:16:14.406320",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"mpvl@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=450091856c40&repo=exp ***\n\ngo.exp/locale: further implementation of locale API:\n- Added parser for IANA Language Subtag Registry.  Some of the code is replaced\n  to use this data source where it is more complete than the CLDR data.\n- Parser now supports identifying about 8000 languages (instead of 600+ before).\n- Language, Script, and Region type are implemented.\n- Canonicalization implemented for:\n        - script suppression, as defined by BCP 47/ IANA registry.\n        - mapping of deprecated languages, including 3-letter deprecated codes.\n        - mapping of dominant languages to their macro language, as defined by CLDR.\n- Fixed bug where the 3-letter ISO code for sh was scr, instead of hbs.\n\nLangIDs are now split into IDs for which we look up data in a lookup table\n(includes all 2-letter codes) and others.  Only the former are mapped to a\nconsecutive ranges of ids.  The other langIDs to be generated from\nthe 3-letter languages code and their existence is represented by a bit vector.\n\nThe API now supports representing of deprecated language tags. They will be mapped\nfor all typical use cases, but if the user really wants he can investigate\nthe language that was originally specified.\n\nR=r, mpvl\nCC=golang-dev\nhttps://codereview.appspot.com/8594044",
			"disapproval": false,
			"date": "2013-04-22 09:17:09.858600",
			"approval": false
		}
	],
	"owner_email": "mpvl@golang.org",
	"private": false,
	"base_url": "",
	"owner": "mpvl",
	"subject": "code review 8594044: go.exp/locale: further implementation of locale API:",
	"created": "2013-04-17 17:59:10.033530",
	"patchsets": [
		1,
		2001,
		5001,
		12001,
		18001,
		20001
	],
	"modified": "2013-04-22 09:17:11.269380",
	"closed": true,
	"issue": 8594044
}