{
	"description": "runtime/race: lazily allocate shadow memory\nCurrently race detector runtime maps shadow memory eagerly at process startup.\nIt works poorly on Windows, because Windows requires reservation in swap file\n(especially problematic if several Go program runs at the same, each consuming GBs\nof memory).\nWith this change race detector maps shadow memory lazily, so Go runtime must notify\nabout all new heap memory.\nIt will help with Windows port, but also eliminates scary 16TB virtual mememory\nconsumption in top output (which sometimes confuses some monitoring scripts).",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-11-06 17:03:45.312800",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nSeems fine. I don't want to resort to page fault tricks unless forced.",
			"disapproval": false,
			"date": "2012-11-06 18:59:29.969440",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/06 17:03:45, dvyukov wrote:\n> Hello mailto:golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://dvyukov%2540google.com%40code.google.com/p/go/\n\nI will add race_darwin_amd64.syso when I get to the darwin machine.\n\nRuss, do you think it can cause any problems for the race detector in the long term? If e.g. Go runtime won't be able to notify about new memory. The other solution would be to VirtualAlloc (mmap) shadow memory in ACCESS_VIOLATION exception handler and then resume execution.",
			"disapproval": false,
			"date": "2012-11-06 17:07:32.366920",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=8b32d1715714 ***\n\nruntime/race: lazily allocate shadow memory\nCurrently race detector runtime maps shadow memory eagerly at process startup.\nIt works poorly on Windows, because Windows requires reservation in swap file\n(especially problematic if several Go program runs at the same, each consuming GBs\nof memory).\nWith this change race detector maps shadow memory lazily, so Go runtime must notify\nabout all new heap memory.\nIt will help with Windows port, but also eliminates scary 16TB virtual mememory\nconsumption in top output (which sometimes confuses some monitoring scripts).\n\nR=golang-dev, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6811085",
			"disapproval": false,
			"date": "2012-11-07 08:49:19.067520",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 6811085: runtime/race: lazily allocate shadow memory",
	"created": "2012-11-06 15:38:08.791440",
	"patchsets": [
		1,
		1001,
		3001,
		5001,
		6007,
		8001
	],
	"modified": "2012-11-07 08:49:20.761300",
	"closed": true,
	"issue": 6811085
}