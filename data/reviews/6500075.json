{
	"description": "cmd/gc: give better error for UTF-8-encoded BOM\n\nFixes issue 4040.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"dsymonds@golang.org",
		"r@golang.org",
		"adg@golang.org"
	],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sounds like my proposal has resonance.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-09-06 01:28:34.698880",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Sep 5, 2012 at 10:58 AM, Rob Pike <r@golang.org> wrote:\r\n> i'm still thinking about what's right and don't want to make a\r\n> decision yet, but I believe David is correct. My current working\r\n> hypothesis is:\r\n>\r\n> 1. BOM should be legal and discarded if it is the first code point in the file.\r\n> 2. BOM should be legal and preserved inside strings both raw and double-quoted.\r\n> 3. BOM should be illegal everywhere else.\r\n>\r\n> It's possible that point 1 should read \"preserved\".\r\n\r\nI assume you're talking about gofmt / gofix. I don't believe it should\r\nbe preserved by those tools. We don't preserve Windows line endings\r\neither: we assume that there is a single unique encoding of a\r\nparticular AST.\r\n\r\nI do think that if we want to start allowing beginning of file BOMs in\r\nsource code, we need to mention it in the spec. It could be added onto\r\nthis paragraph:\r\n\r\n    Implementation restriction: For compatibility with other tools, a\r\ncompiler may\r\n    disallow the NUL character (U+0000) in the source text. A compiler may also\r\n    ignore a leading Unicode byte-order mark (U+FEFF) in a source file.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-09-06 00:45:58.158940",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6500075/diff/2002/src/cmd/gc/lex.c\nFile src/cmd/gc/lex.c (right):\n\nhttp://codereview.appspot.com/6500075/diff/2002/src/cmd/gc/lex.c#newcode1597\nsrc/cmd/gc/lex.c:1597: if(rune == 0xfeff) {\nI thought it's only a BOM if it's at the start of the input. I don't see the problem with a string literal starting with a BOM, for instance.",
			"disapproval": false,
			"date": "2012-09-05 04:24:57.954330",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Rune literal you mean. Yes, that too.\r\n\r\nI'll do the spec tomorrow.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-09-06 06:28:13.900500",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Sep 6, 2012 at 1:38 PM, Rob Pike <r@golang.org> wrote:\r\n\r\n> 1. BOM should be legal and preserved inside strings both raw and double-quoted.\r\n\r\nWhat about a BOM character literal?\r\n",
			"disapproval": false,
			"date": "2012-09-06 04:17:59.859280",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dsymonds@golang.org",
				"r@golang.org",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-09-10 16:08:53.555520",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-09-04 19:26:59.486380",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Tue, Sep 4, 2012 at 12:26 PM, <rsc@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> cmd/gc: give better error for UTF-8-encoded BOM\r\n>\r\n> Fixes issue 4040.\r\n>\r\n> Please review this at http://codereview.appspot.com/**6500075/<http://codereview.appspot.com/6500075/>\r\n>\r\n> Affected files:\r\n>   M src/cmd/gc/lex.c\r\n>   A test/syntax/bom.go\r\n>\r\n>\r\n> Index: src/cmd/gc/lex.c\r\n> ==============================**==============================**=======\r\n> --- a/src/cmd/gc/lex.c\r\n> +++ b/src/cmd/gc/lex.c\r\n> @@ -1571,6 +1571,7 @@\r\n>         char str[UTFmax+1];\r\n>         Rune rune;\r\n>\r\n> +top:\r\n>         c = getc();\r\n>         if(c < Runeself)\r\n>                 return c;\r\n> @@ -1591,7 +1592,13 @@\r\n>                 for(c=0; c<i; c++)\r\n>                         print(\"%s%.2x\", c > 0 ? \" \" : \"\",\r\n> *(uchar*)(str+c));\r\n>                 print(\"\\n\");\r\n> +               errorexit();\r\n>         }\r\n> +       if(rune == 0xfeff) {\r\n> +               yyerror(\"Unicode byte-order mark not allowed in Go\r\n> source\");\r\n> +               goto top;\r\n> +       }\r\n> +\r\n>         return rune;\r\n>  }\r\n>\r\n> Index: test/syntax/bom.go\r\n> ==============================**==============================**=======\r\n> new file mode 100644\r\n> --- /dev/null\r\n> +++ b/test/syntax/bom.go\r\n> @@ -0,0 +1,8 @@\r\n> +// errorcheck\r\n> +\r\n> +// Copyright 2012 The Go Authors.  All rights reserved.\r\n> +// Use of this source code is governed by a BSD-style\r\n> +// license that can be found in the LICENSE file.\r\n> +\r\n> +\ufeffpackage p // ERROR \"Unicode byte-order mark not allowed\"\r\n> +\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-09-04 19:29:26.321820",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i'm still thinking about what's right and don't want to make a\r\ndecision yet, but I believe David is correct. My current working\r\nhypothesis is:\r\n\r\n1. BOM should be legal and discarded if it is the first code point in the file.\r\n2. BOM should be legal and preserved inside strings both raw and double-quoted.\r\n3. BOM should be illegal everywhere else.\r\n\r\nIt's possible that point 1 should read \"preserved\".\r\n\r\nThis seems to meet what the Unicode consortium asks, codifying idiocy\r\nwith the goal of making progress.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-09-05 14:58:35.875180",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "If you do the spec change I'll fix the compiler.\r\n",
			"disapproval": false,
			"date": "2012-09-06 03:49:50.082730",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 6 September 2012 10:45, Russ Cox <rsc@golang.org> wrote:\r\n> On Wed, Sep 5, 2012 at 10:58 AM, Rob Pike <r@golang.org> wrote:\r\n>> i'm still thinking about what's right and don't want to make a\r\n>> decision yet, but I believe David is correct. My current working\r\n>> hypothesis is:\r\n>>\r\n>> 1. BOM should be legal and discarded if it is the first code point in the file.\r\n>> 2. BOM should be legal and preserved inside strings both raw and double-quoted.\r\n>> 3. BOM should be illegal everywhere else.\r\n>>\r\n>> It's possible that point 1 should read \"preserved\".\r\n>\r\n> I assume you're talking about gofmt / gofix. I don't believe it should\r\n> be preserved by those tools. We don't preserve Windows line endings\r\n> either: we assume that there is a single unique encoding of a\r\n> particular AST.\r\n\r\n+1 to this. It would be a great\u00a0benefit for gofmt to strip the BOM.\r\n\r\nAndrew\r\n",
			"disapproval": false,
			"date": "2012-09-06 01:15:33.804580",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I had dinner with Ken and he talked me into a slightly different\r\nproposal. Rules are changed to discard BOM everywhere outside string\r\nliterals. The argument is that if you're going to toss them at the\r\nbeginning, might as well toss them elsewhere too, so concatenated\r\nfiles don't crop up later. (You won't concatenate mid-string literal.)\r\n\r\nWe now have two simple rules, both implemented in the lexer:\r\n\r\n1. BOM should be legal and preserved inside strings both raw and double-quoted.\r\n2. BOM should be discarded everywhere else.\r\n\r\nWe believe that these rules mean we won't have to have this design\r\ndiscussion again.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-09-06 03:38:58.873600",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 6500075: cmd/gc: give better error for UTF-8-encoded BOM",
	"created": "2012-09-04 19:26:25.084350",
	"patchsets": [
		1,
		2001,
		2002
	],
	"modified": "2012-09-10 16:08:54.865770",
	"closed": true,
	"issue": 6500075
}