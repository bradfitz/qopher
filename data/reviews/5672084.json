{
	"description": "gc: reject import paths containing special characters\n\nAlso allow multiple invalid import statements in a\nsingle file.\n\nFixes issue 3021. The changes to go/parser and the\nlanguage specifcation have already been committed.",
	"cc": [
		"rsc@golang.org",
		"gri@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please keep the contains NUL check separate from the others.\nThen you can put all the new tests in a single import6.go.\n",
			"disapproval": false,
			"date": "2012-02-18 20:39:52.220425",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I know this needs tests but I want to know where\nthey should go.  A prime candidate would be import5.go\nbut the compiler will bail out quickly on the first\nbad import.  I'd have to add a new import[6-12].go to\ntest each possibility.\n\nShould I make a directory called \"import\" and put\nall the relevant tests there?\n\nThanks,\n  Anthony\n",
			"disapproval": false,
			"date": "2012-02-18 09:17:31.004099",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-02-18 09:14:26.242838",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Russ Cox <rsc@golang.org> once said:\n> Please keep the contains NUL check separate from the others.\n> Then you can put all the new tests in a single import6.go.\n\nI'm not sure I follow.  The problem with putting\nall the tests in the same file is that calling\nerrorexit upon failure only allows us to test one\nimport path per file.  Should I just return from\nimportfile instead of calling errorexit?\n\nThanks,\n  Anthony\n",
			"disapproval": false,
			"date": "2012-02-22 04:18:44.414472",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I didn't realize a bad import is always an exit.\nI guess you need multiple tests.",
			"disapproval": false,
			"date": "2012-02-22 04:24:27.186544",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please add the test cases from go/parser's test\nas updated in CL 5697047.\n",
			"disapproval": false,
			"date": "2012-02-23 20:10:02.743613",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-23 11:56:14.450830",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"ality@pbrane.org",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=fac08273b2d1 ***\n\ngc: reject import paths containing special characters\n\nAlso allow multiple invalid import statements in a\nsingle file.\n\nFixes issue 3021. The changes to go/parser and the\nlanguage specifcation have already been committed.\n\nR=rsc, gri\nCC=golang-dev\nhttp://codereview.appspot.com/5672084\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2012-02-24 19:48:39.753244",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks.  I'll review the code tomorrow but please\nmake the messages singular: you've only detected one\nof each of these.  Also please use single quotes for the\ncharacter:\n\ntest/import5.go:13: import path contains control character\ntest/import5.go:14: import path contains invalid UTF-8 sequence\ntest/import5.go:15: import path contains invalid character '!'\ntest/import5.go:16: import path contains space character\ntest/import5.go:17: import path contains control character\n",
			"disapproval": false,
			"date": "2012-02-23 05:59:26.672851",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-23 05:34:38.881424",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I relaxed the way import path errors are handled\nso we can test more than one in a single file.\n\nIt now looks like this:\n\n$ go tool 8g -e test/import5.go\ntest/import5.go:11: import path is empty\ntest/import5.go:12: import path contains NUL\ntest/import5.go:13: import path contains control characters\ntest/import5.go:14: import path contains invalid UTF-8 bytes\ntest/import5.go:15: import path contains invalid character: \"!\"\ntest/import5.go:16: import path contains space characters\ntest/import5.go:17: import path contains control characters\ntest/import5.go:18: import path contains backslash; use slash\ntest/import5.go:19: import path contains invalid character: \"`\"\ngo tool 8g: exit status 1\n$\n\n  Anthony\n",
			"disapproval": false,
			"date": "2012-02-23 05:37:11.388815",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nThanks for all the test cases, gri.",
			"disapproval": false,
			"date": "2012-02-23 22:50:07.413937",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"ality@pbrane.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5672084/diff/12001/src/cmd/gc/go.y\nFile src/cmd/gc/go.y (right):\n\nhttp://codereview.appspot.com/5672084/diff/12001/src/cmd/gc/go.y#newcode210\nsrc/cmd/gc/go.y:210: // When an invalid import path is passed to importfile, it calls\nThis is going to be very confusing if the input is\n\npackage p\nimport \"\\xff\" package q ...\n\nsince the parser will be reading the input as if it were\nthe imported package.\n\nIt would be better for a failed import to at least push\na fake input file that says \"$$\" (just like import \"unsafe\"\npushes a fake import file) so that this rule can be\n\nimport_here import_there\n\nThat would be impossible to confuse because the lexer will\nnever return a '$' except as import data.",
			"disapproval": false,
			"date": "2012-02-23 20:16:26.708084",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I had started on test/import5.go changes. You may be able to use the\ncode below instead. I believe that the compiler bails with the first\nimport error; it would be better if if processed all imports before\nbailing.\n- gri\n\n// errorcheck\n\n// Copyright 2009 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// Verify that imports with backslashes are rejected by the compiler.\n// Does not compile.\n\npackage main\n\n// Correct import paths.\nimport \"fmt\"\nimport `time`\nimport \"m\\x61th\"\nimport \"go/parser\"\n\n// Correct import paths, but the packages don't exist.\n// Don't test.\n//import \"a.b\"\n//import \"greek/\u03b1\u03b2\"\n\n// Each of these pairs tests both `` vs \"\" strings\n// and also use of invalid characters spelled out as\n// escape sequences and written directly.\n// For example `\"\\x00\"` tests import \"\\x00\"\n// while \"`\\x00`\" tests import `<actual-NUL-byte>`.\nimport \"\"\t\t// ERROR \"import path\"\nimport ``\t\t// ERROR \"import path\"\nimport \"\\x00\"\t\t// ERROR \"import path\"\nimport `\\x00`\t\t// ERROR \"import path\"\nimport \"\\x7f\"\t\t// ERROR \"import path\"\nimport `\\x7f`\t\t// ERROR \"import path\"\nimport \"a!\"\t\t// ERROR \"import path\"\nimport `a!`\t\t// ERROR \"import path\"\nimport \"a b\"\t\t// ERROR \"import path\"\nimport `a b`\t\t// ERROR \"import path\"\nimport \"a\\\\b\"\t\t// ERROR \"import path\"\nimport `a\\\\b`\t\t// ERROR \"import path\"\nimport \"\\\"`a`\\\"\"\t// ERROR \"import path\"\nimport `\\\"a\\\"`\t\t// ERROR \"import path\"\nimport \"\\x80\\x80\"\t// ERROR \"import path\"\nimport `\\x80\\x80`\t// ERROR \"import path\"\nimport \"\\xFFFD\"\t\t// ERROR \"import path\"\nimport `\\xFFFD`\t\t// ERROR \"import path\"\n\n\nOn Thu, Feb 23, 2012 at 12:16 PM,  <rsc@golang.org> wrote:\n>\n> http://codereview.appspot.com/5672084/diff/12001/src/cmd/gc/go.y\n> File src/cmd/gc/go.y (right):\n>\n> http://codereview.appspot.com/5672084/diff/12001/src/cmd/gc/go.y#newcode210\n> src/cmd/gc/go.y:210: // When an invalid import path is passed to\n> importfile, it calls\n> This is going to be very confusing if the input is\n>\n> package p\n> import \"\\xff\" package q ...\n>\n> since the parser will be reading the input as if it were\n> the imported package.\n>\n> It would be better for a failed import to at least push\n> a fake input file that says \"$$\" (just like import \"unsafe\"\n> pushes a fake import file) so that this rule can be\n>\n> import_here import_there\n>\n> That would be impossible to confuse because the lexer will\n> never return a '$' except as import data.\n>\n> http://codereview.appspot.com/5672084/\n",
			"disapproval": false,
			"date": "2012-02-23 20:49:24.062751",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"ality@pbrane.org",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-02-24 19:48:17.292537",
			"approval": true
		}
	],
	"owner_email": "ality@pbrane.org",
	"private": false,
	"base_url": "",
	"owner": "ality",
	"subject": "code review 5672084: gc: reject import paths containing special characters",
	"created": "2012-02-18 09:14:05.223973",
	"patchsets": [
		1,
		2001,
		4001,
		8001,
		12001,
		10013
	],
	"modified": "2012-02-24 21:09:38.779396",
	"closed": true,
	"issue": 5672084
}