{
	"description": "      sync: a simpler and faster Cond\n\nBenchmark results:\nprocs   waiters old     new     delta\n1       1       402     250     -37.81%\n1       2       665     489     -26.47%\n1       4       1173    908     -22.59%\n1       8       2281    1770    -22.40%\n2       1       1504    997     -33.71%\n2       2       2666    2005    -24.79%\n2       4       4915    3740    -23.91%\n2       8       8983    7193    -19.93%\n4       1       1431    1012    -29.28%\n4       2       2845    2130    -25.13%\n4       4       5508    3946    -28.36%\n4       8       10123   7974    -21.23%",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"dvyukov@google.com",
		"rsc@golang.org",
		"max@mxcrypt.com",
		"adg@golang.org",
		"bradfitz@golang.org"
	],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 17 July 2013 23:20, Maxim Khitrov <max@mxcrypt.com> wrote:\r\n\r\n> I'd argue that\r\n\r\n\r\nI don't think it matters. The code is out there being used in this way. We\r\nmust respect the Go 1 compatibility promise.\r\n\r\nI agree the condition should be documented, as it is for Mutex and RWMutex.\r\nThe zero condition for WaitGroup should also be documented.\r\n\r\nAndrew\r\n",
			"disapproval": false,
			"date": "2013-07-17 13:31:18.410930",
			"approval": false
		},
		{
			"sender": "sougou@google.com",
			"recipients": [
				"sougou@google.com",
				"golang-dev@googlegroups.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is a new implementation that uses a channel, developed in collaboration with Dmitry.\n\nBenchmarks:\nprocs   waiters old     new     delta\n1       1       402     250     -37.81%\n1       2       665     489     -26.47%\n1       4       1173    908     -22.59%\n1       8       2281    1770    -22.40%\n2       1       1504    997     -33.71%\n2       2       2666    2005    -24.79%\n2       4       4915    3740    -23.91%\n2       8       8983    7193    -19.93%\n4       1       1431    1012    -29.28%\n4       2       2845    2130    -25.13%\n4       4       5508    3946    -28.36%\n4       8       10123   7974    -21.23%\n\nI had to fix up pipe.go, which was using Cond incorrectly. I didn't find any other use of Cond in the tree.",
			"disapproval": false,
			"date": "2013-07-17 04:09:00.292570",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"sougou@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/17 04:09:00, sougou wrote:\n> This is a new implementation that uses a channel, developed in collaboration\n> with Dmitry.\n> \n> Benchmarks:\n> procs   waiters old     new     delta\n> 1       1       402     250     -37.81%\n> 1       2       665     489     -26.47%\n> 1       4       1173    908     -22.59%\n> 1       8       2281    1770    -22.40%\n> 2       1       1504    997     -33.71%\n> 2       2       2666    2005    -24.79%\n> 2       4       4915    3740    -23.91%\n> 2       8       8983    7193    -19.93%\n> 4       1       1431    1012    -29.28%\n> 4       2       2845    2130    -25.13%\n> 4       4       5508    3946    -28.36%\n> 4       8       10123   7974    -21.23%\n> \n> I had to fix up pipe.go, which was using Cond incorrectly. I didn't find any\n> other use of Cond in the tree.\n\nCould you make the number of waiters a uint32 so we don't penalise arm and 386 ?",
			"disapproval": false,
			"date": "2013-07-17 06:23:15.416040",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"sougou@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/17 04:09:00, sougou wrote:\n> This is a new implementation that uses a channel, developed in collaboration\n> with Dmitry.\n> \n> Benchmarks:\n> procs   waiters old     new     delta\n> 1       1       402     250     -37.81%\n> 1       2       665     489     -26.47%\n> 1       4       1173    908     -22.59%\n> 1       8       2281    1770    -22.40%\n> 2       1       1504    997     -33.71%\n> 2       2       2666    2005    -24.79%\n> 2       4       4915    3740    -23.91%\n> 2       8       8983    7193    -19.93%\n> 4       1       1431    1012    -29.28%\n> 4       2       2845    2130    -25.13%\n> 4       4       5508    3946    -28.36%\n> 4       8       10123   7974    -21.23%\n\nAdd this benchmark to cond_test.go, and any additional tests that you have (if any).\nAdd the benchmark results to the change description.\n\n> I had to fix up pipe.go, which was using Cond incorrectly. I didn't find any\n> other use of Cond in the tree.",
			"disapproval": false,
			"date": "2013-07-17 06:45:24.963640",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"sougou@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11410043/diff/3001/src/pkg/io/pipe.go\nFile src/pkg/io/pipe.go (left):\n\nhttps://codereview.appspot.com/11410043/diff/3001/src/pkg/io/pipe.go#oldcode184\nsrc/pkg/io/pipe.go:184: p.rwait.L = &p.l\nIs such usage prohibited? I do not see this explicitly stated in the documentation...\nAt least we must add an explicit statement about this to Cond docs.",
			"disapproval": false,
			"date": "2013-07-17 06:45:30.064250",
			"approval": false
		},
		{
			"sender": "sougou@google.com",
			"recipients": [
				"sougou@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "- Added clarification to NewCond\n- Changed waiters to uint32\n- Added TestRace\n- Added a Bench function\nI had to write a custom benchmark function (as a test), so it can be rerun under different conditions. The benchmark itself is time-consuming. So, I disabled it to prevent the usual tests from running for too long.\nLet me know if there's a better way to do this.\n\nhttps://codereview.appspot.com/11410043/diff/3001/src/pkg/io/pipe.go\nFile src/pkg/io/pipe.go (left):\n\nhttps://codereview.appspot.com/11410043/diff/3001/src/pkg/io/pipe.go#oldcode184\nsrc/pkg/io/pipe.go:184: p.rwait.L = &p.l\nOn 2013/07/17 06:45:30, dvyukov wrote:\n> Is such usage prohibited? I do not see this explicitly stated in the\n> documentation...\n> At least we must add an explicit statement about this to Cond docs.\n\nI thought that a struct with unexported fields that had a New function should only be initialized through that constructor (like bytes.NewReader). In any case, I've added a comment to clarify.",
			"disapproval": false,
			"date": "2013-07-17 09:01:03.617480",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"sougou@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/17 09:01:03, sougou wrote:\n> - Added clarification to NewCond\n> - Changed waiters to uint32\n> - Added TestRace\n> - Added a Bench function\n> I had to write a custom benchmark function (as a test), so it can be rerun under\n> different conditions. The benchmark itself is time-consuming. So, I disabled it\n> to prevent the usual tests from running for too long.\n> Let me know if there's a better way to do this.\n\nMake a benchmark and do not set GOMAXPROCS.\nThe benchmark can be run as go test -cpu=1,2,4,8,16\nTHen you can read current value of GOMAXPROCS and create the necessary number of goroutines.",
			"disapproval": false,
			"date": "2013-07-17 09:09:01.082140",
			"approval": false
		},
		{
			"sender": "sougou@google.com",
			"recipients": [
				"sougou@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\nStill not too happy with Cond1, etc. But it's much better than before.",
			"disapproval": false,
			"date": "2013-07-17 09:28:23.864670",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"sougou@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/17 09:28:23, sougou wrote:\n> PTAL\n> Still not too happy with Cond1, etc. But it's much better than before.\n\nYou want waiters to be orthogonal to GOMAXPROCS, right?\nYou can create 3 benchmarks for waiters==GOMAXPROCS, waiters=GOMAXPROCS/4 and waiters=GOMAXPROCS*4 (for GOMAXPROCS=1 the first two will be the same, but it's fine).",
			"disapproval": false,
			"date": "2013-07-17 09:37:51.993760",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"sougou@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11410043/diff/20001/src/pkg/sync/cond.go\nFile src/pkg/sync/cond.go (left):\n\nhttps://codereview.appspot.com/11410043/diff/20001/src/pkg/sync/cond.go#oldcode83\nsrc/pkg/sync/cond.go:83: if raceenabled {\nYou need similar race instrumentation in the new version.\n\"_ = c.m.state\" is used to trigger possible nil deref early (and not inside of race detector runtime).\n\nraceDisable/raceEnable are used to hide excessive synchronization  from race detector. Everything except *user* mutex lock/unlock must be in raceDisable/raceEnable region. Signal and Broadcast must be in raceDisable/raceEnable entirely (they do not synchronize, only provide notification).",
			"disapproval": false,
			"date": "2013-07-17 09:44:34.587380",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"sougou@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"dvyukov@google.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "NOT LGTM\n\nIn Go 1 and Go 1.1, after you did:\n\n    var cond sync.Cond\n    cond.L = &myMutex\n\ncond was ready for use. You must preserve that, and this CL does not.\n\nI have written plenty of code that puts the sync.Cond in an outer struct and just initializes L. I am sure others have too. We cannot break that code.",
			"disapproval": true,
			"date": "2013-07-17 12:58:40.718980",
			"approval": false
		},
		{
			"sender": "max@mxcrypt.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'd argue that setting L directly instead of calling NewCond was\r\nimproper use. I considered doing the same thing when writing a mock\r\nnet.Conn implementation [1], but went with *sync.NewCond(mu) because\r\nunlike bytes.Buffer, sync.Mutex, and some other objects, there was\r\nnothing in the documentation that said it was ok to use the zero value\r\nof sync.Cond.\r\n\r\nYou wouldn't do this unless you looked into how sync.Cond was\r\nimplemented. As a general rule, if you have a struct with unexported\r\nfields, a constructor function, and nothing in the documentation that\r\nsays it's ok to use the zero value, I think you have to use the\r\nconstructor. Perhaps this should be documented somewhere?\r\n\r\n[1] http://code.google.com/p/go-imap/source/browse/go1/mock/net.go#141\r\n",
			"disapproval": false,
			"date": "2013-07-17 13:20:39.344340",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jul 17, 2013 at 9:20 AM, Maxim Khitrov <max@mxcrypt.com> wrote:\r\n\r\n> You wouldn't do this unless you looked into how sync.Cond was\r\n> implemented. As a general rule, if you have a struct with unexported\r\n> fields, a constructor function, and nothing in the documentation that\r\n> says it's ok to use the zero value, I think you have to use the\r\n> constructor.\r\n\r\n\r\nThe only reason L is exported is so that clients can initialize a sync.Cond\r\nallocated without the constructor.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-07-17 13:38:42.191720",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It's good to document, but I also disagree with the assertion that zero\r\nvalues must not be used unless explicitly documented. Effective Go is very\r\nclear that you should make the zero value meaningful when possible. It's\r\nnot required to document the meaning of every usable zero value.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-07-17 13:40:38.724890",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 17 July 2013 23:40, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> It's good to document, but I also disagree with the assertion that zero\r\n> values must not be used unless explicitly documented. Effective Go is very\r\n> clear that you should make the zero value meaningful when possible. It's\r\n> not required to document the meaning of every usable zero value.\r\n\r\n\r\nI agree in general, but it seems a good idea to be consistent within the\r\nsync package.\r\n",
			"disapproval": false,
			"date": "2013-07-17 13:44:59.408360",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"sougou@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"dvyukov@google.com",
				"rsc@golang.org",
				"max@mxcrypt.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FWIW the channel can be lazily initialized before sending and receiving along the lines of:\n\nc = atomic load cond.c\nif c == nil {\n  c = make(chan struct{})\n  try to swap nil to c in CAS loop\n}",
			"disapproval": false,
			"date": "2013-07-17 13:46:10.415580",
			"approval": false
		},
		{
			"sender": "sougou@google.com",
			"recipients": [
				"sougou@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"dvyukov@google.com",
				"rsc@golang.org",
				"max@mxcrypt.com",
				"adg@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "That was easy :)\nThe CL also has the race disable & null deref checking code.\nI assume accessing c.waiters will be sufficient.",
			"disapproval": false,
			"date": "2013-07-17 23:07:34.660420",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Just hg upload nnnnnn again.\r\n On Jul 18, 2013 9:01 AM, <sougou@google.com> wrote:\r\n\r\n> I uploaded a CL that used sync.Once to initialize the channel lazily,\r\n> but appspot failed on me with corrupt data.\r\n> I could start a new CL. OTOH, the added complications make this less\r\n> appealing. I'm tempted to abandon.\r\n>\r\n> https://codereview.appspot.**com/11410043/<https://codereview.appspot.com/11410043/>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-07-17 23:02:04.611590",
			"approval": false
		},
		{
			"sender": "sougou@google.com",
			"recipients": [
				"sougou@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"dvyukov@google.com",
				"rsc@golang.org",
				"max@mxcrypt.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I uploaded a CL that used sync.Once to initialize the channel lazily, but appspot failed on me with corrupt data.\nI could start a new CL. OTOH, the added complications make this less appealing. I'm tempted to abandon.",
			"disapproval": false,
			"date": "2013-07-17 23:01:03.219410",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"sougou@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"dvyukov@google.com",
				"rsc@golang.org",
				"max@mxcrypt.com",
				"adg@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/11410043/diff/50001/src/pkg/sync/cond.go\nFile src/pkg/sync/cond.go (right):\n\nhttps://codereview.appspot.com/11410043/diff/50001/src/pkg/sync/cond.go#newcode38\nsrc/pkg/sync/cond.go:38: func (c *Cond) lazyInit() {\nI would rename this initOnce, then change the call sites to:\n\nc.once.Do(c.initOnce)\n\nThen you can ditch the func() {... } and a function call. (just a call to Once.Do, not lazyInit and then Once.Do)",
			"disapproval": false,
			"date": "2013-07-17 23:43:50.833020",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"sougou@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"dvyukov@google.com",
				"rsc@golang.org",
				"max@mxcrypt.com",
				"adg@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The approach of this CL bothers me quite a bit.\n\nChannels do a lot of additional things that sync.Cond should not need to do. What makes the current implementation so slow? It seems like the other building blocks we've provided are sub-par and need to be improved.",
			"disapproval": false,
			"date": "2013-07-18 00:27:37.766380",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"sougou@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"dvyukov@google.com",
				"rsc@golang.org",
				"max@mxcrypt.com",
				"adg@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/18 00:27:37, rsc wrote:\n> The approach of this CL bothers me quite a bit.\n> \n> Channels do a lot of additional things that sync.Cond should not need to do.\n> What makes the current implementation so slow?\n\nI guess it's the internal mutex and memory allocation.\n\n> It seems like the other building\n> blocks we've provided are sub-par and need to be improved.\n\nWhat do you mean by \"building blocks\"? sync.Mutex? or runtime_Semacquire?",
			"disapproval": false,
			"date": "2013-07-18 08:46:48.202580",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jul 18, 2013 at 4:46 AM, <dvyukov@google.com> wrote:\r\n\r\n> On 2013/07/18 00:27:37, rsc wrote:\r\n>\r\n>> The approach of this CL bothers me quite a bit.\r\n>>\r\n>\r\n>  Channels do a lot of additional things that sync.Cond should not need\r\n>>\r\n> to do.\r\n>\r\n>> What makes the current implementation so slow?\r\n>>\r\n>\r\n> I guess it's the internal mutex and memory allocation.\r\n\r\n\r\nThat doesn't really answer the question. It just turns it into:\r\n\r\n1. Why is the sync.Mutex so much more expensive than the runtime Lock?\r\n2. Why is the allocation required now but not in the channel implementation?\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-07-18 14:05:36.559100",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jul 18, 2013 at 6:05 PM, Russ Cox <rsc@golang.org> wrote:\r\n> On Thu, Jul 18, 2013 at 4:46 AM, <dvyukov@google.com> wrote:\r\n>>\r\n>> On 2013/07/18 00:27:37, rsc wrote:\r\n>>>\r\n>>> The approach of this CL bothers me quite a bit.\r\n>>\r\n>>\r\n>>> Channels do a lot of additional things that sync.Cond should not need\r\n>>\r\n>> to do.\r\n>>>\r\n>>> What makes the current implementation so slow?\r\n>>\r\n>>\r\n>> I guess it's the internal mutex and memory allocation.\r\n>\r\n>\r\n> That doesn't really answer the question. It just turns it into:\r\n>\r\n> 1. Why is the sync.Mutex so much more expensive than the runtime Lock?\r\n\r\nsync.Mutex is replaced with a single atomic operation in this\r\nimplementation. Single atomic operation is obviously faster than mutex\r\nlock/unlock.\r\n\r\nAnd the chan replacs runtime_Semacquire -- they both have runtime lock.\r\n\r\n> 2. Why is the allocation required now but not in the channel implementation?\r\n\r\nBecause chan is a *synchronous* semaphore here (synchronous as in\r\nchannels -- Up waits for matching Down). While runtime_Semacquire is\r\nan asynchronous semaphore, so to preserve correct generational\r\nbehavior of Cond we need to cycle semaphores.\r\n\r\nAs I said above we can do the Cond really fast and not require any\r\nmemory allocation at all (nor during creation nor during wait) if we\r\nimplement a synchronous version of runtime_Semacquire (and provide\r\nruntime_SemreleaseN). The question is -- does it worth it?\r\n",
			"disapproval": false,
			"date": "2013-07-18 14:18:10.335290",
			"approval": false
		},
		{
			"sender": "sougou@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> As I said above we can do the Cond really fast and not require any\r\n> memory allocation at all (nor during creation nor during wait) if we\r\n> implement a synchronous version of runtime_Semacquire (and provide\r\n> runtime_SemreleaseN). The question is -- does it worth it?\r\n>\r\n\r\nOne could make a case for a synchronous semaphore if there are other use\r\ncases for it. It may not be worth it just for Cond.\r\nThe other way to look at it is that Cond is a formalization of the\r\nsynchronous semaphore that all other cases would use, which would again\r\nmake it worthwhile.\r\n\r\nThe code change to transition out of a channel should be trivial if a\r\nsynchronous semaphore was built in the future.\r\n",
			"disapproval": false,
			"date": "2013-07-18 21:15:41.855850",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"sougou@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"dvyukov@google.com",
				"rsc@golang.org",
				"max@mxcrypt.com",
				"adg@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/18 21:15:41, sougou wrote:\n> > As I said above we can do the Cond really fast and not require any\n> > memory allocation at all (nor during creation nor during wait) if we\n> > implement a synchronous version of runtime_Semacquire (and provide\n> > runtime_SemreleaseN). The question is -- does it worth it?\n> >\n> \n> One could make a case for a synchronous semaphore if there are other use\n> cases for it. It may not be worth it just for Cond.\n> The other way to look at it is that Cond is a formalization of the\n> synchronous semaphore that all other cases would use, which would again\n> make it worthwhile.\n> \n> The code change to transition out of a channel should be trivial if a\n> synchronous semaphore was built in the future.\n\n\nI've hacked sync-semaphore-based Cond impl for fun:\nhttps://codereview.appspot.com/11573043\n\nIt does not require any memory allocations, does not suffer from initialization problems and is 30-50% faster that current impl.\n\nI've compared it to this impl as well:\nbenchmark            old ns/op    new ns/op    delta\nBenchmarkCond1             220          195  -11.36%\nBenchmarkCond1-2           667          607   -9.00%\nBenchmarkCond1-4           814          548  -32.68%\nBenchmarkCond1-8           783          613  -21.71%\nBenchmarkCond1-16          528          450  -14.77%\nBenchmarkCond2             400          352  -12.00%\nBenchmarkCond2-2          1525         1378   -9.64%\nBenchmarkCond2-4          1355         1322   -2.44%\nBenchmarkCond2-8          1745         1291  -26.02%\nBenchmarkCond2-16         1199         1078  -10.09%\nBenchmarkCond4             776          614  -20.88%\nBenchmarkCond4-2          3588         3047  -15.08%\nBenchmarkCond4-4          3717         3006  -19.13%\nBenchmarkCond4-8          3454         3045  -11.84%\nBenchmarkCond4-16         3583         2637  -26.40%\nBenchmarkCond8            1607         1264  -21.34%\nBenchmarkCond8-2          8431         6736  -20.10%\nBenchmarkCond8-4          8904         7689  -13.65%\nBenchmarkCond8-8          9132         7517  -17.69%\nBenchmarkCond8-16         9050         8093  -10.57%",
			"disapproval": false,
			"date": "2013-07-19 13:56:38.539710",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"sougou@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"dvyukov@google.com",
				"rsc@golang.org",
				"max@mxcrypt.com",
				"adg@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please abandon this CL.",
			"disapproval": false,
			"date": "2013-07-23 10:16:08.932280",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"sougou@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"dvyukov@google.com",
				"rsc@golang.org",
				"max@mxcrypt.com",
				"adg@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/07/23 10:16:08, dfc wrote:\n> Please abandon this CL.\n\nIs it decided to abandon it?",
			"disapproval": false,
			"date": "2013-07-23 10:23:02.595870",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I thought we were going to go with your version.\r\n\r\nOn Tue, Jul 23, 2013 at 8:23 PM,  <dvyukov@google.com> wrote:\r\n> On 2013/07/23 10:16:08, dfc wrote:\r\n>>\r\n>> Please abandon this CL.\r\n>\r\n>\r\n> Is it decided to abandon it?\r\n>\r\n> https://codereview.appspot.com/11410043/\r\n",
			"disapproval": false,
			"date": "2013-07-23 10:50:54.178650",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "We can't go with anything until preemption is settled. I can't deal with\r\nmore than one incredibly subtle thing changing in the runtime at a time.\r\nOnce preemption is settled I want to think more carefully about what these\r\nCLs tell us about the primitives we're providing. I still think there's a\r\nbigger lesson here that we're missing.\r\n\r\nCondition variables are fundamentally asynchronous. If the implementation\r\nis faster using a synchronous underlying primitive, there's either\r\nsomething very deep or very wrong going on, and I don't know which.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-07-23 12:41:31.975530",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jul 23, 2013 at 4:41 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> We can't go with anything until preemption is settled. I can't deal with\r\n> more than one incredibly subtle thing changing in the runtime at a time.\r\n> Once preemption is settled I want to think more carefully about what these\r\n> CLs tell us about the primitives we're providing. I still think there's a\r\n> bigger lesson here that we're missing.\r\n>\r\n> Condition variables are fundamentally asynchronous. If the implementation\r\n> is faster using a synchronous underlying primitive, there's either\r\n> something very deep or very wrong going on, and I don't know which.\r\n>\r\n\r\n\r\nI understand what you are saying.\r\n\r\nThe reason why we want to use synchronous semaphore is that we are building\r\nCond on top of runtime, with minimal coupling and using a simple interface.\r\n\r\nSynchronization primitives are tricky. And Cond is probably the most tricky\r\nin sync. If we would allow tight coupling of sync and runtime (which is\r\nusually used in implementation of synchronization primitives), then it\r\nwould be implemented as follows.\r\n\r\nThe key component here is runtime.park function that can atomically park\r\nthe goroutine and unlock sync.Mutex.\r\n\r\nfunc (c *Cond) Wait() {\r\n  add g to c.glist  // this also requires g identity to be exposed to Cond\r\n  runtime.park(c.mu, unlock, \"cond wait\")\r\n  c.mu.Lock()\r\n}\r\n\r\nfunc (c *Cond) Signal() {\r\n  if c.glist != nil {\r\n    if not under c.mu, lock c.mu  // and also requires goroutine identity\r\nhere\r\n    // for Broadcast we grab the whole list\r\n    g = try dequeue from c.glist\r\n    if was not under c.mu, unlock c.mu\r\n    if g != nil\r\n      runtime.ready(g)\r\n  }\r\n}\r\n\r\nThis is kind of \"canonical\" (and asynchronous) implementation. And this is\r\nactually how we implement conditional waiting in runtime for channels.\r\nNow, since we do not have/want all that coupling, we use synchronous\r\nsemaphore to achieve sort of atomic mu.Unlock and goroutine park here:\r\n\r\nfunc (c *Cond) Wait() {\r\n  atomic.Add(c.waiters, 1)\r\n  c.mu.Unlock()\r\n  runtime_Syncsemacquire(&c.sem)\r\n  c.mu.Lock()\r\n}\r\n\r\nIf a signaler observes this goroutine in between c.mu.Unlock()\r\nand runtime_Syncsemacquire, then it will wait till the goroutine arrives to\r\nruntime_Syncsemacquire, thus restoring the atomicity.\r\n",
			"disapproval": false,
			"date": "2013-08-09 10:19:01.988370",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for the explanation. I will reply with specific comments on 11410043.\r\n",
			"disapproval": false,
			"date": "2013-08-09 14:36:15.742770",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry, I meant I will reply with specific comments on 11573043.\r\n",
			"disapproval": false,
			"date": "2013-08-09 14:36:41.628930",
			"approval": false
		}
	],
	"owner_email": "sougou@google.com",
	"private": false,
	"base_url": "",
	"owner": "sougou",
	"subject": "sync: a simpler and faster Cond",
	"created": "2013-07-17 04:05:02.983310",
	"patchsets": [
		1,
		3001,
		10001,
		16001,
		20001,
		33001,
		38002,
		50001,
		55001
	],
	"modified": "2013-08-09 14:36:42.369710",
	"closed": false,
	"issue": 11410043
}