{
	"description": "net/url: new URL design",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This proposal is obviously very similar to the time.Time\nproposal, choosing a single unified representation and\nusing accessors to get at the underlying data.\n\nI think it doesn't work as well here.  First, the space\nof URLs is not dense like the space of times: there are\nplenty of invalid URLs and the way to check for them\ndiffers from all other packages.  Second, the accessors\ncannot be implemented efficiently.  One of the key\nreasons the new time API works is that all the accessors\ncan be implemented in O(1) time.  That is not true here,\nand on top of the O(n) time for most of them, they must\nallocate.  Third, having to use the so-called \"fluid\" syntax\nfor constructing a URL stands in contrast to the usual\nGo composite literals.  That's not without precedent (template\ncomes to mind) but it's still unusual.  Also, these constructors\nare fundamentally inefficient too, because at every step you\nhave to fully construct a string form that the next step will\npick apart and then discard as garbage.\n\nI applaud the suggestion: it's a very interesting model\nto think about.  But on balance I don't think it works here.\n\nMy suggestion for the current url.URL is to keep it a struct\nbut throw away the various duplicate fields, so there is\nno redundant information in the struct, and see what breaks.\nThe problem in the past was Google Maps, which takes a\nquery string in the form of a path (/vt/x=1&y=2...), but I believe\nthe problem there was that my code was over-escaping the\npath (it was escaping all the query-special character in addition\nto the path-special ones).  The code has since been fixed\nto distinguish those two cases, so it might just work now.\n\nThanks for cleaning up the mess I left.  This was some of\nthe earliest Go code I wrote, and it has more rough edges\nthan I'd like.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-07 02:45:59.979399",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5450108/diff/3004/src/pkg/net/url/design.go\nFile src/pkg/net/url/design.go (right):\n\nhttp://codereview.appspot.com/5450108/diff/3004/src/pkg/net/url/design.go#newcode15\nsrc/pkg/net/url/design.go:15: type URL string\nthis type definition is reasonable but has two unfortunate properties:\n1) it's easy to work around the API, which you shouldn't encourage.\n2) it will cause lots of garbage to be generated.",
			"disapproval": false,
			"date": "2011-12-07 01:12:33.181342",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5450108/diff/3003/src/pkg/net/url/design.go\nFile src/pkg/net/url/design.go (right):\n\nhttp://codereview.appspot.com/5450108/diff/3003/src/pkg/net/url/design.go#newcode45\nsrc/pkg/net/url/design.go:45: // replaced by the a encoded authority.\ns/a //\n\nhttp://codereview.appspot.com/5450108/diff/3003/src/pkg/net/url/design.go#newcode67\nsrc/pkg/net/url/design.go:67: func (u URL) WithQuery(q url.Values) URL\nThis would make so many pieces of code that much easier.\n\nhttp://codereview.appspot.com/5450108/diff/3003/src/pkg/net/url/design.go#newcode70\nsrc/pkg/net/url/design.go:70: // If u contains a password it will be obfuscated.\nThis concerns me a little. What if you're including a URL in a template? Template's default presentation scheme for {{value}} is equivalent to fmt.Print, which calls the String method to format Stringers.\n\nI would prefer some other mechanism for obfuscating the password. It doesn't belong in the default presentation.",
			"disapproval": false,
			"date": "2011-12-06 22:26:52.585034",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "(...)\n> My suggestion for the current url.URL is to keep it a struct\n> but throw away the various duplicate fields, so there is\n> no redundant information in the struct, and see what breaks.\n\nMy main concern about dropping the duplicated fields is that the\nredundancy comes not only from being able to reach badly behaving\nservices, but also from the fact that many fields are loosely defined\nin RFC2396. Dropping these fields will mean supporting only a specific\nkind of URL, and then dropping onto opaque and leaving the developer\non his own. Given that there's disproportional interest on that one\nkind of URL, perhaps this may not be so bad anyways.\n\nI'll give it a try and see how that feels in practice.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2011-12-07 19:43:26.582510",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5450108/diff/3003/src/pkg/net/url/design.go\nFile src/pkg/net/url/design.go (right):\n\nhttp://codereview.appspot.com/5450108/diff/3003/src/pkg/net/url/design.go#newcode45\nsrc/pkg/net/url/design.go:45: // replaced by the a encoded authority.\nFixed.\n\nhttp://codereview.appspot.com/5450108/diff/3003/src/pkg/net/url/design.go#newcode70\nsrc/pkg/net/url/design.go:70: // If u contains a password it will be obfuscated.\n> This concerns me a little. What if you're including a URL in a template?\n\nI had the same sentiment when I noticed this behavior, which is actually present in the current implementation. I've dropped String for the moment, while the type is still string. Depending on how the ML conversation goes we can bring it back without that non-expected behavior.",
			"disapproval": false,
			"date": "2011-12-07 00:52:08.010990",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> this type definition is reasonable but has two unfortunate properties:\n> 1) it's easy to work around the API, which you shouldn't encourage.\n> 2) it will cause lots of garbage to be generated.\n\nTrue. I've just sent a few pros and cons to the list for evaluation.\nI'm happy to go in either direction.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2011-12-07 01:14:34.530864",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> I'll give it a try and see how that feels in practice.\n\nAnd here is a preliminary problem I just reminded: how to handle the\nuser:pass@ information. The issue stems from the fact that\n\"http://@host\" and \"http://:@host are both valid and mean different\nthings.\n\nThe natural usage for an exposed struct would be:\n\n    u := URL{Host: host}\n    u := URL{Username: user, Host: host}\n\nBut both of these present issues due to the zero value of Username and\nPassword being valid values.\n\nAs alternatives, we could define an Auth interface, to enable logic such as:\n\n    URL{Auth: url.Username{user}, Host: host}\n    URL{Auth: url.Password{user, pass}, Host: host)\n\nWhich starts to spoil some of the benefit of the struct constructor.\nIf we had an opaque struct, we might do more simply:\n\n    u.SetHost(host)\n    u.SetHost(host).SetUsername(user)\n\nhandling internally the fact that username and password might be unset.\n\nAnd have access methods such as:\n\n    user, ok := u.Username()\n    pass, ok := u.Password()\n\nThoughts?\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2011-12-07 22:52:04.100559",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Dec 7, 2011 at 17:51, Gustavo Niemeyer <gustavo@niemeyer.net> wrote:\n> The issue stems from the fact that\n> \"http://@host\" and \"http://:@host are both valid and mean different\n> things.\n\nWe seem to be getting along fine without knowing that right now.\nDoes it really matter?\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-12 18:53:15.872179",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> We seem to be getting along fine without knowing that right now.\n> Does it really matter?\n\nI've seen home routers before expecting an empty password with HTTP\nauth. I'd not be surprised if there are servers in the wild that do\nsomething similar and refuse to take an HTTP auth without it. That\nsaid, I personally don't care so far.\n\nShould I move on with the literal-based approach and assume that:\n\n1) An empty username => no userinfo\n2) An empty password => no password\n\n?\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2011-12-12 19:59:01.545646",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Should I move on with the literal-based approach and assume that:\n>\n> 1) An empty username => no userinfo\n> 2) An empty password => no password\n\nActually, if you don't mind, please let me try a strawman proposal for\nan interface that avoids all the pitfalls mentioned so far in this\nthread. I'll try to put it in place before debating further to get a\npractical feeling for it.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2011-12-12 21:38:49.367025",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Dec 12, 2011 at 16:38, Gustavo Niemeyer <gustavo@niemeyer.net> wrote:\n> Actually, if you don't mind, please let me try a strawman proposal for\n> an interface that avoids all the pitfalls mentioned so far in this\n> thread. I'll try to put it in place before debating further to get a\n> practical feeling for it.\n\nOkay.  I will observe that so far multiple of your\nproposals have depended on setter methods, and\nI would strongly prefer to avoid those.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-12 23:03:25.411368",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"gustavo@niemeyer.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2011-12-23 21:10:21.393564",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Removing reviewers.",
			"disapproval": false,
			"date": "2011-12-23 21:12:26.856279",
			"approval": false
		}
	],
	"owner_email": "n13m3y3r@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "niemeyer",
	"subject": "net/url: new URL design",
	"created": "2011-12-06 20:10:11.776915",
	"patchsets": [
		1,
		4,
		3001,
		2002,
		3003,
		3004
	],
	"modified": "2011-12-23 21:12:26.856559",
	"closed": true,
	"issue": 5450108
}