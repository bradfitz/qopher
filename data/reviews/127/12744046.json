{
	"description": "misc/emacs: do not use any free variables",
	"cc": [
		"adonovan@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LG, will submit.\n\nhttps://codereview.appspot.com/12744046/diff/5001/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (left):\n\nhttps://codereview.appspot.com/12744046/diff/5001/misc/emacs/go-mode.el#oldcode1023\nmisc/emacs/go-mode.el:1023: (let* ((count (go--covered-count range))\nOn 2013/08/16 04:03:05, Dominik Honnef wrote:\n> On 2013/08/16 03:59:19, adonovan wrote:\n> > On 2013/08/16 03:51:35, Dominik Honnef wrote:\n> > > Only dynamic scoping could make this actually work...\n> > \n> > I'm confused... before, the references to 'count' within the cond referred to\n> > the let* binding.  With this change, they now refer to the formal parameter of\n> > the function.  How is dynamic scope coming into play?\n> \n> The only reason 'range' is in scope is because it exists in the caller of this\n> function. Without dynamic scope, (go--covered-count range) would've failed.\n\nAh, range.  I was looking at the wrong variables.",
			"disapproval": false,
			"date": "2013-08-16 04:04:47.700980",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=e7bc53d417a8 ***\n\nmisc/emacs: do not use any free variables\n\nR=adonovan\nCC=golang-dev\nhttps://codereview.appspot.com/12744046\n\nCommitter: Alan Donovan <adonovan@google.com>",
			"disapproval": false,
			"date": "2013-08-16 04:06:21.398440",
			"approval": false
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12744046/diff/5001/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (left):\n\nhttps://codereview.appspot.com/12744046/diff/5001/misc/emacs/go-mode.el#oldcode1023\nmisc/emacs/go-mode.el:1023: (let* ((count (go--covered-count range))\nOnly dynamic scoping could make this actually work...",
			"disapproval": false,
			"date": "2013-08-16 03:51:35.775670",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12744046/diff/5001/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (left):\n\nhttps://codereview.appspot.com/12744046/diff/5001/misc/emacs/go-mode.el#oldcode1023\nmisc/emacs/go-mode.el:1023: (let* ((count (go--covered-count range))\nOn 2013/08/16 03:51:35, Dominik Honnef wrote:\n> Only dynamic scoping could make this actually work...\n\nI'm confused... before, the references to 'count' within the cond referred to the let* binding.  With this change, they now refer to the formal parameter of the function.  How is dynamic scope coming into play?",
			"disapproval": false,
			"date": "2013-08-16 03:59:19.409680",
			"approval": false
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12744046/diff/5001/misc/emacs/go-mode.el\nFile misc/emacs/go-mode.el (left):\n\nhttps://codereview.appspot.com/12744046/diff/5001/misc/emacs/go-mode.el#oldcode1023\nmisc/emacs/go-mode.el:1023: (let* ((count (go--covered-count range))\nOn 2013/08/16 03:59:19, adonovan wrote:\n> On 2013/08/16 03:51:35, Dominik Honnef wrote:\n> > Only dynamic scoping could make this actually work...\n> \n> I'm confused... before, the references to 'count' within the cond referred to\n> the let* binding.  With this change, they now refer to the formal parameter of\n> the function.  How is dynamic scope coming into play?\n\nThe only reason 'range' is in scope is because it exists in the caller of this function. Without dynamic scope, (go--covered-count range) would've failed.",
			"disapproval": false,
			"date": "2013-08-16 04:03:04.865380",
			"approval": false
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"dominik.honnef@gmail.com",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-08-16 03:51:02.430680",
			"approval": false
		}
	],
	"owner_email": "dominik.honnef@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Dominik Honnef",
	"subject": "code review 12744046: misc/emacs: do not use any free variables",
	"created": "2013-08-16 03:50:21.943500",
	"patchsets": [
		1,
		3001,
		5001
	],
	"modified": "2013-08-16 04:13:28.770610",
	"closed": true,
	"issue": 12744046
}