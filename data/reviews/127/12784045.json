{
	"description": "archive/zip: add File.DataOffset\n\nAccessor to find where the bytes of a file start.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org",
		"dsymonds@golang.org",
		"adg@google.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-08-13 14:55:41.498490",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i can't imagine why you'd need this. context?\r\n",
			"disapproval": false,
			"date": "2013-08-13 18:29:53.363350",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I have a server which keeps multiple versions of mostly-identical zip files\r\nin memory.\r\n\r\nThis lets the server de-dup identical parts of the zip files by knowing the\r\ncut points in the file.\r\n\r\n\r\n\r\nOn Tue, Aug 13, 2013 at 11:29 AM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> i can't imagine why you'd need this. context?\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-13 18:35:28.524760",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nbut it seems like it should have a test at least.",
			"disapproval": false,
			"date": "2013-08-13 21:51:35.312570",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Russ prefers a CompressedOffset uint64 field be added to struct File.\r\n\r\nBut that means reading from all over the file in the constructor, which\r\ndoesn't seem worth it for the majority of users.\r\n\r\n\r\n\r\n\r\nOn Tue, Aug 13, 2013 at 2:51 PM, <dsymonds@golang.org> wrote:\r\n\r\n> LGTM\r\n>\r\n> but it seems like it should have a test at least.\r\n>\r\n> https://codereview.appspot.**com/12784045/<https://codereview.appspot.com/12784045/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-13 21:57:49.285440",
			"approval": false
		},
		{
			"sender": "adg@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I prefer the method approach. I don't want to slow down typical users who\r\nmight open a zip and read each file in order.\r\nOn 14 Aug 2013 07:57, \"Brad Fitzpatrick\" <bradfitz@golang.org> wrote:\r\n\r\n> Russ prefers a CompressedOffset uint64 field be added to struct File.\r\n>\r\n> But that means reading from all over the file in the constructor, which\r\n> doesn't seem worth it for the majority of users.\r\n>\r\n>\r\n>\r\n>\r\n> On Tue, Aug 13, 2013 at 2:51 PM, <dsymonds@golang.org> wrote:\r\n>\r\n>> LGTM\r\n>>\r\n>> but it seems like it should have a test at least.\r\n>>\r\n>> https://codereview.appspot.**com/12784045/<https://codereview.appspot.com/12784045/>\r\n>>\r\n>\r\n>  --\r\n>\r\n> ---\r\n> You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-13 22:04:45.335030",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Or we could make it more general, having a method to return a struct of the\r\nlocal file header instead of just the body offset.\r\n\r\nAlternatively, if the file header in the central directory (the one at the\r\nend of the file) is guaranteed to have its 2-byte \"file name length\" and\r\n\"extra field length\" match the same fields of the local file header, we\r\ncould trust it.  But since we aren't currently using it and are instead\r\nre-reading it, it makes me think you've already considered that.  (That is:\r\nwhy does readDirectoryHeader throw away filenameLen and extraLen?)\r\n\r\n\r\n\r\n\r\nOn Tue, Aug 13, 2013 at 3:04 PM, Andrew Gerrand <adg@google.com> wrote:\r\n\r\n> I prefer the method approach. I don't want to slow down typical users who\r\n> might open a zip and read each file in order.\r\n> On 14 Aug 2013 07:57, \"Brad Fitzpatrick\" <bradfitz@golang.org> wrote:\r\n>\r\n>> Russ prefers a CompressedOffset uint64 field be added to struct File.\r\n>>\r\n>> But that means reading from all over the file in the constructor, which\r\n>> doesn't seem worth it for the majority of users.\r\n>>\r\n>>\r\n>>\r\n>>\r\n>> On Tue, Aug 13, 2013 at 2:51 PM, <dsymonds@golang.org> wrote:\r\n>>\r\n>>> LGTM\r\n>>>\r\n>>> but it seems like it should have a test at least.\r\n>>>\r\n>>> https://codereview.appspot.**com/12784045/<https://codereview.appspot.com/12784045/>\r\n>>>\r\n>>\r\n>>  --\r\n>>\r\n>> ---\r\n>> You received this message because you are subscribed to the Google Groups\r\n>> \"golang-dev\" group.\r\n>> To unsubscribe from this group and stop receiving emails from it, send an\r\n>> email to golang-dev+unsubscribe@googlegroups.com.\r\n>> For more options, visit https://groups.google.com/groups/opt_out.\r\n>>\r\n>>\r\n>>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-13 22:18:49.503760",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yeah, looks like the extraLen at least can vary between the central\r\ndirectory and the local file headers.\r\n\r\nSo we could do a method on *File returning a LocalFileHeader instead?  It\r\ncould be:\r\n\r\ntype LocalFileHeader struct {\r\n     FileHeader         // embedded\r\n     CompressedOffset int64   // computed\r\n}\r\n\r\n?\r\n\r\n\r\n\r\nOn Tue, Aug 13, 2013 at 3:18 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n\r\n> Or we could make it more general, having a method to return a struct of\r\n> the local file header instead of just the body offset.\r\n>\r\n> Alternatively, if the file header in the central directory (the one at the\r\n> end of the file) is guaranteed to have its 2-byte \"file name length\" and\r\n> \"extra field length\" match the same fields of the local file header, we\r\n> could trust it.  But since we aren't currently using it and are instead\r\n> re-reading it, it makes me think you've already considered that.  (That is:\r\n> why does readDirectoryHeader throw away filenameLen and extraLen?)\r\n>\r\n>\r\n>\r\n>\r\n> On Tue, Aug 13, 2013 at 3:04 PM, Andrew Gerrand <adg@google.com> wrote:\r\n>\r\n>> I prefer the method approach. I don't want to slow down typical users who\r\n>> might open a zip and read each file in order.\r\n>> On 14 Aug 2013 07:57, \"Brad Fitzpatrick\" <bradfitz@golang.org> wrote:\r\n>>\r\n>>> Russ prefers a CompressedOffset uint64 field be added to struct File.\r\n>>>\r\n>>> But that means reading from all over the file in the constructor, which\r\n>>> doesn't seem worth it for the majority of users.\r\n>>>\r\n>>>\r\n>>>\r\n>>>\r\n>>> On Tue, Aug 13, 2013 at 2:51 PM, <dsymonds@golang.org> wrote:\r\n>>>\r\n>>>> LGTM\r\n>>>>\r\n>>>> but it seems like it should have a test at least.\r\n>>>>\r\n>>>> https://codereview.appspot.**com/12784045/<https://codereview.appspot.com/12784045/>\r\n>>>>\r\n>>>\r\n>>>  --\r\n>>>\r\n>>> ---\r\n>>> You received this message because you are subscribed to the Google\r\n>>> Groups \"golang-dev\" group.\r\n>>> To unsubscribe from this group and stop receiving emails from it, send\r\n>>> an email to golang-dev+unsubscribe@googlegroups.com.\r\n>>> For more options, visit https://groups.google.com/groups/opt_out.\r\n>>>\r\n>>>\r\n>>>\r\n>>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-13 22:38:28.381720",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"adg@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM as is\n\nI guess it has to be a method.\nLet's not invent even more API.",
			"disapproval": false,
			"date": "2013-08-13 23:16:50.139170",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"dsymonds@golang.org",
				"adg@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=12839dbf33fa ***\n\narchive/zip: add File.DataOffset\n\nAccessor to find where the bytes of a file start.\n\nR=golang-dev, rsc, dsymonds, adg\nCC=golang-dev\nhttps://codereview.appspot.com/12784045",
			"disapproval": false,
			"date": "2013-08-13 23:30:04.109150",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 12784045: archive/zip: add File.DataOffset",
	"created": "2013-08-13 14:55:26.581230",
	"patchsets": [
		1,
		3001,
		5001,
		16001
	],
	"modified": "2013-08-13 23:30:10.289210",
	"closed": true,
	"issue": 12784045
}