{
	"description": "go.net: add netutil package with LimitListener\n\nUpdate issue 6012",
	"cc": [
		"golang-dev@googlegroups.com",
		"dsymonds@golang.org",
		"rsc@golang.org"
	],
	"reviewers": [
		"ngaut1@gmail.com",
		"rogpeppe@gmail.com"
	],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.net",
			"disapproval": false,
			"date": "2013-08-12 00:16:33.525170",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "cute. I don't have an opinion on whether this should be in go.net, but here's a couple of little notes.\n\nhttps://codereview.appspot.com/12727043/diff/6001/netutil/listen.go\nFile netutil/listen.go (right):\n\nhttps://codereview.appspot.com/12727043/diff/6001/netutil/listen.go#newcode37\nnetutil/listen.go:37: ch chan struct{}\nthis could have a direction annotation.\n\nhttps://codereview.appspot.com/12727043/diff/6001/netutil/listen_test.go\nFile netutil/listen_test.go (right):\n\nhttps://codereview.appspot.com/12727043/diff/6001/netutil/listen_test.go#newcode32\nnetutil/listen_test.go:32: go http.Serve(l, http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\nuse net/http/httptest?",
			"disapproval": false,
			"date": "2013-08-12 00:36:00.149500",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12727043/diff/6001/netutil/listen.go\nFile netutil/listen.go (right):\n\nhttps://codereview.appspot.com/12727043/diff/6001/netutil/listen.go#newcode37\nnetutil/listen.go:37: ch chan struct{}\nOn 2013/08/12 00:36:00, dsymonds wrote:\n> this could have a direction annotation.\n\nDone.\n\nhttps://codereview.appspot.com/12727043/diff/6001/netutil/listen.go#newcode37\nnetutil/listen.go:37: ch chan struct{}\nOn 2013/08/12 00:36:00, dsymonds wrote:\n> this could have a direction annotation.\n\nDone.\n\nhttps://codereview.appspot.com/12727043/diff/6001/netutil/listen_test.go\nFile netutil/listen_test.go (right):\n\nhttps://codereview.appspot.com/12727043/diff/6001/netutil/listen_test.go#newcode32\nnetutil/listen_test.go:32: go http.Serve(l, http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\nOn 2013/08/12 00:36:00, dsymonds wrote:\n> use net/http/httptest?\n\nOne of the key benefits of httptest is it sets up the listener and gives you a server address, but that's exactly what I need to test and demonstrate here.",
			"disapproval": false,
			"date": "2013-08-12 00:44:32.734350",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12727043/diff/6001/netutil/listen_test.go\nFile netutil/listen_test.go (right):\n\nhttps://codereview.appspot.com/12727043/diff/6001/netutil/listen_test.go#newcode32\nnetutil/listen_test.go:32: go http.Serve(l, http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\nOn 2013/08/12 00:44:32, adg wrote:\n> On 2013/08/12 00:36:00, dsymonds wrote:\n> > use net/http/httptest?\n> \n> One of the key benefits of httptest is it sets up the listener and gives you a\n> server address, but that's exactly what I need to test and demonstrate here.\n\nhttptest.Server exposes the Listener for exactly this reason.\n\n\nsrv := httptest.NewUnstartedServer(http.HandlerFunc(...) {\n  ...\n}\nsrv.Listener = LimitListener(srv.Listener, max)\ndefer srv.Close()",
			"disapproval": false,
			"date": "2013-08-12 00:50:42.775510",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 12 August 2013 10:50, <dsymonds@golang.org> wrote:\r\n\r\n> httptest.Server exposes the Listener for exactly this reason.\r\n>\r\n>\r\n> srv := httptest.NewUnstartedServer(**http.HandlerFunc(...) {\r\n>   ...\r\n> }\r\n> srv.Listener = LimitListener(srv.Listener, max)\r\n> defer srv.Close()\r\n>\r\n\r\nSure, but I want programmers to be able to look at the test and see how\r\nthey should use it. httptest really doesn't save us much here, and makes\r\nthe code a lot less obvious.\r\n",
			"disapproval": false,
			"date": "2013-08-12 00:52:12.573070",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/12727043/diff/7003/netutil/listen.go\nFile netutil/listen.go (right):\n\nhttps://codereview.appspot.com/12727043/diff/7003/netutil/listen.go#newcode25\nnetutil/listen.go:25: \nadd a Close method on limitListener that will l.Listener.Close(); close(ch). then l.Close unblocks any pending Accepts, which will then return errors.",
			"disapproval": false,
			"date": "2013-08-13 17:40:25.257000",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=ac736dc34602&repo=net ***\n\ngo.net: add netutil package with LimitListener\n\nUpdate issue 6012\n\nR=golang-dev, dsymonds, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/12727043",
			"disapproval": false,
			"date": "2013-08-14 01:00:11.168150",
			"approval": false
		},
		{
			"sender": "ngaut1@gmail.com",
			"recipients": [
				"adg@golang.org",
				"ngaut1@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i think we should check if error is nil, programmers may use two goroutines to\nhanle a connection, one for reading, the other for writing, so Close() may be\ncalled twice when there is an error on connection.\n\nhttps://codereview.appspot.com/12727043/diff/20001/netutil/listen.go\nFile netutil/listen.go (right):\n\nhttps://codereview.appspot.com/12727043/diff/20001/netutil/listen.go#newcode42\nnetutil/listen.go:42: l.ch <- struct{}{}\ni think we should check if error is nil, programmers may use two goroutines to hanle a connection, one for reading, the other for writing, so Close() may be called twice when there is an error on connection.\n\nif err == nil {\n\tl.ch <- struct{}{}\n}",
			"disapproval": false,
			"date": "2013-08-14 02:28:54.106520",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"adg@golang.org",
				"ngaut1@gmail.com",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think ngautl has a good point about the Close logic - it's not uncommon to close a connection while another goroutine is operating on it.\n\nhttps://codereview.appspot.com/12727043/diff/20001/netutil/listen.go\nFile netutil/listen.go (right):\n\nhttps://codereview.appspot.com/12727043/diff/20001/netutil/listen.go#newcode15\nnetutil/listen.go:15: for i := 0; i < n; i++ {\nI don't think you actually need to fill\nthe channel here - we're not using the\nchannel as a memory barrier here -\nI believe it'll work just as effectively\nfor this purpose if you start empty and\nfill it up.\n\nThis may make a difference for if the maximum\nnumber of connections is quite high.\n\nhttps://codereview.appspot.com/12727043/diff/20001/netutil/listen.go#newcode42\nnetutil/listen.go:42: l.ch <- struct{}{}\nOn 2013/08/14 02:28:54, ngaut1 wrote:\n> i think we should check if error is nil, programmers may use two goroutines to\n> hanle a connection, one for reading, the other for writing, so Close() may be\n> called twice when there is an error on connection.\n> \n> if err == nil {\n> \tl.ch <- struct{}{}\n> }\n\n+1 to the sentiment, but I'm not sure that's quite right - we're not guaranteed to get a nil error when closing the connection for the first time AFAIK.\n\nI'd put some sync logic around the channel op to make sure\nit can only be called once.\n\nFor instance:\n\ntype limitListenerConn struct {\n    net.Conn\n    ch chan<-struct{}\n    closeReported uint32\n}\n\nfunc (l *limitListenerConn) Close() error { \n   err := l.Conn.Close(0\n   if sync.CompareAndSwapUint32(&l.closeReported, 0, 1) {\n       l.ch <- struct{}{}\n   }\n   return err\n}\n\nOr use sync.Once or sync.Mutex to taste.",
			"disapproval": false,
			"date": "2013-08-14 08:02:09.155650",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"ngaut1@gmail.com",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12727043/diff/20001/netutil/listen.go\nFile netutil/listen.go (right):\n\nhttps://codereview.appspot.com/12727043/diff/20001/netutil/listen.go#newcode15\nnetutil/listen.go:15: for i := 0; i < n; i++ {\nOn 2013/08/14 08:02:09, rog wrote:\n> I don't think you actually need to fill\n> the channel here - we're not using the\n> channel as a memory barrier here -\n> I believe it'll work just as effectively\n> for this purpose if you start empty and\n> fill it up.\n> \n> This may make a difference for if the maximum\n> number of connections is quite high.\n\nThe allocation of the buffer is the expensive part. Filling it up should be a secondary concern.\n\nTo me it is clearer to put \"connection tokens\" in the buffer and to \"give\" one to each active connection.\n\nLet's worry about efficiency if it actually affects someone.\n\nhttps://codereview.appspot.com/12727043/diff/20001/netutil/listen.go#newcode42\nnetutil/listen.go:42: l.ch <- struct{}{}\nThanks for the suggestion guys.\n\nI went with sync.Once: https://codereview.appspot.com/12967043/",
			"disapproval": false,
			"date": "2013-08-15 01:19:57.782400",
			"approval": false
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 12727043: go.net: add netutil package with LimitListener",
	"created": "2013-08-11 22:17:22.418090",
	"patchsets": [
		1,
		3001,
		6001,
		7003,
		20001
	],
	"modified": "2013-08-15 01:19:58.510840",
	"closed": true,
	"issue": 12727043
}