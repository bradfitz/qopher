{
	"description": "spec: pointer comparison for pointers to 0-sized variables\n\n- define \"0-sized\"\n- add clarifying sentence to pointer comparison\n- removed notion \"location\" which was used only in pointer comparisons\n  and which was never defined\n\nFixes issue 2620.",
	"cc": [
		"r@golang.org",
		"rsc@golang.org",
		"iant@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jan 9, 2012 at 2:43 PM,  <rsc@golang.org> wrote:\n> LGTM\n>\n> If \"variable\" is the right name, then lgtm.\n> It said \"location\" before because if you have\n>\n> var x struct { y, z int }\n>\n> &x.y and &x.z are different pointers even though\n> they both point into the variable x.\n\nI think this our long-standing issue we have with the notion of what a\nvariable is. In my mind it's a memory location that can hold different\nvalues of a given type. Some variables are named explicitly (x), some\nare named with an index (a[i]), and some are anonymous and accessed\nvia a pointer indirection (*p). Others prefer to call this notion an\nL-value. So far we have always avoided both notions by doing a\ndelicate dance around it. Maybe it's time to bite the bullet (in a\ndifferent CL) and define a term. It might simplify some other parts of\nthe spec.\n\n- gri\n\n>\n>\n> http://codereview.appspot.com/5528053/\n",
			"disapproval": false,
			"date": "2012-01-09 22:47:52.037199",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but wait for others.",
			"disapproval": false,
			"date": "2012-01-09 22:34:49.322935",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-01-10 00:35:37.459269",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/5528053/diff/5002/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5528053/diff/5002/doc/go_spec.html#newcode2960\ndoc/go_spec.html:2960: Pointers to distinct <a href=\"#Size_and_alignment_guarantees\">0-sized</a> variables may or may not be equal.\nOn 2012/01/09 22:24:37, r wrote:\n> s/0-sized/zero-size/g\n\nDone.\n\nhttp://codereview.appspot.com/5528053/diff/5002/doc/go_spec.html#newcode5352\ndoc/go_spec.html:5352: A struct or array type has size 0 if it contains no fields (or elements, respectively) that have a size > 0. Two distinct 0-sized variables may have the same address in memory.\nOn 2012/01/09 22:24:37, r wrote:\n> &gt;\n> \n> or better to write it out: have a size greater than zero.\n> \n\nDone.",
			"disapproval": false,
			"date": "2012-01-09 22:29:58.719932",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-09 22:13:05.039458",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5528053/diff/5002/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5528053/diff/5002/doc/go_spec.html#newcode2960\ndoc/go_spec.html:2960: Pointers to distinct <a href=\"#Size_and_alignment_guarantees\">0-sized</a> variables may or may not be equal.\ns/0-sized/zero-size/g\n\nhttp://codereview.appspot.com/5528053/diff/5002/doc/go_spec.html#newcode5352\ndoc/go_spec.html:5352: A struct or array type has size 0 if it contains no fields (or elements, respectively) that have a size > 0. Two distinct 0-sized variables may have the same address in memory.\n&gt;\n\nor better to write it out: have a size greater than zero.",
			"disapproval": false,
			"date": "2012-01-09 22:24:37.504443",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nIf \"variable\" is the right name, then lgtm.\nIt said \"location\" before because if you have\n\nvar x struct { y, z int }\n\n&x.y and &x.z are different pointers even though\nthey both point into the variable x.",
			"disapproval": false,
			"date": "2012-01-09 22:43:00.992505",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=9fac7377fc7e ***\n\nspec: pointer comparison for pointers to 0-sized variables\n\n- define \"0-sized\"\n- add clarifying sentence to pointer comparison\n- removed notion \"location\" which was used only in pointer comparisons\n  and which was never defined\n\nFixes issue 2620.\n\nR=r, rsc, iant\nCC=golang-dev\nhttp://codereview.appspot.com/5528053",
			"disapproval": false,
			"date": "2012-01-10 00:54:27.082833",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 5528053: spec: pointer comparison for pointers to 0-sized variables",
	"created": "2012-01-09 22:08:06.075065",
	"patchsets": [
		1,
		2001,
		1002,
		5002,
		6004,
		4
	],
	"modified": "2012-01-10 00:54:28.566671",
	"closed": true,
	"issue": 5528053
}