{
	"description": "doc/go1: most of the simple language changes",
	"cc": [
		"rsc@golang.org",
		"adg@golang.org",
		"r@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "the comments are on the html so the line numbers will be off.\napologies, but seeing the code+text together makes it easier to read.\n\nhttp://codereview.appspot.com/5477044/diff/1/doc/go1.html\nFile doc/go1.html (right):\n\nhttp://codereview.appspot.com/5477044/diff/1/doc/go1.html#newcode79\ndoc/go1.html:79: close(csend) // legal\nclose(c) // legal\ntoo?\n\nhttp://codereview.appspot.com/5477044/diff/1/doc/go1.html#newcode155\ndoc/go1.html:155: In Go 1, the order in which elements are visited when iterating\nMention that iteration order was already unpredictable\nwhen moving between implementations or architectures?\nThe motivation here is to avoid code that breaks mysteriously\nwhen moving to a new architecture.  Now it can break from\nrun to run of a single binary.\n\nhttp://codereview.appspot.com/5477044/diff/1/doc/go1.html#newcode164\ndoc/go1.html:164: // This loop should not assume Sunday will be visited first.\nSunday?\n\nhttp://codereview.appspot.com/5477044/diff/1/doc/go1.html#newcode208\ndoc/go1.html:208: This is one change where tools cannot help, but breakage is unlikely.\nMaybe mention that the previous spec made fewer guarantees, so code\ndepending on another behavior was wrong anyway.\nThis is eliminating undefined behavior.\n\nhttp://codereview.appspot.com/5477044/diff/1/doc/go1.html#newcode229\ndoc/go1.html:229: for j:= 0; j < 5; j++ { // Redeclares j.\ns/:/ :/\n\nhttp://codereview.appspot.com/5477044/diff/1/doc/go1.html#newcode298\ndoc/go1.html:298: rejected by the compiler and will need to be fixed by hand.  Very\ns/Very//",
			"disapproval": false,
			"date": "2011-12-08 22:20:08.235391",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Dec 8, 2011 at 17:31,  <adg@golang.org> wrote:\n> This section has some weird wrapping. Please keep it to 80 cols.\n\nmove your mouse pointer to the bottom right corner\nof the window, click, move it further to the right, release.\n\nruss\n",
			"disapproval": false,
			"date": "2011-12-08 22:35:00.740481",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-08 22:05:54.316384",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"r@golang.org",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5477044/diff/1/doc/go1.html\nFile doc/go1.html (right):\n\nhttp://codereview.appspot.com/5477044/diff/1/doc/go1.html#newcode97\ndoc/go1.html:97: completed.) Packages that use goroutines can now be called from\ns/Packages/Code/ s/use/uses/ ?\n\nhttp://codereview.appspot.com/5477044/diff/1/doc/go1.html#newcode114\ndoc/go1.html:114: This is a new feature, so existing code needs no changes.\nIs there potential for some programs to exhibit unexpected behavior as a result of this change? Perhaps we should make a note:\n\nUnexpected behavior may arise if your program starts goroutines during init but expects the goroutines to run only after\u00a0program initialization is complete.\n\nhttp://codereview.appspot.com/5477044/diff/1/doc/go1.html#newcode164\ndoc/go1.html:164: // This loop should not assume Sunday will be visited first.\nSunday? I don't see any reference to Sunday here.\n\nhttp://codereview.appspot.com/5477044/diff/1/doc/go1.html#newcode215\ndoc/go1.html:215: A shadowed variable is one that has the same name as another variable in an inner scope.\nThis section has some weird wrapping. Please keep it to 80 cols.\n\nhttp://codereview.appspot.com/5477044/diff/1/doc/go1.html#newcode217\ndoc/go1.html:217: the Go 1 compilers will disallow return statements without arguments if any of the named return values is shadowed at the point of the return statement.\ns/will disallow/disallows/\n\nhttp://codereview.appspot.com/5477044/diff/1/doc/go1.html#newcode218\ndoc/go1.html:218: (It won't be part of the specification, because this is one area we are still exploring;\ns/won't be/isn't yet/\n\nNot sure if this parenthetical is worth the distraction.\n\nhttp://codereview.appspot.com/5477044/diff/1/doc/go1.html#newcode263\ndoc/go1.html:263: -->    //    type Day struct {\nwhy the comments?\n\nhttp://codereview.appspot.com/5477044/diff/1/doc/go1.html#newcode277\ndoc/go1.html:277: Note that equality is still undefined for slices, for which the\nI'd drop the justification after the comma. It raises more questions than it answers.",
			"disapproval": false,
			"date": "2011-12-08 22:31:10.234213",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"r@golang.org",
				"rsc@golang.org",
				"adg@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/12/08 22:35:00, rsc wrote:\n> move your mouse pointer to the bottom right corner\n> of the window, click, move it further to the right, release.\n\nI don't have a fetish for 80 columns, but:\n - codereview shows CLs in 80 cols by default\n - I could change the codereview default to something bigger, but:\n   - we try to keep Go code to 80 cols\n   - we always keep Go comments to 80 cols\n\nI know you guys use acme and so the entire concept of columns is irrelevant, but at least one of our commonly-used tools does\u00a0have a preference.\n\nThat said, I am happy to abstain from making comments about 80 columns on HTML documents.",
			"disapproval": false,
			"date": "2011-12-08 22:39:11.714755",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Dec 8, 2011, at 2:39 PM, adg@golang.org wrote:\n\n> \n>   - we try to keep Go code to 80 cols\n\nno we don't. i certainly don't.\n\n>   - we always keep Go comments to 80 cols\n\nonly godoc comments, and there's no real need for this either.\n\nmy biggest regret about godoc (i have very few) and how we use it is that it pushes everything into the 1960s punch-card mentality of 80 columns and fixed-width characters. there's no real need for that, but HTML makes it hard to format neatly without doing at least the fixed-width part.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-12-09 00:19:58.101870",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n",
			"disapproval": false,
			"date": "2011-12-08 22:20:22.510438",
			"approval": true
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Dec 8, 2011, at 2:31 PM, adg@golang.org wrote:\n\n> This section has some weird wrapping. Please keep it to 80 cols.\n\nI am going to disregard this and all further complaints about 80 columns in HTML documents.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-12-08 22:35:11.573278",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"rsc@golang.org",
				"adg@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=6601a8eea95a ***\n\ndoc/go1: most of the simple language changes\n\nR=rsc, adg, r\nCC=golang-dev\nhttp://codereview.appspot.com/5477044",
			"disapproval": false,
			"date": "2011-12-09 00:39:08.405529",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5477044: doc/go1: most of the simple language changes",
	"created": "2011-12-08 22:05:50.541964",
	"patchsets": [
		1,
		6001,
		7001
	],
	"modified": "2011-12-09 00:39:09.546168",
	"closed": true,
	"issue": 5477044
}