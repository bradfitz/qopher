{
	"description": "go/parser: consts to always have right side expression\r\n\r\nConsts to always have right side expression. \r\nIf rhs is omited, the previous to be used.\r\nOtherwise it is difficult to calc a value of a constant working with ast tree.\r\n\r\nFor example: \r\nconst ( \r\n  bit0, mask0 = 1<<iota, 1<<iota-1\r\n  bit1, mask1 /* implicit =1<<iota, 1<<iota-1 */\r\n  bit2, mask2 /* implicit =1<<iota, 1<<iota-1 */\r\n)",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"gri@golang.org",
		"rogpeppe@gmail.com",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "jp@webmaster.ms",
			"recipients": [
				"jp@webmaster.ms",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2011-10-12 02:00:40.577544",
			"approval": false
		},
		{
			"sender": "jp@webmaster.ms",
			"recipients": [
				"jp@webmaster.ms",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "Ok, issue closed.\n\nThe problem with AST is: ast.Object for, say, bit1 will have in Decl field a link to ast.ValueSpec which describes bit1 and mask1 only, not the whole block of constants. Both bit1 and mask1 has no value. And there is no easy way to find bit0, having bit1's ast.Object. Thus, an extra pass or a search round starting from AST root is required :(\n\nIt would be nice if ast.Object's Decl field would point to the whole const block. Doesn't it break something?\n\nOn 2011/10/12 04:31:29, gri wrote:\n> No thanks.\n> \n> go/ast is a primarily an AST and must represent source code accurately. Your\n> change will change the output of gofmt besides braking various tests.\n> \n> It is not hard to compute the respective information from the ast if needed.\n> \n> Please abandon this CL.\n> - gri",
			"disapproval": false,
			"date": "2011-10-12 07:41:02.453097",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"jp@webmaster.ms",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "No thanks.\n\ngo/ast is a primarily an AST and must represent source code accurately. Your change will change the output of gofmt besides braking various tests.\n\nIt is not hard to compute the respective information from the ast if needed.\n\nPlease abandon this CL.\n- gri",
			"disapproval": false,
			"date": "2011-10-12 04:31:29.919075",
			"approval": false
		},
		{
			"sender": "jp@webmaster.ms",
			"recipients": [
				"jp@webmaster.ms",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"rogpeppe@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/10/12 10:46:44, rog wrote:\n\nIota is stored in the .Data field of ast.Object, then the .Data field supposes to be replaced with calculated const value by the typechecker (pkg/go/types). But the typechecker is in its early stage and does not handle consts with no initialization expression.\n\nMay be storing initialization expression along with iota value in .Data field would be a solution.\n\nThe quick access to the iota value of a constant without the same access to the initialization expression has no much sense.\n\n\n> On 12 October 2011 08:41,  <mailto:jp@webmaster.ms> wrote:\n> > Ok, issue closed.\n> >\n> > The problem with AST is: ast.Object for, say, bit1 will have in Decl\n> > field a link to ast.ValueSpec which describes bit1 and mask1 only, not\n> > the whole block of constants. Both bit1 and mask1 has no value. And\n> > there is no easy way to find bit0, having bit1's ast.Object. Thus, an\n> > extra pass or a search round starting from AST root is required :(\n> >\n> > It would be nice if ast.Object's Decl field would point to the whole\n> > const block. Doesn't it break something?\n> \n> i second doing something along these lines. it can be pretty awkward\n> to search for the appropriate const declaration, and the parser\n> has done almost all the work already.\n> \n> perhaps we could give ValueSpec some extra fields, say Implied and Iota.\n> If Implied is true, the printer would not print Type or Values, but\n> they would be there for the use of analysis tools if needed.\n> Iota would give the current value of iota for the spec in question.",
			"disapproval": false,
			"date": "2011-10-12 11:46:28.822472",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 12 October 2011 08:41,  <jp@webmaster.ms> wrote:\n> Ok, issue closed.\n>\n> The problem with AST is: ast.Object for, say, bit1 will have in Decl\n> field a link to ast.ValueSpec which describes bit1 and mask1 only, not\n> the whole block of constants. Both bit1 and mask1 has no value. And\n> there is no easy way to find bit0, having bit1's ast.Object. Thus, an\n> extra pass or a search round starting from AST root is required :(\n>\n> It would be nice if ast.Object's Decl field would point to the whole\n> const block. Doesn't it break something?\n\ni second doing something along these lines. it can be pretty awkward\nto search for the appropriate const declaration, and the parser\nhas done almost all the work already.\n\nperhaps we could give ValueSpec some extra fields, say Implied and Iota.\nIf Implied is true, the printer would not print Type or Values, but\nthey would be there for the use of analysis tools if needed.\nIota would give the current value of iota for the spec in question.\n",
			"disapproval": false,
			"date": "2011-10-12 10:46:44.047449",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Oct 12, 2011 at 06:46, roger peppe <rogpeppe@gmail.com> wrote:\n> i second doing something along these lines. it can be pretty awkward\n> to search for the appropriate const declaration, and the parser\n> has done almost all the work already.\n\nIf you think you are going to need values, walk the AST once\nand build a map[ast.Object]value.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-10-12 12:15:09.059107",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 12 October 2011 13:15, Russ Cox <rsc@golang.org> wrote:\n> On Wed, Oct 12, 2011 at 06:46, roger peppe <rogpeppe@gmail.com> wrote:\n>> i second doing something along these lines. it can be pretty awkward\n>> to search for the appropriate const declaration, and the parser\n>> has done almost all the work already.\n>\n> If you think you are going to need values, walk the AST once\n> and build a map[ast.Object]value.\n\ni appreciate that that's possible, but it seems unnecessary, given\nthat the parser has the information to hand and could\ntrivially make it available.\n",
			"disapproval": false,
			"date": "2011-10-12 12:37:59.604407",
			"approval": false
		}
	],
	"owner_email": "jp@webmaster.ms",
	"private": false,
	"base_url": "",
	"owner": "jp",
	"subject": "go/parser: consts to always have right side expression",
	"created": "2011-10-12 01:39:57.901509",
	"patchsets": [
		1,
		5001,
		6001
	],
	"modified": "2011-10-12 12:15:09.229974",
	"closed": true,
	"issue": 5246055
}