{
	"description": "runtime: impose stack size limit\n\nThe goal is to stop only those programs that would keep\ngoing and run the machine out of memory, but before they do that.\n1 GB seems implausibly large, and it can be adjusted.\n\nFixes issue 2556.\nFixes issue 4494.\nFixes issue 5173.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"khr@golang.org",
		"r@golang.org",
		"dvyukov@google.com"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"khr@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello khr, r (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-08-09 20:01:03.063130",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"khr@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "perhaps the number should be less on 32-bit architectures.",
			"disapproval": false,
			"date": "2013-08-09 20:58:57.477810",
			"approval": false
		},
		{
			"sender": "khr@golang.org",
			"recipients": [
				"rsc@golang.org",
				"khr@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\n\nhttps://codereview.appspot.com/12541052/diff/5001/src/pkg/runtime/debug/garbage.go\nFile src/pkg/runtime/debug/garbage.go (right):\n\nhttps://codereview.appspot.com/12541052/diff/5001/src/pkg/runtime/debug/garbage.go#newcode27\nsrc/pkg/runtime/debug/garbage.go:27: func setMaxStack(int) int\nWhy is this in runtime/debug/garbage.go and not runtime/debug/stack.go?",
			"disapproval": false,
			"date": "2013-08-09 22:12:46.882760",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Aug 9, 2013 at 6:12 PM, <khr@golang.org> wrote:\r\n\r\n> LGTM.\r\n>\r\n> https://codereview.appspot.**com/12541052/diff/5001/src/**\r\n> pkg/runtime/debug/garbage.go<https://codereview.appspot.com/12541052/diff/5001/src/pkg/runtime/debug/garbage.go>\r\n> File src/pkg/runtime/debug/garbage.**go (right):\r\n>\r\n> https://codereview.appspot.**com/12541052/diff/5001/src/**\r\n> pkg/runtime/debug/garbage.go#**newcode27<https://codereview.appspot.com/12541052/diff/5001/src/pkg/runtime/debug/garbage.go#newcode27>\r\n> src/pkg/runtime/debug/garbage.**go:27: func setMaxStack(int) int\r\n> Why is this in runtime/debug/garbage.go and not runtime/debug/stack.go?\r\n>\r\n\r\nBecause stack.go turns out to be a bunch of deprecated code. :-(\r\n",
			"disapproval": false,
			"date": "2013-08-09 22:31:22.645800",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"khr@golang.org",
				"r@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Fixes issue 4692.",
			"disapproval": false,
			"date": "2013-08-10 13:22:55.959550",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"khr@golang.org",
				"r@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "crash test please\n\nhttps://codereview.appspot.com/12541052/diff/5001/src/pkg/runtime/debug/garbage.go\nFile src/pkg/runtime/debug/garbage.go (right):\n\nhttps://codereview.appspot.com/12541052/diff/5001/src/pkg/runtime/debug/garbage.go#newcode112\nsrc/pkg/runtime/debug/garbage.go:112: // goroutines that enter an infinite recursion.\nprobably add that it should be called early and does not affect existing stacks\nit may be obvious, though\n\nhttps://codereview.appspot.com/12541052/diff/5001/src/pkg/runtime/stack.c\nFile src/pkg/runtime/stack.c (right):\n\nhttps://codereview.appspot.com/12541052/diff/5001/src/pkg/runtime/stack.c#newcode188\nsrc/pkg/runtime/stack.c:188: uintptr runtime\u00b7maxstacksize = 1000000000; // 1 GB\n1<<30",
			"disapproval": false,
			"date": "2013-08-10 13:37:18.273260",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Aug 10, 2013 at 5:51 PM, <rsc@golang.org> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/12541052/diff/5001/src/**\r\n> pkg/runtime/stack.c<https://codereview.appspot.com/12541052/diff/5001/src/pkg/runtime/stack.c>\r\n> File src/pkg/runtime/stack.c (right):\r\n>\r\n> https://codereview.appspot.**com/12541052/diff/5001/src/**\r\n> pkg/runtime/stack.c#newcode188<https://codereview.appspot.com/12541052/diff/5001/src/pkg/runtime/stack.c#newcode188>\r\n> src/pkg/runtime/stack.c:188: uintptr runtime\u00b7maxstacksize = 1000000000;\r\n> // 1 GB\r\n> On 2013/08/10 13:37:18, dvyukov wrote:\r\n>\r\n>> 1<<30\r\n>>\r\n>\r\n> I used to have 1<<30 but then when it triggers it prints the limit as an\r\n> ugly number. The message is easier to read if the limit is 1 billion\r\n> bytes.\r\n>\r\n\r\nOK, at least it is consistent with documentation, 1GB is indeed 1000000000\r\nbytes today :)\r\n",
			"disapproval": false,
			"date": "2013-08-10 13:57:17.751320",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"khr@golang.org",
				"r@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> https://codereview.appspot.com/12541052/diff/5001/src/pkg/runtime/stack.c#newcode188\n> src/pkg/runtime/stack.c:188: uintptr runtime\u00b7maxstacksize = 1000000000; // 1 GB\n> 1<<30\n\nhey, do you actually do not mean *gibi*byte here?",
			"disapproval": false,
			"date": "2013-08-10 13:39:37.623020",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"khr@golang.org",
				"r@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12541052/diff/5001/src/pkg/runtime/stack.c\nFile src/pkg/runtime/stack.c (right):\n\nhttps://codereview.appspot.com/12541052/diff/5001/src/pkg/runtime/stack.c#newcode188\nsrc/pkg/runtime/stack.c:188: uintptr runtime\u00b7maxstacksize = 1000000000; // 1 GB\nOn 2013/08/10 13:37:18, dvyukov wrote:\n> 1<<30\n\nI used to have 1<<30 but then when it triggers it prints the limit as an ugly number. The message is easier to read if the limit is 1 billion bytes.",
			"disapproval": false,
			"date": "2013-08-10 13:51:00.657450",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I still think the number should be lowered on 32-bit architectures, which\r\nmeans the constant needs to be defined in architecture-specific files.\r\n",
			"disapproval": false,
			"date": "2013-08-10 21:27:00.000970",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Aug 10, 2013 at 5:26 PM, Rob Pike <r@golang.org> wrote:\r\n\r\n> I still think the number should be lowered on 32-bit architectures\r\n>\r\n\r\nSure. I haven't done anything yet because one of the TestCgoCrash... tests\r\nis failing with an overflow, and I am skeptical that it actually used 1 GB\r\nof stack. Perhaps the accounting is not subtracting correctly. I haven't\r\nhad a chance to check.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-08-13 17:34:03.030190",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 12541052: runtime: impose stack size limit",
	"created": "2013-08-09 20:00:45.171960",
	"patchsets": [
		1,
		3001,
		5001
	],
	"modified": "2013-08-13 17:34:03.127460",
	"closed": false,
	"issue": 12541052
}