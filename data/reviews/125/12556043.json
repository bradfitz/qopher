{
	"description": "encoding/xml: add, support Unmarshaler interface\n\nSee golang.org/s/go12xml for design.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dominik.honnef@gmail.com",
		"dan.kortschak@adelaide.edu.au"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-08-06 18:50:32.288630",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-08-09 15:34:19.963870",
			"approval": false
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dominik.honnef@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12556043/diff/13001/src/pkg/encoding/xml/read.go\nFile src/pkg/encoding/xml/read.go (right):\n\nhttps://codereview.appspot.com/12556043/diff/13001/src/pkg/encoding/xml/read.go#newcode159\nsrc/pkg/encoding/xml/read.go:159: // Unmarshaler is the interface implemented by objects that can unmarshal\nUnmarshalerAttr\n\nhttps://codereview.appspot.com/12556043/diff/13001/src/pkg/encoding/xml/xml.go\nFile src/pkg/encoding/xml/xml.go (right):\n\nhttps://codereview.appspot.com/12556043/diff/13001/src/pkg/encoding/xml/xml.go#newcode483\nsrc/pkg/encoding/xml/xml.go:483: return nil, errRawToken\nShould this error condition be documented?",
			"disapproval": false,
			"date": "2013-08-09 16:21:44.960490",
			"approval": false
		},
		{
			"sender": "dan.kortschak@adelaide.edu.au",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dominik.honnef@gmail.com",
				"dan.kortschak@adelaide.edu.au",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12556043/diff/18001/src/pkg/encoding/xml/read.go\nFile src/pkg/encoding/xml/read.go (right):\n\nhttps://codereview.appspot.com/12556043/diff/18001/src/pkg/encoding/xml/read.go#newcode214\nsrc/pkg/encoding/xml/read.go:214: // so it's likely to be incorrect, but we do what we're told.\nI can see this catching people and no error is returned to point to when they do it. Why not return an error in this case?",
			"disapproval": false,
			"date": "2013-08-11 01:31:19.248580",
			"approval": false
		},
		{
			"sender": "dan.kortschak@adelaide.edu.au",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dominik.honnef@gmail.com",
				"dan.kortschak@adelaide.edu.au",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I just ported my ncbi/entrez package over to use on this code and it was a delight to work with.",
			"disapproval": false,
			"date": "2013-08-12 01:31:47.963340",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dominik.honnef@gmail.com",
				"dan.kortschak@adelaide.edu.au",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12556043/diff/13001/src/pkg/encoding/xml/xml.go\nFile src/pkg/encoding/xml/xml.go (right):\n\nhttps://codereview.appspot.com/12556043/diff/13001/src/pkg/encoding/xml/xml.go#newcode483\nsrc/pkg/encoding/xml/xml.go:483: return nil, errRawToken\nOn 2013/08/09 16:21:45, Dominik Honnef wrote:\n> Should this error condition be documented?\n\nDone.\n\nhttps://codereview.appspot.com/12556043/diff/18001/src/pkg/encoding/xml/read.go\nFile src/pkg/encoding/xml/read.go (right):\n\nhttps://codereview.appspot.com/12556043/diff/18001/src/pkg/encoding/xml/read.go#newcode214\nsrc/pkg/encoding/xml/read.go:214: // so it's likely to be incorrect, but we do what we're told.\nOn 2013/08/11 01:31:19, kortschak wrote:\n> I can see this catching people and no error is returned to point to when they do\n> it. Why not return an error in this case?\n\nIt's possible to use correctly. For example, you might make an unmarshaler out of a func or a map, or perhaps a struct containing a pointer to the thing to fill in. All those use cases are fine with a non-pointer receiver. In general you can't tell the difference. So we do what we're told and hope the code says what the programmer meant.",
			"disapproval": false,
			"date": "2013-08-13 16:24:33.951570",
			"approval": false
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dominik.honnef@gmail.com",
				"dan.kortschak@adelaide.edu.au",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nJust changed some code to use the Unmarshaler interface and it works great so far.",
			"disapproval": false,
			"date": "2013-08-13 17:37:48.192460",
			"approval": true
		},
		{
			"sender": "dan.kortschak@adelaide.edu.au",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn 14/08/2013, at 1:54 AM, \"rsc@golang.org\" <rsc@golang.org> wrote:\r\n\r\n> It's possible to use correctly. For example, you might make an\r\n> unmarshaler out of a func or a map, or perhaps a struct containing a\r\n> pointer to the thing to fill in. All those use cases are fine with a\r\n> non-pointer receiver. In general you can't tell the difference. So we do\r\n> what we're told and hope the code says what the programmer meant.\r\n\r\nMaybe an example to point to this potential trap?\r\n",
			"disapproval": false,
			"date": "2013-08-13 21:04:49.443270",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dominik.honnef@gmail.com",
				"dan.kortschak@adelaide.edu.au",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dominik.honnef@gmail.com, dan.kortschak@adelaide.edu.au (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-08-14 04:35:33.011900",
			"approval": false
		},
		{
			"sender": "dominik.honnef@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dominik.honnef@gmail.com",
				"dan.kortschak@adelaide.edu.au",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12556043/diff/28001/src/pkg/encoding/xml/xml.go\nFile src/pkg/encoding/xml/xml.go (right):\n\nhttps://codereview.appspot.com/12556043/diff/28001/src/pkg/encoding/xml/xml.go#newcode1859\nsrc/pkg/encoding/xml/xml.go:1859: func (p *printer) EscapeString(s string) {\nWhy is EscapeString exported? From what I can tell, there's no way to get to a *printer from outside the package. Is it part of an interface I'm unaware of?",
			"disapproval": false,
			"date": "2013-08-14 16:28:33.526870",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Aug 14, 2013 at 12:28 PM, <dominik.honnef@gmail.com> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/12556043/diff/28001/src/**\r\n> pkg/encoding/xml/xml.go<https://codereview.appspot.com/12556043/diff/28001/src/pkg/encoding/xml/xml.go>\r\n> File src/pkg/encoding/xml/xml.go (right):\r\n>\r\n> https://codereview.appspot.**com/12556043/diff/28001/src/**\r\n> pkg/encoding/xml/xml.go#**newcode1859<https://codereview.appspot.com/12556043/diff/28001/src/pkg/encoding/xml/xml.go#newcode1859>\r\n> src/pkg/encoding/xml/xml.go:**1859: func (p *printer) EscapeString(s\r\n> string) {\r\n> Why is EscapeString exported? From what I can tell, there's no way to\r\n> get to a *printer from outside the package. Is it part of an interface\r\n> I'm unaware of?\r\n>\r\n\r\nIt's only for consistency with the other exported-and-yet-unavailable\r\nmethods on printer.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-08-14 17:02:20.637550",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Aug 13, 2013 at 5:04 PM, Dan Kortschak <\r\ndan.kortschak@adelaide.edu.au> wrote:\r\n\r\n> Maybe an example to point to this potential trap?\r\n>\r\n\r\nthe potential trap is probably not worth pointing out here. it's true of\r\nany method anywhere that needs to mutate its state. it's something you\r\nlearn (use pointer receiver) when learning how to write methods, not\r\nsomething specific to xml.\r\n\r\ni agree that examples would be great. those will have to happen in a\r\nseparate CL though.\r\n\r\nruss\r\n",
			"disapproval": false,
			"date": "2013-08-14 18:57:32.688220",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dominik.honnef@gmail.com",
				"dan.kortschak@adelaide.edu.au",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=add6c198070e ***\n\nencoding/xml: add, support Unmarshaler interface\n\nSee golang.org/s/go12xml for design.\n\nR=golang-dev, dominik.honnef, dan.kortschak\nCC=golang-dev\nhttps://codereview.appspot.com/12556043",
			"disapproval": false,
			"date": "2013-08-14 18:58:14.303230",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 12556043: encoding/xml: add, support Unmarshaler interface",
	"created": "2013-08-06 18:48:11.348770",
	"patchsets": [
		1,
		2002,
		6001,
		9001,
		13001,
		18001,
		28001,
		38001
	],
	"modified": "2013-08-14 18:58:16.414640",
	"closed": true,
	"issue": 12556043
}