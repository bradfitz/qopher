{
	"description": "runtime: Record jmpdefer's argument size.\nFixes bug 6055.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"khr@google.com"
	],
	"reviewers": [
		"dvyukov@google.com",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\n\r\n\r\nOn Wed, Aug 7, 2013 at 1:45 PM, <khr@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://khr%40golang.org@code.**google.com/p/go/<http://40golang.org@code.google.com/p/go/>\r\n>\r\n>\r\n> Description:\r\n> runtime: Record jmpdefer's argument size.\r\n> Fixes bug 6055.\r\n>\r\n> Please review this at https://codereview.appspot.**com/12536045/<https://codereview.appspot.com/12536045/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/runtime/asm_386.s\r\n>   M src/pkg/runtime/asm_amd64.s\r\n>   M src/pkg/runtime/asm_arm.s\r\n>\r\n>\r\n> Index: src/pkg/runtime/asm_386.s\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/runtime/asm_386.s\r\n> +++ b/src/pkg/runtime/asm_386.s\r\n> @@ -537,7 +537,7 @@\r\n>  // 1. pop the caller\r\n>  // 2. sub 5 bytes from the callers return\r\n>  // 3. jmp to the argument\r\n> -TEXT runtime\u00b7jmpdefer(SB), NOSPLIT, $0\r\n> +TEXT runtime\u00b7jmpdefer(SB), NOSPLIT, $0-8\r\n>         MOVL    4(SP), DX       // fn\r\n>         MOVL    8(SP), BX       // caller sp\r\n>         LEAL    -4(BX), SP      // caller sp after CALL\r\n> Index: src/pkg/runtime/asm_amd64.s\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/runtime/asm_amd64.s\r\n> +++ b/src/pkg/runtime/asm_amd64.s\r\n> @@ -577,7 +577,7 @@\r\n>  // 1. pop the caller\r\n>  // 2. sub 5 bytes from the callers return\r\n>  // 3. jmp to the argument\r\n> -TEXT runtime\u00b7jmpdefer(SB), NOSPLIT, $0\r\n> +TEXT runtime\u00b7jmpdefer(SB), NOSPLIT, $0-16\r\n>         MOVQ    8(SP), DX       // fn\r\n>         MOVQ    16(SP), BX      // caller sp\r\n>         LEAQ    -8(BX), SP      // caller sp after CALL\r\n> Index: src/pkg/runtime/asm_arm.s\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/runtime/asm_arm.s\r\n> +++ b/src/pkg/runtime/asm_arm.s\r\n> @@ -367,7 +367,7 @@\r\n>  // 1. grab stored LR for caller\r\n>  // 2. sub 4 bytes to get back to BL deferreturn\r\n>  // 3. B to fn\r\n> -TEXT runtime\u00b7jmpdefer(SB), NOSPLIT, $0\r\n> +TEXT runtime\u00b7jmpdefer(SB), NOSPLIT, $0-8\r\n>         MOVW    0(SP), LR\r\n>         MOVW    $-4(LR), LR     // BL deferreturn\r\n>         MOVW    fn+0(FP), R7\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-07 20:49:05.966110",
			"approval": true
		},
		{
			"sender": "khr@golang.org",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://khr%40golang.org@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-08-07 20:45:15.943090",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This shall not pass w/o a test.",
			"disapproval": false,
			"date": "2013-08-07 20:49:16.359640",
			"approval": false
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The test fails without the jmpdefer argsize fix, and passes with it.  What\r\nelse do you want, exactly?\r\n\r\n\r\nOn Wed, Aug 7, 2013 at 2:08 PM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n\r\n> runtime.GC would do as well\r\n>\r\n> On Thu, Aug 8, 2013 at 1:05 AM,  <dvyukov@google.com> wrote:\r\n> > The test passes now (with GOGC=off).\r\n> > Call runtime.Stack(true) in deferred func.\r\n> >\r\n> >\r\n> > https://codereview.appspot.com/12536045/\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-07 21:11:07.531130",
			"approval": false
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "test added. PTAL.\r\n\r\n\r\nOn Wed, Aug 7, 2013 at 1:49 PM, <dvyukov@google.com> wrote:\r\n\r\n> This shall not pass w/o a test.\r\n>\r\n> https://codereview.appspot.**com/12536045/<https://codereview.appspot.com/12536045/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-07 20:56:21.290080",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "runtime.GC would do as well\r\n\r\nOn Thu, Aug 8, 2013 at 1:05 AM,  <dvyukov@google.com> wrote:\r\n> The test passes now (with GOGC=off).\r\n> Call runtime.Stack(true) in deferred func.\r\n>\r\n>\r\n> https://codereview.appspot.com/12536045/\r\n",
			"disapproval": false,
			"date": "2013-08-07 21:08:38.871020",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"khr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-08-07 21:02:49.919020",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"khr@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"khr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The test passes now (with GOGC=off).\nCall runtime.Stack(true) in deferred func.",
			"disapproval": false,
			"date": "2013-08-07 21:05:24.100180",
			"approval": false
		},
		{
			"sender": "khr@golang.org",
			"recipients": [
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"dvyukov@google.com",
				"khr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=97ea81ad7455 ***\n\nruntime: Record jmpdefer's argument size.\nFixes bug 6055.\n\nR=golang-dev, bradfitz, dvyukov, khr\nCC=golang-dev\nhttps://codereview.appspot.com/12536045",
			"disapproval": false,
			"date": "2013-08-07 21:03:52.745630",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "If you look at the stack trace, it's pure coincidence that jmpdefer\r\nunwinds its stack. Normally it does not do that, and the crash does\r\nnot happen.\r\nInsert runtime.GC() call into the deferred func.\r\n\r\nruntime.gc(0x200000000)\r\n/Users/dvyukov/src/go2/src/pkg/runtime/mgc0.c:2052 +0x2d5 fp=0x22100cfd90\r\nruntime.mallocgc(0x10, 0x0, 0x0)\r\n/Users/dvyukov/src/go2/src/pkg/runtime/malloc.goc:142 +0x281 fp=0x22100cfe00\r\nruntime.mal(0x10)\r\n/Users/dvyukov/src/go2/src/pkg/runtime/malloc.goc:698 +0x38 fp=0x22100cfe20\r\ncopyin(0x21160, 0x22100cfe98, 0x22100cfeb0)\r\n/Users/dvyukov/src/go2/src/pkg/runtime/iface.c:152 +0x67 fp=0x22100cfe58\r\nruntime.convT2E(0x21160, 0x569b9, 0x31, 0x21160, 0x31)\r\n/Users/dvyukov/src/go2/src/pkg/runtime/iface.c:220 +0x46 fp=0x22100cfe90\r\nruntime.newErrorString(0x569b9, 0x31, 0x22100cfee8)\r\n/Users/dvyukov/src/go2/src/pkg/runtime/error.go:74 +0x3a fp=0x22100cfec0\r\nruntime.panicstring(0x569b9)\r\n/Users/dvyukov/src/go2/src/pkg/runtime/panic.c:513 +0x8d fp=0x22100cff00\r\nruntime.sigpanic()\r\n/Users/dvyukov/src/go2/src/pkg/runtime/os_darwin.c:449 +0x16a fp=0x22100cff18\r\nruntime: unknown argument frame size for runtime.jmpdefer called from\r\n0x2037 [main.nilInterfaceDeferCall]\r\nruntime.jmpdefer()\r\n\r\n\r\n\r\n\r\nOn Thu, Aug 8, 2013 at 1:11 AM, Keith Randall <khr@google.com> wrote:\r\n> The test fails without the jmpdefer argsize fix, and passes with it.  What\r\n> else do you want, exactly?\r\n>\r\n>\r\n> On Wed, Aug 7, 2013 at 2:08 PM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n>>\r\n>> runtime.GC would do as well\r\n>>\r\n>> On Thu, Aug 8, 2013 at 1:05 AM,  <dvyukov@google.com> wrote:\r\n>> > The test passes now (with GOGC=off).\r\n>> > Call runtime.Stack(true) in deferred func.\r\n>> >\r\n>> >\r\n>> > https://codereview.appspot.com/12536045/\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-07 21:22:48.551590",
			"approval": false
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It's not a coincidence.  The segv happens inside jmpdefer, it has to be on\r\nthe stack when unwinding occurs.\r\n\r\n\r\nOn Wed, Aug 7, 2013 at 2:22 PM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n\r\n> If you look at the stack trace, it's pure coincidence that jmpdefer\r\n> unwinds its stack. Normally it does not do that, and the crash does\r\n> not happen.\r\n> Insert runtime.GC() call into the deferred func.\r\n>\r\n> runtime.gc(0x200000000)\r\n> /Users/dvyukov/src/go2/src/pkg/runtime/mgc0.c:2052 +0x2d5 fp=0x22100cfd90\r\n> runtime.mallocgc(0x10, 0x0, 0x0)\r\n> /Users/dvyukov/src/go2/src/pkg/runtime/malloc.goc:142 +0x281\r\n> fp=0x22100cfe00\r\n> runtime.mal(0x10)\r\n> /Users/dvyukov/src/go2/src/pkg/runtime/malloc.goc:698 +0x38 fp=0x22100cfe20\r\n> copyin(0x21160, 0x22100cfe98, 0x22100cfeb0)\r\n> /Users/dvyukov/src/go2/src/pkg/runtime/iface.c:152 +0x67 fp=0x22100cfe58\r\n> runtime.convT2E(0x21160, 0x569b9, 0x31, 0x21160, 0x31)\r\n> /Users/dvyukov/src/go2/src/pkg/runtime/iface.c:220 +0x46 fp=0x22100cfe90\r\n> runtime.newErrorString(0x569b9, 0x31, 0x22100cfee8)\r\n> /Users/dvyukov/src/go2/src/pkg/runtime/error.go:74 +0x3a fp=0x22100cfec0\r\n> runtime.panicstring(0x569b9)\r\n> /Users/dvyukov/src/go2/src/pkg/runtime/panic.c:513 +0x8d fp=0x22100cff00\r\n> runtime.sigpanic()\r\n> /Users/dvyukov/src/go2/src/pkg/runtime/os_darwin.c:449 +0x16a\r\n> fp=0x22100cff18\r\n> runtime: unknown argument frame size for runtime.jmpdefer called from\r\n> 0x2037 [main.nilInterfaceDeferCall]\r\n> runtime.jmpdefer()\r\n>\r\n>\r\n>\r\n>\r\n> On Thu, Aug 8, 2013 at 1:11 AM, Keith Randall <khr@google.com> wrote:\r\n> > The test fails without the jmpdefer argsize fix, and passes with it.\r\n>  What\r\n> > else do you want, exactly?\r\n> >\r\n> >\r\n> > On Wed, Aug 7, 2013 at 2:08 PM, Dmitry Vyukov <dvyukov@google.com>\r\n> wrote:\r\n> >>\r\n> >> runtime.GC would do as well\r\n> >>\r\n> >> On Thu, Aug 8, 2013 at 1:05 AM,  <dvyukov@google.com> wrote:\r\n> >> > The test passes now (with GOGC=off).\r\n> >> > Call runtime.Stack(true) in deferred func.\r\n> >> >\r\n> >> >\r\n> >> > https://codereview.appspot.com/12536045/\r\n> >\r\n> >\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-07 21:31:02.295000",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The unwind is a coincidence. Neither recovered segv handler nor\r\njmpdefer normally unwind stack.\r\n\r\n\r\nOn Thu, Aug 8, 2013 at 1:31 AM, Keith Randall <khr@google.com> wrote:\r\n> It's not a coincidence.  The segv happens inside jmpdefer, it has to be on\r\n> the stack when unwinding occurs.\r\n>\r\n>\r\n> On Wed, Aug 7, 2013 at 2:22 PM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n>>\r\n>> If you look at the stack trace, it's pure coincidence that jmpdefer\r\n>> unwinds its stack. Normally it does not do that, and the crash does\r\n>> not happen.\r\n>> Insert runtime.GC() call into the deferred func.\r\n>>\r\n>> runtime.gc(0x200000000)\r\n>> /Users/dvyukov/src/go2/src/pkg/runtime/mgc0.c:2052 +0x2d5 fp=0x22100cfd90\r\n>> runtime.mallocgc(0x10, 0x0, 0x0)\r\n>> /Users/dvyukov/src/go2/src/pkg/runtime/malloc.goc:142 +0x281\r\n>> fp=0x22100cfe00\r\n>> runtime.mal(0x10)\r\n>> /Users/dvyukov/src/go2/src/pkg/runtime/malloc.goc:698 +0x38\r\n>> fp=0x22100cfe20\r\n>> copyin(0x21160, 0x22100cfe98, 0x22100cfeb0)\r\n>> /Users/dvyukov/src/go2/src/pkg/runtime/iface.c:152 +0x67 fp=0x22100cfe58\r\n>> runtime.convT2E(0x21160, 0x569b9, 0x31, 0x21160, 0x31)\r\n>> /Users/dvyukov/src/go2/src/pkg/runtime/iface.c:220 +0x46 fp=0x22100cfe90\r\n>> runtime.newErrorString(0x569b9, 0x31, 0x22100cfee8)\r\n>> /Users/dvyukov/src/go2/src/pkg/runtime/error.go:74 +0x3a fp=0x22100cfec0\r\n>> runtime.panicstring(0x569b9)\r\n>> /Users/dvyukov/src/go2/src/pkg/runtime/panic.c:513 +0x8d fp=0x22100cff00\r\n>> runtime.sigpanic()\r\n>> /Users/dvyukov/src/go2/src/pkg/runtime/os_darwin.c:449 +0x16a\r\n>> fp=0x22100cff18\r\n>> runtime: unknown argument frame size for runtime.jmpdefer called from\r\n>> 0x2037 [main.nilInterfaceDeferCall]\r\n>> runtime.jmpdefer()\r\n>>\r\n>>\r\n>>\r\n>>\r\n>> On Thu, Aug 8, 2013 at 1:11 AM, Keith Randall <khr@google.com> wrote:\r\n>> > The test fails without the jmpdefer argsize fix, and passes with it.\r\n>> > What\r\n>> > else do you want, exactly?\r\n>> >\r\n>> >\r\n>> > On Wed, Aug 7, 2013 at 2:08 PM, Dmitry Vyukov <dvyukov@google.com>\r\n>> > wrote:\r\n>> >>\r\n>> >> runtime.GC would do as well\r\n>> >>\r\n>> >> On Thu, Aug 8, 2013 at 1:05 AM,  <dvyukov@google.com> wrote:\r\n>> >> > The test passes now (with GOGC=off).\r\n>> >> > Call runtime.Stack(true) in deferred func.\r\n>> >> >\r\n>> >> >\r\n>> >> > https://codereview.appspot.com/12536045/\r\n>> >\r\n>> >\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-07 21:34:35.096060",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"khr@golang.org",
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"khr@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nI am slightly worried about implying that the stack at that point is suitable for garbage collection, which might happen if the triggered panic runs other handlers further down the stack and one of those blocks, since the arguments for the deferred function are nowhere accounted for. But I suppose since the call is now not going to happen, it's okay to lose the arguments.",
			"disapproval": false,
			"date": "2013-08-07 22:41:42.181930",
			"approval": true
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ah, now I understand what you're saying.  I was confused by your\r\nterminology.  The runtime uses the term unwind to mean what panic does and\r\ntraceback to mean what GC does.   The unwind does not fail, the traceback\r\ndoes.  The traceback is only triggered by the GC, which may or may not\r\nactually happen.\r\n\r\nI can't put a runtime.GC or runtime.Stack in the defer call - there is no\r\nbody of the defer, it is nil.  Another defer in the same frame can do it,\r\nthough.  Check out https://codereview.appspot.com/12536046.  It's ugly, but\r\nis that what you're looking for?\r\n\r\n\r\nOn Wed, Aug 7, 2013 at 2:34 PM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n\r\n> The unwind is a coincidence. Neither recovered segv handler nor\r\n> jmpdefer normally unwind stack.\r\n>\r\n>\r\n> On Thu, Aug 8, 2013 at 1:31 AM, Keith Randall <khr@google.com> wrote:\r\n> > It's not a coincidence.  The segv happens inside jmpdefer, it has to be\r\n> on\r\n> > the stack when unwinding occurs.\r\n> >\r\n> >\r\n> > On Wed, Aug 7, 2013 at 2:22 PM, Dmitry Vyukov <dvyukov@google.com>\r\n> wrote:\r\n> >>\r\n> >> If you look at the stack trace, it's pure coincidence that jmpdefer\r\n> >> unwinds its stack. Normally it does not do that, and the crash does\r\n> >> not happen.\r\n> >> Insert runtime.GC() call into the deferred func.\r\n> >>\r\n> >> runtime.gc(0x200000000)\r\n> >> /Users/dvyukov/src/go2/src/pkg/runtime/mgc0.c:2052 +0x2d5\r\n> fp=0x22100cfd90\r\n> >> runtime.mallocgc(0x10, 0x0, 0x0)\r\n> >> /Users/dvyukov/src/go2/src/pkg/runtime/malloc.goc:142 +0x281\r\n> >> fp=0x22100cfe00\r\n> >> runtime.mal(0x10)\r\n> >> /Users/dvyukov/src/go2/src/pkg/runtime/malloc.goc:698 +0x38\r\n> >> fp=0x22100cfe20\r\n> >> copyin(0x21160, 0x22100cfe98, 0x22100cfeb0)\r\n> >> /Users/dvyukov/src/go2/src/pkg/runtime/iface.c:152 +0x67 fp=0x22100cfe58\r\n> >> runtime.convT2E(0x21160, 0x569b9, 0x31, 0x21160, 0x31)\r\n> >> /Users/dvyukov/src/go2/src/pkg/runtime/iface.c:220 +0x46 fp=0x22100cfe90\r\n> >> runtime.newErrorString(0x569b9, 0x31, 0x22100cfee8)\r\n> >> /Users/dvyukov/src/go2/src/pkg/runtime/error.go:74 +0x3a fp=0x22100cfec0\r\n> >> runtime.panicstring(0x569b9)\r\n> >> /Users/dvyukov/src/go2/src/pkg/runtime/panic.c:513 +0x8d fp=0x22100cff00\r\n> >> runtime.sigpanic()\r\n> >> /Users/dvyukov/src/go2/src/pkg/runtime/os_darwin.c:449 +0x16a\r\n> >> fp=0x22100cff18\r\n> >> runtime: unknown argument frame size for runtime.jmpdefer called from\r\n> >> 0x2037 [main.nilInterfaceDeferCall]\r\n> >> runtime.jmpdefer()\r\n> >>\r\n> >>\r\n> >>\r\n> >>\r\n> >> On Thu, Aug 8, 2013 at 1:11 AM, Keith Randall <khr@google.com> wrote:\r\n> >> > The test fails without the jmpdefer argsize fix, and passes with it.\r\n> >> > What\r\n> >> > else do you want, exactly?\r\n> >> >\r\n> >> >\r\n> >> > On Wed, Aug 7, 2013 at 2:08 PM, Dmitry Vyukov <dvyukov@google.com>\r\n> >> > wrote:\r\n> >> >>\r\n> >> >> runtime.GC would do as well\r\n> >> >>\r\n> >> >> On Thu, Aug 8, 2013 at 1:05 AM,  <dvyukov@google.com> wrote:\r\n> >> >> > The test passes now (with GOGC=off).\r\n> >> >> > Call runtime.Stack(true) in deferred func.\r\n> >> >> >\r\n> >> >> >\r\n> >> >> > https://codereview.appspot.com/12536045/\r\n> >> >\r\n> >> >\r\n> >\r\n> >\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-07 23:11:00.089150",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Aug 8, 2013 at 3:10 AM, Keith Randall <khr@google.com> wrote:\r\n> Ah, now I understand what you're saying.  I was confused by your\r\n> terminology.  The runtime uses the term unwind to mean what panic does and\r\n> traceback to mean what GC does.   The unwind does not fail, the traceback\r\n> does.  The traceback is only triggered by the GC, which may or may not\r\n> actually happen.\r\n>\r\n> I can't put a runtime.GC or runtime.Stack in the defer call - there is no\r\n> body of the defer, it is nil.\r\n\r\nI meant the other defer -- the one that calls recover.\r\n\r\n\r\n>  Another defer in the same frame can do it,\r\n> though.  Check out https://codereview.appspot.com/12536046.  It's ugly, but\r\n> is that what you're looking for?\r\n>\r\n>\r\n> On Wed, Aug 7, 2013 at 2:34 PM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n>>\r\n>> The unwind is a coincidence. Neither recovered segv handler nor\r\n>> jmpdefer normally unwind stack.\r\n>>\r\n>>\r\n>> On Thu, Aug 8, 2013 at 1:31 AM, Keith Randall <khr@google.com> wrote:\r\n>> > It's not a coincidence.  The segv happens inside jmpdefer, it has to be\r\n>> > on\r\n>> > the stack when unwinding occurs.\r\n>> >\r\n>> >\r\n>> > On Wed, Aug 7, 2013 at 2:22 PM, Dmitry Vyukov <dvyukov@google.com>\r\n>> > wrote:\r\n>> >>\r\n>> >> If you look at the stack trace, it's pure coincidence that jmpdefer\r\n>> >> unwinds its stack. Normally it does not do that, and the crash does\r\n>> >> not happen.\r\n>> >> Insert runtime.GC() call into the deferred func.\r\n>> >>\r\n>> >> runtime.gc(0x200000000)\r\n>> >> /Users/dvyukov/src/go2/src/pkg/runtime/mgc0.c:2052 +0x2d5\r\n>> >> fp=0x22100cfd90\r\n>> >> runtime.mallocgc(0x10, 0x0, 0x0)\r\n>> >> /Users/dvyukov/src/go2/src/pkg/runtime/malloc.goc:142 +0x281\r\n>> >> fp=0x22100cfe00\r\n>> >> runtime.mal(0x10)\r\n>> >> /Users/dvyukov/src/go2/src/pkg/runtime/malloc.goc:698 +0x38\r\n>> >> fp=0x22100cfe20\r\n>> >> copyin(0x21160, 0x22100cfe98, 0x22100cfeb0)\r\n>> >> /Users/dvyukov/src/go2/src/pkg/runtime/iface.c:152 +0x67\r\n>> >> fp=0x22100cfe58\r\n>> >> runtime.convT2E(0x21160, 0x569b9, 0x31, 0x21160, 0x31)\r\n>> >> /Users/dvyukov/src/go2/src/pkg/runtime/iface.c:220 +0x46\r\n>> >> fp=0x22100cfe90\r\n>> >> runtime.newErrorString(0x569b9, 0x31, 0x22100cfee8)\r\n>> >> /Users/dvyukov/src/go2/src/pkg/runtime/error.go:74 +0x3a\r\n>> >> fp=0x22100cfec0\r\n>> >> runtime.panicstring(0x569b9)\r\n>> >> /Users/dvyukov/src/go2/src/pkg/runtime/panic.c:513 +0x8d\r\n>> >> fp=0x22100cff00\r\n>> >> runtime.sigpanic()\r\n>> >> /Users/dvyukov/src/go2/src/pkg/runtime/os_darwin.c:449 +0x16a\r\n>> >> fp=0x22100cff18\r\n>> >> runtime: unknown argument frame size for runtime.jmpdefer called from\r\n>> >> 0x2037 [main.nilInterfaceDeferCall]\r\n>> >> runtime.jmpdefer()\r\n>> >>\r\n>> >>\r\n>> >>\r\n>> >>\r\n>> >> On Thu, Aug 8, 2013 at 1:11 AM, Keith Randall <khr@google.com> wrote:\r\n>> >> > The test fails without the jmpdefer argsize fix, and passes with it.\r\n>> >> > What\r\n>> >> > else do you want, exactly?\r\n>> >> >\r\n>> >> >\r\n>> >> > On Wed, Aug 7, 2013 at 2:08 PM, Dmitry Vyukov <dvyukov@google.com>\r\n>> >> > wrote:\r\n>> >> >>\r\n>> >> >> runtime.GC would do as well\r\n>> >> >>\r\n>> >> >> On Thu, Aug 8, 2013 at 1:05 AM,  <dvyukov@google.com> wrote:\r\n>> >> >> > The test passes now (with GOGC=off).\r\n>> >> >> > Call runtime.Stack(true) in deferred func.\r\n>> >> >> >\r\n>> >> >> >\r\n>> >> >> > https://codereview.appspot.com/12536045/\r\n>> >> >\r\n>> >> >\r\n>> >\r\n>> >\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-08 09:36:58.623640",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Aug 8, 2013 at 1:36 PM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n> On Thu, Aug 8, 2013 at 3:10 AM, Keith Randall <khr@google.com> wrote:\r\n>> Ah, now I understand what you're saying.  I was confused by your\r\n>> terminology.  The runtime uses the term unwind to mean what panic does and\r\n>> traceback to mean what GC does.   The unwind does not fail, the traceback\r\n>> does.  The traceback is only triggered by the GC, which may or may not\r\n>> actually happen.\r\n>>\r\n>> I can't put a runtime.GC or runtime.Stack in the defer call - there is no\r\n>> body of the defer, it is nil.\r\n>\r\n> I meant the other defer -- the one that calls recover.\r\n\r\nThe following code is sufficient to reliably trigger the bug:\r\n\r\npackage main\r\nimport \"runtime\"\r\nfunc main() {\r\n        defer func() {\r\n                runtime.GC()\r\n                recover()\r\n        }()\r\n        var fn func()\r\n        defer fn()\r\n}\r\n",
			"disapproval": false,
			"date": "2013-08-08 09:40:45.075490",
			"approval": false
		}
	],
	"owner_email": "khr@golang.org",
	"private": false,
	"base_url": "",
	"owner": "khr",
	"subject": "code review 12536045: runtime: Record jmpdefer's argument size.",
	"created": "2013-08-07 20:43:42.146450",
	"patchsets": [
		1,
		3001,
		6001,
		10002,
		13001,
		16001
	],
	"modified": "2013-08-08 09:40:45.565180",
	"closed": true,
	"issue": 12536045
}