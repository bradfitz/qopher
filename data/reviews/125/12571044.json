{
	"description": "go.tools/dashboard/builder: move Builder testing details into TestSite struct\n\nThe only real big difference between building the GccGo and the main Go repo\nis where the tests are located and which command to run in that test site. In\nthe current dashboard implementation, the details of where to run the buildCmd\nare hardcoded into buildHash. It seemed like a good idea to move this info\ninto a struct and have it be chosen depending on what is being built. The build\ncommand itself can already be specified through the command line.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"cmang@google.com"
	],
	"messages": [
		{
			"sender": "cmang@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I wasn't sure about the name, but it's just supposed to be the location\r\nwhere a test exists. I thought the word \"site\" or phrase \"test site\" was\r\nappropriate for that. About private vs. public, I'm not sure if I\r\nunderstand or not. I made it look like the Builder struct, was there\r\nsomething I left out? Or should the fields be public for documentation\r\npurposes?\r\n\r\n\r\nOn Tue, Aug 6, 2013 at 4:58 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n\r\n> I'm not sure exactly what this is.\r\n>\r\n> \"TestSite\" is a weird name.\r\n>\r\n> Also: you now have a public type, but it only has private fields.  How am\r\n> I supposed to use this?\r\n>\r\n>\r\n>\r\n> On Tue, Aug 6, 2013 at 4:41 PM, <cmang@golang.org> wrote:\r\n>\r\n>> Reviewers: golang-dev1,\r\n>>\r\n>> Message:\r\n>> Hello golang-dev@googlegroups.com,\r\n>>\r\n>> I'd like you to review this change to\r\n>> https://code.google.com/p/go.**tools <https://code.google.com/p/go.tools>\r\n>>\r\n>>\r\n>> Description:\r\n>> go.tools/dashboard/builder: move Builder testing details into TestSite\r\n>> struct\r\n>>\r\n>> The only real big difference between building the GccGo and the main Go\r\n>> repo\r\n>> is where the tests are located and which command to run in that test\r\n>> site. In\r\n>> the current dashboard implementation, the details of where to run the\r\n>> buildCmd\r\n>> are hardcoded into buildHash. It seemed like a good idea to move this\r\n>> info\r\n>> into a struct and have it be chosen depending on what is being built.\r\n>> The build\r\n>> command itself can already be specified through the command line.\r\n>>\r\n>> Please review this at https://codereview.appspot.**com/12571044/<https://codereview.appspot.com/12571044/>\r\n>>\r\n>> Affected files:\r\n>>   M dashboard/builder/main.go\r\n>>\r\n>>\r\n>> Index: dashboard/builder/main.go\r\n>> ==============================**==============================**=======\r\n>> --- a/dashboard/builder/main.go\r\n>> +++ b/dashboard/builder/main.go\r\n>> @@ -50,6 +50,13 @@\r\n>>         name         string\r\n>>         goos, goarch string\r\n>>         key          string\r\n>> +       site         *TestSite\r\n>> +}\r\n>> +\r\n>> +// A TestSite describes the location of a builder test.\r\n>> +type TestSite struct {\r\n>> +       parentDir string // top-level directory that this test lies in\r\n>> +       testDir   string // relative path from parentDir to the test\r\n>> itself\r\n>>  }\r\n>>\r\n>>  var (\r\n>> @@ -75,6 +82,12 @@\r\n>>         suffix      = defaultSuffix()\r\n>>  )\r\n>>\r\n>> +// goTestSite is the test site for a typical Go build.\r\n>> +var goTestSite = &TestSite{\r\n>> +       parentDir: \"go\",\r\n>> +       testDir:   \"src\",\r\n>> +}\r\n>> +\r\n>>  func main() {\r\n>>         flag.Usage = func() {\r\n>>                 fmt.Fprintf(os.Stderr, \"usage: %s goos-goarch...\\n\",\r\n>> os.Args[0])\r\n>> @@ -189,6 +202,7 @@\r\n>>         b := &Builder{\r\n>>                 goroot: goroot,\r\n>>                 name:   name,\r\n>> +               site:   goTestSite,\r\n>>         }\r\n>>\r\n>>         // get goos/goarch from builder string\r\n>> @@ -263,11 +277,11 @@\r\n>>         }\r\n>>\r\n>>         // clone repo at specified revision\r\n>> -       if _, err := b.goroot.Clone(filepath.Join(**workpath, \"go\"),\r\n>> hash); err != nil {\r\n>> +       if _, err := b.goroot.Clone(filepath.Join(**workpath,\r\n>> b.site.parentDir), hash); err != nil {\r\n>>                 return err\r\n>>         }\r\n>>\r\n>> -       srcDir := filepath.Join(workpath, \"go\", \"src\")\r\n>> +       srcDir := filepath.Join(workpath, b.site.parentDir,\r\n>> b.site.testDir)\r\n>>\r\n>>         // build\r\n>>         var buildlog bytes.Buffer\r\n>> @@ -308,7 +322,7 @@\r\n>>         }\r\n>>\r\n>>         // build Go sub-repositories\r\n>> -       goRoot := filepath.Join(workpath, \"go\")\r\n>> +       goRoot := filepath.Join(workpath, b.site.parentDir)\r\n>>         goPath := workpath\r\n>>         b.buildSubrepos(goRoot, goPath, hash)\r\n>>\r\n>>\r\n>>\r\n>>\r\n>> --\r\n>>\r\n>> ---You received this message because you are subscribed to the Google\r\n>> Groups \"golang-dev\" group.\r\n>> To unsubscribe from this group and stop receiving emails from it, send an\r\n>> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n>> .\r\n>> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n>> .\r\n>>\r\n>>\r\n>>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-07 00:09:18.168050",
			"approval": false
		},
		{
			"sender": "cmang@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Aug 6, 2013 at 5:21 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n\r\n> On Tue, Aug 6, 2013 at 5:17 PM, Chris Manghane <cmang@google.com> wrote:\r\n>\r\n>> It was supposed to be like \"test/run.sh.\" What do you think a better name\r\n>> for this is?\r\n>>\r\n>\r\n> I don't even know what that is in the old version.  The builder just runs\r\n> all.bash, doesn't it?  test/run.sh isn't even normally used these days.\r\n>\r\n> I think I don't know the gccgo world and you don't know the gc world, so\r\n> we're speaking different languages.\r\n>\r\n> Ian might need to translate.\r\n>\r\n\r\nIn gccgo, after the gofrontend is moved to to libgo and compiled into an\r\nobject directory, you can run the test suite with the command \"make\r\ncheck-go\". So my idea was to make a gccgoTestSite that points to the\r\ngccgo-objdir and run the builder with the \"buildCmd='make check-go'\". The\r\ncurrent builder runs all.suffix or race.suffix if \"-race\" is specified in\r\nthe goos-goarch. The output for the most part is similar, but where to run\r\nthe buildCmd is different, so I thought this might be a useful abstraction.\r\n\r\n\r\n>\r\n>\r\n>> Noted on your point about TestSite. I originally had a NewTestSite\r\n>> function, but I omitted it since there is only one kind of TestSite until\r\n>> the GccGo support is added. Should I just make it private for now and then\r\n>> add the constructor function once it's relevant?\r\n>>\r\n>\r\n> I don't know what you need yet, so it's hard to say.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-07 00:28:20.268300",
			"approval": false
		},
		{
			"sender": "cmang@golang.org",
			"recipients": [
				"cmang@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.tools",
			"disapproval": false,
			"date": "2013-08-06 23:41:41.466090",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm not sure exactly what this is.\r\n\r\n\"TestSite\" is a weird name.\r\n\r\nAlso: you now have a public type, but it only has private fields.  How am I\r\nsupposed to use this?\r\n\r\n\r\n\r\nOn Tue, Aug 6, 2013 at 4:41 PM, <cmang@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go.**tools <https://code.google.com/p/go.tools>\r\n>\r\n>\r\n> Description:\r\n> go.tools/dashboard/builder: move Builder testing details into TestSite\r\n> struct\r\n>\r\n> The only real big difference between building the GccGo and the main Go\r\n> repo\r\n> is where the tests are located and which command to run in that test\r\n> site. In\r\n> the current dashboard implementation, the details of where to run the\r\n> buildCmd\r\n> are hardcoded into buildHash. It seemed like a good idea to move this\r\n> info\r\n> into a struct and have it be chosen depending on what is being built.\r\n> The build\r\n> command itself can already be specified through the command line.\r\n>\r\n> Please review this at https://codereview.appspot.**com/12571044/<https://codereview.appspot.com/12571044/>\r\n>\r\n> Affected files:\r\n>   M dashboard/builder/main.go\r\n>\r\n>\r\n> Index: dashboard/builder/main.go\r\n> ==============================**==============================**=======\r\n> --- a/dashboard/builder/main.go\r\n> +++ b/dashboard/builder/main.go\r\n> @@ -50,6 +50,13 @@\r\n>         name         string\r\n>         goos, goarch string\r\n>         key          string\r\n> +       site         *TestSite\r\n> +}\r\n> +\r\n> +// A TestSite describes the location of a builder test.\r\n> +type TestSite struct {\r\n> +       parentDir string // top-level directory that this test lies in\r\n> +       testDir   string // relative path from parentDir to the test itself\r\n>  }\r\n>\r\n>  var (\r\n> @@ -75,6 +82,12 @@\r\n>         suffix      = defaultSuffix()\r\n>  )\r\n>\r\n> +// goTestSite is the test site for a typical Go build.\r\n> +var goTestSite = &TestSite{\r\n> +       parentDir: \"go\",\r\n> +       testDir:   \"src\",\r\n> +}\r\n> +\r\n>  func main() {\r\n>         flag.Usage = func() {\r\n>                 fmt.Fprintf(os.Stderr, \"usage: %s goos-goarch...\\n\",\r\n> os.Args[0])\r\n> @@ -189,6 +202,7 @@\r\n>         b := &Builder{\r\n>                 goroot: goroot,\r\n>                 name:   name,\r\n> +               site:   goTestSite,\r\n>         }\r\n>\r\n>         // get goos/goarch from builder string\r\n> @@ -263,11 +277,11 @@\r\n>         }\r\n>\r\n>         // clone repo at specified revision\r\n> -       if _, err := b.goroot.Clone(filepath.Join(**workpath, \"go\"),\r\n> hash); err != nil {\r\n> +       if _, err := b.goroot.Clone(filepath.Join(**workpath,\r\n> b.site.parentDir), hash); err != nil {\r\n>                 return err\r\n>         }\r\n>\r\n> -       srcDir := filepath.Join(workpath, \"go\", \"src\")\r\n> +       srcDir := filepath.Join(workpath, b.site.parentDir, b.site.testDir)\r\n>\r\n>         // build\r\n>         var buildlog bytes.Buffer\r\n> @@ -308,7 +322,7 @@\r\n>         }\r\n>\r\n>         // build Go sub-repositories\r\n> -       goRoot := filepath.Join(workpath, \"go\")\r\n> +       goRoot := filepath.Join(workpath, b.site.parentDir)\r\n>         goPath := workpath\r\n>         b.buildSubrepos(goRoot, goPath, hash)\r\n>\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-06 23:58:15.350660",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What type of test?\r\n\r\nLike, a go TestFoo(*testing.T) test?  Or a test/run.sh type of test?\r\n Or.... ?\r\n\r\nRe: Public vs. private --- you made the struct name capitalized but the\r\nstruct fields lowercase.  Which means I can create a TestSite, but I can\r\nonly set it to zero, because I can't manipulate any of its fields.\r\n\r\nIf it's opaque like that, it needs a way to make them.  Or it needs to\r\nremain private.\r\n\r\n\r\n\r\nOn Tue, Aug 6, 2013 at 5:09 PM, Chris Manghane <cmang@google.com> wrote:\r\n\r\n> I wasn't sure about the name, but it's just supposed to be the location\r\n> where a test exists. I thought the word \"site\" or phrase \"test site\" was\r\n> appropriate for that. About private vs. public, I'm not sure if I\r\n> understand or not. I made it look like the Builder struct, was there\r\n> something I left out? Or should the fields be public for documentation\r\n> purposes?\r\n>\r\n>\r\n> On Tue, Aug 6, 2013 at 4:58 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n>\r\n>> I'm not sure exactly what this is.\r\n>>\r\n>> \"TestSite\" is a weird name.\r\n>>\r\n>> Also: you now have a public type, but it only has private fields.  How am\r\n>> I supposed to use this?\r\n>>\r\n>>\r\n>>\r\n>> On Tue, Aug 6, 2013 at 4:41 PM, <cmang@golang.org> wrote:\r\n>>\r\n>>> Reviewers: golang-dev1,\r\n>>>\r\n>>> Message:\r\n>>> Hello golang-dev@googlegroups.com,\r\n>>>\r\n>>> I'd like you to review this change to\r\n>>> https://code.google.com/p/go.**tools<https://code.google.com/p/go.tools>\r\n>>>\r\n>>>\r\n>>> Description:\r\n>>> go.tools/dashboard/builder: move Builder testing details into TestSite\r\n>>> struct\r\n>>>\r\n>>> The only real big difference between building the GccGo and the main Go\r\n>>> repo\r\n>>> is where the tests are located and which command to run in that test\r\n>>> site. In\r\n>>> the current dashboard implementation, the details of where to run the\r\n>>> buildCmd\r\n>>> are hardcoded into buildHash. It seemed like a good idea to move this\r\n>>> info\r\n>>> into a struct and have it be chosen depending on what is being built.\r\n>>> The build\r\n>>> command itself can already be specified through the command line.\r\n>>>\r\n>>> Please review this at https://codereview.appspot.**com/12571044/<https://codereview.appspot.com/12571044/>\r\n>>>\r\n>>> Affected files:\r\n>>>   M dashboard/builder/main.go\r\n>>>\r\n>>>\r\n>>> Index: dashboard/builder/main.go\r\n>>> ==============================**==============================**=======\r\n>>> --- a/dashboard/builder/main.go\r\n>>> +++ b/dashboard/builder/main.go\r\n>>> @@ -50,6 +50,13 @@\r\n>>>         name         string\r\n>>>         goos, goarch string\r\n>>>         key          string\r\n>>> +       site         *TestSite\r\n>>> +}\r\n>>> +\r\n>>> +// A TestSite describes the location of a builder test.\r\n>>> +type TestSite struct {\r\n>>> +       parentDir string // top-level directory that this test lies in\r\n>>> +       testDir   string // relative path from parentDir to the test\r\n>>> itself\r\n>>>  }\r\n>>>\r\n>>>  var (\r\n>>> @@ -75,6 +82,12 @@\r\n>>>         suffix      = defaultSuffix()\r\n>>>  )\r\n>>>\r\n>>> +// goTestSite is the test site for a typical Go build.\r\n>>> +var goTestSite = &TestSite{\r\n>>> +       parentDir: \"go\",\r\n>>> +       testDir:   \"src\",\r\n>>> +}\r\n>>> +\r\n>>>  func main() {\r\n>>>         flag.Usage = func() {\r\n>>>                 fmt.Fprintf(os.Stderr, \"usage: %s goos-goarch...\\n\",\r\n>>> os.Args[0])\r\n>>> @@ -189,6 +202,7 @@\r\n>>>         b := &Builder{\r\n>>>                 goroot: goroot,\r\n>>>                 name:   name,\r\n>>> +               site:   goTestSite,\r\n>>>         }\r\n>>>\r\n>>>         // get goos/goarch from builder string\r\n>>> @@ -263,11 +277,11 @@\r\n>>>         }\r\n>>>\r\n>>>         // clone repo at specified revision\r\n>>> -       if _, err := b.goroot.Clone(filepath.Join(**workpath, \"go\"),\r\n>>> hash); err != nil {\r\n>>> +       if _, err := b.goroot.Clone(filepath.Join(**workpath,\r\n>>> b.site.parentDir), hash); err != nil {\r\n>>>                 return err\r\n>>>         }\r\n>>>\r\n>>> -       srcDir := filepath.Join(workpath, \"go\", \"src\")\r\n>>> +       srcDir := filepath.Join(workpath, b.site.parentDir,\r\n>>> b.site.testDir)\r\n>>>\r\n>>>         // build\r\n>>>         var buildlog bytes.Buffer\r\n>>> @@ -308,7 +322,7 @@\r\n>>>         }\r\n>>>\r\n>>>         // build Go sub-repositories\r\n>>> -       goRoot := filepath.Join(workpath, \"go\")\r\n>>> +       goRoot := filepath.Join(workpath, b.site.parentDir)\r\n>>>         goPath := workpath\r\n>>>         b.buildSubrepos(goRoot, goPath, hash)\r\n>>>\r\n>>>\r\n>>>\r\n>>>\r\n>>> --\r\n>>>\r\n>>> ---You received this message because you are subscribed to the Google\r\n>>> Groups \"golang-dev\" group.\r\n>>> To unsubscribe from this group and stop receiving emails from it, send\r\n>>> an email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n>>> .\r\n>>> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n>>> .\r\n>>>\r\n>>>\r\n>>>\r\n>>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-07 00:12:29.538120",
			"approval": false
		},
		{
			"sender": "cmang@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It was supposed to be like \"test/run.sh.\" What do you think a better name\r\nfor this is?\r\n\r\nNoted on your point about TestSite. I originally had a NewTestSite\r\nfunction, but I omitted it since there is only one kind of TestSite until\r\nthe GccGo support is added. Should I just make it private for now and then\r\nadd the constructor function once it's relevant?\r\n\r\n\r\nOn Tue, Aug 6, 2013 at 5:12 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n\r\n> What type of test?\r\n>\r\n> Like, a go TestFoo(*testing.T) test?  Or a test/run.sh type of test?\r\n>  Or.... ?\r\n>\r\n> Re: Public vs. private --- you made the struct name capitalized but the\r\n> struct fields lowercase.  Which means I can create a TestSite, but I can\r\n> only set it to zero, because I can't manipulate any of its fields.\r\n>\r\n> If it's opaque like that, it needs a way to make them.  Or it needs to\r\n> remain private.\r\n>\r\n>\r\n>\r\n> On Tue, Aug 6, 2013 at 5:09 PM, Chris Manghane <cmang@google.com> wrote:\r\n>\r\n>> I wasn't sure about the name, but it's just supposed to be the location\r\n>> where a test exists. I thought the word \"site\" or phrase \"test site\" was\r\n>> appropriate for that. About private vs. public, I'm not sure if I\r\n>> understand or not. I made it look like the Builder struct, was there\r\n>> something I left out? Or should the fields be public for documentation\r\n>> purposes?\r\n>>\r\n>>\r\n>> On Tue, Aug 6, 2013 at 4:58 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n>>\r\n>>> I'm not sure exactly what this is.\r\n>>>\r\n>>> \"TestSite\" is a weird name.\r\n>>>\r\n>>> Also: you now have a public type, but it only has private fields.  How\r\n>>> am I supposed to use this?\r\n>>>\r\n>>>\r\n>>>\r\n>>> On Tue, Aug 6, 2013 at 4:41 PM, <cmang@golang.org> wrote:\r\n>>>\r\n>>>> Reviewers: golang-dev1,\r\n>>>>\r\n>>>> Message:\r\n>>>> Hello golang-dev@googlegroups.com,\r\n>>>>\r\n>>>> I'd like you to review this change to\r\n>>>> https://code.google.com/p/go.**tools<https://code.google.com/p/go.tools>\r\n>>>>\r\n>>>>\r\n>>>> Description:\r\n>>>> go.tools/dashboard/builder: move Builder testing details into TestSite\r\n>>>> struct\r\n>>>>\r\n>>>> The only real big difference between building the GccGo and the main Go\r\n>>>> repo\r\n>>>> is where the tests are located and which command to run in that test\r\n>>>> site. In\r\n>>>> the current dashboard implementation, the details of where to run the\r\n>>>> buildCmd\r\n>>>> are hardcoded into buildHash. It seemed like a good idea to move this\r\n>>>> info\r\n>>>> into a struct and have it be chosen depending on what is being built.\r\n>>>> The build\r\n>>>> command itself can already be specified through the command line.\r\n>>>>\r\n>>>> Please review this at https://codereview.appspot.**com/12571044/<https://codereview.appspot.com/12571044/>\r\n>>>>\r\n>>>> Affected files:\r\n>>>>   M dashboard/builder/main.go\r\n>>>>\r\n>>>>\r\n>>>> Index: dashboard/builder/main.go\r\n>>>> ==============================**==============================**=======\r\n>>>> --- a/dashboard/builder/main.go\r\n>>>> +++ b/dashboard/builder/main.go\r\n>>>> @@ -50,6 +50,13 @@\r\n>>>>         name         string\r\n>>>>         goos, goarch string\r\n>>>>         key          string\r\n>>>> +       site         *TestSite\r\n>>>> +}\r\n>>>> +\r\n>>>> +// A TestSite describes the location of a builder test.\r\n>>>> +type TestSite struct {\r\n>>>> +       parentDir string // top-level directory that this test lies in\r\n>>>> +       testDir   string // relative path from parentDir to the test\r\n>>>> itself\r\n>>>>  }\r\n>>>>\r\n>>>>  var (\r\n>>>> @@ -75,6 +82,12 @@\r\n>>>>         suffix      = defaultSuffix()\r\n>>>>  )\r\n>>>>\r\n>>>> +// goTestSite is the test site for a typical Go build.\r\n>>>> +var goTestSite = &TestSite{\r\n>>>> +       parentDir: \"go\",\r\n>>>> +       testDir:   \"src\",\r\n>>>> +}\r\n>>>> +\r\n>>>>  func main() {\r\n>>>>         flag.Usage = func() {\r\n>>>>                 fmt.Fprintf(os.Stderr, \"usage: %s goos-goarch...\\n\",\r\n>>>> os.Args[0])\r\n>>>> @@ -189,6 +202,7 @@\r\n>>>>         b := &Builder{\r\n>>>>                 goroot: goroot,\r\n>>>>                 name:   name,\r\n>>>> +               site:   goTestSite,\r\n>>>>         }\r\n>>>>\r\n>>>>         // get goos/goarch from builder string\r\n>>>> @@ -263,11 +277,11 @@\r\n>>>>         }\r\n>>>>\r\n>>>>         // clone repo at specified revision\r\n>>>> -       if _, err := b.goroot.Clone(filepath.Join(**workpath, \"go\"),\r\n>>>> hash); err != nil {\r\n>>>> +       if _, err := b.goroot.Clone(filepath.Join(**workpath,\r\n>>>> b.site.parentDir), hash); err != nil {\r\n>>>>                 return err\r\n>>>>         }\r\n>>>>\r\n>>>> -       srcDir := filepath.Join(workpath, \"go\", \"src\")\r\n>>>> +       srcDir := filepath.Join(workpath, b.site.parentDir,\r\n>>>> b.site.testDir)\r\n>>>>\r\n>>>>         // build\r\n>>>>         var buildlog bytes.Buffer\r\n>>>> @@ -308,7 +322,7 @@\r\n>>>>         }\r\n>>>>\r\n>>>>         // build Go sub-repositories\r\n>>>> -       goRoot := filepath.Join(workpath, \"go\")\r\n>>>> +       goRoot := filepath.Join(workpath, b.site.parentDir)\r\n>>>>         goPath := workpath\r\n>>>>         b.buildSubrepos(goRoot, goPath, hash)\r\n>>>>\r\n>>>>\r\n>>>>\r\n>>>>\r\n>>>> --\r\n>>>>\r\n>>>> ---You received this message because you are subscribed to the Google\r\n>>>> Groups \"golang-dev\" group.\r\n>>>> To unsubscribe from this group and stop receiving emails from it, send\r\n>>>> an email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n>>>> .\r\n>>>> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n>>>> .\r\n>>>>\r\n>>>>\r\n>>>>\r\n>>>\r\n>>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-07 00:17:29.971970",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Aug 6, 2013 at 5:17 PM, Chris Manghane <cmang@google.com> wrote:\r\n\r\n> It was supposed to be like \"test/run.sh.\" What do you think a better name\r\n> for this is?\r\n>\r\n\r\nI don't even know what that is in the old version.  The builder just runs\r\nall.bash, doesn't it?  test/run.sh isn't even normally used these days.\r\n\r\nI think I don't know the gccgo world and you don't know the gc world, so\r\nwe're speaking different languages.\r\n\r\nIan might need to translate.\r\n\r\n\r\n> Noted on your point about TestSite. I originally had a NewTestSite\r\n> function, but I omitted it since there is only one kind of TestSite until\r\n> the GccGo support is added. Should I just make it private for now and then\r\n> add the constructor function once it's relevant?\r\n>\r\n\r\nI don't know what you need yet, so it's hard to say.\r\n",
			"disapproval": false,
			"date": "2013-08-07 00:21:04.110840",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Can't we just do:\r\n\r\nif gccgo {\r\n   x\r\n} else {\r\n   all.bash\r\n}\r\n\r\n?\r\n\r\nWe're not building Jenkins.  We're building a tool for exactly one user: us.\r\n\r\n\r\n\r\n\r\nOn Tue, Aug 6, 2013 at 5:28 PM, Chris Manghane <cmang@google.com> wrote:\r\n\r\n>\r\n>\r\n>\r\n> On Tue, Aug 6, 2013 at 5:21 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n>\r\n>> On Tue, Aug 6, 2013 at 5:17 PM, Chris Manghane <cmang@google.com> wrote:\r\n>>\r\n>>> It was supposed to be like \"test/run.sh.\" What do you think a better\r\n>>> name for this is?\r\n>>>\r\n>>\r\n>> I don't even know what that is in the old version.  The builder just runs\r\n>> all.bash, doesn't it?  test/run.sh isn't even normally used these days.\r\n>>\r\n>> I think I don't know the gccgo world and you don't know the gc world, so\r\n>> we're speaking different languages.\r\n>>\r\n>> Ian might need to translate.\r\n>>\r\n>\r\n> In gccgo, after the gofrontend is moved to to libgo and compiled into an\r\n> object directory, you can run the test suite with the command \"make\r\n> check-go\". So my idea was to make a gccgoTestSite that points to the\r\n> gccgo-objdir and run the builder with the \"buildCmd='make check-go'\". The\r\n> current builder runs all.suffix or race.suffix if \"-race\" is specified in\r\n> the goos-goarch. The output for the most part is similar, but where to run\r\n> the buildCmd is different, so I thought this might be a useful abstraction.\r\n>\r\n>\r\n>>\r\n>>\r\n>>> Noted on your point about TestSite. I originally had a NewTestSite\r\n>>> function, but I omitted it since there is only one kind of TestSite until\r\n>>> the GccGo support is added. Should I just make it private for now and then\r\n>>> add the constructor function once it's relevant?\r\n>>>\r\n>>\r\n>> I don't know what you need yet, so it's hard to say.\r\n>>\r\n>>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-07 00:58:03.136550",
			"approval": false
		},
		{
			"sender": "cmang@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yeah, I didn't mean to over-complicate this. In that case, this is a\r\nuseless abstraction for now.\r\n\r\n\r\nOn Tue, Aug 6, 2013 at 5:58 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n\r\n> Can't we just do:\r\n>\r\n> if gccgo {\r\n>    x\r\n> } else {\r\n>    all.bash\r\n> }\r\n>\r\n> ?\r\n>\r\n> We're not building Jenkins.  We're building a tool for exactly one user:\r\n> us.\r\n>\r\n>\r\n>\r\n>\r\n> On Tue, Aug 6, 2013 at 5:28 PM, Chris Manghane <cmang@google.com> wrote:\r\n>\r\n>>\r\n>>\r\n>>\r\n>> On Tue, Aug 6, 2013 at 5:21 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n>>\r\n>>> On Tue, Aug 6, 2013 at 5:17 PM, Chris Manghane <cmang@google.com> wrote:\r\n>>>\r\n>>>> It was supposed to be like \"test/run.sh.\" What do you think a better\r\n>>>> name for this is?\r\n>>>>\r\n>>>\r\n>>> I don't even know what that is in the old version.  The builder just\r\n>>> runs all.bash, doesn't it?  test/run.sh isn't even normally used these days.\r\n>>>\r\n>>> I think I don't know the gccgo world and you don't know the gc world, so\r\n>>> we're speaking different languages.\r\n>>>\r\n>>> Ian might need to translate.\r\n>>>\r\n>>\r\n>> In gccgo, after the gofrontend is moved to to libgo and compiled into an\r\n>> object directory, you can run the test suite with the command \"make\r\n>> check-go\". So my idea was to make a gccgoTestSite that points to the\r\n>> gccgo-objdir and run the builder with the \"buildCmd='make check-go'\". The\r\n>> current builder runs all.suffix or race.suffix if \"-race\" is specified in\r\n>> the goos-goarch. The output for the most part is similar, but where to run\r\n>> the buildCmd is different, so I thought this might be a useful abstraction.\r\n>>\r\n>>\r\n>>>\r\n>>>\r\n>>>> Noted on your point about TestSite. I originally had a NewTestSite\r\n>>>> function, but I omitted it since there is only one kind of TestSite until\r\n>>>> the GccGo support is added. Should I just make it private for now and then\r\n>>>> add the constructor function once it's relevant?\r\n>>>>\r\n>>>\r\n>>> I don't know what you need yet, so it's hard to say.\r\n>>>\r\n>>>\r\n>>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-07 01:07:46.284840",
			"approval": false
		},
		{
			"sender": "cmang@golang.org",
			"recipients": [
				"cmang@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"cmang@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-08-07 01:09:56.656030",
			"approval": false
		}
	],
	"owner_email": "cmang@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rpd",
	"subject": "code review 12571044: go.tools/dashboard/builder: move Builder testing detail...",
	"created": "2013-08-06 23:38:43.609960",
	"patchsets": [
		1,
		3001,
		3002,
		6001,
		9001
	],
	"modified": "2013-08-07 01:09:58.756260",
	"closed": true,
	"issue": 12571044
}