{
	"description": "encoding/json: ignore unexported fields in Unmarshal\n\nGo 1.0 behavior was to create an UnmarshalFieldError when a json value name matched an unexported field name. This error will no longer be created and the field will be skipped instead.\n\nFixes issue 4660.",
	"cc": [
		"adg@golang.org",
		"rsc@golang.org",
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-01-17 02:11:00.452190",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"adg@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/7139049/diff/13001/src/pkg/encoding/json/decode.go\nFile src/pkg/encoding/json/decode.go (right):\n\nhttps://codereview.appspot.com/7139049/diff/13001/src/pkg/encoding/json/decode.go#newcode109\nsrc/pkg/encoding/json/decode.go:109: // (Deprecated; kept for compatibility.)\nOn 2013/01/18 16:33:15, rsc wrote:\n> (No longer used; kept for compatibility.)\n\nDone.",
			"disapproval": false,
			"date": "2013-01-18 17:33:09.287050",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"adg@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nI didn't expect my little regression bug report to result in this much of a change, but I'm fine with it.  I found the old behavior too scary.\n\nIf we wanted to keep UnmarshalFieldError for pedagogical purposes, perhaps we only return it when the Unmarshal would otherwise decode no fields.\n\nSo a new user doing:\n\ntype T struct {\n    foo string\n}\n\nand trying to decode `{\"foo\": \"bar\"}` would get the error, but NOT a user trying to decode:\n\ntype T struct {\n    Name string `json:\"name\"`\n    foo  string\n}\n\n... trying to decode `{\"foo\": \"bar\", \"name\": \"Bob\"}`\n\nbecause in that case, some progress was made.\n\nI haven't thought through the negative consequences of that too much, though, and I imagine people could just read the docs or show up on the mailing list with questions.",
			"disapproval": false,
			"date": "2013-01-18 18:47:48.672970",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7139049/diff/5001/src/pkg/encoding/json/decode_test.go\nFile src/pkg/encoding/json/decode_test.go (right):\n\nhttps://codereview.appspot.com/7139049/diff/5001/src/pkg/encoding/json/decode_test.go#newcode1081\nsrc/pkg/encoding/json/decode_test.go:1081: t.Errorf(\"expected no error; got: %v\", err)\nreverse the error message:\n\n\"got error %v, expected nil\"\n\nhttps://codereview.appspot.com/7139049/diff/5001/src/pkg/encoding/json/decode_test.go#newcode1087\nsrc/pkg/encoding/json/decode_test.go:1087: t.Errorf(\"expected field error on m2; got: %v\", err)\nditto",
			"disapproval": false,
			"date": "2013-01-17 07:15:07.103600",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jan 18, 2013 at 3:13 PM, Andrew Gerrand <adg@golang.org> wrote:\r\n\r\n>\r\n> On 19 January 2013 06:12, Russ Cox <rsc@golang.org> wrote:\r\n>\r\n>> I don't want to special-case zero fields. It's too fussy.\r\n>\r\n>\r\n> Are you sure? I think it makes sense to give an error if the user provides\r\n> a type that is unusable by encoding/json (no exported fields or\r\n> UnmarshalJSON method).\r\n>\r\n\r\nOh, I hadn't even thought of that.  That's much better than what I was\r\nproposing.\r\n\r\nYes, if the user pass *T to Unmarshal but T is:\r\n\r\ntype T struct {\r\n   onlyLower string\r\n   etc           int\r\n}\r\n\r\n... there's no way it'll ever work.  That seems like a good place to teach.\r\n",
			"disapproval": false,
			"date": "2013-01-19 16:46:41.441960",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/7139049/diff/5001/src/pkg/encoding/json/decode_test.go\nFile src/pkg/encoding/json/decode_test.go (right):\n\nhttps://codereview.appspot.com/7139049/diff/5001/src/pkg/encoding/json/decode_test.go#newcode1081\nsrc/pkg/encoding/json/decode_test.go:1081: t.Errorf(\"expected no error; got: %v\", err)\nOn 2013/01/17 07:15:07, adg wrote:\n> reverse the error message:\n> \n> \"got error %v, expected nil\"\n\nDone.\n\nhttps://codereview.appspot.com/7139049/diff/5001/src/pkg/encoding/json/decode_test.go#newcode1087\nsrc/pkg/encoding/json/decode_test.go:1087: t.Errorf(\"expected field error on m2; got: %v\", err)\nOn 2013/01/17 07:15:07, adg wrote:\n> ditto\n\nDone.",
			"disapproval": false,
			"date": "2013-01-17 12:23:20.615650",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nThe code now ignores unexported fields completely as requested in the issue discussion.\n\nI left the UnmarshalFieldError and noted that it is deprecated in the comments since removing it could break existing code. Do you think that's the correct approach?\n\nThanks.",
			"disapproval": false,
			"date": "2013-01-18 02:24:36.253480",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"adg@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOkay I guess. Would like to hear from Brad too.\n\nhttps://codereview.appspot.com/7139049/diff/13001/src/pkg/encoding/json/decode.go\nFile src/pkg/encoding/json/decode.go (right):\n\nhttps://codereview.appspot.com/7139049/diff/13001/src/pkg/encoding/json/decode.go#newcode109\nsrc/pkg/encoding/json/decode.go:109: // (Deprecated; kept for compatibility.)\n(No longer used; kept for compatibility.)",
			"disapproval": false,
			"date": "2013-01-18 16:33:14.909970",
			"approval": true
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"adg@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/18 18:47:48, bradfitz wrote:\n> LGTM\n> \n> I didn't expect my little regression bug report to result in this much of a\n> change, but I'm fine with it.  I found the old behavior too scary.\n> \n> If we wanted to keep UnmarshalFieldError for pedagogical purposes, perhaps we\n> only return it when the Unmarshal would otherwise decode no fields.\n> \n> So a new user doing:\n> \n> type T struct {\n>     foo string\n> }\n> \n> and trying to decode `{\"foo\": \"bar\"}` would get the error, but NOT a user trying\n> to decode:\n> \n> type T struct {\n>     Name string `json:\"name\"`\n>     foo  string\n> }\n> \n> ... trying to decode `{\"foo\": \"bar\", \"name\": \"Bob\"}`\n> \n> because in that case, some progress was made.\n> \n> I haven't thought through the negative consequences of that too much, though,\n> and I imagine people could just read the docs or show up on the mailing list\n> with questions.\n\nI did notice that there is a somewhat related issue on documentation: 4664. Seems like Unmarshal field mapping is a common area of confusion. Maybe along with that issue we can document that non-exported fields are always ignored?",
			"disapproval": false,
			"date": "2013-01-18 19:06:39.588980",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't want to special-case zero fields. It's too fussy.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-01-18 19:12:24.025870",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 19 January 2013 06:06, <rickarnoldjr@gmail.com> wrote:\r\n\r\n> Maybe along with that issue we can document that non-exported fields are\r\n> always ignored?\r\n>\r\n\r\nYes, the docs need updating.\r\n",
			"disapproval": false,
			"date": "2013-01-18 23:12:51.560050",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 19 January 2013 06:12, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> I don't want to special-case zero fields. It's too fussy.\r\n\r\n\r\nAre you sure? I think it makes sense to give an error if the user provides\r\na type that is unusable by encoding/json (no exported fields or\r\nUnmarshalJSON method).\r\n",
			"disapproval": false,
			"date": "2013-01-18 23:13:38.723560",
			"approval": false
		},
		{
			"sender": "rickarnoldjr@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Russ, are you ok with this approach?\r\n\r\nThanks.\r\n\r\n\r\nOn Saturday, January 19, 2013 11:46:39 AM UTC-5, Brad Fitzpatrick wrote:\r\n>\r\n>\r\n>\r\n> On Fri, Jan 18, 2013 at 3:13 PM, Andrew Gerrand <a...@golang.org<javascript:>\r\n> > wrote:\r\n>\r\n>>\r\n>> On 19 January 2013 06:12, Russ Cox <r...@golang.org <javascript:>> wrote:\r\n>>\r\n>>> I don't want to special-case zero fields. It's too fussy.\r\n>>\r\n>>\r\n>> Are you sure? I think it makes sense to give an error if the user \r\n>> provides a type that is unusable by encoding/json (no exported fields or \r\n>> UnmarshalJSON method).\r\n>>\r\n>\r\n> Oh, I hadn't even thought of that.  That's much better than what I was \r\n> proposing.\r\n>\r\n> Yes, if the user pass *T to Unmarshal but T is:\r\n>\r\n> type T struct {\r\n>    onlyLower string\r\n>    etc           int\r\n> }\r\n>\r\n> ... there's no way it'll ever work.  That seems like a good place to teach.\r\n>  \r\n>\r\n>",
			"disapproval": false,
			"date": "2013-01-21 21:27:36.591370",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"adg@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM as is.\n\nI don't want to introduce special cases. The behavior of\n\ntype T struct {\n   X int \n   Y int\n   Z int\n   w int\n}\n\nshould not change if you remove X, Y, or Z individually, and it does not. If you remove all three, it should not change either.",
			"disapproval": false,
			"date": "2013-01-22 22:48:31.616410",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rickarnoldjr@gmail.com",
				"adg@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=9439d60e0f96 ***\n\nencoding/json: ignore unexported fields in Unmarshal\n\nGo 1.0 behavior was to create an UnmarshalFieldError when a json value name matched an unexported field name. This error will no longer be created and the field will be skipped instead.\n\nFixes issue 4660.\n\nR=adg, rsc, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/7139049\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2013-01-22 22:49:13.536060",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jan 22, 2013 at 2:48 PM, <rsc@golang.org> wrote:\r\n\r\n> LGTM as is.\r\n>\r\n> I don't want to introduce special cases. The behavior of\r\n>\r\n> type T struct {\r\n>    X int\r\n>    Y int\r\n>    Z int\r\n>    w int\r\n> }\r\n>\r\n> should not change if you remove X, Y, or Z individually, and it does\r\n> not. If you remove all three, it should not change either.\r\n>\r\n\r\nI guess.\r\n\r\nBut if there are no exported fields, why are they unmarshalling in the\r\nfirst place?\r\n\r\nI actually don't really care much either way.\r\n",
			"disapproval": false,
			"date": "2013-01-22 23:13:55.940340",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 23 January 2013 09:48, <rsc@golang.org> wrote:\r\n\r\n> I don't want to introduce special cases. The behavior of\r\n>\r\n> type T struct {\r\n>    X int\r\n>    Y int\r\n>    Z int\r\n>    w int\r\n> }\r\n>\r\n> should not change if you remove X, Y, or Z individually, and it does\r\n> not. If you remove all three, it should not change either.\r\n>\r\n\r\nI understand the desire not to introduce special cases.\r\n\r\nHowever, calling unmarshal on a data structure that can never receive any\r\nof the data seems like it is always a mistake to me. And it's a mistake\r\nthat pretty much only newbies will make.\r\n\r\nI'm not averse to improving this with better docs though.\r\n",
			"disapproval": false,
			"date": "2013-01-23 01:11:22.393140",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "If you do it for a struct passed directly into Unmarshal/Marshal - not for\r\nany of its subfields, and not if it has methods - then that's probably\r\nokay. What I want to avoid is bombs in the code that only go off if you\r\nhappen to get to the right place in a complex data structure.\r\n",
			"disapproval": false,
			"date": "2013-01-23 02:51:14.364640",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn 23 January 2013 13:51, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> If you do it for a struct passed directly into Unmarshal/Marshal - not for\r\n> any of its subfields, and not if it has methods - then that's probably\r\n> okay. What I want to avoid is bombs in the code that only go off if you\r\n> happen to get to the right place in a complex data structure.\r\n\r\n\r\nGood call. Let's do this in a follow up CL, if at all.\r\n",
			"disapproval": false,
			"date": "2013-01-23 03:01:16.726080",
			"approval": true
		}
	],
	"owner_email": "rickarnoldjr@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "rick",
	"subject": "code review 7139049: encoding/json: avoid error when decoding unexported fie...",
	"created": "2013-01-17 02:10:10.060390",
	"patchsets": [
		1,
		2001,
		5001,
		8002,
		13001,
		5002
	],
	"modified": "2013-01-23 02:42:54.111400",
	"closed": true,
	"issue": 7139049
}