{
	"description": "test/bench/go1: first draft of Go 1 benchmark suite\n\nI have included a few important microbenchmarks,\nbut the overall intent is to have mostly end-to-end\nbenchmarks timing real world operations.\n\nThe jsondata.go file is a summary of agl's\nactivity in various open source repositories.\nIt gets used as test data for many of the benchmarks.\n\nEverything links into one binary (even the test data)\nso that it is easy to run the benchmarks on many\ncomputers: there is just one file to copy around.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@google.com",
		"bradfitz@golang.org",
		"adg@golang.org",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Dec 13, 2011, at 3:14 PM, Russ Cox wrote:\n\n> i can make it a 0.5 MB file by gzipping it and then\n> using that as the string data.  is that better?\n\nit's 1.5MB better, but i was thinking more about generating it on demand. most people won't want it.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-12-13 23:17:27.220274",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Dec 13, 2011, at 3:10 PM, Russ Cox wrote:\n\n> code review refused to upload jsondata.go. it looks like\n> \n> ---\n> // Input for json benchmark.\n> \n> package main\n> \n> var jsonbytes = []byte(jsonstr)\n> var jsonstr = `...`\n> ---\n> \n> except that it is 2 MB long.\n\nwhy put a 2MB file into the repo? that's unnecessary.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-12-13 23:11:58.849665",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Dec 13, 2011 at 18:17, Rob 'Commander' Pike <r@google.com> wrote:\n> it's 1.5MB better, but i was thinking more about generating it on demand. most people won't want it.\n\ni was trying to use real data instead of synthesized data,\nbut i will look into synthesizing something similar.\n",
			"disapproval": false,
			"date": "2011-12-13 23:18:34.236002",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "i can make it a 0.5 MB file by gzipping it and then\nusing that as the string data.  is that better?\n",
			"disapproval": false,
			"date": "2011-12-13 23:14:58.767642",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"bradfitz@golang.org",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5484071/diff/2001/test/bench/go1/benchmark.go\nFile test/bench/go1/benchmark.go (right):\n\nhttp://codereview.appspot.com/5484071/diff/2001/test/bench/go1/benchmark.go#newcode1\ntest/bench/go1/benchmark.go:1: package main\nI think you left this file in by accident.",
			"disapproval": false,
			"date": "2011-12-14 00:19:42.759690",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nI stopped trying to invent a new benchmark framework.\nI also reduced the json data to 200 kB of source by\nbzip2+base64.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-14 03:35:28.493550",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Dec 13, 2011 at 3:18 PM, Russ Cox <rsc@golang.org> wrote:\n\n> On Tue, Dec 13, 2011 at 18:17, Rob 'Commander' Pike <r@google.com> wrote:\n> > it's 1.5MB better, but i was thinking more about generating it on\n> demand. most people won't want it.\n>\n> i was trying to use real data instead of synthesized data,\n> but i will look into synthesizing something similar.\n>\n\ncould it slurp a 2MB file from App Engine into /tmp?\n",
			"disapproval": false,
			"date": "2011-12-13 23:25:41.220989",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"bradfitz@golang.org",
				"adg@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "the CL mentions jsondata.go but there's no such file.\n\nhttp://codereview.appspot.com/5484071/diff/5012/src/run.bash\nFile src/run.bash (right):\n\nhttp://codereview.appspot.com/5484071/diff/5012/src/run.bash#newcode95\nsrc/run.bash:95: for i in ../misc/dashboard/builder ../misc/goplay ../test/bench/go1\nno running? maybe --test.short? for a later CL?\n\nhttp://codereview.appspot.com/5484071/diff/5012/test/bench/go1/fannkuch_test.go\nFile test/bench/go1/fannkuch_test.go (right):\n\nhttp://codereview.appspot.com/5484071/diff/5012/test/bench/go1/fannkuch_test.go#newcode36\ntest/bench/go1/fannkuch_test.go:36: */\ndelete?\n\nhttp://codereview.appspot.com/5484071/diff/5012/test/bench/go1/fasta_test.go\nFile test/bench/go1/fasta_test.go (right):\n\nhttp://codereview.appspot.com/5484071/diff/5012/test/bench/go1/fasta_test.go#newcode46\ntest/bench/go1/fasta_test.go:46: \"AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA\")\nunfortunate formatting\n\nhttp://codereview.appspot.com/5484071/diff/5012/test/bench/go1/gob_test.go\nFile test/bench/go1/gob_test.go (right):\n\nhttp://codereview.appspot.com/5484071/diff/5012/test/bench/go1/gob_test.go#newcode78\ntest/bench/go1/gob_test.go:78: gob.NewEncoder(ioutil.Discard).Encode(&gobdata)\ncheck error return from Encode? you do for Decode\n\nhttp://codereview.appspot.com/5484071/diff/5012/test/bench/go1/jsondata_test.go\nFile test/bench/go1/jsondata_test.go (right):\n\nhttp://codereview.appspot.com/5484071/diff/5012/test/bench/go1/jsondata_test.go#newcode5\ntest/bench/go1/jsondata_test.go:5: var jsonbz2_base64 = \"QlpoOTFBWSZTWZ0H0LkG0bxfgFH8UAf/8D////q////6YSvJveAAAAAH3ddt7gAN\" +\ninclude a comment showing how this was created and how to decode it.\n\nhttp://codereview.appspot.com/5484071/diff/5012/test/bench/go1/template_test.go\nFile test/bench/go1/template_test.go (right):\n\nhttp://codereview.appspot.com/5484071/diff/5012/test/bench/go1/template_test.go#newcode17\ntest/bench/go1/template_test.go:17: const tmplText = `{\"tree\":{{template \"node\" .Tree}},\"username\":\"{{.Username}}\"}{{define \"node\"}}{\"name\":\"{{.Name}}\",\"kids\":[{{range $i, $k := .Kids}}{{if $i}},{{end}}{{template \"node\" $k}}{{end}}],\"cl_weight\":{{.CLWeight}},\"touches\":{{.Touches}},\"min_t\":{{.MinT}},\"max_t\":{{.MaxT}},\"mean_t\":{{.MeanT}}}{{end}}`\nis there a reason not to lay this out more neatly?",
			"disapproval": false,
			"date": "2011-12-14 03:53:48.676712",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-13 23:08:09.854914",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"bradfitz@golang.org",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nMuch better!",
			"disapproval": false,
			"date": "2011-12-14 03:47:18.685194",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "code review refused to upload jsondata.go. it looks like\n\n---\n// Input for json benchmark.\n\npackage main\n\nvar jsonbytes = []byte(jsonstr)\nvar jsonstr = `...`\n---\n\nexcept that it is 2 MB long.\n",
			"disapproval": false,
			"date": "2011-12-13 23:10:12.430458",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"bradfitz@golang.org",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5484071/diff/2001/test/bench/go1/main.go\nFile test/bench/go1/main.go (right):\n\nhttp://codereview.appspot.com/5484071/diff/2001/test/bench/go1/main.go#newcode55\ntest/bench/go1/main.go:55: re := regexp.MustCompile(pat)\nmore friendly to use Compile and check the error to present it nicely\nMustCompile should check for programmer error, not user error (even if the user in this case is a programmer ;-)\n\nhttp://codereview.appspot.com/5484071/diff/2001/test/bench/go1/main.go#newcode61\ntest/bench/go1/main.go:61: runtime.GC()\nare we going to see high variance in gc-heavy benchmarks when changes cause the gc to happen either before or after the benchmark function? should runtime.GC happen after b.Fn and inside t0 and t1?\n\nhttp://codereview.appspot.com/5484071/diff/2001/test/bench/go1/main.go#newcode102\ntest/bench/go1/main.go:102: func used(x interface{}) {\ncomment please",
			"disapproval": false,
			"date": "2011-12-14 00:25:07.868504",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> http://codereview.appspot.com/5484071/diff/5012/src/run.bash#newcode95\n> src/run.bash:95: for i in ../misc/dashboard/builder ../misc/goplay\n> ../test/bench/go1\n> no running? maybe --test.short? for a later CL?\n\nDone.\n\n> http://codereview.appspot.com/5484071/diff/5012/test/bench/go1/fannkuch_test.go#newcode36\n> test/bench/go1/fannkuch_test.go:36: */\n> delete?\n\nDone.\n\n> http://codereview.appspot.com/5484071/diff/5012/test/bench/go1/fasta_test.go\n> File test/bench/go1/fasta_test.go (right):\n>\n> http://codereview.appspot.com/5484071/diff/5012/test/bench/go1/fasta_test.go#newcode46\n> test/bench/go1/fasta_test.go:46: \"AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA\")\n> unfortunate formatting\n\nIndeed.  I thought I could add a , and then put the ) on a new line\nbut I cannot.  This may be a spec or compiler bug - because some\nconversions would allow this and others do not - but not worth\nfixing right now.  I created issue 2568 for after Go 1.\n\n> http://codereview.appspot.com/5484071/diff/5012/test/bench/go1/gob_test.go\n> File test/bench/go1/gob_test.go (right):\n>\n> http://codereview.appspot.com/5484071/diff/5012/test/bench/go1/gob_test.go#newcode78\n> test/bench/go1/gob_test.go:78:\n> gob.NewEncoder(ioutil.Discard).Encode(&gobdata)\n> check error return from Encode? you do for Decode\n\nDone.\n\n> http://codereview.appspot.com/5484071/diff/5012/test/bench/go1/jsondata_test.go\n> File test/bench/go1/jsondata_test.go (right):\n>\n> http://codereview.appspot.com/5484071/diff/5012/test/bench/go1/jsondata_test.go#newcode5\n> test/bench/go1/jsondata_test.go:5: var jsonbz2_base64 =\n> \"QlpoOTFBWSZTWZ0H0LkG0bxfgFH8UAf/8D////q////6YSvJveAAAAAH3ddt7gAN\" +\n> include a comment showing how this was created and how to decode it.\n\nDone.\n\n> http://codereview.appspot.com/5484071/diff/5012/test/bench/go1/template_test.go\n> File test/bench/go1/template_test.go (right):\n>\n> http://codereview.appspot.com/5484071/diff/5012/test/bench/go1/template_test.go#newcode17\n> test/bench/go1/template_test.go:17: const tmplText = `{\"tree\":{{template\n> \"node\" .Tree}},\"username\":\"{{.Username}}\"}{{define\n> \"node\"}}{\"name\":\"{{.Name}}\",\"kids\":[{{range $i, $k := .Kids}}{{if\n> $i}},{{end}}{{template \"node\"\n> $k}}{{end}}],\"cl_weight\":{{.CLWeight}},\"touches\":{{.Touches}},\"min_t\":{{.MinT}},\"max_t\":{{.MaxT}},\"mean_t\":{{.MeanT}}}{{end}}`\n> is there a reason not to lay this out more neatly?\n\nYes: I'm trying to match the output from json.Marshal exactly\nso that I can test that template generated the right output.\nCommented.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-15 16:36:02.206238",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Dec 15, 2011 at 12:22,  <r@golang.org> wrote:\n> i suggest you look at the tree template test in\n> text/template/exec_test.go and squeeze the template definition (not\n> output) in a similar way, so it can be more readable, but what's here is\n> fine with the comment.\n\nmuch nicer.  done.\n",
			"disapproval": false,
			"date": "2011-12-15 17:32:51.781712",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"bradfitz@golang.org",
				"adg@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5484071/diff/8001/test/bench/go1/jsondata_test.go\nFile test/bench/go1/jsondata_test.go (right):\n\nhttp://codereview.appspot.com/5484071/diff/8001/test/bench/go1/jsondata_test.go#newcode1\ntest/bench/go1/jsondata_test.go:1: // Input for json benchmark.\ncopyright?\n\nhttp://codereview.appspot.com/5484071/diff/8001/test/bench/go1/jsondata_test.go#newcode1\ntest/bench/go1/jsondata_test.go:1: // Input for json benchmark.\ns/json/JSON/\n\nhttp://codereview.appspot.com/5484071/diff/8001/test/bench/go1/jsondata_test.go#newcode3\ntest/bench/go1/jsondata_test.go:3: // about open source revision history, then compressing with bzip2 -9,\ns/json/JSON/\n\nhttp://codereview.appspot.com/5484071/diff/8001/test/bench/go1/jsondata_test.go#newcode7\ntest/bench/go1/jsondata_test.go:7: // a standalone binary that can be copied easily from machine to\ns/standalone/stand-alone/\n\nhttp://codereview.appspot.com/5484071/diff/8001/test/bench/go1/template_test.go\nFile test/bench/go1/template_test.go (right):\n\nhttp://codereview.appspot.com/5484071/diff/8001/test/bench/go1/template_test.go#newcode18\ntest/bench/go1/template_test.go:18: // output to json.Marshal, making it easy to double-check.\ni suggest you look at the tree template test in text/template/exec_test.go and squeeze the template definition (not output) in a similar way, so it can be more readable, but what's here is fine with the comment.",
			"disapproval": false,
			"date": "2011-12-15 17:22:07.110345",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"bradfitz@golang.org",
				"adg@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=5ec032f55cff ***\n\ntest/bench/go1: first draft of Go 1 benchmark suite\n\nI have included a few important microbenchmarks,\nbut the overall intent is to have mostly end-to-end\nbenchmarks timing real world operations.\n\nThe jsondata.go file is a summary of agl's\nactivity in various open source repositories.\nIt gets used as test data for many of the benchmarks.\n\nEverything links into one binary (even the test data)\nso that it is easy to run the benchmarks on many\ncomputers: there is just one file to copy around.\n\nR=golang-dev, r, bradfitz, adg, r\nCC=golang-dev\nhttp://codereview.appspot.com/5484071",
			"disapproval": false,
			"date": "2011-12-15 17:33:05.453449",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5484071: test/bench/go1: first draft of Go 1 benchmark suite",
	"created": "2011-12-13 23:06:08.874979",
	"patchsets": [
		1,
		2001,
		5007,
		6004,
		5012,
		8001,
		10003
	],
	"modified": "2011-12-15 17:33:06.725490",
	"closed": true,
	"issue": 5484071
}