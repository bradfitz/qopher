{
	"description": "cmd/dist: don't fail when Mercurial is a batch file on Windows\n\nOn windows Mercurial installed with easy_install typically creates\nan hg.bat batch file in Python Scripts directory, which cannot be used\nwith CreateProcess unless full path is specified. Work around by\nlaunching hg via cmd.exe /c.\n\nAdditionally, fix a rare FormatMessageW crash.\n\nFixes issue 3093.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org",
		"alex.brainman@gmail.com",
		"aram@mgk.ro",
		"jdpoirier@gmail.com",
		"mattn.jp@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "We can look into this, but only after Go 1.\nThe Go 1 release branch will contain a VERSION file,\nso this won't matter nearly as much anyway.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-03-27 18:14:18.053254",
			"approval": false
		},
		{
			"sender": "snaury@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-03-27 17:29:13.028303",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please, add \"Fixes issue 3093.\" to CL description.\n\nAlex\n\nhttp://codereview.appspot.com/5937043/diff/2001/src/cmd/dist/windows.c\nFile src/cmd/dist/windows.c (right):\n\nhttp://codereview.appspot.com/5937043/diff/2001/src/cmd/dist/windows.c#newcode289\nsrc/cmd/dist/windows.c:289: if(i == 0 && streq(q, \"hg\")) {\nI have one problem with your approach. How do we deal with hg exit code. We can see when hg.exe fails by looking at its exit code. Would cmd.exe return \"failed\" exit code when Mercurial fails when we use hg.bat?\n\nhttp://codereview.appspot.com/5937043/diff/2001/src/cmd/dist/windows.c#newcode292\nsrc/cmd/dist/windows.c:292: xgetenv(&comspec, \"COMSPEC\");\nI do not think you should worry about COMSPEC environment variable. We know\n\ncmd.exe /c hg\n\nwill work. Do we know if\n\n%COMSPEC% /c hg\n\nwill too?\n\nI think we should assume that cmd.exe is our command interpreter. When it fails, we will deal with that.",
			"disapproval": false,
			"date": "2012-03-28 01:39:43.455872",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Let's wait on the review discussion until after Go 1.  Thanks.\n",
			"disapproval": false,
			"date": "2012-03-28 01:45:43.452156",
			"approval": false
		},
		{
			"sender": "snaury@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, alex.brainman@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-03-29 19:12:21.270793",
			"approval": false
		},
		{
			"sender": "snaury@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/03/28 01:39:43, brainman wrote:\n> Please, add \"Fixes issue 3093.\" to CL description.\n\nDone\n\n> I have one problem with your approach. How do we deal with hg exit code. We can\n> see when hg.exe fails by looking at its exit code. Would cmd.exe return \"failed\"\n> exit code when Mercurial fails when we use hg.bat?\n\nYes, cmd.exe passes the response back to its caller.\n\n> I do not think you should worry about COMSPEC environment variable. We know\n> \n> cmd.exe /c hg\n> \n> will work. Do we know if\n> \n> %COMSPEC% /c hg\n> \n> will too?\n\nWell, I think it is generally advisable to use COMSPEC. Although unlikely, user might not have cmd.exe on the path, but %COMSPEC% should always be correct. On Windows it's similar to what's SHELL is on unix, where it might not always be a good idea to hard-code /bin/bash or /bin/sh.\n\n> I think we should assume that cmd.exe is our command interpreter. When it fails,\n> we will deal with that.\n\nWell, if you really insist I could leave just cmd.exe, I only did it this way for portability and correctness.",
			"disapproval": false,
			"date": "2012-03-29 19:16:18.747688",
			"approval": false
		},
		{
			"sender": "aram@mgk.ro",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"aram@mgk.ro",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Well, I think it is generally advisable to use COMSPEC. Although unlikely, user\n> might not have cmd.exe on the path, but %COMSPEC% should always be correct.\n\n%COMSPEC% should be fine. The command interpreter was changed from command.com to cmd.exe during Windows' lifetime. While it's unlikely to change again it's more about honoring user's preferences, I know a few folks who run alternate, but compatible shells.",
			"disapproval": false,
			"date": "2012-03-29 19:30:59.811661",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"aram@mgk.ro",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/03/29 19:16:18, snaury wrote:\n> ...\n> > I have one problem with your approach. How do we deal with hg exit code. We\n> can\n> > see when hg.exe fails by looking at its exit code. Would cmd.exe return\n> \"failed\"\n> > exit code when Mercurial fails when we use hg.bat?\n> \n> Yes, cmd.exe passes the response back to its caller.\n> \n\nI am not convinced. Could you, please, tell me your \"Mercurial with hg.bat\" setup. I would like to recreate the issue, you are seeing, myself. I would like to see if your change will handle situation where Mercurial fails for one reason or the other. Thank you.\n\n> > I do not think you should worry about COMSPEC environment variable. We know\n> > \n> > cmd.exe /c hg\n> > \n> > will work. Do we know if\n> > \n> > %COMSPEC% /c hg\n> > \n> > will too?\n> \n> Well, I think it is generally advisable to use COMSPEC. ...\n\nI have no problem with us using different command interpreter, the one pointed by COMSPEC. I am concerned that it might have different (from cmd.exe) arguments for executing batch files. We do know what \"cmd.exe /c hg\" does. But we can't be sure that \"shell.exe /c hg\" will to, if COMPSEC=shell.exe. Can we? How can you be sure if that \"other shell program\" even has \"/c\" option, if you do not know what this program is? How can you be sure that \"shell.exe /c hg\" does not delete all files on c:\\, instead of running mercurial? :-)\n\nAlex",
			"disapproval": false,
			"date": "2012-03-30 01:29:26.107139",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"aram@mgk.ro",
				"jdpoirier@gmail.com",
				"mattn.jp@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=9a55b03991e3 ***\n\ncmd/dist: don't fail when Mercurial is a batch file on Windows\n\nOn windows Mercurial installed with easy_install typically creates\nan hg.bat batch file in Python Scripts directory, which cannot be used\nwith CreateProcess unless full path is specified. Work around by\nlaunching hg via cmd.exe /c.\n\nAdditionally, fix a rare FormatMessageW crash.\n\nFixes issue 3093.\n\nR=golang-dev, rsc, alex.brainman, aram, jdpoirier, mattn.jp\nCC=golang-dev\nhttp://codereview.appspot.com/5937043\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2012-04-09 19:40:04.673187",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Mar 29, 2012 at 8:29 PM,  <alex.brainman@gmail.com> wrote:\n> On 2012/03/29 19:16:18, snaury wrote:\n>> > cmd.exe /c hg\n>> >\n>> > will work. Do we know if\n>> >\n>> > %COMSPEC% /c hg\n>> >\n>> > will too?\n>\n>\n>> Well, I think it is generally advisable to use COMSPEC. ...\n>\n>\n> I have no problem with us using different command interpreter, the one\n> pointed by COMSPEC. I am concerned that it might have different (from\n> cmd.exe) arguments for executing batch files. We do know what \"cmd.exe\n> /c hg\" does. But we can't be sure that \"shell.exe /c hg\" will to, if\n> COMPSEC=shell.exe. Can we? How can you be sure if that \"other shell\n> program\" even has \"/c\" option, if you do not know what this program is?\n> How can you be sure that \"shell.exe /c hg\" does not delete all files on\n> c:\\, instead of running mercurial? :-)\n>\n\nOn a healthy system, ComSpec should return cmd.exe with the full path\nto the system folder it resides in. AFAIK, true from Windows 2K and\nup.\n\nIf ComSpec returns shell.exe, it's possible that said system is\ninfected with spyware\\trojan\\virus\\malware.\n\n-joe\n",
			"disapproval": false,
			"date": "2012-03-30 03:14:27.805748",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Oh, interesting. Might be some artifact to allow parent interpreters\n> know exit code of whatever was executed, instead of batch file itself.\n> Unfortunately, the batch file itself always succeeds. You can see it by\n> e.g. trying:\n\nYes, I know. I did explain about this in the thread.\nI don't think patching for hg.bat don't solve problem fundamentally.\n\n> Your patch was about working around a bug in third-party software, I\n> would be strongly against that, it's Selenic's job to fix this, perhaps\n> all that's needed is a proper bug report on their tracker.\n> My patch is about a fix for a bug in *go*, where dist fails to execute\n> hg.bat. Even if hg.bat worked perfectly, dist would still fail to\n> execute it. There's a difference between \"go tip cannot be built on\n> windows\" vs \"tomorrow selenic might fix this bug and everything would be\n> perfect\".\n\nI'm not talking \"My CL is better\". :)\nI'm talking that go must handle exit code. To handle exit code of batch \nfile, we should call \"cmd /c call\".\n\n\n",
			"disapproval": false,
			"date": "2012-03-31 14:18:25.474363",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"aram@mgk.ro",
				"jdpoirier@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/03/30 06:04:54, snaury wrote:\n> \n> ... Exactly the same behavior happens with\n> go get, ...\n\nI am under impression that \"go get ...\" will fail, if it is calling hg.exe and hg.exe fails.\n\nAre you saying, that if user do not have hg.exe installed, but uses hg.bat instead, then \"go get ...\" will succeed, while Mercurial command inside hg.bat fails? I am prepared to believe that. If that is the case, perhaps we should do something to prevent this inconsistency. Maybe show some warning about us using \"batch\" file, maybe refuse to execute it altogether.\n\nAlex",
			"disapproval": false,
			"date": "2012-04-01 04:26:35.033631",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"aram@mgk.ro",
				"jdpoirier@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5937043/diff/2001/src/cmd/dist/windows.c\nFile src/cmd/dist/windows.c (right):\n\nhttp://codereview.appspot.com/5937043/diff/2001/src/cmd/dist/windows.c#newcode297\nsrc/cmd/dist/windows.c:297: bwritestr(&cmd, \" /c \");\nShoud be \" /c call \". If \"cmd /c hg\" can't get exit code if \"hg\" is \"hg.bat\" in your PATH.\n\"cmd /c call\" works with hg.exe / hg.bat both.",
			"disapproval": false,
			"date": "2012-03-30 04:58:19.686122",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ah, typo.\n\n> Shoud be \" /c call \". \"cmd /c hg\" can't get exit code if \"hg\" is \"hg.bat\" \nin your PATH.\n\n\nOn Friday, March 30, 2012 1:58:19 PM UTC+9, mattn wrote:\n>\n>\n> http://codereview.appspot.com/5937043/diff/2001/src/cmd/dist/windows.c\n> File src/cmd/dist/windows.c (right):\n>\n>\n> http://codereview.appspot.com/5937043/diff/2001/src/cmd/dist/windows.c#newcode297\n> src/cmd/dist/windows.c:297: bwritestr(&cmd, \" /c \");\n> Shoud be \" /c call \". If \"cmd /c hg\" can't get exit code if \"hg\" is\n> \"hg.bat\" in your PATH.\n> \"cmd /c call\" works with hg.exe / hg.bat both.\n>\n> http://codereview.appspot.com/5937043/\n>\n>",
			"disapproval": false,
			"date": "2012-03-30 04:59:30.874675",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"aram@mgk.ro",
				"jdpoirier@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThank you.\n\nLeaving for Russ.\n\nAlex",
			"disapproval": false,
			"date": "2012-04-03 01:18:54.569302",
			"approval": true
		},
		{
			"sender": "snaury@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"aram@mgk.ro",
				"jdpoirier@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/03/30 01:29:26, brainman wrote:\n> I am not convinced. Could you, please, tell me your \"Mercurial with hg.bat\"\n> setup. I would like to recreate the issue, you are seeing, myself. I would like\n> to see if your change will handle situation where Mercurial fails for one reason\n> or the other. Thank you.\n\nAh, sorry. I just checked and it does not. But that has nothing to do with cmd.exe, it's the fault of Mercurial, because *hg.bat* always succeeds (they don't bother passing errors back from python).\n\nHowever, if I make hg.exe then cmd.exe /c hg does return non-zero exit status when mercurial fails.\n\n> I have no problem with us using different command interpreter, the one pointed\n> by COMSPEC. I am concerned that it might have different (from cmd.exe) arguments\n> for executing batch files. We do know what \"cmd.exe /c hg\" does. But we can't be\n> sure that \"shell.exe /c hg\" will to, if COMPSEC=shell.exe. Can we? How can you\n> be sure if that \"other shell program\" even has \"/c\" option, if you do not know\n> what this program is? How can you be sure that \"shell.exe /c hg\" does not delete\n> all files on c:\\, instead of running mercurial? :-)\n\nBut then everything would be breaking on a system like that, because when you specify COMSPEC on Windows, it's expected to be compatible. It's also used by the standard runtime, and recommended on msdn, see:\n\nhttp://msdn.microsoft.com/en-us/library/277bwbdz.aspx\nhttp://msdn.microsoft.com/en-us/library/ms404706.aspx\n\nThe advantage of COMSPEC is also that it is a full path to cmd.exe, and will always execute the right one, instead of some D:\\tools\\cmd.exe that happened to be in the PATH before system32.",
			"disapproval": false,
			"date": "2012-03-30 05:33:41.851639",
			"approval": false
		},
		{
			"sender": "snaury@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"aram@mgk.ro",
				"jdpoirier@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Btw, hg.bat can be easily fixed by adding:\n\nif errorlevel 1 %COMSPEC% /c exit /b %errorlevel%\n\nAs the very last line.",
			"disapproval": false,
			"date": "2012-03-30 06:13:37.512510",
			"approval": false
		},
		{
			"sender": "snaury@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"aram@mgk.ro",
				"jdpoirier@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/03/30 06:57:44, mattn wrote:\n> This is similar that I discused in golang-dev.\n> \n> https://groups.google.com/d/topic/golang-dev/ujtLlrp8e_c/discussion\n\nYour patch was about working around a bug in third-party software, I would be strongly against that, it's Selenic's job to fix this, perhaps all that's needed is a proper bug report on their tracker.\n\nMy patch is about a fix for a bug in *go*, where dist fails to execute hg.bat. Even if hg.bat worked perfectly, dist would still fail to execute it. There's a difference between \"go tip cannot be built on windows\" vs \"tomorrow selenic might fix this bug and everything would be perfect\".",
			"disapproval": false,
			"date": "2012-03-30 20:49:44.490633",
			"approval": false
		},
		{
			"sender": "snaury@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"aram@mgk.ro",
				"jdpoirier@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/03/31 14:18:25, mattn wrote:\n> I'm talking that go must handle exit code. To handle exit code of batch \n> file, we should call \"cmd /c call\".\n\nNo, because in that case you do another thing entirely: you fool cmd.exe into thinking that the batch file is called from another batch file and errorlevel needs to propagate. Yes, sure, it would work with hg.bat in this case, because python is the last thing it executes that changes errorlevel (and it just happens that endlocal does not). But it's a wrong concept on, because batch file *does not* fail. Unlike bash, which returns exit code of the last invocation, it's a job of batch file writer to exit with an appropriate exit code. Unfortunately people rarely do that (and cmd.exe, especially on WinXP, has horrible and ancients bugs/quirks).\n\nUsing \"cmd.exe /c call\" would be counter productive. While dist would start seeing \"errors\", os.StartProcess consequently exec.Command do not use cmd.exe or COMSPEC at all, instead searching PATH for a suitable PATHEXT file and using it as a first parameter. That invocation does not use \"/c call\".\n\nI'm thinking about reworking this patch by porting LookPath from package os to C so that it's done uniformly by both dist and the rest of go, then I hope this would finally stop being about cmd.exe and hg.bat bugs.",
			"disapproval": false,
			"date": "2012-03-31 14:47:05.186503",
			"approval": false
		},
		{
			"sender": "snaury@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"aram@mgk.ro",
				"jdpoirier@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/03/30 04:59:30, mattn wrote:\n> Shoud be \" /c call \". \"cmd /c hg\" can't get exit code if \"hg\" is \"hg.bat\" \n> in your PATH.\n\nOh, interesting. Might be some artifact to allow parent interpreters know exit code of whatever was executed, instead of batch file itself. Unfortunately, the batch file itself always succeeds. You can see it by e.g. trying:\n\ncmd := exec.Cmd(\"hg\", \"should-be-an-error\")\npanic(cmd.Run())\n\nYou will see that since hg is a batch file, it will always succeed.",
			"disapproval": false,
			"date": "2012-03-30 05:39:14.058498",
			"approval": false
		},
		{
			"sender": "snaury@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"aram@mgk.ro",
				"jdpoirier@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/03/30 05:33:41, snaury wrote:\n> http://msdn.microsoft.com/en-us/library/277bwbdz.aspx\n> http://msdn.microsoft.com/en-us/library/ms404706.aspx\n\nHmm, but then CreateProcess recommends cmd.exe. Ok then, I'm gonna cave in.",
			"disapproval": false,
			"date": "2012-03-30 05:51:41.235413",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"aram@mgk.ro",
				"jdpoirier@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/03/30 05:33:41, snaury wrote:\n> \n> ... I just checked and it does not. ...\n\nI think it is big problem. We are executing program, and we can't determine if it was successful or not. You are suggesting, we disregard the fact that it fails and continue. But what are the implications?\n\nI suggest, we leave everything as is. If someone wants to use cmd/dist, they would have to install hg.exe. I do not think it is a big ask.\n\nI am not dead against it. I just think it is silly to support stuff that is broken. Leaving for others to decide.\n\nAlex",
			"disapproval": false,
			"date": "2012-03-30 05:51:00.178769",
			"approval": false
		},
		{
			"sender": "snaury@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"aram@mgk.ro",
				"jdpoirier@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, alex.brainman@gmail.com, aram@mgk.ro, jdpoirier@gmail.com, mattn.jp@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-03-30 05:51:42.233610",
			"approval": false
		},
		{
			"sender": "snaury@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"aram@mgk.ro",
				"jdpoirier@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/04/02 16:15:32, rsc wrote:\n> I'm surprised that this works.  If Alex is okay with it, fine.\n> It looks like it is down to just a few lines.\n\nAs promised I've updated it with an implementation for lookpath. Now it correctly searches for files using PATHEXT. There's also an important fix regarding FormatMessage, as during testing I found that if the error message is something like \"%1 is not a valid Win32 application\" dist would crash instead of displaying said error message.\n\nI hope it's not too complex, and I hope it's correct. One big advantage of this approach is that now it would support batch files (and more) for anything, not just mercurial.",
			"disapproval": false,
			"date": "2012-04-02 20:59:48.940106",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is similar that I discused in golang-dev.\n\nhttps://groups.google.com/d/topic/golang-dev/ujtLlrp8e_c/discussion\n\nOn Friday, March 30, 2012 3:13:37 PM UTC+9, Alexey Borzenkov wrote:\n>\n> Btw, hg.bat can be easily fixed by adding:\n>\n> if errorlevel 1 %COMSPEC% /c exit /b %errorlevel%\n>\n> As the very last line.\n>\n> http://codereview.appspot.com/5937043/\n>\n>",
			"disapproval": false,
			"date": "2012-03-30 06:57:44.765245",
			"approval": false
		},
		{
			"sender": "snaury@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"aram@mgk.ro",
				"jdpoirier@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, alex.brainman@gmail.com, aram@mgk.ro, jdpoirier@gmail.com, mattn.jp@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-02 20:56:21.690790",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What just happened?  We went from a 12-line patch (patch set 3)\nto a 137-line patch (patch set 7).  I was happy with the 12-line patch.\nIt was ugly but it presumably worked, and we only care about\nMercurial, not about handling every possible general case.\nThe new code seems like it is solving a problem that misc/dist\ndoesn't have.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-04-04 13:44:42.561534",
			"approval": false
		},
		{
			"sender": "snaury@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"aram@mgk.ro",
				"jdpoirier@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/03/30 05:51:00, brainman wrote:\n> I think it is big problem. We are executing program, and we can't determine if\n> it was successful or not. You are suggesting, we disregard the fact that it\n> fails and continue. But what are the implications?\n\nThe implications are unchanged, I think. Exactly the same behavior happens with go get, for example when I deliberatly introduce an error in mercurial, this happens:\n\n# cd C:\\Alex\\go\\src\\pkg\\code.google.com\\p\\go.crypto; hg tags\npackage code.google.com/p/go.crypto: chdir C:\\Alex\\go\\src\\pkg\\code.google.com\\p\\go.crypto: The system cannot find the file specified.\n\nThe error above is because hg clone silently failed. I'd say this is not our problem if hg.bat is made to always succeed.",
			"disapproval": false,
			"date": "2012-03-30 06:04:54.944167",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"aram@mgk.ro",
				"jdpoirier@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/03/31 14:47:05, snaury wrote:\n> \n> I'm thinking about reworking this patch by porting LookPath from package os to C\n> so that it's done uniformly by both dist and the rest of go, then I hope this\n> would finally stop being about cmd.exe and hg.bat bugs.\n\nBut it is a hg issue at this moment. cmd/dist is bit specific in what it does and who it calls. I am not sure all that extra code is worth the effort. But, as I said earlier, I am OK either way.\n\nAlex",
			"disapproval": false,
			"date": "2012-04-01 04:34:28.637570",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm surprised that this works.  If Alex is okay with it, fine.\nIt looks like it is down to just a few lines.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-04-02 16:15:32.145486",
			"approval": false
		},
		{
			"sender": "snaury@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"aram@mgk.ro",
				"jdpoirier@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, alex.brainman@gmail.com, aram@mgk.ro, jdpoirier@gmail.com, mattn.jp@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-02 21:08:01.296322",
			"approval": false
		},
		{
			"sender": "snaury@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"aram@mgk.ro",
				"jdpoirier@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Oops, looks like I forgot to fight myself over if/for parentheses in a couple places. Will fix shortly.",
			"disapproval": false,
			"date": "2012-04-02 21:03:04.181400",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"aram@mgk.ro",
				"jdpoirier@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/04/04 13:44:42, rsc wrote:\n> What just happened?  We went from a 12-line patch (patch set 3)\n> to a 137-line patch (patch set 7). ...\n\nI do not think this issue is important enough to spend so much time on it. I do not use hg.bat myself.\n\nI am OK to:\n1) drop this CL and leave everything as is;\n2) have short (patch set 3) change;\n3) have long (current) change.\n\nEither choice have positives and negatives:\n1) no support of hg.bat, but everything works as expected;\n2) supports hg.bat, but might cause confusion if Mercurial fails, but hg.bat returns success;\n3) same as 2), but does not rely on existence of cmd.exe; it is also similar to what we do in os/exec package, so some consistency here.\n\nYou choose.\n\nAlex",
			"disapproval": false,
			"date": "2012-04-05 04:33:37.520415",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Either patch set 3 or patch set 5 would be fine.\nBoth are small enough to be justifiable for this situation.\nThe current patch set is, in contrast, enormous.\n",
			"disapproval": false,
			"date": "2012-04-09 19:01:29.755465",
			"approval": false
		},
		{
			"sender": "snaury@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"aram@mgk.ro",
				"jdpoirier@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, alex.brainman@gmail.com, aram@mgk.ro, jdpoirier@gmail.com, mattn.jp@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-09 19:07:22.744244",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n",
			"disapproval": false,
			"date": "2012-04-09 19:39:44.239246",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I would like to do patch set 3.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-04-05 16:12:43.159236",
			"approval": false
		},
		{
			"sender": "snaury@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"aram@mgk.ro",
				"jdpoirier@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/04/05 16:12:43, rsc wrote:\n> I would like to do patch set 3.\n> \n> Russ\n\nI'd like to clarify, do you want patch set 3 (long, with comspec), or patch set 5 (short, with cmd.exe only)? I (or codereview) might be counting patch sets differently...",
			"disapproval": false,
			"date": "2012-04-09 18:59:27.870843",
			"approval": false
		},
		{
			"sender": "aram@mgk.ro",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"aram@mgk.ro",
				"jdpoirier@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I still don't understand why this works, how do we detect\nfailure? Maybe we don't care about failure? The hg.bat\nthing is broken anyway, this is a hack supporting a hack,\nso if this *mostly* works, fine by me.\n\nCode wise LGTM.",
			"disapproval": false,
			"date": "2012-04-09 19:14:07.814359",
			"approval": true
		},
		{
			"sender": "snaury@gmail.com",
			"recipients": [
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"aram@mgk.ro",
				"jdpoirier@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/04/09 19:14:07, aram wrote:\n> I still don't understand why this works, how do we detect\n> failure? Maybe we don't care about failure? The hg.bat\n> thing is broken anyway, this is a hack supporting a hack,\n> so if this *mostly* works, fine by me.\n\nOh come on, not this again! There's nothing to detect, because hg.bat that Mercurial ships *never fails*. If it would ever fail (either when Mercurial fixes it, or because cmd.exe cannot find and execute hg.bat, or whatever else), then cmd.exe will return non-zero exit code, and then it would fail, and then *that* would be detected. But since hg.bat is written in such a way that it never fails: there's nothing to detect.",
			"disapproval": false,
			"date": "2012-04-09 19:26:25.994696",
			"approval": false
		}
	],
	"owner_email": "snaury@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "snaury",
	"subject": "code review 5937043: cmd/dist: don't fail when Mercurial is a batch file on ...",
	"created": "2012-03-27 17:28:34.649828",
	"patchsets": [
		1,
		1001,
		2001,
		6001,
		18001,
		13005,
		14004,
		25001
	],
	"modified": "2012-04-09 19:55:00.761649",
	"closed": true,
	"issue": 5937043
}