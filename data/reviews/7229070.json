{
	"description": "runtime/debug: add controls for garbage collector\n\nFixes issue 4090.",
	"cc": [
		"golang-dev@googlegroups.com",
		"iant@golang.org",
		"bradfitz@golang.org",
		"dsymonds@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-02-01 19:42:33.568810",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7229070/diff/1002/src/pkg/runtime/debug/garbage.go\nFile src/pkg/runtime/debug/garbage.go (right):\n\nhttps://codereview.appspot.com/7229070/diff/1002/src/pkg/runtime/debug/garbage.go#newcode52\nsrc/pkg/runtime/debug/garbage.go:52: sorted := stats.Pause[n : n+n]\nThis needs a comment explaining why it will not overflow stats.Pause.\n\nhttps://codereview.appspot.com/7229070/diff/1002/src/pkg/runtime/debug/garbage.go#newcode55\nsrc/pkg/runtime/debug/garbage.go:55: n := len(stats.PauseQuantiles) - 1\nReusing the name n here is confusing.  You just used a different n three lines above.\n\nhttps://codereview.appspot.com/7229070/diff/1002/src/pkg/runtime/debug/garbage.go#newcode75\nsrc/pkg/runtime/debug/garbage.go:75: // at startup.\n, or 100 if GOGC is not set.\n\nhttps://codereview.appspot.com/7229070/diff/1002/src/pkg/runtime/debug/garbage.go#newcode83\nsrc/pkg/runtime/debug/garbage.go:83: // as possible. (The runtime already returns memory to the\nSuggest parenthetical clause to be \"Even if this is not called the runtime gradually returns memory to the operating system in a background task.\"\n\nhttps://codereview.appspot.com/7229070/diff/1002/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/7229070/diff/1002/src/pkg/runtime/mgc0.c#newcode1641\nsrc/pkg/runtime/mgc0.c:1641: p[i] = mstats.pause_ns[(i+o)%nelem(mstats.pause_ns)];\nI don't understand this loop.  We're suppose to set p such that the most recent elements are first.  But mstats.pause_ns is in the other order.  Where is the order reversed?\n\nhttps://codereview.appspot.com/7229070/diff/1002/src/pkg/runtime/mheap.c\nFile src/pkg/runtime/mheap.c (right):\n\nhttps://codereview.appspot.com/7229070/diff/1002/src/pkg/runtime/mheap.c#newcode372\nsrc/pkg/runtime/mheap.c:372: if(runtime\u00b7MSpanList_IsEmpty(list))\nIf you put the list manipulation in a subroutine this loop will become simpler.",
			"disapproval": false,
			"date": "2013-02-01 20:45:18.281590",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Glad to see this CL.\n\nhttps://codereview.appspot.com/7229070/diff/1002/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/7229070/diff/1002/src/pkg/runtime/mgc0.c#newcode1653\nsrc/pkg/runtime/mgc0.c:1653: if(gcpercent == -2)\ncould the three -2s be a constant / #define?  or is -2 some convention for \"first time\"?",
			"disapproval": false,
			"date": "2013-02-01 20:53:49.266260",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"bradfitz@golang.org",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7229070/diff/1002/src/pkg/runtime/debug/garbage.go\nFile src/pkg/runtime/debug/garbage.go (right):\n\nhttps://codereview.appspot.com/7229070/diff/1002/src/pkg/runtime/debug/garbage.go#newcode70\nsrc/pkg/runtime/debug/garbage.go:70: // SetGCPercent sets the garbage collection target percentage:\nThis and FreeOSMemory don't feel like they belong in runtime/debug. They aren't necessarily for \"debugging\". How would you feel about a runtime/gc package if you don't want them in runtime?",
			"disapproval": false,
			"date": "2013-02-02 01:14:01.689520",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'd rather put them in runtime/debug. It's not a great name but it's the\r\nname we have (this CL is not creating the package).\r\n",
			"disapproval": false,
			"date": "2013-02-02 02:06:28.167300",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"bradfitz@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/7229070/diff/1002/src/pkg/runtime/debug/garbage.go\nFile src/pkg/runtime/debug/garbage.go (right):\n\nhttps://codereview.appspot.com/7229070/diff/1002/src/pkg/runtime/debug/garbage.go#newcode52\nsrc/pkg/runtime/debug/garbage.go:52: sorted := stats.Pause[n : n+n]\nOn 2013/02/01 20:45:18, iant wrote:\n> This needs a comment explaining why it will not overflow stats.Pause.\n\nDone.\n\nhttps://codereview.appspot.com/7229070/diff/1002/src/pkg/runtime/debug/garbage.go#newcode55\nsrc/pkg/runtime/debug/garbage.go:55: n := len(stats.PauseQuantiles) - 1\nOn 2013/02/01 20:45:18, iant wrote:\n> Reusing the name n here is confusing.  You just used a different n three lines\n> above.\n\nDone.\n\nhttps://codereview.appspot.com/7229070/diff/1002/src/pkg/runtime/debug/garbage.go#newcode70\nsrc/pkg/runtime/debug/garbage.go:70: // SetGCPercent sets the garbage collection target percentage:\nOn 2013/02/02 01:14:01, dsymonds wrote:\n> This and FreeOSMemory don't feel like they belong in runtime/debug. They aren't\n> necessarily for \"debugging\". How would you feel about a runtime/gc package if\n> you don't want them in runtime?\n\nThere's already a debug package, so I'm happy to keep them here.\nAlso, I want this kind of stuff to be considered debugging: if the knobs\nare needed then there is a bug in the runtime, which should just do the\nright thing automatically.\n\nhttps://codereview.appspot.com/7229070/diff/1002/src/pkg/runtime/debug/garbage.go#newcode75\nsrc/pkg/runtime/debug/garbage.go:75: // at startup.\nOn 2013/02/01 20:45:18, iant wrote:\n> , or 100 if GOGC is not set.\n\nDone.\n\nhttps://codereview.appspot.com/7229070/diff/1002/src/pkg/runtime/debug/garbage.go#newcode83\nsrc/pkg/runtime/debug/garbage.go:83: // as possible. (The runtime already returns memory to the\nOn 2013/02/01 20:45:18, iant wrote:\n> Suggest parenthetical clause to be \"Even if this is not called the runtime\n> gradually returns memory to the operating system in a background task.\"\n\nDone.\n\nhttps://codereview.appspot.com/7229070/diff/1002/src/pkg/runtime/mgc0.c\nFile src/pkg/runtime/mgc0.c (right):\n\nhttps://codereview.appspot.com/7229070/diff/1002/src/pkg/runtime/mgc0.c#newcode1641\nsrc/pkg/runtime/mgc0.c:1641: p[i] = mstats.pause_ns[(i+o)%nelem(mstats.pause_ns)];\nOn 2013/02/01 20:45:18, iant wrote:\n> I don't understand this loop.  We're suppose to set p such that the most recent\n> elements are first.  But mstats.pause_ns is in the other order.  Where is the\n> order reversed?\n\nYou're right. Fixed.\n\nhttps://codereview.appspot.com/7229070/diff/1002/src/pkg/runtime/mheap.c\nFile src/pkg/runtime/mheap.c (right):\n\nhttps://codereview.appspot.com/7229070/diff/1002/src/pkg/runtime/mheap.c#newcode372\nsrc/pkg/runtime/mheap.c:372: if(runtime\u00b7MSpanList_IsEmpty(list))\nOn 2013/02/01 20:45:18, iant wrote:\n> If you put the list manipulation in a subroutine this loop will become simpler.\n\nWhich lines do you think should go in the subroutine? I'm happy to do it, just unclear what you're asking.",
			"disapproval": false,
			"date": "2013-02-02 21:25:37.345420",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"bradfitz@golang.org",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7229070/diff/1002/src/pkg/runtime/mheap.c\nFile src/pkg/runtime/mheap.c (right):\n\nhttps://codereview.appspot.com/7229070/diff/1002/src/pkg/runtime/mheap.c#newcode372\nsrc/pkg/runtime/mheap.c:372: if(runtime\u00b7MSpanList_IsEmpty(list))\nOn 2013/02/02 21:25:37, rsc wrote:\n> On 2013/02/01 20:45:18, iant wrote:\n> > If you put the list manipulation in a subroutine this loop will become\n> simpler.\n> \n> Which lines do you think should go in the subroutine? I'm happy to do it, just\n> unclear what you're asking.\n\nstatic uintptr\nscavengelist(uint64 now, uint64 limit, MSpan *list)\n{\n    if(runtime\u00b7MSpanList_IsEmpty(list))\n        return 0;\n    sumreleased = 0;\n    for(s = list->next; s != list; s=s->next) {\n        if((now - s->unusedsince) > limit) {\n            released = (s->npages - s->npreleased) << PageShift;\n            mstats.heap_released += released;\n            sumreleased += released;\n            s->npreleased = s->npages;\n            runtime\u00b7SysUnused((void*)(s->start << PageShift)\n     , s->npages << PageShift);\n        }\n    }\n    return sumreleased;\n}\n\n\n    for(i = 0; i<nelem(h->free); i++)\n        sumreleased += scavengelist(now, limit, &h->free[i]);\n    sumreleased += scavengelist(now, limit, &h->large);",
			"disapproval": false,
			"date": "2013-02-03 06:08:43.177520",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"bradfitz@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, iant@golang.org, bradfitz@golang.org, dsymonds@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-03 06:58:08.969450",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"bradfitz@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-02-04 04:52:41.961300",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"bradfitz@golang.org",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=6919c7058a43 ***\n\nruntime/debug: add controls for garbage collector\n\nFixes issue 4090.\n\nR=golang-dev, iant, bradfitz, dsymonds\nCC=golang-dev\nhttps://codereview.appspot.com/7229070",
			"disapproval": false,
			"date": "2013-02-04 05:01:00.899250",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 7229070: runtime/debug: add controls for garbage collector",
	"created": "2013-02-01 19:22:46.303430",
	"patchsets": [
		1,
		1002,
		11001,
		15001,
		18002
	],
	"modified": "2013-02-04 05:01:03.040530",
	"closed": true,
	"issue": 7229070
}