{
	"description": "time: clean up MarshalJSON, add RFC3339 method\nencoding/xml: handle time.Time as recognized type\n\nThe long term plan is to define an interface that time.Time\ncan implement and that encoding/xml can call, but we are\nnot going to try to define that interface before Go 1.\nInstead, special-case time.Time in package xml, because\nit is such a fundamental type, as a stop-gap.\nThe eventual methods will behave this way.\n\nFixes issue 2793.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"r@google.com",
		"n13m3y3r@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-06 21:54:40.494173",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "(Fixes issue 2793)\n",
			"disapproval": false,
			"date": "2012-02-06 21:55:04.149782",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Feb 6, 2012 at 19:10,  <r@golang.org> wrote:\n> i'm unclear why this format gets its own method.\n> if it's just for XML and/or JSON, fine, but it should say so here.\n> i don't want to establish a precedent for lots of fiddly formatting\n> methods.\n\nMaybe instead we should define a format that means\n\"as many decimals as it takes\" for the fraction.\nAny ideas about what the syntax would be?\n\nRuss\n",
			"disapproval": false,
			"date": "2012-02-07 01:43:28.305265",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Feb 7, 2012, at 12:43 PM, Russ Cox wrote:\n\n> On Mon, Feb 6, 2012 at 19:10,  <r@golang.org> wrote:\n>> i'm unclear why this format gets its own method.\n>> if it's just for XML and/or JSON, fine, but it should say so here.\n>> i don't want to establish a precedent for lots of fiddly formatting\n>> methods.\n> \n> Maybe instead we should define a format that means\n> \"as many decimals as it takes\" for the fraction.\n> Any ideas about what the syntax would be?\n\nIt's already true that\n\n\t.000\n\nmeans \"three digits of fractional second, including trailing zeros\". The docs are clear that it's zeros only. What if we made\n\n\t.999\n\nmean \"three digits of fractional second, with trailing zeros trimmed\"? Keeps compatibility and his mild mnemonic value (if there are trailing zeros in the format, you see trailing zeros in the output).\n\nNot sure it's a good idea, but it's a suggestion. \n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2012-02-07 02:17:14.335689",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5634051/diff/2001/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5634051/diff/2001/src/pkg/time/time.go#newcode843\nsrc/pkg/time/time.go:843: // Trailing zeros are trimmed from the fraction in the result.\ni'm unclear why this format gets its own method.\nif it's just for XML and/or JSON, fine, but it should say so here.\ni don't want to establish a precedent for lots of fiddly formatting methods.\n\nhttp://codereview.appspot.com/5634051/diff/2001/src/pkg/time/time_test.go\nFile src/pkg/time/time_test.go (right):\n\nhttp://codereview.appspot.com/5634051/diff/2001/src/pkg/time/time_test.go#newcode230\nsrc/pkg/time/time_test.go:230: {\"call-RFC3339\", \"call-RFC3339\", \"2009-02-04T21:00:57.012345678-08:00\"},\nplease add a test for zero-padding the year. include negative cases.",
			"disapproval": false,
			"date": "2012-02-07 00:10:59.211424",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"r@google.com",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nMakes me wonder how we can enable the developer to tweak the format so they can format according to a given specification needs. I guess a custom type would work.",
			"disapproval": false,
			"date": "2012-02-08 00:12:24.924076",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"r@google.com",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nthat turned out well\n\nhttp://codereview.appspot.com/5634051/diff/9009/src/pkg/time/format.go\nFile src/pkg/time/format.go (right):\n\nhttp://codereview.appspot.com/5634051/diff/9009/src/pkg/time/format.go#newcode172\nsrc/pkg/time/format.go:172: case '.': // .000 or .999 - multiple digits of zeros (only) for fractional seconds.\nthe rest of the comment is wrong now, but needlessly precise.\n\n// .000 or .999 - repeated digits for fractional seconds.",
			"disapproval": false,
			"date": "2012-02-08 00:18:44.613122",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org, r@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-07 22:01:58.915180",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"r@google.com",
				"n13m3y3r@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as a4dc8322859a ***\n\ntime: clean up MarshalJSON, add RFC3339 method\nencoding/xml: handle time.Time as recognized type\n\nThe long term plan is to define an interface that time.Time\ncan implement and that encoding/xml can call, but we are\nnot going to try to define that interface before Go 1.\nInstead, special-case time.Time in package xml, because\nit is such a fundamental type, as a stop-gap.\nThe eventual methods will behave this way.\n\nFixes issue 2793.\n\nR=golang-dev, r, r, n13m3y3r\nCC=golang-dev\nhttp://codereview.appspot.com/5634051",
			"disapproval": false,
			"date": "2012-02-08 04:37:28.795547",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5634051: time: clean up MarshalJSON, add RFC3339 method",
	"created": "2012-02-06 21:47:35.353422",
	"patchsets": [
		1,
		2001,
		8001,
		9009,
		6011
	],
	"modified": "2012-02-08 04:37:29.561961",
	"closed": true,
	"issue": 5634051
}