{
	"description": "testing: add file:line stamps to messages.\n\nA single-line error looks like this:\n--- FAIL: foo_test.TestFoo (0.00 seconds)\n        foo_test.go:123: Foo(8) = \"10\" want \"100\"\n\nA multi-line error looks like this:\n--- FAIL: foo_test.TestFoo (0.00 seconds)\n        foo_test.go:456: Foo(88) = \"100\"\n                want \"1000\"",
	"cc": [
		"rsc@golang.org",
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-10 19:46:28.530174",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-10 19:51:29.468325",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-11-10 19:57:31.110791",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=ff0ade0b937b ***\n\ntesting: add file:line stamps to messages.\n\nA single-line error looks like this:\n--- FAIL: foo_test.TestFoo (0.00 seconds)\n        foo_test.go:123: Foo(8) = \"10\" want \"100\"\n\nA multi-line error looks like this:\n--- FAIL: foo_test.TestFoo (0.00 seconds)\n        foo_test.go:456: Foo(88) = \"100\"\n                want \"1000\"\n\nR=rsc, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5376057",
			"disapproval": false,
			"date": "2011-11-10 19:59:54.251134",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-10 19:51:17.090996",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Nice.\n\nOn Thu, Nov 10, 2011 at 11:46 AM, <r@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> testing: add file:line stamps to messages.\n>\n> A single-line error looks like this:\n> --- FAIL: foo_test.TestFoo (0.00 seconds)\n>        foo_test.go:123: Foo(8) = \"10\" want \"100\"\n>\n> A multi-line error looks like this:\n> --- FAIL: foo_test.TestFoo (0.00 seconds)\n>        foo_test.go:456: Foo(88) = \"100\"\n>                want \"1000\"\n>\n> Please review this at http://codereview.appspot.com/**5376057/<http://codereview.appspot.com/5376057/>\n>\n> Affected files:\n>  M src/pkg/testing/testing.go\n>\n>\n> Index: src/pkg/testing/testing.go\n> ==============================**==============================**=======\n> --- a/src/pkg/testing/testing.go\n> +++ b/src/pkg/testing/testing.go\n> @@ -75,8 +75,23 @@\n>        return *short\n>  }\n>\n> -// Insert final newline if needed and tabs after internal newlines.\n> -func tabify(s string) string {\n> +// decorate inserts the a final newline if needed and indentation tabs\n> for formatting.\n> +// If addFileLine is true, it also prefixes the string with the file and\n> line of the call site.\n> +func decorate(s string, addFileLine bool) string {\n> +       if addFileLine {\n> +               _, file, line, ok := runtime.Caller(3) // decorate + log +\n> public function.\n> +               if ok {\n> +                       // Truncate file name at last slash.\n> +                       if index := strings.LastIndex(file, \"/\"); index >=\n> 0 {\n> +                               file = file[index+1:]\n> +                       }\n> +               } else {\n> +                       file = \"???\"\n> +                       line = 1\n> +               }\n> +               s = fmt.Sprintf(\"%s:%d: %s\", file, line, s)\n> +       }\n> +       s = \"\\t\" + s // Every line is indented at least one tab.\n>        n := len(s)\n>        if n > 0 && s[n-1] != '\\n' {\n>                s += \"\\n\"\n> @@ -84,7 +99,8 @@\n>        }\n>        for i := 0; i < n-1; i++ { // -1 to avoid final newline\n>                if s[i] == '\\n' {\n> -                       return s[0:i+1] + \"\\t\" + tabify(s[i+1:n])\n> +                       // Second and subsequent lines are indented an\n> extra tab.\n> +                       return s[0:i+1] + \"\\t\" + decorate(s[i+1:n], false)\n>                }\n>        }\n>        return s\n> @@ -116,37 +132,38 @@\n>        runtime.Goexit()\n>  }\n>\n> +// log generates the output. It's always at the same stack depth.\n> +func (t *T) log(s string) { t.errors += decorate(s, true) }\n> +\n>  // Log formats its arguments using default formatting, analogous to\n> Print(),\n>  // and records the text in the error log.\n> -func (t *T) Log(args ...interface{}) { t.errors += \"\\t\" +\n> tabify(fmt.Sprintln(args...)) }\n> +func (t *T) Log(args ...interface{}) { t.log(fmt.Sprintln(args...)) }\n>\n>  // Logf formats its arguments according to the format, analogous to\n> Printf(),\n>  // and records the text in the error log.\n> -func (t *T) Logf(format string, args ...interface{}) {\n> -       t.errors += \"\\t\" + tabify(fmt.Sprintf(format, args...))\n> -}\n> +func (t *T) Logf(format string, args ...interface{}) {\n> t.log(fmt.Sprintf(format, args...)) }\n>\n>  // Error is equivalent to Log() followed by Fail().\n>  func (t *T) Error(args ...interface{}) {\n> -       t.Log(args...)\n> +       t.log(fmt.Sprintln(args...))\n>        t.Fail()\n>  }\n>\n>  // Errorf is equivalent to Logf() followed by Fail().\n>  func (t *T) Errorf(format string, args ...interface{}) {\n> -       t.Logf(format, args...)\n> +       t.log(fmt.Sprintf(format, args...))\n>        t.Fail()\n>  }\n>\n>  // Fatal is equivalent to Log() followed by FailNow().\n>  func (t *T) Fatal(args ...interface{}) {\n> -       t.Log(args...)\n> +       t.log(fmt.Sprintln(args...))\n>        t.FailNow()\n>  }\n>\n>  // Fatalf is equivalent to Logf() followed by FailNow().\n>  func (t *T) Fatalf(format string, args ...interface{}) {\n> -       t.Logf(format, args...)\n> +       t.log(fmt.Sprintf(format, args...))\n>        t.FailNow()\n>  }\n>\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-11-10 19:58:52.453044",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5376057: testing: add file:line stamps to messages.",
	"created": "2011-11-10 19:46:23.863568",
	"patchsets": [
		1,
		3001,
		2003,
		6003
	],
	"modified": "2011-11-10 19:59:55.889064",
	"closed": true,
	"issue": 5376057
}