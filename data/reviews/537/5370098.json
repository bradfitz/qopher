{
	"description": "html/template: indirect top-level values before printing\ntext/template does this (in an entirely different way), so\nmake html/template do the same. Before this fix, the template\n{{.}} given a pointer to a string prints its address instead of its\nvalue.",
	"cc": [
		"mikesamuel@gmail.com",
		"r@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Nov 15, 2011, at 8:03 AM, mikesamuel@gmail.com wrote:\n\n> \n> http://codereview.appspot.com/5370098/diff/4001/src/pkg/html/template/content.go\n> File src/pkg/html/template/content.go (right):\n> \n> http://codereview.appspot.com/5370098/diff/4001/src/pkg/html/template/content.go#newcode85\n> src/pkg/html/template/content.go:85: return v.Interface()\n> This looks like the right place to do this.\n> \n> http://code.google.com/p/go/source/browse/src/pkg/html/template/js.go#126\n> is the exception to the rule since it has a special case for\n> JSON.Marshaler and should probably have a call to indirect.\n> \n> If the input is of type **T and *T implements JSON.Marshaller but T does\n> not, then will that case still trigger?\n\nno, but i handled it. it's clumsy but i think the best we can do. i verified that the existing tests validate this change.\n\n> http://codereview.appspot.com/5370098/diff/4001/src/pkg/html/template/escape_test.go\n> File src/pkg/html/template/escape_test.go (right):\n> \n> http://codereview.appspot.com/5370098/diff/4001/src/pkg/html/template/escape_test.go#newcode52\n> src/pkg/html/template/escape_test.go:52: }\n> Would it be worth creating\n>    indirectdata := struct {\n>       F, T *bool\n>       ...\n>    }{\n>       F: &(data.F)\n>       ...\n>    }\n> \n> and changing the test running code below to run with both data and\n> indirectdata.\n\ndone\n\n\n",
			"disapproval": false,
			"date": "2011-11-15 18:44:27.591955",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"mikesamuel@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello mikesamuel@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-15 18:43:44.047641",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"mikesamuel@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello mikesamuel@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-15 05:27:39.707569",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"r@golang.org",
				"mikesamuel@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5370098/diff/4001/src/pkg/html/template/content.go\nFile src/pkg/html/template/content.go (right):\n\nhttp://codereview.appspot.com/5370098/diff/4001/src/pkg/html/template/content.go#newcode85\nsrc/pkg/html/template/content.go:85: return v.Interface()\nThis looks like the right place to do this.\n\nhttp://code.google.com/p/go/source/browse/src/pkg/html/template/js.go#126 is the exception to the rule since it has a special case for JSON.Marshaler and should probably have a call to indirect.\n\nIf the input is of type **T and *T implements JSON.Marshaller but T does not, then will that case still trigger?\n\nhttp://codereview.appspot.com/5370098/diff/4001/src/pkg/html/template/escape_test.go\nFile src/pkg/html/template/escape_test.go (right):\n\nhttp://codereview.appspot.com/5370098/diff/4001/src/pkg/html/template/escape_test.go#newcode52\nsrc/pkg/html/template/escape_test.go:52: }\nWould it be worth creating\n    indirectdata := struct {\n       F, T *bool\n       ...\n    }{\n       F: &(data.F)\n       ...\n    }\n\nand changing the test running code below to run with both data and indirectdata.",
			"disapproval": false,
			"date": "2011-11-15 16:03:35.742293",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"r@golang.org",
				"mikesamuel@gmail.com",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5370098/diff/8001/src/pkg/html/template/escape_test.go\nFile src/pkg/html/template/escape_test.go (right):\n\nhttp://codereview.appspot.com/5370098/diff/8001/src/pkg/html/template/escape_test.go#newcode53\nsrc/pkg/html/template/escape_test.go:53: pdata := &data\nThis is testing that the data container is properly dereferenced when resolving a member, but not that the members are properly dereferenced.\n\nhttp://codereview.appspot.com/5370098/diff/8001/src/pkg/html/template/js.go\nFile src/pkg/html/template/js.go (right):\n\nhttp://codereview.appspot.com/5370098/diff/8001/src/pkg/html/template/js.go#newcode130\nsrc/pkg/html/template/js.go:130: return v.Interface()\nok\n\nhttp://codereview.appspot.com/5370098/diff/8001/src/pkg/html/template/js.go#newcode153\nsrc/pkg/html/template/js.go:153: }\nI don't think this is necessary.",
			"disapproval": false,
			"date": "2011-11-15 20:05:06.681362",
			"approval": true
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Nov 15, 2011, at 12:05 PM, mikesamuel@gmail.com wrote:\n\n> LGTM\n> \n> \n> http://codereview.appspot.com/5370098/diff/8001/src/pkg/html/template/escape_test.go\n> File src/pkg/html/template/escape_test.go (right):\n> \n> http://codereview.appspot.com/5370098/diff/8001/src/pkg/html/template/escape_test.go#newcode53\n> src/pkg/html/template/escape_test.go:53: pdata := &data\n> This is testing that the data container is properly dereferenced when\n> resolving a member, but not that the members are properly dereferenced.\n\nYes, and they won't be dereferenced. That's fine. If you print a value, it's dereferenced; elements of it are not. That's consistent with the text/template package.\n\n> http://codereview.appspot.com/5370098/diff/8001/src/pkg/html/template/js.go\n> File src/pkg/html/template/js.go (right):\n> \n> http://codereview.appspot.com/5370098/diff/8001/src/pkg/html/template/js.go#newcode130\n> src/pkg/html/template/js.go:130: return v.Interface()\n> ok\n> \n> http://codereview.appspot.com/5370098/diff/8001/src/pkg/html/template/js.go#newcode153\n> src/pkg/html/template/js.go:153: }\n> I don't think this is necessary.\n\nLine 130 is necessary. I'm a little unclear how we get to the multiargument case, so added it for certainty.  (The one in content.go can be reached by fallthrough; this one cannot.)   However, now I see it only ever gets called with a single argument. Should I instead assert that?\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-11-16 02:02:10.552164",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n",
			"disapproval": false,
			"date": "2011-11-16 13:13:21.687867",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"mikesamuel@gmail.com",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=539d058e9b0a ***\n\nhtml/template: indirect top-level values before printing\ntext/template does this (in an entirely different way), so\nmake html/template do the same. Before this fix, the template\n{{.}} given a pointer to a string prints its address instead of its\nvalue.\n\nR=mikesamuel, r\nCC=golang-dev\nhttp://codereview.appspot.com/5370098",
			"disapproval": false,
			"date": "2011-11-16 17:32:59.763107",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5370098: html/template: indirect top-level values before printing",
	"created": "2011-11-15 05:27:36.632186",
	"patchsets": [
		1,
		4,
		2002,
		4001,
		8001,
		9002
	],
	"modified": "2011-11-16 17:33:01.445682",
	"closed": true,
	"issue": 5370098
}