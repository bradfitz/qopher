{
	"description": "math/big: replace nat{} -> nat(nil)\n\nNo need for creating a new nat each time.\nPer Roger Peppe's suggestion; assuming\nnat(nil) produces better code than nat{}.",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Ignoring efficiency, which version do you prefer?\n\nAn alternative is to make nat{} not allocate.\nWe can make the implementation of a zero-length\nslice constructor always use the same pointer to 0 bytes.\nSince you cannot take the address of any element in\nthe slice, you can't tell.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-14 20:22:40.376134",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-14 20:20:11.412775",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "nat{} is shorter but nat(nil) is more explicit (but also ties that\ncode to the definition of nat). I am fine w/ nat(nil) as this code is\nvery explicit in many places.\n\nI think the compiler optimization should be done if it is easy and\ndoesn't involve a lot of different code (I would think it should  be,\nbut I am not sure). How is it different now?\n- gri\n\nOn Mon, Nov 14, 2011 at 12:22 PM, Russ Cox <rsc@golang.org> wrote:\n> Ignoring efficiency, which version do you prefer?\n>\n> An alternative is to make nat{} not allocate.\n> We can make the implementation of a zero-length\n> slice constructor always use the same pointer to 0 bytes.\n> Since you cannot take the address of any element in\n> the slice, you can't tell.\n>\n> Russ\n>\n",
			"disapproval": false,
			"date": "2011-11-14 21:15:36.875289",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=e6fd3ef9717b ***\n\nmath/big: replace nat{} -> nat(nil)\n\nNo need for creating a new nat each time.\nPer Roger Peppe's suggestion; assuming\nnat(nil) produces better code than nat{}.\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5375092",
			"disapproval": false,
			"date": "2011-11-14 21:35:25.760802",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nI'll send out a change for nat{} not to allocate.\nI'm fine with nat(nil) or nat{}.\n",
			"disapproval": false,
			"date": "2011-11-14 21:21:35.406274",
			"approval": true
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 5375092: math/big: replace nat{} -> nat(nil)",
	"created": "2011-11-14 20:19:18.543668",
	"patchsets": [
		1,
		2001,
		4005,
		2003
	],
	"modified": "2011-11-14 21:35:26.888688",
	"closed": true,
	"issue": 5375092
}