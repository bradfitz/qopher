{
	"description": "ld: increase default stack size on Windows for cgo\nFixes issue 2437.",
	"cc": [
		"rsc@golang.org",
		"hectorchu@gmail.com",
		"mattn.jp@gmail.com",
		"alex.brainman@gmail.com",
		"jdpoirier@gmail.com",
		"snaury@gmail.com",
		"n13m3y3r@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Nov 10, 2011 at 9:32 AM, Russ Cox <rsc@golang.org> wrote:\n> Have you tested this?\n> Why does it fix the crash?\n\nI did not test it, I do not have a Windows machine.\nI suspect that the problem was that stackguard underflow, because the\nactual stack size is 64k, so when we subtract 1M it can easily\nunderflow.\nIn either case, numbers in ld and cgo must be equal one way or another.\n",
			"disapproval": false,
			"date": "2011-11-10 06:41:53.065334",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"golang-dev@googlegroups.com",
				"mattn.jp@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hector, you added that comment:\n\t// Disable stack growth as we don't want Windows to\n\t// fiddle with the thread stack limits, which we set\n\t// ourselves to circumvent the stack checks in the\n\t// Windows exception dispatcher.\n\t// Commit size must be strictly less than reserve\n\t// size otherwise reserve will be rounded up to a\n\t// larger size, as verified with VMMap.\n\nDoes it mean that StackReserve must be equal to StackCommit? Does SEH stack growth handler make harm for Go? Is it OK to set Reserve=1M and Commit=64k?",
			"disapproval": false,
			"date": "2011-11-10 07:17:11.004962",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Ah sorry.\nI succeeded to apply this patch. But I got compile error.\n\nThanks.\n\nrm -f goc2c mkversion version.go */asm.h runtime.acid.* runtime_defs.go \n$(ls *.goc | sed 's/goc$/c/')\nrm -rf *.o *.a *.[568vq] [568vq].out version.go version_*.go *.so _obj \n_test _testmain.go *.exe _cgo* test.out build.out\nquietgcc -o mkversion -I \"c:/go/include\" mkversion.c \"c:/go/lib/lib9.a\"\nGOROOT=\"c:/go\" ./mkversion >version.go\n(echo 'package runtime'; echo 'const theGoos = \"windows\"') \n>version_windows.go\n(echo 'package runtime'; echo 'const theGoarch = \"386\"') >version_386.go\nCC=\"8c\" CFLAGS=\"-Iwindows -I386 -Iwindows/386 -FVw  -D__WINDOWS__\" \n./mkgodefs.sh proc.c iface.c hashmap.c chan.c > runtime_defs.go.x\nmv -f runtime_defs.go.x runtime_defs.go\n8g -+   -p runtime -o _go_.8 debug.go error.go extern.go mem.go sig.go \nsoftfloat64.go type.go version.go version_windows.go version_386.go \nruntime_defs.go  \n8c -Iwindows -I386 -Iwindows/386 -FVw  -D__WINDOWS__ -a proc.c \n>runtime.acid.386\n./mkasmh.sh >386/asm.h.x\nmv -f 386/asm.h.x 386/asm.h\n8a 386/asm.s\n8c -Iwindows -I386 -Iwindows/386 -FVw  -D__WINDOWS__ 386/atomic.c\n8c -Iwindows -I386 -Iwindows/386 -FVw  -D__WINDOWS__ -o \"cgocall.8\" \ncgocall.c\n8c -Iwindows -I386 -Iwindows/386 -FVw  -D__WINDOWS__ -o \"chan.8\" chan.c\n8c -Iwindows -I386 -Iwindows/386 -FVw  -D__WINDOWS__ 386/closure.c\n8c -Iwindows -I386 -Iwindows/386 -FVw  -D__WINDOWS__ -o \"cpuprof.8\" \ncpuprof.c\n8c -Iwindows -I386 -Iwindows/386 -FVw  -D__WINDOWS__ -o \"float.8\" float.c\n8c -Iwindows -I386 -Iwindows/386 -FVw  -D__WINDOWS__ -o \"complex.8\" \ncomplex.c\n8c -Iwindows -I386 -Iwindows/386 -FVw  -D__WINDOWS__ -o \"hashmap.8\" \nhashmap.c\n8c -Iwindows -I386 -Iwindows/386 -FVw  -D__WINDOWS__ -o \"iface.8\" iface.c\nquietgcc -o goc2c -I \"c:/go/include\" goc2c.c \"c:/go/lib/lib9.a\"\n./goc2c \"`pwd`/malloc.goc\" > malloc.c.tmp\nmv -f malloc.c.tmp malloc.c\n8c -Iwindows -I386 -Iwindows/386 -FVw  -D__WINDOWS__ -o \"malloc.8\" malloc.c\n8c -Iwindows -I386 -Iwindows/386 -FVw  -D__WINDOWS__ -o \"mcache.8\" mcache.c\n8c -Iwindows -I386 -Iwindows/386 -FVw  -D__WINDOWS__ -o \"mcentral.8\" \nmcentral.c\n8c -Iwindows -I386 -Iwindows/386 -FVw  -D__WINDOWS__ windows/mem.c\n8a 386/memmove.s\n8c -Iwindows -I386 -Iwindows/386 -FVw  -D__WINDOWS__ -o \"mfinal.8\" mfinal.c\n8c -Iwindows -I386 -Iwindows/386 -FVw  -D__WINDOWS__ -o \"mfixalloc.8\" \nmfixalloc.c\n8c -Iwindows -I386 -Iwindows/386 -FVw  -D__WINDOWS__ -o \"mgc0.8\" mgc0.c\n8c -Iwindows -I386 -Iwindows/386 -FVw  -D__WINDOWS__ -o \"mheap.8\" mheap.c\n./goc2c \"`pwd`/mprof.goc\" > mprof.c.tmp\nmv -f mprof.c.tmp mprof.c\n8c -Iwindows -I386 -Iwindows/386 -FVw  -D__WINDOWS__ -o \"mprof.8\" mprof.c\n8c -Iwindows -I386 -Iwindows/386 -FVw  -D__WINDOWS__ -o \"msize.8\" msize.c\n8c -Iwindows -I386 -Iwindows/386 -FVw  -D__WINDOWS__ -o \"print.8\" print.c\n8c -Iwindows -I386 -Iwindows/386 -FVw  -D__WINDOWS__ -o \"proc.8\" proc.c\n8c -Iwindows -I386 -Iwindows/386 -FVw  -D__WINDOWS__ -o \"rune.8\" rune.c\n8c -Iwindows -I386 -Iwindows/386 -FVw  -D__WINDOWS__ -o \"runtime.8\" \nruntime.c\n./goc2c \"`pwd`/runtime1.goc\" > runtime1.c.tmp\nmv -f runtime1.c.tmp runtime1.c\n8c -Iwindows -I386 -Iwindows/386 -FVw  -D__WINDOWS__ -o \"runtime1.8\" \nruntime1.c\n8a windows/386/rt0.s\n./goc2c \"`pwd`/sema.goc\" > sema.c.tmp\nmv -f sema.c.tmp sema.c\n8c -Iwindows -I386 -Iwindows/386 -FVw  -D__WINDOWS__ -o \"sema.8\" sema.c\n8c -Iwindows -I386 -Iwindows/386 -FVw  -D__WINDOWS__ windows/386/signal.c\n./goc2c \"`pwd`/sigqueue.goc\" > sigqueue.c.tmp\nmv -f sigqueue.c.tmp sigqueue.c\n8c -Iwindows -I386 -Iwindows/386 -FVw  -D__WINDOWS__ -o \"sigqueue.8\" \nsigqueue.c\n8c -Iwindows -I386 -Iwindows/386 -FVw  -D__WINDOWS__ -o \"slice.8\" slice.c\n./goc2c \"`pwd`/string.goc\" > string.c.tmp\nmv -f string.c.tmp string.c\n8c -Iwindows -I386 -Iwindows/386 -FVw  -D__WINDOWS__ -o \"string.8\" string.c\n8c -Iwindows -I386 -Iwindows/386 -FVw  -D__WINDOWS__ -o \"symtab.8\" symtab.c\n8a windows/386/sys.s\n8c -Iwindows -I386 -Iwindows/386 -FVw  -D__WINDOWS__ windows/thread.c\nwindows/thread.c:197 invalid type INT in call to runtime.stdcall\nwindows/thread.c:198 invalid type INT in call to runtime.stdcall\nmake: *** [thread.8] Error 1\nrm string.c sema.c sigqueue.c runtime1.c malloc.c mprof.c\n\n",
			"disapproval": false,
			"date": "2011-11-10 08:54:28.679826",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5371049/diff/4003/src/pkg/runtime/windows/thread.c\nFile src/pkg/runtime/windows/thread.c (right):\n\nhttp://codereview.appspot.com/5371049/diff/4003/src/pkg/runtime/windows/thread.c#newcode197\nsrc/pkg/runtime/windows/thread.c:197: nil, 0x10000, runtime\u00b7tstart_stdcall, m,\n(uintptr)0x10000\n\nhttp://codereview.appspot.com/5371049/diff/4003/src/pkg/runtime/windows/thread.c#newcode198\nsrc/pkg/runtime/windows/thread.c:198: STACK_SIZE_PARAM_IS_A_RESERVATION, nil);\nsame as above.",
			"disapproval": false,
			"date": "2011-11-10 09:00:05.149118",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, hectorchu@gmail.com, mattn.jp@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-10 16:12:51.921103",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/11/11 09:03:51, dvyukov wrote:\n> On 2011/11/11 04:38:55, brainman wrote:\n> > I am concerned about you increasing reserved and initial stack sizes for\n> non-cgo\n> > apps. \n> > \n> > 386 apps have only 2G of space to start with. Then Go garbage collector takes\n> > about 750M of that. \"Average\" Windows app reserves 1M of stack space per\n> thread.\n> > But Go uses segmented stacks, so \"average\" Go app os-thread should not need\n> that\n> > much. Some apps that call into special dlls that have deep stacks might fail,\n> > but not the ones calling standard Windows APIs. We will run out of address\n> space\n> > sooner as os-threads are created. I think 256K stack size is too much as is.\n> > \n> > As to initial stack size, we should commit as little memory as possible, not\n> the\n> > whole reserve.\n> > \n> > I take the blame for neglecting windows part of cgo: tests aren't working,\n> > exception handler is not working, probably, many others. But, I don't uses it\n> > myself. So it is hard for me to push something I don't find myself useful. I\n> > will try and get cgo tests working on windows as much as I can as soon as I\n> can.\n> > \n> > Alex\n> > \n> > http://codereview.appspot.com/5371049/diff/7005/src/cmd/ld/pe.c\n> > File src/cmd/ld/pe.c (right):\n> > \n> > http://codereview.appspot.com/5371049/diff/7005/src/cmd/ld/pe.c#newcode661\n> > src/cmd/ld/pe.c:661: set(SizeOfStackCommit,  pe64 ? 0x001fffff : 0x000fffff);\n> > I did some experiments with vmmap as Hector suggested.\n> > \n> > Here are stack sizes as seen by vmmap after your patch has been applied (this\n> is\n> > a simple non-cgo app):\n> > \n> > first thread: size=1024K committed=1024K\n> > next  thread: size=1024K committed=1024K\n> > \n> > This is for clean source tree:\n> > \n> > first thread: size=256K  committed=68K\n> > next  thread: size=1024K committed=68K\n> > \n> > So your change is making \"reserved\" space \"committed\" on thread stratup. I\n> don't\n> > think we want that.\n> > \n> > Not related to your CL, but I looked why for \"clean source tree\" \"next thread\n> > size is 1024K\", while \"first thread size is 256K\". And it appears there is\n> > something special about relationship of SizeOfStackReserve and\n> > SizeOfStackCommit. I have changed the source here:\n> > \n> > diff -r bf9901c10e5e src/cmd/ld/pe.c\n> > --- a/src/cmd/ld/pe.c\tThu Nov 10 14:02:14 2011 -0800\n> > +++ b/src/cmd/ld/pe.c\tFri Nov 11 11:59:35 2011 +1100\n> > @@ -651,7 +651,7 @@\n> >  \t// size otherwise reserve will be rounded up to a\n> >  \t// larger size, as verified with VMMap.\n> >  \tset(SizeOfStackReserve, 0x00010000);\n> > -\tset(SizeOfStackCommit, 0x0000ffff);\n> > +\tset(SizeOfStackCommit, 0x00001000);\n> >  \tset(SizeOfHeapReserve, 0x00100000);\n> >  \tset(SizeOfHeapCommit, 0x00001000);\n> >  \tset(NumberOfRvaAndSizes, 16);\n> > \n> > and the figures are\n> > \n> > first thread: size=256K  committed=16K\n> > next  thread: size=64K committed=8K\n> \n> It looks better, but earlier in this thread Hector said that if you set\n> reserve!=commit+1 then stack growth SEH handler will mess things up.\n> \n> > \n> >\n> http://codereview.appspot.com/5371049/diff/7005/src/pkg/runtime/windows/thread.c\n> > File src/pkg/runtime/windows/thread.c (right):\n> > \n> >\n> http://codereview.appspot.com/5371049/diff/7005/src/pkg/runtime/windows/thread.c#newcode199\n> > src/pkg/runtime/windows/thread.c:199: STACK_SIZE_PARAM_IS_A_RESERVATION, nil);\n> > Please, revert this change. This code does not get called when cgo runs, so it\n> > should not affect you.\n> \n> Thanks for the investigation! Something weird happens inside of Windows, it's a\n> pity that one can't just explicitly specify reserve/commit sizes during thread\n> creation. I am going to get access to some Windows machine and experiment there.\n> Btw, how to build Go on Windows? I tried to do it with Cygwin before but failed.\n\nThe default reserve/commit sizes specified in the PE header are used by Windows when the thread creation size parameters are zero, if there are no defaults specified in the PE header Windows uses it own defaults.\n\nWindows uses a guard page to prevent stack overflow and any operation that requires a commit after the \"reserve minus one page\" boundary will fail. Note that if the _initial_ commit page size is greater than or equal to the reserve size, Windows should make the new reserve size equal to the initial commit size rounded up to the nearest multiple of 1 MB.\n\nIf using vmmap, it's worth mentioning that there are two stacks when a 32 bit program runs on a 64 bit Windows system, a Wow64 and 32 bit stack; it's a 64 bit process executing 64 bit code on behalf of the 32 bit thread.\n\nFrom Alex's \"clean tree\" figures it doesn't look like Windows is using the reserve/commit defaults set in the PE header?\n\nDoes it matter if all the pages (reserve - 1) are committed at thread creation? If they are, I think it just means that initial start-up is a little slower but after that the program is a little faster.  \n\n-joe",
			"disapproval": false,
			"date": "2011-11-11 18:16:17.162176",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, hectorchu@gmail.com, mattn.jp@gmail.com, alex.brainman@gmail.com, jdpoirier@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-13 16:08:08.976873",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5371049/diff/5022/src/pkg/runtime/cgo/windows_386.c\nFile src/pkg/runtime/cgo/windows_386.c (right):\n\nhttp://codereview.appspot.com/5371049/diff/5022/src/pkg/runtime/cgo/windows_386.c#newcode41\nsrc/pkg/runtime/cgo/windows_386.c:41: ts.g->stackguard = (uintptr)&ts - STACKSIZE + 8*1024;\nI think you have problem with your pointer arithmetic here. How many bytes ts.g->stackguard and &ts apart after that line?",
			"disapproval": false,
			"date": "2011-11-14 04:57:43.559651",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "It LGTM. I was confused before. Thank you.\n\nAlex",
			"disapproval": false,
			"date": "2011-11-15 04:06:26.863790",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"golang-dev@googlegroups.com",
				"mattn.jp@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, hectorchu@gmail.com (cc: golang-dev@googlegroups.com, mattn.jp@gmail.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-10 07:44:38.041815",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Nov 10, 2011 at 12:26 PM, mattn <mattn.jp@gmail.com> wrote:\n> it seems that can't apply patch for amd64.s cleanly.\n\nWhat kind of error do you get? I've just applied it to a fresh\nclient... The file was changed just yesterday, so potentially you need\nhg sync\n",
			"disapproval": false,
			"date": "2011-11-10 08:35:06.720325",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/11/10 08:58:20, hector wrote:\n> On 10 November 2011 07:17,  <mailto:dvyukov@google.com> wrote:\n> > Hector, you added that comment:\n> > &nbsp; &nbsp; &nbsp; &nbsp;// Disable stack growth as we don't want Windows to\n> > &nbsp; &nbsp; &nbsp; &nbsp;// fiddle with the thread stack limits, which we set\n> > &nbsp; &nbsp; &nbsp; &nbsp;// ourselves to circumvent the stack checks in the\n> > &nbsp; &nbsp; &nbsp; &nbsp;// Windows exception dispatcher.\n> > &nbsp; &nbsp; &nbsp; &nbsp;// Commit size must be strictly less than reserve\n> > &nbsp; &nbsp; &nbsp; &nbsp;// size otherwise reserve will be rounded up to a\n> > &nbsp; &nbsp; &nbsp; &nbsp;// larger size, as verified with VMMap.\n> >\n> > Does it mean that StackReserve must be equal to StackCommit? Does SEH\n> > stack growth handler make harm for Go? Is it OK to set Reserve=1M and\n> > Commit=64k?\n> \n> We need to set the limits such that Windows will not attempt to grow\n> the stack, because when it does so it will modify the stack limits in\n> the TIB, which we explicitly set to 0 and 0xfff... on thread startup\n> to stop the bounds check in the exception dispatcher from failing.  I\n> achieved this by setting commit+1=reserve, because if they are equal\n> Windows will reserve memory larger than commit without actually using\n> it.\n\nGot it. Done.",
			"disapproval": false,
			"date": "2011-11-10 09:07:01.215756",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/11/12 03:39:28, Joe Poirier wrote:\n> On 2011/11/11 09:03:51, dvyukov wrote:\n> > \n> > Thanks for the investigation! Something weird happens inside of Windows, it's\n> a\n> > pity that one can't just explicitly specify reserve/commit sizes during thread\n> > creation. \n> \n> Isn't that what's taking place in newosproc when CreateThread is called?\n\nFirst, one can't specify both reserve and commit sizes, then Windows does some weird calculations and can ignore even the parameter that is explicitly specified.\n\n\n> runtime\u00b7newosproc(M *m, G *g, void *stk, void (*fn)(void))\n>  {\n>  \tthandle = runtime\u00b7stdcall(runtime\u00b7CreateThread, 6,\n> -\t\tnil, nil, runtime\u00b7tstart_stdcall, m, nil, nil);\n> +\t\tnil, (uintptr)0x10000, runtime\u00b7tstart_stdcall, m,\n> +\t\tSTACK_SIZE_PARAM_IS_A_RESERVATION, nil);\n> \n> My understanding is that setting the fifth param to\n> STACK_SIZE_PARAM_IS_A_RESERVATION says set the stack size to the value specified\n> in the second param (0x10000). If STACK_SIZE_PARAM_IS_A_RESERVATION isn't\n> specified then the second param specifies the commit size. If the second param\n> is zero, Windows looks for the default settings in the PE header and if those\n> aren't defined Windows uses its own defaults. \n> \n> -joe",
			"disapproval": false,
			"date": "2011-11-12 07:15:28.297898",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/11/13 16:08:08, dvyukov wrote:\n> Hello mailto:rsc@golang.org, mailto:hectorchu@gmail.com, mailto:mattn.jp@gmail.com,\n> mailto:alex.brainman@gmail.com, mailto:jdpoirier@gmail.com (cc: mailto:golang-dev@googlegroups.com),\n> \n> Please take another look.\n\nNow ld understands when it links a cgo program.\nFor non-cgo programs, I leave limits as is. However I explicitly pass 128k stack reserve when additional threads are created, it seems to reduce stack reserve from 1M to 128k.\nFor cgo programs I increase stack defaults to 1/2M. cgo runtime does not explicitly specify stack size.",
			"disapproval": false,
			"date": "2011-11-13 16:11:38.152707",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"mattn.jp@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, mattn.jp@gmail.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-10 06:30:03.767651",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, hectorchu@gmail.com, mattn.jp@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-10 09:05:52.139721",
			"approval": false
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 10 November 2011 16:18,  <dvyukov@google.com> wrote:\n> One more question. So now I set default stack reserve == default stack\n> commit == 1MB. However when runtime creates additional threads (not cgo\n> mode), I specify 64KB stack reserve. MSDN says that in such case stack\n> commit size == default stack commit size (1MB). So we have reserve=64KB\n> and commit=1MB, what will the OS do in such case? Will it just bump\n> reserve to 1MB?\n\nI don't know, but you can use VMMap from Microsoft to find out.\n",
			"disapproval": false,
			"date": "2011-11-10 18:35:23.646412",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/11/11 09:03:51, dvyukov wrote:\n> ...\n> Btw, how to build Go on Windows? I tried to do it with Cygwin before but failed.\n\nWe all use MinGW, not Cygwin. There is this document http://code.google.com/p/go-wiki/wiki/WindowsBuild that describes couple of ways to do it (mine is Theory #2). Also, I just build windows executables on my Linux PC (http://code.google.com/p/go-wiki/wiki/WindowsCrossCompiling) and then run them on Windows PC.\n\nAlex",
			"disapproval": false,
			"date": "2011-11-11 09:50:44.682895",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Sat, Nov 12, 2011 at 1:15 AM,  <dvyukov@google.com> wrote:\n> On 2011/11/12 03:39:28, Joe Poirier wrote:\n>>\n>> On 2011/11/11 09:03:51, dvyukov wrote:\n>> >\n>> > Thanks for the investigation! Something weird happens inside of\n>\n> Windows, it's\n>>\n>> a\n>> > pity that one can't just explicitly specify reserve/commit sizes\n>\n> during thread\n>>\n>> > creation.\n>\n>> Isn't that what's taking place in newosproc when CreateThread is\n>\n> called?\n>\n> First, one can't specify both reserve and commit sizes, then Windows\n> does some weird calculations and can ignore even the parameter that is\n> explicitly specified.\n>\nRight, not both at the same time.\n\nIs it possible that Windows is using the default commit size set in\nthe PE header when CreateThread is called with the\nSTACK_SIZE_PARAM_IS_A_RESERVATION parameter? And if the requested\nreserve size in the CreateThread call doesn't allow at least a guard\npage between it and the default commit size then Windows does the\nrounding up calculation?\n\nIt seems that STACK_SIZE_PARAM_IS_A_RESERVATION isn't a valid\nparameter on Windows 2K.\n",
			"disapproval": false,
			"date": "2011-11-12 16:46:17.595803",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/11/11 09:03:51, dvyukov wrote:\n> \n> Thanks for the investigation! Something weird happens inside of Windows, it's a\n> pity that one can't just explicitly specify reserve/commit sizes during thread\n> creation. \n\nIsn't that what's taking place in newosproc when CreateThread is called?\n\nruntime\u00b7newosproc(M *m, G *g, void *stk, void (*fn)(void))\n {\n \tthandle = runtime\u00b7stdcall(runtime\u00b7CreateThread, 6,\n-\t\tnil, nil, runtime\u00b7tstart_stdcall, m, nil, nil);\n+\t\tnil, (uintptr)0x10000, runtime\u00b7tstart_stdcall, m,\n+\t\tSTACK_SIZE_PARAM_IS_A_RESERVATION, nil);\n\nMy understanding is that setting the fifth param to STACK_SIZE_PARAM_IS_A_RESERVATION says set the stack size to the value specified in the second param (0x10000). If STACK_SIZE_PARAM_IS_A_RESERVATION isn't specified then the second param specifies the commit size. If the second param is zero, Windows looks for the default settings in the PE header and if those aren't defined Windows uses its own defaults. \n\n-joe",
			"disapproval": false,
			"date": "2011-11-12 03:39:28.134538",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Have you tested this?\nWhy does it fix the crash?\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-10 06:32:36.769757",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"mattn.jp@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "That is merely to ensure that it fixes the problem.\nNow the question is - can ld detect 386/amd64 and cgo/nocgo? It must be able to detect arch, but what about cgo? I suspect the answer is no.\nI think we can live with a big default stack, since it affects only the main thread. For additional threads we can specify required stack size in runtime which is aware of cgo.",
			"disapproval": false,
			"date": "2011-11-10 06:35:09.852677",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, hectorchu@gmail.com, mattn.jp@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-10 09:03:51.314571",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5371049/diff/5010/src/pkg/runtime/windows/thread.c\nFile src/pkg/runtime/windows/thread.c (right):\n\nhttp://codereview.appspot.com/5371049/diff/5010/src/pkg/runtime/windows/thread.c#newcode198\nsrc/pkg/runtime/windows/thread.c:198: STACK_SIZE_PARAM_IS_A_RESERVATION, nil);\nAdd (uintptr) before STACK_SIZE_PARAM_... also.",
			"disapproval": false,
			"date": "2011-11-10 09:06:59.485592",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/11/10 09:06:59, mattn wrote:\n> http://codereview.appspot.com/5371049/diff/5010/src/pkg/runtime/windows/thread.c\n> File src/pkg/runtime/windows/thread.c (right):\n> \n> http://codereview.appspot.com/5371049/diff/5010/src/pkg/runtime/windows/thread.c#newcode198\n> src/pkg/runtime/windows/thread.c:198: STACK_SIZE_PARAM_IS_A_RESERVATION, nil);\n> Add (uintptr) before STACK_SIZE_PARAM_... also.\n\nThanks\nDone",
			"disapproval": false,
			"date": "2011-11-10 09:07:53.658588",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/11/10 14:36:18, rsc wrote:\n> mattn, can you confirm that this fixes the bug?\n> \n> http://codereview.appspot.com/5371049/diff/6015/src/pkg/runtime/windows/thread.c\n> File src/pkg/runtime/windows/thread.c (right):\n> \n> http://codereview.appspot.com/5371049/diff/6015/src/pkg/runtime/windows/thread.c#newcode154\n> src/pkg/runtime/windows/thread.c:154: #define STACK_SIZE_PARAM_IS_A_RESERVATION\n> ((uintptr)0x00010000)\n> Please move this down to just above newosproc\n> (the function that uses it).\n\nDone",
			"disapproval": false,
			"date": "2011-11-10 16:13:07.428537",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/11/13 21:16:36, Joe Poirier wrote:\n> LGTM\n> \n> Tested on Win 2k and Win 7 64-bit (32/64 bit goroutine and 32 bit cgo life\n> programs). I was unable to test the 64 bit cgo life program because I didn't\n> have time to sort out a cgo install error that occurred during the 6g/6l\n> toolchain build. \n\nThanks!",
			"disapproval": false,
			"date": "2011-11-14 03:57:13.070179",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5371049/diff/5022/src/pkg/runtime/cgo/windows_386.c\nFile src/pkg/runtime/cgo/windows_386.c (right):\n\nhttp://codereview.appspot.com/5371049/diff/5022/src/pkg/runtime/cgo/windows_386.c#newcode41\nsrc/pkg/runtime/cgo/windows_386.c:41: ts.g->stackguard = (uintptr)&ts - STACKSIZE + 8*1024;\nOn 2011/11/14 06:11:02, dvyukov wrote:\n> \n> What do you mean? stackbase and stackguard must be (STACKSIZE - 8*1024) bytes\n> apart.\n\nThat is not what I see in asm in xinitcgo. stackguard gets set to \"LEA EDX,[EBP+FFFFBFFF]\" or some such. I would like to understand what is going on.",
			"disapproval": false,
			"date": "2011-11-14 06:24:28.759818",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Nov 10, 2011 at 9:41 AM, Dmitry Vyukov <dvyukov@google.com> wrote:\n> On Thu, Nov 10, 2011 at 9:32 AM, Russ Cox <rsc@golang.org> wrote:\n>> Have you tested this?\n>> Why does it fix the crash?\n>\n> I did not test it, I do not have a Windows machine.\n> I suspect that the problem was that stackguard underflow, because the\n> actual stack size is 64k, so when we subtract 1M it can easily\n> underflow.\n> In either case, numbers in ld and cgo must be equal one way or another.\n\nTo make it clear, a Windows developer (and existing code and\nlibraries) expects stack size to be 1M on 386 and 2M on amd64.\n",
			"disapproval": false,
			"date": "2011-11-10 06:43:21.273896",
			"approval": false
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 10 November 2011 07:17,  <dvyukov@google.com> wrote:\n> Hector, you added that comment:\n> \u00a0 \u00a0 \u00a0 \u00a0// Disable stack growth as we don't want Windows to\n> \u00a0 \u00a0 \u00a0 \u00a0// fiddle with the thread stack limits, which we set\n> \u00a0 \u00a0 \u00a0 \u00a0// ourselves to circumvent the stack checks in the\n> \u00a0 \u00a0 \u00a0 \u00a0// Windows exception dispatcher.\n> \u00a0 \u00a0 \u00a0 \u00a0// Commit size must be strictly less than reserve\n> \u00a0 \u00a0 \u00a0 \u00a0// size otherwise reserve will be rounded up to a\n> \u00a0 \u00a0 \u00a0 \u00a0// larger size, as verified with VMMap.\n>\n> Does it mean that StackReserve must be equal to StackCommit? Does SEH\n> stack growth handler make harm for Go? Is it OK to set Reserve=1M and\n> Commit=64k?\n\nWe need to set the limits such that Windows will not attempt to grow\nthe stack, because when it does so it will modify the stack limits in\nthe TIB, which we explicitly set to 0 and 0xfff... on thread startup\nto stop the bounds check in the exception dispatcher from failing.  I\nachieved this by setting commit+1=reserve, because if they are equal\nWindows will reserve memory larger than commit without actually using\nit.\n",
			"disapproval": false,
			"date": "2011-11-10 08:58:20.392807",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I am concerned about you increasing reserved and initial stack sizes for non-cgo apps. \n\n386 apps have only 2G of space to start with. Then Go garbage collector takes about 750M of that. \"Average\" Windows app reserves 1M of stack space per thread. But Go uses segmented stacks, so \"average\" Go app os-thread should not need that much. Some apps that call into special dlls that have deep stacks might fail, but not the ones calling standard Windows APIs. We will run out of address space sooner as os-threads are created. I think 256K stack size is too much as is.\n\nAs to initial stack size, we should commit as little memory as possible, not the whole reserve.\n\nI take the blame for neglecting windows part of cgo: tests aren't working, exception handler is not working, probably, many others. But, I don't uses it myself. So it is hard for me to push something I don't find myself useful. I will try and get cgo tests working on windows as much as I can as soon as I can.\n\nAlex\n\nhttp://codereview.appspot.com/5371049/diff/7005/src/cmd/ld/pe.c\nFile src/cmd/ld/pe.c (right):\n\nhttp://codereview.appspot.com/5371049/diff/7005/src/cmd/ld/pe.c#newcode661\nsrc/cmd/ld/pe.c:661: set(SizeOfStackCommit,  pe64 ? 0x001fffff : 0x000fffff);\nI did some experiments with vmmap as Hector suggested.\n\nHere are stack sizes as seen by vmmap after your patch has been applied (this is a simple non-cgo app):\n\nfirst thread: size=1024K committed=1024K\nnext  thread: size=1024K committed=1024K\n\nThis is for clean source tree:\n\nfirst thread: size=256K  committed=68K\nnext  thread: size=1024K committed=68K\n\nSo your change is making \"reserved\" space \"committed\" on thread stratup. I don't think we want that.\n\nNot related to your CL, but I looked why for \"clean source tree\" \"next thread size is 1024K\", while \"first thread size is 256K\". And it appears there is something special about relationship of SizeOfStackReserve and SizeOfStackCommit. I have changed the source here:\n\ndiff -r bf9901c10e5e src/cmd/ld/pe.c\n--- a/src/cmd/ld/pe.c\tThu Nov 10 14:02:14 2011 -0800\n+++ b/src/cmd/ld/pe.c\tFri Nov 11 11:59:35 2011 +1100\n@@ -651,7 +651,7 @@\n \t// size otherwise reserve will be rounded up to a\n \t// larger size, as verified with VMMap.\n \tset(SizeOfStackReserve, 0x00010000);\n-\tset(SizeOfStackCommit, 0x0000ffff);\n+\tset(SizeOfStackCommit, 0x00001000);\n \tset(SizeOfHeapReserve, 0x00100000);\n \tset(SizeOfHeapCommit, 0x00001000);\n \tset(NumberOfRvaAndSizes, 16);\n\nand the figures are\n\nfirst thread: size=256K  committed=16K\nnext  thread: size=64K committed=8K\n\nhttp://codereview.appspot.com/5371049/diff/7005/src/pkg/runtime/windows/thread.c\nFile src/pkg/runtime/windows/thread.c (right):\n\nhttp://codereview.appspot.com/5371049/diff/7005/src/pkg/runtime/windows/thread.c#newcode199\nsrc/pkg/runtime/windows/thread.c:199: STACK_SIZE_PARAM_IS_A_RESERVATION, nil);\nPlease, revert this change. This code does not get called when cgo runs, so it should not affect you.",
			"disapproval": false,
			"date": "2011-11-11 04:38:55.265111",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5371049/diff/7005/src/cmd/ld/pe.c\nFile src/cmd/ld/pe.c (right):\n\nhttp://codereview.appspot.com/5371049/diff/7005/src/cmd/ld/pe.c#newcode661\nsrc/cmd/ld/pe.c:661: set(SizeOfStackCommit,  pe64 ? 0x001fffff : 0x000fffff);\nAssuming the values represent a byte count, the default commit size should be a minimum of one guard page (4KB) smaller than the default reserve size here.",
			"disapproval": false,
			"date": "2011-11-12 03:56:22.992515",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5371049/diff/5022/src/pkg/runtime/cgo/windows_386.c\nFile src/pkg/runtime/cgo/windows_386.c (right):\n\nhttp://codereview.appspot.com/5371049/diff/5022/src/pkg/runtime/cgo/windows_386.c#newcode41\nsrc/pkg/runtime/cgo/windows_386.c:41: ts.g->stackguard = (uintptr)&ts - STACKSIZE + 8*1024;\nOn 2011/11/14 04:57:43, brainman wrote:\n> I think you have problem with your pointer arithmetic here. How many bytes\n> ts.g->stackguard and &ts apart after that line?\n\nWhat do you mean? stackbase and stackguard must be (STACKSIZE - 8*1024) bytes apart.",
			"disapproval": false,
			"date": "2011-11-14 06:11:02.364541",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "it seems that can't apply patch for amd64.s cleanly.\n\n",
			"disapproval": false,
			"date": "2011-11-10 08:26:01.041760",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/11/10 08:58:20, hector wrote:\n> On 10 November 2011 07:17,  <mailto:dvyukov@google.com> wrote:\n> > Hector, you added that comment:\n> > &nbsp; &nbsp; &nbsp; &nbsp;// Disable stack growth as we don't want Windows to\n> > &nbsp; &nbsp; &nbsp; &nbsp;// fiddle with the thread stack limits, which we set\n> > &nbsp; &nbsp; &nbsp; &nbsp;// ourselves to circumvent the stack checks in the\n> > &nbsp; &nbsp; &nbsp; &nbsp;// Windows exception dispatcher.\n> > &nbsp; &nbsp; &nbsp; &nbsp;// Commit size must be strictly less than reserve\n> > &nbsp; &nbsp; &nbsp; &nbsp;// size otherwise reserve will be rounded up to a\n> > &nbsp; &nbsp; &nbsp; &nbsp;// larger size, as verified with VMMap.\n> >\n> > Does it mean that StackReserve must be equal to StackCommit? Does SEH\n> > stack growth handler make harm for Go? Is it OK to set Reserve=1M and\n> > Commit=64k?\n> \n> We need to set the limits such that Windows will not attempt to grow\n> the stack, because when it does so it will modify the stack limits in\n> the TIB, which we explicitly set to 0 and 0xfff... on thread startup\n> to stop the bounds check in the exception dispatcher from failing.  I\n> achieved this by setting commit+1=reserve, because if they are equal\n> Windows will reserve memory larger than commit without actually using\n> it.\n\nOne more question. So now I set default stack reserve == default stack commit == 1MB. However when runtime creates additional threads (not cgo mode), I specify 64KB stack reserve. MSDN says that in such case stack commit size == default stack commit size (1MB). So we have reserve=64KB and commit=1MB, what will the OS do in such case? Will it just bump reserve to 1MB? If yes, maybe it's better to set commit to 64KB instead (the function does not allow to specify both values)? When we will have reserve=1MB commit=64KB (SEH stack grown handler should never fire because we set stackguard=stackbase-64KB). At least we will commit less.",
			"disapproval": false,
			"date": "2011-11-10 16:18:22.817525",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/11/11 04:38:55, brainman wrote:\n> I am concerned about you increasing reserved and initial stack sizes for non-cgo\n> apps. \n> \n> 386 apps have only 2G of space to start with. Then Go garbage collector takes\n> about 750M of that. \"Average\" Windows app reserves 1M of stack space per thread.\n> But Go uses segmented stacks, so \"average\" Go app os-thread should not need that\n> much. Some apps that call into special dlls that have deep stacks might fail,\n> but not the ones calling standard Windows APIs. We will run out of address space\n> sooner as os-threads are created. I think 256K stack size is too much as is.\n> \n> As to initial stack size, we should commit as little memory as possible, not the\n> whole reserve.\n> \n> I take the blame for neglecting windows part of cgo: tests aren't working,\n> exception handler is not working, probably, many others. But, I don't uses it\n> myself. So it is hard for me to push something I don't find myself useful. I\n> will try and get cgo tests working on windows as much as I can as soon as I can.\n> \n> Alex\n> \n> http://codereview.appspot.com/5371049/diff/7005/src/cmd/ld/pe.c\n> File src/cmd/ld/pe.c (right):\n> \n> http://codereview.appspot.com/5371049/diff/7005/src/cmd/ld/pe.c#newcode661\n> src/cmd/ld/pe.c:661: set(SizeOfStackCommit,  pe64 ? 0x001fffff : 0x000fffff);\n> I did some experiments with vmmap as Hector suggested.\n> \n> Here are stack sizes as seen by vmmap after your patch has been applied (this is\n> a simple non-cgo app):\n> \n> first thread: size=1024K committed=1024K\n> next  thread: size=1024K committed=1024K\n> \n> This is for clean source tree:\n> \n> first thread: size=256K  committed=68K\n> next  thread: size=1024K committed=68K\n> \n> So your change is making \"reserved\" space \"committed\" on thread stratup. I don't\n> think we want that.\n> \n> Not related to your CL, but I looked why for \"clean source tree\" \"next thread\n> size is 1024K\", while \"first thread size is 256K\". And it appears there is\n> something special about relationship of SizeOfStackReserve and\n> SizeOfStackCommit. I have changed the source here:\n> \n> diff -r bf9901c10e5e src/cmd/ld/pe.c\n> --- a/src/cmd/ld/pe.c\tThu Nov 10 14:02:14 2011 -0800\n> +++ b/src/cmd/ld/pe.c\tFri Nov 11 11:59:35 2011 +1100\n> @@ -651,7 +651,7 @@\n>  \t// size otherwise reserve will be rounded up to a\n>  \t// larger size, as verified with VMMap.\n>  \tset(SizeOfStackReserve, 0x00010000);\n> -\tset(SizeOfStackCommit, 0x0000ffff);\n> +\tset(SizeOfStackCommit, 0x00001000);\n>  \tset(SizeOfHeapReserve, 0x00100000);\n>  \tset(SizeOfHeapCommit, 0x00001000);\n>  \tset(NumberOfRvaAndSizes, 16);\n> \n> and the figures are\n> \n> first thread: size=256K  committed=16K\n> next  thread: size=64K committed=8K\n\nIt looks better, but earlier in this thread Hector said that if you set reserve!=commit+1 then stack growth SEH handler will mess things up.\n\n> \n> http://codereview.appspot.com/5371049/diff/7005/src/pkg/runtime/windows/thread.c\n> File src/pkg/runtime/windows/thread.c (right):\n> \n> http://codereview.appspot.com/5371049/diff/7005/src/pkg/runtime/windows/thread.c#newcode199\n> src/pkg/runtime/windows/thread.c:199: STACK_SIZE_PARAM_IS_A_RESERVATION, nil);\n> Please, revert this change. This code does not get called when cgo runs, so it\n> should not affect you.\n\nThanks for the investigation! Something weird happens inside of Windows, it's a pity that one can't just explicitly specify reserve/commit sizes during thread creation. I am going to get access to some Windows machine and experiment there. Btw, how to build Go on Windows? I tried to do it with Cygwin before but failed.",
			"disapproval": false,
			"date": "2011-11-11 09:03:51.185216",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5371049/diff/5022/src/pkg/runtime/cgo/windows_386.c\nFile src/pkg/runtime/cgo/windows_386.c (right):\n\nhttp://codereview.appspot.com/5371049/diff/5022/src/pkg/runtime/cgo/windows_386.c#newcode41\nsrc/pkg/runtime/cgo/windows_386.c:41: ts.g->stackguard = (uintptr)&ts - STACKSIZE + 8*1024;\nOn 2011/11/14 06:24:28, brainman wrote:\n> On 2011/11/14 06:11:02, dvyukov wrote:\n> > \n> > What do you mean? stackbase and stackguard must be (STACKSIZE - 8*1024) bytes\n> > apart.\n> \n> That is not what I see in asm in xinitcgo. stackguard gets set to \"LEA\n> EDX,[EBP+FFFFBFFF]\" or some such. I would like to understand what is going on.\n\nUnfortunately I don't have access to a Windows machine. So, on source code level both functions contain the same statement:\nstackguard = (uintptr)&localvar - STACKSIZE + 8*1024;\nCan you provide full asm listing of both functions? Then I think we will be able to figure out what is happening.",
			"disapproval": false,
			"date": "2011-11-14 06:56:08.594562",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "mattn, can you confirm that this fixes the bug?\n\nhttp://codereview.appspot.com/5371049/diff/6015/src/pkg/runtime/windows/thread.c\nFile src/pkg/runtime/windows/thread.c (right):\n\nhttp://codereview.appspot.com/5371049/diff/6015/src/pkg/runtime/windows/thread.c#newcode154\nsrc/pkg/runtime/windows/thread.c:154: #define STACK_SIZE_PARAM_IS_A_RESERVATION ((uintptr)0x00010000)\nPlease move this down to just above newosproc\n(the function that uses it).",
			"disapproval": false,
			"date": "2011-11-10 14:36:18.927095",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nTested on Win 2k and Win 7 64-bit (32/64 bit goroutine and 32 bit cgo life programs). I was unable to test the 64 bit cgo life program because I didn't have time to sort out a cgo install error that occurred during the 6g/6l toolchain build. \n\n-joe",
			"disapproval": false,
			"date": "2011-11-13 21:16:36.196582",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Russ, so what is with this? Is it LGTY? Joe Poirier confirmed that it fixes the issue.",
			"disapproval": false,
			"date": "2011-11-22 14:46:00.925859",
			"approval": false
		},
		{
			"sender": "snaury@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/11/10 08:58:20, hector wrote:\n> We need to set the limits such that Windows will not attempt to grow\n> the stack, because when it does so it will modify the stack limits in\n> the TIB, which we explicitly set to 0 and 0xfff... on thread startup\n> to stop the bounds check in the exception dispatcher from failing.  I\n> achieved this by setting commit+1=reserve, because if they are equal\n> Windows will reserve memory larger than commit without actually using\n> it.\n\nHector, but shouldn't it be the norm for stack reserve be at least stack commit + one page? It seems to me that Windows should be using the last page from stack reserve as a guard page, otherwise stack overflows in non-go code wouldn't be detected, see http://msdn.microsoft.com/en-us/library/windows/desktop/ms686774(v=vs.85).aspx\n\nThis makes be wonder what StackCommit==StackReserve-1 actually does, does it omit guard page altogether, does it force the last commit page to be guard page, or is it just an artifact of argument checking being done before rounding StackCommit up to the next page?\n\nNot only that, but StackBase and StackLimit are only changed on amd64, which means StackCommit doesn't need to be that big on 386.",
			"disapproval": false,
			"date": "2011-12-01 22:55:38.606294",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Dec 3, 2011 at 3:17 PM, <snaury@gmail.com> wrote:\n\n> On 2011/12/03 10:56:17, dvyukov wrote:\n>\n>> Hummm... you probably mix up non-cgo and cgo parts. STACKSIZE relates\n>>\n> to cgo,\n>\n>> while 128K relates to non-cgo programs.\n>>\n>\n> Ah, yes, I mixed them up. However, in that case 128K is too big anyway,\n> because sys.s (search for runtime\u00b7tstart) hard-codes 64K for both\n> windows 386 and amd64.\n>\n>\nWhen I do not specify the reserve or specify it larger or smaller than\n128k, OS tend to reserve 1M. And it is what was happening before, so it's a\nsignificant improvement anyway (was 1M, now 128k).\nI am tired of guessing that numbers, current numbers do not lead to crashes\nand are reasonably small. If you wish you may determine a better numbers\nand I will be happy use them. For each combination of numbers you need to\ncheck 16 things: cgo/non-cgo, main/non-main thread, 386/amd64,\ncommit/reserve size (I used that VMMap utility).\n",
			"disapproval": false,
			"date": "2011-12-03 11:35:03.517359",
			"approval": false
		},
		{
			"sender": "snaury@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Also, why does the patch use the number 8192 (8*1024) and even says \"2 guard pages\" in the comment? If TIB's StackBase/StackLimit are the concern, what it seems to be doing is in case of hitting that \"1st guard page\" allows system to fiddle with StackBase/StackLimit by taking one additional page from StackReserve, without actually stack overflowing. So what's the idea?",
			"disapproval": false,
			"date": "2011-12-01 23:06:10.350192",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Dec 2, 2011 at 1:55 AM,  <snaury@gmail.com> wrote:\n> On 2011/11/10 08:58:20, hector wrote:\n>>\n>> We need to set the limits such that Windows will not attempt to grow\n>> the stack, because when it does so it will modify the stack limits in\n>> the TIB, which we explicitly set to 0 and 0xfff... on thread startup\n>> to stop the bounds check in the exception dispatcher from failing. \u00a0I\n>> achieved this by setting commit+1=reserve, because if they are equal\n>> Windows will reserve memory larger than commit without actually using\n>> it.\n>\n> Hector, but shouldn't it be the norm for stack reserve be at least stack\n> commit + one page? It seems to me that Windows should be using the last\n> page from stack reserve as a guard page, otherwise stack overflows in\n> non-go code wouldn't be detected, see\n> http://msdn.microsoft.com/en-us/library/windows/desktop/ms686774(v=vs.85).aspx\n>\n> This makes be wonder what StackCommit==StackReserve-1 actually does,\n> does it omit guard page altogether, does it force the last commit page\n> to be guard page, or is it just an artifact of argument checking being\n> done before rounding StackCommit up to the next page?\n\nWindows seems to reserve at least commit+2pages. 2 pages are required\nto properly handle stack overflow exception - when a thread hits the\nlast but one page, the OS de-protects it and executes the exception\nhandler on it, while still having the last page protected (so that the\nhandler can't overwrite random memory). The reserved space can be\nincreased with SetThreadStackGuarantee() function (if you want 10\npages for your exception handler, you can specify that, then OS will\nreserve 11 pages).\n\nFrom what I see, that sizes in the executable image seem to be an\nexception. That is for the stack of the main thread both reserve and\ncommit sizes are equal to 64k, there seems to be no guard pages at\nall. For non-cgo code it is OK, because Go tracks stack limit\nmanually.\n\n> Not only that, but StackBase and StackLimit are only changed on amd64,\n> which means StackCommit doesn't need to be that big on 386.\n>\n> http://codereview.appspot.com/5371049/\n",
			"disapproval": false,
			"date": "2011-12-03 10:54:40.555321",
			"approval": false
		},
		{
			"sender": "snaury@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I also think there's another problem. In threadentry you use STACKSIZE constant for calculating stackguard, however in CreateThread you hard-coded 128K stack size. That would make stackguard a long way past stack.",
			"disapproval": false,
			"date": "2011-12-02 06:19:50.984992",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/12/02 06:19:50, snaury wrote:\n> I also think there's another problem. In threadentry you use STACKSIZE constant\n> for calculating stackguard, however in CreateThread you hard-coded 128K stack\n> size. That would make stackguard a long way past stack.\n\nHummm... you probably mix up non-cgo and cgo parts. STACKSIZE relates to cgo, while 128K relates to non-cgo programs.",
			"disapproval": false,
			"date": "2011-12-03 10:56:17.100092",
			"approval": false
		},
		{
			"sender": "snaury@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/12/03 10:56:17, dvyukov wrote:\n> Hummm... you probably mix up non-cgo and cgo parts. STACKSIZE relates to cgo,\n> while 128K relates to non-cgo programs.\n\nAh, yes, I mixed them up. However, in that case 128K is too big anyway, because sys.s (search for runtime\u00b7tstart) hard-codes 64K for both windows 386 and amd64.",
			"disapproval": false,
			"date": "2011-12-03 11:17:40.327821",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Dec 3, 2011 at 3:35 PM, Dmitry Vyukov <dvyukov@google.com> wrote:\n\n> On Sat, Dec 3, 2011 at 3:17 PM, <snaury@gmail.com> wrote:\n>\n>> On 2011/12/03 10:56:17, dvyukov wrote:\n>>\n>>> Hummm... you probably mix up non-cgo and cgo parts. STACKSIZE relates\n>>>\n>> to cgo,\n>>\n>>> while 128K relates to non-cgo programs.\n>>>\n>>\n>> Ah, yes, I mixed them up. However, in that case 128K is too big anyway,\n>> because sys.s (search for runtime\u00b7tstart) hard-codes 64K for both\n>> windows 386 and amd64.\n>>\n>>\n> When I do not specify the reserve or specify it larger or smaller than\n> 128k, OS tend to reserve 1M. And it is what was happening before, so it's a\n> significant improvement anyway (was 1M, now 128k).\n> I am tired of guessing that numbers, current numbers do not lead to\n> crashes and are reasonably small. If you wish you may determine a better\n> numbers and I will be happy use them. For each combination of numbers you\n> need to check 16 things: cgo/non-cgo, main/non-main thread, 386/amd64,\n> commit/reserve size (I used that VMMap utility).\n>\n\nThe problem is that Windows does not blindly use your numbers, you may\ndecrease a size but it will actually lead to increase.\n",
			"disapproval": false,
			"date": "2011-12-03 11:36:48.881199",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"snaury@gmail.com",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=a3e795ffefec ***\n\nld: increase default stack size on Windows for cgo\nFixes issue 2437.\n\nR=rsc, hectorchu, mattn.jp, alex.brainman, jdpoirier, snaury, n13m3y3r\nCC=golang-dev\nhttp://codereview.appspot.com/5371049",
			"disapproval": false,
			"date": "2011-12-07 13:53:38.593838",
			"approval": false
		},
		{
			"sender": "snaury@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"snaury@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/12/03 11:35:03, dvyukov wrote:\n> When I do not specify the reserve or specify it larger or smaller than\n> 128k, OS tend to reserve 1M. And it is what was happening before, so it's a\n> significant improvement anyway (was 1M, now 128k).\n> I am tired of guessing that numbers, current numbers do not lead to crashes\n> and are reasonably small. If you wish you may determine a better numbers\n> and I will be happy use them. For each combination of numbers you need to\n> check 16 things: cgo/non-cgo, main/non-main thread, 386/amd64,\n> commit/reserve size (I used that VMMap utility).\n\nSorry, I didn't know that (I thought I read the whole thread, but somehow missed that). It's interesting why this happens, could it be that page size is 64K on your machine? (while googling I found .NET mention of 256KB being the minimum stack size on Vista, http://msdn.microsoft.com/en-us/library/5cykbwz4.aspx). Anyway, since go code shouldn't be using more that 64K even changing constants in sys.s isn't needed. LGTM.",
			"disapproval": false,
			"date": "2011-12-03 11:48:08.630797",
			"approval": true
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"snaury@gmail.com",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This fixed the problem here as well in somewhat of a contrived example (cross-compiling Ubuntu => Windows via mingw32).",
			"disapproval": false,
			"date": "2011-12-05 01:46:27.482712",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"snaury@gmail.com",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What is matter that don't submit?\n\nOn 2011/12/05 01:46:27, niemeyer wrote:\n> This fixed the problem here as well in somewhat of a contrived example\n> (cross-compiling Ubuntu => Windows via mingw32).",
			"disapproval": false,
			"date": "2011-12-07 11:23:55.696303",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n",
			"disapproval": false,
			"date": "2011-12-07 19:05:10.106699",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"hectorchu@gmail.com",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"snaury@gmail.com",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/12/07 11:23:55, mattn wrote:\n> What is matter that don't submit?\n> \n> On 2011/12/05 01:46:27, niemeyer wrote:\n> > This fixed the problem here as well in somewhat of a contrived example\n> > (cross-compiling Ubuntu => Windows via mingw32).\n\nSince it touches a lot of subtle things I am waiting for Russ review. He seems to be busy with language changes, perhaps it makes sense to submit w/o his review, in the end the CL has 4 or 5 LGTMs...",
			"disapproval": false,
			"date": "2011-12-07 11:32:06.112401",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ok, I'll wait the time.\nbtw, currently cgo on windows does not work quitely caused by this issue. :(\n\n",
			"disapproval": false,
			"date": "2011-12-07 12:08:47.932924",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 5371049: ld: increase default stack size on Windows for cgo",
	"created": "2011-11-10 06:29:47.922634",
	"patchsets": [
		1,
		2001,
		4001,
		6002,
		6003,
		4002,
		4003,
		5010,
		6015,
		7004,
		7005,
		7024,
		5022,
		12003
	],
	"modified": "2012-01-08 18:51:11.420344",
	"closed": true,
	"issue": 5371049
}