{
	"description": "syscall: use error\n\n- syscall (not os) now defines the Errno type.\n- the low-level assembly functions Syscall, Syscall6, and so on\n  return Errno, not uintptr\n- syscall wrappers all return error, not uintptr.",
	"cc": [
		"golang-dev@googlegroups.com",
		"mikioh.mikioh@gmail.com",
		"r@golang.org",
		"alex.brainman@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/11/14 01:12:52, mikioh wrote:\n\n> A nit.\n\nAh, CL 5372081 already has the fix.",
			"disapproval": false,
			"date": "2011-11-14 02:23:07.719898",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-13 23:51:08.335140",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"r@golang.org",
				"alex.brainman@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=b5c1528ecf37 ***\n\nsyscall: use error\n\n- syscall (not os) now defines the Errno type.\n- the low-level assembly functions Syscall, Syscall6, and so on\n  return Errno, not uintptr\n- syscall wrappers all return error, not uintptr.\n\nR=golang-dev, mikioh.mikioh, r, alex.brainman\nCC=golang-dev\nhttp://codereview.appspot.com/5372080",
			"disapproval": false,
			"date": "2011-11-14 03:44:57.068419",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "A nit.\n\n\ndiff -r c3ae7b7f6930 src/pkg/net/http/serve_test.go\n--- a/src/pkg/net/http/serve_test.go\tSun Nov 13 14:48:22 2011 -0500\n+++ b/src/pkg/net/http/serve_test.go\tMon Nov 14 10:11:35 2011 +0900\n@@ -1145,7 +1145,7 @@\n \tln := &errorListener{[]error{\n \t\t&net.OpError{\n \t\t\tOp:  \"accept\",\n-\t\t\tErr: os.Errno(syscall.EMFILE),\n+\t\t\tErr: syscall.EMFILE,\n \t\t}}}\n \terr := Serve(ln, HandlerFunc(HandlerFunc(func(ResponseWriter, *Request) {})))",
			"disapproval": false,
			"date": "2011-11-14 01:12:52.460647",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"r@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\ni like what this does for portability; that was unexpected.\n\nnot sure if it's relevant but http://support.ipswitch.com/kb/WSK-19980714-EM29.htm\n\nhttp://codereview.appspot.com/5372080/diff/3/src/pkg/net/http/transport_windows.go\nFile src/pkg/net/http/transport_windows.go (right):\n\nhttp://codereview.appspot.com/5372080/diff/3/src/pkg/net/http/transport_windows.go#newcode15\nsrc/pkg/net/http/transport_windows.go:15: if ok && op.Op == \"WSARecv\" && op.Net == \"tcp\" && op.Err == syscall.Errno(10058) {\nwhile we're here, what the hell is 10058?\nthat TODO could use addressing.\n\nhttp://codereview.appspot.com/5372080/diff/3/src/pkg/syscall/mkerrors.sh\nFile src/pkg/syscall/mkerrors.sh (right):\n\nhttp://codereview.appspot.com/5372080/diff/3/src/pkg/syscall/mkerrors.sh#newcode205\nsrc/pkg/syscall/mkerrors.sh:205: cat _error.out | grep -f _error.grep | sed 's/=\\(.*\\)/= Errno(\\1)/'\nsed with backslashes makes me nervous about portability but i think it's ok outside plan 9\n\nhttp://codereview.appspot.com/5372080/diff/3/src/pkg/syscall/syscall_unix.go\nFile src/pkg/syscall/syscall_unix.go (right):\n\nhttp://codereview.appspot.com/5372080/diff/3/src/pkg/syscall/syscall_unix.go#newcode87\nsrc/pkg/syscall/syscall_unix.go:87: // An Errno is a positive number describing an error condition.\nwell, there's zero too. maybe unsigned number?",
			"disapproval": false,
			"date": "2011-11-14 02:32:47.295459",
			"approval": true
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"r@golang.org",
				"alex.brainman@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/11/14 02:32:47, r wrote:\n> \n> ...\n> src/pkg/net/http/transport_windows.go:15: if ok && op.Op == \"WSARecv\" && op.Net\n> == \"tcp\" && op.Err == syscall.Errno(10058) {\n> while we're here, what the hell is 10058?\n\nI have CL to give it name (http://codereview.appspot.com/5312048/). But, as Russ said (see CL thread), this Windows specific code shouldn't be here in the first place. Unfortunately, I have no alternative proposal yet.\n\nAlex",
			"disapproval": false,
			"date": "2011-11-14 02:44:01.181550",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"r@golang.org",
				"alex.brainman@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5372080/diff/3/src/pkg/syscall/zerrors_freebsd_386.go\nFile src/pkg/syscall/zerrors_freebsd_386.go (right):\n\nhttp://codereview.appspot.com/5372080/diff/3/src/pkg/syscall/zerrors_freebsd_386.go#newcode1219\nsrc/pkg/syscall/zerrors_freebsd_386.go:1219: ECHO            = Errno(0x8)\nA series of ECHO, ECHO to ECHOPRT, is not included in errno.h.\n\nhttp://codereview.appspot.com/5372080/diff/3/src/pkg/syscall/zerrors_freebsd_amd64.go\nFile src/pkg/syscall/zerrors_freebsd_amd64.go (right):\n\nhttp://codereview.appspot.com/5372080/diff/3/src/pkg/syscall/zerrors_freebsd_amd64.go#newcode1219\nsrc/pkg/syscall/zerrors_freebsd_amd64.go:1219: ECHO            = Errno(0x8)\nsame as freebsd/386.\n\nhttp://codereview.appspot.com/5372080/diff/3/src/pkg/syscall/zerrors_openbsd_386.go\nFile src/pkg/syscall/zerrors_openbsd_386.go (right):\n\nhttp://codereview.appspot.com/5372080/diff/3/src/pkg/syscall/zerrors_openbsd_386.go#newcode1185\nsrc/pkg/syscall/zerrors_openbsd_386.go:1185: ECHO            = Errno(0x8)\nsame as freebsd.\n\nhttp://codereview.appspot.com/5372080/diff/3/src/pkg/syscall/zerrors_openbsd_amd64.go\nFile src/pkg/syscall/zerrors_openbsd_amd64.go (right):\n\nhttp://codereview.appspot.com/5372080/diff/3/src/pkg/syscall/zerrors_openbsd_amd64.go#newcode1185\nsrc/pkg/syscall/zerrors_openbsd_amd64.go:1185: ECHO            = Errno(0x8)\nsame as freebsd.",
			"disapproval": false,
			"date": "2011-11-14 03:24:38.176916",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Thanks.\n\nI edited the z-files for freebsd, openbsd, and windows by hand,\nbecause I do not have the right machines on which to run mkerrors.sh.\nI hope that once this is checked in, you or someone else with access\nto the appropriate machines can rerun mkall.sh and send a CL with\ntruly machine-generated z-files.  If ECHO still ends up in the list,\nwe should fix mkall.sh to exclude it.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-14 03:27:24.380316",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Sun, Nov 13, 2011 at 21:32,  <r@golang.org> wrote:\n> src/pkg/syscall/syscall_unix.go:87: // An Errno is a positive number\n> describing an error condition.\n> well, there's zero too. maybe unsigned number?\n\nnow\n\n// An Errno is an unsigned number describing an error condition.\n// It implements the error interface.  The zero Errno is by convention\n// a non-error, so code to convert from Errno to error should use:\n//\terr = nil\n//\tif errno != 0 {\n//\t\terr = errno\n//\t}\ntype Errno uintptr\n",
			"disapproval": false,
			"date": "2011-11-14 03:30:35.099494",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5372080: syscall: use error",
	"created": "2011-11-12 19:52:52.654467",
	"patchsets": [
		1,
		3,
		4002
	],
	"modified": "2011-11-14 03:45:00.143644",
	"closed": true,
	"issue": 5372080
}