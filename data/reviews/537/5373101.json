{
	"description": "reflect: make Value an opaque struct\n\nMaking Value opaque means we can drop the interface kludges\nin favor of a significantly simpler and faster representation.\nv.Kind() will be a prime candidate for inlining too.\n\nOn a Thinkpad X201s using -benchtime 10:\n\nbenchmark                           old ns/op    new ns/op    delta\njson.BenchmarkCodeEncoder           284391780    157415960  -44.65%\njson.BenchmarkCodeMarshal           286979140    158992020  -44.60%\njson.BenchmarkCodeDecoder           717175800    388288220  -45.86%\njson.BenchmarkCodeUnmarshal         734470500    404548520  -44.92%\njson.BenchmarkCodeUnmarshalReuse    707172280    385258720  -45.52%\njson.BenchmarkSkipValue              24630036     18557062  -24.66%\n\nbenchmark                            old MB/s     new MB/s  speedup\njson.BenchmarkCodeEncoder                6.82        12.33    1.81x\njson.BenchmarkCodeMarshal                6.76        12.20    1.80x\njson.BenchmarkCodeDecoder                2.71         5.00    1.85x\njson.BenchmarkCodeUnmarshal              2.64         4.80    1.82x\njson.BenchmarkCodeUnmarshalReuse         2.74         5.04    1.84x\njson.BenchmarkSkipValue                 77.92       103.42    1.33x\n\nI cannot explain why BenchmarkSkipValue gets faster.\nMaybe it is one of those code alignment things.",
	"cc": [
		"iant@golang.org",
		"r@golang.org",
		"gri@golang.org",
		"r@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Tue, Nov 15, 2011 at 16:04,  <gri@golang.org> wrote:\n> (sometimes a pointer, sometimes not)\n> wouldn't uintptr be the better type here?\n\nI used unsafe.Pointer so that the garbage collector knows\nit can be a pointer when it appears in a structure.  It may\nnot matter in this case but I think it's a good habit.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-15 21:15:11.215119",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello iant, r (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2011-11-15 19:48:54.010646",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "FYI\n\nhttp://codereview.appspot.com/5373101/diff/5004/src/pkg/reflect/value.go\nFile src/pkg/reflect/value.go (right):\n\nhttp://codereview.appspot.com/5373101/diff/5004/src/pkg/reflect/value.go#newcode59\nsrc/pkg/reflect/value.go:59: typ       *commonType\ngofmt?\n\nhttp://codereview.appspot.com/5373101/diff/5004/src/pkg/reflect/value.go#newcode66\nsrc/pkg/reflect/value.go:66: val unsafe.Pointer  // value word (sometimes a pointer, sometimes not)\nwouldn't uintptr be the better type here?\n\nhttp://codereview.appspot.com/5373101/diff/5004/src/pkg/reflect/value.go#newcode69\nsrc/pkg/reflect/value.go:69: // The lowest bits are flag bits:\nI would put this together with the flag type decl\n\nhttp://codereview.appspot.com/5373101/diff/5004/src/pkg/reflect/value.go#newcode136\nsrc/pkg/reflect/value.go:136: // Because the value sometimes holds a pointer, we use\nstill seems uintptr seems like the better type\n\nhttp://codereview.appspot.com/5373101/diff/5004/src/pkg/reflect/value.go#newcode224\nsrc/pkg/reflect/value.go:224: // mustBe panics if f's kind is not want.\nthis reads funny",
			"disapproval": false,
			"date": "2011-11-15 21:04:54.334447",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "FYI\n\nhttp://codereview.appspot.com/5373101/diff/5004/src/pkg/reflect/value.go\nFile src/pkg/reflect/value.go (right):\n\nhttp://codereview.appspot.com/5373101/diff/5004/src/pkg/reflect/value.go#newcode740\nsrc/pkg/reflect/value.go:740: val = unsafe.Pointer(uintptr(v.val) << (offset*8))\nDo you not have to worry about masking val?\n\nhttp://codereview.appspot.com/5373101/diff/5004/src/pkg/reflect/value.go#newcode771\nsrc/pkg/reflect/value.go:771: if v.flag&flagIndir != 0 {\nThis code gets pretty repetitive, and so does the Uint code.  It might be a good idea to a few comments explaining why the code looks this way, to avoid a future attempt at simplification which will lead to heap allocation.",
			"disapproval": false,
			"date": "2011-11-16 14:05:10.036374",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5373101/diff/8001/src/pkg/reflect/type.go\nFile src/pkg/reflect/type.go (right):\n\nhttp://codereview.appspot.com/5373101/diff/8001/src/pkg/reflect/type.go#newcode191\nsrc/pkg/reflect/type.go:191: type Kind uintptr\nwhy? it's 8 times bigger for no value i can see other than to avoid a conversion in a place or two\n\nhttp://codereview.appspot.com/5373101/diff/8001/src/pkg/reflect/value.go\nFile src/pkg/reflect/value.go (right):\n\nhttp://codereview.appspot.com/5373101/diff/8001/src/pkg/reflect/value.go#newcode80\nsrc/pkg/reflect/value.go:80: // If typ.size > ptrSize, code can assume that flagIndir is set.\n> or >=?\n\nhttp://codereview.appspot.com/5373101/diff/8001/src/pkg/reflect/value.go#newcode228\nsrc/pkg/reflect/value.go:228: // mustBe panics if f's kind is not want.\nif you change the variable name to wanted or expected, the code's just fine and the comment reads better.",
			"disapproval": false,
			"date": "2011-11-16 23:26:39.890670",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Nov 16, 2011 at 09:05,  <iant@golang.org> wrote:\n> http://codereview.appspot.com/5373101/diff/5004/src/pkg/reflect/value.go#newcode740\n> src/pkg/reflect/value.go:740: val = unsafe.Pointer(uintptr(v.val) <<\n> (offset*8))\n> Do you not have to worry about masking val?\n\nI don't think so.  Nothing assumes that there is\nreal data later in the word, because that would\nimply an assumption about the byte order of\nthe word, which I have avoided except in this\nline of code.\n\n> http://codereview.appspot.com/5373101/diff/5004/src/pkg/reflect/value.go#newcode771\n> src/pkg/reflect/value.go:771: if v.flag&flagIndir != 0 {\n> This code gets pretty repetitive, and so does the Uint code. \u00a0It might\n> be a good idea to a few comments explaining why the code looks this way,\n> to avoid a future attempt at simplification which will lead to heap\n> allocation.\n\nEven better, escape analysis is strong enough that\nI can remove the duplication.  Done.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-16 22:29:24.262881",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Nov 16, 2011 at 18:26,  <r@golang.org> wrote:\n> why? it's 8 times bigger for no value i can see other than to avoid a\n> conversion in a place or two\n\nIt's not stored in any structs that I can find,\nand it avoids word<->byte conversions everwhere\nit is used.\n\n> src/pkg/reflect/value.go:80: // If typ.size > ptrSize, code can assume\n> that flagIndir is set.\n> or >=?\n\nIf typ.size == ptrSize then an indirect isn't necessary.\n",
			"disapproval": false,
			"date": "2011-11-16 23:31:42.258544",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Nov 16, 2011, at 3:31 PM, Russ Cox wrote:\n\n> On Wed, Nov 16, 2011 at 18:26,  <r@golang.org> wrote:\n>> why? it's 8 times bigger for no value i can see other than to avoid a\n>> conversion in a place or two\n> \n> It's not stored in any structs that I can find,\n> and it avoids word<->byte conversions everwhere\n> it is used.\n\n== and so on will use bigger words. it's obviously not important but it bugs me a little. uintptr is such an odd choice for a value that's never larger than about 20.\n\n\n> \n>> src/pkg/reflect/value.go:80: // If typ.size > ptrSize, code can assume\n>> that flagIndir is set.\n>> or >=?\n> \n> If typ.size == ptrSize then an indirect isn't necessary.\n\n",
			"disapproval": false,
			"date": "2011-11-16 23:33:38.656408",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=7a96ed8294b7 ***\n\nreflect: make Value an opaque struct\n\nMaking Value opaque means we can drop the interface kludges\nin favor of a significantly simpler and faster representation.\nv.Kind() will be a prime candidate for inlining too.\n\nOn a Thinkpad X201s using -benchtime 10:\n\nbenchmark                           old ns/op    new ns/op    delta\njson.BenchmarkCodeEncoder           284391780    157415960  -44.65%\njson.BenchmarkCodeMarshal           286979140    158992020  -44.60%\njson.BenchmarkCodeDecoder           717175800    388288220  -45.86%\njson.BenchmarkCodeUnmarshal         734470500    404548520  -44.92%\njson.BenchmarkCodeUnmarshalReuse    707172280    385258720  -45.52%\njson.BenchmarkSkipValue              24630036     18557062  -24.66%\n\nbenchmark                            old MB/s     new MB/s  speedup\njson.BenchmarkCodeEncoder                6.82        12.33    1.81x\njson.BenchmarkCodeMarshal                6.76        12.20    1.80x\njson.BenchmarkCodeDecoder                2.71         5.00    1.85x\njson.BenchmarkCodeUnmarshal              2.64         4.80    1.82x\njson.BenchmarkCodeUnmarshalReuse         2.74         5.04    1.84x\njson.BenchmarkSkipValue                 77.92       103.42    1.33x\n\nI cannot explain why BenchmarkSkipValue gets faster.\nMaybe it is one of those code alignment things.\n\nR=iant, r, gri, r\nCC=golang-dev\nhttp://codereview.appspot.com/5373101",
			"disapproval": false,
			"date": "2011-11-17 00:18:29.416894",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5373101: reflect: make Value an opaque struct",
	"created": "2011-11-15 17:23:04.928397",
	"patchsets": [
		1,
		2001,
		3,
		5004,
		8001,
		13001,
		15001
	],
	"modified": "2011-11-17 00:18:30.688242",
	"closed": true,
	"issue": 5373101
}