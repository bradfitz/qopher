{
	"description": "go.crypto/pbkdf2: New package\n\nImplements PKCS#5 v2.0 and potentially the future v2.1.",
	"cc": [
		"agl@golang.org",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"luitvd@gmail.com",
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for doing this.  I am looking forward to\nhaving this in a standard place.\n\nhttp://codereview.appspot.com/5587050/diff/3005/pbkdf2/pbkdf2.go\nFile pbkdf2/pbkdf2.go (right):\n\nhttp://codereview.appspot.com/5587050/diff/3005/pbkdf2/pbkdf2.go#newcode56\npbkdf2/pbkdf2.go:56: func New(h func() hash.Hash) func(P, S []byte, c, dkLen int) []byte {\nThere's no benefit to splitting the arguments here.\nIf someone really wants a function curried like this,\nit is easy for them to construct it.\nPlease make this a simple function instead of a\nfunction that returns a function.\nAlso, please name the arguments in a way that is useful for\nusers of this library who are not familiar with the RFC, which\nwill be the majority of the users.  \n\n// Key returns a key derived using the given password, salt,\n// iteration count, key length, and hash function (sha1.New for PBKDF v2.0).\nfunc Key(password, salt []byte, iter, keylen int, h func() hash.Hash) []byte\n\nPlease use lower-case variables for PRF and DK too.\nIn the implementation, declare\n\nvar buf [4]byte\n\noutside the loop, and then the binary.Write becomes\n\nbinary.BigEndian.PutUint32(buf[:], uint32(block))\nprf.Write(buf[:4])\n\nhttp://codereview.appspot.com/5587050/diff/3005/pbkdf2/pbkdf2.go#newcode60\npbkdf2/pbkdf2.go:60: l := (dkLen + hLen - 1) / hLen\nPlease make this nblock; it looks too much like 1.\n\nhttp://codereview.appspot.com/5587050/diff/3005/pbkdf2/pbkdf2.go#newcode63\npbkdf2/pbkdf2.go:63: for block := 1; block <= l; block += 1 {\n,s/ += 1/++/g",
			"disapproval": false,
			"date": "2012-01-31 16:41:15.339266",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jan 31, 2012 at 11:50,  <luitvd@gmail.com> wrote:\n> My idea with this was to keep it identical to the RFC spec.\n\nI appreciate that, but I am not really worried about catering\nto people who have read the spec.  Those are exactly the\nkind of people who don't need this written for them.\nI am worried about people like me, who find out that\nthey are supposed to compute a PBKDF2 hash and\njust want to get their work done.  It is more important to\nhave a simple, easy to use API than it is to mimic the spec.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-31 16:54:19.495832",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jan 31, 2012 at 11:50,  <luitvd@gmail.com> wrote:\n> This loop isn't run that often. Only CEIL(dkLen / hLen) times. Are those\n> still an issue in that case?\n\nIf it's worth writing up in a standard library, it's worth writing up well.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-31 16:54:41.934555",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"luitvd@gmail.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5587050/diff/3005/pbkdf2/pbkdf2.go\nFile pbkdf2/pbkdf2.go (right):\n\nhttp://codereview.appspot.com/5587050/diff/3005/pbkdf2/pbkdf2.go#newcode37\npbkdf2/pbkdf2.go:37: therefor increases security, but choosing one that's too high might make key\n\"Using a higher iteration count will increase the cost of an exhaustive search but will also make derivation proportionally slower.\"\n\nhttp://codereview.appspot.com/5587050/diff/3005/pbkdf2/pbkdf2.go#newcode49\npbkdf2/pbkdf2.go:49: // given hashing function. New(sha1.New) will create a key derivation function\ns/hashing/hash/\n\nhttp://codereview.appspot.com/5587050/diff/3005/pbkdf2/pbkdf2.go#newcode53\npbkdf2/pbkdf2.go:53: // The returned function takes four arguments; first two of type []byte and\nThe types are given in the function. Rather than explain here, it would be better to given them better names on line 56: password, salt, count and outputLen, say.\n\nhttp://codereview.appspot.com/5587050/diff/3005/pbkdf2/pbkdf2.go#newcode68\npbkdf2/pbkdf2.go:68: binary.Write(PRF, binary.BigEndian, uint32(block))\nin an inner loop like this, serialising block by hand may well be better.\n\nhttp://codereview.appspot.com/5587050/diff/3005/pbkdf2/pbkdf2.go#newcode69\npbkdf2/pbkdf2.go:69: U := PRF.Sum(nil)\nby reslicing and reusing U, you can save a lot of allocations here and below.",
			"disapproval": false,
			"date": "2012-01-31 16:31:21.687960",
			"approval": false
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.crypto",
			"disapproval": false,
			"date": "2012-01-31 16:14:01.266265",
			"approval": false
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/31 16:31:21, agl1 wrote:\n> http://codereview.appspot.com/5587050/diff/3005/pbkdf2/pbkdf2.go#newcode53\n> pbkdf2/pbkdf2.go:53: // The returned function takes four arguments; first two of\n> type []byte and\n> The types are given in the function. Rather than explain here, it would be\n> better to given them better names on line 56: password, salt, count and\n> outputLen, say.\n\nMy idea with this was to keep it identical to the RFC spec.\n\n> http://codereview.appspot.com/5587050/diff/3005/pbkdf2/pbkdf2.go#newcode68\n> pbkdf2/pbkdf2.go:68: binary.Write(PRF, binary.BigEndian, uint32(block))\n> in an inner loop like this, serialising block by hand may well be better.\n> \n> http://codereview.appspot.com/5587050/diff/3005/pbkdf2/pbkdf2.go#newcode69\n> pbkdf2/pbkdf2.go:69: U := PRF.Sum(nil)\n> by reslicing and reusing U, you can save a lot of allocations here and below.\n\nThis loop isn't run that often. Only CEIL(dkLen / hLen) times. Are those still an issue in that case?\n\n-Luit",
			"disapproval": false,
			"date": "2012-01-31 16:50:19.258724",
			"approval": false
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Good points all around. Now what to call this modified function? New doesn't sound to appropriate to me with the function signature you proposed. \n\n-Luit",
			"disapproval": false,
			"date": "2012-01-31 17:10:55.431043",
			"approval": false
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-31 20:46:30.095824",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jan 31, 2012 at 12:10,  <luitvd@gmail.com> wrote:\n> Good points all around. Now what to call this modified function? New\n> doesn't sound to appropriate to me with the function signature you\n> proposed.\n\nHow about Key?  Then the call looks like pbkdf2.Key, which\nis in fact what it returns.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-31 17:14:02.916124",
			"approval": false
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-31 21:14:47.742545",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"luitvd@gmail.com",
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nLeaving for agl",
			"disapproval": false,
			"date": "2012-01-31 21:21:03.535805",
			"approval": true
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"luitvd@gmail.com",
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as b5c95223a8c6 ***\n\ngo.crypto/pbkdf2: New package\n\nImplements PKCS#5 v2.0 and potentially the future v2.1.\n\nR=agl, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5587050\n\nCommitter: Adam Langley <agl@golang.org>",
			"disapproval": false,
			"date": "2012-02-01 19:20:36.683955",
			"approval": false
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-31 20:45:10.160132",
			"approval": false
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looking forward to agl's improvements.\n\n-Luit\n\nhttp://codereview.appspot.com/5587050/diff/3005/pbkdf2/pbkdf2.go\nFile pbkdf2/pbkdf2.go (right):\n\nhttp://codereview.appspot.com/5587050/diff/3005/pbkdf2/pbkdf2.go#newcode37\npbkdf2/pbkdf2.go:37: therefor increases security, but choosing one that's too high might make key\nOn 2012/01/31 16:31:21, agl1 wrote:\n> \"Using a higher iteration count will increase the cost of an exhaustive search\n> but will also make derivation proportionally slower.\"\n\nDone.\n\nhttp://codereview.appspot.com/5587050/diff/3005/pbkdf2/pbkdf2.go#newcode49\npbkdf2/pbkdf2.go:49: // given hashing function. New(sha1.New) will create a key derivation function\nOn 2012/01/31 16:31:21, agl1 wrote:\n> s/hashing/hash/\n\nDone.\n\nhttp://codereview.appspot.com/5587050/diff/3005/pbkdf2/pbkdf2.go#newcode53\npbkdf2/pbkdf2.go:53: // The returned function takes four arguments; first two of type []byte and\nOn 2012/01/31 16:31:21, agl1 wrote:\n> The types are given in the function. Rather than explain here, it would be\n> better to given them better names on line 56: password, salt, count and\n> outputLen, say.\n\nDone.\n\nhttp://codereview.appspot.com/5587050/diff/3005/pbkdf2/pbkdf2.go#newcode56\npbkdf2/pbkdf2.go:56: func New(h func() hash.Hash) func(P, S []byte, c, dkLen int) []byte {\nOn 2012/01/31 16:41:15, rsc wrote:\n> There's no benefit to splitting the arguments here.\n> If someone really wants a function curried like this,\n> it is easy for them to construct it.\n> Please make this a simple function instead of a\n> function that returns a function.\n> Also, please name the arguments in a way that is useful for\n> users of this library who are not familiar with the RFC, which\n> will be the majority of the users.  \n> \n> // Key returns a key derived using the given password, salt,\n> // iteration count, key length, and hash function (sha1.New for PBKDF v2.0).\n> func Key(password, salt []byte, iter, keylen int, h func() hash.Hash) []byte\n> \n> Please use lower-case variables for PRF and DK too.\n> In the implementation, declare\n> \n> var buf [4]byte\n> \n> outside the loop, and then the binary.Write becomes\n> \n> binary.BigEndian.PutUint32(buf[:], uint32(block))\n> prf.Write(buf[:4])\n> \n\nDone.\n\nhttp://codereview.appspot.com/5587050/diff/3005/pbkdf2/pbkdf2.go#newcode60\npbkdf2/pbkdf2.go:60: l := (dkLen + hLen - 1) / hLen\nOn 2012/01/31 16:41:15, rsc wrote:\n> Please make this nblock; it looks too much like 1.\n\nDone.\n\nhttp://codereview.appspot.com/5587050/diff/3005/pbkdf2/pbkdf2.go#newcode63\npbkdf2/pbkdf2.go:63: for block := 1; block <= l; block += 1 {\nOn 2012/01/31 16:41:15, rsc wrote:\n> ,s/ += 1/++/g\n\nDone.\n\nhttp://codereview.appspot.com/5587050/diff/3005/pbkdf2/pbkdf2.go#newcode68\npbkdf2/pbkdf2.go:68: binary.Write(PRF, binary.BigEndian, uint32(block))\nOn 2012/01/31 16:31:21, agl1 wrote:\n> in an inner loop like this, serialising block by hand may well be better.\n\nDone.\n\nhttp://codereview.appspot.com/5587050/diff/3005/pbkdf2/pbkdf2.go#newcode69\npbkdf2/pbkdf2.go:69: U := PRF.Sum(nil)\nOn 2012/01/31 16:31:21, agl1 wrote:\n> by reslicing and reusing U, you can save a lot of allocations here and below.\n\nDone.\n\nhttp://codereview.appspot.com/5587050/diff/12001/pbkdf2/pbkdf2.go\nFile pbkdf2/pbkdf2.go (right):\n\nhttp://codereview.appspot.com/5587050/diff/12001/pbkdf2/pbkdf2.go#newcode62\npbkdf2/pbkdf2.go:62: for n := 2; n <= iter; n += 1 {\nOn 2012/01/31 21:06:54, agl1 wrote:\n> n++\n\nDone.",
			"disapproval": false,
			"date": "2012-02-01 12:16:27.167989",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"luitvd@gmail.com",
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. You can still save significant numbers of allocations, but I can fix that up when landing if you prefer.\n\nhttp://codereview.appspot.com/5587050/diff/12001/pbkdf2/pbkdf2.go\nFile pbkdf2/pbkdf2.go (right):\n\nhttp://codereview.appspot.com/5587050/diff/12001/pbkdf2/pbkdf2.go#newcode62\npbkdf2/pbkdf2.go:62: for n := 2; n <= iter; n += 1 {\nn++",
			"disapproval": false,
			"date": "2012-01-31 21:06:54.744119",
			"approval": true
		},
		{
			"sender": "luitvd@gmail.com",
			"recipients": [
				"luitvd@gmail.com",
				"agl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/31 21:06:54, agl1 wrote:\n> LGTM. You can still save significant numbers of allocations, but I can fix that\n> up when landing if you prefer.\n\nIt's fine by me if you want to optimize it a little. I'll watch the hg blame in a few days and see what's changed. \n\nCheers,\n-Luit",
			"disapproval": false,
			"date": "2012-01-31 21:13:53.092969",
			"approval": false
		}
	],
	"owner_email": "luitvd@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Luit",
	"subject": "code review 5587050: go.crypto/pbkdf2: New package",
	"created": "2012-01-31 16:12:39.173589",
	"patchsets": [
		1,
		2001,
		3005,
		8001,
		12001,
		11002
	],
	"modified": "2012-02-01 19:38:33.003657",
	"closed": true,
	"issue": 5587050
}