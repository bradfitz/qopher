{
	"description": "net: coalesce duplicate in-flight DNS lookups\n\nIn Issue 5625, Russ says: \"We should at least have a cache of\ninflight lookups, so that 100 simultaneous dials of one host\nname don't do the work 100x. That's easy and (assume we forget\nthe answer once they all get it) doesn't pose any consistency\nproblems. It just merges simultaneous work.\"\n\nThis brings in singleflight (unexported) from Google /\nCamlistore, but without its tests. Maybe we should put it\nsomewhere in the standard library. But not now.\n\nUpdate issue 5625",
	"cc": [
		"golang-dev@googlegroups.com",
		"iant@golang.org",
		"cespare@gmail.com",
		"rsc@golang.org",
		"dave@cheney.net",
		"rogpeppe@gmail.com",
		"remyoudompheng@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-06-06 13:36:08.826820",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nIn CL description, s/coallesce/coalesce/.",
			"disapproval": false,
			"date": "2013-06-06 22:42:40.910530",
			"approval": true
		},
		{
			"sender": "cespare@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"cespare@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10079043/diff/5001/src/pkg/net/lookup.go\nFile src/pkg/net/lookup.go (right):\n\nhttps://codereview.appspot.com/10079043/diff/5001/src/pkg/net/lookup.go#newcode16\nsrc/pkg/net/lookup.go:16: return addrs, err\nreturn lookupHost(host)   ?",
			"disapproval": false,
			"date": "2013-06-07 08:17:59.158420",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"cespare@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I agree with Ian: please return separate copies of the value if there were multiple people waiting for it.",
			"disapproval": false,
			"date": "2013-06-10 17:47:00.870590",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I believe that was Dominik's position, but I agree.\r\n\r\nWill do.\r\n\r\n\r\n\r\nOn Mon, Jun 10, 2013 at 7:47 PM, <rsc@golang.org> wrote:\r\n\r\n> I agree with Ian: please return separate copies of the value if there\r\n> were multiple people waiting for it.\r\n>\r\n>\r\n> https://codereview.appspot.**com/10079043/<https://codereview.appspot.com/10079043/>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-06-10 18:24:49.354020",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"cespare@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I like this, singleflight is very nice. I have a concern that the singleflight cache will cache lookups forever, although the libc resolver is possibly never caching them. I don't think either is the correct behaviour.",
			"disapproval": false,
			"date": "2013-06-11 11:19:12.282290",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"cespare@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10079043/diff/5001/src/pkg/net/lookup.go\nFile src/pkg/net/lookup.go (right):\n\nhttps://codereview.appspot.com/10079043/diff/5001/src/pkg/net/lookup.go#newcode12\nsrc/pkg/net/lookup.go:12: \nlookupHostMerge doesn't mean much to me, how about cachedLookupHost or lookupHostCached? Or maybe just a comment to outline the role of this method.",
			"disapproval": false,
			"date": "2013-06-11 11:19:32.518450",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jun 11, 2013 at 1:19 PM, <dave@cheney.net> wrote:\r\n\r\n> I like this, singleflight is very nice. I have a concern that the\r\n> singleflight cache will cache lookups forever,\r\n\r\n\r\nIt's nice that you like it, but I don't think you understand it.\r\n\r\nIt doesn't cache forever.\r\n\r\nIf nothing is in-flight, its map is empty.\r\n",
			"disapproval": false,
			"date": "2013-06-11 11:36:15.218060",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"cespare@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10079043/diff/5001/src/pkg/net/singleflight.go\nFile src/pkg/net/singleflight.go (right):\n\nhttps://codereview.appspot.com/10079043/diff/5001/src/pkg/net/singleflight.go#newcode27\nsrc/pkg/net/singleflight.go:27: func (g *singleflight) Do(key string, fn func() (interface{}, error)) (interface{}, error) {\nSince this is used in only one way, I wonder if it might be worth specialising  interface{} to []string to save an allocation.\n\nIf the key was an argument to the function, we could lose the closure allocation too.",
			"disapproval": false,
			"date": "2013-06-11 11:40:49.114350",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"cespare@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, iant@golang.org, cespare@gmail.com, rsc@golang.org, dave@cheney.net, rogpeppe@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-06-13 22:30:16.349160",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"cespare@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"rogpeppe@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM with fix\n\nhttps://codereview.appspot.com/10079043/diff/16001/src/pkg/net/singleflight.go\nFile src/pkg/net/singleflight.go (right):\n\nhttps://codereview.appspot.com/10079043/diff/16001/src/pkg/net/singleflight.go#newcode49\nsrc/pkg/net/singleflight.go:49: if c, ok := g.m[key]; ok {\nOn 2013/06/13 22:47:05, remyoudompheng wrote:\n> I don't understand this. shared should just be (c.dups > 0), the map lookup is\n> unnecessary and confusing\n\nI don't understand this either. I think what you really mean here is:\n\ng.mu.Lock()\ndelete(g.m, key)\ng.mu.Unlock()\n\nreturn c.val, c.err, c.dups > 0",
			"disapproval": false,
			"date": "2013-06-14 13:21:20.955990",
			"approval": true
		},
		{
			"sender": "cespare@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"cespare@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10079043/diff/16001/src/pkg/net/singleflight.go\nFile src/pkg/net/singleflight.go (right):\n\nhttps://codereview.appspot.com/10079043/diff/16001/src/pkg/net/singleflight.go#newcode14\nsrc/pkg/net/singleflight.go:14: dups int\ngofmt",
			"disapproval": false,
			"date": "2013-06-13 22:39:15.097250",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"cespare@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"rogpeppe@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-06-13 22:47:09.076650",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"cespare@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"rogpeppe@gmail.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10079043/diff/16001/src/pkg/net/singleflight.go\nFile src/pkg/net/singleflight.go (right):\n\nhttps://codereview.appspot.com/10079043/diff/16001/src/pkg/net/singleflight.go#newcode49\nsrc/pkg/net/singleflight.go:49: if c, ok := g.m[key]; ok {\nI don't understand this. shared should just be (c.dups > 0), the map lookup is unnecessary and confusing",
			"disapproval": false,
			"date": "2013-06-13 22:47:00.389070",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"cespare@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"rogpeppe@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=e255db359405 ***\n\nnet: coalesce duplicate in-flight DNS lookups\n\nIn Issue 5625, Russ says: \"We should at least have a cache of\ninflight lookups, so that 100 simultaneous dials of one host\nname don't do the work 100x. That's easy and (assume we forget\nthe answer once they all get it) doesn't pose any consistency\nproblems. It just merges simultaneous work.\"\n\nThis brings in singleflight (unexported) from Google /\nCamlistore, but without its tests. Maybe we should put it\nsomewhere in the standard library. But not now.\n\nUpdate issue 5625\n\nR=golang-dev, iant, cespare, rsc, dave, rogpeppe, remyoudompheng\nCC=golang-dev\nhttps://codereview.appspot.com/10079043",
			"disapproval": false,
			"date": "2013-06-14 15:59:50.114360",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 10079043: net: coalesce duplicate in-flight DNS lookups",
	"created": "2013-06-06 13:35:56.382510",
	"patchsets": [
		1,
		2001,
		5001,
		16001,
		22001
	],
	"modified": "2013-06-14 19:36:44.729380",
	"closed": true,
	"issue": 10079043
}