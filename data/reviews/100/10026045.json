{
	"description": "runtime: introduce GODEBUG env var\nCurrently it replaces GOGCTRACE env var (GODEBUG=gctrace=1).\nThe plan is to extend it with other type of debug tracing,\ne.g. GODEBUG=gctrace=1,schedtrace=100.",
	"cc": [
		"rsc@golang.org",
		"bradfitz@golang.org",
		"daniel.morsing@gmail.com",
		"gobot@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-06-14 14:57:57.208130",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM, although the parser will need to be reworked once other variables make it in. There's also the question of what the result of specifying the same variable twice should be.\n\nWait for Russ or someone else though.",
			"disapproval": false,
			"date": "2013-06-14 19:11:02.754890",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jun 14, 2013 at 11:11 PM,  <daniel.morsing@gmail.com> wrote:\r\n> LGTM, although the parser will need to be reworked once other variables\r\n> make it in.\r\n\r\nOnly schedtrace will be added to GODEBUG. See the discussion on golang-dev@\r\n\r\n> There's also the question of what the result of specifying\r\n> the same variable twice should be.\r\n\r\nI don't care too much in this context.\r\n\r\n\r\n\r\n> Wait for Russ or someone else though.\r\n>\r\n> https://codereview.appspot.com/10026045/\r\n",
			"disapproval": false,
			"date": "2013-06-14 19:24:04.301040",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=rsc",
			"disapproval": false,
			"date": "2013-06-17 20:07:24.154010",
			"approval": false
		},
		{
			"sender": "gobot@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"bradfitz@golang.org",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=rsc (assigned by r)",
			"disapproval": false,
			"date": "2013-06-18 17:36:50.665610",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"bradfitz@golang.org",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping",
			"disapproval": false,
			"date": "2013-06-27 17:06:21.760160",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"bradfitz@golang.org",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10026045/diff/19001/src/pkg/runtime/runtime.c\nFile src/pkg/runtime/runtime.c (right):\n\nhttps://codereview.appspot.com/10026045/diff/19001/src/pkg/runtime/runtime.c#newcode381\nsrc/pkg/runtime/runtime.c:381: if(runtime\u00b7strstr(p, (byte*)\"gctrace=\") == p) {\nPlease make a table. I don't want this getting copy/pasted.\nAlso, there should be no \"failed to parse\" message.\n\nstatic struct {\n   int8 *name;\n   int *value;\n} dbgvar[] = {\n   \"gctrace\", &runtime.debug.gctrace,\n};\n\nvoid\nruntime.parsedebugvars(void)\n{\n    byte *p;\n    int n;\n\n    p = runtime.getenv(\"GODEBUG\");\n    if(p == nil)\n        return;\n    for(;;) {\n        for(i=0; i<nelem(dbgvar); i++) {\n            n = runtime.findnull(dbgvar[i].name);\n            if(runtime.mcmp(p, dbgvar[i].name, n) == 0 && p[n] == '=')\n                *dbgvar[i].value = runtime.atoi(p+n+1);\n        }\n        p = runtime.strstr(p, \",\");\n        if(p == nil)\n            break;\n         p++;\n    }\n}",
			"disapproval": false,
			"date": "2013-06-27 17:23:20.295030",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"daniel.morsing@gmail.com",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=b43eb215afd3 ***\n\nruntime: introduce GODEBUG env var\nCurrently it replaces GOGCTRACE env var (GODEBUG=gctrace=1).\nThe plan is to extend it with other type of debug tracing,\ne.g. GODEBUG=gctrace=1,schedtrace=100.\n\nR=rsc\nCC=bradfitz, daniel.morsing, gobot, golang-dev\nhttps://codereview.appspot.com/10026045",
			"disapproval": false,
			"date": "2013-06-28 14:39:05.626390",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"bradfitz@golang.org",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/27 17:23:20, rsc wrote:\n> https://codereview.appspot.com/10026045/diff/19001/src/pkg/runtime/runtime.c\n> File src/pkg/runtime/runtime.c (right):\n> \n> https://codereview.appspot.com/10026045/diff/19001/src/pkg/runtime/runtime.c#newcode381\n> src/pkg/runtime/runtime.c:381: if(runtime\u00b7strstr(p, (byte*)\"gctrace=\") == p) {\n> Please make a table. I don't want this getting copy/pasted.\n> Also, there should be no \"failed to parse\" message.\n> \n> static struct {\n>    int8 *name;\n>    int *value;\n> } dbgvar[] = {\n>    \"gctrace\", &runtime.debug.gctrace,\n> };\n> \n> void\n> runtime.parsedebugvars(void)\n> {\n>     byte *p;\n>     int n;\n> \n>     p = runtime.getenv(\"GODEBUG\");\n>     if(p == nil)\n>         return;\n>     for(;;) {\n>         for(i=0; i<nelem(dbgvar); i++) {\n>             n = runtime.findnull(dbgvar[i].name);\n>             if(runtime.mcmp(p, dbgvar[i].name, n) == 0 && p[n] == '=')\n>                 *dbgvar[i].value = runtime.atoi(p+n+1);\n>         }\n>         p = runtime.strstr(p, \",\");\n>         if(p == nil)\n>             break;\n>          p++;\n>     }\n> }\n\nDone\nPTAL",
			"disapproval": false,
			"date": "2013-06-27 20:04:16.790300",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"bradfitz@golang.org",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-06-27 20:21:07.399540",
			"approval": true
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 10026045: runtime: introduce GODEBUG env var",
	"created": "2013-06-05 11:52:31.106880",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		10001,
		12001,
		19001,
		25001,
		31001,
		34001
	],
	"modified": "2013-06-28 14:39:09.004730",
	"closed": true,
	"issue": 10026045
}