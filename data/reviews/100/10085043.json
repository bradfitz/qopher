{
	"description": "runtime/race: tell race detector what memory Read/Write syscalls touch\nFixes issue 5567.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"iant@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-06-06 15:35:16.231010",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Now race detector prints a nice report where one of the accesses is syscall.Read:\n\nWARNING: DATA RACE\nWrite by goroutine 4:\n  syscall.raceWriteRange()\n      src/pkg/syscall/race.go:27 +0x3d\n  syscall.Read()\n      src/pkg/syscall/syscall_unix.go:134 +0xa6\n  os.(*File).read()\n      src/pkg/os/file_unix.go:174 +0x8c\n  os.(*File).Read()\n      src/pkg/os/file.go:95 +0xb9\n  command-line-arguments_test.func\u00b7147()\n      src/pkg/runtime/race/testdata/mop_test.go:1652 +0x1f0\n\nPrevious read by goroutine 3:\n  crypto/sha1.(*digest).Write()\n      src/pkg/crypto/sha1/sha1.go:70 +0x196\n  command-line-arguments_test.TestRaceIssue5567()\n      src/pkg/runtime/race/testdata/mop_test.go:1664 +0x1fe\n  testing.tRunner()\n      src/pkg/testing/testing.go:353 +0x12f",
			"disapproval": false,
			"date": "2013-06-06 15:36:25.320580",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Joy, more races to fix! Keep them coming. \r\n\r\nOn 07/06/2013, at 1:36, dvyukov@google.com wrote:\r\n\r\n> Now race detector prints a nice report where one of the accesses is\r\n> syscall.Read:\r\n> \r\n> WARNING: DATA RACE\r\n> Write by goroutine 4:\r\n>  syscall.raceWriteRange()\r\n>      src/pkg/syscall/race.go:27 +0x3d\r\n>  syscall.Read()\r\n>      src/pkg/syscall/syscall_unix.go:134 +0xa6\r\n>  os.(*File).read()\r\n>      src/pkg/os/file_unix.go:174 +0x8c\r\n>  os.(*File).Read()\r\n>      src/pkg/os/file.go:95 +0xb9\r\n>  command-line-arguments_test.func\u00b7147()\r\n>      src/pkg/runtime/race/testdata/mop_test.go:1652 +0x1f0\r\n> \r\n> Previous read by goroutine 3:\r\n>  crypto/sha1.(*digest).Write()\r\n>      src/pkg/crypto/sha1/sha1.go:70 +0x196\r\n>  command-line-arguments_test.TestRaceIssue5567()\r\n>      src/pkg/runtime/race/testdata/mop_test.go:1664 +0x1fe\r\n>  testing.tRunner()\r\n>      src/pkg/testing/testing.go:353 +0x12f\r\n> \r\n> \r\n> https://codereview.appspot.com/10085043/\r\n> \r\n> -- \r\n> \r\n> ---You received this message because you are subscribed to the Google Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n> \r\n> \r\n",
			"disapproval": false,
			"date": "2013-06-06 23:09:40.288820",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/06 23:09:40, dfc wrote:\n> Joy, more races to fix! Keep them coming. \n> \n> On 07/06/2013, at 1:36, mailto:dvyukov@google.com wrote:\n> \n> > Now race detector prints a nice report where one of the accesses is\n> > syscall.Read:\n> > \n> > WARNING: DATA RACE\n> > Write by goroutine 4:\n> >  syscall.raceWriteRange()\n> >      src/pkg/syscall/race.go:27 +0x3d\n> >  syscall.Read()\n> >      src/pkg/syscall/syscall_unix.go:134 +0xa6\n> >  os.(*File).read()\n> >      src/pkg/os/file_unix.go:174 +0x8c\n> >  os.(*File).Read()\n> >      src/pkg/os/file.go:95 +0xb9\n> >  command-line-arguments_test.func\u00b7147()\n> >      src/pkg/runtime/race/testdata/mop_test.go:1652 +0x1f0\n> > \n> > Previous read by goroutine 3:\n> >  crypto/sha1.(*digest).Write()\n> >      src/pkg/crypto/sha1/sha1.go:70 +0x196\n> >  command-line-arguments_test.TestRaceIssue5567()\n> >      src/pkg/runtime/race/testdata/mop_test.go:1664 +0x1fe\n> >  testing.tRunner()\n> >      src/pkg/testing/testing.go:353 +0x12f\n> > \n> > \n> > https://codereview.appspot.com/10085043/\n> > \n> > -- \n> > \n> > ---You received this message because you are subscribed to the Google Groups\n> \"golang-dev\" group.\n> > To unsubscribe from this group and stop receiving emails from it, send an\n> email to mailto:golang-dev+unsubscribe@googlegroups.com.\n> > For more options, visit https://groups.google.com/groups/opt_out.\n> > \n> > \n\nWhy did you choose to drop the raceEnabled compile time constant ? Can the compiler eliminate the if n > 0 branch if it can provide that the body of the condition is emtpy ?",
			"disapproval": false,
			"date": "2013-06-07 04:55:21.629150",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Why did you choose to drop the raceEnabled compile time constant ? Can\r\n> the compiler eliminate the if n > 0 branch if it can provide that the\r\n> body of the condition is emtpy ?\r\n\r\nI had a quick look and it does not appear that the compiler can\r\neliminate the branch when the body is empty. Would you be able to add\r\nback the raceEnabled constant ?\r\n",
			"disapproval": false,
			"date": "2013-06-07 05:00:46.976610",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/07 05:00:46, dfc wrote:\n> > Why did you choose to drop the raceEnabled compile time constant ? Can\n> > the compiler eliminate the if n > 0 branch if it can provide that the\n> > body of the condition is emtpy ?\n> \n> I had a quick look and it does not appear that the compiler can\n> eliminate the branch when the body is empty. Would you be able to add\n> back the raceEnabled constant ?\n\nFair\nDone\nAlso removed plan9 instrumentation... not sure why I've added it at all...\nPTAL",
			"disapproval": false,
			"date": "2013-06-07 14:02:37.515720",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-06-10 17:43:44.696080",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=48f683178a60 ***\n\nruntime/race: tell race detector what memory Read/Write syscalls touch\nFixes issue 5567.\n\nR=golang-dev, dave, iant\nCC=golang-dev\nhttps://codereview.appspot.com/10085043",
			"disapproval": false,
			"date": "2013-06-10 18:40:52.430290",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 10085043: runtime/race: tell race detector what memory Read/Write...",
	"created": "2013-06-06 15:29:30.304560",
	"patchsets": [
		1,
		2001,
		4009,
		8001,
		14001,
		20001
	],
	"modified": "2013-06-10 18:40:55.418220",
	"closed": true,
	"issue": 10085043
}