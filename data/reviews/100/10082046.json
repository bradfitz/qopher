{
	"description": "go.text/locale: implemented likely subtag computation, based on CLDR likelySubtag data.\nSome minor refactorings:\n- pVariant and pExt now always point at the expected position in the string (if any),\n  even if variants and/or extensions are not defined.\n- adjusted makeString accordingly and renamed it to remakeString.\n- added writeType and writeConsts methods in maketables.go\n- writeSlice now removes main. from types.\n- extra indirection for getLangISO3 as there are now more than 256 indexable\n  language codes.\nAt some point we could consider adding addLikleySubtags and minimize to the API\nto provide similar functionality as ICU.\nHowever, if it works, it seems nicer to include this functionalty as an option\nto Canonicalize.  The use of this is rather esoteric, especially considering\nthere are other ways in the API to get to this information more intuitively.",
	"cc": [
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.text/",
			"disapproval": false,
			"date": "2013-06-07 20:13:20.899110",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-06-10 09:38:26.081730",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/10082046/diff/12001/locale/locale.go\nFile locale/locale.go (right):\n\nhttps://codereview.appspot.com/10082046/diff/12001/locale/locale.go#newcode57\nlocale/locale.go:57: // equalTags compare language, script and region identifiers only.\ni think it's s/compare/compares/ since the subject is the word, not its meaning, as in\nthe function equalTags compares ...\n\nhttps://codereview.appspot.com/10082046/diff/12001/locale/locale.go#newcode74\nlocale/locale.go:74: // private returns true if the ID solely consists of a private use tag.\n// private reports whether the ID consists solely of a private use tag.\n\nhttps://codereview.appspot.com/10082046/diff/12001/locale/locale.go#newcode154\nlocale/locale.go:154: func (loc *ID) remakeString() {\nworth a comment now - it's big enough\n\nhttps://codereview.appspot.com/10082046/diff/12001/locale/maketables.go\nFile locale/maketables.go (right):\n\nhttps://codereview.appspot.com/10082046/diff/12001/locale/maketables.go#newcode100\nlocale/maketables.go:100: likelyLang is a lookup table, indexed by langID, for most the most likely\ns/most the most/the most/\n\nhttps://codereview.appspot.com/10082046/diff/12001/locale/maketables.go#newcode102\nlocale/maketables.go:102: given language, region and script are the index and size of the list in\nindex and size respectively of the list ...\n\nhttps://codereview.appspot.com/10082046/diff/12001/locale/maketables.go#newcode105\nlocale/maketables.go:105: likelyLangList holds lists info associated with likelyLang.`,\ns/lists/list/ ?\n\nhttps://codereview.appspot.com/10082046/diff/12001/locale/maketables.go#newcode110\nlocale/maketables.go:110: in likelyRegionList, respectively.\nditto re: respectively\n\nhttps://codereview.appspot.com/10082046/diff/12001/locale/maketables.go#newcode113\nlocale/maketables.go:113: likelyRegionList holds lists info associated with likelyRegion.`,\nditto re: lists\n\nhttps://codereview.appspot.com/10082046/diff/12001/locale/maketables.go#newcode926\nlocale/maketables.go:926: var ( // undefined\nthis comment is in the wrong place? or maybe not",
			"disapproval": false,
			"date": "2013-06-10 23:21:29.913660",
			"approval": true
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=983e42945033&repo=text ***\n\ngo.text/locale: implemented likely subtag computation, based on CLDR likelySubtag data.\nSome minor refactorings:\n- pVariant and pExt now always point at the expected position in the string (if any),\n  even if variants and/or extensions are not defined.\n- adjusted makeString accordingly and renamed it to remakeString.\n- added writeType and writeConsts methods in maketables.go\n- writeSlice now removes main. from types.\n- extra indirection for getLangISO3 as there are now more than 256 indexable\n  language codes.\nAt some point we could consider adding addLikleySubtags and minimize to the API\nto provide similar functionality as ICU.\nHowever, if it works, it seems nicer to include this functionalty as an option\nto Canonicalize.  The use of this is rather esoteric, especially considering\nthere are other ways in the API to get to this information more intuitively.\n\nR=r\nCC=golang-dev\nhttps://codereview.appspot.com/10082046\n\nhttps://codereview.appspot.com/10082046/diff/12001/locale/locale.go\nFile locale/locale.go (right):\n\nhttps://codereview.appspot.com/10082046/diff/12001/locale/locale.go#newcode57\nlocale/locale.go:57: // equalTags compare language, script and region identifiers only.\nOn 2013/06/10 23:21:30, r wrote:\n> i think it's s/compare/compares/ since the subject is the word, not its meaning,\n> as in\n> the function equalTags compares ...\n\nDone.\n\nhttps://codereview.appspot.com/10082046/diff/12001/locale/locale.go#newcode74\nlocale/locale.go:74: // private returns true if the ID solely consists of a private use tag.\nOn 2013/06/10 23:21:30, r wrote:\n> // private reports whether the ID consists solely of a private use tag.\n\nDone.\n\nhttps://codereview.appspot.com/10082046/diff/12001/locale/maketables.go\nFile locale/maketables.go (right):\n\nhttps://codereview.appspot.com/10082046/diff/12001/locale/maketables.go#newcode100\nlocale/maketables.go:100: likelyLang is a lookup table, indexed by langID, for most the most likely\nOn 2013/06/10 23:21:30, r wrote:\n> s/most the most/the most/\n\nDone.\n\nhttps://codereview.appspot.com/10082046/diff/12001/locale/maketables.go#newcode102\nlocale/maketables.go:102: given language, region and script are the index and size of the list in\nOn 2013/06/10 23:21:30, r wrote:\n> index and size respectively of the list ...\n\nDone.\n\nhttps://codereview.appspot.com/10082046/diff/12001/locale/maketables.go#newcode105\nlocale/maketables.go:105: likelyLangList holds lists info associated with likelyLang.`,\nlists, actually.  If there is more than one entry per language, these entries are stored in likelyLangList and the entry in likelyLang contains the data needed to take a slice of this list.\n\nOn 2013/06/10 23:21:30, r wrote:\n> s/lists/list/ ?\n\nhttps://codereview.appspot.com/10082046/diff/12001/locale/maketables.go#newcode110\nlocale/maketables.go:110: in likelyRegionList, respectively.\nOn 2013/06/10 23:21:30, r wrote:\n> ditto re: respectively\n\nDone.\n\nhttps://codereview.appspot.com/10082046/diff/12001/locale/maketables.go#newcode113\nlocale/maketables.go:113: likelyRegionList holds lists info associated with likelyRegion.`,\nditto.\n\nOn 2013/06/10 23:21:30, r wrote:\n> ditto re: lists\n\nhttps://codereview.appspot.com/10082046/diff/12001/locale/maketables.go#newcode926\nlocale/maketables.go:926: var ( // undefined\ncorrect, place. changed comment to:\nundefined values for language, script and region\n\nOn 2013/06/10 23:21:30, r wrote:\n> this comment is in the wrong place? or maybe not",
			"disapproval": false,
			"date": "2013-06-11 12:26:06.016410",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10082046/diff/12001/locale/locale.go\nFile locale/locale.go (right):\n\nhttps://codereview.appspot.com/10082046/diff/12001/locale/locale.go#newcode154\nlocale/locale.go:154: func (loc *ID) remakeString() {\nOn 2013/06/10 23:21:30, r wrote:\n> worth a comment now - it's big enough\n\nDone.",
			"disapproval": false,
			"date": "2013-06-11 12:26:31.704520",
			"approval": false
		}
	],
	"owner_email": "mpvl@golang.org",
	"private": false,
	"base_url": "",
	"owner": "mpvl",
	"subject": "code review 10082046: go.text/locale: implemented likely subtag computation, ...",
	"created": "2013-06-07 20:12:29.696700",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		12001,
		17001
	],
	"modified": "2013-06-11 12:26:32.036230",
	"closed": true,
	"issue": 10082046
}