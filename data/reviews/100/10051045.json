{
	"description": "runtime: fix scheduler race condition\nIn starttheworld() we assume that P's with local work\nare situated in the beginning of idle P list.\nHowever, once we start the first M, it can execute all local G's\nand steal G's from other P's.\nThat breaks the assumption above. Thus starttheworld() will fail\nto start some P's with local work.\nIt seems that it can not lead to very bad things, but still\nit's wrong and breaks other assumtions\n(e.g. we can have a spinning M with local work).\nThe fix is to collect all P's with local work first,\nand only then start them.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-06-05 20:19:40.161860",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10051045/diff/5001/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttps://codereview.appspot.com/10051045/diff/5001/src/pkg/runtime/proc.c#newcode444\nsrc/pkg/runtime/proc.c:444: add = false;\ninsert comment before this line, and swap to make comment easier:\n\n// Start M to run P. Do not start another M below.\nnewm(nil, p);\nadd = false;\n\nHow does this avoid creating one M for every P that is pending?\nShouldn't it stop when reaching GOMAXPROCS?",
			"disapproval": false,
			"date": "2013-06-10 19:08:35.106900",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10051045/diff/5001/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttps://codereview.appspot.com/10051045/diff/5001/src/pkg/runtime/proc.c#newcode444\nsrc/pkg/runtime/proc.c:444: add = false;\nOn 2013/06/10 19:08:35, rsc wrote:\n> insert comment before this line, and swap to make comment easier:\n> \n> // Start M to run P. Do not start another M below.\n> newm(nil, p);\n> add = false;\n> \n> How does this avoid creating one M for every P that is pending?\n> Shouldn't it stop when reaching GOMAXPROCS?\n\nI do not understand the question.\nIt avoids creating excessive M's by doing \"p->m = mget();\" above under the lock.\nThere is exactly GOMAXPROCS P's, it does not create any new P's.",
			"disapproval": false,
			"date": "2013-06-10 19:24:16.384600",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10051045/diff/5001/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttps://codereview.appspot.com/10051045/diff/5001/src/pkg/runtime/proc.c#newcode444\nsrc/pkg/runtime/proc.c:444: add = false;\nOn 2013/06/10 19:08:35, rsc wrote:\n> insert comment before this line, and swap to make comment easier:\n> \n> // Start M to run P. Do not start another M below.\n> newm(nil, p);\n> add = false;\n\nDone",
			"disapproval": false,
			"date": "2013-06-10 19:26:25.055960",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nSorry, my mistake. The equivalent of the 'g' variable in the Go runtime is 'p' in the Plan 9 kernel. So I was effectively reading all the p's as g's, hence my confusion.",
			"disapproval": false,
			"date": "2013-06-10 20:25:59.686380",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=8ae475f7599b ***\n\nruntime: fix scheduler race condition\nIn starttheworld() we assume that P's with local work\nare situated in the beginning of idle P list.\nHowever, once we start the first M, it can execute all local G's\nand steal G's from other P's.\nThat breaks the assumption above. Thus starttheworld() will fail\nto start some P's with local work.\nIt seems that it can not lead to very bad things, but still\nit's wrong and breaks other assumtions\n(e.g. we can have a spinning M with local work).\nThe fix is to collect all P's with local work first,\nand only then start them.\n\nR=golang-dev, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/10051045",
			"disapproval": false,
			"date": "2013-06-12 14:46:46.025230",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 10051045: runtime: fix scheduler race condition",
	"created": "2013-06-05 20:16:44.489470",
	"patchsets": [
		1,
		2001,
		5001,
		11001,
		17001
	],
	"modified": "2013-06-12 14:46:47.409160",
	"closed": true,
	"issue": 10051045
}