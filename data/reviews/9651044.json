{
	"description": "go/doc: fix build\n\n1) go/doc:\n   - create correct ast.FuncType\n   - use more commonly used variable names in a test case\n\n2) make ast.FuncType.Pos robust in case of incorrect ASTs",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=1fcddf5fd778 ***\n\ngo/doc: fix build\n\n1) go/doc:\n   - create correct ast.FuncType\n   - use more commonly used variable names in a test case\n\n2) make ast.FuncType.Pos robust in case of incorrect ASTs\n\nR=golang-dev\nCC=golang-dev\nhttps://codereview.appspot.com/9651044",
			"disapproval": false,
			"date": "2013-05-22 21:22:53.365650",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-05-22 21:07:11.184810",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM if you ran all.bash this time :)\r\n\r\n\r\nOn Wed, May 22, 2013 at 2:07 PM, <gri@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> go/doc: fix build: fix incorrect example ast\r\n>\r\n> Also: use more commonly used variable names in a test case.\r\n>\r\n> Please review this at https://codereview.appspot.**com/9651044/<https://codereview.appspot.com/9651044/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/go/doc/example.go\r\n>   M src/pkg/go/doc/example_test.go\r\n>\r\n>\r\n> Index: src/pkg/go/doc/example.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/go/doc/example.go\r\n> +++ b/src/pkg/go/doc/example.go\r\n> @@ -265,7 +265,7 @@\r\n>         // Synthesize main function.\r\n>         funcDecl := &ast.FuncDecl{\r\n>                 Name: ast.NewIdent(\"main\"),\r\n> -               Type: &ast.FuncType{},\r\n> +               Type: &ast.FuncType{Params: &ast.FieldList{}}, //\r\n> FuncType.Params must be non-nil\r\n>                 Body: body,\r\n>         }\r\n>\r\n> Index: src/pkg/go/doc/example_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/go/doc/example_test.**go\r\n> +++ b/src/pkg/go/doc/example_test.**go\r\n> @@ -159,8 +159,8 @@\r\n>  `\r\n>\r\n>  func TestExamples(t *testing.T) {\r\n> -       fs := token.NewFileSet()\r\n> -       file, err := parser.ParseFile(fs, \"test.go\", strings.NewReader(**exampleTestFile),\r\n> parser.ParseComments)\r\n> +       fset := token.NewFileSet()\r\n> +       file, err := parser.ParseFile(fset, \"test.go\", strings.NewReader(*\r\n> *exampleTestFile), parser.ParseComments)\r\n>         if err != nil {\r\n>                 t.Fatal(err)\r\n>         }\r\n> @@ -174,11 +174,11 @@\r\n>                         if e.Play == nil {\r\n>                                 g = \"<nil>\"\r\n>                         } else {\r\n> -                               b := new(bytes.Buffer)\r\n> -                               if err := format.Node(b, fs, e.Play); err\r\n> != nil {\r\n> +                               var buf bytes.Buffer\r\n> +                               if err := format.Node(&buf, fset, e.Play);\r\n> err != nil {\r\n>                                         t.Fatal(err)\r\n>                                 }\r\n> -                               g = b.String()\r\n> +                               g = buf.String()\r\n>                         }\r\n>                         if g != w {\r\n>                                 t.Errorf(\"%s: got Play == %q, want %q\",\r\n> c.Name, g, w)\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-22 21:19:25.545760",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-05-22 21:21:08.620500",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 9651044: go/doc: fix build",
	"created": "2013-05-22 21:06:32.738080",
	"patchsets": [
		1,
		2001,
		5001,
		10001,
		5002,
		13001
	],
	"modified": "2013-05-22 21:21:08.620500",
	"closed": true,
	"issue": 9651044
}