{
	"description": "cmd/gc: Error out on division by constant zero.\n\nFixes issue 4264.",
	"cc": [
		"cldorian@gmail.com",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "cldorian@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"cldorian@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Dividing a floating point value or a complex value by zero should not be an error. It's a way to generate an infinity.",
			"disapproval": false,
			"date": "2012-12-03 01:52:01.591810",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"cldorian@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/12/03 01:52:01, Charlie Dorian wrote:\n> Dividing a floating point value or a complex value by zero should not be an\n> error. It's a way to generate an infinity.\n\nQuoting from the spec:\n\"If the divisor is a constant, it must not be zero. If the divisor is zero at run time, a run-time panic occurs.\"\n\nFor constant expressions, the spec also says that a divisor must not be zero (gc already implements this).\n\nThe spec also says:\n\"The result of a floating-point or complex division by zero is not specified beyond the IEEE-754 standard; whether a run-time panic occurs is implementation-specific.\"\n\nSo some ambiguity there. I'd like to hear from others as to what they think about this change.",
			"disapproval": false,
			"date": "2012-12-03 09:19:45.261480",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-12-02 10:57:27.971360",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"cldorian@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, cldorian@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-18 20:55:23.977600",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"daniel.morsing@gmail.com",
				"cldorian@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for working on this, but I'm not 100% sure the spec is correct.\n\nThe code here is fine, although it would help to have a test case checking for the error.\n\nI am worried about the backwards incompatibilities here. I replied on CL 6710045 about those.\n\nhttps://codereview.appspot.com/6845113/diff/16001/src/cmd/gc/typecheck.c\nFile src/cmd/gc/typecheck.c (right):\n\nhttps://codereview.appspot.com/6845113/diff/16001/src/cmd/gc/typecheck.c#newcode641\nsrc/cmd/gc/typecheck.c:641: if((op == ODIV || op == OMOD) && r->op == OLITERAL)\n&& isconst(r, CTINT)\ncan take the place of the OLITERAL and the next line\n\nhttps://codereview.appspot.com/6845113/diff/16001/test/fixedbugs/bug410.go\nFile test/fixedbugs/bug410.go (right):\n\nhttps://codereview.appspot.com/6845113/diff/16001/test/fixedbugs/bug410.go#newcode21\ntest/fixedbugs/bug410.go:21: x[i] ^= k[i-arr[s].num%1]\nmight as well make this something the compiler cannot optimize away, like %3.",
			"disapproval": false,
			"date": "2012-12-22 15:12:10.868810",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"cldorian@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I completely forgot about this one. PTAL.\n\nAdded a test and addressed the comments.\n\nDid we figure out if we wanted this feature?\n\nhttps://codereview.appspot.com/6845113/diff/16001/src/cmd/gc/typecheck.c\nFile src/cmd/gc/typecheck.c (right):\n\nhttps://codereview.appspot.com/6845113/diff/16001/src/cmd/gc/typecheck.c#newcode641\nsrc/cmd/gc/typecheck.c:641: if((op == ODIV || op == OMOD) && r->op == OLITERAL)\nOn 2012/12/22 15:12:10, rsc wrote:\n> && isconst(r, CTINT)\n> can take the place of the OLITERAL and the next line\n\nDone.\n\nhttps://codereview.appspot.com/6845113/diff/16001/test/fixedbugs/bug410.go\nFile test/fixedbugs/bug410.go (right):\n\nhttps://codereview.appspot.com/6845113/diff/16001/test/fixedbugs/bug410.go#newcode21\ntest/fixedbugs/bug410.go:21: x[i] ^= k[i-arr[s].num%1]\nOn 2012/12/22 15:12:10, rsc wrote:\n> might as well make this something the compiler cannot optimize away, like %3.\n\nDone.",
			"disapproval": false,
			"date": "2013-01-26 16:37:28.961800",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nStill not convinced we should do this, but go ahead and submit it.\r\n",
			"disapproval": false,
			"date": "2013-01-30 17:21:16.170710",
			"approval": true
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"daniel.morsing@gmail.com",
				"cldorian@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=b90cad8349e0 ***\n\ncmd/gc: Error out on division by constant zero.\n\nFixes issue 4264.\n\nR=cldorian, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/6845113",
			"disapproval": false,
			"date": "2013-01-30 19:21:20.731650",
			"approval": false
		}
	],
	"owner_email": "daniel.morsing@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "DMorsing",
	"subject": "code review 6845113: cmd/gc: Error out on division by constant zero.",
	"created": "2012-11-29 22:01:07.750370",
	"patchsets": [
		1,
		2001,
		4001,
		10001,
		13001,
		16001,
		21001,
		26001
	],
	"modified": "2013-01-30 19:21:20.731650",
	"closed": true,
	"issue": 6845113
}