{
	"description": "cmd/pack: change gopack to pack in error messages",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn Mon, Jan 30, 2012 at 3:40 PM, <r@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://code.google.com/p/go\n>\n>\n> Description:\n> cmd/pack: change gopack to pack in error messages\n>\n> Please review this at http://codereview.appspot.com/**5598051/<http://codereview.appspot.com/5598051/>\n>\n> Affected files:\n>  M src/cmd/pack/ar.c\n>\n>\n> Index: src/cmd/pack/ar.c\n> ==============================**==============================**=======\n> --- a/src/cmd/pack/ar.c\n> +++ b/src/cmd/pack/ar.c\n> @@ -227,12 +227,12 @@\n>                case 'S':       Sflag = 1;  break;\n>                case 'P':       Pflag = 1;  break;\n>                default:\n> -                       fprint(2, \"gopack: bad option `%c'\\n\", *cp);\n> +                       fprint(2, \"pack: bad option `%c'\\n\", *cp);\n>                        exits(\"error\");\n>                }\n>        }\n>        if (aflag && bflag) {\n> -               fprint(2, \"gopack: only one of 'a' and 'b' can be\n> specified\\n\");\n> +               fprint(2, \"pack: only one of 'a' and 'b' can be\n> specified\\n\");\n>                usage();\n>        }\n>        if(aflag || bflag) {\n> @@ -244,7 +244,7 @@\n>        }\n>        if(Pflag) {\n>                if(argc < 4) {\n> -                       fprint(2, \"gopack: P flag requires prefix\n> argument\\n\");\n> +                       fprint(2, \"pack: P flag requires prefix\n> argument\\n\");\n>                        usage();\n>                }\n>                prefix = argv[2];\n> @@ -253,7 +253,7 @@\n>        }\n>        if(comfun == 0) {\n>                if(uflag == 0) {\n> -                       fprint(2, \"gopack: one of [%s] must be\n> specified\\n\", man);\n> +                       fprint(2, \"pack: one of [%s] must be specified\\n\",\n> man);\n>                        usage();\n>                }\n>                setcom(rcmd);\n> @@ -267,7 +267,7 @@\n>        cp = 0;\n>        while (argc--) {\n>                if (*argv) {\n> -                       fprint(2, \"gopack: %s not found\\n\", *argv);\n> +                       fprint(2, \"pack: %s not found\\n\", *argv);\n>                        cp = \"error\";\n>                }\n>                argv++;\n> @@ -284,7 +284,7 @@\n>  {\n>\n>        if(comfun != 0) {\n> -               fprint(2, \"gopack: only one of [%s] allowed\\n\", man);\n> +               fprint(2, \"pack: only one of [%s] allowed\\n\", man);\n>                usage();\n>        }\n>        comfun = fun;\n> @@ -345,7 +345,7 @@\n>                bfile = Bopen(file, OREAD);\n>                if (!bfile) {\n>                        if (count != 0) {\n> -                               fprint(2, \"gopack: cannot open %s\\n\",\n> file);\n> +                               fprint(2, \"pack: cannot open %s\\n\", file);\n>                                errors++;\n>                        }\n>                        scanobj(&bar, ap, bp->size);\n> @@ -354,7 +354,7 @@\n>                }\n>                d = dirfstat(Bfildes(bfile));\n>                if(d == nil)\n> -                       fprint(2, \"gopack: cannot stat %s: %r\\n\", file);\n> +                       fprint(2, \"pack: cannot stat %s: %r\\n\", file);\n>                if (uflag && (d==nil || d->mtime <= bp->date)) {\n>                        scanobj(&bar, ap, bp->size);\n>                        arcopy(&bar, ap, bp);\n> @@ -379,7 +379,7 @@\n>                files[i] = 0;\n>                bfile = Bopen(file, OREAD);\n>                if (!bfile) {\n> -                       fprint(2, \"gopack: cannot open %s\\n\", file);\n> +                       fprint(2, \"pack: cannot open %s\\n\", file);\n>                        errors++;\n>                } else {\n>                        mesg('a', file);\n> @@ -447,7 +447,7 @@\n>                        mode = strtoul(bp->hdr.mode, 0, 8) & 0777;\n>                        f = create(file, OWRITE, mode);\n>                        if(f < 0) {\n> -                               fprint(2, \"gopack: %s cannot create\\n\",\n> file);\n> +                               fprint(2, \"pack: %s cannot create\\n\",\n> file);\n>                                skip(&bar, bp->size);\n>                        } else {\n>                                mesg('x', file);\n> @@ -541,7 +541,7 @@\n>        }\n>        close(fd);\n>        if (poname[0] && aend == 0)\n> -               fprint(2, \"gopack: %s not found - files moved to end.\\n\",\n> poname);\n> +               fprint(2, \"pack: %s not found - files moved to end.\\n\",\n> poname);\n>        install(arname, astart, amiddle, aend, 0);\n>  }\n>  void\n> @@ -574,13 +574,13 @@\n>        Biobuf *bfile;\n>\n>        if(aflag || bflag) {\n> -               fprint(2, \"gopack: abi not allowed with q\\n\");\n> +               fprint(2, \"pack: abi not allowed with q\\n\");\n>                exits(\"error\");\n>        }\n>        fd = openar(arname, ORDWR, 1);\n>        if (fd < 0) {\n>                if(!cflag)\n> -                       fprint(2, \"gopack: creating %s\\n\", arname);\n> +                       fprint(2, \"pack: creating %s\\n\", arname);\n>                fd = arcreate(arname);\n>        }\n>        Binit(&bar, fd, OREAD);\n> @@ -594,7 +594,7 @@\n>                files[i] = 0;\n>                bfile = Bopen(file, OREAD);\n>                if(!bfile) {\n> -                       fprint(2, \"gopack: cannot open %s\\n\", file);\n> +                       fprint(2, \"pack: cannot open %s\\n\", file);\n>                        errors++;\n>                } else {\n>                        mesg('q', file);\n> @@ -680,13 +680,13 @@\n>                }\n>\n>                if (!gflag || strcmp(file, pkgdef) != 0) {  /* don't clear\n> allobj if it's pkg defs */\n> -                       fprint(2, \"gopack: non-object file %s\\n\", file);\n> +                       fprint(2, \"pack: non-object file %s\\n\", file);\n>                        errors++;\n>                        allobj = 0;\n>                }\n>                d = dirfstat(Bfildes(b));\n>                if (d != nil && d->length == 0) {\n> -                       fprint(2, \"gopack: zero length file %s\\n\", file);\n> +                       fprint(2, \"pack: zero length file %s\\n\", file);\n>                        errors++;\n>                }\n>                free(d);\n> @@ -709,7 +709,7 @@\n>\n>        Bseek(b, offset1, 0);\n>        if(p == nil || strncmp(p, \"go object \", 10) != 0) {\n> -               fprint(2, \"gopack: malformed object file %s\\n\", file);\n> +               fprint(2, \"pack: malformed object file %s\\n\", file);\n>                errors++;\n>                Bseek(b, offset, 0);\n>                free(p);\n> @@ -717,7 +717,7 @@\n>        }\n>\n>        if (!matchhdr(p, &objhdr)) {\n> -               fprint(2, \"gopack: inconsistent object file %s: [%s] vs\n> [%s]\\n\", file, p, objhdr);\n> +               fprint(2, \"pack: inconsistent object file %s: [%s] vs\n> [%s]\\n\", file, p, objhdr);\n>                errors++;\n>                allobj = 0;\n>                free(p);\n> @@ -727,7 +727,7 @@\n>\n>        // Old check.  Should be impossible since objhdrs match, but keep\n> the check anyway.\n>        if (lastobj >= 0 && obj != lastobj) {\n> -               fprint(2, \"gopack: inconsistent object file %s\\n\", file);\n> +               fprint(2, \"pack: inconsistent object file %s\\n\", file);\n>                errors++;\n>                allobj = 0;\n>                return;\n> @@ -735,7 +735,7 @@\n>        lastobj = obj;\n>\n>        if (!readar(b, obj, offset+size, 0)) {\n> -               fprint(2, \"gopack: invalid symbol reference in file %s\\n\",\n> file);\n> +               fprint(2, \"pack: invalid symbol reference in file %s\\n\",\n> file);\n>                errors++;\n>                allobj = 0;\n>                Bseek(b, offset, 0);\n> @@ -825,7 +825,7 @@\n>                        continue;\n>                goto foundstart;\n>        }\n> -       // fprint(2, \"gopack: warning: no package import section in %s\\n\",\n> file);\n> +       // fprint(2, \"pack: warning: no package import section in %s\\n\",\n> file);\n>        if(b != &bar || !pkgdefsafe)\n>                safe = 0;       // non-Go file (C or assembly)\n>        return;\n> @@ -875,7 +875,7 @@\n>                free(line);\n>        }\n>  bad:\n> -       fprint(2, \"gopack: bad package import section in %s\\n\", file);\n> +       fprint(2, \"pack: bad package import section in %s\\n\", file);\n>        errors++;\n>        return;\n>\n> @@ -885,7 +885,7 @@\n>        if (end == 0)\n>                goto bad;\n>        if(importblock != nil) {\n> -               fprint(2, \"gopack: multiple Go object files\\n\");\n> +               fprint(2, \"pack: multiple Go object files\\n\");\n>                errors++;\n>                return;\n>        }\n> @@ -893,7 +893,7 @@\n>        data = armalloc(end - start + 1);\n>        Bseek(b, start, 0);\n>        if (Bread(b, data, pkgsize) != pkgsize) {\n> -               fprint(2, \"gopack: error reading package import section in\n> %s\\n\", file);\n> +               fprint(2, \"pack: error reading package import section in\n> %s\\n\", file);\n>                errors++;\n>                return;\n>        }\n> @@ -993,11 +993,11 @@\n>        fd = open(arname, mode);\n>        if(fd >= 0){\n>                if(read(fd, mbuf, SARMAG) != SARMAG || strncmp(mbuf, ARMAG,\n> SARMAG)) {\n> -                       fprint(2, \"gopack: %s not in archive format\\n\",\n> arname);\n> +                       fprint(2, \"pack: %s not in archive format\\n\",\n> arname);\n>                        exits(\"error\");\n>                }\n>        }else if(!errok){\n> -               fprint(2, \"gopack: cannot open %s: %r\\n\", arname);\n> +               fprint(2, \"pack: cannot open %s: %r\\n\", arname);\n>                exits(\"error\");\n>        }\n>        return fd;\n> @@ -1013,7 +1013,7 @@\n>\n>        fd = create(arname, OWRITE, 0664);\n>        if(fd < 0){\n> -               fprint(2, \"gopack: cannot create %s: %r\\n\", arname);\n> +               fprint(2, \"pack: cannot create %s: %r\\n\", arname);\n>                exits(\"error\");\n>        }\n>        if(write(fd, ARMAG, SARMAG) != SARMAG)\n> @@ -1027,28 +1027,28 @@\n>  void\n>  wrerr(void)\n>  {\n> -       perror(\"gopack: write error\");\n> +       perror(\"pack: write error\");\n>        exits(\"error\");\n>  }\n>\n>  void\n>  rderr(void)\n>  {\n> -       perror(\"gopack: read error\");\n> +       perror(\"pack: read error\");\n>        exits(\"error\");\n>  }\n>\n>  void\n>  phaseerr(int offset)\n>  {\n> -       fprint(2, \"gopack: phase error at offset %d\\n\", offset);\n> +       fprint(2, \"pack: phase error at offset %d\\n\", offset);\n>        exits(\"error\");\n>  }\n>\n>  void\n>  usage(void)\n>  {\n> -       fprint(2, \"usage: gopack [%s][%s][P prefix] archive files ...\\n\",\n> opt, man);\n> +       fprint(2, \"usage: pack [%s][%s][P prefix] archive files ...\\n\",\n> opt, man);\n>        exits(\"error\");\n>  }\n>\n> @@ -1092,7 +1092,7 @@\n>\n>        d = dirfstat(Bfildes(b));\n>        if (d == nil) {\n> -               fprint(2, \"gopack: cannot stat %s\\n\", file);\n> +               fprint(2, \"pack: cannot stat %s\\n\", file);\n>                return;\n>        }\n>\n> @@ -1193,7 +1193,7 @@\n>        rfork(RFNOTEG);\n>\n>        if(createflag)\n> -               fprint(2, \"gopack: creating %s\\n\", arname);\n> +               fprint(2, \"pack: creating %s\\n\", arname);\n>        fd = arcreate(arname);\n>\n>        if(allobj)\n> @@ -1593,7 +1593,6 @@\n>  int\n>  getspace(void)\n>  {\n> -fprint(2, \"IN GETSPACE\\n\");\n>        if (astart && astart->head && page(astart))\n>                return 1;\n>        if (amiddle && amiddle->head && page(amiddle))\n> @@ -1638,7 +1637,7 @@\n>                        return cp;\n>                }\n>        } while (getspace());\n> -       fprint(2, \"gopack: out of memory\\n\");\n> +       fprint(2, \"pack: out of memory\\n\");\n>        exits(\"malloc\");\n>        return 0;\n>  }\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-01-30 23:42:05.473620",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-01-30 23:40:35.970309",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as 05c495f00135 ***\n\ncmd/pack: change gopack to pack in error messages\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5598051",
			"disapproval": false,
			"date": "2012-01-30 23:44:29.532272",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5598051: cmd/pack: change gopack to pack in error messages",
	"created": "2012-01-30 23:40:32.865494",
	"patchsets": [
		1,
		3001
	],
	"modified": "2012-01-30 23:44:30.292386",
	"closed": true,
	"issue": 5598051
}