{
	"description": "encoding/csv: add Error method to Writer\n\nFixed issue 3931",
	"cc": [
		"bradfitz@golang.org",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "(thinking aloud)\r\n\r\nCould we \"break\" the Go 1 API contract and just an error return value to\r\nFlush?\r\n\r\nI can't imagine what that would break?  Maybe people's mock/testing code,\r\nwith a mock interface with a void Flush() function?\r\n\r\n\r\nOn Tue, Dec 11, 2012 at 5:49 AM, <ryanslade@gmail.com> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> encoding/csv: add Error method to Writer\r\n>\r\n> Fixed issue 3931\r\n>\r\n> Please review this at https://codereview.appspot.**com/6923049/<https://codereview.appspot.com/6923049/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/encoding/csv/writer.go\r\n>   M src/pkg/encoding/csv/writer_**test.go\r\n>\r\n>\r\n> Index: src/pkg/encoding/csv/writer.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/encoding/csv/writer.**go\r\n> +++ b/src/pkg/encoding/csv/writer.**go\r\n> @@ -92,10 +92,17 @@\r\n>  }\r\n>\r\n>  // Flush writes any buffered data to the underlying io.Writer.\r\n> +// To check if an error occured during the Flush, call Error\r\n>  func (w *Writer) Flush() {\r\n>         w.w.Flush()\r\n>  }\r\n>\r\n> +// Error can be called after Flush for clients who want to be careful\r\n> +func (w *Writer) Error() error {\r\n> +       _, err := w.w.Write(nil)\r\n> +       return err\r\n> +}\r\n> +\r\n>  // WriteAll writes multiple CSV records to w using Write and then calls\r\n> Flush.\r\n>  func (w *Writer) WriteAll(records [][]string) (err error) {\r\n>         for _, record := range records {\r\n> Index: src/pkg/encoding/csv/writer_**test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/encoding/csv/writer_**test.go\r\n> +++ b/src/pkg/encoding/csv/writer_**test.go\r\n> @@ -6,6 +6,7 @@\r\n>\r\n>  import (\r\n>         \"bytes\"\r\n> +       \"errors\"\r\n>         \"testing\"\r\n>  )\r\n>\r\n> @@ -42,3 +43,30 @@\r\n>                 }\r\n>         }\r\n>  }\r\n> +\r\n> +type errorWriter struct{}\r\n> +\r\n> +func (e errorWriter) Write(b []byte) (int, error) {\r\n> +       return 0, errors.New(\"Test\")\r\n> +}\r\n> +\r\n> +func TestError(t *testing.T) {\r\n> +       b := &bytes.Buffer{}\r\n> +       f := NewWriter(b)\r\n> +       f.Write([]string{\"abc\"})\r\n> +       f.Flush()\r\n> +       err := f.Error()\r\n> +\r\n> +       if err != nil {\r\n> +               t.Errorf(\"Unexpected error: %s\\n\", err)\r\n> +       }\r\n> +\r\n> +       f = NewWriter(errorWriter{})\r\n> +       f.Write([]string{\"abc\"})\r\n> +       f.Flush()\r\n> +       err = f.Error()\r\n> +\r\n> +       if err == nil {\r\n> +               t.Error(\"Error should not be nil\")\r\n> +       }\r\n> +}\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-12-11 17:10:18.700060",
			"approval": false
		},
		{
			"sender": "ryanslade@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "To be honest, I was thinking the same thing.\r\n\r\nThe only people likely to use the new Error() method could just as easily\r\ncheck for a return value in a new Flush() method.\r\n\r\nAnd, as you say, I can't see any scenarios where adding a return value\r\nwould break existing code.\r\n\r\n\r\nOn Tue, Dec 11, 2012 at 5:10 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n\r\n> (thinking aloud)\r\n>\r\n> Could we \"break\" the Go 1 API contract and just an error return value to\r\n> Flush?\r\n>\r\n> I can't imagine what that would break?  Maybe people's mock/testing code,\r\n> with a mock interface with a void Flush() function?\r\n>\r\n>\r\n>\r\n> On Tue, Dec 11, 2012 at 5:49 AM, <ryanslade@gmail.com> wrote:\r\n>\r\n>> Reviewers: golang-dev_googlegroups.com,\r\n>>\r\n>> Message:\r\n>> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\r\n>>\r\n>> I'd like you to review this change to\r\n>> https://code.google.com/p/go/\r\n>>\r\n>>\r\n>> Description:\r\n>> encoding/csv: add Error method to Writer\r\n>>\r\n>> Fixed issue 3931\r\n>>\r\n>> Please review this at https://codereview.appspot.**com/6923049/<https://codereview.appspot.com/6923049/>\r\n>>\r\n>> Affected files:\r\n>>   M src/pkg/encoding/csv/writer.go\r\n>>   M src/pkg/encoding/csv/writer_**test.go\r\n>>\r\n>>\r\n>> Index: src/pkg/encoding/csv/writer.go\r\n>> ==============================**==============================**=======\r\n>> --- a/src/pkg/encoding/csv/writer.**go\r\n>> +++ b/src/pkg/encoding/csv/writer.**go\r\n>> @@ -92,10 +92,17 @@\r\n>>  }\r\n>>\r\n>>  // Flush writes any buffered data to the underlying io.Writer.\r\n>> +// To check if an error occured during the Flush, call Error\r\n>>  func (w *Writer) Flush() {\r\n>>         w.w.Flush()\r\n>>  }\r\n>>\r\n>> +// Error can be called after Flush for clients who want to be careful\r\n>> +func (w *Writer) Error() error {\r\n>> +       _, err := w.w.Write(nil)\r\n>> +       return err\r\n>> +}\r\n>> +\r\n>>  // WriteAll writes multiple CSV records to w using Write and then calls\r\n>> Flush.\r\n>>  func (w *Writer) WriteAll(records [][]string) (err error) {\r\n>>         for _, record := range records {\r\n>> Index: src/pkg/encoding/csv/writer_**test.go\r\n>> ==============================**==============================**=======\r\n>> --- a/src/pkg/encoding/csv/writer_**test.go\r\n>> +++ b/src/pkg/encoding/csv/writer_**test.go\r\n>> @@ -6,6 +6,7 @@\r\n>>\r\n>>  import (\r\n>>         \"bytes\"\r\n>> +       \"errors\"\r\n>>         \"testing\"\r\n>>  )\r\n>>\r\n>> @@ -42,3 +43,30 @@\r\n>>                 }\r\n>>         }\r\n>>  }\r\n>> +\r\n>> +type errorWriter struct{}\r\n>> +\r\n>> +func (e errorWriter) Write(b []byte) (int, error) {\r\n>> +       return 0, errors.New(\"Test\")\r\n>> +}\r\n>> +\r\n>> +func TestError(t *testing.T) {\r\n>> +       b := &bytes.Buffer{}\r\n>> +       f := NewWriter(b)\r\n>> +       f.Write([]string{\"abc\"})\r\n>> +       f.Flush()\r\n>> +       err := f.Error()\r\n>> +\r\n>> +       if err != nil {\r\n>> +               t.Errorf(\"Unexpected error: %s\\n\", err)\r\n>> +       }\r\n>> +\r\n>> +       f = NewWriter(errorWriter{})\r\n>> +       f.Write([]string{\"abc\"})\r\n>> +       f.Flush()\r\n>> +       err = f.Error()\r\n>> +\r\n>> +       if err == nil {\r\n>> +               t.Error(\"Error should not be nil\")\r\n>> +       }\r\n>> +}\r\n>>\r\n>>\r\n>>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-12-11 17:14:34.825040",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"ryanslade@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6923049/diff/5001/src/pkg/encoding/csv/writer.go\nFile src/pkg/encoding/csv/writer.go (right):\n\nhttps://codereview.appspot.com/6923049/diff/5001/src/pkg/encoding/csv/writer.go#newcode95\nsrc/pkg/encoding/csv/writer.go:95: // To check if an error occured during the Flush, call Error\nend in a period.\n\nhttps://codereview.appspot.com/6923049/diff/5001/src/pkg/encoding/csv/writer.go#newcode100\nsrc/pkg/encoding/csv/writer.go:100: // Error can be called after Flush for clients who want to be careful\nIf I buy safety glasses they don't say \"You can wear these eye protection glasses in your woodshop if you want to be careful\".\n\nHow about just:\n\n// Error returns the error from Flush.\n\nOr:\n\n// Error returns the Writer's last error.",
			"disapproval": false,
			"date": "2012-12-11 17:13:39.531970",
			"approval": false
		},
		{
			"sender": "ryanslade@gmail.com",
			"recipients": [
				"ryanslade@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/12/11 17:27:30, ryanslade wrote:\n> Hello mailto:bradfitz@golang.org, mailto:rsc@golang.org (cc: mailto:golang-dev@googlegroups.com),\n> \n> Please take another look.\n\nI've made changes to the comments as suggested.",
			"disapproval": false,
			"date": "2012-12-11 17:28:32.277030",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"ryanslade@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It looks like you need to complete a CLA as described at\nhttp://golang.org/doc/contribute.html#copyright\n\nPlease do that and then I will submit this CL.",
			"disapproval": false,
			"date": "2012-12-11 17:31:01.385990",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"ryanslade@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-12-11 17:30:13.649510",
			"approval": true
		},
		{
			"sender": "ryanslade@gmail.com",
			"recipients": [
				"ryanslade@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-12-11 10:49:00.344960",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"ryanslade@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I understand that it's tempting to break the API contract, and also it is unlikely that things will change, but part of the contract is that we don't get to make that call. We don't know about the closed source uses of Go.\n\nhttps://codereview.appspot.com/6923049/diff/5001/src/pkg/encoding/csv/writer.go\nFile src/pkg/encoding/csv/writer.go (right):\n\nhttps://codereview.appspot.com/6923049/diff/5001/src/pkg/encoding/csv/writer.go#newcode100\nsrc/pkg/encoding/csv/writer.go:100: // Error can be called after Flush for clients who want to be careful\n// Error reports any error that has occurred during a previous Write or Flush.",
			"disapproval": false,
			"date": "2012-12-11 17:16:30.508490",
			"approval": false
		},
		{
			"sender": "ryanslade@gmail.com",
			"recipients": [
				"ryanslade@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-11 17:27:30.147060",
			"approval": false
		},
		{
			"sender": "ryanslade@gmail.com",
			"recipients": [
				"ryanslade@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/12/11 17:31:01, rsc wrote:\n> It looks like you need to complete a CLA as described at\n> http://golang.org/doc/contribute.html#copyright\n> \n> Please do that and then I will submit this CL.\n\nI've submitted a CLA.",
			"disapproval": false,
			"date": "2012-12-11 17:39:52.607810",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"ryanslade@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=91e7645fae10 ***\n\nencoding/csv: add Error method to Writer\n\nFixed issue 3931\n\nR=bradfitz, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/6923049\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2012-12-11 18:29:27.608450",
			"approval": false
		}
	],
	"owner_email": "ryanslade@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "ryanslade",
	"subject": "code review 6923049: encoding/csv: add Error method to Writer",
	"created": "2012-12-11 10:47:39.798840",
	"patchsets": [
		1,
		2001,
		5001,
		5
	],
	"modified": "2012-12-11 18:29:27.608450",
	"closed": true,
	"issue": 6923049
}