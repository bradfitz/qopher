{
	"description": "exp/ssa: (#4 of 5): the SSA builder.",
	"cc": [
		"iant@google.com",
		"gri@golang.org",
		"iant@golang.org",
		"rogpeppe@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello iant@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-01-30 03:46:51.361400",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 29 January 2013 22:48, Alan Donovan <adonovan@google.com> wrote:\r\n\r\n> Sorry for the cruel and unusual punishment.  Please let me know how I can\r\n> make this more manageable to you.\r\n>\r\n\r\n(For example: provide you with a tool to dump the SSA form of a given\r\nprogram so you can actually evaluate it.)\r\n",
			"disapproval": false,
			"date": "2013-01-30 04:03:11.592270",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sorry for the cruel and unusual punishment.  Please let me know how I can\r\nmake this more manageable to you.\r\n\r\n\r\n\r\nOn 29 January 2013 22:46, <adonovan@google.com> wrote:\r\n\r\n> Reviewers: iant2,\r\n>\r\n> Message:\r\n> Hello iant@google.com (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> exp/ssa: (#4 of 5): the SSA builder.\r\n>\r\n> Please review this at https://codereview.appspot.**com/7196053/<https://codereview.appspot.com/7196053/>\r\n>\r\n> Affected files:\r\n>   A src/pkg/exp/ssa/builder.go\r\n>   A src/pkg/exp/ssa/emit.go\r\n>   M src/pkg/exp/ssa/func.go\r\n>   A src/pkg/exp/ssa/importer.go\r\n>   A src/pkg/exp/ssa/lvalue.go\r\n>   M src/pkg/exp/ssa/print.go\r\n>   A src/pkg/exp/ssa/promote.go\r\n>   M src/pkg/exp/ssa/ssa.go\r\n>   M src/pkg/exp/ssa/util.go\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-30 03:48:17.817110",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"iant@google.com",
				"gri@golang.org",
				"iant@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "(Also in this iteration: I've improved Function.FullName per a TODO.)\n\nhttps://codereview.appspot.com/7196053/diff/12001/src/pkg/exp/ssa/util.go\nFile src/pkg/exp/ssa/util.go (right):\n\nhttps://codereview.appspot.com/7196053/diff/12001/src/pkg/exp/ssa/util.go#newcode204\nsrc/pkg/exp/ssa/util.go:204: return uintptr(unsafe.Pointer(x.Pkg)) < uintptr(unsafe.Pointer(y.Pkg)) || x.Pkg == y.Pkg && x.Name < y.Name\nOn 2013/02/04 16:14:27, rog wrote:\n> On 2013/02/04 05:29:57, adonovan wrote:\n> > On 2013/02/02 02:12:57, iant wrote:\n> > > Why are you using unsafe here?  Needs at least a comment.  Note that this\n> will\n> > > make it hard to use the package on App Engine, so avoid if possible.\n> > \n> > Package names are not yet unique in the typechecker (sometimes they're \"\",\n> which\n> > is a bug), so we must use identity at least for now.\n> > \n> > Do you know of a better way to compare pointers?  It's a fundamentally safe\n> > operation so it's too bad it depends upon reflect.\n> \n> you can use reflect without using unsafe.\n> return reflect.ValueOf(x.Pkg).Pointer() < reflect.ValueOf(y.Pkg).Pointer()\n\nDone.  Thanks for the tip.",
			"disapproval": false,
			"date": "2013-02-04 16:26:11.403160",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"iant@google.com",
				"gri@golang.org",
				"iant@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=63883b563ea8 ***\n\nexp/ssa: (#4 of 5): the SSA builder.\n\nR=iant, gri, iant, rogpeppe\nCC=golang-dev\nhttps://codereview.appspot.com/7196053",
			"disapproval": false,
			"date": "2013-02-04 17:22:43.938230",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"adonovan@google.com",
				"iant@google.com",
				"gri@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7196053/diff/12001/src/pkg/exp/ssa/builder.go\nFile src/pkg/exp/ssa/builder.go (right):\n\nhttps://codereview.appspot.com/7196053/diff/12001/src/pkg/exp/ssa/builder.go#newcode24\nsrc/pkg/exp/ssa/builder.go:24: // Program's indices (maps) are mutated, with the following\nDo you mean that the maps are not mutated?  Otherwise I can't make sense of this paragraph.\n\nhttps://codereview.appspot.com/7196053/diff/12001/src/pkg/exp/ssa/builder.go#newcode33\nsrc/pkg/exp/ssa/builder.go:33: // TODO(adonovan): fix the following:\nIs this TODO list up to date?\n\nhttps://codereview.appspot.com/7196053/diff/12001/src/pkg/exp/ssa/builder.go#newcode165\nsrc/pkg/exp/ssa/builder.go:165: IntSize: 8,\nI guess there should be a way to indicate whether you want to simulate a 32-bit or 64-bit machine, since it will make a difference for some programs.\n\nhttps://codereview.appspot.com/7196053/diff/12001/src/pkg/exp/ssa/builder.go#newcode290\nsrc/pkg/exp/ssa/builder.go:290: // cond emits code to fn code to evaluate boolean condition e and jump\ns/fn code/fn/ ?\n\nhttps://codereview.appspot.com/7196053/diff/12001/src/pkg/exp/ssa/builder.go#newcode363\nsrc/pkg/exp/ssa/builder.go:363: for _, pred := range done.Preds {\nThis loop seems like overkill and requires a conditional.  What about\n\nphi.Edges = append(phi.Edges, short)\nphi.Edges = append(phi.Edges, y)\n\nor even more simply\n\nphi.Edges = []Value{short, y}\n\nhttps://codereview.appspot.com/7196053/diff/12001/src/pkg/exp/ssa/builder.go#newcode657\nsrc/pkg/exp/ssa/builder.go:657: return &element{\nNot sure that this is for, string elements aren't addressable.\n\nhttps://codereview.appspot.com/7196053/diff/12001/src/pkg/exp/ssa/builder.go#newcode1052\nsrc/pkg/exp/ssa/builder.go:1052: // call emits to fn code to evaluate all the parameters of a function\ns/call emits/setCall emits/ I think.\n\nhttps://codereview.appspot.com/7196053/diff/12001/src/pkg/exp/ssa/builder.go#newcode1543\nsrc/pkg/exp/ssa/builder.go:1543: func (b *Builder) stmt(fn *Function, _s ast.Stmt) {\nThis function is really large, considering breaking out handling of switch, type switch, select into subroutines.\n\nhttps://codereview.appspot.com/7196053/diff/12001/src/pkg/exp/ssa/importer.go\nFile src/pkg/exp/ssa/importer.go (right):\n\nhttps://codereview.appspot.com/7196053/diff/12001/src/pkg/exp/ssa/importer.go#newcode26\nsrc/pkg/exp/ssa/importer.go:26: // TODO(adonovan): implement a google3 SourceLoader.\nRemove Google specific comment.\n\nhttps://codereview.appspot.com/7196053/diff/12001/src/pkg/exp/ssa/promote.go\nFile src/pkg/exp/ssa/promote.go (right):\n\nhttps://codereview.appspot.com/7196053/diff/12001/src/pkg/exp/ssa/promote.go#newcode42\nsrc/pkg/exp/ssa/promote.go:42: s := make([]*anonFieldPath, n, n)\nJust write \", n)\", no need for \", n, n)\".\n\nhttps://codereview.appspot.com/7196053/diff/12001/src/pkg/exp/ssa/util.go\nFile src/pkg/exp/ssa/util.go (right):\n\nhttps://codereview.appspot.com/7196053/diff/12001/src/pkg/exp/ssa/util.go#newcode204\nsrc/pkg/exp/ssa/util.go:204: return uintptr(unsafe.Pointer(x.Pkg)) < uintptr(unsafe.Pointer(y.Pkg)) || x.Pkg == y.Pkg && x.Name < y.Name\nWhy are you using unsafe here?  Needs at least a comment.  Note that this will make it hard to use the package on App Engine, so avoid if possible.",
			"disapproval": false,
			"date": "2013-02-02 02:12:56.874470",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"adonovan@google.com",
				"iant@google.com",
				"gri@golang.org",
				"iant@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7196053/diff/23002/src/pkg/exp/ssa/util.go\nFile src/pkg/exp/ssa/util.go (right):\n\nhttps://codereview.appspot.com/7196053/diff/23002/src/pkg/exp/ssa/util.go#newcode207\nsrc/pkg/exp/ssa/util.go:207: return reflect.ValueOf(x.Pkg).Pointer() < reflect.ValueOf(y.Pkg).Pointer() ||\nThis is much better than using unsafe, but it may give you different results in different runs.",
			"disapproval": false,
			"date": "2013-02-04 17:04:57.264980",
			"approval": true
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"adonovan@google.com",
				"iant@google.com",
				"gri@golang.org",
				"iant@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7196053/diff/12001/src/pkg/exp/ssa/util.go\nFile src/pkg/exp/ssa/util.go (right):\n\nhttps://codereview.appspot.com/7196053/diff/12001/src/pkg/exp/ssa/util.go#newcode204\nsrc/pkg/exp/ssa/util.go:204: return uintptr(unsafe.Pointer(x.Pkg)) < uintptr(unsafe.Pointer(y.Pkg)) || x.Pkg == y.Pkg && x.Name < y.Name\nOn 2013/02/04 05:29:57, adonovan wrote:\n> On 2013/02/02 02:12:57, iant wrote:\n> > Why are you using unsafe here?  Needs at least a comment.  Note that this will\n> > make it hard to use the package on App Engine, so avoid if possible.\n> \n> Package names are not yet unique in the typechecker (sometimes they're \"\", which\n> is a bug), so we must use identity at least for now.\n> \n> Do you know of a better way to compare pointers?  It's a fundamentally safe\n> operation so it's too bad it depends upon reflect.\n\nyou can use reflect without using unsafe.\nreturn reflect.ValueOf(x.Pkg).Pointer() < reflect.ValueOf(y.Pkg).Pointer()",
			"disapproval": false,
			"date": "2013-02-04 16:14:27.673400",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"adonovan@google.com",
				"iant@google.com",
				"gri@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks Ian.  PTAL.\n\nhttps://codereview.appspot.com/7196053/diff/12001/src/pkg/exp/ssa/builder.go\nFile src/pkg/exp/ssa/builder.go (right):\n\nhttps://codereview.appspot.com/7196053/diff/12001/src/pkg/exp/ssa/builder.go#newcode24\nsrc/pkg/exp/ssa/builder.go:24: // Program's indices (maps) are mutated, with the following\nOn 2013/02/02 02:12:57, iant wrote:\n> Do you mean that the maps are not mutated?  Otherwise I can't make sense of this\n> paragraph.\n\nSorry, it was confusing.  I've reworded it to this:\n\n// The Builder's and Program's indices (maps) are populated and                 \n// mutated during the CREATE phase, but during the BUILD phase they             \n// remain constant, with the following exceptions:\n\nhttps://codereview.appspot.com/7196053/diff/12001/src/pkg/exp/ssa/builder.go#newcode33\nsrc/pkg/exp/ssa/builder.go:33: // TODO(adonovan): fix the following:\nOn 2013/02/02 02:12:57, iant wrote:\n> Is this TODO list up to date?\n\nYes it is, though it is not disjoint with the set of TODOs in the body of the code.\n\nhttps://codereview.appspot.com/7196053/diff/12001/src/pkg/exp/ssa/builder.go#newcode165\nsrc/pkg/exp/ssa/builder.go:165: IntSize: 8,\nOn 2013/02/02 02:12:57, iant wrote:\n> I guess there should be a way to indicate whether you want to simulate a 32-bit\n> or 64-bit machine, since it will make a difference for some programs.\n\nYes, that makes sense.  Perhaps we should expose the types.Context directly (though of course we must override the callbacks).  I've added a TODO.  I plan to review the API again upon gri's return as I'm sure he'll have ideas.\n\nhttps://codereview.appspot.com/7196053/diff/12001/src/pkg/exp/ssa/builder.go#newcode290\nsrc/pkg/exp/ssa/builder.go:290: // cond emits code to fn code to evaluate boolean condition e and jump\nOn 2013/02/02 02:12:57, iant wrote:\n> s/fn code/fn/ ?\n\nDone.\n\nhttps://codereview.appspot.com/7196053/diff/12001/src/pkg/exp/ssa/builder.go#newcode363\nsrc/pkg/exp/ssa/builder.go:363: for _, pred := range done.Preds {\nOn 2013/02/02 02:12:57, iant wrote:\n> This loop seems like overkill and requires a conditional.  What about\n> \n> phi.Edges = append(phi.Edges, short)\n> phi.Edges = append(phi.Edges, y)\n> \n> or even more simply\n> \n> phi.Edges = []Value{short, y}\n\nActually a loop is necessary: the call to b.cond(e.X) above may generate zero, one or multiple control flow edges to both 'rhs' and 'done' (consider the case where it contains && and ||) so we must not presume the cardinality of the done block's Preds.  We may assume only that the e.Y->done edge will be last.\n\nI've optimised the degenerate cases in which one of rhs or done is unreachable (e.g. true||y, false&&x) to avoid the phi node entirely, and simplified the loop so that the rhs check is no longer needed; it's always the last iteration.  (In fact the rhs check was incorrect since it is the first block of expr(e.Y) but not necessarily the last.  Amusingly, fixing this check actually caused a passing test to break because it unmasked bug http://code.google.com/p/go/issues/detail?id=4752 in 6g.)\n\nThe code now avoids testing block identity and better conveys the intuition about n short circuit cases plus one case that evaluates the Y clause.\n\nhttps://codereview.appspot.com/7196053/diff/12001/src/pkg/exp/ssa/builder.go#newcode657\nsrc/pkg/exp/ssa/builder.go:657: return &element{\nOn 2013/02/02 02:12:57, iant wrote:\n> Not sure that this is for, string elements aren't addressable.\n\nYou're right; I assume this is unreachable.  Removed; tests still pass.\n\nhttps://codereview.appspot.com/7196053/diff/12001/src/pkg/exp/ssa/builder.go#newcode1052\nsrc/pkg/exp/ssa/builder.go:1052: // call emits to fn code to evaluate all the parameters of a function\nOn 2013/02/02 02:12:57, iant wrote:\n> s/call emits/setCall emits/ I think.\n\nDone.\n\nhttps://codereview.appspot.com/7196053/diff/12001/src/pkg/exp/ssa/builder.go#newcode1543\nsrc/pkg/exp/ssa/builder.go:1543: func (b *Builder) stmt(fn *Function, _s ast.Stmt) {\nOn 2013/02/02 02:12:57, iant wrote:\n> This function is really large, considering breaking out handling of switch, type\n> switch, select into subroutines.\n\nDone.\n\nhttps://codereview.appspot.com/7196053/diff/12001/src/pkg/exp/ssa/importer.go\nFile src/pkg/exp/ssa/importer.go (right):\n\nhttps://codereview.appspot.com/7196053/diff/12001/src/pkg/exp/ssa/importer.go#newcode26\nsrc/pkg/exp/ssa/importer.go:26: // TODO(adonovan): implement a google3 SourceLoader.\nOn 2013/02/02 02:12:57, iant wrote:\n> Remove Google specific comment.\n\nDone.\n\nhttps://codereview.appspot.com/7196053/diff/12001/src/pkg/exp/ssa/promote.go\nFile src/pkg/exp/ssa/promote.go (right):\n\nhttps://codereview.appspot.com/7196053/diff/12001/src/pkg/exp/ssa/promote.go#newcode42\nsrc/pkg/exp/ssa/promote.go:42: s := make([]*anonFieldPath, n, n)\nOn 2013/02/02 02:12:57, iant wrote:\n> Just write \", n)\", no need for \", n, n)\".\n\nDone.\n\nhttps://codereview.appspot.com/7196053/diff/12001/src/pkg/exp/ssa/util.go\nFile src/pkg/exp/ssa/util.go (right):\n\nhttps://codereview.appspot.com/7196053/diff/12001/src/pkg/exp/ssa/util.go#newcode204\nsrc/pkg/exp/ssa/util.go:204: return uintptr(unsafe.Pointer(x.Pkg)) < uintptr(unsafe.Pointer(y.Pkg)) || x.Pkg == y.Pkg && x.Name < y.Name\nOn 2013/02/02 02:12:57, iant wrote:\n> Why are you using unsafe here?  Needs at least a comment.  Note that this will\n> make it hard to use the package on App Engine, so avoid if possible.\n\nPackage names are not yet unique in the typechecker (sometimes they're \"\", which is a bug), so we must use identity at least for now.\n\nDo you know of a better way to compare pointers?  It's a fundamentally safe operation so it's too bad it depends upon reflect.",
			"disapproval": false,
			"date": "2013-02-04 05:29:57.695240",
			"approval": false
		}
	],
	"owner_email": "adonovan@google.com",
	"private": false,
	"base_url": "",
	"owner": "adonovan",
	"subject": "code review 7196053: exp/ssa: (#4 of 5): the SSA builder.",
	"created": "2013-01-25 02:52:23.145760",
	"patchsets": [
		1,
		2001,
		4001,
		6001,
		7010,
		11001,
		12001,
		18001,
		23002,
		15004,
		19020
	],
	"modified": "2013-02-04 17:22:45.178070",
	"closed": true,
	"issue": 7196053
}