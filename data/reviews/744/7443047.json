{
	"description": "runtime: special-case small byte appends.\nUpdate issue 3679.\n\nBenchmarkAppend1Byte            484          199  -58.88%\nBenchmarkAppend4Bytes           829          286  -65.50%\nBenchmarkAppend8Bytes           484          365  -24.59%\nBenchmarkAppend16Bytes          484          498   +2.89%\nBenchmarkAppend32Bytes          486          484   -0.41%",
	"cc": [
		"iant@golang.org",
		"dave@cheney.net",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"mtj@google.com"
	],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-03-01 19:52:10.633110",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7443047/diff/3001/src/pkg/runtime/slice.c\nFile src/pkg/runtime/slice.c (right):\n\nhttps://codereview.appspot.com/7443047/diff/3001/src/pkg/runtime/slice.c#newcode109\nsrc/pkg/runtime/slice.c:109: if(w == 1 && y.len < 32) { // 32 empirically tested as approximate crossover on amd64.\nIf we do this, we might as well precompute y.len*w and compare that with 32.  Compared to the existing code that will add two multiplications (one more for ret.len*w) and remove one conditional, so it should be a wash.  And it will give us the faster path for appending a single int, or pointer, or whatever.\n\nhttps://codereview.appspot.com/7443047/diff/3001/src/pkg/runtime/slice.c#newcode112\nsrc/pkg/runtime/slice.c:112: for(i = 0; i < y.len; i++)\nWill this correctly handle an overlapping append?\n    append(a[1:], a[0:2]...)",
			"disapproval": false,
			"date": "2013-03-01 20:07:41.180220",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, iant@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-01 21:01:57.852010",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/01 21:12:58, r wrote:\n> This makes the motivating example, time.Format, benchmark as 7% faster\n> (see issue 3679).\n> \n> -rob\n\nRaw results on linux/386 (atom processor)\n\n220887(~/go/src/pkg/runtime) % ~/go/misc/benchcmp {old,new}.txt\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkAppend1Byte           1963         1487  -24.25%\nBenchmarkAppend4Bytes          1943         1766   -9.11%\nBenchmarkAppend8Bytes          1968         2216  +12.60%\nBenchmarkAppend16Bytes         2068         3330  +61.03%\nBenchmarkAppend32Bytes         2158         2232   +3.43%\n\n220887(~/go/src/pkg/time) % ~/go/misc/benchcmp {old,new}.txt\nbenchmark             old ns/op    new ns/op    delta\nBenchmarkFormat            5108         5220   +2.19%\nBenchmarkFormatNow         4785         4807   +0.46%\n\nI have a suspicion that the results will be the same for arm. Is it possible to make this special case amd64 only ?",
			"disapproval": false,
			"date": "2013-03-01 21:45:47.970220",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "not quite as good, but still worth it.\n\nBenchmarkAppend1Byte            484          199  -58.88%\nBenchmarkAppend4Bytes           829          286  -65.50%\nBenchmarkAppend8Bytes           484          365  -24.59%\nBenchmarkAppend16Bytes          484          498   +2.89%\nBenchmarkAppend32Bytes          486          484   -0.41%\n\nhttps://codereview.appspot.com/7443047/diff/3001/src/pkg/runtime/slice.c\nFile src/pkg/runtime/slice.c (right):\n\nhttps://codereview.appspot.com/7443047/diff/3001/src/pkg/runtime/slice.c#newcode112\nsrc/pkg/runtime/slice.c:112: for(i = 0; i < y.len; i++)\nNo. Ugh. More ugly comparisons required.",
			"disapproval": false,
			"date": "2013-03-01 21:02:15.663450",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This makes the motivating example, time.Format, benchmark as 7% faster\r\n(see issue 3679).\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-03-01 21:12:58.933520",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"iant@golang.org",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=278ff13eca7a ***\n\nruntime: special-case small byte appends.\nUpdate issue 3679.\n\nBenchmarkAppend1Byte            484          199  -58.88%\nBenchmarkAppend4Bytes           829          286  -65.50%\nBenchmarkAppend8Bytes           484          365  -24.59%\nBenchmarkAppend16Bytes          484          498   +2.89%\nBenchmarkAppend32Bytes          486          484   -0.41%\n\nR=iant, dave, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/7443047",
			"disapproval": false,
			"date": "2013-03-01 22:31:32.911450",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The way to do that would be to set the crossover constant. That won't\r\nbe hard to do. Can we do it post facto, once this CL has landed?\r\n\r\nA little surprised it's does so little. Either the ARM code generator\r\nis bad or the ARM memmove is brilliant. Maybe both.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-03-01 22:14:44.349610",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "SGTM. I'll benchmark on arm once it has landed.\r\n\r\nOn Sat, Mar 2, 2013 at 9:14 AM, Rob Pike <r@golang.org> wrote:\r\n> The way to do that would be to set the crossover constant. That won't\r\n> be hard to do. Can we do it post facto, once this CL has landed?\r\n>\r\n> A little surprised it's does so little. Either the ARM code generator\r\n> is bad or the ARM memmove is brilliant. Maybe both.\r\n>\r\n> -rob\r\n",
			"disapproval": false,
			"date": "2013-03-01 22:18:32.127940",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"r@golang.org",
				"iant@golang.org",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7443047/diff/4/src/pkg/runtime/slice.c\nFile src/pkg/runtime/slice.c (right):\n\nhttps://codereview.appspot.com/7443047/diff/4/src/pkg/runtime/slice.c#newcode114\nsrc/pkg/runtime/slice.c:114: if(p <= q || q+w <= p) // No overlap.\nto be slightly pedantic, in the second half || w <= p-q would avoid any chance of wraparound in q+w (subtract q from both sides; we know p > q in that half).",
			"disapproval": false,
			"date": "2013-03-01 22:18:35.803910",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"r@golang.org",
				"iant@golang.org",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-03-01 22:24:59.049080",
			"approval": true
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "does not need to be a threshold as is used in big. could just as easily be\r\na bit mask for lengths 1..32 (or 64) to capture micro interactions of cache\r\nand other in a single shift and test.\r\n\r\nOn Fri, Mar 1, 2013 at 2:31 PM, <r@golang.org> wrote:\r\n\r\n> *** Submitted as\r\n> https://code.google.com/p/go/**source/detail?r=278ff13eca7a<https://code.google.com/p/go/source/detail?r=278ff13eca7a>***\r\n>\r\n>\r\n> runtime: special-case small byte appends.\r\n> Update issue 3679.\r\n>\r\n> BenchmarkAppend1Byte            484          199  -58.88%\r\n> BenchmarkAppend4Bytes           829          286  -65.50%\r\n> BenchmarkAppend8Bytes           484          365  -24.59%\r\n> BenchmarkAppend16Bytes          484          498   +2.89%\r\n> BenchmarkAppend32Bytes          486          484   -0.41%\r\n>\r\n> R=iant, dave, rsc\r\n> CC=golang-dev\r\n> https://codereview.appspot.**com/7443047<https://codereview.appspot.com/7443047>\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.**com/7443047/<https://codereview.appspot.com/7443047/>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n\r\n\r\n-- \r\nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n650-335-5765\r\n",
			"disapproval": false,
			"date": "2013-03-02 02:24:46.115690",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 7443047: runtime: special-case small byte appends.",
	"created": "2013-03-01 19:52:06.817340",
	"patchsets": [
		1,
		3001,
		4,
		16001
	],
	"modified": "2013-03-02 02:24:46.191320",
	"closed": true,
	"issue": 7443047
}