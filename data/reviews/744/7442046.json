{
	"description": "net: add flags parameter to {Read,Write}Msg{IP,Udp}\n\nSocket's error buffer is read on Linux by calling\nrecvmsg with MSG_ERRQUEUE flag set. This CL adds\na flags parameter to ReadMsg and WriteMsg functions.",
	"cc": [
		"golang-dev@googlegroups.com",
		"mikioh.mikioh@gmail.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"adg@golang.org",
		"minux.ma@gmail.com",
		"bradfitz@golang.org"
	],
	"messages": [
		{
			"sender": "robryk@gmail.com",
			"recipients": [
				"robryk@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, mikioh.mikioh@gmail.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-03-05 03:43:34.756440",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Was this API expansion discussed somewhere? Should there be an issue #\r\nmentioned in the change description?\r\n",
			"disapproval": false,
			"date": "2013-03-05 06:38:12.712840",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"robryk@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7442046/diff/6007/src/pkg/net/fd_unix.go\nFile src/pkg/net/fd_unix.go (right):\n\nhttps://codereview.appspot.com/7442046/diff/6007/src/pkg/net/fd_unix.go#newcode493\nsrc/pkg/net/fd_unix.go:493: n, oobn, recvflags, sa, err = syscall.Recvmsg(fd.sysfd, p, oob, flags & ^syscall.MSG_WAITALL)\nuse &^.\n\nhttps://codereview.appspot.com/7442046/diff/6007/src/pkg/net/iprawsock_posix.go\nFile src/pkg/net/iprawsock_posix.go (right):\n\nhttps://codereview.appspot.com/7442046/diff/6007/src/pkg/net/iprawsock_posix.go#newcode100\nsrc/pkg/net/iprawsock_posix.go:100: // ReadMsgIP reads a packet from c, using system-specific flags from flags,\nwhich means using one need to use syscall package for this?\nthe net package is no longer portable.\n\nshould we define constants in the net package and translate\nthem into system-specific flags?",
			"disapproval": false,
			"date": "2013-03-05 14:31:31.415990",
			"approval": false
		},
		{
			"sender": "robryk@gmail.com",
			"recipients": [
				"robryk@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/05 06:38:12, adg wrote:\n> Was this API expansion discussed somewhere? Should there be an issue #\n> mentioned in the change description?\n\nThe whole discussion is in https://groups.google.com/forum/?fromgroups=#!topic/golang-dev/OruM6Gj0Z8o\n\nI didn't think of making an issue in the tracker. Should I have done that? Should I still do that for consistency's sake?",
			"disapproval": false,
			"date": "2013-03-05 15:09:37.953990",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "NOT LGTM\r\n\r\nThis breaks the Go 1 API promise and also makes net less portable,\r\nintroducing syscall-isms.  If you take flag-based API design to an extreme,\r\nwe end up with:\r\n\r\nfunc DoStuff(flags, flags2, flag3 uint64) int64\r\n\r\nIf you need the flags, the syscall package is there for you.  But the net\r\npackage tries to stay higher level.  And portable.\r\n\r\n\r\nOn Mon, Mar 4, 2013 at 7:43 PM, <robryk@gmail.com> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com,\r\n> mikioh.mikioh@gmail.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> net: add flags parameter to {Read,Write}Msg{IP,Udp}\r\n>\r\n> Socket's error buffer is read on Linux by calling\r\n> recvmsg with MSG_ERRQUEUE flag set. This CL adds\r\n> a flags parameter to ReadMsg and WriteMsg functions.\r\n>\r\n> Please review this at https://codereview.appspot.**com/7442046/<https://codereview.appspot.com/7442046/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/net/fd_unix.go\r\n>   M src/pkg/net/fd_windows.go\r\n>   M src/pkg/net/iprawsock_posix.go\r\n>   M src/pkg/net/protoconn_test.go\r\n>   M src/pkg/net/udpsock_posix.go\r\n>   M src/pkg/net/unixsock_posix.go\r\n>\r\n>\r\n> Index: src/pkg/net/fd_unix.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/fd_unix.go\r\n> +++ b/src/pkg/net/fd_unix.go\r\n> @@ -478,7 +478,7 @@\r\n>         return\r\n>  }\r\n>\r\n> -func (fd *netFD) ReadMsg(p []byte, oob []byte) (n, oobn, flags int, sa\r\n> syscall.Sockaddr, err error) {\r\n> +func (fd *netFD) ReadMsg(p []byte, oob []byte, flags int) (n, oobn,\r\n> recvflags int, sa syscall.Sockaddr, err error) {\r\n>         fd.rio.Lock()\r\n>         defer fd.rio.Unlock()\r\n>         if err := fd.incref(false); err != nil {\r\n> @@ -490,7 +490,7 @@\r\n>                         err = errTimeout\r\n>                         break\r\n>                 }\r\n> -               n, oobn, flags, sa, err = syscall.Recvmsg(fd.sysfd, p,\r\n> oob, 0)\r\n> +               n, oobn, recvflags, sa, err = syscall.Recvmsg(fd.sysfd, p,\r\n> oob, flags & ^syscall.MSG_WAITALL)\r\n>                 if err != nil {\r\n>                         // TODO(dfc) should n and oobn be set to 0\r\n>                         if err == syscall.EAGAIN {\r\n> @@ -583,7 +583,7 @@\r\n>         return\r\n>  }\r\n>\r\n> -func (fd *netFD) WriteMsg(p []byte, oob []byte, sa syscall.Sockaddr) (n\r\n> int, oobn int, err error) {\r\n> +func (fd *netFD) WriteMsg(p []byte, oob []byte, sa syscall.Sockaddr,\r\n> flags int) (n int, oobn int, err error) {\r\n>         fd.wio.Lock()\r\n>         defer fd.wio.Unlock()\r\n>         if err := fd.incref(false); err != nil {\r\n> @@ -595,7 +595,7 @@\r\n>                         err = errTimeout\r\n>                         break\r\n>                 }\r\n> -               err = syscall.Sendmsg(fd.sysfd, p, oob, sa, 0)\r\n> +               err = syscall.Sendmsg(fd.sysfd, p, oob, sa, flags)\r\n>                 if err == syscall.EAGAIN {\r\n>                         if err = fd.pollServer.WaitWrite(fd); err == nil {\r\n>                                 continue\r\n> Index: src/pkg/net/fd_windows.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/fd_windows.go\r\n> +++ b/src/pkg/net/fd_windows.go\r\n> @@ -671,10 +671,10 @@\r\n>\r\n>  var errNoSupport = errors.New(\"address family not supported\")\r\n>\r\n> -func (fd *netFD) ReadMsg(p []byte, oob []byte) (n, oobn, flags int, sa\r\n> syscall.Sockaddr, err error) {\r\n> +func (fd *netFD) ReadMsg(p []byte, oob []byte, flags int) (n, oobn, flags\r\n> int, sa syscall.Sockaddr, err error) {\r\n>         return 0, 0, 0, nil, errNoSupport\r\n>  }\r\n>\r\n> -func (fd *netFD) WriteMsg(p []byte, oob []byte, sa syscall.Sockaddr) (n\r\n> int, oobn int, err error) {\r\n> +func (fd *netFD) WriteMsg(p []byte, oob []byte, sa syscall.Sockaddr,\r\n> flags int) (n int, oobn int, err error) {\r\n>         return 0, 0, errNoSupport\r\n>  }\r\n> Index: src/pkg/net/iprawsock_posix.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/iprawsock_posix.**go\r\n> +++ b/src/pkg/net/iprawsock_posix.**go\r\n> @@ -97,16 +97,17 @@\r\n>         return n, addr.toAddr(), err\r\n>  }\r\n>\r\n> -// ReadMsgIP reads a packet from c, copying the payload into b and the\r\n> -// associdated out-of-band data into oob.  It returns the number of\r\n> -// bytes copied into b, the number of bytes copied into oob, the flags\r\n> -// that were set on the packet and the source address of the packet.\r\n> -func (c *IPConn) ReadMsgIP(b, oob []byte) (n, oobn, flags int, addr\r\n> *IPAddr, err error) {\r\n> +// ReadMsgIP reads a packet from c, using system-specific flags from\r\n> flags,\r\n> +// copying the payload into b and the associdated out-of-band data into\r\n> oob.\r\n> +// It returns the number of bytes copied into b, the number of bytes\r\n> copied\r\n> +// into oob, the flags that were set on the packet and the source address\r\n> +// of the packet.\r\n> +func (c *IPConn) ReadMsgIP(b, oob []byte, flags int) (n, oobn, recvflags\r\n> int, addr *IPAddr, err error) {\r\n>         if !c.ok() {\r\n>                 return 0, 0, 0, nil, syscall.EINVAL\r\n>         }\r\n>         var sa syscall.Sockaddr\r\n> -       n, oobn, flags, sa, err = c.fd.ReadMsg(b, oob)\r\n> +       n, oobn, recvflags, sa, err = c.fd.ReadMsg(b, oob, flags)\r\n>         switch sa := sa.(type) {\r\n>         case *syscall.SockaddrInet4:\r\n>                 addr = &IPAddr{IP: sa.Addr[0:]}\r\n> @@ -145,10 +146,10 @@\r\n>         return c.WriteToIP(b, a)\r\n>  }\r\n>\r\n> -// WriteMsgIP writes a packet to addr via c, copying the payload from\r\n> -// b and the associated out-of-band data from oob.  It returns the\r\n> -// number of payload and out-of-band bytes written.\r\n> -func (c *IPConn) WriteMsgIP(b, oob []byte, addr *IPAddr) (n, oobn int,\r\n> err error) {\r\n> +// WriteMsgIP writes a packet to addr via c, using system-specific flags\r\n> from\r\n> +// flags, copying the payload from b and the associated out-of-band data\r\n> from\r\n> +// oob. It returns the number of payload and out-of-band bytes written.\r\n> +func (c *IPConn) WriteMsgIP(b, oob []byte, addr *IPAddr, flags int) (n,\r\n> oobn int, err error) {\r\n>         if !c.ok() {\r\n>                 return 0, 0, syscall.EINVAL\r\n>         }\r\n> @@ -156,7 +157,7 @@\r\n>         if err != nil {\r\n>                 return 0, 0, &OpError{\"write\", c.fd.net, addr, err}\r\n>         }\r\n> -       return c.fd.WriteMsg(b, oob, sa)\r\n> +       return c.fd.WriteMsg(b, oob, sa, flags)\r\n>  }\r\n>\r\n>  // DialIP connects to the remote address raddr on the network protocol\r\n> netProto,\r\n> Index: src/pkg/net/protoconn_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/protoconn_test.**go\r\n> +++ b/src/pkg/net/protoconn_test.**go\r\n> @@ -146,10 +146,10 @@\r\n>         if _, _, err := c.ReadFromUDP(rb); err != nil {\r\n>                 t.Fatalf(\"UDPConn.ReadFromUDP failed: %v\", err)\r\n>         }\r\n> -       if _, _, err := c.WriteMsgUDP(wb, nil, c.LocalAddr().(*UDPAddr));\r\n> err != nil {\r\n> +       if _, _, err := c.WriteMsgUDP(wb, nil, c.LocalAddr().(*UDPAddr),\r\n> 0); err != nil {\r\n>                 condFatalf(t, \"UDPConn.WriteMsgUDP failed: %v\", err)\r\n>         }\r\n> -       if _, _, _, _, err := c.ReadMsgUDP(rb, nil); err != nil {\r\n> +       if _, _, _, _, err := c.ReadMsgUDP(rb, nil, 0); err != nil {\r\n>                 condFatalf(t, \"UDPConn.ReadMsgUDP failed: %v\", err)\r\n>         }\r\n>\r\n> @@ -203,10 +203,10 @@\r\n>         if _, _, err := c.ReadFromIP(rb); err != nil {\r\n>                 t.Fatalf(\"IPConn.ReadFromIP failed: %v\", err)\r\n>         }\r\n> -       if _, _, err := c.WriteMsgIP(wb, nil, c.LocalAddr().(*IPAddr));\r\n> err != nil {\r\n> +       if _, _, err := c.WriteMsgIP(wb, nil, c.LocalAddr().(*IPAddr), 0);\r\n> err != nil {\r\n>                 condFatalf(t, \"IPConn.WriteMsgIP failed: %v\", err)\r\n>         }\r\n> -       if _, _, _, _, err := c.ReadMsgIP(rb, nil); err != nil {\r\n> +       if _, _, _, _, err := c.ReadMsgIP(rb, nil, 0); err != nil {\r\n>                 condFatalf(t, \"IPConn.ReadMsgIP failed: %v\", err)\r\n>         }\r\n>\r\n> Index: src/pkg/net/udpsock_posix.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/udpsock_posix.go\r\n> +++ b/src/pkg/net/udpsock_posix.go\r\n> @@ -88,17 +88,17 @@\r\n>         return n, addr.toAddr(), err\r\n>  }\r\n>\r\n> -// ReadMsgUDP reads a packet from c, copying the payload into b and\r\n> -// the associdated out-of-band data into oob.  It returns the number\r\n> -// of bytes copied into b, the number of bytes copied into oob, the\r\n> -// flags that were set on the packet and the source address of the\r\n> -// packet.\r\n> -func (c *UDPConn) ReadMsgUDP(b, oob []byte) (n, oobn, flags int, addr\r\n> *UDPAddr, err error) {\r\n> +// ReadMsgUDP reads a packet from c, using system-specific flags from\r\n> flags,\r\n> +// copying the payload into b and the associdated out-of-band data into\r\n> oob.\r\n> +// It returns the number of bytes copied into b, the number of bytes\r\n> copied\r\n> +// into oob, the flags that were set on the packet and the source address\r\n> of\r\n> +// the packet.\r\n> +func (c *UDPConn) ReadMsgUDP(b, oob []byte, flags int) (n, oobn,\r\n> recvflags int, addr *UDPAddr, err error) {\r\n>         if !c.ok() {\r\n>                 return 0, 0, 0, nil, syscall.EINVAL\r\n>         }\r\n>         var sa syscall.Sockaddr\r\n> -       n, oobn, flags, sa, err = c.fd.ReadMsg(b, oob)\r\n> +       n, oobn, recvflags, sa, err = c.fd.ReadMsg(b, oob, flags)\r\n>         switch sa := sa.(type) {\r\n>         case *syscall.SockaddrInet4:\r\n>                 addr = &UDPAddr{IP: sa.Addr[0:], Port: sa.Port}\r\n> @@ -141,9 +141,10 @@\r\n>  }\r\n>\r\n>  // WriteMsgUDP writes a packet to addr via c, copying the payload from\r\n> -// b and the associated out-of-band data from oob.  It returns the\r\n> -// number of payload and out-of-band bytes written.\r\n> -func (c *UDPConn) WriteMsgUDP(b, oob []byte, addr *UDPAddr) (n, oobn int,\r\n> err error) {\r\n> +// b and the associated out-of-band data from oob and using\r\n> system-specific\r\n> +// flags from flags.  It returns the number of payload and out-of-band\r\n> bytes\r\n> +// written.\r\n> +func (c *UDPConn) WriteMsgUDP(b, oob []byte, addr *UDPAddr, flags int)\r\n> (n, oobn int, err error) {\r\n>         if !c.ok() {\r\n>                 return 0, 0, syscall.EINVAL\r\n>         }\r\n> @@ -154,7 +155,7 @@\r\n>         if err != nil {\r\n>                 return 0, 0, &OpError{\"write\", c.fd.net, addr, err}\r\n>         }\r\n> -       return c.fd.WriteMsg(b, oob, sa)\r\n> +       return c.fd.WriteMsg(b, oob, sa, flags)\r\n>  }\r\n>\r\n>  // DialUDP connects to the remote address raddr on the network net,\r\n> Index: src/pkg/net/unixsock_posix.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/unixsock_posix.**go\r\n> +++ b/src/pkg/net/unixsock_posix.**go\r\n> @@ -148,7 +148,7 @@\r\n>         if !c.ok() {\r\n>                 return 0, 0, 0, nil, syscall.EINVAL\r\n>         }\r\n> -       n, oobn, flags, sa, err := c.fd.ReadMsg(b, oob)\r\n> +       n, oobn, flags, sa, err := c.fd.ReadMsg(b, oob, 0)\r\n>         switch sa := sa.(type) {\r\n>         case *syscall.SockaddrUnix:\r\n>                 if sa.Name != \"\" {\r\n> @@ -199,9 +199,9 @@\r\n>                         return 0, 0, syscall.EAFNOSUPPORT\r\n>                 }\r\n>                 sa := &syscall.SockaddrUnix{Name: addr.Name}\r\n> -               return c.fd.WriteMsg(b, oob, sa)\r\n> +               return c.fd.WriteMsg(b, oob, sa, 0)\r\n>         }\r\n> -       return c.fd.WriteMsg(b, oob, nil)\r\n> +       return c.fd.WriteMsg(b, oob, nil, 0)\r\n>  }\r\n>\r\n>  // CloseRead shuts down the reading side of the Unix domain connection.\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": true,
			"date": "2013-03-05 15:45:46.111620",
			"approval": false
		},
		{
			"sender": "robryk@gmail.com",
			"recipients": [
				"robryk@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7442046/diff/6007/src/pkg/net/fd_unix.go\nFile src/pkg/net/fd_unix.go (right):\n\nhttps://codereview.appspot.com/7442046/diff/6007/src/pkg/net/fd_unix.go#newcode493\nsrc/pkg/net/fd_unix.go:493: n, oobn, recvflags, sa, err = syscall.Recvmsg(fd.sysfd, p, oob, flags & ^syscall.MSG_WAITALL)\nOn 2013/03/05 14:31:31, minux wrote:\n> use &^.\n\nDone.\n\nhttps://codereview.appspot.com/7442046/diff/6007/src/pkg/net/iprawsock_posix.go\nFile src/pkg/net/iprawsock_posix.go (right):\n\nhttps://codereview.appspot.com/7442046/diff/6007/src/pkg/net/iprawsock_posix.go#newcode100\nsrc/pkg/net/iprawsock_posix.go:100: // ReadMsgIP reads a packet from c, using system-specific flags from flags,\nOn 2013/03/05 14:31:31, minux wrote:\n> which means using one need to use syscall package for this?\n> the net package is no longer portable.\n> \n> should we define constants in the net package and translate\n> them into system-specific flags?\n\nThe returned recvflags value and exact format of the oob buffer are also system-specific.\n\nMaybe I should make it clearer what system-specific means: some of them are specified by POSIX (for example MSG_OOB) and some of them are Linux-specific. We currently don't support ReadMsg* on non-POSIX systems. The POSIX-defined flags would work now on all the systems on which ReadMsg* is supported.\n\nI agree that this is undersirable to export system-specific flags here, but it's currently impossible to do this outside the net package, because the pollserver is unexported (and we want to wait for data to read before calling Recvmsg).",
			"disapproval": false,
			"date": "2013-03-05 15:59:20.478250",
			"approval": false
		},
		{
			"sender": "robryk@gmail.com",
			"recipients": [
				"robryk@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/05 15:45:46, bradfitz wrote:\n> NOT LGTM\n> \n> This breaks the Go 1 API promise and also makes net less portable,\nHow does it break the API promise? {Read,Write}Msg{IP,Udp} didn't exist in Go1. go api tool doesn't report anything that would seem to be an error.\n\n> introducing syscall-isms.  If you take flag-based API design to an extreme,\n> we end up with:\n> \n> func DoStuff(flags, flags2, flag3 uint64) int64\nAgreed. The recvflags (which is already there) is a slight counterargument, but I understand that we need to arbitrarily terminate the slippery slope.\n\n> If you need the flags, the syscall package is there for you.  But the net\n> package tries to stay higher level.  And portable.\nWould you consider adding a `wait until there is something to read' and `wait until a write won't block' methods to sockets to be more desirable?\n\nRegards,\nRobert",
			"disapproval": false,
			"date": "2013-03-05 16:12:07.867460",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Mar 5, 2013 at 8:12 AM, <robryk@gmail.com> wrote:\r\n\r\n> On 2013/03/05 15:45:46, bradfitz wrote:\r\n>\r\n>> NOT LGTM\r\n>>\r\n>\r\n>  This breaks the Go 1 API promise and also makes net less portable,\r\n>>\r\n> How does it break the API promise? {Read,Write}Msg{IP,Udp} didn't exist\r\n> in Go1. go api tool doesn't report anything that would seem to be an\r\n> error.\r\n\r\n\r\nAh, okay, it's only in next.txt.\r\n\r\n>\r\n>  introducing syscall-isms.  If you take flag-based API design to an\r\n>>\r\n> extreme,\r\n>\r\n>> we end up with:\r\n>>\r\n>\r\n>  func DoStuff(flags, flags2, flag3 uint64) int64\r\n>>\r\n> Agreed. The recvflags (which is already there) is a slight\r\n> counterargument, but I understand that we need to arbitrarily terminate\r\n> the slippery slope.\r\n>\r\n>\r\n>  If you need the flags, the syscall package is there for you.  But the\r\n>>\r\n> net\r\n>\r\n>> package tries to stay higher level.  And portable.\r\n>>\r\n> Would you consider adding a `wait until there is something to read' and\r\n> `wait until a write won't block' methods to sockets to be more\r\n> desirable?\r\n>\r\n\r\nMaybe.  It might be too late for Go 1.1.  You'll need to open a bug,\r\nthough, with backstory/justification.\r\n\r\nI haven't thought about it, other than the knee-jerk response seeing the\r\nflags and what I thought was an API change from the diff.\r\n",
			"disapproval": false,
			"date": "2013-03-05 16:19:40.603750",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It's too late for this to make it into Go 1.1. See:\r\nhttp://golang.org/s/go11freeze\r\n\r\nPlease raise the issue (and there probably should be an issue tracker\r\nissue) after Go 1.1.\r\n",
			"disapproval": false,
			"date": "2013-03-05 23:35:45.439800",
			"approval": false
		},
		{
			"sender": "robryk@gmail.com",
			"recipients": [
				"robryk@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-03-06 13:25:09.053430",
			"approval": false
		}
	],
	"owner_email": "robryk@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "robryk",
	"subject": "code review 7442046: net: add flags parameter to {Read,Write}Msg{IP,Udp}",
	"created": "2013-03-05 03:20:00.850170",
	"patchsets": [
		1,
		2001,
		5001,
		6007,
		18001
	],
	"modified": "2013-03-06 13:25:11.067330",
	"closed": true,
	"issue": 7442046
}