{
	"description": "runtime/cgo: move common symbol overrides into 6c-compiled code\n\nThere are some function pointers declared by 6c in\npackage runtime without initialization and then also\ndeclared in package runtime/cgo with initialization,\nso that if runtime/cgo is linked in, the function pointers\nare non-nil, and otherwise they are nil. We depend on\nthis property for implementing non-essential cgo hooks\nin package runtime.\n\nThe declarations in package runtime are 6c-compiled\nand end up in .6 files. The declarations in package runtime/cgo\nare gcc-compiled and end up in .o files. Since 6l links the .6\nand .o files together, this all works.\n\nHowever, when we switch to \"external linking\" mode,\n6l will not see the .o files, and it would be up to the host linker\nto resolve the two into a single initialized symbol.\nNot all host linkers will do this (in particular OS X gcc will not).\n\nTo fix this, move the cgo declarations into 6c-compiled code,\nso that they end up in .6 files, so that 6l gets them no matter what.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"bradfitz@golang.org"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2013-02-28 21:50:25.209040",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Just moving code from file to file. TBR=anyone\r\n",
			"disapproval": false,
			"date": "2013-02-28 21:54:06.983610",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=86983e7002df ***\n\nruntime/cgo: move common symbol overrides into 6c-compiled code\n\nThere are some function pointers declared by 6c in\npackage runtime without initialization and then also\ndeclared in package runtime/cgo with initialization,\nso that if runtime/cgo is linked in, the function pointers\nare non-nil, and otherwise they are nil. We depend on\nthis property for implementing non-essential cgo hooks\nin package runtime.\n\nThe declarations in package runtime are 6c-compiled\nand end up in .6 files. The declarations in package runtime/cgo\nare gcc-compiled and end up in .o files. Since 6l links the .6\nand .o files together, this all works.\n\nHowever, when we switch to \"external linking\" mode,\n6l will not see the .o files, and it would be up to the host linker\nto resolve the two into a single initialized symbol.\nNot all host linkers will do this (in particular OS X gcc will not).\n\nTo fix this, move the cgo declarations into 6c-compiled code,\nso that they end up in .6 files, so that 6l gets them no matter what.\n\nR=golang-dev\nCC=golang-dev\nhttps://codereview.appspot.com/7440045",
			"disapproval": false,
			"date": "2013-02-28 21:54:31.649140",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Thu, Feb 28, 2013 at 1:54 PM, <rsc@golang.org> wrote:\r\n\r\n> *** Submitted as\r\n> https://code.google.com/p/go/**source/detail?r=86983e7002df<https://code.google.com/p/go/source/detail?r=86983e7002df>***\r\n>\r\n>\r\n> runtime/cgo: move common symbol overrides into 6c-compiled code\r\n>\r\n> There are some function pointers declared by 6c in\r\n> package runtime without initialization and then also\r\n> declared in package runtime/cgo with initialization,\r\n> so that if runtime/cgo is linked in, the function pointers\r\n> are non-nil, and otherwise they are nil. We depend on\r\n> this property for implementing non-essential cgo hooks\r\n> in package runtime.\r\n>\r\n> The declarations in package runtime are 6c-compiled\r\n> and end up in .6 files. The declarations in package runtime/cgo\r\n> are gcc-compiled and end up in .o files. Since 6l links the .6\r\n> and .o files together, this all works.\r\n>\r\n> However, when we switch to \"external linking\" mode,\r\n> 6l will not see the .o files, and it would be up to the host linker\r\n> to resolve the two into a single initialized symbol.\r\n> Not all host linkers will do this (in particular OS X gcc will not).\r\n>\r\n> To fix this, move the cgo declarations into 6c-compiled code,\r\n> so that they end up in .6 files, so that 6l gets them no matter what.\r\n>\r\n> R=golang-dev\r\n> CC=golang-dev\r\n> https://codereview.appspot.**com/7440045<https://codereview.appspot.com/7440045>\r\n>\r\n>\r\n> https://codereview.appspot.**com/7440045/<https://codereview.appspot.com/7440045/>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n>\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-01 00:37:21.697020",
			"approval": true
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 7440045: runtime/cgo: move common symbol overrides into 6c-compi...",
	"created": "2013-02-28 21:45:36.916670",
	"patchsets": [
		1,
		2001,
		4001,
		3039,
		11001
	],
	"modified": "2013-03-01 00:37:21.756460",
	"closed": true,
	"issue": 7440045
}