{
	"description": "dashboard: builder-facing implementation and tests",
	"cc": [
		"golang-dev@googlegroups.com",
		"dsymonds@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Here's the rest of the review.\n\nhttp://codereview.appspot.com/5431048/diff/3002/misc/dashboard/app/build/build.go\nFile misc/dashboard/app/build/build.go (right):\n\nhttp://codereview.appspot.com/5431048/diff/3002/misc/dashboard/app/build/build.go#newcode100\nmisc/dashboard/app/build/build.go:100: // It must be called from inside a datastore transaction.\nOn 2011/11/24 04:57:31, adg wrote:\n> On 2011/11/24 04:31:05, dsymonds wrote:\n> > A lot of these new methods are exported, and depend on being run in very\n> > specific contexts. Can they be unexported instead?\n> \n> They're all exported but this is the only one that has a special condition, that\n> being that it must run inside a transaction.\n\nOkay, but still: do they need to be exported? Several of these look like they should really only be used within this package.\n\nhttp://codereview.appspot.com/5431048/diff/3002/misc/dashboard/app/build/build.go#newcode429\nmisc/dashboard/app/build/build.go:429: appengine.NewContext(r).Errorf(\"Error: %v\", err)\nOn 2011/11/24 04:57:31, adg wrote:\n> On 2011/11/24 04:31:05, dsymonds wrote:\n> > the \"Error:\" prefix seems redundant here.\n> \n> I like it.\n\nSure, but those errors are only ever presented with an \"ERROR\" prefix (dev_appserver), or a coloured \"E\" box. It seems redundant. Up to you.\n\nhttp://codereview.appspot.com/5431048/diff/3/misc/dashboard/app/build/build.go\nFile misc/dashboard/app/build/build.go (right):\n\nhttp://codereview.appspot.com/5431048/diff/3/misc/dashboard/app/build/build.go#newcode215\nmisc/dashboard/app/build/build.go:215: tc := *com // clone so we don't clobber it\nwhy clone at all?\n\nvar tc Commit\nerr := datastore.Get(c, com.Key(c), &tc)\n\nhttp://codereview.appspot.com/5431048/diff/3/misc/dashboard/app/build/build.go#newcode230\nmisc/dashboard/app/build/build.go:230: // if this isn't the first Commit test the parent commit exists\nseems this should happen *before* the datastore.Put in line 227.\n\nhttp://codereview.appspot.com/5431048/diff/3/misc/dashboard/app/build/test.go\nFile misc/dashboard/app/build/test.go (right):\n\nhttp://codereview.appspot.com/5431048/diff/3/misc/dashboard/app/build/test.go#newcode7\nmisc/dashboard/app/build/test.go:7: // TODO(adg): subrepo tests\nalso, auth checking.\n\nhttp://codereview.appspot.com/5431048/diff/3/misc/dashboard/app/build/test.go#newcode63\nmisc/dashboard/app/build/test.go:63: if !appengine.IsDevAppServer() {\nduplicate check with nukeEntities\n\nhttp://codereview.appspot.com/5431048/diff/3/misc/dashboard/app/build/test.go#newcode63\nmisc/dashboard/app/build/test.go:63: if !appengine.IsDevAppServer() {\nduplicate check with nukeEntities.\n\nhttp://codereview.appspot.com/5431048/diff/3/misc/dashboard/app/build/test.go#newcode82\nmisc/dashboard/app/build/test.go:82: fail := func(f string, args ...interface{}) {\ncall it errorf and govet can check this file.\n\nhttp://codereview.appspot.com/5431048/diff/3/misc/dashboard/app/build/test.go#newcode83\nmisc/dashboard/app/build/test.go:83: f = \"%d %s: \" + f + \"\\n\"\nwhy a separate var? This seems trickier than it needs to be.\nAlso, consider renaming f to format.\n\nfmt.Fprintf(w, \"%d %s: \", i, t.path)\nfmt.Fprintf(w, format, args...)",
			"disapproval": false,
			"date": "2011-11-24 06:20:28.817896",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5431048/diff/3/misc/dashboard/app/build/build.go\nFile misc/dashboard/app/build/build.go (right):\n\nhttp://codereview.appspot.com/5431048/diff/3/misc/dashboard/app/build/build.go#newcode215\nmisc/dashboard/app/build/build.go:215: tc := *com // clone so we don't clobber it\nOn 2011/11/24 06:20:28, dsymonds wrote:\n> why clone at all?\n> \n> var tc Commit\n> err := datastore.Get(c, com.Key(c), &tc)\n\nDone.\n\nhttp://codereview.appspot.com/5431048/diff/3/misc/dashboard/app/build/build.go#newcode230\nmisc/dashboard/app/build/build.go:230: // if this isn't the first Commit test the parent commit exists\nOn 2011/11/24 06:20:28, dsymonds wrote:\n> seems this should happen *before* the datastore.Put in line 227.\n\nDoes it matter? If it fails then the whole transaction is rolled back.\n\nhttp://codereview.appspot.com/5431048/diff/3/misc/dashboard/app/build/test.go\nFile misc/dashboard/app/build/test.go (right):\n\nhttp://codereview.appspot.com/5431048/diff/3/misc/dashboard/app/build/test.go#newcode7\nmisc/dashboard/app/build/test.go:7: // TODO(adg): subrepo tests\nOn 2011/11/24 06:20:28, dsymonds wrote:\n> also, auth checking.\n\nDone.\n\nhttp://codereview.appspot.com/5431048/diff/3/misc/dashboard/app/build/test.go#newcode63\nmisc/dashboard/app/build/test.go:63: if !appengine.IsDevAppServer() {\nOn 2011/11/24 06:20:28, dsymonds wrote:\n> duplicate check with nukeEntities\n\nI want to make sure that there's no way that either testHandler or nukeEntities are ever run on production data. It's paranoid and technically unnecessary but it makes me feel better knowing it's there.\n\nhttp://codereview.appspot.com/5431048/diff/3/misc/dashboard/app/build/test.go#newcode82\nmisc/dashboard/app/build/test.go:82: fail := func(f string, args ...interface{}) {\nOn 2011/11/24 06:20:28, dsymonds wrote:\n> call it errorf and govet can check this file.\n\nDone.\n\nhttp://codereview.appspot.com/5431048/diff/3/misc/dashboard/app/build/test.go#newcode82\nmisc/dashboard/app/build/test.go:82: fail := func(f string, args ...interface{}) {\nOn 2011/11/24 06:20:28, dsymonds wrote:\n> call it errorf and govet can check this file.\n\nDone.\n\nhttp://codereview.appspot.com/5431048/diff/3/misc/dashboard/app/build/test.go#newcode83\nmisc/dashboard/app/build/test.go:83: f = \"%d %s: \" + f + \"\\n\"\nOn 2011/11/24 06:20:28, dsymonds wrote:\n> why a separate var? This seems trickier than it needs to be.\n> Also, consider renaming f to format.\n> \n> fmt.Fprintf(w, \"%d %s: \", i, t.path)\n> fmt.Fprintf(w, format, args...)\n\nDone.",
			"disapproval": false,
			"date": "2011-11-24 23:30:27.690244",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=41974a4eed1f ***\n\ndashboard: builder-facing implementation and tests\n\nR=golang-dev, dsymonds\nCC=golang-dev\nhttp://codereview.appspot.com/5431048",
			"disapproval": false,
			"date": "2011-11-25 01:53:13.925875",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 25 November 2011 12:09,  <dsymonds@golang.org> wrote:\n> LGTM\n>\n>\n> http://codereview.appspot.com/5431048/diff/3/misc/dashboard/app/build/build.go\n> File misc/dashboard/app/build/build.go (right):\n>\n> http://codereview.appspot.com/5431048/diff/3/misc/dashboard/app/build/build.go#newcode230\n> misc/dashboard/app/build/build.go:230: // if this isn't the first Commit\n> test the parent commit exists\n> On 2011/11/24 23:30:29, adg wrote:\n>>\n>> On 2011/11/24 06:20:28, dsymonds wrote:\n>> > seems this should happen *before* the datastore.Put in line 227.\n>\n>> Does it matter? If it fails then the whole transaction is rolled back.\n>\n> It doesn't matter for correctness, but it'll save an RPC if there's\n> something weird going on. Up to you.\n\nClarity of code is more important to me than saving an RPC in an\nunusual failure state.\n",
			"disapproval": false,
			"date": "2011-11-25 01:53:32.482615",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Just looked at build.go so far.\n\nhttp://codereview.appspot.com/5431048/diff/3002/misc/dashboard/app/build/build.go\nFile misc/dashboard/app/build/build.go (right):\n\nhttp://codereview.appspot.com/5431048/diff/3002/misc/dashboard/app/build/build.go#newcode39\nmisc/dashboard/app/build/build.go:39: _, err := datastore.NewQuery(\"Commit\").\ninstead of a query, why not put a field in Package for this?\n\nhttp://codereview.appspot.com/5431048/diff/3002/misc/dashboard/app/build/build.go#newcode50\nmisc/dashboard/app/build/build.go:50: func (p *Package) Exists(c appengine.Context) os.Error {\nthis needs a comment. The name also feels wrong. I'd expect an Exists func to return a bool, but this is more complex. If you ask whether something exists, why is it an _error_ if it doesn't exist? Maybe this should return (bool, os.Error).\n\nhttp://codereview.appspot.com/5431048/diff/3002/misc/dashboard/app/build/build.go#newcode89\nmisc/dashboard/app/build/build.go:89: func (c *Commit) Validate() os.Error {\nValid?\n\nhttp://codereview.appspot.com/5431048/diff/3002/misc/dashboard/app/build/build.go#newcode100\nmisc/dashboard/app/build/build.go:100: // It must be called from inside a datastore transaction.\nA lot of these new methods are exported, and depend on being run in very specific contexts. Can they be unexported instead?\n\nhttp://codereview.appspot.com/5431048/diff/3002/misc/dashboard/app/build/build.go#newcode213\nmisc/dashboard/app/build/build.go:213: tx := func(c appengine.Context) os.Error {\nthis seems big enough to pull out into its own standalone function.\n\nhttp://codereview.appspot.com/5431048/diff/3002/misc/dashboard/app/build/build.go#newcode428\nmisc/dashboard/app/build/build.go:428: func logErr(w http.ResponseWriter, r *http.Request, err os.Error) {\nif this returned the error you passed in, you could save a lot of lines above.\n\nhttp://codereview.appspot.com/5431048/diff/3002/misc/dashboard/app/build/build.go#newcode429\nmisc/dashboard/app/build/build.go:429: appengine.NewContext(r).Errorf(\"Error: %v\", err)\nthe \"Error:\" prefix seems redundant here.",
			"disapproval": false,
			"date": "2011-11-24 04:31:05.082982",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks.\n\nhttp://codereview.appspot.com/5431048/diff/3002/misc/dashboard/app/build/build.go\nFile misc/dashboard/app/build/build.go (right):\n\nhttp://codereview.appspot.com/5431048/diff/3002/misc/dashboard/app/build/build.go#newcode39\nmisc/dashboard/app/build/build.go:39: _, err := datastore.NewQuery(\"Commit\").\nOn 2011/11/24 04:31:05, dsymonds wrote:\n> instead of a query, why not put a field in Package for this?\n\nDone.\n\nhttp://codereview.appspot.com/5431048/diff/3002/misc/dashboard/app/build/build.go#newcode50\nmisc/dashboard/app/build/build.go:50: func (p *Package) Exists(c appengine.Context) os.Error {\nIt's now GetPackage. Makes a lot more sense that way.\n\nhttp://codereview.appspot.com/5431048/diff/3002/misc/dashboard/app/build/build.go#newcode89\nmisc/dashboard/app/build/build.go:89: func (c *Commit) Validate() os.Error {\nOn 2011/11/24 04:31:05, dsymonds wrote:\n> Valid?\n\nDone.\n\nhttp://codereview.appspot.com/5431048/diff/3002/misc/dashboard/app/build/build.go#newcode100\nmisc/dashboard/app/build/build.go:100: // It must be called from inside a datastore transaction.\nOn 2011/11/24 04:31:05, dsymonds wrote:\n> A lot of these new methods are exported, and depend on being run in very\n> specific contexts. Can they be unexported instead?\n\nThey're all exported but this is the only one that has a special condition, that being that it must run inside a transaction.\n\nhttp://codereview.appspot.com/5431048/diff/3002/misc/dashboard/app/build/build.go#newcode213\nmisc/dashboard/app/build/build.go:213: tx := func(c appengine.Context) os.Error {\nOn 2011/11/24 04:31:05, dsymonds wrote:\n> this seems big enough to pull out into its own standalone function.\n\nDone.\n\nhttp://codereview.appspot.com/5431048/diff/3002/misc/dashboard/app/build/build.go#newcode428\nmisc/dashboard/app/build/build.go:428: func logErr(w http.ResponseWriter, r *http.Request, err os.Error) {\nOn 2011/11/24 04:31:05, dsymonds wrote:\n> if this returned the error you passed in, you could save a lot of lines above.\n\nIf you're referring to the recurring pattern:\n  logErr(w, r, err)\n  return\nnote that these are all in http.HandlerFuncs which don't have a return value.\n\nhttp://codereview.appspot.com/5431048/diff/3002/misc/dashboard/app/build/build.go#newcode429\nmisc/dashboard/app/build/build.go:429: appengine.NewContext(r).Errorf(\"Error: %v\", err)\nOn 2011/11/24 04:31:05, dsymonds wrote:\n> the \"Error:\" prefix seems redundant here.\n\nI like it.",
			"disapproval": false,
			"date": "2011-11-24 04:57:31.007007",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2011-11-24 04:15:03.472338",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5431048/diff/3/misc/dashboard/app/build/build.go\nFile misc/dashboard/app/build/build.go (right):\n\nhttp://codereview.appspot.com/5431048/diff/3/misc/dashboard/app/build/build.go#newcode230\nmisc/dashboard/app/build/build.go:230: // if this isn't the first Commit test the parent commit exists\nOn 2011/11/24 23:30:29, adg wrote:\n> On 2011/11/24 06:20:28, dsymonds wrote:\n> > seems this should happen *before* the datastore.Put in line 227.\n> \n> Does it matter? If it fails then the whole transaction is rolled back.\n\nIt doesn't matter for correctness, but it'll save an RPC if there's something weird going on. Up to you.",
			"disapproval": false,
			"date": "2011-11-25 01:09:24.781841",
			"approval": true
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 5431048: dashboard: builder-facing implementation and tests",
	"created": "2011-11-23 06:18:38.045941",
	"patchsets": [
		1,
		2001,
		3001,
		2003,
		5001,
		1007,
		2010,
		3002,
		3,
		2015,
		4
	],
	"modified": "2011-11-25 01:53:15.709634",
	"closed": true,
	"issue": 5431048
}