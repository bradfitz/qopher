{
	"description": "gc: changes to export format in preparation for inlining.\n\nstring literals used as package qualifiers are now prefixed with '@'\nwhich obviates the need for the extra ':' before tags.",
	"cc": [
		"rsc@golang.org",
		"gri@golang.org",
		"lvd@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "lvd@golang.org",
			"recipients": [
				"lvd@golang.org",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, gri@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-09-28 00:33:29.553494",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"lvd@golang.org",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "FYI.\n\nhttp://codereview.appspot.com/5129057/diff/4/src/pkg/go/types/gcimporter.go\nFile src/pkg/go/types/gcimporter.go (right):\n\nhttp://codereview.appspot.com/5129057/diff/4/src/pkg/go/types/gcimporter.go#newcode719\nsrc/pkg/go/types/gcimporter.go:719: // FuncBody = '{' ... '}'\ns/'/\"/ (4x)\n\nhttp://codereview.appspot.com/5129057/diff/4/src/pkg/go/types/gcimporter.go#newcode733\nsrc/pkg/go/types/gcimporter.go:733: // FuncDecl = \"func\" ExportedName Signature .\n... Signature [ FuncBody ] .",
			"disapproval": false,
			"date": "2011-09-28 00:41:57.569337",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lvd@golang.org",
				"rsc@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Looks pretty good.\n\nhttp://codereview.appspot.com/5129057/diff/3011/src/cmd/gc/go.h\nFile src/cmd/gc/go.h (right):\n\nhttp://codereview.appspot.com/5129057/diff/3011/src/cmd/gc/go.h#newcode1134\nsrc/cmd/gc/go.h:1134: int\tVconv(Fmt *fp);\nPlease add a #pragma at the bottom of the file.\n\nhttp://codereview.appspot.com/5129057/diff/3011/src/cmd/gc/go.y\nFile src/cmd/gc/go.y (right):\n\nhttp://codereview.appspot.com/5129057/diff/3011/src/cmd/gc/go.y#newcode991\nsrc/cmd/gc/go.y:991: |\t'@' LLITERAL '.' LNAME\nadd at end of line  /* only during import */\n\nAlso, this same rule + action is duplicated below.\nMaybe it should still be hidden_importsym.  Then the\ncomment is unnecessary, and this is just\n\nsym:\n    LNAME\n|   hidden_importsym\n\nhttp://codereview.appspot.com/5129057/diff/3011/src/cmd/gc/go.y#newcode1440\nsrc/cmd/gc/go.y:1440: ntype\nCan we keep name_or_type?\n\nIt's unnecessary in the grammar but it makes clear that\nwhen you're parsing the argument list you don't yet know\nwhether this is a parameter name or a type.\n\nhttp://codereview.appspot.com/5129057/diff/3011/src/cmd/gc/go.y#newcode1927\nsrc/cmd/gc/go.y:1927: sym\nI'd prefer if this stayed hidden_importsym.\nWriting sym here suggests that a plain LNAME\nis valid here, which is not true.\nThe explicit package name is fundamental to\nthe \"set structpkg\" part of hidden_pkg_importsym.\n\nhttp://codereview.appspot.com/5129057/diff/3011/src/cmd/gc/subr.c\nFile src/cmd/gc/subr.c (right):\n\nhttp://codereview.appspot.com/5129057/diff/3011/src/cmd/gc/subr.c#newcode766\nsrc/cmd/gc/subr.c:766: if (n->val.ctype == CTxxx)\nOdd to do this in the general case here.\nShould be part of a new case OLITERAL.\nDoesn't need to dodump the left and right.\n\nhttp://codereview.appspot.com/5129057/diff/3011/src/cmd/gc/subr.c#newcode884\nsrc/cmd/gc/subr.c:884: default:\nif you move this default out of the switch\nyou don't need the unexplained return 0 below.\n\nhttp://codereview.appspot.com/5129057/diff/3011/src/cmd/gc/subr.c#newcode1205\nsrc/cmd/gc/subr.c:1205: // global flag packagequotes\nIs this a note to yourself to explain the global?\n\nhttp://codereview.appspot.com/5129057/diff/3011/src/pkg/go/types/gcimporter.go\nFile src/pkg/go/types/gcimporter.go (right):\n\nhttp://codereview.appspot.com/5129057/diff/3011/src/pkg/go/types/gcimporter.go#newcode464\nsrc/pkg/go/types/gcimporter.go:464: // TODO(gri) should this be parseExportedName here?  YES(lvd)\nObviously delete this if you keep the code change.\n\nhttp://codereview.appspot.com/5129057/diff/3011/test/ddd1.go\nFile test/ddd1.go (right):\n\nhttp://codereview.appspot.com/5129057/diff/3011/test/ddd1.go#newcode19\ntest/ddd1.go:19: _ = sum([]int{1}) // ERROR \"\\[\\]int.*as type int|incompatible\"\nI omitted the literals intentionally, because they can\nbe arbitrarily large and are probably not worth showing\nin their entirety.  Can we have a short flag %#hN to format\nas '[]int literal' instead?\n\nhttp://codereview.appspot.com/5129057/diff/3011/test/escape2.go\nFile test/escape2.go (right):\n\nhttp://codereview.appspot.com/5129057/diff/3011/test/escape2.go#newcode186\ntest/escape2.go:186: f := func() int { // ERROR \"func .* escapes to heap\"\nSame here: is this printing the entire literal in the\nerror message?  That's problematic.  Should use %#hN and\nwrite that as 'func literal'.",
			"disapproval": false,
			"date": "2011-09-28 18:43:57.175486",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@golang.org",
				"rsc@golang.org",
				"gri@golang.org",
				"lvd@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "first round of responses.  will make the h flag for %#hN now.\n\nhttp://codereview.appspot.com/5129057/diff/4/src/pkg/go/types/gcimporter.go\nFile src/pkg/go/types/gcimporter.go (right):\n\nhttp://codereview.appspot.com/5129057/diff/4/src/pkg/go/types/gcimporter.go#newcode719\nsrc/pkg/go/types/gcimporter.go:719: // FuncBody = '{' ... '}'\nOn 2011/09/28 00:41:57, gri wrote:\n> s/'/\"/ (4x)\n\nDone.\n\nhttp://codereview.appspot.com/5129057/diff/4/src/pkg/go/types/gcimporter.go#newcode733\nsrc/pkg/go/types/gcimporter.go:733: // FuncDecl = \"func\" ExportedName Signature .\nOn 2011/09/28 00:41:57, gri wrote:\n> ... Signature [ FuncBody ] .\n\nDone.\n\nhttp://codereview.appspot.com/5129057/diff/3011/src/cmd/gc/go.h\nFile src/cmd/gc/go.h (right):\n\nhttp://codereview.appspot.com/5129057/diff/3011/src/cmd/gc/go.h#newcode1134\nsrc/cmd/gc/go.h:1134: int\tVconv(Fmt *fp);\nOn 2011/09/28 18:43:57, rsc wrote:\n> Please add a #pragma at the bottom of the file.\n\nDone.\n\nhttp://codereview.appspot.com/5129057/diff/3011/src/cmd/gc/go.y\nFile src/cmd/gc/go.y (right):\n\nhttp://codereview.appspot.com/5129057/diff/3011/src/cmd/gc/go.y#newcode991\nsrc/cmd/gc/go.y:991: |\t'@' LLITERAL '.' LNAME\nOn 2011/09/28 18:43:57, rsc wrote:\n> add at end of line  /* only during import */\n> \n> Also, this same rule + action is duplicated below.\n> Maybe it should still be hidden_importsym.  Then the\n> comment is unnecessary, and this is just\n> \n> sym:\n>     LNAME\n> |   hidden_importsym\n\nDone.\n\nhttp://codereview.appspot.com/5129057/diff/3011/src/cmd/gc/go.y#newcode1440\nsrc/cmd/gc/go.y:1440: ntype\nOn 2011/09/28 18:43:57, rsc wrote:\n> Can we keep name_or_type?\n> \n> It's unnecessary in the grammar but it makes clear that\n> when you're parsing the argument list you don't yet know\n> whether this is a parameter name or a type.\n\nDone.\n\nhttp://codereview.appspot.com/5129057/diff/3011/src/cmd/gc/go.y#newcode1927\nsrc/cmd/gc/go.y:1927: sym\nOn 2011/09/28 18:43:57, rsc wrote:\n> I'd prefer if this stayed hidden_importsym.\n> Writing sym here suggests that a plain LNAME\n> is valid here, which is not true.\n> The explicit package name is fundamental to\n> the \"set structpkg\" part of hidden_pkg_importsym.\n> \n\nDone.\n\nhttp://codereview.appspot.com/5129057/diff/3011/src/cmd/gc/subr.c\nFile src/cmd/gc/subr.c (right):\n\nhttp://codereview.appspot.com/5129057/diff/3011/src/cmd/gc/subr.c#newcode766\nsrc/cmd/gc/subr.c:766: if (n->val.ctype == CTxxx)\nOn 2011/09/28 18:43:57, rsc wrote:\n> Odd to do this in the general case here.\n> Should be part of a new case OLITERAL.\n> Doesn't need to dodump the left and right.\n> \n\none of the reasons i added it was to see if there were other O's that had val set, but if not then you're right.\n\nhttp://codereview.appspot.com/5129057/diff/3011/src/cmd/gc/subr.c#newcode884\nsrc/cmd/gc/subr.c:884: default:\nOn 2011/09/28 18:43:57, rsc wrote:\n> if you move this default out of the switch\n> you don't need the unexplained return 0 below.\n\nDone.\n\nhttp://codereview.appspot.com/5129057/diff/3011/src/cmd/gc/subr.c#newcode884\nsrc/cmd/gc/subr.c:884: default:\nOn 2011/09/28 18:43:57, rsc wrote:\n> if you move this default out of the switch\n> you don't need the unexplained return 0 below.\n\nDone.\n\nhttp://codereview.appspot.com/5129057/diff/3011/src/cmd/gc/subr.c#newcode1205\nsrc/cmd/gc/subr.c:1205: // global flag packagequotes\nOn 2011/09/28 18:43:57, rsc wrote:\n> Is this a note to yourself to explain the global?\n\nnot just to myself\n\nhttp://codereview.appspot.com/5129057/diff/3011/src/pkg/go/types/gcimporter.go\nFile src/pkg/go/types/gcimporter.go (right):\n\nhttp://codereview.appspot.com/5129057/diff/3011/src/pkg/go/types/gcimporter.go#newcode464\nsrc/pkg/go/types/gcimporter.go:464: // TODO(gri) should this be parseExportedName here?  YES(lvd)\nOn 2011/09/28 18:43:57, rsc wrote:\n> Obviously delete this if you keep the code change.\n\nDone.",
			"disapproval": false,
			"date": "2011-10-01 21:20:10.054862",
			"approval": false
		},
		{
			"sender": "lvd@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Sat, Oct 1, 2011 at 14:20, <lvd@google.com> wrote:\n\n> ....  will make the h flag for %#hN now.\n\n\nOf course, it was never going to be that easy.  exprfmt calls fmtprint,\nwhich clears f->flags.  that's a problem when exprfmt recurses, eg for\n&MyStruct, the call to fmtprint %O for the & leaves the flags cleared.  i\ncould change lib9/fmt/fmtprint.c to restore the flags on exit, (line 42)\nbecause i wonder if that wasn't the intention.  however, i suspect this may\nchange expected outputs all over cmd/../*.c.  which needn't be disastrous.\n\nMaybe it's time to bite the bullet and clean up the printing a bit b/c i've\nwasted quite a bit of time walking through the call chains.  basically we\nhave 3 usecases for printing:  debugging the compiler,  errors and\ndiagnostics (-m), and printing the export section.\ni could either go over all formats and make the + flag print end-user\nfriendly, and # in export format, or make a global flag that takes the role\nof the existing erroring and exporting (or keep those) and make them used\nconsistently all over the place.\n\nmaybe there's a pragmatic shortcut, but it's not going to be prettier.\n\n/L\n",
			"disapproval": false,
			"date": "2011-10-01 22:54:03.410452",
			"approval": false
		},
		{
			"sender": "lvd@golang.org",
			"recipients": [
				"lvd@golang.org",
				"rsc@golang.org",
				"gri@golang.org",
				"lvd@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, gri@golang.org, lvd@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-07 15:31:01.916672",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@golang.org",
				"rsc@golang.org",
				"gri@golang.org",
				"lvd@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5129057/diff/30002/src/cmd/gc/print.c\nFile src/cmd/gc/print.c (right):\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/cmd/gc/print.c#newcode510\nsrc/cmd/gc/print.c:510: if (n->ninit) {\nOn 2011/10/07 15:59:50, rsc wrote:\n> Why does this print as\n> { x; if y { ... } }\n> instead of\n> if x; y { ... }\n> ?\n> \n> Maybe don't do that unless count(n->ninit) > 1?\n\nDone.\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/cmd/gc/print.c#newcode527\nsrc/cmd/gc/print.c:527: if (n->ninit) {\nOn 2011/10/07 15:59:50, rsc wrote:\n> Same.\n\nDone.  there was a bug anyway, all three could have been empty.\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/cmd/gc/print.c#newcode543\nsrc/cmd/gc/print.c:543: if (n->ninit) {\nOn 2011/10/07 15:59:50, rsc wrote:\n> Same.\n\na range clause may not have an init, but we may have tacked some on anyway.\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/cmd/gc/print.c#newcode559\nsrc/cmd/gc/print.c:559: if (n->ninit) {\nOn 2011/10/07 15:59:50, rsc wrote:\n> Same.\n\nDone.  selects can't have inits though.\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/cmd/gc/subr.c\nFile src/cmd/gc/subr.c (right):\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/cmd/gc/subr.c#newcode886\nsrc/cmd/gc/subr.c:886: return fmtprint(fp,  \"I%B\", v->u.xval);\nOn 2011/10/07 15:59:50, rsc wrote:\n> I'd be happy to drop the prefixes (IFSB).  It is clear what the types are from\n> the format of the prints.\n\nDone.\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/cmd/gc/subr.c#newcode1204\nsrc/cmd/gc/subr.c:1204: // global flag packagequotes\nOn 2011/10/07 15:59:50, rsc wrote:\n> Document what packagequotes means?\n\nDone.\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/lib9/fmt/fmtprint.c\nFile src/lib9/fmt/fmtprint.c (right):\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/lib9/fmt/fmtprint.c#newcode31\nsrc/lib9/fmt/fmtprint.c:31: va_list va;\nOn 2011/10/07 15:59:50, rsc wrote:\n> va_list va;\n> int n;\n> va_list va;\n> \n> va_start(va, fmt);\n> n = fmtvprint(f, va);\n> va_end(va);\n> return n;\n\nDone.\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/lib9/fmt/fmtvprint.c\nFile src/lib9/fmt/fmtvprint.c (right):\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/lib9/fmt/fmtvprint.c#newcode38\nsrc/lib9/fmt/fmtvprint.c:38: fl = f->flags;\nOn 2011/10/07 15:59:50, rsc wrote:\n> It is good to save these, but they also need to be cleared.\n\ndofmt/__fmtdispatch already does that for us (fmt.c line 162)\n\n> Add\n> \n> f->flags = 0;\n> f->width = 0;\n> f->prec = 0;\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/pkg/go/types/gcimporter.go\nFile src/pkg/go/types/gcimporter.go (right):\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/pkg/go/types/gcimporter.go#newcode145\nsrc/pkg/go/types/gcimporter.go:145: // Declare creates a named object of the given kind in the scope.\nOn 2011/10/07 17:50:24, gri wrote:\n> s/creates/inserts/\n> s/in the/in/\n\nDone.\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/pkg/go/types/gcimporter.go#newcode285\nsrc/pkg/go/types/gcimporter.go:285: // \tscope := pkg.Data.(*ast.Scope)\nOn 2011/10/07 17:50:24, gri wrote:\n> this line should go\n\nDoh.\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/pkg/go/types/gcimporter.go#newcode462\nsrc/pkg/go/types/gcimporter.go:462: // MethodSpec = { identifier | ExportedName }  Signature .\nOn 2011/10/07 17:50:24, gri wrote:\n> It should be ( ) not { } . It's not repeated.\n\nDone.\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/pkg/go/types/gcimporter.go#newcode737\nsrc/pkg/go/types/gcimporter.go:737: // FuncDecl = \"func\" ExportedName Signature [ FuncBody ].\nOn 2011/10/07 17:50:24, gri wrote:\n> nit pick: s/]./] ./\n\nDone.\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/pkg/go/types/gcimporter.go#newcode750\nsrc/pkg/go/types/gcimporter.go:750: // Receiver   = \"(\" ( identifier | \"?\" ) [ \"*\" ] ExportedName \")\" [ FuncBody ].\nOn 2011/10/07 17:50:24, gri wrote:\n> nit pick: s/]./] ./\n\nDone.",
			"disapproval": false,
			"date": "2011-10-08 16:40:03.722954",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@golang.org",
				"rsc@golang.org",
				"gri@golang.org",
				"lvd@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "PTAL",
			"disapproval": false,
			"date": "2011-10-07 09:51:01.058642",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lvd@golang.org",
				"rsc@golang.org",
				"gri@golang.org",
				"lvd@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\nBut leaving go/types/* for gri.\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/cmd/gc/print.c\nFile src/cmd/gc/print.c (right):\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/cmd/gc/print.c#newcode510\nsrc/cmd/gc/print.c:510: if (n->ninit) {\nWhy does this print as\n{ x; if y { ... } }\ninstead of\nif x; y { ... }\n?\n\nMaybe don't do that unless count(n->ninit) > 1?\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/cmd/gc/print.c#newcode527\nsrc/cmd/gc/print.c:527: if (n->ninit) {\nSame.\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/cmd/gc/print.c#newcode543\nsrc/cmd/gc/print.c:543: if (n->ninit) {\nSame.\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/cmd/gc/print.c#newcode559\nsrc/cmd/gc/print.c:559: if (n->ninit) {\nSame.\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/cmd/gc/subr.c\nFile src/cmd/gc/subr.c (right):\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/cmd/gc/subr.c#newcode886\nsrc/cmd/gc/subr.c:886: return fmtprint(fp,  \"I%B\", v->u.xval);\nI'd be happy to drop the prefixes (IFSB).  It is clear what the types are from the format of the prints.\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/cmd/gc/subr.c#newcode1204\nsrc/cmd/gc/subr.c:1204: // global flag packagequotes\nDocument what packagequotes means?\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/lib9/fmt/fmtprint.c\nFile src/lib9/fmt/fmtprint.c (right):\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/lib9/fmt/fmtprint.c#newcode31\nsrc/lib9/fmt/fmtprint.c:31: va_list va;\nva_list va;\nint n;\nva_list va;\n\nva_start(va, fmt);\nn = fmtvprint(f, va);\nva_end(va);\nreturn n;\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/lib9/fmt/fmtvprint.c\nFile src/lib9/fmt/fmtvprint.c (right):\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/lib9/fmt/fmtvprint.c#newcode38\nsrc/lib9/fmt/fmtvprint.c:38: fl = f->flags;\nIt is good to save these, but they also need to be cleared.\nAdd\n\nf->flags = 0;\nf->width = 0;\nf->prec = 0;",
			"disapproval": false,
			"date": "2011-10-07 15:59:50.704183",
			"approval": true
		},
		{
			"sender": "lvd@golang.org",
			"recipients": [
				"lvd@golang.org",
				"rsc@golang.org",
				"gri@golang.org",
				"lvd@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=62c997927b20 ***\n\ngc: changes to export format in preparation for inlining.\n\nstring literals used as package qualifiers are now prefixed with '@'\nwhich obviates the need for the extra ':' before tags.\n\nR=rsc, gri, lvd\nCC=golang-dev\nhttp://codereview.appspot.com/5129057",
			"disapproval": false,
			"date": "2011-10-08 17:37:15.232153",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"lvd@golang.org",
				"rsc@golang.org",
				"gri@golang.org",
				"lvd@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/pkg/go/types/gcimporter.go\nFile src/pkg/go/types/gcimporter.go (right):\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/pkg/go/types/gcimporter.go#newcode145\nsrc/pkg/go/types/gcimporter.go:145: // Declare creates a named object of the given kind in the scope.\ns/creates/inserts/\ns/in the/in/\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/pkg/go/types/gcimporter.go#newcode285\nsrc/pkg/go/types/gcimporter.go:285: // \tscope := pkg.Data.(*ast.Scope)\nthis line should go\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/pkg/go/types/gcimporter.go#newcode462\nsrc/pkg/go/types/gcimporter.go:462: // MethodSpec = { identifier | ExportedName }  Signature .\nIt should be ( ) not { } . It's not repeated.\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/pkg/go/types/gcimporter.go#newcode723\nsrc/pkg/go/types/gcimporter.go:723: // FuncBody = \"{\" ... \"}\"\nnit pick:\n// FuncBody = \"{\" ... \"}\" .\n(missing period at end).\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/pkg/go/types/gcimporter.go#newcode737\nsrc/pkg/go/types/gcimporter.go:737: // FuncDecl = \"func\" ExportedName Signature [ FuncBody ].\nnit pick: s/]./] ./\n\nhttp://codereview.appspot.com/5129057/diff/30002/src/pkg/go/types/gcimporter.go#newcode750\nsrc/pkg/go/types/gcimporter.go:750: // Receiver   = \"(\" ( identifier | \"?\" ) [ \"*\" ] ExportedName \")\" [ FuncBody ].\nnit pick: s/]./] ./",
			"disapproval": false,
			"date": "2011-10-07 17:50:24.317623",
			"approval": true
		}
	],
	"owner_email": "lvd@golang.org",
	"private": false,
	"base_url": "",
	"owner": "lvd1",
	"subject": "code review 5129057: gc: changes to export format in preparation for inlining.",
	"created": "2011-09-27 23:05:00.042860",
	"patchsets": [
		1,
		1001,
		4001,
		4,
		3011,
		16001,
		20001,
		22001,
		25001,
		27001,
		30001,
		30002,
		35003
	],
	"modified": "2011-10-08 17:37:16.556320",
	"closed": true,
	"issue": 5129057
}