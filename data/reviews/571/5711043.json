{
	"description": "spec: clarifications around exports, uniqueness of identifiers\n\n- Define what it means for two identifiers to be unique.\n\n- The current spec is incorrect about exported\nidentifiers: for instance, it excluded fields\nof non-exported types of exported variables\nfrom being exported. It is easier to leave\nthe detailed specification away and let the\nrest of the spec govern access of exported\nidentifiers.\n\n- The current spec is incorrect about qualified\nidentifiers: It simply required that an identifier\nbe exported to be valid in a qualified identifier.\nHowever, qualified identifiers can only access\nexported identifiers declared in the package\nblock of the imported package.\n\nFixes issue 1551.",
	"cc": [
		"r@golang.org",
		"rsc@golang.org",
		"iant@golang.org",
		"ken@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/5711043/diff/4005/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5711043/diff/4005/doc/go_spec.html#newcode1577\ndoc/go_spec.html:1577: are called <i>exported</i>. All other identifiers are called <i>non-exported</i>.\nOn 2012/03/01 00:46:14, r wrote:\n> that first sentence still rubs me the wrong way: \"exported\" does not mean\n> exported, it just means Capitalized.\n> \n> this is another CL that's growing tentacles, though. maybe best to back off and\n> take a simpler approach.\n\nThere's a different way of looking at it: \"Exported\" means that the identifier is exported - which is true. It doesn't really matter that say identifiers in function bodies are never really exported - they cannot be accessed anyway (enforced through other rules).\n\nAnyway, tried again, this time by adjusting the existing definition. I think it's more clumsy, though.\n\nhttp://codereview.appspot.com/5711043/diff/4005/doc/go_spec.html#newcode5091\ndoc/go_spec.html:5091: of the <i>imported</i> package and enables access to them.  The import names an\nOn 2012/03/01 00:46:14, r wrote:\n> maybe, but that's not the whole story. it runs init too, and it's possible to\n> access things that aren't exported.\n\nInits are explained elsewhere.\n\n\"Exported\" defines access to identifiers, not to language entities. When a package is imported, everything in it is \"imported\", but not all of it may be denoted with an identifier.\n\nSlightly reformulated and added link to program init section.",
			"disapproval": false,
			"date": "2012-03-01 01:56:31.715141",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I like this a lot.  The CL description says towards fixing 1551\nbut I think this completely resolves it.\n\nhttp://codereview.appspot.com/5711043/diff/3009/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5711043/diff/3009/doc/go_spec.html#newcode1600\ndoc/go_spec.html:1600: <li>both are declared in the same package</li>\nI think \"declared\" is a loaded word here.  s/are declared/appear/?\nThis is a purely syntactic/lexical condition.",
			"disapproval": false,
			"date": "2012-03-01 16:39:29.054524",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nChanged the  section on \"Equality of identifiers\" to define \"Uniqueness of identifiers\" instead. We use the term \"unique\" several times in the spec already and it was not defined. This ties this up, and also lends itself better to different phrasing as suggested by iant.\n\nhttp://codereview.appspot.com/5711043/diff/3009/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5711043/diff/3009/doc/go_spec.html#newcode1600\ndoc/go_spec.html:1600: <li>both are declared in the same package</li>\nOn 2012/03/01 16:39:29, rsc wrote:\n> I think \"declared\" is a loaded word here.  s/are declared/appear/?\n> This is a purely syntactic/lexical condition.\n\nDone.",
			"disapproval": false,
			"date": "2012-03-01 18:24:35.433856",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5711043/diff/4005/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5711043/diff/4005/doc/go_spec.html#newcode1577\ndoc/go_spec.html:1577: are called <i>exported</i>. All other identifiers are called <i>non-exported</i>.\nthat first sentence still rubs me the wrong way: \"exported\" does not mean exported, it just means Capitalized.\n\nthis is another CL that's growing tentacles, though. maybe best to back off and take a simpler approach.\n\nhttp://codereview.appspot.com/5711043/diff/4005/doc/go_spec.html#newcode5091\ndoc/go_spec.html:5091: of the <i>imported</i> package and enables access to them.  The import names an\nmaybe, but that's not the whole story. it runs init too, and it's possible to access things that aren't exported.",
			"disapproval": false,
			"date": "2012-03-01 00:46:14.254159",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5711043/diff/6012/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5711043/diff/6012/doc/go_spec.html#newcode1596\ndoc/go_spec.html:1596: Given a set of identifiers, the identifiers are called <i>unique</i>\nSets are not unique.\n\nGiven a set of identifiers, an identifier is called unique if it is different\nfrom any other in the set.",
			"disapproval": false,
			"date": "2012-03-01 18:41:40.015024",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nit's a bit lawyery and takes hard thinking, but i believe it works\n\nhttp://codereview.appspot.com/5711043/diff/3012/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5711043/diff/3012/doc/go_spec.html#newcode1597\ndoc/go_spec.html:1597: <i>different</i> from any other in the set.\ns/any/every/",
			"disapproval": false,
			"date": "2012-03-01 21:38:20.387096",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5711043/diff/7001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5711043/diff/7001/doc/go_spec.html#newcode1568\ndoc/go_spec.html:1568: Identifiers that start with a Unicode upper case letter (Unicode class \"Lu\")\nnot all identifiers like that are exported, although they may be \"exported\".\nfunction-scope variables A are not exported, for instance. do you care to clarify? you half-clarify later. it can stay as is if you don't want to get into it, but it may be sufficient to define it in this sentence and s/may/is/ in the next.\n\nIdentifiers declared at package scope, or as methods are struct fields, are \"exported\" if they start with....\n\nnot sure that's an improvement, but this definition has always bothered me and you're editing it now.\n\nhttp://codereview.appspot.com/5711043/diff/7001/doc/go_spec.html#newcode2020\ndoc/go_spec.html:2020: <a href=\"#Import_declarations\">imported</a>.\nin a.B.C, C need not be explicitly imported.",
			"disapproval": false,
			"date": "2012-02-29 21:21:45.065251",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5711043/diff/3006/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5711043/diff/3006/doc/go_spec.html#newcode1584\ndoc/go_spec.html:1584: expression starting with an identifier declared in the package block.</li>\nor identifies a field or method ....\n\n\"expression starting with\" is weird and i'm not even sure correct. in f.X, f could be my local variable; what matters is its type.\n\nand even then, if it's embedded it gets harder.\n\nwhat's wrong with what i said before, an identifer starting Lu that is declared at package level or is a method or struct field?  the item need not be package level.",
			"disapproval": false,
			"date": "2012-03-01 03:07:59.562850",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "this is close. i'll let others chime in now, but i'm happy enough",
			"disapproval": false,
			"date": "2012-03-01 04:15:43.567774",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=51404e3bab77 ***\n\nspec: clarifications around exports, uniqueness of identifiers\n\n- Define what it means for two identifiers to be unique.\n\n- The current spec is incorrect about exported\nidentifiers: for instance, it excluded fields\nof non-exported types of exported variables\nfrom being exported. It is easier to leave\nthe detailed specification away and let the\nrest of the spec govern access of exported\nidentifiers.\n\n- The current spec is incorrect about qualified\nidentifiers: It simply required that an identifier\nbe exported to be valid in a qualified identifier.\nHowever, qualified identifiers can only access\nexported identifiers declared in the package\nblock of the imported package.\n\nFixes issue 1551.\n\nR=r, rsc, iant, ken\nCC=golang-dev\nhttp://codereview.appspot.com/5711043",
			"disapproval": false,
			"date": "2012-03-01 21:57:54.176944",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org, rsc@golang.org, iant@golang.org, ken@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-02-29 20:59:43.385532",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 29, 2012 at 1:29 PM, Russ Cox <rsc@golang.org> wrote:\n> The implementation in 6g and, I believe, in gccgo is this:\n>\n> A non-uppercase name that appears in package p1\n> is treated as distinct from any name that appears in\n> package p2, even if the two names are spelled the same.\n>\n> Instead of trying to get there from exported identifiers,\n> maybe we should start with that definition and derive\n> exported identifiers as the consequence.\n\nYes, my plan was to have a section on equality of identifiers along those lines.\nLet me try again.\n",
			"disapproval": false,
			"date": "2012-02-29 21:32:38.662835",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/5711043/diff/7001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5711043/diff/7001/doc/go_spec.html#newcode1568\ndoc/go_spec.html:1568: Identifiers that start with a Unicode upper case letter (Unicode class \"Lu\")\nOn 2012/02/29 21:21:45, r wrote:\n> not all identifiers like that are exported, although they may be \"exported\".\n> function-scope variables A are not exported, for instance. do you care to\n> clarify? you half-clarify later. it can stay as is if you don't want to get into\n> it, but it may be sufficient to define it in this sentence and s/may/is/ in the\n> next.\n> \n> Identifiers declared at package scope, or as methods are struct fields, are\n> \"exported\" if they start with....\n> \n> not sure that's an improvement, but this definition has always bothered me and\n> you're editing it now.\n\nI think the intuitive notion of what \"exported\" means is not correct: when a package p is imported, all of it is imported, but not all of it may be accessible via an identifier.\n\nSo, one could go ahead and define a special term (say \"CapitalIdent\") and use it to define a more fine-grained notion of \"export\", but at the end it's just the same. It seems easier to just say capitalized identifiers are called \"exported\" and that is the definition of \"exported\".\n\nIt does fit with the next section on equality of identifiers.\n\nhttp://codereview.appspot.com/5711043/diff/7001/doc/go_spec.html#newcode2020\ndoc/go_spec.html:2020: <a href=\"#Import_declarations\">imported</a>.\nOn 2012/02/29 21:21:45, r wrote:\n> in a.B.C, C need not be explicitly imported.\n\nIn a.B.C, a.B is the qualified identifier, and a must be imported. C would be a selector.\n\nBut I am probably misunderstanding your comment.",
			"disapproval": false,
			"date": "2012-02-29 22:53:07.763851",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n- gri\n\nhttp://codereview.appspot.com/5711043/diff/3006/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5711043/diff/3006/doc/go_spec.html#newcode1584\ndoc/go_spec.html:1584: expression starting with an identifier declared in the package block.</li>\nOn 2012/03/01 03:07:59, r wrote:\n> or identifies a field or method ....\n> \n> \"expression starting with\" is weird and i'm not even sure correct. in f.X, f\n> could be my local variable; what matters is its type.\n> \n> and even then, if it's embedded it gets harder.\n> \n> what's wrong with what i said before, an identifer starting Lu that is declared\n> at package level or is a method or struct field?  the item need not be package\n> level.\n\nMostly reverted to the start. F is indeed exported in this case, and so is M:\n\nfunc f() interface{} {\n   return struct{F int}{42}\n}\n\nfunc f() interface{} {\n   var x interface{ M() } = something_implementing_this_interface\n   return x\n}",
			"disapproval": false,
			"date": "2012-03-01 04:11:39.872630",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nhttp://codereview.appspot.com/5711043/diff/6012/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5711043/diff/6012/doc/go_spec.html#newcode1596\ndoc/go_spec.html:1596: Given a set of identifiers, the identifiers are called <i>unique</i>\nOn 2012/03/01 18:41:40, rsc wrote:\n> Sets are not unique.\n> \n> Given a set of identifiers, an identifier is called unique if it is different\n> from any other in the set.\n\nDone.",
			"disapproval": false,
			"date": "2012-03-01 18:47:25.254244",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-03-01 19:01:57.029925",
			"approval": true
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\ngri@golang.org writes:\n\n> Reviewers: r, rsc, iant, ken2,\n>\n> Message:\n> Hello r@golang.org, rsc@golang.org, iant@golang.org, ken@golang.org (cc:\n> golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://code.google.com/p/go\n>\n>\n> Description:\n> spec: clarifications around exports\n>\n> Steps towards clarifying issue 1551.\n>\n> The current spec is incorrect about exported\n> identifiers: for instance, it excluded fields\n> of non-exported types of exported variables\n> from being exported. It is easier to leave\n> the detailed specification away and let the\n> rest of the spec govern access of exported\n> identifiers.\n>\n> The current spec is incorrect about qualified\n> identifiers: It simply required that an identifier\n> be exported to be valid in a qualified identifier.\n> However, qualified identifiers can only access\n> exported identifiers declared in the package\n> block of the imported package.\n>\n> Please review this at http://codereview.appspot.com/5711043/\n>\n> Affected files:\n>   M doc/go_spec.html\n>\n>\n> Index: doc/go_spec.html\n> ===================================================================\n> --- a/doc/go_spec.html\n> +++ b/doc/go_spec.html\n> @@ -1541,7 +1541,8 @@\n>  <h3 id=\"Predeclared_identifiers\">Predeclared identifiers</h3>\n>\n>  <p>\n> -The following identifiers are implicitly declared in the universe block:\n> +The following identifiers are implicitly declared in the\n> +<a href=\"#Blocks\">universe block</a>:\n>  </p>\n>  <pre class=\"grammar\">\n>  Types:\n> @@ -1564,17 +1565,11 @@\n>  <h3 id=\"Exported_identifiers\">Exported identifiers</h3>\n>\n>  <p>\n> -An identifier may be <i>exported</i> to permit access to it from\n> another package\n> -using a <a href=\"#Qualified_identifiers\">qualified identifier</a>. An\n> identifier\n> -is exported if both:\n> -</p>\n> -<ol>\n> -\t<li>the first character of the identifier's name is a Unicode\n> upper case letter (Unicode class \"Lu\"); and</li>\n> -\t<li>the identifier is declared in the <a\n> href=\"#Blocks\">package block</a> or denotes a field or method of a\n> type\n> -\t    declared in that block.</li>\n> -</ol>\n> -<p>\n> -All other identifiers are not exported.\n> +Identifiers that start with a Unicode upper case letter (Unicode\n> class \"Lu\")\n> +are <i>exported</i>. An exported identifier may be accessible from\n> another package\n> +via a <a href=\"#Qualified_identifiers\">qualified identifier</a> or a\n> field or\n> +method <a href=\"#Selectors\">selector</a>. Non-exported identifiers\n> are never\n> +accessible from another package.\n>  </p>\n>\n>\n> @@ -2020,14 +2015,17 @@\n>  </pre>\n>\n>  <p>\n> -A qualified identifier accesses an identifier in a different package, which\n> -must be <a href=\"#Import_declarations\">imported</a>.\n> -The identifier must be <a href=\"#Exported_identifiers\">exported</a> by that\n> -package, which means that it must begin with a Unicode upper case letter.\n> +A qualified identifier <code>p.X</code> accesses an identifier\n> <code>X</code>\n> +in a different package <code>p</code>, which must be\n> +<a href=\"#Import_declarations\">imported</a>.\n> +<code>X</code> must be declared in the <a href=\"#Blocks\">package\n> block</a> of\n> +<code>p</code> and <a href=\"#Exported_identifiers\">exported</a>.\n> +In the current package, <code>p.X</code> denotes the constant, type,\n> variable,\n> +or function that <code>X</code> denotes in <code>p</code>.\n>  </p>\n>\n>  <pre>\n> -math.Sin\n> +math.Sin\t// denotes the Sin function in package math\n>  </pre>\n>\n>  <h3 id=\"Composite_literals\">Composite literals</h3>\n",
			"disapproval": false,
			"date": "2012-02-29 21:15:53.895083",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The implementation in 6g and, I believe, in gccgo is this:\n\nA non-uppercase name that appears in package p1\nis treated as distinct from any name that appears in\npackage p2, even if the two names are spelled the same.\n\nInstead of trying to get there from exported identifiers,\nmaybe we should start with that definition and derive\nexported identifiers as the consequence.\n",
			"disapproval": false,
			"date": "2012-02-29 21:29:38.611703",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5711043/diff/3007/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5711043/diff/3007/doc/go_spec.html#newcode1584\ndoc/go_spec.html:1584: or denotes a struct field or method.</li>\nPerhaps write \"a method or a struct field\", as the current wording suggests that only struct methods are exported.\n\nhttp://codereview.appspot.com/5711043/diff/3007/doc/go_spec.html#newcode1594\ndoc/go_spec.html:1594: Two identifiers are equal if they are spelled the same and if either:\nI find this a bit confusing.  I don't normally think of identifiers as being equal.  I think of whether they refer to the same object or not.  But that is not what you care about here.  I think you are trying to describe the normal case, and that makes this confusing.  Suppose you instead describe the unusual case:\n\nIf two identifiers are declared in different packages and are not exported, then they are never the same even if they are spelled the same.  For example\n\npackage p1\ntype S1 { f int }\npackage p2\ntype S2 { f int }\ntype S3 { S1; S2 }\nfunc f(s3 S3) int { return s3.f }\n\nThe identifier f here is the one in p2, not the one in p1.",
			"disapproval": false,
			"date": "2012-03-01 05:04:17.030021",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 5711043: spec: clarifications around exports",
	"created": "2012-02-29 20:22:50.657744",
	"patchsets": [
		1,
		2001,
		4001,
		3002,
		2003,
		3003,
		1003,
		7001,
		4005,
		3006,
		7006,
		2006,
		3007,
		1007,
		3009,
		2008,
		10,
		6012,
		3012,
		1012
	],
	"modified": "2012-03-01 21:57:55.864158",
	"closed": true,
	"issue": 5711043
}