{
	"description": "runtime: add runtime.cputicks() and seed fastrand with it\n\nThis patch adds a function to get the current cpu ticks.  This is\ndeemed to be 'sufficiently random' to use to seed fastrand to mitigate\nthe algorithmic complexity attacks on the hash table implementation.\n\nOn AMD64 we use the RDTSC instruction.  For 386, this instruction,\nwhile valid, is not recognized by 8a so I've inserted the opcode by\nhand.  For ARM, this routine is currently stubbed to return a constant\n0 value.\n\nFuture work: update 8a to recognize RDTSC.\n\nFixes issue 2630.",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"minux.ma@gmail.com",
		"dsymonds@golang.org"
	],
	"messages": [
		{
			"sender": "dgryski@gmail.com",
			"recipients": [
				"dgryski@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-02 18:56:20.280179",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dgryski@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThanks.",
			"disapproval": false,
			"date": "2012-02-02 19:08:34.848046",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dgryski@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=cd86b08237be ***\n\nruntime: add runtime.cputicks() and seed fastrand with it\n\nThis patch adds a function to get the current cpu ticks.  This is\ndeemed to be 'sufficiently random' to use to seed fastrand to mitigate\nthe algorithmic complexity attacks on the hash table implementation.\n\nOn AMD64 we use the RDTSC instruction.  For 386, this instruction,\nwhile valid, is not recognized by 8a so I've inserted the opcode by\nhand.  For ARM, this routine is currently stubbed to return a constant\n0 value.\n\nFuture work: update 8a to recognize RDTSC.\n\nFixes issue 2630.\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5606048\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2012-02-02 19:09:44.215789",
			"approval": false
		},
		{
			"sender": "dgryski@gmail.com",
			"recipients": [
				"dgryski@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttp://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-01 17:29:26.220870",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This looks fine, but can you use BYTE instructions\nso that the instruction looks the way it does in\nthe manuals?\n\nThanks.\nRuss\n",
			"disapproval": false,
			"date": "2012-02-01 22:45:31.229661",
			"approval": false
		},
		{
			"sender": "dgryski@gmail.com",
			"recipients": [
				"dgryski@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-02 06:11:17.721077",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dgryski@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks great; one more tiny change and then I'll submit.  Thanks.\n\nhttp://codereview.appspot.com/5606048/diff/7001/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttp://codereview.appspot.com/5606048/diff/7001/src/pkg/runtime/proc.c#newcode335\nsrc/pkg/runtime/proc.c:335: m->fastrand = 0x49f6428aUL + (runtime\u00b7cputicks() & 0xffffffff);\nLet's keep m->id.  Can drop the mask.\n\nm->fastrand = 0x49f6428aUL + m->id + runtime.cputicks();",
			"disapproval": false,
			"date": "2012-02-02 18:53:05.710798",
			"approval": false
		},
		{
			"sender": "dgryski@gmail.com",
			"recipients": [
				"dgryski@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/02/01 22:45:31, rsc wrote:\n> This looks fine, but can you use BYTE instructions\n> so that the instruction looks the way it does in\n> the manuals?\n\n   Ah, thanks.  I misread the plan9 assembler documentation I found.\n\n   Damian",
			"disapproval": false,
			"date": "2012-02-02 06:12:52.950205",
			"approval": false
		},
		{
			"sender": "dgryski@gmail.com",
			"recipients": [
				"dgryski@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-02 19:00:36.294862",
			"approval": false
		},
		{
			"sender": "dgryski@gmail.com",
			"recipients": [
				"dgryski@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/02/02 19:00:36, dgryski wrote:\n> Hello mailto:rsc@golang.org (cc: mailto:golang-dev@googlegroups.com),\n> \n> Please take another look.\n\nStill getting used to the dot in the function names.",
			"disapproval": false,
			"date": "2012-02-02 19:02:08.079469",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "But ARM CPUs doesn't have a portable method to get cpu cycles.\n(the CCNT register in Coprocessor 15 appears in ARM11+, and it is only\naccessible\nin the privileged mode.) Also noted that the Linux 2.6.31+ does export the\ncorresponding\nAPI (perf_event_open(2)), but it isn't made for our purpose (generating\nrandom number),\nand using it will mean dropping support for per-2.6.31 kernels.\n\nCould we change the function name to something not that specific? Because\nthe current\nfunction can't be portably implemented on all ARMv5+ CPUs.\nMaybe on ARM platforms, we can only resort to read /dev/urandom??\n\nAnyone has better ideas on how to implement this for Linux/ARM?\n",
			"disapproval": false,
			"date": "2012-02-05 22:05:33.258140",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Feb 6, 2012 at 9:05 AM, minux <minux.ma@gmail.com> wrote:\n\n> Could we change the function name to something not that specific? Because\n> the current\n> function can't be portably implemented on all ARMv5+ CPUs.\n> Maybe on ARM platforms, we can only resort to read /dev/urandom??\n\nThere's no reason why runtime.cputicks has to be implemented for every\nplatform. The code that calls runtime.cputicks just has to be written\nin foo_$(GOOS).go files (or similar).\n\n\nDave.\n",
			"disapproval": false,
			"date": "2012-02-05 22:14:32.904385",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Feb 6, 2012 at 6:14 AM, David Symonds <dsymonds@golang.org> wrote:\n\n> On Mon, Feb 6, 2012 at 9:05 AM, minux <minux.ma@gmail.com> wrote:\n>\n> > Could we change the function name to something not that specific? Because\n> > the current\n> > function can't be portably implemented on all ARMv5+ CPUs.\n> > Maybe on ARM platforms, we can only resort to read /dev/urandom??\n>\n> There's no reason why runtime.cputicks has to be implemented for every\n> platform. The code that calls runtime.cputicks just has to be written\n> in foo_$(GOOS).go files (or similar).\n>\nShould we do this to proc.c (where runtime.cputicks is called)?\nIf not, I still think we need to change the function name (Actually, we\n*only*\nneed a hard-to-predict random number, and it happens to be cpu cycles on\n386 and amd64, but it might not be the case on ARM).\n",
			"disapproval": false,
			"date": "2012-02-05 22:22:18.424733",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It is not a big deal for ARM cputicks to return 0.\nLet's leave it at that.  If you want it to return the\ncurrent time in nanoseconds, that's fine too.\nWe don't need to shuffle any of the code that is\ncalling it.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-02-05 22:24:01.670361",
			"approval": false
		}
	],
	"owner_email": "dgryski@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "dgryski",
	"subject": "code review 5606048: runtime: add runtime.cputicks() and seed fastrand with it",
	"created": "2012-02-01 17:27:47.258667",
	"patchsets": [
		1,
		2001,
		3,
		7001,
		9002,
		13001
	],
	"modified": "2012-02-05 22:14:33.062788",
	"closed": true,
	"issue": 5606048
}