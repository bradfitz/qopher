{
	"description": "go/doc: streamlined go/doc API\n\n- the main changes are removing the Doc suffix\n  from the exported types, so instead of\n  doc.TypeDoc one will have doc.Type, etc.\n\n- All exported types now have a Name (or Names) field.\n  For Values, the Names field lists all declared variables\n  or constants.\n\n- Methods have additional information about where they are\n  coming from.\n\n- There's a mode field instead of a bool to\n  control the package's operation, which makes\n  it easier to extend w/o API changes.\n\nExcept for the partially implemented new Method type,\nthis is based on existing code. A clean rewrite is in\nprogress based on this new API.",
	"cc": [
		"rsc@golang.org",
		"kevlar@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jan 9, 2012 at 18:33, Russ Cox <rsc@golang.org> wrote:\n> Is there a method you want? \u00a0You should only embed\n> if you are actively trying to get at methods.\n\n... or fields, of course.  But it's important to consider the\nmethod sets too.  The point I was trying to make is that\nembedding can be overused.  For example it almost never\nmakes sense to embed a sync.Mutex, because then you\npublish a Lock and Unlock method that you probably\ndidn't mean to publish.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-10 02:35:49.545538",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-10 01:53:06.584403",
			"approval": false
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5528060/diff/3004/src/pkg/go/doc/doc.go\nFile src/pkg/go/doc/doc.go (right):\n\nhttp://codereview.appspot.com/5528060/diff/3004/src/pkg/go/doc/doc.go#newcode37\nsrc/pkg/go/doc/doc.go:37: Func *Func\nAny reason not to embed func?  Then you still have Method.Name\n\nhttp://codereview.appspot.com/5528060/diff/3004/src/pkg/go/doc/doc.go#newcode63\nsrc/pkg/go/doc/doc.go:63: Recv ast.Expr // TODO(rsc): Would like string here\nwhy is this both here and in Method?",
			"disapproval": false,
			"date": "2012-01-10 02:17:55.636345",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM without bug sort\n\nhttp://codereview.appspot.com/5528060/diff/3006/src/pkg/go/doc/reader.go\nFile src/pkg/go/doc/reader.go (right):\n\nhttp://codereview.appspot.com/5528060/diff/3006/src/pkg/go/doc/reader.go#newcode615\nsrc/pkg/go/doc/reader.go:615: sort.Strings(d)\nSorting a list of paragraphs of text alphabetically seems odd.\nI agree that the result should be deterministic, but if you are\nprocessing the files in order by name, then the list should already\nbe in a deterministic order: the order found in the source files.\nThat order seems better and just as repeatable.",
			"disapproval": false,
			"date": "2012-01-11 19:32:49.900008",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jan 9, 2012 at 18:17,  <kevlar@google.com> wrote:\n> Any reason not to embed func?\n\nIs there a method you want?  You should only embed\nif you are actively trying to get at methods.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-01-10 02:33:29.131068",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nhttp://codereview.appspot.com/5528060/diff/3004/src/pkg/go/doc/doc.go\nFile src/pkg/go/doc/doc.go (right):\n\nhttp://codereview.appspot.com/5528060/diff/3004/src/pkg/go/doc/doc.go#newcode37\nsrc/pkg/go/doc/doc.go:37: Func *Func\nOn 2012/01/10 02:17:55, kevlar wrote:\n> Any reason not to embed func?  Then you still have Method.Name\n\nGood point - does make sense here.\n\nhttp://codereview.appspot.com/5528060/diff/3004/src/pkg/go/doc/doc.go#newcode63\nsrc/pkg/go/doc/doc.go:63: Recv ast.Expr // TODO(rsc): Would like string here\nOn 2012/01/10 02:17:55, kevlar wrote:\n> why is this both here and in Method?\n\nIt is here because it's used at the moment (this code - after applying the name changes in clients) will run as before. I added a TODO.\n\nBut more so:  For methods we store two receiver types: The one of the base type originally associated with the method, and the updated one if there is embedding.",
			"disapproval": false,
			"date": "2012-01-10 17:49:12.853036",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=65bab66164a4 ***\n\ngo/doc: streamlined go/doc API\n\n- the main changes are removing the Doc suffix\n  from the exported types, so instead of\n  doc.TypeDoc one will have doc.Type, etc.\n\n- All exported types now have a Name (or Names) field.\n  For Values, the Names field lists all declared variables\n  or constants.\n\n- Methods have additional information about where they are\n  coming from.\n\n- There's a mode field instead of a bool to\n  control the package's operation, which makes\n  it easier to extend w/o API changes.\n\nExcept for the partially implemented new Method type,\nthis is based on existing code. A clean rewrite is in\nprogress based on this new API.\n\nR=rsc, kevlar\nCC=golang-dev\nhttp://codereview.appspot.com/5528060",
			"disapproval": false,
			"date": "2012-01-13 01:37:00.383797",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, kevlar@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-13 01:27:09.796496",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 5528060: go/doc: streamlined go/doc API",
	"created": "2012-01-10 00:47:33.120425",
	"patchsets": [
		1,
		2001,
		1002,
		3,
		3004,
		3006,
		9001,
		10004,
		12004,
		10011,
		11010,
		11018,
		12011,
		12012,
		10019
	],
	"modified": "2012-01-13 01:37:01.350471",
	"closed": true,
	"issue": 5528060
}