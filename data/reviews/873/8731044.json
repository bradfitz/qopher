{
	"description": "go.net/websocket: allow server configurable\r\n\r\nAdd websocket.Server to configure WebSocket server handler.\r\n\r\n- Config.Header is additional headers to send, so you can use it\r\n  to send cookies or so.\r\n  To read cookies, you can use Conn.Request().Header.\r\n- factor out Handshake.\r\n  You can set func to check origin, subprotocol etc.\r\n  Handler checks origin by default.\r\n\r\nFixes issue 4198.\r\nFixes issue 5178.",
	"cc": [
		"golang-dev@googlegroups.com",
		"mikioh.mikioh@gmail.com",
		"crobin@nekoo.com"
	],
	"reviewers": [
		"everton.marques@gmail.com",
		"johan.bilien@gmail.com",
		"rogpeppe@gmail.com"
	],
	"messages": [
		{
			"sender": "ukai@google.com",
			"recipients": [
				"ukai@google.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.net",
			"disapproval": false,
			"date": "2013-04-13 05:29:37.294630",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"ukai@google.com",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8731044/diff/5001/websocket/hybi.go\nFile websocket/hybi.go (right):\n\nhttps://codereview.appspot.com/8731044/diff/5001/websocket/hybi.go#newcode531\nwebsocket/hybi.go:531: func GetOrigin(config *Config, req *http.Request) (*url.URL, error) {\njust Origin; no redundant Get prefix for getter looks go idiomatic.\n\nhttps://codereview.appspot.com/8731044/diff/5001/websocket/server.go\nFile websocket/server.go (right):\n\nhttps://codereview.appspot.com/8731044/diff/5001/websocket/server.go#newcode62\nwebsocket/server.go:62: // Server is a server of a WebSocket.\nServer represents a ...",
			"disapproval": false,
			"date": "2013-04-20 06:53:31.038140",
			"approval": false
		},
		{
			"sender": "crobin@nekoo.com",
			"recipients": [
				"ukai@google.com",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"crobin@nekoo.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8731044/diff/5001/websocket/hybi.go\nFile websocket/hybi.go (right):\n\nhttps://codereview.appspot.com/8731044/diff/5001/websocket/hybi.go#newcode531\nwebsocket/hybi.go:531: func GetOrigin(config *Config, req *http.Request) (*url.URL, error) {\nAlso the header is not mandatory, the function shouldn't fail but return nil if the header is not here. Same thing if the Origin is the string \"null\", as it is an allowed value according to the RFC but ParseRequestURI will fail on simple strings with no scheme and port",
			"disapproval": false,
			"date": "2013-04-23 14:27:58.067040",
			"approval": false
		},
		{
			"sender": "ukai@google.com",
			"recipients": [
				"ukai@google.com",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"crobin@nekoo.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/8731044/diff/5001/websocket/hybi.go\nFile websocket/hybi.go (right):\n\nhttps://codereview.appspot.com/8731044/diff/5001/websocket/hybi.go#newcode531\nwebsocket/hybi.go:531: func GetOrigin(config *Config, req *http.Request) (*url.URL, error) {\nOn 2013/04/20 06:53:31, mikio wrote:\n> just Origin; no redundant Get prefix for getter looks go idiomatic.\n\nDone.\n\nhttps://codereview.appspot.com/8731044/diff/5001/websocket/hybi.go#newcode531\nwebsocket/hybi.go:531: func GetOrigin(config *Config, req *http.Request) (*url.URL, error) {\nOn 2013/04/23 14:27:58, crobin wrote:\n> Also the header is not mandatory, the function shouldn't fail but return nil if\n> the header is not here. Same thing if the Origin is the string \"null\", as it is\n> an allowed value according to the RFC but ParseRequestURI will fail on simple\n> strings with no scheme and port\n\nIf you don't need to origin check, please use websocket.Server rather than websocket.Handler.\n\nhttps://codereview.appspot.com/8731044/diff/5001/websocket/server.go\nFile websocket/server.go (right):\n\nhttps://codereview.appspot.com/8731044/diff/5001/websocket/server.go#newcode62\nwebsocket/server.go:62: // Server is a server of a WebSocket.\nOn 2013/04/20 06:53:31, mikio wrote:\n> Server represents a ...\n\nDone.",
			"disapproval": false,
			"date": "2013-05-01 07:31:19.671340",
			"approval": false
		},
		{
			"sender": "ukai@google.com",
			"recipients": [
				"ukai@google.com",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"crobin@nekoo.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, mikioh.mikioh@gmail.com, crobin@nekoo.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-05-01 07:31:28.806560",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"ukai@google.com",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"crobin@nekoo.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=1e65ca1b2499&repo=net ***\n\ngo.net/websocket: allow server configurable\n\nAdd websocket.Server to configure WebSocket server handler.\n\n- Config.Header is additional headers to send, so you can use it\n  to send cookies or so.\n  To read cookies, you can use Conn.Request().Header.\n- factor out Handshake.\n  You can set func to check origin, subprotocol etc.\n  Handler checks origin by default.\n\nFixes issue 4198.\nFixes issue 5178.\n\nR=golang-dev, mikioh.mikioh, crobin\nCC=golang-dev\nhttps://codereview.appspot.com/8731044\n\nCommitter: Mikio Hara <mikioh.mikioh@gmail.com>",
			"disapproval": false,
			"date": "2013-05-12 04:50:18.470410",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"ukai@google.com",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"crobin@nekoo.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nsorry for the late response.\n\nnot sure IssueTracker can handle multiple issue numbers.\nperhaps two-lines might be safe.\nFixes issue NNNN.\nFixes issue NNNN.",
			"disapproval": false,
			"date": "2013-05-10 10:39:10.342260",
			"approval": true
		},
		{
			"sender": "ukai@google.com",
			"recipients": [
				"ukai@google.com",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"crobin@nekoo.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/10 10:39:10, mikio wrote:\n> LGTM\n\nThanks!\n\n > sorry for the late response.\n> \n> not sure IssueTracker can handle multiple issue numbers.\n> perhaps two-lines might be safe.\n> Fixes issue NNNN.\n> Fixes issue NNNN.\n\nUpdated the description.",
			"disapproval": false,
			"date": "2013-05-10 13:53:07.338520",
			"approval": false
		},
		{
			"sender": "everton.marques@gmail.com",
			"recipients": [
				"ukai@google.com",
				"everton.marques@gmail.com",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"crobin@nekoo.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think this commit affected javascript websocket client code running in Google Chrome.\n\nMy javascript websocket client is now issuing:\n\nWebSocket connection to 'ws://127.0.0.3:8888/' failed: Invalid UTF-8 sequence in header value \n\nI've also found this:\n\nhttp://stackoverflow.com/questions/16507595/websocket-output-received-by-browser-complains-about-invalid-utf-8-sequence-in\n\nI got new go websocket code with:\n\ngo get code.google.com/p/go.net/websocket\n\nHow can I \"go get\" an older version of code.google.com/p/go.net/websocket to confirm?",
			"disapproval": false,
			"date": "2013-05-13 20:56:22.940600",
			"approval": false
		},
		{
			"sender": "johan.bilien@gmail.com",
			"recipients": [
				"ukai@google.com",
				"everton.marques@gmail.com",
				"johan.bilien@gmail.com",
				"golang-dev@googlegroups.com",
				"mikioh.mikioh@gmail.com",
				"crobin@nekoo.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/13 20:56:22, everton.marques wrote:\n> I think this commit affected javascript websocket client code running in Google\n> Chrome.\n> \n> My javascript websocket client is now issuing:\n> \n> WebSocket connection to 'ws://127.0.0.3:8888/' failed: Invalid UTF-8 sequence in\n> header value \n> \n> I've also found this:\n> \n> http://stackoverflow.com/questions/16507595/websocket-output-received-by-browser-complains-about-invalid-utf-8-sequence-in\n> \n> I got new go websocket code with:\n> \n> go get code.google.com/p/go.net/websocket\n> \n> How can I \"go get\" an older version of code.google.com/p/go.net/websocket to\n> confirm?\n\nI don't know how to do it with go get but you can revert manually with  hg update -c 48:9c2295dac419 from ${GOPATH}//src/code.google.com/p/go.net\n\nI was having the exact same problem, and reverting fixed it for me.",
			"disapproval": false,
			"date": "2013-05-14 01:15:53.333030",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This CL broke some of our existing code.\r\n\r\nI wonder if the default behaviour should not check\r\norigin (as was the case previously, I believe).\r\nJust checking if the URL parses isn't actually very useful\r\nand some websocket clients don't send a well formatted URL\r\nby default.\r\n\r\n\r\nOn 12 May 2013 05:50,  <mikioh.mikioh@gmail.com> wrote:\r\n> *** Submitted as\r\n> https://code.google.com/p/go/source/detail?r=1e65ca1b2499&repo=net ***\r\n>\r\n> go.net/websocket: allow server configurable\r\n>\r\n> Add websocket.Server to configure WebSocket server handler.\r\n>\r\n> - Config.Header is additional headers to send, so you can use it\r\n>   to send cookies or so.\r\n>   To read cookies, you can use Conn.Request().Header.\r\n> - factor out Handshake.\r\n>   You can set func to check origin, subprotocol etc.\r\n>   Handler checks origin by default.\r\n>\r\n> Fixes issue 4198.\r\n> Fixes issue 5178.\r\n>\r\n> R=golang-dev, mikioh.mikioh, crobin\r\n> CC=golang-dev\r\n> https://codereview.appspot.com/8731044\r\n>\r\n> Committer: Mikio Hara <mikioh.mikioh@gmail.com>\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.com/8731044/\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-15 14:38:30.146040",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, May 16, 2013 at 3:14 AM, roger peppe <rogpeppe@gmail.com> wrote:\r\n\r\n> What security issues does parsing the Origin header address?\r\n\r\nI'm not sure what's the previous behavior you are saying, but perhaps you don't\r\nwant origin validation at checkOrigin when apps use websocket.Handler instead\r\nof websocket.Server instead? Right? Hm, I'm sure I'm missing something\r\nimportant.\r\n\r\nWell, can you please file an issue? Thanks.\r\n\r\nAh, you are saying drop\r\n>\r\n> On May 15, 2013 4:10 PM, \"Mikio Hara\" <mikioh.mikioh@gmail.com> wrote:\r\n>>\r\n>> On Wed, May 15, 2013 at 11:38 PM, roger peppe <rogpeppe@gmail.com> wrote:\r\n>>\r\n>> > This CL broke some of our existing code.\r\n>>\r\n>> Sorry about that. But...\r\n>>\r\n>> > I wonder if the default behaviour should not check\r\n>> > origin (as was the case previously, I believe).\r\n>>\r\n>> Just reread section 10 of RFC 6455 and still seem that it's hard\r\n>> to deal w/ security considerations whether opt-out is better or not.\r\n",
			"disapproval": false,
			"date": "2013-05-16 01:12:57.563380",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, May 15, 2013 at 11:38 PM, roger peppe <rogpeppe@gmail.com> wrote:\r\n\r\n> This CL broke some of our existing code.\r\n\r\nSorry about that. But...\r\n\r\n> I wonder if the default behaviour should not check\r\n> origin (as was the case previously, I believe).\r\n\r\nJust reread section 10 of RFC 6455 and still seem that it's hard\r\nto deal w/ security considerations whether opt-out is better or not.\r\n",
			"disapproval": false,
			"date": "2013-05-15 15:10:27.677400",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What security issues does parsing the Origin header address?\r\nOn May 15, 2013 4:10 PM, \"Mikio Hara\" <mikioh.mikioh@gmail.com> wrote:\r\n\r\n> On Wed, May 15, 2013 at 11:38 PM, roger peppe <rogpeppe@gmail.com> wrote:\r\n>\r\n> > This CL broke some of our existing code.\r\n>\r\n> Sorry about that. But...\r\n>\r\n> > I wonder if the default behaviour should not check\r\n> > origin (as was the case previously, I believe).\r\n>\r\n> Just reread section 10 of RFC 6455 and still seem that it's hard\r\n> to deal w/ security considerations whether opt-out is better or not.\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-15 18:14:15.944110",
			"approval": false
		},
		{
			"sender": "ukai@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, May 15, 2013 at 11:38 PM, roger peppe <rogpeppe@gmail.com> wrote:\r\n\r\n> This CL broke some of our existing code.\r\n\r\n\r\n> I wonder if the default behaviour should not check\r\n> origin (as was the case previously, I believe).\r\n> Just checking if the URL parses isn't actually very useful\r\n> and some websocket clients don't send a well formatted URL\r\n> by default.\r\n>\r\n\r\n How did this CL break existing code with origin check?\r\n\r\nBefore this CL, there is no way to skip origin check. (it was done in\r\nReadHandshake).\r\nThis CL makes enable to create websocket server without origin check.\r\nUse websocket.Server without Handshake if you don't need to check origin,\r\nlike\r\n   http.Handle(\"/ws\", websocket.Server{Handler: wsHandler})\r\n\r\nAnyway, why do you use websocket? I think major client of websocket is\r\nwebbrowser, which should send proper origin.\r\nwhat websocket client do you use?\r\n\r\nThanks,\r\nukai\r\n\r\n\r\n\r\n>\r\n> On 12 May 2013 05:50,  <mikioh.mikioh@gmail.com> wrote:\r\n> > *** Submitted as\r\n> > https://code.google.com/p/go/source/detail?r=1e65ca1b2499&repo=net ***\r\n> >\r\n> > go.net/websocket: allow server configurable\r\n> >\r\n> > Add websocket.Server to configure WebSocket server handler.\r\n> >\r\n> > - Config.Header is additional headers to send, so you can use it\r\n> >   to send cookies or so.\r\n> >   To read cookies, you can use Conn.Request().Header.\r\n> > - factor out Handshake.\r\n> >   You can set func to check origin, subprotocol etc.\r\n> >   Handler checks origin by default.\r\n> >\r\n> > Fixes issue 4198.\r\n> > Fixes issue 5178.\r\n> >\r\n> > R=golang-dev, mikioh.mikioh, crobin\r\n> > CC=golang-dev\r\n> > https://codereview.appspot.com/8731044\r\n> >\r\n> > Committer: Mikio Hara <mikioh.mikioh@gmail.com>\r\n> >\r\n> >\r\n> >\r\n> > https://codereview.appspot.com/8731044/\r\n> >\r\n> > --\r\n> >\r\n> > ---You received this message because you are subscribed to the Google\r\n> Groups\r\n> > \"golang-dev\" group.\r\n> > To unsubscribe from this group and stop receiving emails from it, send an\r\n> > email to golang-dev+unsubscribe@googlegroups.com.\r\n> > For more options, visit https://groups.google.com/groups/opt_out.\r\n> >\r\n> >\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-16 02:23:43.172630",
			"approval": false
		}
	],
	"owner_email": "ukai@google.com",
	"private": false,
	"base_url": "",
	"owner": "ukai",
	"subject": "code review 8731044: go.net/websocket: allow server configurable",
	"created": "2013-04-13 05:27:48.343460",
	"patchsets": [
		1,
		2001,
		5001,
		12001,
		16001
	],
	"modified": "2013-05-16 02:23:43.172630",
	"closed": false,
	"issue": 8731044
}