{
	"description": "runtime: Plan 9: add support for recover() and panic() in note handler\n\nThis change also resolves some issues with note handling: we now make sure that there is enough room at the bottom of every goroutine to execute the note handler, and the `exitstatus' is no longer a global entity, which resolves some race conditions.\n",
	"cc": [
		"rminnich@gmail.com",
		"npe@plan9.bell-labs.com",
		"rsc@golang.org",
		"ality@pbrane.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "seed@mail.nanosouffle.net",
			"recipients": [
				"seed@mail.nanosouffle.net",
				"rminnich@gmail.com",
				"npe@plan9.bell-labs.com",
				"john@jfloren.net",
				"david.jakob.fritz@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rminnich@gmail.com, npe@plan9.bell-labs.com, john@jfloren.net, david.jakob.fritz@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-09-28 23:26:41.813080",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"seed@mail.nanosouffle.net",
				"rminnich@gmail.com",
				"npe@plan9.bell-labs.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6569068/diff/18001/src/cmd/dist/buildruntime.c\nFile src/cmd/dist/buildruntime.c (right):\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/cmd/dist/buildruntime.c#newcode111\nsrc/cmd/dist/buildruntime.c:111: \"#define\ttos_pid 48\\n\"\nShould this be #define tos_pid(r) 48(r) to be like the others?\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/pkg/runtime/signal_plan9_386.c\nFile src/pkg/runtime/signal_plan9_386.c (right):\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/pkg/runtime/signal_plan9_386.c#newcode33\nsrc/pkg/runtime/signal_plan9_386.c:33: int8 *err[NERRMAX];\nThis is an array of pointers not an array of char.\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/pkg/runtime/signal_plan9_386.c#newcode39\nsrc/pkg/runtime/signal_plan9_386.c:39: if(s && *s == 0)\nI don't understand this. What is going on here?\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/pkg/runtime/signal_plan9_386.c#newcode43\nsrc/pkg/runtime/signal_plan9_386.c:43: if(len <= 4 || runtime\u00b7mcmp((byte*)s, (byte*)\"sys:\", 4) != 0)\nThere are too many exits calls in this function. There shouldn't be any. In the worst case there should be a noted(NDFLT) to let the kernel kill the proc (or put it in broken state for debugging).\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/pkg/runtime/signal_plan9_386.c#newcode57\nsrc/pkg/runtime/signal_plan9_386.c:57: runtime\u00b7exits(s);\nHere's another.\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/pkg/runtime/signal_plan9_386.c#newcode67\nsrc/pkg/runtime/signal_plan9_386.c:67: runtime\u00b7memmove((void*)err, (void*)s, len);\nShould check len against ERRMAX. Also, when this function returns the stack space is gone, so this seems dodgy. Probably you need to save into a per-m field instead. Or throw it away and use sig->name instead.\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/pkg/runtime/signal_plan9_amd64.c\nFile src/pkg/runtime/signal_plan9_amd64.c (right):\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/pkg/runtime/signal_plan9_amd64.c#newcode22\nsrc/pkg/runtime/signal_plan9_amd64.c:22: runtime\u00b7printf(\"r8      %X\\n\", u->r8);\nShouldn't all these %X be lined up?\nOr even better do ax\\t%X bx\\t%X etc\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/pkg/runtime/signals_plan9.h\nFile src/pkg/runtime/signals_plan9.h (right):\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/pkg/runtime/signals_plan9.h#newcode9\nsrc/pkg/runtime/signals_plan9.h:9: T, \"sys: trap:\",\nI think you need some comments here explaining why this is a throw but the above were panic.\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/pkg/runtime/stack.h\nFile src/pkg/runtime/stack.h (right):\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/pkg/runtime/stack.h#newcode58\nsrc/pkg/runtime/stack.h:58: // purposes like signal handling. Used on Windows because\nUsed on Window and on Plan 9\nbecause they do not use a separate stack.\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/pkg/runtime/stack.h#newcode64\nsrc/pkg/runtime/stack.h:64: StackSystem = 512,\nWhere does 512 come from? You need space for the Ureg and the note and the call frame.\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/pkg/runtime/sys_plan9_386.s\nFile src/pkg/runtime/sys_plan9_386.s (right):\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/pkg/runtime/sys_plan9_386.s#newcode135\nsrc/pkg/runtime/sys_plan9_386.s:135: SUBL\t$90, SP\n90 is a strange choice, especially since it is not a multiple of 4.\nIt looks like 24 would work.\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/pkg/runtime/sys_plan9_amd64.s\nFile src/pkg/runtime/sys_plan9_amd64.s (right):\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/pkg/runtime/sys_plan9_amd64.s#newcode146\nsrc/pkg/runtime/sys_plan9_amd64.s:146: SUBQ\t$90, SP\nSame comment. Looks like you need $40.",
			"disapproval": false,
			"date": "2012-10-06 22:22:37.892510",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"seed@mail.nanosouffle.net",
				"rminnich@gmail.com",
				"npe@plan9.bell-labs.com",
				"rsc@golang.org",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6569068/diff/18001/src/cmd/dist/buildruntime.c\nFile src/cmd/dist/buildruntime.c (right):\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/cmd/dist/buildruntime.c#newcode111\nsrc/cmd/dist/buildruntime.c:111: \"#define\ttos_pid 48\\n\"\nOn 2013/01/08 06:03:09, akumar wrote:\n> On 2012/10/06 22:22:38, rsc wrote:\n> > Should this be #define tos_pid(r) 48(r) to be like the others?\n> \n> The semantics I had in mind were analogous to constants like gobuf_pc or\n> g_stackguard: tos_pid is just an offset of \"pid\"  from top of struct \"tos\".\n> Still, I can change it if you like.\n\nI would just do #define procid(r) 48(r) to match the amd64 definition.\nIt's clear that we get it from the tos in this case.\n\nhttps://codereview.appspot.com/6569068/diff/43003/src/pkg/runtime/os_plan9.h\nFile src/pkg/runtime/os_plan9.h (right):\n\nhttps://codereview.appspot.com/6569068/diff/43003/src/pkg/runtime/os_plan9.h#newcode86\nsrc/pkg/runtime/os_plan9.h:86: #define\tNERRMAX\t128\t/* max length of note string */\nWhy not just ERRMAX?\n\nhttps://codereview.appspot.com/6569068/diff/43003/src/pkg/runtime/signal_plan9_386.c\nFile src/pkg/runtime/signal_plan9_386.c (right):\n\nhttps://codereview.appspot.com/6569068/diff/43003/src/pkg/runtime/signal_plan9_386.c#newcode29\nsrc/pkg/runtime/signal_plan9_386.c:29: runtime\u00b7sighandler(void *v, int8 *s, G *gp)\nI think this is mostly fine for now but we're going to have\nto change the logic in this function once we add support\nfor os/signal.\n\nhttps://codereview.appspot.com/6569068/diff/43003/src/pkg/runtime/stack.h\nFile src/pkg/runtime/stack.h (right):\n\nhttps://codereview.appspot.com/6569068/diff/43003/src/pkg/runtime/stack.h#newcode64\nsrc/pkg/runtime/stack.h:64: // Maximum size of NFrame (386 vs amd64) + call frame.\nNFrame is not present (at least by name) in the 386 kernels and\nit's size actually contains the call frame. Also, the 32-bit\nkernels leave 256 bytes between the old stack pointer and the\nnote handler frame as an aid for debugging. Shouldn't we take\nthat into account?\n\nSo on amd64 we need at least 368 bytes whereas on 386 we need\nat least 476. I don't know about the arm systems.\n\nMaybe the comment should read something like:\n\n// We need enough space for the note handler frame setup\n// by the kernel. This varies among the architectures we\n// support. 512 bytes ought to be enough for anybody.\n\nhttps://codereview.appspot.com/6569068/diff/43003/src/pkg/runtime/thread_plan9.c\nFile src/pkg/runtime/thread_plan9.c (right):\n\nhttps://codereview.appspot.com/6569068/diff/43003/src/pkg/runtime/thread_plan9.c#newcode18\nsrc/pkg/runtime/thread_plan9.c:18: m->gsignal = runtime\u00b7malg(32*1024);\nWhy 32Kb?\n\nhttps://codereview.appspot.com/6569068/diff/43003/src/pkg/runtime/thread_plan9.c#newcode223\nsrc/pkg/runtime/thread_plan9.c:223: int8 *exitstatus;\nToo much typing. Just make this \"status\".\n\nhttps://codereview.appspot.com/6569068/diff/43003/src/pkg/runtime/thread_plan9.c#newcode295\nsrc/pkg/runtime/thread_plan9.c:295: runtime\u00b7panicstring(\"call of nil func value\");\nOne too many tabs.",
			"disapproval": false,
			"date": "2013-01-10 03:19:21.954380",
			"approval": false
		},
		{
			"sender": "seed@mail.nanosouffle.net",
			"recipients": [
				"seed@mail.nanosouffle.net",
				"rminnich@gmail.com",
				"npe@plan9.bell-labs.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/cmd/dist/buildruntime.c\nFile src/cmd/dist/buildruntime.c (right):\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/cmd/dist/buildruntime.c#newcode111\nsrc/cmd/dist/buildruntime.c:111: \"#define\ttos_pid 48\\n\"\nOn 2012/10/06 22:22:38, rsc wrote:\n> Should this be #define tos_pid(r) 48(r) to be like the others?\n\nThe semantics I had in mind were analogous to constants like gobuf_pc or g_stackguard: tos_pid is just an offset of \"pid\"  from top of struct \"tos\". Still, I can change it if you like.\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/pkg/runtime/signal_plan9_386.c\nFile src/pkg/runtime/signal_plan9_386.c (right):\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/pkg/runtime/signal_plan9_386.c#newcode33\nsrc/pkg/runtime/signal_plan9_386.c:33: int8 *err[NERRMAX];\nOn 2012/10/06 22:22:38, rsc wrote:\n> This is an array of pointers not an array of char.\n\nRemoved entirely.\n\nDone.\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/pkg/runtime/signal_plan9_386.c#newcode39\nsrc/pkg/runtime/signal_plan9_386.c:39: if(s && *s == 0)\nOn 2012/10/06 22:22:38, rsc wrote:\n> I don't understand this. What is going on here?\n\nIf the note == \"\", then exit. Booger from debugging. Removed.\n\nDone.\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/pkg/runtime/signal_plan9_386.c#newcode43\nsrc/pkg/runtime/signal_plan9_386.c:43: if(len <= 4 || runtime\u00b7mcmp((byte*)s, (byte*)\"sys:\", 4) != 0)\nOn 2012/10/06 22:22:38, rsc wrote:\n> There are too many exits calls in this function. There shouldn't be any. In the\n> worst case there should be a noted(NDFLT) to let the kernel kill the proc (or\n> put it in broken state for debugging).\n\nReplaced this with a `return NDFLT'. This case is supposed to account for messages that didn't come from the kernel (i.e., exit strings reported from other go threads).\n\nDone.\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/pkg/runtime/signal_plan9_386.c#newcode57\nsrc/pkg/runtime/signal_plan9_386.c:57: runtime\u00b7exits(s);\nOn 2012/10/06 22:22:38, rsc wrote:\n> Here's another.\n\nIn this case, we have a message from the kernel that is not declared in the SigTab.\n\nMy understanding is that we don't ever want go threads to be in the broken state in isolation, while others in the group keep running; is that correct? In which case I suppose we ought to first kill all the other threads and only afterwards call noted(NDFLT). I would think a `goexitsall(); return NDFLT;' would suffice here, but perhaps we want to be more careful with regards to the state of other threads (i.e., they may also be handling other notes). What would you suggest?\n\nFor now, I've changed this to a `return NDFLT' as per your initial suggestion.\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/pkg/runtime/signal_plan9_386.c#newcode67\nsrc/pkg/runtime/signal_plan9_386.c:67: runtime\u00b7memmove((void*)err, (void*)s, len);\nOn 2012/10/06 22:22:38, rsc wrote:\n> Should check len against ERRMAX.\n\nDone.\n\n> Also, when this function returns the stack\n> space is gone, so this seems dodgy. Probably you need to save into a per-m field\n> instead. Or throw it away and use sig->name instead.\n\nIt would be nice to have the full information during a panic. I've allocated the space in m->gsignal->sigcode0 on thread start-up.\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/pkg/runtime/signal_plan9_amd64.c\nFile src/pkg/runtime/signal_plan9_amd64.c (right):\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/pkg/runtime/signal_plan9_amd64.c#newcode22\nsrc/pkg/runtime/signal_plan9_amd64.c:22: runtime\u00b7printf(\"r8      %X\\n\", u->r8);\nOn 2012/10/06 22:22:38, rsc wrote:\n> Shouldn't all these %X be lined up?\n> Or even better do ax\\t%X bx\\t%X etc\n\nDone.\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/pkg/runtime/signals_plan9.h\nFile src/pkg/runtime/signals_plan9.h (right):\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/pkg/runtime/signals_plan9.h#newcode9\nsrc/pkg/runtime/signals_plan9.h:9: T, \"sys: trap:\",\nOn 2012/10/06 22:22:38, rsc wrote:\n> I think you need some comments here explaining why this is a throw but the above\n> were panic.\n\nDone.\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/pkg/runtime/stack.h\nFile src/pkg/runtime/stack.h (right):\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/pkg/runtime/stack.h#newcode58\nsrc/pkg/runtime/stack.h:58: // purposes like signal handling. Used on Windows because\nOn 2012/10/06 22:22:38, rsc wrote:\n> Used on Window and on Plan 9\n> because they do not use a separate stack.\n\nDone.\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/pkg/runtime/stack.h#newcode64\nsrc/pkg/runtime/stack.h:64: StackSystem = 512,\nOn 2012/10/06 22:22:38, rsc wrote:\n> Where does 512 come from? You need space for the Ureg and the note and the call\n> frame.\n\nDone.\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/pkg/runtime/sys_plan9_386.s\nFile src/pkg/runtime/sys_plan9_386.s (right):\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/pkg/runtime/sys_plan9_386.s#newcode135\nsrc/pkg/runtime/sys_plan9_386.s:135: SUBL\t$90, SP\nOn 2012/10/06 22:22:38, rsc wrote:\n> 90 is a strange choice, especially since it is not a multiple of 4.\n> It looks like 24 would work.\n\nYes; during testing, I chose an arbitrary large number.\n\nDone.\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/pkg/runtime/sys_plan9_amd64.s\nFile src/pkg/runtime/sys_plan9_amd64.s (right):\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/pkg/runtime/sys_plan9_amd64.s#newcode146\nsrc/pkg/runtime/sys_plan9_amd64.s:146: SUBQ\t$90, SP\nOn 2012/10/06 22:22:38, rsc wrote:\n> Same comment. Looks like you need $40.\n\nDone.",
			"disapproval": false,
			"date": "2013-01-08 06:03:09.719790",
			"approval": false
		},
		{
			"sender": "seed@mail.nanosouffle.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for the review!\r\n\r\nOn 10 January 2013 03:19,  <ality@pbrane.org> wrote:\r\nhttps://codereview.appspot.com/6569068/diff/43003/src/pkg/runtime/signal_plan9_386.c#newcode29\r\n> src/pkg/runtime/signal_plan9_386.c:29: runtime\u00b7sighandler(void *v, int8\r\n> *s, G *gp)\r\n> I think this is mostly fine for now but we're going to have\r\n> to change the logic in this function once we add support\r\n> for os/signal.\r\n\r\nYes, but one thing at a time. I have some code for the rest,\r\nbut it builds upon this stuff and this is already quite a bit to\r\nreview and get right, for now. A subsequent CL will add to\r\nthis, in order to properly handle asynchronous signals.\r\n\r\nI'll fix up the rest soon.\r\n\r\n\r\nBest,\r\nAkshat\r\n",
			"disapproval": false,
			"date": "2013-01-10 03:33:04.936260",
			"approval": false
		},
		{
			"sender": "seed@mail.nanosouffle.net",
			"recipients": [
				"seed@mail.nanosouffle.net",
				"rminnich@gmail.com",
				"npe@plan9.bell-labs.com",
				"rsc@golang.org",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/cmd/dist/buildruntime.c\nFile src/cmd/dist/buildruntime.c (right):\n\nhttps://codereview.appspot.com/6569068/diff/18001/src/cmd/dist/buildruntime.c#newcode111\nsrc/cmd/dist/buildruntime.c:111: \"#define\ttos_pid 48\\n\"\nOn 2013/01/10 03:19:22, ality wrote:\n> On 2013/01/08 06:03:09, akumar wrote:\n> > On 2012/10/06 22:22:38, rsc wrote:\n> > > Should this be #define tos_pid(r) 48(r) to be like the others?\n> > \n> > The semantics I had in mind were analogous to constants like gobuf_pc or\n> > g_stackguard: tos_pid is just an offset of \"pid\"  from top of struct \"tos\".\n> > Still, I can change it if you like.\n> \n> I would just do #define procid(r) 48(r) to match the amd64 definition.\n> It's clear that we get it from the tos in this case.\n> \n\nDone.\n\nAlso updated runtime\u00b7rfork code in sys_plan9_386.s to match.\n\nhttps://codereview.appspot.com/6569068/diff/43003/src/pkg/runtime/os_plan9.h\nFile src/pkg/runtime/os_plan9.h (right):\n\nhttps://codereview.appspot.com/6569068/diff/43003/src/pkg/runtime/os_plan9.h#newcode86\nsrc/pkg/runtime/os_plan9.h:86: #define\tNERRMAX\t128\t/* max length of note string */\nOn 2013/01/10 03:19:22, ality wrote:\n> Why not just ERRMAX?\n\nDone.\n\nhttps://codereview.appspot.com/6569068/diff/43003/src/pkg/runtime/stack.h\nFile src/pkg/runtime/stack.h (right):\n\nhttps://codereview.appspot.com/6569068/diff/43003/src/pkg/runtime/stack.h#newcode64\nsrc/pkg/runtime/stack.h:64: // Maximum size of NFrame (386 vs amd64) + call frame.\nOn 2013/01/10 03:19:22, ality wrote:\n> NFrame is not present (at least by name) in the 386 kernels and\n> it's size actually contains the call frame. Also, the 32-bit\n> kernels leave 256 bytes between the old stack pointer and the\n> note handler frame as an aid for debugging. Shouldn't we take\n> that into account?\n> \n> So on amd64 we need at least 368 bytes whereas on 386 we need\n> at least 476. I don't know about the arm systems.\n> \n> Maybe the comment should read something like:\n> \n> // We need enough space for the note handler frame setup\n> // by the kernel. This varies among the architectures we\n> // support. 512 bytes ought to be enough for anybody.\n\nDone.\n\nhttps://codereview.appspot.com/6569068/diff/43003/src/pkg/runtime/thread_plan9.c\nFile src/pkg/runtime/thread_plan9.c (right):\n\nhttps://codereview.appspot.com/6569068/diff/43003/src/pkg/runtime/thread_plan9.c#newcode18\nsrc/pkg/runtime/thread_plan9.c:18: m->gsignal = runtime\u00b7malg(32*1024);\nOn 2013/01/10 03:19:22, ality wrote:\n> Why 32Kb?\n\nShould be enough for panic routines.\n\nhttps://codereview.appspot.com/6569068/diff/43003/src/pkg/runtime/thread_plan9.c#newcode223\nsrc/pkg/runtime/thread_plan9.c:223: int8 *exitstatus;\nOn 2013/01/10 03:19:22, ality wrote:\n> Too much typing. Just make this \"status\".\n\nDone.\n\nhttps://codereview.appspot.com/6569068/diff/43003/src/pkg/runtime/thread_plan9.c#newcode295\nsrc/pkg/runtime/thread_plan9.c:295: runtime\u00b7panicstring(\"call of nil func value\");\nOn 2013/01/10 03:19:22, ality wrote:\n> One too many tabs.\n\nDone.",
			"disapproval": false,
			"date": "2013-01-13 01:40:51.617450",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"seed@mail.nanosouffle.net",
				"rminnich@gmail.com",
				"npe@plan9.bell-labs.com",
				"rsc@golang.org",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nLeaving for ality to submit once he's happy.",
			"disapproval": false,
			"date": "2013-01-18 20:32:42.514930",
			"approval": true
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"seed@mail.nanosouffle.net",
				"rminnich@gmail.com",
				"npe@plan9.bell-labs.com",
				"rsc@golang.org",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Very close.\n\nhttps://codereview.appspot.com/6569068/diff/52001/src/pkg/runtime/signal_plan9_386.c\nFile src/pkg/runtime/signal_plan9_386.c (right):\n\nhttps://codereview.appspot.com/6569068/diff/52001/src/pkg/runtime/signal_plan9_386.c#newcode69\nsrc/pkg/runtime/signal_plan9_386.c:69: \nYou need to push the PC onto the stack here\nfor the traceback code. See any of the other\nsignal_$GOOS_$GOARCH.c files for an example.\n\nhttps://codereview.appspot.com/6569068/diff/52001/src/pkg/runtime/signal_plan9_amd64.c\nFile src/pkg/runtime/signal_plan9_amd64.c (right):\n\nhttps://codereview.appspot.com/6569068/diff/52001/src/pkg/runtime/signal_plan9_amd64.c#newcode77\nsrc/pkg/runtime/signal_plan9_amd64.c:77: \nLikewise.\n\nhttps://codereview.appspot.com/6569068/diff/52001/src/pkg/runtime/sys_plan9_386.s\nFile src/pkg/runtime/sys_plan9_386.s (right):\n\nhttps://codereview.appspot.com/6569068/diff/52001/src/pkg/runtime/sys_plan9_386.s#newcode144\nsrc/pkg/runtime/sys_plan9_386.s:144: SUBL\t$24, SP\nAny reason this can't be 16?\n\nhttps://codereview.appspot.com/6569068/diff/52001/src/pkg/runtime/sys_plan9_amd64.s\nFile src/pkg/runtime/sys_plan9_amd64.s (right):\n\nhttps://codereview.appspot.com/6569068/diff/52001/src/pkg/runtime/sys_plan9_amd64.s#newcode170\nsrc/pkg/runtime/sys_plan9_amd64.s:170: SUBQ\t$40, SP\nLikewise, can this just be 32?\n\nhttps://codereview.appspot.com/6569068/diff/52001/src/pkg/runtime/thread_plan9.c\nFile src/pkg/runtime/thread_plan9.c (right):\n\nhttps://codereview.appspot.com/6569068/diff/52001/src/pkg/runtime/thread_plan9.c#newcode298\nsrc/pkg/runtime/thread_plan9.c:298: if(g->sig == 0 || g->sig == 1)\nThis no longer matches the indices in runtime\u00b7sigtab.\n\nhttps://codereview.appspot.com/6569068/diff/52001/src/pkg/runtime/thread_plan9.c#newcode341\nsrc/pkg/runtime/thread_plan9.c:341: runtime\u00b7badsignal(int32 sig)\nYou can make this runtime\u00b7badsignal(void)\nand simplifiy the call in runtime\u00b7sigtramp.",
			"disapproval": false,
			"date": "2013-01-20 08:44:46.428820",
			"approval": false
		},
		{
			"sender": "seed@mail.nanosouffle.net",
			"recipients": [
				"seed@mail.nanosouffle.net",
				"rminnich@gmail.com",
				"npe@plan9.bell-labs.com",
				"rsc@golang.org",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nhttps://codereview.appspot.com/6569068/diff/52001/src/pkg/runtime/signal_plan9_386.c\nFile src/pkg/runtime/signal_plan9_386.c (right):\n\nhttps://codereview.appspot.com/6569068/diff/52001/src/pkg/runtime/signal_plan9_386.c#newcode69\nsrc/pkg/runtime/signal_plan9_386.c:69: \nOn 2013/01/20 08:44:46, ality wrote:\n> You need to push the PC onto the stack here\n> for the traceback code. See any of the other\n> signal_$GOOS_$GOARCH.c files for an example.\n\nDone.\n\nhttps://codereview.appspot.com/6569068/diff/52001/src/pkg/runtime/signal_plan9_amd64.c\nFile src/pkg/runtime/signal_plan9_amd64.c (right):\n\nhttps://codereview.appspot.com/6569068/diff/52001/src/pkg/runtime/signal_plan9_amd64.c#newcode77\nsrc/pkg/runtime/signal_plan9_amd64.c:77: \nOn 2013/01/20 08:44:46, ality wrote:\n> Likewise.\n\nDone.\n\nhttps://codereview.appspot.com/6569068/diff/52001/src/pkg/runtime/sys_plan9_386.s\nFile src/pkg/runtime/sys_plan9_386.s (right):\n\nhttps://codereview.appspot.com/6569068/diff/52001/src/pkg/runtime/sys_plan9_386.s#newcode144\nsrc/pkg/runtime/sys_plan9_386.s:144: SUBL\t$24, SP\nOn 2013/01/20 08:44:46, ality wrote:\n> Any reason this can't be 16?\n\nDone.\n\nhttps://codereview.appspot.com/6569068/diff/52001/src/pkg/runtime/sys_plan9_amd64.s\nFile src/pkg/runtime/sys_plan9_amd64.s (right):\n\nhttps://codereview.appspot.com/6569068/diff/52001/src/pkg/runtime/sys_plan9_amd64.s#newcode170\nsrc/pkg/runtime/sys_plan9_amd64.s:170: SUBQ\t$40, SP\nOn 2013/01/20 08:44:46, ality wrote:\n> Likewise, can this just be 32?\n\nDone.\n\nhttps://codereview.appspot.com/6569068/diff/52001/src/pkg/runtime/thread_plan9.c\nFile src/pkg/runtime/thread_plan9.c (right):\n\nhttps://codereview.appspot.com/6569068/diff/52001/src/pkg/runtime/thread_plan9.c#newcode298\nsrc/pkg/runtime/thread_plan9.c:298: if(g->sig == 0 || g->sig == 1)\nOn 2013/01/20 08:44:46, ality wrote:\n> This no longer matches the indices in runtime\u00b7sigtab.\n\nDone.\n\nhttps://codereview.appspot.com/6569068/diff/52001/src/pkg/runtime/thread_plan9.c#newcode341\nsrc/pkg/runtime/thread_plan9.c:341: runtime\u00b7badsignal(int32 sig)\nOn 2013/01/20 08:44:46, ality wrote:\n> You can make this runtime\u00b7badsignal(void)\n> and simplifiy the call in runtime\u00b7sigtramp.\n\nDone.",
			"disapproval": false,
			"date": "2013-01-22 01:11:37.950970",
			"approval": false
		},
		{
			"sender": "seed@mail.nanosouffle.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping\r\n\r\nOn 22 January 2013 01:11,  <seed@mail.nanosouffle.net> wrote:\r\n> PTAL.\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.com/6569068/diff/52001/src/pkg/runtime/signal_plan9_386.c\r\n> File src/pkg/runtime/signal_plan9_386.c (right):\r\n>\r\n> https://codereview.appspot.com/6569068/diff/52001/src/pkg/runtime/signal_plan9_386.c#newcode69\r\n> src/pkg/runtime/signal_plan9_386.c:69:\r\n> On 2013/01/20 08:44:46, ality wrote:\r\n>>\r\n>> You need to push the PC onto the stack here\r\n>> for the traceback code. See any of the other\r\n>> signal_$GOOS_$GOARCH.c files for an example.\r\n>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.com/6569068/diff/52001/src/pkg/runtime/signal_plan9_amd64.c\r\n> File src/pkg/runtime/signal_plan9_amd64.c (right):\r\n>\r\n> https://codereview.appspot.com/6569068/diff/52001/src/pkg/runtime/signal_plan9_amd64.c#newcode77\r\n> src/pkg/runtime/signal_plan9_amd64.c:77:\r\n> On 2013/01/20 08:44:46, ality wrote:\r\n>>\r\n>> Likewise.\r\n>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.com/6569068/diff/52001/src/pkg/runtime/sys_plan9_386.s\r\n> File src/pkg/runtime/sys_plan9_386.s (right):\r\n>\r\n> https://codereview.appspot.com/6569068/diff/52001/src/pkg/runtime/sys_plan9_386.s#newcode144\r\n> src/pkg/runtime/sys_plan9_386.s:144: SUBL       $24, SP\r\n> On 2013/01/20 08:44:46, ality wrote:\r\n>>\r\n>> Any reason this can't be 16?\r\n>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.com/6569068/diff/52001/src/pkg/runtime/sys_plan9_amd64.s\r\n> File src/pkg/runtime/sys_plan9_amd64.s (right):\r\n>\r\n> https://codereview.appspot.com/6569068/diff/52001/src/pkg/runtime/sys_plan9_amd64.s#newcode170\r\n> src/pkg/runtime/sys_plan9_amd64.s:170: SUBQ     $40, SP\r\n> On 2013/01/20 08:44:46, ality wrote:\r\n>>\r\n>> Likewise, can this just be 32?\r\n>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.com/6569068/diff/52001/src/pkg/runtime/thread_plan9.c\r\n> File src/pkg/runtime/thread_plan9.c (right):\r\n>\r\n> https://codereview.appspot.com/6569068/diff/52001/src/pkg/runtime/thread_plan9.c#newcode298\r\n> src/pkg/runtime/thread_plan9.c:298: if(g->sig == 0 || g->sig == 1)\r\n> On 2013/01/20 08:44:46, ality wrote:\r\n>>\r\n>> This no longer matches the indices in runtime\u00b7sigtab.\r\n>\r\n>\r\n> Done.\r\n>\r\n>\r\n> https://codereview.appspot.com/6569068/diff/52001/src/pkg/runtime/thread_plan9.c#newcode341\r\n> src/pkg/runtime/thread_plan9.c:341: runtime\u00b7badsignal(int32 sig)\r\n> On 2013/01/20 08:44:46, ality wrote:\r\n>>\r\n>> You can make this runtime\u00b7badsignal(void)\r\n>> and simplifiy the call in runtime\u00b7sigtramp.\r\n>\r\n>\r\n> Done.\r\n>\r\n> https://codereview.appspot.com/6569068/\r\n",
			"disapproval": false,
			"date": "2013-01-23 19:23:06.734440",
			"approval": false
		},
		{
			"sender": "seed@mail.nanosouffle.net",
			"recipients": [
				"seed@mail.nanosouffle.net",
				"rminnich@gmail.com",
				"npe@plan9.bell-labs.com",
				"rsc@golang.org",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "After some testing, I realized that storing the note-string at m->gsignal->sigcode0 causes stack corruption after sufficiently many panic-recover sequences that come from synchronous traps. To address this, I've updated the code by adding a Plan 9-specific field to M where I now store the note-string. Now, arbitrarily many panic-recover sequences can run without causing GP faults.\n\nPTAL.",
			"disapproval": false,
			"date": "2013-01-24 13:16:21.877020",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nSorry for the long delay. Thanks for working on this.\r\n\r\nIt even works well on 9vx (after fixing a few bugs there).\r\n",
			"disapproval": false,
			"date": "2013-01-30 10:51:48.563070",
			"approval": true
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"seed@mail.nanosouffle.net",
				"rminnich@gmail.com",
				"npe@plan9.bell-labs.com",
				"rsc@golang.org",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=f6172d444cc0 ***\n\nruntime: add support for panic/recover in Plan 9 note handler\n\nThis change also resolves some issues with note handling: we now make\nsure that there is enough room at the bottom of every goroutine to\nexecute the note handler, and the `exitstatus' is no longer a global\nentity, which resolves some race conditions.\n\nR=rminnich, npe, rsc, ality\nCC=golang-dev\nhttps://codereview.appspot.com/6569068\n\nCommitter: Anthony Martin <ality@pbrane.org>",
			"disapproval": false,
			"date": "2013-01-30 10:54:09.086570",
			"approval": false
		}
	],
	"owner_email": "seed@mail.nanosouffle.net",
	"private": false,
	"base_url": "",
	"owner": "akumar",
	"subject": "code review 6569068: pkg/runtime: Plan 9: add support for recover() and pani...",
	"created": "2012-09-27 18:52:34.032980",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		3008,
		7003,
		3020,
		15002,
		18001,
		43003,
		52001,
		70013,
		85001
	],
	"modified": "2013-01-30 12:35:34.764900",
	"closed": true,
	"issue": 6569068
}