{
	"description": "playground: Adding line numbers and error highlighting.",
	"cc": [
		"adg@golang.org",
		"r@golang.org",
		"aram@mgk.ro",
		"rsc@golang.org",
		"daniel.morsing@gmail.com",
		"rogpeppe@gmail.com",
		"tux21b@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Very nice.\r\n\r\nI love how it just highlights the number instead of the whole line.\r\nOne of the things that bugged me about the old stuff was that even\r\nonce I'd edited the line or inserted a line above it, there was still\r\nthis ugly highlight that no longer applied. Highlighting just the line\r\nnumbers fixes that, by being relatively unobtrusive. Very nice. It\r\nmight be worth putting a few pixels horizontal spacing between the\r\nline numbers and the program text, though. Right now it looks like the\r\nfirst line of my program is 1package main.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-09-25 20:45:40.532220",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"r@golang.org",
				"aram@mgk.ro",
				"rsc@golang.org",
				"daniel.morsing@gmail.com",
				"rogpeppe@gmail.com",
				"tux21b@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/26 16:13:53, campoy1 wrote:\n> Hi Daniel,\n> \n> This is really surprising since I'm not playing with the behavior of the\n> textarea, which keeps being the standard textarea that you can now use on\n> http://play.golang.org.\n> \n> Could you confirm you don't have the same problem with the current version?\n> \n> Thanks\n> \n\nOld version works fine. I had some people try the new version with similar setups in #go-nuts and they couldn't reproduce.",
			"disapproval": false,
			"date": "2012-09-26 16:19:11.082940",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"r@golang.org",
				"aram@mgk.ro",
				"rsc@golang.org",
				"daniel.morsing@gmail.com",
				"rogpeppe@gmail.com",
				"tux21b@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6566045/diff/11001/static/playground.js\nFile static/playground.js (right):\n\nhttp://codereview.appspot.com/6566045/diff/11001/static/playground.js#newcode90\nstatic/playground.js:90: regex = /prog.go:([0-9]+)/g\nYou forgot the var for regex and r, so you're setting global variables.\n\nhttp://codereview.appspot.com/6566045/diff/11001/static/playground.js#newcode91\nstatic/playground.js:91: for (r = regex.exec(text); r != null; r = regex.exec(text)) {\nvar r;\nwhile ((r = regex.exec(text)) != null) {\n ...\n}\n\nhttp://codereview.appspot.com/6566045/diff/11001/static/playground.js#newcode92\nstatic/playground.js:92: $('.lineno:nth-child('+r[1]+')').addClass('lineerror')\nsemicolon",
			"disapproval": false,
			"date": "2012-09-26 17:50:27.502130",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-25 08:22:42.099390",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I also like this. One thing - when you've got an error,\r\nthe line number is still highlighted even when you've inserted\r\nmore text, making it highlight a line that never had an error.\r\nAnd there's no way to clear the highlighting.\r\n\r\nHow about when you insert a line, it clears the highlighting\r\nfor all line numbers after the inserted line? (the ones that\r\nare now highlighted inappropriately). Alternatively inserting\r\na line could simply delete all line number highlighting\r\n(it's easy to get it back, by clicking Run agan).\r\n",
			"disapproval": false,
			"date": "2012-09-26 08:53:46.157620",
			"approval": false
		},
		{
			"sender": "tux21b@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm not quite happy with this CL and I think that the previous editor \r\n(CodeMirror) is far superior and better maintained. All issues that I have \r\nseen on this list so far were either caused by an very early, extremely \r\noutdated version of CodeMirror or by some wrong API usage of the very same \r\neditor. I am currently preparing a CL which re-introduces the CodeMirror \r\neditor again. Features include:\r\n\r\n- go mode with automatic indentation\r\n- error highlighting (it currently highlights the line, but it would be \r\nalso possible to add marker near the line number or style the line numbers \r\ndifferently)\r\n- optional syntax highlighting (disabled by default *g*)\r\n- line numbering\r\n- common code base (playground, gotour, present)\r\n- fallback: clients that do not support JS will just get a simple <textarea>\r\n\r\nYou can test out most of this features by visiting tour.golang.org. I'm \r\nalso thinking about adding a permanent (cookie based) \"switch to textarea\" \r\noption, similar to the toggle lineno / syntax highlighting buttons. \r\nHowever, I am not entirely sure if such an option is necessary, because \r\nI've tested a lot of browsers and I am currently not aware of any glitches \r\n(and CodeMirror also uses a simple transparent <textarea> internally, with \r\nsome layers of <div>s behind it). Removing CodeMirror completely is in \r\nmy opinion the wrong direction, since it will work fine for nearly all \r\nusers and offers a lot of practical features.\r\n\r\nAnother advantage of CodeMirror is that it supports markers that are moved \r\nwith the text. For example, I have an experimental gotour version locally, \r\nthat integrates the codewalk functionally directly into the editor, so that \r\nusers of the gotour (or other presentations) can work on exercises that \r\nspan over multiple slides. I'm not sure if that's a useful feature, but I \r\nthink it's good to have the opportunity to implement such things.\r\n\r\nI will try to provide a different CL after my exam tomorrow.\r\n\r\n-christoph\r\n",
			"disapproval": false,
			"date": "2012-09-26 09:46:36.819770",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"r@golang.org",
				"aram@mgk.ro",
				"rsc@golang.org",
				"daniel.morsing@gmail.com",
				"rogpeppe@gmail.com",
				"tux21b@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@golang.org, r@golang.org, aram@mgk.ro, rsc@golang.org, daniel.morsing@gmail.com, rogpeppe@gmail.com, tux21b@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-27 06:17:06.119610",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"r@golang.org",
				"aram@mgk.ro",
				"rsc@golang.org",
				"daniel.morsing@gmail.com",
				"rogpeppe@gmail.com",
				"tux21b@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6566045/diff/5006/static/playground.js\nFile static/playground.js (right):\n\nhttps://codereview.appspot.com/6566045/diff/5006/static/playground.js#newcode93\nstatic/playground.js:93: $('.lineno:nth-child('+r[1]+')').addClass('lineerror');\nOn 2012/09/27 06:21:03, campoy1 wrote:\n> Why double quotes here and not before, such as on line 87?\n\nI just missed them.\n\nhttps://codereview.appspot.com/6566045/diff/9008/static/playground.js\nFile static/playground.js (right):\n\nhttps://codereview.appspot.com/6566045/diff/9008/static/playground.js#newcode82\nstatic/playground.js:82: '<div class=\"loading\">Waiting for remote server...</div>'\nthe reason we don't use double quotes here is because the HTML string contains double quotes.\n\nhttps://codereview.appspot.com/6566045/diff/9008/static/playground.js#newcode87\nstatic/playground.js:87: $('.lineerror').removeClass('lineerror');\nuse double quotes here, too",
			"disapproval": false,
			"date": "2012-09-27 22:03:06.001620",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go-playground",
			"disapproval": false,
			"date": "2012-09-25 08:18:39.773680",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Deploy it to an app engine instance somewhere.\r\n",
			"disapproval": false,
			"date": "2012-09-25 18:11:19.198060",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The error Daniel mentioned is now fixed, apparently not having Menlo\r\ninstalled may cause some problems that were not handled correctly by the\r\n\"monospace\" family.\r\n\r\nI added Courier New (which is also monospaced) to the font list to avoid\r\nthis problem and now it should be working fine for everybody, let me know\r\nif anyone has an issue with this.\r\n\r\nThanks Daniel for helping debugging this! :-)\r\n\r\nCheers,\r\n\r\nOn Wed, Sep 26, 2012 at 1:38 AM, <daniel.morsing@gmail.com> wrote:\r\n\r\n> This CL acts weirdly whenever i type a _. It shows up as a space until I\r\n> press one of the buttons, then it shows up as an underline.\r\n>\r\n> browser is chrome 22.0.1229.79 for linux/amd64\r\n>\r\n> https://codereview.appspot.**com/6566045/<https://codereview.appspot.com/6566045/>\r\n>\r\n\r\n\r\n\r\n-- \r\n--\r\nFrancesc\r\n",
			"disapproval": false,
			"date": "2012-09-26 19:12:52.805140",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://goplaybeta.appspot.com/\r\n\r\nOn Tue, Sep 25, 2012 at 11:10 AM, Andrew Gerrand <adg@golang.org> wrote:\r\n\r\n> Deploy it to an app engine instance somewhere.\r\n>\r\n\r\n\r\n\r\n-- \r\n--\r\nFrancesc\r\n",
			"disapproval": false,
			"date": "2012-09-25 18:34:53.403160",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"r@golang.org",
				"aram@mgk.ro",
				"rsc@golang.org",
				"daniel.morsing@gmail.com",
				"rogpeppe@gmail.com",
				"tux21b@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6566045/diff/5006/static/playground.js\nFile static/playground.js (right):\n\nhttp://codereview.appspot.com/6566045/diff/5006/static/playground.js#newcode87\nstatic/playground.js:87: $('.lineerror').toggleClass('lineerror');\ns/toggle/remove/\n\nhttp://codereview.appspot.com/6566045/diff/5006/static/playground.js#newcode92\nstatic/playground.js:92: for (r = regex.exec(text); r != null; r = regex.exec(text)) {\nplease:\nwhile ((r = regex.exec(text)) != null) {\n\nhttp://codereview.appspot.com/6566045/diff/5006/static/playground.js#newcode93\nstatic/playground.js:93: $('.lineno:nth-child('+r[1]+')').addClass('lineerror');\n$(\".lineno\").eq(r[1]).addClass(\"lineerror\");\n\nnote double quotes\n\nhttp://codereview.appspot.com/6566045/diff/5006/static/style.css\nFile static/style.css (left):\n\nhttp://codereview.appspot.com/6566045/diff/5006/static/style.css#oldcode12\nstatic/style.css:12: padding: 5px;\nwhy did you remove the padding?\nif you need to introduce a second wrapper element to use the padding with height:100% then that's fine.\n\nhttp://codereview.appspot.com/6566045/diff/5006/static/style.css\nFile static/style.css (right):\n\nhttp://codereview.appspot.com/6566045/diff/5006/static/style.css#newcode35\nstatic/style.css:35: float: right;\nI don't see why the code needs to be float:right if the line numbers are float:left\n\nhttp://codereview.appspot.com/6566045/diff/5006/static/style.css#newcode101\nstatic/style.css:101: .lines {\nwhat's the difference between this and \".linedwrap .lines\"?\n\nif you just set the background in #wrap - like it used to be - then you shouldn't need to reset it here.",
			"disapproval": false,
			"date": "2012-09-26 22:00:34.001120",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@golang.org, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-25 15:55:59.581480",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I agree: the subtle approach is nice. Clear but not intrusive.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-09-25 20:47:23.654080",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"r@golang.org",
				"aram@mgk.ro",
				"rsc@golang.org",
				"daniel.morsing@gmail.com",
				"rogpeppe@gmail.com",
				"tux21b@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@golang.org, r@golang.org, aram@mgk.ro, rsc@golang.org, daniel.morsing@gmail.com, rogpeppe@gmail.com, tux21b@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-27 22:08:21.457830",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-25 08:41:38.574800",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "looks fine. leaving for adg. thanks!\r\n",
			"disapproval": false,
			"date": "2012-09-25 21:17:13.721010",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Can we see it running somewhere?\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-09-25 08:56:21.027900",
			"approval": false
		},
		{
			"sender": "aram@mgk.ro",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'd like it to highlight the whole line, rather than only the line number.",
			"disapproval": false,
			"date": "2012-09-25 19:57:42.839680",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"r@golang.org",
				"aram@mgk.ro",
				"rsc@golang.org",
				"daniel.morsing@gmail.com",
				"rogpeppe@gmail.com",
				"tux21b@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-09-27 22:19:31.554350",
			"approval": true
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi Daniel,\r\n\r\nThis is really surprising since I'm not playing with the behavior of the\r\ntextarea, which keeps being the standard textarea that you can now use on\r\nplay.golang.org.\r\n\r\nCould you confirm you don't have the same problem with the current version?\r\n\r\nThanks\r\n\r\nOn Wed, Sep 26, 2012 at 1:38 AM, <daniel.morsing@gmail.com> wrote:\r\n\r\n> This CL acts weirdly whenever i type a _. It shows up as a space until I\r\n> press one of the buttons, then it shows up as an underline.\r\n>\r\n> browser is chrome 22.0.1229.79 for linux/amd64\r\n>\r\n> https://codereview.appspot.**com/6566045/<https://codereview.appspot.com/6566045/>\r\n>\r\n\r\n\r\n\r\n-- \r\n--\r\nFrancesc\r\n",
			"disapproval": false,
			"date": "2012-09-26 16:13:53.937140",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"r@golang.org",
				"aram@mgk.ro",
				"rsc@golang.org",
				"daniel.morsing@gmail.com",
				"rogpeppe@gmail.com",
				"tux21b@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@golang.org, r@golang.org, aram@mgk.ro, rsc@golang.org, daniel.morsing@gmail.com, rogpeppe@gmail.com, tux21b@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-26 19:03:55.612380",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"r@golang.org",
				"aram@mgk.ro",
				"rsc@golang.org",
				"daniel.morsing@gmail.com",
				"rogpeppe@gmail.com",
				"tux21b@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/6566045/diff/11001/static/playground.js\nFile static/playground.js (right):\n\nhttp://codereview.appspot.com/6566045/diff/11001/static/playground.js#newcode90\nstatic/playground.js:90: regex = /prog.go:([0-9]+)/g\nOn 2012/09/26 17:50:27, adg wrote:\n> You forgot the var for regex and r, so you're setting global variables.\n\nDone.\n\nhttp://codereview.appspot.com/6566045/diff/11001/static/playground.js#newcode91\nstatic/playground.js:91: for (r = regex.exec(text); r != null; r = regex.exec(text)) {\nOn 2012/09/26 17:50:27, adg wrote:\n> var r;\n> while ((r = regex.exec(text)) != null) {\n>  ...\n> }\n\nDone.\n\nhttp://codereview.appspot.com/6566045/diff/11001/static/playground.js#newcode92\nstatic/playground.js:92: $('.lineno:nth-child('+r[1]+')').addClass('lineerror')\nOn 2012/09/26 17:50:27, adg wrote:\n> semicolon\n\nDone.\n\nhttp://codereview.appspot.com/6566045/diff/5006/static/playground.js\nFile static/playground.js (right):\n\nhttp://codereview.appspot.com/6566045/diff/5006/static/playground.js#newcode87\nstatic/playground.js:87: $('.lineerror').toggleClass('lineerror');\nOn 2012/09/26 22:00:34, adg wrote:\n> s/toggle/remove/\n\nDone.\n\nhttp://codereview.appspot.com/6566045/diff/5006/static/playground.js#newcode92\nstatic/playground.js:92: for (r = regex.exec(text); r != null; r = regex.exec(text)) {\nOn 2012/09/26 22:00:34, adg wrote:\n> please:\n> while ((r = regex.exec(text)) != null) {\n\nDone.\n\nhttp://codereview.appspot.com/6566045/diff/5006/static/playground.js#newcode93\nstatic/playground.js:93: $('.lineno:nth-child('+r[1]+')').addClass('lineerror');\nWhy double quotes here and not before, such as on line 87?\nOn 2012/09/26 22:00:34, adg wrote:\n> $(\".lineno\").eq(r[1]).addClass(\"lineerror\");\n> \n> note double quotes\n\nhttp://codereview.appspot.com/6566045/diff/5006/static/style.css\nFile static/style.css (left):\n\nhttp://codereview.appspot.com/6566045/diff/5006/static/style.css#oldcode12\nstatic/style.css:12: padding: 5px;\nOn 2012/09/26 22:00:34, adg wrote:\n> why did you remove the padding?\n> if you need to introduce a second wrapper element to use the padding with\n> height:100% then that's fine.\n\nDone.\n\nhttp://codereview.appspot.com/6566045/diff/5006/static/style.css\nFile static/style.css (right):\n\nhttp://codereview.appspot.com/6566045/diff/5006/static/style.css#newcode35\nstatic/style.css:35: float: right;\nOn 2012/09/26 22:00:34, adg wrote:\n> I don't see why the code needs to be float:right if the line numbers are\n> float:left\n\nAvoids mysterious flickering on Chrome.\n\nhttp://codereview.appspot.com/6566045/diff/5006/static/style.css#newcode101\nstatic/style.css:101: .lines {\nOn 2012/09/26 22:00:34, adg wrote:\n> what's the difference between this and \".linedwrap .lines\"?\n> \n> if you just set the background in #wrap - like it used to be - then you\n> shouldn't need to reset it here.\n\nStructure simplified.",
			"disapproval": false,
			"date": "2012-09-27 06:21:03.006210",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"r@golang.org",
				"aram@mgk.ro",
				"rsc@golang.org",
				"daniel.morsing@gmail.com",
				"rogpeppe@gmail.com",
				"tux21b@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6566045/diff/9008/static/playground.js\nFile static/playground.js (right):\n\nhttps://codereview.appspot.com/6566045/diff/9008/static/playground.js#newcode82\nstatic/playground.js:82: '<div class=\"loading\">Waiting for remote server...</div>'\nOn 2012/09/27 22:03:06, adg wrote:\n> the reason we don't use double quotes here is because the HTML string contains\n> double quotes.\n\nDone.\n\nhttps://codereview.appspot.com/6566045/diff/9008/static/playground.js#newcode87\nstatic/playground.js:87: $('.lineerror').removeClass('lineerror');\nOn 2012/09/27 22:03:06, adg wrote:\n> use double quotes here, too\n\nDone.",
			"disapproval": false,
			"date": "2012-09-27 22:08:44.794580",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It's now running on my linux machine : canigo.mtv.corp.google.com:8080.\r\n\r\nI can access it from my own machine targetting localhost:8080, but it\r\ndoesn't work with the server name ... any ideas? Is the google dns down? is\r\nthere a new firewall I didn't know about?\r\n\r\nThanks,\r\n\r\nOn Tue, Sep 25, 2012 at 1:56 AM, Rob Pike <r@golang.org> wrote:\r\n\r\n> Can we see it running somewhere?\r\n>\r\n> -rob\r\n>\r\n\r\n\r\n\r\n-- \r\n--\r\nFrancesc\r\n",
			"disapproval": false,
			"date": "2012-09-25 16:12:22.150030",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi gophers,\r\n\r\nChristophe:\r\nYour CL sounds great, but take into account that with this CL I'm tackling\r\na very simple problem: we need line numbers on the playground, now.\r\nFeel free to send your CL for review with the last version of CodeMirror.\r\nI'll be happy to have a look and test it :)\r\n\r\nRoger:\r\nI could wipe all the errors as soon as the content of the textarea changes,\r\nbut I don't really want to start building an online editor from scratch,\r\nthere's a lot of already great editors out there :-) So far, my way of\r\nremoving all errors is rerunning, or reformatting. If you still have\r\nerrors, you get new ones, if you got rid of them, you won't see any red\r\nlines.\r\n\r\nCheers,\r\n\r\nOn Wed, Sep 26, 2012 at 2:46 AM, Christoph Hack <tux21b@gmail.com> wrote:\r\n\r\n> I'm not quite happy with this CL and I think that the previous editor\r\n> (CodeMirror) is far superior and better maintained. All issues that I have\r\n> seen on this list so far were either caused by an very early, extremely\r\n> outdated version of CodeMirror or by some wrong API usage of the very same\r\n> editor. I am currently preparing a CL which re-introduces the CodeMirror\r\n> editor again. Features include:\r\n>\r\n> - go mode with automatic indentation\r\n> - error highlighting (it currently highlights the line, but it would be\r\n> also possible to add marker near the line number or style the line numbers\r\n> differently)\r\n> - optional syntax highlighting (disabled by default *g*)\r\n> - line numbering\r\n> - common code base (playground, gotour, present)\r\n> - fallback: clients that do not support JS will just get a simple\r\n> <textarea>\r\n>\r\n> You can test out most of this features by visiting tour.golang.org. I'm\r\n> also thinking about adding a permanent (cookie based) \"switch to textarea\"\r\n> option, similar to the toggle lineno / syntax highlighting buttons.\r\n> However, I am not entirely sure if such an option is necessary, because\r\n> I've tested a lot of browsers and I am currently not aware of any glitches\r\n> (and CodeMirror also uses a simple transparent <textarea> internally, with\r\n> some layers of <div>s behind it). Removing CodeMirror completely is in\r\n> my opinion the wrong direction, since it will work fine for nearly all\r\n> users and offers a lot of practical features.\r\n>\r\n> Another advantage of CodeMirror is that it supports markers that are moved\r\n> with the text. For example, I have an experimental gotour version locally,\r\n> that integrates the codewalk functionally directly into the editor, so that\r\n> users of the gotour (or other presentations) can work on exercises that\r\n> span over multiple slides. I'm not sure if that's a useful feature, but I\r\n> think it's good to have the opportunity to implement such things.\r\n>\r\n> I will try to provide a different CL after my exam tomorrow.\r\n>\r\n> -christoph\r\n>\r\n\r\n\r\n\r\n-- \r\n--\r\nFrancesc\r\n",
			"disapproval": false,
			"date": "2012-09-26 16:20:21.197380",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "5px added between line number and line content.\r\n\r\nThanks\r\n\r\nOn Tue, Sep 25, 2012 at 1:47 PM, Rob Pike <r@golang.org> wrote:\r\n\r\n> I agree: the subtle approach is nice. Clear but not intrusive.\r\n>\r\n> -rob\r\n>\r\n\r\n\r\n\r\n-- \r\n--\r\nFrancesc\r\n",
			"disapproval": false,
			"date": "2012-09-25 21:06:29.076700",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"r@golang.org",
				"aram@mgk.ro",
				"rsc@golang.org",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This CL acts weirdly whenever i type a _. It shows up as a space until I press one of the buttons, then it shows up as an underline.\n\nbrowser is chrome 22.0.1229.79 for linux/amd64",
			"disapproval": false,
			"date": "2012-09-26 08:38:04.380440",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 26 September 2012 11:20, Francesc Campoy Flores <campoy@golang.org> wrote:\r\n> Hi gophers,\r\n>\r\n> Christophe:\r\n> Your CL sounds great, but take into account that with this CL I'm tackling a\r\n> very simple problem: we need line numbers on the playground, now.\r\n> Feel free to send your CL for review with the last version of CodeMirror.\r\n> I'll be happy to have a look and test it :)\r\n>\r\n> Roger:\r\n> I could wipe all the errors as soon as the content of the textarea changes,\r\n> but I don't really want to start building an online editor from scratch,\r\n> there's a lot of already great editors out there :-) So far, my way of\r\n> removing all errors is rerunning, or reformatting. If you still have errors,\r\n> you get new ones, if you got rid of them, you won't see any red lines.\r\n\r\nI agree on both counts.\r\n",
			"disapproval": false,
			"date": "2012-09-26 17:38:01.106090",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"r@golang.org",
				"aram@mgk.ro",
				"rsc@golang.org",
				"daniel.morsing@gmail.com",
				"rogpeppe@gmail.com",
				"tux21b@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go-playground/source/detail?r=cb7adf7e3dd3 ***\n\nplayground: Adding line numbers and error highlighting.\n\nR=adg, r, aram, rsc, daniel.morsing, rogpeppe, tux21b\nCC=golang-dev\nhttp://codereview.appspot.com/6566045",
			"disapproval": false,
			"date": "2012-09-27 22:43:58.583330",
			"approval": false
		}
	],
	"owner_email": "campoy@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gocampoy",
	"subject": "code review 6566045: playground: Adding line numbers and error highlighting.",
	"created": "2012-09-25 06:44:11.565660",
	"patchsets": [
		1,
		3,
		2005,
		6002,
		5005,
		11001,
		5006,
		9008,
		9009,
		4013,
		2011,
		9014,
		8014,
		8015,
		11006
	],
	"modified": "2012-09-27 22:44:00.083590",
	"closed": true,
	"issue": 6566045
}