{
	"description": "exp/ssh: refactor halfConnection to transport\n\n        This CL generalises the pair of halfConnection members that the\n        serverConn holds into a single transport struct that is shared by\n        both Server and Client, CL 5037047",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"agl@golang.org",
		"bradfitz@golang.org"
	],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Thank you for your kind comments, I will address them this evening.\n\nOn Tue, Sep 20, 2011 at 12:42 AM,  <agl@golang.org> wrote:\n> LGTM.\n>\n> Only very minor nits. I think this code is a clear improvement on the\n> original. Thank you.\n>\n>\n> http://codereview.appspot.com/5040046/diff/14001/src/pkg/exp/ssh/transport.go\n> File src/pkg/exp/ssh/transport.go (right):\n>\n> http://codereview.appspot.com/5040046/diff/14001/src/pkg/exp/ssh/transport.go#newcode52\n> src/pkg/exp/ssh/transport.go:52: var lengthBytes = make([]byte, 5)\n> if lengthBytes were in the reader struct, maybe we could avoid this\n> allocation for each packet?\n>\n> http://codereview.appspot.com/5040046/diff/14001/src/pkg/exp/ssh/transport.go#newcode106\n> src/pkg/exp/ssh/transport.go:106: // read and decrypt next packet on the\n> wire\n> I typically always start function comments with the name of the function\n> (\"readPacket reads and decrypts\"...). Although it only really matters\n> for public functions I guess.\n>\n> However, this code is switching between starting comments with capitals\n> and not doing so. I think all the comments should start with a capital\n> unless they're starting with the function name.\n>\n> http://codereview.appspot.com/5040046/\n>\n",
			"disapproval": false,
			"date": "2011-09-19 21:33:43.249144",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello agl@golang.org, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-09-18 04:17:34.768978",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM.\n\nOnly very minor nits. I think this code is a clear improvement on the original. Thank you.\n\nhttp://codereview.appspot.com/5040046/diff/14001/src/pkg/exp/ssh/transport.go\nFile src/pkg/exp/ssh/transport.go (right):\n\nhttp://codereview.appspot.com/5040046/diff/14001/src/pkg/exp/ssh/transport.go#newcode52\nsrc/pkg/exp/ssh/transport.go:52: var lengthBytes = make([]byte, 5)\nif lengthBytes were in the reader struct, maybe we could avoid this allocation for each packet?\n\nhttp://codereview.appspot.com/5040046/diff/14001/src/pkg/exp/ssh/transport.go#newcode106\nsrc/pkg/exp/ssh/transport.go:106: // read and decrypt next packet on the wire\nI typically always start function comments with the name of the function (\"readPacket reads and decrypts\"...). Although it only really matters for public functions I guess.\n\nHowever, this code is switching between starting comments with capitals and not doing so. I think all the comments should start with a capital unless they're starting with the function name.",
			"disapproval": false,
			"date": "2011-09-19 14:42:55.073166",
			"approval": true
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Sep 19, 2011 at 10:42 AM,  <agl@golang.org> wrote:\n> http://codereview.appspot.com/5040046/diff/14001/src/pkg/exp/ssh/transport.go#newcode52\n> src/pkg/exp/ssh/transport.go:52: var lengthBytes = make([]byte, 5)\n> if lengthBytes were in the reader struct, maybe we could avoid this\n> allocation for each packet?\n\n(p.s. this was just me wondering out aloud. No need to do anything here.)\n\n\nCheers\n\nAGL\n",
			"disapproval": false,
			"date": "2011-09-19 21:36:18.100958",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Agreed. I'd like to find a way to reduce the number of small slices\nthe are allocated simply to pass down to the writers. As my mistaken\ncomments in your previous CL showed, they can't be stack allocated,\nI'm guessing because EA doesn't know if the receiver will take a copy\nor subslice and stash it for it's own purposes.\n\nCheers\n\nDave\n\nOn Tue, Sep 20, 2011 at 7:36 AM, Adam Langley <agl@golang.org> wrote:\n> On Mon, Sep 19, 2011 at 10:42 AM, \u00a0<agl@golang.org> wrote:\n>> http://codereview.appspot.com/5040046/diff/14001/src/pkg/exp/ssh/transport.go#newcode52\n>> src/pkg/exp/ssh/transport.go:52: var lengthBytes = make([]byte, 5)\n>> if lengthBytes were in the reader struct, maybe we could avoid this\n>> allocation for each packet?\n>\n> (p.s. this was just me wondering out aloud. No need to do anything here.)\n>\n>\n> Cheers\n>\n> AGL\n>\n",
			"disapproval": false,
			"date": "2011-09-19 22:56:19.244484",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2011-09-20 09:51:20.243135",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "This was an accident. I will resubmit as a new CL\n\nOn Tue, Sep 20, 2011 at 7:51 PM,  <dave@cheney.net> wrote:\n> *** Abandoned ***\n>\n> http://codereview.appspot.com/5040046/\n>\n",
			"disapproval": false,
			"date": "2011-09-20 09:53:26.016620",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 5040046: exp/ssh: refactor halfConnection to transport",
	"created": "2011-09-18 03:41:27.539902",
	"patchsets": [
		1,
		2001,
		4001,
		6001,
		3008,
		9001,
		5009,
		14001
	],
	"modified": "2011-09-20 09:51:21.100159",
	"closed": true,
	"issue": 5040046
}