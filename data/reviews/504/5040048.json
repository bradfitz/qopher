{
	"description": "suffixarray: add benchmarks for construction",
	"cc": [
		"gri@golang.org",
		"jeff@somethingsimilar.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "eric.d.eisner@gmail.com",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello gri@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2011-09-18 21:53:06.932892",
			"approval": false
		},
		{
			"sender": "jeff@somethingsimilar.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "When writing benchmarks, don't forget to use b.N. Also, would it be\nbetter to test qsufsort(data) directly?\n\n    for i := 0; i < b.N; i++ {\n        New(data) // or qsufsort(data)\n    }\n\nOn Sun, Sep 18, 2011 at 2:53 PM,  <eric.d.eisner@gmail.com> wrote:\n> Reviewers: gri,\n>\n> Message:\n> Hello gri@golang.org (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg\n>\n>\n> Description:\n> suffixarray: add benchmarks for construction\n>\n> Please review this at http://codereview.appspot.com/5040048/\n>\n> Affected files:\n> \u00a0M src/pkg/index/suffixarray/suffixarray_test.go\n>\n>\n> Index: src/pkg/index/suffixarray/suffixarray_test.go\n> ===================================================================\n> --- a/src/pkg/index/suffixarray/suffixarray_test.go\n> +++ b/src/pkg/index/suffixarray/suffixarray_test.go\n> @@ -7,6 +7,7 @@ package suffixarray\n> \u00a0import (\n> \u00a0 \u00a0 \u00a0 \u00a0\"bytes\"\n> \u00a0 \u00a0 \u00a0 \u00a0\"exp/regexp\"\n> + \u00a0 \u00a0 \u00a0 \"rand\"\n> \u00a0 \u00a0 \u00a0 \u00a0\"sort\"\n> \u00a0 \u00a0 \u00a0 \u00a0\"strings\"\n> \u00a0 \u00a0 \u00a0 \u00a0\"testing\"\n> @@ -255,3 +256,25 @@ func TestIndex(t *testing.T) {\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0testLookups(t, &tc, x, -1)\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0}\n> +\n> +// These two benchmarks are the least and the most possible substring\n> +// repetition respectively. For most algorithms, the runtime of every input\n> +// will be between these two runtimes.\n> +const benchmarkSize = 1e6\n> +\n> +func BenchmarkNewIndexRandom(b *testing.B) {\n> + \u00a0 \u00a0 \u00a0 b.StopTimer()\n> + \u00a0 \u00a0 \u00a0 data := make([]byte, benchmarkSize)\n> + \u00a0 \u00a0 \u00a0 for i := range data {\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 data[i] = byte(rand.Intn(256))\n> + \u00a0 \u00a0 \u00a0 }\n> + \u00a0 \u00a0 \u00a0 b.StartTimer()\n> + \u00a0 \u00a0 \u00a0 New(data)\n> +}\n> +\n> +func BenchmarkNewIndexRepeat(b *testing.B) {\n> + \u00a0 \u00a0 \u00a0 b.StopTimer()\n> + \u00a0 \u00a0 \u00a0 data := make([]byte, benchmarkSize)\n> + \u00a0 \u00a0 \u00a0 b.StartTimer()\n> + \u00a0 \u00a0 \u00a0 New(data)\n> +}\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-09-19 06:23:30.755782",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"gri@golang.org",
				"jeff@somethingsimilar.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Please also address Jeff Hodges' comments (b.N, qsufsort).\n\nhttp://codereview.appspot.com/5040048/diff/5001/src/pkg/index/suffixarray/suffixarray_test.go\nFile src/pkg/index/suffixarray/suffixarray_test.go (right):\n\nhttp://codereview.appspot.com/5040048/diff/5001/src/pkg/index/suffixarray/suffixarray_test.go#newcode260\nsrc/pkg/index/suffixarray/suffixarray_test.go:260: // These two benchmarks are the least and the most possible substring\ns/possible/likely/?\n\nhttp://codereview.appspot.com/5040048/diff/5001/src/pkg/index/suffixarray/suffixarray_test.go#newcode261\nsrc/pkg/index/suffixarray/suffixarray_test.go:261: // repetition respectively. For most algorithms, the runtime of every input\ns/runtime/running time/\n\nhttp://codereview.appspot.com/5040048/diff/5001/src/pkg/index/suffixarray/suffixarray_test.go#newcode262\nsrc/pkg/index/suffixarray/suffixarray_test.go:262: // will be between these two runtimes.\ns/ runtimes//",
			"disapproval": false,
			"date": "2011-09-19 18:01:09.603306",
			"approval": false
		},
		{
			"sender": "eric.d.eisner@gmail.com",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"gri@golang.org",
				"jeff@somethingsimilar.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello gri@golang.org, jeff@somethingsimilar.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-20 05:57:12.559418",
			"approval": false
		},
		{
			"sender": "eric.d.eisner@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I've made these changes, but I don't see why the benchmarks should be timing\nthe private function qsufsort instead of the public interface, New. They are\ndoing an almost identical amount of work anyway.\n\nOn Mon, Sep 19, 2011 at 11:01, <gri@golang.org> wrote:\n\n> Please also address Jeff Hodges' comments (b.N, qsufsort).\n>\n>\n>\n> http://codereview.appspot.com/**5040048/diff/5001/src/pkg/**\n> index/suffixarray/suffixarray_**test.go<http://codereview.appspot.com/5040048/diff/5001/src/pkg/index/suffixarray/suffixarray_test.go>\n> File src/pkg/index/suffixarray/**suffixarray_test.go (right):\n>\n> http://codereview.appspot.com/**5040048/diff/5001/src/pkg/**\n> index/suffixarray/suffixarray_**test.go#newcode260<http://codereview.appspot.com/5040048/diff/5001/src/pkg/index/suffixarray/suffixarray_test.go#newcode260>\n> src/pkg/index/suffixarray/**suffixarray_test.go:260: // These two\n>\n> benchmarks are the least and the most possible substring\n> s/possible/likely/?\n>\n> http://codereview.appspot.com/**5040048/diff/5001/src/pkg/**\n> index/suffixarray/suffixarray_**test.go#newcode261<http://codereview.appspot.com/5040048/diff/5001/src/pkg/index/suffixarray/suffixarray_test.go#newcode261>\n> src/pkg/index/suffixarray/**suffixarray_test.go:261: // repetition\n>\n> respectively. For most algorithms, the runtime of every input\n> s/runtime/running time/\n>\n> http://codereview.appspot.com/**5040048/diff/5001/src/pkg/**\n> index/suffixarray/suffixarray_**test.go#newcode262<http://codereview.appspot.com/5040048/diff/5001/src/pkg/index/suffixarray/suffixarray_test.go#newcode262>\n> src/pkg/index/suffixarray/**suffixarray_test.go:262: // will be between\n> these two runtimes.\n> s/ runtimes//\n>\n>\n> http://codereview.appspot.com/**5040048/<http://codereview.appspot.com/5040048/>\n>\n",
			"disapproval": false,
			"date": "2011-09-20 06:01:28.384606",
			"approval": false
		},
		{
			"sender": "jeff@somethingsimilar.com",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"gri@golang.org",
				"jeff@somethingsimilar.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nNot a committer, however.",
			"disapproval": false,
			"date": "2011-09-20 09:46:39.251988",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"gri@golang.org",
				"jeff@somethingsimilar.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "This can be vastly simplified. I'm sorry I missed this in the first round.\n- gri\n\nhttp://codereview.appspot.com/5040048/diff/10001/src/pkg/index/suffixarray/suffixarray_test.go\nFile src/pkg/index/suffixarray/suffixarray_test.go (right):\n\nhttp://codereview.appspot.com/5040048/diff/10001/src/pkg/index/suffixarray/suffixarray_test.go#newcode270\nsrc/pkg/index/suffixarray/suffixarray_test.go:270: for i := range data {\nThe data is never modified by New() so this is not necessary. Just do:\n\nb.StopTimer()\ndata := make([]byte, benchmarkSize)\nfor i := range data {\n    data[i] = byte(rand.Intn(256))\n}\nb.StartTimer()\nfor i := 0; i < b.N; i++ {\n   New(data)\n}\n\nIn fact, both routines are now almost identical (the first has an initialization loop) that it makes sense to factor them out into a separate function\n\nfunc benchmarkNew(n int, random bool) {\n   b.StopTimer()\n   data := make([]byte, benchmarkSize)\n   if random {\n      for i := range data {\n          data[i] = byte(rand.Intn(256))\n      }\n   }\n   b.StartTimer()\n   for i := 0; i < b.N; i++ {\n      New(data)\n   }\n}\n\nand then call\n\nbenchmarkNew(b.N, false) and\nbenchmarkNew(b.N, true)\n\nrespectively.\n\nhttp://codereview.appspot.com/5040048/diff/10001/src/pkg/index/suffixarray/suffixarray_test.go#newcode283\nsrc/pkg/index/suffixarray/suffixarray_test.go:283: for i := range data {\nPlease make the same change as above. Also there's no need for the initialization loop, new slices are zero initialized.",
			"disapproval": false,
			"date": "2011-09-20 21:22:07.179367",
			"approval": false
		},
		{
			"sender": "eric.d.eisner@gmail.com",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"gri@golang.org",
				"jeff@somethingsimilar.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello gri@golang.org, jeff@somethingsimilar.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-23 05:08:37.348880",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"gri@golang.org",
				"jeff@somethingsimilar.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM.\nThanks.\n- gri",
			"disapproval": false,
			"date": "2011-09-23 16:14:52.073540",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"gri@golang.org",
				"jeff@somethingsimilar.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=fb86ba0354a5 ***\n\nsuffixarray: add benchmarks for construction\n\nR=gri, jeff\nCC=golang-dev\nhttp://codereview.appspot.com/5040048\n\nCommitter: Robert Griesemer <gri@golang.org>",
			"disapproval": false,
			"date": "2011-09-23 16:18:22.121088",
			"approval": false
		}
	],
	"owner_email": "eric.d.eisner@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Eric Roshan Eisner",
	"subject": "code review 5040048: suffixarray: add benchmarks for construction",
	"created": "2011-09-18 21:49:01.558777",
	"patchsets": [
		1,
		1002,
		3001,
		5001,
		10001,
		13002
	],
	"modified": "2011-09-23 16:18:22.121088",
	"closed": false,
	"issue": 5040048
}