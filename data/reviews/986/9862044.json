{
	"description": "go.tools/go/types: replace ObjSet with improved Scope\n\n- First step towards unified use of scopes. Will enable\n  further simplifications.\n\n- Removed various ForEach iterators in favor of the existing\n  accessor methods, for a thinner API.\n\n- Renamed outer/Outer to parent/Parent for scopes.\n\n- Removed check.lookup in favor of Scope.LookupParent.",
	"cc": [
		"adonovan@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=cb7a19ccc0ba&repo=tools ***\n\ngo.tools/go/types: replace ObjSet with improved Scope\n\n- First step towards unified use of scopes. Will enable\n  further simplifications.\n\n- Removed various ForEach iterators in favor of the existing\n  accessor methods, for a thinner API.\n\n- Renamed outer/Outer to parent/Parent for scopes.\n\n- Removed check.lookup in favor of Scope.LookupParent.\n\nR=adonovan\nCC=golang-dev\nhttps://codereview.appspot.com/9862044",
			"disapproval": false,
			"date": "2013-05-31 04:58:39.718800",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/30 21:01:44, gri wrote:\n> Hello mailto:adonovan@google.com (cc: mailto:golang-dev@googlegroups.com),\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go.tools\n\nLGTM",
			"disapproval": false,
			"date": "2013-05-31 02:51:52.667000",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.tools",
			"disapproval": false,
			"date": "2013-05-30 21:01:44.538880",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/9862044/diff/23001/go/types/predicates.go\nFile go/types/predicates.go (right):\n\nhttps://codereview.appspot.com/9862044/diff/23001/go/types/predicates.go#newcode211\ngo/types/predicates.go:211: // TODO(gri) make this more efficient\ne.g. sort them on completion.\n\nhttps://codereview.appspot.com/9862044/diff/23001/go/types/scope.go\nFile go/types/scope.go (right):\n\nhttps://codereview.appspot.com/9862044/diff/23001/go/types/scope.go#newcode46\ngo/types/scope.go:46: func (s *Scope) IsEmpty() bool {\nIs this predicate really worth having?  It's not asymptotically faster than NumEntries()==0.\n\nhttps://codereview.appspot.com/9862044/diff/23001/go/types/scope.go#newcode140\ngo/types/scope.go:140: fmt.Fprintf(&buf, \"scope %p {\", s)\nIs the identity (%p) important?\n\nhttps://codereview.appspot.com/9862044/diff/23001/ssa/builder.go\nFile ssa/builder.go (right):\n\nhttps://codereview.appspot.com/9862044/diff/23001/ssa/builder.go#newcode172\nssa/builder.go:172: universe := types.Universe\nLet the compiler optimise the repeated lookups of the global variable types.Universe; you don't need to.",
			"disapproval": false,
			"date": "2013-05-31 02:52:00.798460",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9862044/diff/23001/go/types/predicates.go\nFile go/types/predicates.go (right):\n\nhttps://codereview.appspot.com/9862044/diff/23001/go/types/predicates.go#newcode211\ngo/types/predicates.go:211: // TODO(gri) make this more efficient\nOn 2013/05/31 02:52:00, adonovan wrote:\n> e.g. sort them on completion.\n\nDone.\n\nhttps://codereview.appspot.com/9862044/diff/23001/go/types/scope.go\nFile go/types/scope.go (right):\n\nhttps://codereview.appspot.com/9862044/diff/23001/go/types/scope.go#newcode46\ngo/types/scope.go:46: func (s *Scope) IsEmpty() bool {\nOn 2013/05/31 02:52:00, adonovan wrote:\n> Is this predicate really worth having?  It's not asymptotically faster than\n> NumEntries()==0.\n\nSeems more expressive then NumEntries() == 0. Leaving for now.\n\nhttps://codereview.appspot.com/9862044/diff/23001/go/types/scope.go#newcode140\ngo/types/scope.go:140: fmt.Fprintf(&buf, \"scope %p {\", s)\nOn 2013/05/31 02:52:00, adonovan wrote:\n> Is the identity (%p) important?\n\nIt's useful for debugging and one needs to compare scope identities.\n\nEventually this should change - there's already a TODO to give scopes names.\n\nhttps://codereview.appspot.com/9862044/diff/23001/ssa/builder.go\nFile ssa/builder.go (right):\n\nhttps://codereview.appspot.com/9862044/diff/23001/ssa/builder.go#newcode172\nssa/builder.go:172: universe := types.Universe\nOn 2013/05/31 02:52:00, adonovan wrote:\n> Let the compiler optimise the repeated lookups of the global variable\n> types.Universe; you don't need to.\n\nDone.",
			"disapproval": false,
			"date": "2013-05-31 04:56:34.663440",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 9862044: go.tools/go/types: replace ObjSet with improved Scope",
	"created": "2013-05-30 18:52:33.617130",
	"patchsets": [
		1,
		2001,
		2002,
		3029,
		4013,
		1002,
		12001,
		1003,
		15001,
		9002,
		20001,
		23001,
		28002,
		25002
	],
	"modified": "2013-05-31 04:58:41.072330",
	"closed": true,
	"issue": 9862044
}