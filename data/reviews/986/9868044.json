{
	"description": "runtime: refactor gogo\nInstead of 3 overlapping functions (gogo, gogocall, gogocallfn)\nintroduce 2 non-overlapping functions (gogo, returnto).\nRequired for preemptive scheduler, otherwise it would need\nto introduce yet another function -- gogo2 (same as gogo, but restores DX instead of AX).",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"iant@golang.org",
		"capnm9@gmail.com",
		"rsc@golang.org",
		"ality@pbrane.org"
	],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I absolutely have no idea what I am doing wrt arm.\nCan somebody please test and fix it for arm?",
			"disapproval": false,
			"date": "2013-05-30 13:18:11.918130",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-05-30 13:17:23.742500",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think we need some good docs for gogo and returnto somewhere.\n\nhttps://codereview.appspot.com/9868044/diff/11001/src/pkg/runtime/asm_arm.s\nFile src/pkg/runtime/asm_arm.s (right):\n\nhttps://codereview.appspot.com/9868044/diff/11001/src/pkg/runtime/asm_arm.s#newcode134\nsrc/pkg/runtime/asm_arm.s:134: TEXT runtime\u00b7gogocall(SB), 7, $-4\nRemove these functions entirely.\n\nhttps://codereview.appspot.com/9868044/diff/11001/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttps://codereview.appspot.com/9868044/diff/11001/src/pkg/runtime/proc.c#newcode994\nsrc/pkg/runtime/proc.c:994: runtime\u00b7returnto(&gp->sched, (byte*)runtime\u00b7goexit);\nPerhaps it would make sense to call returnto in runtime\u00b7newproc1 rather than here.",
			"disapproval": false,
			"date": "2013-05-31 22:35:52.594100",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\n>I think we need some good docs for gogo and returnto somewhere.\nI am ready to add a comment for gogo and returnto, but I am not ready to undertake the full docs for split stacks.\nWhat would be a good place? runtime.h? It does not have comments for functions...\n\nhttps://codereview.appspot.com/9868044/diff/11001/src/pkg/runtime/asm_arm.s\nFile src/pkg/runtime/asm_arm.s (right):\n\nhttps://codereview.appspot.com/9868044/diff/11001/src/pkg/runtime/asm_arm.s#newcode134\nsrc/pkg/runtime/asm_arm.s:134: TEXT runtime\u00b7gogocall(SB), 7, $-4\nOn 2013/05/31 22:35:52, iant wrote:\n> Remove these functions entirely.\n\nDone.\n\nhttps://codereview.appspot.com/9868044/diff/11001/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttps://codereview.appspot.com/9868044/diff/11001/src/pkg/runtime/proc.c#newcode994\nsrc/pkg/runtime/proc.c:994: runtime\u00b7returnto(&gp->sched, (byte*)runtime\u00b7goexit);\nOn 2013/05/31 22:35:52, iant wrote:\n> Perhaps it would make sense to call returnto in runtime\u00b7newproc1 rather than\n> here.\n\nAgree.\nBut I want to just mechanically map old api onto new api in this CL. It touches subtle parts of the runtime, so I will be happy if I get at least this correctly.\nLet's do the refactoring in the subsequent CL. Actually it will be very nice, because then it will be possible to remove special handling of non-started goroutines in gentraceback and GC stack scanning.\nAdded the TODO.",
			"disapproval": false,
			"date": "2013-06-01 19:59:18.046680",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/01 19:59:18, dvyukov wrote:\n> PTAL\n> \n> >I think we need some good docs for gogo and returnto somewhere.\n> I am ready to add a comment for gogo and returnto, but I am not ready to\n> undertake the full docs for split stacks.\n> What would be a good place? runtime.h? It does not have comments for\n> functions...\n\nSomewhere near the top of proc.c, I suppose.\n\n\n> Let's do the refactoring in the subsequent CL. Actually it will be very nice,\n> because then it will be possible to remove special handling of non-started\n> goroutines in gentraceback and GC stack scanning.\n> Added the TODO.\n\nOK.",
			"disapproval": false,
			"date": "2013-06-03 04:30:20.919160",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/30 13:18:11, dvyukov wrote:\n> I absolutely have no idea what I am doing wrt arm.\n> Can somebody please test and fix it for arm?\n\n\nCan somebody with ARM access please test this?",
			"disapproval": false,
			"date": "2013-06-03 15:06:15.990390",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/03 04:30:20, iant wrote:\n> On 2013/06/01 19:59:18, dvyukov wrote:\n> > PTAL\n> > \n> > >I think we need some good docs for gogo and returnto somewhere.\n> > I am ready to add a comment for gogo and returnto, but I am not ready to\n> > undertake the full docs for split stacks.\n> > What would be a good place? runtime.h? It does not have comments for\n> > functions...\n> \n> Somewhere near the top of proc.c, I suppose.\n\n\nDone\nPTAL",
			"disapproval": false,
			"date": "2013-06-03 13:59:33.578000",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9868044/diff/28001/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttps://codereview.appspot.com/9868044/diff/28001/src/pkg/runtime/proc.c#newcode30\nsrc/pkg/runtime/proc.c:30: // AX holds return value from C functions and is preserved across lessstack().\ns/()// here and next line.\n\nhttps://codereview.appspot.com/9868044/diff/28001/src/pkg/runtime/proc.c#newcode37\nsrc/pkg/runtime/proc.c:37: // Switches to goroutine context buf, restores cret in AX and context in DX.\nAdd a comment about ARM here.\n\nhttps://codereview.appspot.com/9868044/diff/28001/src/pkg/runtime/proc.c#newcode40\nsrc/pkg/runtime/proc.c:40: // Arranges to return to PC fn when the current stack segment in buf underflows.\nI think this needs to be expanded.  How about this, if this is correct.\n\nCalled when buf refers to an empty stack segment.  This is followed by a call to runtime\u00b7gogo.  Sets up buf such that, when the function that gogo jumps to returns, it will return to fn.",
			"disapproval": false,
			"date": "2013-06-03 14:58:56.871550",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9868044/diff/28001/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttps://codereview.appspot.com/9868044/diff/28001/src/pkg/runtime/proc.c#newcode30\nsrc/pkg/runtime/proc.c:30: // AX holds return value from C functions and is preserved across lessstack().\nOn 2013/06/03 14:58:57, iant wrote:\n> s/()// here and next line.\n\nDone.\n\nhttps://codereview.appspot.com/9868044/diff/28001/src/pkg/runtime/proc.c#newcode37\nsrc/pkg/runtime/proc.c:37: // Switches to goroutine context buf, restores cret in AX and context in DX.\nOn 2013/06/03 14:58:57, iant wrote:\n> Add a comment about ARM here.\n\nDone.\n\nhttps://codereview.appspot.com/9868044/diff/28001/src/pkg/runtime/proc.c#newcode40\nsrc/pkg/runtime/proc.c:40: // Arranges to return to PC fn when the current stack segment in buf underflows.\nOn 2013/06/03 14:58:57, iant wrote:\n> I think this needs to be expanded.  How about this, if this is correct.\n> \n> Called when buf refers to an empty stack segment.  This is followed by a call to\n> runtime\u00b7gogo.  Sets up buf such that, when the function that gogo jumps to\n> returns, it will return to fn.\n\nDone.",
			"disapproval": false,
			"date": "2013-06-03 15:09:27.790500",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jun 5, 2013 at 11:00 AM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n\r\n> On Wed, Jun 5, 2013 at 6:56 PM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n> > On Wed, Jun 5, 2013 at 6:39 PM, Russ Cox <rsc@golang.org> wrote:\r\n> >> Okay, I see what you are getting at. But the naming is confusing, and\r\n> the\r\n> >> new API isn't great either. Instead of tacking more arguments onto gogo,\r\n> >> that stuff really belongs in the Gobuf\r\n> >\r\n> > Agree.\r\n> >\r\n> >\r\n> >> , which represents the paused\r\n> >> goroutine's state. What you're calling returnto is really the beginning\r\n> of a\r\n> >> call. I understand how you got to \"return\" but that's not really what it\r\n> >> does: it's gogocall not gogoreturn. A better name would be gostartcall,\r\n> so\r\n> >> that the current gogocall = gostartcall + gogo. And if we do this, the\r\n> whole\r\n> >> concept of an unstarted goroutine should be removed completely.\r\n> >\r\n> > Agree.\r\n> >\r\n> >> Can you try something like CL 10036044 instead? It mostly works but some\r\n> >> tests fail due to garbage collection problems that I don't understand.\r\n> >\r\n> > I will look into making your CL work.\r\n>\r\n> Shouldn't it be the other way around? Start call to goexit, then switch to\r\n> fn?\r\n>\r\n\r\nMaybe it's the other way around in your CL (I didn't look closely), but the\r\nway I would like to approach this is to think of\r\n\r\n\r\n> 1547 newg->sched.pc = (byte*)runtime\u00b7goexit;\r\n> 1548 newg->sched.g = newg;\r\n>\r\n\r\nas creating a goroutine that is about to run goexit.\r\n\r\n\r\n> 1549 \u00bb runtime\u00b7gostartcallfn(&newg->sched, fn);\r\n>\r\n\r\nAnd then this pushes a call to fn ahead of whatever the goroutine was going\r\nto do. So the net result is that the goroutine calls fn, and then when fn\r\nreturns, the goroutine calls goexit.\r\n\r\n\r\n> This can have problems with GC, because it does not understand\r\n> non-started functions yet. For the non-started goroutine fn has not\r\n> yet decremented SP to form stack frame, but the GC assumes it does.\r\n>\r\n\r\nThe stack walker that we had before all the new GC work understood that if\r\npc == f->entry then there are no locals, only arguments. I attempted to add\r\nthat to addframeroots (see the CL), but it is possible other fixes are\r\nneeded elsewhere.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-06-05 15:09:02.950490",
			"approval": false
		},
		{
			"sender": "capnm9@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"capnm9@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/03 15:06:15, dvyukov wrote:\n> Can somebody with ARM access please test this?\n\nLinux rpi 3.6.11+ #456 PREEMPT Mon May 20 17:42:15 BST 2013 armv6l GNU/Linux\n\ncmd/go\nfatal error: unknown pc\n\ngoroutine 1 [runnable]:\n[fp=0xb6ed3df8] runtime.gc(0x0)\n\t/d/go-test/src/pkg/runtime/mgc0.c:1978 +0x190\n[fp=0xb6ed3e2c] runtime.mallocgc(0x20, 0x0, 0x1, 0x1)\n\t/d/go-test/src/pkg/runtime/zmalloc_linux_arm.c:117 +0x224\n[fp=0xb6ed3e40] runtime.mal(0x20)\n\t/d/go-test/src/pkg/runtime/zmalloc_linux_arm.c:678 +0x3c\n[fp=0xb6ed3e68] runtime.makemap_c(0x1a5e60, 0x0, 0x0)\n\t/d/go-test/src/pkg/runtime/hashmap.c:1105 +0xe0\n[fp=0xb6ed3e78] runtime.makemap(0x1a5e60, 0x0, 0x0, 0x1)\n\t/d/go-test/src/pkg/runtime/hashmap.c:1131 +0x38\n[fp=0xb6ed3e90] unicode.init()\n\t/d/go-test/src/pkg/unicode/tables.go:48 +0x88\n[fp=0xb6ed3e9c] go/parser.init()\n\t/d/go-test/src/pkg/go/parser/parser.go:2437 +0x70\n[fp=0xb6ed3fb4] main.init()\n\t/d/go-test/src/cmd/go/vet.go:37 +0x78\n[fp=0xb6ed3fcc] runtime.main()\n\t/d/go-test/src/pkg/runtime/proc.c:203 +0x70\n\ngoroutine 2 [runnable]:\nruntime.MHeap_Scavenger()\n\t/d/go-test/src/pkg/runtime/mheap.c:438\nruntime.goexit()\n\t/d/go-test/src/pkg/runtime/proc.c:1262\ncreated by runtime.main\n\t/d/go-test/src/pkg/runtime/proc.c:189\n./make.bash: line 151: 10833 Aborted                 \"$GOTOOLDIR\"/go_bootstrap clean -i std",
			"disapproval": false,
			"date": "2013-06-03 15:46:13.170470",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"capnm9@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/03 15:46:13, capnm wrote:\n> On 2013/06/03 15:06:15, dvyukov wrote:\n> > Can somebody with ARM access please test this?\n> \n> Linux rpi 3.6.11+ #456 PREEMPT Mon May 20 17:42:15 BST 2013 armv6l GNU/Linux\n> \n> cmd/go\n> fatal error: unknown pc\n> \n> goroutine 1 [runnable]:\n> [fp=0xb6ed3df8] runtime.gc(0x0)\n> \t/d/go-test/src/pkg/runtime/mgc0.c:1978 +0x190\n> [fp=0xb6ed3e2c] runtime.mallocgc(0x20, 0x0, 0x1, 0x1)\n> \t/d/go-test/src/pkg/runtime/zmalloc_linux_arm.c:117 +0x224\n> [fp=0xb6ed3e40] runtime.mal(0x20)\n> \t/d/go-test/src/pkg/runtime/zmalloc_linux_arm.c:678 +0x3c\n> [fp=0xb6ed3e68] runtime.makemap_c(0x1a5e60, 0x0, 0x0)\n> \t/d/go-test/src/pkg/runtime/hashmap.c:1105 +0xe0\n> [fp=0xb6ed3e78] runtime.makemap(0x1a5e60, 0x0, 0x0, 0x1)\n> \t/d/go-test/src/pkg/runtime/hashmap.c:1131 +0x38\n> [fp=0xb6ed3e90] unicode.init()\n> \t/d/go-test/src/pkg/unicode/tables.go:48 +0x88\n> [fp=0xb6ed3e9c] go/parser.init()\n> \t/d/go-test/src/pkg/go/parser/parser.go:2437 +0x70\n> [fp=0xb6ed3fb4] main.init()\n> \t/d/go-test/src/cmd/go/vet.go:37 +0x78\n> [fp=0xb6ed3fcc] runtime.main()\n> \t/d/go-test/src/pkg/runtime/proc.c:203 +0x70\n> \n> goroutine 2 [runnable]:\n> runtime.MHeap_Scavenger()\n> \t/d/go-test/src/pkg/runtime/mheap.c:438\n> runtime.goexit()\n> \t/d/go-test/src/pkg/runtime/proc.c:1262\n> created by runtime.main\n> \t/d/go-test/src/pkg/runtime/proc.c:189\n> ./make.bash: line 151: 10833 Aborted                 \"$GOTOOLDIR\"/go_bootstrap\n> clean -i std\n\n\nThanks!\n\nOK, it does not work (as expected :)), now we need to figure out how to fix it...",
			"disapproval": false,
			"date": "2013-06-03 15:54:32.939980",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"capnm9@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "NOT LGTM\n\nI don't understand what is going on here.\nWhy is the old API so bad it needs to be replaced wholesale?\n\nThe old API was carefully crafted to create an abstract interface that could be implemented on both x86 and ARM, despite the different calling conventions.\n\nIt is fine to add a context argument to runtime.gogo.\nIt sounds like maybe that's all you really need.\n\nhttps://codereview.appspot.com/9868044/diff/29009/src/pkg/runtime/asm_386.s\nFile src/pkg/runtime/asm_386.s (right):\n\nhttps://codereview.appspot.com/9868044/diff/29009/src/pkg/runtime/asm_386.s#newcode156\nsrc/pkg/runtime/asm_386.s:156: // void returnto(Gobuf*, byte*)\nSure looks like gogocall to me.\n\"returnto\" makes it sound like you are returning to something, but you're not.\nYou're restoring the Gobuf context (gogo) and then making a call.\nHence gogocall.",
			"disapproval": true,
			"date": "2013-06-03 20:33:48.974990",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"capnm9@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9868044/diff/29009/src/pkg/runtime/asm_386.s\nFile src/pkg/runtime/asm_386.s (right):\n\nhttps://codereview.appspot.com/9868044/diff/29009/src/pkg/runtime/asm_386.s#newcode156\nsrc/pkg/runtime/asm_386.s:156: // void returnto(Gobuf*, byte*)\nOn 2013/06/03 20:33:49, rsc wrote:\n> Sure looks like gogocall to me.\n> \"returnto\" makes it sound like you are returning to something, but you're not.\n> You're restoring the Gobuf context (gogo) and then making a call.\n> Hence gogocall.\n\nIt does not restore context nor make a call.",
			"disapproval": false,
			"date": "2013-06-04 10:31:00.468490",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"capnm9@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/03 20:33:48, rsc wrote:\n> NOT LGTM\n> \n> I don't understand what is going on here.\n> Why is the old API so bad it needs to be replaced wholesale?\n> \n> The old API was carefully crafted to create an abstract interface that could be\n> implemented on both x86 and ARM, despite the different calling conventions.\n> \n> It is fine to add a context argument to runtime.gogo.\n> It sounds like maybe that's all you really need.\n\nThe early prototype of preemptive scheduler contained the following code in schedule():\n\n \tif(gp->sched.pc == (byte*)runtime\u00b7goexit)  // kickoff\n \t\truntime\u00b7gogocallfn(&gp->sched, gp->fnstart);\n+\tif(gp->preempt) {\n+\t\tif(gp->preempt == 1) {\n+\t\t\tgp->preempt = 0;\n+\t\t\t// preempted w/o new stack segment creation, just need to restore DX\n+\t\t\truntime\u00b7gogo2(&gp->sched, gp->preemptcret);\n+\t\t} else {\n+\t\t\tgp->preempt = 0;\n+\t\t\t// preempted with new stack segment creation, need to restore DX and return to lessstack\n+\t\t\truntime\u00b7gogocall(&gp->sched, gp->preemptpc, gp->preemptcret);\n+\t\t}\n+\t}\n \truntime\u00b7gogo(&gp->sched, 0);\n\nThat's 4 (four!) different ways to switch to a goroutine.\nMuch more permutations of \"and return to\"/\"just switch\", \"restore AX\"/\"do not restore AX\", \"restore DX\"/\"do not restore DX\", \"use separate PC and context\"/\"use Func\" are possible in future.\nOn top of that, non-started goroutines looks different from started, so we have special cases for that in gentraceback() and addstackroots().\nOn top of that, 2 cases of preempted goroutines (with new stack segment and w/o) will require yet more special handling in gentraceback() and addstackroots().\n\nAll this stems form the non-orthogonal API. What we essentially need is: (1) arrange to return to a PC when stack segment underflows w/o switching right now (this is returnto()) and switch to a full goroutine context (PC, SP, AX and DX, this is gogo()). This allows to:\n- arrange to return to goexit() directly in newproc()\n- arrange to return to lessstack() directly in newstack()\nThis is turn allows to:\n- switch goroutines in schedule() with a single gogo() call\n- remove special handling on non-started goroutines in gentraceback() and addstackroots()\n- do not add any special handling for preempted goroutines to gentraceback() and addstackroots()\nAnd I think it's just a better orthogonal API, which provides better foundation for potential future changes.\n\nI do not get it right for ARM at first try. But the idea is to push PC onto stack in returnto(), then gogo() retrieves the PC from stack and restores it in LR. I think it should work.",
			"disapproval": false,
			"date": "2013-06-04 10:59:51.954700",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Okay, I see what you are getting at. But the naming is confusing, and the\r\nnew API isn't great either. Instead of tacking more arguments onto gogo,\r\nthat stuff really belongs in the Gobuf, which represents the paused\r\ngoroutine's state. What you're calling returnto is really the beginning of\r\na call. I understand how you got to \"return\" but that's not really what it\r\ndoes: it's gogocall not gogoreturn. A better name would be gostartcall, so\r\nthat the current gogocall = gostartcall + gogo. And if we do this, the\r\nwhole concept of an unstarted goroutine should be removed completely.\r\n\r\nCan you try something like CL 10036044 instead? It mostly works but some\r\ntests fail due to garbage collection problems that I don't understand.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-06-05 14:39:08.873580",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jun 5, 2013 at 6:39 PM, Russ Cox <rsc@golang.org> wrote:\r\n> Okay, I see what you are getting at. But the naming is confusing, and the\r\n> new API isn't great either. Instead of tacking more arguments onto gogo,\r\n> that stuff really belongs in the Gobuf\r\n\r\nAgree.\r\n\r\n\r\n> , which represents the paused\r\n> goroutine's state. What you're calling returnto is really the beginning of a\r\n> call. I understand how you got to \"return\" but that's not really what it\r\n> does: it's gogocall not gogoreturn. A better name would be gostartcall, so\r\n> that the current gogocall = gostartcall + gogo. And if we do this, the whole\r\n> concept of an unstarted goroutine should be removed completely.\r\n\r\nAgree.\r\n\r\n> Can you try something like CL 10036044 instead? It mostly works but some\r\n> tests fail due to garbage collection problems that I don't understand.\r\n\r\nI will look into making your CL work.\r\n\r\n1547 newg->sched.pc = (byte*)runtime\u00b7goexit;\r\n1552 newg->sched.g = newg; 1548 newg->sched.g = newg;\r\n1553 \u00bb newg->fnstart = fn; 1549 \u00bb runtime\u00b7gostartcallfn(&newg->sched, fn);\r\n",
			"disapproval": false,
			"date": "2013-06-05 14:56:36.009310",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for taking the time to explain the motivation.\r\n\r\nI enjoyed reading it.\r\n\r\n  Anthony\r\n",
			"disapproval": false,
			"date": "2013-06-06 21:33:03.992760",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jun 5, 2013 at 6:56 PM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n> On Wed, Jun 5, 2013 at 6:39 PM, Russ Cox <rsc@golang.org> wrote:\r\n>> Okay, I see what you are getting at. But the naming is confusing, and the\r\n>> new API isn't great either. Instead of tacking more arguments onto gogo,\r\n>> that stuff really belongs in the Gobuf\r\n>\r\n> Agree.\r\n>\r\n>\r\n>> , which represents the paused\r\n>> goroutine's state. What you're calling returnto is really the beginning of a\r\n>> call. I understand how you got to \"return\" but that's not really what it\r\n>> does: it's gogocall not gogoreturn. A better name would be gostartcall, so\r\n>> that the current gogocall = gostartcall + gogo. And if we do this, the whole\r\n>> concept of an unstarted goroutine should be removed completely.\r\n>\r\n> Agree.\r\n>\r\n>> Can you try something like CL 10036044 instead? It mostly works but some\r\n>> tests fail due to garbage collection problems that I don't understand.\r\n>\r\n> I will look into making your CL work.\r\n\r\nShouldn't it be the other way around? Start call to goexit, then switch to fn?\r\n\r\n1547 newg->sched.pc = (byte*)runtime\u00b7goexit;\r\n1548 newg->sched.g = newg;\r\n1549 \u00bb runtime\u00b7gostartcallfn(&newg->sched, fn);\r\n\r\nThis can have problems with GC, because it does not understand\r\nnon-started functions yet. For the non-started goroutine fn has not\r\nyet decremented SP to form stack frame, but the GC assumes it does.\r\n",
			"disapproval": false,
			"date": "2013-06-05 15:00:13.153400",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jun 5, 2013 at 7:09 PM, Russ Cox <rsc@golang.org> wrote:\r\n> On Wed, Jun 5, 2013 at 11:00 AM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n>>\r\n>> On Wed, Jun 5, 2013 at 6:56 PM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n>> > On Wed, Jun 5, 2013 at 6:39 PM, Russ Cox <rsc@golang.org> wrote:\r\n>> >> Okay, I see what you are getting at. But the naming is confusing, and\r\n>> >> the\r\n>> >> new API isn't great either. Instead of tacking more arguments onto\r\n>> >> gogo,\r\n>> >> that stuff really belongs in the Gobuf\r\n>> >\r\n>> > Agree.\r\n>> >\r\n>> >\r\n>> >> , which represents the paused\r\n>> >> goroutine's state. What you're calling returnto is really the beginning\r\n>> >> of a\r\n>> >> call. I understand how you got to \"return\" but that's not really what\r\n>> >> it\r\n>> >> does: it's gogocall not gogoreturn. A better name would be gostartcall,\r\n>> >> so\r\n>> >> that the current gogocall = gostartcall + gogo. And if we do this, the\r\n>> >> whole\r\n>> >> concept of an unstarted goroutine should be removed completely.\r\n>> >\r\n>> > Agree.\r\n>> >\r\n>> >> Can you try something like CL 10036044 instead? It mostly works but\r\n>> >> some\r\n>> >> tests fail due to garbage collection problems that I don't understand.\r\n>> >\r\n>> > I will look into making your CL work.\r\n>>\r\n>> Shouldn't it be the other way around? Start call to goexit, then switch to\r\n>> fn?\r\n>\r\n>\r\n> Maybe it's the other way around in your CL (I didn't look closely), but the\r\n> way I would like to approach this is to think of\r\n>\r\n>>\r\n>> 1547 newg->sched.pc = (byte*)runtime\u00b7goexit;\r\n>> 1548 newg->sched.g = newg;\r\n>\r\n>\r\n> as creating a goroutine that is about to run goexit.\r\n>\r\n>>\r\n>> 1549 \u00bb runtime\u00b7gostartcallfn(&newg->sched, fn);\r\n>\r\n>\r\n> And then this pushes a call to fn ahead of whatever the goroutine was going\r\n> to do. So the net result is that the goroutine calls fn, and then when fn\r\n> returns, the goroutine calls goexit.\r\n\r\nOK\r\n\r\n\r\n>> This can have problems with GC, because it does not understand\r\n>> non-started functions yet. For the non-started goroutine fn has not\r\n>> yet decremented SP to form stack frame, but the GC assumes it does.\r\n>\r\n>\r\n> The stack walker that we had before all the new GC work understood that if\r\n> pc == f->entry then there are no locals, only arguments. I attempted to add\r\n> that to addframeroots (see the CL), but it is possible other fixes are\r\n> needed elsewhere.\r\n\r\nI will try to debug it.\r\n",
			"disapproval": false,
			"date": "2013-06-05 15:14:20.785540",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I looked at this CL again after your question about setup being the other\r\nway around, and now I understand the code and why it's called returnto.\r\nWith that understanding, I wanted to explain a little more why I prefer my\r\nproposal.\r\n\r\nIn general, context switching APIs are not easy to design, but I've learned\r\na few lessons from others' mistakes and my own.\r\n\r\nIn early versions of Unix, the context switch switched the stack pointer\r\nbut not the program counter! Flipping just the stack pointer was completely\r\nmanageable to program against in hand-written assembly, where that kind of\r\nthing is not uncommon. When C came along, however, things did not go a\r\nsmoothly. After a context restore inside a C function you had the program\r\ncounter of the function that invoked the context restore running in the\r\nstack frame of the function that invoked the context save. If the old pc\r\nwas expecting to find any local variables on the stack after the call, it\r\nwouldn't. Worse, each C function epilogue adjusts the stack pointer upward\r\nto remove the frame allocated in the prologue. For the one function's\r\nepilogue to execute a correct return from the other function's stack frame,\r\nthe two functions must have stack frames of equal size. Add a local\r\nvariable to one or the other and the kernel stops working, because the\r\ncontext switch restore created a state expected by assembly programs but\r\nunexpected in C programs. In essence, the context switch API had latent\r\nassembly assumptions and broke when it had to be \"ported\" to work with C.\r\nThis mess is what prompted the famous \"you are not expected to understand\r\nthis\" comment (see swtch.com/unix for a scan). The lesson I learned from\r\ntaking the time to understand this is that context switching functions\r\nshould work with a description of an actual snapshot of the CPU. Save and\r\nrestore both the stack pointer and the program counter and any other live\r\nregisters, all together. In the Go runtime, gosave copies the current CPU's\r\nexecution state into the Gobuf, and gogo does the reverse.\r\n\r\nWhen we started doing Go on ARM, we ran into places where the code had\r\nlatent x86 assumpsions, and we had to design more portable APIs to remove\r\nthose assumptions. After trying a handful of things that didn't work, we\r\nrealized that the APIs that did work were the ones that could be explained\r\nin terms of hardware instructions. In retrospect, this is obvious: if the\r\ncontexts are valid CPU snapshots, the operations on them have to use valid\r\nCPU snapshots as input and output, and that's what hardware instructions\r\ndo. So gogocall is a gogo (context restore) followed by the simulation of\r\none call instruction before letting the CPU run with the context.\r\n\r\nIf these routines need to be refactored, then the suggestion in my CL is to\r\nhave an operation gostartcall that follows these two rules. First, it takes\r\nas input a valid CPU snapshot (a Gobuf describing, in practice, the\r\nbeginning of an execution of lessstack or goexit) and adjusts it to return\r\nanother valid CPU snapshot. Second, it can be explained in terms of\r\nhardware instructions: it executes a single call instruction in that Gobuf\r\ncontext and saves the resulting context back into the Gobuf.\r\n\r\nIn contrast, the returnto API does not follow either of these rules. The\r\nGobuf passed into returnto is not a working CPU snapshot: on the x86, the\r\ninput stack pointer and program counter do not correspond. And because the\r\ninput is not a well-formed execution context, returnto cannot be described\r\nin terms of CPU execution. It is certainly possible to build a working\r\nsystem using this primitive, as I'm sure you have, but because it breaks\r\nthe rules, I worry that it will turn out to be fragile for some unexpected\r\nreason later. That's why I prefer gostartcall.\r\n\r\nThanks.\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-06-05 18:05:24.773680",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jun 5, 2013 at 10:05 PM, Russ Cox <rsc@golang.org> wrote:\r\n> I looked at this CL again after your question about setup being the other\r\n> way around, and now I understand the code and why it's called returnto. With\r\n> that understanding, I wanted to explain a little more why I prefer my\r\n> proposal.\r\n>\r\n> In general, context switching APIs are not easy to design, but I've learned\r\n> a few lessons from others' mistakes and my own.\r\n>\r\n> In early versions of Unix, the context switch switched the stack pointer but\r\n> not the program counter! Flipping just the stack pointer was completely\r\n> manageable to program against in hand-written assembly, where that kind of\r\n> thing is not uncommon. When C came along, however, things did not go a\r\n> smoothly. After a context restore inside a C function you had the program\r\n> counter of the function that invoked the context restore running in the\r\n> stack frame of the function that invoked the context save. If the old pc was\r\n> expecting to find any local variables on the stack after the call, it\r\n> wouldn't. Worse, each C function epilogue adjusts the stack pointer upward\r\n> to remove the frame allocated in the prologue. For the one function's\r\n> epilogue to execute a correct return from the other function's stack frame,\r\n> the two functions must have stack frames of equal size. Add a local variable\r\n> to one or the other and the kernel stops working, because the context switch\r\n> restore created a state expected by assembly programs but unexpected in C\r\n> programs. In essence, the context switch API had latent assembly assumptions\r\n> and broke when it had to be \"ported\" to work with C. This mess is what\r\n> prompted the famous \"you are not expected to understand this\" comment (see\r\n> swtch.com/unix for a scan). The lesson I learned from taking the time to\r\n> understand this is that context switching functions should work with a\r\n> description of an actual snapshot of the CPU. Save and restore both the\r\n> stack pointer and the program counter and any other live registers, all\r\n> together. In the Go runtime, gosave copies the current CPU's execution state\r\n> into the Gobuf, and gogo does the reverse.\r\n>\r\n> When we started doing Go on ARM, we ran into places where the code had\r\n> latent x86 assumpsions, and we had to design more portable APIs to remove\r\n> those assumptions. After trying a handful of things that didn't work, we\r\n> realized that the APIs that did work were the ones that could be explained\r\n> in terms of hardware instructions. In retrospect, this is obvious: if the\r\n> contexts are valid CPU snapshots, the operations on them have to use valid\r\n> CPU snapshots as input and output, and that's what hardware instructions do.\r\n> So gogocall is a gogo (context restore) followed by the simulation of one\r\n> call instruction before letting the CPU run with the context.\r\n>\r\n> If these routines need to be refactored, then the suggestion in my CL is to\r\n> have an operation gostartcall that follows these two rules. First, it takes\r\n> as input a valid CPU snapshot (a Gobuf describing, in practice, the\r\n> beginning of an execution of lessstack or goexit) and adjusts it to return\r\n> another valid CPU snapshot. Second, it can be explained in terms of hardware\r\n> instructions: it executes a single call instruction in that Gobuf context\r\n> and saves the resulting context back into the Gobuf.\r\n>\r\n> In contrast, the returnto API does not follow either of these rules. The\r\n> Gobuf passed into returnto is not a working CPU snapshot: on the x86, the\r\n> input stack pointer and program counter do not correspond. And because the\r\n> input is not a well-formed execution context, returnto cannot be described\r\n> in terms of CPU execution. It is certainly possible to build a working\r\n> system using this primitive, as I'm sure you have, but because it breaks the\r\n> rules, I worry that it will turn out to be fragile for some unexpected\r\n> reason later. That's why I prefer gostartcall.\r\n\r\n\r\nThanks for this insight! Now your API makes perfect sense.\r\n\r\nMy version does not have a deep idea behind, I just wanted to split\r\nthe startcall/returnto part from the actual switch (gogo).\r\n\r\nWith the small fix that I described in the CL, your version passes\r\nall.bash. So please send it for review.\r\n",
			"disapproval": false,
			"date": "2013-06-06 16:03:19.999780",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"capnm9@gmail.com",
				"rsc@golang.org",
				"ality@pbrane.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-06-14 14:23:22.010460",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 9868044: runtime: refactor gogo",
	"created": "2013-05-30 11:34:46.299940",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		11001,
		16001,
		19001,
		26001,
		28001,
		29009
	],
	"modified": "2013-06-14 14:23:23.813400",
	"closed": true,
	"issue": 9868044
}