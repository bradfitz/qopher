{
	"description": "fmt: enable and fix malloc test\nOn 32-bit machines, %g takes an extra malloc. I don't know why yet,\nbut this makes the test pass again, and enables it even for -short.\n\nFixes issue 2653.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"r@google.com"
	],
	"reviewers": [
		"dave@cheney.net"
	],
	"messages": [
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Jan 17, 2012, at 10:43 AM, Brad Fitzpatrick wrote:\n\n> LGTM\n> \n> Add a TODO on that test line or file a bug about the 2-vs-1 on 32-bit, so it's not forgotten?\n\ni already created an issue, but sure.\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2012-01-17 18:44:31.714929",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-01-17 18:37:53.343997",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nAdd a TODO on that test line or file a bug about the 2-vs-1 on 32-bit, so\nit's not forgotten?\n\n\nOn Tue, Jan 17, 2012 at 10:37 AM, <r@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://code.google.com/p/go\n>\n>\n> Description:\n> fmt: enable and fix malloc test\n> On 32-bit machines, %g takes an extra malloc. I don't know why yet,\n> but this makes the test pass again, and enables it even for -short.\n>\n> Fixes issue 2653.\n>\n> Please review this at http://codereview.appspot.com/**5542055/<http://codereview.appspot.com/5542055/>\n>\n> Affected files:\n>  M src/pkg/fmt/fmt_test.go\n>\n>\n> Index: src/pkg/fmt/fmt_test.go\n> ==============================**==============================**=======\n> --- a/src/pkg/fmt/fmt_test.go\n> +++ b/src/pkg/fmt/fmt_test.go\n> @@ -509,16 +509,16 @@\n>  var mallocBuf bytes.Buffer\n>\n>  var mallocTest = []struct {\n> -       count int\n> -       desc  string\n> -       fn    func()\n> +       max  int\n> +       desc string\n> +       fn   func()\n>  }{\n>        {0, `Sprintf(\"\")`, func() { Sprintf(\"\") }},\n>        {1, `Sprintf(\"xxx\")`, func() { Sprintf(\"xxx\") }},\n>        {1, `Sprintf(\"%x\")`, func() { Sprintf(\"%x\", 7) }},\n>        {2, `Sprintf(\"%s\")`, func() { Sprintf(\"%s\", \"hello\") }},\n>        {1, `Sprintf(\"%x %x\")`, func() { Sprintf(\"%x %x\", 7, 112) }},\n> -       {1, `Sprintf(\"%g\")`, func() { Sprintf(\"%g\", 3.14159) }},\n> +       {2, `Sprintf(\"%g\")`, func() { Sprintf(\"%g\", 3.14159) }},\n>        {0, `Fprintf(buf, \"%x %x %x\")`, func() { mallocBuf.Reset();\n> Fprintf(&mallocBuf, \"%x %x %x\", 7, 8, 9) }},\n>        {1, `Fprintf(buf, \"%s\")`, func() { mallocBuf.Reset();\n> Fprintf(&mallocBuf, \"%s\", \"hello\") }},\n>  }\n> @@ -526,9 +526,6 @@\n>  var _ bytes.Buffer\n>\n>  func TestCountMallocs(t *testing.T) {\n> -       if testing.Short() {\n> -               return\n> -       }\n>        for _, mt := range mallocTest {\n>                const N = 100\n>                runtime.UpdateMemStats()\n> @@ -538,8 +535,8 @@\n>                }\n>                runtime.UpdateMemStats()\n>                mallocs += runtime.MemStats.Mallocs\n> -               if mallocs/N != uint64(mt.count) {\n> -                       t.Errorf(\"%s: expected %d mallocs, got %d\",\n> mt.desc, mt.count, mallocs/N)\n> +               if mallocs/N > uint64(mt.max) {\n> +                       t.Errorf(\"%s: expected at most %d mallocs, got\n> %d\", mt.desc, mt.max, mallocs/N)\n>                }\n>        }\n>  }\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-01-17 18:43:30.959936",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks Rob. \n\n\nOn 18/01/2012, at 5:44, Rob 'Commander' Pike <r@google.com> wrote:\n\n> \n> On Jan 17, 2012, at 10:43 AM, Brad Fitzpatrick wrote:\n> \n>> LGTM\n>> \n>> Add a TODO on that test line or file a bug about the 2-vs-1 on 32-bit, so it's not forgotten?\n> \n> i already created an issue, but sure.\n> \n> -rob\n> \n> \n",
			"disapproval": false,
			"date": "2012-01-17 19:41:01.745943",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"r@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as 7e995741e6cb ***\n\nfmt: enable and fix malloc test\nOn 32-bit machines, %g takes an extra malloc. I don't know why yet,\nbut this makes the test pass again, and enables it even for -short.\n\nFixes issue 2653.\n\nR=golang-dev, bradfitz, r\nCC=golang-dev\nhttp://codereview.appspot.com/5542055",
			"disapproval": false,
			"date": "2012-01-17 18:45:38.349282",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5542055: fmt: enable and fix malloc test",
	"created": "2012-01-17 18:37:50.140757",
	"patchsets": [
		1,
		4001
	],
	"modified": "2012-01-17 19:41:01.855789",
	"closed": true,
	"issue": 5542055
}