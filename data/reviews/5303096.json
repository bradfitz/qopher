{
	"description": "websocket: manage subprotocol negotiation in the websocket hybi specification\n\nThe Hybi-17 websocket specification allows subprotocol negotiation between\nclient and server (e.g. the \"chat\" or \"superchat\" subprotocols).\nThis change adds a mechanism for server-side choice of a\nsubprotocol from a set offered by a client. A \"simple chooser\" can\nselect from a list of subprotocols or a custom chooser can be used.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"adg@golang.org",
		"ukai@google.com"
	],
	"messages": [
		{
			"sender": "jan.newmarch@gmail.com",
			"recipients": [
				"jan.newmarch@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-03 08:18:58.172864",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"jan.newmarch@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Why would a user of websocket want to do this?",
			"disapproval": false,
			"date": "2011-11-03 23:15:05.806526",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Also looping in Ukai who knows this stuff.\n",
			"disapproval": false,
			"date": "2011-11-03 23:16:10.389793",
			"approval": false
		},
		{
			"sender": "jan.newmarch@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "It's part of the current websocket spec that isn't implemented. The\nidea is that there may be several possible subprotocols that could be\nused between a websocket client and server, and this allows a\nnegotiation mechanism beween them. The examples in the spec are a\n\"chat\" and a \"superchat\" protocol. I have made an example where the\ndata format may be negotiated between JSON and XML.\n\nIt's been discussed on golang-nuts under \"How can a server negotiate a\nsubprotocol in the new websocket package?\". Kyle Lemons was the only\ncommentator there.\n\nOn Fri, Nov 4, 2011 at 10:15 AM,  <adg@golang.org> wrote:\n> Why would a user of websocket want to do this?\n>\n> http://codereview.appspot.com/5303096/\n>\n",
			"disapproval": false,
			"date": "2011-11-04 03:56:58.577375",
			"approval": false
		},
		{
			"sender": "jan.newmarch@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "That's okay. I'll keep the code lying around and it can go in if a\nstrong enough use case comes up.\n\nOn Fri, Nov 4, 2011 at 3:07 PM, Andrew Gerrand <adg@golang.org> wrote:\n> On 4 November 2011 14:56, Jan Newmarch <jan.newmarch@gmail.com> wrote:\n>> It's part of the current websocket spec that isn't implemented. The\n>> idea is that there may be several possible subprotocols that could be\n>> used between a websocket client and server, and this allows a\n>> negotiation mechanism beween them. The examples in the spec are a\n>> \"chat\" and a \"superchat\" protocol. I have made an example where the\n>> data format may be negotiated between JSON and XML.\n>>\n>> It's been discussed on golang-nuts under \"How can a server negotiate a\n>> subprotocol in the new websocket package?\". Kyle Lemons was the only\n>> commentator there.\n>\n> Thanks for the background.\n>\n> It's too early to say how important subprotocols will be and what their\n> best practices are, so I'm hesitant to include this. It complicates\n> what is already a fairly complicated interface.\n>\n> I'd rather wait until someone has a concrete use for subprotocol\n> selection before implementing this. It's a challenging but fruitless\n> game to play catch-up with a spec that changes so frequently.\n>\n> Does that sound okay to you?\n>\n> Andrew\n>\n",
			"disapproval": false,
			"date": "2011-11-04 04:15:31.329740",
			"approval": false
		},
		{
			"sender": "ukai@google.com",
			"recipients": [
				"jan.newmarch@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"ukai@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5303096/diff/5001/src/pkg/websocket/server.go\nFile src/pkg/websocket/server.go (right):\n\nhttp://codereview.appspot.com/5303096/diff/5001/src/pkg/websocket/server.go#newcode42\nsrc/pkg/websocket/server.go:42: \ncall protocolChooser here, and get rid of protocolChooser from ReadHandshake?\n\nconfig.Protocol, err := protocolChooser(c.Protocol)\nif err != nil {\n      ...\n}\n\nOr, it might be better to check websocket.Config is acceptable, so that server implementation could check origin, extensions or others.",
			"disapproval": false,
			"date": "2011-11-04 04:04:49.514134",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 4 November 2011 14:56, Jan Newmarch <jan.newmarch@gmail.com> wrote:\n> It's part of the current websocket spec that isn't implemented. The\n> idea is that there may be several possible subprotocols that could be\n> used between a websocket client and server, and this allows a\n> negotiation mechanism beween them. The examples in the spec are a\n> \"chat\" and a \"superchat\" protocol. I have made an example where the\n> data format may be negotiated between JSON and XML.\n>\n> It's been discussed on golang-nuts under \"How can a server negotiate a\n> subprotocol in the new websocket package?\". Kyle Lemons was the only\n> commentator there.\n\nThanks for the background.\n\nIt's too early to say how important subprotocols will be and what their\nbest practices are, so I'm hesitant to include this. It complicates\nwhat is already a fairly complicated interface.\n\nI'd rather wait until someone has a concrete use for subprotocol\nselection before implementing this. It's a challenging but fruitless\ngame to play catch-up with a spec that changes so frequently.\n\nDoes that sound okay to you?\n\nAndrew\n",
			"disapproval": false,
			"date": "2011-11-04 04:08:03.442373",
			"approval": false
		}
	],
	"owner_email": "jan.newmarch@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "jan.newmarch",
	"subject": "code review 5303096: websocket: manage subprotocol negotiation in the websoc...",
	"created": "2011-11-03 08:16:23.489490",
	"patchsets": [
		1,
		2001,
		5001
	],
	"modified": "2011-11-04 04:08:03.442373",
	"closed": false,
	"issue": 5303096
}