{
	"description": "time: panic if UnixNano is out of range",
	"cc": [
		"golang-dev@googlegroups.com",
		"remyoudompheng@gmail.com",
		"dsymonds@golang.org",
		"gustavo@niemeyer.net",
		"dchest@gmail.com",
		"r@golang.org",
		"rsc@golang.org"
	],
	"reviewers": [
		"cw@f00f.org"
	],
	"messages": [
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5985059/diff/4/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5985059/diff/4/src/pkg/time/time.go#newcode775\nsrc/pkg/time/time.go:775: if t.sec > maxUnixNano || t.sec < minUnixNano {\nOn 2012/04/07 18:30:23, remyoudompheng wrote:\n> isn't it t.sec + internalToUnix that you want to test?\n> What if the result is 1<<63 + 1 nanoseconds?\n\nSorry, I had already realized it was actually wrong, but hadn't updated it. I had updated the constants instead, although what you suggest would work too.",
			"disapproval": false,
			"date": "2012-04-07 18:33:29.537668",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Apr 9, 2012 at 18:12,  <n13m3y3r@gmail.com> wrote:\n> Please take another look.\n> http://codereview.appspot.com/5985059/\n\nI hope this makes sense now.. phew.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-04-09 21:16:49.405175",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5985059/diff/4/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5985059/diff/4/src/pkg/time/time.go#newcode775\nsrc/pkg/time/time.go:775: if t.sec > maxUnixNano || t.sec < minUnixNano {\nisn't it t.sec + internalToUnix that you want to test?\nWhat if the result is 1<<63 + 1 nanoseconds?",
			"disapproval": false,
			"date": "2012-04-07 18:30:23.649633",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, remyoudompheng@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-04-07 18:31:59.413815",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am unconvinced that is worth worrying about.\nI would document that if the result does not fit in an\nint64 then the returned value is undefined and call it a day.\n\nIf we must do something, then detecting the overflow\nand clamping the result should be easy:\n\nsecs := t.sec + internalToUnix\nnsec := secs * 1e9\nif nsec/1e9 != secs || nsec+t.nsec < nsec {\n    if t.sec > 0 {\n        return 1<<63 - 1\n    }\n    return -1<<63\n}\nreturn nsec+t.nsec\n\nThis works because 0 <= t.nsec < 1e9.\n\nNote that even this doesn't handle the case where you've\nconstructed a date so far in the future where t.sec + internalToUnix\noverflows.  I really don't think this is worth worrying about in such\ndetail.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-04-09 21:44:13.186965",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Apr 8, 2012 at 9:34 AM, Gustavo Niemeyer <gustavo@niemeyer.net> wrote:\n\n>> Even besides whether it should panic, this seems like an API change.\n>\n> It's already a bug to use that value today.\n\nYes, but people still depend on bugs behaving in a certain way. Right\nnow, they get a weird number that may or may not be a problem for\ntheir particular situation; after this change, their program panics.\n",
			"disapproval": false,
			"date": "2012-04-07 23:39:11.138508",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"dsymonds@golang.org",
				"gustavo@niemeyer.net",
				"dchest@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5985059/diff/5/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5985059/diff/5/src/pkg/time/time.go#newcode775\nsrc/pkg/time/time.go:775: if t.sec > maxUnixNano || t.sec < minUnixNano {\nOn 2012/04/09 06:00:28, r wrote:\n> also range tests like this read better in this style, with the variable outside\n> the \"range\" represented by the constants.\n\nSorry, reordered the comparison now as well.",
			"disapproval": false,
			"date": "2012-04-09 14:44:11.113717",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Apr 9, 2012 at 15:00, Russ Cox <rsc@golang.org> wrote:\n> I am not sure that I'm comfortable with something this low-level panicking.\n> I think I would rather just clamp the result or even just define that it is\n> undefined outside the useful range.\n>\n> I am also not sure that the test is correct. \u00a0It is checking whether the\n> seconds can be represented as nanoseconds, but it does not check\n> whether adding nsec then causes an overflow.\n\nYou're right.. the logic I implemented would only work if the defined\nrange for nsec was binary rather than decimal. Clearly I suck.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-04-09 18:16:19.376452",
			"approval": false
		},
		{
			"sender": "dchest@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"dsymonds@golang.org",
				"gustavo@niemeyer.net",
				"dchest@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/04/08 21:55:48, gustavo_niemeyer.net wrote:\n> On Sun, Apr 8, 2012 at 17:42,  <mailto:dchest@gmail.com> wrote:\n> > time.Unix() is documented to allow out-of-range nanoseconds:\n> >\n> > &nbsp; &nbsp;It is valid to pass nsec outside the range [0, 999999999].\n> >\n> > Considering this, I think the right thing to do is document the possible\n> > overflow in UnixNano() instead of panicking.\n> \n> These two facts are unrelated. time.Unix handles *correctly* out of\n> range nanoseconds.\n\nYou're right, I'm withdrawing this argument.\n \n> To be honest, though, if I'm the odd one that thinks this is a trap,\n> then it should probably remain unchanged indeed. I for one am not\n> falling on it again.\n\nIf so, the fact that UnixNano can't handle some dates should be documented, though. Right now it's a trap in which I, coincidentally, fell today. For my program, the wrong date would be okay, but panicking in the next release of Go 1 would be bad. However, if someone is writing a time machine in Go, the fact the it will send her into year 1754 instead of 1 would be catastrophic, so panicking here is better.",
			"disapproval": false,
			"date": "2012-04-08 23:55:55.006183",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"dsymonds@golang.org",
				"gustavo@niemeyer.net",
				"dchest@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5985059/diff/5/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5985059/diff/5/src/pkg/time/time.go#newcode775\nsrc/pkg/time/time.go:775: if t.sec > maxUnixNano || t.sec < minUnixNano {\ni don't believe this is correct. the > should be >=. a test would verify.\n\nalso range tests like this read better in this style, with the variable outside the \"range\" represented by the constants.\n\nt.sec < minUnixNano || maxUnixNano <= t.sec\n\nthis is not to pass judgement on having this panic. i'm thinking about that.",
			"disapproval": false,
			"date": "2012-04-09 06:00:28.702940",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Le 9 avril 2012 21:12, Gustavo Niemeyer <gustavo@niemeyer.net> a \u00e9crit :\n> On Mon, Apr 9, 2012 at 15:15, Gustavo Niemeyer <gustavo@niemeyer.net> wrote:\n>> You're right.. the logic I implemented would only work if the defined\n>> range for nsec was binary rather than decimal. Clearly I suck.\n>\n> Rather than going through the trouble of increasing the complexity of\n> the overflow check by putting the nsec value in business, I went with\n> a trivial approach of sign comparison. I think that's feasible given\n> the guarantees of the spec, but I wouldn't bet on it at this point\n> anymore.\n\nt, _ := time.Parse(\"20060102\", \"11060928\")\nfmt.Println(t.Unix())\nfmt.Println(t.UnixNano())\n\nIt will not detect this overflow, neither in year 2555 or so.\n",
			"disapproval": false,
			"date": "2012-04-09 19:25:53.764527",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"dsymonds@golang.org",
				"gustavo@niemeyer.net",
				"dchest@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, remyoudompheng@gmail.com, dsymonds@golang.org, gustavo@niemeyer.net, dchest@gmail.com, r@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-09 21:12:50.815550",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Apr 9, 2012 at 19:21, Russ Cox <rsc@golang.org> wrote:\n> I don't understand. \u00a0My code, translated to use your variables,\n> is testing a/1e9 == n, not a == a/1e9.\n\nSorry, I had missed the underlying reasoning, unsurprisingly. It's a\nvery nice approach, thanks for shedding some light.\n\nI've updated the CL so it only changes the documentation.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-04-09 23:49:40.846644",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Apr 7, 2012 at 20:20, David Symonds <dsymonds@golang.org> wrote:\n> Ouch. This seems a bit harsh. Why not just let it overflow?\n\nCan you find some reason why such a result would be useful rather than\nbeing a silly user error that silently results in a garbage timestamp\nand thus ought to be fixed?\n\n> Even besides whether it should panic, this seems like an API change.\n\nIt's already a bug to use that value today.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-04-07 23:34:32.871212",
			"approval": false
		},
		{
			"sender": "dchest@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"dsymonds@golang.org",
				"gustavo@niemeyer.net",
				"dchest@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/04/08 00:05:03, gustavo_niemeyer.net wrote:\n> Silently allowing that kind of garbage to go through is worth a panic, IMO.\n\ntime.Unix() is documented to allow out-of-range nanoseconds:\n\n    It is valid to pass nsec outside the range [0, 999999999].\n\nConsidering this, I think the right thing to do is document the possible overflow in UnixNano() instead of panicking.",
			"disapproval": false,
			"date": "2012-04-08 20:42:39.544084",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Apr 8, 2012 at 17:42,  <dchest@gmail.com> wrote:\n> time.Unix() is documented to allow out-of-range nanoseconds:\n>\n> \u00a0 \u00a0It is valid to pass nsec outside the range [0, 999999999].\n>\n> Considering this, I think the right thing to do is document the possible\n> overflow in UnixNano() instead of panicking.\n\nThese two facts are unrelated. time.Unix handles *correctly* out of\nrange nanoseconds.\n\nTo be honest, though, if I'm the odd one that thinks this is a trap,\nthen it should probably remain unchanged indeed. I for one am not\nfalling on it again.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-04-08 21:55:48.601279",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Apr 9, 2012 at 15:15, Gustavo Niemeyer <gustavo@niemeyer.net> wrote:\n> You're right.. the logic I implemented would only work if the defined\n> range for nsec was binary rather than decimal. Clearly I suck.\n\nRather than going through the trouble of increasing the complexity of\nthe overflow check by putting the nsec value in business, I went with\na trivial approach of sign comparison. I think that's feasible given\nthe guarantees of the spec, but I wouldn't bet on it at this point\nanymore.\n\nEven if that's going to the trash, can you please have a look so I\nhave a chance at getting back at least a low percentage of my lost\nself esteem?\n\nThanks,\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-04-09 19:12:41.269349",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"dsymonds@golang.org",
				"gustavo@niemeyer.net",
				"dchest@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5985059/diff/5010/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5985059/diff/5010/src/pkg/time/time.go#newcode785\nsrc/pkg/time/time.go:785: }\nOn 2012/04/09 21:19:06, r wrote:\n> I suggest either clamping the value or maybe providing a predefined\n> constant time for the error case. Document it too.\n\nThe most problematic case that will show up every once in a while in normal applications is the zero value being used as an \"unset\" flag. Either of those options will continue mishandling that. That said, I can move on with either of those to at least improve the current behavior, if you wish. Please pick one and I'll move on with it.\n\n> If you want a panic, it might be better to create a second function that\n> panics.\n\nI don't actually want a panicking function. My intention was to prevent people from doing silly mistakes with the API offered. If we were not past the Go 1 point, I'd suggest either adding an additional error result, or simply deprecating the function completely to avoid having an API that works in part of the supported range only. It's too late, though.",
			"disapproval": false,
			"date": "2012-04-09 21:36:04.928445",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ouch. This seems a bit harsh. Why not just let it overflow?\n\nEven besides whether it should panic, this seems like an API change.\n",
			"disapproval": false,
			"date": "2012-04-07 23:20:49.009931",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Apr 7, 2012 at 20:39, David Symonds <dsymonds@golang.org> wrote:\n> On Sun, Apr 8, 2012 at 9:34 AM, Gustavo Niemeyer <gustavo@niemeyer.net> wrote:\n>\n>>> Even besides whether it should panic, this seems like an API change.\n>>\n>> It's already a bug to use that value today.\n>\n> Yes, but people still depend on bugs behaving in a certain way. Right\n> now, they get a weird number that may or may not be a problem for\n> their particular situation; after this change, their program panics.\n\nI'm part of that \"people\" set you talk about, I had such a bug in my\ncode, and I'm sad to find it with a bug report rather than with Go\ntelling me about it.\n\nTrivia: guess what this date means:\n\n    1754-08-30 22:43:41.128654848 +0000 UTC\n\nSilently allowing that kind of garbage to go through is worth a panic, IMO.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-04-08 00:05:03.681344",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am not sure that I'm comfortable with something this low-level panicking.\nI think I would rather just clamp the result or even just define that it is\nundefined outside the useful range.\n\nI am also not sure that the test is correct.  It is checking whether the\nseconds can be represented as nanoseconds, but it does not check\nwhether adding nsec then causes an overflow.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-04-09 18:00:42.427988",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Apr 9, 2012 at 16:25, R\u00e9my Oudompheng <remyoudompheng@gmail.com> wrote:\n> t, _ := time.Parse(\"20060102\", \"11060928\")\n> fmt.Println(t.Unix())\n> fmt.Println(t.UnixNano())\n>\n> It will not detect this overflow, neither in year 2555 or so.\n\nGosh.. I'll be hiding under a rock studying overflows if someone needs me.\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-04-09 19:43:52.947674",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-04-07 17:52:03.922118",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"dsymonds@golang.org",
				"gustavo@niemeyer.net",
				"dchest@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5985059/diff/5010/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5985059/diff/5010/src/pkg/time/time.go#newcode785\nsrc/pkg/time/time.go:785: }\nI suggest either clamping the value or maybe providing a predefined constant time for the error case. Document it too.\n\nIf you want a panic, it might be better to create a second function that panics.",
			"disapproval": false,
			"date": "2012-04-09 21:19:06.172985",
			"approval": false
		},
		{
			"sender": "gustavo@niemeyer.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Apr 9, 2012 at 18:44, Russ Cox <rsc@golang.org> wrote:\n> I am unconvinced that is worth worrying about.\n> I would document that if the result does not fit in an\n> int64 then the returned value is undefined and call it a day.\n\nGiven the range we live under at the moment, I agree it is almost\nirrelevant. The main practical problem for non-historians comes out of\nthe zero value, though, which is used frequently and falls out of the\nrange. Serializing it as a UnixNano doesn't sound like a stretch.\n\n> If we must do something, then detecting the overflow\n> and clamping the result should be easy:\n>\n> secs := t.sec + internalToUnix\n> nsec := secs * 1e9\n> if nsec/1e9 != secs || nsec+t.nsec < nsec {\n\nn := int64(math.MaxInt64/2 + 1)\na := n*1e9\nb := a/1e9\nprintln(a == b)\n\nShall we have a beer tonight?\n\n-- \nGustavo Niemeyer\nhttp://niemeyer.net\nhttp://niemeyer.net/plus\nhttp://niemeyer.net/twitter\nhttp://niemeyer.net/blog\n\n-- I'm not absolutely sure of anything.\n",
			"disapproval": false,
			"date": "2012-04-09 22:16:23.331248",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"dsymonds@golang.org",
				"gustavo@niemeyer.net",
				"dchest@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/5985059/diff/5/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5985059/diff/5/src/pkg/time/time.go#newcode775\nsrc/pkg/time/time.go:775: if t.sec > maxUnixNano || t.sec < minUnixNano {\nOn 2012/04/09 06:00:28, r wrote:\n> i don't believe this is correct. the > should be >=. a test would verify.\n> \n> also range tests like this read better in this style, with the variable outside\n> the \"range\" represented by the constants.\n> \n> t.sec < minUnixNano || maxUnixNano <= t.sec\n\nThe range was off by one indeed, but to the other side. There was one more value that should not panic, while changing the equality here would mean panicking to yet another value (would be off by 2).\n\nI've simplified the constants to make them more clear, added tests verifying both sides of the boundary, and also improved the comment to mention the most likely bug coming out of this (the zero time).\n\n> this is not to pass judgement on having this panic. i'm thinking about that.\n\nSounds good.",
			"disapproval": false,
			"date": "2012-04-09 14:32:45.930011",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Apr 9, 2012 at 18:15, Gustavo Niemeyer <gustavo@niemeyer.net> wrote:\n> On Mon, Apr 9, 2012 at 18:44, Russ Cox <rsc@golang.org> wrote:\n>> I am unconvinced that is worth worrying about.\n>> I would document that if the result does not fit in an\n>> int64 then the returned value is undefined and call it a day.\n>\n> Given the range we live under at the moment, I agree it is almost\n> irrelevant. The main practical problem for non-historians comes out of\n> the zero value, though, which is used frequently and falls out of the\n> range. Serializing it as a UnixNano doesn't sound like a stretch.\n>\n>> If we must do something, then detecting the overflow\n>> and clamping the result should be easy:\n>>\n>> secs := t.sec + internalToUnix\n>> nsec := secs * 1e9\n>> if nsec/1e9 != secs || nsec+t.nsec < nsec {\n>\n> n := int64(math.MaxInt64/2 + 1)\n> a := n*1e9\n> b := a/1e9\n> println(a == b)\n\nI don't understand.  My code, translated to use your variables,\nis testing a/1e9 == n, not a == a/1e9.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-04-09 22:21:40.199963",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"dsymonds@golang.org",
				"gustavo@niemeyer.net",
				"dchest@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5985059/diff/2014/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5985059/diff/2014/src/pkg/time/time.go#newcode766\nsrc/pkg/time/time.go:766: // since January 1, 1970 UTC. The result is undefined if representing t\n  The result is undefined if the Unix time in nanoseconds\ncannot be represented by an int64.  Note that this means the\nresult of calling UnixNano on the zero Time is undefined.",
			"disapproval": false,
			"date": "2012-04-10 18:39:42.011920",
			"approval": true
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"dsymonds@golang.org",
				"gustavo@niemeyer.net",
				"dchest@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=4ed98a6b6fe5 ***\n\ntime: panic if UnixNano is out of range\n\nR=golang-dev, remyoudompheng, dsymonds, gustavo, dchest, r, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5985059",
			"disapproval": false,
			"date": "2012-04-13 01:16:54.388370",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"dsymonds@golang.org",
				"gustavo@niemeyer.net",
				"dchest@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/04/13 01:16:54, niemeyer wrote:\n> *** Submitted as http://code.google.com/p/go/source/detail?r=4ed98a6b6fe5 ***\n> \n> time: panic if UnixNano is out of range\n\nFor the record, this is wrong. It was a documentation change only.",
			"disapproval": false,
			"date": "2012-04-13 01:25:42.844340",
			"approval": false
		},
		{
			"sender": "cw@f00f.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> For the record, this is wrong. It was a documentation change only.\n\nphew\n\ndoc change, a+\n\nadding panic ... i would prefer we did less of that on core pkgs\n(passing stupid data in most cases deserves stupid results, but\nideally don't panic)\n",
			"disapproval": false,
			"date": "2012-04-13 03:58:50.044689",
			"approval": false
		}
	],
	"owner_email": "n13m3y3r@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "niemeyer",
	"subject": "code review 5985059: time: panic if UnixNano is out of range",
	"created": "2012-04-07 17:50:15.800063",
	"patchsets": [
		1,
		2001,
		4001,
		4,
		5,
		2004,
		3004,
		9001,
		1006,
		2009,
		7003,
		5008,
		1007,
		5010,
		2014,
		13001
	],
	"modified": "2012-04-13 03:58:50.234585",
	"closed": true,
	"issue": 5985059
}