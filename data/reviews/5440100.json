{
	"description": "godoc: Allow examples for methods.\n\nAn example for a method M() of type T can be written as\nfunc ExampleT_M() { ... }.\nTo differentiate between multiple examples for one function, type or\nmethod a suffix with a lowercase start may be appended to the name\nof the example function, e.g. ExampleFoo_basicUsage.\n\nFixes issue 2465.",
	"cc": [
		"golang-dev@googlegroups.com",
		"adg@golang.org",
		"r@google.com",
		"rsc@golang.org",
		"duperray.olivier@gmail.com",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "We need a suffix that is unlikely to happen\nin practice and does not have a meaning.\n\n[0-9]+ has been rejected.\n_[A-Z].* is ambiguous, so problematic.\n\nWhat about _[a-z].*?\nIt's unambiguous because the methods\nyou'd want to use for examples will have\nupper case names.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-07 18:08:00.378188",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Agree. I dislike the naming (numbering) convention introduced here. It's so 1963.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-12-05 23:59:39.362365",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5440100/diff/3001/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttp://codereview.appspot.com/5440100/diff/3001/src/cmd/godoc/godoc.go#newcode469\nsrc/cmd/godoc/godoc.go:469: j := len(name) - 1\nThis code is a bit too intricate for my tastes. First split the string with strings.SplitN then check each part individually. The for loop that checks for numeric chars only would be better off in a separate function (although you'll not need it with my proposal).",
			"disapproval": false,
			"date": "2011-12-06 00:01:53.938000",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, adg@golang.org, r@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-06 09:25:33.155283",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, adg@golang.org, r@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-06 22:35:11.715091",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-05 10:24:03.872173",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm having second thoughts about the numbers-only restriction. What about this:\n\nFor a package containing type T with method M:\n- ExampleT and ExampleT_x document T, where x is any\u00a0name that is not a method of T.\n- ExampleT_M and ExampleT_M_x document T.M (for any x).\n\nI would prefer that examples are given descriptive names, like ExampleSort, ExampleSort_Reverse, ExampleSort_StructField, etc...",
			"disapproval": false,
			"date": "2011-12-05 23:58:28.016097",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/12/05 23:58:28, adg wrote:\n> I'm having second thoughts about the numbers-only restriction. What about this:\n> \n> For a package containing type T with method M:\n> - ExampleT and ExampleT_x document T, where x is any&nbsp;name that is not a method\n> of T.\n> - ExampleT_M and ExampleT_M_x document T.M (for any x).\n> \n> I would prefer that examples are given descriptive names, like ExampleSort,\n> ExampleSort_Reverse, ExampleSort_StructField, etc...\n\nI implemented the proposed naming conventions as it is more \nverbose and clearer.\nUnfortunately it feels a bit strange, the solution is kind of \na (unfinished) hack:\n\nA)\nI am not sure if providing the examples as a own structure\nto the template is the right way: M aybe adding an example\nslot to TypeDoc and FuncDoc in go/doc would be cleaner, even\nif these slots are filled by cmd/gotest and not by go/doc.\n\nB)\nAn example might be lost: If there is no function, type\nor method which matches the example function name, the example\nis just silently discarded. This could be just a typo:\nWant to explain func Bar() but wrote ExampleBaz.\nIf these \"unparented\" examples are not output they could\nbe dropped earlier.\n\nC)\nThe descriptive suffix (e.g. \"Reverse\" in ExampleSort_Reverse)\nis not show in the example.  But if it is helpful in the\ncode, maybe it would be helpful in the example too...",
			"disapproval": false,
			"date": "2011-12-06 09:39:29.148245",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Dec 7, 2011 at 7:07 PM, Russ Cox <rsc@golang.org> wrote:\n\n> We need a suffix that is unlikely to happen\n> in practice and does not have a meaning.\n>\n> [0-9]+ has been rejected.\n> _[A-Z].* is ambiguous, so problematic.\n>\n\nIt is not problematic per se, it just adds some complexity in\ndistinguishing ExampleType_Something from ExampleType_Method.\n\n>\n> What about _[a-z].*?\n> It's unambiguous because the methods\n> you'd want to use for examples will have\n> upper case names.\n>\n\nFine for me:\n  - ExampleType_lowercase would be a type example\n  - ExampleType_UpperCase some method example (if UpperCase is a method)\n  - ExampleType_UpperCase_anything a method example (if \" )\n  - The lowercase suffix can be descriptive as Andrew suggested.\n  - Implementation would be like in Patch Set 3\nhttp://codereview.appspot.com/5440100/#ps3001\n\nOn golang-nuts there where arguments against this kind of convention (which\nis perfectly\nfine for me)\nhttp://groups.google.com/group/golang-nuts/msg/9a4962b25fd4e55a\n\nI see just one stumbling block: If someone is unaware of the convention\n(or just forgot it as _ and lowercase is not \"idiomatic\") and writes\nExampleType_Simple and ExampleType_Advanced he will not get\ntype example for simple and advanced usage but nothing if there\nare no methods Simple and Advanced (in which case the examples\nwould be sorted to the methods whereas the current solution would sort them\nproperly to the type).\n\nVolker\n\n-- \nDr. Volker Dobler\n",
			"disapproval": false,
			"date": "2011-12-07 21:29:24.166275",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Dec 7, 2011 at 16:29, Volker Dobler\n<dr.volker.dobler@gmail.com> wrote:> \u00a0 - ExampleType_lowercase would\nbe a type example> \u00a0 - ExampleType_UpperCase some method example (if\nUpperCase is a method)\nIt is a method example no matter what.It just might be an example of a\nmethod that doesn't exist. \u00a0:-)\n> I see just one stumbling block: If someone is unaware of the convention\n> (or just forgot it as _ and lowercase is not \"idiomatic\") and writes\n> ExampleType_Simple and ExampleType_Advanced he will not get\n> type example for simple and advanced usage but nothing if there\n> are no methods Simple and Advanced (in which case the examples\n> would be sorted to the methods whereas the current solution would sort them\n> properly to the type).\n\nThis is true of many things in the language, not least interfaces.\nIt's not a problem.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-07 21:34:55.551430",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, adg@golang.org, r@google.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-08 19:36:12.478973",
			"approval": false
		},
		{
			"sender": "duperray.olivier@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"duperray.olivier@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2011/12/08 19:36:12, volker.dobler wrote:\n> Hello mailto:golang-dev@googlegroups.com, mailto:adg@golang.org, mailto:r@google.com, mailto:rsc@golang.org\n> (cc: mailto:golang-dev@googlegroups.com),\n> \n> Please take another look.\nhello\nthis seems ok (but I'm not expert)\nis there something not right ?",
			"disapproval": false,
			"date": "2011-12-13 09:59:03.335733",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"duperray.olivier@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5440100/diff/10001/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttp://codereview.appspot.com/5440100/diff/10001/src/cmd/godoc/godoc.go#newcode470\nsrc/cmd/godoc/godoc.go:470: return unicode.IsLetter(r) && unicode.IsUpper(r)\nyou don't need to test both. IsUpper is sufficient. you don't even need to test len(s) == 0, actually.\n\nhttp://codereview.appspot.com/5440100/diff/10001/src/cmd/godoc/godoc.go#newcode484\nsrc/cmd/godoc/godoc.go:484: }\nall you need to do is use strings.LastIndex and slice off the tail.",
			"disapproval": false,
			"date": "2011-12-14 04:52:08.361853",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"duperray.olivier@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, adg@golang.org, r@google.com, rsc@golang.org, duperray.olivier@gmail.com, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-12-14 08:33:45.416785",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"duperray.olivier@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5440100/diff/10001/src/cmd/godoc/godoc.go\nFile src/cmd/godoc/godoc.go (right):\n\nhttp://codereview.appspot.com/5440100/diff/10001/src/cmd/godoc/godoc.go#newcode470\nsrc/cmd/godoc/godoc.go:470: return unicode.IsLetter(r) && unicode.IsUpper(r)\nOn 2011/12/14 04:52:08, r wrote:\n> you don't need to test both. IsUpper is sufficient. you don't even need to test\n> len(s) == 0, actually.\n\nDone.\n\nhttp://codereview.appspot.com/5440100/diff/10001/src/cmd/godoc/godoc.go#newcode484\nsrc/cmd/godoc/godoc.go:484: }\nOn 2011/12/14 04:52:08, r wrote:\n> all you need to do is use strings.LastIndex and slice off the tail.\n\nDone.\nThe distinguishing suffix may no longer contain underscores.",
			"disapproval": false,
			"date": "2011-12-14 08:34:05.586186",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"duperray.olivier@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "seems OK to me. leaving for others.\n\nhttp://codereview.appspot.com/5440100/diff/14002/src/cmd/gotest/doc.go\nFile src/cmd/gotest/doc.go (right):\n\nhttp://codereview.appspot.com/5440100/diff/14002/src/cmd/gotest/doc.go#newcode45\nsrc/cmd/gotest/doc.go:45: to the name.  The suffix must start with a lowercase letter.\ns/.$/ and may not contain underscores.",
			"disapproval": false,
			"date": "2011-12-15 22:54:00.299783",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"duperray.olivier@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThis is much nicer now. Sorry for the delayed review.",
			"disapproval": false,
			"date": "2011-12-15 22:57:51.576891",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"r@google.com",
				"rsc@golang.org",
				"duperray.olivier@gmail.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=7c8a0711cc3a ***\n\ngodoc: Allow examples for methods.\n\nAn example for a method M() of type T can be written as\nfunc ExampleT_M() { ... }.\nTo differentiate between multiple examples for one function, type or\nmethod a suffix with a lowercase start may be appended to the name\nof the example function, e.g. ExampleFoo_basicUsage.\n\nFixes issue 2465.\n\nR=golang-dev, adg, r, rsc, duperray.olivier, r\nCC=golang-dev\nhttp://codereview.appspot.com/5440100\n\nCommitter: Andrew Gerrand <adg@golang.org>",
			"disapproval": false,
			"date": "2011-12-15 23:02:02.383425",
			"approval": false
		}
	],
	"owner_email": "dr.volker.dobler@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "volker.dobler",
	"subject": "code review 5440100: godoc: Allow examples for methods.",
	"created": "2011-12-05 10:23:46.871764",
	"patchsets": [
		1,
		1002,
		3001,
		3002,
		6002,
		10001,
		14002
	],
	"modified": "2011-12-15 23:16:54.559102",
	"closed": true,
	"issue": 5440100
}