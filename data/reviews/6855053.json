{
	"description": "test: add test for floating point rounding of constants\n\nFailed with gccgo.",
	"cc": [
		"golang-dev@googlegroups.com",
		"remyoudompheng@gmail.com",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-11-16 06:51:19.953510",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Is this specified anywhere?\n\nhttp://golang.org/ref/spec#Constant_expressions says:\n\n\"A compiler may use rounding while computing untyped floating-point or complex constant expressions; see the implementation restriction in the section on constants.\"\n\nBut it never says that typing a floating-point constant should change its value (which itself is rounded but not at float32/float64 precision).",
			"disapproval": false,
			"date": "2012-11-16 07:01:32.493240",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The spec says: \"That said, every implementation must: Represent floating-point constants, including the parts of a complex constant, with a mantissa of at least 256 bits and a signed exponent of at least 32 bits.\"\n\nIt suggests that:\n\nconst x = 1 - float64(1.00000000000000000001)\nconst x = float64(1 - 1.00000000000000000001)\n\nshould be equivalent expressions. The playground says the first one is zero and the second one isn't.",
			"disapproval": false,
			"date": "2012-11-16 07:08:21.025480",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThe part about \"is 0.01\" is not precisely correct. The numbers below are the real ones. It doesn't matter because in a Go program 0.01 used in a float64 context really means 0.01000000000000000020816681711721685132943093776702880859375, but it will avoid confusion later if we are precise here.\n\nAlso, although I didn't note it below, I think it might help to use\n\npanic(fmt.Sprintf(\"F=%.1000g, want %.1000g\", F, F32))\n\nbecause the default printer for float64s is not very precise and perhaps not even very accurate.\n\nhttps://codereview.appspot.com/6855053/diff/10001/test/fixedbugs/bug470.go\nFile test/fixedbugs/bug470.go (right):\n\nhttps://codereview.appspot.com/6855053/diff/10001/test/fixedbugs/bug470.go#newcode11\ntest/fixedbugs/bug470.go:11: var F = float64(float32(0.01))\nvar F = float64(float32(0.01))\n\nconst (\n    F32 = 0.00999999977648258209228515625\n    F64 = 0.01000000000000000020816681711721685132943093776702880859375\n)\n\nhttps://codereview.appspot.com/6855053/diff/10001/test/fixedbugs/bug470.go#newcode14\ntest/fixedbugs/bug470.go:14: // 0.01 rounded to float32 then to float64 is 0.009999999776482582.\nis F32.\nnext line\nis F64.\n\nhttps://codereview.appspot.com/6855053/diff/10001/test/fixedbugs/bug470.go#newcode16\ntest/fixedbugs/bug470.go:16: if F == 0.01 {\nif F != F32 {\n    panic(F)\n}",
			"disapproval": false,
			"date": "2012-11-26 15:37:05.849380",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=b26a08dc81f0 ***\n\ntest: add test for floating point rounding of constants\n\nFailed with gccgo.\n\nR=golang-dev, remyoudompheng, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6855053",
			"disapproval": false,
			"date": "2012-11-26 16:31:22.307820",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/16 07:01:32, remyoudompheng wrote:\n> Is this specified anywhere?\n> \n> http://golang.org/ref/spec#Constant_expressions says:\n> \n> \"A compiler may use rounding while computing untyped floating-point or complex\n> constant expressions; see the implementation restriction in the section on\n> constants.\"\n> \n> But it never says that typing a floating-point constant should change its value\n> (which itself is rounded but not at float32/float64 precision).\n\nThe spec says \"Converting a constant yields a typed constant as result.\"  So it seems to me that after that point the rules about untyped constants no longer apply.  Though that also seems to be the only place in the spec where the phrase \"typed constant\" appears, so certainly matters are not as clear as possible.\n\nIntuitively, what should float64(float32(0.01)) mean?  It seems peculiar to say that it should mean the same thing as float64(0.01).  And with the \"typed constant\" statement the spec seems to support the idea that float64(float32(0.01)) != float64(0.01).  And that is what the gc compiler implements.  So while the spec can probably be clarified, I'm reasonably comfortable with the test case.",
			"disapproval": false,
			"date": "2012-11-16 14:17:28.834410",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/16 07:08:21, remyoudompheng wrote:\n> The spec says: \"That said, every implementation must: Represent floating-point\n> constants, including the parts of a complex constant, with a mantissa of at\n> least 256 bits and a signed exponent of at least 32 bits.\"\n> \n> It suggests that:\n> \n> const x = 1 - float64(1.00000000000000000001)\n> const x = float64(1 - 1.00000000000000000001)\n> \n> should be equivalent expressions. The playground says the first one is zero and\n> the second one isn't.\n\nWell, with the \"typed constant\" reading, that seems correct.  float64(1.00000000000000000001) is a typed constant.\n\nBut I just now spotted another use of \"typed constant\" in the spec, and it suggests that this program should be invalid.  The spec says \"The values of <i>typed</i> constants must always be accurately representable as values of the constant type.\"  The value 1.00000000000000000001 can not be represented as a float64.  So perhaps the compiler should reject this program.",
			"disapproval": false,
			"date": "2012-11-16 14:22:20.343230",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://code.google.com/p/go/issues/detail?id=4398",
			"disapproval": false,
			"date": "2012-11-16 14:38:37.304600",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/16 14:22:20, iant wrote:\n> But I just now spotted another use of \"typed constant\" in the spec, and it\n> suggests that this program should be invalid.  The spec says \"The values of\n> <i>typed</i> constants must always be accurately representable as values of the\n> constant type.\"  The value 1.00000000000000000001 can not be represented as a\n> float64.  So perhaps the compiler should reject this program.\n\nBut 0.1 cannot be either accurately represented as a float64. Why would the implicit rounding of 0.1 be acceptable but not the rounding of 1.000000000000000000001 ? What about float64(3.1415926535897932384626433)?",
			"disapproval": false,
			"date": "2012-11-16 15:06:06.957980",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/11/16 15:06:06, remyoudompheng wrote:\n> On 2012/11/16 14:22:20, iant wrote:\n> > But I just now spotted another use of \"typed constant\" in the spec, and it\n> > suggests that this program should be invalid.  The spec says \"The values of\n> > <i>typed</i> constants must always be accurately representable as values of\n> the\n> > constant type.\"  The value 1.00000000000000000001 can not be represented as a\n> > float64.  So perhaps the compiler should reject this program.\n> \n> But 0.1 cannot be either accurately represented as a float64. Why would the\n> implicit rounding of 0.1 be acceptable but not the rounding of\n> 1.000000000000000000001 ? What about float64(3.1415926535897932384626433)?\n\nYeah, we should change the spec.  That's the issue I filed.",
			"disapproval": false,
			"date": "2012-11-16 15:19:55.249020",
			"approval": false
		}
	],
	"owner_email": "iant@golang.org",
	"private": false,
	"base_url": "",
	"owner": "iant",
	"subject": "code review 6855053: test: add test for floating point rounding of constants",
	"created": "2012-11-16 06:51:14.648370",
	"patchsets": [
		1,
		10001,
		9002
	],
	"modified": "2012-11-26 16:31:27.942260",
	"closed": true,
	"issue": 6855053
}