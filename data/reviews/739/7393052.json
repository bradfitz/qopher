{
	"description": "cmd/vet: restructure to be package-driven\nThis is a simple refactoring of main.go that will enable the type checker\nto be used during vetting.\nThe change has an unimportant effect on the arguments: it now assumes\nthat all files named explicitly on the command line belong to the same\npackage. When run by the go command, this was true already.\n\nAlso restore a missing parenthesis from an error message.",
	"cc": [
		"golang-dev@googlegroups.com",
		"gri@golang.org",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=e82360e6c916 ***\n\ncmd/vet: restructure to be package-driven\nThis is a simple refactoring of main.go that will enable the type checker\nto be used during vetting.\nThe change has an unimportant effect on the arguments: it now assumes\nthat all files named explicitly on the command line belong to the same\npackage. When run by the go command, this was true already.\n\nAlso restore a missing parenthesis from an error message.\n\nR=golang-dev, gri, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/7393052",
			"disapproval": false,
			"date": "2013-02-22 21:32:48.840080",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7393052/diff/1/src/cmd/vet/main.go\nFile src/cmd/vet/main.go (right):\n\nhttps://codereview.appspot.com/7393052/diff/1/src/cmd/vet/main.go#newcode59\nsrc/cmd/vet/main.go:59: fmt.Fprintf(os.Stderr, \"\\tvet [flags] directory...\\n\")\n# Must contain a single package\n?\n\nhttps://codereview.appspot.com/7393052/diff/1/src/cmd/vet/main.go#newcode140\nsrc/cmd/vet/main.go:140: if strings.Contains(err.Error(), \"no Go source files\") {\nif _, nogo := err.(*build.NoGoError); nogo {\n   return\n}\n\nhttps://codereview.appspot.com/7393052/diff/1/src/cmd/vet/main.go#newcode151\nsrc/cmd/vet/main.go:151: names[i] = directory + \"/\" + name\npathutil.Join ?\n\nhttps://codereview.appspot.com/7393052/diff/1/src/cmd/vet/main.go#newcode163\nsrc/cmd/vet/main.go:163: f, err := os.Open(name)\nyou can just call parser.ParseFile(fs, name, nil, 0)\n\n(nil src) and it will open the file for you\n\nhttps://codereview.appspot.com/7393052/diff/1/src/cmd/vet/main.go#newcode197\nsrc/cmd/vet/main.go:197: fmt.Fprintf(os.Stderr, \"USE DIR ONLY: %s\\n\", name)\nresidue?",
			"disapproval": false,
			"date": "2013-02-22 21:03:34.394980",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7393052/diff/1/src/cmd/vet/main.go\nFile src/cmd/vet/main.go (right):\n\nhttps://codereview.appspot.com/7393052/diff/1/src/cmd/vet/main.go#newcode116\nsrc/cmd/vet/main.go:116: if fi, err := os.Stat(name); err == nil && fi.IsDir() {\nso the ENOENT case is a file?\n\nI'd bail here instead if err != nil.\n\nhttps://codereview.appspot.com/7393052/diff/1/src/cmd/vet/main.go#newcode151\nsrc/cmd/vet/main.go:151: names[i] = directory + \"/\" + name\nfilepath.Join?",
			"disapproval": false,
			"date": "2013-02-22 21:03:41.775890",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-02-22 20:49:23.625590",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7393052/diff/1/src/cmd/vet/main.go\nFile src/cmd/vet/main.go (right):\n\nhttps://codereview.appspot.com/7393052/diff/1/src/cmd/vet/main.go#newcode59\nsrc/cmd/vet/main.go:59: fmt.Fprintf(os.Stderr, \"\\tvet [flags] directory...\\n\")\nnot true. it is walked recursively so there can be many packages. i think it's ok as is.\n\nhttps://codereview.appspot.com/7393052/diff/1/src/cmd/vet/main.go#newcode116\nsrc/cmd/vet/main.go:116: if fi, err := os.Stat(name); err == nil && fi.IsDir() {\nOn 2013/02/22 21:03:41, bradfitz wrote:\n> so the ENOENT case is a file?\n> \n> I'd bail here instead if err != nil.\n\nDone.\n\nhttps://codereview.appspot.com/7393052/diff/1/src/cmd/vet/main.go#newcode140\nsrc/cmd/vet/main.go:140: if strings.Contains(err.Error(), \"no Go source files\") {\nOn 2013/02/22 21:03:34, gri wrote:\n> if _, nogo := err.(*build.NoGoError); nogo {\n>    return\n> }\n\nDone.\n\nhttps://codereview.appspot.com/7393052/diff/1/src/cmd/vet/main.go#newcode151\nsrc/cmd/vet/main.go:151: names[i] = directory + \"/\" + name\nOn 2013/02/22 21:03:41, bradfitz wrote:\n> filepath.Join?\n\nDone.\n\nhttps://codereview.appspot.com/7393052/diff/1/src/cmd/vet/main.go#newcode151\nsrc/cmd/vet/main.go:151: names[i] = directory + \"/\" + name\nOn 2013/02/22 21:03:34, gri wrote:\n> pathutil.Join ?\nfilepath.Join\n\nhttps://codereview.appspot.com/7393052/diff/1/src/cmd/vet/main.go#newcode163\nsrc/cmd/vet/main.go:163: f, err := os.Open(name)\nbut i need the raw data to check build tags anyway.\n\nhttps://codereview.appspot.com/7393052/diff/1/src/cmd/vet/main.go#newcode197\nsrc/cmd/vet/main.go:197: fmt.Fprintf(os.Stderr, \"USE DIR ONLY: %s\\n\", name)\nOn 2013/02/22 21:03:34, gri wrote:\n> residue?\n\nDone.",
			"disapproval": false,
			"date": "2013-02-22 21:15:39.987420",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7393052/diff/4002/src/cmd/vet/main.go\nFile src/cmd/vet/main.go (right):\n\nhttps://codereview.appspot.com/7393052/diff/4002/src/cmd/vet/main.go#newcode58\nsrc/cmd/vet/main.go:58: fmt.Fprintf(os.Stderr, \"\\tvet [flags] directory...\\n\")\ni meant\n\n# Each directory must contain a single package\n\nbut perhaps that's obvious",
			"disapproval": false,
			"date": "2013-02-22 21:29:18.832860",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, gri@golang.org, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-22 21:15:49.641110",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 7393052: cmd/vet: restructure to be package-driven",
	"created": "2013-02-22 20:49:19.445060",
	"patchsets": [
		1,
		4002,
		8001
	],
	"modified": "2013-02-22 21:32:49.924020",
	"closed": true,
	"issue": 7393052
}