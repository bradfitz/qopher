{
	"description": "syscall: clean up the Plan 9 API (part 1 of 3)\n\nLots of stuff was put here for convenience\nduring the initial port that really belongs\nat a higher level, in the os package.\n\nThe following exported items have been removed:\n  func StringSlicePtr\n  func StringByteSlice\n  func StringBytePtr\n  func NewError\n  func Getpid\n  func Getppid\n  func Read\n  func Write\n  func Getwd\n  func Mkdir\n  func (*Waitmsg) Exited\n  func (*Waitmsg) Signaled\n  func (*Waitmsg) ExitStatus\n  func Fchdir\n  func NsecToTimeval\n  func DecodeBinTime\n  func Gettimeofday\n  func Getegid\n  func Geteuid\n  func Getgid\n  func Getuid\n  func GetGroups\n  func Getenv\n  func Setenv\n  func Environ\n  func Clearenv\n  type Timespec\n  type Timeval\n  type Prof\n  type Tos\n  var Stdin\n  var Stdout\n  var Stderr\n\nPart two will remove the Exit function and\nreplace it with Exits. This will require\nsmall changes to the runtime.\n\nPart three will remove the EFOO error vars.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rminnich@gmail.com",
		"seed@mail.nanosouffle.net",
		"adonovan@google.com",
		"bradfitz@golang.org",
		"iant@golang.org"
	],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Feb 26, 2013 at 12:20 AM, Anthony Martin <ality@pbrane.org> wrote:\r\n\r\n> I'm also thinking about moving the environment\r\n> functions (Getenv, Setenv, Environ, and Clearenv)\r\n> into package os.\r\n>\r\n> The only issue is with package time. I'd have to\r\n> duplicate the code for Getenv since the os package\r\n> can't be imported.\r\n>\r\n> Thoughts?\r\n\r\n\r\nOn Unix, Getenv/Setenv aren't system calls either, but they're in package\r\nsyscall anyway.  Then things like time can use them and they don't need to\r\nbe duplicated.  Why can't we do the same on plan9?\r\n",
			"disapproval": false,
			"date": "2013-02-26 15:54:00.148300",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"rminnich@gmail.com",
				"seed@mail.nanosouffle.net",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rminnich@gmail.com, seed@mail.nanosouffle.net, adonovan@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-26 07:57:54.370450",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I agree: I'd much rather see a bunch of small CLs.\r\n\r\nOn Tue, Feb 26, 2013 at 4:20 PM, <seed@mail.nanosouffle.net> wrote:\r\n\r\n> I'm not too fond of the organization here: this change does too many\r\n> things at once -- some of which are quite agreeable, but others which\r\n> are more controversial.\r\n>\r\n> I think you should start by making a separate CL for the Error change.\r\n> It's nicely localized to the syscall package and is definitely something\r\n> we should be doing.\r\n>\r\n>\r\n> https://codereview.appspot.**com/7395053/<https://codereview.appspot.com/7395053/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-02-27 00:21:48.497790",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 23 February 2013 17:37, Anthony Martin <ality@pbrane.org> wrote:\r\n\r\n> [+cc adonovan]\r\n>\r\n> Alan, is it okay to emulate syscall.Getpid\r\n> with os.Getpid in exp/ssa/interp?\r\n>\r\n\r\nYes, that's fine.\r\n",
			"disapproval": false,
			"date": "2013-02-23 23:02:11.011480",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"rminnich@gmail.com",
				"seed@mail.nanosouffle.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rminnich@gmail.com, seed@mail.nanosouffle.net (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-02-23 22:32:41.480650",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\r\n\r\nAnthony Martin <ality@pbrane.org> once said:\r\n> I'm also thinking about moving the environment\r\n> functions (Getenv, Setenv, Environ, and Clearenv)\r\n> into package os.\r\n> \r\n> The only issue is with package time. I'd have to\r\n> duplicate the code for Getenv since the os package\r\n> can't be imported.\r\n\r\nI went ahead and did this. It's cleaner this way\r\n\r\n  Anthony\r\n",
			"disapproval": false,
			"date": "2013-02-26 08:50:50.852200",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm also thinking about moving the environment\r\nfunctions (Getenv, Setenv, Environ, and Clearenv)\r\ninto package os.\r\n\r\nThe only issue is with package time. I'd have to\r\nduplicate the code for Getenv since the os package\r\ncan't be imported.\r\n\r\nThoughts?\r\n\r\n  Anthony\r\n",
			"disapproval": false,
			"date": "2013-02-26 08:20:16.801670",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Feb 26, 2013 at 8:52 AM, Anthony Martin <ality@pbrane.org> wrote:\r\n> Brad Fitzpatrick <bradfitz@golang.org> once said:\r\n>> On Unix, Getenv/Setenv aren't system calls either, but they're in package\r\n>> syscall anyway.  Then things like time can use them and they don't need to\r\n>> be duplicated.  Why can't we do the same on plan9?\r\n>\r\n> On Unix, the runtime provides the environment. Both the\r\n> envs variable and the setenv_c function are bits of magic\r\n> implemented in the runtime package.\r\n>\r\n> On Plan 9, all you have to do is read a file in /env.\r\n> I'm not sure it's worth keeping in the syscall package.\r\n\r\nWe should strive to have the os package provide the same API on all platforms.\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2013-02-26 19:01:34.883650",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Brad Fitzpatrick <bradfitz@golang.org> once said:\r\n> I agree: I'd much rather see a bunch of small CLs.\r\n\r\nOkay. I'll split it up.\r\n\r\n  Anthony\r\n",
			"disapproval": false,
			"date": "2013-02-27 04:43:27.063040",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Brad Fitzpatrick <bradfitz@golang.org> once said:\r\n> On Unix, Getenv/Setenv aren't system calls either, but they're in package\r\n> syscall anyway.  Then things like time can use them and they don't need to\r\n> be duplicated.  Why can't we do the same on plan9?\r\n\r\nOn Unix, the runtime provides the environment. Both the\r\nenvs variable and the setenv_c function are bits of magic\r\nimplemented in the runtime package.\r\n\r\nOn Plan 9, all you have to do is read a file in /env.\r\nI'm not sure it's worth keeping in the syscall package.\r\n\r\n  Anthony\r\n",
			"disapproval": false,
			"date": "2013-02-26 16:52:42.005010",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Feb 26, 2013 at 11:01 AM, Ian Lance Taylor <iant@golang.org> wrote:\r\n\r\n> On Tue, Feb 26, 2013 at 8:52 AM, Anthony Martin <ality@pbrane.org> wrote:\r\n> > Brad Fitzpatrick <bradfitz@golang.org> once said:\r\n> >> On Unix, Getenv/Setenv aren't system calls either, but they're in\r\n> package\r\n> >> syscall anyway.  Then things like time can use them and they don't need\r\n> to\r\n> >> be duplicated.  Why can't we do the same on plan9?\r\n> >\r\n> > On Unix, the runtime provides the environment. Both the\r\n> > envs variable and the setenv_c function are bits of magic\r\n> > implemented in the runtime package.\r\n> >\r\n> > On Plan 9, all you have to do is read a file in /env.\r\n> > I'm not sure it's worth keeping in the syscall package.\r\n>\r\n> We should strive to have the os package provide the same API on all\r\n> platforms.\r\n>\r\n\r\n I don't think anybody or this CL disagrees with that.\r\n\r\nThe discussion was purely whether the plan9 pkg syscall provides a fake\r\nGetenv / Setenv like the other OSes.  I don't care much either way, but not\r\nhaving it in pkg syscall complicates stuff like the time package a bit.\r\n",
			"disapproval": false,
			"date": "2013-02-26 19:08:50.852130",
			"approval": false
		},
		{
			"sender": "seed@mail.nanosouffle.net",
			"recipients": [
				"ality@pbrane.org",
				"rminnich@gmail.com",
				"seed@mail.nanosouffle.net",
				"adonovan@google.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7395053/diff/15001/src/pkg/os/exec_plan9.go\nFile src/pkg/os/exec_plan9.go (right):\n\nhttps://codereview.appspot.com/7395053/diff/15001/src/pkg/os/exec_plan9.go#newcode117\nsrc/pkg/os/exec_plan9.go:117: return true\nInclude a comment stating that we only return from Wait() if the process has exited and we only get ProcessState through Wait() (or something to this effect).\n\nhttps://codereview.appspot.com/7395053/diff/15001/src/pkg/os/file_plan9.go\nFile src/pkg/os/file_plan9.go (right):\n\nhttps://codereview.appspot.com/7395053/diff/15001/src/pkg/os/file_plan9.go#newcode16\nsrc/pkg/os/file_plan9.go:16: Stdin  = NewFile(uintptr(0), \"/dev/cons\")\nNo need to type-cast the literals. However, I'd like it more if we continued to use syscall.Stdin, etc..\n\nhttps://codereview.appspot.com/7395053/diff/15001/src/pkg/os/getwd.go\nFile src/pkg/os/getwd.go (right):\n\nhttps://codereview.appspot.com/7395053/diff/15001/src/pkg/os/getwd.go#newcode5\nsrc/pkg/os/getwd.go:5: // +build !plan9\nShould then be renamed to getwd_posix.go\n\nhttps://codereview.appspot.com/7395053/diff/15001/src/pkg/os/proc.go\nFile src/pkg/os/proc.go (right):\n\nhttps://codereview.appspot.com/7395053/diff/15001/src/pkg/os/proc.go#newcode7\nsrc/pkg/os/proc.go:7: // +build !plan9\nYou ought to then rename this file to proc_posix.go\n\nhttps://codereview.appspot.com/7395053/diff/15001/src/pkg/syscall/syscall_plan9.go\nFile src/pkg/syscall/syscall_plan9.go (left):\n\nhttps://codereview.appspot.com/7395053/diff/15001/src/pkg/syscall/syscall_plan9.go#oldcode37\nsrc/pkg/syscall/syscall_plan9.go:37: Stdin  = 0\nI think it's fine for the fds to stay here. It's systems-level, non-portable data.\n\nhttps://codereview.appspot.com/7395053/diff/15001/src/pkg/syscall/syscall_plan9.go#oldcode117\nsrc/pkg/syscall/syscall_plan9.go:117: func Read(fd int, p []byte) (n int, err error) {\nNo, let's keep Read and Write. It makes sense for the interface, and it's more cumbersome to use Pread/Pwrite with the (undocumented) `-1' flag.\n\nhttps://codereview.appspot.com/7395053/diff/15001/src/pkg/syscall/syscall_plan9.go#oldcode315\nsrc/pkg/syscall/syscall_plan9.go:315: func Gettimeofday(tv *Timeval) error {\nWe can support this in a way compatible with UNIX, so why not? As much as the syscall package is not entirely meant to be portable, I can see breakages due to this in the future. I don't think it's harmful to keep it.\n\nhttps://codereview.appspot.com/7395053/diff/15001/src/pkg/syscall/syscall_plan9.go#oldcode327\nsrc/pkg/syscall/syscall_plan9.go:327: func Getuid() (uid int)   { return -1 }\nWhile you're getting rid of this, it would be nice to expose an API here for a Plan 9-specific method to grab the username of the caller from the status file. Since it's not portable (but neither are any of these, which have counterparts in package os), it would be suitable for this package.\n\nhttps://codereview.appspot.com/7395053/diff/15001/src/pkg/syscall/syscall_plan9.go\nFile src/pkg/syscall/syscall_plan9.go (right):\n\nhttps://codereview.appspot.com/7395053/diff/15001/src/pkg/syscall/syscall_plan9.go#newcode16\nsrc/pkg/syscall/syscall_plan9.go:16: // Constants\nNo, let's keep the Constants and Errors in a z* file as before, just as the other OS' do. They are used in other places, they are invented, and they will continue to grow, I'm sure.\n\nhttps://codereview.appspot.com/7395053/diff/15001/src/pkg/time/zoneinfo_plan9.go\nFile src/pkg/time/zoneinfo_plan9.go (right):\n\nhttps://codereview.appspot.com/7395053/diff/15001/src/pkg/time/zoneinfo_plan9.go#newcode132\nsrc/pkg/time/zoneinfo_plan9.go:132: t, ok := getenv(\"timezone\")\nSince the timezone file can be kind of large, it might make sense to just do a string(readFile(\"/env/timezone\")) here.\n\nhttps://codereview.appspot.com/7395053/diff/15001/src/pkg/time/zoneinfo_plan9.go#newcode158\nsrc/pkg/time/zoneinfo_plan9.go:158: // This is a copy of os.Getenv but using functions from the syscall package.\nUse open, closefd from sys_plan9.go. Also either use Pread instead of a Seek + Pread, or just preadn.\n\nIn case you would still like to use this for the timezone file, a preadn might make more sense. Either way, you should check that you indeed read the whole file.",
			"disapproval": false,
			"date": "2013-02-26 21:51:41.714260",
			"approval": false
		},
		{
			"sender": "seed@mail.nanosouffle.net",
			"recipients": [
				"ality@pbrane.org",
				"rminnich@gmail.com",
				"seed@mail.nanosouffle.net",
				"adonovan@google.com",
				"bradfitz@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm not too fond of the organization here: this change does too many things at once -- some of which are quite agreeable, but others which are more controversial.\n\nI think you should start by making a separate CL for the Error change. It's nicely localized to the syscall package and is definitely something we should be doing.",
			"disapproval": false,
			"date": "2013-02-27 00:20:15.592570",
			"approval": false
		}
	],
	"owner_email": "ality@pbrane.org",
	"private": false,
	"base_url": "",
	"owner": "ality",
	"subject": "code review 7395053: syscall: clean up the Plan 9 API (part 1 of 3)",
	"created": "2013-02-23 22:30:35.930480",
	"patchsets": [
		1,
		2001,
		4001,
		7001,
		11001,
		12001,
		15001
	],
	"modified": "2013-02-27 00:20:15.592570",
	"closed": false,
	"issue": 7395053
}