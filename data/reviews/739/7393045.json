{
	"description": "cmd/gc, reflect, runtime: switch to indirect func value representation\n\nStep 1 of http://golang.org/s/go11func.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"daniel.morsing@gmail.com",
		"remyoudompheng@gmail.com"
	],
	"reviewers": [
		"alex.brainman@gmail.com"
	],
	"messages": [
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Friday, 22 February 2013 10:15:05 UTC+11, R\u00e9my wrote:\r\n>\r\n> Windows builders didn't like it. \r\n>\r\n>\r\nI think I know why. Windows callback runtime code uses refs to go \r\nfunctions. These are changed. We need to change windows callback \r\naccordingly. I will send a fix.\r\n\r\nAlex \r\n",
			"disapproval": false,
			"date": "2013-02-22 00:54:10.513080",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-02-21 19:22:58.928480",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Windows builders didn't like it.\r\n\r\nR\u00e9my.\r\n",
			"disapproval": false,
			"date": "2013-02-21 23:15:06.004570",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7393048/",
			"disapproval": false,
			"date": "2013-02-22 01:08:10.777880",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for fixing this, and apologies for not catching it. I was sure I\r\nhadn't done anything OS-specific. As penance, I set up a Windows Server\r\n2012 machine on Amazon AWS that I can turn on for an hour or two at a time\r\nto fix things like this (at least for windows/amd64) in the future.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-02-22 15:20:54.510590",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Feb 21, 2013 at 3:04 PM, <r@golang.org> wrote:\r\n\r\n> https://codereview.appspot.**com/7393045/diff/18001/src/**\r\n> pkg/reflect/value.go#**newcode1220<https://codereview.appspot.com/7393045/diff/18001/src/pkg/reflect/value.go#newcode1220>\r\n> src/pkg/reflect/value.go:1220: // result is zero if and only if v's\r\n> value is a nil func.\r\n> define 'nil func' better. it's an implementation detail, not how the\r\n> user sees the value.\r\n>\r\n\r\nI meant what the user sees.\r\n\r\nvar f func()\r\nv := reflect.ValueOf(f)\r\nv.Pointer() == 0.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-02-21 20:14:11.079030",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks like a lot, but it's only +316, -89.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-02-21 19:28:15.449520",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nreflect code looks good except for one unclear comment.\ni will leave the compiler and runtime changes for others.\n\nhttps://codereview.appspot.com/7393045/diff/18001/src/pkg/reflect/value.go\nFile src/pkg/reflect/value.go (right):\n\nhttps://codereview.appspot.com/7393045/diff/18001/src/pkg/reflect/value.go#newcode1220\nsrc/pkg/reflect/value.go:1220: // result is zero if and only if v's value is a nil func.\ndefine 'nil func' better. it's an implementation detail, not how the user sees the value.",
			"disapproval": false,
			"date": "2013-02-21 20:04:15.799710",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "if you just said func Value rather than func, it would help\r\n",
			"disapproval": false,
			"date": "2013-02-21 20:33:40.412240",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"daniel.morsing@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "couldn't find any other remark\n\nhttps://codereview.appspot.com/7393045/diff/25001/src/pkg/reflect/value.go\nFile src/pkg/reflect/value.go (right):\n\nhttps://codereview.appspot.com/7393045/diff/25001/src/pkg/reflect/value.go#newcode400\nsrc/pkg/reflect/value.go:400: fn = *(*unsafe.Pointer)(v.val)\nis this ever possible?\n\nhttps://codereview.appspot.com/7393045/diff/25001/src/pkg/reflect/value.go#newcode1236\nsrc/pkg/reflect/value.go:1236: p = *(*unsafe.Pointer)(p)\nsince func values are pointer-sized, I suppose this test can be removed?",
			"disapproval": false,
			"date": "2013-02-21 21:32:44.113100",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"daniel.morsing@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Did a quick glance of gc/6g/runtime code. Like you said, it's mostly small stuff like changing the indirection on a function pointer. Don't feel qualified enough to give a LGTM though.",
			"disapproval": false,
			"date": "2013-02-21 20:57:17.544520",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Feb 21, 2013 at 3:33 PM, Rob Pike <r@golang.org> wrote:\r\n\r\n> if you just said func Value rather than func, it would help\r\n>\r\n\r\nDone.\r\n\r\n// If v's Kind is Func, the returned pointer is an underlying\r\n// code pointer, but not necessarily enough to identify a\r\n// single function uniquely. The only guarantee is that the\r\n// result is zero if and only if v is a nil func Value.\r\n",
			"disapproval": false,
			"date": "2013-02-21 20:59:53.161840",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"daniel.morsing@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Scanning over this again, i'm going to say LGTM for 6g/gc/runtime",
			"disapproval": false,
			"date": "2013-02-21 21:39:03.735380",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"daniel.morsing@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7393045/diff/25001/src/pkg/reflect/value.go\nFile src/pkg/reflect/value.go (right):\n\nhttps://codereview.appspot.com/7393045/diff/25001/src/pkg/reflect/value.go#newcode400\nsrc/pkg/reflect/value.go:400: fn = *(*unsafe.Pointer)(v.val)\nOn 2013/02/21 21:32:44, remyoudompheng wrote:\n> is this ever possible?\n\nYes. Any addressable value records the pointer to the actual data, so that it can be Set. That's this case.\n\nhttps://codereview.appspot.com/7393045/diff/25001/src/pkg/reflect/value.go#newcode1236\nsrc/pkg/reflect/value.go:1236: p = *(*unsafe.Pointer)(p)\nOn 2013/02/21 21:32:44, remyoudompheng wrote:\n> since func values are pointer-sized, I suppose this test can be removed?\n\nSame.",
			"disapproval": false,
			"date": "2013-02-21 21:56:16.901560",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"daniel.morsing@gmail.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=9f61732fbcca ***\n\ncmd/gc, reflect, runtime: switch to indirect func value representation\n\nStep 1 of http://golang.org/s/go11func.\n\nR=golang-dev, r, daniel.morsing, remyoudompheng\nCC=golang-dev\nhttps://codereview.appspot.com/7393045",
			"disapproval": false,
			"date": "2013-02-21 22:01:17.354560",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 7393045: cmd/gc, reflect, runtime: switch to indirect func value...",
	"created": "2013-02-21 03:49:04.976830",
	"patchsets": [
		1,
		2001,
		5001,
		7001,
		9001,
		1002,
		13001,
		16001,
		18001,
		25001,
		28001,
		13040
	],
	"modified": "2013-02-22 15:38:30.543590",
	"closed": true,
	"issue": 7393045
}