{
	"description": "os: provide access to file LastAccessTime and CreationTime on windows\n\nFixes issue 4569.",
	"cc": [
		"bradfitz@golang.org",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-12-20 05:19:43.248780",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6972047/diff/5001/src/pkg/syscall/syscall_windows.go\nFile src/pkg/syscall/syscall_windows.go (right):\n\nhttps://codereview.appspot.com/6972047/diff/5001/src/pkg/syscall/syscall_windows.go#newcode873\nsrc/pkg/syscall/syscall_windows.go:873: // Stat_t is an invented structure on Windows, but here for\nAny reason it needs the _t suffix?  If we're inventing things, could they be prettier?\n\nhttps://codereview.appspot.com/6972047/diff/5001/src/pkg/syscall/syscall_windows.go#newcode880\nsrc/pkg/syscall/syscall_windows.go:880: sync.Mutex\n// guards fi?\n\nhttps://codereview.appspot.com/6972047/diff/5001/src/pkg/syscall/syscall_windows.go#newcode882\nsrc/pkg/syscall/syscall_windows.go:882: path string // used to retrieve fi when not supplied by constructor\nnot mutable; put above the Mutex?",
			"disapproval": false,
			"date": "2012-12-20 19:32:57.156890",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6972047/diff/5001/src/pkg/syscall/syscall_windows.go\nFile src/pkg/syscall/syscall_windows.go (right):\n\nhttps://codereview.appspot.com/6972047/diff/5001/src/pkg/syscall/syscall_windows.go#newcode873\nsrc/pkg/syscall/syscall_windows.go:873: // Stat_t is an invented structure on Windows, but here for\nHere is my thinking. Russ said \"Plenty of systems don't support access time\" (http://code.google.com/p/go/issues/detail?id=3952#c4), but all I know of (linux and windows) do. So second best to having it right in os.FileInfo is be as much consistent as we can. Also being os specific, it should go to syscall. I would like to return something \"real\", like Stat_t. But unfortunately we are given syscall.Win32finddata when we enumerate files in a directory; syscall.ByHandleFileInformation when we have opened file (we have file handle); and syscall.Win32FileAttributeData when we just have file path. All these are very similar, but cannot replace each other. So it must be \"invented\" structure in syscall, and syscall.Stat_t makes it consistent with other os.\n\nI am even happy to move it into os package, then there will be less exported moving parts. But that goes against all my logic above.\n\nI am opened to suggestions.\n\nhttps://codereview.appspot.com/6972047/diff/5001/src/pkg/syscall/syscall_windows.go#newcode880\nsrc/pkg/syscall/syscall_windows.go:880: sync.Mutex\nOn 2012/12/20 19:32:57, bradfitz wrote:\n> // guards fi?\n\nDone.\n\nhttps://codereview.appspot.com/6972047/diff/5001/src/pkg/syscall/syscall_windows.go#newcode882\nsrc/pkg/syscall/syscall_windows.go:882: path string // used to retrieve fi when not supplied by constructor\nOn 2012/12/20 19:32:57, bradfitz wrote:\n> not mutable; put above the Mutex?\n\nDone.",
			"disapproval": false,
			"date": "2012-12-21 04:44:16.477810",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-21 04:44:33.110060",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6972047/diff/11001/src/pkg/syscall/syscall_windows.go\nFile src/pkg/syscall/syscall_windows.go (right):\n\nhttps://codereview.appspot.com/6972047/diff/11001/src/pkg/syscall/syscall_windows.go#newcode881\nsrc/pkg/syscall/syscall_windows.go:881: sync.Mutex            // guards fi\nGood catch. Fixed.",
			"disapproval": false,
			"date": "2012-12-21 05:39:34.696250",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-21 05:39:52.912190",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Leaving for Russ.\n\nOne more nitpick comment, though:\n\nhttps://codereview.appspot.com/6972047/diff/11001/src/pkg/syscall/syscall_windows.go\nFile src/pkg/syscall/syscall_windows.go (right):\n\nhttps://codereview.appspot.com/6972047/diff/11001/src/pkg/syscall/syscall_windows.go#newcode881\nsrc/pkg/syscall/syscall_windows.go:881: sync.Mutex            // guards fi\ngive this a name (\"mu\") so it's not exported.  it would be an ugly wart in the public API.",
			"disapproval": false,
			"date": "2012-12-21 05:13:43.651920",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping",
			"disapproval": false,
			"date": "2013-01-07 02:05:32.469740",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"alex.brainman@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am concerned about the delayed fetch of metadata when using one of these syscall.Stat_t. In particular, traditionally Stat returns a snapshot of the file as it exists now. This API returns some information about now and the ability to fetch other information as it exists when you ask for it later, which is a bit of an odd mix between the two. \n\nIt looks like the difference between ByHandleFileInformation and Win32FileAttributeData/Win32finddata is that the latter pair omits VolumeSerialNumber, NumberOfLinks, FileIndexHigh, and FileIndexLow. \n\nSince all three get used as FileInfo, my suggestion would be to give up on the extra fields in ByHandleFileInformation and the simulated Stat_t and use a Win32FileAttributeData as the official underlying sys type. It is possible to construct one of those from any of the other forms, and that seems like a better name for an API than Win32finddata.\n\nThe alternative would be to change the code that currently gets a Win32FileAttributeData or a Win32finddata to do an extra Open+GetFileInformationByHandle+Close for each FileInfo. That seems too expensive.",
			"disapproval": false,
			"date": "2013-01-07 04:42:34.477850",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/07 04:42:34, rsc wrote:\n> I am concerned about the delayed fetch of metadata when using one of these\n> syscall.Stat_t. In particular, traditionally Stat returns a snapshot of the file\n> as it exists now. This API returns some information about now and the ability to\n> fetch other information as it exists when you ask for it later, which is a bit\n> of an odd mix between the two. \n\nI am concerned about \"delayed fetch\" too, but\n- I do not see efficient way of avoiding it;\n- Our current implementation behave in exactly same way;\n- The only bits that are \"delayed fetched\" are VolumeSerialNumber, \nFileIndexHigh and FileIndexLow, all used to implement \"SameFile\" method.\nI am, probably, wrong, but I do not consider SameFile is that useful on\nwindows, so I am OK with it to be wrong sometimes. Mind you, this CL exposes\nwhole \"delayed\" ByHandleFileInformation struct now, but I am prepared to change\nthat. Perhaps, instead of exposing \"delayed\" ByHandleFileInformation, I could\nhave a function that allows to compare 2 syscall.Stat_t for \"SameFile\".\n\n> It looks like the difference between ByHandleFileInformation and\n> Win32FileAttributeData/Win32finddata is that the latter pair omits\n> VolumeSerialNumber, NumberOfLinks, FileIndexHigh, and FileIndexLow. \n> \n> Since all three get used as FileInfo, my suggestion would be to give up on the\n> extra fields in ByHandleFileInformation and the simulated Stat_t and use a\n> Win32FileAttributeData as the official underlying sys type. It is possible to\n> construct one of those from any of the other forms, and that seems like a better\n> name for an API than Win32finddata.\n\nSure we could use syscall.Win32FileAttributeData instead of syscall.Stat_t, but\n- then we assume that it is ok to convert appropriate fields of ByHandleFileInformation\nand Win32finddata into Win32FileAttributeData (which it, probably, is ok);\n- how do you propose to use Win32FileAttributeData to implement \"SameFile\"?\n\n> The alternative would be to change the code that currently gets a\n> Win32FileAttributeData or a Win32finddata to do an extra\n> Open+GetFileInformationByHandle+Close for each FileInfo. That seems too\n> expensive.\n\nI agree about expensive. I would like to avoid it at all cost.\n\nThank you for input.\n\nAlex",
			"disapproval": false,
			"date": "2013-01-09 03:58:10.259280",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "My suggestion is to use Win32FileAttributeData in the sys field, and\r\nthen to change os.SameFile to pass the file names to the sameFile\r\nhelper. On Windows, the implementation of sameFile can use the\r\nByHandleInformation calls and ignore the sys.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-01-09 19:47:30.905830",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-14 05:38:12.613560",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"alex.brainman@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6972047/diff/21001/src/pkg/os/types_notwin.go\nFile src/pkg/os/types_notwin.go (right):\n\nhttps://codereview.appspot.com/6972047/diff/21001/src/pkg/os/types_notwin.go#newcode27\nsrc/pkg/os/types_notwin.go:27: func samefile(fs1, fs2 *fileStat) bool {\nsamefile calls sameFile?  gross.\n\nhttps://codereview.appspot.com/6972047/diff/21001/src/pkg/os/types_windows.go\nFile src/pkg/os/types_windows.go (right):\n\nhttps://codereview.appspot.com/6972047/diff/21001/src/pkg/os/types_windows.go#newcode90\nsrc/pkg/os/types_windows.go:90: e := s1.loadFileId()\nlooks like a lot of syscalls for a SameFile operation.  locks + alloc + CreateFile + GetFileInformationByHandle + CloseHandle, all twice.\n\nIf that's the only way, I guess.",
			"disapproval": false,
			"date": "2013-01-15 17:45:20.293910",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6972047/diff/21001/src/pkg/os/types_notwin.go\nFile src/pkg/os/types_notwin.go (right):\n\nhttps://codereview.appspot.com/6972047/diff/21001/src/pkg/os/types_notwin.go#newcode27\nsrc/pkg/os/types_notwin.go:27: func samefile(fs1, fs2 *fileStat) bool {\nI know, I am very dull person. Make me an offer.\n\nhttps://codereview.appspot.com/6972047/diff/21001/src/pkg/os/types_windows.go\nFile src/pkg/os/types_windows.go (right):\n\nhttps://codereview.appspot.com/6972047/diff/21001/src/pkg/os/types_windows.go#newcode90\nsrc/pkg/os/types_windows.go:90: e := s1.loadFileId()\nIt is expensive. But I do not see any better ways. This code is not changing - it is how it was before this CL. Again, suggestions are welcome.",
			"disapproval": false,
			"date": "2013-01-16 03:09:44.542940",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"alex.brainman@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm a little lost. Why do we have SameFile calling samefile calling sameFile instead of just SameFile calling sameFile?",
			"disapproval": false,
			"date": "2013-01-18 22:42:45.621920",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "unix sameFile needs access to (*fileStat).sys while windows one needs access to fileStat. samefile does the translation. If not samefile, I would have to make SameFile os specific.\n\nI am not happy with the name myself. Please, suggest an alternative approach.\n\nAlex",
			"disapproval": false,
			"date": "2013-01-18 23:26:30.046600",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "How about having just the current SameFile and the existing sameFile but\r\nwith different arguments:\r\n\r\nfunc sameFile(f1, f2 *fileStat) bool\r\n\r\nThe Unix ones can use f1.sys and f2.sys.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-01-18 23:29:00.780300",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/18 23:29:00, rsc wrote:\n> How about having just the current SameFile and the existing sameFile but\n> with different arguments:\n> \n> func sameFile(f1, f2 *fileStat) bool\n> \n> The Unix ones can use f1.sys and f2.sys.\n> \n\nThat should be fine with me. But current contents of SameFile (about 5 lines) will have to move into multiple sameFile implementations. Are you PK with that?\n\nAlex",
			"disapproval": false,
			"date": "2013-01-18 23:33:43.551140",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think that we should have (bold is changed):\r\n\r\nfunc SameFile(fi1, fi2 FileInfo) bool {\r\nfs1, ok1 := fi1.(*fileStat)\r\nfs2, ok2 := fi2.(*fileStat)\r\nif !ok1 || !ok2 {\r\nreturn false\r\n}\r\nreturn sameFile(*fs1, fs2*)\r\n}\r\n\r\nThe change is only to pass fs1, fs2 instead of fs1.sys, fs2.sys.\r\n\r\nThen a typical non-Windows sameFile (this is the Linux one) would change to:\r\n\r\nfunc sameFile(*fi1, fi2 *fileStat*) bool {\r\nstat1 := *fi1.sys*.(*syscall.Stat_t)\r\nstat2 := *fi2.sys*.(*syscall.Stat_t)\r\nreturn stat1.Dev == stat2.Dev && stat1.Ino == stat2.Ino\r\n}\r\n\r\nOn Windows, having access to the file fileStat instead of just the winSys\r\nshould suffice to do the necessary stat.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-01-22 18:29:05.420940",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I realized what to do after my last email (brain freezes are common with me). I will do the changes next week, when I am back home.\n\nAlex",
			"disapproval": false,
			"date": "2013-01-22 21:08:25.919110",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-30 06:33:02.641260",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=77ff44d04248 ***\n\nos: provide access to file LastAccessTime and CreationTime on windows\n\nFixes issue 4569.\n\nR=bradfitz, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/6972047\n\nhttps://codereview.appspot.com/6972047/diff/35001/src/pkg/os/types_windows.go\nFile src/pkg/os/types_windows.go (right):\n\nhttps://codereview.appspot.com/6972047/diff/35001/src/pkg/os/types_windows.go#newcode92\nsrc/pkg/os/types_windows.go:92: panic(e)\nOn 2013/01/30 16:03:10, rsc wrote:\n> Library routines do not panic under reasonable circumstances. Doing a Stat +\n> Remove + SameFile will trigger this. Returning false is fine.\n\nDone.",
			"disapproval": false,
			"date": "2013-01-31 06:18:08.263180",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"alex.brainman@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6972047/diff/35001/src/pkg/os/types_windows.go\nFile src/pkg/os/types_windows.go (right):\n\nhttps://codereview.appspot.com/6972047/diff/35001/src/pkg/os/types_windows.go#newcode92\nsrc/pkg/os/types_windows.go:92: panic(e)\nLibrary routines do not panic under reasonable circumstances. Doing a Stat + Remove + SameFile will trigger this. Returning false is fine.",
			"disapproval": false,
			"date": "2013-01-30 16:03:10.105580",
			"approval": true
		}
	],
	"owner_email": "alex.brainman@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "brainman",
	"subject": "code review 6972047: os: provide access to file LastAccessTime and CreationT...",
	"created": "2012-12-20 05:18:27.220560",
	"patchsets": [
		1,
		2001,
		5001,
		11001,
		13004,
		21001,
		35001,
		40001
	],
	"modified": "2013-01-31 06:18:11.091360",
	"closed": true,
	"issue": 6972047
}