{
	"description": "go/doc: don't synthesize code for examples that are not self-contained\n\nFixes issue 4309.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-12-19 23:22:17.909700",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It looks like the current code does:\n\n1. Find top-level names in this file.\n2. Reject examples using those names.\n3. Ignore mentions of predefined identifiers like int.\n4. Assume all other undefined names refer to imports.\n5. Introduce those imports.\n\nThis seems backward to me. Among other things it does not handle uses of top-level names declared elsewhere.\n\nInstead of all this guessing, why not:\n\n1. Look at import list to make list of packages (assume last element = package name).\n2. Make list of top-level names used by code.\n3. Exclude predefined names (int)\n4. Exclude imported packages (but remember that the import is needed).\n5. Reject any other use of an unknown name.\n\nRuss",
			"disapproval": false,
			"date": "2012-12-20 19:28:23.290030",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The second list seems incomplete. How does it determine which are top-level\r\nnames?\r\n\r\nHow about:\r\n\r\n1. Walk the example function, noting:\r\n 1a. names declared inside the function\r\n 1b. otherwise resolved names\r\n 1c. unresolved names\r\n2. If anything in 1c, bail.\r\n3. Exclude predefined identifiers from 1b\r\n4. Exclude imported packages from 1b (but note them)\r\n5. If anything remains in 1b, bail\r\n6. Synthesize new file, import list, and main function.\r\n\r\n?\r\n",
			"disapproval": false,
			"date": "2012-12-20 19:48:25.435000",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> How about:\r\n>\r\n> 1. Walk the example function, noting:\r\n>  1a. names declared inside the function\r\n>  1b. otherwise resolved names\r\n>  1c. unresolved names\r\n> 2. If anything in 1c, bail.\r\n> 3. Exclude predefined identifiers from 1b\r\n> 4. Exclude imported packages from 1b (but note them)\r\n> 5. If anything remains in 1b, bail\r\n> 6. Synthesize new file, import list, and main function.\r\n\r\nI see: I was assuming that id.Obj==nil for top-level names, but it's\r\nonly nil for top-level unresolved names. So you do need some way to\r\ntell whether a resolved name points to a declared top-level name or\r\nnot. That's fine.\r\nNote that if you are looking at a single file, predefined identifiers\r\nlike bool are in 1c (they have id.Obj==nil) not 1b. They are not\r\nresolved because you need information from the other files to make the\r\nfinal decision: if you have var int = 1 in some other file in the same\r\npackage, then 'int' refers to that.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-12-20 19:57:15.377520",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 21 December 2012 06:57, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> That's fine.\r\n\r\n\r\nSo should I just stick with what I have, or rewrite a bit to get what I\r\nproposed?\r\n\r\nThe one thing I haven't tried yet is looking for declarations. Shouldn't be\r\na big deal.\r\n",
			"disapproval": false,
			"date": "2012-12-20 20:00:27.302740",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nIt looks fine now that I know you have to handle those top-level resolved names.\r\n",
			"disapproval": false,
			"date": "2012-12-20 20:04:50.577840",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=41b82b6b2ccd ***\n\ngo/doc: don't synthesize code for examples that are not self-contained\n\nFixes issue 4309.\n\nR=golang-dev, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/6974045",
			"disapproval": false,
			"date": "2012-12-20 20:06:47.285730",
			"approval": false
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 6974045: go/doc: don't synthesize code for examples that are not...",
	"created": "2012-12-19 23:22:08.532790",
	"patchsets": [
		1,
		8001
	],
	"modified": "2012-12-20 20:06:50.639920",
	"closed": true,
	"issue": 6974045
}