{
	"description": "go.crypto/openpgp: test that hashes are compiled in before using them.\n\nPreviously, if Encrypt decided to use a hash function that wasn't\ncompiled in then it would panic.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\n\r\n\r\nOn Mon, Aug 5, 2013 at 11:19 AM, <agl@golang.org> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/12055043/diff/14002/**openpgp/s2k/s2k.go<https://codereview.appspot.com/12055043/diff/14002/openpgp/s2k/s2k.go>\r\n> File openpgp/s2k/s2k.go (right):\r\n>\r\n> https://codereview.appspot.**com/12055043/diff/14002/**\r\n> openpgp/s2k/s2k.go#newcode177<https://codereview.appspot.com/12055043/diff/14002/openpgp/s2k/s2k.go#newcode177>\r\n> openpgp/s2k/s2k.go:177: // given OpenPGP hash id, or panics if id is\r\n> unknown.\r\n> On 2013/08/05 16:57:51, bradfitz wrote:\r\n>\r\n>> HashIdToHash and HashToHashId return comma-ok. Shouldn't this, for\r\n>>\r\n> consistency?\r\n>\r\n> Done.\r\n>\r\n> https://codereview.appspot.**com/12055043/<https://codereview.appspot.com/12055043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-05 18:21:30.664070",
			"approval": true
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.crypto/",
			"disapproval": false,
			"date": "2013-08-05 15:18:35.517320",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nBut pretty weak error message.  \"Wanted hash function 7 in this case\"  =>\r\nSeven?  (or whatever)\r\n\r\nCan we get a table of common one's names and what Go package to _ import?\r\n\r\n\r\n\r\n\r\nOn Mon, Aug 5, 2013 at 8:18 AM, <agl@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go.**crypto/<https://code.google.com/p/go.crypto/>\r\n>\r\n>\r\n> Description:\r\n> go.crypto/openpgp: test that hashes are compiled in before using them.\r\n>\r\n> Previously, if Encrypt decided to use a hash function that wasn't\r\n> compiled in then it would panic.\r\n>\r\n> Please review this at https://codereview.appspot.**com/12055043/<https://codereview.appspot.com/12055043/>\r\n>\r\n> Affected files:\r\n>   M openpgp/write.go\r\n>\r\n>\r\n> Index: openpgp/write.go\r\n> ==============================**==============================**=======\r\n> --- a/openpgp/write.go\r\n> +++ b/openpgp/write.go\r\n> @@ -224,16 +224,27 @@\r\n>                 }\r\n>         }\r\n>\r\n> -       hashFunc := candidateHashes[0]\r\n> -       // If the hash specified by config is a candidate, we'll use that.\r\n> -       configuredHash := config.Hash()\r\n> -       for _, h := range candidateHashes {\r\n> -               if h == uint8(configuredHash) {\r\n> -                       hashFunc = h\r\n> +       var hash crypto.Hash\r\n> +       for _, hashId := range candidateHashes {\r\n> +               if h, ok := s2k.HashIdToHash(hashId); ok && h.Available() {\r\n> +                       hash = h\r\n>                         break\r\n>                 }\r\n>         }\r\n> -       hash, _ := s2k.HashIdToHash(hashFunc)\r\n> +\r\n> +       // If the hash specified by config is a candidate, we'll use that.\r\n> +       if configuredHash := config.Hash(); configuredHash.Available() {\r\n> +               for _, hashId := range candidateHashes {\r\n> +                       if h, ok := s2k.HashIdToHash(hashId); ok && h ==\r\n> configuredHash {\r\n> +                               hash = h\r\n> +                               break\r\n> +                       }\r\n> +               }\r\n> +       }\r\n> +\r\n> +       if hash == 0 {\r\n> +               return nil, errors.InvalidArgumentError(\"**cannot encrypt\r\n> because no candidate hash functions are compiled in. (Wanted hash function\r\n> \" + strconv.Itoa(int(**candidateHashes[0])) + \" in this case.)\")\r\n> +       }\r\n>\r\n>         symKey := make([]byte, cipher.KeySize())\r\n>         if _, err := io.ReadFull(config.Random(), symKey); err != nil {\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-05 15:20:26.862130",
			"approval": true
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/05 15:20:26, bradfitz wrote:\n> LGTM\n> \n> But pretty weak error message.  \"Wanted hash function 7 in this case\"  =>\n> Seven?  (or whatever)\n> \n> Can we get a table of common one's names and what Go package to _ import?\n\nHaving a table of package paths seems weird, but I've added a function to s2k to return the name of a hash.",
			"disapproval": false,
			"date": "2013-08-05 16:52:30.917280",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12055043/diff/14002/openpgp/s2k/s2k.go\nFile openpgp/s2k/s2k.go (right):\n\nhttps://codereview.appspot.com/12055043/diff/14002/openpgp/s2k/s2k.go#newcode177\nopenpgp/s2k/s2k.go:177: // given OpenPGP hash id, or panics if id is unknown.\nHashIdToHash and HashToHashId return comma-ok. Shouldn't this, for consistency?",
			"disapproval": false,
			"date": "2013-08-05 16:57:51.284210",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12055043/diff/14002/openpgp/s2k/s2k.go\nFile openpgp/s2k/s2k.go (right):\n\nhttps://codereview.appspot.com/12055043/diff/14002/openpgp/s2k/s2k.go#newcode177\nopenpgp/s2k/s2k.go:177: // given OpenPGP hash id, or panics if id is unknown.\nOn 2013/08/05 16:57:51, bradfitz wrote:\n> HashIdToHash and HashToHashId return comma-ok. Shouldn't this, for consistency?\n\nDone.",
			"disapproval": false,
			"date": "2013-08-05 18:19:15.584650",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=1747226a2f43&repo=crypto ***\n\ngo.crypto/openpgp: test that hashes are compiled in before using them.\n\nPreviously, if Encrypt decided to use a hash function that wasn't\ncompiled in then it would panic.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/12055043",
			"disapproval": false,
			"date": "2013-08-05 18:23:08.826340",
			"approval": false
		}
	],
	"owner_email": "agl@golang.org",
	"private": false,
	"base_url": "",
	"owner": "agl1",
	"subject": "code review 12055043: go.crypto/openpgp: test that hashes are compiled in bef...",
	"created": "2013-07-29 19:50:09.267770",
	"patchsets": [
		12001,
		15001,
		13002,
		21001,
		14002,
		13003,
		27001
	],
	"modified": "2013-08-05 18:23:10.110850",
	"closed": true,
	"issue": 12055043
}