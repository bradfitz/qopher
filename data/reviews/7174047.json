{
	"description": "syscall: (*Proc).Call should return nil error when no error occurs\nFixes issue 4686.",
	"cc": [
		"alex.brainman@gmail.com",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello alex.brainman@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-01-22 13:09:02.318410",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n",
			"disapproval": false,
			"date": "2013-01-22 19:04:54.207900",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Syscall returns an Errno.\r\nCall returns an error.\r\nA zero Errno should turn into a nil error, not a non-nil error containing a\r\nzero Errno.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-01-22 22:25:52.203170",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Why should we change Call behavior? It works just like Syscall now. Why change?\n\nAlex",
			"disapproval": false,
			"date": "2013-01-22 21:59:37.705350",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Windows API handling is done in 2 steps:\n1) test that the error occurred;\n2) determine the nature of error (GetLastError).\n\nThe step 1 is never about checking GetLastError value. Instead it is described by Windows API documentation. Unfortunetly, the method varies from one API to another. For example, http://play.golang.org/p/v2EAG6YwRK calls CreateFile and CloseHandle, and these check for first return parameter been equal to syscall.InvalidHandle and 0 correspondingly.\n\nIt is impossible to determine, if an Windows API failed or not \"in general\". An attempt to do so will lead to mistakes and confusion.\n\nI suspect, the reason for your CL was a mistake of error handling somewhere - perhaps you were checking for (*Proc).Call error by \"if err != nil ...\". But injecting nil as return value in random situations will not help. I think, it muddies the waters further by pretending to fix something that cannot be fixed.\n\nI think, we need better documentation for both (*Proc).Call and Syscall... My fault. I will try to do that.\n\nAlex",
			"disapproval": false,
			"date": "2013-01-30 01:11:56.438860",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jan 30, 2013 at 9:11 AM, <alex.brainman@gmail.com> wrote:\r\n\r\n> Windows API handling is done in 2 steps:\r\n> 1) test that the error occurred;\r\n> 2) determine the nature of error (GetLastError).\r\n>\r\nwait, this is how Unix deals with errors.\r\nwe first check if a return value < 0, and if it is, see errno to get the\r\nreal cause\r\nof error.\r\n\r\nAnd, to model this, cgo (windows' syscall is unix's syscall + function part\r\nof cgo)\r\nintroduce this:\r\nreturnValue, err := C.somefunc()\r\nand err is nil if errno == 0.\r\n\r\nIt's the user's responsibility to verify he needs to use err, so in this\r\nregard,\r\nmy proposal brought windows' syscall package in line with that of Unix,\r\nand removed the inconsistency.\r\n\r\n>\r\n> The step 1 is never about checking GetLastError value. Instead it is\r\n> described by Windows API documentation. Unfortunetly, the method varies\r\n> from one API to another. For example,\r\n> http://play.golang.org/p/**v2EAG6YwRK<http://play.golang.org/p/v2EAG6YwRK>calls CreateFile and CloseHandle,\r\n> and these check for first return parameter been equal to\r\n> syscall.InvalidHandle and 0 correspondingly.\r\n>\r\n> It is impossible to determine, if an Windows API failed or not \"in\r\n> general\". An attempt to do so will lead to mistakes and confusion.\r\n>\r\nyeah, this is true in Unix world also. you must first determine whether the\r\nreturn value\r\nindicates error, and then look at errno. but this has nothing to do with\r\nconverting\r\nerrno == 0 to a nil error.\r\n\r\n>\r\n> I suspect, the reason for your CL was a mistake of error handling\r\n> somewhere - perhaps you were checking for (*Proc).Call error by \"if err\r\n> != nil ...\". But injecting nil as return value in random situations will\r\n> not help. I think, it muddies the waters further by pretending to fix\r\n> something that cannot be fixed.\r\n>\r\nBut that's natural behavior for Go users, even if we add the note, you\r\nshould\r\ndetermine whether you need to check error, we still should do the 0 -> nil\r\nconversion.\r\n\r\n>\r\n> I think, we need better documentation for both (*Proc).Call and\r\n> Syscall... My fault. I will try to do that.\r\n>\r\nwe should do the docs changes no matter what.\r\n",
			"disapproval": false,
			"date": "2013-01-30 06:03:18.188210",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/30 06:03:18, minux wrote:\n> On Wed, Jan 30, 2013 at 9:11 AM, <mailto:alex.brainman@gmail.com> wrote:\n> \n> > Windows API handling is done in 2 steps:\n> > 1) test that the error occurred;\n> > 2) determine the nature of error (GetLastError).\n> >\n> wait, this is how Unix deals with errors.\n> we first check if a return value < 0, and if it is, see errno to get the\n> real cause\n> of error.\n> \n\nI didn't say that \"test that the error occurred\" == \"return value < 0\". I do not know enough about cgo to argue, but \"return value < 0\" is general enough to detect if error occurred. Unfortunately, there is no such test for Windows: sometimes it would be \"return value == 0\", sometimes it would be \"return value == -1\", sometimes it would be \"return value != 0\", and so on. What are you proposing to do about that?\n\n> And, to model this, cgo (windows' syscall is unix's syscall + function part\n> of cgo)\n> introduce this:\n> returnValue, err := C.somefunc()\n> and err is nil if errno == 0.\n> \n> It's the user's responsibility to verify he needs to use err, so in this\n> regard,\n> my proposal brought windows' syscall package in line with that of Unix,\n> and removed the inconsistency.\n\nPerhaps, I am missing something here. But, if user needs to decide on their own if the error occurred without looking at err return value, what is point of setting it to nil when errno == 0 ?\n\n> yeah, this is true in Unix world also. you must first determine whether the\n> return value\n> indicates error, and then look at errno. but this has nothing to do with\n> converting\n> errno == 0 to a nil error.\n\nWhat is the point of converting errno == 0 into a nil error then?\n\n> But that's natural behavior for Go users, even if we add the note, you\n> should\n> determine whether you need to check error, we still should do the 0 -> nil\n> conversion.\n\nHow would that 0 -> nil conversion help anyone?\n\n> we should do the docs changes no matter what.\n\nAt least we agree on something :-)\n\nAlex",
			"disapproval": false,
			"date": "2013-01-30 06:51:22.752200",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jan 30, 2013 at 2:51 PM, <alex.brainman@gmail.com> wrote:\r\n\r\n> On 2013/01/30 06:03:18, minux wrote:\r\n>\r\n>> On Wed, Jan 30, 2013 at 9:11 AM, <mailto:alex.brainman@gmail.**com<alex.brainman@gmail.com>\r\n>> >\r\n>>\r\n> wrote:\r\n>\r\n>  > Windows API handling is done in 2 steps:\r\n>> > 1) test that the error occurred;\r\n>> > 2) determine the nature of error (GetLastError).\r\n>> >\r\n>> wait, this is how Unix deals with errors.\r\n>> we first check if a return value < 0, and if it is, see errno to get\r\n>>\r\n> the\r\n>\r\n>> real cause\r\n>> of error.\r\n>>\r\n>\r\n>\r\n> I didn't say that \"test that the error occurred\" == \"return value < 0\".\r\n> I do not know enough about cgo to argue, but \"return value < 0\" is\r\n> general enough to detect if error occurred. Unfortunately, there is no\r\n> such test for Windows: sometimes it would be \"return value == 0\",\r\n> sometimes it would be \"return value == -1\", sometimes it would be\r\n> \"return value != 0\", and so on. What are you proposing to do about that?\r\n\r\nwe don't need to do anything about that.\r\nWe just provide the return value and error to the user.\r\n\r\n>\r\n>  And, to model this, cgo (windows' syscall is unix's syscall + function\r\n>>\r\n> part\r\n>\r\n>> of cgo)\r\n>> introduce this:\r\n>> returnValue, err := C.somefunc()\r\n>> and err is nil if errno == 0.\r\n>>\r\n>\r\n>  It's the user's responsibility to verify he needs to use err, so in\r\n>>\r\n> this\r\n>\r\n>> regard,\r\n>> my proposal brought windows' syscall package in line with that of\r\n>>\r\n> Unix,\r\n>\r\n>> and removed the inconsistency.\r\n>>\r\n>\r\n> Perhaps, I am missing something here. But, if user needs to decide on\r\n> their own if the error occurred without looking at err return value,\r\n> what is point of setting it to nil when errno == 0 ?\r\n\r\nFor consistency. We don't wrap a errno meaning no error ocurrs in a error\r\nin other cases.\r\n\r\n>\r\n>  yeah, this is true in Unix world also. you must first determine\r\n>>\r\n> whether the\r\n>\r\n>> return value\r\n>> indicates error, and then look at errno. but this has nothing to do\r\n>>\r\n> with\r\n>\r\n>> converting\r\n>> errno == 0 to a nil error.\r\n>>\r\n>\r\n> What is the point of converting errno == 0 into a nil error then?\r\n>\r\n>\r\n>  But that's natural behavior for Go users, even if we add the note, you\r\n>> should\r\n>> determine whether you need to check error, we still should do the 0 ->\r\n>>\r\n> nil\r\n>\r\n>> conversion.\r\n>>\r\n>\r\n> How would that 0 -> nil conversion help anyone?\r\n\r\nI think the real solution to this problem is to change the type of return\r\nvalue of\r\nCall to Errno instead of error.\r\nThis is an incompatible change, but at least will make its semantics clear.\r\n",
			"disapproval": false,
			"date": "2013-01-30 07:40:25.439980",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but wait for Alex.\n\nI think the issue can stay closed. It's unclear to me that this is even worth changing for Go 2.",
			"disapproval": false,
			"date": "2013-01-30 17:03:08.259800",
			"approval": true
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/30 07:40:25, minux wrote:\n> ... \n> we don't need to do anything about that.\n> We just provide the return value and error to the user.\n\nWell, if we don't do anything about that, I suggest we should not fiddle with returned error value either. Otherwise it is confusing: if user is dealing with errors, they should be dealing with errors; if we do, then we should do. \n\n> > ...\n> > Perhaps, I am missing something here. But, if user needs to decide on\n> > their own if the error occurred without looking at err return value,\n> > what is point of setting it to nil when errno == 0 ?\n> \n> For consistency. We don't wrap a errno meaning no error ocurrs in a error\n> in other cases.\n\nSure. We do it everywhere else. But I don't see how we can implement \"error occured\" detection here. Therefore I don't want to pretend that we can by fiddling with returned error value.\n\n> \n> I think the real solution to this problem is to change the type of return\n> value of\n> Call to Errno instead of error.\n\nYes, that would provide clearer semantics. But I don't see what we have as some kind of deal breaker. It is inconsistent with the way we do errors everywhere else, but it is nature of the beast. We should document that and move on. Perhaps, we could provide name for error return value of \"lasterror\" (or something) to give more clues to the user.\n\n> This is an incompatible change, ...\n\nIt is not going to happend. We won't be allowed to make that change. Especially so we would have to change both (*Proc).Call and Syscall....\n\nAlex",
			"disapproval": false,
			"date": "2013-01-30 08:56:18.383500",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThank you.\n\nI think you should put similar comments (bar \"number of args\" and \"error is always non-nil\") next to Syscall too.\n\nPerhaps, we could rename err parameter into lasterr to provide better hint for the user.\n\nFeel free to ignore all my comments.\n\nAlex\n\nhttps://codereview.appspot.com/7174047/diff/21001/src/pkg/syscall/dll_windows.go\nFile src/pkg/syscall/dll_windows.go (left):\n\nhttps://codereview.appspot.com/7174047/diff/21001/src/pkg/syscall/dll_windows.go#oldcode118\nsrc/pkg/syscall/dll_windows.go:118: func (p *Proc) Call(a ...uintptr) (r1, r2 uintptr, err error) {\ns/err /lasterr /\n\nhttps://codereview.appspot.com/7174047/diff/21001/src/pkg/syscall/dll_windows.go\nFile src/pkg/syscall/dll_windows.go (right):\n\nhttps://codereview.appspot.com/7174047/diff/21001/src/pkg/syscall/dll_windows.go#newcode118\nsrc/pkg/syscall/dll_windows.go:118: // arguments. And if it's call with more than 15, it will panic.\n// Call executes procedure p with arguments a. It will panic, if more then 15\n// arguments are supplied.\n\nhttps://codereview.appspot.com/7174047/diff/21001/src/pkg/syscall/dll_windows.go#newcode120\nsrc/pkg/syscall/dll_windows.go:120: // The returned error is always non-nil, constructed from the result of GetLastError.\n// The returned lasterr is value of GetLastError after the call and is always non-nil.\n\nhttps://codereview.appspot.com/7174047/diff/21001/src/pkg/syscall/dll_windows.go#newcode123\nsrc/pkg/syscall/dll_windows.go:123: // the error. The error will be guaranteed to contain syscall.Errno.\ns/he error/he lasterr/g\n\nhttps://codereview.appspot.com/7174047/diff/21001/src/pkg/syscall/dll_windows.go#newcode269\nsrc/pkg/syscall/dll_windows.go:269: // Call executes procedure p with arguments a. It only supports no more than 15\nAll the same as above.",
			"disapproval": false,
			"date": "2013-01-30 23:32:41.392940",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Let's just add some documentation to Call.\r\n\r\n// The returned error is always non-nil, constructed from the result of\r\nGetLastError.\r\n// Callers must inspect the primary return value to decide whether an error\r\noccurred\r\n// (according to the semantics of the specific function being called)\r\nbefore consulting\r\n// the error.\r\n",
			"disapproval": false,
			"date": "2013-01-30 16:05:45.832580",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\r\n\r\nOn Thu, Jan 31, 2013 at 12:05 AM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> Let's just add some documentation to Call.\r\n>\r\n> // The returned error is always non-nil, constructed from the result of\r\n> GetLastError.\r\n> // Callers must inspect the primary return value to decide whether an\r\n> error occurred\r\n> // (according to the semantics of the specific function being called)\r\n> before consulting\r\n> // the error.\r\n>\r\nShould I re-open the issue after submission to remind us to fix\r\nthe type for the return value to Errno instead of error in Go 2?\r\n",
			"disapproval": false,
			"date": "2013-01-30 16:29:52.933880",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jan 31, 2013 at 1:03 AM, <rsc@golang.org> wrote:\r\n\r\n> I think the issue can stay closed. It's unclear to me that this is even\r\n> worth changing for Go 2.\r\n>\r\nmy reason:\r\nwe're returning an error just for people to type assert into Errno.\r\nwhy wrap it inside error in the first place?\r\n\r\nPS: I also take the time to document that Call only takes no more than\r\n15 arguments and it will panic if provided more.\r\n",
			"disapproval": false,
			"date": "2013-01-30 17:10:02.554080",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=21bc891b0d08 ***\n\nsyscall: (*Proc).Call should return nil error when no error occurs\nFixes issue 4686.\n\nR=alex.brainman, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/7174047\n\nhttps://codereview.appspot.com/7174047/diff/21001/src/pkg/syscall/dll_windows.go\nFile src/pkg/syscall/dll_windows.go (right):\n\nhttps://codereview.appspot.com/7174047/diff/21001/src/pkg/syscall/dll_windows.go#newcode118\nsrc/pkg/syscall/dll_windows.go:118: // arguments. And if it's call with more than 15, it will panic.\nOn 2013/01/30 23:32:41, brainman wrote:\n> // Call executes procedure p with arguments a. It will panic, if more then 15\n> // arguments are supplied.\nDone.\n\nhttps://codereview.appspot.com/7174047/diff/21001/src/pkg/syscall/dll_windows.go#newcode120\nsrc/pkg/syscall/dll_windows.go:120: // The returned error is always non-nil, constructed from the result of GetLastError.\nOn 2013/01/30 23:32:41, brainman wrote:\n> // The returned lasterr is value of GetLastError after the call and is always\n> non-nil.\ni think error is ok here, because we're talking about the error-typed\nresult value, not about the name of the error.\n\nhttps://codereview.appspot.com/7174047/diff/21001/src/pkg/syscall/dll_windows.go#newcode123\nsrc/pkg/syscall/dll_windows.go:123: // the error. The error will be guaranteed to contain syscall.Errno.\nOn 2013/01/30 23:32:41, brainman wrote:\n> s/he error/he lasterr/g\nsee above.",
			"disapproval": false,
			"date": "2013-02-02 17:42:33.256050",
			"approval": false
		}
	],
	"owner_email": "minux.ma@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "minux",
	"subject": "code review 7174047: syscall: (*Proc).Call should return nil error when no e...",
	"created": "2013-01-22 12:54:14.010210",
	"patchsets": [
		1,
		2001,
		7001,
		19001,
		10002,
		21001,
		24001,
		27001
	],
	"modified": "2013-02-02 17:42:38.869560",
	"closed": true,
	"issue": 7174047
}