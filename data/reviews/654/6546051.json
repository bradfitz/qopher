{
	"description": "go.crypto/ssh: use new error message type when authentication fails.\n\nFixes issue 3995.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"agl@golang.org",
		"dave@cheney.net"
	],
	"messages": [
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@golang.org, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-21 15:42:33.729030",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It is very probable that I don't understand the problem. Maybe if you\r\nproposed a CL that decoded the disconnect method.\r\n\r\nSorry for the briefness of my reply, there is only a wafer of Wifi available.\r\n\r\nOn Sun, Sep 23, 2012 at 12:54 AM, Daniel Theophanes <kardianos@gmail.com> wrote:\r\n> On Sat, Sep 22, 2012 at 4:57 AM,  <dave@cheney.net> wrote:\r\n>>> I have tested this against other ssh clients, and this is the\r\n>>\r\n>> practical behavior\r\n>>>\r\n>>> for an operational ssh server.\r\n>>\r\n>>\r\n>>> However, after inspecting the go ssh client code, it appears that the\r\n>>> Client.Close() closes the TCP layer, but doesn't send the disconnect\r\n>>\r\n>> message\r\n>>>\r\n>>> (inspection was short, I could have missed it.) Because we are not\r\n>>\r\n>> unmarshaling\r\n>>>\r\n>>> the disconnect message, we also don't have access to the disconnect\r\n>>\r\n>> reason code\r\n>>>\r\n>>> (RFC 4253 11.1).\r\n>>\r\n>>\r\n>> The TCP close signal can come from many sources, it may be that the\r\n>> client is not following the proper disconnection protocol, but I don't\r\n>> think that is the issue here.\r\n>>\r\n>>\r\n>>> This change is an improvement for my own code. I would prefer to make\r\n>>\r\n>> this\r\n>>>\r\n>>> change now, then file an issue to think about a solution that would\r\n>>\r\n>> test the\r\n>>>\r\n>>> disconnect code as well.\r\n>>> ...\r\n>>\r\n>>\r\n>>> The changes for Client to support sending a disconnect message would\r\n>>\r\n>> probably\r\n>>>\r\n>>> mean sending the disconnect message in ClientConn.handshake(). Without\r\n>>\r\n>> this\r\n>>>\r\n>>> change, it would be difficult to test.\r\n>>\r\n>>\r\n>> Rereading 4253, it is arguable that our client is not doing the right\r\n>> thing, ie, it should be sending an SSH_DISCONNECT message before handing\r\n>> up. This makes me less keen to accept this patch as it patching the\r\n>> server to work around a problem in the client. The proper fix should be\r\n>> in client.go, trasport.go or common.go.\r\n>>\r\n>> https://codereview.appspot.com/6546051/\r\n>\r\n> I think you are misunderstanding the problem here. This patch has\r\n> nothing to do with patching the client. The only reason the Go ssh\r\n> client is involved is for your request for a test. My response is, in\r\n> the current state of things, that can't be done. This patch fixes a\r\n> problem with the server. A non-Go SSH Client will send a disconnect\r\n> message when the Go server currently tries to unmarshal an auth\r\n> attempt message. This usually happens when the client runs out of\r\n> authentication methods. I  don't see how the code can be in a\r\n> different place.\r\n",
			"disapproval": false,
			"date": "2012-09-23 00:58:02.032420",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"kardianos@gmail.com",
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-09-21 12:55:41.475200",
			"approval": true
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"kardianos@gmail.com",
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6546051/diff/3/ssh/common.go\nFile ssh/common.go (right):\n\nhttps://codereview.appspot.com/6546051/diff/3/ssh/common.go#newcode92\nssh/common.go:92: // AuthenticationFailedError results when a client disconnects rather then\n\"rather than attempting another authentication\"\n\nIs this an error that I expect to see as a server? As a return value from Handshake? Probably worth mentioning.",
			"disapproval": false,
			"date": "2012-09-20 20:57:46.602260",
			"approval": true
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/21 15:49:32, dfc wrote:\n> On 2012/09/21 15:42:33, kardia wrote:\n> > Hello mailto:agl@golang.org, mailto:dave@cheney.net (cc:\n> mailto:golang-dev@googlegroups.com),\n> > \n> > Please take another look.\n> \n> I'm not sure that you can infer msgDisconnect == AuthFailure in this case, can\n> you add a test to expose this behaviour ?\n\nI have tested this against other ssh clients, and this is the practical behavior for an operational ssh server.\n\nHowever, after inspecting the go ssh client code, it appears that the Client.Close() closes the TCP layer, but doesn't send the disconnect message (inspection was short, I could have missed it.) Because we are not unmarshaling the disconnect message, we also don't have access to the disconnect reason code (RFC 4253 11.1).\n\nThere may be some messages, such as disconnect, that we may ALWAYs want to parse, then return that message in the UnexpectedMessageError struct.\n...\n\nThis change is an improvement for my own code. I would prefer to make this change now, then file an issue to think about a solution that would test the disconnect code as well.\n...\n\nThe changes for Client to support sending a disconnect message would probably mean sending the disconnect message in ClientConn.handshake(). Without this change, it would be difficult to test.",
			"disapproval": false,
			"date": "2012-09-21 16:45:27.765530",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@golang.org, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttp://code.google.com/p/go.crypto",
			"disapproval": false,
			"date": "2012-09-20 20:50:57.487680",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"kardianos@gmail.com",
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/21 12:55:41, agl1 wrote:\n> LGTM\n\nNOT LGTM.\n\nvar AuthenticationFailedError = errors.New(\"ssh: authentication failed\")",
			"disapproval": true,
			"date": "2012-09-21 12:57:15.690680",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@golang.org, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-20 21:14:07.374910",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"kardianos@gmail.com",
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/21 15:42:33, kardia wrote:\n> Hello mailto:agl@golang.org, mailto:dave@cheney.net (cc: mailto:golang-dev@googlegroups.com),\n> \n> Please take another look.\n\nI'm not sure that you can infer msgDisconnect == AuthFailure in this case, can you add a test to expose this behaviour ?",
			"disapproval": false,
			"date": "2012-09-21 15:49:32.217130",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"kardianos@gmail.com",
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> I have tested this against other ssh clients, and this is the practical behavior\n> for an operational ssh server.\n> \n> However, after inspecting the go ssh client code, it appears that the\n> Client.Close() closes the TCP layer, but doesn't send the disconnect message\n> (inspection was short, I could have missed it.) Because we are not unmarshaling\n> the disconnect message, we also don't have access to the disconnect reason code\n> (RFC 4253 11.1).\n\nThe TCP close signal can come from many sources, it may be that the client is not following the proper disconnection protocol, but I don't think that is the issue here.\n\n> This change is an improvement for my own code. I would prefer to make this\n> change now, then file an issue to think about a solution that would test the\n> disconnect code as well.\n> ...\n> \n> The changes for Client to support sending a disconnect message would probably\n> mean sending the disconnect message in ClientConn.handshake(). Without this\n> change, it would be difficult to test.\n\nRereading 4253, it is arguable that our client is not doing the right thing, ie, it should be sending an SSH_DISCONNECT message before handing up. This makes me less keen to accept this patch as it patching the server to work around a problem in the client. The proper fix should be in client.go, trasport.go or common.go.",
			"disapproval": false,
			"date": "2012-09-22 11:57:27.322060",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Sep 22, 2012 at 4:57 AM,  <dave@cheney.net> wrote:\r\n>> I have tested this against other ssh clients, and this is the\r\n>\r\n> practical behavior\r\n>>\r\n>> for an operational ssh server.\r\n>\r\n>\r\n>> However, after inspecting the go ssh client code, it appears that the\r\n>> Client.Close() closes the TCP layer, but doesn't send the disconnect\r\n>\r\n> message\r\n>>\r\n>> (inspection was short, I could have missed it.) Because we are not\r\n>\r\n> unmarshaling\r\n>>\r\n>> the disconnect message, we also don't have access to the disconnect\r\n>\r\n> reason code\r\n>>\r\n>> (RFC 4253 11.1).\r\n>\r\n>\r\n> The TCP close signal can come from many sources, it may be that the\r\n> client is not following the proper disconnection protocol, but I don't\r\n> think that is the issue here.\r\n>\r\n>\r\n>> This change is an improvement for my own code. I would prefer to make\r\n>\r\n> this\r\n>>\r\n>> change now, then file an issue to think about a solution that would\r\n>\r\n> test the\r\n>>\r\n>> disconnect code as well.\r\n>> ...\r\n>\r\n>\r\n>> The changes for Client to support sending a disconnect message would\r\n>\r\n> probably\r\n>>\r\n>> mean sending the disconnect message in ClientConn.handshake(). Without\r\n>\r\n> this\r\n>>\r\n>> change, it would be difficult to test.\r\n>\r\n>\r\n> Rereading 4253, it is arguable that our client is not doing the right\r\n> thing, ie, it should be sending an SSH_DISCONNECT message before handing\r\n> up. This makes me less keen to accept this patch as it patching the\r\n> server to work around a problem in the client. The proper fix should be\r\n> in client.go, trasport.go or common.go.\r\n>\r\n> https://codereview.appspot.com/6546051/\r\n\r\nI think you are misunderstanding the problem here. This patch has\r\nnothing to do with patching the client. The only reason the Go ssh\r\nclient is involved is for your request for a test. My response is, in\r\nthe current state of things, that can't be done. This patch fixes a\r\nproblem with the server. A non-Go SSH Client will send a disconnect\r\nmessage when the Go server currently tries to unmarshal an auth\r\nattempt message. This usually happens when the client runs out of\r\nauthentication methods. I  don't see how the code can be in a\r\ndifferent place.\r\n",
			"disapproval": false,
			"date": "2012-09-22 14:54:48.677810",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"kardianos@gmail.com",
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello,\n\nI would like to apologise for my previous comments on this issue. At best I don't understand the problem as stated so I am in a poor position to judge the proposed solution.\n\nI think that it is appropriate that I recuse myself, and leave agl to have the final decision on this proposal.\n\nCheers\n\nDave",
			"disapproval": false,
			"date": "2012-10-03 11:06:23.686860",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"kardianos@gmail.com",
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks Dave,\n\nI think we did cross wires, but your questioning was ultimately useful. Although I think this change by itself is incrementally fine, it feels like the proper solution might be a bit deeper then what is here right now. Still thinking, probably be back in a day or so.\n\n \nOn 2012/10/03 11:06:23, dfc wrote:\n> Hello,\n> \n> I would like to apologise for my previous comments on this issue. At best I\n> don't understand the problem as stated so I am in a poor position to judge the\n> proposed solution.\n> \n> I think that it is appropriate that I recuse myself, and leave agl to have the\n> final decision on this proposal.\n> \n> Cheers\n> \n> Dave",
			"disapproval": false,
			"date": "2012-10-04 06:36:03.735440",
			"approval": false
		}
	],
	"owner_email": "kardianos@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "kardia",
	"subject": "code review 6546051: go.crypto/ssh: use new error message type when authenti...",
	"created": "2012-09-20 20:50:01.931240",
	"patchsets": [
		1,
		2001,
		3,
		4003,
		5004,
		8004
	],
	"modified": "2012-10-04 06:36:03.735440",
	"closed": false,
	"issue": 6546051
}