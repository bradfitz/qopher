{
	"description": "bufio: Implement io.WriterTo for (*Reader)\n\nThis is part 1 of 2 for issue 4028\n\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkReaderCopyOptimal          33495         9849  -70.60%\nBenchmarkReaderCopyUnoptimal        70631        27041  -61.72%\nBenchmarkReaderCopyOldImpl          51407        52970   +3.04%\n\nUpdate issue 4028",
	"cc": [
		"dave@cheney.net",
		"nigeltao@golang.org",
		"rsc@golang.org",
		"bradfitz@golang.org",
		"rogpeppe@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"mchaten@gmail.com",
				"dave@cheney.net",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6548047/diff/3/src/pkg/bufio/bufio.go\nFile src/pkg/bufio/bufio.go (right):\n\nhttps://codereview.appspot.com/6548047/diff/3/src/pkg/bufio/bufio.go#newcode378\nsrc/pkg/bufio/bufio.go:378: // WriteTo first writes the contents of the buffer into the writer,\nOn 2012/09/24 15:34:09, rsc wrote:\n> (mostly lifted from io.WriterTo's docs)\n\nCan this paragraph just be: ?\n\n// WriteTo implements io.WriterTo.\n\nI've seen that style in a few places.",
			"disapproval": false,
			"date": "2012-09-24 15:41:53.182760",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Updates issue 4028.\r\n\r\nOn Fri, Sep 21, 2012 at 6:52 PM,  <mchaten@gmail.com> wrote:\r\n> On 2012/09/21 08:51:30, chaten wrote:\r\n>>\r\n>> Hello mailto:golang-dev@googlegroups.com,\r\n>\r\n>\r\n>> I'd like you to review this change to\r\n>> https://code.google.com/p/go/\r\n>\r\n>\r\n> Benchmark Data:\r\n> benchmark                       old ns/op    new ns/op    delta\r\n> BenchmarkReaderCopyOptimal          33495         9849  -70.60%\r\n> BenchmarkReaderCopyUnoptimal        70631        27041  -61.72%\r\n> BenchmarkReaderCopyOldImpl          51407        52970   +3.04%\r\n>\r\n>\r\n> http://codereview.appspot.com/6548047/\r\n",
			"disapproval": false,
			"date": "2012-09-21 08:55:45.543130",
			"approval": false
		},
		{
			"sender": "mchaten@gmail.com",
			"recipients": [
				"mchaten@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-09-21 08:51:30.778390",
			"approval": false
		},
		{
			"sender": "mchaten@gmail.com",
			"recipients": [
				"mchaten@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/21 08:51:30, chaten wrote:\n> Hello mailto:golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go/\n\nBenchmark Data:\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkReaderCopyOptimal          33495         9849  -70.60%\nBenchmarkReaderCopyUnoptimal        70631        27041  -61.72%\nBenchmarkReaderCopyOldImpl          51407        52970   +3.04%",
			"disapproval": false,
			"date": "2012-09-21 08:52:37.375960",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 21 September 2012 18:55, Dave Cheney <dave@cheney.net> wrote:\r\n> Updates issue 4028.\r\n\r\nDrop the s: \"Update issue 4028\".\r\n\r\nhttp://code.google.com/p/support/wiki/IssueTracker#Integration_with_version_control\r\n",
			"disapproval": false,
			"date": "2012-09-24 04:03:13.935740",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mchaten@gmail.com",
				"dave@cheney.net",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6548047/diff/3/src/pkg/bufio/bufio.go\nFile src/pkg/bufio/bufio.go (right):\n\nhttp://codereview.appspot.com/6548047/diff/3/src/pkg/bufio/bufio.go#newcode378\nsrc/pkg/bufio/bufio.go:378: // WriteTo first writes the contents of the buffer into the writer,\nThis describes how good the implementation is. The reader should assume it is good. The coment should say what the function's effect is. \n\n// WriteTo copies data from the reader into the writer w until there's no more\n// data to write or an error occurs. It returns the number of bytes written\n// and the encountered error, if any.\n\n(mostly lifted from io.WriterTo's docs)\n\nhttp://codereview.appspot.com/6548047/diff/3/src/pkg/bufio/bufio.go#newcode382\nsrc/pkg/bufio/bufio.go:382: func (b *Reader) WriteTo(wtr io.Writer) (n int64, err error) {\nWriters are almost always called w, not wtr.\n\nhttp://codereview.appspot.com/6548047/diff/3/src/pkg/bufio/bufio.go#newcode388\nsrc/pkg/bufio/bufio.go:388: if writerTo, ok := b.rd.(io.WriterTo); ok {\ns/writerTo/r/\nIt's still a reader first and foremost.\n\nhttp://codereview.appspot.com/6548047/diff/3/src/pkg/bufio/bufio.go#newcode389\nsrc/pkg/bufio/bufio.go:389: j, err := writerTo.WriteTo(wtr)\nj is a little strange for a count, especially since there's no i. The next thing after n is usually nn or m in this code.\n\nm, err := r.WriteTo(w)\nn += m\nreturn n, err\n\nand then no else.\ngolang.org/doc/effective_go.html#if\n\nhttp://codereview.appspot.com/6548047/diff/3/src/pkg/bufio/bufio.go#newcode396\nsrc/pkg/bufio/bufio.go:396: b.fill()\nThe sequencing here is a little tricky. You want to delay processing the read error until after you write what did get read, as a write error then would correspond to an earlier input byte than the read error. I think this would work:\n\nfor b.fill(); b.r < b.w; b.fill() {\n    m, err := b.writeTo(w)\n    n += m\n    if err != nil {\n        return n, err\n    }\n}\nif b.err == io.EOF {\n    b.err = nil\n}\nreturn n, b.readErr()\n\nhttp://codereview.appspot.com/6548047/diff/3/src/pkg/bufio/bufio.go#newcode416\nsrc/pkg/bufio/bufio.go:416: func (b *Reader) writeBufTo(wtr io.Writer) (int64, error) {\nwriteTo is fine. the 'Buf' is unnecessary.\nAlso just call the writer w.\n\nhttp://codereview.appspot.com/6548047/diff/3/src/pkg/bufio/bufio_test.go\nFile src/pkg/bufio/bufio_test.go (right):\n\nhttp://codereview.appspot.com/6548047/diff/3/src/pkg/bufio/bufio_test.go#newcode767\nsrc/pkg/bufio/bufio_test.go:767: input := make([]byte, 8096)\nInteresting constant. Did you mean 8<<10 (8192)?\n\nhttp://codereview.appspot.com/6548047/diff/3/src/pkg/bufio/bufio_test.go#newcode771\nsrc/pkg/bufio/bufio_test.go:771: inputRdr := bytes.NewBuffer(input)\nYou never use this variable again. Eliminate it:\n\nr := NewReader(bytes.NewReader(input))\n\nhttp://codereview.appspot.com/6548047/diff/3/src/pkg/bufio/bufio_test.go#newcode772\nsrc/pkg/bufio/bufio_test.go:772: outputWtr := new(bytes.Buffer)\nw := new(bytes.Buffer)\n\nhttp://codereview.appspot.com/6548047/diff/3/src/pkg/bufio/bufio_test.go#newcode775\nsrc/pkg/bufio/bufio_test.go:775: \nCan collapse the next 8 lines into\n\nif n != int64(len(input)) || err != nil {\n    t.Fatalf(\"r.WriteTo(w) = %d, %v, want %d, nil\", n, err, len(input))\n}\n\nhttp://codereview.appspot.com/6548047/diff/3/src/pkg/bufio/bufio_test.go#newcode786\nsrc/pkg/bufio/bufio_test.go:786: t.Errorf(\"Invalid byte written at index %d. Expected %d, was %d.\", i, input[i], val)\nEcho the values back in the same order as the comparison, and use Go syntax when possible, like in the new Fatalf in the last comment.\nt.Errorf(\"after write: out[%#x] = %#x, want %#x\", i, val, input[i])\n\nhttp://codereview.appspot.com/6548047/diff/3/src/pkg/bufio/bufio_test.go#newcode791\nsrc/pkg/bufio/bufio_test.go:791: //Indirect reader masks any other interface a reader might implement, like io.WriterTo\nPlease call this 'onlyReader'. The type name should appear verbatim, without additional spaces or case changes:\n\n// An onlyReader only implements io.Reader, no matter what other methods\n// the underlying implementation may have.",
			"disapproval": false,
			"date": "2012-09-24 15:34:08.924320",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sure.\r\n",
			"disapproval": false,
			"date": "2012-09-24 16:49:29.347940",
			"approval": false
		},
		{
			"sender": "mchaten@gmail.com",
			"recipients": [
				"mchaten@gmail.com",
				"dave@cheney.net",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6548047/diff/3/src/pkg/bufio/bufio.go\nFile src/pkg/bufio/bufio.go (right):\n\nhttp://codereview.appspot.com/6548047/diff/3/src/pkg/bufio/bufio.go#newcode378\nsrc/pkg/bufio/bufio.go:378: // WriteTo first writes the contents of the buffer into the writer,\nOn 2012/09/24 15:34:09, rsc wrote:\n> This describes how good the implementation is. The reader should assume it is\n> good. The coment should say what the function's effect is. \n> \n> // WriteTo copies data from the reader into the writer w until there's no more\n> // data to write or an error occurs. It returns the number of bytes written\n> // and the encountered error, if any.\n> \n> (mostly lifted from io.WriterTo's docs)\n> \n\nDidn't notice Tip io.WriterTo had docs, will go with brad's suggestion.\n\nhttp://codereview.appspot.com/6548047/diff/3/src/pkg/bufio/bufio.go#newcode382\nsrc/pkg/bufio/bufio.go:382: func (b *Reader) WriteTo(wtr io.Writer) (n int64, err error) {\nOn 2012/09/24 15:34:09, rsc wrote:\n> Writers are almost always called w, not wtr.\n\nNoted\n\nhttp://codereview.appspot.com/6548047/diff/3/src/pkg/bufio/bufio.go#newcode396\nsrc/pkg/bufio/bufio.go:396: b.fill()\nOn 2012/09/24 15:34:09, rsc wrote:\n> The sequencing here is a little tricky. You want to delay processing the read\n> error until after you write what did get read, as a write error then would\n> correspond to an earlier input byte than the read error. I think this would\n> work:\n> \n> for b.fill(); b.r < b.w; b.fill() {\n>     m, err := b.writeTo(w)\n>     n += m\n>     if err != nil {\n>         return n, err\n>     }\n> }\n> if b.err == io.EOF {\n>     b.err = nil\n> }\n> return n, b.readErr()\n\nFixed and added tests for the various permutations of errors.\n\nhttp://codereview.appspot.com/6548047/diff/3/src/pkg/bufio/bufio.go#newcode416\nsrc/pkg/bufio/bufio.go:416: func (b *Reader) writeBufTo(wtr io.Writer) (int64, error) {\nOn 2012/09/24 15:34:09, rsc wrote:\n> writeTo is fine. the 'Buf' is unnecessary.\n> Also just call the writer w.\n\nI'll rename it, but I don't think its the right decision. I feel like the WriteTo code is less clear now that there is a private writeTo method that only deals with the buffer. writeBufTo tells the reader that it only is dealing with what is buffered.\n\nhttp://codereview.appspot.com/6548047/diff/3/src/pkg/bufio/bufio_test.go\nFile src/pkg/bufio/bufio_test.go (right):\n\nhttp://codereview.appspot.com/6548047/diff/3/src/pkg/bufio/bufio_test.go#newcode767\nsrc/pkg/bufio/bufio_test.go:767: input := make([]byte, 8096)\nOn 2012/09/24 15:34:09, rsc wrote:\n> Interesting constant. Did you mean 8<<10 (8192)?\n\nUgh, thats embarrassing. Fixed.\n\nhttp://codereview.appspot.com/6548047/diff/3/src/pkg/bufio/bufio_test.go#newcode771\nsrc/pkg/bufio/bufio_test.go:771: inputRdr := bytes.NewBuffer(input)\nOn 2012/09/24 15:34:09, rsc wrote:\n> You never use this variable again. Eliminate it:\n> \n> r := NewReader(bytes.NewReader(input))\n\nDone\n\nhttp://codereview.appspot.com/6548047/diff/3/src/pkg/bufio/bufio_test.go#newcode775\nsrc/pkg/bufio/bufio_test.go:775: \nOn 2012/09/24 15:34:09, rsc wrote:\n> Can collapse the next 8 lines into\n> \n> if n != int64(len(input)) || err != nil {\n>     t.Fatalf(\"r.WriteTo(w) = %d, %v, want %d, nil\", n, err, len(input))\n> }\n\nMoved n,err := into the initializer block of the if as well\n\nhttp://codereview.appspot.com/6548047/diff/3/src/pkg/bufio/bufio_test.go#newcode786\nsrc/pkg/bufio/bufio_test.go:786: t.Errorf(\"Invalid byte written at index %d. Expected %d, was %d.\", i, input[i], val)\nOn 2012/09/24 15:34:09, rsc wrote:\n> Echo the values back in the same order as the comparison, and use Go syntax when\n> possible, like in the new Fatalf in the last comment.\n> t.Errorf(\"after write: out[%#x] = %#x, want %#x\", i, val, input[i])\n\nDone\n\nhttp://codereview.appspot.com/6548047/diff/3/src/pkg/bufio/bufio_test.go#newcode791\nsrc/pkg/bufio/bufio_test.go:791: //Indirect reader masks any other interface a reader might implement, like io.WriterTo\nOn 2012/09/24 15:34:09, rsc wrote:\n> Please call this 'onlyReader'. The type name should appear verbatim, without\n> additional spaces or case changes:\n> \n> // An onlyReader only implements io.Reader, no matter what other methods\n> // the underlying implementation may have.\n\nDone and ditto for the writer.",
			"disapproval": false,
			"date": "2012-09-25 04:42:06.477180",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"mchaten@gmail.com",
				"dave@cheney.net",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\n\nPlease change the changelist description: s/Issue/issue/ in \"Update Issue 4028\".\n\nIt'd also be nice if the description gave the benchmark numbers.\n\nhttps://codereview.appspot.com/6548047/diff/11002/src/pkg/bufio/bufio_test.go\nFile src/pkg/bufio/bufio_test.go (right):\n\nhttps://codereview.appspot.com/6548047/diff/11002/src/pkg/bufio/bufio_test.go#newcode768\nsrc/pkg/bufio/bufio_test.go:768: for i, _ := range input {\nfor i := range input {\n\nhttps://codereview.appspot.com/6548047/diff/11002/src/pkg/bufio/bufio_test.go#newcode814\nsrc/pkg/bufio/bufio_test.go:814: // An onlyReader only implements io.Reader, no matter what other methods the underlying implementation may have\nAdd a full stop to complete the sentence.\n\nSimilarly below.",
			"disapproval": false,
			"date": "2012-09-27 01:37:45.829280",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"mchaten@gmail.com",
				"dave@cheney.net",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'll make a couple of fixes and submit...\n\nhttps://codereview.appspot.com/6548047/diff/16002/src/pkg/bufio/bufio_test.go\nFile src/pkg/bufio/bufio_test.go (right):\n\nhttps://codereview.appspot.com/6548047/diff/16002/src/pkg/bufio/bufio_test.go#newcode769\nsrc/pkg/bufio/bufio_test.go:769: input[i] = byte(len(input) % 256)\nThe RHS is always zero. Even after you fix that with s/len(input)/i/, the input repeats itself every 256 bytes, which might mask a subtle bug if the WriteTo buffers are a multiple of 256 bytes. I'd do something like\n\nfor i := range input {\n  // 101 and 251 are arbitrary prime numbers.\n  // The idea is to create an input sequence\n  // which doesn't repeat itself too frequently.\n  input[i] = byte(i % 251)\n  if i%101 == 0 {\n    input[i] ^= byte(i/101)\n  }\n}\n\nhttps://codereview.appspot.com/6548047/diff/16002/src/pkg/bufio/bufio_test.go#newcode779\nsrc/pkg/bufio/bufio_test.go:779: t.Errorf(\"after write: out[%#x] = %#x, want %#x\", i, val, input[i])\nI'd change the first \"%#x\" to \"%d\".",
			"disapproval": false,
			"date": "2012-09-27 06:29:17.237280",
			"approval": false
		},
		{
			"sender": "mchaten@gmail.com",
			"recipients": [
				"mchaten@gmail.com",
				"dave@cheney.net",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6548047/diff/16001/src/pkg/bufio/bufio.go\nFile src/pkg/bufio/bufio.go (right):\n\nhttp://codereview.appspot.com/6548047/diff/16001/src/pkg/bufio/bufio.go#newcode384\nsrc/pkg/bufio/bufio.go:384: }\nOn 2012/09/25 11:08:38, rog wrote:\n> i wonder if it might be good to be robust in the case where the underlying\n> writer returns n<len(data) but does not return an error. if that happens here\n> and the writer implements WriteTo, we'll lose data in a hard-to-diagnose way. a\n> check in writeTo would be sufficient.\nHmm, I don't know the correct solution here for writers that are buggy. Do you know of any examples elsewhere in the stdlib that work around something like this?\n\nOne possible solution would be to keep writing until everything is written, an error is returned or no data is written.\n\nAnother one would be to return io.ErrShortWrite if n != (w-r).\n\nOr I could just panic.\n\nInterested to hear your thoughts on this, I'll update the existing CR with your other feedback in the meantime.",
			"disapproval": false,
			"date": "2012-09-26 05:52:26.248150",
			"approval": false
		},
		{
			"sender": "mchaten@gmail.com",
			"recipients": [
				"mchaten@gmail.com",
				"dave@cheney.net",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, nigeltao@golang.org, rsc@golang.org, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-25 05:03:38.989750",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"mchaten@gmail.com",
				"dave@cheney.net",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6548047/diff/16001/src/pkg/bufio/bufio.go\nFile src/pkg/bufio/bufio.go (right):\n\nhttp://codereview.appspot.com/6548047/diff/16001/src/pkg/bufio/bufio.go#newcode379\nsrc/pkg/bufio/bufio.go:379: \nd\n\nhttp://codereview.appspot.com/6548047/diff/16001/src/pkg/bufio/bufio.go#newcode384\nsrc/pkg/bufio/bufio.go:384: }\ni wonder if it might be good to be robust in the case where the underlying writer returns n<len(data) but does not return an error. if that happens here and the writer implements WriteTo, we'll lose data in a hard-to-diagnose way. a check in writeTo would be sufficient.\n\nhttp://codereview.appspot.com/6548047/diff/16001/src/pkg/bufio/bufio.go#newcode408\nsrc/pkg/bufio/bufio.go:408: func (b *Reader) writeTo(w io.Writer) (int64, error) {\nbike shedding i know, but...\ns/writeTo/writeBuf/\n\nit really isn't anything like the other WriteTo method.",
			"disapproval": false,
			"date": "2012-09-25 11:08:37.798070",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"mchaten@gmail.com",
				"dave@cheney.net",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6548047/diff/11002/src/pkg/bufio/bufio.go\nFile src/pkg/bufio/bufio.go (right):\n\nhttps://codereview.appspot.com/6548047/diff/11002/src/pkg/bufio/bufio.go#newcode378\nsrc/pkg/bufio/bufio.go:378: // WriteTo implements io.WriterTo\nAdd a full stop.\n\nhttps://codereview.appspot.com/6548047/diff/11002/src/pkg/bufio/bufio.go#newcode406\nsrc/pkg/bufio/bufio.go:406: // writeBuf writes the Reader's buffer to the writer\nAdd a full stop.",
			"disapproval": false,
			"date": "2012-09-27 01:38:13.193540",
			"approval": false
		},
		{
			"sender": "mchaten@gmail.com",
			"recipients": [
				"mchaten@gmail.com",
				"dave@cheney.net",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, nigeltao@golang.org, rsc@golang.org, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-25 05:04:02.085260",
			"approval": false
		},
		{
			"sender": "mchaten@gmail.com",
			"recipients": [
				"mchaten@gmail.com",
				"dave@cheney.net",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, nigeltao@golang.org, rsc@golang.org, bradfitz@golang.org, rogpeppe@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-26 05:58:16.203850",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"mchaten@gmail.com",
				"dave@cheney.net",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=2c0e435aa879 ***\n\nbufio: Implement io.WriterTo for (*Reader)\n\nThis is part 1 of 2 for issue 4028\n\nbenchmark                       old ns/op    new ns/op    delta\nBenchmarkReaderCopyOptimal          33495         9849  -70.60%\nBenchmarkReaderCopyUnoptimal        70631        27041  -61.72%\nBenchmarkReaderCopyOldImpl          51407        52970   +3.04%\n\nUpdate issue 4028\n\nR=dave, nigeltao, rsc, bradfitz, rogpeppe\nCC=golang-dev\nhttp://codereview.appspot.com/6548047\n\nCommitter: Nigel Tao <nigeltao@golang.org>",
			"disapproval": false,
			"date": "2012-09-27 06:31:25.116830",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mchaten@gmail.com",
				"dave@cheney.net",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "looks fine to me. nigel or rog?",
			"disapproval": false,
			"date": "2012-09-26 18:43:48.706120",
			"approval": false
		},
		{
			"sender": "mchaten@gmail.com",
			"recipients": [
				"mchaten@gmail.com",
				"dave@cheney.net",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dave@cheney.net, nigeltao@golang.org, rsc@golang.org, bradfitz@golang.org, rogpeppe@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-27 04:27:37.498740",
			"approval": false
		}
	],
	"owner_email": "mchaten@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "chaten",
	"subject": "code review 6548047: bufio: Implement io.WriterTo for (*Reader)",
	"created": "2012-09-21 08:33:01.208230",
	"patchsets": [
		1,
		2001,
		3,
		12001,
		16001,
		11002,
		16002
	],
	"modified": "2012-09-27 07:49:01.183830",
	"closed": true,
	"issue": 6548047
}