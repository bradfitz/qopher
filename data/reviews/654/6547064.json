{
	"description": "cmd/8g: don't create redundant temporaries in bgen.\n\nComparisons used to create temporaries for arguments\neven if they were already variables or addressable.\nRemoving the extra ones reduces pressure on regopt.\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkGobDecode         50787620     49908980   -1.73%\nBenchmarkGobEncode         19870190     19473030   -2.00%\nBenchmarkGzip            3214321000   3067929000   -4.55%\nBenchmarkGunzip           496792800    465828600   -6.23%\nBenchmarkJSONEncode       232524800    263864400  +13.48%\nBenchmarkJSONDecode       622038400    506600600  -18.56%\nBenchmarkMandelbrot200     23937310     45913060  +91.81%\nBenchmarkParse             14364450     13997010   -2.56%\nBenchmarkRevcomp         6919028000   6480009000   -6.35%\nBenchmarkTemplate         594458800    539528200   -9.24%\n\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkGobDecode            15.11        15.38    1.02x\nBenchmarkGobEncode            38.63        39.42    1.02x\nBenchmarkGzip                  6.04         6.33    1.05x\nBenchmarkGunzip               39.06        41.66    1.07x\nBenchmarkJSONEncode            8.35         7.35    0.88x\nBenchmarkJSONDecode            3.12         3.83    1.23x\nBenchmarkParse                 4.03         4.14    1.03x\nBenchmarkRevcomp              36.73        39.22    1.07x\nBenchmarkTemplate              3.26         3.60    1.10x",
	"cc": [
		"mtj@google.com",
		"daniel.morsing@gmail.com",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-09-23 09:15:45.616320",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "BenchmarkMandelbrot200     23937310     45913060  +91.81%\r\n\r\n???\r\n\r\nOn Sun, Sep 23, 2012 at 5:15 AM,  <remyoudompheng@gmail.com> wrote:\r\n> BenchmarkMandelbrot200     23937310     45913060  +91.81%\r\n\r\n\r\n\r\n-- \r\nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n650-335-5765\r\n",
			"disapproval": false,
			"date": "2012-09-23 09:17:57.228570",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ah, maybe a cache collision:\n\nNow on my Core 2 Quad:\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkMandelbrot200     19004500     35397380  +86.26%\n\nAfter adding \"var A [48]byte; _ = A\" at top of the BenchmarkMandelbrot200 function:\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkMandelbrot200     13397590     12407690   -7.39%",
			"disapproval": false,
			"date": "2012-09-23 09:51:03.760940",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Some notes:\n* the benchmarks were done on a Core Duo Mobile T2300 (1.66GHz). Results are similar on a Core 2 Quad with GOARCH=386\n* the Mandelbrot regression is a mystery to me. I wonder what is the issue but I'm not sure it is relevant since x87 arithmetic will be removed\n* the JSON benchmarks are flaky as usual due to moving stack boundaries.\n\nSome interesting stack size reductions:\n\nBefore\n< src/pkg/time/format.go:101) TEXT    nextStdChunk+0(SB),$2232-28\n< src/pkg/time/format.go:259) TEXT    match+0(SB),$24-20\n< src/pkg/time/format.go:288) TEXT    appendUint+0(SB),$208-32\n< src/pkg/time/format.go:376) TEXT    Time.Format+0(SB),$1204-32\n< src/pkg/time/format.go:642) TEXT    Parse+0(SB),$2012-40\n< src/pkg/time/format.go:989) TEXT    ParseDuration+0(SB),$404-24\n\nAfter\n> src/pkg/time/format.go:101) TEXT    nextStdChunk+0(SB),$1684-28\n> src/pkg/time/format.go:259) TEXT    match+0(SB),$0-20\n> src/pkg/time/format.go:288) TEXT    appendUint+0(SB),$164-32\n> src/pkg/time/format.go:376) TEXT    Time.Format+0(SB),$960-32\n> src/pkg/time/format.go:642) TEXT    Parse+0(SB),$1608-40\n> src/pkg/time/format.go:989) TEXT    ParseDuration+0(SB),$312-24",
			"disapproval": false,
			"date": "2012-09-23 09:26:30.105950",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"mtj@google.com",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FWIW, here are my numbers for a core i5 ivy bridge\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17    3258965000   3186988000   -2.21%\nBenchmarkFannkuch11      4158159000   3718785000  -10.57%\nBenchmarkGobDecode         17433820     16863610   -3.27%\nBenchmarkGobEncode          6190964      5851658   -5.48%\nBenchmarkGzip            1288106000   1210740000   -6.01%\nBenchmarkGunzip           149991800    139396800   -7.06%\nBenchmarkJSONEncode        70442140     81534100  +15.75%\nBenchmarkJSONDecode       208782900    162309900  -22.26%\nBenchmarkMandelbrot200      7435862      7214852   -2.97%\nBenchmarkParse              4454478      4320996   -3.00%\nBenchmarkRevcomp         1563759000   1385049000  -11.43%\nBenchmarkTemplate         178690400    160645200  -10.10%\n\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkGobDecode            44.03        45.51    1.03x\nBenchmarkGobEncode           123.98       131.17    1.06x\nBenchmarkGzip                 15.06        16.03    1.06x\nBenchmarkGunzip              129.37       139.20    1.08x\nBenchmarkJSONEncode           27.55        23.80    0.86x\nBenchmarkJSONDecode            9.29        11.96    1.29x\nBenchmarkParse                13.00        13.40    1.03x\nBenchmarkRevcomp             162.54       183.51    1.13x\nBenchmarkTemplate             10.86        12.08    1.11x\n\ndefinitely some weirdness going on here.",
			"disapproval": false,
			"date": "2012-09-23 10:09:32.940140",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/23 09:17:57, mtj1 wrote:\n> BenchmarkMandelbrot200     23937310     45913060  +91.81%\n> \n> ???\n\nI don't understand what the issue is. The code looks exactly identical except for a simplified loop control and shuffled stack offsets.",
			"disapproval": false,
			"date": "2012-09-23 09:30:00.861990",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"mtj@google.com",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/23 10:58:24, mtj1 wrote:\n> No advice. Just intrigued. Strange. Possibly the smaller\n> function/stack in place A leads to unhappy stack splitting elsewhere?\n\nIt's not stack splitting: stack splitting would show up in the profile (it doesn't) and would give a consistent performance impact over architectures (but DMorsing's numbers contradict that).\n\nperf stat says that there are really less instructions executed, but at 0.3 instructions/cycle instead of 0.6.",
			"disapproval": false,
			"date": "2012-09-23 11:10:51.875850",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"mtj@google.com",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-09-24 16:28:26.768940",
			"approval": true
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "No advice. Just intrigued. Strange. Possibly the smaller\r\nfunction/stack in place A leads to unhappy stack splitting elsewhere?\r\n\r\nOn Sun, Sep 23, 2012 at 5:30 AM,  <remyoudompheng@gmail.com> wrote:\r\n> On 2012/09/23 09:17:57, mtj1 wrote:\r\n>>\r\n>> BenchmarkMandelbrot200     23937310     45913060  +91.81%\r\n>\r\n>\r\n>> ???\r\n>\r\n>\r\n> I don't understand what the issue is. The code looks exactly identical\r\n> except for a simplified loop control and shuffled stack offsets.\r\n>\r\n> http://codereview.appspot.com/6547064/\r\n\r\n\r\n\r\n-- \r\nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n650-335-5765\r\n",
			"disapproval": false,
			"date": "2012-09-23 10:58:24.186560",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"mtj@google.com",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=a14cfdc77323 ***\n\ncmd/8g: don't create redundant temporaries in bgen.\n\nComparisons used to create temporaries for arguments\neven if they were already variables or addressable.\nRemoving the extra ones reduces pressure on regopt.\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkGobDecode         50787620     49908980   -1.73%\nBenchmarkGobEncode         19870190     19473030   -2.00%\nBenchmarkGzip            3214321000   3067929000   -4.55%\nBenchmarkGunzip           496792800    465828600   -6.23%\nBenchmarkJSONEncode       232524800    263864400  +13.48%\nBenchmarkJSONDecode       622038400    506600600  -18.56%\nBenchmarkMandelbrot200     23937310     45913060  +91.81%\nBenchmarkParse             14364450     13997010   -2.56%\nBenchmarkRevcomp         6919028000   6480009000   -6.35%\nBenchmarkTemplate         594458800    539528200   -9.24%\n\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkGobDecode            15.11        15.38    1.02x\nBenchmarkGobEncode            38.63        39.42    1.02x\nBenchmarkGzip                  6.04         6.33    1.05x\nBenchmarkGunzip               39.06        41.66    1.07x\nBenchmarkJSONEncode            8.35         7.35    0.88x\nBenchmarkJSONDecode            3.12         3.83    1.23x\nBenchmarkParse                 4.03         4.14    1.03x\nBenchmarkRevcomp              36.73        39.22    1.07x\nBenchmarkTemplate              3.26         3.60    1.10x\n\nR=mtj, daniel.morsing, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6547064",
			"disapproval": false,
			"date": "2012-09-24 19:32:54.621400",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 6547064: cmd/8g: don't create redundant temporaries in bgen.",
	"created": "2012-09-23 09:15:31.745860",
	"patchsets": [
		1,
		2001,
		4001,
		11001
	],
	"modified": "2012-09-24 19:32:56.200850",
	"closed": true,
	"issue": 6547064
}