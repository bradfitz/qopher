{
	"description": "jwt: Add support for external signers, ID tokens.\n\nThis allows an external agent to be responsible for signing\nthe token generated by the package.  Extract expiry from\nreturned ID token if given.  Added and updated relevant\ntestcases.",
	"cc": [
		"adg@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "sledbetter@google.com",
			"recipients": [
				"sledbetter@google.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/goauth2/",
			"disapproval": false,
			"date": "2012-12-05 22:55:43.176850",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"sledbetter@google.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hey, thanks!\n\nCan you please sign the CLA, before I review this?\n\nhttp://golang.org/doc/contribute.html#Copyright",
			"disapproval": false,
			"date": "2012-12-07 03:39:24.192580",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"sledbetter@google.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6884049/diff/4001/oauth/jwt/jwt.go\nFile oauth/jwt/jwt.go (right):\n\nhttps://codereview.appspot.com/6884049/diff/4001/oauth/jwt/jwt.go#newcode38\noauth/jwt/jwt.go:38: package jwt\nCan I get an example of this new functionality in action?\n\nhttps://codereview.appspot.com/6884049/diff/4001/oauth/jwt/jwt.go#newcode76\noauth/jwt/jwt.go:76: func urlEncode(b []byte) string {\nlet's rename these to base64Encode and base64Decode, as that's what they do\n\nhttps://codereview.appspot.com/6884049/diff/4001/oauth/jwt/jwt.go#newcode205\noauth/jwt/jwt.go:205: if len(t.keyID) != 0 {\nheader := struct{\n  Algorithm string `json:\"alg\"`\n  Type string `json:\"typ\"`\n  KeyId string `json:\"kid,omitempty\"`\n}{stdAlgorithm, stdType, t.keyId}\nb, err := json.Marshal(header)\nif err != nil {\n  panic(err)\n}\nreturn urlEncode(b)\n\nhttps://codereview.appspot.com/6884049/diff/4001/oauth/jwt/jwt.go#newcode211\noauth/jwt/jwt.go:211: func (t *Token) SetKeyID(kid string) {\nWhy not just add a KeyID field if you want it to be mutable?\n\nhttps://codereview.appspot.com/6884049/diff/4001/oauth/jwt/jwt.go#newcode349\noauth/jwt/jwt.go:349: d, err := urlDecode(s[1])\nmust check if len(s) >=1 before using s[1]",
			"disapproval": false,
			"date": "2012-12-12 02:44:38.213850",
			"approval": false
		},
		{
			"sender": "sledbetter@google.com",
			"recipients": [
				"sledbetter@google.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6884049/diff/4001/oauth/jwt/jwt.go\nFile oauth/jwt/jwt.go (right):\n\nhttps://codereview.appspot.com/6884049/diff/4001/oauth/jwt/jwt.go#newcode38\noauth/jwt/jwt.go:38: package jwt\nOn 2012/12/12 02:44:38, adg wrote:\n> Can I get an example of this new functionality in action?\n\nI have a simple pass through example in jwt_test.go; I also added another example here in the comments.\n\nhttps://codereview.appspot.com/6884049/diff/4001/oauth/jwt/jwt.go#newcode76\noauth/jwt/jwt.go:76: func urlEncode(b []byte) string {\nOn 2012/12/12 02:44:38, adg wrote:\n> let's rename these to base64Encode and base64Decode, as that's what they do\n\nDone.\n\nhttps://codereview.appspot.com/6884049/diff/4001/oauth/jwt/jwt.go#newcode205\noauth/jwt/jwt.go:205: if len(t.keyID) != 0 {\nOn 2012/12/12 02:44:38, adg wrote:\n> header := struct{\n>   Algorithm string `json:\"alg\"`\n>   Type string `json:\"typ\"`\n>   KeyId string `json:\"kid,omitempty\"`\n> }{stdAlgorithm, stdType, t.keyId}\n> b, err := json.Marshal(header)\n> if err != nil {\n>   panic(err)\n> }\n> return urlEncode(b)\n\nI pulled out the Header struct and did more json.Marshal elsewhere to clean this up.\n\nhttps://codereview.appspot.com/6884049/diff/4001/oauth/jwt/jwt.go#newcode211\noauth/jwt/jwt.go:211: func (t *Token) SetKeyID(kid string) {\nOn 2012/12/12 02:44:38, adg wrote:\n> Why not just add a KeyID field if you want it to be mutable?\nGood point. Fixed.\n\nhttps://codereview.appspot.com/6884049/diff/4001/oauth/jwt/jwt.go#newcode349\noauth/jwt/jwt.go:349: d, err := urlDecode(s[1])\nOn 2012/12/12 02:44:38, adg wrote:\n> must check if len(s) >=1 before using s[1]\n\nDone.",
			"disapproval": false,
			"date": "2012-12-13 00:17:34.475940",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"sledbetter@google.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6884049/diff/12001/oauth/jwt/jwt.go\nFile oauth/jwt/jwt.go (right):\n\nhttps://codereview.appspot.com/6884049/diff/12001/oauth/jwt/jwt.go#newcode154\noauth/jwt/jwt.go:154: fmt.Printf(\"header=%q\", string(b))\nerrant debug print\n\nhttps://codereview.appspot.com/6884049/diff/12001/oauth/jwt/jwt.go#newcode226\noauth/jwt/jwt.go:226: \ndelete this line so the comment appears in godoc\n\nalso take a look at this package in godoc on your machine (godoc -http=localhost:6006) to sanity check your formatting etc",
			"disapproval": false,
			"date": "2012-12-13 04:00:32.168110",
			"approval": true
		},
		{
			"sender": "sledbetter@google.com",
			"recipients": [
				"sledbetter@google.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Updated changes. I tried to submit but am it complained about me not being in CONTRIBUTORS.",
			"disapproval": false,
			"date": "2012-12-17 21:17:08.244330",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"sledbetter@google.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/goauth2/source/detail?r=1f6bde75551d ***\n\njwt: Add support for external signers, ID tokens.\n\nThis allows an external agent to be responsible for signing\nthe token generated by the package.  Extract expiry from\nreturned ID token if given.  Added and updated relevant\ntestcases.\n\nR=adg\nCC=golang-dev\nhttps://codereview.appspot.com/6884049\n\nCommitter: Andrew Gerrand <adg@golang.org>",
			"disapproval": false,
			"date": "2012-12-18 23:58:30.646590",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "A snafu, sorry: https://codereview.appspot.com/6955043/\r\n",
			"disapproval": false,
			"date": "2012-12-18 23:58:43.352450",
			"approval": false
		}
	],
	"owner_email": "sledbetter@google.com",
	"private": false,
	"base_url": "",
	"owner": "sledbetter",
	"subject": "code review 6884049: jwt: Add support for external signers, ID tokens.",
	"created": "2012-12-05 22:35:22.256850",
	"patchsets": [
		1,
		2001,
		4001,
		12001,
		18001
	],
	"modified": "2012-12-19 01:15:25.453350",
	"closed": true,
	"issue": 6884049
}