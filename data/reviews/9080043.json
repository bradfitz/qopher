{
	"description": "cmd/ld: fix syms that are both cgo_import_static & cgo_import_dynamic\n\nThis is needed for SWIG when linking in internal mode.  In\ninternal mode if a symbol was cgo_import_static we used to\nforget that it was also cgo_import_dynamic.",
	"cc": [
		"rsc@golang.org",
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"alex.brainman@gmail.com"
	],
	"messages": [
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-05-01 14:27:13.039380",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n",
			"disapproval": false,
			"date": "2013-05-01 15:46:49.797670",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"iant@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-05-01 21:26:33.989680",
			"approval": true
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"iant@golang.org",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/02 01:53:38, iant wrote:\n> ... \n> Does it work if you change line 339 of ld/lib.c, which is currently this:\n> \t\t\t\tif(s->extname != nil && s->cgoexport == 0) {\n> to this\n> \t\t\t\tif(s->extname != nil && s->dynimplib != nil && s->cgoexport == 0) {\n> ?\n> \n\nIt does work.\n\n> #pragma cgo_import_static should only be relevant in external linking\n> mode.  #pragma dynimport is the same as #pragma cgo_import_dynamic,\n> and should only be relevant in internal linking mode.\n> \n> This change looks for cases where a symbol is both #pragma\n> cgo_import_static and #pragma cgo_import_dynamic.  Before this change,\n> when using internal linking mode, the fact that the symbol was\n> cgo_import_dynamic was being lost.  It's possible that my test for\n> whether the symbol was both cgo_import_static and cgo_import_dynamic\n> was wrong; my proposed change tightens that test.\n> \n\nThank you for explaining that. It clears my mind a little :-). Would you like me to send the change as I understand it, or will you do it yourself?\n\nAlex",
			"disapproval": false,
			"date": "2013-05-02 02:34:22.101810",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=9ca1e3485c93 ***\n\ncmd/ld: fix syms that are both cgo_import_static & cgo_import_dynamic\n\nThis is needed for SWIG when linking in internal mode.  In\ninternal mode if a symbol was cgo_import_static we used to\nforget that it was also cgo_import_dynamic.\n\nR=rsc, r\nCC=golang-dev\nhttps://codereview.appspot.com/9080043",
			"disapproval": false,
			"date": "2013-05-01 21:30:29.533870",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, May 1, 2013 at 7:34 PM,  <alex.brainman@gmail.com> wrote:\r\n>\r\n> Thank you for explaining that. It clears my mind a little :-). Would you\r\n> like me to send the change as I understand it, or will you do it\r\n> yourself?\r\n\r\nPlease go ahead if you have it ready.\r\n\r\nThanks.\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2013-05-02 02:48:18.718740",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"iant@golang.org",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It crashes in https://code.google.com/p/go/source/browse/src/cmd/ld/pe.c#201, because s->dynimplib is nil. Before this change the code was executed for\n\n#pragma dynimport runtime\u00b7CloseHandle CloseHandle \"kernel32.dll\"\n\nlines only. We are building \"import table\" in pe executable header. Windows program loader will use these to find dll functions our executable will need during its run.\n\nThese change also adds these lines\n\n#pragma cgo_import_static _cgo_db37227116aa_C2func_fopen\n\ninto our consideration. I do not understand the purpose of cgo_import_static, but these shouldn't really need to be considered here.\n\nNeed advice. What should I do? How should I distinguish these two now, so I can ignore the later?\n\nThank you.\n\nAlex",
			"disapproval": false,
			"date": "2013-05-02 00:56:53.415380",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, May 1, 2013 at 5:56 PM,  <alex.brainman@gmail.com> wrote:\r\n> It crashes in\r\n> https://code.google.com/p/go/source/browse/src/cmd/ld/pe.c#201, because\r\n> s->dynimplib is nil. Before this change the code was executed for\r\n>\r\n> #pragma dynimport runtime\u00b7CloseHandle CloseHandle \"kernel32.dll\"\r\n>\r\n> lines only. We are building \"import table\" in pe executable header.\r\n> Windows program loader will use these to find dll functions our\r\n> executable will need during its run.\r\n>\r\n> These change also adds these lines\r\n>\r\n> #pragma cgo_import_static _cgo_db37227116aa_C2func_fopen\r\n>\r\n> into our consideration. I do not understand the purpose of\r\n> cgo_import_static, but these shouldn't really need to be considered\r\n> here.\r\n>\r\n> Need advice. What should I do? How should I distinguish these two now,\r\n> so I can ignore the later?\r\n\r\nDoes it work if you change line 339 of ld/lib.c, which is currently this:\r\n\t\t\t\tif(s->extname != nil && s->cgoexport == 0) {\r\nto this\r\n\t\t\t\tif(s->extname != nil && s->dynimplib != nil && s->cgoexport == 0) {\r\n?\r\n\r\n#pragma cgo_import_static should only be relevant in external linking\r\nmode.  #pragma dynimport is the same as #pragma cgo_import_dynamic,\r\nand should only be relevant in internal linking mode.\r\n\r\nThis change looks for cases where a symbol is both #pragma\r\ncgo_import_static and #pragma cgo_import_dynamic.  Before this change,\r\nwhen using internal linking mode, the fact that the symbol was\r\ncgo_import_dynamic was being lost.  It's possible that my test for\r\nwhether the symbol was both cgo_import_static and cgo_import_dynamic\r\nwas wrong; my proposed change tightens that test.\r\n\r\nIf that doesn't help I don't know what is wrong but I hope this helps\r\nyou understand the issue further.\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2013-05-02 01:53:38.096010",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"iant@golang.org",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9110044/\n\nAlex",
			"disapproval": false,
			"date": "2013-05-02 03:01:12.125010",
			"approval": false
		}
	],
	"owner_email": "iant@golang.org",
	"private": false,
	"base_url": "",
	"owner": "iant",
	"subject": "code review 9080043: cmd/ld: fix syms that are both cgo_import_static & cgo_...",
	"created": "2013-05-01 14:27:10.520990",
	"patchsets": [
		1,
		5001
	],
	"modified": "2013-05-02 03:01:12.240980",
	"closed": true,
	"issue": 9080043
}