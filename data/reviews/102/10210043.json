{
	"description": "cmd/gc: save local var list before inlining\n\nThis avoids problems with inlining in genwrappers, which\noccurs after functions have been compiled.  Compiling a\nfunction may cause some unused local vars to be removed from\nthe list.  Since a local var may be unused due to\noptimization, it is possible that a removed local var winds up\nbeingused in the inlined version, in which case hilarity\nensues.\n\nFixes issue 5515.",
	"cc": [
		"golang-dev@googlegroups.com",
		"khr@google.com",
		"dave@cheney.net"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-06-12 01:49:59.826650",
			"approval": false
		},
		{
			"sender": "khr@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nWhy don't you have to do this for non-local functions?\r\n\r\n\r\nOn Tue, Jun 11, 2013 at 6:50 PM, <iant@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> cmd/gc: save local var list before inlining\r\n>\r\n> This avoids problems with inlining in genwrappers, which\r\n> occurs after functions have been compiled.  Compiling a\r\n> function may cause some unused local vars to be removed from\r\n> the list.  Since a local var may be unused due to\r\n> optimization, it is possible that a removed local var winds up\r\n> beingused in the inlined version, in which case hilarity\r\n> ensues.\r\n>\r\n> Fixes issue 5515.\r\n>\r\n> Please review this at https://codereview.appspot.**com/10210043/<https://codereview.appspot.com/10210043/>\r\n>\r\n> Affected files:\r\n>   M src/cmd/gc/go.h\r\n>   M src/cmd/gc/inl.c\r\n>   A test/fixedbugs/issue5515.go\r\n>\r\n>\r\n> Index: src/cmd/gc/go.h\r\n> ==============================**==============================**=======\r\n> --- a/src/cmd/gc/go.h\r\n> +++ b/src/cmd/gc/go.h\r\n> @@ -283,6 +283,7 @@\r\n>         NodeList*       cvars;  // closure params\r\n>         NodeList*       dcl;    // autodcl for this func/closure\r\n>         NodeList*       inl;    // copy of the body for use in inlining\r\n> +       NodeList*       inldcl; // copy of dcl for use in inlining\r\n>\r\n>         // OLITERAL/OREGISTER\r\n>         Val     val;\r\n> Index: src/cmd/gc/inl.c\r\n> ==============================**==============================**=======\r\n> --- a/src/cmd/gc/inl.c\r\n> +++ b/src/cmd/gc/inl.c\r\n> @@ -146,6 +146,7 @@\r\n>\r\n>         fn->nname->inl = fn->nbody;\r\n>         fn->nbody = inlcopylist(fn->nname->inl);\r\n> +       fn->nname->inldcl = inlcopylist(fn->nname->defn->**dcl);\r\n>\r\n>         // hack, TODO, check for better way to link method nodes back to\r\n> the thing with the ->inl\r\n>         // this is so export can find the body of a method\r\n> @@ -559,8 +560,8 @@\r\n>\r\n>  //dumplist(\"ninit pre\", ninit);\r\n>\r\n> -       if (fn->defn) // local function\r\n> -               dcl = fn->defn->dcl;\r\n> +       if(fn->defn) // local function\r\n> +               dcl = fn->inldcl;\r\n>         else // imported function\r\n>                 dcl = fn->dcl;\r\n>\r\n> Index: test/fixedbugs/issue5515.go\r\n> ==============================**==============================**=======\r\n> new file mode 100644\r\n> --- /dev/null\r\n> +++ b/test/fixedbugs/issue5515.go\r\n> @@ -0,0 +1,34 @@\r\n> +// run\r\n> +\r\n> +// Copyright 2013 The Go Authors. All rights reserved.\r\n> +// Use of this source code is governed by a BSD-style\r\n> +// license that can be found in the LICENSE file.\r\n> +\r\n> +// issue 5515: miscompilation doing inlining in generated method wrapper\r\n> +\r\n> +package main\r\n> +\r\n> +type T uint32\r\n> +\r\n> +func main() {\r\n> +        b := make([]T, 8)\r\n> +        b[0] = 0xdeadbeef\r\n> +        rs := Slice(b)\r\n> +        sort(rs)\r\n> +}\r\n> +\r\n> +type Slice []T\r\n> +\r\n> +func (s Slice) Swap(i, j int) {\r\n> +        tmp := s[i]\r\n> +        s[i] = s[j]\r\n> +        s[j] = tmp\r\n> +}\r\n> +\r\n> +type Interface interface {\r\n> +        Swap(i, j int)\r\n> +}\r\n> +\r\n> +func sort(data Interface) {\r\n> +        data.Swap(0, 4)\r\n> +}\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-06-12 01:55:13.084410",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"khr@google.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. Passes on linux/386, I guess the cost of another word in the Node structure is a reasonable tradeoff for the performance increase of the original change that exposed this problem.",
			"disapproval": false,
			"date": "2013-06-12 02:25:15.394040",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"khr@google.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/12 01:55:13, khr1 wrote:\n> LGTM\n> \n> Why don't you have to do this for non-local functions?\n\nBecause non-local functions aren't compiled, in the sense that they don't go through the compile function.  They are stored in a compiled form.  So their list of local variables is not mutated during the compilation process.",
			"disapproval": false,
			"date": "2013-06-12 03:22:57.640780",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"khr@google.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=b357e33bb414 ***\n\ncmd/gc: save local var list before inlining\n\nThis avoids problems with inlining in genwrappers, which\noccurs after functions have been compiled.  Compiling a\nfunction may cause some unused local vars to be removed from\nthe list.  Since a local var may be unused due to\noptimization, it is possible that a removed local var winds up\nbeingused in the inlined version, in which case hilarity\nensues.\n\nFixes issue 5515.\n\nR=golang-dev, khr, dave\nCC=golang-dev\nhttps://codereview.appspot.com/10210043",
			"disapproval": false,
			"date": "2013-06-12 03:23:26.000660",
			"approval": false
		}
	],
	"owner_email": "iant@golang.org",
	"private": false,
	"base_url": "",
	"owner": "iant",
	"subject": "code review 10210043: cmd/gc: save local var list before inlining",
	"created": "2013-06-12 01:49:42.073120",
	"patchsets": [
		1,
		5001
	],
	"modified": "2013-06-12 03:23:27.673750",
	"closed": true,
	"issue": 10210043
}