{
	"description": "runtime: preempt goroutines for GC\nThe last patch for preemptive scheduler,\nwith this change stoptheworld issues preemption\nrequests every 100us.\nUpdate issue 543.",
	"cc": [
		"golang-dev@googlegroups.com",
		"daniel.morsing@gmail.com",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-06-13 15:21:00.117190",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-06-13 15:21:05.628240",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/13 15:21:05, dvyukov wrote:\n> Hello mailto:golang-dev@googlegroups.com (cc: mailto:golang-dev@googlegroups.com),\n> \n> Please take another look.\n\nping",
			"disapproval": false,
			"date": "2013-06-17 11:32:19.993540",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Is this intended for go 1.2? I haven't seen its inclusion mentioned anywhere.\n\nI'll take a closer look later, but initial thoughts are that it would be a good idea to add a compile-time debug flag. Preemption is a big change to our current execution model and a flag will help once we start debugging after the freeze.",
			"disapproval": false,
			"date": "2013-06-17 11:54:24.855900",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jun 17, 2013 at 3:54 PM,  <daniel.morsing@gmail.com> wrote:\r\n> Is this intended for go 1.2? I haven't seen its inclusion mentioned\r\n> anywhere.\r\n\r\nYes, it's for Go1.2 and I believe it was mentioned in few places.\r\nThere was a discussion about design on golang-dev. And it should be in\r\nRuss' Go1.2. list of big things.\r\n\r\n\r\n> I'll take a closer look later, but initial thoughts are that it would be\r\n> a good idea to add a compile-time debug flag. Preemption is a big change\r\n> to our current execution model and a flag will help once we start\r\n> debugging after the freeze.\r\n\r\n\r\nIt's easy to turn off in source code. But if we will need to tell\r\npeople to turn it off and retest their crashing programs, then a const\r\nin runtime.h will be definitely better. Will do.\r\n",
			"disapproval": false,
			"date": "2013-06-17 12:01:31.831380",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Does this depend on any other pending CLs, or are all its prerequisites\r\nsubmitted already?\r\n\r\nThanks.\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-06-17 12:05:55.600660",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jun 17, 2013 at 4:05 PM, Russ Cox <rsc@golang.org> wrote:\r\n> Does this depend on any other pending CLs, or are all its prerequisites\r\n> submitted already?\r\n\r\n\r\nAll prerequisites are submitted. It includes a test that requires\r\npreemption and it passes with this change.\r\n",
			"disapproval": false,
			"date": "2013-06-17 12:07:47.721600",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm very happy to see this coming to completion, and I will review this CL.\r\nHowever, Rob and I keep running into mysterious runtime behaviors that need\r\nto be fixed before we can make more changes. I am afraid that the runtime\r\nis starting to spiral out of control, and we need to steady it a bit before\r\nmaking more changes. See golang.org/issue/5723 for details.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-06-17 12:31:03.950040",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, daniel.morsing@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-06-27 18:07:58.456990",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10264044/diff/45002/src/pkg/runtime/proc_test.go\nFile src/pkg/runtime/proc_test.go (right):\n\nhttps://codereview.appspot.com/10264044/diff/45002/src/pkg/runtime/proc_test.go#newcode160\nsrc/pkg/runtime/proc_test.go:160: // The function is used to test preemption at split stack checks.\n// Declaring a var avoids inlining at the call site.\n\nhttps://codereview.appspot.com/10264044/diff/45002/src/pkg/runtime/stack.c\nFile src/pkg/runtime/stack.c (right):\n\nhttps://codereview.appspot.com/10264044/diff/45002/src/pkg/runtime/stack.c#newcode254\nsrc/pkg/runtime/stack.c:254: gp->stackguard0 = gp->stackguard;\nDon't you want to do this in both cases?\nI'd move it up to the first line of the if body.",
			"disapproval": false,
			"date": "2013-06-27 21:10:45.596210",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "synced to tip\nready for review",
			"disapproval": false,
			"date": "2013-06-27 18:08:37.081250",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "There is one functionality that was there, but I don't know yet how to implement it now:\nIf newstack finds gp->stackguard0 == StackPreempt, but it can not be preempted right now (m->locks != 0), then newstack lefts gp->stackguard0 == StackPreempt. Then the goroutine will try to preempt itself on the next split stack check.\nCurrently the goroutine retries from function beginning after morestack, so I can not leave StackPreempt (will cause infinite loop).",
			"disapproval": false,
			"date": "2013-06-27 18:12:10.009970",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/27 18:12:10, dvyukov wrote:\n> There is one functionality that was there, but I don't know yet how to implement\n> it now:\n> If newstack finds gp->stackguard0 == StackPreempt, but it can not be preempted\n> right now (m->locks != 0), then newstack lefts gp->stackguard0 == StackPreempt.\n> Then the goroutine will try to preempt itself on the next split stack check.\n> Currently the goroutine retries from function beginning after morestack, so I\n> can not leave StackPreempt (will cause infinite loop).\n\nYou could put it back when m->locks reaches 0.\n\nRuss",
			"disapproval": false,
			"date": "2013-06-27 19:17:06.926420",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10264044/diff/30001/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttps://codereview.appspot.com/10264044/diff/30001/src/pkg/runtime/proc.c#newcode386\nsrc/pkg/runtime/proc.c:386: // wait for remaining P's to stop voluntary\nvoluntarily\n\nhttps://codereview.appspot.com/10264044/diff/30001/src/pkg/runtime/proc_test.go\nFile src/pkg/runtime/proc_test.go (right):\n\nhttps://codereview.appspot.com/10264044/diff/30001/src/pkg/runtime/proc_test.go#newcode161\nsrc/pkg/runtime/proc_test.go:161: var preempt = func() int {\nWhy is this not\n\nfunc preempt() int {\n?\n\nhttps://codereview.appspot.com/10264044/diff/30001/src/pkg/runtime/stack.c\nFile src/pkg/runtime/stack.c (right):\n\nhttps://codereview.appspot.com/10264044/diff/30001/src/pkg/runtime/stack.c#newcode243\nsrc/pkg/runtime/stack.c:243: if(oldstatus == Grunning && m->locks == 0 && m->mallocing == 0 && m->gcing == 0 &&\nSurely you have missed a condition. \nHow can this be made simpler?\n\nHow can oldstatus not be Grunning?\nHow can m->p be nil?\nHow can m->p->status not be Prunning?",
			"disapproval": false,
			"date": "2013-06-27 19:37:53.083420",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jun 27, 2013 at 11:17 PM,  <rsc@golang.org> wrote:\r\n> On 2013/06/27 18:12:10, dvyukov wrote:\r\n>>\r\n>> There is one functionality that was there, but I don't know yet how to\r\n>\r\n> implement\r\n>>\r\n>> it now:\r\n>> If newstack finds gp->stackguard0 == StackPreempt, but it can not be\r\n>\r\n> preempted\r\n>>\r\n>> right now (m->locks != 0), then newstack lefts gp->stackguard0 ==\r\n>\r\n> StackPreempt.\r\n>>\r\n>> Then the goroutine will try to preempt itself on the next split stack\r\n>\r\n> check.\r\n>>\r\n>> Currently the goroutine retries from function beginning after\r\n>\r\n> morestack, so I\r\n>>\r\n>> can not leave StackPreempt (will cause infinite loop).\r\n>\r\n>\r\n> You could put it back when m->locks reaches 0.\r\n\r\n\r\nThat's what I've tried to avoid -- additional checks on fast paths\r\n(malloc, lock/unlock, etc)...\r\nI will think a bit more, and then probably will do as you suggest.\r\nThis issue it not blocking this CL.\r\n",
			"disapproval": false,
			"date": "2013-06-27 19:47:51.437650",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jun 27, 2013 at 11:37 PM,  <rsc@golang.org> wrote:\r\n>\r\n> https://codereview.appspot.com/10264044/diff/30001/src/pkg/runtime/proc.c\r\n> File src/pkg/runtime/proc.c (right):\r\n>\r\n> https://codereview.appspot.com/10264044/diff/30001/src/pkg/runtime/proc.c#newcode386\r\n> src/pkg/runtime/proc.c:386: // wait for remaining P's to stop voluntary\r\n> voluntarily\r\n>\r\n> https://codereview.appspot.com/10264044/diff/30001/src/pkg/runtime/proc_test.go\r\n> File src/pkg/runtime/proc_test.go (right):\r\n>\r\n> https://codereview.appspot.com/10264044/diff/30001/src/pkg/runtime/proc_test.go#newcode161\r\n> src/pkg/runtime/proc_test.go:161: var preempt = func() int {\r\n> Why is this not\r\n>\r\n> func preempt() int {\r\n> ?\r\n\r\n\r\nIt must not be inlined and must have split check.\r\n\"var preempt = func()\" is safer with respect to possible future\r\noptimizations in the compiler.\r\n\r\n\r\n\r\n> https://codereview.appspot.com/10264044/diff/30001/src/pkg/runtime/stack.c\r\n> File src/pkg/runtime/stack.c (right):\r\n>\r\n> https://codereview.appspot.com/10264044/diff/30001/src/pkg/runtime/stack.c#newcode243\r\n> src/pkg/runtime/stack.c:243: if(oldstatus == Grunning && m->locks == 0\r\n> && m->mallocing == 0 && m->gcing == 0 &&\r\n> Surely you have missed a condition.\r\n\r\n:)\r\n\r\n> How can this be made simpler?\r\n>\r\n> How can oldstatus not be Grunning?\r\n\r\nIt can be Gsyscall if called from enter/exitsyscall.\r\n\r\n> How can m->p be nil?\r\n\r\nIt also can happen at least in enter/exitsyscall.\r\n\r\n> How can m->p->status not be Prunning?\r\n\r\nsame\r\nentersyscall leaves m->p set while it does not own the P\r\n\r\nthere may be other than enter/exitsyscall cases, this is just he most obvious.\r\n\r\nIf we would call enter/exitsyscall only on g0, it could make this\r\ncondition simpler.\r\n\r\nbut, yes, this check looks quite defensive...\r\n",
			"disapproval": false,
			"date": "2013-06-27 19:54:45.933810",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10264044/diff/30001/src/pkg/runtime/stack.c\nFile src/pkg/runtime/stack.c (right):\n\nhttps://codereview.appspot.com/10264044/diff/30001/src/pkg/runtime/stack.c#newcode200\nsrc/pkg/runtime/stack.c:200: \nHow about, right here,\n\n// If we are preempted during work on behalf of a system call, ignore.\nif(gp->stackguard0 == StackPreempt && gp->status != Grunning) {\n    gp->stackguard0 = gp->stackguard;\n    runtime.gogo(&gp->sched);\n}\n\nDoing that very early means that we should be able to drop oldstatus, and the possibility that m->p == nil, and the possibility that m->p->status != Prunning, right?\n\nI sent you a CL so that this is safe even in the reflectcall case.",
			"disapproval": false,
			"date": "2013-06-27 20:00:41.778610",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/10264044/diff/30001/src/pkg/runtime/proc.c\nFile src/pkg/runtime/proc.c (right):\n\nhttps://codereview.appspot.com/10264044/diff/30001/src/pkg/runtime/proc.c#newcode386\nsrc/pkg/runtime/proc.c:386: // wait for remaining P's to stop voluntary\nOn 2013/06/27 19:37:53, rsc wrote:\n> voluntarily\n\nDone.",
			"disapproval": false,
			"date": "2013-06-27 21:07:41.879160",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/10264044/diff/30001/src/pkg/runtime/stack.h\nFile src/pkg/runtime/stack.h (right):\n\nhttps://codereview.appspot.com/10264044/diff/30001/src/pkg/runtime/stack.h#newcode110\nsrc/pkg/runtime/stack.h:110: StackPreempt = (uintptr)(intptr)(int32)0xfffffade,\nOn 2013/06/27 21:08:41, rsc wrote:\n> This cannot be an enum. Also, (uintptr)(intptr)(int32) is no different than\n> (uintptr)(int32).\n> \n> #define StackPreempt ((uintptr)-3)\n> \n\nDone.\n\nhttps://codereview.appspot.com/10264044/diff/45002/src/pkg/runtime/proc_test.go\nFile src/pkg/runtime/proc_test.go (right):\n\nhttps://codereview.appspot.com/10264044/diff/45002/src/pkg/runtime/proc_test.go#newcode160\nsrc/pkg/runtime/proc_test.go:160: // The function is used to test preemption at split stack checks.\nOn 2013/06/27 21:10:46, rsc wrote:\n> // Declaring a var avoids inlining at the call site.\n\nDone.\n\nhttps://codereview.appspot.com/10264044/diff/45002/src/pkg/runtime/stack.c\nFile src/pkg/runtime/stack.c (right):\n\nhttps://codereview.appspot.com/10264044/diff/45002/src/pkg/runtime/stack.c#newcode254\nsrc/pkg/runtime/stack.c:254: gp->stackguard0 = gp->stackguard;\nOn 2013/06/27 21:10:46, rsc wrote:\n> Don't you want to do this in both cases?\n> I'd move it up to the first line of the if body.\n\nNo, I don't. It is not necessary, gosched() must be able to handle this.",
			"disapproval": false,
			"date": "2013-06-27 21:18:15.791110",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10264044/diff/30001/src/pkg/runtime/stack.c\nFile src/pkg/runtime/stack.c (right):\n\nhttps://codereview.appspot.com/10264044/diff/30001/src/pkg/runtime/stack.c#newcode200\nsrc/pkg/runtime/stack.c:200: \nTo be clear, what I meant by \"safe\" is that it's always legal to runtime.gogo(&gp->sched) to back out of a newstack. You would still need to figure out what conditions need to be backed out of quickly. But I think doing the check here at the very top, before we touch anything else like gp->status, will keep the rest of the code clean.\n\nhttps://codereview.appspot.com/10264044/diff/30001/src/pkg/runtime/stack.c#newcode238\nsrc/pkg/runtime/stack.c:238: if(gp->stackguard0 == StackPreempt) {\nThe actual preemption can still happen here, in the case where we have an ordinary running goroutine. No magic necessary.\n\nif(gp->stackguard0 == StackPreempt) {\n    gp->stackguard = gp->stackguard0;\n    if(gp == m->g0)\n        runtime.throw(\"runtime: preempt g0\");\n    gp->status = oldstatus;\n    if(m->locks == 0 || m->mallocing == 0 || m->gcing == 0) {\n        // Remember but delay the preemption.\n        // Let the goroutine keep running for now.\n        m->preempt = 1;\n        runtime.gogo(&gp->sched);\n    }\n    // Act like goroutine called runtime.Gosched.\n    // Does not return.\n    runtime.gosched0(sp);\n}",
			"disapproval": false,
			"date": "2013-06-27 20:20:17.194820",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10264044/diff/30001/src/pkg/runtime/stack.h\nFile src/pkg/runtime/stack.h (right):\n\nhttps://codereview.appspot.com/10264044/diff/30001/src/pkg/runtime/stack.h#newcode110\nsrc/pkg/runtime/stack.h:110: StackPreempt = (uintptr)(intptr)(int32)0xfffffade,\nThis cannot be an enum. Also, (uintptr)(intptr)(int32) is no different than (uintptr)(int32).\n\n#define StackPreempt ((uintptr)-3)",
			"disapproval": false,
			"date": "2013-06-27 21:08:41.018600",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nPlease wait until tomorrow to submit. I'd like the builders to catch up and\r\nget past my gp->sched.sp change and be \"ok\" first.\r\n",
			"disapproval": false,
			"date": "2013-06-27 21:21:36.873730",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=575afd15c877 ***\n\nruntime: preempt goroutines for GC\nThe last patch for preemptive scheduler,\nwith this change stoptheworld issues preemption\nrequests every 100us.\nUpdate issue 543.\n\nR=golang-dev, daniel.morsing, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/10264044",
			"disapproval": false,
			"date": "2013-06-28 13:52:36.008710",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 10264044: runtime: preempt goroutines for GC",
	"created": "2013-06-13 13:49:57.716850",
	"patchsets": [
		1,
		2001,
		4001,
		7001,
		3,
		5007,
		2002,
		21001,
		24001,
		27001,
		30001,
		45001,
		45002,
		56001,
		50002
	],
	"modified": "2013-06-28 13:52:38.699270",
	"closed": true,
	"issue": 10264044
}