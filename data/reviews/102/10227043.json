{
	"description": "cmd/gc: fix race detector on tail-call wrappers\n\n(By not using the tail-call wrappers when the race\ndetector is enabled.)",
	"cc": [
		"golang-dev@googlegroups.com",
		"minux.ma@gmail.com",
		"daniel.morsing@gmail.com"
	],
	"reviewers": [
		"dvyukov@google.com"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jun 12, 2013 at 7:36 AM, <dvyukov@google.com> wrote:\r\n\r\n> Please add tests for the following cases to\r\n> runtime/race/testdata/mop_**test.go. Will it find race on T2 now?\r\n>\r\n> type T1 struct {\r\n>     x int\r\n>     U\r\n> }\r\n>\r\n> type T2 struct {\r\n>     x int\r\n>     *U\r\n> }\r\n>\r\n\r\nI don't know enough about the race detector to try that. Can you do that in\r\na separate CL?\r\n\r\nI'm just trying to keep my code out of the race detector's way. I'm\r\nexplicitly trying not to become responsible for race detector upkeep in any\r\nway. :-)\r\n\r\nFWIW, right now on my Mac, go test -race -short runtime/race prints 54,071\r\nlines (>2 MB) of output. The last one is \"FAIL\". Maybe it explained the\r\nfailure somewhere in that output. But this seems to be unrelated to my CLs,\r\nsince the dashboard builders are happy.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-06-12 12:34:34.600080",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-06-12 11:29:56.027370",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"dvyukov@google.com",
				"daniel.morsing@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "We should probably add the racefuncexit stuff to the same codepath that generates deferreturn. That way we don't miss it when doing changes.",
			"disapproval": false,
			"date": "2013-06-12 11:39:13.659440",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10227043/diff/4001/src/cmd/gc/subr.c\nFile src/cmd/gc/subr.c (right):\n\nhttps://codereview.appspot.com/10227043/diff/4001/src/cmd/gc/subr.c#newcode2576\nsrc/cmd/gc/subr.c:2576: if!flag_race && (isptr[rcvr->etype] && isptr[methodrcvr->etype] && method->embedded && !isifacemethod(method->type)) {\nmissing (?",
			"disapproval": false,
			"date": "2013-06-12 11:34:45.874110",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"dvyukov@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/12 11:29:56, rsc wrote:\n> Hello mailto:golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go/\n\nIt's perfectly fine to disable tail calls under race detector. I think that's what we do in C++ as well.\n\nPlease add tests for the following cases to runtime/race/testdata/mop_test.go. Will it find race on T2 now?\n\ntype T1 struct {\n    x int\n    U\n}\n\ntype T2 struct {\n    x int\n    *U\n}",
			"disapproval": false,
			"date": "2013-06-12 11:36:51.927300",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Jun 12, 2013 at 7:39 AM, <daniel.morsing@gmail.com> wrote:\r\n\r\n> We should probably add the racefuncexit stuff to the same codepath that\r\n> generates deferreturn. That way we don't miss it when doing changes.\r\n>\r\n\r\nI'm not sure what you mean by this exactly, but in general I would like to\r\nkeep all the race stuff isolated in racewalk.c. I explicitly don't want it\r\ngetting interlaced with ordinary compilation. It needs to be ignorable,\r\nwhich is the opposite of the goal you suggested.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-06-12 12:27:22.612570",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"dvyukov@google.com",
				"daniel.morsing@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/12 12:27:22, rsc wrote:\n> On Wed, Jun 12, 2013 at 7:39 AM, <mailto:daniel.morsing@gmail.com> wrote:\n> \n> > We should probably add the racefuncexit stuff to the same codepath that\n> > generates deferreturn. That way we don't miss it when doing changes.\n> >\n> \n> I'm not sure what you mean by this exactly, but in general I would like to\n> keep all the race stuff isolated in racewalk.c. I explicitly don't want it\n> getting interlaced with ordinary compilation. It needs to be ignorable,\n> which is the opposite of the goal you suggested.\n> \n> Russ\n\nNevermind, racewalk already uses fn->exit, which is the same path as deferreturn.",
			"disapproval": false,
			"date": "2013-06-12 12:36:56.286810",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"dvyukov@google.com",
				"daniel.morsing@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/12 11:39:13, DMorsing wrote:\n> We should probably add the racefuncexit stuff to the same codepath that\n> generates deferreturn. That way we don't miss it when doing changes.\n\nGood tests should help.",
			"disapproval": false,
			"date": "2013-06-13 09:00:23.877680",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"dvyukov@google.com",
				"daniel.morsing@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/12 12:34:34, rsc wrote:\n> On Wed, Jun 12, 2013 at 7:36 AM, <mailto:dvyukov@google.com> wrote:\n> \n> > Please add tests for the following cases to\n> > runtime/race/testdata/mop_**test.go. Will it find race on T2 now?\n> >\n> > type T1 struct {\n> >     x int\n> >     U\n> > }\n> >\n> > type T2 struct {\n> >     x int\n> >     *U\n> > }\n> >\n> \n> I don't know enough about the race detector to try that. Can you do that in\n> a separate CL?\n> \n> I'm just trying to keep my code out of the race detector's way. I'm\n> explicitly trying not to become responsible for race detector upkeep in any\n> way. :-)\n\n\nOK, the attempt to make you responsible failed :)\nMailed the tests in https://codereview.appspot.com/10257043\n\n\n> FWIW, right now on my Mac, go test -race -short runtime/race prints 54,071\n> lines (>2 MB) of output. The last one is \"FAIL\". Maybe it explained the\n> failure somewhere in that output. But this seems to be unrelated to my CLs,\n> since the dashboard builders are happy.\n\ngo test -race -short runtime/race\nprints 1 line for me\n\ngo test -race -short -v runtime/race\nprints ~300 lines with subtest enumeration\n\nprobably you run (it prints race reports as well):\ngo test -race -v pkg/runtime/race/testdata/mop_test.go",
			"disapproval": false,
			"date": "2013-06-13 09:06:18.052980",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Dmitriy,\r\n\r\nYou still haven't LGTMed this, so the builders are still broken. I am\r\nsubmitting this TBR to get the builders working.\r\n",
			"disapproval": false,
			"date": "2013-06-18 18:31:22.905550",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"dvyukov@google.com",
				"daniel.morsing@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=6fdd68da7b70 ***\n\ncmd/gc: fix race detector on tail-call wrappers\n\n(By not using the tail-call wrappers when the race\ndetector is enabled.)\n\nR=golang-dev, minux.ma, dvyukov, daniel.morsing\nCC=golang-dev\nhttps://codereview.appspot.com/10227043",
			"disapproval": false,
			"date": "2013-06-18 18:43:41.463240",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"rsc@golang.org",
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"daniel.morsing@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-06-18 18:45:05.680030",
			"approval": true
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 10227043: cmd/gc: fix race detector on tail-call wrappers",
	"created": "2013-06-12 11:29:44.004620",
	"patchsets": [
		1,
		2001,
		4001,
		15001
	],
	"modified": "2013-06-18 18:45:05.963250",
	"closed": true,
	"issue": 10227043
}