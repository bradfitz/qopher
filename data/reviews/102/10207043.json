{
	"description": "go.tools/go/types: Use []*Field instead of *Scope for struct fields\n\nThis partially reverts a previous change, using a []*Field is a better\nrepresentation for struct fields than a *Scope, after all; however\n*Fields remain Objects.\n\nFixes issue 5670.",
	"cc": [
		"adonovan@google.com",
		"axwalk@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"axwalk@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks.\n\nhttps://codereview.appspot.com/10207043/diff/6001/go/types/scope.go\nFile go/types/scope.go (right):\n\nhttps://codereview.appspot.com/10207043/diff/6001/go/types/scope.go#newcode55\ngo/types/scope.go:55: // Index returns the object in scope s with the given package\nOn 2013/06/12 01:09:33, adonovan wrote:\n> s/Index/Lookup/\n\nDone.\n\nhttps://codereview.appspot.com/10207043/diff/6001/go/types/scope.go#newcode56\ngo/types/scope.go:56: // (path) and name if such an object exists; otherwise the result\nOn 2013/06/12 01:09:33, adonovan wrote:\n> \"(path)\"?\n\nDone.\n\nhttps://codereview.appspot.com/10207043/diff/6001/go/types/scope.go#newcode62\ngo/types/scope.go:62: // only the name is used and the package path is ignored.\nOn 2013/06/12 01:09:33, adonovan wrote:\n> I realise it's not part of this CL, but this specification seems a bit\n> backwards; shouldn't the precondition be:\n> \n> !ast.IsExported(name) => pkg  != nil?\n> \n> rather than:\n> \n> pkg != nil && !ast.IsExported(name) => pkg.Path() is consulted.\n\nyes, but that would defeat the _fast_ path.\n\nBut this may eventually go back to a simple lookup again, once I have methods in []*Func rather than *Scopes.\n\nhttps://codereview.appspot.com/10207043/diff/6001/go/types/types.go\nFile go/types/types.go (right):\n\nhttps://codereview.appspot.com/10207043/diff/6001/go/types/types.go#newcode291\ngo/types/types.go:291: // TODO(gri) Change back to a sorted slice of methods.\nOn 2013/06/12 01:09:33, adonovan wrote:\n> Apparently interfaces can have blank methods too (even though to declare one is\n> utterly pointless since it renders the interface unimplementable). Sigh.\n\nyep",
			"disapproval": false,
			"date": "2013-06-12 02:45:09.696380",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.tools",
			"disapproval": false,
			"date": "2013-06-12 00:49:59.894950",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\n\nSorry for not catching the blank-fields issue during review.\n\nhttps://codereview.appspot.com/10207043/diff/6001/go/types/scope.go\nFile go/types/scope.go (right):\n\nhttps://codereview.appspot.com/10207043/diff/6001/go/types/scope.go#newcode55\ngo/types/scope.go:55: // Index returns the object in scope s with the given package\ns/Index/Lookup/\n\nhttps://codereview.appspot.com/10207043/diff/6001/go/types/scope.go#newcode56\ngo/types/scope.go:56: // (path) and name if such an object exists; otherwise the result\n\"(path)\"?\n\nhttps://codereview.appspot.com/10207043/diff/6001/go/types/scope.go#newcode62\ngo/types/scope.go:62: // only the name is used and the package path is ignored.\nI realise it's not part of this CL, but this specification seems a bit backwards; shouldn't the precondition be:\n\n!ast.IsExported(name) => pkg  != nil?\n\nrather than:\n\npkg != nil && !ast.IsExported(name) => pkg.Path() is consulted.\n\nhttps://codereview.appspot.com/10207043/diff/6001/go/types/types.go\nFile go/types/types.go (right):\n\nhttps://codereview.appspot.com/10207043/diff/6001/go/types/types.go#newcode291\ngo/types/types.go:291: // TODO(gri) Change back to a sorted slice of methods.\nApparently interfaces can have blank methods too (even though to declare one is utterly pointless since it renders the interface unimplementable). Sigh.",
			"disapproval": false,
			"date": "2013-06-12 01:09:33.113380",
			"approval": true
		},
		{
			"sender": "axwalk@gmail.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"axwalk@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/06/12 00:49:59, gri wrote:\n> Hello mailto:adonovan@google.com (cc: mailto:golang-dev@googlegroups.com),\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go.tools\n\nLGTM, thanks.",
			"disapproval": false,
			"date": "2013-06-12 01:13:26.665640",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"axwalk@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=42506106d859&repo=tools ***\n\ngo.tools/go/types: Use []*Field instead of *Scope for struct fields\n\nThis partially reverts a previous change, using a []*Field is a better\nrepresentation for struct fields than a *Scope, after all; however\n*Fields remain Objects.\n\nFixes issue 5670.\n\nR=adonovan, axwalk\nCC=golang-dev\nhttps://codereview.appspot.com/10207043",
			"disapproval": false,
			"date": "2013-06-12 02:55:14.797230",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 10207043: go.tools/go/types: Use []*Field instead of *Scope for s...",
	"created": "2013-06-12 00:38:15.541470",
	"patchsets": [
		1,
		2001,
		3001,
		6001,
		13001,
		16001
	],
	"modified": "2013-06-12 02:55:16.628830",
	"closed": true,
	"issue": 10207043
}