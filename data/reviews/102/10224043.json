{
	"description": "go.blog: add html2article tool",
	"cc": [
		"nigeltao@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello nigeltao (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.blog",
			"disapproval": false,
			"date": "2013-06-12 05:57:05.808140",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"adg@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10224043/diff/1/cmd/html2article/conv.go\nFile cmd/html2article/conv.go (right):\n\nhttps://codereview.appspot.com/10224043/diff/1/cmd/html2article/conv.go#newcode23\ncmd/html2article/conv.go:23: \"code.google.com/p/go.net/html\"\nAlso import \"code.google.com/p/go.net/html/atom\" and...\n\nhttps://codereview.appspot.com/10224043/diff/1/cmd/html2article/conv.go#newcode108\ncmd/html2article/conv.go:108: // TODO(adg): code\n?\n\nhttps://codereview.appspot.com/10224043/diff/1/cmd/html2article/conv.go#newcode112\ncmd/html2article/conv.go:112: if err := s.Err(); err != nil {\nMake this \"return s.Err()\"?\n\nhttps://codereview.appspot.com/10224043/diff/1/cmd/html2article/conv.go#newcode146\ncmd/html2article/conv.go:146: func indent(s string) string {\nTake a *bytes.Buffer argument instead of returning string?\n\nSimilarly below.\n\nhttps://codereview.appspot.com/10224043/diff/1/cmd/html2article/conv.go#newcode182\ncmd/html2article/conv.go:182: walk(n, func(n *html.Node) bool {\nFYI, it would be more efficient if you compare DataAtom (the atom.Atom type is uint32) instead of Data (a string type).\n\nwalk(n, func(n *html.Node) bool {\n  switch n.Type {\n  case html.TextNode:\n    buf.WriteString(n.Data)\n    return false\n  case html.ElementNode:\n    // No-op.\n  default:\n    return true\n  }\n\n  a := n.DataAtom\n  if a == atom.Span {\n    if hasStyle(Code)(n) {\n      a = atom.Code\n    }\n    etc\n  }\n  switch n.DataAtom {\n  case atom.Br:\n    etc\n  case atom.P:\n    etc\n  case atom.Li:\n    etc\n  etc\n  default:\n    return true\n  }\n  return false\n}\n\nhttps://codereview.appspot.com/10224043/diff/1/cmd/html2article/conv.go#newcode244\ncmd/html2article/conv.go:244: func isTag(name string) selector {\nfunc isTag(a atom.Atom) selector {\n  return func(n *html.Node) bool {\n    return n.DataAtom == a\n  }\n}\n\nand at the call site:\n\nisTag(atom.Style)\n\nhttps://codereview.appspot.com/10224043/diff/1/cmd/html2article/conv.go#newcode271\ncmd/html2article/conv.go:271: switch {\nif/else instead of switch?\n\nhttps://codereview.appspot.com/10224043/diff/1/cmd/html2article/conv.go#newcode331\ncmd/html2article/conv.go:331: func walk(n *html.Node, fn selector) {\nIsn't this just\n\nfunc walk(n *html.Node, fn selector) {\n  if fn(n) {\n    for c := n.FirstChild; c != nil; c = c.NextSibling {\n      walk(c, fn)\n    }\n  }\n}\n\nhttps://codereview.appspot.com/10224043/diff/1/cmd/html2article/conv.go#newcode343\ncmd/html2article/conv.go:343: return\ndd.",
			"disapproval": false,
			"date": "2013-06-13 05:20:21.834220",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/10224043/diff/1/cmd/html2article/conv.go\nFile cmd/html2article/conv.go (right):\n\nhttps://codereview.appspot.com/10224043/diff/1/cmd/html2article/conv.go#newcode23\ncmd/html2article/conv.go:23: \"code.google.com/p/go.net/html\"\nOn 2013/06/13 05:20:21, nigeltao wrote:\n> Also import \"code.google.com/p/go.net/html/atom\" and...\n\nDone.\n\nhttps://codereview.appspot.com/10224043/diff/1/cmd/html2article/conv.go#newcode108\ncmd/html2article/conv.go:108: // TODO(adg): code\nOn 2013/06/13 05:20:21, nigeltao wrote:\n> ?\n\nDone.\n\nhttps://codereview.appspot.com/10224043/diff/1/cmd/html2article/conv.go#newcode112\ncmd/html2article/conv.go:112: if err := s.Err(); err != nil {\nOn 2013/06/13 05:20:21, nigeltao wrote:\n> Make this \"return s.Err()\"?\n\nthe function doesn't return anything...\n\nhttps://codereview.appspot.com/10224043/diff/1/cmd/html2article/conv.go#newcode146\ncmd/html2article/conv.go:146: func indent(s string) string {\nOn 2013/06/13 05:20:21, nigeltao wrote:\n> Take a *bytes.Buffer argument instead of returning string?\n> \n> Similarly below.\n\nDone.\n\nhttps://codereview.appspot.com/10224043/diff/1/cmd/html2article/conv.go#newcode182\ncmd/html2article/conv.go:182: walk(n, func(n *html.Node) bool {\nOn 2013/06/13 05:20:21, nigeltao wrote:\n> FYI, it would be more efficient if you compare DataAtom (the atom.Atom type is\n> uint32) instead of Data (a string type).\n> \n> walk(n, func(n *html.Node) bool {\n>   switch n.Type {\n>   case html.TextNode:\n>     buf.WriteString(n.Data)\n>     return false\n>   case html.ElementNode:\n>     // No-op.\n>   default:\n>     return true\n>   }\n> \n>   a := n.DataAtom\n>   if a == atom.Span {\n>     if hasStyle(Code)(n) {\n>       a = atom.Code\n>     }\n>     etc\n>   }\n>   switch n.DataAtom {\n>   case atom.Br:\n>     etc\n>   case atom.P:\n>     etc\n>   case atom.Li:\n>     etc\n>   etc\n>   default:\n>     return true\n>   }\n>   return false\n> }\n\nDone.\n\nhttps://codereview.appspot.com/10224043/diff/1/cmd/html2article/conv.go#newcode244\ncmd/html2article/conv.go:244: func isTag(name string) selector {\nOn 2013/06/13 05:20:21, nigeltao wrote:\n> func isTag(a atom.Atom) selector {\n>   return func(n *html.Node) bool {\n>     return n.DataAtom == a\n>   }\n> }\n> \n> and at the call site:\n> \n> isTag(atom.Style)\n\nDone.\n\nhttps://codereview.appspot.com/10224043/diff/1/cmd/html2article/conv.go#newcode271\ncmd/html2article/conv.go:271: switch {\nOn 2013/06/13 05:20:21, nigeltao wrote:\n> if/else instead of switch?\n\nDone.\n\nhttps://codereview.appspot.com/10224043/diff/1/cmd/html2article/conv.go#newcode331\ncmd/html2article/conv.go:331: func walk(n *html.Node, fn selector) {\nYes, done.\n\nhttps://codereview.appspot.com/10224043/diff/1/cmd/html2article/conv.go#newcode343\ncmd/html2article/conv.go:343: return\nack",
			"disapproval": false,
			"date": "2013-06-19 04:15:50.757410",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"adg@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.",
			"disapproval": false,
			"date": "2013-06-20 05:45:39.078450",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=c30689cbf9ba&repo=blog ***\n\ngo.blog: add html2article tool\n\nR=nigeltao\nCC=golang-dev\nhttps://codereview.appspot.com/10224043",
			"disapproval": false,
			"date": "2013-06-20 06:21:34.734930",
			"approval": false
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 10224043: go.blog: add html2article tool",
	"created": "2013-06-12 05:56:59.570530",
	"patchsets": [
		1,
		5001,
		11001
	],
	"modified": "2013-06-20 06:21:37.492940",
	"closed": true,
	"issue": 10224043
}