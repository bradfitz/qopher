{
	"description": "[release-branch.go1.1] cmd/gc: do not corrupt init() with initializers of _ in closures.\n\n\u00ab\u00ab\u00ab CL 9952043 / c42a7c218440\ncmd/gc: do not corrupt init() with initializers of _ in closures.\n\nFixes issue 5607.\n\nR=golang-dev, daniel.morsing, r, dsymonds\nCC=golang-dev\nhttps://codereview.appspot.com/9952043\n\u00bb\u00bb\u00bb\n",
	"cc": [
		"daniel.morsing@gmail.com",
		"dsymonds@golang.org",
		"r@golang.org",
		"remyoudompheng@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"daniel.morsing@gmail.com",
				"dsymonds@golang.org",
				"r@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello DMorsing, dsymonds, r, remyoudompheng (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-06-04 02:58:28.332700",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"daniel.morsing@gmail.com",
				"dsymonds@golang.org",
				"r@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ping. Come on guys, I need to get a bunch of these reviewed before next week. The quicker we get them in the better they can be tested.",
			"disapproval": false,
			"date": "2013-06-04 23:41:14.717050",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n",
			"disapproval": false,
			"date": "2013-06-04 23:45:01.485780",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"daniel.morsing@gmail.com",
				"dsymonds@golang.org",
				"r@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=6fd05e0b4f08 ***\n\n[release-branch.go1.1] cmd/gc: do not corrupt init() with initializers of _ in closures.\n\n\u00ab\u00ab\u00ab CL 9952043 / c42a7c218440\ncmd/gc: do not corrupt init() with initializers of _ in closures.\n\nFixes issue 5607.\n\nR=golang-dev, daniel.morsing, r, dsymonds\nCC=golang-dev\nhttps://codereview.appspot.com/9952043\n\u00bb\u00bb\u00bb\n\nR=daniel.morsing, dsymonds, r, remyoudompheng\nCC=golang-dev\nhttps://codereview.appspot.com/9895044",
			"disapproval": false,
			"date": "2013-06-05 00:01:03.669950",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't understand why this patch is correct.\r\n",
			"disapproval": false,
			"date": "2013-06-10 11:55:30.730380",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jun 10, 2013 at 1:55 PM, Russ Cox <rsc@golang.org> wrote:\r\n> I don't understand why this patch is correct.\r\n>\r\n\r\nWe assumed that if someone did \"var foo, _ = Bar()\", that it was on\r\nthe top level and should be executed at init. Now we check to make\r\nsure that we're not inside a function.\r\n",
			"disapproval": false,
			"date": "2013-06-10 12:07:44.733090",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jun 10, 2013 at 8:07 AM, Daniel Morsing <daniel.morsing@gmail.com>wrote:\r\n\r\n> On Mon, Jun 10, 2013 at 1:55 PM, Russ Cox <rsc@golang.org> wrote:\r\n> > I don't understand why this patch is correct.\r\n> >\r\n>\r\n> We assumed that if someone did \"var foo, _ = Bar()\", that it was on\r\n> the top level and should be executed at init. Now we check to make\r\n> sure that we're not inside a function.\r\n>\r\n\r\nThanks. But what makes sure that Bar is called at all?\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-06-10 15:29:04.630730",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "2013/6/10 Russ Cox <rsc@golang.org>:\r\n> On Mon, Jun 10, 2013 at 8:07 AM, Daniel Morsing <daniel.morsing@gmail.com>\r\n> wrote:\r\n>> We assumed that if someone did \"var foo, _ = Bar()\", that it was on\r\n>> the top level and should be executed at init. Now we check to make\r\n>> sure that we're not inside a function.\r\n>\r\n>\r\n> Thanks. But what makes sure that Bar is called at all?\r\n\r\nCalled as part of what? It should be compiled normally as part of the\r\nenclosing function.\r\nIs there a pitfall here?\r\n\r\nR\u00e9my.\r\n",
			"disapproval": false,
			"date": "2013-06-10 20:20:21.351840",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jun 10, 2013 at 4:20 PM, R\u00e9my Oudompheng\r\n<remyoudompheng@gmail.com>wrote:\r\n\r\n> Called as part of what? It should be compiled normally as part of the\r\n> enclosing function.\r\n> Is there a pitfall here?\r\n>\r\n\r\nI agree that the new code is at least as correct as the old code. But if we\r\nhave either of:\r\n\r\nvar foo, _ = Bar()\r\nvar _ = Bar()\r\n\r\nat top level, what is making sure that the things Bar needs have been\r\ninitialized before Bar is called?\r\n\r\nThe *out = list(*out, n->defn) at line 58 is queueing the call to Bar.\r\nWhere is the traversal of the things Bar needs? That is, if we have:\r\n\r\nvar Bar = func() {}\r\nvar x = Bar()\r\n\r\nthen the stuff at the bottom of the function is what takes care of making\r\nsure that Bar is initialized before x. But if we have\r\n\r\nvar Bar = func() {}\r\nvar _ = Bar()\r\n\r\nthen that stuff doesn't run. So why is it safe to just return?\r\n\r\nMaybe it is, I'm just confused (and I wrote the code initially, but I\r\nhaven't had a full night's sleep in months).\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-06-10 20:37:19.187910",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "2013/6/10 Russ Cox <rsc@golang.org>:\r\n> On Mon, Jun 10, 2013 at 4:20 PM, R\u00e9my Oudompheng <remyoudompheng@gmail.com>\r\n> wrote:\r\n>>\r\n>> Called as part of what? It should be compiled normally as part of the\r\n>> enclosing function.\r\n>> Is there a pitfall here?\r\n>\r\n>\r\n> I agree that the new code is at least as correct as the old code. But if we\r\n> have either of:\r\n>\r\n> var foo, _ = Bar()\r\n> var _ = Bar()\r\n>\r\n> at top level, what is making sure that the things Bar needs have been\r\n> initialized before Bar is called?\r\n>\r\n> The *out = list(*out, n->defn) at line 58 is queueing the call to Bar. Where\r\n> is the traversal of the things Bar needs? That is, if we have:\r\n>\r\n> var Bar = func() {}\r\n> var x = Bar()\r\n>\r\n> then the stuff at the bottom of the function is what takes care of making\r\n> sure that Bar is initialized before x. But if we have\r\n>\r\n> var Bar = func() {}\r\n> var _ = Bar()\r\n>\r\n> then that stuff doesn't run. So why is it safe to just return?\r\n\r\nIt is not (well, depending of which church of the Go spec you belong\r\nto). That's why we have issue 5244 and CL8601044\r\n(https://codereview.appspot.com/8601044). If we agree on what it\r\nshould do, I can mail out the CL.\r\n",
			"disapproval": false,
			"date": "2013-06-10 20:41:17.080610",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jun 10, 2013 at 4:41 PM, R\u00e9my Oudompheng\r\n<remyoudompheng@gmail.com>wrote:\r\n\r\n> It is not (well, depending of which church of the Go spec you belong\r\n> to). That's why we have issue 5244 and CL8601044\r\n> (https://codereview.appspot.com/8601044). If we agree on what it\r\n> should do, I can mail out the CL.\r\n>\r\n\r\nI replied on issue 5244. That seems serious enough that I would have fixed\r\nit for Go 1.1. It's right on the line for Go 1.1.1. Can you convince me\r\nthat fixing it won't break any correct programs?\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-06-10 20:50:39.017250",
			"approval": false
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 9895044: [release-branch.go1.1] cmd/gc: do not corrupt init() wi...",
	"created": "2013-06-04 02:56:40.448400",
	"patchsets": [
		1,
		2001,
		4001,
		6001,
		11001
	],
	"modified": "2013-06-10 20:50:39.238560",
	"closed": true,
	"issue": 9895044
}