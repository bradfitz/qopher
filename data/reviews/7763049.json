{
	"description": "crypto/sha1: faster amd64, 386 implementations\n\n-- amd64 --\n\nOn a MacBookPro10,2 (Core i5):\n\nbenchmark              old ns/op    new ns/op    delta\nBenchmarkHash8Bytes          785          592  -24.59%\nBenchmarkHash1K             8727         3014  -65.46%\nBenchmarkHash8K            64926        20723  -68.08%\n\nbenchmark               old MB/s     new MB/s  speedup\nBenchmarkHash8Bytes        10.19        13.50    1.32x\nBenchmarkHash1K           117.34       339.71    2.90x\nBenchmarkHash8K           126.17       395.31    3.13x\n\nFor comparison, on the same machine, openssl 0.9.8r reports\nits sha1 speed as 341 MB/s for 1K and 404 MB/s for 8K.\n\nOn an Intel Xeon E5520:\n\nbenchmark              old ns/op    new ns/op    delta\nBenchmarkHash8Bytes          984          707  -28.15%\nBenchmarkHash1K            11141         3466  -68.89%\nBenchmarkHash8K            82435        23411  -71.60%\n\nbenchmark               old MB/s     new MB/s  speedup\nBenchmarkHash8Bytes         8.13        11.31    1.39x\nBenchmarkHash1K            91.91       295.36    3.21x\nBenchmarkHash8K            99.37       349.91    3.52x\n\nFor comparison, on the same machine, openssl 1.0.1 reports\nits sha1 speed as 286 MB/s for 1K and 394 MB/s for 8K.\n\n-- 386 --\n\nOn a MacBookPro10,2 (Core i5):\n\nbenchmark              old ns/op    new ns/op    delta\nBenchmarkHash8Bytes         1041          713  -31.51%\nBenchmarkHash1K            15612         3382  -78.34%\nBenchmarkHash8K           110152        22733  -79.36%\n\nbenchmark               old MB/s     new MB/s  speedup\nBenchmarkHash8Bytes         7.68        11.21    1.46x\nBenchmarkHash1K            65.59       302.76    4.62x\nBenchmarkHash8K            74.37       360.36    4.85x\n\nOn an Intel Xeon E5520:\n\nbenchmark              old ns/op    new ns/op    delta\nBenchmarkHash8Bytes         1221          842  -31.04%\nBenchmarkHash1K            14643         4137  -71.75%\nBenchmarkHash8K           108722        27394  -74.80%\n\nbenchmark               old MB/s     new MB/s  speedup\nBenchmarkHash8Bytes         6.55         9.49    1.45x\nBenchmarkHash1K            69.93       247.51    3.54x\nBenchmarkHash8K            75.35       299.04    3.97x",
	"cc": [
		"agl@golang.org",
		"dave@cheney.net",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-03-21 05:31:41.536020",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"rsc@golang.org",
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/21 05:31:41, rsc wrote:\n> Hello mailto:agl@golang.org (cc: mailto:golang-dev@googlegroups.com),\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go/\n\nIs there any benefit to using the //go:noescape pragma ?",
			"disapproval": false,
			"date": "2013-03-21 05:38:02.212330",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Mar 21, 2013 at 1:38 AM, <dave@cheney.net> wrote:\r\n\r\n> On 2013/03/21 05:31:41, rsc wrote:\r\n>\r\n>> Hello mailto:agl@golang.org (cc: mailto:golang-dev@**googlegroups.com<golang-dev@googlegroups.com>\r\n>> ),\r\n>>\r\n>\r\n>  I'd like you to review this change to\r\n>> https://code.google.com/p/go/\r\n>>\r\n>\r\n> Is there any benefit to using the //go:noescape pragma ?\r\n>\r\n\r\nNo. Nearly all code being hashed is going to be in heap buffers already,\r\nand noescape cannot propagate through interfaces anyway.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-03-21 05:42:08.296700",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Fair enough, just thought I would ask.\r\n\r\nOn Thu, Mar 21, 2013 at 4:42 PM, Russ Cox <rsc@golang.org> wrote:\r\n> On Thu, Mar 21, 2013 at 1:38 AM, <dave@cheney.net> wrote:\r\n>>\r\n>> On 2013/03/21 05:31:41, rsc wrote:\r\n>>>\r\n>>> Hello mailto:agl@golang.org (cc: mailto:golang-dev@googlegroups.com),\r\n>>\r\n>>\r\n>>> I'd like you to review this change to\r\n>>> https://code.google.com/p/go/\r\n>>\r\n>>\r\n>> Is there any benefit to using the //go:noescape pragma ?\r\n>\r\n>\r\n> No. Nearly all code being hashed is going to be in heap buffers already, and\r\n> noescape cannot propagate through interfaces anyway.\r\n>\r\n> Russ\r\n",
			"disapproval": false,
			"date": "2013-03-21 05:48:34.621300",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"rsc@golang.org",
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7763049/diff/8001/src/pkg/crypto/sha1/sha1block_386.s\nFile src/pkg/crypto/sha1/sha1block_386.s (right):\n\nhttps://codereview.appspot.com/7763049/diff/8001/src/pkg/crypto/sha1/sha1block_386.s#newcode22\nsrc/pkg/crypto/sha1/sha1block_386.s:22: // To free up the word pointer (R10), we add it to e during LOAD/SHUFFLE instead\ns/R10/DI/\n\nhttps://codereview.appspot.com/7763049/diff/8001/src/pkg/crypto/sha1/sha1block_amd64.s\nFile src/pkg/crypto/sha1/sha1block_amd64.s (right):\n\nhttps://codereview.appspot.com/7763049/diff/8001/src/pkg/crypto/sha1/sha1block_amd64.s#newcode102\nsrc/pkg/crypto/sha1/sha1block_amd64.s:102: MOVL\t(4*4)(BP), BP\nThere's a tabs/spaces issue here, compared to the surrounding lines, and similarly for \"MOVL (4*4)(BP), BP\" in sha1block_386.s.",
			"disapproval": false,
			"date": "2013-03-21 07:14:50.585110",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"rsc@golang.org",
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7763049/diff/8001/src/pkg/crypto/sha1/sha1block_386.s\nFile src/pkg/crypto/sha1/sha1block_386.s (right):\n\nhttps://codereview.appspot.com/7763049/diff/8001/src/pkg/crypto/sha1/sha1block_386.s#newcode26\nsrc/pkg/crypto/sha1/sha1block_386.s:26: MOVL\t88(SP), SI; \\\nIt is possible to use the same form as in SHUFFLE and merge this line with the next? e.g. MOVL ((index+22)*4)(SI), DI.\n\nhttps://codereview.appspot.com/7763049/diff/8001/src/pkg/crypto/sha1/sha1block_386.s#newcode95\nsrc/pkg/crypto/sha1/sha1block_386.s:95: \n// func block(*digest, []byte)\n\nhttps://codereview.appspot.com/7763049/diff/8001/src/pkg/crypto/sha1/sha1block_386.s#newcode108\nsrc/pkg/crypto/sha1/sha1block_386.s:108: MOVL\t(4*4)(BP), BP\nalignment of \"BP\"",
			"disapproval": false,
			"date": "2013-03-21 11:26:32.367060",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7763049/diff/8001/src/pkg/crypto/sha1/sha1block_386.s\nFile src/pkg/crypto/sha1/sha1block_386.s (right):\n\nhttps://codereview.appspot.com/7763049/diff/8001/src/pkg/crypto/sha1/sha1block_386.s#newcode22\nsrc/pkg/crypto/sha1/sha1block_386.s:22: // To free up the word pointer (R10), we add it to e during LOAD/SHUFFLE instead\nOn 2013/03/21 07:14:51, nigeltao wrote:\n> s/R10/DI/\n\nDone.\n\nhttps://codereview.appspot.com/7763049/diff/8001/src/pkg/crypto/sha1/sha1block_386.s#newcode26\nsrc/pkg/crypto/sha1/sha1block_386.s:26: MOVL\t88(SP), SI; \\\nOn 2013/03/21 11:26:32, agl1 wrote:\n> It is possible to use the same form as in SHUFFLE and merge this line with the\n> next? e.g. MOVL ((index+22)*4)(SI), DI.\n\nI need a double-indirect here. The first load fetches the source pointer from its saved location on the stack. The second load fetches the data word from the source pointer. I don't think that's possible with an ordinary mov on x86, but it wouldn't be the first time I've underestimated the instruction set. :-)\n\nhttps://codereview.appspot.com/7763049/diff/8001/src/pkg/crypto/sha1/sha1block_386.s#newcode95\nsrc/pkg/crypto/sha1/sha1block_386.s:95: \nOn 2013/03/21 11:26:32, agl1 wrote:\n> // func block(*digest, []byte)\n\nDone.\n\nhttps://codereview.appspot.com/7763049/diff/8001/src/pkg/crypto/sha1/sha1block_386.s#newcode108\nsrc/pkg/crypto/sha1/sha1block_386.s:108: MOVL\t(4*4)(BP), BP\nOn 2013/03/21 11:26:32, agl1 wrote:\n> alignment of \"BP\"\n\nDone.\n\nhttps://codereview.appspot.com/7763049/diff/8001/src/pkg/crypto/sha1/sha1block_amd64.s\nFile src/pkg/crypto/sha1/sha1block_amd64.s (right):\n\nhttps://codereview.appspot.com/7763049/diff/8001/src/pkg/crypto/sha1/sha1block_amd64.s#newcode102\nsrc/pkg/crypto/sha1/sha1block_amd64.s:102: MOVL\t(4*4)(BP), BP\nOn 2013/03/21 07:14:51, nigeltao wrote:\n> There's a tabs/spaces issue here, compared to the surrounding lines, and\n> similarly for \"MOVL (4*4)(BP), BP\" in sha1block_386.s.\n\nDone.",
			"disapproval": false,
			"date": "2013-03-21 15:31:51.095110",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=e73043345273 ***\n\ncrypto/sha1: faster amd64, 386 implementations\n\n-- amd64 --\n\nOn a MacBookPro10,2 (Core i5):\n\nbenchmark              old ns/op    new ns/op    delta\nBenchmarkHash8Bytes          785          592  -24.59%\nBenchmarkHash1K             8727         3014  -65.46%\nBenchmarkHash8K            64926        20723  -68.08%\n\nbenchmark               old MB/s     new MB/s  speedup\nBenchmarkHash8Bytes        10.19        13.50    1.32x\nBenchmarkHash1K           117.34       339.71    2.90x\nBenchmarkHash8K           126.17       395.31    3.13x\n\nFor comparison, on the same machine, openssl 0.9.8r reports\nits sha1 speed as 341 MB/s for 1K and 404 MB/s for 8K.\n\nOn an Intel Xeon E5520:\n\nbenchmark              old ns/op    new ns/op    delta\nBenchmarkHash8Bytes          984          707  -28.15%\nBenchmarkHash1K            11141         3466  -68.89%\nBenchmarkHash8K            82435        23411  -71.60%\n\nbenchmark               old MB/s     new MB/s  speedup\nBenchmarkHash8Bytes         8.13        11.31    1.39x\nBenchmarkHash1K            91.91       295.36    3.21x\nBenchmarkHash8K            99.37       349.91    3.52x\n\nFor comparison, on the same machine, openssl 1.0.1 reports\nits sha1 speed as 286 MB/s for 1K and 394 MB/s for 8K.\n\n-- 386 --\n\nOn a MacBookPro10,2 (Core i5):\n\nbenchmark              old ns/op    new ns/op    delta\nBenchmarkHash8Bytes         1041          713  -31.51%\nBenchmarkHash1K            15612         3382  -78.34%\nBenchmarkHash8K           110152        22733  -79.36%\n\nbenchmark               old MB/s     new MB/s  speedup\nBenchmarkHash8Bytes         7.68        11.21    1.46x\nBenchmarkHash1K            65.59       302.76    4.62x\nBenchmarkHash8K            74.37       360.36    4.85x\n\nOn an Intel Xeon E5520:\n\nbenchmark              old ns/op    new ns/op    delta\nBenchmarkHash8Bytes         1221          842  -31.04%\nBenchmarkHash1K            14643         4137  -71.75%\nBenchmarkHash8K           108722        27394  -74.80%\n\nbenchmark               old MB/s     new MB/s  speedup\nBenchmarkHash8Bytes         6.55         9.49    1.45x\nBenchmarkHash1K            69.93       247.51    3.54x\nBenchmarkHash8K            75.35       299.04    3.97x\n\nR=agl, dave\nCC=golang-dev\nhttps://codereview.appspot.com/7763049",
			"disapproval": false,
			"date": "2013-03-21 15:32:06.864090",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 7763049: crypto/sha1: faster amd64, 386 implementations",
	"created": "2013-03-20 20:48:02.591330",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		19001
	],
	"modified": "2013-03-21 15:32:08.000350",
	"closed": true,
	"issue": 7763049
}