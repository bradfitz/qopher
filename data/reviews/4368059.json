{
	"description": "src/env.bash: Workaround/fix so compiling works on windows (MingW). \r\n\r\nOtherwise you would get the following when compiling Go\r\nmake: pwd: Command not found\r\nmake: echo: Command not found\r\nmake: *** [go-env] Error 127\r\nDid not find Go environment variables.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"rsc@google.com",
		"go.peter.90@gmail.com",
		"jdpoirier@gmail.com",
		"alex.brainman@gmail.com"
	],
	"messages": [
		{
			"sender": "mr_dark@darkweb.nl",
			"recipients": [
				"mr_dark@darkweb.nl",
				"golang-dev@googlegroups.com",
				"alex.brainman@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2011-04-18 09:38:05.886750",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"mr_dark@darkweb.nl",
				"golang-dev@googlegroups.com",
				"rsc@google.com",
				"go.peter.90@gmail.com",
				"jdpoirier@gmail.com",
				"alex.brainman@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Joe,\n\nSorry, it should have read,\n\nc:/go/bin -> /c/go/bin\nc:\\go\\bin -> /cgobin\n\nPeter",
			"disapproval": false,
			"date": "2011-04-19 13:39:41.982417",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Thanks for all the information.\nI'm having a bit of a hard time following it but I trust\nthe Windows experts.\n\nAs I understand it, the problem right now is that if $GOBIN\nis incorrect for inclusion in $PATH, then it invalidates everything\nthat follows it in the path.  The current CL hides the problem\nby moving $GOBIN further down the $PATH, but it does not\nfix the real problem, namely that $GOBIN is not correct.\nSo this CL is not okay.\n\nIf someone sends a CL that makes env.bash work in more\nWindows configurations by addressing the $GOBIN problem\nitself, I will gladly apply it.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-04-19 16:16:02.375797",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I can do the CL tonight unless someone else has already started one?\n\n-joe\n\nOn Tue, Apr 19, 2011 at 11:47 AM, Joseph Poirier <jdpoirier@gmail.com> wrote:\n> On Tue, Apr 19, 2011 at 11:15 AM, Russ Cox <rsc@google.com> wrote:\n>> Thanks for all the information.\n>> I'm having a bit of a hard time following it but I trust\n>> the Windows experts.\n>>\n>> As I understand it, the problem right now is that if $GOBIN\n>> is incorrect for inclusion in $PATH, then it invalidates everything\n>> that follows it in the path. \u00a0The current CL hides the problem\n>> by moving $GOBIN further down the $PATH, but it does not\n>> fix the real problem, namely that $GOBIN is not correct.\n>> So this CL is not okay.\n>>\n>> If someone sends a CL that makes env.bash work in more\n>> Windows configurations by addressing the $GOBIN problem\n>> itself, I will gladly apply it.\n>>\n>> Russ\n>>\n>\n> Correct, it masks the problem.\n>\n> The msys shell environment handles the path conversions for the PATH\n> environment variable but knows nothing about GOBIN. As long as the\n> user does not set GOBIN via windows (using the normal windows path\n> format) then GOBIN being set in env.bash works fine, because it sets\n> it in a unix'y way.\n>\n> I guess if the user is absolutely sure the msys shell environment is\n> being used, which for all practical purposes it would be at this\n> point, GOBIN could be set via windows using a unix format and all\n> would be fine.\n>\n> My previous replies were informational only and the readme I'd\n> mentioned listed the work-around as a quick fix.\n>\n> Concerning forward and back slashes. I've always recommended using\n> forward slashes on windows and my quick fix assumed the user\n> understood/knew that.\n>\n> If I remember correctly, the (experimental at this point) 64 bit\n> mingw/msys sets MINGW32 and will forever. There's a thread about it on\n> one of the forum but I'll have to find it.\n>\n> For the CL to work it needs to:\n>\n> if windows:\n> \u00a0 \u00a0if GOBIN already exists:\n> \u00a0 \u00a0 \u00a0 \u00a0if back slashes in GOBIN path:\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0convert back slashes to forward slashes\n> \u00a0 \u00a0 \u00a0 \u00a0convert colon to forward slash\n> \u00a0 \u00a0 \u00a0 \u00a0prepend forward slash\n> \u00a0 \u00a0 \u00a0 \u00a0add the modified GOBIN to the start of the new PATH\n>\n> -joe\n>\n",
			"disapproval": false,
			"date": "2011-04-19 16:53:46.623719",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "What causes the commands not to be found\nand why does rearranging directory order in\n$PATH fix it?\n",
			"disapproval": false,
			"date": "2011-04-18 15:21:31.956445",
			"approval": false
		},
		{
			"sender": "mr_dark@darkweb.nl",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "You still need to fix $PATH otherwise it'll you will get that error.\n\nenv.bash\n- export PATH=\"$GOBIN\":/bin:/usr/bin:$PATH\n+ export PATH=/bin:/usr/bin:\"$GOBIN\":$PATH\n\nOn 18 apr, 23:22, go.peter...@gmail.com wrote:\n> On 2011/04/18 20:49:55, Mr_Dark wrote:\n>\n> > Just converting the \\ to / also works. MSYS/MinGW doesn't seem to have\n> > a problem with that.\n> > `c:\\go\\bin` -> `c:/go/bin`\n>\n> Windows:\n>\n> P:\\>set GO\n> GOARCH=386\n> GOBIN=p:/go/bin\n> GOOS=windows\n> GOROOT=p:/go\n>\n> MSYS/MinGW:\n>\n> $ hg id ab386ee780c0 tip\n>\n> $ env | grep 'GO'\n> GOBIN=p:/go/bin\n> GOARCH=386\n> GOROOT=p:/go\n> GOOS=windows\n>\n> peter /p/go/src\n> $ cd $GOROOT\n> peter /p/go\n> $ cd src\n> peter p/go/src\n> $ ./all.bash\n> make: pwd: Command not found\n> make: echo: Command not found\n> make: *** [go-env] Error 127\n> Did not find Go environment variables.\n>\n> http://codereview.appspot.com/4368059/\n",
			"disapproval": false,
			"date": "2011-04-18 21:49:05.498345",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"mr_dark@darkweb.nl",
				"golang-dev@googlegroups.com",
				"rsc@google.com",
				"go.peter.90@gmail.com",
				"jdpoirier@gmail.com",
				"alex.brainman@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Joe,\n\nOn 2011/04/19 02:08:28, Joe Poirier wrote:\n> env.bash\n> --------\n> export OLDPATH=$PATH\n> if [ \"$MSYSTEM\" = \"MINGW32\" ]; then\n> export PATH=\"/${GOBIN/:/}\":/bin:/usr/bin:$PATH\n> else\n> export PATH=\"$GOBIN\":/bin:/usr/bin:$PATH\n> fi\n\n$MSYSTEM may be \"MINGW32\" or \"MSYS\".\n\nmsys.bat:\n\nif \"x%MSYSTEM%\" == \"x\" set MSYSTEM=MINGW32\nif \"%1\" == \"MINGW32\" set MSYSTEM=MINGW32\nif \"%1\" == \"MSYS\" set MSYSTEM=MSYS\n\nYou shouldn't assume that just because I'm using MSYS as a Unix-like shell that I'm using the MinGW 32-bit C compiler. I may be using MinGW 64-bit or some other C compiler.\n\nPeter",
			"disapproval": false,
			"date": "2011-04-19 15:55:50.051016",
			"approval": false
		},
		{
			"sender": "mr_dark@darkweb.nl",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I really have no idea. This is just something that came up when I\nlooked at older revisions (5ca1e6b0cbe7) of the env.bash file.\nWhen I changed it back, compiling worked again, so I assume MingW has\nsome problems with it.\n\nOn 18 apr, 17:21, Russ Cox <r...@google.com> wrote:\n> What causes the commands not to be found\n> and why does rearranging directory order in\n> $PATH fix it?\n",
			"disapproval": false,
			"date": "2011-04-18 17:36:13.904679",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Apr 18, 2011 at 13:36, Mr_Dark <mr_dark@darkweb.nl> wrote:\n> I really have no idea. This is just something that came up when I\n> looked at older revisions (5ca1e6b0cbe7) of the env.bash file.\n> When I changed it back, compiling worked again, so I assume MingW has\n> some problems with it.\n\nI'd prefer to find out what is wrong with mingw.\nMaybe we should be using ; to separate path elements,\nfor example.\n\nCan any other MinGW users chime in?\n",
			"disapproval": false,
			"date": "2011-04-18 17:51:20.858287",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"mr_dark@darkweb.nl",
				"golang-dev@googlegroups.com",
				"rsc@google.com",
				"go.peter.90@gmail.com",
				"alex.brainman@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Russ,\n\nIn Windows paths, a colon is a volume separator and a semi-colon is a path list separator.  MSYS, which provides a Unix-like shell for MinGW, knows that it needs to translate a Windows path list to Unix for the expanded PATH environment variable. `c:\\go\\bin` is translated to `/c/go/bin` and colons are used for path list separators. MSYS doesn't know that it needs to translate for GOBIN, GOROOT, and other Go path environment variables in a bash script.  MSYS stops searching the PATH environment variable when it finds an invalid path in the list. If `\"$GOBIN\"` is first in the path list and it's invalid then the `/bin` and `/usr/bin` paths are not searched and the Unix pwd and echo commands are not found.\n\nFor example, for\n\n    $GOBIN = p:/go/bin\n\nAfter\n\n    export PATH=\"$GOBIN\":/bin:/usr/bin:$PATH\n\nThen\n\n    $PATH = p:/go/bin:/bin:/usr/bin:.:/usr/local/bin:/mingw/bin:/bin: ...\n\nNote that the volume separator now looks like a path list separator.\n\nIf GOBIN is changed to accomodate Unix, then it's not valid for Windows. For example,\n\n    $GOBIN = /p/go/bin\n\nRevision: 5ca1e6b0cb - Log: build: move $GOBIN ahead of /bin, /usr/bin in build $PATH\nhttp://code.google.com/p/go/source/detail?r=5ca1e6b0cb\n\nSince this revision, I've have used a script to change the MSYS GOROOT and GOBIN environment variables for Windows.\n\nI believe Joe Poirer has encountered this problem too.\n\nPeter",
			"disapproval": false,
			"date": "2011-04-18 18:28:23.964468",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Apr 18, 2011 at 14:28,  <go.peter.90@gmail.com> wrote:\n> Russ,\n>\n> In Windows paths, a colon is a volume separator and a semi-colon is a\n> path list separator. \u00a0MSYS, which provides a Unix-like shell for MinGW,\n> knows that it needs to translate a Windows path list to Unix for the\n> expanded PATH environment variable. `c:\\go\\bin` is translated to\n> `/c/go/bin` and colons are used for path list separators. MSYS doesn't\n> know that it needs to translate for GOBIN, GOROOT, and other Go path\n> environment variables in a bash script. \u00a0MSYS stops searching the PATH\n> environment variable when it finds an invalid path in the list. If\n> `\"$GOBIN\"` is first in the path list and it's invalid then the `/bin`\n> and `/usr/bin` paths are not searched and the Unix pwd and echo commands\n> are not found.\n>\n> For example, for\n>\n> \u00a0 \u00a0$GOBIN = p:/go/bin\n>\n> After\n>\n> \u00a0 \u00a0export PATH=\"$GOBIN\":/bin:/usr/bin:$PATH\n>\n> Then\n>\n> \u00a0 \u00a0$PATH = p:/go/bin:/bin:/usr/bin:.:/usr/local/bin:/mingw/bin:/bin:\n> ...\n>\n> Note that the volume separator now looks like a path list separator.\n>\n> If GOBIN is changed to accomodate Unix, then it's not valid for Windows.\n> For example,\n>\n> \u00a0 \u00a0$GOBIN = /p/go/bin\n>\n> Revision: 5ca1e6b0cb - Log: build: move $GOBIN ahead of /bin, /usr/bin\n> in build $PATH\n> http://code.google.com/p/go/source/detail?r=5ca1e6b0cb\n>\n> Since this revision, I've have used a script to change the MSYS GOROOT\n> and GOBIN environment variables for Windows.\n\nThanks.\n\nWhat does your script do?  It seems like rearranging $PATH\nis ignoring the fact that $GOBIN is set wrong.  Should env.bash\nset $GOBIN to something like /c/go/bin instead of c:\\go\\bin\non Windows?\n\nRuss\n",
			"disapproval": false,
			"date": "2011-04-18 18:35:09.574826",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"mr_dark@darkweb.nl",
				"golang-dev@googlegroups.com",
				"rsc@google.com",
				"go.peter.90@gmail.com",
				"alex.brainman@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Russ\n\nThis is a quick kludge that I threw together to get over the immediate problem. Windows has very limited environment setting and expansion capability.\n\nPermanent Windows User Enviroment Variables for MSYS:\n\nGOROOTVOL=c\nGOROOTDIR=gowin\nGOBIN=/%GOROOTVOL%/%GOROOTDIR%/bin => /c/gowin/bin\t\nGOROOT=/%GOROOTVOL%/%GOROOTDIR% => /c/gowin\t\t\n\nI can now run using MSYS/MinGw.\n\nPermanent Windows User Enviroment Variables for Windows:\n\nGOROOTWIN=%GOROOTVOL%:\\%GOROOTDIR% => c:\\gowin\t\nGOBINWIN=%GOROOTVOL%:\\%GOROOTDIR%\\bin =>c:\\gowin\\bin\t\n\nWindows Command file script:\n\nset GOROOT=GOROOTWIN\nset GOBIN=GOBINWIN\n\nNow I can run using Windows.\n\nThen, when I clone the repository, I just change GOROOTDIR.\n\nPeter",
			"disapproval": false,
			"date": "2011-04-18 18:58:05.867373",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"mr_dark@darkweb.nl",
				"golang-dev@googlegroups.com",
				"rsc@google.com",
				"go.peter.90@gmail.com",
				"jdpoirier@gmail.com",
				"alex.brainman@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Unfortunately I have nothing useful to add. I think this http://code.google.com/p/go/issues/detail?id=1587 is related.\n\nAlex",
			"disapproval": false,
			"date": "2011-04-18 23:48:41.069054",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"mr_dark@darkweb.nl",
				"golang-dev@googlegroups.com",
				"rsc@google.com",
				"go.peter.90@gmail.com",
				"alex.brainman@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Russ,\n\n> It seems like rearranging $PATH\n> is ignoring the fact that $GOBIN is set wrong.  Should env.bash\n> set $GOBIN to something like /c/go/bin instead of c:\\go\\bin\n> on Windows?\n\nYou should be able to set the $PATH list in whatever order you want.\n\nAt the very least, for GOOS==\"windows\", if GOROOT or GOBIN start with a Windows volume, '^[a-zA-z]:', then env.bash should convert them to a Unix-like path for MSYS/MinGW. For example, convert c:\\go\\bin to /c/go/bin.\n\nDo you agree?\n\nPeter",
			"disapproval": false,
			"date": "2011-04-18 20:41:02.398222",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Apr 18, 2011 at 4:49 PM, Mr_Dark <mr_dark@darkweb.nl> wrote:\n> You still need to fix $PATH otherwise it'll you will get that error.\n>\n> env.bash\n> - export PATH=\"$GOBIN\":/bin:/usr/bin:$PATH\n> + export PATH=/bin:/usr/bin:\"$GOBIN\":$PATH\n>\n> On 18 apr, 23:22, go.peter...@gmail.com wrote:\n>> On 2011/04/18 20:49:55, Mr_Dark wrote:\n>>\n>> > Just converting the \\ to / also works. MSYS/MinGW doesn't seem to have\n>> > a problem with that.\n>> > `c:\\go\\bin` -> `c:/go/bin`\n>>\n>> Windows:\n>>\n>> P:\\>set GO\n>> GOARCH=386\n>> GOBIN=p:/go/bin\n>> GOOS=windows\n>> GOROOT=p:/go\n>>\n>> MSYS/MinGW:\n>>\n>> $ hg id ab386ee780c0 tip\n>>\n>> $ env | grep 'GO'\n>> GOBIN=p:/go/bin\n>> GOARCH=386\n>> GOROOT=p:/go\n>> GOOS=windows\n>>\n>> peter /p/go/src\n>> $ cd $GOROOT\n>> peter /p/go\n>> $ cd src\n>> peter p/go/src\n>> $ ./all.bash\n>> make: pwd: Command not found\n>> make: echo: Command not found\n>> make: *** [go-env] Error 127\n>> Did not find Go environment variables.\n>>\n>> http://codereview.appspot.com/4368059/\n\nI brought this up on the list http://tinyurl.com/44qo2qs\n\nFrom the readme I mention:\n\nPossible hacks when GOBIN and/or GOROOT are set by the user\n================================================\n\nmsys.bat\n--------\nif not \"x%GOBIN%\" == \"x\" set GOBIN=/%GOBIN::=%\nif not \"x%GOROOT%\" == \"x\" set GOROOT=/%GOROOT::=%\n\n*an extra forward slash gets added for some reason?\n\n\nenv.bash\n--------\nexport OLDPATH=$PATH\nif [ \"$MSYSTEM\" = \"MINGW32\" ]; then\nexport PATH=\"/${GOBIN/:/}\":/bin:/usr/bin:$PATH\nelse\nexport PATH=\"$GOBIN\":/bin:/usr/bin:$PATH\nfi\n\nENVBASH=\"env.bash\"\nif [ \"$GOOS\" = \"windows\" ]; then\nENVBASH=\"winenv.bash\"\nfi\n\n*are there any side effects?\n\nGOBIN\n=============\n- it's where the tools get put\n- if no GOBIN exists it's set based on the path of the in progress build\n- GOBIN might have been set by the user, with two possibilities for\nhow it's set:  1) explicit path or 2) appending bin to the expansion\nof GOROOT\n- env.bash creates GOBIN if it doesn't exist and prepends GOBIN to\nPATH, the freshly built Go toolchain should be used to build the\npackages, issue 424905 ensures it happens\n",
			"disapproval": false,
			"date": "2011-04-18 23:12:30.498606",
			"approval": false
		},
		{
			"sender": "mr_dark@darkweb.nl",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Just converting the \\ to / also works. MSYS/MinGW doesn't seem to have\na problem with that.\n`c:\\go\\bin` -> `c:/go/bin`\n\nAs for the `.:` which need to be at the front of the PATH it can be\npossible to do something like this:\nNEWPATH=\"$GOBIN\":/bin:/usr/bin:$PATH\nexport PATH=.:${NEWPATH//.:/}\n\nwhich will remove `.:` from NEWPATH and then put it in front of it\nwhile setting the PATH variable.\n\nOn 18 apr, 22:41, go.peter...@gmail.com wrote:\n> Russ,\n>\n> > It seems like rearranging $PATH\n> > is ignoring the fact that $GOBIN is set wrong. \u00a0Should env.bash\n> > set $GOBIN to something like /c/go/bin instead of c:\\go\\bin\n> > on Windows?\n>\n> You should be able to set the $PATH list in whatever order you want.\n>\n> At the very least, for GOOS==\"windows\", if GOROOT or GOBIN start with a\n> Windows volume, '^[a-zA-z]:', then env.bash should convert them to a\n> Unix-like path for MSYS/MinGW. For example, convert c:\\go\\bin to\n> /c/go/bin.\n>\n> Do you agree?\n>\n> Peter\n>\n> http://codereview.appspot.com/4368059/\n",
			"disapproval": false,
			"date": "2011-04-18 20:49:55.173248",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"mr_dark@darkweb.nl",
				"golang-dev@googlegroups.com",
				"rsc@google.com",
				"go.peter.90@gmail.com",
				"alex.brainman@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/04/18 20:49:55, Mr_Dark wrote:\n> Just converting the \\ to / also works. MSYS/MinGW doesn't seem to have\n> a problem with that.\n> `c:\\go\\bin` -> `c:/go/bin`\n\nWindows:\n\nP:\\>set GO\nGOARCH=386\nGOBIN=p:/go/bin\nGOOS=windows\nGOROOT=p:/go\n\nMSYS/MinGW:\n\n$ hg id ab386ee780c0 tip\n\n$ env | grep 'GO'\nGOBIN=p:/go/bin\nGOARCH=386\nGOROOT=p:/go\nGOOS=windows\n\npeter /p/go/src\n$ cd $GOROOT\npeter /p/go\n$ cd src\npeter p/go/src\n$ ./all.bash\nmake: pwd: Command not found\nmake: echo: Command not found\nmake: *** [go-env] Error 127\nDid not find Go environment variables.",
			"disapproval": false,
			"date": "2011-04-18 21:22:55.509476",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "...left out the first part of the readme\n\nGo-dev issue 424905 moved GOBIN in front of /bin and /usr/bin in env.bash\nwhich caused a bug to surface on the windows build, ie it caused the build\nto break immediately under certain circumstances.\n\nMsys does the path conversion for GOBIN internally when it's set in env.bash\nbut not when GOBIN has already been set by the user. What gets prepended\nwhen the user set GOBIN is c:/go/bin which doesn't work in Msys' unix\nlike environment, c:/go/bin should actually be converted to /c/go/bin for\nit to work.\n\nBy default, GOOS and GOARCH are set based on the host system if they aren't\nalready, they don't need to be set for a standard build. Likewise, GOROOT\nand GOBIN can take on defaults set in env.bash and Msys handles the path\nconversions without problem.\n\ntl;dr there's no need to set GOOS, GARCH, GOROOT, or GOBIN for a standard\nGo build and setup.\n\nOn Mon, Apr 18, 2011 at 6:11 PM, Joseph Poirier <jdpoirier@gmail.com> wrote:\n> On Mon, Apr 18, 2011 at 4:49 PM, Mr_Dark <mr_dark@darkweb.nl> wrote:\n>> You still need to fix $PATH otherwise it'll you will get that error.\n>>\n>> env.bash\n>> - export PATH=\"$GOBIN\":/bin:/usr/bin:$PATH\n>> + export PATH=/bin:/usr/bin:\"$GOBIN\":$PATH\n>>\n>> On 18 apr, 23:22, go.peter...@gmail.com wrote:\n>>> On 2011/04/18 20:49:55, Mr_Dark wrote:\n>>>\n>>> > Just converting the \\ to / also works. MSYS/MinGW doesn't seem to have\n>>> > a problem with that.\n>>> > `c:\\go\\bin` -> `c:/go/bin`\n>>>\n>>> Windows:\n>>>\n>>> P:\\>set GO\n>>> GOARCH=386\n>>> GOBIN=p:/go/bin\n>>> GOOS=windows\n>>> GOROOT=p:/go\n>>>\n>>> MSYS/MinGW:\n>>>\n>>> $ hg id ab386ee780c0 tip\n>>>\n>>> $ env | grep 'GO'\n>>> GOBIN=p:/go/bin\n>>> GOARCH=386\n>>> GOROOT=p:/go\n>>> GOOS=windows\n>>>\n>>> peter /p/go/src\n>>> $ cd $GOROOT\n>>> peter /p/go\n>>> $ cd src\n>>> peter p/go/src\n>>> $ ./all.bash\n>>> make: pwd: Command not found\n>>> make: echo: Command not found\n>>> make: *** [go-env] Error 127\n>>> Did not find Go environment variables.\n>>>\n>>> http://codereview.appspot.com/4368059/\n>\n> I brought this up on the list http://tinyurl.com/44qo2qs\n>\n> From the readme I mention:\n>\n> Possible hacks when GOBIN and/or GOROOT are set by the user\n> ================================================\n>\n> msys.bat\n> --------\n> if not \"x%GOBIN%\" == \"x\" set GOBIN=/%GOBIN::=%\n> if not \"x%GOROOT%\" == \"x\" set GOROOT=/%GOROOT::=%\n>\n> *an extra forward slash gets added for some reason?\n>\n>\n> env.bash\n> --------\n> export OLDPATH=$PATH\n> if [ \"$MSYSTEM\" = \"MINGW32\" ]; then\n> export PATH=\"/${GOBIN/:/}\":/bin:/usr/bin:$PATH\n> else\n> export PATH=\"$GOBIN\":/bin:/usr/bin:$PATH\n> fi\n>\n> ENVBASH=\"env.bash\"\n> if [ \"$GOOS\" = \"windows\" ]; then\n> ENVBASH=\"winenv.bash\"\n> fi\n>\n> *are there any side effects?\n>\n> GOBIN\n> =============\n> - it's where the tools get put\n> - if no GOBIN exists it's set based on the path of the in progress build\n> - GOBIN might have been set by the user, with two possibilities for\n> how it's set: \u00a01) explicit path or 2) appending bin to the expansion\n> of GOROOT\n> - env.bash creates GOBIN if it doesn't exist and prepends GOBIN to\n> PATH, the freshly built Go toolchain should be used to build the\n> packages, issue 424905 ensures it happens\n>\n",
			"disapproval": false,
			"date": "2011-04-18 23:15:53.020958",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"mr_dark@darkweb.nl",
				"golang-dev@googlegroups.com",
				"rsc@google.com",
				"go.peter.90@gmail.com",
				"jdpoirier@gmail.com",
				"alex.brainman@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Joe,\n\nOn 2011/04/19 02:08:28, Joe Poirier wrote:\n> - if GOBIN is hard coded to something like C:/go/bin the following\n> code does the conversion for an msys environment where  C:/go/bin\n> becomes  /C/go/bin\n> \n> env.bash\n> --------\n> export OLDPATH=$PATH\n> if [ \"$MSYSTEM\" = \"MINGW32\" ]; then\n> export PATH=\"/${GOBIN/:/}\":/bin:/usr/bin:$PATH\n> else\n> export PATH=\"$GOBIN\":/bin:/usr/bin:$PATH\n> fi\n\nc:/go/bin -> c:/go/bin\nc:\\go\\bin -> /cgobin\n\nPeter",
			"disapproval": false,
			"date": "2011-04-19 13:37:35.124707",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"mr_dark@darkweb.nl",
				"golang-dev@googlegroups.com",
				"rsc@google.com",
				"go.peter.90@gmail.com",
				"jdpoirier@gmail.com",
				"alex.brainman@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Joe,\n\nPlus,\n\nc:\\go/bin -> /cgo/bin\nc:/go\\bin -> /c/gobin\n\nFirst, replace \\ by /.\n\nPeter",
			"disapproval": false,
			"date": "2011-04-19 13:44:56.131116",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"mr_dark@darkweb.nl",
				"golang-dev@googlegroups.com",
				"rsc@google.com",
				"go.peter.90@gmail.com",
				"jdpoirier@gmail.com",
				"alex.brainman@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Joe,\n\nOn 2011/04/19 16:47:52, Joe Poirier wrote:\n> For the CL to work it needs to:\n> \n> if windows:\n>     if GOBIN already exists:\n>         if back slashes in GOBIN path:\n>             convert back slashes to forward slashes\n>         convert colon to forward slash\n>         prepend forward slash\n>         add the modified GOBIN to the start of the new PATH\n\nThis looks exactly like the set of conversion rules I use in Go.\n\nfunc GoPath(path string) string {\n\tif runtime.GOOS == \"windows\" {\n\t\tq := make([]byte, len(path)+1)\n\t\tp := q[1:]\n\t\tfor i := 0; i < len(p); i++ {\n\t\t\tb := path[i]\n\t\t\tif b == '\\\\' {\n\t\t\t\tb = '/'\n\t\t\t}\n\t\t\tp[i] = b\n\t\t}\n\t\t// Windows volume, '^[a-zA-z]:'\n\t\tif len(p) >= 2 && p[1] == ':' {\n\t\t\tif v := p[0]; 'a' <= v && v <= 'z' || 'A' <= v && v <= 'Z' {\n\t\t\t\tp[1] = p[0]\n\t\t\t\tp[0] = '/'\n\t\t\t\tif len(p) >= 3 {\n\t\t\t\t\tif p[2] != '/' {\n\t\t\t\t\t\tp = q\n\t\t\t\t\t\tp[0] = p[1]\n\t\t\t\t\t\tp[1] = p[2]\n\t\t\t\t\t\tp[2] = '/'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn string(p)\n\t}\n\treturn path\n}\n\nPeter",
			"disapproval": false,
			"date": "2011-04-19 16:56:52.732490",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Just to clarify\n\n- when I say the user may have already set an environment variable I'm\nreferring to it being hard coded e.g. via right-click \"My Computer\" >\nProperties > Advanced > \"Environment Variable\" where the normal\nwindows format uses a colon in the path:  C:/go/bin\n\n- if GOBIN is hard coded to something like C:/go/bin the following\ncode does the conversion for an msys environment where  C:/go/bin\nbecomes  /C/go/bin\n\nenv.bash\n--------\nexport OLDPATH=$PATH\nif [ \"$MSYSTEM\" = \"MINGW32\" ]; then\nexport PATH=\"/${GOBIN/:/}\":/bin:/usr/bin:$PATH\nelse\nexport PATH=\"$GOBIN\":/bin:/usr/bin:$PATH\nfi\n\n\nOn Mon, Apr 18, 2011 at 6:15 PM, Joseph Poirier <jdpoirier@gmail.com> wrote:\n> ...left out the first part of the readme\n>\n> Go-dev issue 424905 moved GOBIN in front of /bin and /usr/bin in env.bash\n> which caused a bug to surface on the windows build, ie it caused the build\n> to break immediately under certain circumstances.\n>\n> Msys does the path conversion for GOBIN internally when it's set in env.bash\n> but not when GOBIN has already been set by the user. What gets prepended\n> when the user set GOBIN is c:/go/bin which doesn't work in Msys' unix\n> like environment, c:/go/bin should actually be converted to /c/go/bin for\n> it to work.\n>\n> By default, GOOS and GOARCH are set based on the host system if they aren't\n> already, they don't need to be set for a standard build. Likewise, GOROOT\n> and GOBIN can take on defaults set in env.bash and Msys handles the path\n> conversions without problem.\n>\n> tl;dr there's no need to set GOOS, GARCH, GOROOT, or GOBIN for a standard\n> Go build and setup.\n>\n> On Mon, Apr 18, 2011 at 6:11 PM, Joseph Poirier <jdpoirier@gmail.com> wrote:\n>> On Mon, Apr 18, 2011 at 4:49 PM, Mr_Dark <mr_dark@darkweb.nl> wrote:\n>>> You still need to fix $PATH otherwise it'll you will get that error.\n>>>\n>>> env.bash\n>>> - export PATH=\"$GOBIN\":/bin:/usr/bin:$PATH\n>>> + export PATH=/bin:/usr/bin:\"$GOBIN\":$PATH\n>>>\n>>> On 18 apr, 23:22, go.peter...@gmail.com wrote:\n>>>> On 2011/04/18 20:49:55, Mr_Dark wrote:\n>>>>\n>>>> > Just converting the \\ to / also works. MSYS/MinGW doesn't seem to have\n>>>> > a problem with that.\n>>>> > `c:\\go\\bin` -> `c:/go/bin`\n>>>>\n>>>> Windows:\n>>>>\n>>>> P:\\>set GO\n>>>> GOARCH=386\n>>>> GOBIN=p:/go/bin\n>>>> GOOS=windows\n>>>> GOROOT=p:/go\n>>>>\n>>>> MSYS/MinGW:\n>>>>\n>>>> $ hg id ab386ee780c0 tip\n>>>>\n>>>> $ env | grep 'GO'\n>>>> GOBIN=p:/go/bin\n>>>> GOARCH=386\n>>>> GOROOT=p:/go\n>>>> GOOS=windows\n>>>>\n>>>> peter /p/go/src\n>>>> $ cd $GOROOT\n>>>> peter /p/go\n>>>> $ cd src\n>>>> peter p/go/src\n>>>> $ ./all.bash\n>>>> make: pwd: Command not found\n>>>> make: echo: Command not found\n>>>> make: *** [go-env] Error 127\n>>>> Did not find Go environment variables.\n>>>>\n>>>> http://codereview.appspot.com/4368059/\n>>\n>> I brought this up on the list http://tinyurl.com/44qo2qs\n>>\n>> From the readme I mention:\n>>\n>> Possible hacks when GOBIN and/or GOROOT are set by the user\n>> ================================================\n>>\n>> msys.bat\n>> --------\n>> if not \"x%GOBIN%\" == \"x\" set GOBIN=/%GOBIN::=%\n>> if not \"x%GOROOT%\" == \"x\" set GOROOT=/%GOROOT::=%\n>>\n>> *an extra forward slash gets added for some reason?\n>>\n>>\n>> env.bash\n>> --------\n>> export OLDPATH=$PATH\n>> if [ \"$MSYSTEM\" = \"MINGW32\" ]; then\n>> export PATH=\"/${GOBIN/:/}\":/bin:/usr/bin:$PATH\n>> else\n>> export PATH=\"$GOBIN\":/bin:/usr/bin:$PATH\n>> fi\n>>\n>> ENVBASH=\"env.bash\"\n>> if [ \"$GOOS\" = \"windows\" ]; then\n>> ENVBASH=\"winenv.bash\"\n>> fi\n>>\n>> *are there any side effects?\n>>\n>> GOBIN\n>> =============\n>> - it's where the tools get put\n>> - if no GOBIN exists it's set based on the path of the in progress build\n>> - GOBIN might have been set by the user, with two possibilities for\n>> how it's set: \u00a01) explicit path or 2) appending bin to the expansion\n>> of GOROOT\n>> - env.bash creates GOBIN if it doesn't exist and prepends GOBIN to\n>> PATH, the freshly built Go toolchain should be used to build the\n>> packages, issue 424905 ensures it happens\n>>\n>\n",
			"disapproval": false,
			"date": "2011-04-19 02:08:28.454639",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Tue, Apr 19, 2011 at 11:15 AM, Russ Cox <rsc@google.com> wrote:\n> Thanks for all the information.\n> I'm having a bit of a hard time following it but I trust\n> the Windows experts.\n>\n> As I understand it, the problem right now is that if $GOBIN\n> is incorrect for inclusion in $PATH, then it invalidates everything\n> that follows it in the path. \u00a0The current CL hides the problem\n> by moving $GOBIN further down the $PATH, but it does not\n> fix the real problem, namely that $GOBIN is not correct.\n> So this CL is not okay.\n>\n> If someone sends a CL that makes env.bash work in more\n> Windows configurations by addressing the $GOBIN problem\n> itself, I will gladly apply it.\n>\n> Russ\n>\n\nCorrect, it masks the problem.\n\nThe msys shell environment handles the path conversions for the PATH\nenvironment variable but knows nothing about GOBIN. As long as the\nuser does not set GOBIN via windows (using the normal windows path\nformat) then GOBIN being set in env.bash works fine, because it sets\nit in a unix'y way.\n\nI guess if the user is absolutely sure the msys shell environment is\nbeing used, which for all practical purposes it would be at this\npoint, GOBIN could be set via windows using a unix format and all\nwould be fine.\n\nMy previous replies were informational only and the readme I'd\nmentioned listed the work-around as a quick fix.\n\nConcerning forward and back slashes. I've always recommended using\nforward slashes on windows and my quick fix assumed the user\nunderstood/knew that.\n\nIf I remember correctly, the (experimental at this point) 64 bit\nmingw/msys sets MINGW32 and will forever. There's a thread about it on\none of the forum but I'll have to find it.\n\nFor the CL to work it needs to:\n\nif windows:\n    if GOBIN already exists:\n        if back slashes in GOBIN path:\n            convert back slashes to forward slashes\n        convert colon to forward slash\n        prepend forward slash\n        add the modified GOBIN to the start of the new PATH\n\n-joe\n",
			"disapproval": false,
			"date": "2011-04-19 16:47:52.654521",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"mr_dark@darkweb.nl",
				"golang-dev@googlegroups.com",
				"rsc@google.com",
				"go.peter.90@gmail.com",
				"jdpoirier@gmail.com",
				"alex.brainman@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Russ,\n\nYou clearly understand the problem.\n\nWe need a CL that converts $GOBIN from a Windows path to a Unix-like path before it's inserted in the $PATH list.\n\nThis CL is not okay.\n\nPeter",
			"disapproval": false,
			"date": "2011-04-19 17:15:33.177879",
			"approval": false
		}
	],
	"owner_email": "mr_dark@darkweb.nl",
	"private": false,
	"base_url": "",
	"owner": "Mr_Dark",
	"subject": "Windows env.bash fix",
	"created": "2011-04-08 08:02:50.616548",
	"patchsets": [
		1
	],
	"modified": "2011-04-19 17:15:33.177879",
	"closed": false,
	"issue": 4368059
}