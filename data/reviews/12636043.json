{
	"description": "go.talks: bestpractices: adding compelling example for error handling.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"adg@golang.org",
		"r@golang.org",
		"dan.kortschak@adelaide.edu.au",
		"nightlyone@googlemail.com"
	],
	"messages": [
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.talks",
			"disapproval": false,
			"date": "2013-08-08 00:22:25.395220",
			"approval": false
		},
		{
			"sender": "dan.kortschak@adelaide.edu.au",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"r@golang.org",
				"dan.kortschak@adelaide.edu.au",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/08 00:41:39, r wrote:\n \n> https://codereview.appspot.com/12636043/diff/9001/2013/bestpractices/shortercode6.go#newcode70\n> 2013/bestpractices/shortercode6.go:70: Age:      3383,\n> is this accurate? :)\n\nOff by one - years are 1-based.",
			"disapproval": false,
			"date": "2013-08-08 00:52:15.219560",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12636043/diff/9001/2013/bestpractices.slide\nFile 2013/bestpractices.slide (right):\n\nhttps://codereview.appspot.com/12636043/diff/9001/2013/bestpractices.slide#newcode55\n2013/bestpractices.slide:55: * Atomic writing\nthe title is wrong; the writes are not atomic.\n\nhttps://codereview.appspot.com/12636043/diff/9001/2013/bestpractices/shortercode6.go\nFile 2013/bestpractices/shortercode6.go (right):\n\nhttps://codereview.appspot.com/12636043/diff/9001/2013/bestpractices/shortercode6.go#newcode29\n2013/bestpractices/shortercode6.go:29: // Write write the given value into the writer using little endian.\n// Write writes the value using little-endian byte order.\n\nhttps://codereview.appspot.com/12636043/diff/9001/2013/bestpractices/shortercode6.go#newcode45\n2013/bestpractices/shortercode6.go:45: // Close actually writes all the previous values into the writer if no\ns/actually //\n\nmaybe\n\n// Close writes any pending values into the writer if no error has occurred.\n// If an error has occurred, earlier or with a write by Close, the error is returned.\n\nhttps://codereview.appspot.com/12636043/diff/9001/2013/bestpractices/shortercode6.go#newcode70\n2013/bestpractices/shortercode6.go:70: Age:      3383,\nis this accurate? :)",
			"disapproval": false,
			"date": "2013-08-08 00:41:39.365690",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"r@golang.org",
				"dan.kortschak@adelaide.edu.au",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12636043/diff/9001/2013/bestpractices.slide\nFile 2013/bestpractices.slide (right):\n\nhttps://codereview.appspot.com/12636043/diff/9001/2013/bestpractices.slide#newcode55\n2013/bestpractices.slide:55: * Atomic writing\nOn 2013/08/08 00:41:39, r wrote:\n> the title is wrong; the writes are not atomic.\n\nBetter?\n\nhttps://codereview.appspot.com/12636043/diff/9001/2013/bestpractices/shortercode6.go\nFile 2013/bestpractices/shortercode6.go (right):\n\nhttps://codereview.appspot.com/12636043/diff/9001/2013/bestpractices/shortercode6.go#newcode29\n2013/bestpractices/shortercode6.go:29: // Write write the given value into the writer using little endian.\nOn 2013/08/08 00:41:39, r wrote:\n> // Write writes the value using little-endian byte order.\n\nDone.\n\nhttps://codereview.appspot.com/12636043/diff/9001/2013/bestpractices/shortercode6.go#newcode45\n2013/bestpractices/shortercode6.go:45: // Close actually writes all the previous values into the writer if no\nOn 2013/08/08 00:41:39, r wrote:\n> s/actually //\n> \n> maybe\n> \n> // Close writes any pending values into the writer if no error has occurred.\n> // If an error has occurred, earlier or with a write by Close, the error is\n> returned.\n> \n\nDone.\n\nhttps://codereview.appspot.com/12636043/diff/9001/2013/bestpractices/shortercode6.go#newcode70\n2013/bestpractices/shortercode6.go:70: Age:      3383,\nOn 2013/08/08 00:41:39, r wrote:\n> is this accurate? :)\n\nNow it is :-)",
			"disapproval": false,
			"date": "2013-08-08 04:21:51.293980",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"r@golang.org",
				"dan.kortschak@adelaide.edu.au",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12636043/diff/15001/2013/bestpractices/shortercode6.go\nFile 2013/bestpractices/shortercode6.go (right):\n\nhttps://codereview.appspot.com/12636043/diff/15001/2013/bestpractices/shortercode6.go#newcode48\n2013/bestpractices/shortercode6.go:48: func (w *binWriter) Close() error {\nthis is Flush, not Close. that's why i was confused",
			"disapproval": false,
			"date": "2013-08-08 04:39:17.919410",
			"approval": false
		},
		{
			"sender": "nightlyone@googlemail.com",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"r@golang.org",
				"dan.kortschak@adelaide.edu.au",
				"nightlyone@googlemail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please note that the bug(?) noticed is already introduced between shortercode2.go and shortercode3.go and I wondered about it while watching the presentation already.\n\nhttps://codereview.appspot.com/12636043/diff/15001/2013/bestpractices/shortercode6.go\nFile 2013/bestpractices/shortercode6.go (right):\n\nhttps://codereview.appspot.com/12636043/diff/15001/2013/bestpractices/shortercode6.go#newcode36\n2013/bestpractices/shortercode6.go:36: w.Write(int32(len(v)))\nWhy you do endian conversion for v below but not for the int32 here?",
			"disapproval": false,
			"date": "2013-08-08 14:46:31.620270",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"r@golang.org",
				"dan.kortschak@adelaide.edu.au",
				"nightlyone@googlemail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12636043/diff/15001/2013/bestpractices/shortercode6.go\nFile 2013/bestpractices/shortercode6.go (right):\n\nhttps://codereview.appspot.com/12636043/diff/15001/2013/bestpractices/shortercode6.go#newcode1\n2013/bestpractices/shortercode6.go:1: // +build ignore,OMIT\n+build OMIT will suffice\n\nhttps://codereview.appspot.com/12636043/diff/15001/2013/bestpractices/shortercode6.go#newcode14\n2013/bestpractices/shortercode6.go:14: // GOPHER OMIT\ncan't you just use /type Gopher/ as the rule and drop these ugly comments?\n\nhttps://codereview.appspot.com/12636043/diff/15001/2013/bestpractices/shortercode6.go#newcode22\n2013/bestpractices/shortercode6.go:22: type binWriter struct {\nditto\n\nhttps://codereview.appspot.com/12636043/diff/15001/2013/bestpractices/shortercode6.go#newcode29\n2013/bestpractices/shortercode6.go:29: // Write writes the value using little-endian byte order.\nditto, /Write writes/\n\nhttps://codereview.appspot.com/12636043/diff/15001/2013/bestpractices/shortercode6.go#newcode36\n2013/bestpractices/shortercode6.go:36: w.Write(int32(len(v)))\nOn 2013/08/08 14:46:31, ioe wrote:\n> Why you do endian conversion for v below but not for the int32 here? \n\nThis converts v to an int32 and calls Write again. The data is only actually written to the buffer by binary.Write. I agree it's unclear.\n\nhttps://codereview.appspot.com/12636043/diff/15001/2013/bestpractices/shortercode6.go#newcode52\n2013/bestpractices/shortercode6.go:52: _, w.err = w.w.Write(w.buf.Bytes())\nw.buf.WriteTo(w.w)\n\nhttps://codereview.appspot.com/12636043/diff/15001/2013/bestpractices/shortercode6.go#newcode57\n2013/bestpractices/shortercode6.go:57: func (g *Gopher) DumpBinary(w io.Writer) error {\nmake this an implementation of io.WriterTo",
			"disapproval": false,
			"date": "2013-08-12 01:21:36.137780",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"r@golang.org",
				"dan.kortschak@adelaide.edu.au",
				"nightlyone@googlemail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/12636043/diff/15001/2013/bestpractices/shortercode6.go\nFile 2013/bestpractices/shortercode6.go (right):\n\nhttps://codereview.appspot.com/12636043/diff/15001/2013/bestpractices/shortercode6.go#newcode1\n2013/bestpractices/shortercode6.go:1: // +build ignore,OMIT\nOn 2013/08/12 23:50:25, gocampoy wrote:\n> On 2013/08/12 01:21:36, adg wrote:\n> > +build OMIT will suffice\n> \n> This was added by cl 12003043 that you LGTMed\n\nGuess i missed it, or that CL happened before we started using +build OMIT everywhere.\n\n(There's nothing special about \"ignore\")\n\nhttps://codereview.appspot.com/12636043/diff/22001/2013/bestpractices/shortercode1.go\nFile 2013/bestpractices/shortercode1.go (right):\n\nhttps://codereview.appspot.com/12636043/diff/22001/2013/bestpractices/shortercode1.go#newcode14\n2013/bestpractices/shortercode1.go:14: AgeYears int64\nwhy int64?\n\nhttps://codereview.appspot.com/12636043/diff/22001/2013/bestpractices/shortercode1.go#newcode17\n2013/bestpractices/shortercode1.go:17: func (g *Gopher) WriteTo(w io.Writer) (size int64, err error) {\nmaybe you should add a comment to the files where the code is deliberately bad style (not present in the slides, but here for anyone looking at the file)\nI keep wanting to tell you to fix this code, even though I know it's intentionally ugly.\n\nhttps://codereview.appspot.com/12636043/diff/22001/2013/bestpractices/shortercode2.go\nFile 2013/bestpractices/shortercode2.go (right):\n\nhttps://codereview.appspot.com/12636043/diff/22001/2013/bestpractices/shortercode2.go#newcode23\n2013/bestpractices/shortercode2.go:23: var n int\nyou don't need this; you can use :=\n\nhttp://play.golang.org/p/6IbmSWME0b\n\nhttps://codereview.appspot.com/12636043/diff/22001/2013/bestpractices/shortercode4.go\nFile 2013/bestpractices/shortercode4.go (right):\n\nhttps://codereview.appspot.com/12636043/diff/22001/2013/bestpractices/shortercode4.go#newcode14\n2013/bestpractices/shortercode4.go:14: AgeYears int32\nnow int32? just make this an int\n\nhttps://codereview.appspot.com/12636043/diff/22001/2013/bestpractices/shortercode5.go\nFile 2013/bestpractices/shortercode5.go (right):\n\nhttps://codereview.appspot.com/12636043/diff/22001/2013/bestpractices/shortercode5.go#newcode23\n2013/bestpractices/shortercode5.go:23: // Write writes a value into its writer using little endian.\nwrites a value to the provided writer in little endian form.\n\nhttps://codereview.appspot.com/12636043/diff/22001/2013/bestpractices/shortercode6.go\nFile 2013/bestpractices/shortercode6.go (right):\n\nhttps://codereview.appspot.com/12636043/diff/22001/2013/bestpractices/shortercode6.go#newcode48\n2013/bestpractices/shortercode6.go:48: func (g *Gopher) WriteTo(w io.Writer) (int64, error) {\nnow the doc comment is missing?\n\ni suggest you diff each subsequent pair of these files to make sure they are as identical as possible",
			"disapproval": false,
			"date": "2013-08-13 03:30:57.778160",
			"approval": false
		},
		{
			"sender": "campoy@golang.org",
			"recipients": [
				"campoy@golang.org",
				"adg@golang.org",
				"r@golang.org",
				"dan.kortschak@adelaide.edu.au",
				"nightlyone@googlemail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Implementing WriterTo made the case for code simplification even better IMHO.\n\nWill clean out the comments for code extraction on the rest of the talk in a separate CL.\n\nPTAL\n\nhttps://codereview.appspot.com/12636043/diff/15001/2013/bestpractices/shortercode6.go\nFile 2013/bestpractices/shortercode6.go (right):\n\nhttps://codereview.appspot.com/12636043/diff/15001/2013/bestpractices/shortercode6.go#newcode1\n2013/bestpractices/shortercode6.go:1: // +build ignore,OMIT\nOn 2013/08/12 01:21:36, adg wrote:\n> +build OMIT will suffice\n\nThis was added by cl 12003043 that you LGTMed\n\nhttps://codereview.appspot.com/12636043/diff/15001/2013/bestpractices/shortercode6.go#newcode14\n2013/bestpractices/shortercode6.go:14: // GOPHER OMIT\nOn 2013/08/12 01:21:36, adg wrote:\n> can't you just use /type Gopher/ as the rule and drop these ugly comments?\n\nDone.\n\nhttps://codereview.appspot.com/12636043/diff/15001/2013/bestpractices/shortercode6.go#newcode22\n2013/bestpractices/shortercode6.go:22: type binWriter struct {\nOn 2013/08/12 01:21:36, adg wrote:\n> ditto\n\nDone.\n\nhttps://codereview.appspot.com/12636043/diff/15001/2013/bestpractices/shortercode6.go#newcode29\n2013/bestpractices/shortercode6.go:29: // Write writes the value using little-endian byte order.\nOn 2013/08/12 01:21:36, adg wrote:\n> ditto, /Write writes/\n\nDone.\n\nhttps://codereview.appspot.com/12636043/diff/15001/2013/bestpractices/shortercode6.go#newcode36\n2013/bestpractices/shortercode6.go:36: w.Write(int32(len(v)))\nOn 2013/08/12 01:21:36, adg wrote:\n> On 2013/08/08 14:46:31, ioe wrote:\n> > Why you do endian conversion for v below but not for the int32 here? \n> \n> This converts v to an int32 and calls Write again. The data is only actually\n> written to the buffer by binary.Write. I agree it's unclear.\n\nDone.\n\nhttps://codereview.appspot.com/12636043/diff/15001/2013/bestpractices/shortercode6.go#newcode48\n2013/bestpractices/shortercode6.go:48: func (w *binWriter) Close() error {\nOn 2013/08/08 04:39:18, r wrote:\n> this is Flush, not Close. that's why i was confused\n\nDone.\n\nhttps://codereview.appspot.com/12636043/diff/15001/2013/bestpractices/shortercode6.go#newcode52\n2013/bestpractices/shortercode6.go:52: _, w.err = w.w.Write(w.buf.Bytes())\nOn 2013/08/12 01:21:36, adg wrote:\n> w.buf.WriteTo(w.w)\n\nDone.\n\nhttps://codereview.appspot.com/12636043/diff/15001/2013/bestpractices/shortercode6.go#newcode57\n2013/bestpractices/shortercode6.go:57: func (g *Gopher) DumpBinary(w io.Writer) error {\nOn 2013/08/12 01:21:36, adg wrote:\n> make this an implementation of io.WriterTo\n\nDone.",
			"disapproval": false,
			"date": "2013-08-12 23:50:25.356150",
			"approval": false
		}
	],
	"owner_email": "campoy@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gocampoy",
	"subject": "code review 12636043: go.talks: bestpractices: adding compelling example for ...",
	"created": "2013-08-08 00:20:57.118810",
	"patchsets": [
		1,
		3001,
		6001,
		9001,
		15001,
		22001
	],
	"modified": "2013-08-13 03:30:58.433990",
	"closed": false,
	"issue": 12636043
}