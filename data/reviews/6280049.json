{
	"description": "cmd/gc: inline convT2E when T is uintptr-shaped.\n\nGOARCH=amd64 benchmarks\n\nsrc/pkg/runtime\nbenchmark                  old ns/op    new ns/op    delta\nBenchmarkConvT2ESmall             10           10   +1.00%\nBenchmarkConvT2EUintptr            9            0  -92.07%\nBenchmarkConvT2EBig               74           74   -0.27%\nBenchmarkConvT2I                  27           26   -3.62%\nBenchmarkConvI2E                   4            4   -7.05%\nBenchmarkConvI2I                  20           19   -2.99%\n\ntest/bench/go1\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17    5930908000   5937260000   +0.11%\nBenchmarkFannkuch11      3927057000   3933556000   +0.17%\nBenchmarkGobDecode         21998090     21870620   -0.58%\nBenchmarkGobEncode         12725310     12734480   +0.07%\nBenchmarkGzip             567617600    567892800   +0.05%\nBenchmarkGunzip           178284100    178706900   +0.24%\nBenchmarkJSONEncode        87693550     86794300   -1.03%\nBenchmarkJSONDecode       314212600    324115000   +3.15%\nBenchmarkMandelbrot200      7016640      7073766   +0.81%\nBenchmarkParse              7852100      7892085   +0.51%\nBenchmarkRevcomp         1285663000   1286147000   +0.04%\nBenchmarkTemplate         566823800    567606200   +0.14%\n\nI'm not entirely sure why the JSON* numbers have changed, but\neyeballing the profile suggests that it could be spending less\nand more time in runtime.{new,old}stack, so it could simply be\nstack-split boundary noise.",
	"cc": [
		"rsc@golang.org",
		"dave@cheney.net",
		"bsiegert@gmail.com",
		"dsymonds@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 12 June 2012 21:05, Dave Cheney <dave@cheney.net> wrote:\r\n> Here is a random data point (produced with the printf hammer)\r\n\r\nNice hammer, that one.\r\n\r\n\r\n> deadwood(~/go/test/bench/go1) % sort b.txt | uniq -c | sort -nr\r\n> 5553540 convT2I\r\n> 5058305 assertE2T\r\n> 1586114 assertI2T2\r\n> \u00a0923607 assertI2T\r\n> \u00a0217773 assertE2I2\r\n> \u00a0208061 convT2E\r\n> \u00a0153808 assertE2T2\r\n> \u00a0 \u00a0 87 assertI2I2\r\n> \u00a0 \u00a0 55 convI2I\r\n\r\nAre these numbers from a clean tree or with this patch?\r\n",
			"disapproval": false,
			"date": "2012-06-12 23:53:10.092461",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Clean tree. I'll rebuild with your patch and post the results.\r\n\r\nOn Wed, Jun 13, 2012 at 9:53 AM, Nigel Tao <nigeltao@golang.org> wrote:\r\n> On 12 June 2012 21:05, Dave Cheney <dave@cheney.net> wrote:\r\n>> Here is a random data point (produced with the printf hammer)\r\n>\r\n> Nice hammer, that one.\r\n>\r\n>\r\n>> deadwood(~/go/test/bench/go1) % sort b.txt | uniq -c | sort -nr\r\n>> 5553540 convT2I\r\n>> 5058305 assertE2T\r\n>> 1586114 assertI2T2\r\n>> \u00a0923607 assertI2T\r\n>> \u00a0217773 assertE2I2\r\n>> \u00a0208061 convT2E\r\n>> \u00a0153808 assertE2T2\r\n>> \u00a0 \u00a0 87 assertI2I2\r\n>> \u00a0 \u00a0 55 convI2I\r\n>\r\n> Are these numbers from a clean tree or with this patch?\r\n",
			"disapproval": false,
			"date": "2012-06-12 23:55:48.100647",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is great Nigel! I'm surprised that it made so little difference in the go1 benches.",
			"disapproval": false,
			"date": "2012-06-12 07:00:40.144416",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jun 12, 2012 at 7:26 AM,  <nigeltao@golang.org> wrote:\r\n> BenchmarkConvT2EUintptr \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a09 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a00 \u00a0-92.07%\r\n\r\nSo it takes no time at all now?\r\n\r\n--Benny.\r\n",
			"disapproval": false,
			"date": "2012-06-12 12:13:11.073133",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dave@cheney.net",
				"bsiegert@gmail.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=8c461c433cb5 ***\n\ncmd/gc: inline convT2E when T is uintptr-shaped.\n\nGOARCH=amd64 benchmarks\n\nsrc/pkg/runtime\nbenchmark                  old ns/op    new ns/op    delta\nBenchmarkConvT2ESmall             10           10   +1.00%\nBenchmarkConvT2EUintptr            9            0  -92.07%\nBenchmarkConvT2EBig               74           74   -0.27%\nBenchmarkConvT2I                  27           26   -3.62%\nBenchmarkConvI2E                   4            4   -7.05%\nBenchmarkConvI2I                  20           19   -2.99%\n\ntest/bench/go1\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17    5930908000   5937260000   +0.11%\nBenchmarkFannkuch11      3927057000   3933556000   +0.17%\nBenchmarkGobDecode         21998090     21870620   -0.58%\nBenchmarkGobEncode         12725310     12734480   +0.07%\nBenchmarkGzip             567617600    567892800   +0.05%\nBenchmarkGunzip           178284100    178706900   +0.24%\nBenchmarkJSONEncode        87693550     86794300   -1.03%\nBenchmarkJSONDecode       314212600    324115000   +3.15%\nBenchmarkMandelbrot200      7016640      7073766   +0.81%\nBenchmarkParse              7852100      7892085   +0.51%\nBenchmarkRevcomp         1285663000   1286147000   +0.04%\nBenchmarkTemplate         566823800    567606200   +0.14%\n\nI'm not entirely sure why the JSON* numbers have changed, but\neyeballing the profile suggests that it could be spending less\nand more time in runtime.{new,old}stack, so it could simply be\nstack-split boundary noise.\n\nR=rsc, dave, bsiegert, dsymonds\nCC=golang-dev\nhttp://codereview.appspot.com/6280049",
			"disapproval": false,
			"date": "2012-06-14 00:53:37.455897",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Jun 12, 2012 at 10:13 PM, Benny Siegert <bsiegert@gmail.com> wrote:\r\n\r\n> On Tue, Jun 12, 2012 at 7:26 AM, \u00a0<nigeltao@golang.org> wrote:\r\n>> BenchmarkConvT2EUintptr \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a09 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a00 \u00a0-92.07%\r\n>\r\n> So it takes no time at all now?\r\n\r\nIt's inlined, and the resolution printed there is only nanoseconds. I\r\ncould see this being compiled to a single MOV instruction between two\r\nregisters, and that can believably take under a nanosecond (averaged\r\nout). The percentage puts the mean at 0.7137 ns.\r\n\r\n\r\nDave.\r\n",
			"disapproval": false,
			"date": "2012-06-12 12:15:47.400670",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The JSON numbers change any time you look at them funny.\r\n",
			"disapproval": false,
			"date": "2012-06-12 13:24:51.734955",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "2012/6/12  <dave@cheney.net>:\r\n> Weird. Trips through itab genrally account for at minimum 3% of a\r\n> benchmark. I don't understand why not having make that call makes things\r\n> slower ...\r\n\r\nconvT2E doesn't construct an itab: the empty interface has no methods,\r\nand stores the type pointer directly in the interface value.\r\n\r\nOptimizing convT2I might have a larger impact, especially on arm, but\r\nit's also a larger change, and I'm still fairly new to cmd/gc.\r\n",
			"disapproval": false,
			"date": "2012-06-12 08:13:20.805545",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-06-12 05:26:44.874409",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "linux/arm\n\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17   36973266000  36960083000   -0.04%\nBenchmarkFannkuch11     34931763000  35084259000   +0.44%\nBenchmarkGobDecode        120079050    118865950   -1.01%\nBenchmarkGobEncode         61419060     61716320   +0.48%\nBenchmarkGzip            5549774000   5683991000   +2.42%\nBenchmarkGunzip          1190766000   1193939000   +0.27%\nBenchmarkJSONEncode       798712200    801367200   +0.33%\nBenchmarkJSONDecode      2729737000   2808990000   +2.90%\nBenchmarkMandelbrot200     45623780     45781860   +0.35%\nBenchmarkParse             58031620     57316280   -1.23%\nBenchmarkRevcomp          139642400    145401000   +4.12%\nBenchmarkTemplate        5806061000   5811341000   +0.09%\n\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkGobDecode             6.39         6.46    1.01x\nBenchmarkGobEncode            12.50        12.44    1.00x\nBenchmarkGzip                  3.50         3.41    0.97x\nBenchmarkGunzip               16.30        16.25    1.00x\nBenchmarkJSONEncode            2.43         2.42    1.00x\nBenchmarkJSONDecode            0.71         0.69    0.97x\nBenchmarkParse                 1.00         1.01    1.01x\nBenchmarkRevcomp              18.20        17.48    0.96x\nBenchmarkTemplate              0.33         0.33    1.00x\n\nWeird. Trips through itab genrally account for at minimum 3% of a benchmark. I don't understand why not having make that call makes things slower ...",
			"disapproval": false,
			"date": "2012-06-12 07:45:34.211021",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Here is a random data point (produced with the printf hammer)\r\n\r\ndeadwood(~/go/test/bench/go1) % sort b.txt | uniq -c | sort -nr\r\n5553540 convT2I\r\n5058305 assertE2T\r\n1586114 assertI2T2\r\n 923607 assertI2T\r\n 217773 assertE2I2\r\n 208061 convT2E\r\n 153808 assertE2T2\r\n     87 assertI2I2\r\n     55 convI2I\r\n\r\n\r\nOn Tue, Jun 12, 2012 at 6:13 PM, Nigel Tao <nigeltao@golang.org> wrote:\r\n> 2012/6/12 \u00a0<dave@cheney.net>:\r\n>> Weird. Trips through itab genrally account for at minimum 3% of a\r\n>> benchmark. I don't understand why not having make that call makes things\r\n>> slower ...\r\n>\r\n> convT2E doesn't construct an itab: the empty interface has no methods,\r\n> and stores the type pointer directly in the interface value.\r\n>\r\n> Optimizing convT2I might have a larger impact, especially on arm, but\r\n> it's also a larger change, and I'm still fairly new to cmd/gc.\r\n",
			"disapproval": false,
			"date": "2012-06-12 11:05:56.207987",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 12 June 2012 22:13, Benny Siegert <bsiegert@gmail.com> wrote:\r\n> On Tue, Jun 12, 2012 at 7:26 AM, \u00a0<nigeltao@golang.org> wrote:\r\n>> BenchmarkConvT2EUintptr \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a09 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a00 \u00a0-92.07%\r\n>\r\n> So it takes no time at all now?\r\n\r\nThe benchcmp output cut off the fractional digits. Before/after \"go\r\ntest\" output:\r\nBenchmarkConvT2EUintptr\t200000000\t         9.33 ns/op\r\nBenchmarkConvT2EUintptr\t2000000000\t         0.74 ns/op\r\n",
			"disapproval": false,
			"date": "2012-06-12 23:50:55.546621",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 12 June 2012 22:15, David Symonds <dsymonds@golang.org> wrote:\r\n> It's inlined, and the resolution printed there is only nanoseconds. I\r\n> could see this being compiled to a single MOV instruction between two\r\n> registers, and that can believably take under a nanosecond (averaged\r\n> out). The percentage puts the mean at 0.7137 ns.\r\n\r\nYeah, it's two MOVs.\r\n\r\n$ cat iface.go\r\npackage main\r\n\r\nvar i interface{}\r\n\r\nfunc main() {\r\n\ti = uintptr(1)\r\n}\r\n\r\n\r\n\r\nNew codegen.\r\n\r\n$ go tool 6g -S -o /dev/null iface.go | sed -e '/init/q'\r\n\r\n--- prog list \"main\" ---\r\n0000 (iface.go:5) TEXT    main+0(SB),$0-0\r\n0001 (iface.go:6) MOVQ    $type.uintptr+0(SB),i+0(SB)\r\n0002 (iface.go:6) MOVQ    $1,i+8(SB)\r\n0003 (iface.go:7) RET     ,\r\n\r\n--- prog list \"init\" ---\r\n\r\n\r\n\r\nOld codegen.\r\n\r\n$ go tool 6g -S -o /dev/null iface.go | sed -e '/init/q'\r\n\r\n--- prog list \"main\" ---\r\n0000 (iface.go:5) TEXT    main+0(SB),$32-0\r\n0001 (iface.go:6) MOVQ    $type.uintptr+0(SB),(SP)\r\n0002 (iface.go:6) MOVQ    $1,8(SP)\r\n0003 (iface.go:6) CALL    ,runtime.convT2E+0(SB)\r\n0004 (iface.go:6) MOVQ    16(SP),BX\r\n0005 (iface.go:6) MOVQ    BX,i+0(SB)\r\n0006 (iface.go:6) MOVQ    24(SP),BX\r\n0007 (iface.go:6) MOVQ    BX,i+8(SB)\r\n0008 (iface.go:7) RET     ,\r\n\r\n--- prog list \"init\" ---\r\n",
			"disapproval": false,
			"date": "2012-06-13 00:01:09.536955",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dave@cheney.net",
				"bsiegert@gmail.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nPlease update the test.",
			"disapproval": false,
			"date": "2012-06-13 16:00:41.443744",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dave@cheney.net",
				"bsiegert@gmail.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "deadwood(~/go/test/bench/go1) % sort b2.txt | uniq -c | sort -nr\n5506080 convT2I\n4627295 assertE2T\n1585844 assertI2T2\n 923397 assertI2T\n 217773 assertE2I2\n 153808 assertE2T2\n  26109 convT2E\n     57 assertI2I2\n     55 convI2I\n      1 testing: warning: no tests to run\n\nHere is the hammers, http://codereview.appspot.com/6303072",
			"disapproval": false,
			"date": "2012-06-13 00:05:20.150494",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dave@cheney.net",
				"bsiegert@gmail.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6280049/diff/11007/test/convT2E.go\nFile test/convT2E.go (right):\n\nhttp://codereview.appspot.com/6280049/diff/11007/test/convT2E.go#newcode7\ntest/convT2E.go:7: // Test conversion from non-interface types to the empty interface.\nThat sounds great, but I don't understand why there are channel ops below.\nIf you ignore the channel stuff, the got test is only checking a single conversion.\n\nI would have expected checking of all the values, as in:\n\nif z != iz { panic(\"z\") }\nif p != ip { panic(\"p\") }\nand so on\n\nI suspect the channel thing is mostly unrelated; add a comment there about why it's here.",
			"disapproval": false,
			"date": "2012-06-13 15:57:42.768747",
			"approval": false
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 6280049: cmd/gc: inline convT2E when T is uintptr-shaped.",
	"created": "2012-06-04 06:57:32.026951",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		8002,
		8003,
		11007,
		11009
	],
	"modified": "2012-06-14 00:53:39.443528",
	"closed": true,
	"issue": 6280049
}