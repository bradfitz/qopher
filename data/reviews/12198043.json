{
	"description": "spec: clarify index and selector expressions\n\n(Replacement for CL 11884043.)\n\n1) Explain a[i] and a[i:j] where a is of type *A as\n   shortcut for (*a)[i] and (*a)[i:j], respectively.\n\n2) Together with 1), because len() of nil slices is\n   well defined, there's no need to special case nil\n   operands anymore.\n\n3) The result of indexing or slicing a constant string\n   is always a non-constant byte or string value.\n\n4) The result of slicing an untyped string is a value\n   of type string.\n\n5) If the operand of a valid slice a[i:j] is nil (i, j\n   must be 0 for it to be valid - this already follows\n   from the in-range rules), the result is a nil slice.\n\nFixes issue 4913.\nFixes issue 5951.",
	"cc": [
		"r@golang.org",
		"rsc@golang.org",
		"iant@golang.org",
		"ken@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org, rsc@golang.org, iant@golang.org, ken@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-07-31 21:23:26.466700",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nit feels repetitive but i don't have a better suggestion",
			"disapproval": false,
			"date": "2013-08-01 00:53:18.847070",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-08-01 05:18:31.844040",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=f70981e60e17 ***\n\nspec: clarify index and selector expressions\n\n(Replacement for CL 11884043.)\n\n1) Explain a[i] and a[i:j] where a is of type *A as\n   shortcut for (*a)[i] and (*a)[i:j], respectively.\n\n2) Together with 1), because len() of nil slices is\n   well defined, there's no need to special case nil\n   operands anymore.\n\n3) The result of indexing or slicing a constant string\n   is always a non-constant byte or string value.\n\n4) The result of slicing an untyped string is a value\n   of type string.\n\n5) If the operand of a valid slice a[i:j] is nil (i, j\n   must be 0 for it to be valid - this already follows\n   from the in-range rules), the result is a nil slice.\n\nFixes issue 4913.\nFixes issue 5951.\n\nR=r, rsc, iant, ken\nCC=golang-dev\nhttps://codereview.appspot.com/12198043",
			"disapproval": false,
			"date": "2013-08-01 05:25:52.716770",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 12198043: spec: clarify index and selector expressions",
	"created": "2013-07-31 21:21:52.277200",
	"patchsets": [
		1,
		2001,
		5001,
		10001
	],
	"modified": "2013-08-01 16:15:56.029020",
	"closed": true,
	"issue": 12198043
}