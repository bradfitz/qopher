{
	"description": "text/template: allow .Field access to parenthesized expressions\n\nChange the grammar so that field access is a proper operator.\nThis introduces a new node, ChainNode, into the public (but\nactually internal) API of text/template/parse. For\ncompatibility, we only use the new node type for the specific\nconstruct, which was not parseable before. Therefore this\nshould be backward-compatible.\n\nBefore, .X.Y was a token in the lexer; this CL breaks it out\ninto .Y applied to .X. But for compatibility we mush them\nback together before delivering. One day we might remove\nthat hack; it's the simple TODO in parse.go/operand.\n\nThis change also provides grammatical distinction between\n        f\nand\n        (f)\nwhich might permit function values later, but not now.\n\nFixes issue 3999.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dsymonds@golang.org",
		"gri@golang.org",
		"rsc@golang.org",
		"mikesamuel@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dsymonds@golang.org, gri@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-13 21:13:47.298420",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-09-11 23:00:30.486300",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6494119/diff/3001/src/pkg/text/template/parse/lex.go\nFile src/pkg/text/template/parse/lex.go (right):\n\nhttp://codereview.appspot.com/6494119/diff/3001/src/pkg/text/template/parse/lex.go#newcode337\nsrc/pkg/text/template/parse/lex.go:337: // lexIdentifier scans an alphanumeric\nOn 2012/09/13 21:06:42, gri wrote:\n> missing period\n\nDone.\n\nhttp://codereview.appspot.com/6494119/diff/3001/src/pkg/text/template/parse/lex.go#newcode382\nsrc/pkg/text/template/parse/lex.go:382: // lexVariable scans a variable: $Alphanumeric\nOn 2012/09/13 21:06:42, gri wrote:\n> s/lexVariable/lexFieldOrVariable/\n\ndone\nif only comments were checkable\n\nhttp://codereview.appspot.com/6494119/diff/3001/src/pkg/text/template/parse/node.go\nFile src/pkg/text/template/parse/node.go (right):\n\nhttp://codereview.appspot.com/6494119/diff/3001/src/pkg/text/template/parse/node.go#newcode351\nsrc/pkg/text/template/parse/node.go:351: return &ChainNode{NodeType: NodeChain, Node: node} // [1:] to drop leading period\nOn 2012/09/13 21:06:42, gri wrote:\n> there's no slicing in this code - confusing comment\n\nDone.\n\nhttp://codereview.appspot.com/6494119/diff/3001/src/pkg/text/template/parse/node.go#newcode356\nsrc/pkg/text/template/parse/node.go:356: if field[0] != '.' {\nOn 2012/09/13 21:06:42, gri wrote:\n> if len(field) == 0 || field[0] != '.' { ... }\n\ncan't happen, but sure.\n\nhttp://codereview.appspot.com/6494119/diff/3001/src/pkg/text/template/parse/node.go#newcode359\nsrc/pkg/text/template/parse/node.go:359: field = field[1:]\nOn 2012/09/13 21:06:42, gri wrote:\n> the comment above should move down here\n\nDone.\n\nhttp://codereview.appspot.com/6494119/diff/3001/src/pkg/text/template/parse/parse.go\nFile src/pkg/text/template/parse/parse.go (right):\n\nhttp://codereview.appspot.com/6494119/diff/3001/src/pkg/text/template/parse/parse.go#newcode538\nsrc/pkg/text/template/parse/parse.go:538: // Compatibility with original API: If the term is a FieldNode\nOn 2012/09/13 21:06:42, gri wrote:\n> s/FieldNode/NodeField/ ?\n\nDone.\n\nhttp://codereview.appspot.com/6494119/diff/3001/src/pkg/text/template/parse/parse.go#newcode539\nsrc/pkg/text/template/parse/parse.go:539: // or VariableNode, just put more fields on the original.\nOn 2012/09/13 21:06:42, gri wrote:\n> ditto ?\n\nDone.",
			"disapproval": false,
			"date": "2012-09-13 21:14:44.901020",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nI understand the new syntax as Scheme except [1] top-level ( ) are\r\nimplicit inside the braces in {{funcname ...}} or {{x.Method ...}} and\r\n[2] there is a suffix <nospace>.Foo operator. I believe this CL is\r\nconsistent with that understanding. (I'm not saying that's the design,\r\njust that it's where we've ended up.)\r\n",
			"disapproval": false,
			"date": "2012-09-17 20:43:24.378440",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-11 23:00:55.570880",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Fixes issue 3999.\r\n",
			"disapproval": false,
			"date": "2012-09-11 23:01:52.024030",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Seems like a logical extension of the existing grouping syntax. It's how one would expect this to work.",
			"disapproval": false,
			"date": "2012-09-12 05:40:55.017260",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think this looks fine, but I admit that I have not fully thought through the details.\n\nhttp://codereview.appspot.com/6494119/diff/3001/src/pkg/text/template/parse/lex.go\nFile src/pkg/text/template/parse/lex.go (right):\n\nhttp://codereview.appspot.com/6494119/diff/3001/src/pkg/text/template/parse/lex.go#newcode337\nsrc/pkg/text/template/parse/lex.go:337: // lexIdentifier scans an alphanumeric\nmissing period\n\nhttp://codereview.appspot.com/6494119/diff/3001/src/pkg/text/template/parse/lex.go#newcode382\nsrc/pkg/text/template/parse/lex.go:382: // lexVariable scans a variable: $Alphanumeric\ns/lexVariable/lexFieldOrVariable/\n\nhttp://codereview.appspot.com/6494119/diff/3001/src/pkg/text/template/parse/node.go\nFile src/pkg/text/template/parse/node.go (right):\n\nhttp://codereview.appspot.com/6494119/diff/3001/src/pkg/text/template/parse/node.go#newcode351\nsrc/pkg/text/template/parse/node.go:351: return &ChainNode{NodeType: NodeChain, Node: node} // [1:] to drop leading period\nthere's no slicing in this code - confusing comment\n\nhttp://codereview.appspot.com/6494119/diff/3001/src/pkg/text/template/parse/node.go#newcode356\nsrc/pkg/text/template/parse/node.go:356: if field[0] != '.' {\nif len(field) == 0 || field[0] != '.' { ... }\n\nhttp://codereview.appspot.com/6494119/diff/3001/src/pkg/text/template/parse/node.go#newcode359\nsrc/pkg/text/template/parse/node.go:359: field = field[1:]\nthe comment above should move down here\n\nhttp://codereview.appspot.com/6494119/diff/3001/src/pkg/text/template/parse/parse.go\nFile src/pkg/text/template/parse/parse.go (right):\n\nhttp://codereview.appspot.com/6494119/diff/3001/src/pkg/text/template/parse/parse.go#newcode500\nsrc/pkg/text/template/parse/parse.go:500: operand := t.operand()\nmove this into if init statement?\n\nhttp://codereview.appspot.com/6494119/diff/3001/src/pkg/text/template/parse/parse.go#newcode511\nsrc/pkg/text/template/parse/parse.go:511: case itemPipe:\ncomment here?\n\nhttp://codereview.appspot.com/6494119/diff/3001/src/pkg/text/template/parse/parse.go#newcode538\nsrc/pkg/text/template/parse/parse.go:538: // Compatibility with original API: If the term is a FieldNode\ns/FieldNode/NodeField/ ?\n\nhttp://codereview.appspot.com/6494119/diff/3001/src/pkg/text/template/parse/parse.go#newcode539\nsrc/pkg/text/template/parse/parse.go:539: // or VariableNode, just put more fields on the original.\nditto ?",
			"disapproval": false,
			"date": "2012-09-13 21:06:42.218300",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am still thinking about the details. I'll try to reply tonight.\r\n",
			"disapproval": false,
			"date": "2012-09-13 21:27:48.438230",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Sep 17, 2012 at 1:43 PM, Russ Cox <rsc@golang.org> wrote:\r\n> LGTM\r\n>\r\n> I understand the new syntax as Scheme except [1] top-level ( ) are\r\n> implicit inside the braces in {{funcname ...}} or {{x.Method ...}} and\r\n> [2] there is a suffix <nospace>.Foo operator. I believe this CL is\r\n> consistent with that understanding. (I'm not saying that's the design,\r\n> just that it's where we've ended up.)\r\n\r\nI believe that is accurate.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-09-17 20:46:01.900990",
			"approval": false
		},
		{
			"sender": "mikesamuel@gmail.com",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"gri@golang.org",
				"rsc@golang.org",
				"mikesamuel@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> I am unsure what needs to be done to html/template.\n\nIf the changes affect html/template they would affect ensurePipelineContains in html/template/escape.go.  I believe the escaper doesn't descend into the details of interpolated expressions except to peel off and reconstitute the outer pipeline layers. http://code.google.com/p/go/source/browse/src/pkg/html/template/escape.go#208\n\nThat function is separately tested at http://code.google.com/p/go/source/browse/src/pkg/html/template/escape_test.go#1492 so it might be worth including a parenthesized field access among those tests.",
			"disapproval": false,
			"date": "2012-09-21 17:01:04.168310",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"dsymonds@golang.org",
				"gri@golang.org",
				"rsc@golang.org",
				"mikesamuel@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=74370b0a2b8a ***\n\ntext/template: allow .Field access to parenthesized expressions\n\nChange the grammar so that field access is a proper operator.\nThis introduces a new node, ChainNode, into the public (but\nactually internal) API of text/template/parse. For\ncompatibility, we only use the new node type for the specific\nconstruct, which was not parseable before. Therefore this\nshould be backward-compatible.\n\nBefore, .X.Y was a token in the lexer; this CL breaks it out\ninto .Y applied to .X. But for compatibility we mush them\nback together before delivering. One day we might remove\nthat hack; it's the simple TODO in parse.go/operand.\n\nThis change also provides grammatical distinction between\n        f\nand\n        (f)\nwhich might permit function values later, but not now.\n\nFixes issue 3999.\n\nR=golang-dev, dsymonds, gri, rsc, mikesamuel\nCC=golang-dev\nhttp://codereview.appspot.com/6494119",
			"disapproval": false,
			"date": "2012-09-24 03:23:20.782470",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 6494119: text/template: allow .Field access to parenthesized exp...",
	"created": "2012-09-11 23:00:24.552230",
	"patchsets": [
		1,
		3001,
		10,
		12001,
		15001
	],
	"modified": "2012-09-24 03:23:22.700610",
	"closed": true,
	"issue": 6494119
}