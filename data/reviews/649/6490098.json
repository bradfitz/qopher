{
	"description": "go.crypto/ssh: sanity check incoming packet length\n\nThe check for a sensible packet length was removed a while ago\nwhen the window size and channel packet size checks were moved\ninto channel.go. While the RFC suggests that any packet of size\nless than uint32 -1 is valid, most implmentations limit the size\nto a smaller value. OpenSSH chose 256kb, so that sounds like a\nsensible default.",
	"cc": [
		"agl@golang.org",
		"huin@google.com",
		"kardianos@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"alex.brainman@gmail.com"
	],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"huin@google.com",
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Interesting. \n\nhttp://build.golang.org/log/9a51d64e16e6571f01fe3f505e9f4df77cf345ca\n\nssh breaks on windows, but so does a nacl test. \n\ncrypto/rand.(*rngReader).Read(0x11c7e0e0, 0x5e0374, 0x0, 0x0, 0x0, ...)\n\tC:/Users/ADMINI~1/AppData/Local/Temp/2/gobuilder/windows-386-ec2-9f6681feef6d/go/src/pkg/crypto/rand/rand_windows.go:38 +0x2a8\n\na []byte at address 0x5e0374 with zero length was passed to Read() ?",
			"disapproval": false,
			"date": "2012-09-09 23:10:07.879710",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Sep 9, 2012 at 7:10 PM, <dave@cheney.net> wrote:\r\n> a []byte at address 0x5e0374 with zero length was passed to Read() ?\r\n\r\nYes, it's expected to do a zero length read from rand.Reader. However,\r\nit's not expected to fail.\r\n\r\nSee https://codereview.appspot.com/6496099/diff/2001/src/pkg/crypto/rand/rand_windows.go\r\n\r\n\r\nCheers\r\n\r\nAGL\r\n",
			"disapproval": false,
			"date": "2012-09-09 23:58:28.889790",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"huin@google.com",
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you. I have fixed the description.",
			"disapproval": false,
			"date": "2012-09-09 20:56:44.501740",
			"approval": false
		},
		{
			"sender": "kardianos@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I would suggest someone check that it is actually building the latest code. \r\n When I build it on my windows box, either 32 or 64, it tests repeatedly \r\njust fine. Building from Go tip.\r\n\r\n-Daniel\r\n\r\n\r\nOn Saturday, September 8, 2012 6:34:32 PM UTC-7, Dave Cheney wrote:\r\n>\r\n> note: I don't think this will fix the breakage under win32. It will stop \r\n> the panic, but whatever test is running will continue to fail. For \r\n> reasons I don't understand, the 5 bytes of length+padding header appears \r\n> to be corrupt on that host. \r\n>\r\n> http://codereview.appspot.com/6490098/ \r\n>\r\n",
			"disapproval": false,
			"date": "2012-09-09 15:07:25.239340",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"alex.brainman@gmail.com",
				"agl@golang.org",
				"huin@google.com",
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/09 23:10:07, dfc wrote:\n> Interesting. \n> \n\nThese\n\n--- FAIL: TestExitStatusNonZero (1.48 seconds)\nsession_test.go:44: \tUnable to handshake: ssh: invalid packet length, packet too large\nsession_test.go:83: \tunable to dial remote side: EOF\n--- FAIL: TestExitSignalAndStatus (1.39 seconds)\nsession_test.go:44: \tUnable to handshake: ssh: invalid packet length, packet too large\nsession_test.go:83: \tunable to dial remote side: EOF\n--- FAIL: TestUnknownExitSignal (1.50 seconds)\nsession_test.go:44: \tUnable to handshake: ssh: invalid packet length, packet too large\nsession_test.go:83: \tunable to dial remote side: EOF\n--- FAIL: TestInvalidServerMessage (1.43 seconds)\nsession_test.go:44: \tUnable to handshake: ssh: invalid packet length, packet too large\nsession_test.go:83: \tunable to dial remote side: EOF\n--- FAIL: TestServerZeroWindowAdjust (1.36 seconds)\nsession_test.go:44: \tUnable to handshake: ssh: invalid packet length, packet too large\nsession_test.go:83: \tunable to dial remote side: EOF\n\nstill fail on builder. But these tests pass on my windows pc. If anyone have some bright ideas who I can reproduce that, I will look into it.\n\nAlex",
			"disapproval": false,
			"date": "2012-09-10 02:42:06.382410",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"alex.brainman@gmail.com",
				"agl@golang.org",
				"huin@google.com",
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/09 23:10:07, dfc wrote:\n> Interesting. \n> \n> http://build.golang.org/log/9a51d64e16e6571f01fe3f505e9f4df77cf345ca\n> \n\nI agree, crypto/rand on windows should be fixed. The only question I have, if Read into empty slice should return error?\n\nAlex",
			"disapproval": false,
			"date": "2012-09-09 23:50:21.480360",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"alex.brainman@gmail.com",
				"agl@golang.org",
				"huin@google.com",
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/10 02:45:50, dfc wrote:\n> That is what I expected, both from the builder and your machine. I'm sure\n> problem lies within my code, but the brain damage of those builders does give me\n> pause. \n> \n\nI am not clear what you point is. My concern is that same test FAILS on builder, but PASSes on my computer. I am interested to know why.\n\nAlex",
			"disapproval": false,
			"date": "2012-09-10 02:50:54.614700",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"huin@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello agl@golang.org, huin@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.crypto",
			"disapproval": false,
			"date": "2012-09-09 01:33:01.226010",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"huin@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\n\nThe description mentions 245KB, but the code says 256KB.\n\n(In time, this constant should probably be reflected in the MaxPacketSize that we tell our peers when establishing channels. That appears to be 32KB today.)",
			"disapproval": false,
			"date": "2012-09-09 14:53:33.829230",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"huin@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "note: I don't think this will fix the breakage under win32. It will stop the panic, but whatever test is running will continue to fail. For reasons I don't understand, the 5 bytes of length+padding header appears to be corrupt on that host.",
			"disapproval": false,
			"date": "2012-09-09 01:34:31.200510",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"huin@google.com",
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/09 15:07:25, kardia wrote:\n> I would suggest someone check that it is actually building the latest code. \n>  When I build it on my windows box, either 32 or 64, it tests repeatedly \n> just fine. Building from Go tip.\n\nYes, I don't know what is going on with those windows builders. Both are broken in irreproducible  ways.",
			"disapproval": false,
			"date": "2012-09-09 20:55:08.664790",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"agl@golang.org",
				"huin@google.com",
				"kardianos@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=89d51f1bcc70&repo=crypto ***\n\ngo.crypto/ssh: sanity check incoming packet length\n\nThe check for a sensible packet length was removed a while ago\nwhen the window size and channel packet size checks were moved\ninto channel.go. While the RFC suggests that any packet of size\nless than uint32 -1 is valid, most implmentations limit the size\nto a smaller value. OpenSSH chose 256kb, so that sounds like a\nsensible default.\n\nR=agl, huin, kardianos\nCC=golang-dev\nhttp://codereview.appspot.com/6490098",
			"disapproval": false,
			"date": "2012-09-09 20:57:29.918510",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "That is what I expected, both from the builder and your machine. I'm sure problem lies within my code, but the brain damage of those builders does give me pause. \r\n\r\nOn 10/09/2012, at 12:42, alex.brainman@gmail.com wrote:\r\n\r\n> On 2012/09/09 23:10:07, dfc wrote:\r\n>> Interesting.\r\n> \r\n> \r\n> These\r\n> \r\n> --- FAIL: TestExitStatusNonZero (1.48 seconds)\r\n> session_test.go:44:    Unable to handshake: ssh: invalid packet length,\r\n> packet too large\r\n> session_test.go:83:    unable to dial remote side: EOF\r\n> --- FAIL: TestExitSignalAndStatus (1.39 seconds)\r\n> session_test.go:44:    Unable to handshake: ssh: invalid packet length,\r\n> packet too large\r\n> session_test.go:83:    unable to dial remote side: EOF\r\n> --- FAIL: TestUnknownExitSignal (1.50 seconds)\r\n> session_test.go:44:    Unable to handshake: ssh: invalid packet length,\r\n> packet too large\r\n> session_test.go:83:    unable to dial remote side: EOF\r\n> --- FAIL: TestInvalidServerMessage (1.43 seconds)\r\n> session_test.go:44:    Unable to handshake: ssh: invalid packet length,\r\n> packet too large\r\n> session_test.go:83:    unable to dial remote side: EOF\r\n> --- FAIL: TestServerZeroWindowAdjust (1.36 seconds)\r\n> session_test.go:44:    Unable to handshake: ssh: invalid packet length,\r\n> packet too large\r\n> session_test.go:83:    unable to dial remote side: EOF\r\n> \r\n> still fail on builder. But these tests pass on my windows pc. If anyone\r\n> have some bright ideas who I can reproduce that, I will look into it.\r\n> \r\n> Alex\r\n> \r\n> http://codereview.appspot.com/6490098/\r\n",
			"disapproval": false,
			"date": "2012-09-10 02:45:50.666330",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 6490098: go.crypto/ssh: sanity check incoming packet length",
	"created": "2012-09-09 01:30:45.308590",
	"patchsets": [
		1,
		2001,
		4001,
		6003
	],
	"modified": "2012-09-10 02:50:54.866250",
	"closed": true,
	"issue": 6490098
}