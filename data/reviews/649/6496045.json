{
	"description": "goauth2: adding a jwt package to support server to server applications.\r\n\r\nThe jwt package allows the user to define a jwt.Token containing the\r\nrequired and optional fields for constructing the serialized and encoded\r\nJWT to be used for requesting an access_token.  Integrating this package\r\ninto oauth/oauth.go will require some redesign of the parent package.\r\nThese changes have been postponed for a later CL.\r\n\r\nThe descriptions of the standards this change implements can be found on\r\nthe following web page.\r\n\r\nhttps://developers.google.com/accounts/docs/OAuth2ServiceAccount\r\n\r\nThis addition to the library will allow for example a GAE instance to\r\nmake requests to service like BigQuery.",
	"cc": [
		"adg@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"gavaletz@gmail.com",
				"adg@google.com",
				"adg@golang.org",
				"bradfitz@google.com",
				"gavaletz@google.com",
				"golang-dev@googlegroups.com",
				"jcgregorio@google.com",
				"tiziana@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hey Eric - still interested in this?",
			"disapproval": false,
			"date": "2012-09-12 00:27:57.590860",
			"approval": false
		},
		{
			"sender": "gavaletz@gmail.com",
			"recipients": [
				"gavaletz@gmail.com",
				"adg@google.com",
				"bradfitz@google.com",
				"gavaletz@google.com",
				"golang-dev@googlegroups.com",
				"jcgregorio@google.com",
				"tiziana@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@google.com (cc: bradfitz@google.com, gavaletz@google.com, golang-dev@googlegroups.com, jcgregorio@google.com, tiziana@google.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/goauth2/",
			"disapproval": false,
			"date": "2012-08-28 13:04:44.373730",
			"approval": false
		},
		{
			"sender": "gavaletz@gmail.com",
			"recipients": [
				"gavaletz@gmail.com",
				"adg@google.com",
				"adg@golang.org",
				"bradfitz@google.com",
				"gavaletz@google.com",
				"golang-dev@googlegroups.com",
				"jcgregorio@google.com",
				"tiziana@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6496045/diff/4001/oauth/jwt/jwt.go\nFile oauth/jwt/jwt.go (right):\n\nhttps://codereview.appspot.com/6496045/diff/4001/oauth/jwt/jwt.go#newcode13\noauth/jwt/jwt.go:13: package jwt\nThe only problem that I see with not exporting Aud, Exp, and Iat in the ClaimSet is that by not exporting the values json.Marshal will also ignore them.  Plus it is kind of nice to have a clear and complete mapping to all the items in the spec's claim set.\n\nWe can still hide the Header and Signature in the jwt.Token and possibly speed things up a little by just using the string representation of the stdHeader.  \n\nI also don't see the point in having the AssertionType method that simply returns the stdAssertionType unless you have future plans for this.\n\nPlease advise and I will make these changes by EOD.\n\nOn 2012/09/12 13:01:28, gavaletz wrote:\n> I think that the minimal interface that would still support authentication to a\n> Google server would be having the jwt.Token only export the ClaimSet and the\n> Key, and have the ClaimSet only expose the Iss, Scope and Prn.  \n> \n> Basically everything else can be derived from or set to defaults (like times,\n> header, signature, etc.).\n> \n> Let me know if that is what you want to do.",
			"disapproval": false,
			"date": "2012-09-17 13:19:05.989760",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"gavaletz@gmail.com",
				"adg@google.com",
				"adg@golang.org",
				"bradfitz@google.com",
				"gavaletz@google.com",
				"golang-dev@googlegroups.com",
				"jcgregorio@google.com",
				"tiziana@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6496045/diff/4001/oauth/jwt/jwt.go\nFile oauth/jwt/jwt.go (right):\n\nhttp://codereview.appspot.com/6496045/diff/4001/oauth/jwt/jwt.go#newcode8\noauth/jwt/jwt.go:8: // For examples of the package usage please see jwt_test.go.\nWe should really put an example here in the package comment. It is very mysterious as-is.\n\nhttp://codereview.appspot.com/6496045/diff/4001/oauth/jwt/jwt.go#newcode13\noauth/jwt/jwt.go:13: package jwt\nthe code all looks good to me, but the interface seems to broad. How much can we cut out while still leaving it usable?\n\nhttp://codereview.appspot.com/6496045/diff/4001/oauth/jwt/jwt_test.go\nFile oauth/jwt/jwt_test.go (right):\n\nhttp://codereview.appspot.com/6496045/diff/4001/oauth/jwt/jwt_test.go#newcode19\noauth/jwt/jwt_test.go:19: stdHeaderStr = \"{\\\"alg\\\":\\\"RS256\\\",\\\"typ\\\":\\\"JWT\\\"}\"\nuse backtic string delimiters to avoid the awkward escaping",
			"disapproval": false,
			"date": "2012-08-29 08:49:07.333540",
			"approval": false
		},
		{
			"sender": "gavaletz@gmail.com",
			"recipients": [
				"gavaletz@gmail.com",
				"adg@google.com",
				"adg@golang.org",
				"bradfitz@google.com",
				"gavaletz@google.com",
				"golang-dev@googlegroups.com",
				"jcgregorio@google.com",
				"tiziana@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I have been bogged down with other projects, but yes I am still interested in getting this published :-)\n\nhttps://codereview.appspot.com/6496045/diff/4001/oauth/jwt/jwt.go\nFile oauth/jwt/jwt.go (right):\n\nhttps://codereview.appspot.com/6496045/diff/4001/oauth/jwt/jwt.go#newcode13\noauth/jwt/jwt.go:13: package jwt\nI think that the minimal interface that would still support authentication to a Google server would be having the jwt.Token only export the ClaimSet and the Key, and have the ClaimSet only expose the Iss, Scope and Prn.  \n\nBasically everything else can be derived from or set to defaults (like times, header, signature, etc.).\n\nLet me know if that is what you want to do.",
			"disapproval": false,
			"date": "2012-09-12 13:01:28.287520",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"gavaletz@gmail.com",
				"adg@google.com",
				"adg@golang.org",
				"bradfitz@google.com",
				"gavaletz@google.com",
				"golang-dev@googlegroups.com",
				"jcgregorio@google.com",
				"tiziana@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Argh, I thought I had mailed this already. Sorry for the delay.\n\nhttp://codereview.appspot.com/6496045/diff/4001/oauth/jwt/jwt.go\nFile oauth/jwt/jwt.go (right):\n\nhttp://codereview.appspot.com/6496045/diff/4001/oauth/jwt/jwt.go#newcode13\noauth/jwt/jwt.go:13: package jwt\nOn 2012/09/17 13:19:06, gavaletz wrote:\n> The only problem that I see with not exporting Aud, Exp, and Iat in the ClaimSet\n> is that by not exporting the values json.Marshal will also ignore them.  Plus it\n> is kind of nice to have a clear and complete mapping to all the items in the\n> spec's claim set.\n\nOkay, let's just leave them exported but add an example to the package documentation comment. (and also a working example in a subdirectory of jwt, named 'example/main.go'.)\n\n> We can still hide the Header and Signature in the jwt.Token and possibly speed\n> things up a little by just using the string representation of the stdHeader.  \n\nSounds good.\n\n> I also don't see the point in having the AssertionType method that simply\n> returns the stdAssertionType unless you have future plans for this.\n\nAgree.\n\n> Please advise and I will make these changes by EOD.\n\nAll looks good. Please proceed.",
			"disapproval": false,
			"date": "2012-09-19 01:08:07.290380",
			"approval": false
		},
		{
			"sender": "gavaletz@gmail.com",
			"recipients": [
				"gavaletz@gmail.com",
				"adg@google.com",
				"adg@golang.org",
				"bradfitz@google.com",
				"gavaletz@google.com",
				"golang-dev@googlegroups.com",
				"jcgregorio@google.com",
				"tiziana@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@google.com, adg@golang.org (cc: bradfitz@google.com, gavaletz@google.com, golang-dev@googlegroups.com, jcgregorio@google.com, tiziana@google.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-08 15:18:08.904660",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"gavaletz@gmail.com",
				"adg@google.com",
				"adg@golang.org",
				"bradfitz@google.com",
				"gavaletz@google.com",
				"golang-dev@googlegroups.com",
				"jcgregorio@google.com",
				"tiziana@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Almost there. Thanks for hanging in there.\n\nhttps://codereview.appspot.com/6496045/diff/11001/oauth/jwt/example/main.go\nFile oauth/jwt/example/main.go (right):\n\nhttps://codereview.appspot.com/6496045/diff/11001/oauth/jwt/example/main.go#newcode25\noauth/jwt/example/main.go:25: scope       = \"https://www.googleapis.com/auth/devstorage.read_only\"\nconst scope = ...\n\nhttps://codereview.appspot.com/6496045/diff/11001/oauth/jwt/example/main.go#newcode51\noauth/jwt/example/main.go:51: config := make(map[string]map[string]string)\nvar config struct {\n  Web struct {\n    ClientEmail string `json:\"client_email\"`\n    TokenURI string `json:\"token_uri\"`\n  }\n}\n\nhttps://codereview.appspot.com/6496045/diff/11001/oauth/jwt/example/main.go#newcode58\noauth/jwt/example/main.go:58: id := strings.SplitN(config[\"web\"][\"client_email\"], \"@\", 2)[0]\nconfig.Web.ClientEmail\n\nhttps://codereview.appspot.com/6496045/diff/11001/oauth/jwt/example/main.go#newcode68\noauth/jwt/example/main.go:68: Iss:   config[\"web\"][\"client_email\"],\nditto\n\nhttps://codereview.appspot.com/6496045/diff/11001/oauth/jwt/example/main.go#newcode70\noauth/jwt/example/main.go:70: Aud:   config[\"web\"][\"token_uri\"],\nconfig.Web.TokenURI\n\nhttps://codereview.appspot.com/6496045/diff/11001/oauth/jwt/example/main.go#newcode88\noauth/jwt/example/main.go:88: fmt.Printf(\"\\naccess_token = %v\\n\", o.AccessToken)\nwhy \\n at the start?\n\nhttps://codereview.appspot.com/6496045/diff/11001/oauth/jwt/jwt.go\nFile oauth/jwt/jwt.go (right):\n\nhttps://codereview.appspot.com/6496045/diff/11001/oauth/jwt/jwt.go#newcode138\noauth/jwt/jwt.go:138: // $ openssl pkcs12 -in <key.p12> -nocerts -passin pass:notasecret -nodes -out <key.pem>\nindent this line by a couple of spaces so godoc formats it as preformatted text",
			"disapproval": false,
			"date": "2012-10-10 01:46:03.040560",
			"approval": false
		},
		{
			"sender": "gavaletz@gmail.com",
			"recipients": [
				"gavaletz@gmail.com",
				"adg@google.com",
				"adg@golang.org",
				"bradfitz@google.com",
				"gavaletz@google.com",
				"golang-dev@googlegroups.com",
				"jcgregorio@google.com",
				"tiziana@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@google.com, adg@golang.org (cc: bradfitz@google.com, gavaletz@google.com, golang-dev@googlegroups.com, jcgregorio@google.com, tiziana@google.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-10 11:45:11.037950",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"gavaletz@gmail.com",
				"adg@google.com",
				"adg@golang.org",
				"bradfitz@google.com",
				"gavaletz@google.com",
				"golang-dev@googlegroups.com",
				"jcgregorio@google.com",
				"tiziana@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThanks!",
			"disapproval": false,
			"date": "2012-10-19 00:49:50.760250",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"gavaletz@gmail.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please sign the CLA: http://golang.org/doc/contribute.html#copyright",
			"disapproval": false,
			"date": "2012-10-19 00:52:30.594880",
			"approval": false
		},
		{
			"sender": "gavaletz@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I have submitted the individual contributor form.\r\n\r\nOn Thu, Oct 18, 2012 at 5:52 PM, <adg@golang.org> wrote:\r\n\r\n> Please sign the CLA: http://golang.org/doc/**contribute.html#copyright<http://golang.org/doc/contribute.html#copyright>\r\n>\r\n> https://codereview.appspot.**com/6496045/<https://codereview.appspot.com/6496045/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-10-20 23:14:40.309340",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"gavaletz@gmail.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/goauth2/source/detail?r=afc88e9a9e37 ***\n\ngoauth2: adding a jwt package to support server to server applications.\n\nThe jwt package allows the user to define a jwt.Token containing the\nrequired and optional fields for constructing the serialized and encoded\nJWT to be used for requesting an access_token.  Integrating this package\ninto oauth/oauth.go will require some redesign of the parent package.\nThese changes have been postponed for a later CL.\n\nThe descriptions of the standards this change implements can be found on\nthe following web page.\n\nhttps://developers.google.com/accounts/docs/OAuth2ServiceAccount\n\nThis addition to the library will allow for example a GAE instance to\nmake requests to service like BigQuery.\n\nR=adg\nCC=golang-dev\nhttp://codereview.appspot.com/6496045\n\nCommitter: Andrew Gerrand <adg@golang.org>",
			"disapproval": false,
			"date": "2012-10-22 00:22:36.986200",
			"approval": false
		}
	],
	"owner_email": "gavaletz@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "gavaletz",
	"subject": "code review 6496045: goauth2: adding a jwt package to support server to serv...",
	"created": "2012-08-28 13:03:32.727130",
	"patchsets": [
		1,
		2001,
		4001,
		11001,
		17001
	],
	"modified": "2013-07-26 15:44:39.719510",
	"closed": true,
	"issue": 6496045
}