{
	"description": "exp/types/staging: support for typechecking (most) builtins\n\nThis code relies on some functions that are not yet in staging,\nbut it get's harder to keep all this in sync in a piece-meal\nfashion.",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-09-15 00:59:38.262920",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6492124/diff/5001/src/pkg/exp/types/staging/builtins.go\nFile src/pkg/exp/types/staging/builtins.go (right):\n\nhttp://codereview.appspot.com/6492124/diff/5001/src/pkg/exp/types/staging/builtins.go#newcode11\nsrc/pkg/exp/types/staging/builtins.go:11: func (check *checker) builtin(x *operand, call *ast.CallExpr, bin *builtin, iota int) {\nA brief doc comment would be nice. Same for intArg.\n\nhttp://codereview.appspot.com/6492124/diff/5001/src/pkg/exp/types/staging/builtins.go#newcode54\nsrc/pkg/exp/types/staging/builtins.go:54: check.invalidArg(x.pos(), \"%s is not a channel\", x)\nfwiw also must not be receive-only channel\n\nhttp://codereview.appspot.com/6492124/diff/5001/src/pkg/exp/types/staging/builtins.go#newcode92\nsrc/pkg/exp/types/staging/builtins.go:92: mode = constant\nThis one's a little weird. The array arg should still be evaluated so it's only sort of a constant, iirc.\n\nhttp://codereview.appspot.com/6492124/diff/5001/src/pkg/exp/types/staging/builtins.go#newcode113\nsrc/pkg/exp/types/staging/builtins.go:113: var min int // minimum number of arguments\nThere's a max too. I don't see that check.\n\nhttp://codereview.appspot.com/6492124/diff/5001/src/pkg/exp/types/staging/builtins.go#newcode158\nsrc/pkg/exp/types/staging/builtins.go:158: if _, ok := unparen(x.expr).(*ast.SelectorExpr); !ok {\nShould probably say that parens are okay in the spec.",
			"disapproval": false,
			"date": "2012-09-17 20:51:15.886330",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nImplemented more of the builtins and added more tests.\n\nhttp://codereview.appspot.com/6492124/diff/5001/src/pkg/exp/types/staging/builtins.go\nFile src/pkg/exp/types/staging/builtins.go (right):\n\nhttp://codereview.appspot.com/6492124/diff/5001/src/pkg/exp/types/staging/builtins.go#newcode11\nsrc/pkg/exp/types/staging/builtins.go:11: func (check *checker) builtin(x *operand, call *ast.CallExpr, bin *builtin, iota int) {\nOn 2012/09/17 20:51:15, rsc wrote:\n> A brief doc comment would be nice. Same for intArg.\n\nDone. intArg is gone.\n\nhttp://codereview.appspot.com/6492124/diff/5001/src/pkg/exp/types/staging/builtins.go#newcode54\nsrc/pkg/exp/types/staging/builtins.go:54: check.invalidArg(x.pos(), \"%s is not a channel\", x)\nOn 2012/09/17 20:51:15, rsc wrote:\n> fwiw also must not be receive-only channel\n\ngood catch. Done.\n\nhttp://codereview.appspot.com/6492124/diff/5001/src/pkg/exp/types/staging/builtins.go#newcode92\nsrc/pkg/exp/types/staging/builtins.go:92: mode = constant\nOn 2012/09/17 20:51:15, rsc wrote:\n> This one's a little weird. The array arg should still be evaluated so it's only\n> sort of a constant, iirc.\n\narg0 is evaluated (typechecked). I also check now for presence of function calls or receive operations (to be clarified in the spec).\n\nhttp://codereview.appspot.com/6492124/diff/5001/src/pkg/exp/types/staging/builtins.go#newcode113\nsrc/pkg/exp/types/staging/builtins.go:113: var min int // minimum number of arguments\nOn 2012/09/17 20:51:15, rsc wrote:\n> There's a max too. I don't see that check.\n\nmax is always min or min+1. check is below (n < min || min+1 < n).\n\nhttp://codereview.appspot.com/6492124/diff/5001/src/pkg/exp/types/staging/builtins.go#newcode158\nsrc/pkg/exp/types/staging/builtins.go:158: if _, ok := unparen(x.expr).(*ast.SelectorExpr); !ok {\nOn 2012/09/17 20:51:15, rsc wrote:\n> Should probably say that parens are okay in the spec.\n\nCL is out (part of the clarification of builtins in expression statements and len/cap calls). Will isolate if the CL is contentious.",
			"disapproval": false,
			"date": "2012-09-18 00:36:50.301350",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6492124/diff/18001/src/pkg/exp/types/staging/builtins.go\nFile src/pkg/exp/types/staging/builtins.go (right):\n\nhttp://codereview.appspot.com/6492124/diff/18001/src/pkg/exp/types/staging/builtins.go#newcode29\nsrc/pkg/exp/types/staging/builtins.go:29: check.invalidOp(call.Pos(), \"%s expects %d argument(s) (found %d)\", call, bin.nargs, n)\nsorry, but pet peeve: please avoid the (s). i find it jarring to see a computer carry out a complex computation like type-checking a go program while at the same time neglecting to compute whether to print an \"s\" suffix. another option is to rewrite the message. 6g distinguishes 'not enough arguments' and 'too many arguments', which also saves the programmer some mental arithmetic comparisons.\n\nhttp://codereview.appspot.com/6492124/diff/18001/src/pkg/exp/types/staging/builtins.go#newcode60\nsrc/pkg/exp/types/staging/builtins.go:60: check.invalidArg(x.pos(), \"%s is not a slice\", x)\nI found it useful in 6g to generate a different error for an untyped nil here.\n\nhttp://codereview.appspot.com/6492124/diff/18001/src/pkg/exp/types/staging/builtins.go#newcode60\nsrc/pkg/exp/types/staging/builtins.go:60: check.invalidArg(x.pos(), \"%s is not a slice\", x)\nI don't see invalidArg in this CL or in the tree - probably it is in another CL. Please check that it shows both the expression and its type, like in this error: http://play.golang.org/p/8M7jujOai9. Including the type is key to understanding many messages, and it is something the type checker knows but the programmer may not.\n\nhttp://codereview.appspot.com/6492124/diff/18001/src/pkg/exp/types/staging/builtins.go#newcode97\nsrc/pkg/exp/types/staging/builtins.go:97: case *Pointer:\nThis is going to come up repeatedly, everywhere array operations happen. I found it useful in 6g to have a helper routine that rewrote x to *x in this case. That's not what you want here but perhaps something like\n\nfunc implicitDeref(t Type) Type {\n    if t, ok := t.(*Pointer); ok {\n        if tt, ok := underlying(typ.Base).(*Array); ok {\n            return tt\n        }\n    }\n    return t\n}\n\nand then you can switch on implicitDeref(typ0).(type) instead.\n\nhttp://codereview.appspot.com/6492124/diff/18001/src/pkg/exp/types/staging/builtins.go#newcode233\nsrc/pkg/exp/types/staging/builtins.go:233: // we aways use 1 to satisfy all alignment guarantees\nNot sure what this means. Eventually you'd want the caller to be able to specify this, so that checking a program has appropriate constant evaluations. Same for OffsetOf and Sizeof. Maybe add a TODO here to include that in the eventual package API.",
			"disapproval": false,
			"date": "2012-09-24 15:03:42.389780",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6492124/diff/18001/src/pkg/exp/types/staging/builtins.go\nFile src/pkg/exp/types/staging/builtins.go (right):\n\nhttp://codereview.appspot.com/6492124/diff/18001/src/pkg/exp/types/staging/builtins.go#newcode29\nsrc/pkg/exp/types/staging/builtins.go:29: check.invalidOp(call.Pos(), \"%s expects %d argument(s) (found %d)\", call, bin.nargs, n)\nOn 2012/09/24 15:03:42, rsc wrote:\n> sorry, but pet peeve: please avoid the (s). i find it jarring to see a computer\n> carry out a complex computation like type-checking a go program while at the\n> same time neglecting to compute whether to print an \"s\" suffix. another option\n> is to rewrite the message. 6g distinguishes 'not enough arguments' and 'too many\n> arguments', which also saves the programmer some mental arithmetic comparisons.\n\nFair enough. Done.\n\nhttp://codereview.appspot.com/6492124/diff/18001/src/pkg/exp/types/staging/builtins.go#newcode60\nsrc/pkg/exp/types/staging/builtins.go:60: check.invalidArg(x.pos(), \"%s is not a slice\", x)\nOn 2012/09/24 15:03:42, rsc wrote:\n> I found it useful in 6g to generate a different error for an untyped nil here.\n\nChanged to \"%s is not a typed slice\". If x is nil, it will say: \"nil is not a typed slice\".\n\nhttp://codereview.appspot.com/6492124/diff/18001/src/pkg/exp/types/staging/builtins.go#newcode60\nsrc/pkg/exp/types/staging/builtins.go:60: check.invalidArg(x.pos(), \"%s is not a slice\", x)\nOn 2012/09/24 15:03:42, rsc wrote:\n> I don't see invalidArg in this CL or in the tree - probably it is in another CL.\n> Please check that it shows both the expression and its type, like in this error:\n> http://play.golang.org/p/8M7jujOai9. Including the type is key to understanding\n> many messages, and it is something the type checker knows but the programmer may\n> not.\n\nIt does. For instance:\n\n   append(nil, s)\n\nwill report:\n\n   \"invalid argument: nil (constant nil) is not a typed slice\"\n\n(with the error position at nil). And:\n\n   append(x, s)\n\nwill report:\n\n   \"invalid argument: x (variable of type int) is not a typed slice\"\n\netc. The messages for constants (here: nil (constant nil)) can be improved. It's all in one central place.\n\nhttp://codereview.appspot.com/6492124/diff/18001/src/pkg/exp/types/staging/builtins.go#newcode97\nsrc/pkg/exp/types/staging/builtins.go:97: case *Pointer:\nOn 2012/09/24 15:03:42, rsc wrote:\n> This is going to come up repeatedly, everywhere array operations happen. I found\n> it useful in 6g to have a helper routine that rewrote x to *x in this case.\n> That's not what you want here but perhaps something like\n> \n> func implicitDeref(t Type) Type {\n>     if t, ok := t.(*Pointer); ok {\n>         if tt, ok := underlying(typ.Base).(*Array); ok {\n>             return tt\n>         }\n>     }\n>     return t\n> }\n> \n> and then you can switch on implicitDeref(typ0).(type) instead.\n\nDone.\n\nhttp://codereview.appspot.com/6492124/diff/18001/src/pkg/exp/types/staging/builtins.go#newcode233\nsrc/pkg/exp/types/staging/builtins.go:233: // we aways use 1 to satisfy all alignment guarantees\nOn 2012/09/24 15:03:42, rsc wrote:\n> Not sure what this means. Eventually you'd want the caller to be able to specify\n> this, so that checking a program has appropriate constant evaluations. Same for\n> OffsetOf and Sizeof. Maybe add a TODO here to include that in the eventual\n> package API.\n\nWhat I meant is that the value 1 satisfies the spec's guarantees. But making it customizable is also an option. Added TODO.",
			"disapproval": false,
			"date": "2012-09-25 23:52:01.802540",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=90a24291d276 ***\n\nexp/types/staging: support for typechecking (most) builtins\n\nThis code relies on some functions that are not yet in staging,\nbut it get's harder to keep all this in sync in a piece-meal\nfashion.\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6492124",
			"disapproval": false,
			"date": "2012-09-26 00:38:49.271420",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6492124: exp/types/staging: support for typechecking (most) builtins",
	"created": "2012-09-15 00:57:11.699480",
	"patchsets": [
		1,
		2001,
		5001,
		10001,
		14001,
		10002,
		17001,
		18001,
		23001,
		26001
	],
	"modified": "2012-09-26 00:38:50.120650",
	"closed": true,
	"issue": 6492124
}