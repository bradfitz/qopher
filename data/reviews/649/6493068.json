{
	"description": "go/build: use custom file readers to avoid I/O\n\nWhen reading Go files, read through import block.\nWhen reading non-Go files, read only leading comments.",
	"cc": [
		"nigeltao@golang.org",
		"adg@golang.org",
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"nigeltao@golang.org",
				"adg@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=8533ef0a112a ***\n\ngo/build: use custom file readers to avoid I/O\n\nWhen reading Go files, read through import block.\nWhen reading non-Go files, read only leading comments.\n\nR=nigeltao, adg, r\nCC=golang-dev\nhttp://codereview.appspot.com/6493068\n\nhttp://codereview.appspot.com/6493068/diff/5002/src/pkg/go/build/read.go\nFile src/pkg/go/build/read.go (right):\n\nhttp://codereview.appspot.com/6493068/diff/5002/src/pkg/go/build/read.go#newcode1\nsrc/pkg/go/build/read.go:1: package build\nOn 2012/09/14 04:44:34, adg wrote:\n> copyright\n\nDone.\n\nhttp://codereview.appspot.com/6493068/diff/5002/src/pkg/go/build/read.go#newcode25\nsrc/pkg/go/build/read.go:25: skipSpace = 1 << iota\nOn 2012/09/14 04:55:00, r wrote:\n> s/ << iota//\n> in fact, make this just a boolean, here and as a 'skipSpace bool' arg to peekc\n\nDone.\n\nhttp://codereview.appspot.com/6493068/diff/5002/src/pkg/go/build/read.go#newcode29\nsrc/pkg/go/build/read.go:29: var errNUL = errors.New(\"unexpected NUL in input\")\nOn 2012/09/14 04:55:00, r wrote:\n> distribute these vars.\n\nDone.\n\nhttp://codereview.appspot.com/6493068/diff/5002/src/pkg/go/build/read.go#newcode59\nsrc/pkg/go/build/read.go:59: // peekc returns the next byte from the input reader but does not advance beyond it.\nOn 2012/09/14 04:55:00, r wrote:\n> s/peekc/peekByte/ or just peek. 'c' is C. this is go.\n> peekByte echoes readByte\n\nDone.\n\nhttp://codereview.appspot.com/6493068/diff/5002/src/pkg/go/build/read.go#newcode80\nsrc/pkg/go/build/read.go:80: if c == ' ' || c == '\\f' || c == '\\t' || c == '\\r' || c == '\\n' || c == ';' {\nOn 2012/09/14 04:55:00, r wrote:\n> this is fine but i find\n> switch c {\n> case ' ', '\\f' etc.\n> nicer to read.\n\nDone.\n\nhttp://codereview.appspot.com/6493068/diff/5002/src/pkg/go/build/read.go#newcode120\nsrc/pkg/go/build/read.go:120: func (r *importReader) readKeyword(kw string) {\nOn 2012/09/14 04:55:00, r wrote:\n> use a byte slice argument and this can be tighter code.\n\nYeah, but then I have to write []byte(\"package\") at the call site. Left as is.\n\nhttp://codereview.appspot.com/6493068/diff/5002/src/pkg/go/build/read.go#newcode133\nsrc/pkg/go/build/read.go:133: // readIdent reads an identifier from the input.\nOn 2012/09/14 04:55:00, r wrote:\n> is an identifier really one byte?\n\nI think maybe you misread 'for' as 'if'.\n\nhttp://codereview.appspot.com/6493068/diff/5002/src/pkg/go/build/read_test.go\nFile src/pkg/go/build/read_test.go (right):\n\nhttp://codereview.appspot.com/6493068/diff/5002/src/pkg/go/build/read_test.go#newcode1\nsrc/pkg/go/build/read_test.go:1: package build\nOn 2012/09/14 04:44:34, adg wrote:\n> copyright\n\nDone.\n\nhttp://codereview.appspot.com/6493068/diff/5002/src/pkg/go/build/read_test.go#newcode94\nsrc/pkg/go/build/read_test.go:94: // Test input contains \u2119 where readImports should stop.\nOn 2012/09/14 04:55:00, r wrote:\n> move or copy this comment to the data structure.\n\nDone.",
			"disapproval": false,
			"date": "2012-09-14 16:22:48.465720",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-08-31 19:24:37.701170",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"rsc@golang.org",
				"nigeltao@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6493068/diff/5002/src/pkg/go/build/read.go\nFile src/pkg/go/build/read.go (right):\n\nhttp://codereview.appspot.com/6493068/diff/5002/src/pkg/go/build/read.go#newcode1\nsrc/pkg/go/build/read.go:1: package build\ncopyright\n\nhttp://codereview.appspot.com/6493068/diff/5002/src/pkg/go/build/read_test.go\nFile src/pkg/go/build/read_test.go (right):\n\nhttp://codereview.appspot.com/6493068/diff/5002/src/pkg/go/build/read_test.go#newcode1\nsrc/pkg/go/build/read_test.go:1: package build\ncopyright",
			"disapproval": false,
			"date": "2012-09-14 04:44:33.891890",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"rsc@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\n\nhttps://codereview.appspot.com/6493068/diff/3/src/pkg/go/build/read.go\nFile src/pkg/go/build/read.go (right):\n\nhttps://codereview.appspot.com/6493068/diff/3/src/pkg/go/build/read.go#newcode20\nsrc/pkg/go/build/read.go:20: func (r *importReader) add(c byte) {\nUnused?\n\nhttps://codereview.appspot.com/6493068/diff/3/src/pkg/go/build/read.go#newcode158\nsrc/pkg/go/build/read.go:158: }\nAdd\nif c == '\\n' { r.syntaxError() }\n?\n\nhttps://codereview.appspot.com/6493068/diff/3/src/pkg/go/build/read_test.go\nFile src/pkg/go/build/read_test.go (right):\n\nhttps://codereview.appspot.com/6493068/diff/3/src/pkg/go/build/read_test.go#newcode13\nsrc/pkg/go/build/read_test.go:13: err string\nIs this field always \"\"? Add syntax error and NUL byte test cases?\n\nhttps://codereview.appspot.com/6493068/diff/3/src/pkg/go/build/read_test.go#newcode34\nsrc/pkg/go/build/read_test.go:34: `package p\nSprinkle some comments in here?\n\nhttps://codereview.appspot.com/6493068/diff/3/src/pkg/go/build/read_test.go#newcode78\nsrc/pkg/go/build/read_test.go:78: \nAdd \"/*/ zot */\" ?",
			"disapproval": false,
			"date": "2012-09-07 07:03:35.122440",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nI've been running with this for a few days and found a bug or two by writing malformed Go files accidentally. Added more tests of errors and fixed those bugs.\n\nhttps://codereview.appspot.com/6493068/diff/3/src/pkg/go/build/read.go\nFile src/pkg/go/build/read.go (right):\n\nhttps://codereview.appspot.com/6493068/diff/3/src/pkg/go/build/read.go#newcode20\nsrc/pkg/go/build/read.go:20: func (r *importReader) add(c byte) {\nOn 2012/09/07 07:03:35, nigeltao wrote:\n> Unused?\n\nDone.\n\nhttps://codereview.appspot.com/6493068/diff/3/src/pkg/go/build/read.go#newcode158\nsrc/pkg/go/build/read.go:158: }\nOn 2012/09/07 07:03:35, nigeltao wrote:\n> Add\n> if c == '\\n' { r.syntaxError() }\n> ?\n\nDone.\n\nhttps://codereview.appspot.com/6493068/diff/3/src/pkg/go/build/read_test.go\nFile src/pkg/go/build/read_test.go (right):\n\nhttps://codereview.appspot.com/6493068/diff/3/src/pkg/go/build/read_test.go#newcode13\nsrc/pkg/go/build/read_test.go:13: err string\nOn 2012/09/07 07:03:35, nigeltao wrote:\n> Is this field always \"\"? Add syntax error and NUL byte test cases?\n\nDone.\n\nhttps://codereview.appspot.com/6493068/diff/3/src/pkg/go/build/read_test.go#newcode34\nsrc/pkg/go/build/read_test.go:34: `package p\nOn 2012/09/07 07:03:35, nigeltao wrote:\n> Sprinkle some comments in here?\n\nDone.\n\nhttps://codereview.appspot.com/6493068/diff/3/src/pkg/go/build/read_test.go#newcode78\nsrc/pkg/go/build/read_test.go:78: \nOn 2012/09/07 07:03:35, nigeltao wrote:\n> Add \"/*/ zot */\" ?\n\nDone.",
			"disapproval": false,
			"date": "2012-09-13 18:24:08.980010",
			"approval": false
		},
		{
			"sender": "mirtchovski@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> I'd be interested to hear about speedups or slowdowns on other\r\n> systems.\r\n\r\nmac (intel core i7, 2.2ghz, 5400rpm hdd): 11.24s before, 11.37s after.\r\nlinux (intel core2, 2.4ghz, 7200rpm hdd) : 5.61s before, 4.69s after.\r\n\r\n\r\nlinux caches were invalidated with \"echo 3 >\r\n/proc/sys/vm/drop_caches\", on osx a multi-GB cat > /dev/null was done.\r\n",
			"disapproval": false,
			"date": "2012-08-31 21:05:17.718000",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"rsc@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\n\n\nOn 2012/09/14 02:56:10, rsc wrote:\n> The separate r.eof bool is not strictly speaking part of that fix. The\n> problem there is that r.err records the first error encountered. If\n> you get an input error due to a bad disk or lost network connection,\n> you want to remember that instead of the syntax error it will cause.\n> But when you get an input 'error' due to EOF you want to let the\n> syntax error take priority. For reasons like that it turned out to be\n> cleaner to remember eof separately than recording it in err.\n\nA syntax error taking priority over io.EOF might be worth adding as a field doc comment to importReader.eof.",
			"disapproval": false,
			"date": "2012-09-14 04:16:45.781700",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"nigeltao@golang.org",
				"adg@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6493068/diff/5002/src/pkg/go/build/read.go\nFile src/pkg/go/build/read.go (right):\n\nhttps://codereview.appspot.com/6493068/diff/5002/src/pkg/go/build/read.go#newcode25\nsrc/pkg/go/build/read.go:25: skipSpace = 1 << iota\ns/ << iota//\nin fact, make this just a boolean, here and as a 'skipSpace bool' arg to peekc\n\nhttps://codereview.appspot.com/6493068/diff/5002/src/pkg/go/build/read.go#newcode29\nsrc/pkg/go/build/read.go:29: var errNUL = errors.New(\"unexpected NUL in input\")\ndistribute these vars.\n\nhttps://codereview.appspot.com/6493068/diff/5002/src/pkg/go/build/read.go#newcode59\nsrc/pkg/go/build/read.go:59: // peekc returns the next byte from the input reader but does not advance beyond it.\ns/peekc/peekByte/ or just peek. 'c' is C. this is go.\npeekByte echoes readByte\n\nhttps://codereview.appspot.com/6493068/diff/5002/src/pkg/go/build/read.go#newcode80\nsrc/pkg/go/build/read.go:80: if c == ' ' || c == '\\f' || c == '\\t' || c == '\\r' || c == '\\n' || c == ';' {\nthis is fine but i find\nswitch c {\ncase ' ', '\\f' etc.\nnicer to read.\n\nhttps://codereview.appspot.com/6493068/diff/5002/src/pkg/go/build/read.go#newcode120\nsrc/pkg/go/build/read.go:120: func (r *importReader) readKeyword(kw string) {\nuse a byte slice argument and this can be tighter code.\n\nhttps://codereview.appspot.com/6493068/diff/5002/src/pkg/go/build/read.go#newcode133\nsrc/pkg/go/build/read.go:133: // readIdent reads an identifier from the input.\nis an identifier really one byte?\n\nhttps://codereview.appspot.com/6493068/diff/5002/src/pkg/go/build/read_test.go\nFile src/pkg/go/build/read_test.go (right):\n\nhttps://codereview.appspot.com/6493068/diff/5002/src/pkg/go/build/read_test.go#newcode94\nsrc/pkg/go/build/read_test.go:94: // Test input contains \u2119 where readImports should stop.\nmove or copy this comment to the data structure.",
			"disapproval": false,
			"date": "2012-09-14 04:55:00.476600",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This CL makes 'go list std >/dev/null' take 0.61 seconds of system\r\ntime instead of 0.75 seconds of system time on my MacBookAir4,1 (SSD).\r\nI'd be interested to hear about speedups or slowdowns on other\r\nsystems.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-08-31 19:28:49.719530",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Any hints on what the bugs were? I don't have a good intuition of why an\r\n> r.eof bool is different from what you had previously (r.err == io.EOF).\r\n\r\nThe bugs were for loops missing an exit when reaching EOF\r\nunexpectedly, such as in the middle of a string, so they looped\r\nforever. Hence the counter + panic to catch any I missed.\r\n\r\nThe separate r.eof bool is not strictly speaking part of that fix. The\r\nproblem there is that r.err records the first error encountered. If\r\nyou get an input error due to a bad disk or lost network connection,\r\nyou want to remember that instead of the syntax error it will cause.\r\nBut when you get an input 'error' due to EOF you want to let the\r\nsyntax error take priority. For reasons like that it turned out to be\r\ncleaner to remember eof separately than recording it in err.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-09-14 02:56:10.126320",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"rsc@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> found a bug or two by writing malformed Go files accidentally.\n\nAny hints on what the bugs were? I don't have a good intuition of why an r.eof bool is different from what you had previously (r.err == io.EOF).",
			"disapproval": false,
			"date": "2012-09-14 02:36:43.145610",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 6493068: go/build: use custom file readers to avoid I/O",
	"created": "2012-08-31 14:23:41.956990",
	"patchsets": [
		1,
		2001,
		6001,
		3,
		3004,
		6003,
		5002,
		8006,
		6005,
		11004
	],
	"modified": "2012-09-14 16:22:50.069560",
	"closed": true,
	"issue": 6493068
}