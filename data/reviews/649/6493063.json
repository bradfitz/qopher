{
	"description": "exp/locale/collate: first changes that introduce implementation of tailorings:\n- Elements in the array are now sorted as a linked list.  This makes it easier to\n  apply tailorings.\n- Added code to sort entries by collation elements.\n- Added logical reset points.  This is used for tailoring relative to certain\n  properties, rather than characters.\n\nNOTE: all code for type entry should now be in order.go.  To keep the diffs for\nthis CL reasonable, though, the existing code is left in builder.go.  I'll move\nthis in a separate CL.",
	"cc": [
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=fd6591baff51 ***\n\nexp/locale/collate: first changes that introduce implementation of tailorings:\n- Elements in the array are now sorted as a linked list.  This makes it easier to\n  apply tailorings.\n- Added code to sort entries by collation elements.\n- Added logical reset points.  This is used for tailoring relative to certain\n  properties, rather than characters.\n\nNOTE: all code for type entry should now be in order.go.  To keep the diffs for\nthis CL reasonable, though, the existing code is left in builder.go.  I'll move\nthis in a separate CL.\n\nR=r\nCC=golang-dev\nhttp://codereview.appspot.com/6493063\n\nhttp://codereview.appspot.com/6493063/diff/1002/src/pkg/exp/locale/collate/build/builder.go\nFile src/pkg/exp/locale/collate/build/builder.go (right):\n\nhttp://codereview.appspot.com/6493063/diff/1002/src/pkg/exp/locale/collate/build/builder.go#newcode46\nsrc/pkg/exp/locale/collate/build/builder.go:46: noindex   bool // do not include in table\nChanged to exclude.\n\nOn 2012/08/31 22:30:10, r wrote:\n> maybe noIndex but i'm not a fan of negative true, so i'd go with doIndex. but if\n> you need the zero value to be false, maybe \"exclude\", so at least we avoid the\n> \"no\"?\n\nhttp://codereview.appspot.com/6493063/diff/1002/src/pkg/exp/locale/collate/build/colelem.go\nFile src/pkg/exp/locale/collate/build/colelem.go (right):\n\nhttp://codereview.appspot.com/6493063/diff/1002/src/pkg/exp/locale/collate/build/colelem.go#newcode247\nsrc/pkg/exp/locale/collate/build/colelem.go:247: ib++\nYes, both need to advance. nextVal only advances on zero values.\n\nOn 2012/08/31 22:30:10, r wrote:\n> you're double-advancing here. i think it's right but just be sure.\n\nhttp://codereview.appspot.com/6493063/diff/1002/src/pkg/exp/locale/collate/build/order.go\nFile src/pkg/exp/locale/collate/build/order.go (right):\n\nhttp://codereview.appspot.com/6493063/diff/1002/src/pkg/exp/locale/collate/build/order.go#newcode130\nsrc/pkg/exp/locale/collate/build/order.go:130: // cannot be derived, i.e. str represents more than one rune.\nOn 2012/08/31 22:30:10, r wrote:\n> s/i.e./that is, if/\n\nDone.",
			"disapproval": false,
			"date": "2012-09-01 12:13:58.367220",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2012-08-30 16:54:09.321640",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6493063/diff/1002/src/pkg/exp/locale/collate/build/builder.go\nFile src/pkg/exp/locale/collate/build/builder.go (right):\n\nhttp://codereview.appspot.com/6493063/diff/1002/src/pkg/exp/locale/collate/build/builder.go#newcode46\nsrc/pkg/exp/locale/collate/build/builder.go:46: noindex   bool // do not include in table\nmaybe noIndex but i'm not a fan of negative true, so i'd go with doIndex. but if you need the zero value to be false, maybe \"exclude\", so at least we avoid the \"no\"?\n\nhttp://codereview.appspot.com/6493063/diff/1002/src/pkg/exp/locale/collate/build/colelem.go\nFile src/pkg/exp/locale/collate/build/colelem.go (right):\n\nhttp://codereview.appspot.com/6493063/diff/1002/src/pkg/exp/locale/collate/build/colelem.go#newcode236\nsrc/pkg/exp/locale/collate/build/colelem.go:236: for ia < len(a) || ib < len(b) {\nthis is fine, but if you want to do it all in the for loop, you could say\n\nfor ia, ib := 0, 0; ia < len(a) || ib < len(b); ia, ib = ia+1, ib+1\n\nhttp://codereview.appspot.com/6493063/diff/1002/src/pkg/exp/locale/collate/build/colelem.go#newcode247\nsrc/pkg/exp/locale/collate/build/colelem.go:247: ib++\nyou're double-advancing here. i think it's right but just be sure.\n\nhttp://codereview.appspot.com/6493063/diff/1002/src/pkg/exp/locale/collate/build/order.go\nFile src/pkg/exp/locale/collate/build/order.go (right):\n\nhttp://codereview.appspot.com/6493063/diff/1002/src/pkg/exp/locale/collate/build/order.go#newcode130\nsrc/pkg/exp/locale/collate/build/order.go:130: // cannot be derived, i.e. str represents more than one rune.\ns/i.e./that is, if/",
			"disapproval": false,
			"date": "2012-08-31 22:30:10.774060",
			"approval": true
		}
	],
	"owner_email": "mpvl@golang.org",
	"private": false,
	"base_url": "",
	"owner": "mpvl",
	"subject": "code review 6493063: exp/locale/collate: first changes that introduce implem...",
	"created": "2012-08-30 16:53:42.270730",
	"patchsets": [
		1,
		1002,
		7001
	],
	"modified": "2012-09-01 12:14:00.886150",
	"closed": true,
	"issue": 6493063
}