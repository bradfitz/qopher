{
	"description": "go.talks: add present tool",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"r@golang.org"
	],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6497063/diff/12002/present/args.go\nFile present/args.go (right):\n\nhttp://codereview.appspot.com/6497063/diff/12002/present/args.go#newcode16\npresent/args.go:16: func format(arg interface{}) string {\ni think this is dead code. it's a residue of the old design where numbers and //-patterns were lexically determined. if it's still being used somewhere, that's a bug\n\nhttp://codereview.appspot.com/6497063/diff/12002/present/doc.go\nFile present/doc.go (right):\n\nhttp://codereview.appspot.com/6497063/diff/12002/present/doc.go#newcode103\npresent/doc.go:103: A similar function \"play\" is the same as \"code\" but puts a button\nThe function \"play\" is the same...\n\nhttp://codereview.appspot.com/6497063/diff/12002/present/doc.go#newcode117\npresent/doc.go:117: The template uses the function \"image\" to inject picture files.\nInject picture files.\n\nhttp://codereview.appspot.com/6497063/diff/12002/present/parse.go\nFile present/parse.go (right):\n\nhttp://codereview.appspot.com/6497063/diff/12002/present/parse.go#newcode25\npresent/parse.go:25: parsers = make(map[string]func(string, int, string) (Elem, error))\nmove parsers up one entry, then put in a blank line so the funcs var is laid out better\n\nhttp://codereview.appspot.com/6497063/diff/12002/present/parse.go#newcode28\npresent/parse.go:28: // Register binds the named action (without the initial period) to the specified\nRegister binds the named action, which does not being with a period, to the\nspecified parser and template function to be invoked when the name, with\na period, appears in the slide input text.\n\nhttp://codereview.appspot.com/6497063/diff/12002/present/parse.go#newcode30\npresent/parse.go:30: func Register(name string, parser func(fileName string, lineNumber int, inputLine string) (Elem, error), function interface{}) {\nif len(name) == 0 || name[0] == ';' { panic(\"bad name in Register: \" + name) }",
			"disapproval": false,
			"date": "2012-09-05 14:51:04.183380",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.talks",
			"disapproval": false,
			"date": "2012-08-31 03:51:50.485550",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6497063/diff/14/present/args.go\nFile present/args.go (right):\n\nhttp://codereview.appspot.com/6497063/diff/14/present/args.go#newcode31\npresent/args.go:31: // The rest of this file is stolen from go/src/cmd/godoc/codewalk.go, with\nOn 2012/08/31 14:21:31, r wrote:\n> s/, with/./\n\nDone.\n\nhttp://codereview.appspot.com/6497063/diff/14/present/args.go#newcode32\npresent/args.go:32: // It's a evaluator for the file address syntax implemented by Acme and Sam,\nOn 2012/08/31 14:21:31, r wrote:\n> s/a/an/\n\nDone.\n\nhttp://codereview.appspot.com/6497063/diff/14/present/code.go\nFile present/code.go (right):\n\nhttp://codereview.appspot.com/6497063/diff/14/present/code.go#newcode91\npresent/code.go:91: func code(c Code) (template.HTML, error) {\nOn 2012/08/31 14:21:31, r wrote:\n> // code is the entry point for the '.code' present command.\n\nDone.\n\nhttp://codereview.appspot.com/6497063/diff/14/present/dir.go\nFile present/dir.go (right):\n\nhttp://codereview.appspot.com/6497063/diff/14/present/dir.go#newcode24\npresent/dir.go:24: func dirList(w http.ResponseWriter, name string) (isDir bool, err error) {\nOn 2012/08/31 14:21:31, r wrote:\n> a doc comment would be nice\n\nDone.\n\nhttp://codereview.appspot.com/6497063/diff/14/present/image.go\nFile present/image.go (right):\n\nhttp://codereview.appspot.com/6497063/diff/14/present/image.go#newcode35\npresent/image.go:35: func image(file string, arg []interface{}) (template.HTML, error) {\nOn 2012/08/31 14:21:31, r wrote:\n> // image is the entry point for the '.image' present command.\n\nDone.\n\nhttp://codereview.appspot.com/6497063/diff/14/present/link.go\nFile present/link.go (right):\n\nhttp://codereview.appspot.com/6497063/diff/14/present/link.go#newcode39\npresent/link.go:39: func link(url url.URL, arg []string) (template.HTML, error) {\nOn 2012/08/31 14:21:31, r wrote:\n> // link is the entry point for the '.link' present command.\n\nDone.\n\nhttp://codereview.appspot.com/6497063/diff/14/present/main.go\nFile present/main.go (right):\n\nhttp://codereview.appspot.com/6497063/diff/14/present/main.go#newcode84\npresent/main.go:84: I appear to be listening on an address that is not localhost.\nOn 2012/08/31 14:21:31, r wrote:\n> s/I appear/The 'present' server appears/\n\nDone.\n\nhttp://codereview.appspot.com/6497063/diff/14/present/main.go#newcode93\npresent/main.go:93: func dirHandler(w http.ResponseWriter, r *http.Request) {\nOn 2012/08/31 14:21:31, r wrote:\n> more doc comments needed\n\nDone.\n\nhttp://codereview.appspot.com/6497063/diff/14/present/parse.go\nFile present/parse.go (right):\n\nhttp://codereview.appspot.com/6497063/diff/14/present/parse.go#newcode36\npresent/parse.go:36: func renderSlides(w io.Writer, base, slideFile string) error {\nOn 2012/08/31 14:21:31, r wrote:\n> // renderSlides reads the slide file, builds its template representation,\n> // and executes the template, sending output to w.\n\nDone.\n\nhttp://codereview.appspot.com/6497063/diff/14/present/parse.go#newcode63\npresent/parse.go:63: type Pres struct {\nOn 2012/08/31 14:21:31, r wrote:\n> comments please\n\nDone.",
			"disapproval": false,
			"date": "2012-09-03 08:25:58.383340",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6497063/diff/14/present/args.go\nFile present/args.go (right):\n\nhttp://codereview.appspot.com/6497063/diff/14/present/args.go#newcode31\npresent/args.go:31: // The rest of this file is stolen from go/src/cmd/godoc/codewalk.go, with\ns/, with/./\n\nhttp://codereview.appspot.com/6497063/diff/14/present/args.go#newcode32\npresent/args.go:32: // It's a evaluator for the file address syntax implemented by Acme and Sam,\ns/a/an/\n\nhttp://codereview.appspot.com/6497063/diff/14/present/code.go\nFile present/code.go (right):\n\nhttp://codereview.appspot.com/6497063/diff/14/present/code.go#newcode91\npresent/code.go:91: func code(c Code) (template.HTML, error) {\n// code is the entry point for the '.code' present command.\n\nhttp://codereview.appspot.com/6497063/diff/14/present/dir.go\nFile present/dir.go (right):\n\nhttp://codereview.appspot.com/6497063/diff/14/present/dir.go#newcode24\npresent/dir.go:24: func dirList(w http.ResponseWriter, name string) (isDir bool, err error) {\na doc comment would be nice\n\nhttp://codereview.appspot.com/6497063/diff/14/present/image.go\nFile present/image.go (right):\n\nhttp://codereview.appspot.com/6497063/diff/14/present/image.go#newcode35\npresent/image.go:35: func image(file string, arg []interface{}) (template.HTML, error) {\n// image is the entry point for the '.image' present command.\n\nhttp://codereview.appspot.com/6497063/diff/14/present/link.go\nFile present/link.go (right):\n\nhttp://codereview.appspot.com/6497063/diff/14/present/link.go#newcode39\npresent/link.go:39: func link(url url.URL, arg []string) (template.HTML, error) {\n// link is the entry point for the '.link' present command.\n\nhttp://codereview.appspot.com/6497063/diff/14/present/main.go\nFile present/main.go (right):\n\nhttp://codereview.appspot.com/6497063/diff/14/present/main.go#newcode84\npresent/main.go:84: I appear to be listening on an address that is not localhost.\ns/I appear/The 'present' server appears/\n\nhttp://codereview.appspot.com/6497063/diff/14/present/main.go#newcode93\npresent/main.go:93: func dirHandler(w http.ResponseWriter, r *http.Request) {\nmore doc comments needed\n\nhttp://codereview.appspot.com/6497063/diff/14/present/parse.go\nFile present/parse.go (right):\n\nhttp://codereview.appspot.com/6497063/diff/14/present/parse.go#newcode36\npresent/parse.go:36: func renderSlides(w io.Writer, base, slideFile string) error {\n// renderSlides reads the slide file, builds its template representation,\n// and executes the template, sending output to w.\n\nhttp://codereview.appspot.com/6497063/diff/14/present/parse.go#newcode63\npresent/parse.go:63: type Pres struct {\ncomments please\n\nhttp://codereview.appspot.com/6497063/diff/14/present/slide.tmpl\nFile present/slide.tmpl (right):\n\nhttp://codereview.appspot.com/6497063/diff/14/present/slide.tmpl#newcode1\npresent/slide.tmpl:1: {{define \"slides\"}}\n{{/* what is this? */}}",
			"disapproval": false,
			"date": "2012-08-31 14:21:31.400580",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-03 08:27:45.733110",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6497063/diff/14/present/slide.tmpl\nFile present/slide.tmpl (right):\n\nhttp://codereview.appspot.com/6497063/diff/14/present/slide.tmpl#newcode1\npresent/slide.tmpl:1: {{define \"slides\"}}\nOn 2012/08/31 14:21:31, r wrote:\n> {{/* what is this? */}}\n\nDone.",
			"disapproval": false,
			"date": "2012-09-03 08:31:06.661900",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=13d7e588df83&repo=talks ***\n\ngo.talks: add present tool\n\nR=golang-dev, r\nCC=golang-dev\nhttp://codereview.appspot.com/6497063\n\nhttp://codereview.appspot.com/6497063/diff/12002/present/args.go\nFile present/args.go (right):\n\nhttp://codereview.appspot.com/6497063/diff/12002/present/args.go#newcode16\npresent/args.go:16: func format(arg interface{}) string {\nOn 2012/09/05 14:51:04, r wrote:\n> i think this is dead code. it's a residue of the old design where numbers and\n> //-patterns were lexically determined. if it's still being used somewhere,\n> that's a bug\n\nDone.\n\nhttp://codereview.appspot.com/6497063/diff/12002/present/doc.go\nFile present/doc.go (right):\n\nhttp://codereview.appspot.com/6497063/diff/12002/present/doc.go#newcode103\npresent/doc.go:103: A similar function \"play\" is the same as \"code\" but puts a button\nOn 2012/09/05 14:51:04, r wrote:\n> The function \"play\" is the same...\n\nDone.\n\nhttp://codereview.appspot.com/6497063/diff/12002/present/doc.go#newcode117\npresent/doc.go:117: The template uses the function \"image\" to inject picture files.\nOn 2012/09/05 14:51:04, r wrote:\n> Inject picture files.\n\nThat's what it says?\n\nhttp://codereview.appspot.com/6497063/diff/12002/present/parse.go\nFile present/parse.go (right):\n\nhttp://codereview.appspot.com/6497063/diff/12002/present/parse.go#newcode25\npresent/parse.go:25: parsers = make(map[string]func(string, int, string) (Elem, error))\nOn 2012/09/05 14:51:04, r wrote:\n> move parsers up one entry, then put in a blank line so the funcs var is laid out\n> better\n\nDone.\n\nhttp://codereview.appspot.com/6497063/diff/12002/present/parse.go#newcode28\npresent/parse.go:28: // Register binds the named action (without the initial period) to the specified\nOn 2012/09/05 14:51:04, r wrote:\n> Register binds the named action, which does not being with a period, to the\n> specified parser and template function to be invoked when the name, with\n> a period, appears in the slide input text.\n\nDone.\n\nhttp://codereview.appspot.com/6497063/diff/12002/present/parse.go#newcode30\npresent/parse.go:30: func Register(name string, parser func(fileName string, lineNumber int, inputLine string) (Elem, error), function interface{}) {\nOn 2012/09/05 14:51:04, r wrote:\n> if len(name) == 0 || name[0] == ';' { panic(\"bad name in Register: \" + name) }\n\nDone.",
			"disapproval": false,
			"date": "2012-09-05 22:12:49.492010",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"adg@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6497063/diff/3015/present/doc.go\nFile present/doc.go (right):\n\nhttp://codereview.appspot.com/6497063/diff/3015/present/doc.go#newcode99\npresent/doc.go:99: .code test.go /^type Foo/,/^}/ HLxxx\nneed to document the `` convention",
			"disapproval": false,
			"date": "2012-09-05 22:43:11.326090",
			"approval": false
		}
	],
	"owner_email": "adg@golang.org",
	"private": false,
	"base_url": "",
	"owner": "adg",
	"subject": "code review 6497063: go.talks: add present tool",
	"created": "2012-08-31 03:51:40.215950",
	"patchsets": [
		1,
		14,
		4014,
		8005,
		12002,
		3015
	],
	"modified": "2012-09-05 22:43:11.541270",
	"closed": true,
	"issue": 6497063
}