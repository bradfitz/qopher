{
	"description": "race: gc changes\nThis is the first part of a bigger change that adds data race detection feature:\nhttp://codereview.appspot.com/6456044\nThis change makes gc compiler instrument memory accesses when supplied with -b flag.",
	"cc": [
		"rsc@golang.org",
		"nigeltao@golang.org",
		"lvd@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-09-02 14:46:52.201730",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I must say that the pass itself contains a lot of issues (you may see commented out code, and TODOs).\nHowever it works reasonably well in practice and does not produce known false positives. I would prefer to do small fixes now if you know how to fix, and delay more significant fixes until after we upstream everything else.",
			"disapproval": false,
			"date": "2012-09-03 09:00:32.865220",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"lvd@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6497074/diff/10001/src/cmd/gc/racewalk.c\nFile src/cmd/gc/racewalk.c (right):\n\nhttps://codereview.appspot.com/6497074/diff/10001/src/cmd/gc/racewalk.c#newcode466\nsrc/cmd/gc/racewalk.c:466: if((class&PHEAP) || class == PPARAMREF || class == PEXTERN\nThe original idea was to filter out stack access. The code was written before escape analysis, and at that time it was statically decidable. Now the runtime tolerates stack accesses, but we do not want a lot of them for performance reasons.",
			"disapproval": false,
			"date": "2012-09-03 09:04:28.497480",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2012-09-03 07:35:03.686450",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6497074/diff/5001/src/cmd/gc/racewalk.c\nFile src/cmd/gc/racewalk.c (right):\n\nhttps://codereview.appspot.com/6497074/diff/5001/src/cmd/gc/racewalk.c#newcode1\nsrc/cmd/gc/racewalk.c:1: // Copyright 2011 The Go Authors. All rights reserved.\n2012?\n\nhttps://codereview.appspot.com/6497074/diff/5001/src/cmd/gc/racewalk.c#newcode86\nsrc/cmd/gc/racewalk.c:86: case OAS2: // x, y = a, b\nPerhaps these comments on the OFOO constants belong in go.h. See http://codereview.appspot.com/6495074\n\nhttps://codereview.appspot.com/6497074/diff/5001/src/cmd/gc/racewalk.c#newcode418\nsrc/cmd/gc/racewalk.c:418: // end of expressions\nOutdent?",
			"disapproval": false,
			"date": "2012-09-03 07:34:48.635480",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks!\n\nhttps://codereview.appspot.com/6497074/diff/5001/src/cmd/gc/racewalk.c\nFile src/cmd/gc/racewalk.c (right):\n\nhttps://codereview.appspot.com/6497074/diff/5001/src/cmd/gc/racewalk.c#newcode1\nsrc/cmd/gc/racewalk.c:1: // Copyright 2011 The Go Authors. All rights reserved.\nOn 2012/09/03 07:34:48, nigeltao wrote:\n> 2012?\n\nDone.\n\nhttps://codereview.appspot.com/6497074/diff/5001/src/cmd/gc/racewalk.c#newcode86\nsrc/cmd/gc/racewalk.c:86: case OAS2: // x, y = a, b\nOn 2012/09/03 07:34:48, nigeltao wrote:\n> Perhaps these comments on the OFOO constants belong in go.h. See\n> http://codereview.appspot.com/6495074\n\nDone.\n\nhttps://codereview.appspot.com/6497074/diff/5001/src/cmd/gc/racewalk.c#newcode418\nsrc/cmd/gc/racewalk.c:418: // end of expressions\nOn 2012/09/03 07:34:48, nigeltao wrote:\n> Outdent?\n\nDone.\n\nhttps://codereview.appspot.com/6497074/diff/5001/src/cmd/gc/racewalk.c#newcode418\nsrc/cmd/gc/racewalk.c:418: // end of expressions\nOn 2012/09/03 07:34:48, nigeltao wrote:\n> Outdent?\n\nDone.",
			"disapproval": false,
			"date": "2012-09-03 08:55:33.890510",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"lvd@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Added -b flag to gc/doc.go.\nPTAL",
			"disapproval": false,
			"date": "2012-09-18 19:46:36.069860",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Sep 20, 2012 at 10:36 PM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n> All memory accesses must be instrumented. make(chan int, n) and others are\r\n> just not implemented yet.\r\n>\r\n> There are (at least) 2 quirks.\r\n> 1. raceread() (or racewrite()) must be executed iff the memory access is\r\n> executed. That's why && and || are not currently instrumented. The proper\r\n> transformation of && would be:\r\n> a&&b\r\n> \\/\\/\\/\\/\\/\r\n> raceread(&a);\r\n> if(a) {\r\n>   raceread(&b);\r\n>   if(b)\r\n>     yield true;\r\n> }\r\n> yield false;\r\n>\r\n> And note that a&&b may appear in switch case or as a nested function\r\n> argument (foo(..., bar(..., a&&b, ...), ...)).\r\n\r\nWe have the same kinds of problems hoisting function calls out of a &&\r\nb. See case OANDAND around walk.c:504 and its use of a separate list\r\nand addinit. You should be able to do something similar.\r\n\r\n> 2. raceread/racewrite can't be reordered with function calls (because\r\n> function calls can contain synchronization).\r\n> E.g. if we have\r\n> foo(bar(), a);\r\n> it's *incorrect* to transform it just to:\r\n> raceread(&a);\r\n> foo(bar(), a);\r\n> because bar() is sequenced before read of a, and can e.g. lock a mutex (thus\r\n> preventing race on a).\r\n> So the correct transformation would be along the lines of:\r\n> x = bar();\r\n> raceread(&a);\r\n> foo(x, a);\r\n\r\nActually the read of a is not sequenced compared to the call of bar.\r\nOnly function calls and communication operations are sequenced. In\r\nthis example 'a' can be evaluated in either order. However, builtins\r\ncount as function calls, so if a were 'len(a)' the call to len would\r\nbe sequenced but the evaluation of a would not, if that makes sense.\r\n\r\nI'm happy with this code as is, mostly, but please separate the bottom\r\nlist of cases into ones that you expect to ignore forever (such as\r\nprint or println) and ones that are just unimplemented. Please mark\r\nthe latter block:\r\n\r\n    // unimplemented\r\n    goto ret;\r\n\r\nor something like that. Thanks.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-09-21 02:44:10.577130",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"lvd@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm a little skeptical that racewalk.c is correct. I don't see any kind of generic traversal and yet so many nodes with subexpressions don't walk into the subexpressions. What am I missing?\n\nhttp://codereview.appspot.com/6497074/diff/15001/src/cmd/gc/racewalk.c\nFile src/cmd/gc/racewalk.c (right):\n\nhttp://codereview.appspot.com/6497074/diff/15001/src/cmd/gc/racewalk.c#newcode80\nsrc/cmd/gc/racewalk.c:80: default:\nUnindent switch body 1 tab\n\nhttp://codereview.appspot.com/6497074/diff/15001/src/cmd/gc/racewalk.c#newcode80\nsrc/cmd/gc/racewalk.c:80: default:\nWhy do you have a default and all the other cases explicitly enumerated?\nI could see saying default: fatal(\"racewalk %O\", n->op) or something like that. But if you have default: goto ret, then all the other case FOO: goto ret are unnecessary, no?\n\nhttp://codereview.appspot.com/6497074/diff/15001/src/cmd/gc/racewalk.c#newcode96\nsrc/cmd/gc/racewalk.c:96: case OCALL:\nThere sure are a lot of these. Might as well merge them all into one case list instead of having lots of different case lists that all do nothing.",
			"disapproval": false,
			"date": "2012-09-20 18:00:23.129780",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"lvd@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6497074/diff/15001/src/cmd/gc/racewalk.c\nFile src/cmd/gc/racewalk.c (right):\n\nhttps://codereview.appspot.com/6497074/diff/15001/src/cmd/gc/racewalk.c#newcode80\nsrc/cmd/gc/racewalk.c:80: default:\nOn 2012/09/20 18:00:23, rsc wrote:\n> Unindent switch body 1 tab\n\nDone.\n\nhttps://codereview.appspot.com/6497074/diff/15001/src/cmd/gc/racewalk.c#newcode80\nsrc/cmd/gc/racewalk.c:80: default:\nOn 2012/09/20 18:00:23, rsc wrote:\n> Why do you have a default and all the other cases explicitly enumerated?\n> I could see saying default: fatal(\"racewalk %O\", n->op) or something like that.\n> But if you have default: goto ret, then all the other case FOO: goto ret are\n> unnecessary, no?\n\nDone.\n\nhttps://codereview.appspot.com/6497074/diff/15001/src/cmd/gc/racewalk.c#newcode96\nsrc/cmd/gc/racewalk.c:96: case OCALL:\nOn 2012/09/20 18:00:23, rsc wrote:\n> There sure are a lot of these. Might as well merge them all into one case list\n> instead of having lots of different case lists that all do nothing.\n\nDone.",
			"disapproval": false,
			"date": "2012-09-21 00:19:28.404870",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"lvd@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6497074/diff/23001/src/cmd/gc/racewalk.c\nFile src/cmd/gc/racewalk.c (right):\n\nhttps://codereview.appspot.com/6497074/diff/23001/src/cmd/gc/racewalk.c#newcode330\nsrc/cmd/gc/racewalk.c:330: default:\nOn 2012/09/21 02:21:40, rsc wrote:\n> Please put this at the top of the switch, just because that's what other files\n> do.\n\nDone.",
			"disapproval": false,
			"date": "2012-09-22 04:03:49.479910",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"lvd@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/21 00:19:28, dvyukov wrote:\n> https://codereview.appspot.com/6497074/diff/15001/src/cmd/gc/racewalk.c\n> File src/cmd/gc/racewalk.c (right):\n> \n> https://codereview.appspot.com/6497074/diff/15001/src/cmd/gc/racewalk.c#newcode80\n> src/cmd/gc/racewalk.c:80: default:\n> On 2012/09/20 18:00:23, rsc wrote:\n> > Unindent switch body 1 tab\n> \n> Done.\n> \n> https://codereview.appspot.com/6497074/diff/15001/src/cmd/gc/racewalk.c#newcode80\n> src/cmd/gc/racewalk.c:80: default:\n> On 2012/09/20 18:00:23, rsc wrote:\n> > Why do you have a default and all the other cases explicitly enumerated?\n> > I could see saying default: fatal(\"racewalk %O\", n->op) or something like\n> that.\n> > But if you have default: goto ret, then all the other case FOO: goto ret are\n> > unnecessary, no?\n> \n> Done.\n> \n> https://codereview.appspot.com/6497074/diff/15001/src/cmd/gc/racewalk.c#newcode96\n> src/cmd/gc/racewalk.c:96: case OCALL:\n> On 2012/09/20 18:00:23, rsc wrote:\n> > There sure are a lot of these. Might as well merge them all into one case list\n> > instead of having lots of different case lists that all do nothing.\n> \n> Done.\n\nPTAL",
			"disapproval": false,
			"date": "2012-09-21 00:21:04.068820",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"lvd@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/20 18:00:23, rsc wrote:\n> I'm a little skeptical that racewalk.c is correct. I don't see any kind of\n> generic traversal and yet so many nodes with subexpressions don't walk into the\n> subexpressions. What am I missing?\n\nYou are missing nothing. That's just what I currently have:\n\nOn 2012/09/03 09:00:32, dvyukov wrote:\n> I must say that the pass itself contains a lot of issues (you may see commented\n> out code, and TODOs).\n> However it works reasonably well in practice and does not produce known false\n> positives. I would prefer to do small fixes now if you know how to fix, and\n> delay more significant fixes until after we upstream everything else.",
			"disapproval": false,
			"date": "2012-09-21 00:20:34.294630",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"lvd@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It would help me a little to have a comment at the top of racewalk that explains what it should be doing. I am happy to iterate with you on what the comment says, or even to write it if we can have a short discussion here over email. I can see that callinstr inserts a call to the race instrumentation and that many of the top-level node types recurse to walk the arguments.\n\nBut for example why is slicing a string not relevant? It seems like the string might be loaded from a shared variable, and of course the indices are integers that might be computed with races too. Or why is the count passed to make(chan int, n) not considered? \n\nOne possible reason is that these nodes cannot happen, but there is a separate block for those, and they are not listed in it. So I'm not entirely sure what's going on.\n\nThanks.\n\nhttps://codereview.appspot.com/6497074/diff/23001/src/cmd/gc/racewalk.c\nFile src/cmd/gc/racewalk.c (right):\n\nhttps://codereview.appspot.com/6497074/diff/23001/src/cmd/gc/racewalk.c#newcode284\nsrc/cmd/gc/racewalk.c:284: case OSLICESTR:\nI'm a little confused. Just to take one example, why are the arguments to OSLICESTR not relevant here?\n\nhttps://codereview.appspot.com/6497074/diff/23001/src/cmd/gc/racewalk.c#newcode330\nsrc/cmd/gc/racewalk.c:330: default:\nPlease put this at the top of the switch, just because that's what other files do.",
			"disapproval": false,
			"date": "2012-09-21 02:21:39.003070",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "All memory accesses must be instrumented. make(chan int, n) and others are\r\njust not implemented yet.\r\n\r\nThere are (at least) 2 quirks.\r\n1. raceread() (or racewrite()) must be executed iff the memory access is\r\nexecuted. That's why && and || are not currently instrumented. The proper\r\ntransformation of && would be:\r\na&&b\r\n\\/\\/\\/\\/\\/\r\nraceread(&a);\r\nif(a) {\r\n  raceread(&b);\r\n  if(b)\r\n    yield true;\r\n}\r\nyield false;\r\n\r\nAnd note that a&&b may appear in switch case or as a nested function\r\nargument (foo(..., bar(..., a&&b, ...), ...)).\r\n\r\n2. raceread/racewrite can't be reordered with function calls (because\r\nfunction calls can contain synchronization).\r\nE.g. if we have\r\nfoo(bar(), a);\r\nit's *incorrect* to transform it just to:\r\nraceread(&a);\r\nfoo(bar(), a);\r\nbecause bar() is sequenced before read of a, and can e.g. lock a mutex\r\n(thus preventing race on a).\r\nSo the correct transformation would be along the lines of:\r\nx = bar();\r\nraceread(&a);\r\nfoo(x, a);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nOn Thu, Sep 20, 2012 at 7:21 PM, <rsc@golang.org> wrote:\r\n\r\n> It would help me a little to have a comment at the top of racewalk that\r\n> explains what it should be doing. I am happy to iterate with you on what\r\n> the comment says, or even to write it if we can have a short discussion\r\n> here over email. I can see that callinstr inserts a call to the race\r\n> instrumentation and that many of the top-level node types recurse to\r\n> walk the arguments.\r\n>\r\n> But for example why is slicing a string not relevant? It seems like the\r\n> string might be loaded from a shared variable, and of course the indices\r\n> are integers that might be computed with races too. Or why is the count\r\n> passed to make(chan int, n) not considered?\r\n>\r\n> One possible reason is that these nodes cannot happen, but there is a\r\n> separate block for those, and they are not listed in it. So I'm not\r\n> entirely sure what's going on.\r\n>\r\n> Thanks.\r\n>\r\n>\r\n> https://codereview.appspot.**com/6497074/diff/23001/src/**\r\n> cmd/gc/racewalk.c<https://codereview.appspot.com/6497074/diff/23001/src/cmd/gc/racewalk.c>\r\n> File src/cmd/gc/racewalk.c (right):\r\n>\r\n> https://codereview.appspot.**com/6497074/diff/23001/src/**\r\n> cmd/gc/racewalk.c#newcode284<https://codereview.appspot.com/6497074/diff/23001/src/cmd/gc/racewalk.c#newcode284>\r\n> src/cmd/gc/racewalk.c:284: case OSLICESTR:\r\n> I'm a little confused. Just to take one example, why are the arguments\r\n> to OSLICESTR not relevant here?\r\n>\r\n> https://codereview.appspot.**com/6497074/diff/23001/src/**\r\n> cmd/gc/racewalk.c#newcode330<https://codereview.appspot.com/6497074/diff/23001/src/cmd/gc/racewalk.c#newcode330>\r\n> src/cmd/gc/racewalk.c:330: default:\r\n> Please put this at the top of the switch, just because that's what other\r\n> files do.\r\n>\r\n> https://codereview.appspot.**com/6497074/<https://codereview.appspot.com/6497074/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-09-21 02:36:22.799760",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"lvd@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/21 02:44:10, rsc wrote:\n> On Thu, Sep 20, 2012 at 10:36 PM, Dmitry Vyukov <mailto:dvyukov@google.com> wrote:\n> > All memory accesses must be instrumented. make(chan int, n) and others are\n> > just not implemented yet.\n> >\n> > There are (at least) 2 quirks.\n> > 1. raceread() (or racewrite()) must be executed iff the memory access is\n> > executed. That's why && and || are not currently instrumented. The proper\n> > transformation of && would be:\n> > a&&b\n> > \\/\\/\\/\\/\\/\n> > raceread(&a);\n> > if(a) {\n> >   raceread(&b);\n> >   if(b)\n> >     yield true;\n> > }\n> > yield false;\n> >\n> > And note that a&&b may appear in switch case or as a nested function\n> > argument (foo(..., bar(..., a&&b, ...), ...)).\n> \n> We have the same kinds of problems hoisting function calls out of a &&\n> b. See case OANDAND around walk.c:504 and its use of a separate list\n> and addinit. You should be able to do something similar.\n> \n> > 2. raceread/racewrite can't be reordered with function calls (because\n> > function calls can contain synchronization).\n> > E.g. if we have\n> > foo(bar(), a);\n> > it's *incorrect* to transform it just to:\n> > raceread(&a);\n> > foo(bar(), a);\n> > because bar() is sequenced before read of a, and can e.g. lock a mutex (thus\n> > preventing race on a).\n> > So the correct transformation would be along the lines of:\n> > x = bar();\n> > raceread(&a);\n> > foo(x, a);\n> \n> Actually the read of a is not sequenced compared to the call of bar.\n> Only function calls and communication operations are sequenced. In\n> this example 'a' can be evaluated in either order. However, builtins\n> count as function calls, so if a were 'len(a)' the call to len would\n> be sequenced but the evaluation of a would not, if that makes sense.\n> \n> I'm happy with this code as is, mostly, but please separate the bottom\n> list of cases into ones that you expect to ignore forever (such as\n> print or println) and ones that are just unimplemented. Please mark\n> the latter block:\n> \n>     // unimplemented\n>     goto ret;\n> \n> or something like that. Thanks.\n\n\nDone. PTAL.\nI am not sure right now what exactly cases does not require instrumentation, so I moved only the obvious ones.",
			"disapproval": false,
			"date": "2012-09-22 04:03:42.608230",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Sep 20, 2012 at 7:21 PM, <rsc@golang.org> wrote:\r\n\r\n> It would help me a little to have a comment at the top of racewalk that\r\n> explains what it should be doing. I am happy to iterate with you on what\r\n> the comment says, or even to write it\r\n\r\n\r\nThat would be great. I suspect it will be much faster on your side.\r\n\r\nGc AST is considerably harder to analyze and mutate than gcc/llvm. Gcc\r\nlowers to very primitive AST, while llvm uses abstract assembly at all\r\n(each memory load and store is a separate instruction). So I tried to stick\r\nwith the most simple transformations to not end up with crashing compiler\r\nand/or code.\r\n\r\nHowever, I expect there to be a long tail of races that we currently do not\r\ncatch due to missed instrumentation. Every time I instrumented few more\r\ncases, I catch few more bugs. E.g.\r\nhttp://code.google.com/p/go/issues/detail?id=3886 was caught only when I\r\ninstrument arguments of slicing operator.\r\n\r\nThere is another aspect - redundant instrumentation. E.g. for\r\nx = x + y\r\nz = x + z\r\nideally we emit only 1 racewrite(&x). But that's for future.\r\n\r\n\r\n\r\n\r\n\r\n> if we can have a short discussion\r\n> here over email. I can see that callinstr inserts a call to the race\r\n> instrumentation and that many of the top-level node types recurse to\r\n> walk the arguments.\r\n>\r\n> But for example why is slicing a string not relevant? It seems like the\r\n> string might be loaded from a shared variable, and of course the indices\r\n> are integers that might be computed with races too. Or why is the count\r\n> passed to make(chan int, n) not considered?\r\n>\r\n> One possible reason is that these nodes cannot happen, but there is a\r\n> separate block for those, and they are not listed in it. So I'm not\r\n> entirely sure what's going on.\r\n>\r\n> Thanks.\r\n>\r\n>\r\n> https://codereview.appspot.**com/6497074/diff/23001/src/**\r\n> cmd/gc/racewalk.c<https://codereview.appspot.com/6497074/diff/23001/src/cmd/gc/racewalk.c>\r\n> File src/cmd/gc/racewalk.c (right):\r\n>\r\n> https://codereview.appspot.**com/6497074/diff/23001/src/**\r\n> cmd/gc/racewalk.c#newcode284<https://codereview.appspot.com/6497074/diff/23001/src/cmd/gc/racewalk.c#newcode284>\r\n> src/cmd/gc/racewalk.c:284: case OSLICESTR:\r\n> I'm a little confused. Just to take one example, why are the arguments\r\n> to OSLICESTR not relevant here?\r\n>\r\n> https://codereview.appspot.**com/6497074/diff/23001/src/**\r\n> cmd/gc/racewalk.c#newcode330<https://codereview.appspot.com/6497074/diff/23001/src/cmd/gc/racewalk.c#newcode330>\r\n> src/cmd/gc/racewalk.c:330: default:\r\n> Please put this at the top of the switch, just because that's what other\r\n> files do.\r\n>\r\n> https://codereview.appspot.**com/6497074/<https://codereview.appspot.com/6497074/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-09-22 05:42:56.731300",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"lvd@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6497074/diff/30001/src/cmd/gc/racewalk.c\nFile src/cmd/gc/racewalk.c (right):\n\nhttps://codereview.appspot.com/6497074/diff/30001/src/cmd/gc/racewalk.c#newcode4\nsrc/cmd/gc/racewalk.c:4: \n\n// The racewalk pass modifies the code tree for the function as follows:\n//\n// 1. It inserts a call to racefuncenter at the beginning of each function.\n// 2. It inserts a call to racefuncexit at the end of each function.\n// 3. It inserts a call to raceread before each memory read.\n// 4. It inserts a call to racewrite before each memory write.\n//\n// The rewriting is not yet complete. Certain nodes are not rewritten\n// but should be.",
			"disapproval": false,
			"date": "2012-10-01 20:07:49.271420",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"rsc@golang.org",
				"nigeltao@golang.org",
				"lvd@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=f468e193586b ***\n\nrace: gc changes\nThis is the first part of a bigger change that adds data race detection feature:\nhttp://codereview.appspot.com/6456044\nThis change makes gc compiler instrument memory accesses when supplied with -b flag.\n\nR=rsc, nigeltao, lvd\nCC=golang-dev\nhttp://codereview.appspot.com/6497074\n\nhttp://codereview.appspot.com/6497074/diff/30001/src/cmd/gc/racewalk.c\nFile src/cmd/gc/racewalk.c (right):\n\nhttp://codereview.appspot.com/6497074/diff/30001/src/cmd/gc/racewalk.c#newcode4\nsrc/cmd/gc/racewalk.c:4: \nOn 2012/10/01 20:07:49, rsc wrote:\n> \n> // The racewalk pass modifies the code tree for the function as follows:\n> //\n> // 1. It inserts a call to racefuncenter at the beginning of each function.\n> // 2. It inserts a call to racefuncexit at the end of each function.\n> // 3. It inserts a call to raceread before each memory read.\n> // 4. It inserts a call to racewrite before each memory write.\n> //\n> // The rewriting is not yet complete. Certain nodes are not rewritten\n> // but should be.\n\nDone.",
			"disapproval": false,
			"date": "2012-10-02 06:06:30.828540",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 6497074: race: gc changes",
	"created": "2012-09-02 14:45:58.226270",
	"patchsets": [
		1,
		2001,
		5001,
		10001,
		12001,
		15001,
		21001,
		23001,
		25002,
		30001,
		34001,
		36001,
		36002
	],
	"modified": "2012-10-02 06:06:31.992710",
	"closed": true,
	"issue": 6497074
}