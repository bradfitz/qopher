{
	"description": "cmd/6g: avoid taking the address of slices unnecessarily.\n\nThe main case where it happens is when evaluating &s[i] without\nbounds checking, which usually happens during range loops (i=0).\n\nThis allows registerization of the corresponding variables,\nsaving 16 bytes of stack frame for each such range loop and a\nLEAQ instruction.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org",
		"dave@cheney.net",
		"remy@archlinux.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping ?",
			"disapproval": false,
			"date": "2012-09-07 01:58:35.702340",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-09-01 18:48:42.095100",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is mainly a little experiment. I could not find any measurable performance improvement, but the reduction in stack frames can be useful. Here is the generated code for the following function:\n\nfunc rangeloop() (t byte) {\n      var slice []byte\n\tfor _, b := range slice {\n\t\tt ^= b\n\t}\n\treturn\n}\n\n\nBefore\n--- prog list \"rangeloop\" ---\n0000 (range.go:3) TEXT    rangeloop+0(SB),$16-8\n0001 (range.go:3) MOVQ    $0,R8\n0002 (range.go:3) MOVB    R8,t+0(FP)\n0003 (range.go:4) MOVQ    $0,DX\n0004 (range.go:4) MOVL    $0,CX\n0005 (range.go:4) MOVL    $0,AX\n0006 (range.go:5) MOVQ    DX,autotmp_0000+-16(SP)\n0007 (range.go:5) MOVL    CX,autotmp_0000+-8(SP)\n0008 (range.go:5) MOVL    AX,autotmp_0000+-4(SP)\n0009 (range.go:5) MOVL    autotmp_0000+-8(SP),DI\n0010 (range.go:5) LEAQ    autotmp_0000+-16(SP),BX\n0011 (range.go:5) MOVQ    (BX),CX\n0012 (range.go:5) JMP     ,14\n0013 (range.go:5) INCL    ,AX\n0014 (range.go:5) CMPL    AX,DI\n0015 (range.go:5) JGE     $0,23\n0016 (range.go:5) MOVBQZX (CX),BP\n0017 (range.go:5) MOVQ    $1,BX\n0018 (range.go:5) ADDQ    CX,BX\n0019 (range.go:5) MOVQ    BX,CX\n0020 (range.go:6) XORQ    BP,R8\n0021 (range.go:6) MOVB    R8,t+0(FP)\n0022 (range.go:5) JMP     ,13\n0023 (range.go:8) RET     ,\n\nAfter (note that the function doesn't split stack anymore)\n--- prog list \"rangeloop\" ---\n0000 (range.go:3) TEXT    rangeloop+0(SB),$0-8\n0001 (range.go:3) MOVQ    $0,R8\n0002 (range.go:3) MOVB    R8,t+0(FP)\n0003 (range.go:4) MOVQ    $0,CX\n0004 (range.go:4) MOVL    $0,DI\n0005 (range.go:4) MOVL    $0,AX\n0006 (range.go:5) JMP     ,8\n0007 (range.go:5) INCL    ,AX\n0008 (range.go:5) CMPL    AX,DI\n0009 (range.go:5) JGE     $0,17\n0010 (range.go:5) MOVBQZX (CX),BP\n0011 (range.go:5) MOVQ    $1,BX\n0012 (range.go:5) ADDQ    CX,BX\n0013 (range.go:5) MOVQ    BX,CX\n0014 (range.go:6) XORQ    BP,R8\n0015 (range.go:6) MOVB    R8,t+0(FP)\n0016 (range.go:5) JMP     ,7\n0017 (range.go:8) RET     ,",
			"disapproval": false,
			"date": "2012-09-01 18:51:05.286340",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=a76067712fe9 ***\n\ncmd/6g: avoid taking the address of slices unnecessarily.\n\nThe main case where it happens is when evaluating &s[i] without\nbounds checking, which usually happens during range loops (i=0).\n\nThis allows registerization of the corresponding variables,\nsaving 16 bytes of stack frame for each such range loop and a\nLEAQ instruction.\n\nR=golang-dev, rsc, dave\nCC=golang-dev, remy\nhttp://codereview.appspot.com/6497073",
			"disapproval": false,
			"date": "2012-09-07 04:54:47.891720",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Removing LEAQ instructions is justification enough: you don't need a\r\nmeasurement to back it up. :-)\r\n\r\nIs it possible to use igen always? It seems like this is the same code\r\nthat would be used for something like\r\n\r\nfor i := 0; i < len(x); i++ {\r\n    use(x[i])\r\n}\r\n\r\nand we should be able to eliminate that LEAQ too.\r\n\r\nThanks.\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-09-01 19:55:10.461830",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-09-07 02:05:19.468530",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I will try that. In my previous comment I say the patch is experimental because I can't seem to be able to say what igen actually does, the comment on the function is a bit misleading.",
			"disapproval": false,
			"date": "2012-09-01 20:09:24.909730",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Sep 1, 2012 at 4:09 PM,  <remyoudompheng@gmail.com> wrote:\r\n> I will try that. In my previous comment I say the patch is experimental\r\n> because I can't seem to be able to say what igen actually does, the\r\n> comment on the function is a bit misleading.\r\n\r\nIndeed, the comment is incomplete. Let me try to explain in different words.\r\n\r\nagen(n, res) generates code equivalent to res = &n. The caller can\r\nthen indirect res to get at pieces of n. Unfortunately, this & turns\r\ninto an LEAQ, which makes the registerizer give up keeping n in\r\nregisters. The 'a' stands for 'address of', as in 'generate address\r\nof'.\r\n\r\nigen(n, a, res) is equivalent to agen(n, res) followed by setting a to\r\nbe the node for *res. The caller can adjust the offset of a to get at\r\npieces of n. The 'i' stands for 'indirect', as in 'generate indirect\r\nof address of'. There is an important optimization, though: if n is\r\nalready an indirect of a register, either explicitly or because it is\r\na local variable kept on the stack, then igen does not bother using\r\nagen and its optimization-disabling LEAQ. Instead, igen just sets *a =\r\n*n.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-09-01 23:06:34.247860",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-01 23:53:37.504970",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 6497073: cmd/6g: avoid taking the address of slices unnecessarily.",
	"created": "2012-09-01 18:48:30.527630",
	"patchsets": [
		1,
		1002,
		4001,
		10002,
		4002
	],
	"modified": "2012-09-09 08:05:35.571040",
	"closed": true,
	"issue": 6497073
}