{
	"description": "runtime: fix mmap comments\nWe only pass lower 32 bits of file offset to asm routine.",
	"cc": [
		"r@golang.org",
		"dave@cheney.net",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Does it matter? I think we always pass 0 for that argument, and it\r\nseems to be working fine.\r\n",
			"disapproval": false,
			"date": "2012-09-16 16:09:37.877230",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What about mem_linux.c:map_fixed, offset is a uint32 there, and passed to runtime.mmap. I'm also concerned about arm, sys_linux_arm.s doesn't appear to use a 64bit argument for offset.",
			"disapproval": false,
			"date": "2012-09-16 15:14:54.822800",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-09-16 13:29:37.005840",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-09-16 13:37:45.374030",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Sep 17, 2012 at 12:17 AM, minux <minux.ma@gmail.com> wrote:\r\n>\r\n> i haven't encounter problems on FreeBSD/386 yet, but i think it's only by\r\n> chance (or it's 8c-dependent behavior) the higher 32-bit is also 0.\r\n> i do get problem when porting Go to FreeBSD/ARM, and the higher 32-bit\r\n> is always non-zero, causing the mmap to always fail.\r\n>\r\nrelevant kdump output for FreeBSD/ARM:\r\n  4330 5.out    CALL\r\n mmap(0x500000,0x30000000,0<PROT_NONE>,0x1002<MAP_PRIVATE|MAP_ANON>,0xffffffff,0,0x1ab10)\r\n  4330 5.out    RET   mmap -1 errno 22 Invalid argument\r\n\r\nso i think FreeBSD/386 and NetBSD/386 is working correctly only because\r\n8c always put a zero following the last argument. But if somehow this\r\ndoesn't\r\nhold in the future, mmap might fail like this.\r\n",
			"disapproval": false,
			"date": "2012-09-16 16:24:15.743750",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Sep 17, 2012 at 12:09 AM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> Does it matter? I think we always pass 0 for that argument, and it\r\n> seems to be working fine.\r\n>\r\nAt least on FreeBSD and NetBSD, that argument is of type off_t, which is\r\nan alias for int64_t.\r\n\r\ni haven't encounter problems on FreeBSD/386 yet, but i think it's only by\r\nchance (or it's 8c-dependent behavior) the higher 32-bit is also 0.\r\ni do get problem when porting Go to FreeBSD/ARM, and the higher 32-bit\r\nis always non-zero, causing the mmap to always fail.\r\n\r\nfor the record, Linux's mmap2's last argument is typed long, so if we want\r\nto correct it, we need to move the definition to os_$GOOS.h.\r\n",
			"disapproval": false,
			"date": "2012-09-16 16:17:25.664510",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Monday, September 17, 2012, minux wrote:\r\n>\r\n> On Mon, Sep 17, 2012 at 12:17 AM, minux <minux.ma@gmail.com<javascript:_e({}, 'cvml', 'minux.ma@gmail.com');>\r\n> > wrote:\r\n>>\r\n>> i haven't encounter problems on FreeBSD/386 yet, but i think it's only by\r\n>> chance (or it's 8c-dependent behavior) the higher 32-bit is also 0.\r\n>> i do get problem when porting Go to FreeBSD/ARM, and the higher 32-bit\r\n>> is always non-zero, causing the mmap to always fail.\r\n>>\r\n> relevant kdump output for FreeBSD/ARM:\r\n>   4330 5.out    CALL\r\n>  mmap(0x500000,0x30000000,0<PROT_NONE>,0x1002<MAP_PRIVATE|MAP_ANON>,0xffffffff,0,0x1ab10)\r\n>   4330 5.out    RET   mmap -1 errno 22 Invalid argument\r\n>\r\n> so i think FreeBSD/386 and NetBSD/386 is working correctly only because\r\n> 8c always put a zero following the last argument. But if somehow this\r\n> doesn't\r\n> hold in the future, mmap might fail like this.\r\n>\r\nOk, I know what's happening.\r\nWe supply the top 32 bits in platform specific runtime.mmap, I will fix\r\ncomment in sys_*bsd_386.s\r\nInstead. Should we add a comment explaining this in runtime.h?\r\n",
			"disapproval": false,
			"date": "2012-09-16 19:39:35.767530",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sure, comments to avoid future confusion are always welcome.\r\n",
			"disapproval": false,
			"date": "2012-09-17 18:35:07.084450",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/17 18:35:07, rsc wrote:\n> Sure, comments to avoid future confusion are always welcome.\nPTAL.",
			"disapproval": false,
			"date": "2012-09-19 11:44:13.266650",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"r@golang.org",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-09-20 18:50:58.921660",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"r@golang.org",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=90c9121e26c3 ***\n\nruntime: fix mmap comments\nWe only pass lower 32 bits of file offset to asm routine.\n\nR=r, dave, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6499118",
			"disapproval": false,
			"date": "2012-09-21 05:50:17.171630",
			"approval": false
		}
	],
	"owner_email": "minux.ma@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "minux",
	"subject": "code review 6499118: runtime: fix mmap comments",
	"created": "2012-09-16 12:53:33.793900",
	"patchsets": [
		1,
		2001,
		2002,
		10001,
		13001,
		16001,
		20001
	],
	"modified": "2012-09-21 05:50:20.717310",
	"closed": true,
	"issue": 6499118
}