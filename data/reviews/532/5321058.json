{
	"description": "spec: define that initialization is sequential\n\nThis is true of the existing implementations, and I think\nit is an important property to guarantee.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@google.com",
		"borman@google.com"
	],
	"reviewers": [
		"r@golang.org"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-27 01:14:24.404534",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "they will run concurrently if you call them directly. it would be\nfolly to do so, but that unqualified \"never\" is too bold. also the\ngrammar is convoluted.\n\n\nAn <code>init</code> function may launch other goroutines, which can run\nconcurrently with the initialization code. However, initialization\nalways sequences\nthe <code>init</code> functions: it will not start the next\n<code>init</code> until\nthe previous one has returned.\n",
			"disapproval": false,
			"date": "2011-10-27 01:53:59.745555",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"borman@google.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-10-28 15:09:59.947035",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Oct 26, 2011 at 18:53, Rob 'Commander' Pike <r@google.com> wrote:\n> they will run concurrently if you call them directly. it would be\n> folly to do so, but that unqualified \"never\" is too bold.\n\nit is impossible to call an init function directly.\n",
			"disapproval": false,
			"date": "2011-10-27 01:58:40.595820",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"borman@google.com",
				"r@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=3f70682b9214 ***\n\nspec: define that initialization is sequential\n\nThis is true of the existing implementations, and I think\nit is an important property to guarantee.\n\nR=golang-dev, r, borman, r\nCC=golang-dev\nhttp://codereview.appspot.com/5321058",
			"disapproval": false,
			"date": "2011-10-27 19:22:54.515989",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Oct 26, 2011 at 19:13, Paul Borman <borman@google.com> wrote:\n> recursive inits? \u00a0(sorry, I could not help myself :-)\n\ni don't know what this means\n",
			"disapproval": false,
			"date": "2011-10-27 02:37:06.822164",
			"approval": false
		},
		{
			"sender": "borman@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "recursive inits?  (sorry, I could not help myself :-)\n\nOn Wed, Oct 26, 2011 at 6:58 PM, Russ Cox <rsc@golang.org> wrote:\n\n> On Wed, Oct 26, 2011 at 18:53, Rob 'Commander' Pike <r@google.com> wrote:\n> > they will run concurrently if you call them directly. it would be\n> > folly to do so, but that unqualified \"never\" is too bold.\n>\n> it is impossible to call an init function directly.\n>\n",
			"disapproval": false,
			"date": "2011-10-27 02:13:32.856127",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "right. forgot that detail.\n\ni still prefer my version; it's clearer than statements about concurrency.\n\n-rob\n",
			"disapproval": false,
			"date": "2011-10-27 03:07:34.455290",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "PTAL.  I kept the first sentence to make clear that one\npackage init happens at a time.\n\nPackage initialization\u2014variable initialization and the invocation of\ninit functions\u2014happens in a single goroutine, sequentially, one\npackage at a time. An init function may launch other goroutines, which\ncan run concurrently with the initialization code. However,\ninitialization always sequences the init functions: it will not start\nthe next init until the previous one has returned.\n",
			"disapproval": false,
			"date": "2011-10-27 14:43:39.178072",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@google.com",
				"borman@google.com",
				"r@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-10-27 15:50:38.059228",
			"approval": true
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5321058: spec: define that initialization is sequential",
	"created": "2011-10-27 01:13:31.582502",
	"patchsets": [
		1,
		1001,
		4001,
		9001,
		9002
	],
	"modified": "2011-10-28 15:10:00.023279",
	"closed": true,
	"issue": 5321058
}