{
	"description": "runtime: add nanotime for Plan 9",
	"cc": [
		"paulzhol@gmail.com",
		"rsc@golang.org",
		"dave@cheney.net",
		"rminnich@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Please do not use the RDTSC instruction as a proxy for gettimeofday. It will not work in a multi core world. \n\nSent from my iPhone\n\nOn 03/11/2011, at 20:22, Anthony Martin <ality@pbrane.org> wrote:\n\n> paulzhol@gmail.com once said:\n>> Is it a good idea to replicate syscall.Gettimeofday\n>> and syscall.DecodeBintime in C ? Also I couldn't find\n>> any users for runtime.gettime.\n> \n> src/pkg/runtime/runtime.c:/nanotime is the only\n> function that calls gettime.  Nanotime is used\n> for the GC stats and Russ has a pending CL that\n> changes time.Nanosleep to use runtime\u00b7nanotime\n> directly.  My plan is to remove Gettimeofday\n> from the syscall package after that CL goes in.\n> \n> \n>> Maybe you could use Tos.clock or Tos.pcycles (by\n>> declaring 'extern Tos *_tos;' runtime/plan9/thread.c\n>> already uses it to read it's pid).\n> \n> Neither of those will work but I could probably\n> use tos.cyclefreq in combination with the RDTSC\n> instruction although I would need some way of\n> getting the epoch offset.  Thoughts?\n> \n> Thanks,\n>  Anthony\n",
			"disapproval": false,
			"date": "2011-11-03 10:06:01.643397",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"paulzhol@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello paulzhol@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2011-11-03 00:40:59.621522",
			"approval": false
		},
		{
			"sender": "paulzhol@gmail.com",
			"recipients": [
				"ality@pbrane.org",
				"paulzhol@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Is it a good idea to replicate syscall.Gettimeofday and syscall.DecodeBintime in C ? Also I couldn't find any users for runtime.gettime.\n\nMaybe you could use Tos.clock or Tos.pcycles (by declaring 'extern Tos *_tos;' runtime/plan9/thread.c already uses it to read it's pid).",
			"disapproval": false,
			"date": "2011-11-03 08:26:39.194133",
			"approval": false
		},
		{
			"sender": "paulzhol@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Nov 3, 2011 at 11:22 AM, Anthony Martin <ality@pbrane.org> wrote:\n> Neither of those will work but I could probably\n> use tos.cyclefreq in combination with the RDTSC\n> instruction although I would need some way of\n> getting the epoch offset. \u00a0Thoughts?\n\nWindows' gettime uses QueryPerformanceCounter (I'm not sure, but it is\nsounds like the equiv. to RDTSC) without calculating epoch, only for\ndelta as hector noted.\nCan't we do the same with tos->pcycles and ask Russ to move Nanotime\nto syscall ?\n\nHow frequent runtime.gc gets invoked ? Maybe you could cache the file\ndescriptor of /dev/bintime to save the open syscall - it was on my\nTODO for syscall.Gettimeofday.\n\nPavel\n",
			"disapproval": false,
			"date": "2011-11-03 13:26:22.998808",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Nov 3, 2011 at 09:26, Pavel Zholkover <paulzhol@gmail.com> wrote:\n> How frequent runtime.gc gets invoked ? Maybe you could cache the file\n> descriptor of /dev/bintime to save the open syscall - it was on my\n> TODO for syscall.Gettimeofday.\n\nI plan to use this as the implementation of time.Nanoseconds.\nIt needs to be correct.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-03 13:36:36.680772",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"paulzhol@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"rminnich@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello paulzhol@gmail.com, rsc@golang.org, dave@cheney.net, rminnich@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-03 22:52:42.711198",
			"approval": false
		},
		{
			"sender": "paulzhol@gmail.com",
			"recipients": [
				"ality@pbrane.org",
				"paulzhol@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"rminnich@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-11-04 11:00:56.221582",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"ality@pbrane.org",
				"paulzhol@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"rminnich@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Looks great except for needing the cache.\nWithout the cache nanotime is too expensive\nto give a reliable answer.\n\nThanks for cleaning this up.\nRuss\n\nhttp://codereview.appspot.com/5327063/diff/7002/src/pkg/runtime/plan9/thread.c\nFile src/pkg/runtime/plan9/thread.c (right):\n\nhttp://codereview.appspot.com/5327063/diff/7002/src/pkg/runtime/plan9/thread.c#newcode79\nsrc/pkg/runtime/plan9/thread.c:79: fd = runtime\u00b7open((byte*)\"/dev/bintime\", OREAD|OCEXEC);\nThis definitely needs to be cached.  If you throw a static int32 fd and a static Lock here, it should be fine.  The OCEXEC avoids hurting fork+exec.",
			"disapproval": false,
			"date": "2011-11-07 16:35:51.920570",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"ality@pbrane.org",
				"paulzhol@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"rminnich@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5327063/diff/22001/src/pkg/runtime/plan9/thread.c\nFile src/pkg/runtime/plan9/thread.c (right):\n\nhttp://codereview.appspot.com/5327063/diff/22001/src/pkg/runtime/plan9/thread.c#newcode91\nsrc/pkg/runtime/plan9/thread.c:91: // TODO(ality): fast, accurate clocks on Plan 9 or Nix\nI don't understand the TODO.  /dev/bintime is fast and accurate.",
			"disapproval": false,
			"date": "2011-11-08 20:54:58.656303",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"ality@pbrane.org",
				"paulzhol@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"rminnich@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5327063/diff/15001/src/pkg/runtime/plan9/386/sys.s\nFile src/pkg/runtime/plan9/386/sys.s (right):\n\nhttp://codereview.appspot.com/5327063/diff/15001/src/pkg/runtime/plan9/386/sys.s#newcode91\nsrc/pkg/runtime/plan9/386/sys.s:91: // BUG(ality): vx32 doesn't decode PUSHA\nIf you'd like to make this vx32-friendly, the only\nregister that needs saving is SI, so you could use\n\nPUSHL SI\nCALL emptyfunc\nPOPL SI\n\nhttp://codereview.appspot.com/5327063/diff/15001/src/pkg/runtime/plan9/thread.c\nFile src/pkg/runtime/plan9/thread.c (right):\n\nhttp://codereview.appspot.com/5327063/diff/15001/src/pkg/runtime/plan9/thread.c#newcode88\nsrc/pkg/runtime/plan9/thread.c:88: runtime\u00b7lock(&lk);\nI wouldn't even bother with the lock, honestly.\nIf the file gets opened twice it is not a big deal.\nThe lock is not worth the cost.\nAlso I wouldn't bother trying to reopen the fd.\nif pread fails, return 0.",
			"disapproval": false,
			"date": "2011-11-08 20:20:52.299181",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"paulzhol@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"rminnich@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello paulzhol@gmail.com, rsc@golang.org, dave@cheney.net, rminnich@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-08 20:53:31.165989",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"paulzhol@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"rminnich@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello paulzhol@gmail.com, rsc@golang.org, dave@cheney.net, rminnich@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-08 10:43:51.113421",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"ality@pbrane.org",
				"paulzhol@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"rminnich@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nIs the ten microseconds on a real machine or on vx32?",
			"disapproval": false,
			"date": "2011-11-18 02:47:22.089538",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"ality@pbrane.org",
				"paulzhol@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"rminnich@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=1e6716ac9305 ***",
			"disapproval": false,
			"date": "2011-11-18 03:09:36.529925",
			"approval": false
		}
	],
	"owner_email": "ality@pbrane.org",
	"private": false,
	"base_url": "",
	"owner": "ality",
	"subject": "code review 5327063: runtime: add nanotime for Plan 9",
	"created": "2011-11-03 00:40:28.230701",
	"patchsets": [
		1,
		2001,
		4001,
		7002,
		15001,
		22001,
		23001,
		23002
	],
	"modified": "2011-11-18 03:23:32.495609",
	"closed": true,
	"issue": 5327063
}