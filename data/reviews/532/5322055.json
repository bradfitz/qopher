{
	"description": "exp/ssh: alter Session to match the exec.Cmd API\n\nThis CL inverts the direction of the Stdin/out/err members of the\nSession struct so they reflect the API of the exec.Cmd. In doing so\nit borrows heavily from the exec package.\n\nAdditionally Shell now returns immediately, wait for completion using\nWait. Exec calls Wait internally and so blocks until the remote\ncommand is complete.\n\nCredit to Gustavo Niemeyer for the impetus for this CL.",
	"cc": [
		"rsc@golang.org",
		"agl@golang.org",
		"n13m3y3r@gmail.com",
		"huin@google.com",
		"bradfitz@golang.org",
		"cw@f00f.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "huin@google.com",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"n13m3y3r@gmail.com",
				"huin@google.com",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5322055/diff/6001/src/pkg/exp/ssh/session.go\nFile src/pkg/exp/ssh/session.go (right):\n\nhttp://codereview.appspot.com/5322055/diff/6001/src/pkg/exp/ssh/session.go#newcode181\nsrc/pkg/exp/ssh/session.go:181: func (s *Session) stdin() error {\nstdin, stdout and stderr methods don't seem to use their error return value for any error case.\n\nI would suggest at least removing the return value, or maybe replacing it to return the closure instead and perform the s.goroutine/copyFunc append in the calling code to remove some redundant code.",
			"disapproval": false,
			"date": "2011-11-14 13:35:03.916927",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"n13m3y3r@gmail.com",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"huin@google.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5322055/diff/6001/src/pkg/exp/ssh/session.go\nFile src/pkg/exp/ssh/session.go (right):\n\nhttp://codereview.appspot.com/5322055/diff/6001/src/pkg/exp/ssh/session.go#newcode37\nsrc/pkg/exp/ssh/session.go:37: goroutine []func() error\nplural name (i.e. goroutines) ?\n\nLater: also, they aren't actually goroutines, since goroutines aren't first-class objects in Go. \"copyFuncs\" ?\n\nhttp://codereview.appspot.com/5322055/diff/6001/src/pkg/exp/ssh/session.go#newcode124\nsrc/pkg/exp/ssh/session.go:124: for _, setupFd := range []F{(*Session).stdin, (*Session).stdout, (*Session).stderr} {\ndon't really mind either way. But, unless the number of element of this slice are expected to grow, it seems that just calling the three functions is easier.\n\nhttp://codereview.appspot.com/5322055/diff/6001/src/pkg/exp/ssh/session.go#newcode142\nsrc/pkg/exp/ssh/session.go:142: return errors.New(\"session has not started\")\nI've probably been generally amiss in not catching this, but it's often helpful if error messages start with the package name, i.e. \"ssh: session not started\".\n\nThis might be cleanup for a later CL.\n\nhttp://codereview.appspot.com/5322055/diff/6001/src/pkg/exp/ssh/session.go#newcode144\nsrc/pkg/exp/ssh/session.go:144: err := s.wait()\ns/err/waitErr/ to avoid confusing it with the scoped \"err\" in the for loop?\n\nhttp://codereview.appspot.com/5322055/diff/6001/src/pkg/exp/ssh/session.go#newcode170\nsrc/pkg/exp/ssh/session.go:170: return fmt.Errorf(\"remote process exited with %d\", status)\nfor a simple %d, strconv is a lot lighter.\n\nhttp://codereview.appspot.com/5322055/diff/6001/src/pkg/exp/ssh/session.go#newcode174\nsrc/pkg/exp/ssh/session.go:174: return fmt.Errorf(\"%v\", msg.RequestSpecificData)\nTODO: make a more readable error message.",
			"disapproval": false,
			"date": "2011-11-13 17:04:48.206992",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"n13m3y3r@gmail.com",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"huin@google.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, agl@golang.org, n13m3y3r@gmail.com (cc: cw@f00f.org, golang-dev@googlegroups.com, huin@google.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-13 00:04:30.564778",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"n13m3y3r@gmail.com",
				"huin@google.com",
				"bradfitz@golang.org",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for your comments Russ. Leaving for bradfitz.\n\nhttp://codereview.appspot.com/5322055/diff/9003/src/pkg/exp/ssh/session.go\nFile src/pkg/exp/ssh/session.go (right):\n\nhttp://codereview.appspot.com/5322055/diff/9003/src/pkg/exp/ssh/session.go#newcode43\nsrc/pkg/exp/ssh/session.go:43: type setenvRequest struct {\nOn 2011/11/18 23:47:21, rsc wrote:\n> These are important enough to go at top level.\n\nDone.\n\nhttp://codereview.appspot.com/5322055/diff/9003/src/pkg/exp/ssh/session.go#newcode64\nsrc/pkg/exp/ssh/session.go:64: type ptyRequest struct {\nOn 2011/11/18 23:47:21, rsc wrote:\n> Same.\n\nDone.\n\nhttp://codereview.appspot.com/5322055/diff/9003/src/pkg/exp/ssh/session.go#newcode100\nsrc/pkg/exp/ssh/session.go:100: if err := s.sendChanReq(channelRequestMsg{\nOn 2011/11/18 23:47:21, rsc wrote:\n> Please declare err before the if.\n> \n> err := ...\n> if err != nil {\n> \n> The fact that you're even in an if is easy to forget after 5 lines.\n> \n\nDone.\n\nhttp://codereview.appspot.com/5322055/diff/9003/src/pkg/exp/ssh/session.go#newcode120\nsrc/pkg/exp/ssh/session.go:120: if err := s.sendChanReq(channelRequestMsg{\nOn 2011/11/18 23:47:21, rsc wrote:\n> Same.\n\nDone.",
			"disapproval": false,
			"date": "2011-11-18 23:57:36.932272",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"n13m3y3r@gmail.com",
				"huin@google.com",
				"bradfitz@golang.org",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for your comments Brad.\n\nhttp://codereview.appspot.com/5322055/diff/13004/src/pkg/exp/ssh/client.go\nFile src/pkg/exp/ssh/client.go (right):\n\nhttp://codereview.appspot.com/5322055/diff/13004/src/pkg/exp/ssh/client.go#newcode345\nsrc/pkg/exp/ssh/client.go:345: func (c *clientChan) sendChanReq(req interface{}) error {\nYeah, that is a bit gross. I have moved sendChanReq into \nthe methods on session.go as it was the only consumer.\n\nOn 2011/11/19 16:53:04, bradfitz wrote:\n> if you're going to use interface{} for the union of either type A or type B, at\n> least document in a little comment what A and B are?\n\nhttp://codereview.appspot.com/5322055/diff/13004/src/pkg/exp/ssh/session.go\nFile src/pkg/exp/ssh/session.go (right):\n\nhttp://codereview.appspot.com/5322055/diff/13004/src/pkg/exp/ssh/session.go#newcode24\nsrc/pkg/exp/ssh/session.go:24: // Stdout and Stderr specify the remote process's standard output and error.\nOn 2011/11/19 16:53:04, bradfitz wrote:\n> over 80 columns, *shrug*\n\nDone.\n\nhttp://codereview.appspot.com/5322055/diff/13004/src/pkg/exp/ssh/session.go#newcode31\nsrc/pkg/exp/ssh/session.go:31: Stderr io.Writer\nCurrently this is not supported, but shouldn't be hard to add, following the example in the exec package. I think from the point of view of the remote command, stdout and stderr would always be independent fd's. Data to each would not comingle on the wire.\n\nOn 2011/11/19 16:53:04, bradfitz wrote:\n> does this have the same property of exec where you can set Stderr and Stdout to\n> the same instance to merge their streams?  I don't know how the ssh protocol\n> works and whether it'd permit pushing down that info to make them share the same\n> fd.",
			"disapproval": false,
			"date": "2011-11-20 04:25:45.336780",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"n13m3y3r@gmail.com",
				"huin@google.com",
				"bradfitz@golang.org",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, agl@golang.org, n13m3y3r@gmail.com, huin@google.com, bradfitz@golang.org (cc: cw@f00f.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-18 23:57:19.452936",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"n13m3y3r@gmail.com",
				"huin@google.com",
				"bradfitz@golang.org",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5322055/diff/13004/src/pkg/exp/ssh/client.go\nFile src/pkg/exp/ssh/client.go (right):\n\nhttp://codereview.appspot.com/5322055/diff/13004/src/pkg/exp/ssh/client.go#newcode345\nsrc/pkg/exp/ssh/client.go:345: func (c *clientChan) sendChanReq(req interface{}) error {\nif you're going to use interface{} for the union of either type A or type B, at least document in a little comment what A and B are?\n\nhttp://codereview.appspot.com/5322055/diff/13004/src/pkg/exp/ssh/session.go\nFile src/pkg/exp/ssh/session.go (right):\n\nhttp://codereview.appspot.com/5322055/diff/13004/src/pkg/exp/ssh/session.go#newcode24\nsrc/pkg/exp/ssh/session.go:24: // Stdout and Stderr specify the remote process's standard output and error.\nover 80 columns, *shrug*\n\nhttp://codereview.appspot.com/5322055/diff/13004/src/pkg/exp/ssh/session.go#newcode31\nsrc/pkg/exp/ssh/session.go:31: Stderr io.Writer\ndoes this have the same property of exec where you can set Stderr and Stdout to the same instance to merge their streams?  I don't know how the ssh protocol works and whether it'd permit pushing down that info to make them share the same fd.",
			"disapproval": false,
			"date": "2011-11-19 16:53:04.722911",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"n13m3y3r@gmail.com",
				"huin@google.com",
				"bradfitz@golang.org",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5322055/diff/8007/src/pkg/exp/ssh/session.go\nFile src/pkg/exp/ssh/session.go (right):\n\nhttp://codereview.appspot.com/5322055/diff/8007/src/pkg/exp/ssh/session.go#newcode31\nsrc/pkg/exp/ssh/session.go:31: // If either blocks it may eventually  cause the remote\nextra space\n\nhttp://codereview.appspot.com/5322055/diff/8007/src/pkg/exp/ssh/session.go#newcode128\nsrc/pkg/exp/ssh/session.go:128: return fmt.Errorf(\"ssh: could not execute command %s: %s\", cmd, err)\n%v for err (just a convention)\n\nhttp://codereview.appspot.com/5322055/diff/8007/src/pkg/exp/ssh/session.go#newcode151\nsrc/pkg/exp/ssh/session.go:151: return fmt.Errorf(\"ssh: cound not execute shell: %s\", err)\n%v\n\nhttp://codereview.appspot.com/5322055/diff/8007/src/pkg/exp/ssh/session.go#newcode164\nsrc/pkg/exp/ssh/session.go:164: return fmt.Errorf(\"unknown packet received: %v\", msg)\n%v won't include the type name, which could be useful here.  I'd do:\n\n\"unknown packet %T received: %v\", msg, msg\n\nhttp://codereview.appspot.com/5322055/diff/8007/src/pkg/exp/ssh/session.go#newcode227\nsrc/pkg/exp/ssh/session.go:227: return fmt.Errorf(\"wait: unexpected packet: %#v\", msg)\nhere you use %#v instead of %v (the former does include the type name, so maybe you should just use %#v in both places and then you don't need %T above)",
			"disapproval": false,
			"date": "2011-11-20 04:56:06.589330",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"n13m3y3r@gmail.com",
				"huin@google.com",
				"bradfitz@golang.org",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, agl@golang.org, n13m3y3r@gmail.com, huin@google.com, bradfitz@golang.org (cc: cw@f00f.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-20 04:26:05.996527",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"n13m3y3r@gmail.com",
				"huin@google.com",
				"bradfitz@golang.org",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for your quick feedback Brad. PTAL.\n\nhttp://codereview.appspot.com/5322055/diff/8007/src/pkg/exp/ssh/session.go\nFile src/pkg/exp/ssh/session.go (right):\n\nhttp://codereview.appspot.com/5322055/diff/8007/src/pkg/exp/ssh/session.go#newcode31\nsrc/pkg/exp/ssh/session.go:31: // If either blocks it may eventually  cause the remote\nOn 2011/11/20 04:56:06, bradfitz wrote:\n> extra space\n\nDone.\n\nhttp://codereview.appspot.com/5322055/diff/8007/src/pkg/exp/ssh/session.go#newcode128\nsrc/pkg/exp/ssh/session.go:128: return fmt.Errorf(\"ssh: could not execute command %s: %s\", cmd, err)\nOn 2011/11/20 04:56:06, bradfitz wrote:\n> %v for err (just a convention)\n\nDone.\n\nhttp://codereview.appspot.com/5322055/diff/8007/src/pkg/exp/ssh/session.go#newcode151\nsrc/pkg/exp/ssh/session.go:151: return fmt.Errorf(\"ssh: cound not execute shell: %s\", err)\nOn 2011/11/20 04:56:06, bradfitz wrote:\n> %v\n\nDone.\n\nhttp://codereview.appspot.com/5322055/diff/8007/src/pkg/exp/ssh/session.go#newcode164\nsrc/pkg/exp/ssh/session.go:164: return fmt.Errorf(\"unknown packet received: %v\", msg)\nNice, I didn't know that one, I've used %#v in the past.\n\nOn 2011/11/20 04:56:06, bradfitz wrote:\n> %v won't include the type name, which could be useful here.  I'd do:\n> \n> \"unknown packet %T received: %v\", msg, msg\n\nhttp://codereview.appspot.com/5322055/diff/8007/src/pkg/exp/ssh/session.go#newcode227\nsrc/pkg/exp/ssh/session.go:227: return fmt.Errorf(\"wait: unexpected packet: %#v\", msg)\nMoved to %T\n\nOn 2011/11/20 04:56:06, bradfitz wrote:\n> here you use %#v instead of %v (the former does include the type name, so maybe\n> you should just use %#v in both places and then you don't need %T above)",
			"disapproval": false,
			"date": "2011-11-20 05:15:59.438562",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOn Sun, Nov 20, 2011 at 12:15 AM, <dave@cheney.net> wrote:\n\n> Thanks for your quick feedback Brad. PTAL.\n>\n>\n>\n> http://codereview.appspot.com/**5322055/diff/8007/src/pkg/exp/**\n> ssh/session.go<http://codereview.appspot.com/5322055/diff/8007/src/pkg/exp/ssh/session.go>\n> File src/pkg/exp/ssh/session.go (right):\n>\n> http://codereview.appspot.com/**5322055/diff/8007/src/pkg/exp/**\n> ssh/session.go#newcode31<http://codereview.appspot.com/5322055/diff/8007/src/pkg/exp/ssh/session.go#newcode31>\n> src/pkg/exp/ssh/session.go:31: // If either blocks it may eventually\n> cause the remote\n> On 2011/11/20 04:56:06, bradfitz wrote:\n>\n>> extra space\n>>\n>\n> Done.\n>\n>\n> http://codereview.appspot.com/**5322055/diff/8007/src/pkg/exp/**\n> ssh/session.go#newcode128<http://codereview.appspot.com/5322055/diff/8007/src/pkg/exp/ssh/session.go#newcode128>\n> src/pkg/exp/ssh/session.go:**128: return fmt.Errorf(\"ssh: could not\n> execute command %s: %s\", cmd, err)\n> On 2011/11/20 04:56:06, bradfitz wrote:\n>\n>> %v for err (just a convention)\n>>\n>\n> Done.\n>\n>\n> http://codereview.appspot.com/**5322055/diff/8007/src/pkg/exp/**\n> ssh/session.go#newcode151<http://codereview.appspot.com/5322055/diff/8007/src/pkg/exp/ssh/session.go#newcode151>\n> src/pkg/exp/ssh/session.go:**151: return fmt.Errorf(\"ssh: cound not\n> execute shell: %s\", err)\n> On 2011/11/20 04:56:06, bradfitz wrote:\n>\n>> %v\n>>\n>\n> Done.\n>\n>\n> http://codereview.appspot.com/**5322055/diff/8007/src/pkg/exp/**\n> ssh/session.go#newcode164<http://codereview.appspot.com/5322055/diff/8007/src/pkg/exp/ssh/session.go#newcode164>\n> src/pkg/exp/ssh/session.go:**164: return fmt.Errorf(\"unknown packet\n> received: %v\", msg)\n> Nice, I didn't know that one, I've used %#v in the past.\n>\n>\n> On 2011/11/20 04:56:06, bradfitz wrote:\n>\n>> %v won't include the type name, which could be useful here.  I'd do:\n>>\n>\n>  \"unknown packet %T received: %v\", msg, msg\n>>\n>\n> http://codereview.appspot.com/**5322055/diff/8007/src/pkg/exp/**\n> ssh/session.go#newcode227<http://codereview.appspot.com/5322055/diff/8007/src/pkg/exp/ssh/session.go#newcode227>\n> src/pkg/exp/ssh/session.go:**227: return fmt.Errorf(\"wait: unexpected\n> packet: %#v\", msg)\n> Moved to %T\n>\n>\n> On 2011/11/20 04:56:06, bradfitz wrote:\n>\n>> here you use %#v instead of %v (the former does include the type name,\n>>\n> so maybe\n>\n>> you should just use %#v in both places and then you don't need %T\n>>\n> above)\n>\n> http://codereview.appspot.com/**5322055/<http://codereview.appspot.com/5322055/>\n>\n",
			"disapproval": false,
			"date": "2011-11-20 05:19:43.891857",
			"approval": true
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"n13m3y3r@gmail.com",
				"huin@google.com",
				"bradfitz@golang.org",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=cb2ec76f000f ***\n\nexp/ssh: alter Session to match the exec.Cmd API\n\nThis CL inverts the direction of the Stdin/out/err members of the\nSession struct so they reflect the API of the exec.Cmd. In doing so\nit borrows heavily from the exec package.\n\nAdditionally Shell now returns immediately, wait for completion using\nWait. Exec calls Wait internally and so blocks until the remote\ncommand is complete.\n\nCredit to Gustavo Niemeyer for the impetus for this CL.\n\nR=rsc, agl, n13m3y3r, huin, bradfitz\nCC=cw, golang-dev\nhttp://codereview.appspot.com/5322055\n\nCommitter: Adam Langley <agl@golang.org>",
			"disapproval": false,
			"date": "2011-11-20 16:47:08.864645",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"n13m3y3r@gmail.com",
				"huin@google.com",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, agl@golang.org, n13m3y3r@gmail.com, huin@google.com (cc: cw@f00f.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-18 22:55:25.437475",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"n13m3y3r@gmail.com",
				"huin@google.com",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5322055/diff/6001/src/pkg/exp/ssh/session.go\nFile src/pkg/exp/ssh/session.go (right):\n\nhttp://codereview.appspot.com/5322055/diff/6001/src/pkg/exp/ssh/session.go#newcode37\nsrc/pkg/exp/ssh/session.go:37: goroutine []func() error\nOn 2011/11/13 17:04:48, agl1 wrote:\n> plural name (i.e. goroutines) ?\n> \n> Later: also, they aren't actually goroutines, since goroutines aren't\n> first-class objects in Go. \"copyFuncs\" ?\n\nDone.\n\nhttp://codereview.appspot.com/5322055/diff/6001/src/pkg/exp/ssh/session.go#newcode124\nsrc/pkg/exp/ssh/session.go:124: for _, setupFd := range []F{(*Session).stdin, (*Session).stdout, (*Session).stderr} {\nThis code was copied from the exec package. I'd like to retain it, in the hope that in the future these two packages could share a common base.\n\nOn 2011/11/13 17:04:48, agl1 wrote:\n> don't really mind either way. But, unless the number of element of this slice\n> are expected to grow, it seems that just calling the three functions is easier.\n\nhttp://codereview.appspot.com/5322055/diff/6001/src/pkg/exp/ssh/session.go#newcode142\nsrc/pkg/exp/ssh/session.go:142: return errors.New(\"session has not started\")\nOn 2011/11/13 17:04:48, agl1 wrote:\n> I've probably been generally amiss in not catching this, but it's often helpful\n> if error messages start with the package name, i.e. \"ssh: session not started\".\n> \n> This might be cleanup for a later CL.\n\nDone.\n\nhttp://codereview.appspot.com/5322055/diff/6001/src/pkg/exp/ssh/session.go#newcode144\nsrc/pkg/exp/ssh/session.go:144: err := s.wait()\nOn 2011/11/13 17:04:48, agl1 wrote:\n> s/err/waitErr/ to avoid confusing it with the scoped \"err\" in the for loop?\n\nDone.\n\nhttp://codereview.appspot.com/5322055/diff/6001/src/pkg/exp/ssh/session.go#newcode170\nsrc/pkg/exp/ssh/session.go:170: return fmt.Errorf(\"remote process exited with %d\", status)\nI'd like to leave this for now and revision when a proper exit status is implemented.\n\nOn 2011/11/13 17:04:48, agl1 wrote:\n> for a simple %d, strconv is a lot lighter.\n\nhttp://codereview.appspot.com/5322055/diff/6001/src/pkg/exp/ssh/session.go#newcode174\nsrc/pkg/exp/ssh/session.go:174: return fmt.Errorf(\"%v\", msg.RequestSpecificData)\nOn 2011/11/13 17:04:48, agl1 wrote:\n> TODO: make a more readable error message.\n\nDone.\n\nhttp://codereview.appspot.com/5322055/diff/6001/src/pkg/exp/ssh/session.go#newcode181\nsrc/pkg/exp/ssh/session.go:181: func (s *Session) stdin() error {\nTrue, currently this code is a copy of the exec package, which could open /dev/null and so needed a way to pass back that error.\n\nI'd like to keep this code as close to exec package as possible for the moment in the hope that one day they may both share a common base.\n\nOn 2011/11/14 13:35:04, huin-google wrote:\n> stdin, stdout and stderr methods don't seem to use their error return value for\n> any error case.\n> \n> I would suggest at least removing the return value, or maybe replacing it to\n> return the closure instead and perform the s.goroutine/copyFunc append in the\n> calling code to remove some redundant code.",
			"disapproval": false,
			"date": "2011-11-18 22:55:54.841256",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"n13m3y3r@gmail.com",
				"huin@google.com",
				"bradfitz@golang.org",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, agl@golang.org, n13m3y3r@gmail.com, huin@google.com, bradfitz@golang.org (cc: cw@f00f.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-20 05:15:24.709355",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dave@cheney.net",
				"rsc@golang.org",
				"agl@golang.org",
				"n13m3y3r@gmail.com",
				"huin@google.com",
				"bradfitz@golang.org",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Seems reasonable.  Brad should look, as the author of exec.\n\nhttp://codereview.appspot.com/5322055/diff/9003/src/pkg/exp/ssh/session.go\nFile src/pkg/exp/ssh/session.go (right):\n\nhttp://codereview.appspot.com/5322055/diff/9003/src/pkg/exp/ssh/session.go#newcode43\nsrc/pkg/exp/ssh/session.go:43: type setenvRequest struct {\nThese are important enough to go at top level.\n\nhttp://codereview.appspot.com/5322055/diff/9003/src/pkg/exp/ssh/session.go#newcode64\nsrc/pkg/exp/ssh/session.go:64: type ptyRequest struct {\nSame.\n\nhttp://codereview.appspot.com/5322055/diff/9003/src/pkg/exp/ssh/session.go#newcode100\nsrc/pkg/exp/ssh/session.go:100: if err := s.sendChanReq(channelRequestMsg{\nPlease declare err before the if.\n\nerr := ...\nif err != nil {\n\nThe fact that you're even in an if is easy to forget after 5 lines.\n\nhttp://codereview.appspot.com/5322055/diff/9003/src/pkg/exp/ssh/session.go#newcode120\nsrc/pkg/exp/ssh/session.go:120: if err := s.sendChanReq(channelRequestMsg{\nSame.",
			"disapproval": false,
			"date": "2011-11-18 23:47:21.413586",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 5322055: exp/ssh: alter Session to match the exec.Cmd API",
	"created": "2011-10-30 11:22:48.508948",
	"patchsets": [
		1,
		2001,
		3001,
		6001,
		8002,
		11002,
		9003,
		13003,
		13004,
		11004,
		9006,
		8007,
		14012
	],
	"modified": "2011-11-24 00:25:27.195351",
	"closed": true,
	"issue": 5322055
}