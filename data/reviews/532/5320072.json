{
	"description": "snappy: error rename gofix.",
	"cc": [
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/snappy-go/",
			"disapproval": false,
			"date": "2011-11-03 22:49:07.844914",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 4 November 2011 09:53, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n> Do you plan to finish leveldb before Go 1? \u00a0(just curious. \u00a0LGTM either way)\n\nI'd like to, but it really depends on whether I can find the time to.\n",
			"disapproval": false,
			"date": "2011-11-03 23:00:12.934447",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as e4471433e554 ***\n\nsnappy: error rename gofix.\n\nR=bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5320072",
			"disapproval": false,
			"date": "2011-11-03 23:01:20.712378",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM, but sad that Camlistore is pinned at r60.3 for App Engine.\n\nDo you plan to finish leveldb before Go 1?  (just curious.  LGTM either way)\n\n\nOn Thu, Nov 3, 2011 at 3:49 PM, <nigeltao@golang.org> wrote:\n\n> Reviewers: bradfitz,\n>\n> Message:\n> Hello bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://code.google.com/p/**snappy-go/<https://code.google.com/p/snappy-go/>\n>\n>\n> Description:\n> snappy: error rename gofix.\n>\n> Please review this at http://codereview.appspot.com/**5320072/<http://codereview.appspot.com/5320072/>\n>\n> Affected files:\n>  M snappy/decode.go\n>  M snappy/encode.go\n>  M snappy/snappy_test.go\n>\n>\n> Index: snappy/decode.go\n> ==============================**==============================**=======\n> --- a/snappy/decode.go\n> +++ b/snappy/decode.go\n> @@ -5,29 +5,29 @@\n>  package snappy\n>\n>  import (\n> -       \"os\"\n> +       \"errors\"\n>\n>        \"snappy-go.googlecode.com/hg/**varint<http://snappy-go.googlecode.com/hg/varint>\n> \"\n>  )\n>\n>  // ErrCorrupt reports that the input is invalid.\n> -var ErrCorrupt = os.NewError(\"snappy: corrupt input\")\n> +var ErrCorrupt = errors.New(\"snappy: corrupt input\")\n>\n>  // DecodedLen returns the length of the decoded block.\n> -func DecodedLen(src []byte) (int, os.Error) {\n> +func DecodedLen(src []byte) (int, error) {\n>        v, _, err := decodedLen(src)\n>        return v, err\n>  }\n>\n>  // decodedLen returns the length of the decoded block and the number of\n> bytes\n>  // that the length header occupied.\n> -func decodedLen(src []byte) (blockLen, headerLen int, err os.Error) {\n> +func decodedLen(src []byte) (blockLen, headerLen int, err error) {\n>        v, n := varint.Decode(src)\n>        if n == 0 {\n>                return 0, 0, ErrCorrupt\n>        }\n>        if uint64(int(v)) != v {\n> -               return 0, 0, os.NewError(\"snappy: decoded block is too\n> large\")\n> +               return 0, 0, errors.New(\"snappy: decoded block is too\n> large\")\n>        }\n>        return int(v), n, nil\n>  }\n> @@ -36,7 +36,7 @@\n>  // slice of dst if dst was large enough to hold the entire decoded block.\n>  // Otherwise, a newly allocated slice will be returned.\n>  // It is valid to pass a nil dst.\n> -func Decode(dst, src []byte) ([]byte, os.Error) {\n> +func Decode(dst, src []byte) ([]byte, error) {\n>        dLen, s, err := decodedLen(src)\n>        if err != nil {\n>                return nil, err\n> @@ -80,7 +80,7 @@\n>                        }\n>                        length = int(x + 1)\n>                        if length <= 0 {\n> -                               return nil, os.NewError(\"snappy:\n> unsupported literal length\")\n> +                               return nil, errors.New(\"snappy:\n> unsupported literal length\")\n>                        }\n>                        if length > len(dst)-d || length > len(src)-s {\n>                                return nil, ErrCorrupt\n> @@ -107,7 +107,7 @@\n>                        offset = int(src[s-2]) | int(src[s-1])<<8\n>\n>                case tagCopy4:\n> -                       return nil, os.NewError(\"snappy: unsupported\n> COPY_4 tag\")\n> +                       return nil, errors.New(\"snappy: unsupported COPY_4\n> tag\")\n>                }\n>\n>                end := d + length\n> Index: snappy/encode.go\n> ==============================**==============================**=======\n> --- a/snappy/encode.go\n> +++ b/snappy/encode.go\n> @@ -5,8 +5,6 @@\n>  package snappy\n>\n>  import (\n> -       \"os\"\n> -\n>        \"snappy-go.googlecode.com/hg/**varint<http://snappy-go.googlecode.com/hg/varint>\n> \"\n>  )\n>\n> @@ -88,7 +86,7 @@\n>  // slice of dst if dst was large enough to hold the entire encoded block.\n>  // Otherwise, a newly allocated slice will be returned.\n>  // It is valid to pass a nil dst.\n> -func Encode(dst, src []byte) ([]byte, os.Error) {\n> +func Encode(dst, src []byte) ([]byte, error) {\n>        if n := MaxEncodedLen(len(src)); len(dst) < n {\n>                dst = make([]byte, n)\n>        }\n> Index: snappy/snappy_test.go\n> ==============================**==============================**=======\n> --- a/snappy/snappy_test.go\n> +++ b/snappy/snappy_test.go\n> @@ -8,13 +8,12 @@\n>        \"bytes\"\n>        \"fmt\"\n>        \"io/ioutil\"\n> -       \"os\"\n>        \"rand\"\n>        \"strings\"\n>        \"testing\"\n>  )\n>\n> -func roundtrip(b []byte) os.Error {\n> +func roundtrip(b []byte) error {\n>        e, err := Encode(nil, b)\n>        if err != nil {\n>                return fmt.Errorf(\"encoding error: %v\", err)\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-11-03 22:53:23.963466",
			"approval": true
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 5320072: snappy: error rename gofix.",
	"created": "2011-11-03 22:48:30.209240",
	"patchsets": [
		1,
		2001,
		4001,
		4
	],
	"modified": "2011-11-03 23:01:23.112002",
	"closed": true,
	"issue": 5320072
}