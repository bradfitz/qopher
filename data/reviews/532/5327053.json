{
	"description": "spec: update spacing to match gofmt, where reasonable.",
	"cc": [
		"gri@golang.org",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello gri (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-28 05:42:38.782366",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "You are going to have a lot of merging to do before gri gets to\nlooking at this CL.\n",
			"disapproval": false,
			"date": "2011-10-28 05:48:41.523017",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Fri, Oct 28, 2011 at 4:48 PM, Russ Cox <rsc@golang.org> wrote:\n\n> You are going to have a lot of merging to do before gri gets to\n> looking at this CL.\n\nThat's okay. It's almost completely mechanical.\n",
			"disapproval": false,
			"date": "2011-10-28 05:50:15.234101",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "much better. some glitches, and some suggestions where I would ignore consistency for a better visual and didactic effect\n\nhttp://codereview.appspot.com/5327053/diff/17002/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5327053/diff/17002/doc/go_spec.html#newcode484\ndoc/go_spec.html:484: \\n`  // same as \"\\\\n\\n\\\\n\"\nI would still align this one with the one above, even if gofmt doesn't do it - looks better in the spec (the comment is not really part of the code, it's additional explanations of the rules)\n\nhttp://codereview.appspot.com/5327053/diff/17002/doc/go_spec.html#newcode1567\ndoc/go_spec.html:1567: const zero = 0.0  // untyped floating-point constant\nI would prefer keeping this and the next comment aligned with the last two - they \"belong together\" as part of the explanation of the code. Not gofmt style, but gofmt is not perfect yet.\n\nhttp://codereview.appspot.com/5327053/diff/17002/doc/go_spec.html#newcode2334\ndoc/go_spec.html:2334: p.z  // (*p).z\nI would keep these aligned with the comments after the blank line - again for didactic reasons (they belong together)\n\nhttp://codereview.appspot.com/5327053/diff/17002/doc/go_spec.html#newcode3340\ndoc/go_spec.html:3340: string('a')   // \"a\"\nsame here - I would keep all comments aligned, with a minimal 2 blank separation\n\nhttp://codereview.appspot.com/5327053/diff/17002/doc/go_spec.html#newcode3936\ndoc/go_spec.html:3936: v := x // x is evaluated exactly once\n3936-3953: should also be 2 blanks before //\n\nhttp://codereview.appspot.com/5327053/diff/17002/doc/go_spec.html#newcode4138\ndoc/go_spec.html:4138: var val interface {} // value type of m is assignable to val\nditto\n\nhttp://codereview.appspot.com/5327053/diff/17002/doc/go_spec.html#newcode4233\ndoc/go_spec.html:4233: case i3, ok := (&lt;-c3): // same as: i3, ok := &lt;-c3\nditto\n\nhttp://codereview.appspot.com/5327053/diff/17002/doc/go_spec.html#newcode4243\ndoc/go_spec.html:4243: for { // send random sequence of bits to c\nditto\n\nhttp://codereview.appspot.com/5327053/diff/17002/doc/go_spec.html#newcode4245\ndoc/go_spec.html:4245: case c &lt;- 0: // note: no statement, no fallthrough, no folding of cases\nditto\n\nhttp://codereview.appspot.com/5327053/diff/17002/doc/go_spec.html#newcode4250\ndoc/go_spec.html:4250: select { } // block forever\nditto\n\nbtw., I think select {} is formatted just so (no blank between { and })\n\nhttp://codereview.appspot.com/5327053/diff/17002/doc/go_spec.html#newcode4408\ndoc/go_spec.html:4408: goto L // BAD\nditto\n\nhttp://codereview.appspot.com/5327053/diff/17002/doc/go_spec.html#newcode4483\ndoc/go_spec.html:4483: defer unlock(l) // unlocking happens before surrounding function returns\nditto",
			"disapproval": false,
			"date": "2011-11-29 22:07:24.951304",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5327053/diff/17002/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5327053/diff/17002/doc/go_spec.html#newcode484\ndoc/go_spec.html:484: \\n`  // same as \"\\\\n\\n\\\\n\"\nOn 2011/11/29 22:07:25, gri wrote:\n> I would still align this one with the one above, even if gofmt doesn't do it -\n> looks better in the spec (the comment is not really part of the code, it's\n> additional explanations of the rules)\n\nDone.\n\nhttp://codereview.appspot.com/5327053/diff/17002/doc/go_spec.html#newcode1567\ndoc/go_spec.html:1567: const zero = 0.0  // untyped floating-point constant\nOn 2011/11/29 22:07:25, gri wrote:\n> I would prefer keeping this and the next comment aligned with the last two -\n> they \"belong together\" as part of the explanation of the code. Not gofmt style,\n> but gofmt is not perfect yet.\n\nDone.\n\nhttp://codereview.appspot.com/5327053/diff/17002/doc/go_spec.html#newcode2334\ndoc/go_spec.html:2334: p.z  // (*p).z\nOn 2011/11/29 22:07:25, gri wrote:\n> I would keep these aligned with the comments after the blank line - again for\n> didactic reasons (they belong together)\n\nDone.\n\nhttp://codereview.appspot.com/5327053/diff/17002/doc/go_spec.html#newcode3340\ndoc/go_spec.html:3340: string('a')   // \"a\"\nOn 2011/11/29 22:07:25, gri wrote:\n> same here - I would keep all comments aligned, with a minimal 2 blank separation\n\nDone.\n\nhttp://codereview.appspot.com/5327053/diff/17002/doc/go_spec.html#newcode3936\ndoc/go_spec.html:3936: v := x // x is evaluated exactly once\nOn 2011/11/29 22:07:25, gri wrote:\n> 3936-3953: should also be 2 blanks before //\n\nDone.\n\nhttp://codereview.appspot.com/5327053/diff/17002/doc/go_spec.html#newcode4138\ndoc/go_spec.html:4138: var val interface {} // value type of m is assignable to val\nOn 2011/11/29 22:07:25, gri wrote:\n> ditto\n\nDone.\n\nhttp://codereview.appspot.com/5327053/diff/17002/doc/go_spec.html#newcode4233\ndoc/go_spec.html:4233: case i3, ok := (&lt;-c3): // same as: i3, ok := &lt;-c3\nOn 2011/11/29 22:07:25, gri wrote:\n> ditto\n\nDone.\n\nhttp://codereview.appspot.com/5327053/diff/17002/doc/go_spec.html#newcode4243\ndoc/go_spec.html:4243: for { // send random sequence of bits to c\nOn 2011/11/29 22:07:25, gri wrote:\n> ditto\n\nDone.\n\nhttp://codereview.appspot.com/5327053/diff/17002/doc/go_spec.html#newcode4245\ndoc/go_spec.html:4245: case c &lt;- 0: // note: no statement, no fallthrough, no folding of cases\nOn 2011/11/29 22:07:25, gri wrote:\n> ditto\n\nDone.\n\nhttp://codereview.appspot.com/5327053/diff/17002/doc/go_spec.html#newcode4250\ndoc/go_spec.html:4250: select { } // block forever\nOn 2011/11/29 22:07:25, gri wrote:\n> ditto\n> \n> btw., I think select {} is formatted just so (no blank between { and })\n\nDone.\n\nhttp://codereview.appspot.com/5327053/diff/17002/doc/go_spec.html#newcode4408\ndoc/go_spec.html:4408: goto L // BAD\nOn 2011/11/29 22:07:25, gri wrote:\n> ditto\n\nDone.\n\nhttp://codereview.appspot.com/5327053/diff/17002/doc/go_spec.html#newcode4483\ndoc/go_spec.html:4483: defer unlock(l) // unlocking happens before surrounding function returns\nOn 2011/11/29 22:07:25, gri wrote:\n> ditto\n\nDone.",
			"disapproval": false,
			"date": "2011-11-29 23:35:35.724341",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-23 04:10:03.795193",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am all for formatting syntax the way that gofmt would,\nbut I think all the tiny movements of the comments are\nnot helpful.\n",
			"disapproval": false,
			"date": "2011-11-28 14:32:06.157937",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for fixing the code spacing.\n\nWith respect to the comments, I would strongly prefer you left the spacing unchanged (perhaps with the exception of a few places where it may not be consistent with the rest). It's true that there are 2 blanks (+alignment, if any) separating a comment from the code, and gofmt has only one. I believe 2 is better than 1 which is why I consistently tried to format the spec like that - in fact almost all places you changed were consistent (with a few exceptions).\n\nIn fact, I consider gofmt \"wrong\" in that respect, and the main reason why it's different (1 instead of 2 blanks before a //) is that when I introduced spaces (instead of tabs) for alignment (except for indentation), the comments lost their often fairly liberal distance from the code and got a bit too close in my opinion. I didn't see an easy fix when I made the change, but I should probably look into it.\n\nx := a / b  // comment\n\nlooks better and makes the code clearer than\n\nx := a / b // comment\n\n(the effect is stronger w/ non-proportional fonts).\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode326\ndoc/go_spec.html:326: 072.40 // == 72.40\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode350\ndoc/go_spec.html:350: 011i // == 11i\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode482\ndoc/go_spec.html:482: `abc` // same as \"abc\"\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode498\ndoc/go_spec.html:498: \"\u65e5\u672c\u8a9e\"                                // UTF-8 input text\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode776\ndoc/go_spec.html:776: [2][2][2]float64 // same as [2]([2]([2]float64))\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode882\ndoc/go_spec.html:882: _ float32 // padding\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode900\ndoc/go_spec.html:900: T1       // field name is T1\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode915\ndoc/go_spec.html:915: T    // conflicts with anonymous field *T and *P.T\nplease align with min. 2 blanks separation from code\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode1125\ndoc/go_spec.html:1125: ReadWrite // same as enumerating the methods in ReadWrite\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode1221\ndoc/go_spec.html:1221: chan&lt;- chan int   // same as chan&lt;- (chan int)\nplease align w/ min. 2 blanks sep from code\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode1567\ndoc/go_spec.html:1567: const zero = 0.0 // untyped floating-point constant\n2 blanks sep\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode1570\ndoc/go_spec.html:1570: eof        = -1 // untyped integer constant\nplease leave comment alignment as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode1597\ndoc/go_spec.html:1597: numberOfDays // this constant is not exported\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode1613\ndoc/go_spec.html:1613: const ( // iota is reset to 0\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode1620\ndoc/go_spec.html:1620: a = 1 &lt;&lt; iota // a == 1 (iota has been reset)\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode1626\ndoc/go_spec.html:1626: u         = iota * 42 // u == 0     (untyped integer constant)\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode1631\ndoc/go_spec.html:1631: const x = iota // x == 0 (iota has been reset)\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode1642\ndoc/go_spec.html:1642: bit0, mask0 = 1 &lt;&lt; iota, 1&lt;&lt;iota - 1 // bit0 == 1, mask0 == 0\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode1760\ndoc/go_spec.html:1760: var _, found = entries[name] // map lookup; only interested in \"found\"\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode1786\ndoc/go_spec.html:1786: var b  = true   // t  has type bool\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode1820\ndoc/go_spec.html:1820: r, w := os.Pipe(fd) // os.Pipe() returns two values\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode1835\ndoc/go_spec.html:1835: field2, offset := nextField(str, offset) // redeclares offset\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode1869\ndoc/go_spec.html:1869: func flushICache(begin, end uintptr) // implemented externally\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode2056\ndoc/go_spec.html:2056: origin := Point3D{}                           // zero value for Point3D\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode2093\ndoc/go_spec.html:2093: buffer := [10]string{}            // len(buffer) == 10\n2 blanks sep min.\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode2123\ndoc/go_spec.html:2123: [...]Point{{1.5, -3.5}, {0, 0}} // same as [...]Point{Point{1.5, -3.5}, Point{0, 0}}\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode2326\ndoc/go_spec.html:2326: var p *T2 // with p != nil and p.T1 != nil\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode2334\ndoc/go_spec.html:2334: p.z // (*p).z\n2 blanks sep - keep all comments aligned despite gap\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode2479\ndoc/go_spec.html:2479: a[2:] // same a[2 : len(a)]\n2 blanks sep\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode2574\ndoc/go_spec.html:2574: math.Atan2(x, y) // function call\n2 blanks sep - I would align comments despite gap for better readability\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode2715\ndoc/go_spec.html:2715: var i = 1&lt;&lt;s          // 1 has type int\n2 gaps min sep for aligned comments\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode3041\ndoc/go_spec.html:3041: &lt;-strobe // wait until clock pulse and discard received value\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode3094\ndoc/go_spec.html:3094: func (tv  T) Mv(a int) int         { return 0 } // value receiver\n2 blanks min sep for comment\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode3204\ndoc/go_spec.html:3204: *Point(p)       // same as *(Point(p))\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode3232\ndoc/go_spec.html:3232: uint(iota)              // iota value of type uint\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode3340\ndoc/go_spec.html:3340: string('a')  // \"a\"\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode3354\ndoc/go_spec.html:3354: string([]byte{'h', 'e', 'l', 'l', '\\xc3', '\\xb8'}) // \"hell\u00f8\"\n2 blanks min sep\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode3368\ndoc/go_spec.html:3368: string([]rune{0x767d, 0x9d6c, 0x7fd4}) // \"\\u767d\\u9d6c\\u7fd4\" == \"\u767d\u9d6c\u7fd4\"\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode3391\ndoc/go_spec.html:3391: []rune(MyString(\"\u767d\u9d6c\u7fd4\")) // []rune{0x767d, 0x9d6c, 0x7fd4}\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode3431\ndoc/go_spec.html:3431: const a = 2 + 3.0         // a == 5.0   (floating-point constant)\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode3476\ndoc/go_spec.html:3476: uint(-1)    // -1 cannot be represented as a uint\n2 blanks min sep\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode3490\ndoc/go_spec.html:3490: ^1        // untyped integer constant, equal to -2\n2 blanks min sep\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode3674\ndoc/go_spec.html:3674: (k) = &lt;-ch // same as: k = &lt;-ch\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode3714\ndoc/go_spec.html:3714: x, _ = f() // ignore second value returned by f()\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode3731\ndoc/go_spec.html:3731: a, b = b, a // exchange a and b\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode3735\ndoc/go_spec.html:3735: i, x[i] = 1, 2 // set i = 1, x[0] = 2\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode3738\ndoc/go_spec.html:3738: x[i], i = 2, 1 // set x[0] = 2, i = 1\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode3740\ndoc/go_spec.html:3740: x[0], x[0] = 1, 2 // set x[0] = 1, then x[0] = 2 (so x[0] = 2 at end)\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode3746\ndoc/go_spec.html:3746: x[2], p.x = 6, 7 // set x[2] = 6, then panic setting p.x = 7\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode3919\ndoc/go_spec.html:3919: printInt(i) // i is an int\nplease leave as before - same for all below\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode4647\ndoc/go_spec.html:4647: s := make([]int, 10, 100)      // slice with len(s) == 10, cap(s) == 100\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode4676\ndoc/go_spec.html:4676: append(s S, x ...T) S // T is the element type of S\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode4688\ndoc/go_spec.html:4688: s1 := append(s0, 2)       // append a single element     s1 == []int{0, 0, 2}\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode4725\ndoc/go_spec.html:4725: n1 := copy(s, a[0:])           // n1 == 6, s == []int{0, 1, 2, 3, 4, 5}\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode4741\ndoc/go_spec.html:4741: delete(m, k) // remove element m[k] from map m\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode4785\ndoc/go_spec.html:4785: var a = complex(2, -2)            // complex128\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode4847\ndoc/go_spec.html:4847: log.Println(\"done\") // Println executes normally even if there is a panic\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode5004\ndoc/go_spec.html:5004: ch &lt;- i // Send 'i' to channel 'ch'.\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode5011\ndoc/go_spec.html:5011: for i := range src { // Loop over values received from 'src'.\n2 blanks sep\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode5013\ndoc/go_spec.html:5013: dst &lt;- i // Send 'i' to channel 'dst'.\nditto\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode5020\ndoc/go_spec.html:5020: ch := make(chan int) // Create a new channel.\nplease leave as before\n\nhttp://codereview.appspot.com/5327053/diff/13003/doc/go_spec.html#newcode5227\ndoc/go_spec.html:5227: type ArbitraryType int // shorthand for an arbitrary Go type; it is not a real type\nplease leave as before",
			"disapproval": false,
			"date": "2011-11-29 21:15:26.480703",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "All done.\n\nFixing gofmt to make these two spaces sounds good to me. That's my preference too.",
			"disapproval": false,
			"date": "2011-11-29 21:54:35.855091",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\nThanks for bearing with me!\n- gri",
			"disapproval": false,
			"date": "2011-11-29 23:46:46.250929",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"dsymonds@golang.org",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=c1d2fe753013 ***\n\nspec: update spacing to match gofmt, where reasonable.\n\nR=gri, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5327053\n\nCommitter: Robert Griesemer <gri@golang.org>",
			"disapproval": false,
			"date": "2011-11-29 23:47:41.672010",
			"approval": false
		}
	],
	"owner_email": "dsymonds@golang.org",
	"private": false,
	"base_url": "",
	"owner": "dsymonds",
	"subject": "code review 5327053: spec: update spacing to match gofmt, where reasonable.",
	"created": "2011-10-28 05:42:09.199065",
	"patchsets": [
		1,
		2001,
		3001,
		8002,
		10002,
		13003,
		17002,
		18003
	],
	"modified": "2011-11-29 23:48:34.695993",
	"closed": true,
	"issue": 5327053
}