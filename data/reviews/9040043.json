{
	"description": "cmd/6c, cmd/8c: avoid generating long multiplication when not necessary.\n\nOn amd64\nbenchmark                        old ns/op    new ns/op    delta\nBenchmarkHashStringSpeed                91           74  -18.49%\nBenchmarkHashInt32Speed                 54           45  -17.88%\nBenchmarkHashInt64Speed                 76           58  -23.53%\nBenchmarkHashStringArraySpeed          231          188  -18.61%\n\nFixes issue 5367.",
	"cc": [
		"golang-dev@googlegroups.com",
		"iant@golang.org",
		"dave@cheney.net",
		"daniel.morsing@gmail.com",
		"ality@pbrane.org",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-05-04 11:12:47.811910",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "My inclination would be to hold this until after 1.1.",
			"disapproval": false,
			"date": "2013-05-04 16:09:40.620870",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ping. The change window has been well and truly thrown open.\r\n\r\nOn Sun, May 5, 2013 at 2:09 AM,  <iant@golang.org> wrote:\r\n> My inclination would be to hold this until after 1.1.\r\n>\r\n>\r\n> https://codereview.appspot.com/9040043/\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google Groups\r\n> \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-15 00:26:12.420440",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I like the idea but frankly I have no idea what this change is doing.  Anybody out there understand the C compilers?",
			"disapproval": false,
			"date": "2013-05-15 13:45:29.348700",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"dave@cheney.net",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/15 13:45:29, iant wrote:\n> I like the idea but frankly I have no idea what this change is doing.  Anybody\n> out there understand the C compilers?\n\nLooks like it's bumping the usage count for the DX register so that it is not chosen when register allocating, but I have no clue how that translates to a speed improvement.",
			"disapproval": false,
			"date": "2013-05-15 13:49:31.753520",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "gopcode does logic on usage count of DX to do short or long\r\nmultiplication. (weird)\r\n\r\n2013/5/15, daniel.morsing@gmail.com <daniel.morsing@gmail.com>:\r\n> On 2013/05/15 13:45:29, iant wrote:\r\n>> I like the idea but frankly I have no idea what this change is doing.\r\n> Anybody\r\n>> out there understand the C compilers?\r\n>\r\n> Looks like it's bumping the usage count for the DX register so that it\r\n> is not chosen when register allocating, but I have no clue how that\r\n> translates to a speed improvement.\r\n>\r\n> https://codereview.appspot.com/9040043/\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-15 14:15:24.609870",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"dave@cheney.net",
				"daniel.morsing@gmail.com",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R\u00e9my,\n\nShouldn't you instead duplicate the gopcode AX/DX logic for the OASLMUL/OLMUL case? With your change OLMUL nodes now generate IMUL\nopcodes instead of MUL.",
			"disapproval": false,
			"date": "2013-05-15 14:32:53.573440",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"dave@cheney.net",
				"daniel.morsing@gmail.com",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "To restate my question: doesn't this effectively turn unsigned multiplication into signed?",
			"disapproval": false,
			"date": "2013-05-15 14:50:59.868670",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What do you mean by signed multiplication? It would only make sense\r\nfor the long one.\r\n\r\n2013/5/15, ality@pbrane.org <ality@pbrane.org>:\r\n> To restate my question: doesn't this effectively turn unsigned\r\n> multiplication into signed?\r\n>\r\n> https://codereview.appspot.com/9040043/\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-15 14:59:55.991440",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"dave@cheney.net",
				"daniel.morsing@gmail.com",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/15 14:59:55, remyoudompheng wrote:\n> What do you mean by signed multiplication? It would only make sense\n> for the long one.\n\nOLMUL is for multiplying unsigned types, right? tcom checks typeu and\nchanges OMUL to OLMUL if needed. Basically, I'm asking if you should\ndo gopcode(o, ...) instead of gopcode(OMUL, ...) after incrementing\nreg[D_DX].",
			"disapproval": false,
			"date": "2013-05-15 15:22:02.772580",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"dave@cheney.net",
				"daniel.morsing@gmail.com",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/15 15:22:02, ality wrote:\n> On 2013/05/15 14:59:55, remyoudompheng wrote:\n> > What do you mean by signed multiplication? It would only make sense\n> > for the long one.\n> \n> OLMUL is for multiplying unsigned types, right? tcom checks typeu and\n> changes OMUL to OLMUL if needed. Basically, I'm asking if you should\n> do gopcode(o, ...) instead of gopcode(OMUL, ...) after incrementing\n> reg[D_DX].\n\nOLMUL is mapped to MUL and OMUL is mapped to IMUL. MUL doesn't have a short form (since ordinary multiplication is independent of signedness).",
			"disapproval": false,
			"date": "2013-05-18 08:19:56.498910",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> OLMUL is mapped to MUL and OMUL is mapped to IMUL\r\n\r\nThat is not confusing in the slightest.\r\n\r\nOn Sat, May 18, 2013 at 6:19 PM,  <remyoudompheng@gmail.com> wrote:\r\n> On 2013/05/15 15:22:02, ality wrote:\r\n>>\r\n>> On 2013/05/15 14:59:55, remyoudompheng wrote:\r\n>> > What do you mean by signed multiplication? It would only make sense\r\n>> > for the long one.\r\n>\r\n>\r\n>> OLMUL is for multiplying unsigned types, right? tcom checks typeu and\r\n>> changes OMUL to OLMUL if needed. Basically, I'm asking if you should\r\n>> do gopcode(o, ...) instead of gopcode(OMUL, ...) after incrementing\r\n>> reg[D_DX].\r\n>\r\n>\r\n> OLMUL is mapped to MUL and OMUL is mapped to IMUL. MUL doesn't have a\r\n> short form (since ordinary multiplication is independent of signedness).\r\n>\r\n> https://codereview.appspot.com/9040043/\r\n",
			"disapproval": false,
			"date": "2013-05-18 08:21:02.325510",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"dave@cheney.net",
				"daniel.morsing@gmail.com",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping.",
			"disapproval": false,
			"date": "2013-05-21 12:00:53.624240",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"dave@cheney.net",
				"daniel.morsing@gmail.com",
				"ality@pbrane.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/21 12:00:53, dfc wrote:\n> ping.\n\nping",
			"disapproval": false,
			"date": "2013-05-27 22:05:42.196500",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"dave@cheney.net",
				"daniel.morsing@gmail.com",
				"ality@pbrane.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/9040043/diff/5001/src/cmd/6c/cgen.c\nFile src/cmd/6c/cgen.c (right):\n\nhttps://codereview.appspot.com/9040043/diff/5001/src/cmd/6c/cgen.c#newcode401\nsrc/cmd/6c/cgen.c:401: reg[D_DX]++; // avoid doing long multiplication.\nPlease change this comment to\n\n// for gopcode case OMUL",
			"disapproval": false,
			"date": "2013-06-03 19:43:14.829810",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"iant@golang.org",
				"dave@cheney.net",
				"daniel.morsing@gmail.com",
				"ality@pbrane.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=1c764773c6ce ***\n\ncmd/6c, cmd/8c: avoid generating long multiplication when not necessary.\n\nOn amd64\nbenchmark                        old ns/op    new ns/op    delta\nBenchmarkHashStringSpeed                91           74  -18.49%\nBenchmarkHashInt32Speed                 54           45  -17.88%\nBenchmarkHashInt64Speed                 76           58  -23.53%\nBenchmarkHashStringArraySpeed          231          188  -18.61%\n\nFixes issue 5367.\n\nR=golang-dev, iant, dave, daniel.morsing, ality, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/9040043\n\nhttps://codereview.appspot.com/9040043/diff/5001/src/cmd/6c/cgen.c\nFile src/cmd/6c/cgen.c (right):\n\nhttps://codereview.appspot.com/9040043/diff/5001/src/cmd/6c/cgen.c#newcode401\nsrc/cmd/6c/cgen.c:401: reg[D_DX]++; // avoid doing long multiplication.\nOn 2013/06/03 19:43:15, rsc wrote:\n> Please change this comment to\n> \n> // for gopcode case OMUL\n> \n\nDone.",
			"disapproval": false,
			"date": "2013-06-04 06:34:36.946820",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 9040043: cmd/6c, cmd/8c: avoid generating long multiplication wh...",
	"created": "2013-04-30 08:01:33.107510",
	"patchsets": [
		1,
		2001,
		5001,
		24001
	],
	"modified": "2013-06-04 06:34:38.898700",
	"closed": true,
	"issue": 9040043
}