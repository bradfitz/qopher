{
	"description": "syscall Pipe for Windows\nDoes not fix ForkExec",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Peter,\n\nUnfortunately, I won't be able to accept your CL, because I will accept http://codereview.appspot.com/1666045/show instead. CL166045 was created first, and it is only fair to the author to accept his.\n\nI'm sorry this happened. Perhaps in the future we should talk to each other more, so we all know what is going on.\n\nThank you.\n\n\nAlex",
			"disapproval": false,
			"date": "2010-07-26 03:35:56.085891",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc, brainman (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change.",
			"disapproval": false,
			"date": "2010-07-15 22:28:54.301122",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/1846044/diff/2001/3001\nFile src/pkg/syscall/syscall_windows.go (right):\n\nhttp://codereview.appspot.com/1846044/diff/2001/3001#newcode248\nsrc/pkg/syscall/syscall_windows.go:248: ft, errno := GetFileType(uint32(fd))\nI'm surprised SetFilePointer doesn't return an error for pipes.\nWhat does it do?  Just silently fail?",
			"disapproval": false,
			"date": "2010-07-15 23:05:36.507524",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2010/07/15 22:28:54, PeterGo wrote:\n> I'd like you to review this change.\n\nDo you aware of existing CL:\n\nhttp://codereview.appspot.com/1715046/show\n\n?\n\n\nAlex",
			"disapproval": false,
			"date": "2010-07-15 23:56:26.483697",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "> I'm surprised SetFilePointer doesn't return an error for pipes.\n> What does it do?  Just silently fail?\n\nAs from http://msdn.microsoft.com/en-us/library/aa365541%28VS.85%29.aspx\n\n>\n\nThe hFile parameter must refer to a file stored on a seeking device; for example, a disk volume. Calling the SetFilePointer function with a handle to a non-seeking device such as a pipe or a communications device is not supported, even though the SetFilePointer function may not return an error. The behavior of the SetFilePointer function in this case is undefined. \n\n<",
			"disapproval": false,
			"date": "2010-07-15 23:57:54.942300",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/1846044/diff/2001/3001\nFile src/pkg/syscall/syscall_windows.go (right):\n\nhttp://codereview.appspot.com/1846044/diff/2001/3001#newcode248\nsrc/pkg/syscall/syscall_windows.go:248: ft, errno := GetFileType(uint32(fd))\nOn 2010/07/15 23:05:36, rsc1 wrote:\n> I'm surprised SetFilePointer doesn't return an error for pipes.\n> What does it do?  Just silently fail?\n\nIt's silently undefined!\n\nThe hFile parameter must refer to a file stored on a seeking device; for example, a disk volume. Calling the SetFilePointer function with a handle to a non-seeking device such as a pipe or a communications device is not supported, even though the SetFilePointer function may not return an error. The behavior of the SetFilePointer function in this case is undefined.\n\nSetFilePointer Function\nhttp://msdn.microsoft.com/en-us/library/aa365541%28VS.85%29.aspx",
			"disapproval": false,
			"date": "2010-07-15 23:58:12.144518",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "If the other link is corrupted, try this one.\n\nLast-Error Code (Windows)\nhttp://msdn.microsoft.com/en-us/library/ms680347.aspx",
			"disapproval": false,
			"date": "2010-07-20 03:28:28.043965",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2010/07/22 21:16:49, rsc wrote:\n\n> ...  This kind of thing,\n> because the situation is murky, might be worth defending\n> against, but only in the general case, not at one call site\n> of one wrapper.  Let's fix the wrapper generator so that\n> when it is setting e1 it makes it EINVAL if e1 == 0.\n> This can happen in a separate CL; ...\n\nAs I said earlier, CL is on the way. Sorry for the noise.\n\n\nAlex",
			"disapproval": false,
			"date": "2010-07-22 23:31:12.999846",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2010/07/15 23:56:26, brainman wrote:\n> On 2010/07/15 22:28:54, PeterGo wrote:\n> > I'd like you to review this change.\n> \n> Do you aware of existing CL:\n> \n> http://codereview.appspot.com/1715046/show\n\nNo, I don't subscribe to golang-dev.\n\nThe patch failed to apply. Reading the code, I see some things that need to be fixed.",
			"disapproval": false,
			"date": "2010-07-16 04:29:11.393210",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/1846044/diff/2001/3001\nFile src/pkg/syscall/syscall_windows.go (right):\n\nhttp://codereview.appspot.com/1846044/diff/2001/3001#newcode398\nsrc/pkg/syscall/syscall_windows.go:398: if errno == 0 {\nPeter. Why do you need to check for errno == 0 here?",
			"disapproval": false,
			"date": "2010-07-18 23:54:39.828103",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/1846044/diff/2001/3001\nFile src/pkg/syscall/syscall_windows.go (right):\n\nhttp://codereview.appspot.com/1846044/diff/2001/3001#newcode398\nsrc/pkg/syscall/syscall_windows.go:398: if errno == 0 {\nOn 2010/07/18 23:54:40, brainman wrote:\n> Peter. Why do you need to check for errno == 0 here?\n\nThe short answer is that the syscall Pipe function returns a non-zero value of errno, instead of a non-nil value of os.Error, to indicate an error.\n\n  e := syscall.Pipe(p[0:])\n  if e != 0 {\n      syscall.ForkLock.RUnlock()\n      return nil, nil, NewSyscallError(\"pipe\", e)\n  }\n\nThe CreatePipe Windows API function guarantees that: \"If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.\" Since ok = bool(r0 != 0), the value of ok tells us whether the CreatePipe function call succeeded.\n\nThe GetLastError Windows API function guarantees very little. \"The last-error code is maintained on a per-thread basis. ... some functions call SetLastError with a zero when they succeed, wiping out the error code set by the most recently failed function. ... The error codes returned by a function are not part of the Windows API specification and can vary by operating system or device driver. For this reason, we cannot provide the complete list of error codes that can be returned by each function. There are also many functions whose documentation does not include even a partial list of error codes that can be returned.\" The value of errno may be zero; we can't be certain it's not.\n\nSince EINVAL is not zero, if ok indicates an error, errno is guaranteed to indicate an error with a non-zero value.\n\n  if !ok {\n      if errno == 0 {\n          errno = EINVAL\n      }\n      return\n  }",
			"disapproval": false,
			"date": "2010-07-19 04:39:49.745853",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2010/07/19 04:39:49, PeterGo wrote:\n\n> ... The value of errno may be zero; we can't be certain it's not.\n> \n\nAs from CreatePipe doco:\n\n>\n\nReturn Value\n\nIf the function succeeds, the return value is nonzero.\n\nIf the function fails, the return value is zero. To get extended error information, call GetLastError.\n\n<\n\nI read this as a implied promise that GetLastError will return us an error number (non-zero) in case of CreatePipe failure. Am I missing something here?\n\n\nAlex",
			"disapproval": false,
			"date": "2010-07-19 04:52:08.451981",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2010/07/19 04:52:08, brainman wrote:\n> On 2010/07/19 04:39:49, PeterGo wrote:\n> \n> > ... The value of errno may be zero; we can't be certain it's not.\n> > \n> \n> As from CreatePipe doco:\n> \n> >\n> \n> Return Value\n> \n> If the function succeeds, the return value is nonzero.\n> \n> If the function fails, the return value is zero. To get extended error\n> information, call GetLastError.\n> \n> <\n> \n> I read this as a implied promise that GetLastError will return us an error\n> number (non-zero) in case of CreatePipe failure. Am I missing something here?\n> \n> \n> Alex\n\nAlex\n\nThe only thing that GetLastError function guarantees is that it will return the 32-bit last-error code for the thread which was set by the most recent call to the SetLastError or SetLastErrorEx function.\n\n\"Note that some functions call SetLastError or SetLastErrorEx with 0 when they succeed, wiping out the error code set by the most recently failed function, while others do not.\"\n\nTherefore, there is no promise, and certainly no guarantee, that the last-error code is non-zero.\n\nLast-Error Code\nhttp://msdn.microsoft.com/en-us/library/ms680347%28VS.85%29.aspx\n\nPeter",
			"disapproval": false,
			"date": "2010-07-20 03:23:47.830912",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "> You are missing the point entirely; ...\n\nPerhaps. But I would like to see where my problem is <g>.\n\n> ... Whatever\n> the value of errno returned by the GetLastError function, the Pipe function will\n> return a valid value for errno. This code is always correct. \n\nTrue. But, I insist, it will work as well as without your check errno == 0. I am just surprised, we need this code that does nothing!\n\n> What is the value of gle for this code fragment?\n> \n>  \tsyscall.SetLastError(7)\n> \n> \tgle := syscall.GetLastError()\n> \n> \tfmt.Println(gle)\n> \n> \n> The answer is some number n, where 0 <= n < 2^32. \n\nTrue. (Assuming you're talking real go program here).\n\n> ... Does that surprise you? \n\nNo, it doesn't\n\n> ... It\n> shouldn't.\n> \n\nWell, it doesn't.\n\n\nAlex",
			"disapproval": false,
			"date": "2010-07-21 06:04:01.476296",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "> The only thing that GetLastError function guarantees is that it will return the\n> 32-bit last-error code for the thread which was set by the most recent call to\n> the SetLastError or SetLastErrorEx function.\n> \n> \"Note that some functions call SetLastError or SetLastErrorEx with 0 when they\n> succeed, wiping out the error code set by the most recently failed function,\n> while others do not.\"\n> \n> Therefore, there is no promise, and certainly no guarantee, that the last-error\n> code is non-zero.\n> \n\nSo, you're suggesting that:\n\n1) CreatePipe doesn't set \"lasterror\";\n\nor\n\n2) \"Lasterror\" gets changed between we call CreatePipe and GetLastError;\n\nor\n\n3) both 1) and 2).\n\nWhich?\n\n\nAlex",
			"disapproval": false,
			"date": "2010-07-20 03:43:26.697956",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Alex,\n\nYou are missing the point entirely; by design, it doesn't matter why. Whatever the value of errno returned by the GetLastError function, the Pipe function will return a valid value for errno. This code is always correct. A good primer on this topic is Systematic Programming: An Introduction by Niklaus Wirth.\n\nWhat is the value of gle for this code fragment?\n\n \tsyscall.SetLastError(7)\n\n\tgle := syscall.GetLastError()\n\n\tfmt.Println(gle)\n\n\nThe answer is some number n, where 0 <= n < 2^32. Does that surprise you? It shouldn't.\n\nPeter\nPeter",
			"disapproval": false,
			"date": "2010-07-21 05:26:29.100842",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Alex,\n\nThis is a CL, which not the place to explain OS internals in detail, so I'll be brief.\n\nIt's quite simple; there's no mechanism in place to stop the last error value being changed to any value, including zero. You might think that, if you quickly ask for the last error value, nobody will get a chance to change it; that's not true; what is stopping them?\n\nEven if the problem doesn't appear under normal circumstances, a debugger often scrambles the state, thereby creating unreproducible, unpredictable, and frustrating phantom errors. It also may not appear during normal testing, but appear intermittently under heavy, fluctuating production loads. Your software should be reliable enough to fly a passenger airplane or run a critical care medical device i.e have zero defects.\n\nPeter",
			"disapproval": false,
			"date": "2010-07-22 01:00:53.246121",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2010/07/22 01:00:53, PeterGo wrote:\n\n> It's quite simple; there's no mechanism in place to stop the last error value\n> being changed to any value, including zero. You might think that, if you quickly\n> ask for the last error value, nobody will get a chance to change it; that's not\n> true; what is stopping them?\n> \n\nIf you look at the actual code that does these calls:\n\nhttp://golang.org/src/pkg/runtime/windows/thread.c\n\nvoid\ncall_syscall(void *args)\n{\n\tStdcallParams *p = (StdcallParams*)args;\n\tp->r = (uintptr)stdcall_raw((void*)p->fn, p->args[0], p->args[1], p->args[2], p->args[3], p->args[4], p->args[5], p->args[6], p->args[7], p->args[8]);\n\tp->err = (uintptr)stdcall_raw(GetLastError);\n\treturn;\n}\n\nyou will see, that CreatePipe call will be immediately followed by GetLastError. There is nothing between them to change \"last error\" value. I say, there is no way for \"somebody\" to change it. If you think otherwise, then one of us is mistaken. If I'm wrong, then I don't understand what is happening here. That would be a problem for me.\n\n\nAlex",
			"disapproval": false,
			"date": "2010-07-22 01:33:01.821385",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2010/07/22 01:33:01, brainman wrote:\n> On 2010/07/22 01:00:53, PeterGo wrote:\n> \n> > It's quite simple; there's no mechanism in place to stop the last error value\n> > being changed to any value, including zero. You might think that, if you\n> quickly\n> > ask for the last error value, nobody will get a chance to change it; that's\n> not\n> > true; what is stopping them?\n> > \n> \n> If you look at the actual code that does these calls:\n> \n> http://golang.org/src/pkg/runtime/windows/thread.c\n> \n> void\n> call_syscall(void *args)\n> {\n> \tStdcallParams *p = (StdcallParams*)args;\n> \tp->r = (uintptr)stdcall_raw((void*)p->fn, p->args[0], p->args[1], p->args[2],\n> p->args[3], p->args[4], p->args[5], p->args[6], p->args[7], p->args[8]);\n> \tp->err = (uintptr)stdcall_raw(GetLastError);\n> \treturn;\n> }\n> \n> you will see, that CreatePipe call will be immediately followed by GetLastError.\n> There is nothing between them to change \"last error\" value. I say, there is no\n> way for \"somebody\" to change it. If you think otherwise, then one of us is\n> mistaken. If I'm wrong, then I don't understand what is happening here. That\n> would be a problem for me.\n> \n> \n> Alex\n\nIt is possible for the returning windows function to set the errno value to zero for a failure then clear the error code accessed by GetLastError by calling SetLastError(0). I've seen this happen when calling fopen on Windows 2000 and CE both. \n\nHere's some community feedback on msdn (http://tinyurl.com/266n2xb) about not relying on GetLastError: \n\n\"Handling Shell_NotifyIcon failure: Unfortunately, you cannot rely on the error code returned by GetLastError. When Shell_NotifyIcon returns false, some of the common errors returned by GetLastError are:\nERROR_FILE_NOT_FOUND (2)\nERROR_TIMEOUT (1460)\nERROR_SUCCESS (0)\"\n\nIMHO, GetLastError codes should only be used for informational purposes, e.g. with FormatMessage, when a dll function call fails.\n\n-joe",
			"disapproval": false,
			"date": "2010-07-22 03:37:00.682336",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2010/07/22 03:37:00, Joe Poirier wrote:\n\n> It is possible for the returning windows function to set the errno value to zero\n> for a failure then clear the error code accessed by GetLastError by calling\n> SetLastError(0). I've seen this happen when calling fopen on Windows 2000 and CE\n> both. \n\nDo you have any references, some factual programs I can run to test? I do have 2000.\n\n> Here's some community feedback on msdn (http://tinyurl.com/266n2xb) about not\n> relying on GetLastError: \n> \n\nNowhere in Shell_NotifyIcon doco I can see a statement that error number could be retrieved by GetLastError(). The \"community\" just assumed that.\n\n> IMHO, GetLastError codes should only be used for informational purposes, e.g.\n> with FormatMessage, when a dll function call fails.\n\nNo. It's not that simple. All syscall go functions return errno != 0 on failure, we must do the same. I believe, for everything we've used so far we could use errno = GetLastError() on falure. If it's not the case, then we have to do what Peter did, but not for one function, but all of them. I would like to see some concrete evidence that our current assumption is false.\n\n\nAlex",
			"disapproval": false,
			"date": "2010-07-22 03:59:23.891090",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Jul 21, 2010 at 10:59 PM,  <alex.brainman@gmail.com> wrote:\n> On 2010/07/22 03:37:00, Joe Poirier wrote:\n>\n>> It is possible for the returning windows function to set the errno\n>\n> value to zero\n>>\n>> for a failure then clear the error code accessed by GetLastError by\n>\n> calling\n>>\n>> SetLastError(0). I've seen this happen when calling fopen on Windows\n>\n> 2000 and CE\n>>\n>> both.\n>\n> Do you have any references, some factual programs I can run to test? I\n> do have 2000.\n>\n>> Here's some community feedback on msdn (http://tinyurl.com/266n2xb)\n>\n> about not\n>>\n>> relying on GetLastError:\n>\n>\n> Nowhere in Shell_NotifyIcon doco I can see a statement that error number\n> could be retrieved by GetLastError(). The \"community\" just assumed that.\n>\n>> IMHO, GetLastError codes should only be used for informational\n>\n> purposes, e.g.\n>>\n>> with FormatMessage, when a dll function call fails.\n>\n> No. It's not that simple. All syscall go functions return errno != 0 on\n> failure, we must do the same. I believe, for everything we've used so\n> far we could use errno = GetLastError() on falure. If it's not the case,\n> then we have to do what Peter did, but not for one function, but all of\n> them. I would like to see some concrete evidence that our current\n> assumption is false.\n>\n>\n> Alex\n>\n> http://codereview.appspot.com/1846044/show\n>\n\nOkay, here's another example using FindWindowEx on Windows 7 where\nit does talk about using GetLastError: http://tinyurl.com/2a6lqyg. I've found\nother examples of this behavior listed on Google as well.\n\nI haven't seen a msdn windows example that uses the GetLastError code in\nanything other than displaying a message, using FormatMessage, after\na function fails, ie returns a zero value.\n\n-joe\n",
			"disapproval": false,
			"date": "2010-07-22 04:39:05.525195",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2010/07/22 04:39:05, Joe Poirier wrote:\n\n> Okay, here's another example using FindWindowEx on Windows 7 where\n> it does talk about using GetLastError: http://tinyurl.com/2a6lqyg. I've found\n> other examples of this behavior listed on Google as well.\n\nI can't argue with you people <g>. I'll just change our logic to check for all functions in zsyscall_windows_386.go. CL coming.\n\n\nAlex",
			"disapproval": false,
			"date": "2010-07-22 04:55:13.001008",
			"approval": false
		},
		{
			"sender": "jdpoirier@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Wed, Jul 21, 2010 at 11:55 PM,  <alex.brainman@gmail.com> wrote:\n> On 2010/07/22 04:39:05, Joe Poirier wrote:\n>\n>> Okay, here's another example using FindWindowEx on Windows 7 where\n>> it does talk about using GetLastError: http://tinyurl.com/2a6lqyg.\n>\n> I've found\n>>\n>> other examples of this behavior listed on Google as well.\n>\n> I can't argue with you people <g>. I'll just change our logic to check\n> for all functions in zsyscall_windows_386.go. CL coming.\n>\n\nAn added twist, there are instances where a function succeeds but\nthe GetLastError value is set to non-zero, eg WriteFileEx and WriteFile.\n\n-joe\n",
			"disapproval": false,
			"date": "2010-07-22 04:59:39.463795",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "> An added twist, there are instances where a function succeeds but\n> the GetLastError value is set to non-zero, eg WriteFileEx and WriteFile.\n\nDon't care about that.\n\n\nAlex",
			"disapproval": false,
			"date": "2010-07-22 05:01:14.382453",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Alex,\n\nOn 2010/07/22 05:01:14, brainman wrote:\n\n> > An added twist, there are instances where a function succeeds but\n> > the GetLastError value is set to non-zero, eg WriteFileEx and WriteFile.\n\n> Don't care about that.\n\nYou should care.\n\nPeter",
			"disapproval": false,
			"date": "2010-07-22 20:48:06.353099",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Joe,\n\nOn Jul 22, Joseph Poirier <jdpoir...@gmail.com> wrote:\n\n> IMHO, GetLastError codes should only be used for informational purposes,\n> e.g. with FormatMessage, when a dll function call fails.\n\n> I haven't seen a msdn windows example that uses the GetLastError code in\n> anything other than displaying a message, using FormatMessage, after\n> a function fails, ie returns a zero value.\n\nThat's right.  The return value, not the last error code returned by\nGetLastError, is the sole means of determining success or failure for\nCreatePipe and most other functions: \"If the function succeeds, the\nreturn value is nonzero. If the function fails, the return value is\nzero.\"  \"[The last] error code may tell more about what actually\noccurred to make the function fail.\"  Or, it may not.  It's \"an\nadditional error code.\"  \"Any function can call the SetLastError or\nSetLastErrorEx function to set the last-error code for the current\nthread.\"  \"Note that some functions call SetLastError or\nSetLastErrorEx with 0 [zero] when they succeed, wiping out the error\ncode set by the most recently failed function, while others do not.\"\n\"The last-error code is maintained on a per-thread basis.\"\n\nPeter",
			"disapproval": false,
			"date": "2010-07-22 10:53:39.671786",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Joe,\n\nOn 2010/07/22 04:59:39, Joe Poirier wrote:\n\n> An added twist, there are instances where a function succeeds but\n> the GetLastError value is set to non-zero, eg WriteFileEx and WriteFile.\n\nThat's on my list of things to fix too.\n\nPeter",
			"disapproval": false,
			"date": "2010-07-22 14:50:55.898460",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Alex,\n\nOn 2010/07/22 01:33:01, brainman wrote:\n\n> If you look at the actual code that does these calls:\n\nIt's good practice to minimize testing and avoid bugs by carefully reviewing all relevant code, documentation, books, and literature before starting to design and code a solution. Therefore, I read all the relevant code before I submitted the CL.\n\n> CreatePipe call will be immediately followed by GetLastError.\n> There is nothing between them to change \"last error\" value. I say, there is no\n> way for \"somebody\" to change it. If you think otherwise, then one of us is\n> mistaken. If I'm wrong, then I don't understand what is happening here. That\n> would be a problem for me.\n\nYou're mistaken.\n\nPeter",
			"disapproval": false,
			"date": "2010-07-22 20:46:12.919164",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Please, enough of the sniping back and forth.\nWe're all working toward the same goal.\n\nThe code in question says\n\n\tok, errno := CreatePipe()\n\tif !ok {\n\t\tif errno == 0 {\n\t\t\terrno = EINVAL\n\t\t}\n\t\treturn\n\t}\n\nThe if errno == 0 does not belong here.  If CreatePipe\nreturns !ok, then you should assume errno != 0.\nTo do otherwise is a useless API.\n\nMy reading of the Windows docs is that in this case it\ncan't happen that CreatePipe returns false without setting\nthe last error, but the docs are far from clear and who\nknows what the implementations do.  This kind of thing,\nbecause the situation is murky, might be worth defending\nagainst, but only in the general case, not at one call site\nof one wrapper.  Let's fix the wrapper generator so that\nwhen it is setting e1 it makes it EINVAL if e1 == 0.\nThis can happen in a separate CL; this CL should drop the check.\n\nThanks.\nRuss\n",
			"disapproval": false,
			"date": "2010-07-22 21:16:49.911538",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2010/07/22 21:16:49, rsc wrote:\n\n> The code in question says\n> \n> \tok, errno := CreatePipe()\n> \tif !ok {\n> \t\tif errno == 0 {\n> \t\t\terrno = EINVAL\n> \t\t}\n> \t\treturn\n> \t}\n> \n> The if errno == 0 does not belong here.  If CreatePipe\n> returns !ok, then you should assume errno != 0.\n\nDone\n\n> Let's fix the wrapper generator so that\n> when it is setting e1 it makes it EINVAL if e1 == 0.\n> This can happen in a separate CL; this CL should drop the check.\n\nDone and checked in: http://codereview.appspot.com/1872045",
			"disapproval": false,
			"date": "2010-07-26 02:56:19.286605",
			"approval": false
		},
		{
			"sender": "go.peter.90@gmail.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"rsc@golang.org",
				"alex.brainman@gmail.com",
				"jdpoirier@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc, brainman, Joe Poirier (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-07-26 02:56:54.777596",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"go.peter.90@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "removing reviewers",
			"disapproval": false,
			"date": "2010-08-03 20:02:46.464716",
			"approval": false
		}
	],
	"owner_email": "go.peter.90@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "peterGo",
	"subject": "code review 1846044: syscall Pipe for Windows",
	"created": "2010-07-15 22:23:45.635241",
	"patchsets": [
		1,
		2001,
		31001
	],
	"modified": "2010-08-03 20:02:46.464716",
	"closed": false,
	"issue": 1846044
}