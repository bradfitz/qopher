{
	"description": "Add initial test for http client. It start a fake http server on localhost, verifies request, writes test response and verifies that the client has received the expected body.\n\nTwo goals:\n1) It removes the dependency of Go build on internet\n2) It provides an easy and reliable way to test different features of HTTP (tons of them!)\n\nI will probably improve this test code with the appropriate timeouts later. And I will add much more tests for HTTP in the next CL.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rsc@golang.org",
		"petarm@gmail.com"
	],
	"messages": [
		{
			"sender": "petarm@gmail.com",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"petarm@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "See my detailed comments in the source. In summary, I think it is a little premature to include this test. But we could use some if its subroutines as soon as the issues addressed below are dealt with.\n\nhttp://codereview.appspot.com/184052/diff/1006/3\nFile src/pkg/http/client_test.go (right):\n\nhttp://codereview.appspot.com/184052/diff/1006/3#newcode26\nsrc/pkg/http/client_test.go:26: type HTTPGetTestTemplate func(port int) *HTTPGetTest\nPerhaps a more descriptive name? And a one-line comment of what it does? E.g. explain that the port is the one that the testing routine found available when it was run.\n\nhttp://codereview.appspot.com/184052/diff/1006/3#newcode28\nsrc/pkg/http/client_test.go:28: func newGetTest(port int, pathAndQuery string, response string, expectedBody string) *HTTPGetTest {\nMy concern is that this framework allows only the query string to vary, when most of the testing will be focused on varying the header (changing Transfer-Encodings, intentionally inserting mal-formed headers, etc.) Perhaps what is needed is a slightly more general framework where one literally specifies the request+body+trailer (byte stream) and the response+body+trailer (as byte-stream) and a separate spec of how the library is supposed to react, i.e. success or a standardized error object (an instance of ProtocolError).\n\nhttp://codereview.appspot.com/184052/diff/1006/3#newcode92\nsrc/pkg/http/client_test.go:92: func runHTTPGetTest(t *testing.T, template HTTPGetTestTemplate) {\nIn the near future (as soon as Russ reviews my submit of a new http.Response) what will be tested is not Get() and Put(), but rather ReadResponse(), Response.Write(), ReadRequest() and RequestWrite(). And this test procedure should be two sided:\n\n(1) The request is sent literally, then the behavior of ReadRequest, Response.Write is observed, and\n\n(2) The request is sent using Request.Write(), whose behavior is\nobserved, the response is sent back literally and the behavior of\nReadResponse is observed.\n\nThese can even be split in 4 separate cases for simplicity.\n\nAnd we will most likely have different test data for the different tests.\nAs I said before, there should be intentionally malformed tests for which the Request/Response objects have to output the correct error.\n\nThis is just my 2 cents.",
			"disapproval": false,
			"date": "2010-01-09 22:45:24.456267",
			"approval": false
		},
		{
			"sender": "krasin@golang.org",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"petarm@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hi,\n\ndoes it look better? I just started to write tests but now you can see that this \"framework\" is not limited to test GET query string. It easy to test everything. Right here I test GET method only but I have not only positive tests.\n\nAlso, I caught a small bug in client.go with these tests.\n\nI will continue to write tests but I would prefer to do it in the next CL (since tests and test code are quite different things).",
			"disapproval": false,
			"date": "2010-01-10 16:51:03.566655",
			"approval": false
		},
		{
			"sender": "krasin@golang.org",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"petarm@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc (cc: golang-dev@googlegroups.com, petar-m),\n\nI'd like you to review this change.",
			"disapproval": false,
			"date": "2010-01-09 17:17:51.430080",
			"approval": false
		},
		{
			"sender": "krasin@golang.org",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"petarm@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2010/01/09 22:45:24, petar-m wrote:\n> See my detailed comments in the source. In summary, I think it is a little\n> premature to include this test. But we could use some if its subroutines as soon\n> as the issues addressed below are dealt with.\n> \n> http://codereview.appspot.com/184052/diff/1006/3\n> File src/pkg/http/client_test.go (right):\n> \n> http://codereview.appspot.com/184052/diff/1006/3#newcode26\n> src/pkg/http/client_test.go:26: type HTTPGetTestTemplate func(port int)\n> *HTTPGetTest\n> Perhaps a more descriptive name? And a one-line comment of what it does? E.g.\n> explain that the port is the one that the testing routine found available when\n> it was run.\n> \n> http://codereview.appspot.com/184052/diff/1006/3#newcode28\n> src/pkg/http/client_test.go:28: func newGetTest(port int, pathAndQuery string,\n> response string, expectedBody string) *HTTPGetTest {\n> My concern is that this framework allows only the query string to vary, when\n> most of the testing will be focused on varying the header (changing\n> Transfer-Encodings, intentionally inserting mal-formed headers, etc.) Perhaps\n> what is needed is a slightly more general framework where one literally\n> specifies the request+body+trailer (byte stream) and the response+body+trailer\n> (as byte-stream) and a separate spec of how the library is supposed to react,\n> i.e. success or a standardized error object (an instance of ProtocolError).\n\nActually, I've started this CL after I tried to review your CL. Generally, your code works right but I wanted to be sure that it works for all edge cases. So, this test is easily expandable to test Transfer-Encodings and other things.\n\nIf you want, I could add more tests right in this CL to make testing code more general and easy to understand.\n\n> \n> http://codereview.appspot.com/184052/diff/1006/3#newcode92\n> src/pkg/http/client_test.go:92: func runHTTPGetTest(t *testing.T, template\n> HTTPGetTestTemplate) {\n> In the near future (as soon as Russ reviews my submit of a new http.Response)\n> what will be tested is not Get() and Put(), but rather ReadResponse(),\n> Response.Write(), ReadRequest() and RequestWrite(). And this test procedure\n> should be two sided:\n> \n> (1) The request is sent literally, then the behavior of ReadRequest,\n> Response.Write is observed, and\n> \n> (2) The request is sent using Request.Write(), whose behavior is\n> observed, the response is sent back literally and the behavior of\n> ReadResponse is observed.\n> \n> These can even be split in 4 separate cases for simplicity.\n> \n> And we will most likely have different test data for the different tests.\n> As I said before, there should be intentionally malformed tests for which the\n> Request/Response objects have to output the correct error.\nYes, I kept it in mind. Sorry, I think this CL is mostly in my mind rather than on paper. I am going to sync paper and mind versions and return here.\n> \n> This is just my 2 cents.",
			"disapproval": false,
			"date": "2010-01-10 06:45:19.054799",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"krasin@golang.org",
				"rsc@golang.org",
				"petarm@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I like the spirit of the code, but I think the execution is\nmore complicated than it could be.\n\nhttp://codereview.appspot.com/184052/diff/1012/7\nFile src/pkg/http/client_test.go (right):\n\nhttp://codereview.appspot.com/184052/diff/1012/7#newcode30\nsrc/pkg/http/client_test.go:30: return func(hostname string) (r *Response, err os.Error) {\nAll this delayed computation is pretty hard to follow.\nInstead of writing a data-driven test, you've written a \ncode-driven test disguised as a data-driven test.\nInstead of making the test so general, just add more fields\nand use the named initializer syntax.\nInstead of all the tiny golden files, can add those to the struct too.\n\ntype Test struct {\n    name string;\n    url string;\n    status int;\n    body string;\n    error string;\n    req string;\n    resp string;\n}\n\nTest{\n    name: \"get-HttP\",\n    url: \"HttP://%s/lala\",\n    body: \"lala\",\n    status: 200,\n    req: \"GET /lala HTTP/1.1\\r\\n\" +\n        \"Host: foo\\r\\n\" +\n        \"\\r\\n\",\n    resp: \"whatever...\"\n},\n\nhttp://codereview.appspot.com/184052/diff/1012/7#newcode40\nsrc/pkg/http/client_test.go:40: t.Errorf(\"Action for test %s failed: %v\", test.name, err)\nToo many words.\n\nt.Errorf(\"%s: %v\", test.name, err)\n\nhttp://codereview.appspot.com/184052/diff/1012/7#newcode49\nsrc/pkg/http/client_test.go:49: t.Errorf(\"Unexpected status code, want: %d, has: %d\", statusCode, r.StatusCode)\nShould include name.\n\nt.Errorf(\"%s: status=%d, want %d\", test.name, r.StatusCode, statusCode)\n\netc\n\nhttp://codereview.appspot.com/184052/diff/1012/7#newcode120\nsrc/pkg/http/client_test.go:120: func readUntilEmptyLine(conn net.Conn) ([]byte, os.Error) {\nwould be simpler to use bufio, no?\n\nhttp://codereview.appspot.com/184052/diff/1012/7#newcode157\nsrc/pkg/http/client_test.go:157: arrs := bytes.Split(s, old, -1)\ns/arrs/a/\n\nhttp://codereview.appspot.com/184052/diff/1012/7#newcode174\nsrc/pkg/http/client_test.go:174: l, err := net.ListenTCP(\"tcp\", &net.TCPAddr{net.IPv4(0, 0, 0, 0), 0})\nWhy is this using ListenTCP instead of ordinary Listen?\nWould be a lot simpler using the latter.\n\nl, err := net.Listen(\"tcp\", \":0\")\n\nLook at pkg/rpc/server_test.go for a simpler way to do this.\n\nI think it would help readability to make a separate\n\nfunc testServer(test *Test, c chan string)\n\nand then this would be:\n\nc := make(chan string)\ngo testServer(test, c)\nhost := <-c\n...\n<-c  // wait for server to exit\n\nwith just a single go, no defers, etc.",
			"disapproval": false,
			"date": "2010-01-11 21:29:24.987148",
			"approval": false
		}
	],
	"owner_email": "krasin@golang.org",
	"private": false,
	"base_url": "",
	"owner": "Ivan Krasin",
	"subject": "code review 184052: Add initial test for http client. It start a fake http ...",
	"created": "2010-01-09 17:15:35.464930",
	"patchsets": [
		1,
		1002,
		1006,
		1009,
		1012
	],
	"modified": "2012-01-22 06:25:17.383386",
	"closed": true,
	"issue": 184052
}