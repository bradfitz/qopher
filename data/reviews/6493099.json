{
	"description": "cmd/6g, cmd/8g: eliminate extra agen for nil comparisons.\n\nRemoves an extra LEAL/LEAQ instructions there and usually saves\na useless temporary in the idiom\n    if err := foo(); err != nil {...}\n\nGenerated code is also less involved:\n    MOVQ err+n(SP), AX\n    CMPQ AX, $0\n(potentially CMPQ n(SP), $0) instead of\n    LEAQ err+n(SP), AX\n    CMPQ (AX), $0\n\nUpdate issue 1914.",
	"cc": [
		"daniel.morsing@gmail.com",
		"nigeltao@golang.org",
		"rsc@golang.org",
		"golang-dev@googlegroups.com",
		"remy@archlinux.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please replace \"Part of issue 1914\" in the CL description to \"Update issue 1914\".\n\nhttp://code.google.com/p/support/wiki/IssueTracker#Integration_with_version_control",
			"disapproval": false,
			"date": "2012-09-09 09:35:38.032630",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-09-09 07:39:45.717480",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"daniel.morsing@gmail.com",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Submitting...\n\nhttp://codereview.appspot.com/6493099/diff/4002/src/cmd/6g/cgen.c\nFile src/cmd/6g/cgen.c (right):\n\nhttp://codereview.appspot.com/6493099/diff/4002/src/cmd/6g/cgen.c#newcode986\nsrc/cmd/6g/cgen.c:986: yyerror(\"illegal array comparison\");\nOn 2012/09/11 02:30:45, rsc wrote:\n> s/array/slice/ while you are here. thanks.\n\nDone.\n\nhttp://codereview.appspot.com/6493099/diff/4002/src/cmd/8g/cgen.c\nFile src/cmd/8g/cgen.c (right):\n\nhttp://codereview.appspot.com/6493099/diff/4002/src/cmd/8g/cgen.c#newcode972\nsrc/cmd/8g/cgen.c:972: yyerror(\"illegal array comparison\");\nOn 2012/09/11 02:30:45, rsc wrote:\n> s/array/slice/ while you are here. thanks.\n\nDone.",
			"disapproval": false,
			"date": "2012-09-11 05:59:23.486920",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"daniel.morsing@gmail.com",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6493099/diff/4002/src/cmd/6g/cgen.c\nFile src/cmd/6g/cgen.c (right):\n\nhttp://codereview.appspot.com/6493099/diff/4002/src/cmd/6g/cgen.c#newcode986\nsrc/cmd/6g/cgen.c:986: yyerror(\"illegal array comparison\");\ns/array/slice/ while you are here. thanks.\n\nhttp://codereview.appspot.com/6493099/diff/4002/src/cmd/6g/cgen.c#newcode991\nsrc/cmd/6g/cgen.c:991: n1.xoffset += Array_array;\nalso, in a separate CL, if you want to rename these constants to say Slice_ instead of Array_ that'd probably be helpful to future contributors.\n\nit's hard to believe but it took a while before we realized slices and arrays were different things.\n\nhttp://codereview.appspot.com/6493099/diff/4002/src/cmd/8g/cgen.c\nFile src/cmd/8g/cgen.c (right):\n\nhttp://codereview.appspot.com/6493099/diff/4002/src/cmd/8g/cgen.c#newcode972\nsrc/cmd/8g/cgen.c:972: yyerror(\"illegal array comparison\");\ns/array/slice/ while you are here. thanks.",
			"disapproval": false,
			"date": "2012-09-11 02:30:45.636790",
			"approval": true
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I took a look at this section a couple of days ago, but I couldn't find a test program that would trigger this path. Have you found one?",
			"disapproval": false,
			"date": "2012-09-09 07:44:09.127230",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "No pending patches. I have vague projects:\n* wondering whether something could be done for issue 2734 (maybe reusing scratch space for variadic calls)\n* extending componentgen to handle structs with a few small fields so they get registering\n\nBut it doesn't seem as straightforward as the other patches. Maybe something useful could be to eliminate usage of stack in things like float64fromBits/float64bits. These do not use stack by themselves because their argument is already addressable, but when it is inlined, the argument is dumped to the stack even if it was registerized (see generated code for math.Inf or math.Nan or math.Copysign: these should not be able to cause a stack split).",
			"disapproval": false,
			"date": "2012-09-09 08:52:03.296500",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The  most impressive reduction in stack size is probably\n\nBefore:\nsrc/pkg/regexp/syntax/parse.go:1486) TEXT    (*parser).parseClass+0(SB),$328-56\n\nAfter:\nsrc/pkg/regexp/syntax/parse.go:1486) TEXT    (*parser).parseClass+0(SB),$232-56",
			"disapproval": false,
			"date": "2012-09-09 07:48:52.011510",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I need to read code more carefully. After a second pass, the code path looks downright trivial to me.\n\nI might join you on the task of getting rid of wayward agen() calls. Do you have anything in the pipeline that you havn't posted CLs for?",
			"disapproval": false,
			"date": "2012-09-09 08:39:29.655490",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"daniel.morsing@gmail.com",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sigh. The send mail box got unchecked in my first LGTM. Please see my comments on the rietveld page.",
			"disapproval": false,
			"date": "2012-09-11 02:31:24.545210",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"daniel.morsing@gmail.com",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello daniel.morsing@gmail.com, nigeltao@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com, remy@archlinux.org),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-11 05:59:09.746260",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"remyoudompheng@gmail.com",
				"daniel.morsing@gmail.com",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-09-11 02:30:51.379590",
			"approval": true
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"daniel.morsing@gmail.com",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/09 09:35:38, nigeltao wrote:\n> Please replace \"Part of issue 1914\" in the CL description to \"Update issue\n> 1914\".\n\nDone.",
			"disapproval": false,
			"date": "2012-09-11 05:58:56.995540",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"remyoudompheng@gmail.com",
				"daniel.morsing@gmail.com",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"remy@archlinux.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=09fe2c10489d ***\n\ncmd/6g, cmd/8g: eliminate extra agen for nil comparisons.\n\nRemoves an extra LEAL/LEAQ instructions there and usually saves\na useless temporary in the idiom\n    if err := foo(); err != nil {...}\n\nGenerated code is also less involved:\n    MOVQ err+n(SP), AX\n    CMPQ AX, $0\n(potentially CMPQ n(SP), $0) instead of\n    LEAQ err+n(SP), AX\n    CMPQ (AX), $0\n\nUpdate issue 1914.\n\nR=daniel.morsing, nigeltao, rsc\nCC=golang-dev, remy\nhttp://codereview.appspot.com/6493099",
			"disapproval": false,
			"date": "2012-09-11 06:08:44.496540",
			"approval": false
		}
	],
	"owner_email": "remyoudompheng@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "remyoudompheng",
	"subject": "code review 6493099: cmd/6g, cmd/8g: eliminate extra agen for nil comparisons.",
	"created": "2012-09-09 07:39:19.110800",
	"patchsets": [
		1,
		2001,
		4002,
		5003,
		5004
	],
	"modified": "2012-09-11 06:08:45.907680",
	"closed": true,
	"issue": 6493099
}