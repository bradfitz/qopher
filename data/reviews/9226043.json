{
	"description": "runtime: fix crash in badsignal()\r\nThe linker can generate split stack prolog when a textflag 7 function\r\nmakes an indirect function call.  If it happens, badsignal() crashes\r\ntrying to dereference g.\r\nFixes issue 5337.",
	"cc": [
		"bradfitz@golang.org",
		"dave@cheney.net",
		"adg@golang.org",
		"iant@golang.org",
		"r@golang.org",
		"adonovan@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"minux.ma@gmail.com"
	],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9226043/diff/2001/src/pkg/runtime/os_linux.c\nFile src/pkg/runtime/os_linux.c (right):\n\nhttps://codereview.appspot.com/9226043/diff/2001/src/pkg/runtime/os_linux.c#newcode310\nsrc/pkg/runtime/os_linux.c:310: for(i = 0; runtime\u00b7sigtab[sig].name[i]; i++) {}\nIf this fixes it,\n\na) this deserves a comment and why findnull (strlen?) isn't used.\n\nb) can we fix 6l to not allow calling a stack-split function from a no-stack-split function?",
			"disapproval": false,
			"date": "2013-05-06 16:29:13.211760",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n",
			"disapproval": false,
			"date": "2013-05-06 17:34:30.420030",
			"approval": true
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/06 16:29:13, bradfitz wrote:\n> https://codereview.appspot.com/9226043/diff/2001/src/pkg/runtime/os_linux.c\n> File src/pkg/runtime/os_linux.c (right):\n> \n> https://codereview.appspot.com/9226043/diff/2001/src/pkg/runtime/os_linux.c#newcode310\n> src/pkg/runtime/os_linux.c:310: for(i = 0; runtime\u00b7sigtab[sig].name[i]; i++) {}\n> If this fixes it,\n> \n> a) this deserves a comment and why findnull (strlen?) isn't used.\n\nYes, it's just a proof of concept.\nMore importantly I need to handle other platforms :)\n\n\n> b) can we fix 6l to not allow calling a stack-split function from a\n> no-stack-split function?\n\nIt's fine in itself. And there are such case in runtime. And there are legal cases when NOSPLIT stack function makes an indirect call.\nWhat we need here is a much stronger guarantee - that the function does not access m/g. But we don't have anything similar as of now AFAIK.",
			"disapproval": false,
			"date": "2013-05-06 17:14:57.523840",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-05-06 17:30:37.213750",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Very nice, thank you for getting to the bottom of this.",
			"disapproval": false,
			"date": "2013-05-06 17:32:57.206610",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\n\r\n\r\nOn Mon, May 6, 2013 at 10:30 AM, <dvyukov@google.com> wrote:\r\n\r\n> Hello bradfitz@golang.org (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://dvyukov%40google.com@**code.google.com/p/go/<http://40google.com@code.google.com/p/go/>\r\n>\r\n>\r\n> https://codereview.appspot.**com/9226043/<https://codereview.appspot.com/9226043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-05-06 17:33:41.776150",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, May 6, 2013 at 10:50 AM, <iant@golang.org> wrote:\r\n\r\n> See the comment #9 in issue 4048, where adonovan says that inlining\r\n> findnull does not work.  What has changed such that it works now?\r\n>\r\n\r\nI don't think we have a repro yet.  This was just a hunch from Dmitry.\r\n",
			"disapproval": false,
			"date": "2013-05-06 18:36:01.077900",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you.\r\n\r\nOn Tue, May 7, 2013 at 12:20 PM, minux <minux.ma@gmail.com> wrote:\r\n>\r\n> On Tue, May 7, 2013 at 7:21 AM, Dave Cheney <dave@cheney.net> wrote:\r\n>>\r\n>> Could you please raise a bug for this failure\r\n>\r\n> filed https://code.google.com/p/go/issues/detail?id=5419\r\n",
			"disapproval": false,
			"date": "2013-05-07 05:37:30.083190",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/06 17:32:57, dfc wrote:\n> Very nice, thank you for getting to the bottom of this.\n\nAlso, this was very subtle and tricky to track down. Is there any way to write a test, or a check to ensure that we don't split the stack inside a #pragma textflag 7 function ?",
			"disapproval": false,
			"date": "2013-05-06 17:35:01.740430",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"adg@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"adonovan@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "See the comment #9 in issue 4048, where adonovan says that inlining findnull does not work.  What has changed such that it works now?",
			"disapproval": false,
			"date": "2013-05-06 17:50:13.190340",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"adg@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"adonovan@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/06 17:35:01, dfc wrote:\n> \n> Also, this was very subtle and tricky to track down. Is there any way to write a\n> test, or a check to ensure that we don't split the stack inside a #pragma\n> textflag 7 function ?\n\nI don't see a way.  We could have the compiler prohibit indirect function calls in textflag 7 functions, but that would prevent the kind of hack that is discussed in issue 4048.  The analysis there was evidently wrong, but I don't think we want a conservative compiler check that makes it impossible to do this kind of analysis.",
			"disapproval": false,
			"date": "2013-05-06 17:52:50.656910",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"adg@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"adonovan@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9226043/diff/9001/src/pkg/runtime/os_darwin.c\nFile src/pkg/runtime/os_darwin.c (right):\n\nhttps://codereview.appspot.com/9226043/diff/9001/src/pkg/runtime/os_darwin.c#newcode551\nsrc/pkg/runtime/os_darwin.c:551: for(len = 0; runtime\u00b7sigtab[sig].name[len]; len++) {}\nplease put this on multiple lines. this isn't the usual style in the C code.\nsame for the other files",
			"disapproval": false,
			"date": "2013-05-06 18:28:46.990440",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, May 6, 2013 at 11:35 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> On Mon, May 6, 2013 at 10:50 AM, <iant@golang.org> wrote:\r\n>>\r\n>> See the comment #9 in issue 4048, where adonovan says that inlining\r\n>> findnull does not work.  What has changed such that it works now?\r\n>\r\n>\r\n> I don't think we have a repro yet.  This was just a hunch from Dmitry.\r\n\r\nI think the inlining issue was build failures.  It's possible that it\r\nwas addressed by shrinking the stack frame size elsewhere, I just want\r\nto make sure we know where.\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2013-05-06 20:10:21.618590",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"adg@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"adonovan@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nI've confirmed that the previous attempt to use a local loop caused build failures.  I rolled back to revision 15745 and applied this patch to it.  Building that gave an error building the go tool:\n\nruntime.sigtramp: nosplit stack overflow\n\t120\tassumed on entry to runtime.sigtramp\n\t56\tafter runtime.sigtramp uses 64\n\t48\ton entry to runtime.badsignal\n\t0\tafter runtime.badsignal uses 48\n\t-8\ton entry to runtime.write\ngo tool dist: FAILED: /home/iant/go4/pkg/tool/linux_amd64/6l -o /home/iant/go4/pkg/tool/linux_amd64/go_bootstrap $WORK/_go_.6\n\nLooking at the code that the linker generates for badsignal with Dmitriy's patch in the current source shows that it uses only 32 bytes of stack space, not 48.  So presumably something has changed in the compiler that caused this approach to fail earlier but work today.",
			"disapproval": false,
			"date": "2013-05-06 21:20:55.729230",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, May 7, 2013 at 5:20 AM, <iant@golang.org> wrote:\r\n\r\n> Looking at the code that the linker generates for badsignal with\r\n> Dmitriy's patch in the current source shows that it uses only 32 bytes\r\n> of stack space, not 48.  So presumably something has changed in the\r\n> compiler that caused this approach to fail earlier but work today.\r\n>\r\nIt's a bug fixed in https://codereview.appspot.com/7303099.\r\n\r\ni suggest we make the linker complain if it must add splitstack prolog to\r\na textflag == 7 function (or fix the bug in the linker so that it won't\r\ngenerate\r\nsplitstack prolog for such functions).\r\n\r\ni remember we have other use cases for this trick.\r\n",
			"disapproval": false,
			"date": "2013-05-06 21:28:02.503650",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, May 6, 2013 at 2:27 PM, minux <minux.ma@gmail.com> wrote:\r\n\r\n>\r\n> On Tue, May 7, 2013 at 5:20 AM, <iant@golang.org> wrote:\r\n>\r\n>> Looking at the code that the linker generates for badsignal with\r\n>> Dmitriy's patch in the current source shows that it uses only 32 bytes\r\n>> of stack space, not 48.  So presumably something has changed in the\r\n>> compiler that caused this approach to fail earlier but work today.\r\n>>\r\n> It's a bug fixed in https://codereview.appspot.com/7303099.\r\n>\r\n\r\nThanks for tracking that down.\r\n",
			"disapproval": false,
			"date": "2013-05-06 21:39:38.738460",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"adg@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"adonovan@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "we need a test in runtime for signal happening on foreign threads.",
			"disapproval": false,
			"date": "2013-05-06 23:01:08.296100",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"adg@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"adonovan@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-05-06 23:09:43.202780",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"adg@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"minux.ma@gmail.com",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=3aed68ee68dc ***\n\nruntime: fix crash in badsignal()\nThe linker can generate split stack prolog when a textflag 7 function\nmakes an indirect function call.  If it happens, badsignal() crashes\ntrying to dereference g.\nFixes issue 5337.\n\nR=bradfitz, dave, adg, iant, r, minux.ma\nCC=adonovan, golang-dev\nhttps://codereview.appspot.com/9226043\n\nCommitter: Ian Lance Taylor <iant@golang.org>",
			"disapproval": false,
			"date": "2013-05-06 23:15:08.636570",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"adg@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The root cause is cmd/cc failed to annotate runtime.badsignal as textflag 7.\n\n(pkg/runtime/os_linux.c:301)  TEXT    runtime.badsignal+0(SB),$32-8\n(pkg/runtime/slice.c:77)      TEXT    runtime.appendslice+0(SB),7,$104-0",
			"disapproval": false,
			"date": "2013-05-06 23:19:48.888550",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Could you please raise a bug for this failure. \r\n\r\nThanks\r\n\r\nDave\r\n\r\n\r\n\r\nOn 06/05/2013, at 4:19 PM, minux.ma@gmail.com wrote:\r\n\r\n> The root cause is cmd/cc failed to annotate runtime.badsignal as\r\n> textflag 7.\r\n> \r\n> (pkg/runtime/os_linux.c:301)  TEXT    runtime.badsignal+0(SB),$32-8\r\n> (pkg/runtime/slice.c:77)      TEXT    runtime.appendslice+0(SB),7,$104-0\r\n> \r\n> https://codereview.appspot.com/9226043/\r\n",
			"disapproval": false,
			"date": "2013-05-06 23:21:11.254320",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, May 6, 2013 at 4:01 PM,  <minux.ma@gmail.com> wrote:\r\n> we need a test in runtime for signal happening on foreign threads.\r\n\r\nI think it will have to be a test in misc/cgo.  Could you please open\r\nan issue for that?  Thanks.  We should be able to do it by invoking C\r\ncode that starts a thread, and having the Go code import\r\nruntime/pprof, and then waiting for a profiling signal while running\r\nin the C thread.  Or something like that.\r\n\r\nIan\r\n",
			"disapproval": false,
			"date": "2013-05-06 23:25:08.063320",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dvyukov@google.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"adg@golang.org",
				"iant@golang.org",
				"r@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/06 23:19:48, minux wrote:\n> The root cause is cmd/cc failed to annotate runtime.badsignal as textflag 7.\n> \n> (pkg/runtime/os_linux.c:301)  TEXT    runtime.badsignal+0(SB),$32-8\n> (pkg/runtime/slice.c:77)      TEXT    runtime.appendslice+0(SB),7,$104-0\nbecause the textflag 7 is incorrectly attached to the static variable findnull.",
			"disapproval": false,
			"date": "2013-05-06 23:29:30.710770",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, May 7, 2013 at 7:25 AM, Ian Lance Taylor <iant@golang.org> wrote:\r\n\r\n> On Mon, May 6, 2013 at 4:01 PM,  <minux.ma@gmail.com> wrote:\r\n> > we need a test in runtime for signal happening on foreign threads.\r\n>\r\n> I think it will have to be a test in misc/cgo.  Could you please open\r\n> an issue for that?  Thanks.  We should be able to do it by invoking C\r\n> code that starts a thread, and having the Go code import\r\n> runtime/pprof, and then waiting for a profiling signal while running\r\n> in the C thread.  Or something like that.\r\n>\r\nhow about https://codereview.appspot.com/9249043/ ?\r\n",
			"disapproval": false,
			"date": "2013-05-06 23:53:58.633080",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, May 7, 2013 at 7:21 AM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> Could you please raise a bug for this failure\r\n>\r\nfiled https://code.google.com/p/go/issues/detail?id=5419\r\n",
			"disapproval": false,
			"date": "2013-05-07 02:20:22.264720",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 9226043: runtime: fix crash in badsignal()",
	"created": "2013-05-06 15:53:08.752520",
	"patchsets": [
		1,
		2001,
		7001,
		9001
	],
	"modified": "2013-05-07 02:20:22.264720",
	"closed": true,
	"issue": 9226043
}