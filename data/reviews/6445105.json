{
	"description": "net: allow ReadFrom on IPConn to receive IPv4 header and options\n\nIPConn is used for controlloing raw IP protocols that stay on top\nof the IPv4 and IPv6 transports. In Go 1.0, not sure the reason,\nReadFrom on IPConn with \"ip4\" drops the received IPv4 header and\noptions. It's not helpful for routing, signalling protocols\nbecause they will require IPv4 header and options in some cases.\n\nThis CL allows ReadFrom on IPConn with \"ip4\" to receive IPv4 header\nand opions, also makes raw IPv4 access API consistent across methods.\n\nAPI change:\nReadFrom method on IPConn with \"ip4\" returns header and options\nthe same as Read, ReadMsgIP methods on IPConn with \"ip4\" do.\n\nFixes issue 3944.\n\nNote that IPv4 and IPv6 are completely different protocols. It's\nnot easy to provide protocol agnostic methods on IPConn. Instead,\nwe could provide external packages that focus on controlling each\nprotocol such as go.net/ipv4, go.net/ipv6.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"adg@golang.org",
		"dave@cheney.net",
		"gobot@golang.org"
	],
	"reviewers": [
		"bradfitz@golang.org",
		"cw@f00f.org"
	],
	"messages": [
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-08-11 16:09:15.171050",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-12 01:16:19.282860",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Does this affect the Go1 contract ?",
			"disapproval": false,
			"date": "2012-08-16 11:54:28.052880",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Aug 16, 2012 at 8:54 PM,  <dave@cheney.net> wrote:\r\n\r\n> Does this affect the Go1 contract ?\r\n\r\nI guess, on the border. hope not crossing yet.\r\n\r\nPacketConn doc says nothing special on the detail of packet itself.\r\n\r\nwe maybe could think that this is a simple minor bug we can fix\r\nfor the go1 life duration because there's no API signature, args,\r\nother changes that can be detected by api conformance tools.\r\n\r\non the other hand, this CL will make a small API behavioral change\r\ncertainly even if the previous behavior is wrong.\r\n",
			"disapproval": false,
			"date": "2012-08-16 12:56:34.920580",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Aug 16, 2012 at 9:59 PM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> I hope so too.\r\n\r\nCL 6426047 could be a workaround in the case we should\r\nmark ReadFrom on IPConn was broken but not repair it.\r\n",
			"disapproval": false,
			"date": "2012-08-16 13:12:08.042820",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I hope so too.\r\n\r\nOn Thu, Aug 16, 2012 at 10:56 PM, Mikio Hara <mikioh.mikioh@gmail.com> wrote:\r\n> On Thu, Aug 16, 2012 at 8:54 PM,  <dave@cheney.net> wrote:\r\n>\r\n>> Does this affect the Go1 contract ?\r\n>\r\n> I guess, on the border. hope not crossing yet.\r\n>\r\n> PacketConn doc says nothing special on the detail of packet itself.\r\n>\r\n> we maybe could think that this is a simple minor bug we can fix\r\n> for the go1 life duration because there's no API signature, args,\r\n> other changes that can be detected by api conformance tools.\r\n>\r\n> on the other hand, this CL will make a small API behavioral change\r\n> certainly even if the previous behavior is wrong.\r\n",
			"disapproval": false,
			"date": "2012-08-16 12:59:23.096370",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-23 12:30:18.315180",
			"approval": false
		},
		{
			"sender": "gobot@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=rsc (assigned by rsc)",
			"disapproval": false,
			"date": "2012-09-01 14:41:05.421950",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Assuming this doesn't run afoul of the Go1 contract, LGTM with these small comments.\n\nhttp://codereview.appspot.com/6445105/diff/13001/src/pkg/net/ipraw_test.go\nFile src/pkg/net/ipraw_test.go (right):\n\nhttp://codereview.appspot.com/6445105/diff/13001/src/pkg/net/ipraw_test.go#newcode151\nsrc/pkg/net/ipraw_test.go:151: if err != nil {\nif _, err := c.Write(echo); err != nil {\n\nhttp://codereview.appspot.com/6445105/diff/13001/src/pkg/net/ipraw_test.go#newcode157\nsrc/pkg/net/ipraw_test.go:157: _, err := c.Read(reply)\nif _, err := c.Read(reply); err != nil {\n\nhttp://codereview.appspot.com/6445105/diff/13001/src/pkg/net/ipraw_test.go#newcode163\nsrc/pkg/net/ipraw_test.go:163: hdrlen := (int(reply[0]) & 0xf) * 4\nwhat happens if hdrlen > len(reply) ?",
			"disapproval": false,
			"date": "2012-09-03 10:51:34.195120",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"cw@f00f.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6445105/diff/13001/src/pkg/net/iprawsock_posix.go\nFile src/pkg/net/iprawsock_posix.go (left):\n\nhttp://codereview.appspot.com/6445105/diff/13001/src/pkg/net/iprawsock_posix.go#oldcode81\nsrc/pkg/net/iprawsock_posix.go:81: if len(b) >= IPv4len { // discard ipv4 header\nI am confused. Is the issue that you don't want to discard the IPv4 header anymore, or is it that the header is already gone and we were throwing away data bytes?\n\nI would like to understand what the API is supposed to be. The comments don't really say.",
			"disapproval": false,
			"date": "2012-09-10 20:27:17.065140",
			"approval": false
		},
		{
			"sender": "cw@f00f.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> I would like to understand what the API is supposed to be. The comments don't\n> really say.\n\nI think this was my code from a couple of years back, I could be wrong.\n\n\nIIRC, IPv4 raw sockets have headers prepended to them.  IPv6 do not.\n\nSo discarding them for IPv4 makes sense to keep the interface more uniform.\n\n@mikio, does that seem reasonable?",
			"disapproval": false,
			"date": "2012-09-10 21:10:16.530110",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Right, I am trying to understand if\r\n\r\n(A) the CL is trying to preserve the headers\r\nor\r\n(B) we have somehow started using a system call that drops the headers\r\nand the code is trying to avoid dropping the beginning of the data.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-09-10 21:11:25.735510",
			"approval": false
		},
		{
			"sender": "cw@f00f.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> (A) the CL is trying to preserve the headers\n\niirc, would break the test, it does a ping to localhost\n\n> (B) we have somehow started using a system call that drops the headers\n> and the code is trying to avoid dropping the beginning of the data.\n\nwhich would also break the test\n\n\n\nis this for make things work on some kernel/platform that behaves differently?  i think when i did this i tested it on linux, bsd and mcapple and they all behaved the same way\n\n\n\n\n\ni suspect someone wants the headers (which is arguably fair) but not what the API did on the past\n\ni would prefer APIs that don't involve syscall be fairly uniform and not protocol specific\n\nif you need protocol/platform specific thins, importing syscall or unsafe might be required",
			"disapproval": false,
			"date": "2012-09-10 21:35:27.406190",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/10 21:35:27, cw wrote:\n\n> is this for make things work on some kernel/platform that behaves differently? \n\nunfortunately SOCK_RAW for Windows.\nhttp://msdn.microsoft.com/en-us/library/windows/desktop/ms740548(v=vs.85).aspx\nbut fortunately not implemented yet. ;)\n\nRuss also pointed out interesting question:\n\nsrc/pkg/net/iprawsock_posix.go:79: if addr.IP.To4() != nil && len(b) > 20 { // discard ipv4 header\nIf sa is an IPv6 sockaddr but it contains an IPv4-mapped address, then\naddr.IP.To4() will be non-nil here, so you get different behavior for \"ip6\"\nusing IPv4-mapped addresses vs \"ip6\" using non-IPv4-mapped addresses. Is that\nintended?\n\nlet me sleep on it.",
			"disapproval": false,
			"date": "2012-09-18 17:50:46.333640",
			"approval": false
		},
		{
			"sender": "cw@f00f.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm wondering if we shouldn't push part of this down into the platform specific code?",
			"disapproval": false,
			"date": "2012-09-18 19:18:28.145900",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "oops, sorry, pls ignore.\r\n",
			"disapproval": false,
			"date": "2012-11-20 10:57:37.237060",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"cw@f00f.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, dave@cheney.net, cw@f00f.org (cc: gobot@golang.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-19 13:32:06.845040",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Can you make the CL description be a sentence?\r\n\r\nOn Tue, Mar 19, 2013 at 6:32 AM, <mikioh.mikioh@gmail.com> wrote:\r\n\r\n> Hello rsc@golang.org, dave@cheney.net, cw@f00f.org (cc:\r\n> gobot@golang.org, golang-dev@googlegroups.com),\r\n>\r\n> Please take another look.\r\n>\r\n>\r\n> https://codereview.appspot.**com/6445105/<https://codereview.appspot.com/6445105/>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-19 17:18:05.091740",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"cw@f00f.org",
				"bradfitz@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, dave@cheney.net, cw@f00f.org, bradfitz@golang.org (cc: gobot@golang.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-19 17:35:00.291260",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"cw@f00f.org",
				"bradfitz@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I suggested some revised text, but I don't actually think this should go in.\n\nThis breaks existing programs. It seems like we should instead document the distinction in the IPConn type doc comment.\n\nThe exception would be if you can make the case that there are no possible useful programs with the current behavior, in which case it's just a bug. But it seems to me that if you are using ReadFrom then it's okay not to get headers back because you can find out who sent it using the separate address result.\n\nhttps://codereview.appspot.com/6445105/diff/47001/doc/go1.1.html\nFile doc/go1.1.html (right):\n\nhttps://codereview.appspot.com/6445105/diff/47001/doc/go1.1.html#newcode225\ndoc/go1.1.html:225: The previous <code>ReadFrom</code> method on <code>IPConn</code>\nIn Go 1.0, reading methods on <code>IPConn</code> were inconsistent about\nwhether the data being read included the IPv4 header and options:\n<code>Read</code> included them, but <code>ReadFrom</code> did not.\nIn Go 1.1, both include the IPv4 header and options.",
			"disapproval": false,
			"date": "2013-03-19 19:24:12.992190",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"cw@f00f.org",
				"bradfitz@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/19 19:24:12, rsc wrote:\n\n> The exception would be if you can make the case that there are no possible\n> useful programs with the current behavior, in which case it's just a bug. But it\n> seems to me that if you are using ReadFrom then it's okay not to get headers\n> back because you can find out who sent it using the separate address result.\n\nOkay, let me try it.\n\n1) Some protocols on IPv4 require to validate received packets for security\nor other reasons, not only a pair of addresses but TTL or other fields in the\nreceived header. Read/WriteMsgIP in Go 1.1 would be a solution for that\nbut...\n\n2) Even in Go 1.1 Windows doesn't support Read/WriteMsgIP because old\nWindows kernels don't implement recv/sendmsg API. For now, raw protocol\nimplementations on Windows need ReadFrom/WriteTo for controlling its IPv4\nprotocol stack.\n\nDoes this make sense?",
			"disapproval": false,
			"date": "2013-03-26 02:00:46.419740",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"cw@f00f.org",
				"bradfitz@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL if you think this change makes sense to us.\n\nhttps://codereview.appspot.com/6445105/diff/47001/doc/go1.1.html\nFile doc/go1.1.html (right):\n\nhttps://codereview.appspot.com/6445105/diff/47001/doc/go1.1.html#newcode225\ndoc/go1.1.html:225: The previous <code>ReadFrom</code> method on <code>IPConn</code>\nThanks\n\nhttps://codereview.appspot.com/6445105/diff/47001/doc/go1.1.html#newcode225\ndoc/go1.1.html:225: The previous <code>ReadFrom</code> method on <code>IPConn</code>\nOn 2013/03/19 19:24:13, rsc wrote:\n> In Go 1.0, reading methods on <code>IPConn</code> were inconsistent about\n> whether the data being read included the IPv4 header and options:\n> <code>Read</code> included them, but <code>ReadFrom</code> did not.\n> In Go 1.1, both include the IPv4 header and options.\n\nDone.",
			"disapproval": false,
			"date": "2013-03-26 02:03:49.936070",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"rsc@golang.org",
				"dave@cheney.net",
				"cw@f00f.org",
				"bradfitz@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping",
			"disapproval": false,
			"date": "2013-03-31 08:09:31.359070",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi Mikio,\n\nIssue 3944 was removed from Go1.1Maybe a while back. I think this change is good too go, but as it involves a break with the Go 1.0 contract, I don't think I can review it.\n\nI'm going to assign this to Brad to make the call on the Go 1.0 contract break.\n\nSorry.\n\nDave\n\nhttps://codereview.appspot.com/6445105/diff/63001/doc/go1.1.html\nFile doc/go1.1.html (right):\n\nhttps://codereview.appspot.com/6445105/diff/63001/doc/go1.1.html#newcode464\ndoc/go1.1.html:464: \nPlease include an Upgrading: paragraph similar to the other changes mentioned in this document. This could be as simple as saying 'Callers of IPCon.ReadFrom should adjust their code to handle the additional header data'",
			"disapproval": false,
			"date": "2013-04-01 12:00:06.615720",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "anyone else?",
			"disapproval": false,
			"date": "2013-04-03 05:48:39.650490",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6445105/diff/73002/doc/go1.1.html\nFile doc/go1.1.html (right):\n\nhttps://codereview.appspot.com/6445105/diff/73002/doc/go1.1.html#newcode522\ndoc/go1.1.html:522: In Go 1.0, reading methods on\nOn 2013/04/04 01:41:16, dfc wrote:\n> s/reading//g\n\nwhy? other methods have no flaws.\n\nhttps://codereview.appspot.com/6445105/diff/73002/doc/go1.1.html#newcode524\ndoc/go1.1.html:524: were inconsistent about whether the data being read included the IPv4 header and options:\nOn 2013/04/04 01:41:16, dfc wrote:\n> I think semicolon is a better choice than colon here.\n\nDone.",
			"disapproval": false,
			"date": "2013-04-04 01:55:51.253950",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I've never understood this Issue / CL well enough to feel comfortable\r\nLGTMing it.\r\n\r\nI would rather just document the status quo and not break anybody.  I'd\r\nrather people somehow opt-in to the new consistent behavior, rather than\r\nhave it forced on them.\r\n\r\nI'm sure I'm still not understanding the issue.\r\n\r\n\r\n\r\n\r\nOn Mon, Apr 1, 2013 at 5:00 AM, <dave@cheney.net> wrote:\r\n\r\n> Hi Mikio,\r\n>\r\n> Issue 3944 was removed from Go1.1Maybe a while back. I think this change\r\n> is good too go, but as it involves a break with the Go 1.0 contract, I\r\n> don't think I can review it.\r\n>\r\n> I'm going to assign this to Brad to make the call on the Go 1.0 contract\r\n> break.\r\n>\r\n> Sorry.\r\n>\r\n> Dave\r\n>\r\n>\r\n> https://codereview.appspot.**com/6445105/diff/63001/doc/**go1.1.html<https://codereview.appspot.com/6445105/diff/63001/doc/go1.1.html>\r\n> File doc/go1.1.html (right):\r\n>\r\n> https://codereview.appspot.**com/6445105/diff/63001/doc/**\r\n> go1.1.html#newcode464<https://codereview.appspot.com/6445105/diff/63001/doc/go1.1.html#newcode464>\r\n> doc/go1.1.html:464:\r\n> Please include an Upgrading: paragraph similar to the other changes\r\n> mentioned in this document. This could be as simple as saying 'Callers\r\n> of IPCon.ReadFrom should adjust their code to handle the additional\r\n> header data'\r\n>\r\n> https://codereview.appspot.**com/6445105/<https://codereview.appspot.com/6445105/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-04-03 07:33:28.301680",
			"approval": true
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "let me restate the issue.\n\nwell, simply this is a bug fix (really? yup).\nwhat trying to fix is allowing ipconn(\"ip4\") to receive ipv4 header (hm).\nthat's important for people who want to write network control plane\nstuff to the infrastructures (stumbled twice).\n\nhttps://codereview.appspot.com/6445105/diff/63001/doc/go1.1.html\nFile doc/go1.1.html (right):\n\nhttps://codereview.appspot.com/6445105/diff/63001/doc/go1.1.html#newcode464\ndoc/go1.1.html:464: \nthanks.\n\nhttps://codereview.appspot.com/6445105/diff/63001/doc/go1.1.html#newcode464\ndoc/go1.1.html:464: \nOn 2013/04/01 12:00:06, dfc wrote:\n> Please include an Upgrading: paragraph similar to the other changes mentioned in\n> this document. This could be as simple as saying 'Callers of IPCon.ReadFrom\n> should adjust their code to handle the additional header data' \n\nDone.",
			"disapproval": false,
			"date": "2013-04-04 01:35:54.644580",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org (cc: gobot@golang.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-04-04 01:36:16.135470",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I agree with the argument that this is a bug in Go 1.0 and is allowed by the Go 1 contract. Please wait for r or brad to sign off on the API breakage.\n\nhttps://codereview.appspot.com/6445105/diff/73002/doc/go1.1.html\nFile doc/go1.1.html (right):\n\nhttps://codereview.appspot.com/6445105/diff/73002/doc/go1.1.html#newcode522\ndoc/go1.1.html:522: In Go 1.0, reading methods on\ns/reading//g\n\nhttps://codereview.appspot.com/6445105/diff/73002/doc/go1.1.html#newcode524\ndoc/go1.1.html:524: were inconsistent about whether the data being read included the IPv4 header and options:\nI think semicolon is a better choice than colon here.",
			"disapproval": false,
			"date": "2013-04-04 01:41:16.707620",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"dave@cheney.net",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping",
			"disapproval": false,
			"date": "2013-04-06 08:12:13.530700",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"r@golang.org",
				"adg@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r and adg,\n\nCould I ask for your time to review this CL with a hope to deciding if it will be included in 1.1\n\nCheers\n\nDave",
			"disapproval": false,
			"date": "2013-04-10 02:50:05.735910",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"r@golang.org",
				"adg@golang.org",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Russ was against it and Brad doesn't understand it. I can see some merit in\u00a0it, but I'm just not comfortable approving a backward-incompatible change this late in the process.\n\nI know it has been 8 months in the making and this must be frustrating. I'm sorry, but it'll have to wait for 1.2.",
			"disapproval": false,
			"date": "2013-04-10 03:39:00.020550",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for making the call. \r\n\r\nOn 10/04/2013, at 13:39, adg@golang.org wrote:\r\n\r\n> Russ was against it and Brad doesn't understand it. I can see some merit\r\n> in it, but I'm just not comfortable approving a backward-incompatible\r\n> change this late in the process.\r\n> \r\n> I know it has been 8 months in the making and this must be frustrating.\r\n> I'm sorry, but it'll have to wait for 1.2.\r\n> \r\n> https://codereview.appspot.com/6445105/\r\n> \r\n> -- \r\n> \r\n> ---You received this message because you are subscribed to the Google Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an email to golang-dev+unsubscribe@googlegroups.com.\r\n> For more options, visit https://groups.google.com/groups/opt_out.\r\n> \r\n> \r\n",
			"disapproval": false,
			"date": "2013-04-10 04:15:33.335420",
			"approval": false
		},
		{
			"sender": "gobot@golang.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"adg@golang.org",
				"dave@cheney.net",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=bradfitz (assigned by dsymonds)",
			"disapproval": false,
			"date": "2013-04-18 02:51:43.473190",
			"approval": false
		},
		{
			"sender": "cw@f00f.org",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"adg@golang.org",
				"dave@cheney.net",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Is this almost ready as it stands?",
			"disapproval": false,
			"date": "2013-05-21 22:21:38.813430",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "NOT LGTM\r\n\r\n... to make the thing unhappy.\r\n\r\nWe're not going to do this.  (discussed earlier)\r\n\r\n\r\n\r\nOn Tue, May 21, 2013 at 3:21 PM, <cw@f00f.org> wrote:\r\n\r\n> Is this almost ready as it stands?\r\n>\r\n> https://codereview.appspot.**com/6445105/<https://codereview.appspot.com/6445105/>\r\n>\r\n",
			"disapproval": true,
			"date": "2013-05-21 22:22:54.233700",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"bradfitz@golang.org",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"adg@golang.org",
				"dave@cheney.net",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-06-06 08:17:45.679460",
			"approval": false
		}
	],
	"owner_email": "mikioh.mikioh@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mikio",
	"subject": "code review 6445105: net: allow ReadFrom on IPConn to receive IPv4 header an...",
	"created": "2012-08-11 15:46:06.206850",
	"patchsets": [
		8001,
		10001,
		13001,
		43001,
		47001,
		63001,
		73002,
		84002,
		102001
	],
	"modified": "2013-06-06 08:17:50.511580",
	"closed": true,
	"issue": 6445105
}