{
	"description": "go/types: add test typechecking std lib\n\n- run time is limited if -short is set\n- also added missing TODO to unrelated file return.go",
	"cc": [
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"fullung@gmail.com",
		"remyoudompheng@gmail.com"
	],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-03-05 01:03:36.358240",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but i'd prefer walking the file tree\n\nhttps://codereview.appspot.com/7448052/diff/9001/src/pkg/go/types/stdlib_test.go\nFile src/pkg/go/types/stdlib_test.go (right):\n\nhttps://codereview.appspot.com/7448052/diff/9001/src/pkg/go/types/stdlib_test.go#newcode5\nsrc/pkg/go/types/stdlib_test.go:5: // This file tests the types.Check by using it to\ns/ the//\n\nhttps://codereview.appspot.com/7448052/diff/9001/src/pkg/go/types/stdlib_test.go#newcode38\nsrc/pkg/go/types/stdlib_test.go:38: //           to exclude packages in case of type checker errors.\nreally? i'd just walk the tree and throw away examples from a much smaller list of known errors.\n\nthis is fine for now but it's so easy to do it better.",
			"disapproval": false,
			"date": "2013-03-05 01:14:18.599190",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Also: added result.go with a missing TODO.\n\nhttps://codereview.appspot.com/7448052/diff/9001/src/pkg/go/types/stdlib_test.go\nFile src/pkg/go/types/stdlib_test.go (right):\n\nhttps://codereview.appspot.com/7448052/diff/9001/src/pkg/go/types/stdlib_test.go#newcode5\nsrc/pkg/go/types/stdlib_test.go:5: // This file tests the types.Check by using it to\nOn 2013/03/05 01:14:18, r wrote:\n> s/ the//\n\nDone.\n\nhttps://codereview.appspot.com/7448052/diff/9001/src/pkg/go/types/stdlib_test.go#newcode38\nsrc/pkg/go/types/stdlib_test.go:38: //           to exclude packages in case of type checker errors.\nOn 2013/03/05 01:14:18, r wrote:\n> really? i'd just walk the tree and throw away examples from a much smaller list\n> of known errors.\n> \n> this is fine for now but it's so easy to do it better.\n\nThis is partly salvaged from exp/gotype_test.go. I agree it should be a traversal but this list existed (though not the rest of the code in this form - hence a new file). At the moment it is more important to have a comprehensive test. Will fix shortly.",
			"disapproval": false,
			"date": "2013-03-05 01:20:42.227530",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-05 01:54:58.889550",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "where is result.go?",
			"disapproval": false,
			"date": "2013-03-05 15:45:52.102260",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/05 15:45:52, r wrote:\n> where is result.go?\n\nIt just contains a TODO that rsc requested in an older CL and that I missed.",
			"disapproval": false,
			"date": "2013-03-05 17:03:35.725010",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "fine, but where is it? it's not in this CL.\r\n",
			"disapproval": false,
			"date": "2013-03-05 18:51:09.751500",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=37ff8fa97bb8 ***\n\ngo/types: add test typechecking std lib\n\n- run time is limited if -short is set\n- also added missing TODO to unrelated file return.go\n\nR=r\nCC=golang-dev\nhttps://codereview.appspot.com/7448052",
			"disapproval": false,
			"date": "2013-03-05 19:42:49.034630",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7448052/diff/30001/src/pkg/go/types/stdlib_test.go\nFile src/pkg/go/types/stdlib_test.go (right):\n\nhttps://codereview.appspot.com/7448052/diff/30001/src/pkg/go/types/stdlib_test.go#newcode106\nsrc/pkg/go/types/stdlib_test.go:106: func walkDirs(t *testing.T, dir string) {\nwhy not use filepath.Walk?\n\nhere's the (trivial!) code that does this from vet:\n\nfunc visit(path string, f os.FileInfo, err error) error {\n\tif err != nil {\n\t\terrorf(\"walk error: %s\", err)\n\t}\n\t// One package per directory. Ignore the files themselves.\n\tif !f.IsDir() {\n\t\treturn nil\n\t}\n\tdoPackageDir(path)\n\treturn nil\n}\n\n// walkDir recursively walks the tree looking for .go files.\nfunc walkDir(root string) {\n\tfilepath.Walk(root, visit)\n}",
			"disapproval": false,
			"date": "2013-03-05 19:10:25.334870",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7448052/diff/30001/src/pkg/go/types/stdlib_test.go\nFile src/pkg/go/types/stdlib_test.go (right):\n\nhttps://codereview.appspot.com/7448052/diff/30001/src/pkg/go/types/stdlib_test.go#newcode106\nsrc/pkg/go/types/stdlib_test.go:106: func walkDirs(t *testing.T, dir string) {\nOn 2013/03/05 19:10:25, r wrote:\n> why not use filepath.Walk?\n> \n> here's the (trivial!) code that does this from vet:\n> \n> func visit(path string, f os.FileInfo, err error) error {\n> \tif err != nil {\n> \t\terrorf(\"walk error: %s\", err)\n> \t}\n> \t// One package per directory. Ignore the files themselves.\n> \tif !f.IsDir() {\n> \t\treturn nil\n> \t}\n> \tdoPackageDir(path)\n> \treturn nil\n> }\n> \n> // walkDir recursively walks the tree looking for .go files.\n> func walkDir(root string) {\n> \tfilepath.Walk(root, visit)\n> }\n\nThere's no easy way to exit early from filepath.Walk for -short tests but for using a panic and deferred function to catch it. Not clear that it's going to be any shorter or clearer.\n\n- gri",
			"disapproval": false,
			"date": "2013-03-05 19:37:21.424050",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-03-05 19:41:28.668970",
			"approval": true
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"gri@golang.org",
				"fullung@gmail.com",
				"remyoudompheng@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/06 07:40:09, albert.strasheim wrote:\n> >> --- FAIL: TestStdlib-115 (0.21 seconds)\n> >> stdlib_test.go:76:\n> >> /build/go.tip/go/src/pkg/code.google.com/p/go.crypto/bcrypt/bcrypt.go:11:2:\n> >> could not import code.google.com/p/go.crypto/blowfish (can't find\n> >> import: code.google.com/p/go.crypto/blowfish)\n> >> stdlib_test.go:76:\n> > You must \"go install\" blowfish (and all packages) before using go/types.\n> Thanks very much. That did the trick.\n\nThere's a few more failures in the \"standard\" set of packages.\n\nstdlib_test.go:76: code.google.com/p/go.exp/ssa/interp/ops.go:1024:22: cannot range over x (variable of type value)\nstdlib_test.go:76: code.google.com/p/go.exp/ssa/interp/ops.go:1037:22: invalid operation: x (variable of type value) has no single field or method table\n\nand a few of:\n\nstdlib_test.go:76: code.google.com/p/goprotobuf/proto/pointer_unsafe.go:90:34: invalid operation: cannot convert p (variable of type structPointer) to uintptr\n\nJust noting them here for posterity.",
			"disapproval": false,
			"date": "2013-03-06 11:45:28.781180",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"gri@golang.org",
				"fullung@gmail.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello\n\nOn 2013/03/05 19:42:49, gri wrote:\n> *** Submitted as https://code.google.com/p/go/source/detail?r=37ff8fa97bb8 ***\n> go/types: add test typechecking std lib\n\nThis test fails for me. I have a slightly non-standard GOROOT in that I add a few packages to it:\n\nEvery \"stress test\" build does:\n\ncd $GOROOT/src\nrm -rf pkg/code.google.com\nmkdir -p pkg/code.google.com/p\nhg clone /path/to/hg/go.crypto pkg/code.google.com/p/go.crypto\nhg clone /path/to/hg/goprotobuf pkg/code.google.com/p/goprotobuf\nhg clone /path/to/hg/go.net pkg/code.google.com/p/go.net\nhg clone /path/to/hg/go.image pkg/code.google.com/p/go.image\n\nThe test fails with:\n\n--- FAIL: TestStdlib-115 (0.21 seconds)\nstdlib_test.go:76: /build/go.tip/go/src/pkg/code.google.com/p/go.crypto/bcrypt/bcrypt.go:11:2: could not import code.google.com/p/go.crypto/blowfish (can't find import: code.google.com/p/go.crypto/blowfish)\nstdlib_test.go:76: /build/go.tip/go/src/pkg/code.google.com/p/go.crypto/bcrypt/bcrypt.go:21:14: undeclared name: int\nstdlib_test.go:76: /build/go.tip/go/src/pkg/code.google.com/p/go.crypto/bcrypt/bcrypt.go:22:14: undeclared name: int\nstdlib_test.go:76: /build/go.tip/go/src/pkg/code.google.com/p/go.crypto/bcrypt/bcrypt.go:23:14: undeclared name: int\nstdlib_test.go:76: /build/go.tip/go/src/pkg/code.google.com/p/go.crypto/bcrypt/bcrypt.go:36:29: undeclared name: byte\nstdlib_test.go:76: /build/go.tip/go/src/pkg/code.google.com/p/go.crypto/bcrypt/bcrypt.go:38:42: undeclared name: string\nstdlib_test.go:76: /build/go.tip/go/src/pkg/code.google.com/p/go.crypto/bcrypt/bcrypt.go:39:114: undeclared name: byte\n...\n\nAny thoughts on how to proceed here? Should the test be robustified or is it definitely wrong to have this extra stuff in my GOROOT?\n\nCheers\n\nAlbert",
			"disapproval": false,
			"date": "2013-03-06 05:10:46.138330",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The test definitively assumes an \"unpolluted\" $GOROOT.\r\n\r\nThe recommended way is to install additional packages outside $GOROOT, in\r\nsome directory that is in $GOPATH.\r\n\r\nThat said, I have found myself in the same predicament as you (I had some\r\ncode.google.com packages, and so I moved it out). But it's trivial to\r\nadjust the test to exclude directories named \"code.google.com\" (there's\r\nalready an \"if\" to exclude \"testdata\" dirs). That would make the test more\r\nrobust, possibly for other folks as well.\r\n\r\nHope that helps.\r\n- gri\r\n\r\n\r\nOn Tue, Mar 5, 2013 at 9:10 PM, <fullung@gmail.com> wrote:\r\n\r\n> Hello\r\n>\r\n>\r\n> On 2013/03/05 19:42:49, gri wrote:\r\n>\r\n>> *** Submitted as\r\n>>\r\n> https://code.google.com/p/go/**source/detail?r=37ff8fa97bb8<https://code.google.com/p/go/source/detail?r=37ff8fa97bb8>***\r\n>\r\n>> go/types: add test typechecking std lib\r\n>>\r\n>\r\n> This test fails for me. I have a slightly non-standard GOROOT in that I\r\n> add a few packages to it:\r\n>\r\n> Every \"stress test\" build does:\r\n>\r\n> cd $GOROOT/src\r\n> rm -rf pkg/code.google.com\r\n> mkdir -p pkg/code.google.com/p\r\n> hg clone /path/to/hg/go.crypto pkg/code.google.com/p/go.**crypto<http://code.google.com/p/go.crypto>\r\n> hg clone /path/to/hg/goprotobuf pkg/code.google.com/p/**goprotobuf<http://code.google.com/p/goprotobuf>\r\n> hg clone /path/to/hg/go.net pkg/code.google.com/p/go.net\r\n> hg clone /path/to/hg/go.image pkg/code.google.com/p/go.image\r\n>\r\n> The test fails with:\r\n>\r\n> --- FAIL: TestStdlib-115 (0.21 seconds)\r\n> stdlib_test.go:76:\r\n> /build/go.tip/go/src/pkg/code.**google.com/p/go.crypto/bcrypt/**\r\n> bcrypt.go:11:2 <http://code.google.com/p/go.crypto/bcrypt/bcrypt.go:11:2>:\r\n> could not import code.google.com/p/go.crypto/**blowfish<http://code.google.com/p/go.crypto/blowfish>(can't find\r\n> import: code.google.com/p/go.crypto/**blowfish<http://code.google.com/p/go.crypto/blowfish>\r\n> )\r\n> stdlib_test.go:76:\r\n> /build/go.tip/go/src/pkg/code.**google.com/p/go.crypto/bcrypt/**\r\n> bcrypt.go:21:14<http://code.google.com/p/go.crypto/bcrypt/bcrypt.go:21:14>\r\n> :\r\n> undeclared name: int\r\n> stdlib_test.go:76:\r\n> /build/go.tip/go/src/pkg/code.**google.com/p/go.crypto/bcrypt/**\r\n> bcrypt.go:22:14<http://code.google.com/p/go.crypto/bcrypt/bcrypt.go:22:14>\r\n> :\r\n> undeclared name: int\r\n> stdlib_test.go:76:\r\n> /build/go.tip/go/src/pkg/code.**google.com/p/go.crypto/bcrypt/**\r\n> bcrypt.go:23:14<http://code.google.com/p/go.crypto/bcrypt/bcrypt.go:23:14>\r\n> :\r\n> undeclared name: int\r\n> stdlib_test.go:76:\r\n> /build/go.tip/go/src/pkg/code.**google.com/p/go.crypto/bcrypt/**\r\n> bcrypt.go:36:29<http://code.google.com/p/go.crypto/bcrypt/bcrypt.go:36:29>\r\n> :\r\n> undeclared name: byte\r\n> stdlib_test.go:76:\r\n> /build/go.tip/go/src/pkg/code.**google.com/p/go.crypto/bcrypt/**\r\n> bcrypt.go:38:42<http://code.google.com/p/go.crypto/bcrypt/bcrypt.go:38:42>\r\n> :\r\n> undeclared name: string\r\n> stdlib_test.go:76:\r\n> /build/go.tip/go/src/pkg/code.**google.com/p/go.crypto/bcrypt/**\r\n> bcrypt.go:39:114<http://code.google.com/p/go.crypto/bcrypt/bcrypt.go:39:114>\r\n> :\r\n> undeclared name: byte\r\n> ...\r\n>\r\n> Any thoughts on how to proceed here? Should the test be robustified or\r\n> is it definitely wrong to have this extra stuff in my GOROOT?\r\n>\r\n> Cheers\r\n>\r\n> Albert\r\n>\r\n> https://codereview.appspot.**com/7448052/<https://codereview.appspot.com/7448052/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-06 06:40:04.444260",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/3/6  <fullung@gmail.com> wrote:\r\n> Hello\r\n>\r\n>\r\n> On 2013/03/05 19:42:49, gri wrote:\r\n>>\r\n>> *** Submitted as\r\n>\r\n> https://code.google.com/p/go/source/detail?r=37ff8fa97bb8 ***\r\n>>\r\n>> go/types: add test typechecking std lib\r\n>\r\n>\r\n> This test fails for me. I have a slightly non-standard GOROOT in that I\r\n> add a few packages to it:\r\n>\r\n> Every \"stress test\" build does:\r\n>\r\n> cd $GOROOT/src\r\n> rm -rf pkg/code.google.com\r\n> mkdir -p pkg/code.google.com/p\r\n> hg clone /path/to/hg/go.crypto pkg/code.google.com/p/go.crypto\r\n> hg clone /path/to/hg/goprotobuf pkg/code.google.com/p/goprotobuf\r\n> hg clone /path/to/hg/go.net pkg/code.google.com/p/go.net\r\n> hg clone /path/to/hg/go.image pkg/code.google.com/p/go.image\r\n>\r\n> The test fails with:\r\n>\r\n> --- FAIL: TestStdlib-115 (0.21 seconds)\r\n> stdlib_test.go:76:\r\n> /build/go.tip/go/src/pkg/code.google.com/p/go.crypto/bcrypt/bcrypt.go:11:2:\r\n> could not import code.google.com/p/go.crypto/blowfish (can't find\r\n> import: code.google.com/p/go.crypto/blowfish)\r\n> stdlib_test.go:76:\r\n\r\nYou must \"go install\" blowfish (and all packages) before using go/types.\r\n\r\nR\u00e9my.\r\n",
			"disapproval": false,
			"date": "2013-03-06 07:00:23.631590",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello\r\n\r\nOn Wed, Mar 6, 2013 at 9:00 AM, R\u00e9my Oudompheng\r\n<remyoudompheng@gmail.com> wrote:\r\n> On 2013/3/6  <fullung@gmail.com> wrote:\r\n>> On 2013/03/05 19:42:49, gri wrote:\r\n>>> *** Submitted as\r\n>> https://code.google.com/p/go/source/detail?r=37ff8fa97bb8 ***\r\n>>> go/types: add test typechecking std lib\r\n>> This test fails for me. I have a slightly non-standard GOROOT in that I\r\n>> add a few packages to it:\r\n>> The test fails with:\r\n>> --- FAIL: TestStdlib-115 (0.21 seconds)\r\n>> stdlib_test.go:76:\r\n>> /build/go.tip/go/src/pkg/code.google.com/p/go.crypto/bcrypt/bcrypt.go:11:2:\r\n>> could not import code.google.com/p/go.crypto/blowfish (can't find\r\n>> import: code.google.com/p/go.crypto/blowfish)\r\n>> stdlib_test.go:76:\r\n> You must \"go install\" blowfish (and all packages) before using go/types.\r\n\r\nThanks very much. That did the trick.\r\n\r\nRegards\r\n\r\nAlbert\r\n",
			"disapproval": false,
			"date": "2013-03-06 07:40:09.222050",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks. Will look into them.\r\n- Robert\r\n\r\n\r\nOn Wed, Mar 6, 2013 at 3:45 AM, <fullung@gmail.com> wrote:\r\n\r\n> On 2013/03/06 07:40:09, albert.strasheim wrote:\r\n>\r\n>> >> --- FAIL: TestStdlib-115 (0.21 seconds)\r\n>> >> stdlib_test.go:76:\r\n>> >>\r\n>>\r\n> /build/go.tip/go/src/pkg/code.**google.com/p/go.crypto/bcrypt/**\r\n> bcrypt.go:11:2 <http://code.google.com/p/go.crypto/bcrypt/bcrypt.go:11:2>:\r\n>\r\n>> >> could not import code.google.com/p/go.crypto/**blowfish<http://code.google.com/p/go.crypto/blowfish>(can't find\r\n>> >> import: code.google.com/p/go.crypto/**blowfish<http://code.google.com/p/go.crypto/blowfish>\r\n>> )\r\n>> >> stdlib_test.go:76:\r\n>> > You must \"go install\" blowfish (and all packages) before using\r\n>>\r\n> go/types.\r\n>\r\n>> Thanks very much. That did the trick.\r\n>>\r\n>\r\n> There's a few more failures in the \"standard\" set of packages.\r\n>\r\n> stdlib_test.go:76: code.google.com/p/go.exp/ssa/**interp/ops.go:1024:22<http://code.google.com/p/go.exp/ssa/interp/ops.go:1024:22>\r\n> :\r\n> cannot range over x (variable of type value)\r\n> stdlib_test.go:76: code.google.com/p/go.exp/ssa/**interp/ops.go:1037:22<http://code.google.com/p/go.exp/ssa/interp/ops.go:1037:22>\r\n> :\r\n> invalid operation: x (variable of type value) has no single field or\r\n> method table\r\n>\r\n> and a few of:\r\n>\r\n> stdlib_test.go:76:\r\n> code.google.com/p/goprotobuf/**proto/pointer_unsafe.go:90:34<http://code.google.com/p/goprotobuf/proto/pointer_unsafe.go:90:34>:\r\n> invalid\r\n> operation: cannot convert p (variable of type structPointer) to uintptr\r\n>\r\n> Just noting them here for posterity.\r\n>\r\n> https://codereview.appspot.**com/7448052/<https://codereview.appspot.com/7448052/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-06 17:19:03.295380",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 7448052: go/types: add test typechecking std lib",
	"created": "2013-03-05 01:03:16.799470",
	"patchsets": [
		1,
		2001,
		5001,
		9001,
		14001,
		17001,
		20001,
		8003,
		25001,
		30001,
		37001
	],
	"modified": "2013-03-06 11:45:28.923560",
	"closed": true,
	"issue": 7448052
}