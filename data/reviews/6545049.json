{
	"description": "strings: implement a faster single-string Replacer\n\nThe string searching is implemented separately so other functions\nmay make use of it in the future.\n\nbenchmark                        old ns/op    new ns/op    delta\nBenchmarkSingleMaxSkipping          125889         2474  -98.03%\nBenchmarkSingleLongSuffixFail        16252         1996  -87.72%\nBenchmarkSingleMatch                260793       136266  -47.75%\n\nbenchmark                         old MB/s     new MB/s  speedup\nBenchmarkSingleMaxSkipping           79.43      4041.57   50.88x\nBenchmarkSingleLongSuffixFail        61.65       501.81    8.14x\nBenchmarkSingleMatch                 57.52       110.08    1.91x",
	"cc": [
		"nigeltao@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Can we have before/after benchmark numbers?\n\nhttps://codereview.appspot.com/6545049/diff/4001/src/pkg/strings/replace.go\nFile src/pkg/strings/replace.go (right):\n\nhttps://codereview.appspot.com/6545049/diff/4001/src/pkg/strings/replace.go#newcode366\nsrc/pkg/strings/replace.go:366: var buf []byte\nCall WriteString, like genericReplacer.Replace.\n\nhttps://codereview.appspot.com/6545049/diff/4001/src/pkg/strings/search_test.go\nFile src/pkg/strings/search_test.go (right):\n\nhttps://codereview.appspot.com/6545049/diff/4001/src/pkg/strings/search_test.go#newcode46\nsrc/pkg/strings/search_test.go:46: {\"mississi\", [256]int{'i': 3, 'm': 7, 's': 1},\nI'd format it as\n\n{\n  \"mississi\",\n  [256]int{'i': 3, 'm': 7, 's': 1},\n  []int{15, 14, 13, 7, 11, 10, 7, 1},\n},\n\nand similarly below.\n\nhttps://codereview.appspot.com/6545049/diff/4001/src/pkg/strings/search_test.go#newcode48\nsrc/pkg/strings/search_test.go:48: // From original paper.\n// From http://www.cs.utexas.edu/~moore/publications/fstrpos.pdf",
			"disapproval": false,
			"date": "2012-09-21 02:00:23.710020",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Can we have before/after benchmark numbers?",
			"disapproval": false,
			"date": "2012-09-21 02:00:30.696330",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Is 50.88x the record?\r\n\r\nOn Fri, Sep 21, 2012 at 1:00 AM,  <eric.d.eisner@gmail.com> wrote:\r\n> On 2012/09/21 02:00:23, nigeltao wrote:\r\n>>\r\n>> Can we have before/after benchmark numbers?\r\n>\r\n>\r\n> Added to cl description:\r\n>\r\n> benchmark                        old ns/op    new ns/op    delta\r\n> BenchmarkSingleMaxSkipping          125889         2474  -98.03%\r\n> BenchmarkSingleLongSuffixFail        16252         1996  -87.72%\r\n> BenchmarkSingleMatch                260793       136266  -47.75%\r\n>\r\n> benchmark                         old MB/s     new MB/s  speedup\r\n> BenchmarkSingleMaxSkipping           79.43      4041.57   50.88x\r\n> BenchmarkSingleLongSuffixFail        61.65       501.81    8.14x\r\n> BenchmarkSingleMatch                 57.52       110.08    1.91x\r\n>\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.com/6545049/diff/4001/src/pkg/strings/replace.go\r\n>>\r\n>> File src/pkg/strings/replace.go (right):\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.com/6545049/diff/4001/src/pkg/strings/replace.go#newcode366\r\n>>\r\n>> src/pkg/strings/replace.go:366: var buf []byte\r\n>> Call WriteString, like genericReplacer.Replace.\r\n>\r\n>\r\n> In this case, there is a considerable performance advantage if we can\r\n> avoid allocation when there is nothing to replace. This algorithm can\r\n> avoid reading most of the bytes in the source text, and allocating and\r\n> copying all the bytes when there's no match causes a 10x slowdown.\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.com/6545049/diff/4001/src/pkg/strings/search_test.go\r\n>>\r\n>> File src/pkg/strings/search_test.go (right):\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.com/6545049/diff/4001/src/pkg/strings/search_test.go#newcode46\r\n>>\r\n>> src/pkg/strings/search_test.go:46: {\"mississi\", [256]int{'i': 3, 'm':\r\n>\r\n> 7, 's':\r\n>>\r\n>> 1},\r\n>> I'd format it as\r\n>\r\n>\r\n>> {\r\n>>    \"mississi\",\r\n>>    [256]int{'i': 3, 'm': 7, 's': 1},\r\n>>    []int{15, 14, 13, 7, 11, 10, 7, 1},\r\n>> },\r\n>\r\n>\r\n> I split these into lines.\r\n>\r\n>\r\n>> and similarly below.\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.com/6545049/diff/4001/src/pkg/strings/search_test.go#newcode48\r\n>>\r\n>> src/pkg/strings/search_test.go:48: // From original paper.\r\n>> // From http://www.cs.utexas.edu/%7Emoore/publications/fstrpos.pdf\r\n>\r\n>\r\n> Done.\r\n>\r\n> https://codereview.appspot.com/6545049/\r\n\r\n\r\n\r\n-- \r\nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n650-335-5765\r\n",
			"disapproval": false,
			"date": "2012-09-21 06:03:04.917470",
			"approval": false
		},
		{
			"sender": "eric.d.eisner@gmail.com",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-09-21 01:19:34.631130",
			"approval": false
		},
		{
			"sender": "eric.d.eisner@gmail.com",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/21 02:00:23, nigeltao wrote:\n> Can we have before/after benchmark numbers?\n\nAdded to cl description:\n\nbenchmark                        old ns/op    new ns/op    delta\nBenchmarkSingleMaxSkipping          125889         2474  -98.03%\nBenchmarkSingleLongSuffixFail        16252         1996  -87.72%\nBenchmarkSingleMatch                260793       136266  -47.75%\n\nbenchmark                         old MB/s     new MB/s  speedup\nBenchmarkSingleMaxSkipping           79.43      4041.57   50.88x\nBenchmarkSingleLongSuffixFail        61.65       501.81    8.14x\nBenchmarkSingleMatch                 57.52       110.08    1.91x\n\n> \n> https://codereview.appspot.com/6545049/diff/4001/src/pkg/strings/replace.go\n> File src/pkg/strings/replace.go (right):\n> \n> https://codereview.appspot.com/6545049/diff/4001/src/pkg/strings/replace.go#newcode366\n> src/pkg/strings/replace.go:366: var buf []byte\n> Call WriteString, like genericReplacer.Replace.\n\nIn this case, there is a considerable performance advantage if we can avoid allocation when there is nothing to replace. This algorithm can avoid reading most of the bytes in the source text, and allocating and copying all the bytes when there's no match causes a 10x slowdown.\n> \n> https://codereview.appspot.com/6545049/diff/4001/src/pkg/strings/search_test.go\n> File src/pkg/strings/search_test.go (right):\n> \n> https://codereview.appspot.com/6545049/diff/4001/src/pkg/strings/search_test.go#newcode46\n> src/pkg/strings/search_test.go:46: {\"mississi\", [256]int{'i': 3, 'm': 7, 's':\n> 1},\n> I'd format it as\n> \n> {\n>   \"mississi\",\n>   [256]int{'i': 3, 'm': 7, 's': 1},\n>   []int{15, 14, 13, 7, 11, 10, 7, 1},\n> },\n\nI split these into lines.\n> \n> and similarly below.\n> \n> https://codereview.appspot.com/6545049/diff/4001/src/pkg/strings/search_test.go#newcode48\n> src/pkg/strings/search_test.go:48: // From original paper.\n> // From http://www.cs.utexas.edu/%7Emoore/publications/fstrpos.pdf\n\nDone.",
			"disapproval": false,
			"date": "2012-09-21 05:00:34.041940",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6545049/diff/4001/src/pkg/strings/search.go\nFile src/pkg/strings/search.go (right):\n\nhttp://codereview.appspot.com/6545049/diff/4001/src/pkg/strings/search.go#newcode18\nsrc/pkg/strings/search.go:18: \nMake the blank line a\n    //\nline, so the badCharSkip doc comment is connected to the declaration line. Similarly for goodSuffixSkip.\n\nhttp://codereview.appspot.com/6545049/diff/4001/src/pkg/strings/search.go#newcode48\nsrc/pkg/strings/search.go:48: f := &stringFinder{pattern: pattern,\nThe usual formatting style is:\n\nf := &stringFinder{\n  pattern: pattern,\n  goodSuffixSkip: make([]int, len(pattern)),\n}\n\nhttp://codereview.appspot.com/6545049/diff/9001/src/pkg/strings/search_test.go\nFile src/pkg/strings/search_test.go (right):\n\nhttp://codereview.appspot.com/6545049/diff/9001/src/pkg/strings/search_test.go#newcode24\nsrc/pkg/strings/search_test.go:24: {\"abcd\", \"abc\", -1},\nCan I also get\n{\"bcd\", \"abcd\", -1},\n\nhttp://codereview.appspot.com/6545049/diff/9001/src/pkg/strings/search_test.go#newcode46\nsrc/pkg/strings/search_test.go:46: {\"mississi\",\nThe usual style is for fields to line up, and for the closing } to align with the start of the line containing the opening {. Thus:\n\n{\n  \"mississi\",\n  [256]int{'i': 3, 'm': 7, 's': 1},\n  []int{15, 14, 13, 7, 11, 10, 7, 1},\n}",
			"disapproval": false,
			"date": "2012-09-25 12:18:37.920850",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6545049/diff/14001/src/pkg/strings/replace.go\nFile src/pkg/strings/replace.go (right):\n\nhttp://codereview.appspot.com/6545049/diff/14001/src/pkg/strings/replace.go#newcode354\nsrc/pkg/strings/replace.go:354: // one string to replace (and that string has more than one character).\ns/character/byte/\n\nhttp://codereview.appspot.com/6545049/diff/14001/src/pkg/strings/search.go\nFile src/pkg/strings/search.go (right):\n\nhttp://codereview.appspot.com/6545049/diff/14001/src/pkg/strings/search.go#newcode10\nsrc/pkg/strings/search.go:10: // http://www.cs.utexas.edu/~moore/publications/fstrpos.pdf\nIt may be worth pointing out that (IIUC), that PDF file uses 1-based array indexes, not 0-based.\n\nhttp://codereview.appspot.com/6545049/diff/14001/src/pkg/strings/search.go#newcode30\nsrc/pkg/strings/search.go:30: // shift the matching frame to align with the next suffix chunk.  does not\n\"does not occur again\" is not a complete sentence.\n\nhttp://codereview.appspot.com/6545049/diff/14001/src/pkg/strings/search.go#newcode32\nsrc/pkg/strings/search.go:32: // next occur at index 1, so goodSuffixSkip[3] == len(shift)+len(suffix)\ns/next occur/which next occurs (in right-to-left order)/ ?\n\nhttp://codereview.appspot.com/6545049/diff/14001/src/pkg/strings/search.go#newcode40\nsrc/pkg/strings/search.go:40: // from the back is found to be in position 4, the matching suffix is not\nIt's probably worth mentioning that the suffix is \"xabc\". But I think it's confusing how you say \"position 4\" and the suffix has length 4, but that's only a concidence because the suffix is derived as pattern[4+1:]. I know that you're referring to the examples from the actual Boyer-Moore paper, but is it possible to use a different example that's less coincidental? Add that example to search_test.go, but don't remove the Boyer-Moore examples.\n\nhttp://codereview.appspot.com/6545049/diff/14001/src/pkg/strings/search.go#newcode41\nsrc/pkg/strings/search.go:41: // found elsewhere in the pattern. However, the final \"abc\" is a prefix of\ns/final/leftmost/, unless I've totally confused myself and you mean rightmost.\n\nhttp://codereview.appspot.com/6545049/diff/14001/src/pkg/strings/search_test.go\nFile src/pkg/strings/search_test.go (right):\n\nhttp://codereview.appspot.com/6545049/diff/14001/src/pkg/strings/search_test.go#newcode12\nsrc/pkg/strings/search_test.go:12: var finderNextTests = []struct {\nI'd move this into the TestFinderNext func; they don't need to be global.\n\nfunc TestFinderNext(t *testing.T) {\n  testCases := []struct{\n    pat, text string\n    index     int\n  }{\n    // etc\n  }\n  for _, tc := range testCases {\n    // etc\n  }\n}\n\nSimilarly for tableCreationTests.\n\nhttp://codereview.appspot.com/6545049/diff/14001/src/pkg/strings/search_test.go#newcode38\nsrc/pkg/strings/search_test.go:38: t.Errorf(\"stringFinder(%q, %q) got %d, want %d\\n\", tc.pat, tc.text, got, want)\ns/stringFinder/StringFind/\n\nhttp://codereview.appspot.com/6545049/diff/14001/src/pkg/strings/search_test.go#newcode52\nsrc/pkg/strings/search_test.go:52: },\nCan I get some tests where the final byte in pattern doesn't occur anywhere else in pattern? For example: \"abc\", \"ababbc\".\n\nhttp://codereview.appspot.com/6545049/diff/14001/src/pkg/strings/search_test.go#newcode80\nsrc/pkg/strings/search_test.go:80: if len(tc.suf) != len(good) {\nWould it be easier to say\nif !reflect.DeepEqual(good, tc.suf) {\n  // etc\n}",
			"disapproval": false,
			"date": "2012-09-26 10:49:32.584520",
			"approval": false
		},
		{
			"sender": "eric.d.eisner@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Sep 25, 2012 at 5:18 AM,  <nigeltao@golang.org> wrote:\r\n>\r\n> http://codereview.appspot.com/6545049/diff/4001/src/pkg/strings/search.go\r\n> File src/pkg/strings/search.go (right):\r\n>\r\n> http://codereview.appspot.com/6545049/diff/4001/src/pkg/strings/search.go#newcode18\r\n> src/pkg/strings/search.go:18:\r\n> Make the blank line a\r\n>     //\r\n> line, so the badCharSkip doc comment is connected to the declaration\r\n> line. Similarly for goodSuffixSkip.\r\n\r\nDone\r\n>\r\n> http://codereview.appspot.com/6545049/diff/4001/src/pkg/strings/search.go#newcode48\r\n> src/pkg/strings/search.go:48: f := &stringFinder{pattern: pattern,\r\n> The usual formatting style is:\r\n>\r\n> f := &stringFinder{\r\n>   pattern: pattern,\r\n>   goodSuffixSkip: make([]int, len(pattern)),\r\n> }\r\n\r\nDone.\r\n>\r\n> http://codereview.appspot.com/6545049/diff/9001/src/pkg/strings/search_test.go\r\n> File src/pkg/strings/search_test.go (right):\r\n>\r\n> http://codereview.appspot.com/6545049/diff/9001/src/pkg/strings/search_test.go#newcode24\r\n> src/pkg/strings/search_test.go:24: {\"abcd\", \"abc\", -1},\r\n> Can I also get\r\n> {\"bcd\", \"abcd\", -1},\r\n\r\nYours is swapped, but I added both versions.\r\n>\r\n> http://codereview.appspot.com/6545049/diff/9001/src/pkg/strings/search_test.go#newcode46\r\n> src/pkg/strings/search_test.go:46: {\"mississi\",\r\n> The usual style is for fields to line up, and for the closing } to align\r\n> with the start of the line containing the opening {. Thus:\r\n>\r\n>\r\n> {\r\n>   \"mississi\",\r\n>   [256]int{'i': 3, 'm': 7, 's': 1},\r\n>   []int{15, 14, 13, 7, 11, 10, 7, 1},\r\n> }\r\n\r\nDone.\r\n>\r\n> http://codereview.appspot.com/6545049/\r\n",
			"disapproval": false,
			"date": "2012-09-25 14:50:18.489760",
			"approval": false
		},
		{
			"sender": "eric.d.eisner@gmail.com",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nOn 2012/09/26 10:49:32, nigeltao wrote:\n> http://codereview.appspot.com/6545049/diff/14001/src/pkg/strings/replace.go\n> File src/pkg/strings/replace.go (right):\n> \n> http://codereview.appspot.com/6545049/diff/14001/src/pkg/strings/replace.go#newcode354\n> src/pkg/strings/replace.go:354: // one string to replace (and that string has\n> more than one character).\n> s/character/byte/\n\nDone.\n> \n> http://codereview.appspot.com/6545049/diff/14001/src/pkg/strings/search.go\n> File src/pkg/strings/search.go (right):\n> \n> http://codereview.appspot.com/6545049/diff/14001/src/pkg/strings/search.go#newcode10\n> src/pkg/strings/search.go:10: //\n> http://www.cs.utexas.edu/%7Emoore/publications/fstrpos.pdf\n> It may be worth pointing out that (IIUC), that PDF file uses 1-based array\n> indexes, not 0-based.\n\nDone.\n> \n> http://codereview.appspot.com/6545049/diff/14001/src/pkg/strings/search.go#newcode30\n> src/pkg/strings/search.go:30: // shift the matching frame to align with the next\n> suffix chunk.  does not\n> \"does not occur again\" is not a complete sentence.\n\nOops, done.\n> \n> http://codereview.appspot.com/6545049/diff/14001/src/pkg/strings/search.go#newcode32\n> src/pkg/strings/search.go:32: // next occur at index 1, so goodSuffixSkip[3] ==\n> len(shift)+len(suffix)\n> s/next occur/which next occurs (in right-to-left order)/ ?\n\nDone.\n> \n> http://codereview.appspot.com/6545049/diff/14001/src/pkg/strings/search.go#newcode40\n> src/pkg/strings/search.go:40: // from the back is found to be in position 4, the\n> matching suffix is not\n> It's probably worth mentioning that the suffix is \"xabc\". But I think it's\n> confusing how you say \"position 4\" and the suffix has length 4, but that's only\n> a concidence because the suffix is derived as pattern[4+1:]. I know that you're\n> referring to the examples from the actual Boyer-Moore paper, but is it possible\n> to use a different example that's less coincidental? Add that example to\n> search_test.go, but don't remove the Boyer-Moore examples.\n\nI shifted the example down to index 3, so the numbers are all unique.\n> \n> http://codereview.appspot.com/6545049/diff/14001/src/pkg/strings/search.go#newcode41\n> src/pkg/strings/search.go:41: // found elsewhere in the pattern. However, the\n> final \"abc\" is a prefix of\n> s/final/leftmost/, unless I've totally confused myself and you mean rightmost.\n\nIt's \"abc\" as in the rightmost chunk of bytes in \"xxabc\". I would have said suffix, but that sounded confusing as the suffix of the suffix.\n> \n> http://codereview.appspot.com/6545049/diff/14001/src/pkg/strings/search_test.go\n> File src/pkg/strings/search_test.go (right):\n> \n> http://codereview.appspot.com/6545049/diff/14001/src/pkg/strings/search_test.go#newcode12\n> src/pkg/strings/search_test.go:12: var finderNextTests = []struct {\n> I'd move this into the TestFinderNext func; they don't need to be global.\n\nDone.\n> \n> func TestFinderNext(t *testing.T) {\n>   testCases := []struct{\n>     pat, text string\n>     index     int\n>   }{\n>     // etc\n>   }\n>   for _, tc := range testCases {\n>     // etc\n>   }\n> }\n> \n> Similarly for tableCreationTests.\n> \n> http://codereview.appspot.com/6545049/diff/14001/src/pkg/strings/search_test.go#newcode38\n> src/pkg/strings/search_test.go:38: t.Errorf(\"stringFinder(%q, %q) got %d, want\n> %d\\n\", tc.pat, tc.text, got, want)\n> s/stringFinder/StringFind/\n\nDone.\n> \n> http://codereview.appspot.com/6545049/diff/14001/src/pkg/strings/search_test.go#newcode52\n> src/pkg/strings/search_test.go:52: },\n> Can I get some tests where the final byte in pattern doesn't occur anywhere else\n> in pattern? For example: \"abc\", \"ababbc\".\n\nDone.\n> \n> http://codereview.appspot.com/6545049/diff/14001/src/pkg/strings/search_test.go#newcode80\n> src/pkg/strings/search_test.go:80: if len(tc.suf) != len(good) {\n> Would it be easier to say\n> if !reflect.DeepEqual(good, tc.suf) {\n>   // etc\n> }\n\nDone.",
			"disapproval": false,
			"date": "2012-09-26 15:43:15.866460",
			"approval": false
		},
		{
			"sender": "eric.d.eisner@gmail.com",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/27 07:16:40, nigeltao wrote:\n> https://codereview.appspot.com/6545049/diff/18002/src/pkg/strings/search.go\n> File src/pkg/strings/search.go (right):\n> \n> https://codereview.appspot.com/6545049/diff/18002/src/pkg/strings/search.go#newcode17\n> src/pkg/strings/search.go:17: // and the rightmost occurence of b in pattern. If\n> b is not in pattern,\n> Occurrence has two 'r's.\n\nDone.\n> \n> https://codereview.appspot.com/6545049/diff/18002/src/pkg/strings/search.go#newcode34\n> src/pkg/strings/search.go:34: // len(shift)+len(suffix) == 3+4 == 7.\n> s/len(shift)/shift/, since shift is an integer? Similarly below.\n\nDone.\n> \n> https://codereview.appspot.com/6545049/diff/18002/src/pkg/strings/search.go#newcode43\n> src/pkg/strings/search.go:43: // rightmost \"abc\" is a prefix of the whole\n> pattern, so goodSuffixSkip[3]\n> Maybe s/rightmost \"abc\"/rightmost \"abc\" (at position 6)/ to help explain why\n> shift == 6?\n\nDone.\n> \n> https://codereview.appspot.com/6545049/diff/18002/src/pkg/strings/search.go#newcode61\n> src/pkg/strings/search.go:61: // Do not set the last byte to have zero distance\n> to itself; finding this\n> Reword this to emphasize the subtle < instead of <= in the for loop?\n> \n> // The loop condition is < instead of <= so that the last byte does not have\n> // zero distance to itself. Finding this byte out of place implies that it is\n> // not in the last position.\n\nDone.\n> \n> https://codereview.appspot.com/6545049/diff/18002/src/pkg/strings/search.go#newcode75\n> src/pkg/strings/search.go:75: f.goodSuffixSkip[i] = lastPrefix + last - i\n> Add a comment that, in the terminology of the detailed comment above, lastPrefix\n> is shift and (last-i) is len(suffix)?\n\nDone. Would it be easier to follow if I inlined the detailed comments with the construction code instead of the struct?\n> \n> https://codereview.appspot.com/6545049/diff/18002/src/pkg/strings/search.go#newcode81\n> src/pkg/strings/search.go:81: f.goodSuffixSkip[last-suffixLen] = suffixLen +\n> last - i\n> Add a comment that, in the terminology of the detailed comment above, (last-i)\n> is shift and suffixLen is len(suffix), right?? Maybe rename suffixLen as\n> lenSuffix?\n\nDone.\n> \n> https://codereview.appspot.com/6545049/diff/18002/src/pkg/strings/search_test.go\n> File src/pkg/strings/search_test.go (right):\n> \n> https://codereview.appspot.com/6545049/diff/18002/src/pkg/strings/search_test.go#newcode89\n> src/pkg/strings/search_test.go:89: // if len(tc.suf) != len(good) {\n> Delete.\n\nDone.",
			"disapproval": false,
			"date": "2012-09-27 15:24:19.898840",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6545049/diff/18002/src/pkg/strings/search.go\nFile src/pkg/strings/search.go (right):\n\nhttps://codereview.appspot.com/6545049/diff/18002/src/pkg/strings/search.go#newcode17\nsrc/pkg/strings/search.go:17: // and the rightmost occurence of b in pattern. If b is not in pattern,\nOccurrence has two 'r's.\n\nhttps://codereview.appspot.com/6545049/diff/18002/src/pkg/strings/search.go#newcode34\nsrc/pkg/strings/search.go:34: // len(shift)+len(suffix) == 3+4 == 7.\ns/len(shift)/shift/, since shift is an integer? Similarly below.\n\nhttps://codereview.appspot.com/6545049/diff/18002/src/pkg/strings/search.go#newcode43\nsrc/pkg/strings/search.go:43: // rightmost \"abc\" is a prefix of the whole pattern, so goodSuffixSkip[3]\nMaybe s/rightmost \"abc\"/rightmost \"abc\" (at position 6)/ to help explain why shift == 6?\n\nhttps://codereview.appspot.com/6545049/diff/18002/src/pkg/strings/search.go#newcode61\nsrc/pkg/strings/search.go:61: // Do not set the last byte to have zero distance to itself; finding this\nReword this to emphasize the subtle < instead of <= in the for loop?\n\n// The loop condition is < instead of <= so that the last byte does not have\n// zero distance to itself. Finding this byte out of place implies that it is\n// not in the last position.\n\nhttps://codereview.appspot.com/6545049/diff/18002/src/pkg/strings/search.go#newcode75\nsrc/pkg/strings/search.go:75: f.goodSuffixSkip[i] = lastPrefix + last - i\nAdd a comment that, in the terminology of the detailed comment above, lastPrefix is shift and (last-i) is len(suffix)?\n\nhttps://codereview.appspot.com/6545049/diff/18002/src/pkg/strings/search.go#newcode81\nsrc/pkg/strings/search.go:81: f.goodSuffixSkip[last-suffixLen] = suffixLen + last - i\nAdd a comment that, in the terminology of the detailed comment above, (last-i) is shift and suffixLen is len(suffix), right?? Maybe rename suffixLen as lenSuffix?\n\nhttps://codereview.appspot.com/6545049/diff/18002/src/pkg/strings/search_test.go\nFile src/pkg/strings/search_test.go (right):\n\nhttps://codereview.appspot.com/6545049/diff/18002/src/pkg/strings/search_test.go#newcode89\nsrc/pkg/strings/search_test.go:89: // if len(tc.suf) != len(good) {\nDelete.",
			"disapproval": false,
			"date": "2012-09-27 07:16:40.523070",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\n\nSubmitting...\n\nhttps://codereview.appspot.com/6545049/diff/14002/src/pkg/strings/search.go\nFile src/pkg/strings/search.go (right):\n\nhttps://codereview.appspot.com/6545049/diff/14002/src/pkg/strings/search.go#newcode76\nsrc/pkg/strings/search.go:76: // lastPrefix is the shift, and (last-i) is len(suffix)\nAdd a full stop.\n\nhttps://codereview.appspot.com/6545049/diff/14002/src/pkg/strings/search.go#newcode83\nsrc/pkg/strings/search.go:83: // (last-i) is the shift, and lenSuffix is len(suffix)\nAdd a full stop.\n\nhttps://codereview.appspot.com/6545049/diff/14002/src/pkg/strings/search_test.go\nFile src/pkg/strings/search_test.go (right):\n\nhttps://codereview.appspot.com/6545049/diff/14002/src/pkg/strings/search_test.go#newcode82\nsrc/pkg/strings/search_test.go:82: t.Errorf(\"boyerMoore(%q) bad char table for byte %c got %d want %d\", tc.pattern, i, got, want)\ns/bad char table for byte %c/bad['%c']/",
			"disapproval": false,
			"date": "2012-09-28 02:32:57.254530",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"eric.d.eisner@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=0a0a751f0b74 ***\n\nstrings: implement a faster single-string Replacer\n\nThe string searching is implemented separately so other functions\nmay make use of it in the future.\n\nbenchmark                        old ns/op    new ns/op    delta\nBenchmarkSingleMaxSkipping          125889         2474  -98.03%\nBenchmarkSingleLongSuffixFail        16252         1996  -87.72%\nBenchmarkSingleMatch                260793       136266  -47.75%\n\nbenchmark                         old MB/s     new MB/s  speedup\nBenchmarkSingleMaxSkipping           79.43      4041.57   50.88x\nBenchmarkSingleLongSuffixFail        61.65       501.81    8.14x\nBenchmarkSingleMatch                 57.52       110.08    1.91x\n\nR=nigeltao\nCC=golang-dev\nhttp://codereview.appspot.com/6545049\n\nCommitter: Nigel Tao <nigeltao@golang.org>",
			"disapproval": false,
			"date": "2012-09-28 02:34:40.736850",
			"approval": false
		}
	],
	"owner_email": "eric.d.eisner@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Eric Roshan Eisner",
	"subject": "code review 6545049: strings: implement a faster single-string Replacer",
	"created": "2012-09-21 01:08:07.167120",
	"patchsets": [
		1,
		2001,
		4001,
		9001,
		14001,
		17002,
		18002,
		14002
	],
	"modified": "2012-09-28 02:34:40.736850",
	"closed": true,
	"issue": 6545049
}