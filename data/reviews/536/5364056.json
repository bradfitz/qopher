{
	"description": "gofix: add fix httputil",
	"cc": [
		"r@golang.org",
		"rsc@golang.org",
		"adg@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "This seems more intricate than is required. Did you look at url.go, which does a very similar thing?\n\nAlso you need a test.",
			"disapproval": false,
			"date": "2011-11-16 17:38:09.633588",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I forgot test for \"rename httputil variable to httputil_\". plz wait.",
			"disapproval": false,
			"date": "2011-11-17 01:04:31.859759",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlecode.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttp://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-16 10:10:43.161992",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Thanks for catching this one.\n",
			"disapproval": false,
			"date": "2011-11-16 22:32:32.426968",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlecode.com, r@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-17 00:53:38.136966",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"golang-dev@googlecode.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlecode.com, r@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-17 01:06:31.687910",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5364056/diff/4010/src/cmd/gofix/httputil.go\nFile src/cmd/gofix/httputil.go (right):\n\nhttp://codereview.appspot.com/5364056/diff/4010/src/cmd/gofix/httputil.go#newcode15\nsrc/cmd/gofix/httputil.go:15: \"2011-11-03\",\nOn 2011/11/18 23:31:01, rsc wrote:\n> This should be dated later, like 2011-11-18,\n> and then it will run after the package renaming fix\n> that turns all the \"http\" imports into \"net/http\" imports.\n> Then you don't have to worry about handling both.\n\nDone.\n\nhttp://codereview.appspot.com/5364056/diff/4010/src/cmd/gofix/httputil.go#newcode23\nsrc/cmd/gofix/httputil.go:23: var httpUtilFuncs = []string{\nOn 2011/11/18 23:31:01, rsc wrote:\n> s/U/u/\n\nDone.\n\nhttp://codereview.appspot.com/5364056/diff/4010/src/cmd/gofix/httputil.go#newcode42\nsrc/cmd/gofix/httputil.go:42: fix := func() {\nOn 2011/11/18 23:31:01, rsc wrote:\n> You can delete this whole function.\n> addImport should take care of the renaming now.\n\nDone.\n\nhttp://codereview.appspot.com/5364056/diff/4010/src/cmd/gofix/httputil.go#newcode60\nsrc/cmd/gofix/httputil.go:60: if isPkgDot(expr, \"http\", s) {\nOn 2011/11/18 23:31:01, rsc wrote:\n> Use \"net/http\" here.\n\nDone, But before 2011-11-03, they are using \"http\" to use http.NewClientConn().\n\nhttp://codereview.appspot.com/5364056/diff/4010/src/cmd/gofix/httputil.go#newcode61\nsrc/cmd/gofix/httputil.go:61: fix()\nOn 2011/11/18 23:31:01, rsc wrote:\n> if !fixed {\n>     fixed = true\n>     addImport(f, \"net/http/httputil\")\n> }\n\nDone.",
			"disapproval": false,
			"date": "2011-11-21 10:24:47.921081",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mattn.jp@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "looks good but it can be simplified a bit.\n\nhttp://codereview.appspot.com/5364056/diff/4010/src/cmd/gofix/httputil.go\nFile src/cmd/gofix/httputil.go (right):\n\nhttp://codereview.appspot.com/5364056/diff/4010/src/cmd/gofix/httputil.go#newcode15\nsrc/cmd/gofix/httputil.go:15: \"2011-11-03\",\nThis should be dated later, like 2011-11-18,\nand then it will run after the package renaming fix\nthat turns all the \"http\" imports into \"net/http\" imports.\nThen you don't have to worry about handling both.\n\nhttp://codereview.appspot.com/5364056/diff/4010/src/cmd/gofix/httputil.go#newcode23\nsrc/cmd/gofix/httputil.go:23: var httpUtilFuncs = []string{\ns/U/u/\n\nhttp://codereview.appspot.com/5364056/diff/4010/src/cmd/gofix/httputil.go#newcode42\nsrc/cmd/gofix/httputil.go:42: fix := func() {\nYou can delete this whole function.\naddImport should take care of the renaming now.\n\nhttp://codereview.appspot.com/5364056/diff/4010/src/cmd/gofix/httputil.go#newcode60\nsrc/cmd/gofix/httputil.go:60: if isPkgDot(expr, \"http\", s) {\nUse \"net/http\" here.\n\nhttp://codereview.appspot.com/5364056/diff/4010/src/cmd/gofix/httputil.go#newcode61\nsrc/cmd/gofix/httputil.go:61: fix()\nif !fixed {\n    fixed = true\n    addImport(f, \"net/http/httputil\")\n}\n\nhttp://codereview.appspot.com/5364056/diff/4010/src/cmd/gofix/httputil.go#newcode72\nsrc/cmd/gofix/httputil.go:72: if fixed && !usesImport(f, \"http\") {\nDelete.",
			"disapproval": false,
			"date": "2011-11-18 23:31:01.082052",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mattn.jp@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5364056/diff/10005/src/cmd/gofix/httputil.go\nFile src/cmd/gofix/httputil.go (right):\n\nhttp://codereview.appspot.com/5364056/diff/10005/src/cmd/gofix/httputil.go#newcode46\nsrc/cmd/gofix/httputil.go:46: if isPkgDot(expr, \"net/http\", s) {\nI'm sorry, I was confused by all the other uses of http.\nThis one is an identifier, not an import path, so it should\nbe plain \"http\".\n\nAs to your concern about older code, the fixes run in a\nspecified order (by date), so code that is importing \"http\"\nwill be fixed up to import \"net/http\" before this fix runs.\nYou don't need to worry about handling such older code,\nbecause the other fix will correct it before this file sees it.\n\nhttp://codereview.appspot.com/5364056/diff/10005/src/cmd/gofix/httputil_test.go\nFile src/cmd/gofix/httputil_test.go (right):\n\nhttp://codereview.appspot.com/5364056/diff/10005/src/cmd/gofix/httputil_test.go#newcode16\nsrc/cmd/gofix/httputil_test.go:16: import \"http\"\nDoes this test pass?\nSeems like it should not, since nothing should be\ndeleting an import of plain \"http\".\n\nhttp://codereview.appspot.com/5364056/diff/10005/src/cmd/gofix/httputil_test.go#newcode126\nsrc/cmd/gofix/httputil_test.go:126: import \"http\"\nSame.",
			"disapproval": false,
			"date": "2011-11-21 15:41:06.492911",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> 1. if using \"NewClientConn\" in \"http\", it should be fixed as\n> \"httputil.NewClientConn\". And add 'import \"net/http/httputil\"'.\n\nThis will never happen.  src/cmd/gofix/go1pkgrename.go will rewrite\nan import of \"http\" to \"net/http\" before the code you are writing\ngets called.  You only have to worry about \"net/http\", not \"http\".\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-22 03:09:41.043887",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5364056/diff/10005/src/cmd/gofix/httputil.go\nFile src/cmd/gofix/httputil.go (right):\n\nhttp://codereview.appspot.com/5364056/diff/10005/src/cmd/gofix/httputil.go#newcode46\nsrc/cmd/gofix/httputil.go:46: if isPkgDot(expr, \"net/http\", s) {\nI take back some part of old codes.\n\nI'm thinking that:\n\n1. if using \"NewClientConn\" in \"http\", it should be fixed as \"httputil.NewClientConn\". And add 'import \"net/http/httputil\"'.\n2. if using \"NewClientConn\" in \"net/http\", it should be fixed also. And then, if it don't need to import \"http\", gofix should remove 'import \"http\"' and 'import \"net/http\"'.\n3. At the last, if they use \"httputil\" as variable, it should be renamed to \"httputil_\".\n\n\nOn 2011/11/21 15:41:06, rsc wrote:\n> I'm sorry, I was confused by all the other uses of http.\n> This one is an identifier, not an import path, so it should\n> be plain \"http\".\n> \n> As to your concern about older code, the fixes run in a\n> specified order (by date), so code that is importing \"http\"\n> will be fixed up to import \"net/http\" before this fix runs.\n> You don't need to worry about handling such older code,\n> because the other fix will correct it before this file sees it.\n\nhttp://codereview.appspot.com/5364056/diff/10005/src/cmd/gofix/httputil_test.go\nFile src/cmd/gofix/httputil_test.go (right):\n\nhttp://codereview.appspot.com/5364056/diff/10005/src/cmd/gofix/httputil_test.go#newcode16\nsrc/cmd/gofix/httputil_test.go:16: import \"http\"\nShould be pass. This part is used to parse as the code. not compiled.\n\nOn 2011/11/21 15:41:06, rsc wrote:\n> Does this test pass?\n> Seems like it should not, since nothing should be\n> deleting an import of plain \"http\".",
			"disapproval": false,
			"date": "2011-11-22 03:06:11.732045",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hmm, test does not pass.\n\ngotest\nrm -f _test/main.a _gotest_.8\n8g   -o _gotest_.8 error.go filepath.go fix.go go1pkgrename.go htmlerr.go \nhttpfinalurl.go httpfs.go httpheaders.go httpserver.go httputil.go \nimagecolor.go imagenew.go iocopyn.go main.go mapdelete.go math.go \nnetdial.go netudpgroup.go oserrorstring.go osopen.go procattr.go reflect.go \nsignal.go sorthelpers.go sortslice.go stringssplit.go typecheck.go url.go \n error_test.go filepath_test.go go1pkgrename_test.go htmlerr_test.go \nhttpfinalurl_test.go httpfs_test.go httpheaders_test.go httpserver_test.go \nhttputil_test.go imagecolor_test.go imagenew_test.go import_test.go \niocopyn_test.go main_test.go mapdelete_test.go math_test.go netdial_test.go \nnetudpgroup_test.go oserrorstring_test.go osopen_test.go procattr_test.go \nreflect_test.go signal_test.go sorthelpers_test.go sortslice_test.go \nstringssplit_test.go url_test.go\nrm -f _test/main.a\ngopack grc _test/main.a _gotest_.8\nmapdelete.0:5:2: two-element map assignment with non-trivial first value\nmapdelete.0:8:2: two-element map assignment with non-false second value\nmapdelete.0:12:2: two-element map assignment with non-false second value\nmapdelete.0 output:5:2: two-element map assignment with non-trivial first \nvalue\nmapdelete.0 output:8:2: two-element map assignment with non-false second \nvalue\nmapdelete.0 output:12:2: two-element map assignment with non-false second \nvalue\nosopen.0:12:13: rewrote os.Open with O_CREATE but not O_TRUNC to os.Create\nosopen.0:13:2: rewrote os.Open to os.Create with permission not 0666\nosopen.0:14:13: rewrote os.Open with O_CREATE but not O_TRUNC to os.Create\nosopen.0:15:2: rewrote os.Open to os.Create with permission not 0666\ntestdata\\reflect.encode.go.in:299:7: cannot rewrite reflect type switch \ncase with non-reflect type interfaceOrPtrValue\n--- FAIL: main.TestRewrite (2.59 seconds)\nmain_test.go:90: httputil.3: incorrect output.\nmain_test.go:92: --- have\npackage main\n import \"net/http/httputil\"\n func f() {\nhttputil := \"hello httputil\"\nprintln(httputil)\nhttputil.DumpRequest(nil, false)\nhttputil.DumpRequestOut(nil, false)\nhttputil.DumpResponse(nil, false)\nhttputil.NewChunkedReader(nil)\nhttputil.NewChunkedWriter(nil)\nhttputil.NewClientConn(nil, nil)\nhttputil.NewProxyClientConn(nil, nil)\nhttputil.NewServerConn(nil, nil)\nhttputil.NewSingleHostReverseProxy(nil)\n}\n --- want\npackage main\n import \"net/http/httputil\"\n func f() {\nhttputil_ := \"hello httputil\"\nprintln(httputil_)\nhttputil.DumpRequest(nil, false)\nhttputil.DumpRequestOut(nil, false)\nhttputil.DumpResponse(nil, false)\nhttputil.NewChunkedReader(nil)\nhttputil.NewChunkedWriter(nil)\nhttputil.NewClientConn(nil, nil)\nhttputil.NewProxyClientConn(nil, nil)\nhttputil.NewServerConn(nil, nil)\nhttputil.NewSingleHostReverseProxy(nil)\n}\nmain_test.go:128: --- C:\\DOCUME~1\\U001672\\LOCALS~1\\Temp\\gofix087351910 2011-11-22 \n12:31:14 +0900\n+++ C:\\DOCUME~1\\U001672\\LOCALS~1\\Temp\\gofix463558797 2011-11-22 12:31:14 \n+0900\n@@ -3,8 +3,8 @@\n import \"net/http/httputil\"\n \n func f() {\n- httputil := \"hello httputil\"\n- println(httputil)\n+ httputil_ := \"hello httputil\"\n+ println(httputil_)\n httputil.DumpRequest(nil, false)\n httputil.DumpRequestOut(nil, false)\n httputil.DumpResponse(nil, false)\nFAIL\ngotest: \"./8.out.exe\" failed: exit status 1\nmingw32-make: *** [test] Error 2\n\n",
			"disapproval": false,
			"date": "2011-11-22 03:31:55.180016",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "But if remove the part \"// Remove the http import if no longer needed.\",\n'import \"http\"' will be ramained.\n\n----\ngotest\nrm -f _test/main.a _gotest_.8\n8g   -o _gotest_.8 error.go filepath.go fix.go go1pkgrename.go htmlerr.go \nhttpfinalurl.go httpfs.go httpheaders.go httpserver.go httputil.go \nimagecolor.go imagenew.go iocopyn.go main.go mapdelete.go math.go \nnetdial.go netudpgroup.go oserrorstring.go osopen.go procattr.go reflect.go \nsignal.go sorthelpers.go sortslice.go stringssplit.go syssleep.go \ntypecheck.go url.go  error_test.go filepath_test.go go1pkgrename_test.go \nhtmlerr_test.go httpfinalurl_test.go httpfs_test.go httpheaders_test.go \nhttpserver_test.go httputil_test.go imagecolor_test.go imagenew_test.go \nimport_test.go iocopyn_test.go main_test.go mapdelete_test.go math_test.go \nnetdial_test.go netudpgroup_test.go oserrorstring_test.go osopen_test.go \nprocattr_test.go reflect_test.go signal_test.go sorthelpers_test.go \nsortslice_test.go stringssplit_test.go syssleep_test.go url_test.go\nrm -f _test/main.a\ngopack grc _test/main.a _gotest_.8\nmapdelete.0:5:2: two-element map assignment with non-trivial first value\nmapdelete.0:8:2: two-element map assignment with non-false second value\nmapdelete.0:12:2: two-element map assignment with non-false second value\nmapdelete.0 output:5:2: two-element map assignment with non-trivial first \nvalue\nmapdelete.0 output:8:2: two-element map assignment with non-false second \nvalue\nmapdelete.0 output:12:2: two-element map assignment with non-false second \nvalue\nosopen.0:12:13: rewrote os.Open with O_CREATE but not O_TRUNC to os.Create\nosopen.0:13:2: rewrote os.Open to os.Create with permission not 0666\nosopen.0:14:13: rewrote os.Open with O_CREATE but not O_TRUNC to os.Create\nosopen.0:15:2: rewrote os.Open to os.Create with permission not 0666\ntestdata\\reflect.encode.go.in:299:7: cannot rewrite reflect type switch \ncase with non-reflect type interfaceOrPtrValue\n--- FAIL: main.TestRewrite (2.62 seconds)\nmain_test.go:90: httputil.0: incorrect output.\nmain_test.go:92: --- have\npackage main\n import (\n\"http\"\n\"net/http/httputil\"\n)\n func f() {\nhttputil.DumpRequest(nil, false)\nhttputil.DumpRequestOut(nil, false)\nhttputil.DumpResponse(nil, false)\nhttputil.NewChunkedReader(nil)\nhttputil.NewChunkedWriter(nil)\nhttputil.NewClientConn(nil, nil)\nhttputil.NewProxyClientConn(nil, nil)\nhttputil.NewServerConn(nil, nil)\nhttputil.NewSingleHostReverseProxy(nil)\n}\n --- want\npackage main\n import \"net/http/httputil\"\n func f() {\nhttputil.DumpRequest(nil, false)\nhttputil.DumpRequestOut(nil, false)\nhttputil.DumpResponse(nil, false)\nhttputil.NewChunkedReader(nil)\nhttputil.NewChunkedWriter(nil)\nhttputil.NewClientConn(nil, nil)\nhttputil.NewProxyClientConn(nil, nil)\nhttputil.NewServerConn(nil, nil)\nhttputil.NewSingleHostReverseProxy(nil)\n}\nmain_test.go:128: --- C:\\DOCUME~1\\U001672\\LOCALS~1\\Temp\\gofix479462102 2011-11-22 \n12:13:42 +0900\n+++ C:\\DOCUME~1\\U001672\\LOCALS~1\\Temp\\gofix400196157 2011-11-22 12:13:42 \n+0900\n@@ -1,9 +1,6 @@\n package main\n \n-import (\n- \"http\"\n- \"net/http/httputil\"\n-)\n+import \"net/http/httputil\"\n \n func f() {\n httputil.DumpRequest(nil, false)\n main_test.go:90: httputil.3: incorrect output.\nmain_test.go:92: --- have\npackage main\n import (\n\"http\"\n\"net/http/httputil\"\n)\n func f() {\nhttputil_ := \"hello httputil\"\nprintln(httputil_)\nhttputil.DumpRequest(nil, false)\nhttputil.DumpRequestOut(nil, false)\nhttputil.DumpResponse(nil, false)\nhttputil.NewChunkedReader(nil)\nhttputil.NewChunkedWriter(nil)\nhttputil.NewClientConn(nil, nil)\nhttputil.NewProxyClientConn(nil, nil)\nhttputil.NewServerConn(nil, nil)\nhttputil.NewSingleHostReverseProxy(nil)\n}\n --- want\npackage main\n import \"net/http/httputil\"\n func f() {\nhttputil_ := \"hello httputil\"\nprintln(httputil_)\nhttputil.DumpRequest(nil, false)\nhttputil.DumpRequestOut(nil, false)\nhttputil.DumpResponse(nil, false)\nhttputil.NewChunkedReader(nil)\nhttputil.NewChunkedWriter(nil)\nhttputil.NewClientConn(nil, nil)\nhttputil.NewProxyClientConn(nil, nil)\nhttputil.NewServerConn(nil, nil)\nhttputil.NewSingleHostReverseProxy(nil)\n}\nmain_test.go:128: --- C:\\DOCUME~1\\U001672\\LOCALS~1\\Temp\\gofix187961464 2011-11-22 \n12:13:42 +0900\n+++ C:\\DOCUME~1\\U001672\\LOCALS~1\\Temp\\gofix051125623 2011-11-22 12:13:42 \n+0900\n@@ -1,9 +1,6 @@\n package main\n \n-import (\n- \"http\"\n- \"net/http/httputil\"\n-)\n+import \"net/http/httputil\"\n \n func f() {\n httputil_ := \"hello httputil\"\nFAIL\ngotest: \"./8.out.exe\" failed: exit status 1\nmingw32-make: *** [test] Error 2\n\n",
			"disapproval": false,
			"date": "2011-11-22 03:16:05.536589",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "You should be able to remove the WalkBeforeAfter part.\naddImport takes care of that now.\n",
			"disapproval": false,
			"date": "2011-11-22 03:29:16.712561",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"mattn.jp@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-11-28 05:37:41.432419",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Nov 21, 2011 at 22:16, mattn <mattn.jp@gmail.com> wrote:\n> But if remove the part \"// Remove the http import if no longer needed.\",\n> 'import \"http\"' will be ramained.\n\nOnly in the tests.  The tests are written so that they are\ntesting only one fix at a time, so that tests don't start\nfailing because some other fixer changes.  So you should\nnot use import \"http\" in the test for this fix, because this\nfix will never receive that as input.\n\nHowever, if you write a simple file x.go\n\npackage main\n\nimport \"http\"\n\nfunc main() {\n    _ = http.DumpRequest\n}\n\nand then you run gofix x.go, you should find that\nthe import gets rewritten without your new fix\nneeding to do it.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-22 03:19:02.153158",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ah, sorry.\nI was confused too.\n\nthe test code \"httputil\" does run go1pkgrename. ok, I'll remove the part.\n\n",
			"disapproval": false,
			"date": "2011-11-22 03:19:35.371212",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Just uploaded.\n\nSorry, I took mistaken to \"hg change\" & \"hg upload\". So history of files seems to be removed.",
			"disapproval": false,
			"date": "2011-11-22 03:25:55.971877",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Nov 21, 2011 at 22:31, mattn <mattn.jp@gmail.com> wrote:\n> httputil_ := \"hello httputil\"\n> println(httputil_)\n\nThis is actually fine.  The import renamer only bothers\nto rename variables that appear at top level.\nIf you change the test to say\n\nfunc httputil() {}\n\ninstead of declaring a variable in main, then that\nfunction would get renamed to httputil_ correctly.\n\nFor url we renamed everything because there were\nlots of variables named url.  I don't expect there to\nbe any variables named httputil, so I don't think we\nneed such aggressive renaming.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-22 17:37:10.578828",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-28 01:43:20.282310",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"mattn.jp@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-12-12 23:38:01.722403",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mattn.jp@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=c5c060bae89c ***\n\ngofix: add fix httputil\n\nR=r, rsc, adg\nCC=golang-dev\nhttp://codereview.appspot.com/5364056\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2011-12-13 21:23:10.578927",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"mattn.jp@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please hg sync and upload.",
			"disapproval": false,
			"date": "2011-12-12 23:38:46.513497",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org, rsc@golang.org, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttp://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-13 12:23:54.810521",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Dec 13, 2011 at 20:27, mattn <mattn.jp@gmail.com> wrote:\n> Yes, But It don't include 'Author'.\n\nIt shouldn't.  The Author line is only there if\none person clpatches someone else's CL.\nThe default is that the Author is the current user.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-14 01:55:08.563391",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"mattn.jp@gmail.com",
				"r@golang.org",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hmm, codereview.py is broken for windows.\nIt should put 'Please take another look' on here instead.\n\nOn 2011/12/13 12:23:54, mattn wrote:\n> Hello mailto:r@golang.org, mailto:rsc@golang.org, mailto:adg@golang.org (cc:\n> mailto:golang-dev@googlegroups.com),\n> \n> I'd like you to review this change to\n> http://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-13 12:25:04.060667",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Dec 13, 2011 at 07:25,  <mattn.jp@gmail.com> wrote:\n> Hmm, codereview.py is broken for windows.\n> It should put 'Please take another look' on here instead.\n\nLook at $GOROOT/hg/codereview/cl.5364056.\nDoes it say 'Mailed: true' ?\n",
			"disapproval": false,
			"date": "2011-12-13 21:22:21.953173",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yes, But It don't include 'Author'.",
			"disapproval": false,
			"date": "2011-12-14 01:27:14.634816",
			"approval": false
		}
	],
	"owner_email": "mattn.jp@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mattn",
	"subject": "code review 5364056: gofix: add fix httputil",
	"created": "2011-11-16 10:09:42.062709",
	"patchsets": [
		1,
		2001,
		3003,
		4003,
		6,
		3007,
		4010,
		10005,
		13005,
		13007,
		15006,
		18006,
		19006,
		15007,
		18008,
		14007,
		22006,
		22007,
		23006,
		26008
	],
	"modified": "2011-12-14 01:15:49.802090",
	"closed": true,
	"issue": 5364056
}