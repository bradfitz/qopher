{
	"description": "exp/html: add some tokenizer and parser benchmarks.\n\n$GOROOT/src/pkg/exp/html/testdata/go1.html is an execution of the\n$GOROOT/doc/go1.html template by godoc.\n\nSample numbers on my linux,amd64 desktop:\nBenchmarkParser\t     500\t   4699198 ns/op\t  16.63 MB/s\n--- BENCH: BenchmarkParser\n        parse_test.go:409: 1 iterations, 14653 mallocs per iteration\n        parse_test.go:409: 100 iterations, 14651 mallocs per iteration\n        parse_test.go:409: 500 iterations, 14651 mallocs per iteration\nBenchmarkRawLevelTokenizer\t    2000\t    904957 ns/op\t  86.37 MB/s\n--- BENCH: BenchmarkRawLevelTokenizer\n        token_test.go:657: 1 iterations, 28 mallocs per iteration\n        token_test.go:657: 100 iterations, 28 mallocs per iteration\n        token_test.go:657: 2000 iterations, 28 mallocs per iteration\nBenchmarkLowLevelTokenizer\t    2000\t   1134300 ns/op\t  68.91 MB/s\n--- BENCH: BenchmarkLowLevelTokenizer\n        token_test.go:657: 1 iterations, 41 mallocs per iteration\n        token_test.go:657: 100 iterations, 41 mallocs per iteration\n        token_test.go:657: 2000 iterations, 41 mallocs per iteration\nBenchmarkHighLevelTokenizer\t    1000\t   2096179 ns/op\t  37.29 MB/s\n--- BENCH: BenchmarkHighLevelTokenizer\n        token_test.go:657: 1 iterations, 6616 mallocs per iteration\n        token_test.go:657: 100 iterations, 6616 mallocs per iteration\n        token_test.go:657: 1000 iterations, 6616 mallocs per iteration",
	"cc": [
		"rsc@golang.org",
		"andybalholm@gmail.com",
		"golang-dev@googlegroups.com",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI\n\nhttp://codereview.appspot.com/6257067/diff/5002/src/pkg/exp/html/parse_test.go\nFile src/pkg/exp/html/parse_test.go (right):\n\nhttp://codereview.appspot.com/6257067/diff/5002/src/pkg/exp/html/parse_test.go#newcode393\nsrc/pkg/exp/html/parse_test.go:393: b.StopTimer()\nDelete.\n\nhttp://codereview.appspot.com/6257067/diff/5002/src/pkg/exp/html/parse_test.go#newcode403\nsrc/pkg/exp/html/parse_test.go:403: b.StartTimer()\ns/Start/Reset/\n\nhttp://codereview.appspot.com/6257067/diff/5002/src/pkg/exp/html/parse_test.go#newcode407\nsrc/pkg/exp/html/parse_test.go:407: runtime.ReadMemStats(&ms)\ninsert before this line:\nb.StopTimer()",
			"disapproval": false,
			"date": "2012-05-30 02:10:37.323887",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: andybalholm@gmail.com, golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-05-29 07:49:56.103804",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6257067/diff/5001/src/pkg/exp/html/token_test.go\nFile src/pkg/exp/html/token_test.go (right):\n\nhttp://codereview.appspot.com/6257067/diff/5001/src/pkg/exp/html/token_test.go#newcode606\nsrc/pkg/exp/html/token_test.go:606: s := string(bytes)\nwhy do you go through strings? why not (after change bytes to b)\nb.SetBytes(int64(len(b))\nand then\nz := NewTokenizer(bytes.NewBuffer(b))",
			"disapproval": false,
			"date": "2012-05-29 17:15:44.837143",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I added a malloc count to the benchmarks. Russ, can you check that I'm doing it properly?\n\nSample output:\n\nBenchmarkParser\t     500\t   4699198 ns/op\t  16.63 MB/s\n--- BENCH: BenchmarkParser\n\tparse_test.go:409: 1 iterations, 14653 mallocs per iteration\n\tparse_test.go:409: 100 iterations, 14651 mallocs per iteration\n\tparse_test.go:409: 500 iterations, 14651 mallocs per iteration\nBenchmarkRawLevelTokenizer\t    2000\t    904957 ns/op\t  86.37 MB/s\n--- BENCH: BenchmarkRawLevelTokenizer\n\ttoken_test.go:657: raw level: 1 iterations, 28 mallocs per iteration\n\ttoken_test.go:657: raw level: 100 iterations, 28 mallocs per iteration\n\ttoken_test.go:657: raw level: 2000 iterations, 28 mallocs per iteration\nBenchmarkLowLevelTokenizer\t    2000\t   1134300 ns/op\t  68.91 MB/s\n--- BENCH: BenchmarkLowLevelTokenizer\n\ttoken_test.go:657: low level: 1 iterations, 41 mallocs per iteration\n\ttoken_test.go:657: low level: 100 iterations, 41 mallocs per iteration\n\ttoken_test.go:657: low level: 2000 iterations, 41 mallocs per iteration\nBenchmarkHighLevelTokenizer\t    1000\t   2096179 ns/op\t  37.29 MB/s\n--- BENCH: BenchmarkHighLevelTokenizer\n\ttoken_test.go:657: high level: 1 iterations, 6616 mallocs per iteration\n\ttoken_test.go:657: high level: 100 iterations, 6616 mallocs per iteration\n\ttoken_test.go:657: high level: 1000 iterations, 6616 mallocs per iteration\n\nhttp://codereview.appspot.com/6257067/diff/5001/src/pkg/exp/html/token_test.go\nFile src/pkg/exp/html/token_test.go (right):\n\nhttp://codereview.appspot.com/6257067/diff/5001/src/pkg/exp/html/token_test.go#newcode606\nsrc/pkg/exp/html/token_test.go:606: s := string(bytes)\nOn 2012/05/29 17:15:45, r wrote:\n> why do you go through strings? why not (after change bytes to b)\n> b.SetBytes(int64(len(b))\n> and then\n> z := NewTokenizer(bytes.NewBuffer(b))\n\nDone.",
			"disapproval": false,
			"date": "2012-05-30 00:18:52.142901",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=2f24d335beeb ***\n\nexp/html: add some tokenizer and parser benchmarks.\n\n$GOROOT/src/pkg/exp/html/testdata/go1.html is an execution of the\n$GOROOT/doc/go1.html template by godoc.\n\nSample numbers on my linux,amd64 desktop:\nBenchmarkParser\t     500\t   4699198 ns/op\t  16.63 MB/s\n--- BENCH: BenchmarkParser\n        parse_test.go:409: 1 iterations, 14653 mallocs per iteration\n        parse_test.go:409: 100 iterations, 14651 mallocs per iteration\n        parse_test.go:409: 500 iterations, 14651 mallocs per iteration\nBenchmarkRawLevelTokenizer\t    2000\t    904957 ns/op\t  86.37 MB/s\n--- BENCH: BenchmarkRawLevelTokenizer\n        token_test.go:657: 1 iterations, 28 mallocs per iteration\n        token_test.go:657: 100 iterations, 28 mallocs per iteration\n        token_test.go:657: 2000 iterations, 28 mallocs per iteration\nBenchmarkLowLevelTokenizer\t    2000\t   1134300 ns/op\t  68.91 MB/s\n--- BENCH: BenchmarkLowLevelTokenizer\n        token_test.go:657: 1 iterations, 41 mallocs per iteration\n        token_test.go:657: 100 iterations, 41 mallocs per iteration\n        token_test.go:657: 2000 iterations, 41 mallocs per iteration\nBenchmarkHighLevelTokenizer\t    1000\t   2096179 ns/op\t  37.29 MB/s\n--- BENCH: BenchmarkHighLevelTokenizer\n        token_test.go:657: 1 iterations, 6616 mallocs per iteration\n        token_test.go:657: 100 iterations, 6616 mallocs per iteration\n        token_test.go:657: 1000 iterations, 6616 mallocs per iteration\n\nR=rsc\nCC=andybalholm, golang-dev, r\nhttp://codereview.appspot.com/6257067",
			"disapproval": false,
			"date": "2012-05-30 03:00:47.333169",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Submitting...\n\nhttp://codereview.appspot.com/6257067/diff/5002/src/pkg/exp/html/parse_test.go\nFile src/pkg/exp/html/parse_test.go (right):\n\nhttp://codereview.appspot.com/6257067/diff/5002/src/pkg/exp/html/parse_test.go#newcode393\nsrc/pkg/exp/html/parse_test.go:393: b.StopTimer()\nOn 2012/05/30 02:10:37, rsc wrote:\n> Delete.\n\nDone.\n\nhttp://codereview.appspot.com/6257067/diff/5002/src/pkg/exp/html/parse_test.go#newcode403\nsrc/pkg/exp/html/parse_test.go:403: b.StartTimer()\nOn 2012/05/30 02:10:37, rsc wrote:\n> s/Start/Reset/\n\nDone.\n\nhttp://codereview.appspot.com/6257067/diff/5002/src/pkg/exp/html/parse_test.go#newcode407\nsrc/pkg/exp/html/parse_test.go:407: runtime.ReadMemStats(&ms)\nOn 2012/05/30 02:10:37, rsc wrote:\n> insert before this line:\n> b.StopTimer()\n\nDone.",
			"disapproval": false,
			"date": "2012-05-30 02:58:00.012804",
			"approval": false
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 6257067: exp/html: add some tokenizer and parser benchmarks.",
	"created": "2012-05-29 07:49:31.127634",
	"patchsets": [
		1,
		2001,
		5001,
		9001,
		5002,
		2002,
		3004
	],
	"modified": "2012-05-30 03:00:50.331118",
	"closed": true,
	"issue": 6257067
}