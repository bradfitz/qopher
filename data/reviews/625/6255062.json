{
	"description": "exp/html/atom: new package.\n\n50% fewer mallocs in HTML tokenization, resulting in 25% fewer mallocs\nin parsing go1.html.\n\nMaking the parser use integer comparisons instead of string comparisons\nwill be a follow-up CL, to be co-ordinated with Andy Balholm's work.\n\nexp/html benchmarks before/after:\n\nBenchmarkParser\t     500\t   4754294 ns/op\t  16.44 MB/s\n        parse_test.go:409: 500 iterations, 14651 mallocs per iteration\nBenchmarkRawLevelTokenizer\t    2000\t    903481 ns/op\t  86.51 MB/s\n        token_test.go:678: 2000 iterations, 28 mallocs per iteration\nBenchmarkLowLevelTokenizer\t    2000\t   1260485 ns/op\t  62.01 MB/s\n        token_test.go:678: 2000 iterations, 41 mallocs per iteration\nBenchmarkHighLevelTokenizer\t    1000\t   2165964 ns/op\t  36.09 MB/s\n        token_test.go:678: 1000 iterations, 6616 mallocs per iteration\n\nBenchmarkParser\t     500\t   4664912 ns/op\t  16.76 MB/s\n        parse_test.go:409: 500 iterations, 11266 mallocs per iteration\nBenchmarkRawLevelTokenizer\t    2000\t    903065 ns/op\t  86.55 MB/s\n        token_test.go:678: 2000 iterations, 28 mallocs per iteration\nBenchmarkLowLevelTokenizer\t    2000\t   1260032 ns/op\t  62.03 MB/s\n        token_test.go:678: 2000 iterations, 41 mallocs per iteration\nBenchmarkHighLevelTokenizer\t    1000\t   2143356 ns/op\t  36.47 MB/s\n        token_test.go:678: 1000 iterations, 3231 mallocs per iteration",
	"cc": [
		"r@golang.org",
		"rsc@golang.org",
		"rogpeppe@gmail.com",
		"andybalholm@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\ni was stupidly assuming there was some concept of version in a web standard. i apologize profusely for being so fussy and old-fashioned and bloody-minded. still, i wouldn't mind a date or something (the document at least has a date) so there's some way to know whether the file needs updating.\n\nhttp://codereview.appspot.com/6255062/diff/3008/src/pkg/exp/html/atom/gen.go\nFile src/pkg/exp/html/atom/gen.go (right):\n\nhttp://codereview.appspot.com/6255062/diff/3008/src/pkg/exp/html/atom/gen.go#newcode348\nsrc/pkg/exp/html/atom/gen.go:348: if cap && c >= 'a' && c <= 'z' {\nif cap && 'a' <= c && c <= 'z' (as stated last round)",
			"disapproval": false,
			"date": "2012-05-31 04:06:58.231184",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org, rsc@golang.org (cc: andybalholm@gmail.com, golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-05-30 07:55:12.600974",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6255062/diff/3006/src/pkg/exp/html/htmlatom/table.go\nFile src/pkg/exp/html/htmlatom/table.go (right):\n\nhttp://codereview.appspot.com/6255062/diff/3006/src/pkg/exp/html/htmlatom/table.go#newcode602\nsrc/pkg/exp/html/htmlatom/table.go:602: var bTable = [][]byte{\nOn 2012/05/30 11:56:39, rog wrote:\n> it seems to me that the only reason this table is here is so we can use\n> bytes.Compare in the binary search. if we implemented compare(string, []byte)\n> int, then couldn't we lose this?\n\nTrue, but for now I think it's simpler to re-use bytes.Compare. I'm open to being convinced otherwise, though.",
			"disapproval": false,
			"date": "2012-05-30 12:51:19.521493",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL. The package was renamed to exp/html/atom, and it now has its own func compare(s []byte, t string) int.",
			"disapproval": false,
			"date": "2012-05-31 00:16:26.896817",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6255062/diff/3006/src/pkg/exp/html/htmlatom/table.go\nFile src/pkg/exp/html/htmlatom/table.go (right):\n\nhttp://codereview.appspot.com/6255062/diff/3006/src/pkg/exp/html/htmlatom/table.go#newcode602\nsrc/pkg/exp/html/htmlatom/table.go:602: var bTable = [][]byte{\nit seems to me that the only reason this table is here is so we can use bytes.Compare in the binary search. if we implemented compare(string, []byte) int, then couldn't we lose this?",
			"disapproval": false,
			"date": "2012-05-30 11:56:39.814794",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6255062/diff/3006/src/pkg/exp/html/htmlatom/atom.go\nFile src/pkg/exp/html/htmlatom/atom.go (right):\n\nhttp://codereview.appspot.com/6255062/diff/3006/src/pkg/exp/html/htmlatom/atom.go#newcode54\nsrc/pkg/exp/html/htmlatom/atom.go:54: cmp := bytes.Compare(s, bTable[mid])\nPlease write a func compare(s []byte, t string) int.\nIt's trivial and avoids a second giant table.",
			"disapproval": false,
			"date": "2012-05-30 13:04:30.899146",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "why not call this package atom in exp/html/atom?",
			"disapproval": false,
			"date": "2012-05-30 14:45:49.014160",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=0a0a55f2d61f ***\n\nexp/html/atom: new package.\n\n50% fewer mallocs in HTML tokenization, resulting in 25% fewer mallocs\nin parsing go1.html.\n\nMaking the parser use integer comparisons instead of string comparisons\nwill be a follow-up CL, to be co-ordinated with Andy Balholm's work.\n\nexp/html benchmarks before/after:\n\nBenchmarkParser\t     500\t   4754294 ns/op\t  16.44 MB/s\n        parse_test.go:409: 500 iterations, 14651 mallocs per iteration\nBenchmarkRawLevelTokenizer\t    2000\t    903481 ns/op\t  86.51 MB/s\n        token_test.go:678: 2000 iterations, 28 mallocs per iteration\nBenchmarkLowLevelTokenizer\t    2000\t   1260485 ns/op\t  62.01 MB/s\n        token_test.go:678: 2000 iterations, 41 mallocs per iteration\nBenchmarkHighLevelTokenizer\t    1000\t   2165964 ns/op\t  36.09 MB/s\n        token_test.go:678: 1000 iterations, 6616 mallocs per iteration\n\nBenchmarkParser\t     500\t   4664912 ns/op\t  16.76 MB/s\n        parse_test.go:409: 500 iterations, 11266 mallocs per iteration\nBenchmarkRawLevelTokenizer\t    2000\t    903065 ns/op\t  86.55 MB/s\n        token_test.go:678: 2000 iterations, 28 mallocs per iteration\nBenchmarkLowLevelTokenizer\t    2000\t   1260032 ns/op\t  62.03 MB/s\n        token_test.go:678: 2000 iterations, 41 mallocs per iteration\nBenchmarkHighLevelTokenizer\t    1000\t   2143356 ns/op\t  36.47 MB/s\n        token_test.go:678: 1000 iterations, 3231 mallocs per iteration\n\nR=r, rsc, rogpeppe\nCC=andybalholm, golang-dev\nhttp://codereview.appspot.com/6255062",
			"disapproval": false,
			"date": "2012-05-31 05:37:34.838578",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6255062/diff/8003/src/pkg/exp/html/atom/atom.go\nFile src/pkg/exp/html/atom/atom.go (right):\n\nhttp://codereview.appspot.com/6255062/diff/8003/src/pkg/exp/html/atom/atom.go#newcode32\nsrc/pkg/exp/html/atom/atom.go:32: // Lookup returns the atom whose string representation is equal to s.\ns/string representation/name/?\nanyway it's not a string\n\nhttp://codereview.appspot.com/6255062/diff/8003/src/pkg/exp/html/atom/atom.go#newcode44\nsrc/pkg/exp/html/atom/atom.go:44: }\nx := s[0]\nif x > 'z' {\n  return 0\n}\nreturn oneByteAtoms[x-'a']\n\nhttp://codereview.appspot.com/6255062/diff/8003/src/pkg/exp/html/atom/atom.go#newcode50\nsrc/pkg/exp/html/atom/atom.go:50: mid := lo + (hi-lo)/2\nwhy not\nmid := (lo + hi)/2\n\nhttp://codereview.appspot.com/6255062/diff/8003/src/pkg/exp/html/atom/atom.go#newcode52\nsrc/pkg/exp/html/atom/atom.go:52: if cmp == 0 {\nfold the computation into the if clause\n\nhttp://codereview.appspot.com/6255062/diff/8003/src/pkg/exp/html/atom/atom.go#newcode64\nsrc/pkg/exp/html/atom/atom.go:64: // equivalent to string(s), but may require fewer allocations.\n, but may be more efficient.\n\nhttp://codereview.appspot.com/6255062/diff/8003/src/pkg/exp/html/atom/atom.go#newcode94\nsrc/pkg/exp/html/atom/atom.go:94: return 0\nhow about return len(s) - len(t)\nyou don't get +-1 but i don't think it matters\n\nhttp://codereview.appspot.com/6255062/diff/8003/src/pkg/exp/html/atom/gen.go\nFile src/pkg/exp/html/atom/gen.go (right):\n\nhttp://codereview.appspot.com/6255062/diff/8003/src/pkg/exp/html/atom/gen.go#newcode19\nsrc/pkg/exp/html/atom/gen.go:19: // elements are listed in http://www.whatwg.org/specs/web-apps/current-work/#elements-1\ncan you derive this by reading the web? also versioning info in table.go would be worthwhile\n\nhttp://codereview.appspot.com/6255062/diff/8003/src/pkg/exp/html/atom/gen.go#newcode344\nsrc/pkg/exp/html/atom/gen.go:344: if (c < 'a' || c > 'z') && (c < '0' || c > '9') {\ni like to write these so the range is obvious\nc < 'a' && 'z' < c\netc.\n\nthat said, isn't this just testing for '-'?\n\nhttp://codereview.appspot.com/6255062/diff/8003/src/pkg/exp/html/atom/gen.go#newcode349\nsrc/pkg/exp/html/atom/gen.go:349: c &^= 0x20\ni get yelled at for this, and so you will be yelled at too.\nc -= 'a' - 'A'\n\nhttp://codereview.appspot.com/6255062/diff/8003/src/pkg/exp/html/atom/table.go\nFile src/pkg/exp/html/atom/table.go (right):\n\nhttp://codereview.appspot.com/6255062/diff/8003/src/pkg/exp/html/atom/table.go#newcode4\nsrc/pkg/exp/html/atom/table.go:4: A                Atom = 1\nis there a reason not to let iota do the work for you? i know it's generated, but still. that will also make it easy to avoid the need for gofmt",
			"disapproval": false,
			"date": "2012-05-31 00:32:35.700443",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"rogpeppe@gmail.com",
				"andybalholm@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6255062/diff/8003/src/pkg/exp/html/atom/atom.go\nFile src/pkg/exp/html/atom/atom.go (right):\n\nhttp://codereview.appspot.com/6255062/diff/8003/src/pkg/exp/html/atom/atom.go#newcode32\nsrc/pkg/exp/html/atom/atom.go:32: // Lookup returns the atom whose string representation is equal to s.\nOn 2012/05/31 00:32:36, r wrote:\n> s/string representation/name/?\n> anyway it's not a string\n\nDone.\n\nhttp://codereview.appspot.com/6255062/diff/8003/src/pkg/exp/html/atom/atom.go#newcode44\nsrc/pkg/exp/html/atom/atom.go:44: }\nOn 2012/05/31 00:32:36, r wrote:\n> x := s[0]\n> if x > 'z' {\n>   return 0\n> }\n> return oneByteAtoms[x-'a']\n\nDone, after correcting for underflow if x < 'a'.\n\nhttp://codereview.appspot.com/6255062/diff/8003/src/pkg/exp/html/atom/atom.go#newcode50\nsrc/pkg/exp/html/atom/atom.go:50: mid := lo + (hi-lo)/2\nOn 2012/05/31 00:32:36, r wrote:\n> why not\n> mid := (lo + hi)/2\n\nThe sort.Search code does this to avoid overflow, but (lo + hi)/2 will work here. Done.\n\nhttp://codereview.appspot.com/6255062/diff/8003/src/pkg/exp/html/atom/atom.go#newcode52\nsrc/pkg/exp/html/atom/atom.go:52: if cmp == 0 {\nOn 2012/05/31 00:32:36, r wrote:\n> fold the computation into the if clause\n\nDone.\n\nhttp://codereview.appspot.com/6255062/diff/8003/src/pkg/exp/html/atom/atom.go#newcode64\nsrc/pkg/exp/html/atom/atom.go:64: // equivalent to string(s), but may require fewer allocations.\nOn 2012/05/31 00:32:36, r wrote:\n> , but may be more efficient.\n\nDone.\n\nhttp://codereview.appspot.com/6255062/diff/8003/src/pkg/exp/html/atom/atom.go#newcode94\nsrc/pkg/exp/html/atom/atom.go:94: return 0\nOn 2012/05/31 00:32:36, r wrote:\n> how about return len(s) - len(t)\n> you don't get +-1 but i don't think it matters\n\nDone.\n\nhttp://codereview.appspot.com/6255062/diff/8003/src/pkg/exp/html/atom/gen.go\nFile src/pkg/exp/html/atom/gen.go (right):\n\nhttp://codereview.appspot.com/6255062/diff/8003/src/pkg/exp/html/atom/gen.go#newcode19\nsrc/pkg/exp/html/atom/gen.go:19: // elements are listed in http://www.whatwg.org/specs/web-apps/current-work/#elements-1\nOn 2012/05/31 00:32:36, r wrote:\n> can you derive this by reading the web? also versioning info in table.go would\n> be worthwhile\n\nI guess it's possible, but I'm not sure if introducing more moving parts is worth it.\n\nAs for versioning info, what do you want, exactly?\n\nhttp://codereview.appspot.com/6255062/diff/8003/src/pkg/exp/html/atom/gen.go#newcode344\nsrc/pkg/exp/html/atom/gen.go:344: if (c < 'a' || c > 'z') && (c < '0' || c > '9') {\nOn 2012/05/31 00:32:36, r wrote:\n> i like to write these so the range is obvious\n> c < 'a' && 'z' < c\n> etc.\n> \n> that said, isn't this just testing for '-'?\n\nDone.\n\nhttp://codereview.appspot.com/6255062/diff/8003/src/pkg/exp/html/atom/gen.go#newcode349\nsrc/pkg/exp/html/atom/gen.go:349: c &^= 0x20\nOn 2012/05/31 00:32:36, r wrote:\n> i get yelled at for this, and so you will be yelled at too.\n> c -= 'a' - 'A'\n\nDone.\n\nhttp://codereview.appspot.com/6255062/diff/8003/src/pkg/exp/html/atom/table.go\nFile src/pkg/exp/html/atom/table.go (right):\n\nhttp://codereview.appspot.com/6255062/diff/8003/src/pkg/exp/html/atom/table.go#newcode4\nsrc/pkg/exp/html/atom/table.go:4: A                Atom = 1\nOn 2012/05/31 00:32:36, r wrote:\n> is there a reason not to let iota do the work for you? i know it's generated,\n> but still. that will also make it easy to avoid the need for gofmt\n\nPersonally, I prefer it the way it is, plus I'd like to experiment with different lookup algorithms that change the ordering (but I'd still present the A, Abbr, Accept, etc. constants in alphabetical order in godoc).",
			"disapproval": false,
			"date": "2012-05-31 01:04:43.947660",
			"approval": false
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 6255062: exp/html/htmlatom: new package.",
	"created": "2012-05-30 07:52:29.065719",
	"patchsets": [
		1,
		2001,
		5001,
		3006,
		8003,
		3008,
		3010
	],
	"modified": "2012-05-31 05:37:40.106941",
	"closed": true,
	"issue": 6255062
}