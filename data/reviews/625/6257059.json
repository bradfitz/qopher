{
	"description": "path/filepath: implement documented SkipDir behavior\n\nCurrently walk() doesn't check for err == SkipDir when iterating\na directory list, but such promise is made in the docs for WalkFunc.\n\nFixes issue 3486.",
	"cc": [
		"rsc@golang.org",
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "befelemepeseveze@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "2012/5/26  <r@golang.org>:\r\n> the issue documents a test case. it would be nice to add that validation\r\n> to the test for this function.\r\n\r\nDone. I'm guess it's much more lines than you are going to like.\r\n\r\nUpdated CL follows.\r\n\r\n-j\r\n",
			"disapproval": false,
			"date": "2012-05-27 19:44:21.670513",
			"approval": false
		},
		{
			"sender": "befelemepeseveze@gmail.com",
			"recipients": [
				"befelemepeseveze@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-05-30 11:02:09.907597",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It seems like you can Walk($GOROOT), make the function return SkipDir\r\nfor \"lib\", and make sure that \"src\" is still considered.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-29 17:11:25.761354",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"befelemepeseveze@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6257059/diff/1003/src/pkg/path/filepath/path_test.go\nFile src/pkg/path/filepath/path_test.go (right):\n\nhttp://codereview.appspot.com/6257059/diff/1003/src/pkg/path/filepath/path_test.go#newcode879\nsrc/pkg/path/filepath/path_test.go:879: var tempDir string\ni can't believe it's this hard to test.",
			"disapproval": false,
			"date": "2012-05-29 16:49:22.471094",
			"approval": false
		},
		{
			"sender": "befelemepeseveze@gmail.com",
			"recipients": [
				"befelemepeseveze@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6257059/diff/13001/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttp://codereview.appspot.com/6257059/diff/13001/src/pkg/path/filepath/path.go#newcode324\nsrc/pkg/path/filepath/path.go:324: if err != nil && (err != SkipDir || !fileInfo.IsDir()) {\nOn 2012/05/30 17:44:27, r wrote:\n> this is hard to read. break it up and rearrange\n> if err != nil {\n>   if !fileInfo.IsDir() || err != SkipDir {\n>     return err\n>   }\n> }\n\nDone.",
			"disapproval": false,
			"date": "2012-05-31 12:04:33.886443",
			"approval": false
		},
		{
			"sender": "befelemepeseveze@gmail.com",
			"recipients": [
				"befelemepeseveze@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-05-26 11:25:20.526073",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"befelemepeseveze@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "the issue documents a test case. it would be nice to add that validation to the test for this function.",
			"disapproval": false,
			"date": "2012-05-26 17:24:02.883670",
			"approval": false
		},
		{
			"sender": "befelemepeseveze@gmail.com",
			"recipients": [
				"befelemepeseveze@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6257059/diff/1003/src/pkg/path/filepath/path_test.go\nFile src/pkg/path/filepath/path_test.go (right):\n\nhttp://codereview.appspot.com/6257059/diff/1003/src/pkg/path/filepath/path_test.go#newcode879\nsrc/pkg/path/filepath/path_test.go:879: var tempDir string\nOn 2012/05/29 16:49:22, r wrote:\n> i can't believe it's this hard to test.\n\nApologies. I don't like the code either, but this first attempt somehow inflated a lot to become, I think, complete. Will try some other, probably completely different and/or less thorough, approach. Any hints are really more than welcome, TIA. (I'll dive into it not before tomorrow.)\n\n-j",
			"disapproval": false,
			"date": "2012-05-29 17:09:15.140525",
			"approval": false
		},
		{
			"sender": "befelemepeseveze@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "2012/5/29 Russ Cox <rsc@golang.org>:\r\n> It seems like you can Walk($GOROOT), make the function return SkipDir\r\n> for \"lib\", and make sure that \"src\" is still considered.\r\n\r\nVery good idea, thank you. I failed to realize that the issue is not\r\nabout the real permission denied thing but only about respecting the\r\nreturned SkipDir value in walk() as documented. Your approach will be\r\n*much* simpler for sure.\r\n\r\n-j\r\n",
			"disapproval": false,
			"date": "2012-05-29 17:19:31.139067",
			"approval": false
		},
		{
			"sender": "befelemepeseveze@gmail.com",
			"recipients": [
				"befelemepeseveze@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-05-27 19:59:52.520245",
			"approval": false
		},
		{
			"sender": "befelemepeseveze@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "2012/5/30  <befelemepeseveze@gmail.com>:\r\n> Hello rsc@golang.org, r@golang.org (cc: golang-dev@googlegroups.com),\r\n>\r\n> Please take another look.\r\n>\r\n>\r\n> http://codereview.appspot.com/6257059/\r\n\r\nPlease note also path.go was changed in this update wrt the initial\r\nCL. Added another check for fileInfo.IsDir() because that's what the\r\nWalkFunc docs say.\r\n\r\n-j\r\n",
			"disapproval": false,
			"date": "2012-05-30 11:06:17.043191",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"befelemepeseveze@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\nleaving for rsc.\n\nhttp://codereview.appspot.com/6257059/diff/13001/src/pkg/path/filepath/path.go\nFile src/pkg/path/filepath/path.go (right):\n\nhttp://codereview.appspot.com/6257059/diff/13001/src/pkg/path/filepath/path.go#newcode324\nsrc/pkg/path/filepath/path.go:324: if err != nil && (err != SkipDir || !fileInfo.IsDir()) {\nthis is hard to read. break it up and rearrange\nif err != nil {\n  if !fileInfo.IsDir() || err != SkipDir {\n    return err\n  }\n}",
			"disapproval": false,
			"date": "2012-05-30 17:44:26.969238",
			"approval": true
		},
		{
			"sender": "befelemepeseveze@gmail.com",
			"recipients": [
				"befelemepeseveze@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-05-27 19:44:02.295999",
			"approval": false
		},
		{
			"sender": "befelemepeseveze@gmail.com",
			"recipients": [
				"befelemepeseveze@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-05-31 12:05:11.556275",
			"approval": false
		},
		{
			"sender": "befelemepeseveze@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "2012/5/27 Honza <befelemepeseveze@gmail.com>:\r\n> Done. I'm guess it's much more lines than you are going to like.\r\n\r\ns/I'm/I/\r\n\r\n+ found 2 times required s/Error/Errorf/ in the CL, so another updated\r\nCL follows.\r\n\r\n-j\r\n",
			"disapproval": false,
			"date": "2012-05-27 20:00:22.078504",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"befelemepeseveze@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-06-02 16:59:52.851207",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"befelemepeseveze@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=4ef88bab4b0d ***\n\npath/filepath: implement documented SkipDir behavior\n\nCurrently walk() doesn't check for err == SkipDir when iterating\na directory list, but such promise is made in the docs for WalkFunc.\n\nFixes issue 3486.\n\nR=rsc, r\nCC=golang-dev\nhttp://codereview.appspot.com/6257059\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2012-06-02 17:00:13.450225",
			"approval": false
		}
	],
	"owner_email": "befelemepeseveze@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "jan_mercl",
	"subject": "code review 6257059: path/filepath: implement documented SkipDir behavior",
	"created": "2012-05-26 11:22:24.860270",
	"patchsets": [
		1,
		3,
		1002,
		7001,
		1003,
		13001,
		5004
	],
	"modified": "2012-06-02 17:00:13.450225",
	"closed": false,
	"issue": 6257059
}