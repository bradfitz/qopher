{
	"description": "test/bench/shootout/timing.log: update after recent compiler changes\nMoving panic out of line speeds up fannkuch almost a factor of two.\nChanges to bitwhacking code affect mandelbrot badly.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org",
		"rsc@golang.org",
		"r@google.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"r@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=8bc69f008178 ***\n\ntest/bench/shootout/timing.log: update after recent compiler changes\nMoving panic out of line speeds up fannkuch almost a factor of two.\nChanges to bitwhacking code affect mandelbrot badly.\n\nR=golang-dev, bradfitz, rsc, r\nCC=golang-dev\nhttp://codereview.appspot.com/6258056",
			"disapproval": false,
			"date": "2012-05-29 18:01:59.769926",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Worth putting in a timing snapshot after\r\n\r\nchangeset:   13290:0ed15bfbe0f4\r\nuser:        Dmitriy Vyukov <dvyukov@google.com>\r\ndate:        Thu May 24 10:55:50 2012 +0400\r\nsummary:     runtime: faster GC mark phase\r\n\r\nbut before\r\n\r\nchangeset:   13324:a1ecb826e0eb\r\nuser:        Russ Cox <rsc@golang.org>\r\ndate:        Tue May 29 12:09:27 2012 -0400\r\nsummary:     cmd/6g, cmd/8g: move panicindex calls out of line\r\n\r\n?\r\n\r\nOn Tue, May 29, 2012 at 10:51 AM, <r@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> test/bench/shootout/timing.**log: update after recent compiler changes\r\n> Moving panic out of line speeds up fannkuch almost a factor of two.\r\n> Changes to bitwhacking code affect mandelbrot badly.\r\n>\r\n> Please review this at http://codereview.appspot.com/**6258056/<http://codereview.appspot.com/6258056/>\r\n>\r\n> Affected files:\r\n>  M test/bench/shootout/timing.log\r\n>\r\n>\r\n> Index: test/bench/shootout/timing.log\r\n> ==============================**==============================**=======\r\n> --- a/test/bench/shootout/timing.**log\r\n> +++ b/test/bench/shootout/timing.**log\r\n> @@ -993,3 +993,32 @@\r\n>        gccgo -O2 chameneosredux.go     7.73u 7.53s 15.30r\r\n>        gc chameneosredux       6.51u 0.00s 6.53r # - 14%\r\n>\r\n> +# After http://codereview.appspot.com/**6248049<http://codereview.appspot.com/6248049>,\r\n> moving panicindex\r\n> +# calls out of line (putting the likely code into a single path and\r\n> shortening\r\n> +# loops). Significant changes since the last run (note: some are slower\r\n> for\r\n> +# unrelated and as yet undiagnosed reasons):\r\n> +\r\n> +nbody -n 50000000\r\n> +       gc nbody        19.10u 0.01s 19.19r # -12%\r\n> +       gc_B nbody      19.19u 0.00s 19.23r # -12%\r\n> +\r\n> +binary-tree 15 # too slow to use 20\r\n> +       gc binary-tree  1.49u 0.01s 1.51r # -19%\r\n> +\r\n> +fannkuch 12\r\n> +       gc fannkuch     60.79u 0.00s 60.92r # -41%\r\n> +       gc fannkuch-parallel    183.51u 0.01s 51.75r # -14%\r\n> +       gc_B fannkuch   51.68u 0.00s 51.79r # -3%\r\n> +\r\n> +k-nucleotide 1000000\r\n> +       gc k-nucleotide 9.74u 0.04s 9.80r # +6%\r\n> +       gc k-nucleotide-parallel        9.89u 0.05s 3.59r # +1%\r\n> +       gc_B k-nucleotide       9.39u 0.02s 9.43r # +2%\r\n> +\r\n> +mandelbrot (much slower, due to unrelated http://codereview.appspot.com/*\r\n> *6209077 <http://codereview.appspot.com/6209077>)\r\n> +       gc mandelbrot   100.98u 0.00s 101.20r # +65%\r\n> +       gc_B mandelbrot 100.90u 0.01s 101.17r # +65%\r\n> +\r\n> +meteor 2098\r\n> +       gc meteor-contest       0.13u 0.00s 0.13r # -13%\r\n> +       gc_B meteor-contest     0.13u 0.00s 0.13r # -7%\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-05-29 17:56:16.254138",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n",
			"disapproval": false,
			"date": "2012-05-29 17:59:53.455971",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-05-29 17:51:49.752454",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\r\nOn May 29, 2012, at 10:56 AM, Brad Fitzpatrick wrote:\r\n\r\n> Worth putting in a timing snapshot after \r\n> \r\n> changeset:   13290:0ed15bfbe0f4\r\n> user:        Dmitriy Vyukov <dvyukov@google.com>\r\n> date:        Thu May 24 10:55:50 2012 +0400\r\n> summary:     runtime: faster GC mark phase\r\n> \r\n> but before \r\n> \r\n> changeset:   13324:a1ecb826e0eb\r\n> user:        Russ Cox <rsc@golang.org>\r\n> date:        Tue May 29 12:09:27 2012 -0400\r\n> summary:     cmd/6g, cmd/8g: move panicindex calls out of line\r\n> \r\n> ?\r\n\r\ni ran at that point but the differences were insignificant. the shootout programs don't generate much garbage.\r\n\r\n-rob\r\n\r\n\r\n",
			"disapproval": false,
			"date": "2012-05-29 18:01:23.157751",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Or not. I went to the trouble to get the loop into a contiguous block\r\nand 128-byte aligned just in case, and it's still in the slow mode:\r\n\r\n   104    104    22: for i := 0; i < Iter && (Tr+Ti <= Limit*Limit); i++ {\r\n     2      2      44150b: XORL\tAX,AX\r\n     .      .      44150d: CMPL\tAX,$32\r\n     .      .      441510:\r\nJGE\t_/home/rsc/g/go/test/bench/go1.mandelbrot+0x264(SB)\r\n     .      .      441516:    NOP\r\n...\r\n     .      .      44157f:    NOP\r\n\r\n[ loop is exactly 2 64-byte cache lines, or 1 128-byte cache line\r\n    20     20      441580: REPNE MOVSD\tX8,X0\r\n     2      2      441585: ADDSD\tX7,X0\r\n    48     48      441589: MOVSD\t$0.40100000(SB),X1\r\n     4      4      441592: UCOMISD\tX0,X1\r\n     6      6      441596:\r\nJCS\t_/home/rsc/g/go/test/bench/go1.mandelbrot+0x264(SB)\r\n   242    242    23: Zi = 2*Zr*Zi + Ci\r\n    53     53      441598: MOVSD\tX6,X0\r\n     6      6      44159c: MOVSD\t$0.40000000(SB),X1\r\n     .      .      4415a5: MULSD\tX1,X0\r\n    32     32      4415a9: MULSD\tX5,X0\r\n    98     98      4415ad: REPNE ADDSD\tX9,X0\r\n    53     53      4415b2: MOVSD\tX0,X5\r\n   175    175    24: Zr = Tr - Ti + Cr\r\n    26     26      4415b6: REPNE MOVSD\tX8,X0\r\n    18     18      4415bb: SUBSD\tX7,X0\r\n    58     58      4415bf: REPNE ADDSD\tX10,X0\r\n    73     73      4415c4: MOVSD\tX0,X6\r\n    76     76    25: Tr = Zr * Zr\r\n    15     15      4415c8: MULSD\tX0,X0\r\n    61     61      4415cc: REPNE MOVSD\tX0,X8\r\n   159    159    26: Ti = Zi * Zi\r\n    31     31      4415d1: MOVSD\tX5,X0\r\n    25     25      4415d5: MULSD\tX5,X0\r\n   103    103      4415d9: MOVSD\tX0,X7\r\n    36     36    22: for i := 0; i < Iter && (Tr+Ti <= Limit*Limit); i++ {\r\n    33     33      4415dd: INCL\tAX\r\n     3      3      4415df: CMPL\tAX,$32\r\n     .      .      4415e2:\r\nJLT\t_/home/rsc/g/go/test/bench/go1.mandelbrot+0x200(SB)\r\n]\r\n\r\nThis would appear to debunk the loop alignment theory. It doesn't get\r\nmuch more aligned than this.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-30 05:10:59.530406",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Mandelbrot before and after suggests that the culprit is loop\r\nalignment. The slow code crosses 128-byte boundaries that the fast\r\ncode does not.\r\n\r\nFast code:\r\n\r\n    98     98    22: for i := 0; i < Iter && (Tr+Ti <= Limit*Limit); i++ {\r\n     2      2      4267e1: XORL\tAX,AX\r\n[ 1 64-byte cache line\r\n     7      7      4267e3: CMPL\tAX,$32\r\n     .      .      4267e6:\r\nJGE\t_/home/rsc/g/go/test/bench/go1.mandelbrot+0xdf(SB)\r\n     9      9      4267e8: REPNE MOVSD\tX8,X0\r\n     1      1      4267ed: ADDSD\tX7,X0\r\n    41     41      4267f1: MOVSD\t$0.40100000(SB),X1\r\n    23     23      4267fa: UCOMISD\tX0,X1\r\n    15     15      4267fe:\r\nJCC\t_/home/rsc/g/go/test/bench/go1.mandelbrot+0x114(SB)\r\n]\r\n\t...\r\n[ 2 64-byte cache lines\r\n    96     96    23: Zi = 2*Zr*Zi + Ci\r\n    51     51      426835: MOVSD\t$0.40000000(SB),X0\r\n    20     20      42683e: MULSD\tX6,X0\r\n     .      .      426842: MULSD\tX5,X0\r\n     2      2      426846: REPNE ADDSD\tX9,X0\r\n    23     23      42684b: MOVSD\tX0,X5\r\n    36     36    24: Zr = Tr - Ti + Cr\r\n     7      7      42684f: REPNE MOVSD\tX8,X0\r\n     .      .      426854: SUBSD\tX7,X0\r\n     .      .      426858: REPNE ADDSD\tX10,X0\r\n    29     29      42685d: MOVSD\tX0,X6\r\n   206    206    25: Tr = Zr * Zr\r\n     7      7      426861: MULSD\tX0,X0\r\n   199    199      426865: REPNE MOVSD\tX0,X8\r\n   319    319    26: Ti = Zi * Zi\r\n   111    111      42686a: MOVSD\tX5,X0\r\n    52     52      42686e: MULSD\tX5,X0\r\n   156    156      426872: MOVSD\tX0,X7\r\n    49     49    22: for i := 0; i < Iter && (Tr+Ti <= Limit*Limit); i++ {\r\n    42     42      426876: INCL\tAX\r\n     7      7      426878:\r\nJMP\t_/home/rsc/g/go/test/bench/go1.mandelbrot+0xc2(SB)\r\n]\r\n\r\nSlow code:\r\n\r\n    92     92    22: for i := 0; i < Iter && (Tr+Ti <= Limit*Limit); i++ {\r\n     1      1      4265e9: XORL\tAX,AX\r\n[ 2 64-byte cache lines (badly aligned)\r\n    16     16      4265eb: CMPL\tAX,$32\r\n     .      .      4265ee:\r\nJGE\t_/home/rsc/g/go/test/bench/go1.mandelbrot+0xc4(SB)\r\n     3      3      4265f0: REPNE MOVSD\tX8,X0\r\n     .      .      4265f5: ADDSD\tX7,X0\r\n    49     49      4265f9: MOVSD\t$0.40100000(SB),X1\r\n    16     16      426602: UCOMISD\tX0,X1\r\n     7      7      426606:\r\nJCC\t_/home/rsc/g/go/test/bench/go1.mandelbrot+0xf9(SB)\r\n]\r\n\t...\r\n[ 3 64-byte cache lines (badly aligned)\r\n   223    223    23: Zi = 2*Zr*Zi + Ci\r\n    46     46      42663d: MOVSD\tX6,X0\r\n    10     10      426641: MOVSD\t$0.40000000(SB),X1\r\n     .      .      42664a: MULSD\tX1,X0\r\n    26     26      42664e: MULSD\tX5,X0\r\n    68     68      426652: REPNE ADDSD\tX9,X0\r\n    73     73      426657: MOVSD\tX0,X5\r\n   164    164    24: Zr = Tr - Ti + Cr\r\n    25     25      42665b: REPNE MOVSD\tX8,X0\r\n    27     27      426660: SUBSD\tX7,X0\r\n    51     51      426664: REPNE ADDSD\tX10,X0\r\n    61     61      426669: MOVSD\tX0,X6\r\n   105    105    25: Tr = Zr * Zr\r\n    31     31      42666d: MULSD\tX0,X0\r\n    74     74      426671: REPNE MOVSD\tX0,X8\r\n   138    138    26: Ti = Zi * Zi\r\n    34     34      426676: MOVSD\tX5,X0\r\n    23     23      42667a: MULSD\tX5,X0\r\n    81     81      42667e: MOVSD\tX0,X7\r\n    43     43    22: for i := 0; i < Iter && (Tr+Ti <= Limit*Limit); i++ {\r\n    36     36      426682: INCL\tAX\r\n     7      7      426684:\r\nJMP\t_/home/rsc/g/go/test/bench/go1.mandelbrot+0xa7(SB)\r\n]\r\n",
			"disapproval": false,
			"date": "2012-05-30 03:50:49.174995",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 6258056: test/bench/shootout/timing.log: update after recent com...",
	"created": "2012-05-29 17:51:45.676173",
	"patchsets": [
		1,
		4001
	],
	"modified": "2012-05-29 18:02:02.233573",
	"closed": true,
	"issue": 6258056
}