{
	"description": "time: fix deadlock in Sleep(0)\nSee time/sleep_test.go for repro.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"rsc@golang.org",
		"patrick.allen.higgins@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, May 29, 2012 at 9:58 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> I don't understand why the test is so complex.  It looks like\r\n>\r\n> func TestSleepZero(t *testing.t) {\r\n>   time.Sleep(0) // used to hang\r\n> }\r\n>\r\n> would suffice.\r\n>\r\n\r\nIf GC is not pending, and this goroutine will block on a chan or something\r\nlike that, then status/waitreason will be overwritten and then restored\r\nback to Grunnable (by whoever sends to the chan). So the problem arises iff\r\nthe goroutine calls into sched due to pending GC.\r\n",
			"disapproval": false,
			"date": "2012-05-29 18:02:11.469192",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rsc@golang.org",
				"patrick.allen.higgins@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=085b20e6e0aa ***\n\ntime: fix deadlock in Sleep(0)\nSee time/sleep_test.go for repro.\n\nR=golang-dev, r, rsc\nCC=golang-dev, patrick.allen.higgins\nhttp://codereview.appspot.com/6250072",
			"disapproval": false,
			"date": "2012-05-29 18:31:11.519805",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"patrick.allen.higgins@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: patrick.allen.higgins@gmail.com),\n\nI'd like you to review this change to\nhttps://dvyukov%40google.com@code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-05-29 17:51:51.550996",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"patrick.allen.higgins@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6250072/diff/3003/src/pkg/time/sleep_test.go\nFile src/pkg/time/sleep_test.go (right):\n\nhttp://codereview.appspot.com/6250072/diff/3003/src/pkg/time/sleep_test.go#newcode227\nsrc/pkg/time/sleep_test.go:227: func TestSleepZero(t *testing.T) {\nobscure enough to deserve a comment\n// Test that Sleep(0) does not deadlock.",
			"disapproval": false,
			"date": "2012-05-29 17:56:04.748904",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rsc@golang.org",
				"patrick.allen.higgins@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThanks for the explanation.\n\nhttp://codereview.appspot.com/6250072/diff/4006/src/pkg/time/sleep_test.go\nFile src/pkg/time/sleep_test.go (right):\n\nhttp://codereview.appspot.com/6250072/diff/4006/src/pkg/time/sleep_test.go#newcode229\nsrc/pkg/time/sleep_test.go:229: // Sleep(0) sets G's status to Gwaiting, but then immidiately returns leaving the status.\ns/immid/immed/",
			"disapproval": false,
			"date": "2012-05-29 18:26:55.268700",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please add that comment to the test.\r\n",
			"disapproval": false,
			"date": "2012-05-29 18:03:42.310641",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"patrick.allen.higgins@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6250072/diff/3003/src/pkg/time/sleep_test.go\nFile src/pkg/time/sleep_test.go (right):\n\nhttp://codereview.appspot.com/6250072/diff/3003/src/pkg/time/sleep_test.go#newcode227\nsrc/pkg/time/sleep_test.go:227: func TestSleepZero(t *testing.T) {\nOn 2012/05/29 17:56:04, r wrote:\n> obscure enough to deserve a comment\n> // Test that Sleep(0) does not deadlock.\n\nDone.",
			"disapproval": false,
			"date": "2012-05-29 17:58:36.648415",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't understand why the test is so complex.  It looks like\r\n\r\nfunc TestSleepZero(t *testing.t) {\r\n   time.Sleep(0) // used to hang\r\n}\r\n\r\nwould suffice.\r\n",
			"disapproval": false,
			"date": "2012-05-29 17:58:50.222703",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, May 29, 2012 at 10:02 PM, Dmitry Vyukov <dvyukov@google.com> wrote:\r\n\r\n> On Tue, May 29, 2012 at 9:58 PM, Russ Cox <rsc@golang.org> wrote:\r\n>\r\n>> I don't understand why the test is so complex.  It looks like\r\n>>\r\n>> func TestSleepZero(t *testing.t) {\r\n>>   time.Sleep(0) // used to hang\r\n>> }\r\n>>\r\n>> would suffice.\r\n>>\r\n>\r\n> If GC is not pending, and this goroutine will block on a chan or something\r\n> like that, then status/waitreason will be overwritten and then restored\r\n> back to Grunnable (by whoever sends to the chan). So the problem arises iff\r\n> the goroutine calls into sched due to pending GC...\r\n>\r\n>\r\n... while it has incorrect status=Gwaiting (if it blocks on chan/mutex,\r\nthen status=Gwaiting is *correct*).\r\n",
			"disapproval": false,
			"date": "2012-05-29 18:03:33.273067",
			"approval": false
		},
		{
			"sender": "dvyukov@google.com",
			"recipients": [
				"dvyukov@google.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rsc@golang.org",
				"patrick.allen.higgins@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/05/29 18:03:42, rsc wrote:\n> Please add that comment to the test.\n\nDone. PTAL.",
			"disapproval": false,
			"date": "2012-05-29 18:14:14.447413",
			"approval": false
		}
	],
	"owner_email": "dvyukov@google.com",
	"private": false,
	"base_url": "",
	"owner": "dvyukov",
	"subject": "code review 6250072: time: fix deadlock in Sleep(0)",
	"created": "2012-05-29 17:31:45.725759",
	"patchsets": [
		1,
		2001,
		5001,
		3003,
		5004,
		9002,
		4006,
		4007,
		13001
	],
	"modified": "2012-05-29 18:31:13.492106",
	"closed": true,
	"issue": 6250072
}