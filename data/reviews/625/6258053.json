{
	"description": "syscall: write failed syscall code in forkAndExecInChild.\n\nUse this for generating a robust error message for chdir\nproblems.\n\nFixes issue 3649.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "hanwen@google.com",
			"recipients": [
				"hanwen@google.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-05-27 20:22:51.760227",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> Is it OK to have syscall.StartProcess return a new type of error? Maybe\r\n>\r\n> \u00a0type CompoundError {\r\n> \u00a0 what string\r\n> \u00a0 Errno\r\n\r\nI would rather not add new API to syscall, and I don't know that\r\n\"what\" would help anyway. It looks like you have to write some per-OS\r\ncode in package os to handle this.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-29 19:07:57.837530",
			"approval": false
		},
		{
			"sender": "hanwen@google.com",
			"recipients": [
				"hanwen@google.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-05-27 20:23:48.624883",
			"approval": false
		},
		{
			"sender": "hanwen@google.com",
			"recipients": [
				"hanwen@google.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is just a proposal; the real problem is that the syscall package returns Errno for most functions, but it would return another one in case of a chdir problem.\n\nAn alternative is changing the return signature of StartProcess(), but I guess we don't want to introduce incompatibilies.",
			"disapproval": false,
			"date": "2012-05-27 20:26:45.865135",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The buffer is unnecessary. You can do two writes or you can write a struct:\r\n\r\ntype writeResult struct {\r\n    err Errno\r\n    syscall uintptr\r\n}\r\n\r\nEither way the conversion to []byte is distracting.  Note that the\r\nexisting code does not do any such conversion.\r\n\r\nThere are some debugging prints left over in exec_unix.go.\r\n\r\nI don't see any code to create the error.  Whatever code does create\r\nthe error needs to decide what to do based on the system call that\r\nfailed. For example, a CHDIR error should result in the same error\r\nthat used to be generated by the directory-checking code.  In all\r\nlikelihood this needs to go into the system-specific files, since you\r\ncan't refer to specific system calls from the generic exec_unix.go.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-29 19:00:51.244949",
			"approval": false
		},
		{
			"sender": "hanwen@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, May 29, 2012 at 4:00 PM, Russ Cox <rsc@golang.org> wrote:\r\n> The buffer is unnecessary. You can do two writes or you can write a struct:\r\n>\r\n> type writeResult struct {\r\n> \u00a0 \u00a0err Errno\r\n> \u00a0 \u00a0syscall uintptr\r\n> }\r\n>\r\n> Either way the conversion to []byte is distracting. \u00a0Note that the\r\n> existing code does not do any such conversion.\r\n\r\ngreat idea.\r\n\r\n> There are some debugging prints left over in exec_unix.go.\r\n>\r\n> I don't see any code to create the error. \u00a0Whatever code does create\r\n> the error needs to decide what to do based on the system call that\r\n> failed. For example, a CHDIR error should result in the same error\r\n> that used to be generated by the directory-checking code.\r\n\r\nThat is the problem; that error resides in the OS module, while we\r\nhave to decide what error to return inside syscall.\r\n\r\nIs it OK to have syscall.StartProcess return a new type of error? Maybe\r\n\r\n type CompoundError {\r\n   what string\r\n   Errno\r\n }\r\n\r\n> likelihood this needs to go into the system-specific files, since you\r\n> can't refer to specific system calls from the generic exec_unix.go.\r\n>\r\n> Russ\r\n\r\n\r\n\r\n-- \r\nHan-Wen Nienhuys\r\nGoogle Engineering Belo Horizonte\r\nhanwen@google.com\r\n",
			"disapproval": false,
			"date": "2012-05-29 19:06:35.563916",
			"approval": false
		},
		{
			"sender": "hanwen@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "As discussed - I'll work on disabling the check for attr.Sys != nil.\r\n\r\n\r\nOn Tue, May 29, 2012 at 4:07 PM, Russ Cox <rsc@golang.org> wrote:\r\n>> Is it OK to have syscall.StartProcess return a new type of error? Maybe\r\n>>\r\n>> \u00a0type CompoundError {\r\n>> \u00a0 what string\r\n>> \u00a0 Errno\r\n>\r\n> I would rather not add new API to syscall, and I don't know that\r\n> \"what\" would help anyway. It looks like you have to write some per-OS\r\n> code in package os to handle this.\r\n>\r\n> Russ\r\n\r\n\r\n\r\n-- \r\nHan-Wen Nienhuys\r\nGoogle Engineering Belo Horizonte\r\nhanwen@google.com\r\n",
			"disapproval": false,
			"date": "2012-05-29 19:24:32.114996",
			"approval": false
		},
		{
			"sender": "hanwen@google.com",
			"recipients": [
				"hanwen@google.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-06-13 01:44:16.295482",
			"approval": false
		}
	],
	"owner_email": "hanwen@google.com",
	"private": false,
	"base_url": "",
	"owner": "hanwen",
	"subject": "code review 6258053: syscall: write failed syscall code in forkAndExecInChild.",
	"created": "2012-05-27 20:21:33.501444",
	"patchsets": [
		1,
		2001,
		5001,
		3006,
		8001
	],
	"modified": "2012-06-13 01:44:17.713789",
	"closed": true,
	"issue": 6258053
}