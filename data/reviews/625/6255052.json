{
	"description": "time: speed up Format by making formatting machines\n\nFOR DISCUSSION.\n\nbenchmark          old ns/op    new ns/op    delta\nBenchmarkFormat         2394         1487  -37.89%\n\nFrom 8.3% of HTTP server benchmark to 5.6%.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"nightlyone@googlemail.com",
		"balasanjay@gmail.com",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "You are suggesting to change the API for performance but it is not\r\nclear that the current code maxes out the current API's fundamental\r\nperformance limits.  Until that is clear, we shouldn't be talking\r\nabout making the existing API more complex.\r\n\r\nAlso from your benchmarks it sounds like the new API changes are good\r\nfor only 12%.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-28 22:06:37.434050",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, May 28, 2012 at 6:45 PM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> That's not what I'm suggesting.\r\n>\r\n> Look again. It requires no API change and it's much more than 12%.\r\n\r\nI count additions to the API as changes too.  (If it were a\r\nbackwards-incompatible change we wouldn't even be talking about it.)\r\n\r\n> The API\r\n> change is optional (\"for discussion\") for more speedup, the 12% I think\r\n> you're referencing.\r\n\r\nYes, that's what I meant.  Making existing code 2x faster without\r\nchanging the API is a clear win. Introducing a new API that we'll have\r\nto support just to squeeze out another 12% is much less clearly a win.\r\n In fact, if you go at it knowing that you're going to build the\r\n'machine' and throw it away, then I think you could probably get the\r\n2x just from tuning the existing code, without adding the machine\r\nitself.  (It's just garbage in BenchmarkFormat, after all.)  I haven't\r\nlooked at the actual code changes, just enough to see that there was\r\nnew API and that BenchmarkFormat showed the new API was not required\r\nfor reaping benefits.\r\n\r\n> I can send again without the API change.\r\n\r\nPlease do.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-28 23:13:08.088100",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"nightlyone@googlemail.com",
				"balasanjay@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, nightlyone@googlemail.com, balasanjay@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-05-28 23:35:38.513034",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-05-26 23:14:50.431212",
			"approval": false
		},
		{
			"sender": "nightlyone@googlemail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Another way to achieve the same is ignoring the formatting functionality in \r\nthe time package and do it yourself. The log-package actually does this.\r\n\r\nBut I actually like your idea more, as it improves the time formatting code \r\na lot. \r\n\r\nThe cache size should be configurable and 0 meaning to disable it. \r\nUseful if you e.g. process data for lots of cultures like in a newsletter \r\nsystem.\r\n\r\n",
			"disapproval": false,
			"date": "2012-05-28 20:55:38.105649",
			"approval": false
		},
		{
			"sender": "balasanjay@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Why not make the formatter be a slice of \"magic constant\" ints instead of a \r\nslice of function pointers? Then the main format code can just be a for \r\nloop with a switch statement instead of a for loop calling a series of \r\nfunctions.\r\n\r\nSanjay\r\n",
			"disapproval": false,
			"date": "2012-05-28 21:47:42.033512",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "No API changes now.\r\n\r\nOn Mon, May 28, 2012 at 4:35 PM, <bradfitz@golang.org> wrote:\r\n\r\n> Hello golang-dev@googlegroups.com, nightlyone@googlemail.com,\r\n> balasanjay@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\r\n>\r\n> Please take another look.\r\n>\r\n>\r\n> http://codereview.appspot.com/**6255052/<http://codereview.appspot.com/6255052/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-05-28 23:36:12.612964",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm still skeptical that the right approach here is to introduce a\r\ncache. Typically, when code is slow, it is better to make it faster\r\nthan to wrap the slow code in a cache. Like I said in my last mail, if\r\nyou know you're not going to keep the Formatter around, then you can\r\nprobably do better by not creating it in the first place.\r\n\r\nI believe we can easily match or exceed the 'slow code + cache'\r\nversion by making the existing code faster. It could use an int for\r\nthe 'std' value, avoid string comparisons in a few important places,\r\nand write directly into the output buffer instead of creating all\r\nthose intermediate strings.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-29 00:52:36.978240",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "That's not what I'm suggesting.\r\n\r\nLook again. It requires no API change and it's much more than 12%.  The API\r\nchange is optional (\"for discussion\") for more speedup, the 12% I think\r\nyou're referencing.\r\n\r\nI can send again without the API change.\r\n On May 28, 2012 3:06 PM, \"Russ Cox\" <rsc@golang.org> wrote:\r\n\r\n> You are suggesting to change the API for performance but it is not\r\n> clear that the current code maxes out the current API's fundamental\r\n> performance limits.  Until that is clear, we shouldn't be talking\r\n> about making the existing API more complex.\r\n>\r\n> Also from your benchmarks it sounds like the new API changes are good\r\n> for only 12%.\r\n>\r\n> Russ\r\n>\r\n",
			"disapproval": false,
			"date": "2012-05-28 22:45:36.658726",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I looked into this a bit more. My suggestion is to leave the code\r\nalone until some compiler optimizations can go in. String\r\nmanipulation, especially slicing, is far slower than it should be,\r\nbecause it is still making runtime calls.  There are other systemic\r\ninefficiencies too. With those addressed and then some minor tweaking\r\nof the current Format code, it should be possible to make Format 5x\r\nfaster than it is now. I created issue 3679 for this.\r\n\r\nIf the current Format is 8.3% of your HTTP benchmark, a 5x faster\r\nFormat would drop to 1.8%.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-05-29 03:08:25.046784",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"nightlyone@googlemail.com",
				"balasanjay@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-05-29 20:49:46.491515",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 6255052: time: speed up Format by making formatting machines",
	"created": "2012-05-26 23:14:19.931746",
	"patchsets": [
		1,
		2001,
		5001,
		5002,
		10002
	],
	"modified": "2012-05-29 20:49:49.407983",
	"closed": true,
	"issue": 6255052
}