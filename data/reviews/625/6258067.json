{
	"description": "runtime: add arm soft division and modulo benchmarks\n\narm soft div and mod performance plays an important part\nin runtime performance.\n\nThe currently implementation is very stable, but we believe\nwe can best it. This benchmark provides a reference point.\n\nlinux/arm omap4 pandaboard\n\nBenchmarkUint32Div7     10000000               298 ns/op\nBenchmarkUint32Div37    10000000               298 ns/op\nBenchmarkUint32Div123   10000000               298 ns/op\nBenchmarkUint32Div763   10000000               298 ns/op\nBenchmarkUint32Div1247  10000000               299 ns/op\nBenchmarkUint32Div9305  10000000               298 ns/op\nBenchmarkUint32Div13307 10000000               298 ns/op\nBenchmarkUint32Div52513 10000000               298 ns/op\nBenchmarkUint32Div60978747      10000000               298 ns/op\nBenchmarkUint32Div106956295     10000000               297 ns/op\nBenchmarkUint32Mod7     10000000               280 ns/op\nBenchmarkUint32Mod37    10000000               280 ns/op\nBenchmarkUint32Mod123   10000000               280 ns/op\nBenchmarkUint32Mod763   10000000               280 ns/op\nBenchmarkUint32Mod1247  10000000               280 ns/op\nBenchmarkUint32Mod9305  10000000               280 ns/op\nBenchmarkUint32Mod13307 10000000               280 ns/op\nBenchmarkUint32Mod52513 10000000               280 ns/op\nBenchmarkUint32Mod60978747      10000000               280 ns/op\nBenchmarkUint32Mod106956295     10000000               280 ns/op",
	"cc": [
		"minux.ma@gmail.com",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello minux.ma@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-06-14 03:57:38.344508",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "<ping />",
			"disapproval": false,
			"date": "2012-06-19 05:20:07.989649",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/06/14 04:00:40, rsc wrote:\n> Do you really mean runtime? It is true that package runtime's\n> performance is affected by C division, but this is benchmarking Go\n> division, and they are not guaranteed to be related. Also this is\nAs ARM cores generally don't have hardware div/mod operations,\nits div/mod operation is implemented in runtime, so IMO, add a\nbenchmark for it is worthwhile (I've already got a CL for it).\n> benchmarking division by variables, when the issue in the runtime is\n> (I believe) division by constants, which can (and probably don't but\n> should) be handled differently.\nyeah, 5g and 8g don't even special case power-of-2 divisors; 5c/8c only\nturn simple power-of-2 division into shifts, but no magic multiply\noptimization.\nalso note that div/mod usage in runtime are almost all division by variables.",
			"disapproval": false,
			"date": "2012-06-15 18:19:01.442476",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Do you really mean runtime? It is true that package runtime's\r\nperformance is affected by C division, but this is benchmarking Go\r\ndivision, and they are not guaranteed to be related. Also this is\r\nbenchmarking division by variables, when the issue in the runtime is\r\n(I believe) division by constants, which can (and probably don't but\r\nshould) be handled differently.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-14 04:00:40.987615",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "There are a few areas, mainly related to modulo that are still a\r\nproblem for arm in the runtime. itab (iface.c#71) is one, scanblock\r\n(mgc0.c#249) is another.\r\n\r\nOn Thu, Jun 14, 2012 at 2:00 PM, Russ Cox <rsc@golang.org> wrote:\r\n> Do you really mean runtime? It is true that package runtime's\r\n> performance is affected by C division, but this is benchmarking Go\r\n> division, and they are not guaranteed to be related. Also this is\r\n> benchmarking division by variables, when the issue in the runtime is\r\n> (I believe) division by constants, which can (and probably don't but\r\n> should) be handled differently.\r\n>\r\n> Russ\r\n",
			"disapproval": false,
			"date": "2012-06-14 04:03:53.644696",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nin the description s/Arm/arm/\n\nhttp://codereview.appspot.com/6258067/diff/7002/src/pkg/runtime/vlop_arm_test.go\nFile src/pkg/runtime/vlop_arm_test.go (right):\n\nhttp://codereview.appspot.com/6258067/diff/7002/src/pkg/runtime/vlop_arm_test.go#newcode10\nsrc/pkg/runtime/vlop_arm_test.go:10: // http://ridiculousfish.com/files/division_benchmarks.tar.gz\nFWIW ridiculousfish suggests those benchmarks because they are difficult for compilers to optimize when dividing by a constant. It is less clear that they're interesting for non-constant division, but they're still fine.",
			"disapproval": false,
			"date": "2012-06-25 21:37:53.931777",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"minux.ma@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=6f2a9ecdccf9 ***\n\nruntime: add arm soft division and modulo benchmarks\n\narm soft div and mod performance plays an important part\nin runtime performance.\n\nThe currently implementation is very stable, but we believe\nwe can best it. This benchmark provides a reference point.\n\nlinux/arm omap4 pandaboard\n\nBenchmarkUint32Div7     10000000               298 ns/op\nBenchmarkUint32Div37    10000000               298 ns/op\nBenchmarkUint32Div123   10000000               298 ns/op\nBenchmarkUint32Div763   10000000               298 ns/op\nBenchmarkUint32Div1247  10000000               299 ns/op\nBenchmarkUint32Div9305  10000000               298 ns/op\nBenchmarkUint32Div13307 10000000               298 ns/op\nBenchmarkUint32Div52513 10000000               298 ns/op\nBenchmarkUint32Div60978747      10000000               298 ns/op\nBenchmarkUint32Div106956295     10000000               297 ns/op\nBenchmarkUint32Mod7     10000000               280 ns/op\nBenchmarkUint32Mod37    10000000               280 ns/op\nBenchmarkUint32Mod123   10000000               280 ns/op\nBenchmarkUint32Mod763   10000000               280 ns/op\nBenchmarkUint32Mod1247  10000000               280 ns/op\nBenchmarkUint32Mod9305  10000000               280 ns/op\nBenchmarkUint32Mod13307 10000000               280 ns/op\nBenchmarkUint32Mod52513 10000000               280 ns/op\nBenchmarkUint32Mod60978747      10000000               280 ns/op\nBenchmarkUint32Mod106956295     10000000               280 ns/op\n\nR=minux.ma, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6258067",
			"disapproval": false,
			"date": "2012-06-25 22:59:18.179765",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 6258067: runtime: add arm soft division and modulo benchmarks",
	"created": "2012-06-01 08:01:28.528029",
	"patchsets": [
		1,
		1001,
		1002,
		4001,
		5001,
		7002,
		13001
	],
	"modified": "2012-06-26 06:50:53.859297",
	"closed": true,
	"issue": 6258067
}