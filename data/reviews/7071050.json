{
	"description": "testing: in example, empty output not distinguished from missing output\n\nFixes issue 4485.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org",
		"adg@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "ryanslade@gmail.com",
			"recipients": [
				"ryanslade@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-10 13:01:59.724670",
			"approval": false
		},
		{
			"sender": "ryanslade@gmail.com",
			"recipients": [
				"ryanslade@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-10 13:00:52.402830",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This changes the interpretation of Example structs that don't set\r\nHasOutput. That is, Example{Output:\"foo\"} right now means to expect\r\n\"foo\" but after this CL it will not mean that anymore. It might be\r\nthat no one uses this type, but we don't know that, and it's a good\r\nhabit not to make semantic changes, to try to respect the Go 1\r\ncontract.\r\n\r\nI suggest instead:\r\n    EmptyOutput bool // expect empty output\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-01-09 19:11:18.095430",
			"approval": false
		},
		{
			"sender": "ryanslade@gmail.com",
			"recipients": [
				"ryanslade@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-01-08 12:43:10.435940",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"ryanslade@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=97e9dac9a01d ***\n\ntesting: in example, empty output not distinguished from missing output\n\nFixes issue 4485.\n\nR=golang-dev, rsc, adg\nCC=golang-dev\nhttps://codereview.appspot.com/7071050\n\nCommitter: Andrew Gerrand <adg@golang.org>",
			"disapproval": false,
			"date": "2013-01-12 00:06:01.384430",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"ryanslade@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7071050/diff/8001/src/cmd/go/test.go\nFile src/cmd/go/test.go (right):\n\nhttps://codereview.appspot.com/7071050/diff/8001/src/cmd/go/test.go#newcode795\nsrc/cmd/go/test.go:795: if e.EmptyOutput {\nif e.Output == \"\" && !e.EmptyOutput {\n\nhttps://codereview.appspot.com/7071050/diff/8001/src/pkg/go/doc/example.go\nFile src/pkg/go/doc/example.go (right):\n\nhttps://codereview.appspot.com/7071050/diff/8001/src/pkg/go/doc/example.go#newcode59\nsrc/pkg/go/doc/example.go:59: output, emptyOutput := exampleOutput(f.Body, file.Comments)\noutput, hasOutput := exampleOutput...\n\nhttps://codereview.appspot.com/7071050/diff/8001/src/pkg/go/doc/example.go#newcode67\nsrc/pkg/go/doc/example.go:67: EmptyOutput: emptyOutput,\noutput == \"\" && hasOutput\n\nhttps://codereview.appspot.com/7071050/diff/8001/src/pkg/go/doc/example.go#newcode86\nsrc/pkg/go/doc/example.go:86: func exampleOutput(b *ast.BlockStmt, comments []*ast.CommentGroup) (string, bool) {\nthe return values should be (output string, ok bool) \n\nand the meaning of the bool should be the opposite of what you have here; true means that a comment was found, false means one was not",
			"disapproval": false,
			"date": "2013-01-11 03:10:36.978070",
			"approval": false
		},
		{
			"sender": "ryanslade@gmail.com",
			"recipients": [
				"ryanslade@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I've made the changes as suggested\n\nhttps://codereview.appspot.com/7071050/diff/8001/src/cmd/go/test.go\nFile src/cmd/go/test.go (right):\n\nhttps://codereview.appspot.com/7071050/diff/8001/src/cmd/go/test.go#newcode795\nsrc/cmd/go/test.go:795: if e.EmptyOutput {\nOn 2013/01/11 03:10:37, adg wrote:\n> if e.Output == \"\" && !e.EmptyOutput {\n\nDone.\n\nhttps://codereview.appspot.com/7071050/diff/8001/src/pkg/go/doc/example.go\nFile src/pkg/go/doc/example.go (right):\n\nhttps://codereview.appspot.com/7071050/diff/8001/src/pkg/go/doc/example.go#newcode59\nsrc/pkg/go/doc/example.go:59: output, emptyOutput := exampleOutput(f.Body, file.Comments)\nOn 2013/01/11 03:10:37, adg wrote:\n> output, hasOutput := exampleOutput...\n\nDone.\n\nhttps://codereview.appspot.com/7071050/diff/8001/src/pkg/go/doc/example.go#newcode67\nsrc/pkg/go/doc/example.go:67: EmptyOutput: emptyOutput,\nOn 2013/01/11 03:10:37, adg wrote:\n> output == \"\" && hasOutput\n\nDone.\n\nhttps://codereview.appspot.com/7071050/diff/8001/src/pkg/go/doc/example.go#newcode86\nsrc/pkg/go/doc/example.go:86: func exampleOutput(b *ast.BlockStmt, comments []*ast.CommentGroup) (string, bool) {\nOn 2013/01/11 03:10:37, adg wrote:\n> the return values should be (output string, ok bool) \n> \n> and the meaning of the bool should be the opposite of what you have here; true\n> means that a comment was found, false means one was not\n\nDone.",
			"disapproval": false,
			"date": "2013-01-11 12:10:31.293950",
			"approval": false
		},
		{
			"sender": "ryanslade@gmail.com",
			"recipients": [
				"ryanslade@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-11 12:11:01.003780",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"ryanslade@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-01-12 00:05:35.760900",
			"approval": true
		},
		{
			"sender": "ryanslade@gmail.com",
			"recipients": [
				"ryanslade@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-01-11 12:17:41.764900",
			"approval": false
		}
	],
	"owner_email": "ryanslade@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "ryanslade",
	"subject": "code review 7071050: testing: in example, empty output not distinguished fro...",
	"created": "2013-01-08 12:38:21.150200",
	"patchsets": [
		1,
		2001,
		5001,
		5,
		8001,
		14001,
		18001
	],
	"modified": "2013-01-12 13:25:12.409170",
	"closed": true,
	"issue": 7071050
}