{
	"description": "Encode and decode empty bytes fields correctly.",
	"cc": [
		"r@golang.org",
		"dsymonds@golang.org",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"krautz@gmail.com",
				"r@golang.org",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2010-11-29 22:08:23.012656",
			"approval": true
		},
		{
			"sender": "krautz@gmail.com",
			"recipients": [
				"krautz@gmail.com",
				"r@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello r (cc: dsymonds, golang-dev@googlegroups.com),\n\nI'd like you to review this change.",
			"disapproval": false,
			"date": "2010-11-28 02:05:03.484726",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"krautz@gmail.com",
				"r@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "This looks fine to me, modulo my comments. I'll let Rob finish the review.\n\nhttp://codereview.appspot.com/3274043/diff/1/proto/all_test.go\nFile proto/all_test.go (right):\n\nhttp://codereview.appspot.com/3274043/diff/1/proto/all_test.go#newcode781\nproto/all_test.go:781: pb.F_BytesRepeated = [][]byte{ []byte{}, }\ndrop the comma\n\nhttp://codereview.appspot.com/3274043/diff/1/proto/all_test.go#newcode789\nproto/all_test.go:789: pbd := &GoTest{}\nuse new(GoTest) for consistency\n(and below)\n\nhttp://codereview.appspot.com/3274043/diff/1/proto/all_test.go#newcode794\nproto/all_test.go:794: if !(pbd.F_BytesRequired != nil && len(pbd.F_BytesRequired) == 0) {\nThis reads a bit oddly. Push the ! through the parens. Same below.\n\nhttp://codereview.appspot.com/3274043/diff/1/proto/all_test.go#newcode810\nproto/all_test.go:810: pb.F_BytesOptional = nil\nThis is this field's initial value, so setting it here is a no-op.\n\nThis whole test doesn't do anything beyond what TestEncodeDecode[1-3] already do.\n\nhttp://codereview.appspot.com/3274043/diff/1/proto/all_test.go#newcode845\nproto/all_test.go:845: if !(len(pbd.F_BytesRepeated) == 1 && len(pbd.F_BytesRepeated[0]) == 0 && pbd.F_BytesRepeated[0] != nil) {\nThis is also hard to read. Please push the ! throughout the expression.\n\nhttp://codereview.appspot.com/3274043/diff/1/proto/decode.go\nFile proto/decode.go (right):\n\nhttp://codereview.appspot.com/3274043/diff/1/proto/decode.go#newcode482\nproto/decode.go:482: if b == nil {\nIf o.DecodeRawBytes returns a nil err then b is always non-nil. You can drop these three lines.\n\nhttp://codereview.appspot.com/3274043/diff/1/proto/encode.go\nFile proto/encode.go (right):\n\nhttp://codereview.appspot.com/3274043/diff/1/proto/encode.go#newcode373\nproto/encode.go:373: // check default\nI don't think this should even be checking the default at all. If the value is the same as the default then it should still be encoded. I think the whole !p.Required block can probably be dropped.",
			"disapproval": false,
			"date": "2010-11-28 03:04:18.885607",
			"approval": false
		},
		{
			"sender": "krautz@gmail.com",
			"recipients": [
				"krautz@gmail.com",
				"r@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/3274043/diff/1/proto/all_test.go\nFile proto/all_test.go (right):\n\nhttp://codereview.appspot.com/3274043/diff/1/proto/all_test.go#newcode781\nproto/all_test.go:781: pb.F_BytesRepeated = [][]byte{ []byte{}, }\nOn 2010/11/28 03:04:19, dsymonds wrote:\n> drop the comma\n\nDone.\n\nhttp://codereview.appspot.com/3274043/diff/1/proto/all_test.go#newcode789\nproto/all_test.go:789: pbd := &GoTest{}\nOn 2010/11/28 03:04:19, dsymonds wrote:\n> use new(GoTest) for consistency\n> (and below)\n\nDone.\n\nhttp://codereview.appspot.com/3274043/diff/1/proto/all_test.go#newcode794\nproto/all_test.go:794: if !(pbd.F_BytesRequired != nil && len(pbd.F_BytesRequired) == 0) {\nOn 2010/11/28 03:04:19, dsymonds wrote:\n> This reads a bit oddly. Push the ! through the parens. Same below.\n\nDone.\n\nhttp://codereview.appspot.com/3274043/diff/1/proto/all_test.go#newcode810\nproto/all_test.go:810: pb.F_BytesOptional = nil\nOn 2010/11/28 03:04:19, dsymonds wrote:\n> This is this field's initial value, so setting it here is a no-op.\n> \n> This whole test doesn't do anything beyond what TestEncodeDecode[1-3] already\n> do.\n\nDropped TestEncodeDecodeBytes2. Renamed TestEncodeDecodeBytes3 to TestEncodeDecodeBytes2.\n\nhttp://codereview.appspot.com/3274043/diff/1/proto/all_test.go#newcode845\nproto/all_test.go:845: if !(len(pbd.F_BytesRepeated) == 1 && len(pbd.F_BytesRepeated[0]) == 0 && pbd.F_BytesRepeated[0] != nil) {\nOn 2010/11/28 03:04:19, dsymonds wrote:\n> This is also hard to read. Please push the ! throughout the expression.\n\nDone.\n\nhttp://codereview.appspot.com/3274043/diff/1/proto/decode.go\nFile proto/decode.go (right):\n\nhttp://codereview.appspot.com/3274043/diff/1/proto/decode.go#newcode482\nproto/decode.go:482: if b == nil {\nOn 2010/11/28 03:04:19, dsymonds wrote:\n> If o.DecodeRawBytes returns a nil err then b is always non-nil. You can drop\n> these three lines.\n\nDone.\n\nhttp://codereview.appspot.com/3274043/diff/1/proto/encode.go\nFile proto/encode.go (right):\n\nhttp://codereview.appspot.com/3274043/diff/1/proto/encode.go#newcode373\nproto/encode.go:373: // check default\nOn 2010/11/28 03:04:19, dsymonds wrote:\n> I don't think this should even be checking the default at all. If the value is\n> the same as the default then it should still be encoded. I think the whole\n> !p.Required block can probably be dropped.\n\nI tried to remove it, but the test case failed in proto_test.TestEncodeDecode(1-5).\nI know nothing of the innards of the protobuf wire format, but it seems like the tests assume that if an optional field has the default value, it shouldn't be encoded in the wire format.",
			"disapproval": false,
			"date": "2010-11-28 15:00:34.039012",
			"approval": false
		},
		{
			"sender": "krautz@gmail.com",
			"recipients": [
				"krautz@gmail.com",
				"r@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello r, dsymonds (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-11-28 15:01:17.083853",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"krautz@gmail.com",
				"r@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nOver to Rob.\n\nhttp://codereview.appspot.com/3274043/diff/1/proto/encode.go\nFile proto/encode.go (right):\n\nhttp://codereview.appspot.com/3274043/diff/1/proto/encode.go#newcode373\nproto/encode.go:373: // check default\nOn 2010/11/28 15:00:34, mkrautz wrote:\n> On 2010/11/28 03:04:19, dsymonds wrote:\n> > I don't think this should even be checking the default at all. If the value is\n> > the same as the default then it should still be encoded. I think the whole\n> > !p.Required block can probably be dropped.\n> \n> I tried to remove it, but the test case failed in\n> proto_test.TestEncodeDecode(1-5).\n> I know nothing of the innards of the protobuf wire format, but it seems like the\n> tests assume that if an optional field has the default value, it shouldn't be\n> encoded in the wire format.\n\nOkay, that's a bug. Default values should have no impact on encoding/decoding. Just add this:\n  // TODO: remove this block and fix tests\nand I'll see to it later.\n\nhttp://codereview.appspot.com/3274043/diff/11001/proto/all_test.go\nFile proto/all_test.go (right):\n\nhttp://codereview.appspot.com/3274043/diff/11001/proto/all_test.go#newcode794\nproto/all_test.go:794: if pbd.F_BytesRequired == nil {\nWhat happened to the len(pbd.F_BytesRequired) check?\n\nhttp://codereview.appspot.com/3274043/diff/11001/proto/all_test.go#newcode800\nproto/all_test.go:800: if pbd.F_BytesOptional == nil {\nlen check?",
			"disapproval": false,
			"date": "2010-11-28 22:49:50.676604",
			"approval": true
		},
		{
			"sender": "krautz@gmail.com",
			"recipients": [
				"krautz@gmail.com",
				"r@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/3274043/diff/1/proto/encode.go\nFile proto/encode.go (right):\n\nhttp://codereview.appspot.com/3274043/diff/1/proto/encode.go#newcode373\nproto/encode.go:373: // check default\nOn 2010/11/28 22:49:50, dsymonds wrote:\n> On 2010/11/28 15:00:34, mkrautz wrote:\n> > On 2010/11/28 03:04:19, dsymonds wrote:\n> > > I don't think this should even be checking the default at all. If the value\n> is\n> > > the same as the default then it should still be encoded. I think the whole\n> > > !p.Required block can probably be dropped.\n> > \n> > I tried to remove it, but the test case failed in\n> > proto_test.TestEncodeDecode(1-5).\n> > I know nothing of the innards of the protobuf wire format, but it seems like\n> the\n> > tests assume that if an optional field has the default value, it shouldn't be\n> > encoded in the wire format.\n> \n> Okay, that's a bug. Default values should have no impact on encoding/decoding.\n> Just add this:\n>   // TODO: remove this block and fix tests\n> and I'll see to it later.\n\nDone.\n\nhttp://codereview.appspot.com/3274043/diff/11001/proto/all_test.go\nFile proto/all_test.go (right):\n\nhttp://codereview.appspot.com/3274043/diff/11001/proto/all_test.go#newcode794\nproto/all_test.go:794: if pbd.F_BytesRequired == nil {\nOn 2010/11/28 22:49:50, dsymonds wrote:\n> What happened to the len(pbd.F_BytesRequired) check?\n\nIt went away when I simplified the logic in the if block.  The thinking was that if the slice is nil, the length will always be 0. \n\nHowever, since we're checking the encoding/decoding, it think it makes sense to explicitly check if the length actually is 0 in cases where the slice != nil. Will re-add.\n\nhttp://codereview.appspot.com/3274043/diff/11001/proto/all_test.go#newcode800\nproto/all_test.go:800: if pbd.F_BytesOptional == nil {\nOn 2010/11/28 22:49:50, dsymonds wrote:\n> len check?\n\nDitto.",
			"disapproval": false,
			"date": "2010-11-29 00:09:16.141739",
			"approval": false
		},
		{
			"sender": "krautz@gmail.com",
			"recipients": [
				"krautz@gmail.com",
				"r@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello r, dsymonds (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-11-29 00:14:51.204624",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I haven't looked at the code yet - just back from vacation - but I\nhave a quick question. What's wrong with decoding an empty byte slice\nas nil?\n\n-rob\n",
			"disapproval": false,
			"date": "2010-11-29 19:05:08.009029",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Nov 29, 2010 at 11:05, Rob 'Commander' Pike <r@golang.org> wrote:\n> I haven't looked at the code yet - just back from vacation - but I\n> have a quick question. What's wrong with decoding an empty byte slice\n> as nil?\n\nMy guess was that nil means \"wasn't present\".\n",
			"disapproval": false,
			"date": "2010-11-29 19:08:48.917089",
			"approval": false
		},
		{
			"sender": "krautz@gmail.com",
			"recipients": [
				"krautz@gmail.com",
				"r@golang.org",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2010/11/29 19:08:48, rsc wrote:\n> On Mon, Nov 29, 2010 at 11:05, Rob 'Commander' Pike <mailto:r@golang.org> wrote:\n> > I haven't looked at the code yet - just back from vacation - but I\n> > have a quick question. What's wrong with decoding an empty byte slice\n> > as nil?\n> \n> My guess was that nil means \"wasn't present\".\n\nThat's right.  I want to be able to differentiate between a message without a field present (i.e. has_foo() == false in protobuf for C++) and an empty bytes field (has_foo() == true, but length == 0).\n\nContext: http://code.google.com/p/goprotobuf/issues/detail?id=6 (Although looking back, the original bug report is also a bit unclear about this.)",
			"disapproval": false,
			"date": "2010-11-29 19:16:52.642198",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"krautz@gmail.com",
				"r@golang.org",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "FYI\n\nhttp://codereview.appspot.com/3274043/diff/19001/proto/encode.go\nFile proto/encode.go (right):\n\nhttp://codereview.appspot.com/3274043/diff/19001/proto/encode.go#newcode370\nproto/encode.go:370: // TODO: remove this block and fix tests\nOn 2010/11/29 22:03:19, r wrote:\n> how about DOING it?\n\nIf krautz is up for it, sure, go do it, but he already said he wasn't familiar with the wire encoding format, so I didn't want to burden him with understanding and updating the tests. I can do it as a follow-up.",
			"disapproval": false,
			"date": "2010-11-29 22:06:41.433580",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"krautz@gmail.com",
				"r@golang.org",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/3274043/diff/19001/proto/encode.go\nFile proto/encode.go (right):\n\nhttp://codereview.appspot.com/3274043/diff/19001/proto/encode.go#newcode370\nproto/encode.go:370: // TODO: remove this block and fix tests\nhow about DOING it?",
			"disapproval": false,
			"date": "2010-11-29 22:03:19.529023",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"krautz@gmail.com",
				"r@golang.org",
				"dsymonds@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/goprotobuf/source/detail?r=2790bc36be04 ***\n\nEncode and decode empty bytes fields correctly.\n\nR=r, dsymonds, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/3274043\n\nCommitter: Rob Pike <r@golang.org>",
			"disapproval": false,
			"date": "2010-11-29 22:15:53.480360",
			"approval": false
		}
	],
	"owner_email": "krautz@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mkrautz",
	"subject": "code review 3274043: Encode and decode empty bytes fields correctly.",
	"created": "2010-11-28 02:01:35.725782",
	"patchsets": [
		1,
		11001,
		19001
	],
	"modified": "2010-11-29 22:15:53.480360",
	"closed": false,
	"issue": 3274043
}