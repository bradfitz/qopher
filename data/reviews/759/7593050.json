{
	"description": "spec: fix description of initialization\nThe analysis does not depend on the values of the items.\nFixes issue 4648.",
	"cc": [
		"golang-dev@googlegroups.com",
		"gri@golang.org",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-03-20 20:53:54.811690",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This brings the spec in line with both the intent and the existing\r\nimplementations. The mention of values in the existing spec is a\r\nmistake.\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2013-03-20 20:54:36.337780",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "+1 for removing the notion of value\n\nhttps://codereview.appspot.com/7593050/diff/1/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7593050/diff/1/doc/go_spec.html#newcode5605\ndoc/go_spec.html:5605: topological reference order: if the initializer of <code>A</code>\nIs \"topological reference order\" actually an understood term?\n\nhow about:\n\n... based on the order they are referenced: if the initializer....\n\nhttps://codereview.appspot.com/7593050/diff/1/doc/go_spec.html#newcode5619\ndoc/go_spec.html:5619: in the order they appear in the source.\nThere may be multiple files involved, so the order also depends on the order in which the files are presented to the compiler. This should be mentioned somewhere (it's also part of the issue).",
			"disapproval": false,
			"date": "2013-03-20 21:10:06.041130",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-03-20 22:02:54.982980",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, gri@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-20 21:24:54.940170",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7593050/diff/6001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7593050/diff/6001/doc/go_spec.html#newcode5719\ndoc/go_spec.html:5719: order of reference: if the initializer of <code>A</code>\nI suggested \"based on the order of reference\" instead of \"in the order of reference\" because the order is (topologically) reversed: If A depends on B, B will be initialized first.\n\nMaybe it's fine since there is an example.",
			"disapproval": false,
			"date": "2013-03-20 21:28:22.261760",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, gri@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-20 21:51:13.058140",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-03-20 22:01:47.793230",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=85b1cc5d35dd ***\n\nspec: fix description of initialization\nThe analysis does not depend on the values of the items.\nFixes issue 4648.\n\nR=golang-dev, gri, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/7593050",
			"disapproval": false,
			"date": "2013-03-20 22:05:30.844950",
			"approval": false
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 7593050: spec: fix description of initialization",
	"created": "2013-03-20 20:53:48.973080",
	"patchsets": [
		1,
		6001,
		12001,
		16001
	],
	"modified": "2013-03-20 22:05:32.763920",
	"closed": true,
	"issue": 7593050
}