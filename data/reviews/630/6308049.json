{
	"description": "go.image/tiff: use optimized routines for RGBA and NRGBA\n\nPerformance for an RGBA image:\n\nbenchmark          old ns/op    new ns/op    delta\nBenchmarkEncode      1633495         7897  -99.52%\n\nbenchmark           old MB/s     new MB/s  speedup\nBenchmarkEncode        37.83      7824.96  206.85x\n\nNRGBA images are now encoded as such, the spec calls it\n\"unassociated alpha\".",
	"cc": [
		"nigeltao@golang.org",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jun 7, 2012 at 3:02 PM, Russ Cox <rsc@golang.org> wrote:\r\n> You're encoding at 8 GB/s? Sounds too good to be true.\r\n\r\nThat's the bandwidth of io.Discard.\r\n\r\n--Benny.\r\n",
			"disapproval": false,
			"date": "2012-06-07 14:15:17.985515",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "You're encoding at 8 GB/s? Sounds too good to be true.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-07 13:03:14.695039",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"bsiegert@gmail.com",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you very much for your comments. PTAL.\n\nhttp://codereview.appspot.com/6308049/diff/3002/tiff/writer.go\nFile tiff/writer.go (right):\n\nhttp://codereview.appspot.com/6308049/diff/3002/tiff/writer.go#newcode79\ntiff/writer.go:79: if _, err := w.Write(m.Pix[y*m.Stride : y*m.Stride+linelen]); err != nil {\nOn 2012/06/08 01:56:35, nigeltao wrote:\n> \"y*m.Stride\" is incorrect if m.Rect does not start at the origin (0, 0). Call\n> m.PixOffset instead. If you're curious, look in image/image.go for the actual\n> formula.\n\nOkay. So if I loop from 0 to img.Rect.Dy(), then y*img.Stride is correct, I assume. Anyway, I used the code you suggested below.\n\n> It may be worth adding a test that you can round-trip an image modulo a\n> translation of its Rect.Min:\n> \n> m0 := image.NewRGBA(image.Rect(3, 4, 9, 8))\n> // manually fill m0 with some non-zero pixels\n> // buf := Encode(m0)\n> // m1 := Decode(buf)\n> compare(m1, m0)\n\nYes. I added this as TestRoundtrip2. I also had to tweak the compare function a bit so that different origins work.\n\n> But, your writeRGBA and writeNRGBA functions are a copy-and-paste of each other.\n> Instead, how about:\n> \n> func writePix(w io.Writer, pix []byte, nrows, length, stride int) error {\n\nExcellent!\n\n>   // TODO: you could possibly optimize this if length == stride.\n>   // It may or may not be worthwhile.\n\nI did this, and it does show up in the benchmark as an additional 20% gain.",
			"disapproval": false,
			"date": "2012-06-12 14:04:31.080415",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"bsiegert@gmail.com",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=f0ba5bdeeb1a&repo=image ***\n\ngo.image/tiff: use optimized routines for RGBA and NRGBA\n\nPerformance for an RGBA image:\n\nbenchmark          old ns/op    new ns/op    delta\nBenchmarkEncode      1633495         7897  -99.52%\n\nbenchmark           old MB/s     new MB/s  speedup\nBenchmarkEncode        37.83      7824.96  206.85x\n\nNRGBA images are now encoded as such, the spec calls it\n\"unassociated alpha\".\n\nR=nigeltao, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6308049\n\nCommitter: Nigel Tao <nigeltao@golang.org>",
			"disapproval": false,
			"date": "2012-06-13 00:40:47.487631",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"bsiegert@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.image",
			"disapproval": false,
			"date": "2012-06-07 13:01:27.893288",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Aha. I'm a little surprised we're writing uncompressed TIFFs but carry on.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-07 14:24:15.677375",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"bsiegert@gmail.com",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6308049/diff/3002/tiff/writer.go\nFile tiff/writer.go (right):\n\nhttp://codereview.appspot.com/6308049/diff/3002/tiff/writer.go#newcode79\ntiff/writer.go:79: if _, err := w.Write(m.Pix[y*m.Stride : y*m.Stride+linelen]); err != nil {\n\"y*m.Stride\" is incorrect if m.Rect does not start at the origin (0, 0). Call m.PixOffset instead. If you're curious, look in image/image.go for the actual formula.\n\nIt may be worth adding a test that you can round-trip an image modulo a translation of its Rect.Min:\n\nm0 := image.NewRGBA(image.Rect(3, 4, 9, 8))\n// manually fill m0 with some non-zero pixels\n// buf := Encode(m0)\n// m1 := Decode(buf)\ncompare(m1, m0)\n\nBut, your writeRGBA and writeNRGBA functions are a copy-and-paste of each other. Instead, how about:\n\nfunc writePix(w io.Writer, pix []byte, nrows, length, stride int) error {\n  // TODO: you could possibly optimize this if length == stride.\n  // It may or may not be worthwhile.\n  for ; nrows > 0; nrows-- {\n    if _, err := w.Write(pix[:length]); err != nil {\n      return err\n    }\n    pix = pix[stride:]\n  }\n  return nil\n}",
			"disapproval": false,
			"date": "2012-06-08 01:56:35.808914",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"bsiegert@gmail.com",
				"nigeltao@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.",
			"disapproval": false,
			"date": "2012-06-13 00:39:29.836518",
			"approval": true
		}
	],
	"owner_email": "bsiegert@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "bsiegert",
	"subject": "code review 6308049: go.image/tiff: use optimized routines for RGBA and NRGBA",
	"created": "2012-06-07 12:58:03.717395",
	"patchsets": [
		1,
		2001,
		3002,
		4
	],
	"modified": "2012-08-15 13:53:42.131620",
	"closed": true,
	"issue": 6308049
}