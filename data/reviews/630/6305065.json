{
	"description": "      math/big: Implemented binary GCD algorithm\n\nbenchmark                    old ns/op    new ns/op    delta\nBenchmarkGCD10x10                 4383         2126  -51.49%\nBenchmarkGCD10x100                5612         2124  -62.15%\nBenchmarkGCD10x1000               8843         2622  -70.35%\nBenchmarkGCD10x10000             17025         6576  -61.37%\nBenchmarkGCD10x100000           118985        48130  -59.55%\nBenchmarkGCD100x100              45328        11683  -74.23%\nBenchmarkGCD100x1000             50141        12678  -74.72%\nBenchmarkGCD100x10000           110314        26719  -75.78%\nBenchmarkGCD100x100000          630000       156041  -75.23%\nBenchmarkGCD1000x1000           654809       137973  -78.93%\nBenchmarkGCD1000x10000          985683       159951  -83.77%\nBenchmarkGCD1000x100000        4920792       366399  -92.55%\nBenchmarkGCD10000x10000       16848950      3732062  -77.85%\nBenchmarkGCD10000x100000      55401500      4675876  -91.56%\nBenchmarkGCD100000x100000   1126775000    258951800  -77.02%",
	"cc": [
		"gri@golang.org",
		"rsc@golang.org",
		"bradfitz@golang.org",
		"mtj@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-11 16:01:22.180253",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "hg is confusing me -- I used hg add to add the file, but it didn't add it to the CL.\n\nSo, I accidentally mailed it out separately.\n\nhttp://codereview.appspot.com/6300083\n\nMy bad.\n\n--Christopher\n\nhttp://codereview.appspot.com/6305065/diff/8001/src/pkg/math/big/int.go\nFile src/pkg/math/big/int.go (right):\n\nhttp://codereview.appspot.com/6305065/diff/8001/src/pkg/math/big/int.go#newcode105\nsrc/pkg/math/big/int.go:105: // negate sets z to -z and returns z.\nOn 2012/06/10 21:42:10, rsc wrote:\n> I don't believe this function is necessary; see below.\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/8001/src/pkg/math/big/int.go#newcode655\nsrc/pkg/math/big/int.go:655: // even reports whether x is even.\nOn 2012/06/10 21:42:10, rsc wrote:\n> I don't believe this function is necessary; see below.\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/8001/src/pkg/math/big/int.go#newcode681\nsrc/pkg/math/big/int.go:681: t.Set(v).negate()\nOn 2012/06/10 21:42:10, rsc wrote:\n> t.Neg(v)\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/8001/src/pkg/math/big/int.go#newcode686\nsrc/pkg/math/big/int.go:686: for t.even() {\nOn 2012/06/10 21:42:10, rsc wrote:\n> t.Rsh(t, t.abs.trailingZeroBits()) no?\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/8001/src/pkg/math/big/int.go#newcode693\nsrc/pkg/math/big/int.go:693: v.Set(t).negate()\nOn 2012/06/10 21:42:10, rsc wrote:\n> v.Neg(t)\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go\nFile src/pkg/math/big/int.go (right):\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode25\nsrc/pkg/math/big/int.go:25: intZero = &Int{}\nOn 2012/06/11 21:08:12, gri wrote:\n> intZero is not needed - see below. change this back to what it was\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode649\nsrc/pkg/math/big/int.go:649: // even reports whether x is even.\nOn 2012/06/11 21:08:12, gri wrote:\n> this function is not used anymore\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode654\nsrc/pkg/math/big/int.go:654: // BinaryGCD sets z to the greatest common divisor of a and b, which are assumed to be\nOn 2012/06/11 21:08:12, gri wrote:\n> s/BinaryGCD/binaryGCD/\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode654\nsrc/pkg/math/big/int.go:654: // BinaryGCD sets z to the greatest common divisor of a and b, which are assumed to be\nOn 2012/06/11 21:08:12, gri wrote:\n> which must be positive, \n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode656\nsrc/pkg/math/big/int.go:656: // This is the faster, non-extended binary version of the algorithm from from Knuth,\nOn 2012/06/11 21:08:12, gri wrote:\n> s/from from/from/\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode659\nsrc/pkg/math/big/int.go:659: u := z\nOn 2012/06/11 21:08:12, gri wrote:\n> u := z.Set(a)\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode663\nsrc/pkg/math/big/int.go:663: // collect all of the 2s\nOn 2012/06/11 21:08:12, gri wrote:\n> this comment is not very meaningful - what are all the 2s in a binary number?\n> \n> // determine largest k such that u = u'<<k, v = v'<<k\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode665\nsrc/pkg/math/big/int.go:665: vTz := v.abs.trailingZeroBits()\nOn 2012/06/11 21:08:12, gri wrote:\n> if vk := v.abs.trailingZeroBits(); vk < k {\n>    k = vk\n> }\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode674\nsrc/pkg/math/big/int.go:674: // if u is odd:\nOn 2012/06/11 21:08:12, gri wrote:\n> leave this comment away\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode675\nsrc/pkg/math/big/int.go:675: if len(u.abs) != 0 && u.abs[0]&1 == 1 {\nOn 2012/06/11 21:08:12, gri wrote:\n> s/!=/>/\n> \n> (detail, but implies more directly that index 0 is valid. also it's the way all\n> the other tests for zero are written in this file)\n> \n> But since u and v must be strictly positive, this test is not even required (but\n> then a comment is appropriate).\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode676\nsrc/pkg/math/big/int.go:676: t.Neg(v)\nOn 2012/06/11 21:08:12, gri wrote:\n> before t.Neg(v) add comment\n> \n> // u is odd\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode679\nsrc/pkg/math/big/int.go:679: for t.Cmp(intZero) != 0 {\nOn 2012/06/11 21:08:12, gri wrote:\n> for len(t.abs) > 0 {\n> \n> and get rid of intZero\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode682\nsrc/pkg/math/big/int.go:682: \nOn 2012/06/11 21:08:12, gri wrote:\n> remove this empty line\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode683\nsrc/pkg/math/big/int.go:683: if t.Cmp(intZero) > 0 {\nOn 2012/06/11 21:08:12, gri wrote:\n> if t.neg {\n> \n> and swap the branches\n> \n> (We enter the for loop with a value t != 0. It must still be != 0 after shifting\n> by trailingZeroBits. The only way it can be positive is if it's not negative).\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode690\nsrc/pkg/math/big/int.go:690: return u.Lsh(u, k)\nOn 2012/06/11 21:08:12, gri wrote:\n> it seems appropriate to have an empty line before the return - given the use of\n> empty lines in the rest of this function\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/rat.go\nFile src/pkg/math/big/rat.go (right):\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/rat.go#newcode164\nsrc/pkg/math/big/rat.go:164: if f.Cmp(intOne) != 0 {\nOn 2012/06/11 21:08:12, gri wrote:\n> there is no reason to split up this if and the assignment to f\n\nDone.",
			"disapproval": false,
			"date": "2012-06-11 21:25:12.448588",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6305065/diff/13002/src/pkg/math/big/int.go\nFile src/pkg/math/big/int.go (right):\n\nhttp://codereview.appspot.com/6305065/diff/13002/src/pkg/math/big/int.go#newcode646\nsrc/pkg/math/big/int.go:646: // binaryGCD sets z to the greatest common divisor of a and b, which are assumed to be\nbinaryGCD sets z to the greatest common divisor of a and b, which must be\npositive, and returns z.\nSee Knuth, The Art of Computer Programming, Vol. 2, Section 4.5.2, Algorithm B.\n\nhttp://codereview.appspot.com/6305065/diff/13002/src/pkg/math/big/int.go#newcode663\nsrc/pkg/math/big/int.go:663: t := new(Int).Set(u)\nThere's a 50% chance that u is odd, and for large numbers, Set is not cheap. I would do:\n\n// determine t (we know that u > 0)\nt := new(Int)\nif u.abs[0]&1 != 0 {\n   // u is odd\n   t.Neg(v)\n} else {\n   t.Set(u)\n}",
			"disapproval": false,
			"date": "2012-06-11 21:50:14.059351",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org, rsc@golang.org, bradfitz@golang.org, remyoudompheng@gmail.com, mtj@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-12 18:43:14.645959",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "changed reviewer to gri",
			"disapproval": false,
			"date": "2012-06-07 15:22:36.050246",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-09 16:00:39.169178",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Some more.\n\nAlso, I don't see the benchmarks. And calibrate_test.go is not the right for the benchmarks.\n\n- gri\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go\nFile src/pkg/math/big/int.go (right):\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode25\nsrc/pkg/math/big/int.go:25: intZero = &Int{}\nintZero is not needed - see below. change this back to what it was\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode649\nsrc/pkg/math/big/int.go:649: // even reports whether x is even.\nthis function is not used anymore\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode654\nsrc/pkg/math/big/int.go:654: // BinaryGCD sets z to the greatest common divisor of a and b, which are assumed to be\ns/BinaryGCD/binaryGCD/\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode654\nsrc/pkg/math/big/int.go:654: // BinaryGCD sets z to the greatest common divisor of a and b, which are assumed to be\nwhich must be positive,\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode656\nsrc/pkg/math/big/int.go:656: // This is the faster, non-extended binary version of the algorithm from from Knuth,\ns/from from/from/\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode659\nsrc/pkg/math/big/int.go:659: u := z\nu := z.Set(a)\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode663\nsrc/pkg/math/big/int.go:663: // collect all of the 2s\nthis comment is not very meaningful - what are all the 2s in a binary number?\n\n// determine largest k such that u = u'<<k, v = v'<<k\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode665\nsrc/pkg/math/big/int.go:665: vTz := v.abs.trailingZeroBits()\nif vk := v.abs.trailingZeroBits(); vk < k {\n   k = vk\n}\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode674\nsrc/pkg/math/big/int.go:674: // if u is odd:\nleave this comment away\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode675\nsrc/pkg/math/big/int.go:675: if len(u.abs) != 0 && u.abs[0]&1 == 1 {\ns/!=/>/\n\n(detail, but implies more directly that index 0 is valid. also it's the way all the other tests for zero are written in this file)\n\nBut since u and v must be strictly positive, this test is not even required (but then a comment is appropriate).\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode676\nsrc/pkg/math/big/int.go:676: t.Neg(v)\nbefore t.Neg(v) add comment\n\n// u is odd\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode679\nsrc/pkg/math/big/int.go:679: for t.Cmp(intZero) != 0 {\nfor len(t.abs) > 0 {\n\nand get rid of intZero\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode682\nsrc/pkg/math/big/int.go:682: \nremove this empty line\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode683\nsrc/pkg/math/big/int.go:683: if t.Cmp(intZero) > 0 {\nif t.neg {\n\nand swap the branches\n\n(We enter the for loop with a value t != 0. It must still be != 0 after shifting by trailingZeroBits. The only way it can be positive is if it's not negative).\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode690\nsrc/pkg/math/big/int.go:690: return u.Lsh(u, k)\nit seems appropriate to have an empty line before the return - given the use of empty lines in the rest of this function\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/rat.go\nFile src/pkg/math/big/rat.go (right):\n\nhttp://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/rat.go#newcode164\nsrc/pkg/math/big/rat.go:164: if f.Cmp(intOne) != 0 {\nthere is no reason to split up this if and the assignment to f",
			"disapproval": false,
			"date": "2012-06-11 21:08:12.043619",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Here are the benchmark results for my beefy Linux desktop.\n\n=== RUN TestGCD\n10 bits and 10 bits; regular: 1712 ns, binary: 4929 ns; 187.908879% difference\n10 bits and 60 bits; regular: 5947 ns, binary: 5552 ns; -6.642004% difference\n10 bits and 100 bits; regular: 9916 ns, binary: 5634 ns; -43.182735% difference\n10 bits and 1000 bits; regular: 116808 ns, binary: 6822 ns; -94.159647% difference\n10 bits and 10000 bits; regular: 3104644 ns, binary: 15426 ns; -99.503131% difference\n60 bits and 60 bits; regular: 7075 ns, binary: 22092 ns; 212.254417% difference\n60 bits and 100 bits; regular: 10970 ns, binary: 23027 ns; 109.908842% difference\n60 bits and 1000 bits; regular: 116554 ns, binary: 25844 ns; -77.826587% difference\n60 bits and 10000 bits; regular: 3114590 ns, binary: 51236 ns; -98.354968% difference\n100 bits and 100 bits; regular: 11863 ns, binary: 41772 ns; 252.120037% difference\n100 bits and 1000 bits; regular: 120645 ns, binary: 48703 ns; -59.631149% difference\n100 bits and 10000 bits; regular: 3119270 ns, binary: 97292 ns; -96.880937% difference\n1000 bits and 1000 bits; regular: 143738 ns, binary: 613969 ns; 327.144527% difference\n1000 bits and 10000 bits; regular: 3211928 ns, binary: 988056 ns; -69.237916% difference\n10000 bits and 10000 bits; regular: 3753864 ns, binary: 16323120 ns; 334.835146% difference\n--- PASS: TestGCD (75.03 seconds)\nPASS\nok      math/big        75.036s\n\nhttp://codereview.appspot.com/6305065/diff/13002/src/pkg/math/big/int.go\nFile src/pkg/math/big/int.go (right):\n\nhttp://codereview.appspot.com/6305065/diff/13002/src/pkg/math/big/int.go#newcode646\nsrc/pkg/math/big/int.go:646: // binaryGCD sets z to the greatest common divisor of a and b, which are assumed to be\nOn 2012/06/11 21:50:14, gri wrote:\n> binaryGCD sets z to the greatest common divisor of a and b, which must be\n> positive, and returns z.\n> See Knuth, The Art of Computer Programming, Vol. 2, Section 4.5.2, Algorithm B.\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/13002/src/pkg/math/big/int.go#newcode663\nsrc/pkg/math/big/int.go:663: t := new(Int).Set(u)\nOn 2012/06/11 21:50:14, gri wrote:\n> There's a 50% chance that u is odd, and for large numbers, Set is not cheap. I\n> would do:\n> \n> // determine t (we know that u > 0)\n> t := new(Int)\n> if u.abs[0]&1 != 0 {\n>    // u is odd\n>    t.Neg(v)\n> } else {\n>    t.Set(u)\n> }\n\nDone.",
			"disapproval": false,
			"date": "2012-06-11 22:31:36.389949",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "When I have had domains of superior performance for various\r\nimplementations, I've built a function that the user calls and then\r\ninvisibly dispatched inside...\r\n\r\n// compute the Nth Fibonacci number using big integer arithmentic.\r\n Efficient algorithms\r\n// are used so the 10 millionth value requires about a second to create the\r\nresult, which\r\n// has 2,089,877 digits when formatted in decimal. Time measured and\r\nalgorithm breakpoint\r\n// determined on 2009 MacBook Pro test system (2.66 GHz T9550 Intel Core 2\r\nDuo Penryn with\r\n// 6 MB on-chip L2 cache.)\r\nfunc Fibonacci(n int) (f *big.Int) {\r\n        switch {\r\n        case n < 1:\r\n                f = big.NewInt(0)\r\n\r\n        // static table for small cases (optional, but always faster and\r\nless storage debris)\r\n        case n < len(fibonacciTable):\r\n                f = big.NewInt(fibonacciTable[n])\r\n\r\n        // big integer evaluation using algorithims in their most efficient\r\nranges\r\n        case n <= 100: // Direct series evaluation is fast for small values\r\n                f = fibSeries(n)\r\n        case n <= 4420: // Blenkinsop algorithm is faster for values > 100\r\non test system\r\n                f = fibBlenkinsop(n)\r\n        default: // Takahashi algorithm is faster for values > 4420 on test\r\nsystem\r\n                f = fibTakahashi(n)\r\n        }\r\n        return\r\n}\r\n\r\nOn Mon, Jun 11, 2012 at 4:39 PM, <gri@golang.org> wrote:\r\n\r\n> binaryGCD looks mostly good now. But the benchmark needs to be adjusted.\r\n> - gri\r\n>\r\n>\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/10005/src/pkg/**\r\n> math/big/gcd_test.go<http://codereview.appspot.com/6305065/diff/10005/src/pkg/math/big/gcd_test.go>\r\n> File src/pkg/math/big/gcd_test.go (right):\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/10005/src/pkg/**\r\n> math/big/gcd_test.go#newcode18<http://codereview.appspot.com/6305065/diff/10005/src/pkg/math/big/gcd_test.go#newcode18>\r\n> src/pkg/math/big/gcd_test.go:**18: var useBinaryGCD bool\r\n> Please no communication via global variables. Even if we were to keep\r\n> the current setup (which I recommend to change), the proper way would be\r\n> to encapsulate extra parameters via a closure).\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/10005/src/pkg/**\r\n> math/big/gcd_test.go#newcode40<http://codereview.appspot.com/6305065/diff/10005/src/pkg/math/big/gcd_test.go#newcode40>\r\n> src/pkg/math/big/gcd_test.go:**40: for true {\r\n> for {\r\n>\r\n> (same as for true {)\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/10005/src/pkg/**\r\n> math/big/gcd_test.go#newcode64<http://codereview.appspot.com/6305065/diff/10005/src/pkg/math/big/gcd_test.go#newcode64>\r\n> src/pkg/math/big/gcd_test.go:**64: func TestGCD(t *testing.T) {\r\n> yes, please make this a set of regular benchmark functions - there's\r\n> precedence for this in this package. this way, the benchmark code\r\n> doesn't affect the runtime of the tests\r\n>\r\n> http://codereview.appspot.com/**6305065/<http://codereview.appspot.com/6305065/>\r\n>\r\n\r\n\r\n\r\n-- \r\nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n650-335-5765\r\n",
			"disapproval": false,
			"date": "2012-06-11 23:59:58.313230",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I want to see all the newly exported functions gone. The only thing that should be in this CL is a faster version of gcd, also not exported. There should be no visible API change.\n\nPlease keep all the other changes at a minimum.\n\nWhat is missing though is a benchmark that shows that this is indeed running faster, and the benchmark numbers should be in the CL. You can use $GOROOT/misc/benchcmp to get the respective output.\n\n- gri\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go\nFile src/pkg/math/big/int.go (right):\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode25\nsrc/pkg/math/big/int.go:25: intZero = &Int{false, nat(nil)}\nintZero = &Int{}\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode105\nsrc/pkg/math/big/int.go:105: // Negate sets z to -z and returns z.\n// negate sets ...\n\ndo not export this function\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode107\nsrc/pkg/math/big/int.go:107: z.neg = !z.neg\nthis needs to be:\n\nz.neg = len(z.abs) > 0 && !z.neg // 0 has no sign\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode655\nsrc/pkg/math/big/int.go:655: // Returns whether z is even.\n// even reports whether x is even.\n\ndo not export this function - no need to change the API\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode656\nsrc/pkg/math/big/int.go:656: func (z *Int) Even() bool {\ns/z/x/\n\nThe receiver is the argument not the result. The convention is that it is called\nx.\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode657\nsrc/pkg/math/big/int.go:657: if (z.abs[0] & 1) == 1 {\nreturn len(z.abs) == 0 || z.abs[0] & 1 == 0\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode664\nsrc/pkg/math/big/int.go:664: func (z *Int) Odd() bool {\nget rid of this function - we only need one of odd, even\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode673\nsrc/pkg/math/big/int.go:673: // If either a or b is not positive, GCD sets u = x = y = 0.\nThis sentence doesn't apply here.\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode676\nsrc/pkg/math/big/int.go:676: func (u *Int) BinaryGCD(a, b *Int) *Int {\ns/u/z/.\n\nThe convention in this package is that the result is always called z. You can still use u inside, with:\n\nu := z\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode676\nsrc/pkg/math/big/int.go:676: func (u *Int) BinaryGCD(a, b *Int) *Int {\ns/BinaryGCD/binaryGCD/\n\ndo not export this function - no need to change the API with this CL\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode680\nsrc/pkg/math/big/int.go:680: // Collect all of the 2s.\n// determine greatest common power of two k\n\n(the comment style in this package is to use lower-case and no period at the end for simple non-sentence statements)\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode681\nsrc/pkg/math/big/int.go:681: k := uint(0)\nvar k uint\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode682\nsrc/pkg/math/big/int.go:682: for u.Even() && v.Even() {\nthis can be done faster: k is the min of the number of trailing zeros of u.abs and v.abs. Then shift both by k.\n\nUse helper function (see my CL  http://codereview.appspot.com/6299064):\n\nfunc (x nat) trailingZeroBits() uint\n\nk := min(u.abs.trailingZeroBits(), v.abs.trailingZeroBits())\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode688\nsrc/pkg/math/big/int.go:688: // Set t.\n// determine t\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode690\nsrc/pkg/math/big/int.go:690: if u.Odd() {\nif !u.even()\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode695\nsrc/pkg/math/big/int.go:695: // Reduce t.\n// reduce t\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode696\nsrc/pkg/math/big/int.go:696: for t.Even() {\nfor !t.odd() {\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode982\nsrc/pkg/math/big/int.go:982: // Returns a random Word-sized value.\nLeave this stuff away. We are not going to introduce random new API functionality.\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int_test.go\nFile src/pkg/math/big/int_test.go (right):\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int_test.go#newcode871\nsrc/pkg/math/big/int_test.go:871: // Ensure that random big primes always have 1 as their GCD.\nleave this section away\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/rat.go\nFile src/pkg/math/big/rat.go (right):\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/rat.go#newcode160\nsrc/pkg/math/big/rat.go:160: neg := z.a.neg\nwhy this change? why not simply call binaryGCD.",
			"disapproval": false,
			"date": "2012-06-08 18:55:45.683921",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I used benchcmp to test a simple little benchmark that just calls GCD. Here are the results for my MacBook Air for 60-bit numbers and 60,000-bit numbers.\n\nbenchmark            old ns/op    new ns/op    delta\nBenchmark60GCD           34504        16672  -51.68%\nBenchmark60000GCD    666714652    238680756  -64.20%\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go\nFile src/pkg/math/big/int.go (right):\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode25\nsrc/pkg/math/big/int.go:25: intZero = &Int{false, nat(nil)}\nOn 2012/06/08 18:55:45, gri wrote:\n> intZero = &Int{}\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode105\nsrc/pkg/math/big/int.go:105: // Negate sets z to -z and returns z.\nOn 2012/06/08 18:55:45, gri wrote:\n> // negate sets ...\n> \n> do not export this function\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode107\nsrc/pkg/math/big/int.go:107: z.neg = !z.neg\nOn 2012/06/08 18:55:45, gri wrote:\n> this needs to be:\n> \n> z.neg = len(z.abs) > 0 && !z.neg // 0 has no sign\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode655\nsrc/pkg/math/big/int.go:655: // Returns whether z is even.\nOn 2012/06/08 18:55:45, gri wrote:\n> // even reports whether x is even.\n> \n> do not export this function - no need to change the API\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode656\nsrc/pkg/math/big/int.go:656: func (z *Int) Even() bool {\nOn 2012/06/08 18:55:45, gri wrote:\n> s/z/x/\n> \n> The receiver is the argument not the result. The convention is that it is called\n> x.\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode657\nsrc/pkg/math/big/int.go:657: if (z.abs[0] & 1) == 1 {\nOn 2012/06/08 18:55:45, gri wrote:\n> return len(z.abs) == 0 || z.abs[0] & 1 == 0\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode664\nsrc/pkg/math/big/int.go:664: func (z *Int) Odd() bool {\nOn 2012/06/08 18:55:45, gri wrote:\n> get rid of this function - we only need one of odd, even\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode673\nsrc/pkg/math/big/int.go:673: // If either a or b is not positive, GCD sets u = x = y = 0.\nOn 2012/06/08 18:55:45, gri wrote:\n> This sentence doesn't apply here.\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode676\nsrc/pkg/math/big/int.go:676: func (u *Int) BinaryGCD(a, b *Int) *Int {\nOn 2012/06/08 18:55:45, gri wrote:\n> s/u/z/.\n> \n> The convention in this package is that the result is always called z. You can\n> still use u inside, with:\n> \n> u := z\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode676\nsrc/pkg/math/big/int.go:676: func (u *Int) BinaryGCD(a, b *Int) *Int {\nOn 2012/06/08 18:55:45, gri wrote:\n> s/BinaryGCD/binaryGCD/\n> \n> do not export this function - no need to change the API with this CL\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode680\nsrc/pkg/math/big/int.go:680: // Collect all of the 2s.\nOn 2012/06/08 18:55:45, gri wrote:\n> // determine greatest common power of two k\n> \n> (the comment style in this package is to use lower-case and no period at the end\n> for simple non-sentence statements)\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode681\nsrc/pkg/math/big/int.go:681: k := uint(0)\nOn 2012/06/08 18:55:45, gri wrote:\n> var k uint\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode682\nsrc/pkg/math/big/int.go:682: for u.Even() && v.Even() {\nOn 2012/06/08 18:55:45, gri wrote:\n> this can be done faster: k is the min of the number of trailing zeros of u.abs\n> and v.abs. Then shift both by k.\n> \n> Use helper function (see my CL  http://codereview.appspot.com/6299064%29:\n> \n> func (x nat) trailingZeroBits() uint\n> \n> k := min(u.abs.trailingZeroBits(), v.abs.trailingZeroBits())\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode688\nsrc/pkg/math/big/int.go:688: // Set t.\nOn 2012/06/08 18:55:45, gri wrote:\n> // determine t\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode690\nsrc/pkg/math/big/int.go:690: if u.Odd() {\nOn 2012/06/08 18:55:45, gri wrote:\n> if !u.even()\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode695\nsrc/pkg/math/big/int.go:695: // Reduce t.\nOn 2012/06/08 18:55:45, gri wrote:\n> // reduce t\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode696\nsrc/pkg/math/big/int.go:696: for t.Even() {\nOn 2012/06/08 18:55:45, gri wrote:\n> for !t.odd() {\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int.go#newcode982\nsrc/pkg/math/big/int.go:982: // Returns a random Word-sized value.\nOn 2012/06/08 18:55:45, gri wrote:\n> Leave this stuff away. We are not going to introduce random new API\n> functionality.\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int_test.go\nFile src/pkg/math/big/int_test.go (right):\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/int_test.go#newcode871\nsrc/pkg/math/big/int_test.go:871: // Ensure that random big primes always have 1 as their GCD.\nOn 2012/06/08 18:55:45, gri wrote:\n> leave this section away\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/rat.go\nFile src/pkg/math/big/rat.go (right):\n\nhttp://codereview.appspot.com/6305065/diff/2001/src/pkg/math/big/rat.go#newcode160\nsrc/pkg/math/big/rat.go:160: neg := z.a.neg\nOn 2012/06/08 18:55:45, gri wrote:\n> why this change? why not simply call binaryGCD.\n\nWe have to ensure that both arguments are positive first, but I changed it to directly call binaryGCD, since we know they will after we fix the signs as such.",
			"disapproval": false,
			"date": "2012-06-09 15:59:22.667436",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org, rsc@golang.org, bradfitz@golang.org, remyoudompheng@gmail.com, mtj@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-12 14:26:22.081212",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Much better.\n\nPlease also update the CL description: it should contain the benchmark results.\n\nthanks!\n- gri\n\nhttp://codereview.appspot.com/6305065/diff/3013/src/pkg/math/big/gcd_test.go\nFile src/pkg/math/big/gcd_test.go (right):\n\nhttp://codereview.appspot.com/6305065/diff/3013/src/pkg/math/big/gcd_test.go#newcode42\nsrc/pkg/math/big/gcd_test.go:42: func BenchmarkGCD60x60(b *testing.B)         { runGCD(b, 60, 60) }\nIs there any particular reason for including any of the 60 cases? Seems like we're covered with all combinations of 10, 100, 1000, 10000, and 100000.\n\nJust leave them away.",
			"disapproval": false,
			"date": "2012-06-12 18:53:50.309811",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "You cannot submit. I am going to submit on behalf of you.\r\n- gri\r\n\r\nOn Tue, Jun 12, 2012 at 5:58 PM, Christopher Swenson\r\n<cswenson@google.com> wrote:\r\n> Done.\r\n>\r\n> When submitting, though, I get\r\n>\r\n> abort: cannot find cswenson@google.com in CONTRIBUTORS\r\n>\r\n> I assume that someone has to add me to that file?\r\n>\r\n> --Christopher\r\n>\r\n>\r\n> On Tue, Jun 12, 2012 at 6:10 PM, <gri@golang.org> wrote:\r\n>>\r\n>> LGTM\r\n>>\r\n>> Please adjust the comment below and we're good to go.\r\n>>\r\n>> Thanks for bearing with me.\r\n>> - gri\r\n>>\r\n>>\r\n>>\r\n>> http://codereview.appspot.com/6305065/diff/2012/src/pkg/math/big/gcd_test.go\r\n>> File src/pkg/math/big/gcd_test.go (right):\r\n>>\r\n>>\r\n>> http://codereview.appspot.com/6305065/diff/2012/src/pkg/math/big/gcd_test.go#newcode24\r\n>> src/pkg/math/big/gcd_test.go:24: // ensure that we use the same numbers\r\n>> in the same order\r\n>> This comment doesn't make much sense anymore since you are not really\r\n>> generating a series of numbers, just two. Maybe:\r\n>>\r\n>> // ensure benchmark is using the same input each time\r\n>>\r\n>> http://codereview.appspot.com/6305065/\r\n>\r\n>\r\n>\r\n>\r\n> --\r\n> Christopher Swenson\r\n> cswenson@google.com\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-06-13 01:02:40.441376",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"cswenson@google.com",
				"gri@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-06-07 15:13:34.821086",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6305065/diff/8001/src/pkg/math/big/int.go\nFile src/pkg/math/big/int.go (right):\n\nhttp://codereview.appspot.com/6305065/diff/8001/src/pkg/math/big/int.go#newcode105\nsrc/pkg/math/big/int.go:105: // negate sets z to -z and returns z.\nI don't believe this function is necessary; see below.\n\nhttp://codereview.appspot.com/6305065/diff/8001/src/pkg/math/big/int.go#newcode655\nsrc/pkg/math/big/int.go:655: // even reports whether x is even.\nI don't believe this function is necessary; see below.\n\nhttp://codereview.appspot.com/6305065/diff/8001/src/pkg/math/big/int.go#newcode681\nsrc/pkg/math/big/int.go:681: t.Set(v).negate()\nt.Neg(v)\n\nhttp://codereview.appspot.com/6305065/diff/8001/src/pkg/math/big/int.go#newcode686\nsrc/pkg/math/big/int.go:686: for t.even() {\nt.Rsh(t, t.abs.trailingZeroBits()) no?\n\nhttp://codereview.appspot.com/6305065/diff/8001/src/pkg/math/big/int.go#newcode693\nsrc/pkg/math/big/int.go:693: v.Set(t).negate()\nv.Neg(t)",
			"disapproval": false,
			"date": "2012-06-10 21:42:10.594828",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Jun 9, 2012 at 11:01 AM, Christopher Swenson\r\n<cswenson@google.com> wrote:\r\n> On Fri, Jun 8, 2012 at 2:59 PM, Russ Cox <rsc@golang.org> wrote:\r\n>>\r\n>> On Fri, Jun 8, 2012 at 2:55 PM, \u00a0<gri@golang.org> wrote:\r\n>> > this needs to be:\r\n>> >\r\n>> > z.neg = len(z.abs) > 0 && !z.neg // 0 has no sign\r\n>>\r\n>> or just call z.Neg(z).\r\n>> there's very little reason to introduce z.Negate() or even z.negate().\r\n>\r\n> I was trying to minimize the amount of potential copying that goes on. I'm\r\n> not familiar enough with the go compiler / runtimes to know when it will\r\n> optimize things away.\r\n\r\nWhat copying were you worried about?  In z.Neg(z) vs z.Negate(), the\r\nonly thing I can see is the extra parameter z, and that will indeed\r\nresult in one more parameter to the function call, but it's just a\r\npointer, so one word.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-10 21:33:03.178399",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-11 21:25:05.122085",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This seems to agree with previous numbers, roughly.\r\n\r\nPerhaps I should add logic that only calls binaryGCD if the numbers are\r\nwithin a few words of each other in size?\r\n\r\nI reran the numbers with the boolean useBinaryGCD fixed, on my beefy Linux\r\ndesktop:\r\n\r\nPASS\r\nBenchmarkGCDRegular10x10          500000              4801 ns/op\r\nBenchmarkGCDBinary10x10  1000000              1679 ns/op\r\nBenchmarkGCDRegular10x60          500000              5470 ns/op\r\nBenchmarkGCDBinary10x60   500000              5893 ns/op\r\nBenchmarkGCDRegular10x100         500000              5575 ns/op\r\nBenchmarkGCDBinary10x100          200000              9777 ns/op\r\nBenchmarkGCDRegular10x1000        500000              6803 ns/op\r\nBenchmarkGCDBinary10x1000          10000            117068 ns/op\r\nBenchmarkGCDRegular10x10000       100000             15659 ns/op\r\nBenchmarkGCDBinary10x10000           500           3099052 ns/op\r\nBenchmarkGCDRegular60x60          100000             21224 ns/op\r\nBenchmarkGCDBinary60x60   500000              7083 ns/op\r\nBenchmarkGCDRegular60x100         100000             22260 ns/op\r\nBenchmarkGCDBinary60x100          200000             10911 ns/op\r\nBenchmarkGCDRegular60x1000        100000             25289 ns/op\r\nBenchmarkGCDBinary60x1000          10000            116764 ns/op\r\nBenchmarkGCDRegular60x10000        50000             50993 ns/op\r\nBenchmarkGCDBinary60x10000           500           3109416 ns/op\r\nBenchmarkGCDRegular100x100         50000             41395 ns/op\r\nBenchmarkGCDBinary100x100         200000             11818 ns/op\r\nBenchmarkGCDRegular100x1000        50000             48113 ns/op\r\nBenchmarkGCDBinary100x1000         10000            120659 ns/op\r\nBenchmarkGCDRegular100x10000       20000             96624 ns/op\r\nBenchmarkGCDBinary100x10000          500           3156508 ns/op\r\nBenchmarkGCDRegular1000x1000        5000            605254 ns/op\r\nBenchmarkGCDBinary1000x1000        10000            141884 ns/op\r\nBenchmarkGCDRegular1000x10000       2000            987342 ns/op\r\nBenchmarkGCDBinary1000x10000         500           3213206 ns/op\r\nBenchmarkGCDRegular10000x10000       100          17331330 ns/op\r\nBenchmarkGCDBinary10000x10000        500           3749402 ns/op\r\nok      math/big        75.241s\r\n\r\n\r\n--Christopher\r\n\r\nOn Tue, Jun 12, 2012 at 2:52 AM, <remyoudompheng@gmail.com> wrote:\r\n\r\n> Here are the benchmarks I obtain for Fibonacci numbers:\r\n> (when sizes are equal I take two consecutive Fibonacci terms of the\r\n> specified size).\r\n>\r\n> Left is regular, right is binary.\r\n>\r\n>\r\n> benchmark                  old ns/op    new ns/op    delta\r\n> BenchmarkGCD10x10              12416         2281  -81.63%\r\n> BenchmarkGCD10x60               5253         8926  +69.92%\r\n> BenchmarkGCD10x100              5467        17305  +216.54%\r\n> BenchmarkGCD10x1000             5676       178788  +3049.89%\r\n> BenchmarkGCD10x10000           13673      4304016  +31378.21%\r\n> BenchmarkGCD60x60              70486        10105  -85.66%\r\n> BenchmarkGCD60x100              5354        12166  +127.23%\r\n> BenchmarkGCD60x1000            10598       167285  +1478.46%\r\n> BenchmarkGCD60x10000           40188      4436928  +10940.43%\r\n> BenchmarkGCD100x100           140129        17532  -87.49%\r\n> BenchmarkGCD100x1000           10476       170715  +1529.58%\r\n> BenchmarkGCD100x10000          37456      4501676  +11918.57%\r\n> BenchmarkGCD1000x1000        2090200       204958  -90.19%\r\n> BenchmarkGCD1000x10000         54765      4631424  +8356.90%\r\n> BenchmarkGCD10000x10000     59659800      5536028  -90.72%\r\n>\r\n>\r\n>\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/10005/src/pkg/**\r\n> math/big/gcd_test.go<http://codereview.appspot.com/6305065/diff/10005/src/pkg/math/big/gcd_test.go>\r\n> File src/pkg/math/big/gcd_test.go (right):\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/10005/src/pkg/**\r\n> math/big/gcd_test.go#newcode65<http://codereview.appspot.com/6305065/diff/10005/src/pkg/math/big/gcd_test.go#newcode65>\r\n> src/pkg/math/big/gcd_test.go:**65: sizes := [...]uint{10, 60, 100, 1000,\r\n> 10000}\r\n> calibrate_test.go is a very special case. There is already a flag for\r\n> benchmarks which is -bench, so no need for adding a custom one.\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/6011/src/pkg/**\r\n> math/big/gcd_test.go<http://codereview.appspot.com/6305065/diff/6011/src/pkg/math/big/gcd_test.go>\r\n> File src/pkg/math/big/gcd_test.go (right):\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/6011/src/pkg/**\r\n> math/big/gcd_test.go#newcode22<http://codereview.appspot.com/6305065/diff/6011/src/pkg/math/big/gcd_test.go#newcode22>\r\n> src/pkg/math/big/gcd_test.go:**22: if !useBinaryGCD {\r\n> the logic seems reversed here.\r\n>\r\n> http://codereview.appspot.com/**6305065/<http://codereview.appspot.com/6305065/>\r\n>\r\n\r\n\r\n\r\n-- \r\nChristopher Swenson\r\ncswenson@google.com\r\n",
			"disapproval": false,
			"date": "2012-06-12 14:26:31.003850",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "More comments below. The benchmark needs to be reworked completely.\n\nAlso, R\u00e9my Oudompheng's measurements indicate clearly what I suspected: binaryGCD is much worse if there are large discrepancies in the number sizes. This needs to be addressed.\n\nhttp://codereview.appspot.com/6305065/diff/4005/src/pkg/math/big/gcd_test.go\nFile src/pkg/math/big/gcd_test.go (right):\n\nhttp://codereview.appspot.com/6305065/diff/4005/src/pkg/math/big/gcd_test.go#newcode5\nsrc/pkg/math/big/gcd_test.go:5: // This file prints execution times for running regular\n// This file implements a GCD benchmark.\n\nhttp://codereview.appspot.com/6305065/diff/4005/src/pkg/math/big/gcd_test.go#newcode16\nsrc/pkg/math/big/gcd_test.go:16: \n// randInt returns a pseudo-random Int in the range [1, 1<<size].\nfunc randInt(rnd *rand.Rand, size uint) *Int {\n   n := new(Int).Lsh(intOne, size)\n   x := new(Int).Rand(r, n)\n   return x.Add(x, intOne) // make sure result > 0\n}\n\nhttp://codereview.appspot.com/6305065/diff/4005/src/pkg/math/big/gcd_test.go#newcode17\nsrc/pkg/math/big/gcd_test.go:17: func runGCD(firstSize, secondSize uint, useBinaryGCD bool, b *testing.B) {\nrunGCD(b *testing.B, asize, bsize uint)\n\nb *testing.B should go first (this parameter is always present in all benchmarking routines)\n\nget rid of useBinaryGCD, always run the combined version. The idea of this benchmark is to show that GCD improves over time, including algorithmic improvements. Before submitting, run this benchmark using the old implementation of GCD, and using the new implementation. Using $GOROOT/misc/benchcmp, show that it is consistently better.\n\nhttp://codereview.appspot.com/6305065/diff/4005/src/pkg/math/big/gcd_test.go#newcode18\nsrc/pkg/math/big/gcd_test.go:18: var gcda = NewInt(0)\nthe timer needs to be stopped right away\n\nhttp://codereview.appspot.com/6305065/diff/4005/src/pkg/math/big/gcd_test.go#newcode25\nsrc/pkg/math/big/gcd_test.go:25: var m = NewInt(0)\nthis needs to be factored:\n\naa := randInt(r, asize)\nbb := randInf(r, bsize)\n\nhttp://codereview.appspot.com/6305065/diff/4005/src/pkg/math/big/gcd_test.go#newcode29\nsrc/pkg/math/big/gcd_test.go:29: // ensure that we use the same numbers in the same order\nthis is not correct - see below\n\nhttp://codereview.appspot.com/6305065/diff/4005/src/pkg/math/big/gcd_test.go#newcode32\nsrc/pkg/math/big/gcd_test.go:32: for i := 0; i < b.N; i++ {\nStartTimer goes before the loop\n\nhttp://codereview.appspot.com/6305065/diff/4005/src/pkg/math/big/gcd_test.go#newcode34\nsrc/pkg/math/big/gcd_test.go:34: // generate non-zero values\nThe reason for the loop is to provide the benchmarking code a way to calibrate its runtime. It should always run the same test. gcda and gcd b shouldn't change.\n\nFurthermore, this code needs to be factored.\n\nhttp://codereview.appspot.com/6305065/diff/4005/src/pkg/math/big/gcd_test.go#newcode48\nsrc/pkg/math/big/gcd_test.go:48: g.GCD(x, nil, gcda, gcdb)\nthis loop should just be:\n\nb.StartTimer()\nfor i := 0; i < b.N; i++ {\n   new(Int).GCD(x, nil, aa, bb)\n}\n\ng must always be the same, otherwise you don't measure the same operation every time, so use new(Int).",
			"disapproval": false,
			"date": "2012-06-12 18:05:20.065098",
			"approval": false
		},
		{
			"sender": "mtj@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Minor point, but:\r\n\r\nreturn x.Add(x, intOne) // make sure result > 0\r\n\r\nwould be better as (pseudocode)\r\n\r\nif x == 0 return 1\r\nor\r\nif x == 0 then add(x,1)\r\nor\r\n:\r\n\r\nbecause there is a 1 in 2^n chance that 0xFFFFF.... wil turn into a 1-bit\r\nlonger number than claimed.\r\n\r\nOn Tue, Jun 12, 2012 at 12:09 PM, <cswenson@google.com> wrote:\r\n\r\n> PTAL at the updated if-statement in int.go: if the two arguments are of\r\n> different sizes, it does a division to bring them down to the same size,\r\n> then runs binaryGCD.\r\n>\r\n> Benchmarks look even better now:\r\n>\r\n>\r\n> benchmark                    old ns/op    new ns/op    delta\r\n> BenchmarkGCD10x10                 4338         2372  -45.32%\r\n> BenchmarkGCD10x100                7784         2232  -71.33%\r\n> BenchmarkGCD10x1000               8132         2795  -65.63%\r\n> BenchmarkGCD10x10000             15784         6834  -56.70%\r\n> BenchmarkGCD10x100000           101371        47881  -52.77%\r\n> BenchmarkGCD100x100              47597        12651  -73.42%\r\n> BenchmarkGCD100x1000             49450        14427  -70.83%\r\n> BenchmarkGCD100x10000           100685        25527  -74.65%\r\n> BenchmarkGCD100x100000          672727       161391  -76.01%\r\n> BenchmarkGCD1000x1000           632173       140535  -77.77%\r\n> BenchmarkGCD1000x10000          999679       166336  -83.36%\r\n> BenchmarkGCD1000x100000        4805900       374854  -92.20%\r\n> BenchmarkGCD10000x10000       17219140      3728196  -78.35%\r\n> BenchmarkGCD10000x100000      55259080      4659028  -91.57%\r\n> BenchmarkGCD100000x100000   1138883000    259237600  -77.24%\r\n>\r\n>\r\n>\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/3013/src/pkg/**\r\n> math/big/gcd_test.go<http://codereview.appspot.com/6305065/diff/3013/src/pkg/math/big/gcd_test.go>\r\n> File src/pkg/math/big/gcd_test.go (right):\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/3013/src/pkg/**\r\n> math/big/gcd_test.go#newcode42<http://codereview.appspot.com/6305065/diff/3013/src/pkg/math/big/gcd_test.go#newcode42>\r\n> src/pkg/math/big/gcd_test.go:**42: func BenchmarkGCD60x60(b *testing.B)\r\n>     { runGCD(b, 60, 60) }\r\n> On 2012/06/12 18:53:50, gri wrote:\r\n>\r\n>> Is there any particular reason for including any of the 60 cases?\r\n>>\r\n> Seems like\r\n>\r\n>> we're covered with all combinations of 10, 100, 1000, 10000, and\r\n>>\r\n> 100000.\r\n>\r\n>  Just leave them away.\r\n>>\r\n>\r\n> Done.\r\n>\r\n> http://codereview.appspot.com/**6305065/<http://codereview.appspot.com/6305065/>\r\n>\r\n\r\n\r\n\r\n-- \r\nMichael T. Jones | Chief Technology Advocate  | mtj@google.com |  +1\r\n650-335-5765\r\n",
			"disapproval": false,
			"date": "2012-06-12 19:32:12.810566",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-11 21:30:18.382072",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6305065/diff/10005/src/pkg/math/big/gcd_test.go\nFile src/pkg/math/big/gcd_test.go (right):\n\nhttp://codereview.appspot.com/6305065/diff/10005/src/pkg/math/big/gcd_test.go#newcode34\nsrc/pkg/math/big/gcd_test.go:34: // ensure that we use the same numbers in the same order\nwhy not use two fixed numbers?\nusing two consecutive Fibonacci numbers of the appropriate size would be interesting.\n\nhttp://codereview.appspot.com/6305065/diff/10005/src/pkg/math/big/gcd_test.go#newcode65\nsrc/pkg/math/big/gcd_test.go:65: sizes := [...]uint{10, 60, 100, 1000, 10000}\ni would have written 15 benchmarks functions calling runGCD with arguments.\n\nMaking this a test would lengthen the runtime of tests by 75 seconds.",
			"disapproval": false,
			"date": "2012-06-11 22:41:56.651909",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This actually does invisibly dispatch inside, if the user does not request the extended algorithm by passing the extra arguments for that.\n\nHere is what the new benchmarks look like on my MacBook Air:\n\n\n\nPASS\nBenchmarkGCDRegular10x10\t 1000000\t      2922 ns/op\nBenchmarkGCDBinary10x10\t  200000\t      8159 ns/op\nBenchmarkGCDRegular10x60\t  200000\t     10000 ns/op\nBenchmarkGCDBinary10x60\t  200000\t      9185 ns/op\nBenchmarkGCDRegular10x100\t  100000\t     17696 ns/op\nBenchmarkGCDBinary10x100\t  200000\t      9781 ns/op\nBenchmarkGCDRegular10x1000\t   10000\t    226434 ns/op\nBenchmarkGCDBinary10x1000\t  100000\t     14974 ns/op\nBenchmarkGCDRegular10x10000\t     500\t   5581986 ns/op\nBenchmarkGCDBinary10x10000\t  100000\t     25075 ns/op\nBenchmarkGCDRegular60x60\t  200000\t     12238 ns/op\nBenchmarkGCDBinary60x60\t   50000\t     36165 ns/op\nBenchmarkGCDRegular60x100\t  100000\t     18776 ns/op\nBenchmarkGCDBinary60x100\t   50000\t     39204 ns/op\nBenchmarkGCDRegular60x1000\t   10000\t    200726 ns/op\nBenchmarkGCDBinary60x1000\t   50000\t     43661 ns/op\nBenchmarkGCDRegular60x10000\t     500\t   5230043 ns/op\nBenchmarkGCDBinary60x10000\t   20000\t     90229 ns/op\nBenchmarkGCDRegular100x100\t  100000\t     20669 ns/op\nBenchmarkGCDBinary100x100\t   50000\t     70566 ns/op\nBenchmarkGCDRegular100x1000\t    5000\t    223037 ns/op\nBenchmarkGCDBinary100x1000\t   20000\t     84609 ns/op\nBenchmarkGCDRegular100x10000\t     500\t   5476856 ns/op\nBenchmarkGCDBinary100x10000\t   10000\t    171303 ns/op\nBenchmarkGCDRegular1000x1000\t   10000\t    247936 ns/op\nBenchmarkGCDBinary1000x1000\t    2000\t   1018091 ns/op\nBenchmarkGCDRegular1000x10000\t     500\t   5808816 ns/op\nBenchmarkGCDBinary1000x10000\t    1000\t   1709981 ns/op\nBenchmarkGCDRegular10000x10000\t     500\t   6466690 ns/op\nBenchmarkGCDBinary10000x10000\t     100\t  31582415 ns/op\nok  \tmath/big\t80.865s\n\nhttp://codereview.appspot.com/6305065/diff/10005/src/pkg/math/big/gcd_test.go\nFile src/pkg/math/big/gcd_test.go (right):\n\nhttp://codereview.appspot.com/6305065/diff/10005/src/pkg/math/big/gcd_test.go#newcode18\nsrc/pkg/math/big/gcd_test.go:18: var useBinaryGCD bool\nOn 2012/06/11 23:39:44, gri wrote:\n> Please no communication via global variables. Even if we were to keep the\n> current setup (which I recommend to change), the proper way would be to\n> encapsulate extra parameters via a closure).\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/10005/src/pkg/math/big/gcd_test.go#newcode34\nsrc/pkg/math/big/gcd_test.go:34: // ensure that we use the same numbers in the same order\nThis is picking many different random numbers of roughly the same size. Whether they share common factors matters a lot to the running time, and we want an average over a lot of different numbers.\n\nOn 2012/06/11 22:41:56, remyoudompheng wrote:\n> why not use two fixed numbers?\n> using two consecutive Fibonacci numbers of the appropriate size would be\n> interesting.\n\nhttp://codereview.appspot.com/6305065/diff/10005/src/pkg/math/big/gcd_test.go#newcode40\nsrc/pkg/math/big/gcd_test.go:40: for true {\nOn 2012/06/11 23:39:44, gri wrote:\n> for {\n> \n> (same as for true {)\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/10005/src/pkg/math/big/gcd_test.go#newcode64\nsrc/pkg/math/big/gcd_test.go:64: func TestGCD(t *testing.T) {\nOn 2012/06/11 23:39:44, gri wrote:\n> yes, please make this a set of regular benchmark functions - there's precedence\n> for this in this package. this way, the benchmark code doesn't affect the\n> runtime of the tests\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/10005/src/pkg/math/big/gcd_test.go#newcode65\nsrc/pkg/math/big/gcd_test.go:65: sizes := [...]uint{10, 60, 100, 1000, 10000}\nI was considering adding a command-line flag to disable it from running.  This is what calibrate_test.go does.\n\nOn 2012/06/11 22:41:56, remyoudompheng wrote:\n> i would have written 15 benchmarks functions calling runGCD with arguments.\n> \n> Making this a test would lengthen the runtime of tests by 75 seconds.",
			"disapproval": false,
			"date": "2012-06-12 00:53:10.859004",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I also added an extra test to only execute the new binary gcd when the two numbers are the same number of words.\n\nHere's the before and after.\n\nbenchmark                    old ns/op    new ns/op    delta\nBenchmarkGCD10x10                 4344         2412  -44.48%\nBenchmarkGCD10x60                 5453         5982   +9.70%\nBenchmarkGCD10x100                7917         7773   -1.82%\nBenchmarkGCD10x1000               8277         8125   -1.84%\nBenchmarkGCD10x10000             16011        15666   -2.15%\nBenchmarkGCD10x100000            97686        95948   -1.78%\nBenchmarkGCD60x60                23058         7248  -68.57%\nBenchmarkGCD60x100               25256        24593   -2.63%\nBenchmarkGCD60x1000              28500        27521   -3.44%\nBenchmarkGCD60x10000             62590        60572   -3.22%\nBenchmarkGCD60x100000           380355       367181   -3.46%\nBenchmarkGCD100x100              47690        12752  -73.26%\nBenchmarkGCD100x1000             48939        47975   -1.97%\nBenchmarkGCD100x10000            99728        96919   -2.82%\nBenchmarkGCD100x100000          662949       644839   -2.73%\nBenchmarkGCD1000x1000           627113       141935  -77.37%\nBenchmarkGCD1000x10000         1017960       988463   -2.90%\nBenchmarkGCD1000x100000        4876294      4745010   -2.69%\nBenchmarkGCD10000x10000       17653140      3739238  -78.82%\nBenchmarkGCD10000x100000      56115420     54420800   -3.02%\nBenchmarkGCD100000x100000   1165386000    258875000  -77.79%\n\nhttp://codereview.appspot.com/6305065/diff/6011/src/pkg/math/big/gcd_test.go\nFile src/pkg/math/big/gcd_test.go (right):\n\nhttp://codereview.appspot.com/6305065/diff/6011/src/pkg/math/big/gcd_test.go#newcode22\nsrc/pkg/math/big/gcd_test.go:22: if !useBinaryGCD {\nOn 2012/06/12 06:52:39, remyoudompheng wrote:\n> the logic seems reversed here.\n\nDoh!ne\n\nhttp://codereview.appspot.com/6305065/diff/4005/src/pkg/math/big/gcd_test.go\nFile src/pkg/math/big/gcd_test.go (right):\n\nhttp://codereview.appspot.com/6305065/diff/4005/src/pkg/math/big/gcd_test.go#newcode5\nsrc/pkg/math/big/gcd_test.go:5: // This file prints execution times for running regular\nOn 2012/06/12 18:05:20, gri wrote:\n> // This file implements a GCD benchmark.\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/4005/src/pkg/math/big/gcd_test.go#newcode16\nsrc/pkg/math/big/gcd_test.go:16: \nOn 2012/06/12 18:05:20, gri wrote:\n> // randInt returns a pseudo-random Int in the range [1, 1<<size].\n> func randInt(rnd *rand.Rand, size uint) *Int {\n>    n := new(Int).Lsh(intOne, size)\n>    x := new(Int).Rand(r, n)\n>    return x.Add(x, intOne) // make sure result > 0\n> }\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/4005/src/pkg/math/big/gcd_test.go#newcode17\nsrc/pkg/math/big/gcd_test.go:17: func runGCD(firstSize, secondSize uint, useBinaryGCD bool, b *testing.B) {\nOn 2012/06/12 18:05:20, gri wrote:\n> runGCD(b *testing.B, asize, bsize uint)\n> \n> b *testing.B should go first (this parameter is always present in all\n> benchmarking routines)\n> \n> get rid of useBinaryGCD, always run the combined version. The idea of this\n> benchmark is to show that GCD improves over time, including algorithmic\n> improvements. Before submitting, run this benchmark using the old implementation\n> of GCD, and using the new implementation. Using $GOROOT/misc/benchcmp, show that\n> it is consistently better.\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/4005/src/pkg/math/big/gcd_test.go#newcode18\nsrc/pkg/math/big/gcd_test.go:18: var gcda = NewInt(0)\nOn 2012/06/12 18:05:20, gri wrote:\n> the timer needs to be stopped right away\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/4005/src/pkg/math/big/gcd_test.go#newcode25\nsrc/pkg/math/big/gcd_test.go:25: var m = NewInt(0)\nOn 2012/06/12 18:05:20, gri wrote:\n> this needs to be factored:\n> \n> aa := randInt(r, asize)\n> bb := randInf(r, bsize)\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/4005/src/pkg/math/big/gcd_test.go#newcode29\nsrc/pkg/math/big/gcd_test.go:29: // ensure that we use the same numbers in the same order\nOn 2012/06/12 18:05:20, gri wrote:\n> this is not correct - see below\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/4005/src/pkg/math/big/gcd_test.go#newcode32\nsrc/pkg/math/big/gcd_test.go:32: for i := 0; i < b.N; i++ {\nOn 2012/06/12 18:05:20, gri wrote:\n> StartTimer goes before the loop\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/4005/src/pkg/math/big/gcd_test.go#newcode34\nsrc/pkg/math/big/gcd_test.go:34: // generate non-zero values\nOn 2012/06/12 18:05:20, gri wrote:\n> The reason for the loop is to provide the benchmarking code a way to calibrate\n> its runtime. It should always run the same test. gcda and gcd b shouldn't\n> change.\n> \n> Furthermore, this code needs to be factored.\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/4005/src/pkg/math/big/gcd_test.go#newcode48\nsrc/pkg/math/big/gcd_test.go:48: g.GCD(x, nil, gcda, gcdb)\nOn 2012/06/12 18:05:20, gri wrote:\n> this loop should just be:\n> \n> b.StartTimer()\n> for i := 0; i < b.N; i++ {\n>    new(Int).GCD(x, nil, aa, bb)\n> }\n> \n> g must always be the same, otherwise you don't measure the same operation every\n> time, so use new(Int).\n\nDone.",
			"disapproval": false,
			"date": "2012-06-12 18:44:13.047829",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL at the updated if-statement in int.go: if the two arguments are of different sizes, it does a division to bring them down to the same size, then runs binaryGCD.\n\nBenchmarks look even better now:\n\nbenchmark                    old ns/op    new ns/op    delta\nBenchmarkGCD10x10                 4338         2372  -45.32%\nBenchmarkGCD10x100                7784         2232  -71.33%\nBenchmarkGCD10x1000               8132         2795  -65.63%\nBenchmarkGCD10x10000             15784         6834  -56.70%\nBenchmarkGCD10x100000           101371        47881  -52.77%\nBenchmarkGCD100x100              47597        12651  -73.42%\nBenchmarkGCD100x1000             49450        14427  -70.83%\nBenchmarkGCD100x10000           100685        25527  -74.65%\nBenchmarkGCD100x100000          672727       161391  -76.01%\nBenchmarkGCD1000x1000           632173       140535  -77.77%\nBenchmarkGCD1000x10000          999679       166336  -83.36%\nBenchmarkGCD1000x100000        4805900       374854  -92.20%\nBenchmarkGCD10000x10000       17219140      3728196  -78.35%\nBenchmarkGCD10000x100000      55259080      4659028  -91.57%\nBenchmarkGCD100000x100000   1138883000    259237600  -77.24%\n\nhttp://codereview.appspot.com/6305065/diff/3013/src/pkg/math/big/gcd_test.go\nFile src/pkg/math/big/gcd_test.go (right):\n\nhttp://codereview.appspot.com/6305065/diff/3013/src/pkg/math/big/gcd_test.go#newcode42\nsrc/pkg/math/big/gcd_test.go:42: func BenchmarkGCD60x60(b *testing.B)         { runGCD(b, 60, 60) }\nOn 2012/06/12 18:53:50, gri wrote:\n> Is there any particular reason for including any of the 60 cases? Seems like\n> we're covered with all combinations of 10, 100, 1000, 10000, and 100000.\n> \n> Just leave them away.\n\nDone.",
			"disapproval": false,
			"date": "2012-06-12 19:09:13.042266",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jun 8, 2012 at 2:59 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> On Fri, Jun 8, 2012 at 2:55 PM,  <gri@golang.org> wrote:\r\n> > this needs to be:\r\n> >\r\n> > z.neg = len(z.abs) > 0 && !z.neg // 0 has no sign\r\n>\r\n> or just call z.Neg(z).\r\n> there's very little reason to introduce z.Negate() or even z.negate().\r\n>\r\n\r\nI was trying to minimize the amount of potential copying that goes on. I'm\r\nnot familiar enough with the go compiler / runtimes to know when it will\r\noptimize things away.\r\n\r\nAlso, I noticed that the methods in math/big are a little bit, well,\r\nconfusing. For instance, it seems unnecessary to require a DivMod, or\r\nQuoRem, or GCD to be methods instead of just pure functions, but ah well.\r\n\r\nI will re-mail out this CL shortly.\r\n\r\n--Christopher\r\n\r\n\r\n-- \r\nChristopher Swenson\r\ncswenson@google.com\r\n",
			"disapproval": false,
			"date": "2012-06-09 15:01:37.138311",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jun 11, 2012 at 5:25 PM,  <cswenson@google.com> wrote:\r\n> hg is confusing me -- I used hg add to add the file, but it didn't add\r\n> it to the CL.\r\n>\r\n> So, I accidentally mailed it out separately.\r\n>\r\n> http://codereview.appspot.com/6300083\r\n>\r\n> My bad.\r\n\r\nNo worries.\r\n\r\nhg file 6305065 gcd_test.go\r\nhg change -d 6300083\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-11 21:26:30.159298",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The optimization should be done in binaryGCD.\n\nAlso, before we can submit, it might be good to look at the length of the random numbers generated. They are random, and in a large range, we should have some confidence that they are actually as many bits large as we think they are.\n\nhttp://codereview.appspot.com/6305065/diff/6013/src/pkg/math/big/gcd_test.go\nFile src/pkg/math/big/gcd_test.go (right):\n\nhttp://codereview.appspot.com/6305065/diff/6013/src/pkg/math/big/gcd_test.go#newcode6\nsrc/pkg/math/big/gcd_test.go:6: \nget rid of this empty line\n\nhttp://codereview.appspot.com/6305065/diff/6013/src/pkg/math/big/gcd_test.go#newcode7\nsrc/pkg/math/big/gcd_test.go:7: // Usage: go test math/big -test.bench \".*GCD.*\"\n// Usage: go test math/big -test.bench GCD\n\nshould be good enough\n\nhttp://codereview.appspot.com/6305065/diff/6013/src/pkg/math/big/int.go\nFile src/pkg/math/big/int.go (right):\n\nhttp://codereview.appspot.com/6305065/diff/6013/src/pkg/math/big/int.go#newcode600\nsrc/pkg/math/big/int.go:600: // after one remainder operation, they should be roughly the same size\nLeave as is - this code should not be here but in binary gcd so that every caller can benefit from it.\n\nAlso, then we can avoid allocation of the new(Int) for v because we already have a new one created here.\n\nhttp://codereview.appspot.com/6305065/diff/6013/src/pkg/math/big/int.go#newcode658\nsrc/pkg/math/big/int.go:658: u := z.Set(a)\n// use one Euclidean gcd iteration to get a and b to approx. the same size\nu := z\nv := new(Int)\nswitch {\ncase len(a.abs) > len(b.abs):\n   u.Set(b)\n   v.Rem(a, b)\ncase len(a.abs) < len(b.abs):\n   u.Set(a)\n   v.Rem(b, a)\ndefault:\n   u.Set(a)\n   v.Set(b)\n}",
			"disapproval": false,
			"date": "2012-06-12 20:25:30.602402",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jun 8, 2012 at 2:55 PM,  <gri@golang.org> wrote:\r\n> this needs to be:\r\n>\r\n> z.neg = len(z.abs) > 0 && !z.neg // 0 has no sign\r\n\r\nor just call z.Neg(z).\r\nthere's very little reason to introduce z.Negate() or even z.negate().\r\n",
			"disapproval": false,
			"date": "2012-06-08 19:00:03.050913",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks. Will do.\r\n\r\nOn Mon, Jun 11, 2012 at 5:26 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> On Mon, Jun 11, 2012 at 5:26 PM, Russ Cox <rsc@golang.org> wrote:\r\n> > hg file 6305065 gcd_test.go\r\n> > hg change -d 6300083\r\n>\r\n> and then hg mail 6305065 to re-mail with the new file\r\n>\r\n\r\n\r\n\r\n-- \r\nChristopher Swenson\r\ncswenson@google.com\r\n",
			"disapproval": false,
			"date": "2012-06-11 21:29:10.632766",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org, rsc@golang.org, bradfitz@golang.org, remyoudompheng@gmail.com, mtj@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-12 21:09:13.453413",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I modify randInt to do the right things (guaranteed to be in [2^(size - 1), 2^size) as well. New benchmark results:\n\n\nbenchmark                    old ns/op    new ns/op    delta\nBenchmarkGCD10x10                 4383         2126  -51.49%\nBenchmarkGCD10x100                5612         2124  -62.15%\nBenchmarkGCD10x1000               8843         2622  -70.35%\nBenchmarkGCD10x10000             17025         6576  -61.37%\nBenchmarkGCD10x100000           118985        48130  -59.55%\nBenchmarkGCD100x100              45328        11683  -74.23%\nBenchmarkGCD100x1000             50141        12678  -74.72%\nBenchmarkGCD100x10000           110314        26719  -75.78%\nBenchmarkGCD100x100000          630000       156041  -75.23%\nBenchmarkGCD1000x1000           654809       137973  -78.93%\nBenchmarkGCD1000x10000          985683       159951  -83.77%\nBenchmarkGCD1000x100000        4920792       366399  -92.55%\nBenchmarkGCD10000x10000       16848950      3732062  -77.85%\nBenchmarkGCD10000x100000      55401500      4675876  -91.56%\nBenchmarkGCD100000x100000   1126775000    258951800  -77.02%\n\nhttp://codereview.appspot.com/6305065/diff/6013/src/pkg/math/big/gcd_test.go\nFile src/pkg/math/big/gcd_test.go (right):\n\nhttp://codereview.appspot.com/6305065/diff/6013/src/pkg/math/big/gcd_test.go#newcode6\nsrc/pkg/math/big/gcd_test.go:6: \nOn 2012/06/12 20:25:30, gri wrote:\n> get rid of this empty line\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/6013/src/pkg/math/big/gcd_test.go#newcode7\nsrc/pkg/math/big/gcd_test.go:7: // Usage: go test math/big -test.bench \".*GCD.*\"\nOn 2012/06/12 20:25:30, gri wrote:\n> // Usage: go test math/big -test.bench GCD\n> \n> should be good enough\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/6013/src/pkg/math/big/int.go\nFile src/pkg/math/big/int.go (right):\n\nhttp://codereview.appspot.com/6305065/diff/6013/src/pkg/math/big/int.go#newcode600\nsrc/pkg/math/big/int.go:600: // after one remainder operation, they should be roughly the same size\nOn 2012/06/12 20:25:30, gri wrote:\n> Leave as is - this code should not be here but in binary gcd so that every\n> caller can benefit from it.\n> \n> Also, then we can avoid allocation of the new(Int) for v because we already have\n> a new one created here.\n\nDone.\n\nhttp://codereview.appspot.com/6305065/diff/6013/src/pkg/math/big/int.go#newcode658\nsrc/pkg/math/big/int.go:658: u := z.Set(a)\nOn 2012/06/12 20:25:30, gri wrote:\n> // use one Euclidean gcd iteration to get a and b to approx. the same size\n> u := z\n> v := new(Int)\n> switch {\n> case len(a.abs) > len(b.abs):\n>    u.Set(b)\n>    v.Rem(a, b)\n> case len(a.abs) < len(b.abs):\n>    u.Set(a)\n>    v.Rem(b, a)\n> default:\n>    u.Set(a)\n>    v.Set(b)\n> }\n\nDone.",
			"disapproval": false,
			"date": "2012-06-12 21:09:22.823909",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Jun 11, 2012 at 5:26 PM, Russ Cox <rsc@golang.org> wrote:\r\n> hg file 6305065 gcd_test.go\r\n> hg change -d 6300083\r\n\r\nand then hg mail 6305065 to re-mail with the new file\r\n",
			"disapproval": false,
			"date": "2012-06-11 21:26:47.595930",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Done.\r\n\r\nWhen submitting, though, I get\r\n\r\nabort: cannot find cswenson@google.com in CONTRIBUTORS\r\n\r\nI assume that someone has to add me to that file?\r\n\r\n--Christopher\r\n\r\n\r\nOn Tue, Jun 12, 2012 at 6:10 PM, <gri@golang.org> wrote:\r\n\r\n> LGTM\r\n>\r\n> Please adjust the comment below and we're good to go.\r\n>\r\n> Thanks for bearing with me.\r\n> - gri\r\n>\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/2012/src/pkg/**\r\n> math/big/gcd_test.go<http://codereview.appspot.com/6305065/diff/2012/src/pkg/math/big/gcd_test.go>\r\n> File src/pkg/math/big/gcd_test.go (right):\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/2012/src/pkg/**\r\n> math/big/gcd_test.go#newcode24<http://codereview.appspot.com/6305065/diff/2012/src/pkg/math/big/gcd_test.go#newcode24>\r\n> src/pkg/math/big/gcd_test.go:**24: // ensure that we use the same numbers\r\n> in the same order\r\n> This comment doesn't make much sense anymore since you are not really\r\n> generating a series of numbers, just two. Maybe:\r\n>\r\n> // ensure benchmark is using the same input each time\r\n>\r\n> http://codereview.appspot.com/**6305065/<http://codereview.appspot.com/6305065/>\r\n>\r\n\r\n\r\n\r\n-- \r\nChristopher Swenson\r\ncswenson@google.com\r\n",
			"disapproval": false,
			"date": "2012-06-13 00:58:48.776899",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Run \"hg change NNNNN\" and add the filename to the file list at the bottom.\r\n\r\nOn Mon, Jun 11, 2012 at 2:25 PM, <cswenson@google.com> wrote:\r\n\r\n> hg is confusing me -- I used hg add to add the file, but it didn't add\r\n> it to the CL.\r\n>\r\n> So, I accidentally mailed it out separately.\r\n>\r\n> http://codereview.appspot.com/**6300083<http://codereview.appspot.com/6300083>\r\n>\r\n> My bad.\r\n>\r\n> --Christopher\r\n>\r\n>\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/8001/src/pkg/**\r\n> math/big/int.go<http://codereview.appspot.com/6305065/diff/8001/src/pkg/math/big/int.go>\r\n> File src/pkg/math/big/int.go (right):\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/8001/src/pkg/**\r\n> math/big/int.go#newcode105<http://codereview.appspot.com/6305065/diff/8001/src/pkg/math/big/int.go#newcode105>\r\n> src/pkg/math/big/int.go:105: // negate sets z to -z and returns z.\r\n> On 2012/06/10 21:42:10, rsc wrote:\r\n>\r\n>> I don't believe this function is necessary; see below.\r\n>>\r\n>\r\n> Done.\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/8001/src/pkg/**\r\n> math/big/int.go#newcode655<http://codereview.appspot.com/6305065/diff/8001/src/pkg/math/big/int.go#newcode655>\r\n> src/pkg/math/big/int.go:655: // even reports whether x is even.\r\n>\r\n> On 2012/06/10 21:42:10, rsc wrote:\r\n>\r\n>> I don't believe this function is necessary; see below.\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/8001/src/pkg/**\r\n> math/big/int.go#newcode681<http://codereview.appspot.com/6305065/diff/8001/src/pkg/math/big/int.go#newcode681>\r\n> src/pkg/math/big/int.go:681: t.Set(v).negate()\r\n> On 2012/06/10 21:42:10, rsc wrote:\r\n>\r\n>> t.Neg(v)\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/8001/src/pkg/**\r\n> math/big/int.go#newcode686<http://codereview.appspot.com/6305065/diff/8001/src/pkg/math/big/int.go#newcode686>\r\n> src/pkg/math/big/int.go:686: for t.even() {\r\n> On 2012/06/10 21:42:10, rsc wrote:\r\n>\r\n>> t.Rsh(t, t.abs.trailingZeroBits()) no?\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/8001/src/pkg/**\r\n> math/big/int.go#newcode693<http://codereview.appspot.com/6305065/diff/8001/src/pkg/math/big/int.go#newcode693>\r\n> src/pkg/math/big/int.go:693: v.Set(t).negate()\r\n> On 2012/06/10 21:42:10, rsc wrote:\r\n>\r\n>> v.Neg(t)\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n> math/big/int.go<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go>\r\n> File src/pkg/math/big/int.go (right):\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n> math/big/int.go#newcode25<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode25>\r\n> src/pkg/math/big/int.go:25: intZero = &Int{}\r\n> On 2012/06/11 21:08:12, gri wrote:\r\n>\r\n>> intZero is not needed - see below. change this back to what it was\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n> math/big/int.go#newcode649<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode649>\r\n> src/pkg/math/big/int.go:649: // even reports whether x is even.\r\n> On 2012/06/11 21:08:12, gri wrote:\r\n>\r\n>> this function is not used anymore\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n> math/big/int.go#newcode654<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode654>\r\n> src/pkg/math/big/int.go:654: // BinaryGCD sets z to the greatest common\r\n> divisor of a and b, which are assumed to be\r\n> On 2012/06/11 21:08:12, gri wrote:\r\n>\r\n>> s/BinaryGCD/binaryGCD/\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n> math/big/int.go#newcode654<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode654>\r\n> src/pkg/math/big/int.go:654: // BinaryGCD sets z to the greatest common\r\n> divisor of a and b, which are assumed to be\r\n> On 2012/06/11 21:08:12, gri wrote:\r\n>\r\n>> which must be positive,\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n> math/big/int.go#newcode656<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode656>\r\n> src/pkg/math/big/int.go:656: // This is the faster, non-extended binary\r\n> version of the algorithm from from Knuth,\r\n> On 2012/06/11 21:08:12, gri wrote:\r\n>\r\n>> s/from from/from/\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n> math/big/int.go#newcode659<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode659>\r\n> src/pkg/math/big/int.go:659: u := z\r\n> On 2012/06/11 21:08:12, gri wrote:\r\n>\r\n>> u := z.Set(a)\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n> math/big/int.go#newcode663<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode663>\r\n> src/pkg/math/big/int.go:663: // collect all of the 2s\r\n> On 2012/06/11 21:08:12, gri wrote:\r\n>\r\n>> this comment is not very meaningful - what are all the 2s in a binary\r\n>>\r\n> number?\r\n>\r\n>  // determine largest k such that u = u'<<k, v = v'<<k\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n> math/big/int.go#newcode665<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode665>\r\n> src/pkg/math/big/int.go:665: vTz := v.abs.trailingZeroBits()\r\n> On 2012/06/11 21:08:12, gri wrote:\r\n>\r\n>> if vk := v.abs.trailingZeroBits(); vk < k {\r\n>>    k = vk\r\n>> }\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n> math/big/int.go#newcode674<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode674>\r\n> src/pkg/math/big/int.go:674: // if u is odd:\r\n> On 2012/06/11 21:08:12, gri wrote:\r\n>\r\n>> leave this comment away\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n> math/big/int.go#newcode675<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode675>\r\n> src/pkg/math/big/int.go:675: if len(u.abs) != 0 && u.abs[0]&1 == 1 {\r\n> On 2012/06/11 21:08:12, gri wrote:\r\n>\r\n>> s/!=/>/\r\n>>\r\n>\r\n>  (detail, but implies more directly that index 0 is valid. also it's\r\n>>\r\n> the way all\r\n>\r\n>> the other tests for zero are written in this file)\r\n>>\r\n>\r\n>  But since u and v must be strictly positive, this test is not even\r\n>>\r\n> required (but\r\n>\r\n>> then a comment is appropriate).\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n> math/big/int.go#newcode676<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode676>\r\n> src/pkg/math/big/int.go:676: t.Neg(v)\r\n> On 2012/06/11 21:08:12, gri wrote:\r\n>\r\n>> before t.Neg(v) add comment\r\n>>\r\n>\r\n>  // u is odd\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n> math/big/int.go#newcode679<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode679>\r\n> src/pkg/math/big/int.go:679: for t.Cmp(intZero) != 0 {\r\n> On 2012/06/11 21:08:12, gri wrote:\r\n>\r\n>> for len(t.abs) > 0 {\r\n>>\r\n>\r\n>  and get rid of intZero\r\n>>\r\n>\r\n> Done.\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n> math/big/int.go#newcode682<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode682>\r\n> src/pkg/math/big/int.go:682:\r\n> On 2012/06/11 21:08:12, gri wrote:\r\n>\r\n>> remove this empty line\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n> math/big/int.go#newcode683<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode683>\r\n> src/pkg/math/big/int.go:683: if t.Cmp(intZero) > 0 {\r\n> On 2012/06/11 21:08:12, gri wrote:\r\n>\r\n>> if t.neg {\r\n>>\r\n>\r\n>  and swap the branches\r\n>>\r\n>\r\n>  (We enter the for loop with a value t != 0. It must still be != 0\r\n>>\r\n> after shifting\r\n>\r\n>> by trailingZeroBits. The only way it can be positive is if it's not\r\n>>\r\n> negative).\r\n>\r\n> Done.\r\n>\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n> math/big/int.go#newcode690<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode690>\r\n> src/pkg/math/big/int.go:690: return u.Lsh(u, k)\r\n> On 2012/06/11 21:08:12, gri wrote:\r\n>\r\n>> it seems appropriate to have an empty line before the return - given\r\n>>\r\n> the use of\r\n>\r\n>> empty lines in the rest of this function\r\n>>\r\n>\r\n> Done.\r\n>\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n> math/big/rat.go<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/rat.go>\r\n> File src/pkg/math/big/rat.go (right):\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n> math/big/rat.go#newcode164<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/rat.go#newcode164>\r\n> src/pkg/math/big/rat.go:164: if f.Cmp(intOne) != 0 {\r\n> On 2012/06/11 21:08:12, gri wrote:\r\n>\r\n>> there is no reason to split up this if and the assignment to f\r\n>>\r\n>\r\n> Done.\r\n>\r\n> http://codereview.appspot.com/**6305065/<http://codereview.appspot.com/6305065/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-06-11 21:31:24.969382",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=15df6272287d ***\n\n      math/big: Implemented binary GCD algorithm\n\nbenchmark                    old ns/op    new ns/op    delta\nBenchmarkGCD10x10                 4383         2126  -51.49%\nBenchmarkGCD10x100                5612         2124  -62.15%\nBenchmarkGCD10x1000               8843         2622  -70.35%\nBenchmarkGCD10x10000             17025         6576  -61.37%\nBenchmarkGCD10x100000           118985        48130  -59.55%\nBenchmarkGCD100x100              45328        11683  -74.23%\nBenchmarkGCD100x1000             50141        12678  -74.72%\nBenchmarkGCD100x10000           110314        26719  -75.78%\nBenchmarkGCD100x100000          630000       156041  -75.23%\nBenchmarkGCD1000x1000           654809       137973  -78.93%\nBenchmarkGCD1000x10000          985683       159951  -83.77%\nBenchmarkGCD1000x100000        4920792       366399  -92.55%\nBenchmarkGCD10000x10000       16848950      3732062  -77.85%\nBenchmarkGCD10000x100000      55401500      4675876  -91.56%\nBenchmarkGCD100000x100000   1126775000    258951800  -77.02%\n\nR=gri, rsc, bradfitz, remyoudompheng, mtj\nCC=golang-dev\nhttp://codereview.appspot.com/6305065\n\nCommitter: Robert Griesemer <gri@golang.org>",
			"disapproval": false,
			"date": "2012-06-13 16:32:34.055096",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org, rsc@golang.org, bradfitz@golang.org, remyoudompheng@gmail.com, mtj@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-12 00:52:33.197810",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org, rsc@golang.org, bradfitz@golang.org, remyoudompheng@gmail.com, mtj@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-12 19:07:41.793351",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think the existing function comment is correct: The claim is that\r\nthe result is in [1, 1<<size] - and not: [1, 1<<size) .\r\n\r\nBut more fundamentally, randInt should probably be improved to return\r\na random number that is guaranteed size bits wide.\r\n\r\n- gri\r\n\r\nOn Tue, Jun 12, 2012 at 12:31 PM, Michael Jones <mtj@google.com> wrote:\r\n> Minor point, but:\r\n>\r\n> return x.Add(x, intOne) // make sure result > 0\r\n>\r\n> would be better as (pseudocode)\r\n>\r\n> if x == 0 return 1\r\n> or\r\n> if x == 0 then add(x,1)\r\n> or\r\n> :\r\n>\r\n> because there is a 1 in 2^n chance that 0xFFFFF.... wil turn into a 1-bit\r\n> longer number than claimed.\r\n>\r\n> On Tue, Jun 12, 2012 at 12:09 PM, <cswenson@google.com> wrote:\r\n>>\r\n>> PTAL at the updated if-statement in int.go: if the two arguments are of\r\n>> different sizes, it does a division to bring them down to the same size,\r\n>> then runs binaryGCD.\r\n>>\r\n>> Benchmarks look even better now:\r\n>>\r\n>>\r\n>> benchmark \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0old ns/op \u00a0 \u00a0new ns/op \u00a0 \u00a0delta\r\n>> BenchmarkGCD10x10 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 4338 \u00a0 \u00a0 \u00a0 \u00a0 2372 \u00a0-45.32%\r\n>> BenchmarkGCD10x100 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a07784 \u00a0 \u00a0 \u00a0 \u00a0 2232 \u00a0-71.33%\r\n>> BenchmarkGCD10x1000 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 8132 \u00a0 \u00a0 \u00a0 \u00a0 2795 \u00a0-65.63%\r\n>> BenchmarkGCD10x10000 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 15784 \u00a0 \u00a0 \u00a0 \u00a0 6834 \u00a0-56.70%\r\n>> BenchmarkGCD10x100000 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 101371 \u00a0 \u00a0 \u00a0 \u00a047881 \u00a0-52.77%\r\n>> BenchmarkGCD100x100 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a047597 \u00a0 \u00a0 \u00a0 \u00a012651 \u00a0-73.42%\r\n>> BenchmarkGCD100x1000 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 49450 \u00a0 \u00a0 \u00a0 \u00a014427 \u00a0-70.83%\r\n>> BenchmarkGCD100x10000 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 100685 \u00a0 \u00a0 \u00a0 \u00a025527 \u00a0-74.65%\r\n>> BenchmarkGCD100x100000 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0672727 \u00a0 \u00a0 \u00a0 161391 \u00a0-76.01%\r\n>> BenchmarkGCD1000x1000 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 632173 \u00a0 \u00a0 \u00a0 140535 \u00a0-77.77%\r\n>> BenchmarkGCD1000x10000 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0999679 \u00a0 \u00a0 \u00a0 166336 \u00a0-83.36%\r\n>> BenchmarkGCD1000x100000 \u00a0 \u00a0 \u00a0 \u00a04805900 \u00a0 \u00a0 \u00a0 374854 \u00a0-92.20%\r\n>> BenchmarkGCD10000x10000 \u00a0 \u00a0 \u00a0 17219140 \u00a0 \u00a0 \u00a03728196 \u00a0-78.35%\r\n>> BenchmarkGCD10000x100000 \u00a0 \u00a0 \u00a055259080 \u00a0 \u00a0 \u00a04659028 \u00a0-91.57%\r\n>> BenchmarkGCD100000x100000 \u00a0 1138883000 \u00a0 \u00a0259237600 \u00a0-77.24%\r\n>>\r\n>>\r\n>>\r\n>>\r\n>>\r\n>> http://codereview.appspot.com/6305065/diff/3013/src/pkg/math/big/gcd_test.go\r\n>> File src/pkg/math/big/gcd_test.go (right):\r\n>>\r\n>>\r\n>> http://codereview.appspot.com/6305065/diff/3013/src/pkg/math/big/gcd_test.go#newcode42\r\n>> src/pkg/math/big/gcd_test.go:42: func BenchmarkGCD60x60(b *testing.B)\r\n>> \u00a0 \u00a0 { runGCD(b, 60, 60) }\r\n>> On 2012/06/12 18:53:50, gri wrote:\r\n>>>\r\n>>> Is there any particular reason for including any of the 60 cases?\r\n>>\r\n>> Seems like\r\n>>>\r\n>>> we're covered with all combinations of 10, 100, 1000, 10000, and\r\n>>\r\n>> 100000.\r\n>>\r\n>>> Just leave them away.\r\n>>\r\n>>\r\n>> Done.\r\n>>\r\n>> http://codereview.appspot.com/6305065/\r\n>\r\n>\r\n>\r\n>\r\n> --\r\n> Michael T. Jones\u00a0|\u00a0Chief Technology Advocate \u00a0|\u00a0mtj@google.com\u00a0|\u00a0 +1\r\n> 650-335-5765\r\n>\r\n",
			"disapproval": false,
			"date": "2012-06-12 20:28:33.234690",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "binaryGCD looks mostly good now. But the benchmark needs to be adjusted.\n- gri\n\nhttp://codereview.appspot.com/6305065/diff/10005/src/pkg/math/big/gcd_test.go\nFile src/pkg/math/big/gcd_test.go (right):\n\nhttp://codereview.appspot.com/6305065/diff/10005/src/pkg/math/big/gcd_test.go#newcode18\nsrc/pkg/math/big/gcd_test.go:18: var useBinaryGCD bool\nPlease no communication via global variables. Even if we were to keep the current setup (which I recommend to change), the proper way would be to encapsulate extra parameters via a closure).\n\nhttp://codereview.appspot.com/6305065/diff/10005/src/pkg/math/big/gcd_test.go#newcode40\nsrc/pkg/math/big/gcd_test.go:40: for true {\nfor {\n\n(same as for true {)\n\nhttp://codereview.appspot.com/6305065/diff/10005/src/pkg/math/big/gcd_test.go#newcode64\nsrc/pkg/math/big/gcd_test.go:64: func TestGCD(t *testing.T) {\nyes, please make this a set of regular benchmark functions - there's precedence for this in this package. this way, the benchmark code doesn't affect the runtime of the tests",
			"disapproval": false,
			"date": "2012-06-11 23:39:44.022844",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I thought, for some reason, that calling Neg() would require copying the\r\n.abs\r\n\r\nLooks like I was mistaken. Still getting the hang of the semantics of\r\nslices and pointers in Go. This is my first Go code. :)\r\n\r\nI added the benchmark in gcd_test.go.\r\n\r\n--Christopher\r\n\r\nOn Sun, Jun 10, 2012 at 5:42 PM, <rsc@golang.org> wrote:\r\n\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/8001/src/pkg/**\r\n> math/big/int.go<http://codereview.appspot.com/6305065/diff/8001/src/pkg/math/big/int.go>\r\n> File src/pkg/math/big/int.go (right):\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/8001/src/pkg/**\r\n> math/big/int.go#newcode105<http://codereview.appspot.com/6305065/diff/8001/src/pkg/math/big/int.go#newcode105>\r\n>\r\n> src/pkg/math/big/int.go:105: // negate sets z to -z and returns z.\r\n> I don't believe this function is necessary; see below.\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/8001/src/pkg/**\r\n> math/big/int.go#newcode655<http://codereview.appspot.com/6305065/diff/8001/src/pkg/math/big/int.go#newcode655>\r\n> src/pkg/math/big/int.go:655: // even reports whether x is even.\r\n> I don't believe this function is necessary; see below.\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/8001/src/pkg/**\r\n> math/big/int.go#newcode681<http://codereview.appspot.com/6305065/diff/8001/src/pkg/math/big/int.go#newcode681>\r\n> src/pkg/math/big/int.go:681: t.Set(v).negate()\r\n> t.Neg(v)\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/8001/src/pkg/**\r\n> math/big/int.go#newcode686<http://codereview.appspot.com/6305065/diff/8001/src/pkg/math/big/int.go#newcode686>\r\n> src/pkg/math/big/int.go:686: for t.even() {\r\n> t.Rsh(t, t.abs.trailingZeroBits()) no?\r\n>\r\n> http://codereview.appspot.com/**6305065/diff/8001/src/pkg/**\r\n> math/big/int.go#newcode693<http://codereview.appspot.com/6305065/diff/8001/src/pkg/math/big/int.go#newcode693>\r\n> src/pkg/math/big/int.go:693: v.Set(t).negate()\r\n> v.Neg(t)\r\n>\r\n> http://codereview.appspot.com/**6305065/<http://codereview.appspot.com/6305065/>\r\n>\r\n\r\n\r\n\r\n-- \r\nChristopher Swenson\r\ncswenson@google.com\r\n",
			"disapproval": false,
			"date": "2012-06-11 16:01:58.474087",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nPlease adjust the comment below and we're good to go.\n\nThanks for bearing with me.\n- gri\n\nhttp://codereview.appspot.com/6305065/diff/2012/src/pkg/math/big/gcd_test.go\nFile src/pkg/math/big/gcd_test.go (right):\n\nhttp://codereview.appspot.com/6305065/diff/2012/src/pkg/math/big/gcd_test.go#newcode24\nsrc/pkg/math/big/gcd_test.go:24: // ensure that we use the same numbers in the same order\nThis comment doesn't make much sense anymore since you are not really generating a series of numbers, just two. Maybe:\n\n// ensure benchmark is using the same input each time",
			"disapproval": false,
			"date": "2012-06-12 22:10:58.569247",
			"approval": true
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ah. Good to know. Thanks.\r\n\r\n--Christopher\r\n\r\nOn Mon, Jun 11, 2012 at 5:31 PM, Brad Fitzpatrick <bradfitz@golang.org>wrote:\r\n\r\n> Run \"hg change NNNNN\" and add the filename to the file list at the bottom.\r\n>\r\n> On Mon, Jun 11, 2012 at 2:25 PM, <cswenson@google.com> wrote:\r\n>\r\n>> hg is confusing me -- I used hg add to add the file, but it didn't add\r\n>> it to the CL.\r\n>>\r\n>> So, I accidentally mailed it out separately.\r\n>>\r\n>> http://codereview.appspot.com/**6300083<http://codereview.appspot.com/6300083>\r\n>>\r\n>> My bad.\r\n>>\r\n>> --Christopher\r\n>>\r\n>>\r\n>>\r\n>> http://codereview.appspot.com/**6305065/diff/8001/src/pkg/**\r\n>> math/big/int.go<http://codereview.appspot.com/6305065/diff/8001/src/pkg/math/big/int.go>\r\n>> File src/pkg/math/big/int.go (right):\r\n>>\r\n>> http://codereview.appspot.com/**6305065/diff/8001/src/pkg/**\r\n>> math/big/int.go#newcode105<http://codereview.appspot.com/6305065/diff/8001/src/pkg/math/big/int.go#newcode105>\r\n>> src/pkg/math/big/int.go:105: // negate sets z to -z and returns z.\r\n>> On 2012/06/10 21:42:10, rsc wrote:\r\n>>\r\n>>> I don't believe this function is necessary; see below.\r\n>>>\r\n>>\r\n>> Done.\r\n>>\r\n>> http://codereview.appspot.com/**6305065/diff/8001/src/pkg/**\r\n>> math/big/int.go#newcode655<http://codereview.appspot.com/6305065/diff/8001/src/pkg/math/big/int.go#newcode655>\r\n>> src/pkg/math/big/int.go:655: // even reports whether x is even.\r\n>>\r\n>> On 2012/06/10 21:42:10, rsc wrote:\r\n>>\r\n>>> I don't believe this function is necessary; see below.\r\n>>>\r\n>>\r\n>> Done.\r\n>>\r\n>>\r\n>> http://codereview.appspot.com/**6305065/diff/8001/src/pkg/**\r\n>> math/big/int.go#newcode681<http://codereview.appspot.com/6305065/diff/8001/src/pkg/math/big/int.go#newcode681>\r\n>> src/pkg/math/big/int.go:681: t.Set(v).negate()\r\n>> On 2012/06/10 21:42:10, rsc wrote:\r\n>>\r\n>>> t.Neg(v)\r\n>>>\r\n>>\r\n>> Done.\r\n>>\r\n>>\r\n>> http://codereview.appspot.com/**6305065/diff/8001/src/pkg/**\r\n>> math/big/int.go#newcode686<http://codereview.appspot.com/6305065/diff/8001/src/pkg/math/big/int.go#newcode686>\r\n>> src/pkg/math/big/int.go:686: for t.even() {\r\n>> On 2012/06/10 21:42:10, rsc wrote:\r\n>>\r\n>>> t.Rsh(t, t.abs.trailingZeroBits()) no?\r\n>>>\r\n>>\r\n>> Done.\r\n>>\r\n>>\r\n>> http://codereview.appspot.com/**6305065/diff/8001/src/pkg/**\r\n>> math/big/int.go#newcode693<http://codereview.appspot.com/6305065/diff/8001/src/pkg/math/big/int.go#newcode693>\r\n>> src/pkg/math/big/int.go:693: v.Set(t).negate()\r\n>> On 2012/06/10 21:42:10, rsc wrote:\r\n>>\r\n>>> v.Neg(t)\r\n>>>\r\n>>\r\n>> Done.\r\n>>\r\n>>\r\n>> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n>> math/big/int.go<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go>\r\n>> File src/pkg/math/big/int.go (right):\r\n>>\r\n>> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n>> math/big/int.go#newcode25<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode25>\r\n>> src/pkg/math/big/int.go:25: intZero = &Int{}\r\n>> On 2012/06/11 21:08:12, gri wrote:\r\n>>\r\n>>> intZero is not needed - see below. change this back to what it was\r\n>>>\r\n>>\r\n>> Done.\r\n>>\r\n>>\r\n>> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n>> math/big/int.go#newcode649<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode649>\r\n>> src/pkg/math/big/int.go:649: // even reports whether x is even.\r\n>> On 2012/06/11 21:08:12, gri wrote:\r\n>>\r\n>>> this function is not used anymore\r\n>>>\r\n>>\r\n>> Done.\r\n>>\r\n>>\r\n>> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n>> math/big/int.go#newcode654<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode654>\r\n>> src/pkg/math/big/int.go:654: // BinaryGCD sets z to the greatest common\r\n>> divisor of a and b, which are assumed to be\r\n>> On 2012/06/11 21:08:12, gri wrote:\r\n>>\r\n>>> s/BinaryGCD/binaryGCD/\r\n>>>\r\n>>\r\n>> Done.\r\n>>\r\n>>\r\n>> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n>> math/big/int.go#newcode654<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode654>\r\n>> src/pkg/math/big/int.go:654: // BinaryGCD sets z to the greatest common\r\n>> divisor of a and b, which are assumed to be\r\n>> On 2012/06/11 21:08:12, gri wrote:\r\n>>\r\n>>> which must be positive,\r\n>>>\r\n>>\r\n>> Done.\r\n>>\r\n>>\r\n>> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n>> math/big/int.go#newcode656<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode656>\r\n>> src/pkg/math/big/int.go:656: // This is the faster, non-extended binary\r\n>> version of the algorithm from from Knuth,\r\n>> On 2012/06/11 21:08:12, gri wrote:\r\n>>\r\n>>> s/from from/from/\r\n>>>\r\n>>\r\n>> Done.\r\n>>\r\n>>\r\n>> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n>> math/big/int.go#newcode659<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode659>\r\n>> src/pkg/math/big/int.go:659: u := z\r\n>> On 2012/06/11 21:08:12, gri wrote:\r\n>>\r\n>>> u := z.Set(a)\r\n>>>\r\n>>\r\n>> Done.\r\n>>\r\n>>\r\n>> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n>> math/big/int.go#newcode663<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode663>\r\n>> src/pkg/math/big/int.go:663: // collect all of the 2s\r\n>> On 2012/06/11 21:08:12, gri wrote:\r\n>>\r\n>>> this comment is not very meaningful - what are all the 2s in a binary\r\n>>>\r\n>> number?\r\n>>\r\n>>  // determine largest k such that u = u'<<k, v = v'<<k\r\n>>>\r\n>>\r\n>> Done.\r\n>>\r\n>>\r\n>> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n>> math/big/int.go#newcode665<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode665>\r\n>> src/pkg/math/big/int.go:665: vTz := v.abs.trailingZeroBits()\r\n>> On 2012/06/11 21:08:12, gri wrote:\r\n>>\r\n>>> if vk := v.abs.trailingZeroBits(); vk < k {\r\n>>>    k = vk\r\n>>> }\r\n>>>\r\n>>\r\n>> Done.\r\n>>\r\n>>\r\n>> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n>> math/big/int.go#newcode674<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode674>\r\n>> src/pkg/math/big/int.go:674: // if u is odd:\r\n>> On 2012/06/11 21:08:12, gri wrote:\r\n>>\r\n>>> leave this comment away\r\n>>>\r\n>>\r\n>> Done.\r\n>>\r\n>>\r\n>> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n>> math/big/int.go#newcode675<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode675>\r\n>> src/pkg/math/big/int.go:675: if len(u.abs) != 0 && u.abs[0]&1 == 1 {\r\n>> On 2012/06/11 21:08:12, gri wrote:\r\n>>\r\n>>> s/!=/>/\r\n>>>\r\n>>\r\n>>  (detail, but implies more directly that index 0 is valid. also it's\r\n>>>\r\n>> the way all\r\n>>\r\n>>> the other tests for zero are written in this file)\r\n>>>\r\n>>\r\n>>  But since u and v must be strictly positive, this test is not even\r\n>>>\r\n>> required (but\r\n>>\r\n>>> then a comment is appropriate).\r\n>>>\r\n>>\r\n>> Done.\r\n>>\r\n>>\r\n>> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n>> math/big/int.go#newcode676<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode676>\r\n>> src/pkg/math/big/int.go:676: t.Neg(v)\r\n>> On 2012/06/11 21:08:12, gri wrote:\r\n>>\r\n>>> before t.Neg(v) add comment\r\n>>>\r\n>>\r\n>>  // u is odd\r\n>>>\r\n>>\r\n>> Done.\r\n>>\r\n>>\r\n>> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n>> math/big/int.go#newcode679<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode679>\r\n>> src/pkg/math/big/int.go:679: for t.Cmp(intZero) != 0 {\r\n>> On 2012/06/11 21:08:12, gri wrote:\r\n>>\r\n>>> for len(t.abs) > 0 {\r\n>>>\r\n>>\r\n>>  and get rid of intZero\r\n>>>\r\n>>\r\n>> Done.\r\n>>\r\n>> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n>> math/big/int.go#newcode682<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode682>\r\n>> src/pkg/math/big/int.go:682:\r\n>> On 2012/06/11 21:08:12, gri wrote:\r\n>>\r\n>>> remove this empty line\r\n>>>\r\n>>\r\n>> Done.\r\n>>\r\n>>\r\n>> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n>> math/big/int.go#newcode683<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode683>\r\n>> src/pkg/math/big/int.go:683: if t.Cmp(intZero) > 0 {\r\n>> On 2012/06/11 21:08:12, gri wrote:\r\n>>\r\n>>> if t.neg {\r\n>>>\r\n>>\r\n>>  and swap the branches\r\n>>>\r\n>>\r\n>>  (We enter the for loop with a value t != 0. It must still be != 0\r\n>>>\r\n>> after shifting\r\n>>\r\n>>> by trailingZeroBits. The only way it can be positive is if it's not\r\n>>>\r\n>> negative).\r\n>>\r\n>> Done.\r\n>>\r\n>>\r\n>> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n>> math/big/int.go#newcode690<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/int.go#newcode690>\r\n>> src/pkg/math/big/int.go:690: return u.Lsh(u, k)\r\n>> On 2012/06/11 21:08:12, gri wrote:\r\n>>\r\n>>> it seems appropriate to have an empty line before the return - given\r\n>>>\r\n>> the use of\r\n>>\r\n>>> empty lines in the rest of this function\r\n>>>\r\n>>\r\n>> Done.\r\n>>\r\n>>\r\n>> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n>> math/big/rat.go<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/rat.go>\r\n>> File src/pkg/math/big/rat.go (right):\r\n>>\r\n>> http://codereview.appspot.com/**6305065/diff/11001/src/pkg/**\r\n>> math/big/rat.go#newcode164<http://codereview.appspot.com/6305065/diff/11001/src/pkg/math/big/rat.go#newcode164>\r\n>> src/pkg/math/big/rat.go:164: if f.Cmp(intOne) != 0 {\r\n>> On 2012/06/11 21:08:12, gri wrote:\r\n>>\r\n>>> there is no reason to split up this if and the assignment to f\r\n>>>\r\n>>\r\n>> Done.\r\n>>\r\n>> http://codereview.appspot.com/**6305065/<http://codereview.appspot.com/6305065/>\r\n>>\r\n>\r\n>\r\n\r\n\r\n-- \r\nChristopher Swenson\r\ncswenson@google.com\r\n",
			"disapproval": false,
			"date": "2012-06-11 21:36:44.542665",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"remyoudompheng@gmail.com",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Here are the benchmarks I obtain for Fibonacci numbers:\n(when sizes are equal I take two consecutive Fibonacci terms of the specified size).\n\nLeft is regular, right is binary.\n\nbenchmark                  old ns/op    new ns/op    delta\nBenchmarkGCD10x10              12416         2281  -81.63%\nBenchmarkGCD10x60               5253         8926  +69.92%\nBenchmarkGCD10x100              5467        17305  +216.54%\nBenchmarkGCD10x1000             5676       178788  +3049.89%\nBenchmarkGCD10x10000           13673      4304016  +31378.21%\nBenchmarkGCD60x60              70486        10105  -85.66%\nBenchmarkGCD60x100              5354        12166  +127.23%\nBenchmarkGCD60x1000            10598       167285  +1478.46%\nBenchmarkGCD60x10000           40188      4436928  +10940.43%\nBenchmarkGCD100x100           140129        17532  -87.49%\nBenchmarkGCD100x1000           10476       170715  +1529.58%\nBenchmarkGCD100x10000          37456      4501676  +11918.57%\nBenchmarkGCD1000x1000        2090200       204958  -90.19%\nBenchmarkGCD1000x10000         54765      4631424  +8356.90%\nBenchmarkGCD10000x10000     59659800      5536028  -90.72%\n\nhttp://codereview.appspot.com/6305065/diff/10005/src/pkg/math/big/gcd_test.go\nFile src/pkg/math/big/gcd_test.go (right):\n\nhttp://codereview.appspot.com/6305065/diff/10005/src/pkg/math/big/gcd_test.go#newcode65\nsrc/pkg/math/big/gcd_test.go:65: sizes := [...]uint{10, 60, 100, 1000, 10000}\ncalibrate_test.go is a very special case. There is already a flag for benchmarks which is -bench, so no need for adding a custom one.\n\nhttp://codereview.appspot.com/6305065/diff/6011/src/pkg/math/big/gcd_test.go\nFile src/pkg/math/big/gcd_test.go (right):\n\nhttp://codereview.appspot.com/6305065/diff/6011/src/pkg/math/big/gcd_test.go#newcode22\nsrc/pkg/math/big/gcd_test.go:22: if !useBinaryGCD {\nthe logic seems reversed here.",
			"disapproval": false,
			"date": "2012-06-12 06:52:39.653798",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri@golang.org, rsc@golang.org, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-11 22:31:09.418098",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2013-07-20 21:32:36.880240",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"cswenson@google.com",
				"gri@golang.org",
				"rsc@golang.org",
				"bradfitz@golang.org",
				"mtj@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=close",
			"disapproval": false,
			"date": "2013-07-21 10:17:04.800820",
			"approval": false
		}
	],
	"owner_email": "cswenson@google.com",
	"private": false,
	"base_url": "",
	"owner": "Christopher Swenson",
	"subject": "code review 6305065:       math/big: Implemented binary GCD algorithm",
	"created": "2012-06-07 15:12:09.354695",
	"patchsets": [
		1,
		2001,
		8001,
		11001,
		7002,
		13002,
		10005,
		6011,
		4005,
		3013,
		6013,
		2012,
		14009
	],
	"modified": "2013-07-21 10:17:05.454500",
	"closed": false,
	"issue": 6305065
}