{
	"description": "runtime: improved continuity in hash computation\n\nAdds dumpmap() function as a side-effect.\nFixes issue 3695.",
	"cc": [
		"r@golang.org",
		"dave@cheney.net",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/06/13 21:01:22, atom wrote:\n> On 2012/06/13 19:27:13, rsc wrote:\n> >I don't want to add all the hash printing code, though, at\n> > least not right now, so I will revert that file before submitting this.\n> \n> There are 2 lines of new code in hashmap.c that aren't related to printing. They\n> start with \"if((hash & HASH_MASK) == HASH_SUBHASH) ...\".\n\nI never received this message via email, strangely. Apologies for not replying earlier.\n\nDid you run into this case in the actual code? Skimming it I don't see how this can happen.",
			"disapproval": false,
			"date": "2012-06-14 04:59:46.518701",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-06-10 15:31:09.694001",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"r@golang.org",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/06/13 19:27:13, rsc wrote:\n>I don't want to add all the hash printing code, though, at\n> least not right now, so I will revert that file before submitting this.\n\nThere are 2 lines of new code in hashmap.c that aren't related to printing. They start with \"if((hash & HASH_MASK) == HASH_SUBHASH) ...\".",
			"disapproval": false,
			"date": "2012-06-13 21:01:22.107033",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "what do you mean by \"improved continuity\"?\n\nnot sure the new debugging stuff carries its weight.",
			"disapproval": false,
			"date": "2012-06-10 17:10:22.388649",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"r@golang.org",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=c8d163b7930e ***\n\nruntime: improved continuity in hash computation\n\nFixes issue 3695.\n\nR=r, dave, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6304062\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2012-06-13 19:53:41.950957",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/06/10 17:10:22, r wrote:\n> what do you mean by \"improved continuity\"?\n\nwith the previous version of alg.c there was a much higher chance that the value of *h would reset to its previous state during hashcode computation. \"continuity\" means that the value should now depend on all previous values. it was \"chunky\", it is \"continuous\" now.\n \n> not sure the new debugging stuff carries its weight.\n\ndumpmap() allowed me to figure out where the problem was. it was illuminating to see what Hmap looks like in memory if there are many collisions. dumpmap() may be useful if there turns out to be another problem (performance issue, or bug) with the memory layout of a map.",
			"disapproval": false,
			"date": "2012-06-10 17:57:52.610083",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for this. I think the use of a macro makes the hash algos easier to read, I hope they are raised above the bar for inclusion of new macros.\n\nhttp://codereview.appspot.com/6304062/diff/1/src/pkg/runtime/hashmap.c\nFile src/pkg/runtime/hashmap.c (right):\n\nhttp://codereview.appspot.com/6304062/diff/1/src/pkg/runtime/hashmap.c#newcode67\nsrc/pkg/runtime/hashmap.c:67: Debug = 0,\ncan this be made debug to reduce the size of the lines changed below ?\n\nhttp://codereview.appspot.com/6304062/diff/1/src/pkg/runtime/hashmap.c#newcode68\nsrc/pkg/runtime/hashmap.c:68: DumpOnInsert = 0,\nditto, but only because it shouldn't look like an exported value.",
			"disapproval": false,
			"date": "2012-06-11 01:28:58.968519",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6304062/diff/1/src/pkg/runtime/hashmap.c\nFile src/pkg/runtime/hashmap.c (right):\n\nhttp://codereview.appspot.com/6304062/diff/1/src/pkg/runtime/hashmap.c#newcode67\nsrc/pkg/runtime/hashmap.c:67: Debug = 0,\nOn 2012/06/11 01:28:59, dfc wrote:\n> can this be made debug to reduce the size of the lines changed below ?\n\nDone.\n\nhttp://codereview.appspot.com/6304062/diff/1/src/pkg/runtime/hashmap.c#newcode68\nsrc/pkg/runtime/hashmap.c:68: DumpOnInsert = 0,\nOn 2012/06/11 01:28:59, dfc wrote:\n> ditto, but only because it shouldn't look like an exported value.\n\nDone.",
			"disapproval": false,
			"date": "2012-06-11 05:31:35.602026",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"rsc@golang.org",
				"r@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/06/14 04:59:46, rsc wrote:\n> On 2012/06/13 21:01:22, atom wrote:\n> > On 2012/06/13 19:27:13, rsc wrote:\n> > >I don't want to add all the hash printing code, though, at\n> > > least not right now, so I will revert that file before submitting this.\n> > \n> > There are 2 lines of new code in hashmap.c that aren't related to printing.\n> They\n> > start with \"if((hash & HASH_MASK) == HASH_SUBHASH) ...\".\n> \n> I never received this message via email, strangely. Apologies for not replying\n> earlier.\n\nI wasn't sure what the \"Send mail to reviewers\" button does so I unchecked it when sending the message. Now I know how it works.\n\n> Did you run into this case in the actual code? Skimming it I don't see how this\n> can happen.\n\nThere is a while loop containing the line:\n\n    hash += (e_hash == hash);    /* adjust hash if it collides */\n\nIf there are many successive collisions, (hash & HASH_MASK) will be equal to HASH_SUBHASH.\n\nThe older alg.c allowed the programmer to make a lot of distinct hashmap insertions that were all using the same hash (issue 3695). The newer alg.c makes it harder for the programmer to (intentionally or unintentionally) create such a situation.",
			"disapproval": false,
			"date": "2012-06-14 09:39:49.550560",
			"approval": false
		},
		{
			"sender": "0xE2.0x9A.0x9B@gmail.com",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-11 05:29:52.007015",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"0xE2.0x9A.0x9B@gmail.com",
				"r@golang.org",
				"dave@cheney.net",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThank you very much for tracking this down.\n\nThe hash computation fixes are very important, enough that I am going to pick them up for Go 1.0.2. I don't want to add all the hash printing code, though, at least not right now, so I will revert that file before submitting this.",
			"disapproval": false,
			"date": "2012-06-13 19:27:13.312081",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> There is a while loop containing the line:\r\n>\r\n> \u00a0 \u00a0hash += (e_hash == hash); \u00a0 \u00a0/* adjust hash if it collides */\r\n>\r\n> If there are many successive collisions, (hash & HASH_MASK) will be\r\n> equal to HASH_SUBHASH.\r\n\r\nI think you're right that it can happen, but only if you can get 64\r\ndifferent elements in the map to collide with the same 26-bit (or, on\r\na 64-bit platform, 58-bit) hash. So this is protecting against bugs in\r\nthe calling code, like the one you fixed. The combination of fixing\r\nthe hash function to use all its input and using a random hash\r\nfunction should make that extremely unlikely.\r\n\r\nI think the assertion should probably be up higher, near the loop that\r\nis doing the collision handling. I'll talk to the original author of\r\nthis code.\r\n\r\nThanks again.\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-06-14 15:18:20.016495",
			"approval": false
		}
	],
	"owner_email": "0xE2.0x9A.0x9B@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "atom",
	"subject": "code review 6304062: runtime: improved continuity in hash computation",
	"created": "2012-06-10 15:31:07.002070",
	"patchsets": [
		1,
		7001
	],
	"modified": "2012-09-20 07:53:19.582530",
	"closed": true,
	"issue": 6304062
}