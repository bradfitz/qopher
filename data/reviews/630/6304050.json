{
	"description": "cmd/gc: run escape analysis in call graph dependency order\n\nIf there are mutually recursive functions, there is a cycle in\nthe dependency graph, so the order is actually dependency order\namong the strongly connected components: mutually recursive\nfunctions get put into the same batch and analyzed together.\n(Until now the entire package was put in one batch.)\n\nThe non-recursive case (single function, maybe with some\nclosures inside) will be able to be more precise about inputs\nthat escape only back to outputs, but that is not implemented yet.",
	"cc": [
		"ken@golang.org",
		"golang-dev@googlegroups.com",
		"lvd@google.com"
	],
	"reviewers": [
		"ken@google.com",
		"dave@cheney.net"
	],
	"messages": [
		{
			"sender": "ken@google.com",
			"recipients": [
				"rsc@golang.org",
				"ken@google.com",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"lvd@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "lgtm",
			"disapproval": false,
			"date": "2012-06-07 08:20:52.469099",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jun 7, 2012 at 8:34 AM,  <dave@cheney.net> wrote:\r\n> Somewhere in this set of CLs revcomp performance improved by 10-15%,\r\n> kudos\r\n\r\nthat makes no sense at all and might indicate a problem.\r\ncan you reproduce that? if so, can you narrow down which CL it was?\r\n\r\nthanks.\r\nruss\r\n",
			"disapproval": false,
			"date": "2012-06-07 12:47:16.737005",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"rsc@golang.org",
				"ken@google.com",
				"dave@cheney.net",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"lvd@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> that makes no sense at all and might indicate a problem.\n> can you reproduce that? if so, can you narrow down which CL it was?\n\nSorry, this was a false alarm, I've bisected all the way back to b96a9405b3ee8414fcca43e0fa1c1357548f39c4 but now can't find any performance difference. Please excuse the noise.",
			"disapproval": false,
			"date": "2012-06-07 12:59:35.254060",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"lvd@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello ken2 (cc: golang-dev@googlegroups.com, lvd),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-06-07 07:15:08.312774",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"lvd@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=b720fc58b147 ***\n\ncmd/gc: run escape analysis in call graph dependency order\n\nIf there are mutually recursive functions, there is a cycle in\nthe dependency graph, so the order is actually dependency order\namong the strongly connected components: mutually recursive\nfunctions get put into the same batch and analyzed together.\n(Until now the entire package was put in one batch.)\n\nThe non-recursive case (single function, maybe with some\nclosures inside) will be able to be more precise about inputs\nthat escape only back to outputs, but that is not implemented yet.\n\nR=ken2\nCC=golang-dev, lvd\nhttp://codereview.appspot.com/6304050",
			"disapproval": false,
			"date": "2012-06-07 07:15:15.230478",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"rsc@golang.org",
				"ken@google.com",
				"dave@cheney.net",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"lvd@google.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/06/07 08:20:52, ken3 wrote:\n> lgtm\n\nSomewhere in this set of CLs revcomp performance improved by 10-15%, kudos\n\ndarwin/amd64\n\nodessa(~/go/test/bench/go1) % ~/go/misc/benchcmp {old,new}.txt\nbenchmark                 old ns/op    new ns/op    delta\nBenchmarkBinaryTree17    5181540155   5085223970   -1.86%\nBenchmarkFannkuch11      3524706318   3475516020   -1.40%\nBenchmarkGobDecode         20894383     21110509   +1.03%\nBenchmarkGobEncode         11221841     11381225   +1.42%\nBenchmarkGzip             518374503    519531311   +0.22%\nBenchmarkGunzip           185240587    184805328   -0.23%\nBenchmarkJSONEncode        83476291     83044306   -0.52%\nBenchmarkJSONDecode       302164603    299070337   -1.02%\nBenchmarkMandelbrot200      6350020      6372817   +0.36%\nBenchmarkParse              7232197      7220256   -0.17%\nBenchmarkRevcomp         1476748207   1255099793  -15.01%\nBenchmarkTemplate         539801438    527985948   -2.19%\n\nbenchmark                  old MB/s     new MB/s  speedup\nBenchmarkGobDecode            36.73        36.36    0.99x\nBenchmarkGobEncode            68.40        67.44    0.99x\nBenchmarkGzip                 37.43        37.35    1.00x\nBenchmarkGunzip              104.75       105.00    1.00x\nBenchmarkJSONEncode           23.25        23.37    1.01x\nBenchmarkJSONDecode            6.42         6.49    1.01x\nBenchmarkParse                 8.01         8.02    1.00x\nBenchmarkRevcomp             172.11       202.51    1.18x\nBenchmarkTemplate              3.59         3.68    1.03x",
			"disapproval": false,
			"date": "2012-06-07 12:34:46.786642",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jun 7, 2012 at 8:59 AM,  <dave@cheney.net> wrote:\r\n> Sorry, this was a false alarm, I've bisected all the way back to\r\n> b96a9405b3ee8414fcca43e0fa1c1357548f39c4 but now can't find any\r\n> performance difference. Please excuse the noise.\r\n\r\nno worries. thanks for keeping us honest.\r\n",
			"disapproval": false,
			"date": "2012-06-07 13:01:59.852336",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 6304050: cmd/gc: run escape analysis in call graph dependency order",
	"created": "2012-06-07 04:29:54.091610",
	"patchsets": [
		1,
		2001,
		5001
	],
	"modified": "2012-06-07 12:59:35.323360",
	"closed": true,
	"issue": 6304050
}