{
	"description": "6305065",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"gri@golang.org"
	],
	"messages": [
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"cswenson@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-06-11 21:12:33.099614",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"cswenson@google.com",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6300083/diff/1/src/pkg/math/big/gcd_test.go\nFile src/pkg/math/big/gcd_test.go (right):\n\nhttp://codereview.appspot.com/6300083/diff/1/src/pkg/math/big/gcd_test.go#newcode18\nsrc/pkg/math/big/gcd_test.go:18: var bitSize = flag.Uint(\"bitSize\", 60, \"Size (in bits) of numbers to run GCD benchmark on\")\n60 is too small. This should test large numbers (1000 bits, 10000 bits by default). Also, I don't trust your speedups in general: What happens if one number is very large (10000 bits) and the other one is very small (100) bits? Are there combinations where the binary algorithm fails miserably?\n\nhttp://codereview.appspot.com/6300083/diff/1/src/pkg/math/big/gcd_test.go#newcode18\nsrc/pkg/math/big/gcd_test.go:18: var bitSize = flag.Uint(\"bitSize\", 60, \"Size (in bits) of numbers to run GCD benchmark on\")\nThis should be an automatic benchmark. It should test various large numbers, too. Remove this flag. The fewer flags the better.\n\nhttp://codereview.appspot.com/6300083/diff/1/src/pkg/math/big/gcd_test.go#newcode19\nsrc/pkg/math/big/gcd_test.go:19: var binGCD = flag.Bool(\"binGCD\", false, \"Whether to use the binary GCD for this run\")\nsame here - please remove this flag. make the benchmark test both binary and non-binary automatically.\n\nhttp://codereview.appspot.com/6300083/diff/1/src/pkg/math/big/gcd_test.go#newcode22\nsrc/pkg/math/big/gcd_test.go:22: var gcda = NewInt(0)\nThis is spending quite some time here for set up which is not part of the GCD computation, but still measured. You need to start/stop the timer before running the loop. Also, in the loop, there should be just the GCD",
			"disapproval": false,
			"date": "2012-06-11 21:34:42.858353",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"cswenson@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-06-11 21:30:05.936936",
			"approval": false
		},
		{
			"sender": "cswenson@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "No problem. I will address these changes in the other CL.\r\n\r\nI did it like this so that I could use benchcmp, as suggested (which\r\nrequires a before and after).\r\n\r\n--Christopher\r\n\r\nOn Mon, Jun 11, 2012 at 5:34 PM, <gri@golang.org> wrote:\r\n\r\n>\r\n> http://codereview.appspot.com/**6300083/diff/1/src/pkg/math/**\r\n> big/gcd_test.go<http://codereview.appspot.com/6300083/diff/1/src/pkg/math/big/gcd_test.go>\r\n> File src/pkg/math/big/gcd_test.go (right):\r\n>\r\n> http://codereview.appspot.com/**6300083/diff/1/src/pkg/math/**\r\n> big/gcd_test.go#newcode18<http://codereview.appspot.com/6300083/diff/1/src/pkg/math/big/gcd_test.go#newcode18>\r\n> src/pkg/math/big/gcd_test.go:**18: var bitSize = flag.Uint(\"bitSize\", 60,\r\n>\r\n> \"Size (in bits) of numbers to run GCD benchmark on\")\r\n> 60 is too small. This should test large numbers (1000 bits, 10000 bits\r\n> by default). Also, I don't trust your speedups in general: What happens\r\n> if one number is very large (10000 bits) and the other one is very small\r\n> (100) bits? Are there combinations where the binary algorithm fails\r\n> miserably?\r\n>\r\n> http://codereview.appspot.com/**6300083/diff/1/src/pkg/math/**\r\n> big/gcd_test.go#newcode18<http://codereview.appspot.com/6300083/diff/1/src/pkg/math/big/gcd_test.go#newcode18>\r\n> src/pkg/math/big/gcd_test.go:**18: var bitSize = flag.Uint(\"bitSize\", 60,\r\n>\r\n> \"Size (in bits) of numbers to run GCD benchmark on\")\r\n> This should be an automatic benchmark. It should test various large\r\n> numbers, too. Remove this flag. The fewer flags the better.\r\n>\r\n> http://codereview.appspot.com/**6300083/diff/1/src/pkg/math/**\r\n> big/gcd_test.go#newcode19<http://codereview.appspot.com/6300083/diff/1/src/pkg/math/big/gcd_test.go#newcode19>\r\n> src/pkg/math/big/gcd_test.go:**19: var binGCD = flag.Bool(\"binGCD\", false,\r\n>\r\n> \"Whether to use the binary GCD for this run\")\r\n> same here - please remove this flag. make the benchmark test both binary\r\n> and non-binary automatically.\r\n>\r\n> http://codereview.appspot.com/**6300083/diff/1/src/pkg/math/**\r\n> big/gcd_test.go#newcode22<http://codereview.appspot.com/6300083/diff/1/src/pkg/math/big/gcd_test.go#newcode22>\r\n> src/pkg/math/big/gcd_test.go:**22: var gcda = NewInt(0)\r\n> This is spending quite some time here for set up which is not part of\r\n> the GCD computation, but still measured. You need to start/stop the\r\n> timer before running the loop. Also, in the loop, there should be just\r\n> the GCD\r\n>\r\n> http://codereview.appspot.com/**6300083/<http://codereview.appspot.com/6300083/>\r\n>\r\n\r\n\r\n\r\n-- \r\nChristopher Swenson\r\ncswenson@google.com\r\n",
			"disapproval": false,
			"date": "2012-06-11 21:37:53.711642",
			"approval": false
		}
	],
	"owner_email": "cswenson@google.com",
	"private": false,
	"base_url": "",
	"owner": "Christopher Swenson",
	"subject": "code review 6300083: 6305065",
	"created": "2012-06-11 21:12:30.815462",
	"patchsets": [
		1
	],
	"modified": "2012-06-11 21:34:43.020038",
	"closed": true,
	"issue": 6300083
}