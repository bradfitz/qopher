{
	"description": "net/http: clarify client return values in docs\n\nAlso, fixes one violation found during testing where both\nresponse and error could be non-nil when a CheckRedirect test\nfailed.  This is arguably a minor API (behavior, not\nsignature) change, but it wasn't documented either way and was\ninconsistent & non-Go like.  Any code depending on the old\nbehavior was wrong anyway.",
	"cc": [
		"adg@golang.org",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adg@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-06-18 15:33:53.771652",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6307088/diff/9001/src/pkg/net/http/client.go\nFile src/pkg/net/http/client.go (right):\n\nhttp://codereview.appspot.com/6307088/diff/9001/src/pkg/net/http/client.go#newcode90\nsrc/pkg/net/http/client.go:90: // Either the response or err will be non-nil, but not both.\nThis should go without saying. It's the exceptions to this that need documentation.\n\nhttp://codereview.appspot.com/6307088/diff/9001/src/pkg/net/http/client.go#newcode91\nsrc/pkg/net/http/client.go:91: // A non-nil response always contains a non-nil res.Body.\nCan we please keep this resp? I've never seen 'res' for a response in this code.\n\nhttp://codereview.appspot.com/6307088/diff/9001/src/pkg/net/http/client.go#newcode155\nsrc/pkg/net/http/client.go:155: // Either the response or err will be non-nil, but not both.\nSame.\n\nhttp://codereview.appspot.com/6307088/diff/9001/src/pkg/net/http/client.go#newcode156\nsrc/pkg/net/http/client.go:156: // A non-nil response always contains a non-nil res.Body.\nWe needed the disambiguation of resp vs req above; here and below I think r was just fine. Can we leave them that way?\n\nhttp://codereview.appspot.com/6307088/diff/9001/src/pkg/net/http/client.go#newcode173\nsrc/pkg/net/http/client.go:173: // Either the response or err will be non-nil, but not both.\nSame.",
			"disapproval": false,
			"date": "2012-06-18 15:39:30.397688",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "One sec, the docs are wrong because we're inconsistent on naming the\r\n*http.Response either \"r\", \"res\", or \"resp\".  Changing all to \"res\" for\r\nconsistency.\r\n\r\nOn Wed, Jun 13, 2012 at 11:26 AM, <bradfitz@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> net/http: clarify client return values in docs\r\n>\r\n> Also, fixes one violation found during testing where both\r\n> response and error could be non-nil when a CheckRedirect test\r\n> failed.  This is arguably a minor API (behavior, not\r\n> signature) change, but it wasn't documented either way and was\r\n> inconsistent & non-Go like.  Any code depending on the old\r\n> behavior was wrong anyway.\r\n>\r\n> Please review this at http://codereview.appspot.com/**6307088/<http://codereview.appspot.com/6307088/>\r\n>\r\n> Affected files:\r\n>  M src/pkg/net/http/client.go\r\n>  M src/pkg/net/http/client_test.**go\r\n>\r\n>\r\n> Index: src/pkg/net/http/client.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/http/client.go\r\n> +++ b/src/pkg/net/http/client.go\r\n> @@ -87,6 +87,7 @@\r\n>  // Do sends an HTTP request and returns an HTTP response, following\r\n>  // policy (e.g. redirects, cookies, auth) as configured on the client.\r\n>  //\r\n> +// Either the response or err will be non-nil, but not both.\r\n>  // A non-nil response always contains a non-nil resp.Body.\r\n>  //\r\n>  // Callers should close resp.Body when done reading from it. If\r\n> @@ -151,6 +152,8 @@\r\n>  //    303 (See Other)\r\n>  //    307 (Temporary Redirect)\r\n>  //\r\n> +// Either the response or err will be non-nil, but not both.\r\n> +// A non-nil response always contains a non-nil resp.Body.\r\n>  // Caller should close r.Body when done reading from it.\r\n>  //\r\n>  // Get is a wrapper around DefaultClient.Get.\r\n> @@ -167,6 +170,8 @@\r\n>  //    303 (See Other)\r\n>  //    307 (Temporary Redirect)\r\n>  //\r\n> +// Either the response or err will be non-nil, but not both.\r\n> +// A non-nil response always contains a non-nil resp.Body.\r\n>  // Caller should close r.Body when done reading from it.\r\n>  func (c *Client) Get(url string) (r *Response, err error) {\r\n>        req, err := NewRequest(\"GET\", url, nil)\r\n> @@ -245,12 +250,11 @@\r\n>        }\r\n>\r\n>        method := ireq.Method\r\n> -       err = &url.Error{\r\n> +       return nil, &url.Error{\r\n>                Op:  method[0:1] + strings.ToLower(method[1:]),\r\n>                URL: urlStr,\r\n>                Err: err,\r\n>        }\r\n> -       return\r\n>  }\r\n>\r\n>  func defaultCheckRedirect(req *Request, via []*Request) error {\r\n> Index: src/pkg/net/http/client_test.**go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/http/client_**test.go\r\n> +++ b/src/pkg/net/http/client_**test.go\r\n> @@ -231,7 +231,6 @@\r\n>\r\n>        checkErr = errors.New(\"no redirects allowed\")\r\n>        res, err = c.Get(ts.URL)\r\n> -       finalUrl = res.Request.URL.String()\r\n>        if e, g := \"Get /?n=1: no redirects allowed\", fmt.Sprintf(\"%v\",\r\n> err); e != g {\r\n>                t.Errorf(\"with redirects forbidden, expected error %q, got\r\n> %q\", e, g)\r\n>        }\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-06-13 18:29:37.300369",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-06-13 18:26:20.566543",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-13 18:33:23.967984",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-06-19 04:15:33.870406",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adg@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-18 16:02:01.112129",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-06-13 18:40:43.379817",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"adg@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=f7839a55036e ***\n\nnet/http: clarify client return values in docs\n\nAlso, fixes one violation found during testing where both\nresponse and error could be non-nil when a CheckRedirect test\nfailed.  This is arguably a minor API (behavior, not\nsignature) change, but it wasn't documented either way and was\ninconsistent & non-Go like.  Any code depending on the old\nbehavior was wrong anyway.\n\nR=adg, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6307088",
			"disapproval": false,
			"date": "2012-06-19 16:10:21.868113",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 6307088: net/http: clarify client return values in docs",
	"created": "2012-06-13 18:25:37.619673",
	"patchsets": [
		1,
		2001,
		4001,
		8001,
		9001,
		4003,
		13001
	],
	"modified": "2012-06-19 16:10:22.879524",
	"closed": true,
	"issue": 6307088
}