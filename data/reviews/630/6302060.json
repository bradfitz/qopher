{
	"description": "exp/types: testing resolution of qualified identifiers\n\nAlso: fix a bug with exp/types/GcImport.",
	"cc": [
		"rsc@golang.org",
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/6302060/diff/11003/src/pkg/exp/types/resolver_test.go\nFile src/pkg/exp/types/resolver_test.go (right):\n\nhttp://codereview.appspot.com/6302060/diff/11003/src/pkg/exp/types/resolver_test.go#newcode51\nsrc/pkg/exp/types/resolver_test.go:51: missing := func(pos token.Pos, pkgname, selname string) {\nOn 2012/06/11 15:48:33, r wrote:\n> i'd put the Lookup and nil check into this closure, changing the name to, say,\n> lookup. the signature gets shorter and the loop gets simpler\n> \n> lookup(x.Obj, s.Sel)\n\nDone.\n\nhttp://codereview.appspot.com/6302060/diff/11003/src/pkg/exp/types/resolver_test.go#newcode58\nsrc/pkg/exp/types/resolver_test.go:58: // lookup selector in respective package scope\nOn 2012/06/11 15:48:33, r wrote:\n> look up (two words) or, better: look for\n\nDone.",
			"disapproval": false,
			"date": "2012-06-11 17:46:31.212184",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=83de23c109b0 ***\n\nexp/types: testing resolution of qualified identifiers\n\nAlso: fix a bug with exp/types/GcImport.\n\nR=rsc, r\nCC=golang-dev\nhttp://codereview.appspot.com/6302060",
			"disapproval": false,
			"date": "2012-06-11 18:06:34.439428",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/6302060/diff/1002/src/pkg/exp/types/resolver_test.go\nFile src/pkg/exp/types/resolver_test.go (right):\n\nhttp://codereview.appspot.com/6302060/diff/1002/src/pkg/exp/types/resolver_test.go#newcode63\nsrc/pkg/exp/types/resolver_test.go:63: // lookup selector in respective package\ns/lookup/look up/ or /find/",
			"disapproval": false,
			"date": "2012-06-11 17:51:22.927885",
			"approval": true
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6302060/diff/11003/src/pkg/exp/types/resolver_test.go\nFile src/pkg/exp/types/resolver_test.go (right):\n\nhttp://codereview.appspot.com/6302060/diff/11003/src/pkg/exp/types/resolver_test.go#newcode51\nsrc/pkg/exp/types/resolver_test.go:51: missing := func(pos token.Pos, pkgname, selname string) {\ni'd put the Lookup and nil check into this closure, changing the name to, say, lookup. the signature gets shorter and the loop gets simpler\n\nlookup(x.Obj, s.Sel)\n\nhttp://codereview.appspot.com/6302060/diff/11003/src/pkg/exp/types/resolver_test.go#newcode58\nsrc/pkg/exp/types/resolver_test.go:58: // lookup selector in respective package scope\nlook up (two words) or, better: look for",
			"disapproval": false,
			"date": "2012-06-11 15:48:33.072621",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-06-09 00:31:56.164713",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6302060: exp/types: testing resolution of qualified identifiers",
	"created": "2012-06-09 00:14:41.817604",
	"patchsets": [
		1,
		2001,
		5001,
		3003,
		10001,
		11003,
		1002,
		13001
	],
	"modified": "2012-06-11 18:06:35.107448",
	"closed": true,
	"issue": 6302060
}