{
	"description": "spec: allow comparison of structs, arrays containing comparable values\n\nAlso, clarify when interface comparison panics and\nthat comparison to nil is a special syntax rather than\na general comparison rule.",
	"cc": [
		"r@golang.org",
		"gri@golang.org",
		"r@google.com",
		"iant@golang.org",
		"cw@f00f.org",
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n",
			"disapproval": false,
			"date": "2011-12-06 20:10:18.287127",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"r@google.com",
				"iant@golang.org",
				"cw@f00f.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5440117/diff/4006/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5440117/diff/4006/doc/go_spec.html#newcode2936\ndoc/go_spec.html:2936: were first assigned to a temporary of the other type.\n... and that temporary is compared instead. ?\n\n(or something along those lines)\n\nhttp://codereview.appspot.com/5440117/diff/4006/doc/go_spec.html#newcode3003\ndoc/go_spec.html:3003: A comparison of two interface values with identical dynamic types\nI would move this paragraph up to where interface comparison is defined.\n\nhttp://codereview.appspot.com/5440117/diff/4006/doc/go_spec.html#newcode3005\ndoc/go_spec.html:3005: of that type are not comparable.  This applies not only to direct interface\nOnce this paragraph is moved up, this 2nd sentence is not needed anymore - it's implied.\n\nhttp://codereview.appspot.com/5440117/diff/4006/doc/go_spec.html#newcode3014\ndoc/go_spec.html:3014: Comparison of pointer, channel, and interface values to <code>nil</code>\nI think this sentence is not needed. It's already stated above.",
			"disapproval": false,
			"date": "2011-12-06 20:47:19.971140",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "updated:\n\tA non-interface value x of type T and an interface value are comparable\n\twhen values of type T are comparable and type T implements the interface.\n\tThey are equal if the interface value has dynamic type T and a dynamic\n\tvalue equal to the x.\n",
			"disapproval": false,
			"date": "2011-12-06 21:25:56.436195",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\n",
			"disapproval": false,
			"date": "2011-12-06 21:45:20.827863",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-12-06 15:37:59.787800",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5440117/diff/1/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5440117/diff/1/doc/go_spec.html#newcode2939\ndoc/go_spec.html:2939: apply to operands that are <i>orderable</i>.\ns/orderable/ordered/\nno need to coin a new term. (orderable to me sounds like we can get one from amazon.com)\n\nhttp://codereview.appspot.com/5440117/diff/1/doc/go_spec.html#newcode2972\ndoc/go_spec.html:2972: Two pointer values are equal if they point to the same location or if both are <code>nil</code>.\ns/are/have value/\nand call out == nil but see below\n\nhttp://codereview.appspot.com/5440117/diff/1/doc/go_spec.html#newcode2977\ndoc/go_spec.html:2977: Two channel values are equal if they were created by the same call to <code>make</code>\nthis definition always bothered me because it depends strongly on the distinction between value and variable in a way that's hard to understand for a reference type, but i don't have a better suggestion.\n\nhttp://codereview.appspot.com/5440117/diff/1/doc/go_spec.html#newcode2979\ndoc/go_spec.html:2979: or if both are <code>nil</code>.\ns/are/have value/\nalso need to call out == nil but see below\n\nhttp://codereview.appspot.com/5440117/diff/1/doc/go_spec.html#newcode2985\ndoc/go_spec.html:2985: and equal dynamic values or if both are <code>nil</code>.\ns/are/have value/\n\nhttp://codereview.appspot.com/5440117/diff/1/doc/go_spec.html#newcode2988\ndoc/go_spec.html:2988: of that type are not comparable.\ncall out == nil\n\nbut see below\n\nhttp://codereview.appspot.com/5440117/diff/1/doc/go_spec.html#newcode2994\ndoc/go_spec.html:2994: The values are equal if their corresponding fields are equal.\nStruct values are comparable if all the fields are comparable and equal if and only if all corresponding fields are equal.\n\nhttp://codereview.appspot.com/5440117/diff/1/doc/go_spec.html#newcode2999\ndoc/go_spec.html:2999: Two array values are compared by comparing corresponding elements.\nsimilarly\n\nhttp://codereview.appspot.com/5440117/diff/1/doc/go_spec.html#newcode3006\ndoc/go_spec.html:3006: However, as a special case, a slice, map, or function value can\ns/can/may/\nbut this is legalese.\n\nSlice, map, and function values are comparable only to the ideal constant nil.\nAlso, along with the rules above, pointers, interface values and channels may be compared with the ideal constant nil.",
			"disapproval": false,
			"date": "2011-12-06 16:36:54.617186",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Dec 6, 2011, at 8:58 AM, rsc@golang.org wrote:\n\n> On 2011/12/06 16:36:54, r wrote:\n>> Struct values are comparable if all the fields are comparable and\n> equal if and\n>> only if all corresponding fields are equal.\n> \n> It is important to say that the comparison compares corresponding\n> fields, because those comparisons may be interface comparisons,\n> which may panic.\n\nwhat part of 'if and only if all corresponding fields are equal' doesn't say that?\n\n\n",
			"disapproval": false,
			"date": "2011-12-06 17:14:43.513088",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/5440117/diff/4001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5440117/diff/4001/doc/go_spec.html#newcode2951\ndoc/go_spec.html:2951: Integer values are comparable and ordered, in the usual way.\nOn 2011/12/06 17:33:11, gri wrote:\n> presumably runes are integer values\n\nYes.  They are listed under integer types above.\n\nhttp://codereview.appspot.com/5440117/diff/4001/doc/go_spec.html#newcode2979\ndoc/go_spec.html:2979: or if both are <code>nil</code>.\nOn 2011/12/06 17:16:28, r wrote:\n> i think that the phrase\n>   are nil\n> is ambiguous\n\nSorry, I just missed this one.  I did change all the others,\nand now I've changed this one.\n\n> moreover, the meaning of\n>   c1 == c2\n> where c1 is nil and\n>   c1 == nil\n> are different and should be spelled out. i stand by my previous comments.\n\nThey are only different for slice, map, and function value,\nand I believe that is spelled out below.\n\nhttp://codereview.appspot.com/5440117/diff/4001/doc/go_spec.html#newcode3007\ndoc/go_spec.html:3007: be compared to the constant <code>nil</code>.\nOn 2011/12/06 17:33:11, gri wrote:\n> The current spec doesn't refer to nil as a constant elsewhere. Also, the\n> constant section doesn't mention nil as a constant.\n\nChanged to \"the predeclared identifier nil\", which is how\nother places in the spec refer to it.",
			"disapproval": false,
			"date": "2011-12-06 17:51:11.193322",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "In addition to closures (which would be nice not to allocate),\nfunction equality has a long history of being problematic\nin C in the presence of dynamic linking and such.  It will\nsimplify future implementations if we don't require it.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-06 19:40:02.442748",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Dec 6, 2011 at 15:56, Rob 'Commander' Pike <r@google.com> wrote:\n> happy to make suggestions but i'm not sure exactly what you're trying to say. assignability can be one-way, but the phrasing and your explanation here makes it sound more symmetric.\n\nif you have x == y, then either:\n\n1. x and y are same type\n2. x is assignable to y, in which case the == behaves as if by\n    var t typeof(y) = x\n    t == y\n3. y is assignable to x, in which case the == behaves as if by\n    var t typeof(x) = y\n    x == t\n\nIf 2 and 3 are both possible, then you get the same result\nno matter which you choose.  That only happens in cases like\n\n    type T struct{}\n    var x struct{}\n    var y T\n    x == y\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-06 21:00:49.585926",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/5440117/diff/1/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5440117/diff/1/doc/go_spec.html#newcode2994\ndoc/go_spec.html:2994: The values are equal if their corresponding fields are equal.\nOn 2011/12/06 16:36:54, r wrote:\n> Struct values are comparable if all the fields are comparable and equal if and\n> only if all corresponding fields are equal.\n\nIt is important to say that the comparison compares corresponding\nfields, because those comparisons may be interface comparisons,\nwhich may panic.\n\nhttp://codereview.appspot.com/5440117/diff/1/doc/go_spec.html#newcode3006\ndoc/go_spec.html:3006: However, as a special case, a slice, map, or function value can\nOn 2011/12/06 16:36:54, r wrote:\n> s/can/may/\n> but this is legalese.\n> \n> Slice, map, and function values are comparable only to the ideal constant nil.\n\nI want to avoid the word comparable here, because it is used\nabove for things like the definition of whether a struct is comparable\nor whether an interface comparison panics, and that does not\ndepend on whether one of the values involved is nil.\n\nThat is, I want to be clear that although you can write\n    var x []int\n    x == nil\nyou cannot do the same comparison through interfaces\n    var i, j interface{}\n    i = x\n    j = []int(nil)\n    i == j  // panics\nor with structs\n    var i, j struct { x []int }\n    i.x = x\n    j.x = nil\n    i == j  // disallowed at compile time\n\nSaying the word comparable here makes that less clear,\nat least in my mind.\n\nReworded as:\n\n---\nSlice, map, and function values are not comparable.\nHowever, as a special case, a slice, map, or function value may\nbe compared to the constant <code>nil</code>.\n(The rules above already permit pointer, channel, and interface\nvalues to be compared to <code>nil</code>.)\n---",
			"disapproval": false,
			"date": "2011-12-06 16:58:08.295477",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "getting close\n\nhttp://codereview.appspot.com/5440117/diff/4/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5440117/diff/4/doc/go_spec.html#newcode2967\ndoc/go_spec.html:2967: String values are comparable and ordered, lexically (byte-wise).\ndelete parens.\n\nhttp://codereview.appspot.com/5440117/diff/4/doc/go_spec.html#newcode3004\ndoc/go_spec.html:3004: arrays of interface values or structs with interface-valued fields.\nthe phrasing implies some other meaning of 'indirect' is possible, but i don't think that's true. drop the term and just state the possibility:\n\nThis applies not only to direct value comparisons but also when comparing arrays of interface values or structs with interface-valued fields.\n\nhttp://codereview.appspot.com/5440117/diff/4/doc/go_spec.html#newcode3012\ndoc/go_spec.html:3012: is also allowed and follows from the general rules above.)\nparens unnecessary",
			"disapproval": false,
			"date": "2011-12-06 18:03:11.302900",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"r@google.com",
				"iant@golang.org",
				"cw@f00f.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5440117/diff/6004/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5440117/diff/6004/doc/go_spec.html#newcode2990\ndoc/go_spec.html:2990: when values of type T are comparable and type T implements the interface.\nMuch better. But I think we still need to say when they are equal, now that they are comparable (like everywhere else).",
			"disapproval": false,
			"date": "2011-12-06 21:24:27.496610",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "thanks.  fixed both.\n\nOn Tue, Dec 6, 2011 at 17:01,  <gri@golang.org> wrote:\n> LGTM\n>\n>\n>\n> http://codereview.appspot.com/5440117/diff/2013/doc/go_spec.html\n> File doc/go_spec.html (right):\n>\n> http://codereview.appspot.com/5440117/diff/2013/doc/go_spec.html#newcode2989\n> doc/go_spec.html:2989: A non-interface value <code>x</code> of type\n> <code>X</code> and\n> A value <code>x</code> of non-interface type ... \u00a0?\n>\n> (to be symmetric - I had to read this a couple of times as it confused\n> me)\n>\n> http://codereview.appspot.com/5440117/diff/2013/doc/go_spec.html#newcode2997\n> doc/go_spec.html:2997: when values of type T are comparable and type T\n> implements the interface.\n> there seems to be some left-over stuff here (or is it Rietveld screwing\n> up?)\n>\n> http://codereview.appspot.com/5440117/\n",
			"disapproval": false,
			"date": "2011-12-06 22:02:59.012284",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5440117/diff/4001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5440117/diff/4001/doc/go_spec.html#newcode2979\ndoc/go_spec.html:2979: or if both are <code>nil</code>.\ni think that the phrase\n  are nil\nis ambiguous; moreover, the meaning of\n  c1 == c2\nwhere c1 is nil and\n  c1 == nil\nare different and should be spelled out. i stand by my previous comments.",
			"disapproval": false,
			"date": "2011-12-06 17:16:28.037600",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Dec 6, 2011 at 12:14, Rob 'Commander' Pike <r@google.com> wrote:\n> On Dec 6, 2011, at 8:58 AM, rsc@golang.org wrote:\n> > It is important to say that the comparison compares corresponding\n> > fields, because those comparisons may be interface comparisons,\n> > which may panic.\n>\n> what part of 'if and only if all corresponding fields are equal' doesn't say\n> that?\n\nThe if and only if describes the result without mentioning\nthe comparison itself, and it is the comparison that has\nthe side effect of panicking.  I moved the discussion of\npanic into its own paragraph, so that I can simplify the\nsentences as suggested.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-06 17:50:26.782031",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"r@google.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5440117/diff/4/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5440117/diff/4/doc/go_spec.html#newcode2985\ndoc/go_spec.html:2985: and equal dynamic values or if both have value <code>nil</code>.\nComparison of an interface value against a non-interface value is missing.",
			"disapproval": false,
			"date": "2011-12-06 18:06:11.486351",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Dec 6, 2011 at 11:25 AM,  <cw@f00f.org> wrote:\n> I'm curious, other than nil why are function comparisons not allowed?\n\nFor one: What does it mean to compare to closures? Are they the same\nif they are the same code, or if they are the same code and enclosed\nvalues?\n\n- gri\n",
			"disapproval": false,
			"date": "2011-12-06 19:27:49.111035",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI\n\nhttp://codereview.appspot.com/5440117/diff/4001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5440117/diff/4001/doc/go_spec.html#newcode2951\ndoc/go_spec.html:2951: Integer values are comparable and ordered, in the usual way.\npresumably runes are integer values\n\nhttp://codereview.appspot.com/5440117/diff/4001/doc/go_spec.html#newcode3007\ndoc/go_spec.html:3007: be compared to the constant <code>nil</code>.\nThe current spec doesn't refer to nil as a constant elsewhere. Also, the constant section doesn't mention nil as a constant.",
			"disapproval": false,
			"date": "2011-12-06 17:33:11.651449",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"r@google.com",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5440117/diff/4/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5440117/diff/4/doc/go_spec.html#newcode2960\ndoc/go_spec.html:2960: Complex values are comparable.\nWe could consider saying explicitly \"Complex values are comparable but not ordered.\"",
			"disapproval": false,
			"date": "2011-12-06 18:03:19.134361",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Dec 6, 2011 at 11:25 AM, <cw@f00f.org> wrote:\n\n> I'm curious, other than nil why are function comparisons not allowed?\n>\n\nIIRC, there are also some optimizations that are possible without them\naround function literals in bodies of functions that don't close over\nanything.  I can't remember the example that came up before, though.\n Something about the compiler being able to promote such a non-closing\nfunction literal to a normal function and not call runtime.newclosure on it\neach time to make sure it has a unique address, as required by the old spec.\n",
			"disapproval": false,
			"date": "2011-12-06 19:30:30.084041",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Dec 6, 2011 at 13:06,  <gri@golang.org> wrote:\n> Comparison of an interface value against a non-interface value is\n> missing.\n\nI changed the lead-in paragraph to read:\n\n\nIn any comparison, the first operand\nmust be <a href=\"#Assignability\">assignable</a>\nto the type of the second operand, or vice versa.\nWhen the operand types differ,\nthe comparison proceeds as if one operand\nwere first assigned to a temporary of the other type.\n",
			"disapproval": false,
			"date": "2011-12-06 20:09:01.835921",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"r@google.com",
				"iant@golang.org",
				"cw@f00f.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5440117/diff/4006/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5440117/diff/4006/doc/go_spec.html#newcode2936\ndoc/go_spec.html:2936: were first assigned to a temporary of the other type.\nbut which?",
			"disapproval": false,
			"date": "2011-12-06 20:46:16.557673",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\n\n In any comparison, the first operand\n must be <a href=\"#Assignability\">assignable</a>\n to the type of the second operand, or vice versa.\n-When the operand types differ,\n-the comparison proceeds as if one operand\n-were first assigned to a temporary of the other type.\n </p>\n <p>\n The equality operators <code>==</code> and <code>!=</code> apply\n\n...\n\n \tTwo interface values are equal if they have <a\nhref=\"#Type_identity\">identical</a> dynamic types\n \tand equal dynamic values or if both have value <code>nil</code>.\n \t</li>\n+\t\n+\t<li>\n+\tA non-interface value of type T and an interface value are comparable\n+\twhen values of type T are comparable and type T implements the interface.\n+\t</li>\n\n \t<li>\n \tStruct values are comparable if all the fields are comparable.\n",
			"disapproval": false,
			"date": "2011-12-06 21:11:27.145779",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Dec 6, 2011 at 15:47,  <gri@golang.org> wrote:\n> http://codereview.appspot.com/5440117/diff/4006/doc/go_spec.html#newcode3003\n> doc/go_spec.html:3003: A comparison of two interface values with\n> identical dynamic types\n> I would move this paragraph up to where interface comparison is defined.\n\nIt started that way, but you can't move that paragraph up,\nbecause at that point struct and array comparison are not\ndefined.  Also, struct, array, and interface comparability\nare all circularly dependent on each other, so I wanted the\nwording as short as possible in the bullet lists.\n\nI think the separate paragraph is much clearer than\nhaving it split among the three bullets (which was the\nfirst revision that everyone reviewed).\n\n> http://codereview.appspot.com/5440117/diff/4006/doc/go_spec.html#newcode3005\n> doc/go_spec.html:3005: of that type are not comparable. \u00a0This applies\n> not only to direct interface\n> Once this paragraph is moved up, this 2nd sentence is not needed anymore\n> - it's implied.\n\nExplicit is clearer than implicit here.  I think it would be\nvery easy for someone to miss that struct comparison\nmight panic because of a field with interface type.\nI agree that it is implied, but the extra sentence helps\npeople who don't realize that, which will be most people.\n\n> http://codereview.appspot.com/5440117/diff/4006/doc/go_spec.html#newcode3014\n> doc/go_spec.html:3014: Comparison of pointer, channel, and interface\n> values to <code>nil</code>\n> I think this sentence is not needed. It's already stated above.\n\nAgain, it's a tricky subject, and I agree that it is stated\nabove (and the sentence even says so).  Better to be\nexplicit.  Otherwise someone reading this might think\nthat you can't say ==nil except on those cases.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-06 20:55:49.044817",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "never mind.  this is what the compiler does but it is a mistake,\nbecause it allows some comparisons (involving interface values)\nthat will obviously panic at runtime.  i will fix the spec and\nthe compiler.\n\n\nOn Tue, Dec 6, 2011 at 16:00, Russ Cox <rsc@golang.org> wrote:\n> On Tue, Dec 6, 2011 at 15:56, Rob 'Commander' Pike <r@google.com> wrote:\n>> happy to make suggestions but i'm not sure exactly what you're trying to say. assignability can be one-way, but the phrasing and your explanation here makes it sound more symmetric.\n>\n> if you have x == y, then either:\n>\n> 1. x and y are same type\n> 2. x is assignable to y, in which case the == behaves as if by\n> \u00a0 \u00a0var t typeof(y) = x\n> \u00a0 \u00a0t == y\n> 3. y is assignable to x, in which case the == behaves as if by\n> \u00a0 \u00a0var t typeof(x) = y\n> \u00a0 \u00a0x == t\n>\n> If 2 and 3 are both possible, then you get the same result\n> no matter which you choose. \u00a0That only happens in cases like\n>\n> \u00a0 \u00a0type T struct{}\n> \u00a0 \u00a0var x struct{}\n> \u00a0 \u00a0var y T\n> \u00a0 \u00a0x == y\n>\n> Russ\n",
			"disapproval": false,
			"date": "2011-12-06 21:09:03.008726",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"r@google.com",
				"iant@golang.org",
				"cw@f00f.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5440117/diff/6006/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5440117/diff/6006/doc/go_spec.html#newcode2989\ndoc/go_spec.html:2989: A non-interface value x of type T and an interface value are comparable\nmissing some <code> markers.\n\nhttp://codereview.appspot.com/5440117/diff/6006/doc/go_spec.html#newcode2992\ndoc/go_spec.html:2992: value equal to x.\nwould help to have more names.\n\nA non-interface value x of type X and an interface value of type T, with dynamic value t, are comparable when values of type X are comparable and X implements T. They are equal if t has type X and t is equal to x.\n\n(feel free to choose different letters)\n\nhttp://codereview.appspot.com/5440117/diff/6006/doc/go_spec.html#newcode3009\ndoc/go_spec.html:3009: of that type are not comparable.  This applies not only to direct interface\ns/This/This property/ or behavior",
			"disapproval": false,
			"date": "2011-12-06 21:37:27.652271",
			"approval": true
		},
		{
			"sender": "cw@f00f.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"r@google.com",
				"iant@golang.org",
				"cw@f00f.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm curious, other than nil why are function comparisons not allowed?",
			"disapproval": false,
			"date": "2011-12-06 19:25:30.345542",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Dec 6, 2011 at 15:46,  <r@golang.org> wrote:\n> http://codereview.appspot.com/5440117/diff/4006/doc/go_spec.html#newcode2936\n> doc/go_spec.html:2936: were first assigned to a temporary of the other\n> type.\n> but which?\n\nIf both are assignable to each other then the conversion\nbetween them is a no-op, so you'd get the same result either way.\nI'm not thrilled with the wording.  Suggestions?\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-06 20:52:43.386309",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Dec 6, 2011, at 12:52 PM, Russ Cox wrote:\n\n> On Tue, Dec 6, 2011 at 15:46,  <r@golang.org> wrote:\n>> http://codereview.appspot.com/5440117/diff/4006/doc/go_spec.html#newcode2936\n>> doc/go_spec.html:2936: were first assigned to a temporary of the other\n>> type.\n>> but which?\n> \n> If both are assignable to each other then the conversion\n> between them is a no-op, so you'd get the same result either way.\n> I'm not thrilled with the wording.  Suggestions?\n\nhappy to make suggestions but i'm not sure exactly what you're trying to say. assignability can be one-way, but the phrasing and your explanation here makes it sound more symmetric.\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2011-12-06 20:56:24.099825",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nI tweaked your wording ever so slightly, because the\ncomparability does not depend on the interface value\nhaving a dynamic value at all.  (The interface value can\nbe nil, and the result will be false.)\n\n\tA non-interface value <code>x</code> of type <code>X</code> and\n\ta value <code>t</code> of interface type <code>T</code> are\ncomparable when values\n\tof type <code>X</code> are comparable and\n\t<code>X</code> implements <code>T</code>.\n\tThey are equal if <code>t</code>'s dynamic type is identical to <code>X</code>\n\tand <code>t</code>'s dynamic value is equal to <code>x</code>.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-12-06 21:43:08.160973",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"r@google.com",
				"iant@golang.org",
				"cw@f00f.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5440117/diff/2013/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttp://codereview.appspot.com/5440117/diff/2013/doc/go_spec.html#newcode2989\ndoc/go_spec.html:2989: A non-interface value <code>x</code> of type <code>X</code> and\nA value <code>x</code> of non-interface type ...  ?\n\n(to be symmetric - I had to read this a couple of times as it confused me)\n\nhttp://codereview.appspot.com/5440117/diff/2013/doc/go_spec.html#newcode2997\ndoc/go_spec.html:2997: when values of type T are comparable and type T implements the interface.\nthere seems to be some left-over stuff here (or is it Rietveld screwing up?)",
			"disapproval": false,
			"date": "2011-12-06 22:01:07.159148",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"r@google.com",
				"iant@golang.org",
				"cw@f00f.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-12-06 22:28:38.064885",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"gri@golang.org",
				"r@google.com",
				"iant@golang.org",
				"cw@f00f.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=5da1bc8899cf ***\n\nspec: allow comparison of structs, arrays containing comparable values\n\nAlso, clarify when interface comparison panics and\nthat comparison to nil is a special syntax rather than\na general comparison rule.\n\nR=r, gri, r, iant, cw, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5440117",
			"disapproval": false,
			"date": "2011-12-13 03:21:49.967998",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5440117: spec: allow comparison of structs, arrays containing co...",
	"created": "2011-12-06 15:37:57.015816",
	"patchsets": [
		1,
		4001,
		4,
		4006,
		6004,
		7005,
		6006,
		5008,
		2013,
		2015,
		8001
	],
	"modified": "2011-12-13 03:21:52.043283",
	"closed": true,
	"issue": 5440117
}