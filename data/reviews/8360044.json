{
	"description": "snappy-go: Small encoding speed improvements.\n\nNot sure if big enough to consider.\n\nbenchmark                  old ns/op    new ns/op    delta\nBenchmarkWordsDecode1e3         6695         6695   +0.00%\nBenchmarkWordsDecode1e4        66295        66324   +0.04%\nBenchmarkWordsDecode1e5       683764       683401   -0.05%\nBenchmarkWordsDecode1e6      5957201      5958060   +0.01%\nBenchmarkWordsEncode1e3        22069        21079   -4.49%\nBenchmarkWordsEncode1e4       130594       122500   -6.20%\nBenchmarkWordsEncode1e5      1344033      1259334   -6.30%\nBenchmarkWordsEncode1e6     10790380     10433710   -3.31%\nBenchmark_UFlat0              322380       322629   +0.08%\nBenchmark_UFlat1             3020234      3019993   -0.01%\nBenchmark_UFlat2               34780        34703   -0.22%\nBenchmark_UFlat3              105514       105439   -0.07%\nBenchmark_UFlat4             1293924      1293729   -0.02%\nBenchmark_UFlat5              115789       116242   +0.39%\nBenchmark_UFlat6               52528        52536   +0.02%\nBenchmark_UFlat7               17628        17604   -0.14%\nBenchmark_UFlat8             4011431      4014931   +0.09%\nBenchmark_UFlat9              927759       928942   +0.13%\nBenchmark_UFlat10             802330       804713   +0.30%\nBenchmark_UFlat11            2499562      2499412   -0.01%\nBenchmark_UFlat12            3237869      3240822   +0.09%\nBenchmark_UFlat13            1425709      1427131   +0.10%\nBenchmark_UFlat14             192463       193185   +0.38%\nBenchmark_UFlat15              22708        22712   +0.02%\nBenchmark_UFlat16             326083       325980   -0.03%\nBenchmark_UFlat17             824631       824969   +0.04%\nBenchmark_ZFlat0              547747       541689   -1.11%\nBenchmark_ZFlat1             7584140      6945557   -8.42%\nBenchmark_ZFlat2             1876283      1365759  -27.21%\nBenchmark_ZFlat3             1215468       924872  -23.91%\nBenchmark_ZFlat4             2149307      2150477   +0.05%\nBenchmark_ZFlat5              253761       236758   -6.70%\nBenchmark_ZFlat6              105331       100136   -4.93%\nBenchmark_ZFlat7               43800        41979   -4.16%\nBenchmark_ZFlat8             6811070      6807188   -0.06%\nBenchmark_ZFlat9             1818855      1733550   -4.69%\nBenchmark_ZFlat10            1606930      1519209   -5.46%\nBenchmark_ZFlat11            4890796      4670013   -4.51%\nBenchmark_ZFlat12            6394522      6076049   -4.98%\nBenchmark_ZFlat13            2379396      2368835   -0.44%\nBenchmark_ZFlat14             410782       380074   -7.48%\nBenchmark_ZFlat15              56660        51938   -8.33%\nBenchmark_ZFlat16             559311       557550   -0.31%\nBenchmark_ZFlat17            1366589      1361254   -0.39%\n\nbenchmark                   old MB/s     new MB/s  speedup\nBenchmarkWordsDecode1e3       149.36       149.34    1.00x\nBenchmarkWordsDecode1e4       150.84       150.77    1.00x\nBenchmarkWordsDecode1e5       146.25       146.33    1.00x\nBenchmarkWordsDecode1e6       167.86       167.84    1.00x\nBenchmarkWordsEncode1e3        45.31        47.44    1.05x\nBenchmarkWordsEncode1e4        76.57        81.63    1.07x\nBenchmarkWordsEncode1e5        74.40        79.41    1.07x\nBenchmarkWordsEncode1e6        92.68        95.84    1.03x\nBenchmark_UFlat0              317.64       317.39    1.00x\nBenchmark_UFlat1              232.46       232.48    1.00x\nBenchmark_UFlat2             3650.22      3658.32    1.00x\nBenchmark_UFlat3              894.00       894.63    1.00x\nBenchmark_UFlat4              316.56       316.60    1.00x\nBenchmark_UFlat5              212.48       211.65    1.00x\nBenchmark_UFlat6              212.26       212.23    1.00x\nBenchmark_UFlat7              211.08       211.37    1.00x\nBenchmark_UFlat8              256.70       256.48    1.00x\nBenchmark_UFlat9              163.93       163.72    1.00x\nBenchmark_UFlat10             156.02       155.56    1.00x\nBenchmark_UFlat11             170.73       170.74    1.00x\nBenchmark_UFlat12             148.82       148.68    1.00x\nBenchmark_UFlat13             359.97       359.61    1.00x\nBenchmark_UFlat14             198.69       197.94    1.00x\nBenchmark_UFlat15             186.14       186.11    1.00x\nBenchmark_UFlat16             363.67       363.79    1.00x\nBenchmark_UFlat17             223.52       223.43    1.00x\nBenchmark_ZFlat0              186.95       189.04    1.01x\nBenchmark_ZFlat1               92.57       101.08    1.09x\nBenchmark_ZFlat2               67.66        92.96    1.37x\nBenchmark_ZFlat3               77.61       101.99    1.31x\nBenchmark_ZFlat4              190.57       190.47    1.00x\nBenchmark_ZFlat5               96.95       103.92    1.07x\nBenchmark_ZFlat6              105.86       111.35    1.05x\nBenchmark_ZFlat7               84.95        88.64    1.04x\nBenchmark_ZFlat8              151.19       151.27    1.00x\nBenchmark_ZFlat9               83.62        87.73    1.05x\nBenchmark_ZFlat10              77.90        82.40    1.06x\nBenchmark_ZFlat11              87.26        91.38    1.05x\nBenchmark_ZFlat12              75.36        79.30    1.05x\nBenchmark_ZFlat13             215.69       216.65    1.00x\nBenchmark_ZFlat14              93.09       100.61    1.08x\nBenchmark_ZFlat15              74.60        81.38    1.09x\nBenchmark_ZFlat16             212.03       212.69    1.00x\nBenchmark_ZFlat17             134.88       135.40    1.00x",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"nigeltao@golang.org"
	],
	"messages": [
		{
			"sender": "0xjnml@gmail.com",
			"recipients": [
				"0xjnml@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/snappy-go/",
			"disapproval": false,
			"date": "2013-04-08 10:28:27.902550",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"0xjnml@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm inclined to reject this. I suspect that optimizing b0,b1,b2,b3 is just tinkering around the edges: for real speed-up you need to eliminate the bounds checking and do the equivalent of C++'s UNALIGNED_LOAD32. Doing that will require re-writing in assembler, or at least using package unsafe, and would remove any mention of b0,b1,b2,b3.",
			"disapproval": false,
			"date": "2013-04-09 00:13:45.667180",
			"approval": false
		},
		{
			"sender": "0xjnml@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Apr 9, 2013 at 2:13 AM,  <nigeltao@golang.org> wrote:\r\n> I'm inclined to reject this. I suspect that optimizing b0,b1,b2,b3 is\r\n> just tinkering around the edges: for real speed-up you need to eliminate\r\n> the bounds checking and do the equivalent of C++'s UNALIGNED_LOAD32.\r\n> Doing that will require re-writing in assembler, or at least using\r\n> package unsafe, and would remove any mention of b0,b1,b2,b3.\r\n\r\nOkay, no problem. Thanks for looking at it. Will close (not before tomorrow).\r\n\r\n-j\r\n",
			"disapproval": false,
			"date": "2013-04-09 07:36:47.219810",
			"approval": false
		}
	],
	"owner_email": "0xjnml@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "0xjnml",
	"subject": "code review 8360044: snappy-go: Small encoding speed improvements.",
	"created": "2013-04-08 10:27:54.771600",
	"patchsets": [
		1,
		2001,
		5001
	],
	"modified": "2013-04-09 07:36:47.219810",
	"closed": false,
	"issue": 8360044
}