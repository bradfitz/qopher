{
	"description": "cmd/cgo: Add support for C function pointers\n\n* Add a new kind of Name, \"fpvar\" which stands for function pointer variable\n* When walking the AST, find functions used as expressions and create a new Name object for them\n* Track functions which are only used in expr contexts, and avoid generating bridge code for them",
	"cc": [
		"golang-dev@googlegroups.com",
		"minux.ma@gmail.com",
		"fullung@gmail.com",
		"rsc@golang.org",
		"iant@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "alberto.garcia.hierro@gmail.com",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-05-31 11:09:47.734320",
			"approval": false
		},
		{
			"sender": "alberto.garcia.hierro@gmail.com",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Just wanted to add that all the tests in misc/cgo/tests continue to pass correctly after applying this patch.",
			"disapproval": false,
			"date": "2013-05-31 11:10:42.108620",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, May 31, 2013 at 7:10 PM, <alberto.garcia.hierro@gmail.com> wrote:\r\n\r\n> Just wanted to add that all the tests in misc/cgo/tests continue to pass\r\n> correctly after applying this patch.\r\n>\r\nYou should add new tests to misc/cgo/test for the new feature.\r\n",
			"disapproval": false,
			"date": "2013-05-31 11:40:38.103400",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"fullung@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Fixes issue 3364.",
			"disapproval": false,
			"date": "2013-05-31 12:09:00.390460",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"fullung@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FWIW, I was hoping this code might work now:\n\npackage jvm\n\n//#cgo CFLAGS: -I/usr/java/jdk1.7.0_21/include\n//#cgo linux CFLAGS: -I/usr/java/jdk1.7.0_21/include/linux\n//#cgo linux LDFLAGS: -ljvm -L/usr/java/jdk1.7.0_21/jre/lib/amd64/server -Wl,-rpath,/usr/java/jdk1.7.0_21/jre/lib/amd64/server\n//#include <jni.h>\nimport \"C\"\nimport \"unsafe\"\n\nfunc jvm() {\n\tvar vmargs C.JavaVMInitArgs\n\tvmargs.version = 0x00010001\n\tC.JNI_GetDefaultJavaVMInitArgs(unsafe.Pointer(&vmargs))\n\tvar jvm *C.JavaVM\n\tvar env unsafe.Pointer\n\tC.JNI_CreateJavaVM(&jvm, &env, unsafe.Pointer(&vmargs))\n\t(*jvm).DestroyJavaVM(jvm)\n}\n\nbut I still get:\n\ncannot call non-function (*jvm).DestroyJavaVM (type *[0]byte)\n\nwith your patch.",
			"disapproval": false,
			"date": "2013-05-31 12:31:52.221090",
			"approval": false
		},
		{
			"sender": "alberto.garcia.hierro@gmail.com",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"fullung@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/05/31 12:31:52, albert.strasheim wrote:\n> FWIW, I was hoping this code might work now:\n> \n> package jvm\n> \n> //#cgo CFLAGS: -I/usr/java/jdk1.7.0_21/include\n> //#cgo linux CFLAGS: -I/usr/java/jdk1.7.0_21/include/linux\n> //#cgo linux LDFLAGS: -ljvm -L/usr/java/jdk1.7.0_21/jre/lib/amd64/server\n> -Wl,-rpath,/usr/java/jdk1.7.0_21/jre/lib/amd64/server\n> //#include <jni.h>\n> import \"C\"\n> import \"unsafe\"\n> \n> func jvm() {\n> \tvar vmargs C.JavaVMInitArgs\n> \tvmargs.version = 0x00010001\n> \tC.JNI_GetDefaultJavaVMInitArgs(unsafe.Pointer(&vmargs))\n> \tvar jvm *C.JavaVM\n> \tvar env unsafe.Pointer\n> \tC.JNI_CreateJavaVM(&jvm, &env, unsafe.Pointer(&vmargs))\n> \t(*jvm).DestroyJavaVM(jvm)\n> }\n> \n> but I still get:\n> \n> cannot call non-function (*jvm).DestroyJavaVM (type *[0]byte)\n> \n> with your patch.\n\nHi Albert,\n\nThis patch lets you pass C function pointers around and store them in variables, but it doesn't allow calling them from Go code. You still need a C function which expects a function pointer to call them.\n\ne.g. (from the graphicsmagick binding I'm writing)\n\n\nfiam@ubuntu:~/gocode/src/magick$ cat bridge.h \n#ifndef BRIDGE_H\n#define BRIDGE_H\n\ntypedef Image* (*ImageFunc) (const Image *, ExceptionInfo *);\ntypedef Image* (*ImageRectFunc) (const Image*, const RectangleInfo *, ExceptionInfo *);\n\nImage * bridge_image_func(ImageFunc f, const Image *im, ExceptionInfo *ex);\nImage * bridge_image_rect_func(ImageRectFunc f, const Image *im, const RectangleInfo *r, ExceptionInfo *ex);\n\n#endif\n\n\nfiam@ubuntu:~/gocode/src/magick$ cat bridge.c \n#include <magick/api.h>\n#include \"bridge.h\"\n\nImage *\nbridge_image_func(ImageFunc f, const Image *im, ExceptionInfo *ex)\n{\n    return f(im, ex);\n}\n\nImage *\nbridge_image_rect_func(ImageRectFunc f, const Image *im, const RectangleInfo *r, ExceptionInfo *ex)\n{\n    return f(im, r, ex);\n}\n\nfiam@ubuntu:~/gocode/src/magick$ cat bridge.go // Ignore the im.Apply() stuff, that's for transparently handling animations, but it's not relevant for this example\npackage magick\n\n// #include <magick/api.h>\n// #include \"bridge.h\"\nimport \"C\"\n\nfunc (im *Image) applyRectFunc(r Rect, what string, f C.ImageRectFunc) (*Image, error) {\n\trect := r.rectangleInfo()\n\treturn im.Apply(func(i *Image) (*Image, error) {\n\t\tvar ex C.ExceptionInfo\n\t\tC.GetExceptionInfo(&ex)\n\t\tdefer C.DestroyExceptionInfo(&ex)\n\t\tres := C.bridge_image_rect_func(f, i.image, rect, &ex)\n\t\treturn checkImage(res, nil, &ex, what)\n\t})\n}\n\nfunc (im *Image) applyFunc(what string, f C.ImageFunc) (*Image, error) {\n\treturn im.Apply(func(i *Image) (*Image, error) {\n\t\tvar ex C.ExceptionInfo\n\t\tC.GetExceptionInfo(&ex)\n\t\tdefer C.DestroyExceptionInfo(&ex)\n\t\tres := C.bridge_image_func(f, i.image, &ex)\n\t\treturn checkImage(res, nil, &ex, what)\n\t})\n}\n\nfunc (im *Image) fn(what string, f C.ImageFunc) (*Image, error) {\n\tvar ex C.ExceptionInfo\n\tC.GetExceptionInfo(&ex)\n\tdefer C.DestroyExceptionInfo(&ex)\n\tres := C.bridge_image_func(f, im.image, &ex)\n\treturn checkImage(res, nil, &ex, what)\n}\n\n\nThen, in Go code I can do stuff like:\n\n\nfunc (im *Image) Chop(r Rect) (*Image, error) {\n\treturn im.applyRectFunc(r, \"chopping\", C.ImageRectFunc(C.ChopImage))\n}\n\nfunc (im *Image) Coalesce() (*Image, error) {\n\treturn im.fn(\"coalescing\", C.ImageFunc(C.CoalesceImages))\n}\n\nfunc (im *Image) Crop(r Rect) (*Image, error) {\n\treturn im.applyRectFunc(r, \"cropping\", C.ImageRectFunc(C.CropImage))\n}\n\nfunc (im *Image) Deconstruct() (*Image, error) {\n\treturn im.fn(\"deconstructing\", C.ImageFunc(C.DeconstructImages))\n}\n\nfunc (im *Image) Extent(r Rect) (*Image, error) {\n\treturn im.applyRectFunc(r, \"extenting\", C.ImageRectFunc(C.ExtentImage))\n}\n\nfunc (im *Image) Flatten() (*Image, error) {\n\treturn im.fn(\"flattening\", C.ImageFunc(C.FlattenImages))\n}\n\nfunc (im *Image) Flip() (*Image, error) {\n\treturn im.applyFunc(\"flipping\", C.ImageFunc(C.FlipImage))\n}\n\n\nOf course, if this patch gets accepted I'd really like to add support for calling C function pointers from Go code, which would also eliminate the need to generate bridge functions for every C function called from Go (take a look at *.cgo2.c files in $WORK directory after go build -work in a package that uses cgo).\n\nRegards,\nAlberto",
			"disapproval": false,
			"date": "2013-05-31 12:56:21.652220",
			"approval": false
		},
		{
			"sender": "alberto.garcia.hierro@gmail.com",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"fullung@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Ping",
			"disapproval": false,
			"date": "2013-07-18 21:46:25.280020",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"fullung@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This looks good, and it's great that misc/cgo/test continues to pass, but it already passes without this CL. Put please add a test of the new functionality.",
			"disapproval": false,
			"date": "2013-08-01 18:15:23.143680",
			"approval": false
		},
		{
			"sender": "alberto.garcia.hierro@gmail.com",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"fullung@gmail.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/01 18:15:23, rsc wrote:\n> This looks good, and it's great that misc/cgo/test continues to pass, but it\n> already passes without this CL. Put please add a test of the new functionality.\n\nI've just added a test. PTAL.\n\nRegards,\nAlberto",
			"disapproval": false,
			"date": "2013-08-02 12:22:45.890730",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"fullung@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It seems appropriate to add a sentence or two to doc.go about this, e.g., in the section on implementation details.",
			"disapproval": false,
			"date": "2013-08-07 14:27:58.038240",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"fullung@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9835047/diff/19001/misc/cgo/test/fpvar.go\nFile misc/cgo/test/fpvar.go (right):\n\nhttps://codereview.appspot.com/9835047/diff/19001/misc/cgo/test/fpvar.go#newcode1\nmisc/cgo/test/fpvar.go:1: package cgotest\nThis new file needs a 2013 copyright header.\n\nhttps://codereview.appspot.com/9835047/diff/19001/misc/cgo/test/fpvar.go#newcode9\nmisc/cgo/test/fpvar.go:9: return f();\nMay as well indent by a tab here and below, to match the other C code.\n\nhttps://codereview.appspot.com/9835047/diff/19001/misc/cgo/test/fpvar.go#newcode34\nmisc/cgo/test/fpvar.go:34: t.Errorf(\"want %d, got %d\", expected, r1)\nGo tests generally do \"got %d, want %d\", please switch these.\n\nhttps://codereview.appspot.com/9835047/diff/19001/src/cmd/cgo/out.go\nFile src/cmd/cgo/out.go (right):\n\nhttps://codereview.appspot.com/9835047/diff/19001/src/cmd/cgo/out.go#newcode124\nsrc/cmd/cgo/out.go:124: panic(fmt.Errorf(\"Invalid var kind %q\", n.Kind))\ns/Invalid/invalid/",
			"disapproval": false,
			"date": "2013-08-07 14:19:46.427120",
			"approval": false
		},
		{
			"sender": "alberto.garcia.hierro@gmail.com",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"fullung@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi Ian,\n\nThanks for the review. I've added the changes you suggested, as well as a couple of sentences and an example in doc.go (in the section that gets shown in golang.org/cmd/cgo).\n\nRegards,\nAlberto",
			"disapproval": false,
			"date": "2013-08-07 17:12:39.938610",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"fullung@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nPlease wait for rsc.\n\nhttps://codereview.appspot.com/9835047/diff/28001/misc/cgo/test/fpvar.go\nFile misc/cgo/test/fpvar.go (right):\n\nhttps://codereview.appspot.com/9835047/diff/28001/misc/cgo/test/fpvar.go#newcode5\nmisc/cgo/test/fpvar.go:5: // This file contains test cases for cgo.\nPlease change this comment to\n\n// This file contains test cases for cgo with function pointer variables.",
			"disapproval": false,
			"date": "2013-08-07 17:22:02.468790",
			"approval": true
		},
		{
			"sender": "alberto.garcia.hierro@gmail.com",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"fullung@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/08/07 17:22:02, iant wrote:\n> LGTM\n> \n> Please wait for rsc.\n> \n> https://codereview.appspot.com/9835047/diff/28001/misc/cgo/test/fpvar.go\n> File misc/cgo/test/fpvar.go (right):\n> \n> https://codereview.appspot.com/9835047/diff/28001/misc/cgo/test/fpvar.go#newcode5\n> misc/cgo/test/fpvar.go:5: // This file contains test cases for cgo.\n> Please change this comment to\n> \n> // This file contains test cases for cgo with function pointer variables.\n\nThanks! I've just updated the patch set.\n\nRegards,\nAlberto",
			"disapproval": false,
			"date": "2013-08-07 20:30:08.960650",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"fullung@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-08-13 16:42:10.997140",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"alberto.garcia.hierro@gmail.com",
				"golang-dev@googlegroups.com",
				"minux.ma@gmail.com",
				"fullung@gmail.com",
				"rsc@golang.org",
				"iant@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=abd44d99e4cf ***\n\ncmd/cgo: Add support for C function pointers\n\n* Add a new kind of Name, \"fpvar\" which stands for function pointer variable\n* When walking the AST, find functions used as expressions and create a new Name object for them\n* Track functions which are only used in expr contexts, and avoid generating bridge code for them\n\nR=golang-dev, minux.ma, fullung, rsc, iant\nCC=golang-dev\nhttps://codereview.appspot.com/9835047\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2013-08-13 16:42:24.860410",
			"approval": false
		}
	],
	"owner_email": "alberto.garcia.hierro@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "Hierro",
	"subject": "code review 9835047: cmd/cgo: Add support for C function pointers",
	"created": "2013-05-31 11:09:01.049590",
	"patchsets": [
		1,
		2001,
		2002,
		14001,
		19001,
		28001,
		34001
	],
	"modified": "2013-08-14 09:11:36.347210",
	"closed": true,
	"issue": 9835047
}