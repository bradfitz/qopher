{
	"description": "Printing error messages in packages is unsafe.\n\nPreface: I am not nearly sure that 100% of the code changes\nhere are what should be committed; error returns, logging,\nor possibly calls to panic() might be appropriate.  But\nbest to offer something to start with and I think most of\nthe print statements can safely be deleted, so I've raised\na CL and not merely opened an issue.\n\nI found three files in the net package which print to\nstandard error or standard output.  The standard output\nprinting looks like it might be left over debugging code,\nbut the standard error printing is for definite errors.\n\nThe problem is that a Go package like a C library may not\nassume that file descriptor 2 is still standard error or\nthat file descriptor 1 is still standard output.  Any time\nany of the print statements is executed it's an invitation\nto subtle data corruption, particularly given the required\nUnix semantics of open() returning the lowest unused file\ndescriptor.\n\nI have deleted all the print statements except one which\nI turned into a panic().  As noted earlier, I am NOT\nsaying that these are necessarily the best actions, but\nthey're a place to start.\n\nRuss -- I suggested you as reviewer as you've touched these\nfiles and indeed had a TODO in one of them. Of course if\nanyone else wants to review them instead, no problemo.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> I haven't looked at them. I was making a general point.\n> However, the answer to your question is \"yes\" if the\n> problem is recoverable. \u00a0I don't want to encourage people\n> to think about wrapping libraries with recovery blocks\n> to contain problems that are not intrinsically fatal.\n\nIt's not recoverable.  Any of these means that there is\nsome fatal flaw in the networking code and your program\nis not going to be able to do network I/O ever again.\n\nRuss\n",
			"disapproval": false,
			"date": "2010-06-03 17:55:16.707187",
			"approval": false
		},
		{
			"sender": "giles.lean@pobox.com",
			"recipients": [
				"giles.lean@pobox.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change.",
			"disapproval": false,
			"date": "2010-06-03 05:51:08.213872",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"giles.lean@pobox.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I agree that writing to standard output or standard error isn't great.\nThe ones I tagged below are important, though: they're all things\nthat \"can't happen\" and when they do the program just mysteriously\nhangs.  Better to print something first.  Feel free to change them to\npanics, which will crash the program but at least go to standard error.\n\nhttp://codereview.appspot.com/1500041/diff/2001/3002\nFile src/pkg/net/fd.go (left):\n\nhttp://codereview.appspot.com/1500041/diff/2001/3002#oldcode241\nsrc/pkg/net/fd.go:241: print(\"pollServer WaitFD: \", err.String(), \"\\n\")\npanic\n\nhttp://codereview.appspot.com/1500041/diff/2001/3002#oldcode264\nsrc/pkg/net/fd.go:264: print(\"pollServer: unexpected wakeup for fd=\", netfd, \" mode=\", string(mode), \"\\n\")\npanic\n\nhttp://codereview.appspot.com/1500041/diff/2001/3003\nFile src/pkg/net/fd_linux.go (left):\n\nhttp://codereview.appspot.com/1500041/diff/2001/3003#oldcode70\nsrc/pkg/net/fd_linux.go:70: print(\"Epoll unexpected fd=\", fd, \"\\n\")\npanic\n\nhttp://codereview.appspot.com/1500041/diff/2001/3003#oldcode89\nsrc/pkg/net/fd_linux.go:89: print(\"Epoll modify fd=\", fd, \": \", os.Errno(e).String(), \"\\n\")\npanic\n\nhttp://codereview.appspot.com/1500041/diff/2001/3003#oldcode94\nsrc/pkg/net/fd_linux.go:94: print(\"Epoll delete fd=\", fd, \": \", os.Errno(e).String(), \"\\n\")\npanic",
			"disapproval": false,
			"date": "2010-06-03 07:10:31.514726",
			"approval": false
		},
		{
			"sender": "giles.lean@pobox.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nrsc@google.com wrote:\n\n> I agree that writing to standard output or standard error\n> isn't great.  The ones I tagged below are important, though:\n> they're all things that \"can't happen\" and when they do the\n> program just mysteriously hangs.  Better to print something\n> first.  Feel free to change them to panics, which will crash\n> the program but at least go to standard error.\n\nOK. Do we state anywhere that panic will write to standard\nerror?  I don't see anything explicit in the language\nspecification, although there are TODOs still there and it's\nclear the documentation isn't finished.  I think I'll raise\nan issue, so that it does end up being documented:\n\n  http://code.google.com/p/go/issues/detail?id=831\n\nAs that's pretty much hard wired into the language now we\nprobably should, and so have something to point to if an\napplication programmer is overly causal with file descriptor 2.\n\nLook for PTAL email shortly for the CL.\n\nGiles\n",
			"disapproval": false,
			"date": "2010-06-03 11:00:11.047560",
			"approval": false
		},
		{
			"sender": "giles.lean@pobox.com",
			"recipients": [
				"giles.lean@pobox.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2010-06-03 11:16:53.415353",
			"approval": false
		},
		{
			"sender": "giles.lean@pobox.com",
			"recipients": [
				"giles.lean@pobox.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/1500041/diff/2001/3002\nFile src/pkg/net/fd.go (left):\n\nhttp://codereview.appspot.com/1500041/diff/2001/3002#oldcode241\nsrc/pkg/net/fd.go:241: print(\"pollServer WaitFD: \", err.String(), \"\\n\")\nOn 2010/06/03 07:10:32, rsc1 wrote:\n> panic\n> \n\nDone.\n\nhttp://codereview.appspot.com/1500041/diff/2001/3002#oldcode264\nsrc/pkg/net/fd.go:264: print(\"pollServer: unexpected wakeup for fd=\", netfd, \" mode=\", string(mode), \"\\n\")\nOn 2010/06/03 07:10:32, rsc1 wrote:\n> panic\n> \n\nDone.\n\nhttp://codereview.appspot.com/1500041/diff/2001/3003\nFile src/pkg/net/fd_linux.go (left):\n\nhttp://codereview.appspot.com/1500041/diff/2001/3003#oldcode70\nsrc/pkg/net/fd_linux.go:70: print(\"Epoll unexpected fd=\", fd, \"\\n\")\nOn 2010/06/03 07:10:32, rsc1 wrote:\n> panic\n> \n\nDone.\n\nhttp://codereview.appspot.com/1500041/diff/2001/3003#oldcode89\nsrc/pkg/net/fd_linux.go:89: print(\"Epoll modify fd=\", fd, \": \", os.Errno(e).String(), \"\\n\")\nOn 2010/06/03 07:10:32, rsc1 wrote:\n> panic\n> \n\nDone.\n\nhttp://codereview.appspot.com/1500041/diff/2001/3003#oldcode94\nsrc/pkg/net/fd_linux.go:94: print(\"Epoll delete fd=\", fd, \": \", os.Errno(e).String(), \"\\n\")\nOn 2010/06/03 07:10:32, rsc1 wrote:\n> panic\n> \n\nDone.",
			"disapproval": false,
			"date": "2010-06-03 11:16:58.162928",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "As a rule, I believe libraries shouldn't panic once they're established and running unless the problem is a fundamental failure.   A mere OS error is not enough, and errors due to user-supplied data definitely not.  There are too many panics in the library already.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2010-06-03 16:10:15.899947",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Jun 3, 2010 at 09:10, Rob 'Commander' Pike <r@google.com> wrote:\n> As a rule, I believe libraries shouldn't panic once they're established and running unless the problem is a fundamental failure. \u00a0 A mere OS error is not enough, and errors due to user-supplied data definitely not. \u00a0There are too many panics in the library already.\n\nThese are not mere OS errors, nor user-supplied data.\nThis is the networking system falling over or otherwise\nmisbehaving.\n\nWould you prefer to leave them as prints?\n\nRuss\n",
			"disapproval": false,
			"date": "2010-06-03 17:11:57.075159",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Jun 3, 2010, at 10:11 AM, Russ Cox wrote:\n\n> On Thu, Jun 3, 2010 at 09:10, Rob 'Commander' Pike <r@google.com> wrote:\n>> As a rule, I believe libraries shouldn't panic once they're established and running unless the problem is a fundamental failure.   A mere OS error is not enough, and errors due to user-supplied data definitely not.  There are too many panics in the library already.\n> \n> These are not mere OS errors, nor user-supplied data.\n> This is the networking system falling over or otherwise\n> misbehaving.\n> \n> Would you prefer to leave them as prints?\n\nI haven't looked at them. I was making a general point.  However, the answer to your question is \"yes\" if the problem is recoverable.  I don't want to encourage people to think about wrapping libraries with recovery blocks to contain problems that are not intrinsically fatal.\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2010-06-03 17:40:11.587014",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"giles.lean@pobox.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "deferring; created issue 994.",
			"disapproval": false,
			"date": "2010-08-03 20:19:40.316928",
			"approval": false
		}
	],
	"owner_email": "giles.lean@pobox.com",
	"private": false,
	"base_url": "",
	"owner": "giles",
	"subject": "code review 1500041: Printing error messages in packages is unsafe.",
	"created": "2010-06-03 05:03:01.885579",
	"patchsets": [
		1,
		2001,
		8001
	],
	"modified": "2010-08-03 20:19:40.317130",
	"closed": false,
	"issue": 1500041
}