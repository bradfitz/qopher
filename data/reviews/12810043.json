{
	"description": "database/sql: add a disabled broken test\n\nUpdate issue 6081",
	"cc": [
		"golang-dev@googlegroups.com",
		"gri@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping.  anybody?\r\n\r\nIt's just a new test, and it's disabled.\r\n\r\n\r\n\r\nOn Mon, Aug 12, 2013 at 2:56 PM, <bradfitz@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> database/sql: add a disabled broken test\r\n>\r\n> Update issue 6081\r\n>\r\n> Please review this at https://codereview.appspot.**com/12810043/<https://codereview.appspot.com/12810043/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/database/sql/sql.go\r\n>   M src/pkg/database/sql/sql_test.**go\r\n>\r\n>\r\n> Index: src/pkg/database/sql/sql.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/database/sql/sql.go\r\n> +++ b/src/pkg/database/sql/sql.go\r\n> @@ -1372,6 +1372,8 @@\r\n>         return nil\r\n>  }\r\n>\r\n> +var rowsCloseHook func(*Rows, *error)\r\n> +\r\n>  // Close closes the Rows, preventing further enumeration. If the\r\n>  // end is encountered, the Rows are closed automatically. Close\r\n>  // is idempotent.\r\n> @@ -1381,6 +1383,9 @@\r\n>         }\r\n>         rs.closed = true\r\n>         err := rs.rowsi.Close()\r\n> +       if fn := rowsCloseHook; fn != nil {\r\n> +               fn(rs, &err)\r\n> +       }\r\n>         if rs.closeStmt != nil {\r\n>                 rs.closeStmt.Close()\r\n>         }\r\n> Index: src/pkg/database/sql/sql_test.**go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/database/sql/sql_**test.go\r\n> +++ b/src/pkg/database/sql/sql_**test.go\r\n> @@ -5,6 +5,7 @@\r\n>  package sql\r\n>\r\n>  import (\r\n> +       \"database/sql/driver\"\r\n>         \"fmt\"\r\n>         \"reflect\"\r\n>         \"runtime\"\r\n> @@ -1110,6 +1111,52 @@\r\n>         wg.Wait()\r\n>  }\r\n>\r\n> +func TestIssue6081(t *testing.T) {\r\n> +       t.Skip(\"known broken test\")\r\n> +       db := newTestDB(t, \"people\")\r\n> +       defer closeDB(t, db)\r\n> +\r\n> +       drv := db.driver.(*fakeDriver)\r\n> +       drv.mu.Lock()\r\n> +       opens0 := drv.openCount\r\n> +       closes0 := drv.closeCount\r\n> +       drv.mu.Unlock()\r\n> +\r\n> +       stmt, err := db.Prepare(\"SELECT|people|**name|\")\r\n> +       if err != nil {\r\n> +               t.Fatal(err)\r\n> +       }\r\n> +       rowsCloseHook = func(rows *Rows, err *error) {\r\n> +               *err = driver.ErrBadConn\r\n> +       }\r\n> +       defer func() { rowsCloseHook = nil }()\r\n> +       for i := 0; i < 10; i++ {\r\n> +               rows, err := stmt.Query()\r\n> +               if err != nil {\r\n> +                       t.Fatal(err)\r\n> +               }\r\n> +               rows.Close()\r\n> +       }\r\n> +       if n := len(stmt.css); n > 1 {\r\n> +               t.Errorf(\"len(css slice) = %d; want <= 1\", n)\r\n> +       }\r\n> +       stmt.Close()\r\n> +       if n := len(stmt.css); n != 0 {\r\n> +               t.Errorf(\"len(css slice) after Close = %d; want 0\", n)\r\n> +       }\r\n> +\r\n> +       drv.mu.Lock()\r\n> +       opens := drv.openCount - opens0\r\n> +       closes := drv.closeCount - closes0\r\n> +       drv.mu.Unlock()\r\n> +       if opens < 9 {\r\n> +               t.Errorf(\"opens = %d; want >= 9\", opens)\r\n> +       }\r\n> +       if closes < 9 {\r\n> +               t.Errorf(\"closes = %d; want >= 9\", closes)\r\n> +       }\r\n> +}\r\n> +\r\n>  func TestConcurrency(t *testing.T) {\r\n>         manyConcurrentQueries(t)\r\n>  }\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-08-13 14:42:20.728370",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-08-12 21:56:17.513580",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-08-13 21:49:00.560650",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=478fdd871e70 ***\n\ndatabase/sql: add a disabled broken test\n\nUpdate issue 6081\n\nR=golang-dev, gri\nCC=golang-dev\nhttps://codereview.appspot.com/12810043",
			"disapproval": false,
			"date": "2013-08-13 21:56:42.876350",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 12810043: database/sql: add a disabled broken test",
	"created": "2013-08-12 21:55:58.921050",
	"patchsets": [
		1,
		3001,
		6001,
		11001
	],
	"modified": "2013-08-13 22:19:59.788300",
	"closed": true,
	"issue": 12810043
}