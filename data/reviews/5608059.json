{
	"description": "build: dist-based build for Plan 9",
	"cc": [
		"rsc@golang.org",
		"iant@golang.org",
		"iant@google.com",
		"seed@mail.nanosouffle.net",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "seed@mail.nanosouffle.net",
			"recipients": [
				"ality@pbrane.org",
				"rsc@golang.org",
				"iant@golang.org",
				"iant@google.com",
				"seed@mail.nanosouffle.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Beyond that, we will get \"mixed ansi/old function declaration\" errors upon compiling buildgc.c, if we don't comment out the `#include <stdio.h>' in that file.\n\nhttp://codereview.appspot.com/5608059/diff/4015/src/cmd/dist/plan9.c\nFile src/cmd/dist/plan9.c (right):\n\nhttp://codereview.appspot.com/5608059/diff/4015/src/cmd/dist/plan9.c#newcode18\nsrc/cmd/dist/plan9.c:18: \nneed to delcare `char *hostchar;'",
			"disapproval": false,
			"date": "2012-02-05 11:05:36.109905",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"rsc@golang.org",
				"iant@golang.org",
				"iant@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, iant@golang.org, iant@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-05 04:44:41.264892",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"ality@pbrane.org",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FYI\n\nhttp://codereview.appspot.com/5608059/diff/3/src/cmd/dist/a.h\nFile src/cmd/dist/a.h (right):\n\nhttp://codereview.appspot.com/5608059/diff/3/src/cmd/dist/a.h#newcode13\nsrc/cmd/dist/a.h:13: #define USED(x) if(x){}else{}\nA better way to cleanly swallow exactly one semicolon would be to write\n#define USED(x) do{x;}while(0)\n\nhttp://codereview.appspot.com/5608059/diff/3/src/cmd/dist/goc2c.c\nFile src/cmd/dist/goc2c.c (right):\n\nhttp://codereview.appspot.com/5608059/diff/3/src/cmd/dist/goc2c.c#newcode574\nsrc/cmd/dist/goc2c.c:574: goto out;\nWhat is the point of this change?",
			"disapproval": false,
			"date": "2012-02-04 04:17:59.738869",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/5608059/diff/3019/src/cmd/dist/a.h\nFile src/cmd/dist/a.h (right):\n\nhttps://codereview.appspot.com/5608059/diff/3019/src/cmd/dist/a.h#newcode11\nsrc/cmd/dist/a.h:11: #ifdef PLAN9\nOn 2012/02/04 06:52:56, rsc wrote:\n> Sorry, but a.h must not include any other headers.\n> That's how we make sure the non-os files are not \n> accidentally using non-portable functionality.\n> \n> The only change this file should need is\n> #ifndef PLAN9 / #endif around the #define USED.\n> \n> In plan9.c, you should be able to do:\n> \n> #include <u.h>\n> #include <libc.h>\n> #undef nil\n> #undef nelem\n> #include \"a.h\"\n\nDone.\n\nhttps://codereview.appspot.com/5608059/diff/3019/src/cmd/dist/arg.h\nFile src/cmd/dist/arg.h (right):\n\nhttps://codereview.appspot.com/5608059/diff/3019/src/cmd/dist/arg.h#newcode29\nsrc/cmd/dist/arg.h:29: #ifndef PLAN9\nOn 2012/02/04 06:52:56, rsc wrote:\n> Drop.\n\nDone and fixed some warnings.\n\nhttps://codereview.appspot.com/5608059/diff/3019/src/cmd/dist/goc2c.c\nFile src/cmd/dist/goc2c.c (right):\n\nhttps://codereview.appspot.com/5608059/diff/3019/src/cmd/dist/goc2c.c#newcode574\nsrc/cmd/dist/goc2c.c:574: goto out;\nOn 2012/02/04 06:52:56, rsc wrote:\n> Please introduce braces instead of a goto.\n\nDone.\n\nhttps://codereview.appspot.com/5608059/diff/3019/src/cmd/dist/plan9.c\nFile src/cmd/dist/plan9.c (right):\n\nhttps://codereview.appspot.com/5608059/diff/3019/src/cmd/dist/plan9.c#newcode719\nsrc/cmd/dist/plan9.c:719: #endif // __WINDOWS__\nOn 2012/02/04 06:52:56, rsc wrote:\n> PLAN9\n\nDone.\n\nhttps://codereview.appspot.com/5608059/diff/3019/src/cmd/dist/unix.c\nFile src/cmd/dist/unix.c (right):\n\nhttps://codereview.appspot.com/5608059/diff/3019/src/cmd/dist/unix.c#newcode273\nsrc/cmd/dist/unix.c:273: if(getcwd(buf, sizeof buf) == nil)\nOn 2012/02/04 06:52:56, rsc wrote:\n> Revert all changes to this file.\n\nMostly done.  Could we keep the changes down below\nin main?  Using #if and #elif confuses the Plan 9\ncompiler since it sees the #endif and thinks it belongs to\nthe #ifndef PLAN9 at the top.\n\nI figured we're already calling uname to get the\narchitecture.",
			"disapproval": false,
			"date": "2012-02-04 07:23:13.787248",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/5608059/diff/5022/src/cmd/dist/goc2c.c\nFile src/cmd/dist/goc2c.c (right):\n\nhttps://codereview.appspot.com/5608059/diff/5022/src/cmd/dist/goc2c.c#newcode573\nsrc/cmd/dist/goc2c.c:573: if (rets != nil) {\nOn 2012/02/04 07:39:37, rsc wrote:\n> Please revert this rewrite and then edit just the two lines:\n> \n> if (rets == nil)\n>     ;\n> \n> to:\n> \n> if (rets == nil) {\n>     // nothing to do\n> }\n> \n> No other lines need to change.\n\nDone.\n\nhttps://codereview.appspot.com/5608059/diff/5022/src/cmd/dist/plan9.c\nFile src/cmd/dist/plan9.c (right):\n\nhttps://codereview.appspot.com/5608059/diff/5022/src/cmd/dist/plan9.c#newcode28\nsrc/cmd/dist/plan9.c:28: vsnprint(buf, sizeof buf, fmt, arg);\nOn 2012/02/04 07:39:37, rsc wrote:\n> This isn't okay, because Plan 9's formats and stdio's are different.\n> Please #include <stdio.h> and then use printf throughout here.\n\nDone. I changed fatal to call errstr since we can't use\nthe \"r\" format in stdio print functions. The only place\nI kept the Plan 9 style print is in genrun right before\nthe exec.\n\nhttps://codereview.appspot.com/5608059/diff/5022/src/cmd/dist/plan9.c#newcode155\nsrc/cmd/dist/plan9.c:155: binit(&b1);\nOn 2012/02/04 07:39:37, rsc wrote:\n> Please put all the binit in one block here and \n> all the bfree in one block at the bottom of the function; see README.\n\nDone.\n\nhttps://codereview.appspot.com/5608059/diff/5022/src/cmd/dist/plan9.c#newcode160\nsrc/cmd/dist/plan9.c:160: argv0 = btake(&b1);\nOn 2012/02/04 07:39:37, rsc wrote:\n> I don't understand why this code edits argv0 and then never uses it.\n> I suspect this should be\n> \n> free(argv->p[0]);\n> argv->p[0] = xstrdup(bstr(&b1));\n\nDone. This was some stale code from a previous edit.\n\nhttps://codereview.appspot.com/5608059/diff/5022/src/cmd/dist/plan9.c#newcode285\nsrc/cmd/dist/plan9.c:285: fd = open(\".\", 0);\nOn 2012/02/04 07:39:37, rsc wrote:\n> I can't follow what's going on here.  I think this should be\n> \n> fd = open(path, OREAD);\n> if(fd2path(fd, buf, sizeof buf) < 0)\n>      fatal(\"fdpath: %r\");\n> close(fd);\n> breset(b);\n> bwritestr(b, buf);\n\nDone.\n\nhttps://codereview.appspot.com/5608059/diff/5022/src/cmd/dist/plan9.c#newcode340\nsrc/cmd/dist/plan9.c:340: return (Time)t*1000000000LL;\nOn 2012/02/04 07:39:37, rsc wrote:\n> (Time)t is fine.\n\nDone.\n\nhttps://codereview.appspot.com/5608059/diff/5022/src/cmd/dist/plan9.c#newcode385\nsrc/cmd/dist/plan9.c:385: fd = open(p, OREAD);\nOn 2012/02/04 07:39:37, rsc wrote:\n> Seems like a lot of work.  Why not do\n> \n> if(isdir(p))\n>     return;\n> fd = create(p, OREAD, 0777|DMDIR);\n> close(fd);\n> if(fd < 0)\n>     fatal(\"mkdir %s: %r\", p);\n> \n> (and that's it)\n\nDone.\n\nhttps://codereview.appspot.com/5608059/diff/5022/src/cmd/dist/plan9.c#newcode488\nsrc/cmd/dist/plan9.c:488: fd = create(bstr(&b), OREAD, 0700|DMDIR);\nOn 2012/02/04 07:39:37, rsc wrote:\n> OREAD|OEXCL\n\nDone.\n\nhttps://codereview.appspot.com/5608059/diff/5022/src/cmd/dist/plan9.c#newcode662\nsrc/cmd/dist/plan9.c:662: int\nOn 2012/02/04 07:39:37, rsc wrote:\n> Plan 9 main should be void.\n\nDone.\n\nhttps://codereview.appspot.com/5608059/diff/5022/src/cmd/dist/plan9.c#newcode672\nsrc/cmd/dist/plan9.c:672: if(hassuffix(p, \"bin/tool/dist\")) {\nOn 2012/02/04 07:39:37, rsc wrote:\n> Delete.\n> default_goroot is now handled elsewhere.\n\nDone.\n\nhttps://codereview.appspot.com/5608059/diff/5022/src/cmd/dist/plan9.c#newcode686\nsrc/cmd/dist/plan9.c:686: rfork(RFENVG);\nOn 2012/02/04 07:39:37, rsc wrote:\n> If this is important (and it probably is), it should be the first thing main\n> does.\n\nDone.\n\nhttps://codereview.appspot.com/5608059/diff/5022/src/cmd/dist/plan9.c#newcode692\nsrc/cmd/dist/plan9.c:692: return 0;\nOn 2012/02/04 07:39:37, rsc wrote:\n> exits(nil);\n\nDone.\n\nhttps://codereview.appspot.com/5608059/diff/5022/src/run.rc\nFile src/run.rc (right):\n\nhttps://codereview.appspot.com/5608059/diff/5022/src/run.rc#newcode32\nsrc/run.rc:32: fn xcd {\nOn 2012/02/04 07:39:37, rsc wrote:\n> Please delete here through 106.  As these get converted\n> to be bash free we can add them back.\n\nDone.",
			"disapproval": false,
			"date": "2012-02-04 08:43:35.831293",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-02-04 03:42:04.906815",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"ality@pbrane.org",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't think you need pcc for this anymore.\nYou should be able to write a single plan9.c\nthat is separate from unix.c (does not depend\non linking unix.c in too), and plan9.c just has\nto include stdio.h.\n\nI think that will be easier than trying to balance\nplan9 customizations in unix.c.  The point\nof having the single os-specific file is to have\na single os-specific file.\n\nhttp://codereview.appspot.com/5608059/diff/3/src/cmd/dist/a.h\nFile src/cmd/dist/a.h (right):\n\nhttp://codereview.appspot.com/5608059/diff/3/src/cmd/dist/a.h#newcode13\nsrc/cmd/dist/a.h:13: #define USED(x) if(x){}else{}\nDelete.  The compiler knows what USED means.",
			"disapproval": false,
			"date": "2012-02-04 04:41:12.777271",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"ality@pbrane.org",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Getting there.\n\nhttps://codereview.appspot.com/5608059/diff/5022/src/cmd/dist/goc2c.c\nFile src/cmd/dist/goc2c.c (right):\n\nhttps://codereview.appspot.com/5608059/diff/5022/src/cmd/dist/goc2c.c#newcode573\nsrc/cmd/dist/goc2c.c:573: if (rets != nil) {\nPlease revert this rewrite and then edit just the two lines:\n\nif (rets == nil)\n    ;\n\nto:\n\nif (rets == nil) {\n    // nothing to do\n}\n\nNo other lines need to change.\n\nhttps://codereview.appspot.com/5608059/diff/5022/src/cmd/dist/plan9.c\nFile src/cmd/dist/plan9.c (right):\n\nhttps://codereview.appspot.com/5608059/diff/5022/src/cmd/dist/plan9.c#newcode28\nsrc/cmd/dist/plan9.c:28: vsnprint(buf, sizeof buf, fmt, arg);\nThis isn't okay, because Plan 9's formats and stdio's are different.\nPlease #include <stdio.h> and then use printf throughout here.\n\nhttps://codereview.appspot.com/5608059/diff/5022/src/cmd/dist/plan9.c#newcode155\nsrc/cmd/dist/plan9.c:155: binit(&b1);\nPlease put all the binit in one block here and \nall the bfree in one block at the bottom of the function; see README.\n\nhttps://codereview.appspot.com/5608059/diff/5022/src/cmd/dist/plan9.c#newcode160\nsrc/cmd/dist/plan9.c:160: argv0 = btake(&b1);\nI don't understand why this code edits argv0 and then never uses it.\nI suspect this should be\n\nfree(argv->p[0]);\nargv->p[0] = xstrdup(bstr(&b1));\n\nhttps://codereview.appspot.com/5608059/diff/5022/src/cmd/dist/plan9.c#newcode285\nsrc/cmd/dist/plan9.c:285: fd = open(\".\", 0);\nI can't follow what's going on here.  I think this should be\n\nfd = open(path, OREAD);\nif(fd2path(fd, buf, sizeof buf) < 0)\n     fatal(\"fdpath: %r\");\nclose(fd);\nbreset(b);\nbwritestr(b, buf);\n\nhttps://codereview.appspot.com/5608059/diff/5022/src/cmd/dist/plan9.c#newcode340\nsrc/cmd/dist/plan9.c:340: return (Time)t*1000000000LL;\n(Time)t is fine.\n\nhttps://codereview.appspot.com/5608059/diff/5022/src/cmd/dist/plan9.c#newcode385\nsrc/cmd/dist/plan9.c:385: fd = open(p, OREAD);\nSeems like a lot of work.  Why not do\n\nif(isdir(p))\n    return;\nfd = create(p, OREAD, 0777|DMDIR);\nclose(fd);\nif(fd < 0)\n    fatal(\"mkdir %s: %r\", p);\n\n(and that's it)\n\nhttps://codereview.appspot.com/5608059/diff/5022/src/cmd/dist/plan9.c#newcode488\nsrc/cmd/dist/plan9.c:488: fd = create(bstr(&b), OREAD, 0700|DMDIR);\nOREAD|OEXCL\n\nhttps://codereview.appspot.com/5608059/diff/5022/src/cmd/dist/plan9.c#newcode662\nsrc/cmd/dist/plan9.c:662: int\nPlan 9 main should be void.\n\nhttps://codereview.appspot.com/5608059/diff/5022/src/cmd/dist/plan9.c#newcode672\nsrc/cmd/dist/plan9.c:672: if(hassuffix(p, \"bin/tool/dist\")) {\nDelete.\ndefault_goroot is now handled elsewhere.\n\nhttps://codereview.appspot.com/5608059/diff/5022/src/cmd/dist/plan9.c#newcode686\nsrc/cmd/dist/plan9.c:686: rfork(RFENVG);\nIf this is important (and it probably is), it should be the first thing main does.\n\nhttps://codereview.appspot.com/5608059/diff/5022/src/cmd/dist/plan9.c#newcode692\nsrc/cmd/dist/plan9.c:692: return 0;\nexits(nil);\n\nhttps://codereview.appspot.com/5608059/diff/5022/src/run.rc\nFile src/run.rc (right):\n\nhttps://codereview.appspot.com/5608059/diff/5022/src/run.rc#newcode32\nsrc/run.rc:32: fn xcd {\nPlease delete here through 106.  As these get converted\nto be bash free we can add them back.",
			"disapproval": false,
			"date": "2012-02-04 07:39:37.381231",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nI've changed to use native Plan 9 libraries instead of APE.\n\nThanks for the review.\n\nhttps://codereview.appspot.com/5608059/diff/3/src/cmd/dist/a.h\nFile src/cmd/dist/a.h (right):\n\nhttps://codereview.appspot.com/5608059/diff/3/src/cmd/dist/a.h#newcode13\nsrc/cmd/dist/a.h:13: #define USED(x) if(x){}else{}\nOn 2012/02/04 04:41:12, rsc wrote:\n> Delete.  The compiler knows what USED means.\n\nI had to do this a bit differently now that I'm not using\nAPE.  Please review.\n\nhttps://codereview.appspot.com/5608059/diff/3/src/cmd/dist/goc2c.c\nFile src/cmd/dist/goc2c.c (right):\n\nhttps://codereview.appspot.com/5608059/diff/3/src/cmd/dist/goc2c.c#newcode574\nsrc/cmd/dist/goc2c.c:574: goto out;\nOn 2012/02/04 04:18:00, iant wrote:\n> What is the point of this change?\n\nIt silences a warning from the Plan 9 compiler,\n\"empty if body\".",
			"disapproval": false,
			"date": "2012-02-04 06:38:22.125398",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"ality@pbrane.org",
				"rsc@golang.org",
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I didn't review the scripts yet; I am focusing on the C code.\n\nIf you find yourself making any significant changes \n(beyond introducing USED annotations or changing ; to {})\nto a file other than plan9.c, then please rethink.\nThe only file that you should need to write code in\nis plan9.c.\n\nThanks.\n\nhttps://codereview.appspot.com/5608059/diff/3019/src/cmd/dist/a.h\nFile src/cmd/dist/a.h (right):\n\nhttps://codereview.appspot.com/5608059/diff/3019/src/cmd/dist/a.h#newcode11\nsrc/cmd/dist/a.h:11: #ifdef PLAN9\nSorry, but a.h must not include any other headers.\nThat's how we make sure the non-os files are not \naccidentally using non-portable functionality.\n\nThe only change this file should need is\n#ifndef PLAN9 / #endif around the #define USED.\n\nIn plan9.c, you should be able to do:\n\n#include <u.h>\n#include <libc.h>\n#undef nil\n#undef nelem\n#include \"a.h\"\n\nhttps://codereview.appspot.com/5608059/diff/3019/src/cmd/dist/arg.h\nFile src/cmd/dist/arg.h (right):\n\nhttps://codereview.appspot.com/5608059/diff/3019/src/cmd/dist/arg.h#newcode29\nsrc/cmd/dist/arg.h:29: #ifndef PLAN9\nDrop.\n\nhttps://codereview.appspot.com/5608059/diff/3019/src/cmd/dist/goc2c.c\nFile src/cmd/dist/goc2c.c (right):\n\nhttps://codereview.appspot.com/5608059/diff/3019/src/cmd/dist/goc2c.c#newcode574\nsrc/cmd/dist/goc2c.c:574: goto out;\nPlease introduce braces instead of a goto.\n\nhttps://codereview.appspot.com/5608059/diff/3019/src/cmd/dist/plan9.c\nFile src/cmd/dist/plan9.c (right):\n\nhttps://codereview.appspot.com/5608059/diff/3019/src/cmd/dist/plan9.c#newcode719\nsrc/cmd/dist/plan9.c:719: #endif // __WINDOWS__\nPLAN9\n\nhttps://codereview.appspot.com/5608059/diff/3019/src/cmd/dist/unix.c\nFile src/cmd/dist/unix.c (right):\n\nhttps://codereview.appspot.com/5608059/diff/3019/src/cmd/dist/unix.c#newcode273\nsrc/cmd/dist/unix.c:273: if(getcwd(buf, sizeof buf) == nil)\nRevert all changes to this file.",
			"disapproval": false,
			"date": "2012-02-04 06:52:56.286394",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Feb 3, 2012 10:38 PM, <ality@pbrane.org> wrote:\n>\n> It silences a warning from the Plan 9 compiler,\n> \"empty if body\".\n\nI know you are working with an existing compiler, but that is a silly\nwarning.  There is nothing wrong with an empty if body if the next token is\n\"else\".\n\nIan\n",
			"disapproval": false,
			"date": "2012-02-04 19:29:57.268245",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'd like to postpone these Plan 9 CLs until after Go 1.\n\nThanks.\nRuss\n",
			"disapproval": false,
			"date": "2012-02-06 17:47:54.551077",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"rsc@golang.org",
				"iant@golang.org",
				"iant@google.com",
				"seed@mail.nanosouffle.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, iant@golang.org, iant@google.com, seed@mail.nanosouffle.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-12 13:31:39.427980",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"ality@pbrane.org",
				"rsc@golang.org",
				"iant@golang.org",
				"iant@google.com",
				"seed@mail.nanosouffle.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "looks good but for the include question\n\nhttp://codereview.appspot.com/5608059/diff/24002/src/cmd/dist/build.c\nFile src/cmd/dist/build.c (right):\n\nhttp://codereview.appspot.com/5608059/diff/24002/src/cmd/dist/build.c#newcode864\nsrc/cmd/dist/build.c:864: vadd(&compile, bpathf(&b, \"-I%s/include/plan9\", goroot));\nWhat is this about?  We don't have any such directory under goroot.\nSame question about next line.",
			"disapproval": false,
			"date": "2012-04-25 02:40:34.937940",
			"approval": false
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"rsc@golang.org",
				"iant@golang.org",
				"iant@google.com",
				"seed@mail.nanosouffle.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/5608059/diff/24002/src/cmd/dist/build.c\nFile src/cmd/dist/build.c (right):\n\nhttps://codereview.appspot.com/5608059/diff/24002/src/cmd/dist/build.c#newcode864\nsrc/cmd/dist/build.c:864: vadd(&compile, bpathf(&b, \"-I%s/include/plan9\", goroot));\nOn 2012/04/25 02:40:35, rsc wrote:\n> What is this about?  We don't have any such directory\n> under goroot. Same question about next line.\n\nWe do. I added it in January:\nhttps://codereview.appspot.com/5552056\n\nYou gave it a LGTM at the time.",
			"disapproval": false,
			"date": "2012-04-26 10:13:01.289943",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n",
			"disapproval": false,
			"date": "2012-05-02 01:51:21.696531",
			"approval": true
		},
		{
			"sender": "ality@pbrane.org",
			"recipients": [
				"ality@pbrane.org",
				"rsc@golang.org",
				"iant@golang.org",
				"iant@google.com",
				"seed@mail.nanosouffle.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=92c70c9b9d27 ***\n\nbuild: dist-based build for Plan 9\n\nR=rsc, iant, iant, seed\nCC=golang-dev\nhttp://codereview.appspot.com/5608059",
			"disapproval": false,
			"date": "2012-05-02 05:32:58.932059",
			"approval": false
		}
	],
	"owner_email": "ality@pbrane.org",
	"private": false,
	"base_url": "",
	"owner": "ality",
	"subject": "code review 5608059: build: dist-based build for Plan 9",
	"created": "2012-02-04 03:41:19.697677",
	"patchsets": [
		1,
		2001,
		3,
		3019,
		5022,
		7040,
		4015,
		11001,
		16001,
		24002,
		36001
	],
	"modified": "2012-05-02 05:33:02.035091",
	"closed": true,
	"issue": 5608059
}