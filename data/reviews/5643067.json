{
	"description": "net/http: add ServeContent\n\nFixes issue 2039",
	"cc": [
		"r@golang.org",
		"rsc@golang.org",
		"n13m3y3r@gmail.com",
		"r@google.com",
		"rogpeppe@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-09 03:12:39.317765",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 8, 2012 at 7:24 PM, <rsc@google.com> wrote:\n\n>\n> http://codereview.appspot.com/**5643067/diff/4003/src/pkg/net/**http/fs.go<http://codereview.appspot.com/5643067/diff/4003/src/pkg/net/http/fs.go>\n> File src/pkg/net/http/fs.go (right):\n>\n> http://codereview.appspot.com/**5643067/diff/4003/src/pkg/net/**\n> http/fs.go#newcode111<http://codereview.appspot.com/5643067/diff/4003/src/pkg/net/http/fs.go#newcode111>\n> src/pkg/net/http/fs.go:111: // If the content also has a Stat method,\n> use it to find the\n> The comment says nothing about this, and it seems magical\n> and potentially unwanted.  Handling this information is nice, but I'd\n> rather see something like\n>\n> func ServeContent(w ResponseWriter, req *Request, name string, mtime\n> time.Time, content io.ReadSeeker)\n>\n> And then the comment should say that it handles the\n> If-Modified-Since and also uses the file name to deduce\n> the MIME type, otherwise falling back to content.\n>\n\nPerfect.\n\n\n> The size can (and should) be gotten from the ReadSeeker.\n> If the seek to the end returns an error, a 500 seems fine.\n> If a ReadSeeker can't Seek, that's not our fault.\n>\n\nI was wondering about that and forgot to ask.  I like 500 in that case.\n\nAll that said, I really like how this is turning out.\n> It feels like the right primitive.\n>\n\nI think it made the code simpler, too.  Smaller pieces.\n\n\n> http://codereview.appspot.com/**5643067/diff/4003/src/pkg/net/**\n> http/fs.go#newcode158<http://codereview.appspot.com/5643067/diff/4003/src/pkg/net/http/fs.go#newcode158>\n> src/pkg/net/http/fs.go:158: ctype = \"text/plain; charset=utf-8\"\n> This should be DetectMIMEType or whatever we called the sniffer.\n\n\nThis is just code movement, but yes, this needs updating, and dsymonds\nagrees.  This just predates the sniffing.\n",
			"disapproval": false,
			"date": "2012-02-09 03:30:52.004303",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 8, 2012 at 22:30, Brad Fitzpatrick <bradfitz@golang.org> wrote:\n> This is just code movement, but yes, this needs updating, and dsymonds\n> agrees. \u00a0This just predates the sniffing.\n\nOkay.  Fix it or file an issue, but it's a 1-line change.\n",
			"disapproval": false,
			"date": "2012-02-09 03:37:09.551866",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"n13m3y3r@gmail.com",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org, rsc@golang.org, n13m3y3r@gmail.com, r@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-09 04:48:10.334574",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello r@golang.org, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-02-09 03:58:29.345494",
			"approval": false
		},
		{
			"sender": "n13m3y3r@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Very cool indeed, thanks Brad.\n\nJust a few suggestions.\n\nhttp://codereview.appspot.com/5643067/diff/4004/src/pkg/net/http/fs.go\nFile src/pkg/net/http/fs.go (right):\n\nhttp://codereview.appspot.com/5643067/diff/4004/src/pkg/net/http/fs.go#newcode98\nsrc/pkg/net/http/fs.go:98: content.Seek(0, os.SEEK_SET)\nIt would be nice to check the error here too. Non-file seekers may fail more arbitrarily.\n\nhttp://codereview.appspot.com/5643067/diff/4004/src/pkg/net/http/fs.go#newcode118\nsrc/pkg/net/http/fs.go:118: n, _ := io.ReadFull(content, buf[:])\nFeels like this error shouldn't be ignored as well.\n\nhttp://codereview.appspot.com/5643067/diff/4004/src/pkg/net/http/fs.go#newcode121\nsrc/pkg/net/http/fs.go:121: content.Seek(0, os.SEEK_SET) // rewind to output whole file\nDitto.",
			"disapproval": false,
			"date": "2012-02-09 04:07:11.675146",
			"approval": false
		},
		{
			"sender": "rsc@google.com",
			"recipients": [
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5643067/diff/4003/src/pkg/net/http/fs.go\nFile src/pkg/net/http/fs.go (right):\n\nhttp://codereview.appspot.com/5643067/diff/4003/src/pkg/net/http/fs.go#newcode111\nsrc/pkg/net/http/fs.go:111: // If the content also has a Stat method, use it to find the\nThe comment says nothing about this, and it seems magical\nand potentially unwanted.  Handling this information is nice, but I'd rather see something like\n\nfunc ServeContent(w ResponseWriter, req *Request, name string, mtime time.Time, content io.ReadSeeker)\n\nAnd then the comment should say that it handles the \nIf-Modified-Since and also uses the file name to deduce\nthe MIME type, otherwise falling back to content.\nThe size can (and should) be gotten from the ReadSeeker.\nIf the seek to the end returns an error, a 500 seems fine.\nIf a ReadSeeker can't Seek, that's not our fault.\n\nAll that said, I really like how this is turning out.\nIt feels like the right primitive.\n\nhttp://codereview.appspot.com/5643067/diff/4003/src/pkg/net/http/fs.go#newcode158\nsrc/pkg/net/http/fs.go:158: ctype = \"text/plain; charset=utf-8\"\nThis should be DetectMIMEType or whatever we called the sniffer.",
			"disapproval": false,
			"date": "2012-02-09 03:24:45.788572",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"n13m3y3r@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "still needs release notes.",
			"disapproval": false,
			"date": "2012-02-09 04:13:13.798978",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "all right, maybe not necessary.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-02-09 04:36:48.956927",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "new API needs to be in go1.html",
			"disapproval": false,
			"date": "2012-02-09 03:13:16.604878",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Feb 8, 2012 at 7:37 PM, Russ Cox <rsc@golang.org> wrote:\n\n> On Wed, Feb 8, 2012 at 22:30, Brad Fitzpatrick <bradfitz@golang.org>\n> wrote:\n> > This is just code movement, but yes, this needs updating, and dsymonds\n> > agrees.  This just predates the sniffing.\n>\n> Okay.  Fix it or file an issue, but it's a 1-line change.\n>\n\nyeah, fixed.  1 line change and lot of deletes, too!\n",
			"disapproval": false,
			"date": "2012-02-09 03:37:56.394818",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"n13m3y3r@gmail.com",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttp://codereview.appspot.com/5643067/diff/4004/src/pkg/net/http/fs.go\nFile src/pkg/net/http/fs.go (right):\n\nhttp://codereview.appspot.com/5643067/diff/4004/src/pkg/net/http/fs.go#newcode98\nsrc/pkg/net/http/fs.go:98: content.Seek(0, os.SEEK_SET)\nOn 2012/02/09 04:07:12, niemeyer wrote:\n> It would be nice to check the error here too. Non-file seekers may fail more\n> arbitrarily.\n\nDone.\n\nhttp://codereview.appspot.com/5643067/diff/4004/src/pkg/net/http/fs.go#newcode118\nsrc/pkg/net/http/fs.go:118: n, _ := io.ReadFull(content, buf[:])\nOn 2012/02/09 04:07:12, niemeyer wrote:\n> Feels like this error shouldn't be ignored as well.\n\nThis one doesn't matter much. It's only for content sniffing, and it'll be re-read later, so the error can be returned then.\n\nWell, I guess it won't be returned later, but I'd like to be consistent with how we return errors, not as a function of the file extension.\n\nEven if io.Copy below fails, we can't even reliably send an error if we've already written headers.\n\n*shrug*\n\nI'm inclined to not care, since we never cared in the past.\n\nhttp://codereview.appspot.com/5643067/diff/4004/src/pkg/net/http/fs.go#newcode121\nsrc/pkg/net/http/fs.go:121: content.Seek(0, os.SEEK_SET) // rewind to output whole file\nOn 2012/02/09 04:07:12, niemeyer wrote:\n> Ditto.\n\nDone.",
			"disapproval": false,
			"date": "2012-02-09 04:50:18.833521",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"n13m3y3r@gmail.com",
				"r@google.com",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "it would be nice if we had a convenient way of serving up a bunch of bytes as a ReadSeeker.\n\nif we had bytes.ReaderAt, then it would kill two birds with one stone.\n\npackage bytes\ntype ReaderAt []byte\nfunc (r ReaderAt) ReadAt(p []byte, off int64) (int, error) {\n\tswitch {\n\tcase off > int64(len(r)):\n\t\toff = int64(len(r))\n\tcase off < 0:\n\t\toff = 0\n\t}\n\tn := copy(p, r[0:int(off)])\n\tif n < len(p) {\n\t\treturn n, io.EOF\n\t}\n\treturn n, nil\n}\n\nthen you can use io.SectionReader to turn it into a ReadSeeker.\n\ni guess this wouldn't happen before Go 1 though.\n\nhttp://codereview.appspot.com/5643067/diff/1004/src/pkg/net/http/fs.go\nFile src/pkg/net/http/fs.go (right):\n\nhttp://codereview.appspot.com/5643067/diff/1004/src/pkg/net/http/fs.go#newcode86\nsrc/pkg/net/http/fs.go:86: // The name parameter is used to set the response's MIME type.\nadd \"if the Content-Type header is not already set\"?\n\nhttp://codereview.appspot.com/5643067/diff/1004/src/pkg/net/http/fs_test.go\nFile src/pkg/net/http/fs_test.go (right):\n\nhttp://codereview.appspot.com/5643067/diff/1004/src/pkg/net/http/fs_test.go#newcode26\nsrc/pkg/net/http/fs_test.go:26: var ServeFileRangeTests = []struct {\nsince the range parsing is in ServeContent now, maybe it would be appropriate to move these tests into TestServeContent?",
			"disapproval": false,
			"date": "2012-02-09 09:39:40.363468",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Anything else, Russ?\n\n\nOn Thu, Feb 9, 2012 at 3:50 PM, <bradfitz@golang.org> wrote:\n\n> PTAL\n>\n>\n>\n> http://codereview.appspot.com/**5643067/diff/4004/src/pkg/net/**http/fs.go<http://codereview.appspot.com/5643067/diff/4004/src/pkg/net/http/fs.go>\n> File src/pkg/net/http/fs.go (right):\n>\n> http://codereview.appspot.com/**5643067/diff/4004/src/pkg/net/**\n> http/fs.go#newcode98<http://codereview.appspot.com/5643067/diff/4004/src/pkg/net/http/fs.go#newcode98>\n> src/pkg/net/http/fs.go:98: content.Seek(0, os.SEEK_SET)\n> On 2012/02/09 04:07:12, niemeyer wrote:\n>\n>> It would be nice to check the error here too. Non-file seekers may\n>>\n> fail more\n>\n>> arbitrarily.\n>>\n>\n> Done.\n>\n>\n> http://codereview.appspot.com/**5643067/diff/4004/src/pkg/net/**\n> http/fs.go#newcode118<http://codereview.appspot.com/5643067/diff/4004/src/pkg/net/http/fs.go#newcode118>\n> src/pkg/net/http/fs.go:118: n, _ := io.ReadFull(content, buf[:])\n> On 2012/02/09 04:07:12, niemeyer wrote:\n>\n>> Feels like this error shouldn't be ignored as well.\n>>\n>\n> This one doesn't matter much. It's only for content sniffing, and it'll\n> be re-read later, so the error can be returned then.\n>\n> Well, I guess it won't be returned later, but I'd like to be consistent\n> with how we return errors, not as a function of the file extension.\n>\n> Even if io.Copy below fails, we can't even reliably send an error if\n> we've already written headers.\n>\n> *shrug*\n>\n> I'm inclined to not care, since we never cared in the past.\n>\n>\n> http://codereview.appspot.com/**5643067/diff/4004/src/pkg/net/**\n> http/fs.go#newcode121<http://codereview.appspot.com/5643067/diff/4004/src/pkg/net/http/fs.go#newcode121>\n> src/pkg/net/http/fs.go:121: content.Seek(0, os.SEEK_SET) // rewind to\n> output whole file\n> On 2012/02/09 04:07:12, niemeyer wrote:\n>\n>> Ditto.\n>>\n>\n> Done.\n>\n> http://codereview.appspot.com/**5643067/<http://codereview.appspot.com/5643067/>\n>\n",
			"disapproval": false,
			"date": "2012-02-09 22:24:41.648352",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"n13m3y3r@gmail.com",
				"r@google.com",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttp://codereview.appspot.com/5643067/diff/1004/src/pkg/net/http/fs.go\nFile src/pkg/net/http/fs.go (right):\n\nhttp://codereview.appspot.com/5643067/diff/1004/src/pkg/net/http/fs.go#newcode82\nsrc/pkg/net/http/fs.go:82: // The main benefits of ServeContent over io.Copy is that it handles Range\ns/benefits/benefit/\nor s/is/are/\n\nhttp://codereview.appspot.com/5643067/diff/1004/src/pkg/net/http/fs.go#newcode86\nsrc/pkg/net/http/fs.go:86: // The name parameter is used to set the response's MIME type.\nIf the response's Content-Type header is not set, ServeContent first tries to\ndeduce the type from name's file extension and, if that fails, falls back to\nreading the first block of the content and passing it to DetectContentType.\nThe name is otherwise unused; in particular it can be empty and is never\nsent in the response.\n\nIf modtime is not the zero time, ServeContent includes it in a Last-Modified\nheader in the response.  If the request includes an If-Modified-Since\nheader, ServeContent uses modtime to decide whether the\ncontent needs to be sent at all.\n\nThe content's Seek method must work: ServeContent uses \na seek to the end of the content to determine its size.",
			"disapproval": false,
			"date": "2012-02-09 22:34:04.799329",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"r@golang.org",
				"rsc@golang.org",
				"n13m3y3r@gmail.com",
				"r@google.com",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=a6adaf7fc909 ***\n\nnet/http: add ServeContent\n\nFixes issue 2039\n\nR=r, rsc, n13m3y3r, r, rogpeppe\nCC=golang-dev\nhttp://codereview.appspot.com/5643067",
			"disapproval": false,
			"date": "2012-02-09 23:02:13.209428",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 5643067: net/http: add ServeContent",
	"created": "2012-02-09 03:11:30.200917",
	"patchsets": [
		1,
		2001,
		4003,
		4004,
		1004,
		10001
	],
	"modified": "2012-02-09 23:02:15.778259",
	"closed": true,
	"issue": 5643067
}