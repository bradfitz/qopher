{
	"description": "exp/norm: Added regression test tool for the standard Unicode test set.",
	"cc": [
		"r@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2011-09-05 22:36:37.501711",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4973064/diff/7002/src/pkg/exp/norm/normregtest.go\nFile src/pkg/exp/norm/normregtest.go (right):\n\nhttp://codereview.appspot.com/4973064/diff/7002/src/pkg/exp/norm/normregtest.go#newcode100\nsrc/pkg/exp/norm/normregtest.go:100: {norm.NFC, 1, 0}, {norm.NFC, 1, 1}, {norm.NFC, 1, 2}, {norm.NFC, 3, 3}, {norm.NFC, 3, 4},\nOn 2011/09/09 20:46:21, r wrote:\n> i'd rather see these one per line; as written it looks like there are four cases\n> not 20.\n> i know each line is a related group, but the layout makes them look\n> syntactically related.\n> \n> but now that i look at it, this seems so regular you don't even need the data -\n> just write the loops\n\nDone.\n\nhttp://codereview.appspot.com/4973064/diff/7002/src/pkg/exp/norm/normregtest.go#newcode131\nsrc/pkg/exp/norm/normregtest.go:131: var testRe = regexp.MustCompile(`^` + strings.Repeat(`([0-9a-fA-F ]+);`, 5) + ` # (.*)$`)\nOn 2011/09/09 20:46:21, r wrote:\n> might as well switch to exp/regexp and then you can avoid the strings.Repeat\n> call.  it's becoming the standard soon anyway\n\nI've made the changes, but it seems like there are some limitations and/or bugs.  I've added the comments to explain the issues.\n\nhttp://codereview.appspot.com/4973064/diff/7002/src/pkg/exp/norm/normregtest.go#newcode187\nsrc/pkg/exp/norm/normregtest.go:187: \nOn 2011/09/09 20:46:21, r wrote:\n> d\n> it's the only blank line and i don't see why this location is special.\n\nDone.\n\nhttp://codereview.appspot.com/4973064/diff/7002/src/pkg/exp/norm/normregtest.go#newcode188\nsrc/pkg/exp/norm/normregtest.go:188: for k := 0; k < len(splits); k++ {\nOn 2011/09/09 20:46:21, r wrote:\n> _, split := range splits\n\nDone.\n\nhttp://codereview.appspot.com/4973064/diff/7002/src/pkg/exp/norm/normregtest.go#newcode286\nsrc/pkg/exp/norm/normregtest.go:286: runtime.GOMAXPROCS(2)\nOn 2011/09/09 20:46:21, r wrote:\n> why do you do this?\n> there's no parallelism.\nIf I don't do this, and there is a performance bug, the timeout doesn't get triggered within the desired time. I figured this was because the goroutine wasn't yielding before it completed and once it had control. So I figured increasing it would fix that, which it did.  I just verified it is still necessary by adding && false at line 232 in normalize.go and using a single proc.",
			"disapproval": false,
			"date": "2011-09-12 10:07:26.034564",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4973064/diff/2002/src/pkg/exp/norm/normregtest.go\nFile src/pkg/exp/norm/normregtest.go (right):\n\nhttp://codereview.appspot.com/4973064/diff/2002/src/pkg/exp/norm/normregtest.go#newcode1\nsrc/pkg/exp/norm/normregtest.go:1: package main\nOn 2011/09/06 21:04:20, r wrote:\n> copyright missing\n\nDone.\n\nhttp://codereview.appspot.com/4973064/diff/2002/src/pkg/exp/norm/normregtest.go#newcode122\nsrc/pkg/exp/norm/normregtest.go:122: fmt.Println(\"Loading data...\")\nOn 2011/09/06 21:04:20, r wrote:\n> delete\n\nDone.\n\nhttp://codereview.appspot.com/4973064/diff/2002/src/pkg/exp/norm/normregtest.go#newcode140\nsrc/pkg/exp/norm/normregtest.go:140: }\nOn 2011/09/06 21:04:20, r wrote:\n> this is fine but there's now a file: transport in http, which may be nicer.\n> see NewFileTransport in package http\nGreat. Done.  Left the -local flag for convenience and to be consistent with the other tools, though.\n\nhttp://codereview.appspot.com/4973064/diff/2002/src/pkg/exp/norm/normregtest.go#newcode170\nsrc/pkg/exp/norm/normregtest.go:170: logger.Fatalf(\"Failed to parse: \\\"%s\\\" result: %v\", line, m)\nOn 2011/09/06 21:04:20, r wrote:\n> fine as is but you could use `` and avoid the backslashes\n\nDone.\n\nhttp://codereview.appspot.com/4973064/diff/2002/src/pkg/exp/norm/normregtest.go#newcode207\nsrc/pkg/exp/norm/normregtest.go:207: if t == nil {\nOn 2011/09/06 21:04:20, r wrote:\n> this is pretty special. you can refactor to eliminate the remote connection\n> between a nil Test and CharByChar. i'd just use two versions of doTest - it's\n> not much code to dup.\n> (plus you don't need st in one branch)\nI've solved it by simply passing a fabricated Test instance and passing where it applies.  This also guarantees consistent test output.  Otherwise I would also have to duplicate doTest, which will grow when the string versions of the methods are added as well.\n\nhttp://codereview.appspot.com/4973064/diff/2002/src/pkg/exp/norm/normregtest.go#newcode225\nsrc/pkg/exp/norm/normregtest.go:225: r := \"true\"\nOn 2011/09/06 21:04:20, r wrote:\n> i don't understand the function from here on. please comment\n\nI rewrote it by having a separate cmpIsNormal, which is probably clearer.\n\nhttp://codereview.appspot.com/4973064/diff/2002/src/pkg/exp/norm/normregtest.go#newcode241\nsrc/pkg/exp/norm/normregtest.go:241: fmt.Println(\"Test: Character by Character...\")\nOn 2011/09/06 21:04:20, r wrote:\n> delete. see below.\n\nDone.\n\nhttp://codereview.appspot.com/4973064/diff/2002/src/pkg/exp/norm/normregtest.go#newcode242\nsrc/pkg/exp/norm/normregtest.go:242: for i := 0; i <= len(tests); i++ {\nOn 2011/09/06 21:04:20, r wrote:\n> // last one is special case\n> or something like that - looks like a bug at first reading\n\nDone.\n\nhttp://codereview.appspot.com/4973064/diff/2002/src/pkg/exp/norm/normregtest.go#newcode267\nsrc/pkg/exp/norm/normregtest.go:267: fmt.Printf(\"Test: %s...\\n\", parts[j].name)\nOn 2011/09/06 21:04:20, r wrote:\n> delete or put under a flag that defaults to false.\n> ideally this program should print nothing except, possibly, \"PASS\"\n\nDone.\n\nhttp://codereview.appspot.com/4973064/diff/2002/src/pkg/exp/norm/normregtest.go#newcode278\nsrc/pkg/exp/norm/normregtest.go:278: fmt.Printf(\"Test: O(n) behavior...\\n\")\nOn 2011/09/06 21:04:20, r wrote:\n> delete\n\nDone.\n\nhttp://codereview.appspot.com/4973064/diff/2002/src/pkg/exp/norm/normregtest.go#newcode295\nsrc/pkg/exp/norm/normregtest.go:295: case <-timeout:\nOn 2011/09/06 21:04:20, r wrote:\n> use time.After\n\nDone.\n\nhttp://codereview.appspot.com/4973064/diff/2002/src/pkg/exp/norm/normregtest.go#newcode297\nsrc/pkg/exp/norm/normregtest.go:297: `Unexpected long time to complete test. Maybe quickSpan does not check for maxCombiningChars properly?`)\nOn 2011/09/06 21:04:20, r wrote:\n> pet peeve: error messages that act like they know what's wrong with the code.\n> log.Error(\"timeout in performance test\")\n\nDone.",
			"disapproval": false,
			"date": "2011-09-08 15:02:49.689329",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-05 22:37:49.218604",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4973064/diff/2002/src/pkg/exp/norm/normregtest.go\nFile src/pkg/exp/norm/normregtest.go (right):\n\nhttp://codereview.appspot.com/4973064/diff/2002/src/pkg/exp/norm/normregtest.go#newcode1\nsrc/pkg/exp/norm/normregtest.go:1: package main\ncopyright missing\n\nhttp://codereview.appspot.com/4973064/diff/2002/src/pkg/exp/norm/normregtest.go#newcode122\nsrc/pkg/exp/norm/normregtest.go:122: fmt.Println(\"Loading data...\")\ndelete\n\nhttp://codereview.appspot.com/4973064/diff/2002/src/pkg/exp/norm/normregtest.go#newcode140\nsrc/pkg/exp/norm/normregtest.go:140: }\nthis is fine but there's now a file: transport in http, which may be nicer.\nsee NewFileTransport in package http\n\nhttp://codereview.appspot.com/4973064/diff/2002/src/pkg/exp/norm/normregtest.go#newcode170\nsrc/pkg/exp/norm/normregtest.go:170: logger.Fatalf(\"Failed to parse: \\\"%s\\\" result: %v\", line, m)\nfine as is but you could use `` and avoid the backslashes\n\nhttp://codereview.appspot.com/4973064/diff/2002/src/pkg/exp/norm/normregtest.go#newcode207\nsrc/pkg/exp/norm/normregtest.go:207: if t == nil {\nthis is pretty special. you can refactor to eliminate the remote connection between a nil Test and CharByChar. i'd just use two versions of doTest - it's not much code to dup.\n(plus you don't need st in one branch)\n\nhttp://codereview.appspot.com/4973064/diff/2002/src/pkg/exp/norm/normregtest.go#newcode225\nsrc/pkg/exp/norm/normregtest.go:225: r := \"true\"\ni don't understand the function from here on. please comment\n\nhttp://codereview.appspot.com/4973064/diff/2002/src/pkg/exp/norm/normregtest.go#newcode241\nsrc/pkg/exp/norm/normregtest.go:241: fmt.Println(\"Test: Character by Character...\")\ndelete. see below.\n\nhttp://codereview.appspot.com/4973064/diff/2002/src/pkg/exp/norm/normregtest.go#newcode242\nsrc/pkg/exp/norm/normregtest.go:242: for i := 0; i <= len(tests); i++ {\n// last one is special case\nor something like that - looks like a bug at first reading\n\nhttp://codereview.appspot.com/4973064/diff/2002/src/pkg/exp/norm/normregtest.go#newcode267\nsrc/pkg/exp/norm/normregtest.go:267: fmt.Printf(\"Test: %s...\\n\", parts[j].name)\ndelete or put under a flag that defaults to false.\nideally this program should print nothing except, possibly, \"PASS\"\n\nhttp://codereview.appspot.com/4973064/diff/2002/src/pkg/exp/norm/normregtest.go#newcode278\nsrc/pkg/exp/norm/normregtest.go:278: fmt.Printf(\"Test: O(n) behavior...\\n\")\ndelete\n\nhttp://codereview.appspot.com/4973064/diff/2002/src/pkg/exp/norm/normregtest.go#newcode295\nsrc/pkg/exp/norm/normregtest.go:295: case <-timeout:\nuse time.After\n\nhttp://codereview.appspot.com/4973064/diff/2002/src/pkg/exp/norm/normregtest.go#newcode297\nsrc/pkg/exp/norm/normregtest.go:297: `Unexpected long time to complete test. Maybe quickSpan does not check for maxCombiningChars properly?`)\npet peeve: error messages that act like they know what's wrong with the code.\nlog.Error(\"timeout in performance test\")",
			"disapproval": false,
			"date": "2011-09-06 21:04:20.916599",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-12 10:07:26.480051",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-09-12 22:54:10.343308",
			"approval": true
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-09-09 07:32:44.812189",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/4973064/diff/7002/src/pkg/exp/norm/normregtest.go\nFile src/pkg/exp/norm/normregtest.go (right):\n\nhttp://codereview.appspot.com/4973064/diff/7002/src/pkg/exp/norm/normregtest.go#newcode100\nsrc/pkg/exp/norm/normregtest.go:100: {norm.NFC, 1, 0}, {norm.NFC, 1, 1}, {norm.NFC, 1, 2}, {norm.NFC, 3, 3}, {norm.NFC, 3, 4},\ni'd rather see these one per line; as written it looks like there are four cases not 20.\ni know each line is a related group, but the layout makes them look syntactically related.\n\nbut now that i look at it, this seems so regular you don't even need the data - just write the loops\n\nhttp://codereview.appspot.com/4973064/diff/7002/src/pkg/exp/norm/normregtest.go#newcode131\nsrc/pkg/exp/norm/normregtest.go:131: var testRe = regexp.MustCompile(`^` + strings.Repeat(`([0-9a-fA-F ]+);`, 5) + ` # (.*)$`)\nmight as well switch to exp/regexp and then you can avoid the strings.Repeat call.  it's becoming the standard soon anyway\n\nhttp://codereview.appspot.com/4973064/diff/7002/src/pkg/exp/norm/normregtest.go#newcode187\nsrc/pkg/exp/norm/normregtest.go:187: \nd\nit's the only blank line and i don't see why this location is special.\n\nhttp://codereview.appspot.com/4973064/diff/7002/src/pkg/exp/norm/normregtest.go#newcode188\nsrc/pkg/exp/norm/normregtest.go:188: for k := 0; k < len(splits); k++ {\n_, split := range splits\n\nhttp://codereview.appspot.com/4973064/diff/7002/src/pkg/exp/norm/normregtest.go#newcode286\nsrc/pkg/exp/norm/normregtest.go:286: runtime.GOMAXPROCS(2)\nwhy do you do this?\nthere's no parallelism.",
			"disapproval": false,
			"date": "2011-09-09 20:46:21.225275",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=ff75f8db4edb ***\n\nexp/norm: Added regression test tool for the standard Unicode test set.\n\nR=r\nCC=golang-dev\nhttp://codereview.appspot.com/4973064",
			"disapproval": false,
			"date": "2011-09-13 10:51:55.304926",
			"approval": false
		}
	],
	"owner_email": "mpvl@golang.org",
	"private": false,
	"base_url": "",
	"owner": "mpvl",
	"subject": "code review 4973064: exp/norm: Added regression test tool for the standard U...",
	"created": "2011-09-05 22:36:20.536743",
	"patchsets": [
		1,
		2001,
		2002,
		7001,
		7002,
		12001,
		14001,
		16001
	],
	"modified": "2011-09-13 10:52:02.174710",
	"closed": true,
	"issue": 4973064
}