{
	"description": "go/types: Steps towards removing ast.Object from exported API.\n\n- introduced type Method for methods\n- renamed StructField -> Field\n- removed ObjList\n- methods are not sorted anymore in interfaces (for now)",
	"cc": [
		"adonovan@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7023043/diff/8001/src/pkg/go/types/expr.go\nFile src/pkg/go/types/expr.go (right):\n\nhttps://codereview.appspot.com/7023043/diff/8001/src/pkg/go/types/expr.go#newcode114\nsrc/pkg/go/types/expr.go:114: return // keep multiple entries, lookup will only return the first entry\nThis will cause identicalMethods to return false; is this what is wanted?\n\nhttps://codereview.appspot.com/7023043/diff/8001/src/pkg/go/types/predicates.go\nFile src/pkg/go/types/predicates.go (right):\n\nhttps://codereview.appspot.com/7023043/diff/8001/src/pkg/go/types/predicates.go#newcode211\nsrc/pkg/go/types/predicates.go:211: // same length and corresponding methods have identical types.\nYou could optimise this by specializing the common case in which a[i]==b[i] for all i and falling back to the map-allocating algorithm for the suffix starting at the first i for which this check fails.\n\n(It's too bad there's no way to test equality of the slices directly as that's probably the most common case.)\n\nhttps://codereview.appspot.com/7023043/diff/8001/src/pkg/go/types/types.go\nFile src/pkg/go/types/types.go (left):\n\nhttps://codereview.appspot.com/7023043/diff/8001/src/pkg/go/types/types.go#oldcode13\nsrc/pkg/go/types/types.go:13: // TODO(gri) Eventually determine what common Type functionality should be exported.\nfunc String() string \n\nwould save me hours of typing. :)\n\nhttps://codereview.appspot.com/7023043/diff/8001/src/pkg/go/types/types.go\nFile src/pkg/go/types/types.go (right):\n\nhttps://codereview.appspot.com/7023043/diff/8001/src/pkg/go/types/types.go#newcode179\nsrc/pkg/go/types/types.go:179: type Method struct {\nDocstring?",
			"disapproval": false,
			"date": "2012-12-28 22:17:43.233270",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-12-28 22:00:45.367250",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=1e331db5cf11 ***\n\ngo/types: Steps towards removing ast.Object from exported API.\n\n- introduced type Method for methods\n- renamed StructField -> Field\n- removed ObjList\n- methods are not sorted anymore in interfaces (for now)\n\nR=adonovan\nCC=golang-dev\nhttps://codereview.appspot.com/7023043",
			"disapproval": false,
			"date": "2012-12-28 22:30:42.011170",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-12-28 22:02:32.702880",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7023043/diff/8001/src/pkg/go/types/expr.go\nFile src/pkg/go/types/expr.go (right):\n\nhttps://codereview.appspot.com/7023043/diff/8001/src/pkg/go/types/expr.go#newcode114\nsrc/pkg/go/types/expr.go:114: return // keep multiple entries, lookup will only return the first entry\nOn 2012/12/28 22:17:43, adonovan wrote:\n> This will cause identicalMethods to return false; is this what is wanted?\ngood observation - but that's ok. these interfaces are wrong in the first place.\n\nhttps://codereview.appspot.com/7023043/diff/8001/src/pkg/go/types/predicates.go\nFile src/pkg/go/types/predicates.go (right):\n\nhttps://codereview.appspot.com/7023043/diff/8001/src/pkg/go/types/predicates.go#newcode211\nsrc/pkg/go/types/predicates.go:211: // same length and corresponding methods have identical types.\nOn 2012/12/28 22:17:43, adonovan wrote:\n> You could optimise this by specializing the common case in which a[i]==b[i] for\n> all i and falling back to the map-allocating algorithm for the suffix starting\n> at the first i for which this check fails.\n> \n> (It's too bad there's no way to test equality of the slices directly as that's\n> probably the most common case.)\n\nYes. I have added a TODO. It's good enough for now. Another option would be to lazily sort the list and remember that it is sorted.\n\nhttps://codereview.appspot.com/7023043/diff/8001/src/pkg/go/types/types.go\nFile src/pkg/go/types/types.go (left):\n\nhttps://codereview.appspot.com/7023043/diff/8001/src/pkg/go/types/types.go#oldcode13\nsrc/pkg/go/types/types.go:13: // TODO(gri) Eventually determine what common Type functionality should be exported.\nOn 2012/12/28 22:17:43, adonovan wrote:\n> func String() string \n> \n> would save me hours of typing. :)\n\nduly noted\n\nhttps://codereview.appspot.com/7023043/diff/8001/src/pkg/go/types/types.go\nFile src/pkg/go/types/types.go (right):\n\nhttps://codereview.appspot.com/7023043/diff/8001/src/pkg/go/types/types.go#newcode179\nsrc/pkg/go/types/types.go:179: type Method struct {\nOn 2012/12/28 22:17:43, adonovan wrote:\n> Docstring?\n\nDone.",
			"disapproval": false,
			"date": "2012-12-28 22:28:52.577540",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 7023043: go/types: Steps towards removing ast.Object from export...",
	"created": "2012-12-28 21:55:47.138220",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		13001,
		3013
	],
	"modified": "2012-12-28 22:36:45.899510",
	"closed": true,
	"issue": 7023043
}