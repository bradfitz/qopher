{
	"description": "testing: introduce (*B).ReportAllocs()\nCalling it will show memory allocation statistics for that\nsingle benchmark (if -test.benchmem is not provided)",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org",
		"kevlar@google.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "How about b.ReportAllocs?\r\n",
			"disapproval": false,
			"date": "2013-01-02 21:16:35.978690",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-12-30 20:02:20.913560",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This sounds like it is conflating benchmarks and tests. Tests run\r\nalways. Benchmarks do not. If the number of mallocs is important to\r\ntest, it needs to be in a test, not a benchmark.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-01-02 20:21:10.067910",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What's wrong with the current behavior (you get it if you ask for it)?\r\n",
			"disapproval": false,
			"date": "2013-01-02 20:00:03.202830",
			"approval": false
		},
		{
			"sender": "kevlar@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is related to the AllocsPerRun CL.  The two common uses of loops\r\ncounting allocations are to test that it is below a threshold and to print\r\nout the statistics in a benchmark, presumably for archival (it's not\r\nnormally run with test.benchmem).  This simplifies the latter case, the\r\nother CL handles the former.\r\n\r\n\r\nOn Wed, Jan 2, 2013 at 12:00 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> What's wrong with the current behavior (you get it if you ask for it)?\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-02 20:05:04.987680",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jan 3, 2013 at 4:00 AM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> What's wrong with the current behavior (you get it if you ask for it)?\r\n>\r\nsome benchmarks might always want to benchmark memory allocations\r\nwhile for some other types of benchmark it's not required (for example,\r\nthe memory allocation is known to be 0)\r\n",
			"disapproval": false,
			"date": "2013-01-02 20:55:16.583880",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/02 21:16:35, rsc wrote:\n> How about b.ReportAllocs?\nSure. PTAL.",
			"disapproval": false,
			"date": "2013-01-05 12:28:00.138490",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"kevlar@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "gentle ping.",
			"disapproval": false,
			"date": "2013-01-12 17:02:31.393020",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"kevlar@google.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/7027046/diff/8001/src/pkg/testing/benchmark.go\nFile src/pkg/testing/benchmark.go (right):\n\nhttps://codereview.appspot.com/7027046/diff/8001/src/pkg/testing/benchmark.go#newcode96\nsrc/pkg/testing/benchmark.go:96: // like what you get when you pass -test.benchmem.\navoid the word \"you\".   as far as I know, we don't use it any of the docs so far.\n\nMaybe something like:\n\n// ReportAllocs enables malloc statistics for this benchmark.\n// It is equivalent to setting -test.benchmem.",
			"disapproval": false,
			"date": "2013-01-12 17:08:52.527620",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"kevlar@google.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=d67c54bb524e ***\n\ntesting: introduce (*B).ReportAllocs()\nCalling it will show memory allocation statistics for that\nsingle benchmark (if -test.benchmem is not provided)\n\nR=golang-dev, rsc, kevlar, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/7027046",
			"disapproval": false,
			"date": "2013-01-17 10:46:10.119590",
			"approval": false
		}
	],
	"owner_email": "minux.ma@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "minux",
	"subject": "code review 7027046: testing: introduce (*B).EnableMallocReport()",
	"created": "2012-12-30 19:59:23.615440",
	"patchsets": [
		1,
		1001,
		4001,
		8001,
		15001,
		20001
	],
	"modified": "2013-01-17 10:46:16.467780",
	"closed": true,
	"issue": 7027046
}