{
	"description": "go/parser: make parser exit after the first 10 errors\n\nChanges the default behavior of go/parser to exit after\n10 errors and introduces a flag to continue parsing until EOF.\n\nAdds const AllErrors Mode to the go/parser API.\n\nFixes issue 3943.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"gri@golang.org"
	],
	"messages": [
		{
			"sender": "chris.cahoon@gmail.com",
			"recipients": [
				"chris.cahoon@gmail.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello gri (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-12-29 17:46:37.706040",
			"approval": false
		},
		{
			"sender": "chris.cahoon@gmail.com",
			"recipients": [
				"chris.cahoon@gmail.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/12/29 17:46:37, cahooon wrote:\n> Hello gri (cc: mailto:golang-dev@googlegroups.com),\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go\n\nBased on gri's suggestion in https://codereview.appspot.com/6925057/\n\nThe new default behavior may result in displaying fewer than 10 errors if some errors\nare filtered out as multiples, which do not get removed until parser.parseFile returns. \nEnabling parser.SpuriousErrors makes them show up, but it doesn't seem like a\nproblem.\n\nAdds a line in the API compatibility check. \n\nBefore:\n\n$ go test -bench=ParseErrorLimits -test.benchtime=5s performance_test.go \nBenchmarkParseErrorLimits\t  100000\t    103005 ns/op\t   2.24 MB/s\n\nAfter:\n\n$ go test -bench=ParseErrorLimits -test.benchtime=5s performance_test.go \nBenchmarkParseErrorLimits\t  500000\t     24626 ns/op\t   9.38 MB/s",
			"disapproval": false,
			"date": "2012-12-29 17:47:48.872650",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"chris.cahoon@gmail.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7028044/diff/4001/src/pkg/go/parser/parser.go\nFile src/pkg/go/parser/parser.go (right):\n\nhttps://codereview.appspot.com/7028044/diff/4001/src/pkg/go/parser/parser.go#newcode317\nsrc/pkg/go/parser/parser.go:317: if p.stopped {\nThis is not the way to do it as you have now added even more code to an already cluttered function which is really the bottleneck of the parser.\n\nInstead, use a parser-internal panic when more than 10 errors are reported. Use a deferred function in parseFile to catch that specific parser-internal panic (via recover) and return. For all other panic values, re-panic as those would be actual unexpected panics/errors.\n\nHave a look at say http://golang.org/src/pkg/text/tabwriter/tabwriter.go which uses the same mechanism for its internal \"exception handling\".",
			"disapproval": false,
			"date": "2012-12-30 01:29:58.560180",
			"approval": false
		},
		{
			"sender": "chris.cahoon@gmail.com",
			"recipients": [
				"chris.cahoon@gmail.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-02-09 23:17:48.549510",
			"approval": false
		}
	],
	"owner_email": "chris.cahoon@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "cahooon",
	"subject": "code review 7028044: go/parser: make parser exit after the first 10 errors",
	"created": "2012-12-29 16:37:14.111930",
	"patchsets": [
		1,
		1002,
		4001
	],
	"modified": "2013-02-09 23:17:50.083840",
	"closed": true,
	"issue": 7028044
}