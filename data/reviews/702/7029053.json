{
	"description": "runtime: Use SipHash-2-4 for hashmaps on amd64.\n\nFixes issue 4604.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"khr@golang.org"
	],
	"messages": [
		{
			"sender": "mdempsky@google.com",
			"recipients": [
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Like I said in the description, this was mostly for proof-of-concept and personal exercise.  It passes all.bash's testing, but I haven't benchmarked anything.  I don't know what a good benchmark for a map-heavy workload is.  Assuming it doesn't slow things down too much though, I think it would be worthwhile change.\n\nAlso, I know there's terrible things like inconsistent formatting and unnamespaced names.  I can fix the formatting, and rename things as recommended.  Just thought I'd mail it out since it seems to be in a working state at the moment.",
			"disapproval": false,
			"date": "2013-01-04 01:51:34.168490",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Some minor stylistic comments.\n\nI think benchmarks for int, string and time.Time in the ranges 10, 100, 10,000 and 1,000,000 would be useful.\n\nhttps://codereview.appspot.com/7029053/diff/9001/src/pkg/runtime/alg.c\nFile src/pkg/runtime/alg.c (right):\n\nhttps://codereview.appspot.com/7029053/diff/9001/src/pkg/runtime/alg.c#newcode8\nsrc/pkg/runtime/alg.c:8: // XXX(mdempsky): cc doesn't optimize this into a ROT instruction. :(\nGo uses TODO(mdempsky) rather than the pythonic XXX, you can also use BUG. I think both, or at least the latter are recognised by godoc.\n\nhttps://codereview.appspot.com/7029053/diff/9001/src/pkg/runtime/alg.c#newcode9\nsrc/pkg/runtime/alg.c:9: #define ROTATE(x,b) x = (x << b) | (x >> (64 - b))\nThat might be fixable.\n\nhttps://codereview.appspot.com/7029053/diff/9001/src/pkg/runtime/alg.c#newcode178\nsrc/pkg/runtime/alg.c:178: siphash_update(h, s, a);\nYou've probably figured out cc doesn't inline simple methods either :(\n\nhttps://codereview.appspot.com/7029053/diff/9001/src/pkg/runtime/iface.c\nFile src/pkg/runtime/iface.c (right):\n\nhttps://codereview.appspot.com/7029053/diff/9001/src/pkg/runtime/iface.c#newcode556\nsrc/pkg/runtime/iface.c:556: return; // XXX(mdempsky): Hash something?\n// TODO\n\nhttps://codereview.appspot.com/7029053/diff/9001/src/pkg/runtime/iface.c#newcode576\nsrc/pkg/runtime/iface.c:576: return; // XXX(mdempsky): Hash something?\nditto",
			"disapproval": false,
			"date": "2013-01-04 02:11:58.598630",
			"approval": false
		},
		{
			"sender": "mdempsky@google.com",
			"recipients": [
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-01-04 01:46:50.950340",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think there are some map benchmarks in the runtime package. If not, I\r\nthink tests of ints and strings as keys for sizes of 10s, 100s, 10,000s and\r\n1,000,000 would be a good general purpose benchmark. The net/http package\r\nuses maps for headers, so look there for improvements/regressions.\r\n\r\nI would be concerned if this proposal made map access /insertion slower,\r\nmaps are already known to be slower than folks hoped for.\r\n\r\nWithout trying to discourage your contributions, they are most welcome, the\r\ngeneral policy is to discuss changes first, before implementation.\r\nOn 4 Jan 2013 12:51, <mdempsky@google.com> wrote:\r\n\r\n> Like I said in the description, this was mostly for proof-of-concept and\r\n> personal exercise.  It passes all.bash's testing, but I haven't\r\n> benchmarked anything.  I don't know what a good benchmark for a\r\n> map-heavy workload is.  Assuming it doesn't slow things down too much\r\n> though, I think it would be worthwhile change.\r\n>\r\n> Also, I know there's terrible things like inconsistent formatting and\r\n> unnamespaced names.  I can fix the formatting, and rename things as\r\n> recommended.  Just thought I'd mail it out since it seems to be in a\r\n> working state at the moment.\r\n>\r\n> https://codereview.appspot.**com/7029053/<https://codereview.appspot.com/7029053/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-01-04 01:57:46.072730",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jan 4, 2013 at 12:57 PM, Dave Cheney <dave@cheney.net> wrote:\r\n\r\n> Without trying to discourage your contributions, they are most welcome, the\r\n> general policy is to discuss changes first, before implementation.\r\n\r\nIn particular, please read http://golang.org/doc/contribute.html.\r\n",
			"disapproval": false,
			"date": "2013-01-04 02:00:57.388460",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jan 4, 2013 at 1:21 PM, Matthew Dempsky <mdempsky@google.com> wrote:\r\n\r\n>> In particular, please read http://golang.org/doc/contribute.html.\r\n>\r\n>\r\n> Thanks, I read that---it's how I figured out how to upload CLs in the first\r\n> place! :)  Is sending a CL to start a discussion about something considered\r\n> bad form?  Or is there something else you think I overlooked?\r\n\r\nPlease re-read the section section, titled \"Discuss your design\".\r\n",
			"disapproval": false,
			"date": "2013-01-04 02:30:52.848900",
			"approval": false
		},
		{
			"sender": "mdempsky@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Jan 3, 2013 at 6:00 PM, David Symonds <dsymonds@golang.org> wrote:\r\n\r\n> On Fri, Jan 4, 2013 at 12:57 PM, Dave Cheney <dave@cheney.net> wrote:\r\n>\r\n> > Without trying to discourage your contributions, they are most welcome,\r\n> the\r\n> > general policy is to discuss changes first, before implementation.\r\n>\r\n\r\nSure, I saw that in the Contribution Guidelines document, but for the\r\nprevious simple changes I submitted it just seemed like a wasteful extra\r\nround-trip to first email golang-dev with \"hey, I noticed X; should I\r\nsubmit a CL to change it to Y?\"  Just sending the CL seems easier all\r\naround, and my feelings won't get hurt if they're rejected or if someone\r\ndecides it's easier to steal the CL and tweak/submit it themselves.  :)\r\n\r\nThis particular change I realize is worth discussing further, which is why\r\nI mailed it out for discussion now rather than after trying to polish\r\nthings further.  I just wanted to implement this change for fun anyway,\r\nregardless of whether it gets accepted or not.\r\n\r\n In particular, please read http://golang.org/doc/contribute.html.\r\n>\r\n\r\nThanks, I read that---it's how I figured out how to upload CLs in the first\r\nplace! :)  Is sending a CL to start a discussion about something considered\r\nbad form?  Or is there something else you think I overlooked?\r\n",
			"disapproval": false,
			"date": "2013-01-04 02:22:09.636460",
			"approval": false
		},
		{
			"sender": "mdempsky@google.com",
			"recipients": [
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"dsymonds@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'll look into benchmarks.\n\nhttps://codereview.appspot.com/7029053/diff/9001/src/pkg/runtime/alg.c\nFile src/pkg/runtime/alg.c (right):\n\nhttps://codereview.appspot.com/7029053/diff/9001/src/pkg/runtime/alg.c#newcode8\nsrc/pkg/runtime/alg.c:8: // XXX(mdempsky): cc doesn't optimize this into a ROT instruction. :(\nOn 2013/01/04 02:11:58, dfc wrote:\n> Go uses TODO(mdempsky) rather than the pythonic XXX, you can also use BUG. I\n> think both, or at least the latter are recognised by godoc.\n\nDone.  (Here and elsewhere.)\n\nhttps://codereview.appspot.com/7029053/diff/9001/src/pkg/runtime/alg.c#newcode9\nsrc/pkg/runtime/alg.c:9: #define ROTATE(x,b) x = (x << b) | (x >> (64 - b))\nOn 2013/01/04 02:11:58, dfc wrote:\n> That might be fixable.\n\nYeah, I looked into fixing it, but the cc code is still kinda hairy to me.  It wasn't clear to me what the best way to do so was either, so I punted on that since it doesn't prevent the code from working.\n\nhttps://codereview.appspot.com/7029053/diff/9001/src/pkg/runtime/alg.c#newcode178\nsrc/pkg/runtime/alg.c:178: siphash_update(h, s, a);\nOn 2013/01/04 02:11:58, dfc wrote:\n> You've probably figured out cc doesn't inline simple methods either :(\n\nYeah.  I considered getting rid of the siphash_update() function and just having people call runtime.memhash() directly, or renaming the latter or something, but figured that's something golang-dev could better suggest than I could figure out on my own.",
			"disapproval": false,
			"date": "2013-01-04 02:27:25.059890",
			"approval": false
		},
		{
			"sender": "patrick@patrickmn.com",
			"recipients": [
				"mdempsky@google.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"dsymonds@golang.org",
				"patrick@patrickmn.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for submitting this. You were quicker than me :)\n\nThis is issue 4604: http://code.google.com/p/go/issues/detail?id=4604\n\nPlease let me know if you are planning to discontinue/abandon this CL. Thanks.",
			"disapproval": false,
			"date": "2013-01-04 03:24:10.879560",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mdempsky@google.com",
				"dave@cheney.net",
				"dsymonds@golang.org",
				"patrick@patrickmn.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "As I mentioned on the bug, I'd like to put this on hold until after Go 1.1.",
			"disapproval": false,
			"date": "2013-01-18 21:40:17.669060",
			"approval": false
		},
		{
			"sender": "mdempsky@google.com",
			"recipients": [
				"mdempsky@google.com",
				"dave@cheney.net",
				"dsymonds@golang.org",
				"patrick@patrickmn.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/18 21:40:17, rsc wrote:\n> As I mentioned on the bug, I'd like to put this on hold until after Go 1.1.\n\nYep, that's fine by me.  Is there a proper way to retract the CL from consideration until then while keeping it available for people who might be interested?",
			"disapproval": false,
			"date": "2013-01-18 21:44:16.187380",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "You can clear the R= line but keep the CC= line, by using hg change 7029053.\r\n",
			"disapproval": false,
			"date": "2013-01-18 21:49:24.054300",
			"approval": false
		},
		{
			"sender": "khr@golang.org",
			"recipients": [
				"mdempsky@google.com",
				"khr@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=close\n\nThis change is obsoleted by the aeshash implementation (CL 7543043).",
			"disapproval": false,
			"date": "2013-07-22 19:36:07.998620",
			"approval": false
		}
	],
	"owner_email": "mdempsky@google.com",
	"private": false,
	"base_url": "",
	"owner": "mdempsky",
	"subject": "code review 7029053: runtime: Use SipHash-2-4 for hashmaps.",
	"created": "2013-01-04 01:24:54.577310",
	"patchsets": [
		1,
		2001,
		3,
		9001,
		8002,
		7004,
		11004,
		20001,
		22009,
		26001,
		21018,
		30001
	],
	"modified": "2013-07-22 19:36:08.584490",
	"closed": false,
	"issue": 7029053
}