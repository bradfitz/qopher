{
	"description": "leveldb/db: concatenating and merging iterators.",
	"cc": [
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/leveldb-go",
			"disapproval": false,
			"date": "2013-05-02 12:34:38.659350",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/9118043/diff/5001/leveldb/db/db.go\nFile leveldb/db/db.go (right):\n\nhttps://codereview.appspot.com/9118043/diff/5001/leveldb/db/db.go#newcode259\nleveldb/db/db.go:259: // Find the smallest key. We could maintain a heap instead of doing\nI think the heap way is actually simpler than this.  And you ultimately do fewer bytes.Compare operations if this is a heap.\n\nSee the latest version of the sstable merging iterator, which uses a heap efficiently (related: https://code.google.com/p/go/issues/detail?id=5372) and only calls & caches the sub-iterator.Key() when the subiterators are initialized or advance.",
			"disapproval": false,
			"date": "2013-05-07 20:09:30.791680",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/9118043/diff/11001/leveldb/db/db_test.go\nFile leveldb/db/db_test.go (right):\n\nhttps://codereview.appspot.com/9118043/diff/11001/leveldb/db/db_test.go#newcode117\nleveldb/db/db_test.go:117: b := bytes.NewBuffer(nil)\nvar b bytes.Buffer   ?\n\nhttps://codereview.appspot.com/9118043/diff/11001/leveldb/db/db_test.go#newcode120\nleveldb/db/db_test.go:120: fmt.Fprintf(b, \"<%s:%s>\", iter.Key(), iter.Value())\n&b\n\nhttps://codereview.appspot.com/9118043/diff/11001/leveldb/db/db_test.go#newcode123\nleveldb/db/db_test.go:123: fmt.Fprintf(b, \"err=%v\", err)\n&b",
			"disapproval": false,
			"date": "2013-05-08 04:22:03.936060",
			"approval": true
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nhttps://codereview.appspot.com/9118043/diff/5001/leveldb/db/db.go\nFile leveldb/db/db.go (right):\n\nhttps://codereview.appspot.com/9118043/diff/5001/leveldb/db/db.go#newcode259\nleveldb/db/db.go:259: // Find the smallest key. We could maintain a heap instead of doing\nOn 2013/05/07 20:09:30, bradfitz wrote:\n> I think the heap way is actually simpler than this.\n\nWell, the C++ code just does a linear scan: https://code.google.com/p/leveldb/source/browse/table/merger.cc#139\n\nhttps://codereview.appspot.com/9118043/diff/5001/leveldb/db/db_test.go\nFile leveldb/db/db_test.go (right):\n\nhttps://codereview.appspot.com/9118043/diff/5001/leveldb/db/db_test.go#newcode143\nleveldb/db/db_test.go:143: // TODO: test all sub-iterators being empty.\nThese TODOs are now done.",
			"disapproval": false,
			"date": "2013-05-08 03:53:14.912630",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/leveldb-go/source/detail?r=47c9ec4eeea3 ***\n\nleveldb/db: concatenating and merging iterators.\n\nR=bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/9118043",
			"disapproval": false,
			"date": "2013-05-08 16:29:05.764890",
			"approval": false
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 9118043: leveldb/db: concatenating and merging iterators.",
	"created": "2013-05-02 12:34:03.829730",
	"patchsets": [
		1,
		2001,
		5001,
		11001,
		17001
	],
	"modified": "2013-05-08 16:29:07.311670",
	"closed": true,
	"issue": 9118043
}