{
	"description": "net/http: remove more garbage from chunk reading\n\nNoticed this while closing tabs. Yesterday I thought I could\nignore this garbage and hope that a fix for issue 2205 handled\nit, but I just realized that's the opposite case,\nstring->[]byte, whereas this is []byte->string.  I'm having a\nhard time convincing myself that an Issue 2205-style fix with\nstatic analysis and faking a string header would be safe in\nall cases without violating the memory model (callee assumes\nfrozen memory; are there non-racy ways it could keep being\nmodified?)",
	"cc": [
		"dsymonds@golang.org",
		"dave@cheney.net",
		"gobot@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"fullung@gmail.com",
		"minux.ma@gmail.com"
	],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6850067/diff/3006/src/pkg/net/http/chunked.go\nFile src/pkg/net/http/chunked.go (right):\n\nhttps://codereview.appspot.com/6850067/diff/3006/src/pkg/net/http/chunked.go#newcode104\nsrc/pkg/net/http/chunked.go:104: return trimTrailingWhitespace(p), nil\nOn 2012/11/20 01:24:22, dsymonds wrote:\n> return bytes.TrimRight(p, \" \\t\\n\\r\"), nil\n> \n> and drop the helpers?\n\nit generates garbage\n\nhttps://codereview.appspot.com/6850067/diff/3006/src/pkg/net/http/chunked_test.go\nFile src/pkg/net/http/chunked_test.go (right):\n\nhttps://codereview.appspot.com/6850067/diff/3006/src/pkg/net/http/chunked_test.go#newcode86\nsrc/pkg/net/http/chunked_test.go:86: }\nOn 2012/11/20 01:24:22, dsymonds wrote:\n> could do with a test that you *can* get an error.\n\nDone.\n\nhttps://codereview.appspot.com/6850067/diff/3006/src/pkg/net/http/httputil/chunked.go\nFile src/pkg/net/http/httputil/chunked.go (right):\n\nhttps://codereview.appspot.com/6850067/diff/3006/src/pkg/net/http/httputil/chunked.go#newcode106\nsrc/pkg/net/http/httputil/chunked.go:106: return trimTrailingWhitespace(p), nil\nOn 2012/11/20 01:24:22, dsymonds wrote:\n> same\n\ngarbage",
			"disapproval": false,
			"date": "2012-11-20 02:30:45.082230",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-11-17 17:43:21.662500",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"dsymonds@golang.org",
				"dave@cheney.net",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello dsymonds@golang.org (cc: dave@cheney.net, gobot@golang.org, golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-20 02:30:55.623600",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"dsymonds@golang.org",
				"dave@cheney.net",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/6850067/diff/3006/src/pkg/net/http/chunked.go\nFile src/pkg/net/http/chunked.go (right):\n\nhttps://codereview.appspot.com/6850067/diff/3006/src/pkg/net/http/chunked.go#newcode104\nsrc/pkg/net/http/chunked.go:104: return trimTrailingWhitespace(p), nil\nOn 2012/11/20 02:30:45, bradfitz wrote:\n> On 2012/11/20 01:24:22, dsymonds wrote:\n> > return bytes.TrimRight(p, \" \\t\\n\\r\"), nil\n> > \n> > and drop the helpers?\n> \n> it generates garbage\n\nUgh. Really? Maybe that should be fixed.",
			"disapproval": false,
			"date": "2012-11-20 03:16:06.662910",
			"approval": true
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Looks pretty reasonable to me. Do you have any benchmark data showing a drop in allocations ?\n\nhttps://codereview.appspot.com/6850067/diff/4005/src/pkg/net/http/chunked.go\nFile src/pkg/net/http/chunked.go (right):\n\nhttps://codereview.appspot.com/6850067/diff/4005/src/pkg/net/http/chunked.go#newcode161\nsrc/pkg/net/http/chunked.go:161: func parseHexUint(v []byte) (n uint64, err error) {\nThe HTTP spec doesn't specify an upper size on the chunk, but I would think it would be reasonable to return an error if len(v) > 8.",
			"disapproval": false,
			"date": "2012-11-19 08:30:53.197630",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello\r\n\r\nOn Tue, Nov 20, 2012 at 9:59 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> build.golang.org looks good... how's your machine different?\r\n\r\nIt's a dual-CPU Xeon E5-2670. It has a tendency to expose test\r\nfailures that build.golang.org doesn't.\r\n\r\nYou can typically get the same effect by running the tests in a loop\r\nwith random GOMAXPROCS on machines with less cores.\r\n\r\n> even with GOMAXPROCS=13, aren't TestFoo funcs run serially?\r\n\r\nI think so.\r\n\r\nRegards\r\n\r\nAlbert\r\n",
			"disapproval": false,
			"date": "2012-11-20 09:02:26.789640",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Nov 19, 2012 at 12:30 AM, <dave@cheney.net> wrote:\r\n\r\n> Looks pretty reasonable to me. Do you have any benchmark data showing a\r\n> drop in allocations ?\r\n>\r\n\r\nNo benchmark, but I can see it:\r\n\r\n-       return string(p), nil\r\n\r\nI'll add a test to prevent regressions, though.\r\n\r\nhttps://codereview.appspot.**com/6850067/diff/4005/src/pkg/**\r\n> net/http/chunked.go<https://codereview.appspot.com/6850067/diff/4005/src/pkg/net/http/chunked.go>\r\n> File src/pkg/net/http/chunked.go (right):\r\n>\r\n> https://codereview.appspot.**com/6850067/diff/4005/src/pkg/**\r\n> net/http/chunked.go#newcode161<https://codereview.appspot.com/6850067/diff/4005/src/pkg/net/http/chunked.go#newcode161>\r\n> src/pkg/net/http/chunked.go:**161: func parseHexUint(v []byte) (n uint64,\r\n> err error) {\r\n> The HTTP spec doesn't specify an upper size on the chunk, but I would\r\n> think it would be reasonable to return an error if len(v) > 8.\r\n>\r\n\r\nWe didn't do that before.  I don't see a big reason to add a restriction...\r\nthere's no attack vector.  We never use it to allocate, only to count down.\r\n",
			"disapproval": false,
			"date": "2012-11-19 16:32:00.610570",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"dsymonds@golang.org",
				"dave@cheney.net",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=14cfbda9e18a ***\n\nnet/http: remove more garbage from chunk reading\n\nNoticed this while closing tabs. Yesterday I thought I could\nignore this garbage and hope that a fix for issue 2205 handled\nit, but I just realized that's the opposite case,\nstring->[]byte, whereas this is []byte->string.  I'm having a\nhard time convincing myself that an Issue 2205-style fix with\nstatic analysis and faking a string header would be safe in\nall cases without violating the memory model (callee assumes\nfrozen memory; are there non-racy ways it could keep being\nmodified?)\n\nR=dsymonds\nCC=dave, gobot, golang-dev\nhttp://codereview.appspot.com/6850067",
			"disapproval": false,
			"date": "2012-11-20 03:50:46.440410",
			"approval": false
		},
		{
			"sender": "fullung@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"fullung@gmail.com",
				"dsymonds@golang.org",
				"dave@cheney.net",
				"gobot@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "--- FAIL: TestChunkReaderAllocs-13 (0.00 seconds)\nchunked_test.go:65: 5 mallocs; want <= 1\nFAIL\n\nin net/http and net/http/httputil",
			"disapproval": false,
			"date": "2012-11-20 07:46:23.039430",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-11-19 17:08:01.393570",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Nov 19, 2012 at 7:16 PM, <dsymonds@golang.org> wrote:\r\n\r\n> LGTM\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.**com/6850067/diff/3006/src/pkg/**\r\n> net/http/chunked.go<https://codereview.appspot.com/6850067/diff/3006/src/pkg/net/http/chunked.go>\r\n> File src/pkg/net/http/chunked.go (right):\r\n>\r\n> https://codereview.appspot.**com/6850067/diff/3006/src/pkg/**\r\n> net/http/chunked.go#newcode104<https://codereview.appspot.com/6850067/diff/3006/src/pkg/net/http/chunked.go#newcode104>\r\n> src/pkg/net/http/chunked.go:**104: return trimTrailingWhitespace(p), nil\r\n> On 2012/11/20 02:30:45, bradfitz wrote:\r\n>\r\n>> On 2012/11/20 01:24:22, dsymonds wrote:\r\n>> > return bytes.TrimRight(p, \" \\t\\n\\r\"), nil\r\n>> >\r\n>> > and drop the helpers?\r\n>>\r\n>\r\n>  it generates garbage\r\n>>\r\n>\r\n> Ugh. Really? Maybe that should be fixed.\r\n>\r\n\r\nI have a TODO in my inbox for that, but debating what would be the least\r\ncontroversial change.\r\n",
			"disapproval": false,
			"date": "2012-11-20 03:37:54.828790",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Nov 20, 2012 at 3:46 PM, <fullung@gmail.com> wrote:\r\n\r\n> --- FAIL: TestChunkReaderAllocs-13 (0.00 seconds)\r\n> chunked_test.go:65: 5 mallocs; want <= 1\r\n> FAIL\r\n>\r\n> in net/http and net/http/httputil\r\n>\r\nReproduced. sent https://codereview.appspot.com/6846081/\r\n",
			"disapproval": false,
			"date": "2012-11-20 09:56:54.785640",
			"approval": false
		},
		{
			"sender": "gobot@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=dsymonds (assigned by bradfitz)",
			"disapproval": false,
			"date": "2012-11-20 01:15:55.058010",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"dsymonds@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"gobot@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6850067/diff/3006/src/pkg/net/http/chunked.go\nFile src/pkg/net/http/chunked.go (right):\n\nhttps://codereview.appspot.com/6850067/diff/3006/src/pkg/net/http/chunked.go#newcode104\nsrc/pkg/net/http/chunked.go:104: return trimTrailingWhitespace(p), nil\nreturn bytes.TrimRight(p, \" \\t\\n\\r\"), nil\n\nand drop the helpers?\n\nhttps://codereview.appspot.com/6850067/diff/3006/src/pkg/net/http/chunked_test.go\nFile src/pkg/net/http/chunked_test.go (right):\n\nhttps://codereview.appspot.com/6850067/diff/3006/src/pkg/net/http/chunked_test.go#newcode86\nsrc/pkg/net/http/chunked_test.go:86: }\ncould do with a test that you *can* get an error.\n\nhttps://codereview.appspot.com/6850067/diff/3006/src/pkg/net/http/httputil/chunked.go\nFile src/pkg/net/http/httputil/chunked.go (right):\n\nhttps://codereview.appspot.com/6850067/diff/3006/src/pkg/net/http/httputil/chunked.go#newcode106\nsrc/pkg/net/http/httputil/chunked.go:106: return trimTrailingWhitespace(p), nil\nsame\n\nhttps://codereview.appspot.com/6850067/diff/3006/src/pkg/net/http/httputil/chunked_test.go\nFile src/pkg/net/http/httputil/chunked_test.go (right):\n\nhttps://codereview.appspot.com/6850067/diff/3006/src/pkg/net/http/httputil/chunked_test.go#newcode88\nsrc/pkg/net/http/httputil/chunked_test.go:88: }\nsame",
			"disapproval": false,
			"date": "2012-11-20 01:24:22.680120",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "build.golang.org looks good... how's your machine different?\r\n\r\neven with GOMAXPROCS=13, aren't TestFoo funcs run serially?\r\n\r\nOn Mon, Nov 19, 2012 at 11:46 PM, <fullung@gmail.com> wrote:\r\n\r\n> --- FAIL: TestChunkReaderAllocs-13 (0.00 seconds)\r\n> chunked_test.go:65: 5 mallocs; want <= 1\r\n> FAIL\r\n>\r\n> in net/http and net/http/httputil\r\n>\r\n> https://codereview.appspot.**com/6850067/<https://codereview.appspot.com/6850067/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-11-20 07:59:08.180700",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 6850067: net/http: remove more garbage from chunk reading",
	"created": "2012-11-17 17:43:05.084820",
	"patchsets": [
		1,
		2001,
		4005,
		3006,
		11003,
		4
	],
	"modified": "2012-11-20 09:56:54.837330",
	"closed": true,
	"issue": 6850067
}