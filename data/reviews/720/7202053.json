{
	"description": "lib9/main.c: don't show the crash dialog on windows\nFixes issue 3202. (Or rather, work around issue 3202)",
	"cc": [
		"alex.brainman@gmail.com",
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello alex.brainman@gmail.com, rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-01-25 00:13:50.885970",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Jan 25, 2013 at 8:25 AM, <alex.brainman@gmail.com> wrote:\r\n\r\n> I have no computer here. I will look at it next week. Sorry.\r\n>\r\nsure, i can wait. :)\r\n",
			"disapproval": false,
			"date": "2013-01-25 00:27:49.603430",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "if necessary, we can catch the most common error by adding:\r\nsignal(SIGBUS, defaulthandler);\r\nsignal(SIGSEGV, defaulthandler);\r\nto main().\r\n\r\nbecause this change will completely stop the \"Your application has crashed\"\r\ndialog from opening so if the program does trigger that, it will exit\r\nsilently\r\n(if the signal is not being caught)\r\n\r\nso we can add a defaulthandler() that just print(\"%s: fault\", argv0); and\r\nthen\r\nexit to avoid the program exit silently.\r\n\r\nalso, should i apply the same change to cmd/dist?\r\n",
			"disapproval": false,
			"date": "2013-01-25 00:20:49.138580",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I have no computer here. I will look at it next week. Sorry.\n\nAlex",
			"disapproval": false,
			"date": "2013-01-25 00:25:45.388430",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nThank you very much.\n\nAlex\n\nOn 2013/01/25 00:20:49, minux wrote:\n> ...\n> \n> so we can add a defaulthandler() that just print(\"%s: fault\", argv0); and\n> then\n> exit to avoid the program exit silently.\n\nI am not sure about cost and benefits. The program will exit with an error exit code, so it is not silent as such. On the other hand, handlers means extra code to maintain. What can you add in handler above error exit code? What is allowed to do inside of handler? Can you print there?\n\n> \n> also, should i apply the same change to cmd/dist?\n\nI wouldn't do it. It is simple enough and rarely changed. Now that you have found the way, we could always add it when it hurts. :-)\n\nhttps://codereview.appspot.com/7202053/diff/4002/src/lib9/main.c\nFile src/lib9/main.c (right):\n\nhttps://codereview.appspot.com/7202053/diff/4002/src/lib9/main.c#newcode40\nsrc/lib9/main.c:40: SetErrorMode(SEM_FAILCRITICALERRORS | SEM_NOGPFAULTERRORBOX | SEM_NOOPENFILEERRORBOX);\nShould you do a \"double-shuffle\" http://blogs.msdn.com/b/oldnewthing/archive/2004/07/27/198410.aspx here?",
			"disapproval": false,
			"date": "2013-01-30 01:54:25.296710",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sun, Feb 3, 2013 at 5:38 AM, <alex.brainman@gmail.com> wrote:\r\n\r\n> https://codereview.appspot.**com/7202053/diff/10002/src/**\r\n> lib9/main.c#newcode46<https://codereview.appspot.com/7202053/diff/10002/src/lib9/main.c#newcode46>\r\n> src/lib9/main.c:46: signal(SIGBUS, crashhandler);\r\n> From signal doco:\r\n>\r\n> The list below summarizes restrictions that determine which functions\r\n> you can use in your signal-handler routine.\r\n> Do not issue low-level or STDIO.H I/O routines (such as printf and\r\n> fread).\r\n> Do not call heap routines or any routine that uses the heap routines\r\n> (such as malloc, _strdup, and _putenv). See malloc for more information.\r\n> Do not use any function that generates a system call (e.g., _getcwd,\r\n> time).\r\n> Do not use longjmp unless the interrupt is caused by a floating-point\r\n> exception (i.e., sig is SIGFPE). In this case, first reinitialize the\r\n> floating-point package with a call to _fpreset.\r\n> Do not use any overlay routines.\r\n>\r\n> Do we want to take the risk?\r\n>\r\ni think we could take the risk to provide some info. to the user, and\r\nthis's what\r\nwe already do for cmd/gc.\r\n\r\nnot to mention the fact that most windows user don't have the habit of echo\r\n%errorlevel% after some mysterious command failure (without the message\r\nthe user might not even know that the command failed).\r\n",
			"disapproval": false,
			"date": "2013-02-02 21:54:04.328670",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I am fine with that, if you see it works on your computer. I don't have one now to check.\n\nAlex",
			"disapproval": false,
			"date": "2013-02-02 22:06:14.117590",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7202053/diff/10002/src/lib9/main.c\nFile src/lib9/main.c (right):\n\nhttps://codereview.appspot.com/7202053/diff/10002/src/lib9/main.c#newcode46\nsrc/lib9/main.c:46: signal(SIGBUS, crashhandler);\nFrom signal doco:\n\nThe list below summarizes restrictions that determine which functions you can use in your signal-handler routine.\nDo not issue low-level or STDIO.H I/O routines (such as printf and fread).\nDo not call heap routines or any routine that uses the heap routines (such as malloc, _strdup, and _putenv). See malloc for more information.\nDo not use any function that generates a system call (e.g., _getcwd, time).\nDo not use longjmp unless the interrupt is caused by a floating-point exception (i.e., sig is SIGFPE). In this case, first reinitialize the floating-point package with a call to _fpreset.\nDo not use any overlay routines.\n\nDo we want to take the risk?",
			"disapproval": false,
			"date": "2013-02-02 21:38:24.236000",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL.\n\nOn 2013/01/30 01:54:25, brainman wrote:\n> On 2013/01/25 00:20:49, minux wrote:\n> > ...\n> > \n> > so we can add a defaulthandler() that just print(\"%s: fault\", argv0); and\n> > then\n> > exit to avoid the program exit silently.\n> \n> I am not sure about cost and benefits. The program will exit with an error exit\n> code, so it is not silent as such. On the other hand, handlers means extra code\n> to maintain. What can you add in handler above error exit code? What is allowed\n> to do inside of handler? Can you print there?\nI've mirrored what we do for cmd/gc for crashes. \n> https://codereview.appspot.com/7202053/diff/4002/src/lib9/main.c#newcode40\n> src/lib9/main.c:40: SetErrorMode(SEM_FAILCRITICALERRORS | SEM_NOGPFAULTERRORBOX\n> | SEM_NOOPENFILEERRORBOX);\n> Should you do a \"double-shuffle\"\n> http://blogs.msdn.com/b/oldnewthing/archive/2004/07/27/198410.aspx here?\nDone.",
			"disapproval": false,
			"date": "2013-02-02 17:26:09.896760",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"minux.ma@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-02-02 21:28:06.197040",
			"approval": true
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"minux.ma@gmail.com",
				"alex.brainman@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=c23760174a83 ***\n\nlib9/main.c: don't show the crash dialog on windows\nFixes issue 3202. (Or rather, work around issue 3202)\n\nR=alex.brainman, rsc\nCC=golang-dev\nhttps://codereview.appspot.com/7202053",
			"disapproval": false,
			"date": "2013-02-02 22:11:41.245030",
			"approval": false
		}
	],
	"owner_email": "minux.ma@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "minux",
	"subject": "code review 7202053: lib9/main.c: don't show the crash dialog on windows",
	"created": "2013-01-25 00:10:32.542720",
	"patchsets": [
		1,
		2001,
		4002,
		10001,
		10002,
		18001,
		10003
	],
	"modified": "2013-02-02 22:11:46.909340",
	"closed": true,
	"issue": 7202053
}