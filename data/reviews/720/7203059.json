{
	"description": "net/url: better path resolution\r\n\r\nThis includes a simplified resolvePath function and tests for all normal and abnormal path resolution examples described in RFC 3986, sections 5.4.1 and 5.4.2 [1]. Some of those examples failed before (see http://play.golang.org/p/F0ApSaXniv).\r\n\r\nAlso, parsing a reference \"//foo\" now works as expected. It was treated as an absolute path with very weird results (see http://play.golang.org/p/089b-_xoNe).\r\n\r\nDuring path resolution, all dot segments are removed as described by the RFC.\r\n\r\nA few existing tests had to be changed because they expected the wrong output.\r\n\r\nFixes issue 4700.\r\n\r\nFixes issue 4706.\r\n\r\n[1] http://tools.ietf.org/html/rfc3986#section-5.4.1",
	"cc": [
		"rsc@golang.org",
		"adg@golang.org",
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "rodrigo.moraes@gmail.com",
			"recipients": [
				"rodrigo.moraes@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/01/31 17:11:43, rsc wrote:\n> This CL was not created using the standard hg code review tools. Please do that.\n\nNow it is, sorry. I initially created it using the standard tool, but was confused about how to send new patch sets and ended using the codereview default script.",
			"disapproval": false,
			"date": "2013-01-31 17:58:32.927320",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rodrigo.moraes@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This CL was not created using the standard hg code review tools. Please do that.",
			"disapproval": false,
			"date": "2013-01-31 17:11:43.323070",
			"approval": false
		},
		{
			"sender": "rodrigo.moraes@gmail.com",
			"recipients": [
				"rodrigo.moraes@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, adg@golang.org, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-01-31 17:38:21.676030",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"rodrigo.moraes@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url.go\nFile src/pkg/net/url/url.go (right):\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url.go#newcode598\nsrc/pkg/net/url/url.go:598: return base\nreturn \"\"\n(just to be really explicit)\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url.go#newcode604\nsrc/pkg/net/url/url.go:604: for k, v := range src {\ns/k/i/\n(it's an index, not a key)\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url_test.go\nFile src/pkg/net/url/url_test.go (right):\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url_test.go#newcode633\nsrc/pkg/net/url/url_test.go:633: t.Errorf(\"Didn't expect an error from Parse wrapper parsing an empty string.\")\nt.Errorf(\"unexpected error parsing empty string: %v\", err)\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url_test.go#newcode684\nsrc/pkg/net/url/url_test.go:684: t.Errorf(\"Didn't expect an error from Parse wrapper parsing an empty string.\")\nditto\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url_test.go#newcode746\nsrc/pkg/net/url/url_test.go:746: t.Fatalf(\"Expected URL to parse: %q, got error: %v\", url, err)\n\"Parse(%q) returned error: %v\", url, err\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url_test.go#newcode751\nsrc/pkg/net/url/url_test.go:751: t.Errorf(\"Error resolving %q + %q: %v\", url, test.ref, err)\n\"Base: %q Parse(%q) return error: %v\", url, test.ref, err)\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url_test.go#newcode756\nsrc/pkg/net/url/url_test.go:756: t.Errorf(\"Resolving %q + %q != %q; got %q\", url, test.ref, test.expected, urlStr)\nt.Errorf(\"%q + %q == %q, want  %q\", url, test.ref, urlStr, test.expected)",
			"disapproval": false,
			"date": "2013-02-04 01:33:40.064750",
			"approval": false
		},
		{
			"sender": "rodrigo.moraes@gmail.com",
			"recipients": [
				"rodrigo.moraes@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, adg@golang.org, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-04 17:22:33.634570",
			"approval": false
		},
		{
			"sender": "rodrigo.moraes@gmail.com",
			"recipients": [
				"rodrigo.moraes@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Applied all suggestions. Please take another look.\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url.go\nFile src/pkg/net/url/url.go (right):\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url.go#newcode328\nsrc/pkg/net/url/url.go:328: // Special case: self-reference\nHandled by parse() as suggested.\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url.go#newcode334\nsrc/pkg/net/url/url.go:334: if u == \"\" {\nDitto.\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url.go#newcode365\nsrc/pkg/net/url/url.go:365: if rawurl == \"\" {\nDone.\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url.go#newcode587\nsrc/pkg/net/url/url.go:587: if ref != \"\" {\nDone.\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url.go#newcode598\nsrc/pkg/net/url/url.go:598: return base\nDone.\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url.go#newcode603\nsrc/pkg/net/url/url.go:603: size := -1\nPerfectly clean. Thanks.\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url.go#newcode604\nsrc/pkg/net/url/url.go:604: for k, v := range src {\nNo longer relevant. See previous comment.\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url.go#newcode650\nsrc/pkg/net/url/url.go:650: if url.Scheme != \"\" || url.Host != \"\" || url.User != nil {\nAgreed. I made the difference clear.\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url.go#newcode663\nsrc/pkg/net/url/url.go:663: if url.Fragment == \"\" {\nYou are right. Missed this one; added a test now.\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url.go#newcode667\nsrc/pkg/net/url/url.go:667: if url.Opaque != \"\" {\nMoved Opaque checking above Path checking. Opaque is now tested for all ResolveReference tests.\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url_test.go\nFile src/pkg/net/url/url_test.go (right):\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url_test.go#newcode631\nsrc/pkg/net/url/url_test.go:631: _, err := base.Parse(\"\")\nI removed these tests because they are covered by TestResolveReference.\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url_test.go#newcode633\nsrc/pkg/net/url/url_test.go:633: t.Errorf(\"Didn't expect an error from Parse wrapper parsing an empty string.\")\nRemoved these tests. See previous comment.\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url_test.go#newcode682\nsrc/pkg/net/url/url_test.go:682: _, err := base.Parse(\"\")\nDitto.\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url_test.go#newcode684\nsrc/pkg/net/url/url_test.go:684: t.Errorf(\"Didn't expect an error from Parse wrapper parsing an empty string.\")\nDitto.\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url_test.go#newcode689\nsrc/pkg/net/url/url_test.go:689: type rfcTest struct {\nI merged this table with resolveReferenceTests.\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url_test.go#newcode746\nsrc/pkg/net/url/url_test.go:746: t.Fatalf(\"Expected URL to parse: %q, got error: %v\", url, err)\nMoved the whole table to be tested by TestResolveReference, so this function no longer exists.\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url_test.go#newcode751\nsrc/pkg/net/url/url_test.go:751: t.Errorf(\"Error resolving %q + %q: %v\", url, test.ref, err)\nDitto.\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url_test.go#newcode756\nsrc/pkg/net/url/url_test.go:756: t.Errorf(\"Resolving %q + %q != %q; got %q\", url, test.ref, test.expected, urlStr)\nDitto.",
			"disapproval": false,
			"date": "2013-02-04 11:12:53.390620",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rodrigo.moraes@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please add tests for the cases I asked about below, assuming we can figure out what the correct answers are. Thanks.\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url.go\nFile src/pkg/net/url/url.go (right):\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url.go#newcode328\nsrc/pkg/net/url/url.go:328: // Special case: self-reference\nIt seems like if you delete this (lines 328-331) then the code you've introduced below will handle it fine.\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url.go#newcode334\nsrc/pkg/net/url/url.go:334: if u == \"\" {\nIt would be nice to eliminate this special case too. It seems like you could change parse. See next comment.\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url.go#newcode365\nsrc/pkg/net/url/url.go:365: if rawurl == \"\" {\nI think you can change this to\n\nif rawurl == \"\" && viaRequest {\n\nand then the special cases above disappear.\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url.go#newcode587\nsrc/pkg/net/url/url.go:587: if ref != \"\" {\nI think it would help comprehension here to say:\n\nvar full string\nif ...\n    full = \n\ninstead of reassigning base to be something more than the base.\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url.go#newcode603\nsrc/pkg/net/url/url.go:603: size := -1\nsize == len(dst)-1, so you might as well use that instead of maintaining two variables in parallel. The last logic is really just making sure that there's a final slash when the last element was '.' or '..'. Instead of checking on every element, check once at the end. If you apply both those simplifications you get:\n\nvar dst []string\nsrc := strings.Split(base, \"/\")\nfor _, elem := range src {\n    switch elem {\n    case \".\":\n        // drop\n    case \"..\":\n        if len(dst) > 0 {\n            dst = dst[:len(dst)-1]\n        }\n    default:\n        dst = append(dst, elem)\n    }\n}\nif last := src[len(src)-1]; last == \".\" || last == \"..\" {\n    // Add final slash to the joined path.\n    dst = append(dst, \"/\")\n}\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url.go#newcode650\nsrc/pkg/net/url/url.go:650: if url.Scheme != \"\" || url.Host != \"\" || url.User != nil {\nIt would be nice not to have to track what changes and what doesn't through this code. When you're using url to refer to the original unmodified content of ref, please write ref.\n\nif ref.Scheme != \"\" || ref.Host != \"\" || ref.User != nil {\n    if ref.Scheme == \"\" {\n        url.Scheme = u.Scheme\n    }\n    url.Path = resolvePath(ref.Path, \"\")\n    return &url\n}\n\nand so on throughout the function.\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url.go#newcode663\nsrc/pkg/net/url/url.go:663: if url.Fragment == \"\" {\nIt seems like this say that \n\nParse(\"/abc#foo\").ResolveReference(\"?query\") = \"/abc?query#foo\".\nThat seems wrong to me. Should this if be inside the previous one?\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url.go#newcode667\nsrc/pkg/net/url/url.go:667: if url.Opaque != \"\" {\nI don't understand how this can happen, but assuming it can, should this be above the previous if? It seems to say that\n\nParse(\"/abc?x=y#foo\").ResolveReference(\"OPAQUE\") = \"OPAQUE?x=y#foo\".\n\nexcept that I have no idea what actual URL to substitute for \"OPAQUE\"\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url_test.go\nFile src/pkg/net/url/url_test.go (right):\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url_test.go#newcode631\nsrc/pkg/net/url/url_test.go:631: _, err := base.Parse(\"\")\nmustParse(\"\")\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url_test.go#newcode682\nsrc/pkg/net/url/url_test.go:682: _, err := base.Parse(\"\")\nmustParse(\"\")\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url_test.go#newcode689\nsrc/pkg/net/url/url_test.go:689: type rfcTest struct {\nPlease move tables to top level. You don't need the type at all.\n\nvar rfc3986Tests = []struct{\n    ref string\n    expected string\n}{\n    ...\n}\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url_test.go#newcode746\nsrc/pkg/net/url/url_test.go:746: t.Fatalf(\"Expected URL to parse: %q, got error: %v\", url, err)\nOn 2013/02/04 01:33:40, adg wrote:\n> \"Parse(%q) returned error: %v\", url, err\n\nor even just\n\nParse(%q): %v\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url_test.go#newcode751\nsrc/pkg/net/url/url_test.go:751: t.Errorf(\"Error resolving %q + %q: %v\", url, test.ref, err)\nOn 2013/02/04 01:33:40, adg wrote:\n> \"Base: %q Parse(%q) return error: %v\", url, test.ref, err)\n\nor even\n\nURL(%q).Parse(%q): %v\n\nhttps://codereview.appspot.com/7203059/diff/14001/src/pkg/net/url/url_test.go#newcode756\nsrc/pkg/net/url/url_test.go:756: t.Errorf(\"Resolving %q + %q != %q; got %q\", url, test.ref, test.expected, urlStr)\nOn 2013/02/04 01:33:40, adg wrote:\n> t.Errorf(\"%q + %q == %q, want  %q\", url, test.ref, urlStr, test.expected)\n\nURL(%q).Parse(%q) = %q, want %q\n\nTo someone not familiar with this test (i.e. someone introducing a compiler bug) the error looks like it is just adding two strings, which is not what is going on here.",
			"disapproval": false,
			"date": "2013-02-04 04:45:40.591570",
			"approval": false
		},
		{
			"sender": "rodrigo.moraes@gmail.com",
			"recipients": [
				"rodrigo.moraes@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, adg@golang.org, bradfitz@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-02-04 11:12:26.956370",
			"approval": false
		},
		{
			"sender": "rodrigo.moraes@gmail.com",
			"recipients": [
				"rodrigo.moraes@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Two notes:\n\n- It seems that TestResolveReferenceOpaque isn't testing anything different that is not covered by TestResolveReference. Can I remove it?\n\n- Should I update the docs from ResolveReference to point to RFC 3986 instead of 2396?",
			"disapproval": false,
			"date": "2013-02-04 12:56:43.470050",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rodrigo.moraes@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nSorry for the delay.",
			"disapproval": false,
			"date": "2013-03-11 19:02:42.226450",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rodrigo.moraes@gmail.com",
				"rsc@golang.org",
				"adg@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=c890576b82a1 ***\n\nnet/url: better path resolution\n\nThis includes a simplified resolvePath function and tests for all normal and abnormal path resolution examples described in RFC 3986, sections 5.4.1 and 5.4.2 [1]. Some of those examples failed before (see http://play.golang.org/p/F0ApSaXniv).\n\nAlso, parsing a reference \"//foo\" now works as expected. It was treated as an absolute path with very weird results (see http://play.golang.org/p/089b-_xoNe).\n\nDuring path resolution, all dot segments are removed as described by the RFC.\n\nA few existing tests had to be changed because they expected the wrong output.\n\nFixes issue 4700.\n\nFixes issue 4706.\n\n[1] http://tools.ietf.org/html/rfc3986#section-5.4.1\n\nR=rsc, adg, bradfitz\nCC=golang-dev\nhttps://codereview.appspot.com/7203059\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2013-03-11 19:03:21.535930",
			"approval": false
		}
	],
	"owner_email": "rodrigo.moraes@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "rodrigo.moraes",
	"subject": "code review 7203059: net/url: better path resolution",
	"created": "2013-01-25 06:26:14.658310",
	"patchsets": [
		1,
		3003,
		8001,
		9001,
		12003,
		14001,
		21001,
		21002
	],
	"modified": "2013-03-11 20:27:52.767660",
	"closed": true,
	"issue": 7203059
}