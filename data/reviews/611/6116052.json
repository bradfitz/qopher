{
	"description": "go.crypto/ssh: prevent concurrent reads and concurrent writes over the same agent connection\n\nminor fix for v01 cert parsing when algo is not supported",
	"cc": [
		"golang-dev@googlegroups.com",
		"agl@golang.org",
		"dave@cheney.net"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"jmpittman@google.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. There are a few nits, but you're welcome to take them or leave them.\n\nhttp://codereview.appspot.com/6116052/diff/9001/ssh/agent.go\nFile ssh/agent.go (right):\n\nhttp://codereview.appspot.com/6116052/diff/9001/ssh/agent.go#newcode132\nssh/agent.go:132: // mutex for preventing concurrent access to the agent.\nNon exported members are typically not described in comments. That is to say, godoc will describe this type as\n\ntype AgentClient struct {\n   // unexported member values\n}\n\nSo maybe the last sentence should be a comment on the struct members.\n\nhttp://codereview.appspot.com/6116052/diff/9001/ssh/agent.go#newcode140\nssh/agent.go:140: func NewAgentClient(conn io.ReadWriter) *AgentClient {\nnit: maybe call it rw, not conn, as the interface type doesn't imply it's a net.Conn.",
			"disapproval": false,
			"date": "2012-04-26 10:51:05.323516",
			"approval": true
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"jmpittman@google.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6116052/diff/3003/ssh/agent.go\nFile ssh/agent.go (right):\n\nhttp://codereview.appspot.com/6116052/diff/3003/ssh/agent.go#newcode132\nssh/agent.go:132: // mutex for handling read and write locking to the agent.\n\"and a mutex for preventing concurrent access to the agent\"\n\nhttp://codereview.appspot.com/6116052/diff/3003/ssh/agent.go#newcode148\nssh/agent.go:148: // Lock sendAndReceive since the agent will not differentiate between\nI think I find this comment more confusing than helpful I'm afraid. Maybe:\n\n// ac.mu prevents multiple, concurrent requests. Since the agent is typically on the same machine, we don't attempt to pipeline the requests.",
			"disapproval": false,
			"date": "2012-04-25 17:39:50.924905",
			"approval": false
		},
		{
			"sender": "jmpittman@google.com",
			"recipients": [
				"jmpittman@google.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, agl@golang.org, dave@cheney.net (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-26 20:14:28.173851",
			"approval": false
		},
		{
			"sender": "jmpittman@google.com",
			"recipients": [
				"jmpittman@google.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks for the quick response!\n\nhttp://codereview.appspot.com/6116052/diff/3003/ssh/agent.go\nFile ssh/agent.go (right):\n\nhttp://codereview.appspot.com/6116052/diff/3003/ssh/agent.go#newcode132\nssh/agent.go:132: // mutex for handling read and write locking to the agent.\nOn 2012/04/25 17:39:51, agl1 wrote:\n> \"and a mutex for preventing concurrent access to the agent\"\n\nDone.\n\nhttp://codereview.appspot.com/6116052/diff/3003/ssh/agent.go#newcode148\nssh/agent.go:148: // Lock sendAndReceive since the agent will not differentiate between\nOn 2012/04/25 17:39:51, agl1 wrote:\n> I think I find this comment more confusing than helpful I'm afraid. Maybe:\n> \n> // ac.mu prevents multiple, concurrent requests. Since the agent is typically on\n> the same machine, we don't attempt to pipeline the requests.\n\nDone.",
			"disapproval": false,
			"date": "2012-04-25 17:45:07.968039",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"jmpittman@google.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\n\nhttp://codereview.appspot.com/6116052/diff/2002/ssh/agent.go\nFile ssh/agent.go (right):\n\nhttp://codereview.appspot.com/6116052/diff/2002/ssh/agent.go#newcode135\nssh/agent.go:135: mu sync.Mutex\nYup, this is what I meant sorry for being obtuse.",
			"disapproval": false,
			"date": "2012-04-26 21:08:56.349189",
			"approval": true
		},
		{
			"sender": "jmpittman@google.com",
			"recipients": [
				"jmpittman@google.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This CL is up for discussion.\n\n@agl1, yes, I did run into a situation with a client that establishes connections to multiple hosts simultaneously.  I cached the public keys/certs once they are pulled from the agent, but the signing request is unique to each host.  I could also use a different ClientConfig and different AgentClient for each host, but felt it was mostly unnecessary at the time.",
			"disapproval": false,
			"date": "2012-04-25 17:40:05.454489",
			"approval": false
		},
		{
			"sender": "jmpittman@google.com",
			"recipients": [
				"jmpittman@google.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, agl@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-04-25 17:44:48.273906",
			"approval": false
		},
		{
			"sender": "jmpittman@google.com",
			"recipients": [
				"jmpittman@google.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-04-26 22:24:17.191858",
			"approval": false
		},
		{
			"sender": "jmpittman@google.com",
			"recipients": [
				"jmpittman@google.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.crypto",
			"disapproval": false,
			"date": "2012-04-25 17:31:40.684328",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"jmpittman@google.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. Will land once others have had a chance to take a look.",
			"disapproval": false,
			"date": "2012-04-25 17:46:56.211725",
			"approval": true
		},
		{
			"sender": "jmpittman@google.com",
			"recipients": [
				"jmpittman@google.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6116052/diff/9001/ssh/agent.go\nFile ssh/agent.go (right):\n\nhttp://codereview.appspot.com/6116052/diff/9001/ssh/agent.go#newcode132\nssh/agent.go:132: // mutex for preventing concurrent access to the agent.\nPTAL.  I think I understand what you meant.\n\nOn 2012/04/26 10:51:05, dfc wrote:\n> Non exported members are typically not described in comments. That is to say,\n> godoc will describe this type as\n> \n> type AgentClient struct {\n>    // unexported member values\n> }\n> \n> So maybe the last sentence should be a comment on the struct members.\n\nhttp://codereview.appspot.com/6116052/diff/9001/ssh/agent.go#newcode140\nssh/agent.go:140: func NewAgentClient(conn io.ReadWriter) *AgentClient {\nJust change here or also in the AgentClient struct?\n\nOn 2012/04/26 10:51:05, dfc wrote:\n> nit: maybe call it rw, not conn, as the interface type doesn't imply it's a\n> net.Conn.",
			"disapproval": false,
			"date": "2012-04-26 20:14:48.200167",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"jmpittman@google.com",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=b0c630abc33d&repo=crypto ***\n\ngo.crypto/ssh: prevent concurrent reads and concurrent writes over the same agent connection\n\nminor fix for v01 cert parsing when algo is not supported\n\nR=golang-dev, agl, dave\nCC=golang-dev\nhttp://codereview.appspot.com/6116052\n\nCommitter: Adam Langley <agl@golang.org>",
			"disapproval": false,
			"date": "2012-04-26 21:14:05.457191",
			"approval": false
		}
	],
	"owner_email": "jmpittman@google.com",
	"private": false,
	"base_url": "",
	"owner": "jmpittman",
	"subject": "code review 6116052: go.crypto/ssh: prevent concurrent reads and concurrent ...",
	"created": "2012-04-25 17:21:53.497465",
	"patchsets": [
		1,
		2001,
		3003,
		9001,
		2002
	],
	"modified": "2012-04-26 22:24:20.066925",
	"closed": true,
	"issue": 6116052
}