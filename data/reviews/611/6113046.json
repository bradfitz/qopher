{
	"description": "crypto/rand: use io.ReadFull in test\n\nOn Solaris versions before Solaris 11, the kernel will not\nreturn more than 1040 on a single read from /dev/urandom.",
	"cc": [
		"golang-dev@googlegroups.com",
		"agl@golang.org",
		"bradfitz@golang.org",
		"rsc@golang.org",
		"iant@google.com",
		"dchest@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "agl@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/04/24 16:57:20, bradfitz wrote:\n> LGTM but I'm wondering if this fix is in the wrong place.\n> \n> What broke?  Read isn't required to fully read.\n\nIn the standard library it looks like we always managed to wrap ReadFull around it. But the danger of someone forgetting and breaking in a really nasty fashion would seem to make this a good idea. There's no utility in a partial read from urandom.",
			"disapproval": false,
			"date": "2012-04-24 17:03:05.352197",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-04-24 16:53:13.226180",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Russ Cox <rsc@golang.org> writes:\n\n> I think we should keep from making this guarantee.\n> If we make the guarantee and programs then depend on it,\n> things will break mysteriously later.  I know of at least one\n> other implementation of crypto/rand Reader that does not\n> guarantee to fill the entire buffer.\n\nSounds reasonable.\n\nPTAL.\n\nIan\n",
			"disapproval": false,
			"date": "2012-04-24 20:21:43.370746",
			"approval": false
		},
		{
			"sender": "agl@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-04-24 16:56:05.430068",
			"approval": true
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Russ Cox <rsc@golang.org> writes:\n\n> I don't believe this is correct.\n> Things that read from rand.Reader should treat it\n> like any other reader and expect the possibility\n> of partial results.\n\nBut what is the point of a partial read here?  If we don't make this\nchange, then in effect the only correct use of a rand.Reader is via\nio.ReadFull.\n\nHowever, I'm fine either way.  What broke is rand_test.go, which assumes\nit can Read as much as it wants.  I can change that to use ReadFull.\n\nIan\n",
			"disapproval": false,
			"date": "2012-04-24 17:17:02.506146",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but I'm wondering if this fix is in the wrong place.\n\nWhat broke?  Read isn't required to fully read.\n\n\nOn Tue, Apr 24, 2012 at 9:53 AM,  <iant@golang.org> wrote:\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> crypto/rand: use io.ReadFull when reading from /dev/urandom\n>\n> On Solaris versions before Solaris 11, the kernel will not\n> return more than 1040 on a single read from /dev/urandom.\n>\n> Please review this at http://codereview.appspot.com/6113046/\n>\n> Affected files:\n> \u00a0M src/pkg/crypto/rand/rand_unix.go\n>\n>\n> Index: src/pkg/crypto/rand/rand_unix.go\n> ===================================================================\n> --- a/src/pkg/crypto/rand/rand_unix.go\n> +++ b/src/pkg/crypto/rand/rand_unix.go\n> @@ -41,7 +41,7 @@\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0r.f = bufio.NewReader(f)\n> \u00a0 \u00a0 \u00a0 \u00a0}\n> - \u00a0 \u00a0 \u00a0 return r.f.Read(b)\n> + \u00a0 \u00a0 \u00a0 return io.ReadFull(r.f, b)\n> \u00a0}\n>\n> \u00a0// Alternate pseudo-random implementation for use on\n>\n>\n",
			"disapproval": false,
			"date": "2012-04-24 16:57:20.104726",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't believe this is correct.\nThings that read from rand.Reader should treat it\nlike any other reader and expect the possibility\nof partial results.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-04-24 17:06:13.710362",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I agree that it's not correct, but I could see iant/agl's argument\r\nthat it's crypto, so some safety-by-default is warranted.  Especially\r\nif this is already the existing behavior on Linux/Darwin--- people\r\nmight be assuming it, then get bitten on other operating systems.\r\n\r\nOn Tue, Apr 24, 2012 at 9:59 AM, Russ Cox <rsc@golang.org> wrote:\r\n> I don't believe this is correct.\r\n> Things that read from rand.Reader should treat it\r\n> like any other reader and expect the possibility\r\n> of partial results.\r\n>\r\n> Russ\r\n",
			"disapproval": false,
			"date": "2012-04-24 17:13:10.208887",
			"approval": false
		},
		{
			"sender": "dchest@gmail.com",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"iant@google.com",
				"dchest@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/04/24 17:03:05, agl1 wrote:\n> In the standard library it looks like we always managed to wrap ReadFull around\n> it.\n\nNot always:\n\nhttp://codereview.appspot.com/4316057/\n\nBut it wasn't considered a problem at that time:\n\nhttps://groups.google.com/d/msg/golang-nuts/eFS5GN-en3w/Gs6e1JFnyw8J\n\nIt this \"rand.Reader is a bufio.Reader, and it\nbehaves like io.ReadFull on ordinary reads.\" still true?",
			"disapproval": false,
			"date": "2012-04-24 19:23:57.776072",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"iant@google.com",
				"dchest@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-04-25 01:54:32.140597",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Apr 24, 2012 at 15:23,  <dchest@gmail.com> wrote:\r\n> It this \"rand.Reader is a bufio.Reader, and it\r\n> behaves like io.ReadFull on ordinary reads.\" still true?\r\n\r\nNo, that was a long time ago.\r\n",
			"disapproval": false,
			"date": "2012-04-24 19:28:05.222683",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I think we should keep from making this guarantee.\r\nIf we make the guarantee and programs then depend on it,\r\nthings will break mysteriously later.  I know of at least one\r\nother implementation of crypto/rand Reader that does not\r\nguarantee to fill the entire buffer.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-04-24 19:31:59.026727",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"agl@golang.org",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"iant@google.com",
				"dchest@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=afbc9185a699 ***\n\ncrypto/rand: use io.ReadFull in test\n\nOn Solaris versions before Solaris 11, the kernel will not\nreturn more than 1040 on a single read from /dev/urandom.\n\nR=golang-dev, agl, bradfitz, rsc, iant, dchest\nCC=golang-dev\nhttp://codereview.appspot.com/6113046",
			"disapproval": false,
			"date": "2012-04-25 04:36:54.664210",
			"approval": false
		}
	],
	"owner_email": "iant@golang.org",
	"private": false,
	"base_url": "",
	"owner": "iant",
	"subject": "code review 6113046: crypto/rand: use io.ReadFull when reading from /dev/urandom",
	"created": "2012-04-24 16:52:50.746901",
	"patchsets": [
		1,
		6002,
		5002
	],
	"modified": "2012-04-25 04:36:57.093701",
	"closed": true,
	"issue": 6113046
}