{
	"description": "net/url: use strings.Index instead of a loop\n\nWe already depend on strings in this file, so use it.\n\nPlus strings.Index will be faster than a manual loop\nonce issue 3751 is finished.",
	"cc": [
		"golang-dev@googlegroups.com",
		"khr@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-03-28 20:33:45.712420",
			"approval": false
		},
		{
			"sender": "khr@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nOn Thursday, March 28, 2013 1:33:45 PM UTC-7, Brad Fitzpatrick wrote:\r\n>\r\n> Reviewers: golang-dev1, \r\n>\r\n> Message: \r\n> Hello golan...@googlegroups.com <javascript:>, \r\n>\r\n> I'd like you to review this change to \r\n> https://go.googlecode.com/hg/ \r\n>\r\n>\r\n> Description: \r\n> net/url: use strings.Index instead of a loop \r\n>\r\n> We already depend on strings in this file, so use it. \r\n>\r\n> Plus strings.Index will be faster than a manual loop \r\n> once issue 3751 is finished. \r\n>\r\n> Please review this at https://codereview.appspot.com/8116043/ \r\n>\r\n> Affected files: \r\n>    M src/pkg/net/url/url.go \r\n>\r\n>\r\n> Index: src/pkg/net/url/url.go \r\n> =================================================================== \r\n> --- a/src/pkg/net/url/url.go \r\n> +++ b/src/pkg/net/url/url.go \r\n> @@ -317,23 +317,22 @@ \r\n>   // Maybe s is of the form t c u. \r\n>   // If so, return t, c u (or t, u if cutc == true). \r\n>   // If not, return s, \"\". \r\n> -func split(s string, c byte, cutc bool) (string, string) { \r\n> -        for i := 0; i < len(s); i++ { \r\n> -                if s[i] == c { \r\n> -                        if cutc { \r\n> -                                return s[0:i], s[i+1:] \r\n> -                        } \r\n> -                        return s[0:i], s[i:] \r\n> -                } \r\n> +func split(s string, c string, cutc bool) (string, string) { \r\n> +        i := strings.Index(s, c) \r\n> +        if i < 0 { \r\n> +                return s, \"\" \r\n>           } \r\n> -        return s, \"\" \r\n> +        if cutc { \r\n> +                return s[0:i], s[i+len(c):] \r\n> +        } \r\n> +        return s[0:i], s[i:] \r\n>   } \r\n>\r\n>   // Parse parses rawurl into a URL structure. \r\n>   // The rawurl may be relative or absolute. \r\n>   func Parse(rawurl string) (url *URL, err error) { \r\n>           // Cut off #frag \r\n> -        u, frag := split(rawurl, '#', true) \r\n> +        u, frag := split(rawurl, \"#\", true) \r\n>           if url, err = parse(u, false); err != nil { \r\n>                   return nil, err \r\n>           } \r\n> @@ -380,7 +379,7 @@ \r\n>           } \r\n>           url.Scheme = strings.ToLower(url.Scheme) \r\n>\r\n> -        rest, url.RawQuery = split(rest, '?', true) \r\n> +        rest, url.RawQuery = split(rest, \"?\", true) \r\n>\r\n>           if !strings.HasPrefix(rest, \"/\") { \r\n>                   if url.Scheme != \"\" { \r\n> @@ -396,7 +395,7 @@ \r\n>\r\n>           if (url.Scheme != \"\" || !viaRequest && !strings.HasPrefix(rest, \r\n> \"///\"))   \r\n> && strings.HasPrefix(rest, \"//\") { \r\n>                   var authority string \r\n> -                authority, rest = split(rest[2:], '/', false) \r\n> +                authority, rest = split(rest[2:], \"/\", false) \r\n>                   url.User, url.Host, err = parseAuthority(authority) \r\n>                   if err != nil { \r\n>                           goto Error \r\n> @@ -428,7 +427,7 @@ \r\n>                   } \r\n>                   user = User(userinfo) \r\n>           } else { \r\n> -                username, password := split(userinfo, ':', true) \r\n> +                username, password := split(userinfo, \":\", true) \r\n>                   if username, err = unescape(username, \r\n> encodeUserPassword); err != nil { \r\n>                           return \r\n>                   } \r\n>\r\n>\r\n>",
			"disapproval": false,
			"date": "2013-03-28 20:41:01.892710",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"khr@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=5fde0c239ade ***\n\nnet/url: use strings.Index instead of a loop\n\nWe already depend on strings in this file, so use it.\n\nPlus strings.Index will be faster than a manual loop\nonce issue 3751 is finished.\n\nR=golang-dev, khr\nCC=golang-dev\nhttps://codereview.appspot.com/8116043",
			"disapproval": false,
			"date": "2013-03-28 20:43:39.351650",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 8116043: net/url: use strings.Index instead of a loop",
	"created": "2013-03-28 20:32:08.596150",
	"patchsets": [
		1,
		2001,
		4002,
		8001
	],
	"modified": "2013-03-28 20:43:40.355620",
	"closed": true,
	"issue": 8116043
}