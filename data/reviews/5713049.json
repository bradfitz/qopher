{
	"description": "reflect: make Value.Interface return immutable data\n\nFixes issue 3134.",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org"
	],
	"reviewers": [
		"r@google.com"
	],
	"messages": [
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Mar 2, 2012, at 3:42 AM, Russ Cox wrote:\n\n> On Thu, Mar 1, 2012 at 01:45,  <r@golang.org> wrote:\n>> LGTM although some documentation might be called for.\n> \n> I'm not sure what to say.  An interface{} is supposed to be like a value,\n> and now it is.  I tried writing some things but they all sound like\n> \"This does not have a bug.\".\n\nthe question i would like to see answered is, does the return value from Interface{} represent the object inside the Value or a copy of the object inside the Value? the comment\n\n\tWe need to return a pointer to unchanging data, so make a copy.\n\ndoes not appear represented in the doc comment for the method.\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2012-03-01 20:43:58.156009",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-03-01 06:17:46.148330",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Mar 1, 2012 at 01:45,  <r@golang.org> wrote:\n> LGTM although some documentation might be called for.\n\nI'm not sure what to say.  An interface{} is supposed to be like a value,\nand now it is.  I tried writing some things but they all sound like\n\"This does not have a bug.\".\n\nRuss\n",
			"disapproval": false,
			"date": "2012-03-01 16:42:33.133298",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> but that's exactly the confusion. if i have a Value, i can Set it, but if i have a Value.Interface(), changing its value does not change the original item. the doc comment half-implies the opposite behavior, and people have been confused by that.\n\nI still don't know what to write.\nI thought about:\n\n// Interface returns v's value as an interface{}.\n// Future changes to v will not be visible in the returned interface{}.\n\nbut I think that will confuse people when v's value is a pointer,\nbecause writes *through* that pointer will be visible, like any\nother pointer.\n\nI could do just\n\n// Interface returns v's current value as an interface{}.\n",
			"disapproval": false,
			"date": "2012-03-01 20:57:22.833289",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM although some documentation might be called for.",
			"disapproval": false,
			"date": "2012-03-01 06:45:32.659700",
			"approval": true
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Mar 2, 2012, at 7:48 AM, Russ Cox wrote:\n\n> On Thu, Mar 1, 2012 at 15:44, Rob 'Commander' Pike <r@google.com> wrote:\n>> the question i would like to see answered is, does the return value from Interface{} represent the object inside the Value or a copy of the object inside the Value? the comment\n>> \n>>        We need to return a pointer to unchanging data, so make a copy.\n>> \n>> does not appear represented in the doc comment for the method.\n> \n> But an interface{} value is always a value;\n> it is never an alias for some other value.\n\nbut that's exactly the confusion. if i have a Value, i can Set it, but if i have a Value.Interface(), changing its value does not change the original item. the doc comment half-implies the opposite behavior, and people have been confused by that.\n\n\n> \n> It would be like documenting that after\n> \n>    var i = 2\n>    var j = i\n> \n> assigning to i does not change the value of j\n> (except that here j is an interface{} and there is\n> some reflection involved).\n> \n> It is true that at the implementation level there is possible\n> aliasing that must be accounted for, but at the language\n> level it's just any other value.  The CL makes them behave\n> the way the language already requires.\n> \n> Russ\n\n",
			"disapproval": false,
			"date": "2012-03-01 20:54:42.972692",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=0e0a2d1892f4 ***\n\nreflect: make Value.Interface return immutable data\n\nFixes issue 3134.\n\nR=golang-dev, r\nCC=golang-dev\nhttp://codereview.appspot.com/5713049",
			"disapproval": false,
			"date": "2012-03-01 16:48:29.473372",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Mar 1, 2012 at 15:44, Rob 'Commander' Pike <r@google.com> wrote:\n> the question i would like to see answered is, does the return value from Interface{} represent the object inside the Value or a copy of the object inside the Value? the comment\n>\n> \u00a0 \u00a0 \u00a0 \u00a0We need to return a pointer to unchanging data, so make a copy.\n>\n> does not appear represented in the doc comment for the method.\n\nBut an interface{} value is always a value;\nit is never an alias for some other value.\n\nIt would be like documenting that after\n\n    var i = 2\n    var j = i\n\nassigning to i does not change the value of j\n(except that here j is an interface{} and there is\nsome reflection involved).\n\nIt is true that at the implementation level there is possible\naliasing that must be accounted for, but at the language\nlevel it's just any other value.  The CL makes them behave\nthe way the language already requires.\n\nRuss\n",
			"disapproval": false,
			"date": "2012-03-01 20:48:43.651655",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "\nOn Mar 2, 2012, at 7:57 AM, Russ Cox wrote:\n\n> // Interface returns v's current value as an interface{}.\n\nbetter. maybe\n\n// Interface returns v's value as an interface{}. It is equivalent to\n//\tvar result interface{} = (concrete value inside v).\n\n(and make 'result' or whatever be the name of the return value)\n\nthat addresses your point that it's doing what Go does and also gives an operational definition that may be easier to understand.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2012-03-01 21:04:29.029522",
			"approval": false
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5713049: reflect: make Value.Interface return immutable data",
	"created": "2012-03-01 06:16:58.763736",
	"patchsets": [
		1,
		2001,
		2004,
		4002
	],
	"modified": "2012-03-01 20:43:58.242132",
	"closed": true,
	"issue": 5713049
}