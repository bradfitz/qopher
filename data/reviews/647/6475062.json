{
	"description": "cmd/api: fix signatures like func(x, y, z int)\n\nFixes writing of function parameter, result lists which\nconsist of multiple named or unnamed items with same type.\n\nFixes issue 4011.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bsiegert@gmail.com",
		"bradfitz@golang.org",
		"rsc@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bsiegert@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-25 13:15:44.266370",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-08-25 08:56:22.550800",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ah, pls hold.\r\n\r\n-pkg time, method (Time) Clock() int\r\n+pkg time, method (Time) Clock() int, int, int\r\n\r\nouch.\r\n",
			"disapproval": false,
			"date": "2012-08-25 09:02:02.154650",
			"approval": false
		},
		{
			"sender": "bsiegert@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please s/suger/sugar/ in the CL description. Thank you.",
			"disapproval": false,
			"date": "2012-08-25 11:54:03.015370",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Sat, Aug 25, 2012 at 8:54 PM,  <bsiegert@gmail.com> wrote:\r\n\r\n> Please s/suger/sugar/ in the CL description. Thank you.\r\n\r\nhooray! also syntatic is typo?\r\nwell then, I will do s/syntactic sugar/\u69cb\u6587\u7cd6\u8863/.\r\n",
			"disapproval": false,
			"date": "2012-08-25 13:13:04.619340",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bsiegert@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, bsiegert@gmail.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-08-28 03:24:21.048660",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "You use the word \"fixing\", but what does this fix?  Could you either\r\nelaborate in the CL description open a bug with details and reference it in\r\nthe CL description?\r\n\r\nAlso, this isn't \"parsing\" anything, is it?  The bug's about incorrectly\r\nserializing lines for funcs containing multiple result parameters?\r\n\r\n\r\nOn Sat, Aug 25, 2012 at 1:56 AM, <mikioh.mikioh@gmail.com> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go\r\n>\r\n>\r\n> Description:\r\n> cmd/api: fix parsing parameter and result lists\r\n>\r\n> I like syntatic suger.\r\n>\r\n> Please review this at http://codereview.appspot.com/**6475062/<http://codereview.appspot.com/6475062/>\r\n>\r\n> Affected files:\r\n>   M src/cmd/api/goapi.go\r\n>   A src/cmd/api/testdata/src/pkg/**p3/golden.txt\r\n>   A src/cmd/api/testdata/src/pkg/**p3/p3.go\r\n>\r\n>\r\n> Index: src/cmd/api/goapi.go\r\n> ==============================**==============================**=======\r\n> --- a/src/cmd/api/goapi.go\r\n> +++ b/src/cmd/api/goapi.go\r\n> @@ -1000,7 +1000,17 @@\r\n>                         if i > 0 {\r\n>                                 b.WriteString(\", \")\r\n>                         }\r\n> -                       b.WriteString(w.nodeString(w.**\r\n> namelessType(f.Type)))\r\n> +                       n := len(f.Names)\r\n> +                       if n > 1 {\r\n> +                               for j := 0; j < n; j++ {\r\n> +                                       if j > 0 {\r\n> +                                               b.WriteString(\", \")\r\n> +                                       }\r\n> +                                       b.WriteString(w.nodeString(w.**\r\n> namelessType(f.Type)))\r\n> +                               }\r\n> +                       } else {\r\n> +                               b.WriteString(w.nodeString(w.**\r\n> namelessType(f.Type)))\r\n> +                       }\r\n>                 }\r\n>         }\r\n>         b.WriteByte(')')\r\n> @@ -1014,7 +1024,17 @@\r\n>                                 if i > 0 {\r\n>                                         b.WriteString(\", \")\r\n>                                 }\r\n> -                               b.WriteString(w.nodeString(w.**\r\n> namelessType(f.Type)))\r\n> +                               n := len(f.Names)\r\n> +                               if n > 1 {\r\n> +                                       for j := 0; j < n; j++ {\r\n> +                                               if j > 0 {\r\n> +                                                       b.WriteString(\", \")\r\n> +                                               }\r\n> +\r\n> b.WriteString(w.nodeString(w.**namelessType(f.Type)))\r\n> +                                       }\r\n> +                               } else {\r\n> +                                       b.WriteString(w.nodeString(w.**\r\n> namelessType(f.Type)))\r\n> +                               }\r\n>                         }\r\n>                         if nr > 1 {\r\n>                                 b.WriteByte(')')\r\n> Index: src/cmd/api/testdata/src/pkg/**p3/golden.txt\r\n> ==============================**==============================**=======\r\n> new file mode 100644\r\n> --- /dev/null\r\n> +++ b/src/cmd/api/testdata/src/**pkg/p3/golden.txt\r\n> @@ -0,0 +1,4 @@\r\n> +pkg p3, method (*ThirdBase) GoodPlayer() (int, int, error)\r\n> +pkg p3, func BadHop(int, int) (bool, bool, *ThirdBase, error)\r\n> +pkg p3, func BadThrow(int, int) (bool, bool, *ThirdBase, error)\r\n> +pkg p3, type ThirdBase struct\r\n> Index: src/cmd/api/testdata/src/pkg/**p3/p3.go\r\n> ==============================**==============================**=======\r\n> new file mode 100644\r\n> --- /dev/null\r\n> +++ b/src/cmd/api/testdata/src/**pkg/p3/p3.go\r\n> @@ -0,0 +1,7 @@\r\n> +package p3\r\n> +\r\n> +type ThirdBase struct{}\r\n> +\r\n> +func (tb *ThirdBase) GoodPlayer() (i, j int, err error)\r\n> +func BadHop(i, j int) (k, l bool, m *ThirdBase, err error)\r\n> +func BadThrow(int, int) (bool, bool, *ThirdBase, error)\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-08-28 03:48:53.167120",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bsiegert@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "thanks for your comments.\nfiled an issue and updated the CL description.\nPTAL.",
			"disapproval": false,
			"date": "2012-08-28 04:56:58.899840",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bsiegert@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping",
			"disapproval": false,
			"date": "2012-09-03 22:04:36.082730",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bsiegert@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/03 22:04:36, mikio wrote:\n> ping\n\nping.",
			"disapproval": false,
			"date": "2012-09-18 16:33:01.082390",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n\r\nbut I find the CL description confusing.  Maybe:\r\n\r\ncmd/api: fix function signatures containing multiple parameter identifiers\r\nfor a type\r\n\r\n\r\nOn Tue, Sep 18, 2012 at 9:33 AM, <mikioh.mikioh@gmail.com> wrote:\r\n\r\n> On 2012/09/03 22:04:36, mikio wrote:\r\n>\r\n>> ping\r\n>>\r\n>\r\n> ping.\r\n>\r\n> http://codereview.appspot.com/**6475062/<http://codereview.appspot.com/6475062/>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-09-18 18:09:54.446160",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "cmd/api: fix signatures like func(x, y, z int)\r\n",
			"disapproval": false,
			"date": "2012-09-18 18:28:18.780160",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"bsiegert@gmail.com",
				"bradfitz@golang.org",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=86c06191bea6 ***\n\ncmd/api: fix signatures like func(x, y, z int)\n\nFixes writing of function parameter, result lists which\nconsist of multiple named or unnamed items with same type.\n\nFixes issue 4011.\n\nR=golang-dev, bsiegert, bradfitz, rsc\nCC=golang-dev\nhttp://codereview.appspot.com/6475062",
			"disapproval": false,
			"date": "2012-09-18 22:04:21.772090",
			"approval": false
		}
	],
	"owner_email": "mikioh.mikioh@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mikio",
	"subject": "code review 6475062: cmd/api: make writing function parameter and result lists out correctly",
	"created": "2012-08-25 08:55:50.703000",
	"patchsets": [
		1,
		2001,
		12001,
		6005,
		18002
	],
	"modified": "2012-09-18 22:04:25.672340",
	"closed": true,
	"issue": 6475062
}