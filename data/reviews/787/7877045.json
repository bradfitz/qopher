{
	"description": "build: remove dead code",
	"cc": [
		"golang-dev@googlegroups.com",
		"r@golang.org"
	],
	"reviewers": [
		"bradfitz@golang.org"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2013-03-22 21:23:02.745720",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-03-22 21:27:30.246370",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=b0d920685dda ***\n\nbuild: remove dead code\n\nR=golang-dev, r\nCC=golang-dev\nhttps://codereview.appspot.com/7877045",
			"disapproval": false,
			"date": "2013-03-22 21:28:26.908150",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\r\n On Mar 22, 2013 2:23 PM, <rsc@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://code.google.com/p/go/\r\n>\r\n>\r\n> Description:\r\n> build: remove dead code\r\n>\r\n> Please review this at https://codereview.appspot.**com/7877045/<https://codereview.appspot.com/7877045/>\r\n>\r\n> Affected files:\r\n>   M src/cmd/go/discovery.go\r\n>   M src/cmd/yacc/yacc.go\r\n>   M src/pkg/compress/flate/**inflate.go\r\n>   M src/pkg/compress/gzip/gunzip.**go\r\n>   M src/pkg/compress/lzw/reader.go\r\n>   M src/pkg/crypto/dsa/dsa_test.go\r\n>   M src/pkg/crypto/rand/util.go\r\n>   M src/pkg/encoding/asn1/marshal.**go\r\n>   M src/pkg/encoding/csv/reader.go\r\n>   M src/pkg/encoding/gob/decode.go\r\n>   M src/pkg/encoding/gob/type.go\r\n>   M src/pkg/encoding/json/decode.**go\r\n>   M src/pkg/html/template/**transition.go\r\n>   M src/pkg/math/big/nat.go\r\n>   M src/pkg/net/http/httputil/**reverseproxy.go\r\n>   M src/pkg/net/ip.go\r\n>   M src/pkg/net/unixsock_posix.go\r\n>   M src/pkg/os/file_posix.go\r\n>   M src/pkg/os/getwd.go\r\n>   M src/pkg/reflect/tostring_test.**go\r\n>   M src/pkg/strconv/extfloat.go\r\n>   M src/pkg/syscall/exec_bsd.go\r\n>   M src/pkg/testing/quick/quick.go\r\n>   M src/pkg/text/template/parse/**parse.go\r\n>\r\n>\r\n> Index: src/cmd/go/discovery.go\r\n> ==============================**==============================**=======\r\n> --- a/src/cmd/go/discovery.go\r\n> +++ b/src/cmd/go/discovery.go\r\n> @@ -48,7 +48,6 @@\r\n>                         })\r\n>                 }\r\n>         }\r\n> -       return\r\n>  }\r\n>\r\n>  // attrValue returns the attribute value for the case-insensitive key\r\n> Index: src/cmd/yacc/yacc.go\r\n> ==============================**==============================**=======\r\n> --- a/src/cmd/yacc/yacc.go\r\n> +++ b/src/cmd/yacc/yacc.go\r\n> @@ -3164,7 +3164,6 @@\r\n>\r\n>  func write(f *bufio.Writer, b []byte, n int) int {\r\n>         panic(\"write\")\r\n> -       return 0\r\n>  }\r\n>\r\n>  func open(s string) *bufio.Reader {\r\n> Index: src/pkg/compress/flate/**inflate.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/compress/flate/**inflate.go\r\n> +++ b/src/pkg/compress/flate/**inflate.go\r\n> @@ -640,7 +640,6 @@\r\n>                         return int(chunk >> huffmanValueShift), nil\r\n>                 }\r\n>         }\r\n> -       return 0, CorruptInputError(f.roffset)\r\n>  }\r\n>\r\n>  // Flush any buffered output to the underlying writer.\r\n> Index: src/pkg/compress/gzip/gunzip.**go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/compress/gzip/**gunzip.go\r\n> +++ b/src/pkg/compress/gzip/**gunzip.go\r\n> @@ -120,7 +120,6 @@\r\n>                         return string(z.buf[0:i]), nil\r\n>                 }\r\n>         }\r\n> -       panic(\"not reached\")\r\n>  }\r\n>\r\n>  func (z *Reader) read2() (uint32, error) {\r\n> Index: src/pkg/compress/lzw/reader.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/compress/lzw/reader.**go\r\n> +++ b/src/pkg/compress/lzw/reader.**go\r\n> @@ -202,7 +202,6 @@\r\n>                         return\r\n>                 }\r\n>         }\r\n> -       panic(\"unreachable\")\r\n>  }\r\n>\r\n>  func (d *decoder) flush() {\r\n> Index: src/pkg/crypto/dsa/dsa_test.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/crypto/dsa/dsa_test.**go\r\n> +++ b/src/pkg/crypto/dsa/dsa_test.**go\r\n> @@ -63,8 +63,9 @@\r\n>  }\r\n>\r\n>  func TestParameterGeneration(t *testing.T) {\r\n> -       // This test is too slow to run all the time.\r\n> -       return\r\n> +       if testing.Short() {\r\n> +               t.Skip(\"skipping parameter generation test in short mode\")\r\n> +       }\r\n>\r\n>         testParameterGeneration(t, L1024N160, 1024, 160)\r\n>         testParameterGeneration(t, L2048N224, 2048, 224)\r\n> Index: src/pkg/crypto/rand/util.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/crypto/rand/util.go\r\n> +++ b/src/pkg/crypto/rand/util.go\r\n> @@ -98,8 +98,6 @@\r\n>                         return\r\n>                 }\r\n>         }\r\n> -\r\n> -       return\r\n>  }\r\n>\r\n>  // Int returns a uniform random value in [0, max).\r\n> @@ -130,6 +128,4 @@\r\n>                         return\r\n>                 }\r\n>         }\r\n> -\r\n> -       return\r\n>  }\r\n> Index: src/pkg/encoding/asn1/marshal.**go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/encoding/asn1/**marshal.go\r\n> +++ b/src/pkg/encoding/asn1/**marshal.go\r\n> @@ -460,7 +460,6 @@\r\n>                 default:\r\n>                         return marshalUTF8String(out, v.String())\r\n>                 }\r\n> -               return\r\n>         }\r\n>\r\n>         return StructuralError{\"unknown Go type\"}\r\n> Index: src/pkg/encoding/csv/reader.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/encoding/csv/reader.**go\r\n> +++ b/src/pkg/encoding/csv/reader.**go\r\n> @@ -212,7 +212,6 @@\r\n>                         return nil\r\n>                 }\r\n>         }\r\n> -       panic(\"unreachable\")\r\n>  }\r\n>\r\n>  // parseRecord reads and parses a single csv record from r.\r\n> @@ -249,7 +248,6 @@\r\n>                         return nil, err\r\n>                 }\r\n>         }\r\n> -       panic(\"unreachable\")\r\n>  }\r\n>\r\n>  // parseField parses the next field in the record.  The read field is\r\n> Index: src/pkg/encoding/gob/decode.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/encoding/gob/decode.**go\r\n> +++ b/src/pkg/encoding/gob/decode.**go\r\n> @@ -1066,7 +1066,6 @@\r\n>         case reflect.Struct:\r\n>                 return true\r\n>         }\r\n> -       return true\r\n>  }\r\n>\r\n>  // typeString returns a human-readable description of the type identified\r\n> by remoteId.\r\n> Index: src/pkg/encoding/gob/type.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/encoding/gob/type.go\r\n> +++ b/src/pkg/encoding/gob/type.go\r\n> @@ -526,7 +526,6 @@\r\n>         default:\r\n>                 return nil, errors.New(\"gob NewTypeObject can't handle\r\n> type: \" + rt.String())\r\n>         }\r\n> -       return nil, nil\r\n>  }\r\n>\r\n>  // isExported reports whether this is an exported - upper case - name.\r\n> Index: src/pkg/encoding/json/decode.**go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/encoding/json/**decode.go\r\n> +++ b/src/pkg/encoding/json/**decode.go\r\n> @@ -868,7 +868,6 @@\r\n>                 }\r\n>                 return n\r\n>         }\r\n> -       panic(\"unreachable\")\r\n>  }\r\n>\r\n>  // getu4 decodes \\uXXXX from the beginning of s, returning the hex value,\r\n> Index: src/pkg/html/template/**transition.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/html/template/**transition.go\r\n> +++ b/src/pkg/html/template/**transition.go\r\n> @@ -429,7 +429,6 @@\r\n>                 }\r\n>                 k = i + 1\r\n>         }\r\n> -       panic(\"unreachable\")\r\n>  }\r\n>\r\n>  // tCSSStr is the context transition function for the CSS string and URL\r\n> states.\r\n> @@ -470,7 +469,6 @@\r\n>                 c, _ = tURL(c, decodeCSS(s[:i+1]))\r\n>                 k = i + 1\r\n>         }\r\n> -       panic(\"unreachable\")\r\n>  }\r\n>\r\n>  // tError is the context transition function for the error state.\r\n> Index: src/pkg/math/big/nat.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/math/big/nat.go\r\n> +++ b/src/pkg/math/big/nat.go\r\n> @@ -1021,8 +1021,6 @@\r\n>         default:\r\n>                 panic(\"unknown word size\")\r\n>         }\r\n> -\r\n> -       return 0\r\n>  }\r\n>\r\n>  // trailingZeroBits returns the number of consecutive least significant\r\n> zero\r\n> Index: src/pkg/net/http/httputil/**reverseproxy.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/http/httputil/**reverseproxy.go\r\n> +++ b/src/pkg/net/http/httputil/**reverseproxy.go\r\n> @@ -202,7 +202,6 @@\r\n>                         m.lk.Unlock()\r\n>                 }\r\n>         }\r\n> -       panic(\"unreached\")\r\n>  }\r\n>\r\n>  func (m *maxLatencyWriter) stop() { m.done <- true }\r\n> Index: src/pkg/net/ip.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/ip.go\r\n> +++ b/src/pkg/net/ip.go\r\n> @@ -222,7 +222,6 @@\r\n>         default:\r\n>                 return classCMask\r\n>         }\r\n> -       return nil // not reached\r\n>  }\r\n>\r\n>  func allFF(b []byte) bool {\r\n> Index: src/pkg/net/unixsock_posix.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/net/unixsock_posix.**go\r\n> +++ b/src/pkg/net/unixsock_posix.**go\r\n> @@ -99,7 +99,6 @@\r\n>         default:\r\n>                 panic(\"sotypeToNet unknown socket type\")\r\n>         }\r\n> -       return \"\"\r\n>  }\r\n>\r\n>  // UnixConn is an implementation of the Conn interface for connections\r\n> Index: src/pkg/os/file_posix.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/os/file_posix.go\r\n> +++ b/src/pkg/os/file_posix.go\r\n> @@ -46,8 +46,6 @@\r\n>                         return string(b[0:n]), nil\r\n>                 }\r\n>         }\r\n> -       // Silence 6g.\r\n> -       return \"\", nil\r\n>  }\r\n>\r\n>  // Rename renames a file.\r\n> Index: src/pkg/os/getwd.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/os/getwd.go\r\n> +++ b/src/pkg/os/getwd.go\r\n> @@ -90,8 +90,6 @@\r\n>                                 }\r\n>                         }\r\n>                 }\r\n> -               fd.Close()\r\n> -               return \"\", ErrNotExist\r\n>\r\n>         Found:\r\n>                 pd, err := fd.Stat()\r\n> Index: src/pkg/reflect/tostring_test.**go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/reflect/tostring_**test.go\r\n> +++ b/src/pkg/reflect/tostring_**test.go\r\n> @@ -92,5 +92,4 @@\r\n>         default:\r\n>                 panic(\"valueToString: can't print type \" + typ.String())\r\n>         }\r\n> -       return \"valueToString: can't happen\"\r\n>  }\r\n> Index: src/pkg/strconv/extfloat.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/strconv/extfloat.go\r\n> +++ b/src/pkg/strconv/extfloat.go\r\n> @@ -636,7 +636,6 @@\r\n>                                 1<<shift, multiplier*2)\r\n>                 }\r\n>         }\r\n> -       return false\r\n>  }\r\n>\r\n>  // adjustLastDigit modifies d = x-currentDiff*\u03b5, to get closest to\r\n> Index: src/pkg/syscall/exec_bsd.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/syscall/exec_bsd.go\r\n> +++ b/src/pkg/syscall/exec_bsd.go\r\n> @@ -215,11 +215,6 @@\r\n>         for {\r\n>                 RawSyscall(SYS_EXIT, 253, 0, 0)\r\n>         }\r\n> -\r\n> -       // Calling panic is not actually safe,\r\n> -       // but the for loop above won't break\r\n> -       // and this shuts up the compiler.\r\n> -       panic(\"unreached\")\r\n>  }\r\n>\r\n>  // Try to open a pipe with O_CLOEXEC set on both file descriptors.\r\n> Index: src/pkg/testing/quick/quick.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/testing/quick/quick.**go\r\n> +++ b/src/pkg/testing/quick/quick.**go\r\n> @@ -140,8 +140,6 @@\r\n>         default:\r\n>                 return reflect.Value{}, false\r\n>         }\r\n> -\r\n> -       return\r\n>  }\r\n>\r\n>  // A Config structure contains options for running a test.\r\n> Index: src/pkg/text/template/parse/**parse.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/text/template/parse/**parse.go\r\n> +++ b/src/pkg/text/template/parse/**parse.go\r\n> @@ -429,7 +429,6 @@\r\n>                         t.unexpected(token, context)\r\n>                 }\r\n>         }\r\n> -       return\r\n>  }\r\n>\r\n>  func (t *Tree) parseControl(context string) (pos Pos, line int, pipe\r\n> *PipeNode, list, elseList *ListNode) {\r\n>\r\n>\r\n> --\r\n>\r\n> ---You received this message because you are subscribed to the Google\r\n> Groups \"golang-dev\" group.\r\n> To unsubscribe from this group and stop receiving emails from it, send an\r\n> email to golang-dev+unsubscribe@**googlegroups.com<golang-dev%2Bunsubscribe@googlegroups.com>\r\n> .\r\n> For more options, visit https://groups.google.com/**groups/opt_out<https://groups.google.com/groups/opt_out>\r\n> .\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-22 22:01:06.390060",
			"approval": true
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 7877045: build: remove dead code",
	"created": "2013-03-22 21:20:22.558150",
	"patchsets": [
		1,
		2001,
		5001,
		9001
	],
	"modified": "2013-03-22 22:01:06.525760",
	"closed": true,
	"issue": 7877045
}