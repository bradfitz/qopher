{
	"description": "spec: clarify unsafe.Offsetof\n\nFixes issue 4905.",
	"cc": [
		"rsc@golang.org",
		"r@golang.org",
		"iant@golang.org",
		"ken@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, r@golang.org, iant@golang.org, ken@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2013-03-07 18:42:46.072760",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7583043/diff/5001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7583043/diff/5001/doc/go_spec.html#newcode5737\ndoc/go_spec.html:5737: <code>s.f</code> denoting a struct field <code>f</code> of any type and returns the field offset in\n<code>s.f</code> denoting a field <code>f</code>, of struct value <code>s</code> and of any type, and returns...\n\nhttps://codereview.appspot.com/7583043/diff/5001/doc/go_spec.html#newcode5740\ndoc/go_spec.html:5740: it must not be embedded via a pointer indirection.\nso i can't find the offset of the pointer?",
			"disapproval": false,
			"date": "2013-03-07 18:51:36.769270",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/7583043/diff/5001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7583043/diff/5001/doc/go_spec.html#newcode5737\ndoc/go_spec.html:5737: <code>s.f</code> denoting a struct field <code>f</code> of any type and returns the field offset in\nOn 2013/03/07 18:51:36, r wrote:\n> <code>s.f</code> denoting a field <code>f</code>, of struct value <code>s</code>\n> and of any type, and returns...\n\nreformulated. note that s may be a struct _or_ a pointer to a struct (like for any selector)\n\nhttps://codereview.appspot.com/7583043/diff/5001/doc/go_spec.html#newcode5740\ndoc/go_spec.html:5740: it must not be embedded via a pointer indirection.\nOn 2013/03/07 18:51:36, r wrote:\n> so i can't find the offset of the pointer?\n\nYou can. But if the field is embedded _via_ a pointer Offsetof must fail:\n\ntype T0 struct {\n   f int\n}\n\ntype T1 struct {\n   a, b, c int\n   *T0\n}\n\nvar s T1\n\nunsafe.Offsetof(s.f) makes no sense; also the invariant stated below fails, of course.\n\ngc (unless fixed) returns the offset of f relative to T0 in this case, which would be 0.",
			"disapproval": false,
			"date": "2013-03-07 19:11:55.067360",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping\r\n\r\n\r\nOn Thu, Mar 7, 2013 at 11:11 AM, <gri@golang.org> wrote:\r\n\r\n> PTAL\r\n>\r\n>\r\n>\r\n> https://codereview.appspot.**com/7583043/diff/5001/doc/go_**spec.html<https://codereview.appspot.com/7583043/diff/5001/doc/go_spec.html>\r\n> File doc/go_spec.html (right):\r\n>\r\n> https://codereview.appspot.**com/7583043/diff/5001/doc/go_**\r\n> spec.html#newcode5737<https://codereview.appspot.com/7583043/diff/5001/doc/go_spec.html#newcode5737>\r\n> doc/go_spec.html:5737: <code>s.f</code> denoting a struct field\r\n> <code>f</code> of any type and returns the field offset in\r\n> On 2013/03/07 18:51:36, r wrote:\r\n>\r\n>> <code>s.f</code> denoting a field <code>f</code>, of struct value\r\n>>\r\n> <code>s</code>\r\n>\r\n>> and of any type, and returns...\r\n>>\r\n>\r\n> reformulated. note that s may be a struct _or_ a pointer to a struct\r\n> (like for any selector)\r\n>\r\n>\r\n> https://codereview.appspot.**com/7583043/diff/5001/doc/go_**\r\n> spec.html#newcode5740<https://codereview.appspot.com/7583043/diff/5001/doc/go_spec.html#newcode5740>\r\n> doc/go_spec.html:5740: it must not be embedded via a pointer\r\n> indirection.\r\n> On 2013/03/07 18:51:36, r wrote:\r\n>\r\n>> so i can't find the offset of the pointer?\r\n>>\r\n>\r\n> You can. But if the field is embedded _via_ a pointer Offsetof must\r\n> fail:\r\n>\r\n> type T0 struct {\r\n>    f int\r\n> }\r\n>\r\n> type T1 struct {\r\n>    a, b, c int\r\n>    *T0\r\n> }\r\n>\r\n> var s T1\r\n>\r\n> unsafe.Offsetof(s.f) makes no sense; also the invariant stated below\r\n> fails, of course.\r\n>\r\n> gc (unless fixed) returns the offset of f relative to T0 in this case,\r\n> which would be 0.\r\n>\r\n> https://codereview.appspot.**com/7583043/<https://codereview.appspot.com/7583043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-08 00:24:32.334430",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7583043/diff/10001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7583043/diff/10001/doc/go_spec.html#newcode5740\ndoc/go_spec.html:5740: without pointer indirections.\nbut\nvar s *T\nOffsetof(s.f)\nrequires indirecting through s.\nstill not quite right.\n\nmaybe \nwithout pointer indirections through fields of the struct.",
			"disapproval": false,
			"date": "2013-03-08 00:44:40.953080",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/7583043/diff/10001/doc/go_spec.html\nFile doc/go_spec.html (right):\n\nhttps://codereview.appspot.com/7583043/diff/10001/doc/go_spec.html#newcode5740\ndoc/go_spec.html:5740: without pointer indirections.\nOn 2013/03/08 00:44:41, r wrote:\n> but\n> var s *T\n> Offsetof(s.f)\n> requires indirecting through s.\n> still not quite right.\n> \n> maybe \n> without pointer indirections through fields of the struct.\n\nDone.",
			"disapproval": false,
			"date": "2013-03-08 00:47:33.480870",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-03-08 00:49:14.014470",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-03-08 00:59:31.902760",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-03-08 04:05:56.768080",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=ed48ace1855b ***\n\nspec: clarify unsafe.Offsetof\n\nFixes issue 4905.\n\nR=rsc, r, iant, ken\nCC=golang-dev\nhttps://codereview.appspot.com/7583043",
			"disapproval": false,
			"date": "2013-03-08 04:12:03.223500",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 7583043: spec: clarify unsafe.Offsetof",
	"created": "2013-03-07 18:42:09.232730",
	"patchsets": [
		1,
		2001,
		5001,
		10001,
		17001,
		12002
	],
	"modified": "2013-03-08 04:12:05.778940",
	"closed": true,
	"issue": 7583043
}