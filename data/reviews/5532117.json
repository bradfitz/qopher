{
	"description": "      strings: Speed up Index.\n\n      On Intel(R) Core(TM) i7 CPU M 620 @ 2.67GHz\n      benchmark               old      new\n      BenchmarkIndexOne       59.5     42.4      -28.74\n      BenchmarkIndexTwo       57.9     42.3      -26.94\n      BenchmarkIndexThree     234      30.5      -86.97\n      BenchmarkIndexHardShort 26041    1978      -92.40\n      BenchmarkIndexHardLong  85902    20446     -76.20\n(benchmark needs update)",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"r@golang.org",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"brtzsnr@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Several points.\n\nFirst, the case where len(sep)==1 might still be worth calling out.\n\nSecond, the same improvements should be made to the bytes package, although we can refine the code here before applying it there.\n\nThird, you'll need to fill in the copyright agreement; see doc/contribute.html\n\nhttp://codereview.appspot.com/5532117/diff/3/src/pkg/strings/strings.go\nFile src/pkg/strings/strings.go (right):\n\nhttp://codereview.appspot.com/5532117/diff/3/src/pkg/strings/strings.go#newcode89\nsrc/pkg/strings/strings.go:89: // Skips until the first char of sep is matched.\ns/Skips/Skip/\n\nhttp://codereview.appspot.com/5532117/diff/3/src/pkg/strings/strings.go#newcode93\nsrc/pkg/strings/strings.go:93: // The remaining string is too short to be a matched.\ns/ a / /\n\nhttp://codereview.appspot.com/5532117/diff/3/src/pkg/strings/strings.go#newcode97\nsrc/pkg/strings/strings.go:97: // Matches the rest of the text.\ns/es/\n\nall these three changes again below",
			"disapproval": false,
			"date": "2012-01-22 19:22:59.332076",
			"approval": false
		},
		{
			"sender": "brtzsnr@gmail.com",
			"recipients": [
				"brtzsnr@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/22 19:22:59, r wrote:\n> First, the case where len(sep)==1 might still be worth calling out.\n\nBenchmarkIndex tests len(sep) == 1. If sep is located at the beginning of s then there might be a small improvement, but I am not sure it is worth a special case. The biggest improvements came from avoiding the slice creation and comparing one less character when the first character of sep is found.\n\n> Third, you'll need to fill in the copyright agreement; see doc/contribute.html\n\nGoogle contributer.",
			"disapproval": false,
			"date": "2012-01-22 20:05:59.546565",
			"approval": false
		},
		{
			"sender": "brtzsnr@gmail.com",
			"recipients": [
				"brtzsnr@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-22 11:27:26.691165",
			"approval": false
		},
		{
			"sender": "brtzsnr@gmail.com",
			"recipients": [
				"brtzsnr@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-01-22 20:00:50.367261",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Can you please 'hg mail 5532117' so we can see your new code?\n",
			"disapproval": false,
			"date": "2012-01-26 15:41:58.958406",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I had various comments about this implementation\nbut they are all addressed by the current bytes.Index\nimplementation.\n\nbytes and strings seem to have drifted apart here.\nCould you copy the bytes implementation instead?\nInstead of the call to Equal in that code you can\ndo s[i:i+n] == sep.\n\nThanks.\nRuss\n",
			"disapproval": false,
			"date": "2012-01-23 14:41:23.839160",
			"approval": false
		},
		{
			"sender": "brtzsnr@gmail.com",
			"recipients": [
				"brtzsnr@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I've copied the bytes implementation per your suggestion, but I have not observed significant improvements for Index. BenchmarkIndex was, indeed little lower, but that's because BenchmarkIndex tests len(sep) == 1 which is implemented in assembler. On the other hand, BenchmarkIndexHard was higher (26000ns/op). Note that the bytes.Index does two function calls for each occurrence of sep[0] in s which is slow. \n\nOn 2012/01/23 14:41:23, rsc wrote:\n> I had various comments about this implementation\n> but they are all addressed by the current bytes.Index\n> implementation.\n> \n> bytes and strings seem to have drifted apart here.\n> Could you copy the bytes implementation instead?\n> Instead of the call to Equal in that code you can\n> do s[i:i+n] == sep.\n> \n> Thanks.\n> Russ",
			"disapproval": false,
			"date": "2012-01-23 23:04:14.015845",
			"approval": false
		},
		{
			"sender": "brtzsnr@gmail.com",
			"recipients": [
				"brtzsnr@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/26 15:41:58, rsc wrote:\n> Can you please 'hg mail 5532117' so we can see your new code?\n\nI will post another patch over the next few days. I will drop the changes to LastIndex for now (since it is less used than Index) and update Index with an asm only solution.",
			"disapproval": false,
			"date": "2012-01-26 21:03:42.404617",
			"approval": false
		},
		{
			"sender": "brtzsnr@gmail.com",
			"recipients": [
				"brtzsnr@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/26 15:41:58, rsc wrote:\n> Can you please 'hg mail 5532117' so we can see your new code?\n\nPTAL. I have one issue (copy-pasted below) when I run ./all.bash and I need some hints how to fix it.\n\n# Building go_bootstrap command from bootstrap script.\n./strings.go:67: undefined: Index\n./strings.go:588: undefined: Index\n# Bootstrap script failed.\n# Regenerating bootstrap script using pre-existing go binary.\n\nExcept this error everything is fine.",
			"disapproval": false,
			"date": "2012-01-30 20:28:14.072222",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm sorry, but we'll have to put this off until after Go 1.\nIt is too late to be adding this much new assembly to\nthe system.  We want Go 1 to be as stable as possible,\nso we need to avoid introducing large amounts of code\nthat has not been tested in the wild.\n\nAfter Go 1 is out, we can continue this review.\nPlease remind us then.\n\nThanks.\nRuss\n\nP.S. The error you are seeing is because you've added a new\nfile to the build, so the shell script that builds package\nstrings was out of date; the \"Regenerating\" step should\nhave fixed that, so that the build could run to completion,\nand a second all.bash should have worked fine.\nI assume that is what happened.\n",
			"disapproval": false,
			"date": "2012-01-31 15:57:37.745559",
			"approval": false
		},
		{
			"sender": "brtzsnr@gmail.com",
			"recipients": [
				"brtzsnr@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sure. I'll leave the patch here for now.\n\nOn 2012/01/31 15:57:37, rsc wrote:\n> I'm sorry, but we'll have to put this off until after Go 1.\n> It is too late to be adding this much new assembly to\n> the system.  We want Go 1 to be as stable as possible,\n> so we need to avoid introducing large amounts of code\n> that has not been tested in the wild.\n> \n> After Go 1 is out, we can continue this review.\n> Please remind us then.\n> \n> Thanks.\n> Russ\n> \n> P.S. The error you are seeing is because you've added a new\n> file to the build, so the shell script that builds package\n> strings was out of date; the \"Regenerating\" step should\n> have fixed that, so that the build could run to completion,\n> and a second all.bash should have worked fine.\n> I assume that is what happened.",
			"disapproval": false,
			"date": "2012-01-31 20:57:32.541907",
			"approval": false
		},
		{
			"sender": "brtzsnr@gmail.com",
			"recipients": [
				"brtzsnr@gmail.com",
				"golang-dev@googlegroups.com",
				"r@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-01-31 21:01:52.267589",
			"approval": false
		}
	],
	"owner_email": "brtzsnr@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "brtzsnr",
	"subject": "code review 5532117: strings: Speed up Index and LastIndex.",
	"created": "2012-01-22 11:13:32.155212",
	"patchsets": [
		1,
		3,
		5001,
		8001,
		14001,
		14002,
		17001,
		19001,
		23001,
		19010,
		21016,
		17005,
		17013,
		25002,
		20017,
		20018,
		24023,
		27001
	],
	"modified": "2012-01-31 21:01:53.805185",
	"closed": true,
	"issue": 5532117
}