{
	"description": "database/sql: associate a mutex with each driver interface\n\nThe database/sql/driver docs make this promise:\n\n   \"Conn is a connection to a database. It is not used\n   concurrently by multiple goroutines.\"\n\nThat promises exists as part of database/sql's overall\ngoal of making drivers relatively easy to write.\n\nSo far this promise has been kept without the use of locks by\nbeing careful in the database/sql package, but sometimes too\ncareful. (cf. golang.org/issue/3857)\n\nThe CL associates a Mutex with each driver.Conn, and with the\ninterface value progeny thereof. (e.g. each driver.Tx,\ndriver.Stmt, driver.Rows, driver.Result, etc) Then whenever\nthose interface values are used, the Locker is locked.\n\nThis CL should be a no-op (aside from some new Lock/Unlock\npairs) and doesn't attempt to fix Issue 3857 or Issue 4459,\nbut should make it much easier in a subsequent CL.\n\nUpdate issue 3857",
	"cc": [
		"golang-dev@googlegroups.com",
		"adg@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-14 01:17:14.622700",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7803043/diff/11001/src/pkg/database/sql/sql.go\nFile src/pkg/database/sql/sql.go (right):\n\nhttps://codereview.appspot.com/7803043/diff/11001/src/pkg/database/sql/sql.go#newcode1330\nsrc/pkg/database/sql/sql.go:1330: func withLock(lk sync.Locker, fn func()) {\nI don't think this is really worth the trouble.\n\nthis is 32 chars:\nwithLock(a, func() { call() })\n\nthis is 27:\na.Lock()\ncall()\na.Unlock()",
			"disapproval": false,
			"date": "2013-03-14 02:13:27.662060",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2013-03-13 22:52:39.327130",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This CL probably looks scarier than it is, due to some variable renaming.\r\n\r\nFor example.\r\n\r\nvar ci driver.Conn  (mnemonic: \"conn interface\")\r\n->\r\nvar dc *driverConn (which now has a \".ci\" member)\r\n\r\nLikewise with driverResult, driverStmt.\r\n\r\nOn Wed, Mar 13, 2013 at 3:52 PM, <bradfitz@golang.org> wrote:\r\n\r\n> Reviewers: golang-dev1,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> database/sql: associate a mutex with each driver interface\r\n>\r\n> The database/sql/driver docs make this promise:\r\n>\r\n>    \"Conn is a connection to a database. It is not used\r\n>    concurrently by multiple goroutines.\"\r\n>\r\n> That promises exists as part of database/sql's overall\r\n> goal of making drivers relatively easy to write.\r\n>\r\n> So far this promise has been kept without the use of locks by\r\n> being careful in the database/sql package, but sometimes too\r\n> careful. (cf. golang.org/issue/3857)\r\n>\r\n> The CL associates a Mutex with each driver.Conn, and with the\r\n> interface value progeny thereof. (e.g. each driver.Tx,\r\n> driver.Stmt, driver.Rows, driver.Result, etc) Then whenever\r\n> those interface values are used, the Locker is locked.\r\n>\r\n> This CL should be a no-op (aside from some new Lock/Unlock\r\n> pairs) and doesn't attempt to fix Issue 3857 or Issue 4459,\r\n> but should make it much easier in a subsequent CL.\r\n>\r\n> Update issue 3857\r\n>\r\n> Please review this at https://codereview.appspot.**com/7803043/<https://codereview.appspot.com/7803043/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/database/sql/convert.**go\r\n>   M src/pkg/database/sql/sql.go\r\n>   M src/pkg/database/sql/sql_test.**go\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-13 22:55:44.065300",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm wondering whether you should be using defer to unlock before calling into driver-implemented functions. Does it matter if a panic happens and doesn't unlock the conn? I guess the conn is still hosed in that case anyway.\n\nhttps://codereview.appspot.com/7803043/diff/6/src/pkg/database/sql/sql.go\nFile src/pkg/database/sql/sql.go (right):\n\nhttps://codereview.appspot.com/7803043/diff/6/src/pkg/database/sql/sql.go#newcode222\nsrc/pkg/database/sql/sql.go:222: ds.Unlock()\ndefer?\n\nhttps://codereview.appspot.com/7803043/diff/6/src/pkg/database/sql/sql.go#newcode440\nsrc/pkg/database/sql/sql.go:440: c.Unlock()\ndefer?\n\nhttps://codereview.appspot.com/7803043/diff/6/src/pkg/database/sql/sql.go#newcode602\nsrc/pkg/database/sql/sql.go:602: withLock(dc, func() { si.Close() })\nwhy do you use withLock here?, and not above?",
			"disapproval": false,
			"date": "2013-03-14 00:53:43.602160",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/7803043/diff/6/src/pkg/database/sql/sql.go\nFile src/pkg/database/sql/sql.go (right):\n\nhttps://codereview.appspot.com/7803043/diff/6/src/pkg/database/sql/sql.go#newcode602\nsrc/pkg/database/sql/sql.go:602: withLock(dc, func() { si.Close() })\nOn 2013/03/14 00:53:43, adg wrote:\n> why do you use withLock here?, and not above?\n\nI use withLock when I don't look at the return values, because withLock doesn't return anthing.  Mostly with Close.",
			"disapproval": false,
			"date": "2013-03-14 00:55:30.831540",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I added withLock just for brevity of the defers where it's shorter. Then I\r\nthought you wanted me to use it more.\r\nOn Mar 13, 2013 7:13 PM, <adg@golang.org> wrote:\r\n\r\n>\r\n> https://codereview.appspot.**com/7803043/diff/11001/src/**\r\n> pkg/database/sql/sql.go<https://codereview.appspot.com/7803043/diff/11001/src/pkg/database/sql/sql.go>\r\n> File src/pkg/database/sql/sql.go (right):\r\n>\r\n> https://codereview.appspot.**com/7803043/diff/11001/src/**\r\n> pkg/database/sql/sql.go#**newcode1330<https://codereview.appspot.com/7803043/diff/11001/src/pkg/database/sql/sql.go#newcode1330>\r\n> src/pkg/database/sql/sql.go:**1330: func withLock(lk sync.Locker, fn\r\n> func()) {\r\n> I don't think this is really worth the trouble.\r\n>\r\n> this is 32 chars:\r\n> withLock(a, func() { call() })\r\n>\r\n> this is 27:\r\n> a.Lock()\r\n> call()\r\n> a.Unlock()\r\n>\r\n> https://codereview.appspot.**com/7803043/<https://codereview.appspot.com/7803043/>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-14 03:15:48.261780",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 14 March 2013 14:15, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n\r\n> I added withLock just for brevity of the defers where it's shorter. Then I\r\n> thought you wanted me to use it more.\r\n\r\n\r\nI did when I thought it added something, but then I realized it didn't and\r\njust made the code a bit harder to read.\r\n\r\nSorry for the change of heart. I'm not trying to make this difficult, I\r\nswear!\r\n",
			"disapproval": false,
			"date": "2013-03-14 03:31:04.507360",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, adg@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2013-03-14 16:55:54.310180",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Okay, re-uploaded only using withLock for defers.\r\n\r\nOn Wed, Mar 13, 2013 at 8:30 PM, Andrew Gerrand <adg@golang.org> wrote:\r\n\r\n>\r\n> On 14 March 2013 14:15, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n>\r\n>> I added withLock just for brevity of the defers where it's shorter. Then\r\n>> I thought you wanted me to use it more.\r\n>\r\n>\r\n> I did when I thought it added something, but then I realized it didn't and\r\n> just made the code a bit harder to read.\r\n>\r\n> Sorry for the change of heart. I'm not trying to make this difficult, I\r\n> swear!\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-14 16:56:09.106200",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2013-03-14 21:52:01.133260",
			"approval": true
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=0c029965805f ***\n\ndatabase/sql: associate a mutex with each driver interface\n\nThe database/sql/driver docs make this promise:\n\n   \"Conn is a connection to a database. It is not used\n   concurrently by multiple goroutines.\"\n\nThat promises exists as part of database/sql's overall\ngoal of making drivers relatively easy to write.\n\nSo far this promise has been kept without the use of locks by\nbeing careful in the database/sql package, but sometimes too\ncareful. (cf. golang.org/issue/3857)\n\nThe CL associates a Mutex with each driver.Conn, and with the\ninterface value progeny thereof. (e.g. each driver.Tx,\ndriver.Stmt, driver.Rows, driver.Result, etc) Then whenever\nthose interface values are used, the Locker is locked.\n\nThis CL should be a no-op (aside from some new Lock/Unlock\npairs) and doesn't attempt to fix Issue 3857 or Issue 4459,\nbut should make it much easier in a subsequent CL.\n\nUpdate issue 3857\n\nR=golang-dev, adg\nCC=golang-dev\nhttps://codereview.appspot.com/7803043",
			"disapproval": false,
			"date": "2013-03-14 22:01:48.253970",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 7803043: database/sql: associate a mutex with each driver interface",
	"created": "2013-03-13 22:52:20.953600",
	"patchsets": [
		1,
		2001,
		6,
		11001,
		17001,
		23001
	],
	"modified": "2013-03-14 22:01:49.313860",
	"closed": true,
	"issue": 7803043
}