{
	"description": "bufio: Implement io.ReaderFrom for (*Writer).\n\nThis is part 2 of 2 for issue 4028.\n\nbenchmark                        old ns/op    new ns/op    delta\nBenchmarkWriterCopyOptimal           53293        28326  -46.85%\nBenchmarkWriterCopyUnoptimal         53757        30537  -43.19%\nBenchmarkWriterCopyNoReadFrom        53192        36642  -31.11%\n\nFixes issue 4028.",
	"cc": [
		"nigeltao@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "mchaten@gmail.com",
			"recipients": [
				"mchaten@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6565056/diff/5001/src/pkg/bufio/bufio.go\nFile src/pkg/bufio/bufio.go (right):\n\nhttps://codereview.appspot.com/6565056/diff/5001/src/pkg/bufio/bufio.go#newcode582\nsrc/pkg/bufio/bufio.go:582: for m, err = b.readBuf(r); m > 0 && err == nil; m, err = b.readBuf(r) {\nOn 2012/09/28 04:49:24, nigeltao wrote:\n> This isn't right. \"godoc io Reader\" says that it's valid for r.Read to return m\n> > 0 and err == io.EOF at the end of file, and those m bytes will be ignored by\n> this loop. I think that you want something like\n> \n> for {\n>   m, err := r.Read(b.buf[b.n:])\n>   b.n += m\n>   n += m\n>   // r.Read can return m > 0 && err != nil, such as at end of file.\n>   // We need to flush those m bytes before returning.\n>   if err1 := b.Flush(); err1 != nil {\n>     return n, err1\n>   }\n>   if err != nil {\n>     if err == io.EOF {\n>       err = nil\n>     }\n>     return n, err\n>   }\n> }\n> panic(\"unreachable\")\n> \n> A test of this (m > 0 && err != nil) code path would be good.\n\nDone.\n\nhttps://codereview.appspot.com/6565056/diff/5001/src/pkg/bufio/bufio_test.go\nFile src/pkg/bufio/bufio_test.go (right):\n\nhttps://codereview.appspot.com/6565056/diff/5001/src/pkg/bufio/bufio_test.go#newcode778\nsrc/pkg/bufio/bufio_test.go:778: }\nOn 2012/09/28 04:49:24, nigeltao wrote:\n> Add a blank line after this.\n\nDone.",
			"disapproval": false,
			"date": "2012-09-28 06:12:08.415020",
			"approval": false
		},
		{
			"sender": "mchaten@gmail.com",
			"recipients": [
				"mchaten@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6565056/diff/9001/src/pkg/bufio/bufio_test.go\nFile src/pkg/bufio/bufio_test.go (right):\n\nhttps://codereview.appspot.com/6565056/diff/9001/src/pkg/bufio/bufio_test.go#newcode782\nsrc/pkg/bufio/bufio_test.go:782: r := NewReader(&onlyReader{bytes.NewBuffer(input)})\nI made this change to make sure we are testing the path of WriteTo that occurs when the underlying reader is not a WriterTo.",
			"disapproval": false,
			"date": "2012-09-28 06:15:32.511240",
			"approval": false
		},
		{
			"sender": "mchaten@gmail.com",
			"recipients": [
				"mchaten@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-09-28 06:12:33.697970",
			"approval": false
		},
		{
			"sender": "mchaten@gmail.com",
			"recipients": [
				"mchaten@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go/",
			"disapproval": false,
			"date": "2012-09-27 09:27:00.814190",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"mchaten@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6565056/diff/5001/src/pkg/bufio/bufio.go\nFile src/pkg/bufio/bufio.go (right):\n\nhttps://codereview.appspot.com/6565056/diff/5001/src/pkg/bufio/bufio.go#newcode582\nsrc/pkg/bufio/bufio.go:582: for m, err = b.readBuf(r); m > 0 && err == nil; m, err = b.readBuf(r) {\nThis isn't right. \"godoc io Reader\" says that it's valid for r.Read to return m > 0 and err == io.EOF at the end of file, and those m bytes will be ignored by this loop. I think that you want something like\n\nfor {\n  m, err := r.Read(b.buf[b.n:])\n  b.n += m\n  n += m\n  // r.Read can return m > 0 && err != nil, such as at end of file.\n  // We need to flush those m bytes before returning.\n  if err1 := b.Flush(); err1 != nil {\n    return n, err1\n  }\n  if err != nil {\n    if err == io.EOF {\n      err = nil\n    }\n    return n, err\n  }\n}\npanic(\"unreachable\")\n\nA test of this (m > 0 && err != nil) code path would be good.\n\nhttps://codereview.appspot.com/6565056/diff/5001/src/pkg/bufio/bufio_test.go\nFile src/pkg/bufio/bufio_test.go (right):\n\nhttps://codereview.appspot.com/6565056/diff/5001/src/pkg/bufio/bufio_test.go#newcode778\nsrc/pkg/bufio/bufio_test.go:778: }\nAdd a blank line after this.",
			"disapproval": false,
			"date": "2012-09-28 04:49:24.602710",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"mchaten@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/6565056/diff/9001/src/pkg/bufio/bufio.go\nFile src/pkg/bufio/bufio.go (right):\n\nhttp://codereview.appspot.com/6565056/diff/9001/src/pkg/bufio/bufio.go#newcode581\nsrc/pkg/bufio/bufio.go:581: var n, m int64\nYou could delete some of these declarations if you name the return variables.\n\nhttp://codereview.appspot.com/6565056/diff/9001/src/pkg/bufio/bufio.go#newcode583\nsrc/pkg/bufio/bufio.go:583: for m, rerr = b.readBuf(r); m > 0; m, rerr = b.readBuf(r) {\nI'd prefer to use a 0-part for loop instead of a 3-part one, and then inline the readBuf method:\n\nfunc (b *Writer) ReadFrom(r io.Reader) (n int64, err error) {\n  if err = b.Flush(); err != nil {\n    return 0, err\n  }\n  if w, ok := b.wr.(io.ReaderFrom); ok {\n    return w.ReadFrom(r)\n  }\n  var m int\n  for {\n    m, err = r.Read(b.buf[b.n:])\n    if m == 0 {\n      break\n    }\n    b.n += m\n    n += int64(m)\n    if err1 := b.Flush(); err1 != nil {\n      return n, err1\n    }\n    if err != nil {\n      break\n    }\n  }\n  if err == io.EOF {\n    err = nil\n  }\n  return n, err\n}\n\nhttp://codereview.appspot.com/6565056/diff/9001/src/pkg/bufio/bufio_test.go\nFile src/pkg/bufio/bufio_test.go (right):\n\nhttp://codereview.appspot.com/6565056/diff/9001/src/pkg/bufio/bufio_test.go#newcode844\nsrc/pkg/bufio/bufio_test.go:844: continue //Don't want to spit out a large amount of errors below\nI don't think that the comment is necessary.\n\nhttp://codereview.appspot.com/6565056/diff/9001/src/pkg/bufio/bufio_test.go#newcode846\nsrc/pkg/bufio/bufio_test.go:846: for i, val := range b.Bytes() {\nI'd say\nif got, want := b.String(), string(input); got != want {\n  t.Errorf(ws[%d], rs[%d]:\\ngot  %q\\nwant %q\\n\", wi, ri, got, want)\n}",
			"disapproval": false,
			"date": "2012-10-04 12:34:46.600820",
			"approval": false
		},
		{
			"sender": "mchaten@gmail.com",
			"recipients": [
				"mchaten@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-18 06:16:04.484770",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"mchaten@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6565056/diff/13001/src/pkg/bufio/bufio.go\nFile src/pkg/bufio/bufio.go (right):\n\nhttps://codereview.appspot.com/6565056/diff/13001/src/pkg/bufio/bufio.go#newcode599\nsrc/pkg/bufio/bufio.go:599: func (b *Writer) readBuf(r io.Reader) (int64, error) {\nDelete this unused method.",
			"disapproval": false,
			"date": "2012-10-18 06:25:11.784150",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"mchaten@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.",
			"disapproval": false,
			"date": "2012-10-19 00:20:46.127610",
			"approval": true
		},
		{
			"sender": "mchaten@gmail.com",
			"recipients": [
				"mchaten@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello nigeltao@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2012-10-18 08:02:24.459840",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"mchaten@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=d0ca00912d1c ***\n\nbufio: Implement io.ReaderFrom for (*Writer).\n\nThis is part 2 of 2 for issue 4028.\n\nbenchmark                        old ns/op    new ns/op    delta\nBenchmarkWriterCopyOptimal           53293        28326  -46.85%\nBenchmarkWriterCopyUnoptimal         53757        30537  -43.19%\nBenchmarkWriterCopyNoReadFrom        53192        36642  -31.11%\n\nFixes issue 4028.\n\nR=nigeltao\nCC=golang-dev\nhttp://codereview.appspot.com/6565056\n\nCommitter: Nigel Tao <nigeltao@golang.org>",
			"disapproval": false,
			"date": "2012-10-19 00:23:32.196500",
			"approval": false
		},
		{
			"sender": "mchaten@gmail.com",
			"recipients": [
				"mchaten@gmail.com",
				"nigeltao@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-11-20 22:00:40.316430",
			"approval": false
		}
	],
	"owner_email": "mchaten@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "chaten",
	"subject": "code review 6565056: bufio: Implement io.ReaderFrom for (*Writer).",
	"created": "2012-09-27 09:20:29.286290",
	"patchsets": [
		1,
		2001,
		5001,
		9001,
		13001,
		19001
	],
	"modified": "2012-11-20 22:00:42.731750",
	"closed": true,
	"issue": 6565056
}