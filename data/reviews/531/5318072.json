{
	"description": "websocket: return an error HTTP response for bad websocket request.\n\nwebsocket spec had changed server-side requiements to return\nan HTTP response with an appropriate error code (such as 400 Bad\nRequest) when it finds client did not send a handshake that matches\nwebsocket protocol, rather than just closing connection.\nIt needs to flush out response before closing connection.\nFixes issues 2396.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "ukai@google.com",
			"recipients": [
				"ukai@google.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-02 07:47:31.667510",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\nOn Wed, Nov 2, 2011 at 12:47 AM, <ukai@google.com> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> websocket: return an error HTTP response for bad websocket request.\n>\n> websocket spec had changed server-side requiements to return\n> an HTTP response with an appropriate error code (such as 400 Bad\n> Request) when it finds client did not send a handshake that matches\n> websocket protocol, rather than just closing connection.\n> It needs to flush out response before closing connection.\n>\n> Please review this at http://codereview.appspot.com/**5318072/<http://codereview.appspot.com/5318072/>\n>\n> Affected files:\n>  M src/pkg/websocket/server.go\n>  M src/pkg/websocket/websocket_**test.go\n>\n>\n> Index: src/pkg/websocket/server.go\n> ==============================**==============================**=======\n> --- a/src/pkg/websocket/server.go\n> +++ b/src/pkg/websocket/server.go\n> @@ -20,6 +20,7 @@\n>                fmt.Fprintf(buf, \"Sec-WebSocket-Version: %s\\r\\n\",\n> SupportedProtocolVersion)\n>                buf.WriteString(\"\\r\\n\")\n>                buf.WriteString(err.Error())\n> +               buf.Flush()\n>                return\n>        }\n>        if err != nil {\n> @@ -34,12 +35,17 @@\n>                fmt.Fprintf(buf, \"HTTP/1.1 %03d %s\\r\\n\", code,\n> http.StatusText(code))\n>                buf.WriteString(\"\\r\\n\")\n>                buf.WriteString(err.Error())\n> +               buf.Flush()\n>                return\n>        }\n>        config.Protocol = nil\n>\n>        err = hs.AcceptHandshake(buf.Writer)\n>        if err != nil {\n> +               code = http.StatusBadRequest\n> +               fmt.Fprintf(buf, \"HTTP/1.1 %03d %s\\r\\n\", code,\n> http.StatusText(code))\n> +               buf.WriteString(\"\\r\\n\")\n> +               buf.Flush()\n>                return\n>        }\n>        conn = hs.NewServerConn(buf, rwc, req)\n> Index: src/pkg/websocket/websocket_**test.go\n> ==============================**==============================**=======\n> --- a/src/pkg/websocket/websocket_**test.go\n> +++ b/src/pkg/websocket/websocket_**test.go\n> @@ -200,20 +200,19 @@\n>        once.Do(startServer)\n>\n>        // If the client did not send a handshake that matches the protocol\n> -       // specification, the server should abort the WebSocket connection.\n> -       _, err := http.Get(fmt.Sprintf(\"http://%**s/echo\", serverAddr))\n> -       if err == nil {\n> -               t.Error(\"Get: unexpected success\")\n> +       // specification, the server MUST return an HTTP respose with an\n> +       // appropriate error code (such as 400 Bad Request)\n> +       resp, err := http.Get(fmt.Sprintf(\"http://%**s/echo\", serverAddr))\n> +       if err != nil {\n> +               t.Errorf(\"Get: error %#v\", err)\n>                return\n>        }\n> -       urlerr, ok := err.(*url.Error)\n> -       if !ok {\n> -               t.Errorf(\"Get: not url.Error %#v\", err)\n> +       if resp == nil {\n> +               t.Error(\"Get: resp is null\")\n>                return\n>        }\n> -       if urlerr.Err != io.ErrUnexpectedEOF {\n> -               t.Errorf(\"Get: error %#v\", err)\n> -               return\n> +       if resp.StatusCode != http.StatusBadRequest {\n> +               t.Errorf(\"Get: expected %q got %q\", http.StatusBadRequest,\n> resp.StatusCode)\n>        }\n>  }\n>\n>\n>\n>\n",
			"disapproval": false,
			"date": "2011-11-02 15:09:49.044105",
			"approval": true
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"ukai@google.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=487aea019d10 ***\n\nwebsocket: return an error HTTP response for bad websocket request.\n\nwebsocket spec had changed server-side requiements to return\nan HTTP response with an appropriate error code (such as 400 Bad\nRequest) when it finds client did not send a handshake that matches\nwebsocket protocol, rather than just closing connection.\nIt needs to flush out response before closing connection.\nFixes issues 2396.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5318072\n\nCommitter: Andrew Gerrand <adg@golang.org>",
			"disapproval": false,
			"date": "2011-11-03 03:13:45.440240",
			"approval": false
		}
	],
	"owner_email": "ukai@google.com",
	"private": false,
	"base_url": "",
	"owner": "ukai",
	"subject": "code review 5318072: websocket: return an error HTTP response for bad websoc...",
	"created": "2011-11-02 07:46:50.534230",
	"patchsets": [
		1,
		3,
		3001
	],
	"modified": "2011-11-10 18:01:55.199570",
	"closed": true,
	"issue": 5318072
}