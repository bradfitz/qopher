{
	"description": "libmach: compatibility with Plan 9 toolchain.\n\nsrc/libmach/executable.c:\n. Addition of USED() instructions.\n. Changed a complex command so it does not attempt to use more\n  resources than the Plan 9 C compiler can handle.\nThe rest:\n. Type casts and format changes to appease the Plan 9 compiler.",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "For discussion:\n\nOn 10/31/11, rsc@golang.org <rsc@golang.org> wrote:\n> Thanks.  In general I'd rather fix the formats\n> than insert casts.  int32 is just int on all the\n> systems we're using so instead of casting we\n> can just write %d instead of %ld.\n>\nI ought to have thought along the same lines, I probably got carried\naway being clever.  It could also have been construed as my being too\nlazy to check, but that's not what made me do it :-)\n\n> A few other mysteries below.\n>\n>\n>\n> http://codereview.appspot.com/5316059/diff/5001/src/libmach/8db.c\n> File src/libmach/8db.c (right):\n>\n> http://codereview.appspot.com/5316059/diff/5001/src/libmach/8db.c#newcode128\n> src/libmach/8db.c:128: snprint(buf, sizeof(buf), \"exception %ld\",\n> (long)c);\n> Better: %d\n>\nAgreed.\n\n> http://codereview.appspot.com/5316059/diff/5001/src/libmach/8db.c#newcode1974\n> src/libmach/8db.c:1974: bprint(ip, \"%llux(SP)\", (uvlong)offset);\n> offset is only an int32.  %ux should be fine\n>\nOkay.\n\n> http://codereview.appspot.com/5316059/diff/5001/src/libmach/8db.c#newcode1990\n> src/libmach/8db.c:1990: bprint(ip, \"%llux%s\", (uvlong)offset, reg);\n> %ux\n>\nOkay.\n\n> http://codereview.appspot.com/5316059/diff/5001/src/libmach/8db.c#newcode2064\n> src/libmach/8db.c:2064: bprint(ip, \"%s+%#llux(SB)\", s.name, (uvlong)w);\n> %ux\n>\nOkay.\n\n> http://codereview.appspot.com/5316059/diff/5001/src/libmach/8db.c#newcode2107\n> src/libmach/8db.c:2107: bprint(ip, \"%llux\", (uvlong)ip->disp);\n> %ux\n>\nOkay.\n\n> http://codereview.appspot.com/5316059/diff/5001/src/libmach/8db.c#newcode2200\n> src/libmach/8db.c:2200: bprint(ip,\"%ux:%llux\",ip->seg,(uvlong)ip->disp);\n> %ux\n>\nOkay.\n\n> http://codereview.appspot.com/5316059/diff/5001/src/libmach/executable.c\n> File src/libmach/executable.c (right):\n>\n> http://codereview.appspot.com/5316059/diff/5001/src/libmach/executable.c#newcode580\n> src/libmach/executable.c:580: USED(fp);\n> Huh?  Why did these move down?\n>\n> x4\n>\nBecause when (if?) eventually the code is restored, then the first\nargument remains unused, but the other two are no longer going to need\nUSED() for them.  I was trying to highlight the situation.\n\n> http://codereview.appspot.com/5316059/diff/5001/src/libmach/executable.c#newcode800\n> src/libmach/executable.c:800: #ifdef NOTDEF\n> What's going on here?\n>\nI don't know what the Plan 9 compiler was complaining about, this was\nidentified a long time ago. I'll double check.\n\n> http://codereview.appspot.com/5316059/diff/5001/src/libmach/machdata.c\n> File src/libmach/machdata.c (right):\n>\n> http://codereview.appspot.com/5316059/diff/5001/src/libmach/machdata.c#newcode116\n> src/libmach/machdata.c:116: return snprint(buf, n, \"%s+%#lux\", s.name,\n> (long)delta);\n> I'd rather just say %#ux.\n>\nOkay.\n\n> http://codereview.appspot.com/5316059/diff/5001/src/libmach/machdata.c#newcode142\n> src/libmach/machdata.c:142: snprint(buf, n, \"%lux\", (long)r);\n> %ux\n>\nOkay.\n\n> http://codereview.appspot.com/5316059/diff/5001/src/libmach/machdata.c#newcode222\n> src/libmach/machdata.c:222: return snprint(buf, n, \"DeN(%.8lux%.8lux)\",\n> (long)h, (long)l);\n> s/lux/ux/g\n>\nOkay.\n\n> http://codereview.appspot.com/5316059/diff/5001/src/libmach/machdata.c#newcode227\n> src/libmach/machdata.c:227: return snprint(buf, n, \"NaN(%.8lux%.8lux)\",\n> h&((1L<<20)-1L), (long)l);\n> s/lux/ux/g\n> s/L//g\n>\nOK and s/.long.//.\n\n> http://codereview.appspot.com/5316059/diff/5001/src/libmach/machdata.c#newcode259\n> src/libmach/machdata.c:259: return snprint(buf, n, \"DeN(%.8lux)\",\n> (long)h);\n> s/lux/ux/\n>\nOkay.\n\n> http://codereview.appspot.com/5316059/diff/5001/src/libmach/map.c\n> File src/libmach/map.c (right):\n>\n> http://codereview.appspot.com/5316059/diff/5001/src/libmach/map.c#newcode143\n> src/libmach/map.c:143: USED(map);\n> Seems redundant.\n>\nIs redundant, it looks like I couldn't decide on spacing.  What is the\nstandard?  A blank line on both sides of a USED() block?\n\n> http://codereview.appspot.com/5316059/diff/5001/src/libmach/sym.c\n> File src/libmach/sym.c (right):\n>\n> http://codereview.appspot.com/5316059/diff/5001/src/libmach/sym.c#newcode127\n> src/libmach/sym.c:127: werrstr(\"can't malloc %ld bytes\",\n> (long)fp->symsz);\n> %d\n>\nOkay.\n\n> http://codereview.appspot.com/5316059/diff/5001/src/libmach/sym.c#newcode206\n> src/libmach/sym.c:206: print(\"NG: %ld NT: %d NF: %d\\n\", (long)nglob,\n> ntxt, fmaxi);\n> %d\n>\nOkay.\n\n> http://codereview.appspot.com/5316059/diff/5001/src/libmach/sym.c#newcode210\n> src/libmach/sym.c:210: werrstr(\"can't malloc %ld bytes\",\n> (long)fp->sppcsz);\n> %d\n>\n> http://codereview.appspot.com/5316059/diff/5001/src/libmach/sym.c#newcode223\n> src/libmach/sym.c:223: werrstr(\"can't malloc %ld bytes\",\n> (long)fp->lnpcsz);\n> %d\n>\nOkay.\n\n> http://codereview.appspot.com/5316059/diff/5001/src/libmach/sym.c#newcode283\n> src/libmach/sym.c:283: werrstr(\"can't malloc %ld bytes\", (long)n);\n> %d\n>\nOkay.\n\n> http://codereview.appspot.com/5316059/diff/5001/src/libmach/sym.c#newcode288\n> src/libmach/sym.c:288: werrstr(\"can't read %ld bytes of symbol name\",\n> (long)n);\n> %d\n>\nOkay.\n\n> http://codereview.appspot.com/5316059/diff/5001/src/libmach/sym.c#newcode300\n> src/libmach/sym.c:300: werrstr(\"can't malloc %ld bytes\", (long)n);\n> %d\n>\nOkay.\n\n> http://codereview.appspot.com/5316059/diff/5001/src/libmach/sym.c#newcode916\n> src/libmach/sym.c:916: werrstr(\"line %ld in file %s not found\",\n> (long)line, file);\n> %d\n>\nOkay.\n\n> http://codereview.appspot.com/5316059/diff/5001/src/libmach/sym.c#newcode929\n> src/libmach/sym.c:929: print(\"find pc for %ld - between: %llux and\n> %llux\\n\", (long)line, start, end);\n> %d\n>\nOkay.\n\n> http://codereview.appspot.com/5316059/diff/5001/src/libmach/sym.c#newcode932\n> src/libmach/sym.c:932: werrstr(\"line %ld not in file %s\", (long)line,\n> file);\n> %d\n>\nOkay.\n\n> http://codereview.appspot.com/5316059/diff/5001/src/libmach/sym.c#newcode1149\n> src/libmach/sym.c:1149: sprint(str+k, \":%ld\", (long)line);\n> %d\n>\nOkay.\n\n> http://codereview.appspot.com/5316059/diff/5001/src/libmach/sym.c#newcode1407\n> src/libmach/sym.c:1407: print(\"%s Line: %lx (%ld)  Offset: %lx (%ld)\n> Name: \", msg,\n> s/%l/%/g\n>\nOkay.\n\n> http://codereview.appspot.com/5316059/\n>\n\nLucio.\n",
			"disapproval": false,
			"date": "2011-11-02 12:18:20.345744",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"lucio.dere@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com, rsc@golang.org),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-27 18:39:33.144963",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lucio.dere@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Thanks.  In general I'd rather fix the formats\nthan insert casts.  int32 is just int on all the\nsystems we're using so instead of casting we\ncan just write %d instead of %ld.\n\nA few other mysteries below.\n\nhttp://codereview.appspot.com/5316059/diff/5001/src/libmach/8db.c\nFile src/libmach/8db.c (right):\n\nhttp://codereview.appspot.com/5316059/diff/5001/src/libmach/8db.c#newcode128\nsrc/libmach/8db.c:128: snprint(buf, sizeof(buf), \"exception %ld\", (long)c);\nBetter: %d\n\nhttp://codereview.appspot.com/5316059/diff/5001/src/libmach/8db.c#newcode1974\nsrc/libmach/8db.c:1974: bprint(ip, \"%llux(SP)\", (uvlong)offset);\noffset is only an int32.  %ux should be fine\n\nhttp://codereview.appspot.com/5316059/diff/5001/src/libmach/8db.c#newcode1990\nsrc/libmach/8db.c:1990: bprint(ip, \"%llux%s\", (uvlong)offset, reg);\n%ux\n\nhttp://codereview.appspot.com/5316059/diff/5001/src/libmach/8db.c#newcode2064\nsrc/libmach/8db.c:2064: bprint(ip, \"%s+%#llux(SB)\", s.name, (uvlong)w);\n%ux\n\nhttp://codereview.appspot.com/5316059/diff/5001/src/libmach/8db.c#newcode2107\nsrc/libmach/8db.c:2107: bprint(ip, \"%llux\", (uvlong)ip->disp);\n%ux\n\nhttp://codereview.appspot.com/5316059/diff/5001/src/libmach/8db.c#newcode2200\nsrc/libmach/8db.c:2200: bprint(ip,\"%ux:%llux\",ip->seg,(uvlong)ip->disp);\n%ux\n\nhttp://codereview.appspot.com/5316059/diff/5001/src/libmach/executable.c\nFile src/libmach/executable.c (right):\n\nhttp://codereview.appspot.com/5316059/diff/5001/src/libmach/executable.c#newcode580\nsrc/libmach/executable.c:580: USED(fp);\nHuh?  Why did these move down?\n\nx4\n\nhttp://codereview.appspot.com/5316059/diff/5001/src/libmach/executable.c#newcode800\nsrc/libmach/executable.c:800: #ifdef NOTDEF\nWhat's going on here?\n\nhttp://codereview.appspot.com/5316059/diff/5001/src/libmach/machdata.c\nFile src/libmach/machdata.c (right):\n\nhttp://codereview.appspot.com/5316059/diff/5001/src/libmach/machdata.c#newcode116\nsrc/libmach/machdata.c:116: return snprint(buf, n, \"%s+%#lux\", s.name, (long)delta);\nI'd rather just say %#ux.\n\nhttp://codereview.appspot.com/5316059/diff/5001/src/libmach/machdata.c#newcode142\nsrc/libmach/machdata.c:142: snprint(buf, n, \"%lux\", (long)r);\n%ux\n\nhttp://codereview.appspot.com/5316059/diff/5001/src/libmach/machdata.c#newcode222\nsrc/libmach/machdata.c:222: return snprint(buf, n, \"DeN(%.8lux%.8lux)\", (long)h, (long)l);\ns/lux/ux/g\n\nhttp://codereview.appspot.com/5316059/diff/5001/src/libmach/machdata.c#newcode227\nsrc/libmach/machdata.c:227: return snprint(buf, n, \"NaN(%.8lux%.8lux)\", h&((1L<<20)-1L), (long)l);\ns/lux/ux/g\ns/L//g\n\nhttp://codereview.appspot.com/5316059/diff/5001/src/libmach/machdata.c#newcode259\nsrc/libmach/machdata.c:259: return snprint(buf, n, \"DeN(%.8lux)\", (long)h);\ns/lux/ux/\n\nhttp://codereview.appspot.com/5316059/diff/5001/src/libmach/map.c\nFile src/libmach/map.c (right):\n\nhttp://codereview.appspot.com/5316059/diff/5001/src/libmach/map.c#newcode143\nsrc/libmach/map.c:143: USED(map);\nSeems redundant.\n\nhttp://codereview.appspot.com/5316059/diff/5001/src/libmach/sym.c\nFile src/libmach/sym.c (right):\n\nhttp://codereview.appspot.com/5316059/diff/5001/src/libmach/sym.c#newcode127\nsrc/libmach/sym.c:127: werrstr(\"can't malloc %ld bytes\", (long)fp->symsz);\n%d\n\nhttp://codereview.appspot.com/5316059/diff/5001/src/libmach/sym.c#newcode206\nsrc/libmach/sym.c:206: print(\"NG: %ld NT: %d NF: %d\\n\", (long)nglob, ntxt, fmaxi);\n%d\n\nhttp://codereview.appspot.com/5316059/diff/5001/src/libmach/sym.c#newcode210\nsrc/libmach/sym.c:210: werrstr(\"can't malloc %ld bytes\", (long)fp->sppcsz);\n%d\n\nhttp://codereview.appspot.com/5316059/diff/5001/src/libmach/sym.c#newcode223\nsrc/libmach/sym.c:223: werrstr(\"can't malloc %ld bytes\", (long)fp->lnpcsz);\n%d\n\nhttp://codereview.appspot.com/5316059/diff/5001/src/libmach/sym.c#newcode283\nsrc/libmach/sym.c:283: werrstr(\"can't malloc %ld bytes\", (long)n);\n%d\n\nhttp://codereview.appspot.com/5316059/diff/5001/src/libmach/sym.c#newcode288\nsrc/libmach/sym.c:288: werrstr(\"can't read %ld bytes of symbol name\", (long)n);\n%d\n\nhttp://codereview.appspot.com/5316059/diff/5001/src/libmach/sym.c#newcode300\nsrc/libmach/sym.c:300: werrstr(\"can't malloc %ld bytes\", (long)n);\n%d\n\nhttp://codereview.appspot.com/5316059/diff/5001/src/libmach/sym.c#newcode916\nsrc/libmach/sym.c:916: werrstr(\"line %ld in file %s not found\", (long)line, file);\n%d\n\nhttp://codereview.appspot.com/5316059/diff/5001/src/libmach/sym.c#newcode929\nsrc/libmach/sym.c:929: print(\"find pc for %ld - between: %llux and %llux\\n\", (long)line, start, end);\n%d\n\nhttp://codereview.appspot.com/5316059/diff/5001/src/libmach/sym.c#newcode932\nsrc/libmach/sym.c:932: werrstr(\"line %ld not in file %s\", (long)line, file);\n%d\n\nhttp://codereview.appspot.com/5316059/diff/5001/src/libmach/sym.c#newcode1149\nsrc/libmach/sym.c:1149: sprint(str+k, \":%ld\", (long)line);\n%d\n\nhttp://codereview.appspot.com/5316059/diff/5001/src/libmach/sym.c#newcode1407\nsrc/libmach/sym.c:1407: print(\"%s Line: %lx (%ld)  Offset: %lx (%ld)  Name: \", msg,\ns/%l/%/g",
			"disapproval": false,
			"date": "2011-10-31 16:59:00.880460",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> Because when (if?) eventually the code is restored, then the first\n> argument remains unused, but the other two are no longer going to need\n> USED() for them. \u00a0I was trying to highlight the situation.\n\nThe old code also highlighted that, without having to worry\nabout #else directives.  Please revert.\n\n> Is redundant, it looks like I couldn't decide on spacing. \u00a0What is the\n> standard? \u00a0A blank line on both sides of a USED() block?\n\nAs long as USED is in the code and not in the declarations,\nI don't care much whether there is a blank line after them.\nPlease revert.\n\nIt is always good not to edit code that doesn't need editing,\nbecause it helps later when you are digging through history.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-02 12:48:57.163672",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On 11/2/11, Russ Cox <rsc@golang.org> wrote:\n>> Because when (if?) eventually the code is restored, then the first\n>> argument remains unused, but the other two are no longer going to need\n>> USED() for them.  I was trying to highlight the situation.\n>\n> The old code also highlighted that, without having to worry\n> about #else directives.  Please revert.\n>\nWill do.\n\n>> Is redundant, it looks like I couldn't decide on spacing.  What is the\n>> standard?  A blank line on both sides of a USED() block?\n>\n> As long as USED is in the code and not in the declarations,\n> I don't care much whether there is a blank line after them.\n> Please revert.\n>\nWill do.\n\n> It is always good not to edit code that doesn't need editing,\n> because it helps later when you are digging through history.\n>\nSometimes the end result isn't entirely obvious.  But I am keeping it in mind.\n\nLucio.\n",
			"disapproval": false,
			"date": "2011-11-02 12:52:14.358256",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lucio.dere@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5316059/diff/10003/src/libmach/executable.c\nFile src/libmach/executable.c (right):\n\nhttp://codereview.appspot.com/5316059/diff/10003/src/libmach/executable.c#newcode796\nsrc/libmach/executable.c:796: #ifdef NOTDEF\nThe rewrite of the code is fine.  There's no need to keep the old code.\nPlease move the Phdr64 *pph to the top of the file and then make this \nsection read\n\npph = ph + id\nsetdata(fp, ...);\n\n(no #ifdef)",
			"disapproval": false,
			"date": "2011-11-19 03:33:14.858271",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"lucio.dere@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-19 03:47:41.738266",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Cut and paste instead of copy and paste.  Blame ACME and slow-acting caffeine.\n\nLucio.\n\nOn 11/19/11, Russ Cox <rsc@golang.org> wrote:\n> Don't you want to keep the USED(fd) in nextboot?\n>\n",
			"disapproval": false,
			"date": "2011-11-19 03:59:35.179319",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"lucio.dere@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-18 17:04:39.024741",
			"approval": false
		},
		{
			"sender": "w.sitnikov@gmail.com",
			"recipients": [],
			"text": "Message",
			"disapproval": false,
			"date": "2011-11-18 17:14:53.609995",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Russ quizzed the need for the #if NOTDEF that provides a simpler\nalternative to the C instruction that trips the Plan 9 compiler.  I\nrecall others (ality?) bringing up the need to modify executable.c or\nthe compiler to fix the problem.\n\nThanks.  Lucio.\n\nOn 11/18/11, lucio.dere@gmail.com <lucio.dere@gmail.com> wrote:\n> Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n>\n> Please take another look.\n>\n>\n> http://codereview.appspot.com/5316059/\n>\n",
			"disapproval": false,
			"date": "2011-11-18 17:07:37.500777",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lucio.dere@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5316059/diff/5001/src/libmach/executable.c\nFile src/libmach/executable.c (right):\n\nhttp://codereview.appspot.com/5316059/diff/5001/src/libmach/executable.c#newcode800\nsrc/libmach/executable.c:800: #ifdef NOTDEF\nOn 2011/10/31 16:59:00, rsc wrote:\n> What's going on here?\n\nThe question stands.\n\nhttp://codereview.appspot.com/5316059/diff/10003/src/libmach/executable.c\nFile src/libmach/executable.c (left):\n\nhttp://codereview.appspot.com/5316059/diff/10003/src/libmach/executable.c#oldcode563\nsrc/libmach/executable.c:563: USED(fd);\nPlease restore these.\nThey are necessary if this code is ever un-#ifdefed.\nAnd they cannot possibly be breaking anything,\nsince they are #ifdef'ed out right now.\n\nx4",
			"disapproval": false,
			"date": "2011-11-18 23:40:46.965810",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 11/19/11, rsc@golang.org <rsc@golang.org> wrote:\n\n> http://codereview.appspot.com/5316059/diff/5001/src/libmach/executable.c#newcode800\n> src/libmach/executable.c:800: #ifdef NOTDEF\n> On 2011/10/31 16:59:00, rsc wrote:\n>> What's going on here?\n>\n> The question stands.\n>\nToo few registers in 8c?  This is what pops up:\n\n<eof> out of fixed registers\n<eof> out of fixed registers\n<eof>: error in regfree: AL\nmk: 8c -I/go/include ... blah, blah.\n\nI'm not keen to dig deeper, but seeing today is Saturday, just give\nthe word.  I do hope it is obvious to you.\n\n> http://codereview.appspot.com/5316059/diff/10003/src/libmach/executable.c#oldcode563\n> src/libmach/executable.c:563: USED(fd);\n> Please restore these.\n> They are necessary if this code is ever un-#ifdefed.\n> And they cannot possibly be breaking anything,\n> since they are #ifdef'ed out right now.\n>\n> x4\n>\nI just thought they would be redundant.  I see your point, but you'll\nhave to remind me again and again, my instinctive approach is\ndifferent :-)\n\nLucio.\n",
			"disapproval": false,
			"date": "2011-11-19 03:31:39.364471",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lucio.dere@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=4ed397e2cef1 ***\n\nlibmach: fix for Plan 9 build\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5316059\n\nCommitter: Russ Cox <rsc@golang.org>",
			"disapproval": false,
			"date": "2011-11-19 04:11:54.086972",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I was planning to do that, I tend to forget how things look to the\nreviewer as I don't often look.\n\nLucio.\n\n\nOn 11/19/11, rsc@golang.org <rsc@golang.org> wrote:\n>\n> http://codereview.appspot.com/5316059/diff/10003/src/libmach/executable.c\n> File src/libmach/executable.c (right):\n>\n> http://codereview.appspot.com/5316059/diff/10003/src/libmach/executable.c#newcode796\n> src/libmach/executable.c:796: #ifdef NOTDEF\n> The rewrite of the code is fine.  There's no need to keep the old code.\n> Please move the Phdr64 *pph to the top of the file and then make this\n> section read\n>\n> pph = ph + id\n> setdata(fp, ...);\n>\n> (no #ifdef)\n>\n> http://codereview.appspot.com/5316059/\n>\n",
			"disapproval": false,
			"date": "2011-11-19 03:41:18.772757",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Don't you want to keep the USED(fd) in nextboot?\n",
			"disapproval": false,
			"date": "2011-11-19 03:51:08.525869",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thanks, Russ, for all recent submissions.\n\nLucio.\n\nOn 11/19/11, rsc@golang.org <rsc@golang.org> wrote:\n> *** Submitted as\n> http://code.google.com/p/go/source/detail?r=4ed397e2cef1 ***\n>\n> libmach: fix for Plan 9 build\n>\n> R=rsc\n> CC=golang-dev\n> http://codereview.appspot.com/5316059\n>\n> Committer: Russ Cox <rsc@golang.org>\n>\n>\n> http://codereview.appspot.com/5316059/\n>\n",
			"disapproval": false,
			"date": "2011-11-19 04:15:52.320974",
			"approval": false
		},
		{
			"sender": "lucio.dere@gmail.com",
			"recipients": [
				"lucio.dere@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-19 04:01:17.470729",
			"approval": false
		}
	],
	"owner_email": "lucio.dere@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "lucio",
	"subject": "code review 5316059: libmach: compatibility with Plan 9 toolchain.",
	"created": "2011-10-27 18:03:08.321804",
	"patchsets": [
		1,
		2001,
		5001,
		10003,
		13004,
		17009
	],
	"modified": "2011-11-19 04:16:34.612123",
	"closed": true,
	"issue": 5316059
}