{
	"description": "http: add ECONNRESET to remote side closed detection on windows",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"bradfitz@golang.org",
		"hectorchu@gmail.com",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"hectorchu@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I think this bit of code belongs somewhere in the net package.\n\nAlex",
			"disapproval": false,
			"date": "2011-10-21 05:44:19.437413",
			"approval": false
		},
		{
			"sender": "hectorchu@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"bradfitz@golang.org",
				"hectorchu@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5312048/diff/5001/src/pkg/http/transport_windows.go\nFile src/pkg/http/transport_windows.go (right):\n\nhttp://codereview.appspot.com/5312048/diff/5001/src/pkg/http/transport_windows.go#newcode18\nsrc/pkg/http/transport_windows.go:18: case syscall.WSAESHUTDOWN, syscall.WSAECONNRESET:\nI thought the error was ERROR_NETNAME_DELETED?\nI think it was Linux that was ECONNRESET, which should be added to the common error handling instead.",
			"disapproval": false,
			"date": "2011-10-21 08:54:31.792648",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"hectorchu@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: bradfitz@golang.org, hectorchu@gmail.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-21 05:43:41.917260",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"alex.brainman@gmail.com",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"hectorchu@gmail.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\n\n.. with one fear:\n\nhttp://codereview.appspot.com/5312048/diff/5001/src/pkg/http/transport_windows.go\nFile src/pkg/http/transport_windows.go (right):\n\nhttp://codereview.appspot.com/5312048/diff/5001/src/pkg/http/transport_windows.go#newcode17\nsrc/pkg/http/transport_windows.go:17: switch op.Error.(os.Errno) {\nis this type assertion safe?\n\nI dislike the single lvalue panicing version of type assertions.  Too error-prone.\n\nI'd rather this be:\n\nerrno, _ := op.Error(os.Errno)\nswitch errno {\n...\n}",
			"disapproval": false,
			"date": "2011-10-21 06:42:12.212183",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"alex.brainman@gmail.com",
				"bradfitz@golang.org",
				"hectorchu@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5312048/diff/5001/src/pkg/http/transport_windows.go\nFile src/pkg/http/transport_windows.go (right):\n\nhttp://codereview.appspot.com/5312048/diff/5001/src/pkg/http/transport_windows.go#newcode5\nsrc/pkg/http/transport_windows.go:5: package http\nCan this file go way?  It was fine as a workaround, but package net\nshould not be letting OS-specific details through like this.  Whatever\nthe condition is that causes this error should produce the same behavior\nby package net regardless of underlying operating system.",
			"disapproval": false,
			"date": "2011-10-21 14:47:12.037974",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"bradfitz@golang.org",
				"hectorchu@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/10/21 14:47:12, rsc wrote:\n> ... but package net\n> should not be letting OS-specific details through like this. ...\n\nGood point.\n\n> ... Whatever\n> the condition is that causes this error should produce the same behavior\n> by package net regardless of underlying operating system.\n\nThe function is called remoteSideClosed. So that is the condition we are after.\nBut what does it practically mean? How does this condition gets triggered? And can we\nrecognize this condition just by looking at error message. I doubt.\n\nBrad, I don't know your code well enough, but why can't you just exit readLoop if Peek\nreturns any error. Why do you differentiate between different errors?\n\nAlex",
			"disapproval": false,
			"date": "2011-10-24 05:09:02.721785",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"alex.brainman@gmail.com",
				"bradfitz@golang.org",
				"hectorchu@gmail.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2011-12-07 04:32:57.707147",
			"approval": false
		}
	],
	"owner_email": "alex.brainman@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "brainman",
	"subject": "code review 5312048: http: add ECONNRESET to remote side closed detection on...",
	"created": "2011-10-21 05:41:41.473396",
	"patchsets": [
		1,
		2001,
		5001
	],
	"modified": "2011-12-07 04:33:00.188916",
	"closed": true,
	"issue": 5312048
}