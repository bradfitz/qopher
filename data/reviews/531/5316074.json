{
	"description": "time: add ISOWeek method to Time\n\nAs the ISO 8601 week number is untrivial to compute a new method\non *Time provides year and number of week.",
	"cc": [
		"golang-dev@googlegroups.com",
		"rsc@golang.org",
		"r@google.com",
		"r@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-11-03 14:51:06.712604",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "The canonical capitalization would be ISOWeekNumber.\nAre there other kinds of week numbers that matter?\nWhy not just Week?\n",
			"disapproval": false,
			"date": "2011-11-03 14:57:40.417788",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/11/03 14:57:40, rsc wrote:\n> Are there other kinds of week numbers that matter?\nHm. E.g. Microsoft Excel uses a simpler definition of\nJan 01 being always in week 1.  I'm unsure if this\nis really used in the US (as Outlook seems to display\nISO weeks).\n\n> Why not just Week?\nThe return value is year, week and not just week. But I\nadmit that WeekNumber is not much (any) better here.\n\nPossible solutions:\n - Just Week() for the ISO year,week tuple\n - Week() and SimpleWeek(): API proliferation\n - Week(simple bool): aka The Ugly API\n\nI (as being European) feel comfortable with just Week().",
			"disapproval": false,
			"date": "2011-11-04 08:52:10.741585",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "I looked into week numbering, and as usual it is far\nmore complex than I imagined.\n\nI propose to go with\n\nfunc (t *Time) ISOWeek() (year, week int)\n\nRuss\n",
			"disapproval": false,
			"date": "2011-11-07 16:26:12.426146",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Nov 7, 2011, at 8:26 AM, Russ Cox wrote:\n\n> I looked into week numbering, and as usual it is far\n> more complex than I imagined.\n> \n> I propose to go with\n> \n> func (t *Time) ISOWeek() (year, week int)\n\nditto. there's nothing out there a standard can't make more complicated. ISOWeek is OK; i hadn't answered because i was trying to decide if Week would do. i'm still not convinced it won't, but ISOWeek is clear.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-11-07 17:49:19.777716",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Nov 7, 2011 at 12:49, Rob 'Commander' Pike <r@google.com> wrote:\n> i hadn't answered because i was trying to decide if Week would do. i'm still not convinced it won't, but ISOWeek is clear.\n\nright, i think the clarity is the winning argument here,\neven if ISOWeek is the overwhelmingly common case.\nstrftime(3) shows three definitions (%U %V %W).\nironically, strftime.org is missing %V (the ISO week).\n\nruss\n",
			"disapproval": false,
			"date": "2011-11-07 17:56:35.962934",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Nov 7, 2011, at 9:56 AM, Russ Cox wrote:\n\n> On Mon, Nov 7, 2011 at 12:49, Rob 'Commander' Pike <r@google.com> wrote:\n>> i hadn't answered because i was trying to decide if Week would do. i'm still not convinced it won't, but ISOWeek is clear.\n> \n> right, i think the clarity is the winning argument here,\n> even if ISOWeek is the overwhelmingly common case.\n> strftime(3) shows three definitions (%U %V %W).\n> ironically, strftime.org is missing %V (the ISO week).\n\nyou mischaracterize. strftime is an irony-free zone.\n\n-rob\n\n\n",
			"disapproval": false,
			"date": "2011-11-07 18:03:43.944110",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"r@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "also update the CL subject (run hg change)\n\nhttp://codereview.appspot.com/5316074/diff/13001/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5316074/diff/13001/src/pkg/time/time.go#newcode241\nsrc/pkg/time/time.go:241: // julianDayNumber returns the time's Julian Day Number.\nto what epoch? there are competing definitions for Julian Day.\n\nhttp://codereview.appspot.com/5316074/diff/13001/src/pkg/time/time.go#newcode249\nsrc/pkg/time/time.go:249: func startOfFirstWeek(year int64) (d int64) {\n// doc comment\n\nhttp://codereview.appspot.com/5316074/diff/13001/src/pkg/time/time.go#newcode250\nsrc/pkg/time/time.go:250: d0101 := julianDayNumber(year, 1, 1)\ns/d1010/jan01/\n\nhttp://codereview.appspot.com/5316074/diff/13001/src/pkg/time/time.go#newcode261\nsrc/pkg/time/time.go:261: // Week ranges from 1 to 53. Please note, that Jan 01 to Jan 03 of year n might belong to\ns/Please note, that //\n\nhttp://codereview.appspot.com/5316074/diff/13001/src/pkg/time/time.go#newcode262\nsrc/pkg/time/time.go:262: // week 52 or 53 of year n-1, and Dec 29 to Dec 31 might belong to week 1 of year n+1.\ns/and/while/\n\nhttp://codereview.appspot.com/5316074/diff/13001/src/pkg/time/time.go#newcode264\nsrc/pkg/time/time.go:264: // algorithm taken from Erlangs OTP calendar module (with gregorian days replaced by\ns/Erlangs/Erlang's/\ns/gregorian/Gregorian/\n\nhttp://codereview.appspot.com/5316074/diff/13001/src/pkg/time/time.go#newcode264\nsrc/pkg/time/time.go:264: // algorithm taken from Erlangs OTP calendar module (with gregorian days replaced by\nreplaced by what?\n\nhttp://codereview.appspot.com/5316074/diff/13001/src/pkg/time/time.go#newcode267\nsrc/pkg/time/time.go:267: start1stweek_nextyear := startOfFirstWeek(t.Year + 1)\navoid underscores.\nsuggestion: use comment instead of fully explanatory name\n// These represent the first day of the first ISO week in this year and the next\nthisWeek1Start =\nnextWeek1Start =\n\nhttp://codereview.appspot.com/5316074/diff/13001/src/pkg/time/time.go#newcode273\nsrc/pkg/time/time.go:273: } else if d < start1stweek {\ndrop these elses. when the if returns, the else serves no purpose....\n\nhttp://codereview.appspot.com/5316074/diff/13001/src/pkg/time/time.go#newcode276\nsrc/pkg/time/time.go:276: if (&Time{Year: t.Year - 1, Month: 1, Day: 1}).Weekday() == 4 ||\nhorrible expression. put it in a function and you can clean it up a lot\n\nfunc dayOfWeek(year, month, day int) int {\n  t := Time{Year: year, Month: month, Day: day}\n  return t.Weekday()\n}\n\nhttp://codereview.appspot.com/5316074/diff/13001/src/pkg/time/time.go#newcode290\nsrc/pkg/time/time.go:290: return\n... and then this becomes unnecessary\n\nhttp://codereview.appspot.com/5316074/diff/13001/src/pkg/time/time_test.go\nFile src/pkg/time/time_test.go (right):\n\nhttp://codereview.appspot.com/5316074/diff/13001/src/pkg/time/time_test.go#newcode481\nsrc/pkg/time/time_test.go:481: type WeekNumTest struct {\ns/WeekNum/ISOWeek/\n\nhttp://codereview.appspot.com/5316074/diff/13001/src/pkg/time/time_test.go#newcode521\nsrc/pkg/time/time_test.go:521: {2039, 1, 1, 2038, 52}, {2040, 1, 1, 2039, 52},\nhow were these tests chosen? and there are a lot of 1, 1 cases.\nnot a problem, i'm just curious.\n\nhttp://codereview.appspot.com/5316074/diff/13001/src/pkg/time/time_test.go#newcode524\nsrc/pkg/time/time_test.go:524: func TestIsoWeekNumber(t *testing.T) {\ns/Number//",
			"disapproval": false,
			"date": "2011-11-08 17:52:46.927845",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, r@google.com (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-08 08:50:10.674888",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"r@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "PTAL\n\nVolker\n\nhttp://codereview.appspot.com/5316074/diff/24001/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5316074/diff/24001/src/pkg/time/time.go#newcode242\nsrc/pkg/time/time.go:242: // for the epoch 12:00 January 1, 4713 BC, Monday\nOn 2011/11/10 19:04:43, r wrote:\n> s/for/relative to/\n\nDone.",
			"disapproval": false,
			"date": "2011-11-10 20:31:16.300801",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"r@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, r@google.com, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-09 14:05:58.345517",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"r@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "looks good except for the grammar in one comment\n\nhttp://codereview.appspot.com/5316074/diff/24001/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5316074/diff/24001/src/pkg/time/time.go#newcode242\nsrc/pkg/time/time.go:242: // for the epoch 12:00 January 1, 4713 BC, Monday\ns/for/relative to/",
			"disapproval": false,
			"date": "2011-11-10 19:04:43.197412",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"r@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5316074/diff/13001/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5316074/diff/13001/src/pkg/time/time.go#newcode241\nsrc/pkg/time/time.go:241: // julianDayNumber returns the time's Julian Day Number.\nOn 2011/11/08 17:52:47, r wrote:\n> to what epoch? there are competing definitions for Julian Day.\n\nDone.\n\nhttp://codereview.appspot.com/5316074/diff/13001/src/pkg/time/time.go#newcode249\nsrc/pkg/time/time.go:249: func startOfFirstWeek(year int64) (d int64) {\nOn 2011/11/08 17:52:47, r wrote:\n> // doc comment\n\nDone.\n\nhttp://codereview.appspot.com/5316074/diff/13001/src/pkg/time/time.go#newcode250\nsrc/pkg/time/time.go:250: d0101 := julianDayNumber(year, 1, 1)\nOn 2011/11/08 17:52:47, r wrote:\n> s/d1010/jan01/\n\nDone.\n\nhttp://codereview.appspot.com/5316074/diff/13001/src/pkg/time/time.go#newcode261\nsrc/pkg/time/time.go:261: // Week ranges from 1 to 53. Please note, that Jan 01 to Jan 03 of year n might belong to\nOn 2011/11/08 17:52:47, r wrote:\n> s/Please note, that //\n\nDone.\n\nhttp://codereview.appspot.com/5316074/diff/13001/src/pkg/time/time.go#newcode262\nsrc/pkg/time/time.go:262: // week 52 or 53 of year n-1, and Dec 29 to Dec 31 might belong to week 1 of year n+1.\nOn 2011/11/08 17:52:47, r wrote:\n> s/and/while/\n\nDone.\n\nhttp://codereview.appspot.com/5316074/diff/13001/src/pkg/time/time.go#newcode264\nsrc/pkg/time/time.go:264: // algorithm taken from Erlangs OTP calendar module (with gregorian days replaced by\nOn 2011/11/08 17:52:47, r wrote:\n> s/Erlangs/Erlang's/\n> s/gregorian/Gregorian/\n\nDone.\n\nhttp://codereview.appspot.com/5316074/diff/13001/src/pkg/time/time.go#newcode264\nsrc/pkg/time/time.go:264: // algorithm taken from Erlangs OTP calendar module (with gregorian days replaced by\nOn 2011/11/08 17:52:47, r wrote:\n> s/Erlangs/Erlang's/\n> s/gregorian/Gregorian/\n\nDone.\n\nhttp://codereview.appspot.com/5316074/diff/13001/src/pkg/time/time.go#newcode267\nsrc/pkg/time/time.go:267: start1stweek_nextyear := startOfFirstWeek(t.Year + 1)\nOn 2011/11/08 17:52:47, r wrote:\n> avoid underscores.\n> suggestion: use comment instead of fully explanatory name\n> // These represent the first day of the first ISO week in this year and the next\n> thisWeek1Start =\n> nextWeek1Start =\n\nDone.\n\nhttp://codereview.appspot.com/5316074/diff/13001/src/pkg/time/time.go#newcode273\nsrc/pkg/time/time.go:273: } else if d < start1stweek {\nOn 2011/11/08 17:52:47, r wrote:\n> drop these elses. when the if returns, the else serves no purpose....\n\nDone.\n\nhttp://codereview.appspot.com/5316074/diff/13001/src/pkg/time/time.go#newcode276\nsrc/pkg/time/time.go:276: if (&Time{Year: t.Year - 1, Month: 1, Day: 1}).Weekday() == 4 ||\nOn 2011/11/08 17:52:47, r wrote:\n> horrible expression. put it in a function and you can clean it up a lot\n> \n> func dayOfWeek(year, month, day int) int {\n>   t := Time{Year: year, Month: month, Day: day}\n>   return t.Weekday()\n> }\n\nDone.\n\nhttp://codereview.appspot.com/5316074/diff/13001/src/pkg/time/time.go#newcode290\nsrc/pkg/time/time.go:290: return\nOn 2011/11/08 17:52:47, r wrote:\n> ... and then this becomes unnecessary\n\nDone.\n\nhttp://codereview.appspot.com/5316074/diff/13001/src/pkg/time/time_test.go\nFile src/pkg/time/time_test.go (right):\n\nhttp://codereview.appspot.com/5316074/diff/13001/src/pkg/time/time_test.go#newcode521\nsrc/pkg/time/time_test.go:521: {2039, 1, 1, 2038, 52}, {2040, 1, 1, 2039, 52},\nOn 2011/11/08 17:52:47, r wrote:\n> how were these tests chosen? and there are a lot of 1, 1 cases.\nIf julianDayNumber works properly than: \n(jan 01 okay ==> any day in year okay).\nOnly Dec 29 to Jan 04 may \"change year\" so one of these\ndates should be checked anyway. 1, 1 was the most simple\nin the python script which generated the tests.\n\nFor 2011 and 12 some more test are handpicked, especially\nswitch from week 1 to 2 and from 51 to 52; just to be\nsure...",
			"disapproval": false,
			"date": "2011-11-09 14:07:02.540325",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"r@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "almost there\n\nhttp://codereview.appspot.com/5316074/diff/19001/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5316074/diff/19001/src/pkg/time/time.go#newcode274\nsrc/pkg/time/time.go:274: // algorithm taken from Erlangs OTP calendar module with gregorian days\ns/Erlangs/Erlang's/\n\nwhat does OTP mean? is it relevant here?\ns/gregorian/Gregorian/\ns/julian/Julian/\n\nhttp://codereview.appspot.com/5316074/diff/19001/src/pkg/time/time_test.go\nFile src/pkg/time/time_test.go (right):\n\nhttp://codereview.appspot.com/5316074/diff/19001/src/pkg/time/time_test.go#newcode524\nsrc/pkg/time/time_test.go:524: func TestIsoWeek(t *testing.T) {\ns/Iso/ISO/\n\nhttp://codereview.appspot.com/5316074/diff/19001/src/pkg/time/time_test.go#newcode538\nsrc/pkg/time/time_test.go:538: t.Errorf(\"Bad ISOWeek for Jan 04. Got %d/%d, expected %d/1.\", y, w, year)\nboth these errors are somewhat out of style. gotest will print the test, so you don't need to say so much. also they don't need to be sentences.\n\"Jan 04: got %d/%d; expected %d/1\"\nsimilar change above",
			"disapproval": false,
			"date": "2011-11-09 18:22:21.410648",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"r@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "PTAL.\n\nFixed reported issues and made some minor code change.\n\nRegards\nVolker\n\nhttp://codereview.appspot.com/5316074/diff/19001/src/pkg/time/time.go\nFile src/pkg/time/time.go (right):\n\nhttp://codereview.appspot.com/5316074/diff/19001/src/pkg/time/time.go#newcode274\nsrc/pkg/time/time.go:274: // algorithm taken from Erlangs OTP calendar module with gregorian days\nOn 2011/11/09 18:22:21, r wrote:\n\n> what does OTP mean? is it relevant here?\n\"The Open Telecom Platform\" (std. library for Erlang).\nRemoved as not relevant.\n\nhttp://codereview.appspot.com/5316074/diff/19001/src/pkg/time/time_test.go\nFile src/pkg/time/time_test.go (right):\n\nhttp://codereview.appspot.com/5316074/diff/19001/src/pkg/time/time_test.go#newcode524\nsrc/pkg/time/time_test.go:524: func TestIsoWeek(t *testing.T) {\nOn 2011/11/09 18:22:21, r wrote:\n> s/Iso/ISO/\n\nDone.\n\nhttp://codereview.appspot.com/5316074/diff/19001/src/pkg/time/time_test.go#newcode538\nsrc/pkg/time/time_test.go:538: t.Errorf(\"Bad ISOWeek for Jan 04. Got %d/%d, expected %d/1.\", y, w, year)\nOn 2011/11/09 18:22:21, r wrote:\n> both these errors are somewhat out of style. gotest will print the test, so you\n> don't need to say so much. also they don't need to be sentences.\n> \"Jan 04: got %d/%d; expected %d/1\"\n> similar change above\n\nDone: \"got <got>; expected <exp> for <input>\"\nTaking a look at the existing error messages one finds\nseveral formats:\n<what>: bad ... <got> not <exp> \n<what>: want <exp> have <got>\ngot <got>; expect <exp>\n... incorrect, expected <exp> got <got>\ndifferent <a> <b>\n+ specials for error handling\nwhat's the prefered way?",
			"disapproval": false,
			"date": "2011-11-10 11:00:41.447608",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"r@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2011-11-10 20:40:00.546429",
			"approval": true
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"r@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, r@google.com, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-10 20:29:50.902089",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"r@google.com",
				"r@golang.org",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=19fba612a403 ***\n\ntime: add ISOWeek method to Time\n\nAs the ISO 8601 week number is untrivial to compute a new method\non *Time provides year and number of week.\n\nR=golang-dev, rsc, r, r\nCC=golang-dev\nhttp://codereview.appspot.com/5316074\n\nCommitter: Rob Pike <r@golang.org>",
			"disapproval": false,
			"date": "2011-11-10 20:40:55.356679",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"r@google.com",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, rsc@golang.org, r@google.com, r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-11-10 10:43:09.471240",
			"approval": false
		}
	],
	"owner_email": "dr.volker.dobler@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "volker.dobler",
	"subject": "code review 5316074: time: add ISOWeek method to Time",
	"created": "2011-11-03 14:49:55.600617",
	"patchsets": [
		1,
		2001,
		4001,
		13001,
		19001,
		24001,
		21004
	],
	"modified": "2011-11-10 22:18:04.061918",
	"closed": true,
	"issue": 5316074
}