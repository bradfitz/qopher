{
	"description": "gc: clean up printing.\n\nGot rid of all the magic mystery globals. Now\nfor %N, %T, and %S, the flags +,- and # set a sticky\ndebug, sym and export mode, only visible in the new fmt.c.\nDefault is error mode. Handle h and l flags consistently with\nthe least side effects, so we can now change\nthings without worrying about unrelated things\nbreaking.\n\nfixes issue 2361",
	"cc": [
		"rsc@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-28 10:57:50.470293",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-19 20:18:23.670974",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-21 15:48:02.385062",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://rsc.codereview.appspot.com/5316043/diff/4040/src/cmd/gc/fmt.c\nFile src/cmd/gc/fmt.c (right):\n\nhttp://rsc.codereview.appspot.com/5316043/diff/4040/src/cmd/gc/fmt.c#newcode12\nsrc/cmd/gc/fmt.c:12: //\t%L  Line numbers\nPlease add the types here. \n\n%L int  line number\n%O int  opcode\n%J Node*\n%V Val*\n%S Sym*\n\netc\n\nAlso, please add %B, %E, %F, and %Z.\n\nhttp://rsc.codereview.appspot.com/5316043/diff/4040/src/cmd/gc/fmt.c#newcode38\nsrc/cmd/gc/fmt.c:38: FErr,\t//     FmtSpace\t \"% N\" error mode (default)\ncan drop the FmtXxx names\n\nhttp://rsc.codereview.appspot.com/5316043/diff/4040/src/cmd/gc/fmt.c#newcode41\nsrc/cmd/gc/fmt.c:41: FSym,\t//     FmtLeft\t \"%-N\" turning-types-into-symbols-mode\nCan this be Ftypeid or Fidentical please?\n\"turning-types-into-symbols\" is only one aspect.\nWhat's important is that identical types format identically\n\nFtypeid,  // \"%-T\" identical types format identically\n\nhttp://rsc.codereview.appspot.com/5316043/diff/4040/src/cmd/gc/reflect.c\nFile src/cmd/gc/reflect.c (right):\n\nhttp://rsc.codereview.appspot.com/5316043/diff/4040/src/cmd/gc/reflect.c#newcode665\nsrc/cmd/gc/reflect.c:665: if (t == bytetype || t == runetype)\nThis should be unnecessary: the print format should do this.\nIf this is necessary, it means the print format is broken for\nthe cases where these types appear inside other types.\nAlso, this code is not in typesym above, so it seems likely\nthat this is a dreg and can just be deleted.\n\nhttp://rsc.codereview.appspot.com/5316043/diff/4040/test/ddd1.go\nFile test/ddd1.go (right):\n\nhttp://rsc.codereview.appspot.com/5316043/diff/4040/test/ddd1.go#newcode18\ntest/ddd1.go:18: _ = sum(\"hello\")  // ERROR \".hello. .type ideal string. as type int|incompatible\"\nI don't believe this should have changed.\nThat implies that something is semantically different about printing.\n\nhttp://rsc.codereview.appspot.com/5316043/diff/4040/test/named1.go\nFile test/named1.go (right):\n\nhttp://rsc.codereview.appspot.com/5316043/diff/4040/test/named1.go#newcode40\ntest/named1.go:40: asBool(1 != 2) // ERROR \"cannot use.*type ideal bool.*as type Bool\"\nSame.",
			"disapproval": false,
			"date": "2011-10-31 15:04:45.342698",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Thanks very much.  It's definitely an improvement.\nA bunch of small things below.\n\nI suspect that the handling of bytetype (and you need to add runetype now)\nis wrong across imports, but there was no test in the tree for that.\nI just added one: hg sync to get it.\n\nIn general, the distinction between byte and uint8 (and rune and int)\nshould always be preserved except in one case: the print inside\nreflect.c's typesym must collapse the two so that it ends up mapping\nboth byte and uint8 to the same reflect type symbol.  Dynamic interface\nchecks will fail at runtime if not.\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/dcl.c\nFile src/cmd/gc/dcl.c (right):\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/dcl.c#newcode1092\nsrc/cmd/gc/dcl.c:1092: //print(\"methodsym: %s\\n\", p);\ndelete?\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/export.c\nFile src/cmd/gc/export.c (right):\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/export.c#newcode86\nsrc/cmd/gc/export.c:86: if(!p->direct)\t// TODO(lvd) does this ever happen?\nYes.  cd $GOROOT/pkg/$GOOS_GOARCH\ngrep -a '// indirect' *.a\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/export.c#newcode339\nsrc/cmd/gc/export.c:339: yyerror(\"inconsistent definition for var %S during import\\n\\t%T\\n\\t%T\",\ts, s->def->type, t);\ndrop tab before s,\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/export.c#newcode356\nsrc/cmd/gc/export.c:356: print(\"import type %T %T\\n\", pt, t);\nWhy is this %T now instead of %lT?\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c\nFile src/cmd/gc/fmt.c (right):\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode5\nsrc/cmd/gc/fmt.c:5: // Useful format combinations:\nThis list is showing all possible combinations instead of telling me\nthe definitions of the individual pieces.  Can we do the latter instead?\n\n// Formatting verbs.\n//\n// %H - NodeList*\n//   flag +: recursive multiline debug dump\n//   flag h: shorten debug dump to single line\n//\n// %S - Sym* (x or p.x)\n//   flag +: debug mode (example)\n//   flag #: export mode (example)\n//\n// %T - Type* (int or chan struct{})\n//   flag l: show definition even for named types\n//   flag h: omit \"func (rcvr)\" for method functions\n//   flag #: export mode (example)\n\netc.  The list should be complete, and sorted by letter: J L O V all belong here too.\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode15\nsrc/cmd/gc/fmt.c:15: //\t%#lT\t\ttype definition instead of name\nWhy do I need a # here?\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode16\nsrc/cmd/gc/fmt.c:16: //\t%#hT\t\tomit\"func\" and receiver in function signature\nSame.\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode29\nsrc/cmd/gc/fmt.c:29: // mode inside the printing functions (eg yyerror inside an export dump).\nIf I call yyerror inside an export dump, can't it just work?\nI don't want to have to think about whether this yyerror statement\nis inside an export dump or not.\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode318\nsrc/cmd/gc/fmt.c:318: // Ftm \"%V\": Values\nFmt\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode450\nsrc/cmd/gc/fmt.c:450: Sprint(Fmt *fp, Sym *s)\nsymfmt\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode510\nsrc/cmd/gc/fmt.c:510: Tprint(Fmt *fp, Type *t)\ntypefmt\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode517\nsrc/cmd/gc/fmt.c:517: // Distinguish byte from uint8 only in error and debug mode.\nThey are supposed to be distinguished in export mode too.\nThe only time it is not supposed to be distinguished is when\npreparing the names and strings that are used for reflect symbols.\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode544\nsrc/cmd/gc/fmt.c:544: // TBD roll into switch below as default: fmtprint(fp, \"%hS\", t->sym)?\nDoesn't seem worth it.  The bottom of the function isn't in a switch default either.  Not all of these have syms either.\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode546\nsrc/cmd/gc/fmt.c:546: if(0 && (t == idealbool || t == idealstring))\t// who wants to see 'ideal'?\nI do, in error messages.\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode684\nsrc/cmd/gc/fmt.c:684: int mi;\nint doinit, extrablock;\n\ndoinit = 0;\nextrablock = 0;\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode696\nsrc/cmd/gc/fmt.c:696: mi = 1;\n    extrablock = 1;\nelse if (n->ninit)\n    doinit = 1;\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode700\nsrc/cmd/gc/fmt.c:700: mi = 1;\nextrablock = 1\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode720\nsrc/cmd/gc/fmt.c:720: if (n->colas)\n,s/if (/if(/g\n,s/switch (/switch(/g\n,s/for (/for(/g\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode757\nsrc/cmd/gc/fmt.c:757: if(!mi && n->ninit)\nif(doinit)\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode762\nsrc/cmd/gc/fmt.c:762: fmtprint(f, \"else { %H }\", n->nelse);\ns/\"else/\" else/\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode770\nsrc/cmd/gc/fmt.c:770: if (!mi && n->ninit && n->nincr)\nif(doinit && n->nincr)\nelse if(n->nincr)\nelse if(doinit)\nelse\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode794\nsrc/cmd/gc/fmt.c:794: if(!mi && n->ninit && n->ntest)\nif(doinit && n->ntest)\nelse if(n->ntest)\nelse\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode1037\nsrc/cmd/gc/fmt.c:1037: if (n->left && n->right)\nIt's okay to call fmtprint multiple times.\n\nif(n->left)\n    fmtprint(f, \"%hN\", n->left)\nfmtprint(f, \":\")\nif(n->right)\n    fmtprint(f, \"%N\", n->right)\n\nIt's not obvious to me why left gets h but right does not.\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode1158\nsrc/cmd/gc/fmt.c:1158: Nprint(Fmt *f, Node *n)\nnodefmt\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode1189\nsrc/cmd/gc/fmt.c:1189: Ndump(Fmt *fp, Node *n)\nnodedump\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/lex.c\nFile src/cmd/gc/lex.c (right):\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/lex.c#newcode198\nsrc/cmd/gc/lex.c:198: fmtinstall('B', Bconv);\t// big numbers\nMove these into fmtinstallgo.",
			"disapproval": false,
			"date": "2011-10-26 22:28:36.816599",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "hm. linker not happy about Byte. yet, for the rest all done.\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/dcl.c\nFile src/cmd/gc/dcl.c (right):\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/dcl.c#newcode1092\nsrc/cmd/gc/dcl.c:1092: //print(\"methodsym: %s\\n\", p);\nOn 2011/10/26 22:28:36, rsc wrote:\n> delete?\n\nDone.\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/export.c\nFile src/cmd/gc/export.c (right):\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/export.c#newcode86\nsrc/cmd/gc/export.c:86: if(!p->direct)\t// TODO(lvd) does this ever happen?\nOn 2011/10/26 22:28:36, rsc wrote:\n> Yes.  cd $GOROOT/pkg/$GOOS_GOARCH\n> grep -a '// indirect' *.a\n\nah didn't see it before, but that must have been with an incomplete build.\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/export.c#newcode339\nsrc/cmd/gc/export.c:339: yyerror(\"inconsistent definition for var %S during import\\n\\t%T\\n\\t%T\",\ts, s->def->type, t);\nOn 2011/10/26 22:28:36, rsc wrote:\n> drop tab before s,\n\nDone.\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/export.c#newcode339\nsrc/cmd/gc/export.c:339: yyerror(\"inconsistent definition for var %S during import\\n\\t%T\\n\\t%T\",\ts, s->def->type, t);\nOn 2011/10/26 22:28:36, rsc wrote:\n> drop tab before s,\n\nDone.\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/export.c#newcode356\nsrc/cmd/gc/export.c:356: print(\"import type %T %T\\n\", pt, t);\nOn 2011/10/26 22:28:36, rsc wrote:\n> Why is this %T now instead of %lT?\n\nbecause if you have type foo int63; type bar foo; this will print that back, otherwise you'd see type bar int63 for the second.\n\nthis goes back to a bit of confusion between things and names for things in the design.  a similar thing happens for constants.\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c\nFile src/cmd/gc/fmt.c (right):\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode5\nsrc/cmd/gc/fmt.c:5: // Useful format combinations:\nOn 2011/10/26 22:28:36, rsc wrote:\n> This list is showing all possible combinations instead of telling me\n> the definitions of the individual pieces.  Can we do the latter instead?\n> \n\nyes, i was saving that until it was finished. \n\n> // Formatting verbs.\n> //\n> // %H - NodeList*\n> //   flag +: recursive multiline debug dump\n> //   flag h: shorten debug dump to single line\n> //\n> // %S - Sym* (x or p.x)\n> //   flag +: debug mode (example)\n> //   flag #: export mode (example)\n> //\n> // %T - Type* (int or chan struct{})\n> //   flag l: show definition even for named types\n> //   flag h: omit \"func (rcvr)\" for method functions\n> //   flag #: export mode (example)\n> \n> etc.  The list should be complete, and sorted by letter: J L O V all belong here\n> too.\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode29\nsrc/cmd/gc/fmt.c:29: // mode inside the printing functions (eg yyerror inside an export dump).\nOn 2011/10/26 22:28:36, rsc wrote:\n> If I call yyerror inside an export dump, can't it just work?\n> I don't want to have to think about whether this yyerror statement\n> is inside an export dump or not.\n\nnote that yyerror during any of the functions in export.c works fine, it's just for yyerrors inside the Nprint below. turns out i eliminated the only occurence of that, so it doesn't really matter.\n\ni could have yyerror switch the default of course, but that would open up the hidden global mode to the world again (no big deal).  how 'bout we do that when the first instance of this appears.\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode318\nsrc/cmd/gc/fmt.c:318: // Ftm \"%V\": Values\nOn 2011/10/26 22:28:36, rsc wrote:\n> Fmt\n\nDone.\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode450\nsrc/cmd/gc/fmt.c:450: Sprint(Fmt *fp, Sym *s)\nOn 2011/10/26 22:28:36, rsc wrote:\n> symfmt\n\nDone.\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode510\nsrc/cmd/gc/fmt.c:510: Tprint(Fmt *fp, Type *t)\nOn 2011/10/26 22:28:36, rsc wrote:\n> typefmt\n\nDone.\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode517\nsrc/cmd/gc/fmt.c:517: // Distinguish byte from uint8 only in error and debug mode.\nOn 2011/10/26 22:28:36, rsc wrote:\n> They are supposed to be distinguished in export mode too.\n> The only time it is not supposed to be distinguished is when\n> preparing the names and strings that are used for reflect symbols.\n\nDone.\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode517\nsrc/cmd/gc/fmt.c:517: // Distinguish byte from uint8 only in error and debug mode.\nOn 2011/10/26 22:28:36, rsc wrote:\n> They are supposed to be distinguished in export mode too.\n> The only time it is not supposed to be distinguished is when\n> preparing the names and strings that are used for reflect symbols.\n\nDone.\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode544\nsrc/cmd/gc/fmt.c:544: // TBD roll into switch below as default: fmtprint(fp, \"%hS\", t->sym)?\nOn 2011/10/26 22:28:36, rsc wrote:\n> Doesn't seem worth it.  The bottom of the function isn't in a switch default\n> either.  Not all of these have syms either.\n> \n\nDone.\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode546\nsrc/cmd/gc/fmt.c:546: if(0 && (t == idealbool || t == idealstring))\t// who wants to see 'ideal'?\nOn 2011/10/26 22:28:36, rsc wrote:\n> I do, in error messages.\n\nDone.\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode696\nsrc/cmd/gc/fmt.c:696: mi = 1;\nOn 2011/10/26 22:28:36, rsc wrote:\n>     extrablock = 1;\n> else if (n->ninit)\n>     doinit = 1;\n\nDone.\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode700\nsrc/cmd/gc/fmt.c:700: mi = 1;\nOn 2011/10/26 22:28:36, rsc wrote:\n> extrablock = 1\n\nDone.\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode720\nsrc/cmd/gc/fmt.c:720: if (n->colas)\nOn 2011/10/26 22:28:36, rsc wrote:\n> ,s/if (/if(/g\n> ,s/switch (/switch(/g\n> ,s/for (/for(/g\n\nDone.\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode757\nsrc/cmd/gc/fmt.c:757: if(!mi && n->ninit)\nOn 2011/10/26 22:28:36, rsc wrote:\n> if(doinit)\n\nDone.\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode762\nsrc/cmd/gc/fmt.c:762: fmtprint(f, \"else { %H }\", n->nelse);\nOn 2011/10/26 22:28:36, rsc wrote:\n> s/\"else/\" else/\n\nDone.\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode770\nsrc/cmd/gc/fmt.c:770: if (!mi && n->ninit && n->nincr)\nOn 2011/10/26 22:28:36, rsc wrote:\n> if(doinit && n->nincr)\n> else if(n->nincr)\n> else if(doinit)\n> else\n\nDone.\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode770\nsrc/cmd/gc/fmt.c:770: if (!mi && n->ninit && n->nincr)\nOn 2011/10/26 22:28:36, rsc wrote:\n> if(doinit && n->nincr)\n> else if(n->nincr)\n> else if(doinit)\n> else\n\nDone.  and handle the case of empty ntest.\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode794\nsrc/cmd/gc/fmt.c:794: if(!mi && n->ninit && n->ntest)\nOn 2011/10/26 22:28:36, rsc wrote:\n> if(doinit && n->ntest)\n> else if(n->ntest)\n> else\n\nDone.\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode1037\nsrc/cmd/gc/fmt.c:1037: if (n->left && n->right)\nOn 2011/10/26 22:28:36, rsc wrote:\n> It's okay to call fmtprint multiple times.\n> \n\nI find this clearer b/c you can tell in one view what the whole node is going to look like.\n\n> if(n->left)\n>     fmtprint(f, \"%hN\", n->left)\n> fmtprint(f, \":\")\n> if(n->right)\n>     fmtprint(f, \"%N\", n->right)\n> \n> It's not obvious to me why left gets h but right does not.\n\nleftover from worring about struct literals, for which the key (left) is always a field name.  gone now.\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode1158\nsrc/cmd/gc/fmt.c:1158: Nprint(Fmt *f, Node *n)\nOn 2011/10/26 22:28:36, rsc wrote:\n> nodefmt\n\nDone.\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/fmt.c#newcode1189\nsrc/cmd/gc/fmt.c:1189: Ndump(Fmt *fp, Node *n)\nOn 2011/10/26 22:28:36, rsc wrote:\n> nodedump\n\nDone.\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/lex.c\nFile src/cmd/gc/lex.c (right):\n\nhttp://codereview.appspot.com/5316043/diff/2003/src/cmd/gc/lex.c#newcode198\nsrc/cmd/gc/lex.c:198: fmtinstall('B', Bconv);\t// big numbers\nOn 2011/10/26 22:28:36, rsc wrote:\n> Move these into fmtinstallgo.\n\nDone.",
			"disapproval": false,
			"date": "2011-10-28 11:02:57.978502",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "On 2011/10/31 15:39:55, lvd wrote:\n> all done and fixed the ninit logic in stmtfmt.\n> \n\ntook out the FmtSpace logic and adapted comments\n\n> all tests pass\n\nstill",
			"disapproval": false,
			"date": "2011-10-31 15:46:51.496618",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM!",
			"disapproval": false,
			"date": "2011-10-31 17:06:26.437246",
			"approval": true
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Fri, Oct 28, 2011 at 19:30, Luuk van Dijk <lvd@google.com> wrote:\n\n> all tests pass, extra mode wasn't needed but we may revisit this later.  i\n> can still rename FSym (for generate-symbols-from-types, i htink i even\n> explained that in a comment.  still i'd like to get this in asap so as not\n> to pile up more merge pains.\n\n\nalso not that the 'u' on %-uT no longer means half anothr mode but\nspecifically: qualify type names with pkg->prefix, and it's clearly\ndocumented and all the mode knowledge is local to fmt.c, so i think the\ncurrent state is defensible.  hope you had a good flight.  i'm back online\ntomorrow morning CET earliest, likely.\n\n\n>\n> /L\n>\n>\n> On Fri, Oct 28, 2011 at 16:41, Russ Cox <rsc@golang.org> wrote:\n>\n>> On Fri, Oct 28, 2011 at 04:02,  <lvd@google.com> wrote:\n>> > because if you have type foo int63; type bar foo; this will print that\n>> > back, otherwise you'd see type bar int63 for the second.\n>> >\n>> > this goes back to a bit of confusion between things and names for things\n>> > in the design.  a similar thing happens for constants.\n>>\n>> yes but that print is trying to show the underlying definition.\n>>\n>\n> restored the l.\n>\n",
			"disapproval": false,
			"date": "2011-10-28 17:45:42.092166",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "i'm currently adding everything i find while working on 5296053, but don't\nlet that stop you from reviewing anything.\n/L\n\nOn Fri, Oct 21, 2011 at 17:48, <lvd@google.com> wrote:\n\n> Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n>\n> Please take another look.\n>\n>\n> http://codereview.appspot.com/**5316043/<http://codereview.appspot.com/5316043/>\n>\n",
			"disapproval": false,
			"date": "2011-10-25 15:17:12.462551",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "I think I understand all the formatting changes,\nand they look good.\n\nIt seems like the space flag is never used in the\nsource tree.  Can we drop that bit of complexity?\n\nhttp://rsc.codereview.appspot.com/5316043/diff/4040/src/cmd/gc/fmt.c\nFile src/cmd/gc/fmt.c (right):\n\nhttp://rsc.codereview.appspot.com/5316043/diff/4040/src/cmd/gc/fmt.c#newcode480\nsrc/cmd/gc/fmt.c:480: if(pkglookup(s->pkg->name, nil)->npkg > 1)\nIt would be nice to preserve the old comment here.\n\n\t\t// This one is for the user.  If the package name\n\t\t// was used by multiple packages, give the full\n\t\t// import path to disambiguate.",
			"disapproval": false,
			"date": "2011-10-31 15:17:53.208122",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Fri, Oct 28, 2011 at 04:02,  <lvd@google.com> wrote:\n> because if you have type foo int63; type bar foo; this will print that\n> back, otherwise you'd see type bar int63 for the second.\n>\n> this goes back to a bit of confusion between things and names for things\n> in the design. \u00a0a similar thing happens for constants.\n\nyes but that print is trying to show the underlying definition.\n",
			"disapproval": false,
			"date": "2011-10-28 14:41:26.101099",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=cffdcf22fc7b ***\n\ngc: clean up printing.\n\nGot rid of all the magic mystery globals. Now\nfor %N, %T, and %S, the flags +,- and # set a sticky\ndebug, sym and export mode, only visible in the new fmt.c.\nDefault is error mode. Handle h and l flags consistently with\nthe least side effects, so we can now change\nthings without worrying about unrelated things\nbreaking.\n\nfixes issue 2361\n\nR=rsc\nCC=golang-dev\nhttp://codereview.appspot.com/5316043",
			"disapproval": false,
			"date": "2011-10-31 17:09:53.646611",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "all tests pass, extra mode wasn't needed but we may revisit this later.  i\ncan still rename FSym (for generate-symbols-from-types, i htink i even\nexplained that in a comment.  still i'd like to get this in asap so as not\nto pile up more merge pains.\n\n/L\n\nOn Fri, Oct 28, 2011 at 16:41, Russ Cox <rsc@golang.org> wrote:\n\n> On Fri, Oct 28, 2011 at 04:02,  <lvd@google.com> wrote:\n> > because if you have type foo int63; type bar foo; this will print that\n> > back, otherwise you'd see type bar int63 for the second.\n> >\n> > this goes back to a bit of confusion between things and names for things\n> > in the design.  a similar thing happens for constants.\n>\n> yes but that print is trying to show the underlying definition.\n>\n\nrestored the l.\n",
			"disapproval": false,
			"date": "2011-10-28 17:30:05.558591",
			"approval": false
		},
		{
			"sender": "lvd@google.com",
			"recipients": [
				"lvd@google.com",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "all done and fixed the ninit logic in stmtfmt.\n\nall tests pass\n\nhttp://rsc.codereview.appspot.com/5316043/diff/4040/src/cmd/gc/fmt.c\nFile src/cmd/gc/fmt.c (right):\n\nhttp://rsc.codereview.appspot.com/5316043/diff/4040/src/cmd/gc/fmt.c#newcode12\nsrc/cmd/gc/fmt.c:12: //\t%L  Line numbers\nOn 2011/10/31 15:04:45, rsc wrote:\n> Please add the types here. \n> \n> %L int  line number\n> %O int  opcode\n> %J Node*\n> %V Val*\n> %S Sym*\n> \n> etc\n> \n> Also, please add %B, %E, %F, and %Z.\n\nDone.\n\nhttp://rsc.codereview.appspot.com/5316043/diff/4040/src/cmd/gc/fmt.c#newcode41\nsrc/cmd/gc/fmt.c:41: FSym,\t//     FmtLeft\t \"%-N\" turning-types-into-symbols-mode\nOn 2011/10/31 15:04:45, rsc wrote:\n> Can this be Ftypeid or Fidentical please?\n> \"turning-types-into-symbols\" is only one aspect.\n> What's important is that identical types format identically\n> \n> Ftypeid,  // \"%-T\" identical types format identically\n\nDone.\n\nhttp://rsc.codereview.appspot.com/5316043/diff/4040/src/cmd/gc/fmt.c#newcode41\nsrc/cmd/gc/fmt.c:41: FSym,\t//     FmtLeft\t \"%-N\" turning-types-into-symbols-mode\nOn 2011/10/31 15:04:45, rsc wrote:\n> Can this be Ftypeid or Fidentical please?\n> \"turning-types-into-symbols\" is only one aspect.\n> What's important is that identical types format identically\n> \n> Ftypeid,  // \"%-T\" identical types format identically\n\nDone.\n\nhttp://rsc.codereview.appspot.com/5316043/diff/4040/src/cmd/gc/fmt.c#newcode480\nsrc/cmd/gc/fmt.c:480: if(pkglookup(s->pkg->name, nil)->npkg > 1)\nOn 2011/10/31 15:17:53, rsc wrote:\n> It would be nice to preserve the old comment here.\n> \n> \t\t// This one is for the user.  If the package name\n> \t\t// was used by multiple packages, give the full\n> \t\t// import path to disambiguate.\n> \n\nDone.\n\nhttp://rsc.codereview.appspot.com/5316043/diff/4040/src/cmd/gc/reflect.c\nFile src/cmd/gc/reflect.c (right):\n\nhttp://rsc.codereview.appspot.com/5316043/diff/4040/src/cmd/gc/reflect.c#newcode665\nsrc/cmd/gc/reflect.c:665: if (t == bytetype || t == runetype)\nOn 2011/10/31 15:04:45, rsc wrote:\n> This should be unnecessary: the print format should do this.\n> If this is necessary, it means the print format is broken for\n> the cases where these types appear inside other types.\n> Also, this code is not in typesym above, so it seems likely\n> that this is a dreg and can just be deleted.\n\nyes, leftover from earlier iteration.  gone.\n\nhttp://rsc.codereview.appspot.com/5316043/diff/4040/test/ddd1.go\nFile test/ddd1.go (right):\n\nhttp://rsc.codereview.appspot.com/5316043/diff/4040/test/ddd1.go#newcode18\ntest/ddd1.go:18: _ = sum(\"hello\")  // ERROR \".hello. .type ideal string. as type int|incompatible\"\nOn 2011/10/31 15:04:45, rsc wrote:\n> I don't believe this should have changed.\n> That implies that something is semantically different about printing.\n\nthe old code didnt print ideal, b/c that thing in Tpretty never triggered, which led me t ask 'who wants to see this' in the ported-over line,  which led you to comment 'i do in error messages', so now i fixed it and it does.\n\nin the old code, ideal would be inserted for t == idealstring || idealbool except that for those,  the block above would trigger, when the l flag wasnt specified, which was i think always in the relevant messages.\n\nanyway, up to you: do you want to see 'ideal' here or not.\n\nhttp://rsc.codereview.appspot.com/5316043/diff/4040/test/named1.go\nFile test/named1.go (right):\n\nhttp://rsc.codereview.appspot.com/5316043/diff/4040/test/named1.go#newcode40\ntest/named1.go:40: asBool(1 != 2) // ERROR \"cannot use.*type ideal bool.*as type Bool\"\nOn 2011/10/31 15:04:45, rsc wrote:\n> Same.\n\nsame",
			"disapproval": false,
			"date": "2011-10-31 15:39:55.080778",
			"approval": false
		}
	],
	"owner_email": "lvd@google.com",
	"private": false,
	"base_url": "",
	"owner": "lvd",
	"subject": "code review 5316043: gc: clean up printing.",
	"created": "2011-10-19 20:17:45.691687",
	"patchsets": [
		1,
		2001,
		5001,
		1020,
		8001,
		9001,
		13001,
		2002,
		13002,
		17001,
		2003,
		21004,
		14043,
		24001,
		14065,
		26001,
		23022,
		4040,
		2027,
		28002,
		22115
	],
	"modified": "2011-10-31 17:09:54.570929",
	"closed": true,
	"issue": 5316043
}