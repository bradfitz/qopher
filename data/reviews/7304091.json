{
	"description": "go.net/ipv4: fix sprious lookahead on IPConn-based PacketConn\n\nAlso improves test coverage for both payload and datagram I/O.",
	"cc": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=abbc312fc38d&repo=net ***\n\ngo.net/ipv4: fix sprious lookahead on IPConn-based PacketConn\n\nAlso improves test coverage for both payload and datagram I/O.\n\nR=golang-dev, dave\nCC=golang-dev\nhttps://codereview.appspot.com/7304091",
			"disapproval": false,
			"date": "2013-02-16 04:02:13.625630",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Thank you for your review.\r\n\r\nOn Sat, Feb 16, 2013 at 12:53 PM,  <dave@cheney.net> wrote:\r\n\r\n> What I meant to say is this could only happen it someone did\r\n>\r\n> var m *icmpMessage\r\n> b, err := m.Marshal()\r\n>\r\n> I think this check is good to be safe, but there are soooo many other\r\n> places in Go where we don't check.\r\n\r\nyup, go will crash when the programmer made a blunder.\r\nand this is just for testing.\r\n\r\n> When I see b := make([]byte, 4)\r\n>\r\n> it doesn't tell me what b is used for. Sure, most of the time it is\r\n> filled out directly below, but sometimes not.\r\n>\r\n> In this instance you can take the opportunity to avoid assigning to the\r\n> memory twice, and be more descriptive in the process.\r\n\r\nI see, thanks for the sharing.\r\n",
			"disapproval": false,
			"date": "2013-02-16 04:01:11.229660",
			"approval": false
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.net",
			"disapproval": false,
			"date": "2013-02-13 10:31:08.194400",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Strangely coverage is unaffected by this change, maybe those paths are already covered.",
			"disapproval": false,
			"date": "2013-02-15 07:27:27.773660",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. Some minor style comments if you feel like addressing them. I think this is good, but i'd like to see a second opinion before you commit.\n\nhttps://codereview.appspot.com/7304091/diff/2007/ipv4/mockicmp_test.go\nFile ipv4/mockicmp_test.go (right):\n\nhttps://codereview.appspot.com/7304091/diff/2007/ipv4/mockicmp_test.go#newcode40\nipv4/mockicmp_test.go:40: return nil, syscall.EINVAL\nHow likely is this ?\n\nhttps://codereview.appspot.com/7304091/diff/2007/ipv4/mockicmp_test.go#newcode42\nipv4/mockicmp_test.go:42: b := make([]byte, 4)\nFor some reason I have developed an aversion to using make like this. Consider this alternative\n\nb := []byte {\n    byte(m.Type),\n    byte(m.Code), \n    0, // checksum (upper half)\n    0, // checksum (lower half)\n}\n\nhttps://codereview.appspot.com/7304091/diff/2007/ipv4/mockicmp_test.go#newcode58\nipv4/mockicmp_test.go:58: for i := 0; i < msglen-1; i += 2 {\ni'm uncomfortable with all the msglen-1's, what about\n\nmsglen := len(b) -1\n...\nif msglen&1 == 0 { \n    ...\n}\n\nhttps://codereview.appspot.com/7304091/diff/2007/ipv4/mockicmp_test.go#newcode80\nipv4/mockicmp_test.go:80: if msglen-4 > 0 {\nwhat about msglen > 3 ?\n\nhttps://codereview.appspot.com/7304091/diff/2007/ipv4/mockicmp_test.go#newcode122\nipv4/mockicmp_test.go:122: if bodylen-4 > 0 {\nsame as above\n\nhttps://codereview.appspot.com/7304091/diff/2007/ipv4/mocktransponder_test.go\nFile ipv4/mocktransponder_test.go (right):\n\nhttps://codereview.appspot.com/7304091/diff/2007/ipv4/mocktransponder_test.go#newcode51\nipv4/mocktransponder_test.go:51: wh := &ipv4.Header{}\nPlease use the constant literal form here.\n\nhttps://codereview.appspot.com/7304091/diff/2007/ipv4/multicast_test.go\nFile ipv4/multicast_test.go (right):\n\nhttps://codereview.appspot.com/7304091/diff/2007/ipv4/multicast_test.go#newcode91\nipv4/multicast_test.go:91: for i, toggle := range []bool{true, false, true} {\nnice",
			"disapproval": false,
			"date": "2013-02-15 07:50:30.456100",
			"approval": true
		},
		{
			"sender": "mikioh.mikioh@gmail.com",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/7304091/diff/2007/ipv4/mockicmp_test.go\nFile ipv4/mockicmp_test.go (right):\n\nhttps://codereview.appspot.com/7304091/diff/2007/ipv4/mockicmp_test.go#newcode40\nipv4/mockicmp_test.go:40: return nil, syscall.EINVAL\nOn 2013/02/15 07:50:30, dfc wrote:\n> How likely is this ?\n\nnot so often.\n\nhttps://codereview.appspot.com/7304091/diff/2007/ipv4/mockicmp_test.go#newcode42\nipv4/mockicmp_test.go:42: b := make([]byte, 4)\nOn 2013/02/15 07:50:30, dfc wrote:\n> For some reason I have developed an aversion to using make like this. Consider\n> this alternative\n> \n> b := []byte {\n>     byte(m.Type),\n>     byte(m.Code), \n>     0, // checksum (upper half)\n>     0, // checksum (lower half)\n> }\n\ncan you share the reason why for this with us?\nwell, just curious.\n\nhttps://codereview.appspot.com/7304091/diff/2007/ipv4/mockicmp_test.go#newcode58\nipv4/mockicmp_test.go:58: for i := 0; i < msglen-1; i += 2 {\nOn 2013/02/15 07:50:30, dfc wrote:\n> i'm uncomfortable with all the msglen-1's, what about\n> \n> msglen := len(b) -1\n> ...\n> if msglen&1 == 0 { \n>     ...\n> }\n\nDone.\n\nhttps://codereview.appspot.com/7304091/diff/2007/ipv4/mockicmp_test.go#newcode80\nipv4/mockicmp_test.go:80: if msglen-4 > 0 {\nOn 2013/02/15 07:50:30, dfc wrote:\n> what about msglen > 3 ?\n\nmsglen > 4 is fine.\n\nhttps://codereview.appspot.com/7304091/diff/2007/ipv4/mockicmp_test.go#newcode122\nipv4/mockicmp_test.go:122: if bodylen-4 > 0 {\nOn 2013/02/15 07:50:30, dfc wrote:\n> same as above\n\nDone.\n\nhttps://codereview.appspot.com/7304091/diff/2007/ipv4/mocktransponder_test.go\nFile ipv4/mocktransponder_test.go (right):\n\nhttps://codereview.appspot.com/7304091/diff/2007/ipv4/mocktransponder_test.go#newcode51\nipv4/mocktransponder_test.go:51: wh := &ipv4.Header{}\nOn 2013/02/15 07:50:30, dfc wrote:\n> Please use the constant literal form here.\n\nDone.",
			"disapproval": false,
			"date": "2013-02-16 03:20:32.817660",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"mikioh.mikioh@gmail.com",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM. Thank you.\n\nPlease ignore my earlier comments about code coverage, something may have gone wrong with my copy of gocov.\n\nhttps://codereview.appspot.com/7304091/diff/2007/ipv4/mockicmp_test.go\nFile ipv4/mockicmp_test.go (right):\n\nhttps://codereview.appspot.com/7304091/diff/2007/ipv4/mockicmp_test.go#newcode40\nipv4/mockicmp_test.go:40: return nil, syscall.EINVAL\nOn 2013/02/16 03:20:32, mikio wrote:\n> On 2013/02/15 07:50:30, dfc wrote:\n> > How likely is this ?\n> \n> not so often.\n\nWhat I meant to say is this could only happen it someone did\n\nvar m *icmpMessage\nb, err := m.Marshal()\n\nI think this check is good to be safe, but there are soooo many other places in Go where we don't check.\n\nhttps://codereview.appspot.com/7304091/diff/2007/ipv4/mockicmp_test.go#newcode42\nipv4/mockicmp_test.go:42: b := make([]byte, 4)\nOn 2013/02/16 03:20:32, mikio wrote:\n> On 2013/02/15 07:50:30, dfc wrote:\n> > For some reason I have developed an aversion to using make like this. Consider\n> > this alternative\n> > \n> > b := []byte {\n> >     byte(m.Type),\n> >     byte(m.Code), \n> >     0, // checksum (upper half)\n> >     0, // checksum (lower half)\n> > }\n> \n> can you share the reason why for this with us?\n> well, just curious.\n\nWhen I see b := make([]byte, 4)\n\nit doesn't tell me what b is used for. Sure, most of the time it is filled out directly below, but sometimes not.\n\nIn this instance you can take the opportunity to avoid assigning to the memory twice, and be more descriptive in the process.",
			"disapproval": false,
			"date": "2013-02-16 03:53:58.153450",
			"approval": true
		}
	],
	"owner_email": "mikioh.mikioh@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "mikio",
	"subject": "code review 7304091: go.net/ipv4: fix sprious lookahead on IPConn-based Pack...",
	"created": "2013-02-13 10:21:30.185600",
	"patchsets": [
		1,
		1001,
		2007,
		12001,
		2009
	],
	"modified": "2013-02-16 04:02:16.663730",
	"closed": true,
	"issue": 7304091
}