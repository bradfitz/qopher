{
	"description": "go/printer: preserve newlines in func parameter lists\n\nFixes issue 1179.",
	"cc": [
		"gri@golang.org",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"jgennis@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Thanks for doing this. Looks pretty good.\n\nPlease add the line:\n\nFixes issue 1179.\n\nto the CL description; this will close the bug upon submission.\n\nhttp://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/nodes.go\nFile src/pkg/go/printer/nodes.go (right):\n\nhttp://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/nodes.go#newcode301\nsrc/pkg/go/printer/nodes.go:301: var prev, next token.Position\nPlease use \"var prevLine, line int\" instead - it's in sync with the code in exprList. Also, it will be more efficient, especially with the new token.Pos implementation (forthcoming).\n\nhttp://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/nodes.go#newcode305\nsrc/pkg/go/printer/nodes.go:305: next = par.Names[0].Pos()\nthis will become:\n\nline = par.Names[0].Pos().Line\n\nhttp://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/nodes.go#newcode307\nsrc/pkg/go/printer/nodes.go:307: next = par.Type.Pos()\nanalogous\n\nhttp://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/nodes.go#newcode309\nsrc/pkg/go/printer/nodes.go:309: p.print(token.COMMA)\nI'd move this before the computation of next/line - it always needs to be printed.\n\nhttp://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/nodes.go#newcode310\nsrc/pkg/go/printer/nodes.go:310: if prev.IsValid() && prev.Line < next.Line &&\nThis line would become:\n\nif prevLine < line && prevLine > 0 && line > 0 {\n\n(see nodes.go:247)\n\nhttp://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/nodes.go#newcode311\nsrc/pkg/go/printer/nodes.go:311: p.linebreak(next.Line, 0, ignore, true) {\nI am not sure about the true here. If you have comments interspersed, they will not line up correctly; but they probably should. Try using false and add more test cases.\n\nhttp://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/nodes.go#newcode322\nsrc/pkg/go/printer/nodes.go:322: prev = par.Type.Pos()\nprevLine = par.Type.Pos().Line\n\nhttp://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/testdata/declarations.golden\nFile src/pkg/go/printer/testdata/declarations.golden (right):\n\nhttp://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/testdata/declarations.golden#newcode659\nsrc/pkg/go/printer/testdata/declarations.golden:659: \nplease two newlines between groups of tests\n\nhttp://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/testdata/declarations.golden#newcode662\nsrc/pkg/go/printer/testdata/declarations.golden:662: int) {\nI am wondering if there should be indentation here. Something one can fine-tune later.\n\nhttp://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/testdata/declarations.golden#newcode669\nsrc/pkg/go/printer/testdata/declarations.golden:669: }\nPlease add more examples that test the behavior if comments are following groups of equally-typed parameters.",
			"disapproval": false,
			"date": "2010-12-01 22:41:33.742542",
			"approval": false
		},
		{
			"sender": "jgennis@google.com",
			"recipients": [
				"jgennis@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/nodes.go\nFile src/pkg/go/printer/nodes.go (right):\n\nhttp://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/nodes.go#newcode301\nsrc/pkg/go/printer/nodes.go:301: var prev, next token.Position\nOn 2010/12/01 22:41:34, gri wrote:\n> Please use \"var prevLine, line int\" instead - it's in sync with the code in\n> exprList. Also, it will be more efficient, especially with the new token.Pos\n> implementation (forthcoming).\n\nDone.\n\nhttp://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/nodes.go#newcode305\nsrc/pkg/go/printer/nodes.go:305: next = par.Names[0].Pos()\nOn 2010/12/01 22:41:34, gri wrote:\n> this will become:\n> \n> line = par.Names[0].Pos().Line\n\nDone.\n\nhttp://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/nodes.go#newcode307\nsrc/pkg/go/printer/nodes.go:307: next = par.Type.Pos()\nOn 2010/12/01 22:41:34, gri wrote:\n> analogous\n\nDone.\n\nhttp://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/nodes.go#newcode309\nsrc/pkg/go/printer/nodes.go:309: p.print(token.COMMA)\nOn 2010/12/01 22:41:34, gri wrote:\n> I'd move this before the computation of next/line - it always needs to be\n> printed.\n\nDone.\n\nhttp://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/nodes.go#newcode310\nsrc/pkg/go/printer/nodes.go:310: if prev.IsValid() && prev.Line < next.Line &&\nOn 2010/12/01 22:41:34, gri wrote:\n> This line would become:\n> \n> if prevLine < line && prevLine > 0 && line > 0 {\n> \n> (see nodes.go:247)\n\nI went with '0 < prevLine && prevLine < line', as that implies 0 < line.\n\nhttp://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/nodes.go#newcode311\nsrc/pkg/go/printer/nodes.go:311: p.linebreak(next.Line, 0, ignore, true) {\nOn 2010/12/01 22:41:34, gri wrote:\n> I am not sure about the true here. If you have comments interspersed, they will\n> not line up correctly; but they probably should. Try using false and add more\n> test cases.\n\nI've added the additional test cases, but passing true or false for the newSection param of linebreak doesn't seem to have any effect on this. I also added test cases with a comment line in between the params, and still saw no difference between the values of newSection.\n\nCan you describe what formatting you're looking for with the comments interspersed?\n\nAlso, I should point out that (IIRC) I based this linebreak call on the one in exprList on line 190 in this file. I believe that linebreak is responsible for preserving the newlines in between two param names.  This one only applies to a newline between a type name followed by a param name.\n\nhttp://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/nodes.go#newcode322\nsrc/pkg/go/printer/nodes.go:322: prev = par.Type.Pos()\nOn 2010/12/01 22:41:34, gri wrote:\n> prevLine = par.Type.Pos().Line\n\nDone.\n\nhttp://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/testdata/declarations.golden\nFile src/pkg/go/printer/testdata/declarations.golden (right):\n\nhttp://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/testdata/declarations.golden#newcode659\nsrc/pkg/go/printer/testdata/declarations.golden:659: \nOn 2010/12/01 22:41:34, gri wrote:\n> please two newlines between groups of tests\n\nDone.\n\nhttp://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/testdata/declarations.golden#newcode662\nsrc/pkg/go/printer/testdata/declarations.golden:662: int) {\nOn 2010/12/01 22:41:34, gri wrote:\n> I am wondering if there should be indentation here. Something one can fine-tune\n> later.\n\nThis matches the existing behavior for func param lists with a \\n in between two param names rather than after a type name. The last test case in this revision of the change was already passing before I modified nodes.go.\n\nI'm happy to make the change, but I've actually grown to like the lack of indentation there.  I find that it makes it more clear where the func body starts.\n\nhttp://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/testdata/declarations.golden#newcode669\nsrc/pkg/go/printer/testdata/declarations.golden:669: }\nOn 2010/12/01 22:41:34, gri wrote:\n> Please add more examples that test the behavior if comments are following groups\n> of equally-typed parameters.\n\nI've added a number of additional test cases with comments in various places while trying to identify the difference in behavior of the newSection param of linebreak.  All the test cases pass regardless of that param.\n\nPlease let me know which of the test cases you think should be kept.",
			"disapproval": false,
			"date": "2010-12-02 17:35:34.768424",
			"approval": false
		},
		{
			"sender": "jgennis@google.com",
			"recipients": [
				"jgennis@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello gri (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change.",
			"disapproval": false,
			"date": "2010-12-02 17:35:43.001682",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Thu, Dec 2, 2010 at 9:35 AM, <jgennis@google.com> wrote:\n\n> Reviewers: gri,\n>\n>\n>\n> http://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/nodes.go\n> File src/pkg/go/printer/nodes.go (right):\n>\n>\n> http://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/nodes.go#newcode301\n> src/pkg/go/printer/nodes.go:301: var prev, next token.Position\n> On 2010/12/01 22:41:34, gri wrote:\n>\n>> Please use \"var prevLine, line int\" instead - it's in sync with the\n>>\n> code in\n>\n>> exprList. Also, it will be more efficient, especially with the new\n>>\n> token.Pos\n>\n>> implementation (forthcoming).\n>>\n>\n> Done.\n>\n>\n>\n> http://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/nodes.go#newcode305\n> src/pkg/go/printer/nodes.go:305: next = par.Names[0].Pos()\n> On 2010/12/01 22:41:34, gri wrote:\n>\n>> this will become:\n>>\n>\n>  line = par.Names[0].Pos().Line\n>>\n>\n> Done.\n>\n>\n>\n> http://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/nodes.go#newcode307\n> src/pkg/go/printer/nodes.go:307: next = par.Type.Pos()\n> On 2010/12/01 22:41:34, gri wrote:\n>\n>> analogous\n>>\n>\n> Done.\n>\n>\n>\n> http://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/nodes.go#newcode309\n> src/pkg/go/printer/nodes.go:309: p.print(token.COMMA)\n> On 2010/12/01 22:41:34, gri wrote:\n>\n>> I'd move this before the computation of next/line - it always needs to\n>>\n> be\n>\n>> printed.\n>>\n>\n> Done.\n>\n>\n>\n> http://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/nodes.go#newcode310\n> src/pkg/go/printer/nodes.go:310: if prev.IsValid() && prev.Line <\n> next.Line &&\n> On 2010/12/01 22:41:34, gri wrote:\n>\n>> This line would become:\n>>\n>\n>  if prevLine < line && prevLine > 0 && line > 0 {\n>>\n>\n>  (see nodes.go:247)\n>>\n>\n> I went with '0 < prevLine && prevLine < line', as that implies 0 < line.\n\n\nsounds good\n\n>\n>\n>\n> http://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/nodes.go#newcode311\n> src/pkg/go/printer/nodes.go:311: p.linebreak(next.Line, 0, ignore, true)\n> {\n> On 2010/12/01 22:41:34, gri wrote:\n>\n>> I am not sure about the true here. If you have comments interspersed,\n>>\n> they will\n>\n>> not line up correctly; but they probably should. Try using false and\n>>\n> add more\n>\n>> test cases.\n>>\n>\n> I've added the additional test cases, but passing true or false for the\n> newSection param of linebreak doesn't seem to have any effect on this. I\n> also added test cases with a comment line in between the params, and\n> still saw no difference between the values of newSection.\n>\n\nI see that. It would be nice if the two comments on line 705, 709\n(declarations.golden) lined up, but I think that is related to other code. I\nwill look into that some other time.\n\n>\n> Can you describe what formatting you're looking for with the comments\n> interspersed?\n>\n\ncomments on consecutive lines should line up - again, I think now this is\nnot related to this particular code\n\n>\n> Also, I should point out that (IIRC) I based this linebreak call on the\n> one in exprList on line 190 in this file. I believe that linebreak is\n> responsible for preserving the newlines in between two param names.\n> This one only applies to a newline between a type name followed by a\n> param name.\n\n\nyes\n\n>\n>\n>\n> http://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/nodes.go#newcode322\n> src/pkg/go/printer/nodes.go:322: prev = par.Type.Pos()\n> On 2010/12/01 22:41:34, gri wrote:\n>\n>> prevLine = par.Type.Pos().Line\n>>\n>\n> Done.\n>\n>\n>\n> http://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/testdata/declarations.golden\n> File src/pkg/go/printer/testdata/declarations.golden (right):\n>\n>\n> http://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/testdata/declarations.golden#newcode659\n> src/pkg/go/printer/testdata/declarations.golden:659:\n> On 2010/12/01 22:41:34, gri wrote:\n>\n>> please two newlines between groups of tests\n>>\n>\n> Done.\n>\n>\n>\n> http://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/testdata/declarations.golden#newcode662\n> src/pkg/go/printer/testdata/declarations.golden:662: int) {\n> On 2010/12/01 22:41:34, gri wrote:\n>\n>> I am wondering if there should be indentation here. Something one can\n>>\n> fine-tune\n>\n>> later.\n>>\n>\n> This matches the existing behavior for func param lists with a \\n in\n> between two param names rather than after a type name. The last test\n> case in this revision of the change was already passing before I\n> modified nodes.go.\n>\n> I'm happy to make the change, but I've actually grown to like the lack\n> of indentation there.  I find that it makes it more clear where the func\n> body starts.\n>\n> fine for now\n\n>\n>\n> http://codereview.appspot.com/3225042/diff/1/src/pkg/go/printer/testdata/declarations.golden#newcode669\n> src/pkg/go/printer/testdata/declarations.golden:669: }\n> On 2010/12/01 22:41:34, gri wrote:\n>\n>> Please add more examples that test the behavior if comments are\n>>\n> following groups\n>\n>> of equally-typed parameters.\n>>\n>\n> I've added a number of additional test cases with comments in various\n> places while trying to identify the difference in behavior of the\n> newSection param of linebreak.  All the test cases pass regardless of\n> that param.\n>\n> Please let me know which of the test cases you think should be kept.\n>\n\nlet's leave them all, it's good to have them systematically enumerated\n\n>\n> Description:\n> go/printer: preserve newlines in func parameter lists\n>\n> Fixes issue 1179.\n>\n> Please review this at http://codereview.appspot.com/3225042/\n>\n> Affected files:\n>  M src/pkg/go/printer/nodes.go\n>  M src/pkg/go/printer/testdata/declarations.golden\n>  M src/pkg/go/printer/testdata/declarations.input\n>\n>\n> Index: src/pkg/go/printer/nodes.go\n> ===================================================================\n> --- a/src/pkg/go/printer/nodes.go\n> +++ b/src/pkg/go/printer/nodes.go\n> @@ -92,7 +92,7 @@\n>\n>\n>  // Sets multiLine to true if the identifier list spans multiple lines.\n> -// If ident is set, a multi-line identifier list is indented after the\n> +// If indent is set, a multi-line identifier list is indented after the\n>  // first linebreak encountered.\n>  func (p *printer) identList(list []*ast.Ident, indent bool, multiLine\n> *bool) {\n>        // convert into an expression list so we can re-use exprList\n> formatting\n> @@ -298,15 +298,28 @@\n>  func (p *printer) parameters(fields *ast.FieldList, multiLine *bool) {\n>        p.print(fields.Opening, token.LPAREN)\n>        if len(fields.List) > 0 {\n>\n> +               var prev, next token.Position\n>                for i, par := range fields.List {\n>                        if i > 0 {\n> -                               p.print(token.COMMA, blank)\n> +                               if len(par.Names) > 0 {\n>\n> +                                       next = par.Names[0].Pos()\n> +                               } else {\n> +                                       next = par.Type.Pos()\n> +                               }\n> +                               p.print(token.COMMA)\n>\n> +                               if prev.IsValid() && prev.Line < next.Line\n> &&\n> +                                       p.linebreak(next.Line, 0, ignore,\n> true) {\n> +                                       *multiLine = true\n> +                               } else {\n> +                                       p.print(blank)\n> +                               }\n>                        }\n>                        if len(par.Names) > 0 {\n>                                p.identList(par.Names, false, multiLine)\n>                                p.print(blank)\n>                        }\n>                        p.expr(par.Type, multiLine)\n> +                       prev = par.Type.Pos()\n>                }\n>        }\n>        p.print(fields.Closing, token.RPAREN)\n> Index: src/pkg/go/printer/testdata/declarations.golden\n> ===================================================================\n> --- a/src/pkg/go/printer/testdata/declarations.golden\n> +++ b/src/pkg/go/printer/testdata/declarations.golden\n> @@ -656,3 +656,14 @@\n>  func _(x ...func(...int))\n>  func _(x ...map[string]int)\n>  func _(x ...chan int)\n> +\n> +// these parameter lists must remain multi-line since they are multi-line\n> in the source\n> +func _(bool,\n> +int) {\n> +}\n> +func _(x bool,\n> +y int) {\n> +}\n> +func _(x,\n> +y bool) {\n> +}\n> Index: src/pkg/go/printer/testdata/declarations.input\n> ===================================================================\n> --- a/src/pkg/go/printer/testdata/declarations.input\n> +++ b/src/pkg/go/printer/testdata/declarations.input\n> @@ -644,3 +644,14 @@\n>  func _(x ...func(...int))\n>  func _(x ...map[string]int)\n>  func _(x ...chan int)\n> +\n> +// these parameter lists must remain multi-line since they are multi-line\n> in the source\n> +func _(bool,\n> +int) {\n> +}\n> +func _(x bool,\n> +y int) {\n> +}\n> +func _(x,\n> +y bool) {\n> +}\n>\n>\n>\n",
			"disapproval": false,
			"date": "2010-12-02 18:06:31.481998",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM\nthanks for doing this\n- gri\n\nOn Thu, Dec 2, 2010 at 9:35 AM, <jgennis@google.com> wrote:\n\n> Hello gri (cc: golang-dev@googlegroups.com),\n>\n> I'd like you to review this change.\n>\n>\n> http://codereview.appspot.com/3225042/\n>\n",
			"disapproval": false,
			"date": "2010-12-02 18:16:33.289954",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"jgennis@google.com",
				"gri@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=32bccfd99223 ***\n\ngo/printer: preserve newlines in func parameter lists\n\nFixes issue 1179.\n\nR=gri\nCC=golang-dev\nhttp://codereview.appspot.com/3225042\n\nCommitter: Robert Griesemer <gri@golang.org>",
			"disapproval": false,
			"date": "2010-12-02 18:42:12.399661",
			"approval": false
		}
	],
	"owner_email": "jgennis@google.com",
	"private": false,
	"base_url": "",
	"owner": "jmg",
	"subject": "code review 3225042: go/printer: preserve newlines in func parameter lists",
	"created": "2010-11-21 09:32:51.991464",
	"patchsets": [
		1,
		6001
	],
	"modified": "2010-12-02 18:42:12.399661",
	"closed": false,
	"issue": 3225042
}