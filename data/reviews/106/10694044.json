{
	"description": "go.tools/go/types: assignment checking cleanup (round 2)\n\n- consolited remainign assignment check routines\n- removed more dead code\n- fixed incorrect scope hierarchy in case of errors for some statements\n- fixed scope of key iteration variable for range clauses",
	"cc": [
		"adonovan@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello adonovan@google.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go.tools",
			"disapproval": false,
			"date": "2013-07-09 01:02:01.036990",
			"approval": false
		},
		{
			"sender": "adonovan@google.com",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nhttps://codereview.appspot.com/10694044/diff/10001/go/types/assignments.go\nFile go/types/assignments.go (right):\n\nhttps://codereview.appspot.com/10694044/diff/10001/go/types/assignments.go#newcode15\ngo/types/assignments.go:15: // assigment reports whether x can be assigned to a variable of type 'to',\n\"assignment\"\n\nhttps://codereview.appspot.com/10694044/diff/10001/go/types/assignments.go#newcode110\ngo/types/assignments.go:110: // don't evaluate lhs if it is the blank identifier\nCapital, period.\n\nhttps://codereview.appspot.com/10694044/diff/10001/go/types/stmt.go\nFile go/types/stmt.go (left):\n\nhttps://codereview.appspot.com/10694044/diff/10001/go/types/stmt.go#oldcode14\ngo/types/stmt.go:14: // assigment reports whether x can be assigned to a variable of type 'to',\n\"assignment\"\n\nhttps://codereview.appspot.com/10694044/diff/10001/go/types/stmt.go\nFile go/types/stmt.go (right):\n\nhttps://codereview.appspot.com/10694044/diff/10001/go/types/stmt.go#newcode550\ngo/types/stmt.go:550: x.expr = lhs // TODO(gri) this should really be s.X but that breaks ssa/interp\nWhy should this \"really be s.X\"?  Consider:\n  for i := range \"foo\" {}\ns.X has type string, i has type int.  If you change the code per the TODO, you'll assign the type int to the string literal.  Log the Expr callback and you'll see what I mean.",
			"disapproval": false,
			"date": "2013-07-09 14:41:33.584000",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/10694044/diff/10001/go/types/assignments.go\nFile go/types/assignments.go (right):\n\nhttps://codereview.appspot.com/10694044/diff/10001/go/types/assignments.go#newcode15\ngo/types/assignments.go:15: // assigment reports whether x can be assigned to a variable of type 'to',\nOn 2013/07/09 14:41:33, adonovan wrote:\n> \"assignment\"\n\nDone.\n\nhttps://codereview.appspot.com/10694044/diff/10001/go/types/assignments.go#newcode110\ngo/types/assignments.go:110: // don't evaluate lhs if it is the blank identifier\nOn 2013/07/09 14:41:33, adonovan wrote:\n> Capital, period.\n\nDone.\n\nhttps://codereview.appspot.com/10694044/diff/10001/go/types/stmt.go\nFile go/types/stmt.go (left):\n\nhttps://codereview.appspot.com/10694044/diff/10001/go/types/stmt.go#oldcode14\ngo/types/stmt.go:14: // assigment reports whether x can be assigned to a variable of type 'to',\nOn 2013/07/09 14:41:33, adonovan wrote:\n> \"assignment\"\n\nDone.\n\nhttps://codereview.appspot.com/10694044/diff/10001/go/types/stmt.go\nFile go/types/stmt.go (right):\n\nhttps://codereview.appspot.com/10694044/diff/10001/go/types/stmt.go#newcode550\ngo/types/stmt.go:550: x.expr = lhs // TODO(gri) this should really be s.X but that breaks ssa/interp\nOn 2013/07/09 14:41:33, adonovan wrote:\n> Why should this \"really be s.X\"?  Consider:\n>   for i := range \"foo\" {}\n> s.X has type string, i has type int.  If you change the code per the TODO,\n> you'll assign the type int to the string literal.  Log the Expr callback and\n> you'll see what I mean.\n\nFair enough. But the expression giving rise to the x operand is the 1./2. projection of the range clause. For error messages that position would be more appropriate.",
			"disapproval": false,
			"date": "2013-07-09 16:40:26.330630",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"adonovan@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=ac0afd9ad05c&repo=tools ***\n\ngo.tools/go/types: assignment checking cleanup (round 2)\n\n- consolited remainign assignment check routines\n- removed more dead code\n- fixed incorrect scope hierarchy in case of errors for some statements\n- fixed scope of key iteration variable for range clauses\n\nR=adonovan\nCC=golang-dev\nhttps://codereview.appspot.com/10694044",
			"disapproval": false,
			"date": "2013-07-09 16:45:11.869270",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 10694044: go.tools/go/types: assignment checking cleanup (round 2)",
	"created": "2013-07-09 00:41:06.799900",
	"patchsets": [
		1,
		3001,
		6001,
		10001,
		17001
	],
	"modified": "2013-07-09 16:45:13.151780",
	"closed": true,
	"issue": 10694044
}