{
	"description": "testing/quick: documentation tweaks\n\nFixes issue 2960.",
	"cc": [
		"golang-dev@googlegroups.com",
		"bradfitz@golang.org"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"bradfitz@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=47ef6224e253 ***\n\ntesting/quick: documentation tweaks\n\nFixes issue 2960.\n\nR=golang-dev, bradfitz\nCC=golang-dev\nhttp://codereview.appspot.com/5652055",
			"disapproval": false,
			"date": "2012-02-10 03:37:55.523209",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-02-10 03:29:44.836865",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but remove the extra Otherwise, Otherwise. Otherwise, it's good.\n\nOn Fri, Feb 10, 2012 at 2:29 PM, <r@golang.org> wrote:\n\n> Reviewers: golang-dev_googlegroups.com,\n>\n> Message:\n> Hello golang-dev@googlegroups.com,\n>\n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n>\n>\n> Description:\n> testing/quick: documentation tweaks\n>\n> Fixes issue 2960.\n>\n> Please review this at http://codereview.appspot.com/**5652055/<http://codereview.appspot.com/5652055/>\n>\n> Affected files:\n>  M src/pkg/testing/quick/quick.go\n>\n>\n> Index: src/pkg/testing/quick/quick.go\n> ==============================**==============================**=======\n> --- a/src/pkg/testing/quick/quick.**go\n> +++ b/src/pkg/testing/quick/quick.**go\n> @@ -50,7 +50,7 @@\n>\n>  // Value returns an arbitrary value of the given type.\n>  // If the type implements the Generator interface, that will be used.\n> -// Note: in order to create arbitrary values for structs, all the members\n> must be public.\n> +// Note: To create arbitrary values for structs, all the fields must be\n> exported.\n>  func Value(t reflect.Type, rand *rand.Rand) (value reflect.Value, ok\n> bool) {\n>        if m, ok := reflect.Zero(t).Interface().(**Generator); ok {\n>                return m.Generate(rand, complexSize), true\n> @@ -155,9 +155,10 @@\n>        // If non-nil, rand is a source of random numbers. Otherwise a\n> default\n>        // pseudo-random source will be used.\n>        Rand *rand.Rand\n> -       // If non-nil, Values is a function which generates a slice of\n> arbitrary\n> -       // Values that are congruent with the arguments to the function\n> being\n> -       // tested. Otherwise, Values is used to generate the values.\n> +       // If non-nil, the Values function generates a slice of arbitrary\n> +       // reflect.Values that are congruent with the arguments to the\n> function\n> +       // being tested. Otherwise, otherwise, the top-level Values\n> function is used\n> +       // to generate them.\n>        Values func([]reflect.Value, *rand.Rand)\n>  }\n>\n>\n>\n>\n",
			"disapproval": false,
			"date": "2012-02-10 03:35:57.476738",
			"approval": true
		}
	],
	"owner_email": "r@golang.org",
	"private": false,
	"base_url": "",
	"owner": "r",
	"subject": "code review 5652055: testing/quick: documentation tweaks",
	"created": "2012-02-10 03:29:37.299801",
	"patchsets": [
		1,
		4001
	],
	"modified": "2012-02-10 03:37:57.656008",
	"closed": true,
	"issue": 5652055
}