{
	"description": "exp/publicsuffix: new package.\n\nThe tables were generated by:\n\ngo run gen.go -version \"publicsuffix.org's effective_tld_names.dat, hg revision 05b11a8d1ace (2012-11-09)\"       >table.go\n\ngo run gen.go -version \"publicsuffix.org's effective_tld_names.dat, hg revision 05b11a8d1ace (2012-11-09)\" -test >table_test.go\n\nThe input data is temporarily filtered to the .ao, .ar, .arpa, .uk and\n.zw domains, so that code review is easier while still covering the\ninteresting * and ! rules. A follow-up changelist will check in the\nunfiltered public suffix list.\n\nUpdate issue 1960.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rsc@golang.org",
		"dr.volker.dobler@gmail.com",
		"adg@golang.org",
		"bradfitz@golang.org",
		"r@golang.org",
		"dsymonds@golang.org",
		"fw@deneb.enyo.de",
		"rsleevi@chromium.org"
	],
	"messages": [
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Just two remarks from a quick skim:\n\nnodes is an array? Would the GC have to scan\nthis array or is it treated as one?\n\nI found the kyoto/kobe test in the testdata\nsuite which can be found at http://mxr.mozilla.org/mozilla-central/source/netwerk/test/unit/data/test_psl.txt?raw=1\noften broke my work. Could you include those too?\n\nOn 2012/12/05 00:47:08, nigeltao wrote:\n> Hello mailto:rsc@golang.org, mailto:dr.volker.dobler@gmail.com (cc:\n> mailto:golang-dev@googlegroups.com),\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-12-05 07:12:22.654430",
			"approval": false
		},
		{
			"sender": "dr.volker.dobler@gmail.com",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Current code breaks for the jp rules like *.kobe.jp\nwhich should match kobe.jp.  But the fix seems trivial\n(see below).\n\nYour algorithm is very clean and nice.\nMaybe some more comments about how the rules are encoded\ninto the tree of nodes might be useful for those who get\nconfronted with this code for the first time.\n\nYou named the table generator \"gen\" as does atom and md5\nwhile unicode and norm named it \"maketable(s)\".\nAny chance of unifying these? Any rule when to pick\nwhich name?\n\nThe generated table.go can be stripped further and seems\nof reasonable size to be checked in. The comments per\nnode should be suppressed by default and turned on via\na command line flag to gen (if checked in).\n\nIt is okay if all this goes to go.net, but I do not\nthink that the public suffixes are just some \"internet\ndatabase that comes along\": Cookies belong to HTTP,\nthey are used for security relevant tasks and their\nsecurity depends (to some degree) on not allowing domain\ncookies on certain domains. Unfortunately this list is\nlong but not locally accessible like time zone data.\nA \"striped version\" is useless, even dangerous. The main\nissue I see with a built-in list is, that the Go release\ncycle is much longer than the lists (or current browser)\nand users might rely on an outdated list (which might be\nas bad as none or a stripped list). There is just one\nsolution here: fetch at runtime.\n\nFetching at runtime would allow a long running server to\nupdated its list.  Fetch at runtime seems okay, as you\nwon't need the list if you don't have internet connection.\nBuilding Go itself or any other project would still be\npossible without network connectivity. No large, quickly\nout-dating table needs to be checked in (neither the raw,\nnor some generated table.go). Fetch at runtime doesn't\nnecessarily mean fetch the raw list from the net: a local\nserver, local file or falling back from net to local file\nmight be simple and usable.\n\nAnyway, even fetch at runtime needs an internal\nrepresentation of the rules and the proposed solution is\na very nice one.\n\nhttps://codereview.appspot.com/6873056/diff/12001/src/pkg/exp/publicsuffix/gen.go\nFile src/pkg/exp/publicsuffix/gen.go (right):\n\nhttps://codereview.appspot.com/6873056/diff/12001/src/pkg/exp/publicsuffix/gen.go#newcode83\nsrc/pkg/exp/publicsuffix/gen.go:83: res, err := http.Get(*url)\nIt would be nice to be able to use a local file on disc too.\n\nhttps://codereview.appspot.com/6873056/diff/12001/src/pkg/exp/publicsuffix/gen.go#newcode215\nsrc/pkg/exp/publicsuffix/gen.go:215: fmt.Fprintf(w, \"const text = \")\nMaybe a short doc comment for text too?\n\nhttps://codereview.appspot.com/6873056/diff/12001/src/pkg/exp/publicsuffix/gen.go#newcode236\nsrc/pkg/exp/publicsuffix/gen.go:236: //\t[2] nodeType [1] wildcard [13] number of children [16] first child.\nA reversed layout of \n  numChildren firstChild nodeType wildcard\nwould result in an encoding with the two most significant\nbytes set to zero for all nodes without children.\nIf output as %x instead of %08x, this would save some more\nbytes of checked in table data.\n\nhttps://codereview.appspot.com/6873056/diff/12001/src/pkg/exp/publicsuffix/gen.go#newcode241\nsrc/pkg/exp/publicsuffix/gen.go:241: var nodes = [...][2]uint32{\nUsing a uint64 instead of [2]uint32 reduces each line of\nthe generated table by 6 byte (total of 22k or 6%) but\nmight be slower on 32 bit hardware.\n\nhttps://codereview.appspot.com/6873056/diff/12001/src/pkg/exp/publicsuffix/gen.go#newcode277\nsrc/pkg/exp/publicsuffix/gen.go:277: children   map[string]*node\nIf you use a slice instead of a map for the children,\nyou can sort it once and do not need to \"collect keys,\nsort keys, iterate map in sorted keys order\" as you do\ntwice below in assignNodeIndex and printTable.\n\nhttps://codereview.appspot.com/6873056/diff/12001/src/pkg/exp/publicsuffix/gen.go#newcode325\nsrc/pkg/exp/publicsuffix/gen.go:325: fmt.Fprintf(w, \"{0x%08x, 0x%08x}, // 0x%04x (%s) %s%c %s\\n\",\nCould use \"0x%x\" as format which would save some bytes\nin the generated table (while decreasing readability).\n\nhttps://codereview.appspot.com/6873056/diff/12001/src/pkg/exp/publicsuffix/list.go\nFile src/pkg/exp/publicsuffix/list.go (right):\n\nhttps://codereview.appspot.com/6873056/diff/12001/src/pkg/exp/publicsuffix/list.go#newcode47\nsrc/pkg/exp/publicsuffix/list.go:47: switch u {\nEmpty nodes do match wildcard nodes. Adding\n    case nodeTypeEmpty:\n        if wildcard { suffix = 1 + dot }\nfixes all the testcases, including the kobe.jp\nones.\n\nhttps://codereview.appspot.com/6873056/diff/12001/src/pkg/exp/publicsuffix/list_test.go\nFile src/pkg/exp/publicsuffix/list_test.go (right):\n\nhttps://codereview.appspot.com/6873056/diff/12001/src/pkg/exp/publicsuffix/list_test.go#newcode163\nsrc/pkg/exp/publicsuffix/list_test.go:163: got := slowPublicSuffix(tc.domain)\nVery nice idea.\n\nhttps://codereview.appspot.com/6873056/diff/12001/src/pkg/exp/publicsuffix/list_test.go#newcode242\nsrc/pkg/exp/publicsuffix/list_test.go:242: // TODO(nigeltao): add the \"Effective Top Level Domain Plus 1\" tests from\nThese are the ones which discovered the kobe.jp bug.\nFeel free to just copy my testcases.",
			"disapproval": false,
			"date": "2012-12-05 13:41:55.271190",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dr.volker.dobler@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org, dr.volker.dobler@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-12-05 00:47:08.493540",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Just an idea: it could live in the go.net subrepo. Punycode could also\r\nlive there, I guess. That could push exp/cookiejar into go.net too,\r\nsince it's not really useful without a public suffix list\r\nimplementation.\r\n\r\n\r\nOn Wed, Dec 5, 2012 at 3:50 PM, Russ Cox <rsc@golang.org> wrote:\r\n> How big is the source file form of the generated full list?\r\n\r\nThe generated table.go is 390K, but half of that is comments, since\r\nmost lines look like:\r\n        {0x40100c95, 0x006a7f09}, // 0x0629 (0x0c95-0x0ca5) +  yamaguchi\r\n        {0x401c0ca5, 0x006aa709}, // 0x062a (0x0ca5-0x0cc1) +  yamanashi\r\n        {0x20010cc1, 0x006bb608}, // 0x062b (0x0cc1-0x0cc2) _* yokohama\r\n        {0x40000000, 0x00018705}, // 0x062c (-------------) +  aisai\r\n        {0x40000000, 0x00027303}, // 0x062d (-------------) +  ama\r\n        {0x40000000, 0x00036a04}, // 0x062e (-------------) +  anjo\r\n        {0x40000000, 0x00059005}, // 0x062f (-------------) +  asuke\r\n        {0x40000000, 0x000d9306}, // 0x0630 (-------------) +  chiryu\r\n        {0x40000000, 0x000d9905}, // 0x0631 (-------------) +  chita\r\n\r\nThe node table has 5840 rows, and the \"const text = `etc`\" string is\r\n27990 bytes, presumably the latter could get smaller if we dedupe it a\r\nla exp/html/atom's text string.\r\n\r\nThe pkg/linux_amd64/exp/publicsuffix.a file is 562K. That package\r\nimports exp/cookiejar and strings. exp/cookiejar.a is 152K and\r\nstrings.a is 334K. In comparison, unicode.a is 626K.\r\n\r\nThe raw effective_tld_names.dat file has 6949 lines and weighs in at\r\n99K. For me, effective_tld_names.dat.gz is 33K, so I don't know where\r\nbradfitz is getting his 96K number from.\r\n\r\n\r\n> How often does the publicsuffix.org list get updated?\r\n> Is there a version history?\r\n\r\nhttp://hg.mozilla.org/mozilla-central/filelog/e8f0504ccbb9/netwerk/dns/effective_tld_names.dat\r\nsuggests that there were 40 changes so far in 2012, although a couple\r\nof those were formatting changes.\r\n",
			"disapproval": false,
			"date": "2012-12-06 06:18:11.622410",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Dec 6, 2012 at 2:53 PM, Russ Cox <rsc@golang.org> wrote:\r\n> Although I am not worried about the size, I do like Florian's\r\n> suggestion of just not having the list at all. Is that tenable? Is it\r\n> only full web browsers that really need to care? One alternative would\r\n> be to implement a parser for the actual web format of the list and say\r\n> that if you care your client must supply the file content to use.\r\n\r\nIt would be possible to parse at runtime, but you might have to care\r\nthen about how efficient the table-building code is.\r\n\r\nIt's tenable to provide a 'dev null' public suffix list that always\r\nreturns the last label (the au in foo.com.au). It would mean that\r\nevil.com.au could affect the cookies for google.com.au, which is\r\nobviously bad for a full web browser but a simple web-scraping program\r\nmight not care.\r\n\r\nA slightly smarter list is to return the z in x.y.z if z is in\r\n{com,edu,gov,int,mil,net,org}, otherwise return y.z. I'm told that the\r\noriginal Netscape cookie spec did this, and it works for a lot of the\r\ninternet, including example.com, example.com.au and example.co.uk, but\r\nit isn't correct for example.fr, example.shibuya.tokyo.jp or\r\nexample.pvt.k12.ma.us.\r\n\r\nI believe that Florian is right in that co-operating web sites can\r\nwork around the publicsuffix restrictions on cookies, but I think the\r\nconcern is more about malicious web sites.\r\n\r\n\r\n> I would also like to know what the deal is with punycode. Why does it\r\n> come up here? Why does it matter for cookies? Can we make the client\r\n> be in charge of dealing with punycode too instead of making the cookie\r\n> jar do it?\r\n\r\nPunycode matters because some elements of\r\nhttp://mxr.mozilla.org/mozilla-central/source/netwerk/dns/effective_tld_names.dat?raw=1\r\nare IDNs (which I'm leaving as TODO for now). For example, grepping\r\nfor \"Hong Kong\" finds:\r\n\r\n// xn--j6w193g (\"Hong Kong\" Chinese-Han) : HK\r\n// https://www2.hkirc.hk/register/rules.jsp\r\n\u9999\u6e2f\r\n\r\nI think the client should be responsible for punycoding the domain,\r\nbut if we're generating the table ahead of time, we'll have to\r\npunycode at that time too.\r\n",
			"disapproval": false,
			"date": "2012-12-06 06:28:20.666720",
			"approval": false
		},
		{
			"sender": "fw@deneb.enyo.de",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> The input data is temporarily filtered to the .ao, .ar, .arpa, .uk and\r\n> .zw domains, so that code review is easier while still covering the\r\n> interesting * and ! rules. A follow-up changelist will check in the\r\n> unfiltered public suffix list.\r\n\r\nWhat's the technical need for this list?  \r\n\r\nAs far as I can tell, it's just a cargo cult.  Few things need it (I\r\ncan see that Noscript benefits from it, for instance).  The cookie\r\nrestrictions never made much sense to me because they are trivially\r\nbypassed with a couple of server round trips (among cooperating web\r\nsites).\r\n",
			"disapproval": false,
			"date": "2012-12-06 07:21:33.530630",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I can't believe I'm saying this but what does IE do?\r\n",
			"disapproval": false,
			"date": "2012-12-06 06:18:40.476000",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This thread is about where and how to make this data accessible to Go programs.\r\n\r\nDoes it need to be in the main repo?\r\nDoes all of it need to be in the main repo?\r\nWould it be sufficient to put it in go.net?\r\nHow should it be represented?\r\nHow should it be maintained?\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-12-06 07:14:37.285470",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "What are the security implications of the suffix list updates?\r\n\r\nIf the list is checked into the main Go repo, does that mean people at Go\r\n1.1.0 might be left with an insecure HTTP client if a change is made\r\nbetween 1.1.0 and 1.1.1?\r\n\r\nAndrew\r\n",
			"disapproval": false,
			"date": "2012-12-06 06:19:52.127970",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Wed, Dec 5, 2012 at 6:12 PM,  <dr.volker.dobler@gmail.com> wrote:\r\n> nodes is an array? Would the GC have to scan\r\n> this array or is it treated as one?\r\n\r\nThe GC skips the nodes array. For example, take this program:\r\n\r\n$ cat main.go\r\npackage main\r\n\r\nvar u = [...][2]uint32{\r\n    {0x0101, 0x0102},\r\n    {0x0201, 0x0202},\r\n    {0x0301, 0x0302},\r\n}\r\n\r\nvar p = [...][2]*uint32{\r\n    {&u[0][0], &u[0][1]},\r\n    {&u[1][0], &u[1][1]},\r\n    {&u[2][0], &u[2][1]},\r\n}\r\n\r\nfunc main() {\r\n    println(u[0][0])\r\n    println(p[0][0])\r\n}\r\n\r\n\r\nThe compiler output is:\r\n\r\n$ go tool 6g -SS -o /dev/null main.go | grep GLOBL\r\n0040 (main.go:7) GLOBL   u+0(SB),16,$24(AL*0)\r\n0040 (main.go:13) GLOBL   p+0(SB),$48(AL*0)\r\n[etc]\r\n\r\nNote that the u global variable is marked \"16\". This matches\r\n$GOROOT/src/cmd/6l/6.out.h:37:\r\n\r\n#define NOPTR   (1<<4)\r\n\r\nwhich means that the value doesn't directly or indirectly contain any\r\npointers, and thus doesn't need scanning during garbage collection.\r\nKeep grepping for NOPTR in $GOROOT/src/cmd if you're curious about the\r\ndetails (e.g. it leads to the haspointers function in\r\n$GOROOT/src/cmd/gc/reflect.c, which is where it's decided that\r\n[...][2]uint32 has no pointers).\r\n\r\nI'll look at the the kyoto/kobe test tomorrow.\r\n",
			"disapproval": false,
			"date": "2012-12-06 06:35:35.249780",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "We shouldn't check in the raw data file, even gzipped. Nothing but the\r\ntable generator will ever read that file, and it can read it from the\r\ninternet, just like Unicode's maketables.go does.\r\n\r\nThe only thing we should be talking about checking in is the generated\r\ntables.go file, which cannot be compressed (or it can't be compiled).\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-12-06 06:37:43.851200",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Dec 4, 2012 at 10:03 PM, Rob Pike <r@golang.org> wrote:\r\n\r\n> This thread is about where and how to make this data accessible to Go\r\n> programs.\r\n>\r\n> Does it need to be in the main repo?\r\n\r\nDoes all of it need to be in the main repo?\r\n\r\nWould it be sufficient to put it in go.net?\r\n>\r\n\r\ndepends what the concerns are.  what are your concerns?\r\n\r\n\r\n> How should it be represented?\r\n> How should it be maintained?\r\n>\r\n\r\netc\r\n\r\n\r\n>\r\n> -rob\r\n>\r\n",
			"disapproval": false,
			"date": "2012-12-06 07:10:38.024720",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't want to move cookiejar code to go.net. I think it's\r\nembarrassing that we can't make HTTP requests with cookies because we\r\ndon't have a cookiejar implementation, and I want to keep the pressure\r\non to get one for Go 1.1. We might not make it, but I don't want to\r\ngive up yet. I realize that the process is generating a lot of\r\ndiscussion, but for the most part I think it is helping us arrive a\r\nbetter API and implementation.\r\n\r\nI would like to continue iterating on the design of the table here,\r\nwith an eye toward keeping both the in-memory and in-Go-file size as\r\nsmall as possible. Once Nigel and Volker are happy with both of those,\r\nI am not worried about the size of the generator program and the\r\ngenerated Go file (don't check in the original web version). In the\r\ncurrent repository a few hundred K is not a significant difference. I\r\nwould be more worried if we were checking in new tables every day, but\r\nwe're not. However...\r\n\r\nAlthough I am not worried about the size, I do like Florian's\r\nsuggestion of just not having the list at all. Is that tenable? Is it\r\nonly full web browsers that really need to care? One alternative would\r\nbe to implement a parser for the actual web format of the list and say\r\nthat if you care your client must supply the file content to use.\r\n\r\nI would also like to know what the deal is with punycode. Why does it\r\ncome up here? Why does it matter for cookies? Can we make the client\r\nbe in charge of dealing with punycode too instead of making the cookie\r\njar do it?\r\n\r\nThanks.\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-12-06 06:39:07.009640",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Tue, Dec 4, 2012 at 9:37 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> We shouldn't check in the raw data file, even gzipped. Nothing but the\r\n> table generator will ever read that file, and it can read it from the\r\n> internet, just like Unicode's maketables.go does.\r\n>\r\n> The only thing we should be talking about checking in is the generated\r\n> tables.go file, which cannot be compressed (or it can't be compiled).\r\n\r\n\r\nI was under the impression this thread had turned into concerns about the\r\nrepository's disk usage.\r\n\r\nIt's not clear to me what this thread is even about:\r\n\r\n-- the web's grossness\r\n-- the necessity of more tables\r\n-- build system complexity\r\n-- build time\r\n-- network availability\r\n-- disk space\r\n\r\n... and in what order.\r\n",
			"disapproval": false,
			"date": "2012-12-06 06:46:25.360440",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This thread is about where and how to make this data accessible to Go programs.\r\n\r\nDoes it need to be in the main repo?\r\nDoes all of it need to be in the main repo?\r\nWould it be sufficient to put it in go.net?\r\nHow should it be represented a\r\n\r\n-rob\r\n",
			"disapproval": false,
			"date": "2012-12-06 06:52:33.126160",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Yeah, I thought tables.go was the only thing being considered for checking\r\nin.\r\n",
			"disapproval": false,
			"date": "2012-12-06 07:25:41.963430",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The Marianas trench rebuttal is unwarranted: we've never required a network\r\nconnection to run all.bash so far.  This shouldn't be what breaks that.\r\n\r\nFor comparison, we have 2 MB of images checked in to the repo.  This is 96\r\nKB compressed.  With an domain-specific compression scheme we could make\r\nthat even less.\r\n\r\nI don't care about this database much but it's hard to discount its\r\nimportance.  It's as important to the web as HTTP and an HTML5 parser is,\r\nwhich we seem cool with having in the main repo.\r\n\r\n\r\nOn Tue, Dec 4, 2012 at 9:19 PM, Rob Pike <r@golang.org> wrote:\r\n\r\n> I think of this as more like the time zone data than the unicode\r\n> table. Regardless, it's data that most programs will not need and I\r\n> strongly object to checking in a version of every internet database\r\n> that comes along.\r\n>\r\n> There are going to be more of these. If you insist on building it in,\r\n> I'd prefer a subrepo to set the proper precedent. You don't need it\r\n> built in anyway, since you'll have the repo built when you're on the\r\n> plane.\r\n>\r\n> I don't know much about the data so I can't judge the merit of the\r\n> hybrid approach but it does seem to solve all problems: little churn,\r\n> small hit to repo, can work in in the Marianas trench, full\r\n> flexibility available for show-offs.\r\n>\r\n> -rob\r\n>\r\n",
			"disapproval": false,
			"date": "2012-12-06 06:54:57.504440",
			"approval": false
		},
		{
			"sender": "dsymonds@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm thinking this package and cookiejar should just move to go.net right\r\nnow, and we can figure out the long-term plan later.\r\n",
			"disapproval": false,
			"date": "2012-12-06 06:59:05.557860",
			"approval": false
		},
		{
			"sender": "fw@deneb.enyo.de",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "* Russ Cox:\r\n\r\n> I can't believe I'm saying this but what does IE do?\r\n\r\nHere's a somewhat dated description, but I think the rationale still\r\napplies (but IE's behavior may have changed since):\r\n\r\n<http://blogs.msdn.com/b/ieinternals/archive/2009/09/19/private-domain-names-and-public-suffixes-in-internet-explorer.aspx>\r\n\r\nIt's hard to come up with a short summary.\r\n\r\nThe bypass I mentioned involves having something like this in web\r\npages:\r\n\r\n<script src=\"https://www.enyo.de/metrics/guid.js\">\r\n\r\nAnd the web server would look at a \"GUID\" cookie, set a new one if it\r\ndoes not exist, and return page content like this, reproducing the\r\ncookie value:\r\n\r\nenyoMetricsGUID = \"90b57a93-4433-42b5-81cc-321b09edf868\";\r\n\r\nThe web page including the script then has access to this global\r\ncookie, and could use XMLHttpRequest to report it back to its server.\r\n\r\nRegarding the protection from session fixation attacks, these have to\r\nbe targeted at a specific web site (because a valid session cookie is\r\nrequired).  Setting such a cookie globally therefore does not make\r\nmuch sense.  But it seems that all web browsers support third party\r\ncookies by default (and I recently discovered that some Wordpress\r\nservices rely on them), so you could directly set the cookie on the\r\nvictim domain, public suffix list or not.\r\n",
			"disapproval": false,
			"date": "2012-12-06 08:36:22.813510",
			"approval": false
		},
		{
			"sender": "rsleevi@chromium.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dr.volker.dobler@gmail.com",
				"adg@golang.org",
				"bradfitz@golang.org",
				"r@golang.org",
				"dsymonds@golang.org",
				"fw@deneb.enyo.de",
				"rsleevi@chromium.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6873056/diff/12001/src/pkg/exp/publicsuffix/gen.go\nFile src/pkg/exp/publicsuffix/gen.go (right):\n\nhttps://codereview.appspot.com/6873056/diff/12001/src/pkg/exp/publicsuffix/gen.go#newcode105\nsrc/pkg/exp/publicsuffix/gen.go:105: if s == \"\" || strings.HasPrefix(s, \"//\") || !isASCII(s) {\nWarning: This ignores the distinction between the effectively two lists that are reflected in effective_tld_names.dat - public suffixes and private domains. (denoted by \"// ===BEGIN \" and \"// ===END\" directives)\n\nThe distinction and implication of these can be seen in the table at https://wiki.mozilla.org/Public_Suffix_List/Use_Cases\n\nIf you're only intending to use this for a cookiejar implementation, then this logic is sufficient. However, if you feel the other uses cases should be met by this package, then you may wish to include the extra bit of information that comes from knowing whether it's an ICANN TLD or whether it's a \"private\" domain that should be treated as an effective TLD for purposes of cookies, but not for other purposes.",
			"disapproval": false,
			"date": "2012-12-07 03:48:14.629660",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dr.volker.dobler@gmail.com",
				"adg@golang.org",
				"bradfitz@golang.org",
				"r@golang.org",
				"dsymonds@golang.org",
				"fw@deneb.enyo.de",
				"rsleevi@chromium.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The plan is:\n\n* the cookiejar code stays in exp, and aims to be promoted to the standard library proper by Go 1.1. A \"log in to the nytimes.com site and fetch the crossword\" program can use a cookiejar with the 'dev null' public suffix list.\n\n* the publicsuffix package (based on publicsuffix.org's data) will live in go.net/publicsuffix, and will be compiled ahead of time. The generated source code can be updated more frequently than the Go release.\n\nThus, this codereview change is obsolete. Please review https://codereview.appspot.com/6912045 instead.\n\nI have added text packing to the new change (merging e.g. \"arpa\" and \"parliament\" into \"arparliament\"). This is the same packing code as exp/html/atom/gen.go. On the full public suffix list, the text constant shrinks from 27990 bytes to 18018 bytes (-36%). The computation took around 10 minutes.\n\nhttps://codereview.appspot.com/6873056/diff/12001/src/pkg/exp/publicsuffix/gen.go\nFile src/pkg/exp/publicsuffix/gen.go (right):\n\nhttps://codereview.appspot.com/6873056/diff/12001/src/pkg/exp/publicsuffix/gen.go#newcode83\nsrc/pkg/exp/publicsuffix/gen.go:83: res, err := http.Get(*url)\nOn 2012/12/05 13:41:55, volker.dobler wrote:\n> It would be nice to be able to use a local file on disc too.\n\nIf the url flag is empty, it reads from stdin.\n\nhttps://codereview.appspot.com/6873056/diff/12001/src/pkg/exp/publicsuffix/gen.go#newcode105\nsrc/pkg/exp/publicsuffix/gen.go:105: if s == \"\" || strings.HasPrefix(s, \"//\") || !isASCII(s) {\nOn 2012/12/07 03:48:14, Ryan Sleevi wrote:\n> Warning: This ignores the distinction between the effectively two lists that are\n> reflected in effective_tld_names.dat - public suffixes and private domains.\n> (denoted by \"// ===BEGIN \" and \"// ===END\" directives)\n\nAck. I've added a TODO to think about this. The API is not frozen yet.\n\nhttps://codereview.appspot.com/6873056/diff/12001/src/pkg/exp/publicsuffix/gen.go#newcode236\nsrc/pkg/exp/publicsuffix/gen.go:236: //\t[2] nodeType [1] wildcard [13] number of children [16] first child.\nOn 2012/12/05 13:41:55, volker.dobler wrote:\n> A reversed layout of \n>   numChildren firstChild nodeType wildcard\n> would result in an encoding with the two most significant\n> bytes set to zero for all nodes without children.\n> If output as %x instead of %08x, this would save some more\n> bytes of checked in table data. \n\nI'm not so concerned about the size of table.go.\n\nhttps://codereview.appspot.com/6873056/diff/12001/src/pkg/exp/publicsuffix/gen.go#newcode277\nsrc/pkg/exp/publicsuffix/gen.go:277: children   map[string]*node\nOn 2012/12/05 13:41:55, volker.dobler wrote:\n> If you use a slice instead of a map for the children,\n> you can sort it once and do not need to \"collect keys,\n> sort keys, iterate map in sorted keys order\" as you do\n> twice below in assignNodeIndex and printTable.\n\nDone.\n\nhttps://codereview.appspot.com/6873056/diff/12001/src/pkg/exp/publicsuffix/list.go\nFile src/pkg/exp/publicsuffix/list.go (right):\n\nhttps://codereview.appspot.com/6873056/diff/12001/src/pkg/exp/publicsuffix/list.go#newcode47\nsrc/pkg/exp/publicsuffix/list.go:47: switch u {\nOn 2012/12/05 13:41:55, volker.dobler wrote:\n> Empty nodes do match wildcard nodes. Adding\n>     case nodeTypeEmpty:\n>         if wildcard { suffix = 1 + dot }\n> fixes all the testcases, including the kobe.jp\n> ones.\n\nThat's not quite the right fix: given these rules:\n\njp\n*.kobe.jp\n!city.kobe.jp\n\nYou wouldn't see it in real life, but the public suffix of \"kobe.jp\" is \"jp\", not \"kobe.jp\". The slowPublicSuffix implementation correctly returns \"jp\". I've fixed this algorithm to do that:\n\ncase nodeTypeException:\n  suffix = prevSuffix\n\nbecomes\n\ncase nodeTypeException:\n  suffix = 1 + len(s)\n\nhttps://codereview.appspot.com/6873056/diff/12001/src/pkg/exp/publicsuffix/list_test.go\nFile src/pkg/exp/publicsuffix/list_test.go (right):\n\nhttps://codereview.appspot.com/6873056/diff/12001/src/pkg/exp/publicsuffix/list_test.go#newcode242\nsrc/pkg/exp/publicsuffix/list_test.go:242: // TODO(nigeltao): add the \"Effective Top Level Domain Plus 1\" tests from\nOn 2012/12/05 13:41:55, volker.dobler wrote:\n> These are the ones which discovered the kobe.jp bug.\n> Feel free to just copy my testcases.\n\nYeah, I'll add these testcases when I generate the full table, not just a subset.",
			"disapproval": false,
			"date": "2012-12-07 07:17:49.723310",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"nigeltao@golang.org",
				"rsc@golang.org",
				"dr.volker.dobler@gmail.com",
				"adg@golang.org",
				"bradfitz@golang.org",
				"r@golang.org",
				"dsymonds@golang.org",
				"fw@deneb.enyo.de",
				"rsleevi@chromium.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2013-01-03 03:28:00.825860",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Dec 7, 2012 at 2:48 PM,  <rsleevi@chromium.org> wrote:\r\n> Warning: This ignores the distinction between the effectively two lists\r\n> that are reflected in effective_tld_names.dat - public suffixes and\r\n> private domains. (denoted by \"// ===BEGIN \" and \"// ===END\" directives)\r\n\r\nICANN domains vs private domains is addressed in\r\nhttps://codereview.appspot.com/7060046\r\n",
			"disapproval": false,
			"date": "2013-01-06 07:24:32.371020",
			"approval": false
		}
	],
	"owner_email": "nigeltao@golang.org",
	"private": false,
	"base_url": "",
	"owner": "nigeltao",
	"subject": "code review 6873056: exp/publicsuffix: new package.",
	"created": "2012-12-05 00:30:45.106710",
	"patchsets": [
		1,
		2001,
		5001,
		8001,
		11001,
		12001
	],
	"modified": "2013-01-03 03:28:04.794000",
	"closed": true,
	"issue": 6873056
}