{
	"description": "exp/norm: changed API of Iter.\nMotivations:\n - Simpler UI. Previous API proved a bit awkward for practical purposes.\n - Iter is often used in cases where one want to be able to bail out early.\n   The old implementaton had too much look-ahead to be efficient.\nDisadvantages:\n - ASCII performance is bad. This is unavoidable for tiny iterations.\n   Example is included to show how to work around this.\n\nDescription:\nIter now iterates per boundary/segment. It returns a slice of bytes that\neither points to the input bytes, the internal decomposition strings,\nor the small internal buffer that each iterator has. In many cases, copying\nbytes is avoided.\nThe method Seek was added to support jumping around the input without\nhaving to reinitialize.\n\nDetails:\n - Table adjustments: some decompositions exist of multiple segments.\n   Decompositions that are of this type are now marked so that Iter can\n   handle them separately.\n - The old iterator had a different next function for different normal forms\n   that was assigned to a function pointer called by Next.\n   The new iterator uses this mechanism to switch between different modes\n   for handling different type of input as well.  This greatly improves\n   performance for Hangul and ASCII. It is also used for multi-segment\n   decompositions.\n - input is now a struct of sting and []byte, instead of an interface.\n   This simplifies optimizing the ASCII case.",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc@golang.org (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg",
			"disapproval": false,
			"date": "2012-12-19 10:05:34.226910",
			"approval": false
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "",
			"disapproval": false,
			"date": "2012-12-24 15:54:27.998140",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nLet's freeze the implementation details for now and try to work toward a public API for collation and locales.\n\nhttps://codereview.appspot.com/6873072/diff/2001/src/pkg/exp/norm/example_iter_test.go\nFile src/pkg/exp/norm/example_iter_test.go (right):\n\nhttps://codereview.appspot.com/6873072/diff/2001/src/pkg/exp/norm/example_iter_test.go#newcode68\nsrc/pkg/exp/norm/example_iter_test.go:68: func ExampleIter() {\nI think if you make this func Example_Iter() then it will appear as a package-level example, meaning that the whole file will be shown in godoc. That would be good, since the function body here depends on the rest of the file to make sense.\n\nhttps://codereview.appspot.com/6873072/diff/2001/src/pkg/exp/norm/input.go\nFile src/pkg/exp/norm/input.go (right):\n\nhttps://codereview.appspot.com/6873072/diff/2001/src/pkg/exp/norm/input.go#newcode32\nsrc/pkg/exp/norm/input.go:32: func (in input) _byte(p int) byte {\nI suspect you'll see speedups if you make these pointer receivers. There's no need to keep them values.",
			"disapproval": false,
			"date": "2012-12-21 20:43:19.210620",
			"approval": true
		},
		{
			"sender": "mpvl@golang.org",
			"recipients": [
				"mpvl@golang.org",
				"rsc@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=46418dc3d59d ***\n\nexp/norm: changed API of Iter.\nMotivations:\n - Simpler UI. Previous API proved a bit awkward for practical purposes.\n - Iter is often used in cases where one want to be able to bail out early.\n   The old implementaton had too much look-ahead to be efficient.\nDisadvantages:\n - ASCII performance is bad. This is unavoidable for tiny iterations.\n   Example is included to show how to work around this.\n\nDescription:\nIter now iterates per boundary/segment. It returns a slice of bytes that\neither points to the input bytes, the internal decomposition strings,\nor the small internal buffer that each iterator has. In many cases, copying\nbytes is avoided.\nThe method Seek was added to support jumping around the input without\nhaving to reinitialize.\n\nDetails:\n - Table adjustments: some decompositions exist of multiple segments.\n   Decompositions that are of this type are now marked so that Iter can\n   handle them separately.\n - The old iterator had a different next function for different normal forms\n   that was assigned to a function pointer called by Next.\n   The new iterator uses this mechanism to switch between different modes\n   for handling different type of input as well.  This greatly improves\n   performance for Hangul and ASCII. It is also used for multi-segment\n   decompositions.\n - input is now a struct of sting and []byte, instead of an interface.\n   This simplifies optimizing the ASCII case.\n\nR=rsc\nCC=golang-dev\nhttps://codereview.appspot.com/6873072\n\nhttps://codereview.appspot.com/6873072/diff/2001/src/pkg/exp/norm/example_iter_test.go\nFile src/pkg/exp/norm/example_iter_test.go (right):\n\nhttps://codereview.appspot.com/6873072/diff/2001/src/pkg/exp/norm/example_iter_test.go#newcode68\nsrc/pkg/exp/norm/example_iter_test.go:68: func ExampleIter() {\nActually, it appears to be the other way around: it uses the full file as is, but not when I add the _.\n\nOn 2012/12/21 20:43:19, rsc wrote:\n> I think if you make this func Example_Iter() then it will appear as a\n> package-level example, meaning that the whole file will be shown in godoc. That\n> would be good, since the function body here depends on the rest of the file to\n> make sense.\n\nhttps://codereview.appspot.com/6873072/diff/2001/src/pkg/exp/norm/input.go\nFile src/pkg/exp/norm/input.go (right):\n\nhttps://codereview.appspot.com/6873072/diff/2001/src/pkg/exp/norm/input.go#newcode32\nsrc/pkg/exp/norm/input.go:32: func (in input) _byte(p int) byte {\nOn 2012/12/21 20:43:19, rsc wrote:\n> I suspect you'll see speedups if you make these pointer receivers. There's no\n> need to keep them values.\n\nDone.\n\nhttps://codereview.appspot.com/6873072/diff/2001/src/pkg/exp/norm/input.go#newcode32\nsrc/pkg/exp/norm/input.go:32: func (in input) _byte(p int) byte {\nDone.  Does indeed result in a noticeable speedup.\nOn 2012/12/21 20:43:19, rsc wrote:\n> I suspect you'll see speedups if you make these pointer receivers. There's no\n> need to keep them values.",
			"disapproval": false,
			"date": "2012-12-24 15:53:26.307670",
			"approval": false
		}
	],
	"owner_email": "mpvl@golang.org",
	"private": false,
	"base_url": "",
	"owner": "mpvl",
	"subject": "code review 6873072: exp/norm: changed API of Iter.",
	"created": "2012-12-12 19:22:54.244800",
	"patchsets": [
		1,
		2001,
		9001
	],
	"modified": "2012-12-24 15:54:28.099860",
	"closed": true,
	"issue": 6873072
}