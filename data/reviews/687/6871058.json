{
	"description": "gc: avoid meaningless constant overflow error for inverted slice range\n\nUsed to say:\n\nissue4251.go:12: inverted slice range\nissue4251.go:12: constant -1 overflows uint64\nissue4251.go:16: inverted slice range\nissue4251.go:16: constant -1 overflows uint64\nissue4251.go:20: inverted slice range\nissue4251.go:20: constant -1 overflows uint64\n\nWith this patch, only gives the \"inverted slice range\" errors.",
	"cc": [
		"golang-dev@googlegroups.com",
		"daniel.morsing@gmail.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-12-04 09:03:17.677950",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6871058/diff/1/src/cmd/gc/walk.c\nFile src/cmd/gc/walk.c (right):\n\nhttps://codereview.appspot.com/6871058/diff/1/src/cmd/gc/walk.c#newcode2539\nsrc/cmd/gc/walk.c:2539: if(lbv >= 0 && hbv >= 0 && lbv > hbv) {\nI'm thinking that this check should be moved into typecheck. We already have some simple bounds checking in typecheck and erroring out there has more predictable effects than in walk.",
			"disapproval": false,
			"date": "2012-12-04 09:56:18.403160",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\n\nhttps://codereview.appspot.com/6871058/diff/1/src/cmd/gc/walk.c\nFile src/cmd/gc/walk.c (right):\n\nhttps://codereview.appspot.com/6871058/diff/1/src/cmd/gc/walk.c#newcode2539\nsrc/cmd/gc/walk.c:2539: if(lbv >= 0 && hbv >= 0 && lbv > hbv) {\nOn 2012/12/04 09:56:18, DMorsing wrote:\n> I'm thinking that this check should be moved into typecheck. We already have\n> some simple bounds checking in typecheck and erroring out there has more\n> predictable effects than in walk.\n\nDone.",
			"disapproval": false,
			"date": "2012-12-04 11:41:03.926260",
			"approval": false
		},
		{
			"sender": "daniel.morsing@gmail.com",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM.\n\nThe typechecking of slice operations is getting a bit complex. I'll look into simplifying it.",
			"disapproval": false,
			"date": "2012-12-04 12:02:50.391350",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"daniel.morsing@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=f7c125983d99 ***\n\ngc: avoid meaningless constant overflow error for inverted slice range\n\nUsed to say:\n\nissue4251.go:12: inverted slice range\nissue4251.go:12: constant -1 overflows uint64\nissue4251.go:16: inverted slice range\nissue4251.go:16: constant -1 overflows uint64\nissue4251.go:20: inverted slice range\nissue4251.go:20: constant -1 overflows uint64\n\nWith this patch, only gives the \"inverted slice range\" errors.\n\nR=golang-dev, daniel.morsing\nCC=golang-dev\nhttps://codereview.appspot.com/6871058",
			"disapproval": false,
			"date": "2012-12-05 23:46:56.721440",
			"approval": false
		}
	],
	"owner_email": "iant@golang.org",
	"private": false,
	"base_url": "",
	"owner": "iant",
	"subject": "code review 6871058: gc: avoid meaningless constant overflow error for inver...",
	"created": "2012-12-04 09:03:06.550530",
	"patchsets": [
		1,
		2002,
		7001
	],
	"modified": "2012-12-05 23:46:59.483370",
	"closed": true,
	"issue": 6871058
}