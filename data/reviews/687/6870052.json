{
	"description": "bufio: add ReadLines function\r\n\r\nAPI addition proposal, similar to filepath.Walk.\r\n\r\nCommon enough pattern that I get bored of writing all the\r\ntime, reading lines from a file or other input.",
	"cc": [],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"dave@cheney.net",
		"nigeltao@golang.org",
		"adg@golang.org",
		"rogpeppe@gmail.com"
	],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"nigeltao@golang.org",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6870052/diff/2001/src/pkg/bufio/bufio.go\nFile src/pkg/bufio/bufio.go (right):\n\nhttps://codereview.appspot.com/6870052/diff/2001/src/pkg/bufio/bufio.go#newcode628\nsrc/pkg/bufio/bufio.go:628: if len(line) > 0 {\nOn 2012/12/03 23:22:27, adg wrote:\n> Why not report blank lines? some users might care.\n\nThat's not what this is about. \"\\n\" is returned, but not a \"\" in (\"\", io.EOF).",
			"disapproval": false,
			"date": "2012-12-03 23:25:31.169620",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6870052/diff/2001/src/pkg/bufio/bufio.go\nFile src/pkg/bufio/bufio.go (right):\n\nhttps://codereview.appspot.com/6870052/diff/2001/src/pkg/bufio/bufio.go#newcode621\nsrc/pkg/bufio/bufio.go:621: func ReadLines(r io.Reader, fn func(line string) error) error {\nOn 2012/12/03 22:38:00, nigeltao wrote:\n> s/string/[]byte/ ??\n\nI started with []byte but then once I saw that ReadBytes() was already doing copies, I stopped caring.\n\nI thought ReadBytes' common case was to return internal memory like ReadSlice and ReadLine, and only allocate when a line was too long.  Once I saw that it was always allocating, I figured returning a string was fine, and required less docs.\n\nI'd be fine making it []byte, but I'd want to document it to be more like ReadSlice: just a view of internal data.  And then make that be the common case, but only allocate when lines are too long.\n\nThoughts?\n\nhttps://codereview.appspot.com/6870052/diff/2001/src/pkg/bufio/bufio.go#newcode629\nsrc/pkg/bufio/bufio.go:629: if err := fn(line); err != nil {\nOn 2012/12/03 22:38:00, nigeltao wrote:\n> Maybe s/err/err1/ to be clear that it's a different variable.\n\nSure, will do if others like this proposal.",
			"disapproval": false,
			"date": "2012-12-03 22:49:32.621290",
			"approval": false
		},
		{
			"sender": "adg@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"nigeltao@golang.org",
				"adg@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I don't personally care about this API. No objections, though.\n\nhttps://codereview.appspot.com/6870052/diff/2001/src/pkg/bufio/bufio.go\nFile src/pkg/bufio/bufio.go (right):\n\nhttps://codereview.appspot.com/6870052/diff/2001/src/pkg/bufio/bufio.go#newcode628\nsrc/pkg/bufio/bufio.go:628: if len(line) > 0 {\nWhy not report blank lines? some users might care.",
			"disapproval": false,
			"date": "2012-12-03 23:22:26.621730",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/12/03 20:08:42, bradfitz wrote:\n> Hello mailto:golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go\n\nThis looks reasonable to me. Are you stuck on the name ? Maybe EachLine or WithLines might be a better name as this isn't reading anything, in the way an io.Reader reads things.",
			"disapproval": false,
			"date": "2012-12-03 21:43:34.539820",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-12-03 20:08:42.379550",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "FWIW, I like the general idea.\n\nhttps://codereview.appspot.com/6870052/diff/2001/src/pkg/bufio/bufio.go\nFile src/pkg/bufio/bufio.go (right):\n\nhttps://codereview.appspot.com/6870052/diff/2001/src/pkg/bufio/bufio.go#newcode621\nsrc/pkg/bufio/bufio.go:621: func ReadLines(r io.Reader, fn func(line string) error) error {\ns/string/[]byte/ ??\n\nhttps://codereview.appspot.com/6870052/diff/2001/src/pkg/bufio/bufio.go#newcode629\nsrc/pkg/bufio/bufio.go:629: if err := fn(line); err != nil {\nMaybe s/err/err1/ to be clear that it's a different variable.",
			"disapproval": false,
			"date": "2012-12-03 22:38:00.676040",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"nigeltao@golang.org",
				"adg@golang.org",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/12/03 20:08:42, bradfitz wrote:\n> Hello mailto:golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go\n\nI am not keen on this.\n\n- ReadLines sounds like it might use ReadLine to get its lines (and hence understand about \\r too) but it doesn't.\n\n- You almost always want to strip off the final newline, and this doesn't do that for you.\n\n- As with any iterator function, breaking out of the loop early is awkward - you can't just call \"break\" or \"return\".\n\n\nThe main reason for this to exist is, as far as I can tell, the fact that ReadLine is so awkward to use.\n\nIf reading lines was as simple as:\n\n   for {\n      line, err := b.ReadLine()\n      if err != nil {\n          break\n      }\n      doSomething(line)\n   }\n\nthen would we consider ReadLines worth it?\n\nHere are some aspects of the problem that the various methods in bufio.Reader try to address:\n\n1) Efficiency: can we read lines without incurring an allocation and copy for each line?\n2) Correctness: do we know if the final line is correctly terminated? Can we deal with very long lines? Do we interpret \\r\\n terminators correctly?\n3) Ease of use: how hard do we have to think when writing a loop that reads lines?\n4) Robustness: can a file with a very long line exhaust our memory?\n\nFor instance, ReadSlice does well on 1) and 4), but fails on 2) (it can't deal with \\r\\n terminated lines) and 3) (it's awkward to use correctly).\n\nI suggest that we can't have all these things together. I believe one particular awkwardness comes from trying to deal with an unterminated final newline correctly. ReadLine doesn't do so (there's no way of telling that the final newline is unterminated) and I think that's a reasonable approach.\n\nThe other awkwardness comes from desiring efficiency in the usual case, but not falling over on very long lines. We've got ReadSlice (and ReadLine) but if we want to deal with long lines, we need to make the buffer at least as big as the longest line we want to be able to read, and that's unnecessary overhead in the common case. But if we use ReadString or ReadBytes, we're vulnerable to maliciousness via large files with no line terminators.\n\nThinking about it a bit more, perhaps ReadLines *is* the way forward. Because the line is an argument to the function, there is no expectation that it should be ok to use after the function returns, so passing it a []byte returned from ReadSlice or ReadLine seems just fine.\n\nHow about something like this?\n\n// ReadLines reads lines from r and calls fn with each read line, not\n// including the line terminator.  If a line exceeds the given maximum\n// size, it will be truncated and the rest of the line discarded.  If fn\n// returns a non-nil error, reading ends and the error is returned from\n// ReadLines.  When EOF is encountered, ReadLines returns nil.\nfunc ReadLines(r io.Reader, maxSize int, fn func(line []byte) error) error\n\nhttp://play.golang.org/p/Y65r-cKEDX\n\nIt seems to tick most of the above boxes (you can't tell if you've got an unterminated newline, but that fits with ReadLine's behaviour).\n\nOpen question: should a too-long line be discarded, or trigger an error?",
			"disapproval": false,
			"date": "2012-12-04 11:43:22.310660",
			"approval": false
		},
		{
			"sender": "nigeltao@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"nigeltao@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6870052/diff/2001/src/pkg/bufio/bufio.go\nFile src/pkg/bufio/bufio.go (right):\n\nhttps://codereview.appspot.com/6870052/diff/2001/src/pkg/bufio/bufio.go#newcode621\nsrc/pkg/bufio/bufio.go:621: func ReadLines(r io.Reader, fn func(line string) error) error {\nOn 2012/12/03 22:49:32, bradfitz wrote:\n> I'd be fine making it []byte, but I'd want to document it to be more like\n> ReadSlice: just a view of internal data.  And then make that be the common case,\n> but only allocate when lines are too long.\n> \n> Thoughts?\n\nSGTM.",
			"disapproval": false,
			"date": "2012-12-03 22:52:20.338060",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"dave@cheney.net",
				"nigeltao@golang.org",
				"adg@golang.org",
				"rogpeppe@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Closed; moved to https://code.google.com/p/go/issues/detail?id=4802",
			"disapproval": false,
			"date": "2013-02-14 03:34:02.134280",
			"approval": false
		}
	],
	"owner_email": "bradfitz@golang.org",
	"private": false,
	"base_url": "",
	"owner": "bradfitz",
	"subject": "code review 6870052: bufio: add ReadLines function",
	"created": "2012-12-03 20:08:02.087110",
	"patchsets": [
		1,
		2001
	],
	"modified": "2013-02-14 03:34:02.333620",
	"closed": true,
	"issue": 6870052
}