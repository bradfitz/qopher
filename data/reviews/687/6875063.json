{
	"description": "runtime: display go version and operating system information in panic message\n\nFixes issue 4492.\n\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal 0xb code=0x1 addr=0x0 pc=0x400c03]\nruntime version: devel +a32219a715c5 Wed Dec 05 15:26:18 2012 +1100\nruntime host: linux/amd64\n\ngoroutine 1 [running]:\nmain.main()\n\t/home/dfc/src/panic.go:3 +0x3\n\ngoroutine 2 [syscall]:\ncreated by runtime.main\n\t/home/dfc/go/src/pkg/runtime/proc.c:225\nexit status 2",
	"cc": [
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"remyoudompheng@gmail.com",
		"bradfitz@golang.org",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Abandoned ***",
			"disapproval": false,
			"date": "2012-12-06 04:12:36.647620",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "> theVersion + \" \" + GOOS + \"/\" + GOARCH + \"\\n\"\r\n> I wonder if panicvers should be a constant. Anyway, both const and var\r\n> allow to override the string contents using the -X flag.\r\n\r\nThe trouble is, if panicvers is a const, then it is a go constant, not\r\na c constant, and is not visible to the linker. ie, i couldn't find a\r\nway to access runtime.theVersion from runtime.printstring, so this is\r\nwhy panicvers is a var. Can you show me how to do this ?\r\n\r\n> I am particularly interested in embedding my own libraries version into\r\n> the message if this is going to happen. I already do that in other\r\n> places where I display debugging information.\r\n\r\nI like it, but I don't want to paint all the sides of the bike shed in one go.\r\n",
			"disapproval": false,
			"date": "2012-12-06 06:45:01.090900",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-12-05 21:02:29.949080",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/12/05 21:02:29, dfc wrote:\n> Hello mailto:golang-dev@googlegroups.com,\n> \n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n\nCounter proposal for the wording of the panic\n\nthrow: all goroutines are asleep - deadlock!\n\nversion: devel +a32219a715c5 Wed Dec 05 15:26:18 2012 +1100\nhost: linux/amd64\n\n...",
			"disapproval": false,
			"date": "2012-12-05 22:19:16.010020",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ON 2012/12/5 Dave Cheney <dave@cheney.net> wrote:\r\n>> theVersion + \" \" + GOOS + \"/\" + GOARCH + \"\\n\"\r\n>> I wonder if panicvers should be a constant. Anyway, both const and var\r\n>> allow to override the string contents using the -X flag.\r\n>\r\n> The trouble is, if panicvers is a const, then it is a go constant, not\r\n> a c constant, and is not visible to the linker. ie, i couldn't find a\r\n> way to access runtime.theVersion from runtime.printstring, so this is\r\n> why panicvers is a var. Can you show me how to do this ?\r\n\r\nNo you're right I was confused.\r\n\r\n>> I am particularly interested in embedding my own libraries version into\r\n>> the message if this is going to happen. I already do that in other\r\n>> places where I display debugging information.\r\n>\r\n> I like it, but I don't want to paint all the sides of the bike shed in one go.\r\n\r\nI didn't mean it to be part of any patch. It's not necessary since the\r\nuser can override it itself with linker flags.\r\n",
			"disapproval": false,
			"date": "2012-12-06 06:43:45.421770",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "https://codereview.appspot.com/6875063/diff/9001/src/pkg/runtime/extern.go\nFile src/pkg/runtime/extern.go (right):\n\nhttps://codereview.appspot.com/6875063/diff/9001/src/pkg/runtime/extern.go#newcode144\nsrc/pkg/runtime/extern.go:144: var panicvers = \"Go runtime version: \" + theVersion + \" \" + GOOS + \"/\" + GOARCH + \"\\n\"\nI wonder if panicvers should be a constant. Anyway, both const and var allow to override the string contents using the -X flag.\n\nI am particularly interested in embedding my own libraries version into the message if this is going to happen. I already do that in other places where I display debugging information.",
			"disapproval": false,
			"date": "2012-12-05 22:32:20.038920",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, remyoudompheng@gmail.com (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-12-05 22:53:33.268940",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Love the idea.\r\n On Dec 5, 2012 1:02 PM, <dave@cheney.net> wrote:\r\n\r\n> Reviewers: golang-dev_googlegroups.com,\r\n>\r\n> Message:\r\n> Hello golang-dev@googlegroups.com,\r\n>\r\n> I'd like you to review this change to\r\n> https://go.googlecode.com/hg/\r\n>\r\n>\r\n> Description:\r\n> runtime: display go version and operating system information in panic\r\n> message\r\n>\r\n> Fixes issue 4492.\r\n>\r\n> throw: all goroutines are asleep - deadlock!\r\n> Go runtime version: devel +a32219a715c5 Wed Dec 05 15:26:18 2012 +1100\r\n> linux/amd64\r\n>\r\n> goroutine 1 [select (no cases)]:\r\n> main.main()\r\n>         /home/dfc/src/panic.go:3 +0x18\r\n>\r\n> goroutine 2 [syscall]:\r\n> created by runtime.main\r\n>         /home/dfc/go/src/pkg/runtime/**proc.c:225\r\n> exit status 2\r\n>\r\n> Please review this at https://codereview.appspot.**com/6875063/<https://codereview.appspot.com/6875063/>\r\n>\r\n> Affected files:\r\n>   M src/pkg/runtime/extern.go\r\n>   M src/pkg/runtime/panic.c\r\n>\r\n>\r\n> Index: src/pkg/runtime/extern.go\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/runtime/extern.go\r\n> +++ b/src/pkg/runtime/extern.go\r\n> @@ -139,3 +139,6 @@\r\n>  // GOARCH is the running program's architecture target:\r\n>  // 386, amd64, or arm.\r\n>  const GOARCH string = theGoarch\r\n> +\r\n> +// panicvers is printed by panic\r\n> +var panicvers = \"Go runtime version: \" + theVersion + \" \" + GOOS + \"/\" +\r\n> GOARCH + \"\\n\"\r\n> Index: src/pkg/runtime/panic.c\r\n> ==============================**==============================**=======\r\n> --- a/src/pkg/runtime/panic.c\r\n> +++ b/src/pkg/runtime/panic.c\r\n> @@ -301,6 +301,8 @@\r\n>         runtime\u00b7lock(&paniclk);\r\n>  }\r\n>\r\n> +extern String runtime\u00b7panicvers; // defined in extern.go\r\n> +\r\n>  void\r\n>  runtime\u00b7dopanic(int32 unused)\r\n>  {\r\n> @@ -310,6 +312,7 @@\r\n>                 runtime\u00b7printf(\"[signal %x code=%p addr=%p pc=%p]\\n\",\r\n>                         g->sig, g->sigcode0, g->sigcode1, g->sigpc);\r\n>\r\n> +       runtime\u00b7printstring(runtime\u00b7**panicvers);\r\n>         if(runtime\u00b7gotraceback()){\r\n>                 if(g != m->g0) {\r\n>                         runtime\u00b7printf(\"\\n\");\r\n>\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-12-06 06:34:58.518060",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"dave@cheney.net",
				"golang-dev@googlegroups.com",
				"remyoudompheng@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/12/05 22:53:33, dfc wrote:\n> Hello mailto:golang-dev@googlegroups.com, mailto:remyoudompheng@gmail.com (cc:\n> mailto:golang-dev@googlegroups.com),\n> \n> I'd like you to review this change to\n> https://code.google.com/p/go\n\nHere is another suggestion for the panic message. I am not wedded to it, but I would like to see the runtime details as close to the top of the panic as possible to reduce the possibility of them being truncated. In other words, I don't want to see the runtime details moved below the goroutine dump.",
			"disapproval": false,
			"date": "2012-12-05 22:55:20.712570",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Good point, it is easy to see the path from the current panic message\r\nto the kitchen sink you get from the JDK.\r\n\r\nOn Thu, Dec 6, 2012 at 2:57 PM, Russ Cox <rsc@golang.org> wrote:\r\n> This is a very slippery slope. Once you start printing a little bit\r\n> about the binary you inevitably want to print more and more in these\r\n> messages. Right now they only contain details about the *failure*, not\r\n> details about the compilation, and I think that's probably a good\r\n> thing. I understand wanting to remove the 'please run go version and\r\n> go tool dist env' round trip on IRC, but I don't think it justifies\r\n> editing the panic message.\r\n>\r\n> I suggest a compromise though: make 'go version' add goos/goarch at\r\n> the end of the output, so that you'd have:\r\n>\r\n> go version devel +106824fa4abe Tue Nov 13 13:12:11 2012 -0500 darwin/amd64\r\n>\r\n> Then at least you only have to ask for one command's output.\r\n>\r\n> Russ\r\n",
			"disapproval": false,
			"date": "2012-12-06 06:21:39.344320",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Please consider the output format to be a suggestion only. For me the idea of reporting the runtime version in the panic is the important part, the actual format is less important. \r\n\r\nAlso remember that most folks will have a much shorter version. \r\n\r\nOn 06/12/2012, at 8:07, R\u00e9my Oudompheng <remyoudompheng@gmail.com> wrote:\r\n\r\n> It's interesting but it looks really weird to me.\r\n> \r\n> R\u00e9my.\r\n",
			"disapproval": false,
			"date": "2012-12-06 06:34:18.902080",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "This is a very slippery slope. Once you start printing a little bit\r\nabout the binary you inevitably want to print more and more in these\r\nmessages. Right now they only contain details about the *failure*, not\r\ndetails about the compilation, and I think that's probably a good\r\nthing. I understand wanting to remove the 'please run go version and\r\ngo tool dist env' round trip on IRC, but I don't think it justifies\r\nediting the panic message.\r\n\r\nI suggest a compromise though: make 'go version' add goos/goarch at\r\nthe end of the output, so that you'd have:\r\n\r\ngo version devel +106824fa4abe Tue Nov 13 13:12:11 2012 -0500 darwin/amd64\r\n\r\nThen at least you only have to ask for one command's output.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-12-06 06:43:24.847970",
			"approval": false
		},
		{
			"sender": "remyoudompheng@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It's interesting but it looks really weird to me.\r\n\r\nR\u00e9my.\r\n",
			"disapproval": false,
			"date": "2012-12-06 07:06:13.164090",
			"approval": false
		}
	],
	"owner_email": "dave@cheney.net",
	"private": false,
	"base_url": "",
	"owner": "dfc",
	"subject": "code review 6875063: runtime: display go version and operating system inform...",
	"created": "2012-12-05 08:12:42.152610",
	"patchsets": [
		1,
		1002,
		9001,
		12002
	],
	"modified": "2012-12-06 06:43:24.923310",
	"closed": true,
	"issue": 6875063
}