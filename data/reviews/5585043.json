{
	"description": "exp/fsnotify: Cross-platform filesystem notifications\n\nThis package mimics the current exp/inotify for the linux platform\nas much as possible. Anyone using exp/inotify should be able to\nswitch. This simply adds a similar interface for BSD systems.\n\nThe same test is used regardless of OS.",
	"cc": [
		"bradfitz@golang.org",
		"golang-dev@googlegroups.com",
		"rsc@golang.org"
	],
	"reviewers": [
		"golang-dev@googlegroups.com",
		"robfig@gmail.com",
		"dave@cheney.net",
		"mattn.jp@gmail.com",
		"alex.brainman@gmail.com",
		"taralx@gmail.com",
		"tylor@torbit.com",
		"minux.ma@gmail.com",
		"khr@golang.org"
	],
	"messages": [
		{
			"sender": "howeyc@gmail.com",
			"recipients": [
				"howeyc@gmail.com",
				"golang-dev@googlegroups.com",
				"robfig@gmail.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com, robfig@gmail.com, dave@cheney.net (cc: bradfitz@golang.org, golang-dev@googlegroups.com, rsc@golang.org),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-01-27 15:02:01.552293",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi,\n\nThanks very much for sending this in.  We're working on\nmaking the code base as solid as possible for Go 1, meaning\nfixing bugs and letting things settle.  Even though this code\nis in exp/ and wouldn't affect Go 1 directly, we need to focus\nour available time on getting Go 1 out the door.  Please remind\nus about this CL once Go 1 is done, and we will review it then.\nI definitely want to see a portable package for this kind of thing,\nso I'm interested to see this get in, just after Go 1.\n\nThanks.\nRuss\n",
			"disapproval": false,
			"date": "2012-01-27 16:41:49.608412",
			"approval": false
		},
		{
			"sender": "robfig@gmail.com",
			"recipients": [
				"howeyc@gmail.com",
				"golang-dev@googlegroups.com",
				"robfig@gmail.com",
				"dave@cheney.net",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/01/27 15:02:01, howeyc wrote:\n> Hello mailto:golang-dev@googlegroups.com, mailto:robfig@gmail.com, mailto:dave@cheney.net (cc:\n> mailto:bradfitz@golang.org, mailto:golang-dev@googlegroups.com, mailto:rsc@golang.org),\n> \n> I'd like you to review this change to\n> https://go.googlecode.com/hg/\n\nHey Howey,\n\nI'm trying it out on OSX, and I have some questions about the behavior: \n\n1. The first time something changes in a watched directory, I get a \"CREATE\" event for every file in the watched directories.  It looks like this happens because calling Watch(path) watches the directory, but an event ends up calling sendDirectoryChangeEvents which checks for / adds watches on all of the files in the directories, sending CREATE events if the watches were not there.  I assume this is not expected behavior? \n\n2. I don't think it's necessary to watch the files themselves.  It looks like the events you are registering on the files (DELETE/RENAME/WRITE) would all be generated by watches on the directories, since they cause changes to the directory entry as well.  (In practice, watching only the directory has worked for me, although I did not exhaustively test it).  Did you find a use case that didn't work with only the directory watch?\n\nThanks,\nRob",
			"disapproval": false,
			"date": "2012-02-12 16:20:01.577183",
			"approval": false
		},
		{
			"sender": "howeyc@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Rob,\n\nThank you for trying this on OSX.\n\n\n> Hey Howey,\n>\n> I'm trying it out on OSX, and I have some questions about the behavior:\n>\n> 1. The first time something changes in a watched directory, I get a\n> \"CREATE\" event for every file in the watched directories.  It looks like\n> this happens because calling Watch(path) watches the directory, but an\n> event ends up calling sendDirectoryChangeEvents which checks for / adds\n> watches on all of the files in the directories, sending CREATE events if\n> the watches were not there.  I assume this is not expected behavior?\n>\n\nThe call of sendDirectoryChangeEvents is something I added to mimic the\nbehavior I found on the Linux inotify API. In Linux, simply watching a\ndirectory will also give you events for files in the directory as well. The\nkqueue interface on BSD only tells you the directory changed, it's up to\nthe user land application to figure out what new files are there (if any).\n\nYou may be correct about getting CREATE events for every existing file\nbeing unintended behavior. I will have to review what inotify does in the\ncase of files already existing when the watch is added.\n\n\n>\n> 2. I don't think it's necessary to watch the files themselves.  It looks\n> like the events you are registering on the files (DELETE/RENAME/WRITE)\n> would all be generated by watches on the directories, since they cause\n> changes to the directory entry as well.  (In practice, watching only the\n> directory has worked for me, although I did not exhaustively test it).\n> Did you find a use case that didn't work with only the directory watch?\n>\n\nIf you're talking about watching only directories using this exp/fsnotify\npatch, then yes, you should be okay only watching directories. However, in\norder for that to work, the go library must \"watch\" each file using\nkqueue/kevent BSD system calls.\n\nCheers,\nChris\n",
			"disapproval": false,
			"date": "2012-02-13 17:36:19.616841",
			"approval": false
		},
		{
			"sender": "howeyc@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 13 February 2012 11:36, Chris Howey <howeyc@gmail.com> wrote:\n\n> Rob,\n>\n> Thank you for trying this on OSX.\n>\n>\n>> Hey Howey,\n>>\n>> I'm trying it out on OSX, and I have some questions about the behavior:\n>>\n>> 1. The first time something changes in a watched directory, I get a\n>> \"CREATE\" event for every file in the watched directories.  It looks like\n>> this happens because calling Watch(path) watches the directory, but an\n>> event ends up calling sendDirectoryChangeEvents which checks for / adds\n>> watches on all of the files in the directories, sending CREATE events if\n>> the watches were not there.  I assume this is not expected behavior?\n>>\n>\n> The call of sendDirectoryChangeEvents is something I added to mimic the\n> behavior I found on the Linux inotify API. In Linux, simply watching a\n> directory will also give you events for files in the directory as well. The\n> kqueue interface on BSD only tells you the directory changed, it's up to\n> the user land application to figure out what new files are there (if any).\n>\n> You may be correct about getting CREATE events for every existing file\n> being unintended behavior. I will have to review what inotify does in the\n> case of files already existing when the watch is added.\n>\n>\n>>\n>> 2. I don't think it's necessary to watch the files themselves.  It looks\n>> like the events you are registering on the files (DELETE/RENAME/WRITE)\n>> would all be generated by watches on the directories, since they cause\n>> changes to the directory entry as well.  (In practice, watching only the\n>> directory has worked for me, although I did not exhaustively test it).\n>> Did you find a use case that didn't work with only the directory watch?\n>>\n>\n> If you're talking about watching only directories using this exp/fsnotify\n> patch, then yes, you should be okay only watching directories. However, in\n> order for that to work, the go library must \"watch\" each file using\n> kqueue/kevent BSD system calls.\n>\n> Cheers,\n> Chris\n>\n>\nTo all that are interested, I have \"merged\" the code from exp/winfsnotify\ninto the library. I'm a little fuzzy on how the windows file system\nnotification API works, such as no attribute notification (test fails), so\nif anyone has any insight (I've included hector as he was the original\nauthor I believe) I'd like to hear your thoughts.\n\nI've placed the code up on github so we can review and make changes before\nputting it through the formal review process. If you'd rather we keep\nmodifying this changeset (or create another) I am more than happy to do\nthat, for now It's up on github if anyone would like to assist.\n\nhttps://github.com/howeyc/fsnotify.go\n\nThanks!\nChris\n",
			"disapproval": false,
			"date": "2012-03-29 01:40:52.152022",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Fantastic. I look forward to playing with it this evening. \n\nOn 29/03/2012, at 12:40, Chris Howey <howeyc@gmail.com> wrote:\n\n> On 13 February 2012 11:36, Chris Howey <howeyc@gmail.com> wrote:\n> Rob,\n> \n> Thank you for trying this on OSX.\n> \n> \n> Hey Howey,\n> \n> I'm trying it out on OSX, and I have some questions about the behavior:\n> \n> 1. The first time something changes in a watched directory, I get a\n> \"CREATE\" event for every file in the watched directories.  It looks like\n> this happens because calling Watch(path) watches the directory, but an\n> event ends up calling sendDirectoryChangeEvents which checks for / adds\n> watches on all of the files in the directories, sending CREATE events if\n> the watches were not there.  I assume this is not expected behavior?\n> \n> The call of sendDirectoryChangeEvents is something I added to mimic the behavior I found on the Linux inotify API. In Linux, simply watching a directory will also give you events for files in the directory as well. The kqueue interface on BSD only tells you the directory changed, it's up to the user land application to figure out what new files are there (if any).\n> \n> You may be correct about getting CREATE events for every existing file being unintended behavior. I will have to review what inotify does in the case of files already existing when the watch is added.\n>  \n> \n> 2. I don't think it's necessary to watch the files themselves.  It looks\n> like the events you are registering on the files (DELETE/RENAME/WRITE)\n> would all be generated by watches on the directories, since they cause\n> changes to the directory entry as well.  (In practice, watching only the\n> directory has worked for me, although I did not exhaustively test it).\n> Did you find a use case that didn't work with only the directory watch?\n> \n> If you're talking about watching only directories using this exp/fsnotify patch, then yes, you should be okay only watching directories. However, in order for that to work, the go library must \"watch\" each file using kqueue/kevent BSD system calls.\n> \n> Cheers,\n> Chris\n> \n> \n> To all that are interested, I have \"merged\" the code from exp/winfsnotify into the library. I'm a little fuzzy on how the windows file system notification API works, such as no attribute notification (test fails), so if anyone has any insight (I've included hector as he was the original author I believe) I'd like to hear your thoughts.\n> \n> I've placed the code up on github so we can review and make changes before putting it through the formal review process. If you'd rather we keep modifying this changeset (or create another) I am more than happy to do that, for now It's up on github if anyone would like to assist.\n> \n> https://github.com/howeyc/fsnotify.go\n> \n> Thanks!\n> Chris\n",
			"disapproval": false,
			"date": "2012-03-29 01:58:54.857931",
			"approval": false
		},
		{
			"sender": "mattn.jp@gmail.com",
			"recipients": [
				"howeyc@gmail.com",
				"golang-dev@googlegroups.com",
				"robfig@gmail.com",
				"dave@cheney.net",
				"mattn.jp@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "It need bits patch.\n\nhttps://gist.github.com/2235432\n\nAnd it seens test not passed on windows.\n\nOn 2012/03/29 01:40:52, howeyc wrote:\n> On 13 February 2012 11:36, Chris Howey <mailto:howeyc@gmail.com> wrote:\n> \n> > Rob,\n> >\n> > Thank you for trying this on OSX.\n> >\n> >\n> >> Hey Howey,\n> >>\n> >> I'm trying it out on OSX, and I have some questions about the behavior:\n> >>\n> >> 1. The first time something changes in a watched directory, I get a\n> >> \"CREATE\" event for every file in the watched directories.  It looks like\n> >> this happens because calling Watch(path) watches the directory, but an\n> >> event ends up calling sendDirectoryChangeEvents which checks for / adds\n> >> watches on all of the files in the directories, sending CREATE events if\n> >> the watches were not there.  I assume this is not expected behavior?\n> >>\n> >\n> > The call of sendDirectoryChangeEvents is something I added to mimic the\n> > behavior I found on the Linux inotify API. In Linux, simply watching a\n> > directory will also give you events for files in the directory as well. The\n> > kqueue interface on BSD only tells you the directory changed, it's up to\n> > the user land application to figure out what new files are there (if any).\n> >\n> > You may be correct about getting CREATE events for every existing file\n> > being unintended behavior. I will have to review what inotify does in the\n> > case of files already existing when the watch is added.\n> >\n> >\n> >>\n> >> 2. I don't think it's necessary to watch the files themselves.  It looks\n> >> like the events you are registering on the files (DELETE/RENAME/WRITE)\n> >> would all be generated by watches on the directories, since they cause\n> >> changes to the directory entry as well.  (In practice, watching only the\n> >> directory has worked for me, although I did not exhaustively test it).\n> >> Did you find a use case that didn't work with only the directory watch?\n> >>\n> >\n> > If you're talking about watching only directories using this exp/fsnotify\n> > patch, then yes, you should be okay only watching directories. However, in\n> > order for that to work, the go library must \"watch\" each file using\n> > kqueue/kevent BSD system calls.\n> >\n> > Cheers,\n> > Chris\n> >\n> >\n> To all that are interested, I have \"merged\" the code from exp/winfsnotify\n> into the library. I'm a little fuzzy on how the windows file system\n> notification API works, such as no attribute notification (test fails), so\n> if anyone has any insight (I've included hector as he was the original\n> author I believe) I'd like to hear your thoughts.\n> \n> I've placed the code up on github so we can review and make changes before\n> putting it through the formal review process. If you'd rather we keep\n> modifying this changeset (or create another) I am more than happy to do\n> that, for now It's up on github if anyone would like to assist.\n> \n> https://github.com/howeyc/fsnotify.go\n> \n> Thanks!\n> Chris",
			"disapproval": false,
			"date": "2012-03-29 09:39:50.878142",
			"approval": false
		},
		{
			"sender": "howeyc@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 29 March 2012 04:39, <mattn.jp@gmail.com> wrote:\n\n> It need bits patch.\n>\n> https://gist.github.com/**2235432 <https://gist.github.com/2235432>\n>\n> And it seens test not passed on windows.\n>\n>\nI fixed the line and renamed the repository.\n\nhttps://github.com/howeyc/fsnotify\n\nI am aware of the failed test. This is a call for help from someone who\nknows the windows file notification API to tell me if windows even has an\nAttribute change notification, and if so, how to fix it.\n\nThanks,\nChris\n",
			"disapproval": false,
			"date": "2012-03-29 16:12:12.161301",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"howeyc@gmail.com",
				"golang-dev@googlegroups.com",
				"robfig@gmail.com",
				"dave@cheney.net",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/03/29 16:12:12, howeyc wrote:\n> \n> ... This is a call for help from someone who\n> knows the windows file notification API to tell me if windows even has an\n> Attribute change notification, and if so, how to fix it.\n> \n\nDo you know about src/pkg/exp/winfsnotify? It is all in there.\n\nAlex",
			"disapproval": false,
			"date": "2012-03-30 01:42:35.713476",
			"approval": false
		},
		{
			"sender": "howeyc@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 29 March 2012 20:42, <alex.brainman@gmail.com> wrote:\n\n> On 2012/03/29 16:12:12, howeyc wrote:\n>\n>  ... This is a call for help from someone who\n>>\n>> knows the windows file notification API to tell me if windows even has\n>>\n> an\n>\n>> Attribute change notification, and if so, how to fix it.\n>>\n>\n>\n> Do you know about src/pkg/exp/winfsnotify? It is all in there.\n>\n> Alex\n>\n> http://codereview.appspot.com/**5585043/<http://codereview.appspot.com/5585043/>\n\n\nI have done some further investigation and it appears to me that windows\ndoes not support attributes as a separate notification.\nhttp://msdn.microsoft.com/en-us/library/windows/desktop/aa364391(v=vs.85).aspx\n\nRight now, I have the library send a FileEvent over a channel and FileEvent\nsupports the following functions:\n\nIsCreate()\nIsDelete()\nIsModify()\nIsAttribute() * NOT SUPPORTED ON WINDOWS *\nIsRename()\n\n\nMy thoughts are to roll IsAttribute() into IsModify() (and remove\nIsAttribute()) so the same functions are exported across all\nplatforms.\n\n\nComments, concerns, etc?\n\n\nThanks,\n\nChris\n",
			"disapproval": false,
			"date": "2012-03-30 21:06:52.254418",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"howeyc@gmail.com",
				"golang-dev@googlegroups.com",
				"robfig@gmail.com",
				"dave@cheney.net",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/03/30 21:06:52, howeyc wrote:\n> \n> I have done some further investigation and it appears to me that windows\n> does not support attributes as a separate notification.\n> http://msdn.microsoft.com/en-us/library/windows/desktop/aa364391%28v=vs.85%29.aspx\n\nI am not even sure what do \"attributes\" mean in Windows. If you mean \"who can act on file\" and \"what can be done\" to a file, then Windows files do have ACLs. But Windows ACLs can't be inquired about as per current Go standard libraries. So, I suppose, we should not worry about them. Yet.\n\n> My thoughts are to roll IsAttribute() into IsModify() (and remove\n> IsAttribute()) so the same functions are exported across all\n> platforms.\n> \n\nIt is hard for me to advise, because I do not use this facility myself. But I don't think, if you leave IsAttribute() (which will return false on windows) in, it is a big deal.\n\n> \n> Comments, concerns, etc?\n\nI see no windows implementation in your proposal. What is your plan about that? I thought, given that we have exp/winfsnotify package already, you should be able to provide something that works. This way your design will be closer to reality (I think \"cross-platform\" is the key word in your CL).\n\nAlex",
			"disapproval": false,
			"date": "2012-04-01 04:49:49.470698",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Sounds reasonable, similar to the precedent set by the\nos.FileInfo.Sys() escape hatch.\n\nOn Sat, Mar 31, 2012 at 8:06 AM, Chris Howey <howeyc@gmail.com> wrote:\n> On 29 March 2012 20:42, <alex.brainman@gmail.com> wrote:\n>>\n>> On 2012/03/29 16:12:12, howeyc wrote:\n>>\n>>> ... This is a call for help from someone who\n>>>\n>>> knows the windows file notification API to tell me if windows even has\n>>\n>> an\n>>>\n>>> Attribute change notification, and if so, how to fix it.\n>>\n>>\n>>\n>> Do you know about src/pkg/exp/winfsnotify? It is all in there.\n>>\n>> Alex\n>>\n>> http://codereview.appspot.com/5585043/\n>\n>\n> I have done some further investigation and it appears to me that windows\n> does not support attributes as a\u00a0separate\u00a0notification.\n> http://msdn.microsoft.com/en-us/library/windows/desktop/aa364391(v=vs.85).aspx\n>\n> Right now, I have the library send a FileEvent over a channel and FileEvent\n> supports the following functions:\n>\n> IsCreate()\n> IsDelete()\n> IsModify()\n> IsAttribute() * NOT SUPPORTED ON WINDOWS *\n> IsRename()\n>\n>\n> My thoughts are to roll IsAttribute() into IsModify() (and remove\n> IsAttribute()) so the same functions are exported across all platforms.\n>\n>\n> Comments, concerns, etc?\n>\n>\n> Thanks,\n>\n> Chris\n>\n>\n",
			"disapproval": false,
			"date": "2012-03-30 21:48:22.925881",
			"approval": false
		},
		{
			"sender": "howeyc@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 31 March 2012 23:49, <alex.brainman@gmail.com> wrote:\n\n> On 2012/03/30 21:06:52, howeyc wrote:\n>\n>  I have done some further investigation and it appears to me that\n>>\n> windows\n>\n>> does not support attributes as a separate notification.\n>>\n>\n> http://msdn.microsoft.com/en-**us/library/windows/desktop/**\n> aa364391%28v=vs.85%29.aspx<http://msdn.microsoft.com/en-us/library/windows/desktop/aa364391%28v=vs.85%29.aspx>\n>\n> I am not even sure what do \"attributes\" mean in Windows. If you mean\n> \"who can act on file\" and \"what can be done\" to a file, then Windows\n> files do have ACLs. But Windows ACLs can't be inquired about as per\n> current Go standard libraries. So, I suppose, we should not worry about\n> them. Yet.\n>\n> Sorry, I thought link was clear. Let me be more precise, from the link:\n\n\"FILE_ACTION_MODIFIED - The file was modified. This can be a change in the\ntime stamp or attributes.\"\n\nThis means the MODIFIED notification can be either file modification,\nattribute notification, or both. This is not the case in BSD/Linux/OSX,\nthey are separate notifications on those OSs.\n\nFor example, on BSD:\nhttp://www.freebsd.org/cgi/man.cgi?query=kqueue&apropos=0&sektion=0&manpath=FreeBSD+9.0-RELEASE&arch=default&format=html\nScroll down to the EVFILT_NODE section, notice how NOTE_WRITE and\nNOTE_ATTRIB are separate.\n\n\n>\n>  My thoughts are to roll IsAttribute() into IsModify() (and remove\n>> IsAttribute()) so the same functions are exported across all\n>> platforms.\n>>\n>\n>\n> It is hard for me to advise, because I do not use this facility myself.\n> But I don't think, if you leave IsAttribute() (which will return false\n> on windows) in, it is a big deal.\n>\n>\nI have decided to go the other route and remove IsAttribute() and have\nother OSs return true for IsModify() in the case of an attribute change. I\ndon't like the idea of one OS having a function that always returns false\nwhen all other OSs have the chance of getting a true.\n\nHowever, if others would prefer an always-false function on windows in\nreturn for more notification types on other OSs I have no problem doing\nthat.\n\n\n>\n>  Comments, concerns, etc?\n>>\n>\n> I see no windows implementation in your proposal. What is your plan\n> about that? I thought, given that we have exp/winfsnotify package\n> already, you should be able to provide something that works. This way\n> your design will be closer to reality (I think \"cross-platform\" is the\n> key word in your CL).\n>\n\nThis is the second time you have mentioned exp/winfsnotify. Let me assure\nyou once again, I do know it exists. It's what I merged into the fsnotify\nlibrary to provide windows support.\n\nThe fsnotify library behaves similar to inotify and winfsnotify in that it\nsends Events over a channel. The difference is that instead of exposing the\nmask, it provides four functions that can be called to determine the type\nof notification:\nIsCreate()\nIsDelete()\nIsModify()\nIsRename()\n\n\nChris\n",
			"disapproval": false,
			"date": "2012-04-01 17:44:18.847669",
			"approval": false
		},
		{
			"sender": "alex.brainman@gmail.com",
			"recipients": [
				"howeyc@gmail.com",
				"golang-dev@googlegroups.com",
				"robfig@gmail.com",
				"dave@cheney.net",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/04/01 17:44:18, howeyc wrote:\n> \n> ... I merged into the fsnotify\n> library to provide windows support.\n> \n\nSorry, but I can't see it. Which of your changed files contains windows code? Also, please update your CL to the tip. I can't download it. Probably, because Makefiles have been deleted now. Thank you.\n\nAlex",
			"disapproval": false,
			"date": "2012-04-01 23:23:46.555203",
			"approval": false
		},
		{
			"sender": "howeyc@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 3 April 2012 19:54, Rob Figueiredo <robfig@gmail.com> wrote:\n\n> Hi Chris,\n> I'm having one problem with it:\n> https://github.com/howeyc/fsnotify/blob/master/fsnotify_bsd.go#L187\n>\n> On that line, you ignore the returned errno.  For some reason, when I\n> start up my server that configures and uses a watcher, the first Kevent\n> call always fails with \"interrupted system call\".  That may be specific to\n> my program (I'm not sure how to tell what it's doing to cause that -- any\n> suggestions?), but it also causes a panic when on the next line when it\n> indexes into the eventbuf slice.  Locally, I changed it to just continue if\n> there was an error, and things seem to work fine.\n>\n> Thanks for doing this,\n> Rob\n>\n>\nRob,\n\nI've done some investigating, and it appears that ignoring the EINTR error\nval is probably the way to go. EINTR appears to happen in two scenarios\n(from what I can see looking over kernel sources, I may have missed\nsomething):\n1. While forking close to calling of kevent() - The process inside the\nkevent() call with a timeout may get interrupted as the forking process\nregisters a new process with the same kqueue.\n2. A file event occurs but is not yet available on the kqueue.\n\nI have updated the code on github and should have the issue resolved, can\nyou confirm?\n\nThanks,\nChris\n",
			"disapproval": false,
			"date": "2012-04-04 03:38:38.741562",
			"approval": false
		},
		{
			"sender": "howeyc@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Apr 1, 2012 6:23 PM, <alex.brainman@gmail.com> wrote:\n>\n> On 2012/04/01 17:44:18, howeyc wrote:\n>\n>> ... I merged into the fsnotify\n>>\n>> library to provide windows support.\n>\n>\n>\n> Sorry, but I can't see it. Which of your changed files contains windows\n> code? Also, please update your CL to the tip. I can't download it.\n> Probably, because Makefiles have been deleted now. Thank you.\n>\n> Alex\n>\n> http://codereview.appspot.com/5585043/\n\nOh! I see the problem. I put the code on github while I tested various\nplatforms and got some feedback, I have not yet updated the changeset.\n\nhttps://github.com/howeyc/fsnotify\n\nSorry for the confusion I caused!\n\nChris\n",
			"disapproval": false,
			"date": "2012-04-02 00:05:08.408368",
			"approval": false
		},
		{
			"sender": "robfig@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hi Chris,\nI'm having one problem with it:\nhttps://github.com/howeyc/fsnotify/blob/master/fsnotify_bsd.go#L187\n\nOn that line, you ignore the returned errno.  For some reason, when I start\nup my server that configures and uses a watcher, the first Kevent call\nalways fails with \"interrupted system call\".  That may be specific to my\nprogram (I'm not sure how to tell what it's doing to cause that -- any\nsuggestions?), but it also causes a panic when on the next line when it\nindexes into the eventbuf slice.  Locally, I changed it to just continue if\nthere was an error, and things seem to work fine.\n\nThanks for doing this,\nRob\n\n\nOn Sun, Apr 1, 2012 at 8:05 PM, Chris Howey <howeyc@gmail.com> wrote:\n\n>\n> On Apr 1, 2012 6:23 PM, <alex.brainman@gmail.com> wrote:\n> >\n> > On 2012/04/01 17:44:18, howeyc wrote:\n> >\n> >> ... I merged into the fsnotify\n> >>\n> >> library to provide windows support.\n> >\n> >\n> >\n> > Sorry, but I can't see it. Which of your changed files contains windows\n> > code? Also, please update your CL to the tip. I can't download it.\n> > Probably, because Makefiles have been deleted now. Thank you.\n> >\n> > Alex\n> >\n> > http://codereview.appspot.com/5585043/\n>\n> Oh! I see the problem. I put the code on github while I tested various\n> platforms and got some feedback, I have not yet updated the changeset.\n>\n> https://github.com/howeyc/fsnotify\n>\n> Sorry for the confusion I caused!\n>\n> Chris\n>\n",
			"disapproval": false,
			"date": "2012-04-04 00:54:34.382017",
			"approval": false
		},
		{
			"sender": "robfig@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I'm afraid that doesn't quite fix it --\nnow it crashes on\nhttps://github.com/howeyc/fsnotify/blob/master/fsnotify_bsd.go#L216\n\nI think I was not clear earlier -- when I said continue I meant it\nrestarted the loop (ie the keyword), not that it continued executing :)\n\nI think this would work:\n\nif errno != nil {\n  if errno != EINTR {\n    w.Error <- os.NewSyscallError(\"kevent\", errno)\n  }\n  continue\n}\n\n\n\nOn Tue, Apr 3, 2012 at 11:38 PM, Chris Howey <howeyc@gmail.com> wrote:\n\n>\n> On 3 April 2012 19:54, Rob Figueiredo <robfig@gmail.com> wrote:\n>\n>> Hi Chris,\n>> I'm having one problem with it:\n>> https://github.com/howeyc/fsnotify/blob/master/fsnotify_bsd.go#L187\n>>\n>> On that line, you ignore the returned errno.  For some reason, when I\n>> start up my server that configures and uses a watcher, the first Kevent\n>> call always fails with \"interrupted system call\".  That may be specific to\n>> my program (I'm not sure how to tell what it's doing to cause that -- any\n>> suggestions?), but it also causes a panic when on the next line when it\n>> indexes into the eventbuf slice.  Locally, I changed it to just continue if\n>> there was an error, and things seem to work fine.\n>>\n>> Thanks for doing this,\n>> Rob\n>>\n>>\n> Rob,\n>\n> I've done some investigating, and it appears that ignoring the EINTR error\n> val is probably the way to go. EINTR appears to happen in two scenarios\n> (from what I can see looking over kernel sources, I may have missed\n> something):\n> 1. While forking close to calling of kevent() - The process inside the\n> kevent() call with a timeout may get interrupted as the forking process\n> registers a new process with the same kqueue.\n> 2. A file event occurs but is not yet available on the kqueue.\n>\n> I have updated the code on github and should have the issue resolved, can\n> you confirm?\n>\n> Thanks,\n> Chris\n>\n",
			"disapproval": false,
			"date": "2012-04-04 13:29:35.342054",
			"approval": false
		},
		{
			"sender": "taralx@gmail.com",
			"recipients": [
				"howeyc@gmail.com",
				"golang-dev@googlegroups.com",
				"robfig@gmail.com",
				"dave@cheney.net",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"taralx@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I just took a glance over the code. This looks really exciting. :)\n\nShouldn't IN_DELETE_SELF be in the linux default set? BSD has NOTE_DELETE, which is the same thing.",
			"disapproval": false,
			"date": "2012-04-17 19:35:51.577895",
			"approval": false
		},
		{
			"sender": "howeyc@gmail.com",
			"recipients": [
				"howeyc@gmail.com",
				"golang-dev@googlegroups.com",
				"robfig@gmail.com",
				"dave@cheney.net",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"taralx@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/04/17 19:35:51, taralx wrote:\n> I just took a glance over the code. This looks really exciting. :)\n> \n> Shouldn't IN_DELETE_SELF be in the linux default set? BSD has NOTE_DELETE, which\n> is the same thing.\n\nI've made the update to the code up on github. \n\nhttps://github.com/howeyc/fsnotify\n\nIt's up there for anyone who wants to use it. It works on Linux/BSD/OSX/Windows.\n\nIs there any interest to bring this into the Standard library? If so, I'm willing to update/create a change set to get this into exp/.",
			"disapproval": false,
			"date": "2012-04-18 14:47:51.271473",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I would like to see this integrated into the standard lib again. \n\nI think the best way to broach this is to raise the proposal on golang-dev. \n\nDave\n\nOn 19/04/2012, at 0:47, howeyc@gmail.com wrote:\n\n> On 2012/04/17 19:35:51, taralx wrote:\n>> I just took a glance over the code. This looks really exciting. :)\n> \n>> Shouldn't IN_DELETE_SELF be in the linux default set? BSD has\n> NOTE_DELETE, which\n>> is the same thing.\n> \n> I've made the update to the code up on github.\n> \n> https://github.com/howeyc/fsnotify\n> \n> It's up there for anyone who wants to use it. It works on\n> Linux/BSD/OSX/Windows.\n> \n> Is there any interest to bring this into the Standard library? If so,\n> I'm willing to update/create a change set to get this into exp/.\n> \n> http://codereview.appspot.com/5585043/\n",
			"disapproval": false,
			"date": "2012-04-20 06:35:29.470759",
			"approval": false
		},
		{
			"sender": "dave@cheney.net",
			"recipients": [
				"howeyc@gmail.com",
				"golang-dev@googlegroups.com",
				"robfig@gmail.com",
				"dave@cheney.net",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"taralx@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "ping",
			"disapproval": false,
			"date": "2012-09-19 09:26:34.802010",
			"approval": false
		},
		{
			"sender": "tylor@torbit.com",
			"recipients": [
				"howeyc@gmail.com",
				"golang-dev@googlegroups.com",
				"robfig@gmail.com",
				"dave@cheney.net",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"taralx@gmail.com",
				"tylor@torbit.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2012/09/19 09:26:34, dfc wrote:\n> ping\n\nAny chance this will make 1.1?",
			"disapproval": false,
			"date": "2013-03-07 21:29:03.475450",
			"approval": false
		},
		{
			"sender": "minux.ma@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Fri, Mar 8, 2013 at 5:29 AM,  <tylor@torbit.com> wrote:\r\n> Any chance this will make 1.1?\r\nthe corresponding issue (https://code.google.com/p/go/issues/detail?id=4068)\r\nis labeled Go 1.1, so this is still possibility.\r\n\r\nhowever, as this CL has sat idle for more than 10 months, it is fairly unlikely\r\nto make into Go 1.1.\r\n",
			"disapproval": false,
			"date": "2013-03-07 21:42:24.574900",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I apologize for letting this fall on the floor. I'm very interested in\r\nseeing this functionality made available in a portable way - I've already\r\nwritten code that can use it - but we don't have time to do the appropriate\r\nAPI review to get this into Go 1.1. However, howeyc, if you'd like to send\r\nus a CL adding it to the newly created go.exp repository, I'd be happy to\r\ncheck it in there in its current form as a way for accumulate experience\r\nwith it. That will make it easier to roll into Go 1.2.\r\n\r\nThanks, and again my apologies.\r\nRuss\r\n",
			"disapproval": false,
			"date": "2013-03-11 15:41:31.362780",
			"approval": false
		},
		{
			"sender": "tylor@torbit.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Russ,\r\n\r\nSide-note, if you need this for a current project, this is the github repo\r\nthat many people using fsnotify are using:\r\nhttps://github.com/howeyc/fsnotify\r\n\r\nTylor Arndt\r\nSoftware Engineer\r\nTorbit <http://www.torbit.com>\r\n\r\n\r\nOn Mon, Mar 11, 2013 at 10:41 AM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> I apologize for letting this fall on the floor. I'm very interested in\r\n> seeing this functionality made available in a portable way - I've already\r\n> written code that can use it - but we don't have time to do the appropriate\r\n> API review to get this into Go 1.1. However, howeyc, if you'd like to send\r\n> us a CL adding it to the newly created go.exp repository, I'd be happy to\r\n> check it in there in its current form as a way for accumulate experience\r\n> with it. That will make it easier to roll into Go 1.2.\r\n>\r\n> Thanks, and again my apologies.\r\n> Russ\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2013-03-11 16:36:24.804250",
			"approval": false
		},
		{
			"sender": "howeyc@gmail.com",
			"recipients": [
				"howeyc@gmail.com",
				"golang-dev@googlegroups.com",
				"robfig@gmail.com",
				"dave@cheney.net",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"taralx@gmail.com",
				"tylor@torbit.com",
				"minux.ma@gmail.com",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 2013/03/11 15:41:31, rsc wrote:\n> I apologize for letting this fall on the floor. I'm very interested in\n> seeing this functionality made available in a portable way - I've already\n> written code that can use it - but we don't have time to do the appropriate\n> API review to get this into Go 1.1. However, howeyc, if you'd like to send\n> us a CL adding it to the newly created go.exp repository, I'd be happy to\n> check it in there in its current form as a way for accumulate experience\n> with it. That will make it easier to roll into Go 1.2.\n> \n> Thanks, and again my apologies.\n> Russ\n\nI've gone head and taken the latest I had on github and created a change set for the go.exp repository here: https://codereview.appspot.com/7497045/",
			"disapproval": false,
			"date": "2013-03-11 17:16:33.905600",
			"approval": false
		},
		{
			"sender": "khr@golang.org",
			"recipients": [
				"howeyc@gmail.com",
				"golang-dev@googlegroups.com",
				"robfig@gmail.com",
				"dave@cheney.net",
				"mattn.jp@gmail.com",
				"alex.brainman@gmail.com",
				"taralx@gmail.com",
				"tylor@torbit.com",
				"minux.ma@gmail.com",
				"khr@golang.org",
				"bradfitz@golang.org",
				"golang-dev@googlegroups.com",
				"rsc@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "R=close",
			"disapproval": false,
			"date": "2013-07-22 20:56:18.093820",
			"approval": false
		}
	],
	"owner_email": "howeyc@gmail.com",
	"private": false,
	"base_url": "",
	"owner": "howeyc",
	"subject": "code review 5585043: exp/fsnotify: Cross-platform filesystem notifications",
	"created": "2012-01-27 14:57:25.709467",
	"patchsets": [
		1,
		2001,
		4001
	],
	"modified": "2013-07-22 20:56:18.690080",
	"closed": false,
	"issue": 5585043
}