{
	"description": "reflect: disallow Interface method on Value obtained via unexported name\n\nHad been allowing it for use by fmt, but it is too hard to lock down.\nFix other packages not to depend on it.",
	"cc": [
		"r@google.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [
		"r@golang.org"
	],
	"messages": [
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-17 19:13:04.551100",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5266054/diff/1001/src/pkg/fmt/print.go\nFile src/pkg/fmt/print.go (right):\n\nhttp://codereview.appspot.com/5266054/diff/1001/src/pkg/fmt/print.go#newcode654\nsrc/pkg/fmt/print.go:654: p.fmtBool(f, verb, field, reflect.Value{})\nthere's a lot of creation and passing of reflection values being added here. can we store the thing in p and avoid that? i think we can, and it would simplify (and speed up) this process.\n\nhttp://codereview.appspot.com/5266054/diff/1001/src/pkg/fmt/print.go#newcode734\nsrc/pkg/fmt/print.go:734: if value.CanInterface() {\nsurely there's a refactoring here. there are too many pieces. even just a couple of helper functions might do it.",
			"disapproval": false,
			"date": "2011-10-17 18:59:48.125405",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello r (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2011-10-17 18:50:07.791584",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Oct 17, 2011, at 1:00 PM, Russ Cox wrote:\n\n> On Mon, Oct 17, 2011 at 15:59,  <r@golang.org> wrote:\n>> is it still possible to avoid this check working by hand, without using\n>> unsafe?\n> \n> yes, you can call value.CanInterface before calling value.Interface.\n\nno, i meant the other way around. can i still break the rules?\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-10-17 20:01:22.783185",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Oct 17, 2011 at 14:59, r@golang.org wrote:\n> http://codereview.appspot.com/5266054/diff/1001/src/pkg/fmt/print.go#newcode654\n> src/pkg/fmt/print.go:654: p.fmtBool(f, verb, field, reflect.Value{})\n> there's a lot of creation and passing of reflection values being added\n> here. can we store the thing in p and avoid that? i think we can, and it\n> would simplify (and speed up) this process.\n\nThe only creation is of zero values (reflect.Value{}).\nI don't think that is slowing us down.\n\nI'm not thrilled with it but it seems cleaner than\nhiding state in p that code might or might not\nremember to keep up to date.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-10-17 19:01:59.958086",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "can you please see how the fmt benchmarks are affected?\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-10-17 19:57:02.454342",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5266054/diff/12002/src/pkg/fmt/print.go\nFile src/pkg/fmt/print.go (right):\n\nhttp://codereview.appspot.com/5266054/diff/12002/src/pkg/fmt/print.go#newcode667\nsrc/pkg/fmt/print.go:667: p.fmtBool(f, verb, field, reflect.Value{})\nthis new repetition in already overrepetitious code is bothering me.  can you at least make it a local with a shorter name? (and for the curious: do all these reflect.Values take up frame space?)\n\nhttp://codereview.appspot.com/5266054/diff/12002/src/pkg/reflect/value.go\nFile src/pkg/reflect/value.go (right):\n\nhttp://codereview.appspot.com/5266054/diff/12002/src/pkg/reflect/value.go#newcode907\nsrc/pkg/reflect/value.go:907: panic(\"reflect.Value.Interface: cannot return value obtained from unexported field or method\")\nis it still possible to avoid this check working by hand, without using unsafe?\n\nhttp://codereview.appspot.com/5266054/diff/12002/src/pkg/reflect/value.go#newcode911\nsrc/pkg/reflect/value.go:911: // Won't recurse further because an interface cannot contain an interface.\ns/recurse/recur/\nenglish is recur, incorrect nerdspeak is recurse. easy to be correct.",
			"disapproval": false,
			"date": "2011-10-17 19:59:49.264889",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "Hello r@golang.org (cc: golang-dev@googlegroups.com),\n\nPlease take another look.",
			"disapproval": false,
			"date": "2011-10-17 19:13:23.120345",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Moving exp/template/html change into its own CL,\nso that this CL is only about reflect and fmt.\n",
			"disapproval": false,
			"date": "2011-10-17 19:49:23.774245",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "http://codereview.appspot.com/5266054/diff/18002/src/pkg/fmt/print.go\nFile src/pkg/fmt/print.go (right):\n\nhttp://codereview.appspot.com/5266054/diff/18002/src/pkg/fmt/print.go#newcode667\nsrc/pkg/fmt/print.go:667: p.fmtBool(f, verb, field, reflect.Value{})\ni asked you to tidy this up.\n\nok, i'll do a pass to restore it to my comfort zone.",
			"disapproval": false,
			"date": "2011-10-17 22:53:29.765568",
			"approval": false
		},
		{
			"sender": "r@google.com",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "\nOn Oct 17, 2011, at 1:01 PM, Russ Cox wrote:\n\n> On Mon, Oct 17, 2011 at 16:01, Rob 'Commander' Pike <r@google.com> wrote:\n>> no, i meant the other way around. can i still break the rules?\n> \n> i don't believe so.\n> the intent is definitely not to let people break the rules anymore.\n\ni understand the intent, it's the implementation i'm trying to figure out.\n\n-rob\n\n",
			"disapproval": false,
			"date": "2011-10-17 20:07:33.035226",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Oct 17, 2011 at 15:59,  <r@golang.org> wrote:\n> is it still possible to avoid this check working by hand, without using\n> unsafe?\n\nyes, you can call value.CanInterface before calling value.Interface.\n",
			"disapproval": false,
			"date": "2011-10-17 20:00:44.042743",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Oct 17, 2011 at 16:01, Rob 'Commander' Pike <r@google.com> wrote:\n> no, i meant the other way around. can i still break the rules?\n\ni don't believe so.\nthe intent is definitely not to let people break the rules anymore.\n",
			"disapproval": false,
			"date": "2011-10-17 20:01:56.254467",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "> i understand the intent, it's the implementation i'm trying to figure out.\n\nthe only place i am aware of where reflect was letting\nclients cheat was in Interface - the appropriate check\nwas there, just commented out because it broke fmt.\nthis CL puts the check back - if the flagRO bit is set,\nit means that the value was obtained by using an\nunexported field, so it and any values obtained by using\nit must be treated as read-only.  returning an int from\nInterface would be fine, since ints are inherently\nread-only, but returning a *int would not be, since\nyou could then write through it.\n\nruss\n",
			"disapproval": false,
			"date": "2011-10-17 22:29:08.788059",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "On Mon, Oct 17, 2011 at 18:53,  <r@golang.org> wrote:\n> src/pkg/fmt/print.go:667: p.fmtBool(f, verb, field, reflect.Value{})\n> i asked you to tidy this up.\n>\n> ok, i'll do a pass to restore it to my comfort zone.\n\nsorry, i planned to do that in the refactoring i promised\nin a later CL.  i was going to take a crack at that today\nbut i will assume it's in your court unless i hear otherwise.\n\nas for reflect.Value{} vs declaring and using a zero,\nthe compiler should have an easier job in the former case,\nbecause it can synthesize zeros more easily than copy them.\nif it doesn't do that well, i should fix that.  i started on making\nsome of the init stuff a bit cleaner a while back but only got\nas far as fixing globals.\n\nruss\n",
			"disapproval": false,
			"date": "2011-10-18 12:41:14.602158",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview.appspotmail.com"
			],
			"text": "Benchmarked: it is about 5% slower.\n\nIt might be interesting to move more of the parameters\ninto p or p.fmt, but let's do that refactoring in another CL.\nThis CL is about fixing the reflect bugs, and I'd like to\nkeep it as straightforward as possible so that we can be\nconfident about backporting it into r60.\n\nRuss\n",
			"disapproval": false,
			"date": "2011-10-17 22:38:36.670049",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=f798c2579fbd ***\n\nreflect: disallow Interface method on Value obtained via unexported name\n\nHad been allowing it for use by fmt, but it is too hard to lock down.\nFix other packages not to depend on it.\n\nR=r, r\nCC=golang-dev\nhttp://codereview.appspot.com/5266054",
			"disapproval": false,
			"date": "2011-10-17 22:48:48.437429",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"rsc@golang.org",
				"r@golang.org",
				"r@google.com",
				"golang-dev@googlegroups.com",
				"reply@codereview.appspotmail.com"
			],
			"text": "LGTM but i'm not happy",
			"disapproval": false,
			"date": "2011-10-17 22:42:57.707100",
			"approval": true
		}
	],
	"owner_email": "rsc@golang.org",
	"private": false,
	"base_url": "",
	"owner": "rsc",
	"subject": "code review 5266054: reflect: disallow Interface method on Value obtained vi...",
	"created": "2011-10-17 18:49:14.411831",
	"patchsets": [
		1,
		1001,
		4,
		7001,
		9001,
		12002,
		17001,
		18002
	],
	"modified": "2011-10-17 22:53:29.872566",
	"closed": true,
	"issue": 5266054
}