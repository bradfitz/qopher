{
	"description": "spec: calling delete on a nil map is a no-op\n\nThis is language change. It is a backward-compatible\nchange but for code that relies on a run-time panic\nwhen calling delete on a nil map (unlikely).\n\nFixes issue 4253.",
	"cc": [
		"rsc@golang.org",
		"r@golang.org",
		"iant@golang.org",
		"ken@golang.org",
		"bradfitz@golang.org",
		"rogpeppe@gmail.com",
		"golang-dev@googlegroups.com"
	],
	"reviewers": [],
	"messages": [
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "I would prefer deletes on a nil map explode on me... I would assume that's\r\nalways my bug.\r\n\r\nSeems weird to permit an attempt to mutate a immutable thing.\r\n\r\nInstead of:\r\n\"A nil map is equivalent to an empty map except that no elements\r\nmay be added.\"\r\n\r\nI would prefer:\r\n\"A nil map is equivalent to an empty map except that it may not be\r\n{mutated,modified,written}.\"\r\n\r\nSimilar to how we permit reading a nil channel, but not sending on it or\r\nclosing it.\r\n\r\n\r\nOn Mon, Dec 10, 2012 at 1:42 PM, Russ Cox <rsc@golang.org> wrote:\r\n\r\n> LGTM but wait for others\r\n>\r\n> Background: the spec used to be self-conflicting. It said this part\r\n> about panic but also said:\r\n>     A nil map is equivalent to an empty map except that no elements\r\n> may be added.\r\n>\r\n> This edit brings the delete semantics in line with that general rule.\r\n>\r\n> Russ\r\n>\r\n",
			"disapproval": false,
			"date": "2012-12-10 18:59:09.263770",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello rsc, r, iant, ken2 (cc: golang-dev@googlegroups.com),\n\nI'd like you to review this change to\nhttps://code.google.com/p/go",
			"disapproval": false,
			"date": "2012-12-10 18:23:32.516250",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM but wait for others\r\n\r\nBackground: the spec used to be self-conflicting. It said this part\r\nabout panic but also said:\r\n    A nil map is equivalent to an empty map except that no elements\r\nmay be added.\r\n\r\nThis edit brings the delete semantics in line with that general rule.\r\n\r\nRuss\r\n",
			"disapproval": false,
			"date": "2012-12-10 18:42:36.540380",
			"approval": true
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Mon, Dec 10, 2012 at 1:59 PM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> I would prefer deletes on a nil map explode on me... I would assume that's\r\n> always my bug.\r\n\r\nMy experience is the opposite. Most of the time I do delete(x, key) I\r\nhave to put in a special case for x being nil.\r\n",
			"disapproval": false,
			"date": "2012-12-10 19:36:37.864400",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "The current behavior seems less consistent to me then the proposed one\r\n(delete on nil maps in no-op); even w/ your proposed phrasing change (\r\n\"A nil map is equivalent to an empty map except that it may not be\r\n{mutated,modified,written}.\" ).\r\n\r\nFor one, nil maps behave exactly like empty maps now (deletion,\r\nlookup, iteration). It seems odd to make an exception for delete. We\r\nhave been there before and relaxation for nil maps (no run-time error)\r\nreally simplified code and removed unnecessary if's.\r\n\r\nAlso, if you require a runtime panic for delete on nil maps, one might\r\nas well require a run-time panic for deletion of a non-existing\r\nelement in a non-nil map - this seems to be the same kind of \"bug\".\r\n\r\nThe comparison with close seems not correct. There is a signal\r\ntransmitted when closing a channel, as with sending on a channel.\r\nNeither receiving from a channel not deletion from a map requires a\r\nchannel or map to be present to decide how to proceed.\r\n\r\n- gri\r\n\r\nOn Mon, Dec 10, 2012 at 10:59 AM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n> I would prefer deletes on a nil map explode on me... I would assume that's\r\n> always my bug.\r\n>\r\n> Seems weird to permit an attempt to mutate a immutable thing.\r\n>\r\n> Instead of:\r\n> \"A nil map is equivalent to an empty map except that no elements\r\n> may be added.\"\r\n>\r\n> I would prefer:\r\n> \"A nil map is equivalent to an empty map except that it may not be\r\n> {mutated,modified,written}.\"\r\n>\r\n> Similar to how we permit reading a nil channel, but not sending on it or\r\n> closing it.\r\n>\r\n>\r\n> On Mon, Dec 10, 2012 at 1:42 PM, Russ Cox <rsc@golang.org> wrote:\r\n>>\r\n>> LGTM but wait for others\r\n>>\r\n>> Background: the spec used to be self-conflicting. It said this part\r\n>> about panic but also said:\r\n>>     A nil map is equivalent to an empty map except that no elements\r\n>> may be added.\r\n>>\r\n>> This edit brings the delete semantics in line with that general rule.\r\n>>\r\n>> Russ\r\n>\r\n>\r\n",
			"disapproval": false,
			"date": "2012-12-10 19:35:46.791420",
			"approval": false
		},
		{
			"sender": "rogpeppe@gmail.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On 10 December 2012 19:36, Russ Cox <rsc@golang.org> wrote:\r\n> On Mon, Dec 10, 2012 at 1:59 PM, Brad Fitzpatrick <bradfitz@golang.org> wrote:\r\n>> I would prefer deletes on a nil map explode on me... I would assume that's\r\n>> always my bug.\r\n>\r\n> My experience is the opposite. Most of the time I do delete(x, key) I\r\n> have to put in a special case for x being nil.\r\n\r\ni agree. i've wanted this change before, and i'm definitely +1 on it now.\r\n",
			"disapproval": false,
			"date": "2012-12-11 12:12:02.977290",
			"approval": false
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "PTAL\r\nAny others?\r\n- gri\r\n\r\nOn Mon, Dec 10, 2012 at 10:42 AM, Russ Cox <rsc@golang.org> wrote:\r\n> LGTM but wait for others\r\n>\r\n> Background: the spec used to be self-conflicting. It said this part\r\n> about panic but also said:\r\n>     A nil map is equivalent to an empty map except that no elements\r\n> may be added.\r\n>\r\n> This edit brings the delete semantics in line with that general rule.\r\n>\r\n> Russ\r\n",
			"disapproval": false,
			"date": "2012-12-12 19:13:08.027270",
			"approval": false
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"bradfitz@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\n(Actually I don't really care.)",
			"disapproval": false,
			"date": "2012-12-12 21:04:57.146610",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"gri@golang.org",
				"rsc@golang.org",
				"r@golang.org",
				"iant@golang.org",
				"ken@golang.org",
				"bradfitz@golang.org",
				"rogpeppe@gmail.com",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as https://code.google.com/p/go/source/detail?r=d09a8b21b517 ***\n\nspec: calling delete on a nil map is a no-op\n\nThis is language change. It is a backward-compatible\nchange but for code that relies on a run-time panic\nwhen calling delete on a nil map (unlikely).\n\nFixes issue 4253.\n\nR=rsc, r, iant, ken, bradfitz, rogpeppe\nCC=golang-dev\nhttps://codereview.appspot.com/6909060",
			"disapproval": false,
			"date": "2012-12-12 21:08:40.601380",
			"approval": false
		}
	],
	"owner_email": "gri@golang.org",
	"private": false,
	"base_url": "",
	"owner": "gri",
	"subject": "code review 6909060: spec: calling delete on a nil map is a no-op",
	"created": "2012-12-10 18:23:26.927420",
	"patchsets": [
		1,
		3,
		7001,
		11001
	],
	"modified": "2012-12-21 04:45:12.513690",
	"closed": true,
	"issue": 6909060
}