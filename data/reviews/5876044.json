{
	"description": "cmd/gc: when expanding append inline, preserve arguments\n\nFixes issue 3369.",
	"cc": [
		"golang-dev@googlegroups.com",
		"gri@golang.org",
		"lvd@golang.org",
		"r@golang.org"
	],
	"reviewers": [
		"bradfitz@golang.org",
		"iant@google.com",
		"rsc@golang.org"
	],
	"messages": [
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Hello golang-dev@googlegroups.com,\n\nI'd like you to review this change to\nhttps://go.googlecode.com/hg/",
			"disapproval": false,
			"date": "2012-03-21 22:59:34.066405",
			"approval": false
		},
		{
			"sender": "r@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"lvd@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-03-22 02:18:08.397938",
			"approval": true
		},
		{
			"sender": "gri@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM",
			"disapproval": false,
			"date": "2012-03-21 23:16:09.491293",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"lvd@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Luuk, since rsc is on vacation, can you take a quick look at this?",
			"disapproval": false,
			"date": "2012-03-21 23:54:56.740011",
			"approval": false
		},
		{
			"sender": "lvd@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "cheapexpr is supposed to be or quickly become a noop, the real fix should\nbe in order.c, let me quickly try that\n\nOn Thu, Mar 22, 2012 at 03:18, <r@golang.org> wrote:\n\n> LGTM\n>\n> http://codereview.appspot.com/**5876044/<http://codereview.appspot.com/5876044/>\n>\n",
			"disapproval": false,
			"date": "2012-03-22 10:14:42.492961",
			"approval": false
		},
		{
			"sender": "lvd@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Mar 22, 2012 at 11:14, Luuk van Dijk <lvd@golang.org> wrote:\n\n> cheapexpr is supposed to be or quickly become a noop, the real fix should\n> be in order.c, let me quickly try that\n>\n>\ni was confused with safeexpr.  that arguments are evaluated before the\nstart of the function is enforced by the way calls (and inlining) work so\nthis is a special case.  here it should have been handled by the\nwalkexprlistsafe at line 2359, but safeexpr leaves n[i] alone if both n and\ni are names or literals.  so i think the clearer fix would be to add just\nbelow that a comment+loop like\n\n// walkexprlistsafe/safeexpr will leave OINDEX (s[n]) alone if\n// both s and n are name or literal, but those may index the\n// slice we're modifying here.  Fix explicitly.\nfor (l = n->list; l; l = l->next)\nl->n = cheapexpr(l->n, init);\n\n...\n\n\n> On Thu, Mar 22, 2012 at 03:18, <r@golang.org> wrote:\n>\n>> LGTM\n>>\n>> http://codereview.appspot.com/**5876044/<http://codereview.appspot.com/5876044/>\n>>\n>\n>\n",
			"disapproval": false,
			"date": "2012-03-22 12:46:07.996479",
			"approval": false
		},
		{
			"sender": "lvd@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "On Thu, Mar 22, 2012 at 13:46, Luuk van Dijk <lvd@golang.org> wrote:\n\n>\n> On Thu, Mar 22, 2012 at 11:14, Luuk van Dijk <lvd@golang.org> wrote:\n>\n>> cheapexpr is supposed to be or quickly become a noop, the real fix should\n>> be in order.c, let me quickly try that\n>>\n>>\n> i was confused with safeexpr.  that arguments are evaluated before the\n> start of the function is enforced by the way calls (and inlining) work so\n> this is a special case.  here it should have been handled by the\n> walkexprlistsafe at line 2359, but safeexpr leaves n[i] alone if both n and\n> i are names or literals.  so i think the clearer fix would be to add just\n> below that a comment+loop like\n>\n> // walkexprlistsafe/safeexpr will leave OINDEX (s[n]) alone if\n> // both s and n are name or literal, but those may index the\n>  // slice we're modifying here.  Fix explicitly.\n> for (l = n->list; l; l = l->next)\n>  l->n = cheapexpr(l->n, init);\n>\n>\nLGTM either way.  but at least a comment explaining why it's neccesary\nwould be nice.\n\n\n> ...\n>\n>\n>> On Thu, Mar 22, 2012 at 03:18, <r@golang.org> wrote:\n>>\n>>> LGTM\n>>>\n>>> http://codereview.appspot.com/**5876044/<http://codereview.appspot.com/5876044/>\n>>>\n>>\n>>\n>\n",
			"disapproval": false,
			"date": "2012-03-22 12:54:48.997663",
			"approval": true
		},
		{
			"sender": "iant@golang.org",
			"recipients": [
				"iant@golang.org",
				"golang-dev@googlegroups.com",
				"gri@golang.org",
				"lvd@golang.org",
				"r@golang.org",
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "*** Submitted as http://code.google.com/p/go/source/detail?r=75162220fd1e ***\n\ncmd/gc: when expanding append inline, preserve arguments\n\nFixes issue 3369.\n\nR=golang-dev, gri, lvd, r\nCC=golang-dev\nhttp://codereview.appspot.com/5876044",
			"disapproval": false,
			"date": "2012-03-22 16:44:35.417813",
			"approval": false
		},
		{
			"sender": "bradfitz@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "s/along/alone/ typo\n\nalso, why spaces around one the = in one assignment but not the other\nassignment?  I don't get this C style.\n\nOn Thu, Mar 22, 2012 at 9:44 AM, <iant@golang.org> wrote:\n\n> *** Submitted as\n> http://code.google.com/p/go/**source/detail?r=75162220fd1e<http://code.google.com/p/go/source/detail?r=75162220fd1e>***\n>\n>\n> cmd/gc: when expanding append inline, preserve arguments\n>\n> Fixes issue 3369.\n>\n> R=golang-dev, gri, lvd, r\n> CC=golang-dev\n> http://codereview.appspot.com/**5876044<http://codereview.appspot.com/5876044>\n>\n>\n> http://codereview.appspot.com/**5876044/<http://codereview.appspot.com/5876044/>\n>\n",
			"disapproval": false,
			"date": "2012-03-22 16:53:22.499640",
			"approval": false
		},
		{
			"sender": "iant@google.com",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "Brad Fitzpatrick <bradfitz@golang.org> writes:\n\n> s/along/alone/ typo\n>\n> also, why spaces around one the = in one assignment but not the other\n> assignment?  I don't get this C style.\n\nSigh.  I sent you a new CL.\n\nIan\n",
			"disapproval": false,
			"date": "2012-03-22 17:58:05.579396",
			"approval": false
		},
		{
			"sender": "rsc@golang.org",
			"recipients": [
				"reply@codereview-hr.appspotmail.com"
			],
			"text": "LGTM\n\nOuch, thank you.\n",
			"disapproval": false,
			"date": "2012-03-26 14:04:19.925179",
			"approval": true
		}
	],
	"owner_email": "iant@golang.org",
	"private": false,
	"base_url": "",
	"owner": "iant",
	"subject": "code review 5876044: cmd/gc: when expanding append inline, preserve arguments",
	"created": "2012-03-21 22:59:29.852960",
	"patchsets": [
		1,
		1005
	],
	"modified": "2012-03-26 14:04:20.092677",
	"closed": true,
	"issue": 5876044
}