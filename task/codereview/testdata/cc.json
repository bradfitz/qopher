{"cursor":"E-ABAOsB8gEIbW9kaWZpZWT6AQkIgqf5zLeWtwLsAYICIWoPc35jb2RlcmV2aWV3LWhycg4LEgVJc3N1ZRisnL4EDBQ=","results":[{"description":"flag: add Getter interface; implement for all Value types\n\nFixes issue 5383.","cc":["golang-dev@googlegroups.com","0xjnml@gmail.com","r@golang.org","rsc@golang.org"],"reviewers":[],"owner_email":"rickarnoldjr@gmail.com","private":false,"base_url":"","owner":"rick","subject":"code review 10472043: flag: add Getter interface; implement for all Value types","created":"2013-06-23 19:27:13.861430","patchsets":[1,3001,6001,15001,18001,23001],"modified":"2013-06-27 22:30:49.794090","closed":false,"issue":10472043},{"description":"runtime: preempt goroutines for GC\nThe last patch for preemptive scheduler,\nwith this change stoptheworld issues preemption\nrequests every 100us.\nUpdate issue 543.","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","daniel.morsing@gmail.com","rsc@golang.org"],"owner_email":"dvyukov@google.com","private":false,"base_url":"","owner":"dvyukov","subject":"code review 10264044: runtime: preempt goroutines for GC","created":"2013-06-13 13:49:57.716850","patchsets":[1,2001,4001,7001,3,5007,2002,21001,24001,27001,30001,45001,45002,56001],"modified":"2013-06-27 21:21:37.357870","closed":false,"issue":10264044},{"description":"crypto/x509: Added RFC 5280, section 4.2.2.1 Authority Information Access","cc":["agl@chromium.org","agl@golang.org","gobot@golang.org","golang-dev@googlegroups.com"],"reviewers":[],"owner_email":"paul@vanbrouwershaven.com","private":false,"base_url":"","owner":"Paul van Brouwershaven","subject":"code review 10245048: crypto/x509: Added RFC 5280, section 4.2.2.1 Authority ...","created":"2013-06-14 07:39:14.208790","patchsets":[5001,20001,25001],"modified":"2013-06-27 21:16:40.103300","closed":false,"issue":10245048},{"description":"runtime: fix CPU underutilization\nruntime.newproc/ready are deliberately sloppy about waking new M's,\nthey only ensure that there is at least 1 spinning M.\nCurrently to compensate for that, schedule() checks if the current P\nhas local work and there are no spinning M's, it wakes up another one.\nIt does not work if goroutines do not call schedule.\nWith this change a spinning M wakes up another M when it finds work to do.\nIt's also not ideal, but it fixes the underutilization.\nA proper check would require to know the exact number of runnable G's,\nbut it's too expensive to maintain.\nFixes issue 5586.","cc":["rsc@golang.org","gobot@golang.org","golang-dev@googlegroups.com"],"reviewers":[],"owner_email":"dvyukov@google.com","private":false,"base_url":"","owner":"dvyukov","subject":"code review 9776044: runtime: fix CPU underutilization","created":"2013-06-05 11:41:16.215650","patchsets":[1,1001,4001,7001,9001,14001,20001,23001],"modified":"2013-06-27 20:33:47.577360","closed":false,"issue":9776044},{"description":"misc/vim: Handle import paths with periods in Godoc\n\nThis patch makes the Godoc Vim plugin correctly split package\nnames with periods in them.\n\nFixes issue 5656.","cc":["dsymonds@golang.org","gobot@golang.org","golang-dev@googlegroups.com"],"reviewers":["dsymonds@golang.org","kamil.kisiel@gmail.com","dan.kortschak@adelaide.edu.au"],"owner_email":"676c7473@gmail.com","private":false,"base_url":"","owner":"glts","subject":"code review 10564043: misc/vim: Handle import paths with periods in Godoc","created":"2013-06-25 19:48:04.836700","patchsets":[1,3001,6001,16001,30001],"modified":"2013-06-27 20:22:43.245600","closed":false,"issue":10564043},{"description":"runtime: introduce GODEBUG env var\nCurrently it replaces GOGCTRACE env var (GODEBUG=gctrace=1).\nThe plan is to extend it with other type of debug tracing,\ne.g. GODEBUG=gctrace=1,schedtrace=100.","cc":["golang-dev@googlegroups.com","daniel.morsing@gmail.com","bradfitz@golang.org","gobot@golang.org"],"reviewers":["rsc@golang.org"],"owner_email":"dvyukov@google.com","private":false,"base_url":"","owner":"dvyukov","subject":"code review 10026045: runtime: introduce GODEBUG env var","created":"2013-06-05 11:52:31.106880","patchsets":[1,2001,5001,8001,10001,12001,19001,25001,31001],"modified":"2013-06-27 20:21:07.697970","closed":false,"issue":10026045},{"description":"crypto/tls: Change TLS version to 1.1 in the package comment.\n\nAlso use 2048-bit RSA keys as default in generate_cert.go,\nas recommended by the NIST.","cc":["golang-dev@googlegroups.com","rsc@golang.org","bradfitz@golang.org"],"reviewers":[],"owner_email":"sfrithjof@gmail.com","private":false,"base_url":"","owner":"sfrithjof","subject":"code review 10676043: crypto/tls: Change TLS version to 1.1 in the package co...","created":"2013-06-27 09:50:10.242080","patchsets":[1,2001,2002,6001],"modified":"2013-06-27 18:24:00.318150","closed":false,"issue":10676043},{"description":"database/sql: Add SetMaxOpenConns()\n\nAdd the ability to set an open connection limit.\nFixed case where the Conn finalCloser was being called with db.mu locked.\nAdded seperate benchmarks for each path for Exec and Query.","cc":["golang-dev@googlegroups.com"],"reviewers":["google@julienschmidt.com","bradfitz@golang.org","nightlyone@googlemail.com"],"owner_email":"Tad.Glines@gmail.com","private":false,"base_url":"","owner":"Tad Glines","subject":"code review 9789044: database/sql: Add SetMaxOpenConns()","created":"2013-05-26 16:44:52.890510","patchsets":[1,2001,9001],"modified":"2013-06-27 18:16:07.765030","closed":false,"issue":9789044},{"description":"cmd/gc: fix computation of equality class of types.\n\nA struct with a single field was considered as equivalent to the\nfield type, which is incorrect is the field is blank.\n\nFields with padding could make the compiler think some\ntypes are comparable when they are not.\n\nFixes issue 5698.","cc":["golang-dev@googlegroups.com"],"reviewers":["rsc@golang.org","golang-dev@googlegroups.com","daniel.morsing@gmail.com","bradfitz@golang.org","gri@golang.org","r@golang.org"],"owner_email":"remyoudompheng@gmail.com","private":false,"base_url":"","owner":"remyoudompheng","subject":"code review 10271046: cmd/gc: fix computation of equality class of types.","created":"2013-06-13 21:18:26.553990","patchsets":[1,3,1002,5001],"modified":"2013-06-27 17:14:25.012120","closed":false,"issue":10271046},{"description":"runtime: prevent a panic from leaving the timer mutex held\n\nWhen deleting a timer, a panic due to nil deref\nwould leave a lock held, possibly leading to a deadlock\nin a defer. Instead return false on a nil timer.\n\nFixes issue 5745.","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","daniel.morsing@gmail.com","dvyukov@google.com","rsc@golang.org","iant@golang.org"],"owner_email":"jeff.allen@gmail.com","private":false,"base_url":"","owner":"jeff.allen","subject":"code review 10373047: runtime: prevent a panic from leaving the timer mutex held","created":"2013-06-21 08:24:40.470410","patchsets":[1,3001,11001,6003,9002,23001,30001],"modified":"2013-06-27 17:10:32.341470","closed":false,"issue":10373047},{"description":"runtime: handle timer overflow in tsleep\n\nMake sure we never pass a timer into timerproc with\na negative duration since it will cause other timers\nto never expire.\n\nFixes issue 5321.","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","minux.ma@gmail.com","remyoudompheng@gmail.com","mikioh.mikioh@gmail.com","r@golang.org","bradfitz@golang.org","rsc@golang.org"],"owner_email":"ality@pbrane.org","private":false,"base_url":"","owner":"ality","subject":"code review 9035047: runtime: handle timer overflow in tsleep","created":"2013-05-07 09:44:31.259580","patchsets":[1,2001,2002,7001,14001,23001,22002,35001],"modified":"2013-06-27 15:48:48.667390","closed":false,"issue":9035047},{"description":"cmd/gc: inline copy in frontend to call memmove directly.\n\nA new node type OSPTR is added to refer to the data pointer of\nstrings and slices in a simple way during walk(). It will be\nuseful for future work on simplification of slice arithmetic.\n\nbenchmark                  old ns/op    new ns/op    delta\nBenchmarkCopy1Byte                10            4  -52.52%\nBenchmarkCopy2Byte                36           26  -28.02%\nBenchmarkCopy4Byte                74           55  -25.84%\nBenchmarkCopy8Byte                36           26  -27.75%\nBenchmarkCopy12Byte               74           55  -25.84%\nBenchmarkCopy16Byte               36           26  -28.02%\nBenchmarkCopy32Byte               36           26  -28.02%\nBenchmarkCopy128Byte              38           28  -24.61%\nBenchmarkCopy1024Byte            107           96  -10.28%\nBenchmarkCopy1String              27            4  -84.11%\nBenchmarkCopy2String              27           25   -4.44%\nBenchmarkCopy4String              56           54   -3.02%\nBenchmarkCopy8String              27           25   -4.81%\nBenchmarkCopy12String             56           54   -3.02%\nBenchmarkCopy16String             27           25   -4.44%\nBenchmarkCopy32String             27           25   -5.17%\nBenchmarkCopy128String            29           28   -4.05%\nBenchmarkCopy1024String           96           96   -0.41%\n\nbenchmark                   old MB/s     new MB/s  speedup\nBenchmarkCopy1Byte             96.75       204.34    2.11x\nBenchmarkCopy2Byte             54.91        76.35    1.39x\nBenchmarkCopy4Byte             53.58        72.26    1.35x\nBenchmarkCopy8Byte            219.74       304.05    1.38x\nBenchmarkCopy12Byte           160.72       216.76    1.35x\nBenchmarkCopy16Byte           439.27       611.25    1.39x\nBenchmarkCopy32Byte           879.09      1222.41    1.39x\nBenchmarkCopy128Byte         3354.53      4437.76    1.32x\nBenchmarkCopy1024Byte        9490.74     10670.42    1.12x\nBenchmarkCopy1String           36.99       233.05    6.30x\nBenchmarkCopy2String           73.98        77.52    1.05x\nBenchmarkCopy4String           71.16        73.40    1.03x\nBenchmarkCopy8String          295.92       310.71    1.05x\nBenchmarkCopy12String         213.49       220.17    1.03x\nBenchmarkCopy16String         591.64       620.20    1.05x\nBenchmarkCopy32String        1182.17      1242.93    1.05x\nBenchmarkCopy128String       4320.98      4507.24    1.04x\nBenchmarkCopy1024String     10591.94     10633.94    1.00x","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","bradfitz@golang.org","cshapiro@google.com","dave@cheney.net","daniel.morsing@gmail.com","rsc@golang.org"],"owner_email":"remyoudompheng@gmail.com","private":false,"base_url":"","owner":"remyoudompheng","subject":"code review 9101048: cmd/gc: inline copy in frontend to call memmove directly.","created":"2013-05-14 23:29:04.271690","patchsets":[1,2001,4001,13001],"modified":"2013-06-27 15:41:37.234320","closed":false,"issue":9101048},{"description":"cmd/gc: avoid right recursion in unary expression parsing.\n\nLeft recursion allows for tail-call optimization and avoids\noverflowing Bison stack.\n\nFixes issue 5598.","cc":["golang-dev@googlegroups.com","arnehormann@gmail.com","gobot@golang.org"],"reviewers":["rsc@golang.org","daniel.morsing@gmail.com","dave@cheney.net"],"owner_email":"remyoudompheng@gmail.com","private":false,"base_url":"","owner":"remyoudompheng","subject":"code review 9933043: cmd/gc: avoid right recursion in unary expression parsing.","created":"2013-06-01 11:17:37.441870","patchsets":[1,2001,5001,9001],"modified":"2013-06-27 15:41:06.101930","closed":false,"issue":9933043},{"description":"image/gif: do not allow pixels outside the current palette\n\nAfter loading a frame of a GIF, check that each pixel\nis inside the frame's palette.\n\nFixes issue 5401.","cc":["golang-dev@googlegroups.com"],"reviewers":["nigeltao@golang.org","r@golang.org"],"owner_email":"jeff.allen@gmail.com","private":false,"base_url":"","owner":"jeff.allen","subject":"code review 10597043: image/gif: do not allow pixels outside the current palette","created":"2013-06-26 08:05:31.409320","patchsets":[1,3001,6001,3002,14001,20001],"modified":"2013-06-27 14:49:33.619710","closed":false,"issue":10597043},{"description":"go.text/transform: new package.\n\nThis CL only provides the Reader type; Writer will be in a follow-up.","cc":["andybalholm@gmail.com","golang-dev@googlegroups.com","rogpeppe@gmail.com"],"reviewers":["mpvl@golang.org","r@golang.org","mpvl@google.com"],"owner_email":"nigeltao@golang.org","private":false,"base_url":"","owner":"nigeltao","subject":"code review 10538043: go.text/transform: new package.","created":"2013-06-25 10:13:36.823060","patchsets":[1,2001,4001,15001],"modified":"2013-06-27 14:07:50.683210","closed":false,"issue":10538043},{"description":"net: implement netpoll for windows","cc":["golang-dev@googlegroups.com"],"reviewers":["dvyukov@google.com"],"owner_email":"alex.brainman@gmail.com","private":false,"base_url":"","owner":"brainman","subject":"code review 8670044: net: implement netpoll for windows","created":"2013-04-18 07:32:57.830290","patchsets":[1,2001,12001,26001,44001,57001,73001,81001,90001,102001],"modified":"2013-06-27 12:14:49.783110","closed":false,"issue":8670044},{"description":"crypto/sha512: update comment for the Sum512 function.","cc":["golang-dev@googlegroups.com","r@golang.org"],"reviewers":[],"owner_email":"r.eklind.87@gmail.com","private":false,"base_url":"","owner":"u","subject":"code review 10660043: crypto/sha512: update comment for the Sum512 function.","created":"2013-06-26 23:44:21.371160","patchsets":[1,3001,6001],"modified":"2013-06-27 10:52:00.052500","closed":false,"issue":10660043},{"description":"net/rpc: enable type names for arg and reply unexported\n\nFixes issue 3163.","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","r@golang.org","rsc@golang.org"],"owner_email":"chaishushan@gmail.com","private":false,"base_url":"","owner":"chai2010","subject":"code review 10544043: net/rpc: enable type names for arg and reply unexported","created":"2013-06-25 13:50:42.352070","patchsets":[1,2001,10001],"modified":"2013-06-26 17:51:55.250450","closed":false,"issue":10544043},{"description":"appengine: add service account helpers","cc":["golang-dev@googlegroups.com","adg@golang.org"],"reviewers":[],"owner_email":"proppy@google.com","private":false,"base_url":"","owner":"proppy","subject":"code review 9998043: oauth/appengine: add service account helpers","created":"2013-06-04 06:34:22.640720","patchsets":[1,2001,6001,8001,13001,19001,22002,34001,44001,51002,59001],"modified":"2013-06-26 01:50:59.437370","closed":false,"issue":9998043},{"description":"encoding/json: Enable decoding of numbers and booleans to Go string values","cc":["golang-dev@googlegroups.com","nightlyone@googlemail.com","gobot@golang.org"],"reviewers":["rsc@golang.org"],"owner_email":"raggi@google.com","private":false,"base_url":"","owner":"raggi","subject":"code review 10293043: encoding/json: Enable decoding of numbers and booleans ...","created":"2013-06-15 03:25:26.450930","patchsets":[1,2001,5001,12001,12004,16001],"modified":"2013-06-25 04:21:14.588780","closed":false,"issue":10293043},{"description":"sort: implement stable sorting\n\nThis CL provides stable in-place sorting by use of\nbottom up merge sort with in-place merging done by\nthe SymMerge algorithm from P.-S. Kim and A. Kutzner.\n\nThe additional space needed for stable sorting (in the form of\nstack space) is logarithmic in the inputs size n.\nNumber of calls to Less and Swap grow like O(n * log n) and\nO(n * log n * log n):\nStable sorting random data uses significantly more calls\nto Swap than the unstable quicksort implementation (5 times more\non n=100, 10 times more on n=1e4 and 23 times more on n=1e8).\nThe number of calls to Less is practically the same for Sort and\nStable.\n\nStable sorting 1 million random integers takes 5 times longer\nthan using Sort.\n\nBenchmarkSortString1K      50000       328662 ns/op\nBenchmarkStableString1K    50000       380231 ns/op  1.15 slower\nBenchmarkSortInt1K         50000       157336 ns/op\nBenchmarkStableInt1K       50000       191167 ns/op  1.22 slower\nBenchmarkSortInt64K         1000     14466297 ns/op\nBenchmarkStableInt64K        500     16190266 ns/op  1.12 slower\n\nBenchmarkSort1e2          200000        64923 ns/op\nBenchmarkStable1e2         50000       167128 ns/op  2.57 slower\nBenchmarkSort1e4            1000     14540613 ns/op\nBenchmarkStable1e4           100     58117289 ns/op  4.00 slower\nBenchmarkSort1e6               5   2429631508 ns/op\nBenchmarkStable1e6             1  12077036952 ns/op  4.97 slower","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","bradfitz@golang.org","iant@golang.org","0xjnml@gmail.com","rsc@golang.org"],"owner_email":"dr.volker.dobler@gmail.com","private":false,"base_url":"","owner":"volker.dobler","subject":"code review 9612044:   sort: provide different stable sort algorithms","created":"2013-05-21 09:01:44.542430","patchsets":[1,2001,5001,7001,15001,18001,21001,24001,27001,33001,40001],"modified":"2013-06-24 21:28:58.873240","closed":false,"issue":9612044},{"description":"time: avoid garbage collector aliasing bug\n\nTime is a tiny struct, so the compiler copies a Time by\ncopying each of the three fields.\n\nThe layout of a time on amd64 is [ptr int32 gap32 ptr].\nCopying a Time onto a location that formerly held a pointer in the\nsecond word changes only the low 32 bits, creating a different\nbut still plausible pointer. This confuses the garbage collector\nwhen it appears in argument or result frames.\n\nTo avoid this problem, declare nsec as uintptr, so that there is\nno gap on amd64 anymore, and therefore no partial pointers.\n\nNote that rearranging the fields to put the int32 last still leaves\na gap - [ptr ptr int32 gap32] - because Time must have a total\nsize that is ptr-width aligned.\n\nUpdate issue 5749\n\nThis CL is enough to fix the problem, but we should still do\nthe other actions listed in the initial report. We're not too far\nfrom completely precise collection.","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","dvyukov@google.com","r@golang.org"],"owner_email":"rsc@golang.org","private":false,"base_url":"","owner":"rsc","subject":"code review 10504043: time: avoid garbage collector aliasing bug","created":"2013-06-24 14:58:36.617120","patchsets":[1,3001,8001],"modified":"2013-06-24 18:49:34.597910","closed":false,"issue":10504043},{"description":"go.talks/present: Fix swiping on Android so it works past the third slide.\nUsed the suggestion found here: http://stackoverflow.com/a/11613327\n\nFixes issue 5004.","cc":["adg@golang.org","golang-dev@googlegroups.com"],"reviewers":[],"owner_email":"couchmoney@gmail.com","private":false,"base_url":"","owner":"wathiede","subject":"code review 7631043: go.talks/present: Fix swiping on Android so it works pa...","created":"2013-03-08 06:57:05.473410","patchsets":[1,2001,5001],"modified":"2013-06-24 03:54:26.293460","closed":false,"issue":7631043},{"description":"path/filepath: ignore case when matching on windows\n\nFixes issue 5441.","cc":["golang-dev@googlegroups.com"],"reviewers":["rsc@golang.org","r@golang.org","minux.ma@gmail.com"],"owner_email":"alex.brainman@gmail.com","private":false,"base_url":"","owner":"brainman","subject":"code review 9666048: path/filepath: ignore case when matching on windows","created":"2013-05-29 04:46:10.654600","patchsets":[1,2001,7001],"modified":"2013-06-23 10:30:10.039780","closed":false,"issue":9666048},{"description":"cmd/gc: fix missing export data for inlining in a few other cases.\n\nExported inlined functions that perform a string conversion\nusing a non-exported named type may miss it in export data.\n\nFixes issue 5755.","cc":["golang-dev@googlegroups.com"],"reviewers":["rsc@golang.org","golang-dev@googlegroups.com","ality@pbrane.org"],"owner_email":"remyoudompheng@gmail.com","private":false,"base_url":"","owner":"remyoudompheng","subject":"code review 10464043: cmd/gc: fix missing export data for inlining in a few o...","created":"2013-06-23 08:55:59.394600","patchsets":[1,2002,4001],"modified":"2013-06-23 10:28:22.208770","closed":false,"issue":10464043},{"description":"os/exec: fix leaked http transport in TestExtraFiles\r\n\r\nThe http.Get call was leaking a file descriptor. This fd would normally be cleaned up by the finaliser on os.File, but occasionally this was not done in time.\r\n\r\nI originally believed this would address issue 5593, but I think the comment, http://golang.org/src/pkg/os/file_unix.go#L82, explains why this test is unreliable on OS X 10.6","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","minux.ma@gmail.com"],"owner_email":"dave@cheney.net","private":false,"base_url":"","owner":"dfc","subject":"code review 10402045: os/exec: fix leaked http transport in TestExtraFiles","created":"2013-06-19 03:28:59.369100","patchsets":[1,2001,5001,8001,11001],"modified":"2013-06-22 10:56:46.379740","closed":false,"issue":10402045},{"description":"go.net/ipv4: update package documentation\n\n- fix more multicasting section as pointed out in go.net/ipv6 review\n- simplify example codes","cc":["golang-dev@googlegroups.com"],"reviewers":["dave@cheney.net"],"owner_email":"mikioh.mikioh@gmail.com","private":false,"base_url":"","owner":"mikio","subject":"code review 10322043: go.net/ipv4: update package documentation","created":"2013-06-16 10:10:32.727800","patchsets":[1,2001,5001],"modified":"2013-06-22 02:10:23.811950","closed":false,"issue":10322043},{"description":"strings: Optimized Replace to be 2x faster.\n\nThe main idea is to avoid replace count calculation.\nIf len(old) <= len(new) , we make a string with 0 length and a cap of len(s), otherwise we make a string with 0 length and a cap of len(s)*1.5.\n\nThe downside is a small proportion of memory will be wasted. but if the len(old) == len(new), there would be no tradeoff at all.\n\nbenchmark                    old ns/op    new ns/op    delta\nBenchmarkByteByteReplaces         8480         1364  -83.92%\nBenchmarkReplaceByteByte         10015         3806  -62.00%\nBenchmarkReplaceDefault          13495         7356  -45.49%\nBenchmarkReplaceOldEmpty        101105        45022  -55.47%\n\nbenchmark                     old MB/s     new MB/s  speedup\nBenchmarkReplaceByteByte        149.77       394.09    2.63x\nBenchmarkReplaceDefault         111.15       203.90    1.83x\nBenchmarkReplaceOldEmpty         14.84        33.32    2.25x","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","bradfitz@golang.org","rsc@golang.org"],"owner_email":"coocood@gmail.com","private":false,"base_url":"","owner":"Ewan Chou","subject":"code review 7432050: strings: Optimized Replace to be 2x faster.","created":"2013-03-03 08:36:46.202910","patchsets":[1,29001],"modified":"2013-06-22 00:58:38.474390","closed":false,"issue":7432050},{"description":"cmd/go: don't overwrite when pulling\nThe linked-to bug was released a year ago.","cc":["golang-dev@googlegroups.com"],"reviewers":["n13m3y3r@gmail.com","rsc@golang.org","gustavo@niemeyer.net"],"owner_email":"rogpeppe@gmail.com","private":false,"base_url":"","owner":"rog","subject":"code review 10455043: cmd/go: don't overwrite when pulling","created":"2013-06-21 12:51:01.705050","patchsets":[1,3001,5001],"modified":"2013-06-21 21:21:50.603110","closed":false,"issue":10455043},{"description":"cmd/gc: fix detection of initialization loop.\n\nThe compiler computes initialization order by finding\na spanning tree between a package's global variables.\nBut it does so by walking both variables and functions\nand stops detecting cycles between variables when they\nmix with a cycle of mutually recursive functions.\n\nFixes issue 4847.","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","daniel.morsing@gmail.com","rsc@golang.org"],"owner_email":"remyoudompheng@gmail.com","private":false,"base_url":"","owner":"remyoudompheng","subject":"code review 9663047: cmd/gc: fix detection of initialization loop.","created":"2013-05-27 06:08:25.155890","patchsets":[1,1002,4001,10001,13001],"modified":"2013-06-21 19:43:35.567040","closed":false,"issue":9663047},{"description":"runtime: fix runtime.sigreturn_tramp for NetBSD/ARM\nusing m->tls[0] to save ucontext pointer is not re-entry safe, and\nthe old code didn't set it before the early return when signal is\nreceived on non-Go threads.\n\nso misc/cgo/test used to hang when testing issue 5337.","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","bradfitz@golang.org","rsc@golang.org"],"owner_email":"minux.ma@gmail.com","private":false,"base_url":"","owner":"minux","subject":"code review 10076045: runtime: fix runtime.sigreturn_tramp for NetBSD/ARM","created":"2013-06-12 12:50:53.219210","patchsets":[1,2001,5001,4002],"modified":"2013-06-21 18:30:57.582300","closed":false,"issue":10076045},{"description":"go.crypto/ssh: add hook for host key checking.","cc":["dave@cheney.net","agl@golang.org","gobot@golang.org","golang-dev@googlegroups.com"],"reviewers":[],"owner_email":"hanwen@google.com","private":false,"base_url":"","owner":"hanwen","subject":"code review 9922043: go.crypto/ssh: add hook for host key checking.","created":"2013-05-31 22:18:03.862480","patchsets":[1,1001,3001,9002,15001,20001,21001,23001,35001,38001,37005,42001,48001,56001,59001],"modified":"2013-06-21 16:46:54.867890","closed":false,"issue":9922043},{"description":"    net/url: Add support for encoding/decoding Userinfo objects with gob\r\n\r\nThis also makes url.URL objects support encoding/decoding with gob","cc":["golang-dev@googlegroups.com","adg@golang.org","gobot@golang.org"],"reviewers":["r@golang.org","bradfitz@golang.org"],"owner_email":"alberto.garcia.hierro@gmail.com","private":false,"base_url":"","owner":"Hierro","subject":"code review 8325045:     net/url: Add support for encoding/decoding Userinfo...","created":"2013-04-08 08:54:27.259500","patchsets":[1,2001,5001,12002,18001],"modified":"2013-06-20 20:18:53.992050","closed":false,"issue":8325045},{"description":"cmd/ld: handle duplicate static symbols in COFF and Mach-O files.\nFixes issue 5740.","cc":["golang-dev@googlegroups.com","gobot@golang.org"],"reviewers":["iant@golang.org"],"owner_email":"minux.ma@gmail.com","private":false,"base_url":"","owner":"minux","subject":"code review 10345046: cmd/ld: handle duplicate static symbols in COFF files.","created":"2013-06-20 16:22:01.789400","patchsets":[1,2001,7001,11001],"modified":"2013-06-20 20:00:28.981050","closed":false,"issue":10345046},{"description":"os/exec: make exec_test.go:TestExtraFilesFDShuffle portable.","cc":["golang-dev@googlegroups.com","minux.ma@gmail.com"],"reviewers":["bradfitz@golang.org","fullung@gmail.com","dave@cheney.net"],"owner_email":"cnicolaou@google.com","private":false,"base_url":"","owner":"cnicolaou","subject":"code review 9103045: os/exec: make exec_test.go:TestExtraFilesFDShuffle portable.","created":"2013-05-02 17:06:06.282510","patchsets":[1,2001,5001,8001],"modified":"2013-06-19 13:37:52.191230","closed":false,"issue":9103045},{"description":"net: remove unnecessary conversion from literal IP address to IP\n\nI've completely forgot to do this in the transition of replacing\nhostPortToIP with resolveInternetAddr.\n\nbenchmark              old ns/op    new ns/op    delta\nBenchmarkDialTCP4-2       106398       100143   -5.88%\n\nbenchmark             old allocs   new allocs    delta\nBenchmarkDialTCP4-2           55           40  -27.27%\n\nbenchmark              old bytes    new bytes    delta\nBenchmarkDialTCP4-2         1941         1643  -15.35%","cc":["golang-dev@googlegroups.com","gobot@golang.org"],"reviewers":["bradfitz@golang.org","dave@cheney.net"],"owner_email":"mikioh.mikioh@gmail.com","private":false,"base_url":"","owner":"mikio","subject":"code review 10105044: net: remove unnecessary conversion from literal IP addr...","created":"2013-06-07 03:27:53.358650","patchsets":[1,2001,5001],"modified":"2013-06-19 02:44:01.935750","closed":false,"issue":10105044},{"description":"net/http: Make ReadResponse work with a nil Request parameter","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","dave@cheney.net","bradfitz@golang.org"],"owner_email":"taruti@taruti.net","private":false,"base_url":"","owner":"taruti","subject":"code review 9821043: net/http: Make ReadResponse work with a nil Request par...","created":"2013-05-28 06:08:04.586350","patchsets":[1,2001,5001],"modified":"2013-06-18 16:11:10.484770","closed":false,"issue":9821043},{"description":"go.net/spdy: simplify ReadFrame and WriteFrame\n\nAlso simplifies read, write frame helpers.\nThis CL is just a preparation for the upcoming CLs that fix\nframe validation tests.","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","bradfitz@golang.org","dave@cheney.net","kr@xph.us"],"owner_email":"mikioh.mikioh@gmail.com","private":false,"base_url":"","owner":"mikio","subject":"code review 7325046: go.net/spdy: simplify ReadFrame and WriteFrame","created":"2013-02-15 01:26:49.195370","patchsets":[2001,5001,8001,17001,13002,26001],"modified":"2013-06-18 15:34:24.004300","closed":false,"issue":7325046},{"description":"    encoding/csv: add arbitrary quote character support\n\nThis is inspired by the quotechar option in python's csv package. It came\nup in a go project I am working on, so I figured I may as well add the\nfunctionality. The change is relatively straightforward, but as this is my\nfirst code submission to golang, I'd appreciate any and all advice anyone\nhas to offer.\n\nAlso, I'm not very happy with writer.go:67. That seems like a dumb way to\ndo what needs to be done, but I can't really think of a better way, I hope\nthose wiser than me can come up with something, or at least reassure me\nthat it isn't too bad. ;D","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","r@golang.org","bradfitz@golang.org"],"owner_email":"peter@thepicard.org","private":false,"base_url":"","owner":"peterfaiman","subject":"code review 9157043:     encoding/csv: add arbitrary quote character support","created":"2013-05-03 01:40:50.533550","patchsets":[1,2001,5001,12001],"modified":"2013-06-18 02:39:26.410360","closed":false,"issue":9157043},{"description":"runtime: memclr the finalizers' call frame\n\nFixes issue 5348.","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","cshapiro@google.com","bradfitz@golang.org","dave@cheney.net","dvyukov@google.com"],"owner_email":"dneil@google.com","private":false,"base_url":"","owner":"dneil","subject":"code review 8848045: runtime: memclr the finalizers' call frame","created":"2013-04-24 21:46:21.724110","patchsets":[1,2001,4001,12001,1005],"modified":"2013-06-18 02:37:59.011020","closed":false,"issue":8848045},{"description":"go/types: really output log traces for debugging NetBSD/386 test timeouts","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","iant@golang.org","dave@cheney.net","iant@google.com","bradfitz@golang.org"],"owner_email":"minux.ma@gmail.com","private":false,"base_url":"","owner":"minux","subject":"code review 7129045: go/types: really output log traces for debugging NetBSD...","created":"2013-01-16 19:01:35.057030","patchsets":[1,2001,4001],"modified":"2013-06-17 21:45:37.912950","closed":false,"issue":7129045},{"description":"cmd/gofmt: Slice expressions can now be simplified using \"gofmt -s\".\n\nslice of the form: b[0:n]\ncan be simplified to: b[:n]\n\nslice of the form: b[i:len(b)]\ncan be simplified to: b[i:]\n\nFixes issue 4314.","cc":["golang-dev@googlegroups.com"],"reviewers":["bradfitz@golang.org","dave@cheney.net","minux.ma@gmail.com","gri@golang.org"],"owner_email":"r.eklind.87@gmail.com","private":false,"base_url":"","owner":"u","subject":"code review 6813049: cmd/gofmt: Slice expressions can now be simplified usin...","created":"2012-10-29 14:34:23.295890","patchsets":[1,2001,4001,7002],"modified":"2013-06-17 21:36:19.472100","closed":false,"issue":6813049},{"description":"exp/inotify: Replace the eventBits struct with map type\n\nSee http://codereview.appspot.com/6427057/","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","rsc@golang.org","minux.ma@gmail.com","bradfitz@golang.org"],"owner_email":"atomaths@gmail.com","private":false,"base_url":"","owner":"Jongmin Kim","subject":"code review 6442070: exp/inotify: Replace the eventBits struct with map type","created":"2012-08-01 11:08:10.605570","patchsets":[1,2001,4002,8001,3,12001,3002,3003,6005],"modified":"2013-06-17 21:22:48.990360","closed":false,"issue":6442070},{"description":"exp/inotify: Replace the eventBits struct with map type\n\nSee http://codereview.appspot.com/6427057/","cc":["golang-dev@googlegroups.com","rsc@golang.org"],"reviewers":["golang-dev@googlegroups.com","bradfitz@golang.org"],"owner_email":"atomaths@gmail.com","private":false,"base_url":"","owner":"Jongmin Kim","subject":"exp/inotify: Replace the eventBits struct with map type","created":"2012-08-01 10:44:08.879580","patchsets":[1,2001,5001,1002],"modified":"2013-06-17 21:20:18.407350","closed":false,"issue":6452076},{"description":"cmd/ld: emit eabi and vfp ARM attributes for ELF files.\nFixes issue 5640.","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","bradfitz@golang.org"],"owner_email":"minux.ma@gmail.com","private":false,"base_url":"","owner":"minux","subject":"cmd/ld: emit eabi and vfp ARM attributes for ELF files.","created":"2013-06-10 20:51:35.258970","patchsets":[1,2001],"modified":"2013-06-17 21:06:43.772660","closed":false,"issue":10171043},{"description":"      go.talk: Content fixes for GAE deployment.  appcfg.py wants to compile\neverything, and select.go has some errors in it preventing deploment. The\npart being cleaned-up here isn't present in the content of the presentation:\n\n      http://talks.golang.org/2012/concurrency.slide#32","cc":["golang-dev@googlegroups.com","bradfitz@golang.org"],"reviewers":[],"owner_email":"couchmoney@gmail.com","private":false,"base_url":"","owner":"wathiede","subject":"code review 7689044:       go.talk: Content fixes for GAE deployment.  appcf...","created":"2013-03-11 16:48:12.072600","patchsets":[1,2001,5001,10001],"modified":"2013-06-17 21:03:49.680900","closed":false,"issue":7689044},{"description":"compress/flate: reduce tiny allocs done by encoder.\n\nbenchmark                          old allocs   new allocs    delta\nBenchmarkEncodeDigitsSpeed1e4             942           91  -90.34%\nBenchmarkEncodeDigitsSpeed1e5            1919          178  -90.72%\nBenchmarkEncodeDigitsSpeed1e6           18539         1517  -91.82%\nBenchmarkEncodeDigitsDefault1e4           734          100  -86.38%\nBenchmarkEncodeDigitsDefault1e5          1958          193  -90.14%\nBenchmarkEncodeDigitsDefault1e6         17338         1426  -91.78%\nBenchmarkEncodeDigitsCompress1e4          734          100  -86.38%\nBenchmarkEncodeDigitsCompress1e5         1958          193  -90.14%\nBenchmarkEncodeDigitsCompress1e6        17338         1426  -91.78%\nBenchmarkEncodeTwainSpeed1e4             1865          109  -94.16%\nBenchmarkEncodeTwainSpeed1e5             3943          211  -94.65%\nBenchmarkEncodeTwainSpeed1e6            31279         1595  -94.90%\nBenchmarkEncodeTwainDefault1e4           1811          103  -94.31%\nBenchmarkEncodeTwainDefault1e5           3708          199  -94.63%\nBenchmarkEncodeTwainDefault1e6          26738         1330  -95.03%\nBenchmarkEncodeTwainCompress1e4          1811          103  -94.31%\nBenchmarkEncodeTwainCompress1e5          3693          190  -94.86%\nBenchmarkEncodeTwainCompress1e6         26902         1333  -95.04%\n\nbenchmark                           old bytes    new bytes    delta\nBenchmarkEncodeDigitsSpeed1e4         1469438      1453920   -1.06%\nBenchmarkEncodeDigitsSpeed1e5         1490898      1458961   -2.14%\nBenchmarkEncodeDigitsSpeed1e6         1858819      1542407  -17.02%\nBenchmarkEncodeDigitsDefault1e4       1465903      1454160   -0.80%\nBenchmarkEncodeDigitsDefault1e5       1491841      1459361   -2.18%\nBenchmarkEncodeDigitsDefault1e6       1825424      1531545  -16.10%\nBenchmarkEncodeDigitsCompress1e4      1465903      1454160   -0.80%\nBenchmarkEncodeDigitsCompress1e5      1491681      1459361   -2.17%\nBenchmarkEncodeDigitsCompress1e6      1825424      1531545  -16.10%\nBenchmarkEncodeTwainSpeed1e4          1485308      1454400   -2.08%\nBenchmarkEncodeTwainSpeed1e5          1526065      1459878   -4.34%\nBenchmarkEncodeTwainSpeed1e6          2066627      1536296  -25.66%\nBenchmarkEncodeTwainDefault1e4        1484380      1454240   -2.03%\nBenchmarkEncodeTwainDefault1e5        1521793      1459558   -4.09%\nBenchmarkEncodeTwainDefault1e6        1977504      1523388  -22.96%\nBenchmarkEncodeTwainCompress1e4       1484380      1454240   -2.03%\nBenchmarkEncodeTwainCompress1e5       1521457      1459318   -4.08%\nBenchmarkEncodeTwainCompress1e6       1980000      1523609  -23.05%","cc":["golang-dev@googlegroups.com"],"reviewers":["imkrasin@gmail.com","golang-dev@googlegroups.com","bradfitz@golang.org"],"owner_email":"remyoudompheng@gmail.com","private":false,"base_url":"","owner":"remyoudompheng","subject":"code review 10006043: compress/flate: reduce tiny allocs done by encoder.","created":"2013-06-04 14:26:39.597960","patchsets":[1,2001,1002],"modified":"2013-06-17 20:06:55.591540","closed":false,"issue":10006043},{"description":"testing, cmd/go: ignore -test.cpu when -test.benchmem","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","bradfitz@golang.org"],"owner_email":"minux.ma@gmail.com","private":false,"base_url":"","owner":"minux","subject":"code review 6843114: testing, cmd/go: ignore -test.cpu when -test.benchmem","created":"2012-11-26 18:33:10.960530","patchsets":[1,2001,4001],"modified":"2013-06-17 18:44:22.651250","closed":false,"issue":6843114},{"description":"net: fix LookupNS on Plan 9\r\n\r\nuse correct field count when resolving nameservers via /net/dns on Plan 9.\r\n\r\nwe incorrectly check for 4 fields instead of 3 when parsing the result of /net/dns, and get no results","cc":["golang-dev@googlegroups.com","ality@pbrane.org"],"reviewers":[],"owner_email":"mischief@offblast.org","private":false,"base_url":"","owner":"mischief","subject":"net: fix LookupNS on Plan 9","created":"2013-06-11 10:57:15.380470","patchsets":[1,2001,5001],"modified":"2013-06-17 18:38:17.285180","closed":false,"issue":10182044},{"description":"testing: use -bench flag and fix flags doc link","cc":["golang-dev@googlegroups.com","r@golang.org","kr@xph.us"],"reviewers":[],"owner_email":"dpiddy@gmail.com","private":false,"base_url":"","owner":"dpiddy","subject":"code review 10263043: testing: use -bench flag and fix flags doc link","created":"2013-06-13 13:40:21.115220","patchsets":[2001,5001,14001,16001],"modified":"2013-06-17 14:32:36.143010","closed":false,"issue":10263043},{"description":"go.net/ipv6: fix overlooked execution reorder in test\n\nThe test expects to run opt.clear just after opt.set.\n\nFixes issue 5696.","cc":["golang-dev@googlegroups.com"],"reviewers":["dave@cheney.net","fullung@gmail.com"],"owner_email":"mikioh.mikioh@gmail.com","private":false,"base_url":"","owner":"mikio","subject":"code review 10285044: go.net/ipv6: fix overlooked execution reorder in test","created":"2013-06-15 04:39:29.532260","patchsets":[1,2001,5001,11001],"modified":"2013-06-17 00:55:23.214010","closed":false,"issue":10285044},{"description":"runtime: refactor mallocgc\nMake it accept type, combine flags.\nSeveral reasons for the change:\n1. mallocgc and settype must be atomic wrt GC\n2. settype is called from only one place now\n3. it will help performance (eventually settype\nfunctionality must be combined with markallocated)\n4. flags are easier to read now (no mallocgc(sz, 0, 1, 0) anymore)","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","iant@golang.org","nightlyone@googlemail.com"],"owner_email":"dvyukov@google.com","private":false,"base_url":"","owner":"dvyukov","subject":"code review 10136043: runtime: refactor mallocgc","created":"2013-06-09 17:05:54.433560","patchsets":[1,2001,5001,15001,18001,21001,24001,27001],"modified":"2013-06-15 11:58:42.178910","closed":false,"issue":10136043},{"description":"go.net/ipv4: delete examples\n\nExisting examples bother godoc or similar applications that\nuse testing package because the examples don't conform testing\nAPI. They also don't appear on godoc or similars.\n\nOn the other hand the package document shows enough examples.\nThere's no reason to hold bad examples that don't help users.\n\nUpdate issue 3684","cc":["golang-dev@googlegroups.com"],"reviewers":["dave@cheney.net","minux.ma@gmail.com"],"owner_email":"mikioh.mikioh@gmail.com","private":false,"base_url":"","owner":"mikio","subject":"code review 10288044: go.net/ipv4: delete exmaples","created":"2013-06-15 04:55:39.117170","patchsets":[1,2001,4001],"modified":"2013-06-15 08:22:53.927610","closed":false,"issue":10288044},{"description":"strconv: corrected several bad references to err.Error in doc comments.","cc":["golang-dev@googlegroups.com","r@golang.org"],"reviewers":[],"owner_email":"cespare@gmail.com","private":false,"base_url":"","owner":"cespare","subject":"code review 10253051: strconv: corrected several bad references to err.Error ...","created":"2013-06-13 23:56:55.927390","patchsets":[1,2001,4001],"modified":"2013-06-14 00:04:50.794540","closed":false,"issue":10253051},{"description":"go.tools/go.types/typemap: a map whose keys are types.\n\ngo/types.Type has an equivalence relation (IsIdentical) that\nis not consistent with its linguistic equivalence relation\n(==).  Therefore extra work is required to build a map whose\nkeys are types.  This package does that work.\n\nHas simple unit test.  More tests might be good.","cc":["golang-dev@googlegroups.com"],"reviewers":["gri@golang.org"],"owner_email":"adonovan@google.com","private":false,"base_url":"","owner":"adonovan","subject":"code review 9649044: go.tools/go.types/typemap: a map whose keys are types.","created":"2013-05-29 18:44:21.405810","patchsets":[1,2001,4001,8001,11001],"modified":"2013-06-13 18:43:55.163150","closed":false,"issue":9649044},{"description":"misc/vim: Adding flag-guarding for Vim commands\r\n\r\nDefault behavior is the same as before, but now a user may selectively disable some commands.\r\n\r\nAlso: deleted the mappings for import.vim.\r\n\r\nTested: by trying the commands for fmt, import and godoc in succession to make sure they still work. Also, ran test.sh in ftplugin/go.","cc":["golang-dev@googlegroups.com","dsymonds@golang.org"],"reviewers":[],"owner_email":"jhoak@google.com","private":false,"base_url":"","owner":"jhoak","subject":"code review 10124043: misc/vim: Adding flag-guarding for Vim mappings and commands","created":"2013-06-07 21:23:31.384220","patchsets":[1,2001,5001,13001,21001,25001],"modified":"2013-06-13 05:07:15.776770","closed":false,"issue":10124043},{"description":"cmd/vet: Add a 'chan' check to govet.\n\nThe 'chan' check flags params of type 'chan' that could be written as '<-chan' or 'chan<-' instead.","cc":["golang-dev@googlegroups.com","gobot@golang.org"],"reviewers":["r@golang.org","remyoudompheng@gmail.com"],"owner_email":"tbreisacher@google.com","private":false,"base_url":"","owner":"Tyler Breisacher (Google)","subject":"code review 10127043: cmd/vet: Add a 'chan' check to govet.","created":"2013-06-08 04:13:43.483380","patchsets":[4002,13001],"modified":"2013-06-10 23:31:35.724680","closed":false,"issue":10127043},{"description":"test/run: process build tags like go/build","cc":["golang-dev@googlegroups.com"],"reviewers":["bradfitz@golang.org","dave@cheney.net","rsc@golang.org"],"owner_email":"ality@pbrane.org","private":false,"base_url":"","owner":"ality","subject":"code review 10001045: test/run: process build tags like go/build","created":"2013-06-05 08:04:18.100420","patchsets":[1,2001,5001,4002,12001,15001,16001],"modified":"2013-06-10 21:28:25.040610","closed":false,"issue":10001045},{"description":"database/sql: Add time.Time -> string/[]byte/RawBytes conversion\n\nThis conversion is intentional. It behaves just like fmt.Print(time) since it makes use of the same String() method","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","rsc@golang.org","bradfitz@golang.org"],"owner_email":"google@julienschmidt.com","private":false,"base_url":"","owner":"julienschmidt","subject":"code review 7880045: database/sql: Add time.Time -> string/[]byte/RawBytes c...","created":"2013-03-24 04:55:38.925170","patchsets":[1,2001,5001],"modified":"2013-06-10 19:07:21.078560","closed":false,"issue":7880045},{"description":"go.tools/go/types: Factories for all objects","cc":["adonovan@google.com","golang-dev@googlegroups.com"],"reviewers":["axwalk@gmail.com"],"owner_email":"gri@golang.org","private":false,"base_url":"","owner":"gri","subject":"go.tools/go/types: Factories for all objects","created":"2013-05-31 21:15:59.983430","patchsets":[1,2001,5001,8001,9001],"modified":"2013-06-08 15:22:33.008660","closed":false,"issue":9794044},{"description":"cmd/ld, cmd/5l, cmd/6l, cmd/8l: fix s->type comparisons (should use bitmask SMASK)","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","rsc@golang.org","bradfitz@golang.org"],"owner_email":"minux.ma@gmail.com","private":false,"base_url":"","owner":"minux","subject":"code review 6855109: cmd/ld, cmd/5l, cmd/6l, cmd/8l: fix s->type comparisons...","created":"2012-11-27 22:13:02.217600","patchsets":[1,5001,3020,13001],"modified":"2013-06-07 09:03:21.109440","closed":false,"issue":6855109},{"description":"doc/contribute: add \"Understanding the extension\" section\n\nFixes issue 4996","cc":["golang-dev@googlegroups.com","r@golang.org","bradfitz@golang.org"],"reviewers":[],"owner_email":"patrick.allen.higgins@gmail.com","private":false,"base_url":"","owner":"pah","subject":"code review 7547043: doc/contribute: add \"Understanding the extension\" section","created":"2013-03-06 23:37:52.448770","patchsets":[1,2001,5001,15001,18001],"modified":"2013-06-06 04:09:49.487360","closed":false,"issue":7547043},{"description":"net/http: allow graceful server shutdown\n\nAdds Close method to Server.\nFixes issue 4674.\n\nBenchmark results from Intel(R) Core(TM)2 Duo CPU     P8700  @ 2.53GHz linux/amd64:\n\nbenchmark            old ns/op    new ns/op    delta\nBenchmarkServer         164948       169391   +2.69%\nBenchmarkServer-2       139033       142452   +2.46%\n","cc":["golang-dev@googlegroups.com"],"reviewers":["bradfitz@golang.org"],"owner_email":"patrick.allen.higgins@gmail.com","private":false,"base_url":"","owner":"pah","subject":"code review 7273049: net/http: allow graceful server shutdown","created":"2013-02-04 20:04:59.556360","patchsets":[1,2001,4001,7001],"modified":"2013-06-06 04:07:52.059700","closed":false,"issue":7273049},{"description":"    transport/apikey: properly clone request struct\n\nFixes issues 33.","cc":["golang-dev@googlegroups.com","adg@golang.org","bradfitz@golang.org"],"reviewers":[],"owner_email":"proppy@google.com","private":false,"base_url":"","owner":"proppy","subject":"code review 9995043:     transport/apikey: properly clone request struct","created":"2013-06-04 05:50:10.308770","patchsets":[1,2001,5001],"modified":"2013-06-06 00:13:03.861260","closed":false,"issue":9995043},{"description":"encoding/xml: fix unmarshalling tags with namespace\n\nAdd a failing test: TestUnmarshalXmlTagWithNamespace and fixed\nunmarshal tags with namespace.\n\nxml.Unmarshal does not unmarshal tags like <sparkle:releaseNotesLink> for\n`xml:\"sparkel:releaseNotesLink\"`.\n\nfor example:\n\n        type Item struct {\n                        // ...\n                        SparkleReleaseNotesLink string `xml:\"sparkle:releaseNotesLink\"`\n        }\n\nThe above code does not work.\n\nIf we simply write:\n\n        type Item struct {\n                        // ...\n                        SparkleReleaseNotesLink string `xml:\"releaseNotesLink\"`\n        }\n\nthis works, but when encoding XML back, we still need the namespace.\n(encoding tags with namespace works fine currently)\n\nIn the unmarshal func in read.go, it replaces the namespace name with namespace value, so\nthat we can't compare the fieldinfo with the token.\n\nI did a minimal approach to solve this:\n\n1. Added a nsResolve map[string]string to resolve namespace quickly and\n   didn't change the original behavior of translating namespace name.\n\n2. When the field don't match with the token, check the token.Space\n   If the token.Space exists, resolve the namespace value and compare it (\"ns:field\")\n   with the field name.\n\nBy doing this, we can marshal the struct into into XML correctly,\nThe below XML is generated by xml.Unmarshal func (with this fix):\n\n    <channel>\n        <item>\n            <title>Version 2.0 (2 bugs fixed; 3 new features)</title>\n            <sparkle:releaseNotesLink>http://you.com/app/2.0.html</sparkle:releaseNotesLink>\n            <enclosure url=\"http://you.com/app/Your Great App 2.0.zip\"\n                length=\"1623481\" sparkle:version=\"2.0\"\n                sparkle:dsaSignature=\"BAFJW4B6B1K1JyW30nbkBwainOzrN6EQuAh\"></enclosure>\n        </item>\n    </channel>","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","dave@cheney.net","bradfitz@golang.org","rsc@golang.org"],"owner_email":"cornelius.howl@gmail.com","private":false,"base_url":"","owner":"c9s","subject":"code review 7350048: encoding/xml: fix unmarshalling tags with namespace","created":"2013-02-18 17:02:31.929640","patchsets":[2001,10001,14001,10002,21001,28001,32001,33003,23003,28002,45001],"modified":"2013-06-05 22:24:00.505410","closed":false,"issue":7350048},{"description":"sort: add Reverse\n\nThis CL adds a Reverse sort to the package sort.\nThe new names are quite verbose...\nFixes issue 4511","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","bradfitz@golang.org","rsc@golang.org","gri@golang.org","dave@cheney.net","minux.ma@gmail.com"],"owner_email":"remigius.gieben@gmail.com","private":false,"base_url":"","owner":"Miek Gieben","subject":"sort: add Reverse","created":"2012-12-10 13:00:59.344670","patchsets":[2001,24002,27001],"modified":"2013-06-05 22:21:09.874930","closed":false,"issue":6909059},{"description":"unicode/utf8: add Width() to work as wcwidth(). return 1 for ambiguous width\ncharacter.","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","remyoudompheng@gmail.com","minux.ma@gmail.com","rsc@golang.org","r@golang.org","bradfitz@golang.org"],"owner_email":"mattn.jp@gmail.com","private":false,"base_url":"","owner":"mattn","subject":"code review 6782117: unicode/utf8: add Width() to work as wcwidth(). return ...","created":"2012-11-26 06:19:46.420910","patchsets":[1,2001,3001,5001,12001,15001,18001,22001],"modified":"2013-06-05 20:59:35.261780","closed":false,"issue":6782117},{"description":"testing: document that example output must use line comments\n\nFixes issue 4812.","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","adg@golang.org","bradfitz@golang.org"],"owner_email":"duperray.olivier@gmail.com","private":false,"base_url":"","owner":"dupoxy","subject":"code review 7396051: testing: document that example output must use line comments","created":"2013-02-21 21:15:38.757480","patchsets":[1,2001,3002,9001,12001],"modified":"2013-06-05 20:55:47.535280","closed":false,"issue":7396051},{"description":"goauth2: Fix test for default redirect URL","cc":["adg@golang.org","golang-dev@googlegroups.com"],"reviewers":[],"owner_email":"willnorris@google.com","private":false,"base_url":"","owner":"willnorris","subject":"goauth2: Fix test for default redirect URL","created":"2013-06-05 01:31:29.718090","patchsets":[1,2001],"modified":"2013-06-05 03:14:12.577060","closed":false,"issue":9979044},{"description":"goauth2: Allow for empty redirect URLs.\r\n\r\nThe previous behavior was to use the value \"oob\" when no redirect URL\r\nwas specified, which prevented clients from actually having an empty\r\nredirect URL.  This is a breaking changing for any clients that are\r\ndoing out-of-band code exchange, and were relying on this behavior.  The\r\nfix for these clients is to manually specify a RedirectURL of \"oob\".\r\n\r\nFixes 17","cc":["adg@golang.org","golang-dev@googlegroups.com"],"reviewers":[],"owner_email":"willnorris@google.com","private":false,"base_url":"","owner":"willnorris","subject":"goauth2: Allow for empty redirect URLs.","created":"2013-06-04 22:53:22.516460","patchsets":[1,5001],"modified":"2013-06-04 23:13:57.817020","closed":false,"issue":9824044},{"description":"encoding/xml: Omit parent tags if value is empty. Fixes issue 4168.","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","rsc@golang.org","gustavo.niemeyer@canonical.com"],"owner_email":"vladimir.mihailenco@gmail.com","private":false,"base_url":"","owner":"vmihailenco","subject":"code review 6569067: encoding/xml: Omit parent tags if value is empty. Fixes...","created":"2012-09-27 17:26:23.608690","patchsets":[1,2001,5001],"modified":"2013-06-04 23:06:21.327590","closed":false,"issue":6569067},{"description":"cmd/5g: ??","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","dsymonds@golang.org"],"owner_email":"minux.ma@gmail.com","private":false,"base_url":"","owner":"minux","subject":"cmd/5g: ??","created":"2013-03-03 14:16:58.689930","patchsets":[1,2001],"modified":"2013-06-04 23:04:41.316580","closed":false,"issue":7457046},{"description":"cmd/api: new testdata for http://codereview.appspot.com/6742050/","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","bradfitz@golang.org"],"owner_email":"VisualFC@gmail.com","private":false,"base_url":"","owner":"visualfc","subject":"code review 6752050: cmd/api: new testdata for http://codereview.appspot.com...","created":"2012-10-23 08:56:05.121300","patchsets":[1,2001,1002,8001],"modified":"2013-06-04 22:41:57.895240","closed":false,"issue":6752050},{"description":"api: remove hard coded, add flag -a(alldecls) -e(allmethods). now -a flag work for GOROOT any package.","cc":["gobot@golang.org","golang-dev@googlegroups.com"],"reviewers":["gri@golang.org","bradfitz@golang.org"],"owner_email":"VisualFC@gmail.com","private":false,"base_url":"","owner":"visualfc","subject":"code review 6742050: api: remove hard coded, add flag -a(alldecls) -e(allmet...","created":"2012-10-19 05:23:13.211330","patchsets":[1,1001,2002,9001,1002,3002,15001,19001,24001,29001],"modified":"2013-06-04 22:40:55.455040","closed":false,"issue":6742050},{"description":"container/list: fix typo","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","fullung@gmail.com","dave@cheney.net","minux.ma@gmail.com","nigeltao@golang.org","khr@golang.org"],"owner_email":"taj.khattra@gmail.com","private":false,"base_url":"","owner":"taj","subject":"code review 6682046: container/list: fix typo","created":"2012-10-13 16:50:27.452410","patchsets":[1,2001,3,8001,9002],"modified":"2013-06-04 21:55:17.570910","closed":false,"issue":6682046},{"description":"crypto/cipher: Added BlockMode for ECB Encryption and Decryption.","cc":["gobot@golang.org","golang-dev@googlegroups.com"],"reviewers":["agl@chromium.org","agl@golang.org","rsc@golang.org"],"owner_email":"fasching.matthias@gmail.com","private":false,"base_url":"","owner":"fasmat","subject":"code review 7860047: crypto/cipher: Added BlockMode for ECB Encryption and D...","created":"2013-03-24 11:55:56.472560","patchsets":[1,2001,5001,4005,10001,20001,23001],"modified":"2013-06-04 16:46:23.363340","closed":false,"issue":7860047},{"description":"encoding/xml: allow attributes stored in pointers to be marshaled.\n\nFixes issue 5334.","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","dave@cheney.net","rsc@golang.org"],"owner_email":"deemok@googlemail.com","private":false,"base_url":"","owner":"deemok","subject":"code review 8653047: encoding/xml: allow attributes stored in pointers to be...","created":"2013-04-23 04:01:10.094780","patchsets":[1,10001,13001,17001,21001,24001],"modified":"2013-06-04 00:51:53.988100","closed":false,"issue":8653047},{"description":"runtime: fix signal handling on Plan 9\n\nThis CL does two things:\n\n1. Reorganizes the signal handling code in preparation for\n   changes which add support for os/signal on Plan 9.\n\n2. Fixes a regression introduced in revision 4cb93e2900d0.\n\n   That revision changed runtime\u00b7memmove to use SSE MOVOU\n   instructions for sizes between 17 and 256 bytes. We were\n   using memmove to save a copy of the note string during\n   the note handler. The Plan 9 kernel does not allow the\n   use of floating point in note handlers (which includes\n   MOVOU since it touches the XMM registers).\n\n   Arguably, runtime\u00b7memmove should not be using MOVOU when\n   GO386=387 but that wouldn't help us on amd64. It's very\n   important that we guard against any future changes so we\n   use a simple copy loop instead.","cc":["golang-dev@googlegroups.com"],"reviewers":["ality@pbrane.org","paurea@gmail.com","lucio.dere@gmail.com","seed@mail.nanosouffle.net","r@golang.org","cnielsen@pobox.com","minux.ma@gmail.com","jeremyjackins@gmail.com"],"owner_email":"ality@pbrane.org","private":false,"base_url":"","owner":"ality","subject":"code review 9796043: runtime: fix signal handling on Plan 9","created":"2013-05-26 21:32:11.353830","patchsets":[1,2001,5001,30010,48001,58001],"modified":"2013-06-03 23:09:20.310240","closed":false,"issue":9796043},{"description":"encoding/json: faster encoding\n\nThe old code was caching per-type struct field info. Instead,\ncache type-specific encoding funcs, tailored for that\nparticular type to avoid unnecessary reflection at runtime.\nOnce the machine is built once, future encodings of that type\njust run the func.\n\nbenchmark               old ns/op    new ns/op    delta\nBenchmarkCodeEncoder     48424939     36975320  -23.64%\n\nbenchmark                old MB/s     new MB/s  speedup\nBenchmarkCodeEncoder        40.07        52.48    1.31x\n\nAdditionally, the numbers seem stable now at ~52 MB/s, whereas\nthe numbers for the old code were all over the place: 11 MB/s,\n40 MB/s, 13 MB/s, 39 MB/s, etc.  In the benchmark above I compared\nagainst the best I saw the old code do.","cc":["golang-dev@googlegroups.com","r@golang.org","gobot@golang.org"],"reviewers":["rsc@golang.org"],"owner_email":"bradfitz@golang.org","private":false,"base_url":"","owner":"bradfitz","subject":"code review 9129044: encoding/json: faster encoding","created":"2013-05-04 16:50:59.840140","patchsets":[1,2001,5001,3,9001],"modified":"2013-06-03 13:54:13.879350","closed":false,"issue":9129044},{"description":"os: Added documentation to the Exit function\n\nAdded documentation for the Exit function indicating that when calling Exit,\nany defer statements that have been called never actually get executed.\nFixes issue 4101.","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","r@golang.org","0xjnml@gmail.com","lucio.dere@gmail.com","rsc@golang.org","gri@golang.org","lvd@google.com"],"owner_email":"KLNusbaum@gmail.com","private":false,"base_url":"","owner":"kln","subject":"code review 6610066: os: Added documentation to the Exit function","created":"2012-10-07 21:30:58.779430","patchsets":[1,2001,4001,14001,17001],"modified":"2013-06-02 05:28:04.336860","closed":false,"issue":6610066},{"description":"net, runtime: integrated network poller for freebsd, openbsd\n\nAlso this CL rearranges runtime-integrated network poller shims due\nto the notification breakages on some BSD platforms; it looks like\nthe system call listen is not good for edge triggered notification\nmode of kqueue.\n\n- Splits pollDesc.Init into pollDesc.Init and pollDesc.Start,\n  runtime_pollOpen into runtime_pollOpen and runtime_pollStart\n- Adds startPoller method to netFD\n- Still keeps edge-triggered notification mode\n- Removes use of EV_RECEIPT which is not supported yet on OpenBSD,\n  NetBSD\n\nFixes issue 5199.\n\nfreebsd/amd64, virtual machine:\nbenchmark                           old ns/op    new ns/op    delta\nBenchmarkTCP4OneShot                   175432       173216   -1.26%\nBenchmarkTCP4OneShot-2                 181052       181908   +0.47%\nBenchmarkTCP4OneShotTimeout            178037       174710   -1.87%\nBenchmarkTCP4OneShotTimeout-2          179906       179926   +0.01%\nBenchmarkTCP4Persistent                 58034        39751  -31.50%\nBenchmarkTCP4Persistent-2               59014        39648  -32.82%\nBenchmarkTCP4PersistentTimeout          59907        40322  -32.69%\nBenchmarkTCP4PersistentTimeout-2        62286        41225  -33.81%\nBenchmarkTCP6OneShot                   216144       211782   -2.02%\nBenchmarkTCP6OneShot-2                 216447       219059   +1.21%\nBenchmarkTCP6OneShotTimeout            219868       213609   -2.85%\nBenchmarkTCP6OneShotTimeout-2          220008       223968   +1.80%\nBenchmarkTCP6Persistent                 68439        49701  -27.38%\nBenchmarkTCP6Persistent-2               68976        49793  -27.81%\nBenchmarkTCP6PersistentTimeout          69789        49439  -29.16%\nBenchmarkTCP6PersistentTimeout-2        71843        49074  -31.69%\n\ndarwin/amd64, real machine (already supported, no perf. degrade):\nbenchmark                           old ns/op    new ns/op    delta\nBenchmarkTCP4OneShot                  1839902      1842661   +0.15%\nBenchmarkTCP4OneShot-2                1833274      1832395   -0.05%\nBenchmarkTCP4OneShotTimeout           1845627      1845820   +0.01%\nBenchmarkTCP4OneShotTimeout-2         1830647      1830824   +0.01%\nBenchmarkTCP4Persistent                 20224        20201   -0.11%\nBenchmarkTCP4Persistent-2               18790        18889   +0.53%\nBenchmarkTCP4PersistentTimeout          20159        20223   +0.32%\nBenchmarkTCP4PersistentTimeout-2        18811        18797   -0.07%\nBenchmarkTCP6OneShot                  1850856      1850492   -0.02%\nBenchmarkTCP6OneShot-2                1840238      1840273   +0.00%\nBenchmarkTCP6OneShotTimeout           1851997      1852656   +0.04%\nBenchmarkTCP6OneShotTimeout-2         1841146      1841888   +0.04%\nBenchmarkTCP6Persistent                 21308        21358   +0.23%\nBenchmarkTCP6Persistent-2               19822        20225   +2.03%\nBenchmarkTCP6PersistentTimeout          21295        21367   +0.34%\nBenchmarkTCP6PersistentTimeout-2        19801        19850   +0.25%","cc":["golang-dev@googlegroups.com"],"reviewers":["dvyukov@google.com","minux.ma@gmail.com","dave@cheney.net","bradfitz@golang.org"],"owner_email":"mikioh.mikioh@gmail.com","private":false,"base_url":"","owner":"mikio","subject":"code review 8264043: net, runtime: integrated network poller for freebsd, openbsd","created":"2013-04-02 17:01:07.525230","patchsets":[99001,102001],"modified":"2013-05-31 10:29:13.553200","closed":false,"issue":8264043},{"description":"misc/vim: Fixes syntax highlighting for hex. literals with `X`\n\nHexadecimal literals in Go may use `x` or `X`. The current vim\nsyntax highlighting script only highlights hex. literals using `x`,\nthis change also highlights ones using `X`.","cc":["golang-dev@googlegroups.com","gobot@golang.org"],"reviewers":["dsymonds@golang.org"],"owner_email":"oinksoft.com@gmail.com","private":false,"base_url":"","owner":"Oinksoft","subject":"code review 9816043: misc/vim: Fixes syntax highlighting for hex. literals w...","created":"2013-05-28 00:12:40.032640","patchsets":[1,2001,5001],"modified":"2013-05-29 03:01:05.907090","closed":false,"issue":9816043},{"description":"runtime: Fix runtime\u00b7netpoll() to call runtime\u00b7netpollready() only once\nper event.","cc":["golang-dev@googlegroups.com","minux.ma@gmail.com"],"reviewers":[],"owner_email":"bill.neubauer@gmail.com","private":false,"base_url":"","owner":"bill.neubauer","subject":"code review 9808043: runtime: Fix runtime\u00b7netpoll() to call runtime\u00b7netpol...","created":"2013-05-27 13:08:14.822450","patchsets":[1,2001,5001],"modified":"2013-05-27 21:03:21.159520","closed":false,"issue":9808043},{"description":"effective_go.html: Fix two links\nThis fixes two intra-page \"type assertion\" links that were broken in\ndifferent ways.","cc":["golang-dev@googlegroups.com","dsymonds@golang.org"],"reviewers":[],"owner_email":"bgmerrell@gmail.com","private":false,"base_url":"","owner":"bgmerrell","subject":"code review 9797043: effective_go.html: Fix two links","created":"2013-05-27 00:13:23.846300","patchsets":[1,2001,3],"modified":"2013-05-27 01:00:18.586680","closed":false,"issue":9797043},{"description":"go.talks: inline the reader package in each main,\nsince playground doesn't currently handle packages\nin other directories.  Move the real implementation\nto a separate realmain.go, so that the talk examples\ndon't depend on the external rss package.  Update\nthe slides to reference fakemain.go.","cc":["adg@golang.org","golang-dev@googlegroups.com"],"reviewers":["gri@golang.org"],"owner_email":"sameer@golang.org","private":false,"base_url":"","owner":"Sameer Ajmani","subject":"code review 9679044: go.talks: inline the reader package in each main,","created":"2013-05-23 01:13:47.524650","patchsets":[1,2001,5001,12001,19001,22001],"modified":"2013-05-25 23:19:05.737090","closed":false,"issue":9679044},{"description":"runtime: explicit init of runtime-gdb helpers\n\nIf using other gdb python scripts loaded before Go's gdb-runtime.py\nand that have a different init prototype:\nTraceback (most recent call last):\n  File \"/usr/lib/go/src/pkg/runtime/runtime-gdb.py\", line 446, in <module>\n    k()\nTypeError: __init__() takes exactly 3 arguments (1 given)\n\nThe problem is that gdb keeps all python scripts in the same namespace,\nso vars() contains them. To avoid that, load helpers one by one.","cc":["golang-dev@googlegroups.com","gobot@golang.org"],"reviewers":["iant@golang.org"],"owner_email":"ail@google.com","private":false,"base_url":"","owner":"ail","subject":"code review 9752044: runtime: explicit init of runtime-gdb helpers","created":"2013-05-25 14:08:03.990780","patchsets":[1,2001,5001,2002],"modified":"2013-05-25 17:21:15.389250","closed":false,"issue":9752044},{"description":"rsa: Implementation of RSASSA-PSS signature algorithm and its corresponding test cases\n\nImplementation of RSASSA-PSS signature algorithm described in RFC 3447 and its corresponding test cases.\n\nThere are two test files:\n- emsa_test.go: Test on EMSA-PSS encoding/decoding scheme\n- pssvect_test.go: Test on the signature algorithm itself. All cases are generated from the test vectors provided by RSA Lab, which can be downloaded from ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-1/pkcs-1v2-1-vec.zip","cc":["agl@chromium.org","agl@golang.org","gobot@golang.org","golang-dev@googlegroups.com","r@golang.org"],"reviewers":[],"owner_email":"monnand@gmail.com","private":false,"base_url":"","owner":"Nan Deng","subject":"code review 9438043: rsa: Implementation of RSASSA-PSS signature algorithm a...","created":"2013-05-15 21:53:47.564590","patchsets":[1,2001,5001,12001,15001,16004,20001,24002,27002,31001,33004],"modified":"2013-05-23 15:10:51.588430","closed":false,"issue":9438043},{"description":"go.talks: Google I/O talk: High Performance Apps with Go on App Engine.","cc":["adg@golang.org","golang-dev@googlegroups.com"],"reviewers":[],"owner_email":"dsymonds@golang.org","private":false,"base_url":"","owner":"dsymonds","subject":"code review 9518045: Google I/O talk: High Performance Apps with Go on App E...","created":"2013-05-19 23:10:06.318450","patchsets":[1,2001,4001],"modified":"2013-05-21 21:51:34.877010","closed":false,"issue":9518045},{"description":"runtime: support for runtime integrated poller for NetBSD\r\n\r\nNOTE: this one is built upon CL 8264043.\r\nnearly all changes to pkg/runtime/netpoll_* are from that CL.\r\nexcept for the change about kevent_udata_type.\r\n\r\nNetBSD/amd64 and NetBSD/386 are fully tested.\r\nNetBSD/arm's net package has passed -short test.","cc":["golang-dev@googlegroups.com"],"reviewers":["mikioh.mikioh@gmail.com"],"owner_email":"minux.ma@gmail.com","private":false,"base_url":"","owner":"minux","subject":"runtime: support for runtime integrated poller for NetB...","created":"2013-05-20 16:33:52.261830","patchsets":[1,3,4001,4],"modified":"2013-05-20 18:19:01.129230","closed":false,"issue":9545044},{"description":"net: refactor FileConn, FileListener and FilePacketConn tests\n\nThis CL replaces the previous redundant socket paramter tests with\nnew tests that do handoff between net.FileConn, os.File and net.Conn.","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","fullung@gmail.com","bradfitz@golang.org"],"owner_email":"mikioh.mikioh@gmail.com","private":false,"base_url":"","owner":"mikio","subject":"code review 8819044: net: refactor FileConn, FileListener and FilePacketConn...","created":"2013-04-20 14:48:54.778960","patchsets":[19001,22001],"modified":"2013-05-20 15:13:38.139200","closed":false,"issue":8819044},{"description":"go.net/spdy: make framer tests more robust\n\n- consolidates test functions, converts into table-driven cases\n- fixes zero stream-id handling on WindowUpdate\n- re-enables zero stream-id test\n- renames to framer_test.go","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","dave@cheney.net","kr@xph.us"],"owner_email":"mikioh.mikioh@gmail.com","private":false,"base_url":"","owner":"mikio","subject":"code review 7380043: go.net/spdy: make framer tests more robust","created":"2013-02-20 09:03:24.436310","patchsets":[1,2001,4001,10001],"modified":"2013-05-20 06:31:26.550920","closed":false,"issue":7380043},{"description":"cmd/gc: avoid a temporary when inlining s = append(s, x)\n\npkg strconv:\nbenchmark                              old ns/op    new ns/op    delta\nBenchmarkAppendFloatDecimal                  203          198   -2.46%\nBenchmarkAppendFloat                         363          348   -4.13%\nBenchmarkAppendFloatExp                      335          307   -8.36%\nBenchmarkAppendFloatNegExp                   335          318   -5.07%\nBenchmarkAppendFloatBig                      526          480   -8.75%\nBenchmarkAppendFloat32Integer                203          216   +6.40%\nBenchmarkAppendFloat32ExactFraction          307          293   -4.56%\nBenchmarkAppendFloat32Point                  367          349   -4.90%\nBenchmarkAppendFloat32Exp                    318          302   -5.03%\nBenchmarkAppendFloat32NegExp                 322          306   -4.97%\nBenchmarkAppendFloat64Fixed1                 243          247   +1.65%\nBenchmarkAppendFloat64Fixed2                 283          293   +3.53%\nBenchmarkAppendFloat64Fixed3                 248          264   +6.45%\nBenchmarkAppendFloat64Fixed4                 287          277   -3.48%\nBenchmarkAppendInt                          5676         5640   -0.63%\nBenchmarkAppendUint                         1448         1445   -0.21%\n\npkg time:\nbenchmark                              old ns/op    new ns/op    delta\nBenchmarkFormat                              876          884   +0.91%\nBenchmarkFormatNow                           832          845   +1.56%\n\nStack size is reduced in many cases:\n\nstrconv before:\n(src/pkg/strconv/ftoa.go:334) TEXT    fmtE+0(SB),$344-120\n(src/pkg/strconv/ftoa.go:401) TEXT    fmtF+0(SB),$232-112\n(src/pkg/strconv/quote.go:13) TEXT    quoteWith+0(SB),$560-40\n(src/pkg/strconv/quote.go:293) TEXT    Unquote+0(SB),$200-48\n\nstrconv after:\n(src/pkg/strconv/ftoa.go:334) TEXT    fmtE+0(SB),$104-120\n(src/pkg/strconv/ftoa.go:401) TEXT    fmtF+0(SB),$88-112\n(src/pkg/strconv/quote.go:13) TEXT    quoteWith+0(SB),$208-40\n(src/pkg/strconv/quote.go:293) TEXT    Unquote+0(SB),$176-48\n\ntime before:\n(src/pkg/time/format.go:290) TEXT    appendUint+0(SB),$272-64\n(src/pkg/time/format.go:341) TEXT    formatNano+0(SB),$152-72\n(src/pkg/time/format.go:382) TEXT    Time.Format+0(SB),$720-56\n\ntime after:\n(src/pkg/time/format.go:290) TEXT    appendUint+0(SB),$200-64\n(src/pkg/time/format.go:341) TEXT    formatNano+0(SB),$128-72\n(src/pkg/time/format.go:382) TEXT    Time.Format+0(SB),$416-56","cc":["golang-dev@googlegroups.com"],"reviewers":["golang-dev@googlegroups.com","bradfitz@golang.org","daniel.morsing@gmail.com","dave@cheney.net"],"owner_email":"remyoudompheng@gmail.com","private":false,"base_url":"","owner":"remyoudompheng","subject":"code review 9360043: cmd/gc: avoid a temporary when inlining s = append(s, x)","created":"2013-05-12 15:11:08.787570","patchsets":[1,3,4001,11001],"modified":"2013-05-19 02:02:37.425750","closed":false,"issue":9360043},{"description":"TODO: HOLD","cc":["golang-dev@googlegroups.com"],"reviewers":[],"owner_email":"r@golang.org","private":false,"base_url":"","owner":"r","subject":"TODO: HOLD","created":"2013-05-17 20:34:04.195560","patchsets":[1],"modified":"2013-05-17 20:34:04.358560","closed":false,"issue":9500044},{"description":"go.tools: add go/types, ssa, and cmd/vet\nThey will be deleted from their current homes once this has landed.\nChanges made to import paths to make the code compile, and to find\nerrchk in the right place in cmd/vet's Makefile.\nTODO in a later CL: tidy up vet.","cc":["golang-dev@googlegroups.com"],"reviewers":[],"owner_email":"r@golang.org","private":false,"base_url":"","owner":"r","subject":"go.tools: add go/types, ssa, and cmd/vet","created":"2013-05-17 19:56:00.023590","patchsets":[1],"modified":"2013-05-17 19:56:00.311670","closed":false,"issue":9494043},{"description":"go.tools: add go/types, ssa, and cmd/vet\nThey will be deleted from their current homes once this has landed.\nChanges made to import paths to make the code compile, and to find\nerrchk in the right place in cmd/vet's Makefile.\nTODO in a later CL: tidy up vet.","cc":["golang-dev@googlegroups.com"],"reviewers":[],"owner_email":"r@golang.org","private":false,"base_url":"","owner":"r","subject":"go.tools: add go/types, ssa, and cmd/vet","created":"2013-05-17 19:47:52.468250","patchsets":[1],"modified":"2013-05-17 19:47:52.743480","closed":false,"issue":9492043},{"description":"go.exp/go/types: add NewStruct function\n\nThis is necessary for creating an\nImporter external to go/types.","cc":["gri@golang.org","golang-dev@googlegroups.com"],"reviewers":[],"owner_email":"axwalk@gmail.com","private":false,"base_url":"","owner":"axw","subject":"code review 9469043: go.exp/go/types: add NewStruct function","created":"2013-05-17 14:39:33.971900","patchsets":[1,2001],"modified":"2013-05-17 17:25:00.514380","closed":false,"issue":9469043},{"description":"go.net/websocket: allow server configurable\r\n\r\nAdd websocket.Server to configure WebSocket server handler.\r\n\r\n- Config.Header is additional headers to send, so you can use it\r\n  to send cookies or so.\r\n  To read cookies, you can use Conn.Request().Header.\r\n- factor out Handshake.\r\n  You can set func to check origin, subprotocol etc.\r\n  Handler checks origin by default.\r\n\r\nFixes issue 4198.\r\nFixes issue 5178.","cc":["golang-dev@googlegroups.com","mikioh.mikioh@gmail.com","crobin@nekoo.com"],"reviewers":["everton.marques@gmail.com","johan.bilien@gmail.com","rogpeppe@gmail.com"],"owner_email":"ukai@google.com","private":false,"base_url":"","owner":"ukai","subject":"code review 8731044: go.net/websocket: allow server configurable","created":"2013-04-13 05:27:48.343460","patchsets":[1,2001,5001,12001,16001],"modified":"2013-05-16 02:23:43.172630","closed":false,"issue":8731044},{"description":"reflect: use visit structure for map key in DeepEqual","cc":["golang-dev@googlegroups.com","bradfitz@golang.org","jonathan@titanous.com","r@golang.org"],"reviewers":[],"owner_email":"robert.hencke@gmail.com","private":false,"base_url":"","owner":"rh","subject":"code review 8730044: reflect: use visit structure for map key in DeepEqual","created":"2013-04-12 23:43:17.298700","patchsets":[1,2001,2002,4001],"modified":"2013-05-15 21:51:01.279100","closed":false,"issue":8730044},{"description":"testing/quick: fix for aliased types, delete duplicate uint8 test, and fix randFloat64() to give random numbers from (-math.MaxFloat64, math.MaxFloat64).","cc":["r@golang.org","agl@golang.org","agl@chromium.org","bradfitz@golang.org","golang-dev@googlegroups.com"],"reviewers":[],"owner_email":"jhseu@google.com","private":false,"base_url":"","owner":"jhseu","subject":"code review 9296046: testing/quick: fix for aliased types. delete duplicate ...","created":"2013-05-14 21:56:44.790520","patchsets":[1,2001,3001,11001],"modified":"2013-05-15 00:15:04.519250","closed":false,"issue":9296046},{"description":"image: minor update of comments.","cc":["golang-dev@googlegroups.com","iant@golang.org","bradfitz@golang.org","nigeltao@golang.org"],"reviewers":[],"owner_email":"r.eklind.87@gmail.com","private":false,"base_url":"","owner":"u","subject":"code review 9408044: image: minor update of comments.","created":"2013-05-14 10:17:07.813680","patchsets":[1,2001,5001,12001,15001],"modified":"2013-05-14 20:28:24.518530","closed":false,"issue":9408044}]}